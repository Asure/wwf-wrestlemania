TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    **************************************************************
       2                    *
       3                    * Software:     Mike Lynch, Jason Skiles, Mark Turmell
       4                    * Initiated:    04/04/95
       5                    *
       6                    * Modified:
       7                    *
       8                    * COPYRIGHT (C) 1992 WILLIAMS ELECTRONICS GAMES, INC.
       9                    *
      10                    **************************************************************
      11                    
      12                            .file   "award.asm"
      14                            .width  132
      15                            .option b,d,l,t
      16                            .mnolist
      17                    
      18                    
      19                            .include        "macros.h"
      20                            .include        "mproc.equ"             ;Mproc equates
      21                            .include        "display.equ"           ;Display proc equates
      22                            .include        "gsp.equ"               ;Gsp asm equates
      23                            .include        "sys.equ"
      24                            .include        "wwfsec.equ"
      25                            .include        "game.equ"
      26                            .include        "audit.equ"
      27                            .include        "plyr.equ"
      28                            .include        "anim.equ"
      29                            .include        "sound.h"
      30                            .include        "ring.equ"
      31                            .include        "sound.equ"
      32                            .include        "damage.equ"
      33                            .include        "jjxm.h"
      34                    
      35                            .include        "imgtbl.glo"
      36                            .include        "fontsimg.glo"
      37                            .include        "bgndtbl.glo"
      38                            .include        "miscimg.glo"
      39                    
      40                    
      41              0000  SHOW_ACCUM_ICONS        .set    0
      42                    
      43              0002  BLOCK_ICONS             .equ    2       ; 2 single rnd 5 for 2
      44              0005  DBL_BLOCK_ICONS         .equ    5
      45              0002  PERFECT_ICONS           .equ    2
      46              0005  DBL_PERFECT_ICONS       .equ    5
      47              0002  BIG_COMEBACK_ICONS      .equ    2
      48              0001  TWO_ROUND_SWEEP_ICONS   .equ    1
      49              0003  FIVE_WINS_ICONS         .equ    3
      50              0001  QUICK_VICTORY_ICONS     .equ    1
      51                    
      52              0000  POWER_MOVE_ICONS        .equ    0
      53              0000  REVERSALS_ICONS         .equ    0
      54              0000  HIGH_RISK_MOVE_ICONS    .equ    0
      55              0000  COMBOS_STARTED_ICONS    .equ    0
      56              0000  COMBO_REVERSALS_ICONS   .equ    0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    2

      57              0000  COMBO_BREAKER_ICONS     .equ    0
      58              0000  ULTRA_COMBOS_ICONS      .equ    0
      59              0000  FIRST_HIT_ICONS         .equ    0
      60              0000  DEFEAT_HUMAN_ICONS      .equ    0
      61              0000  GAME_COMPLETE_ICONS     .equ    0
      62              0000  SUPER_QWK_VICTORY_ICONS .equ    0
      63              0000  VERY_QWK_VICTORY_ICONS  .equ    0
      64                    
      65              0040  MAX_BONUS_BARS          .equ    (NUM_AWARDS*2)
      66              0006  BONUS_RECORD_SIZE       .equ    6
      67              00e6  BONUS_BAR_YPOS          .equ    230
      68              0014  BONUS_BAR_VEL           .equ    20
      69              0014  BONUS_BAR_YSPACE        .equ    20
      70              00b4  BONUS_BAR_END_XPOS      .equ    180
      71              ff9b  BONUS_LTEXT_START_XPOS  .equ    -((BONUS_BAR_END_XPOS+22)/2)
      72              0065  BONUS_RTEXT_START_XPOS  .equ    -BONUS_LTEXT_START_XPOS
      73                    
      74              ffea  BONUS_ICON1_START_XPOS  .equ    -22
      75              ffdb  BONUS_ICON2_START_XPOS  .equ    -37
      76              ffcc  BONUS_ICON3_START_XPOS  .equ    -52
      77                    
      78                    
      79                    ;fer know
      80              00a3  LIFE_MAX        .equ    163             ;green pixels in life bar
      81                    
      82              0051  BONUS_MSG_XPOS1         .equ    81
      83              0141  BONUS_MSG_XPOS2         .equ    321
      84              00c6  BONUS_MSG_YPOS          .equ    198
      85              0051  BONUS_ICON_XPOS1        .equ    BONUS_MSG_XPOS1
      86              0141  BONUS_ICON_XPOS2        .equ    BONUS_MSG_XPOS2
      87              00dc  BONUS_ICON_YPOS         .equ    BONUS_MSG_YPOS+22
      88                    
      89                    
      90              0038  PROG_BICON_XPOS .equ    56
      91              005d  PROG_BICON_YPOS .equ    93
      92                    
      93                            .if 0
      94                    DUFUS_BOX_YPOS  .equ    144
      95                    DUFUS_BOX_RXPOS .equ    399-(119+40)
      96                    DUFUS_BOX_LXPOS .equ    40
      97                            .else
      98              00a7  DUFUS_BOX_YPOS  .equ    144+23
      99              012c  DUFUS_BOX_RXPOS .equ    399-(59+40)
     100              0063  DUFUS_BOX_LXPOS .equ    40+59
     101                            .endif
     102                    
     103                    
     104              00aa  BOX_OUT_SOUND   .equ    0aah
     105              00b6  ZIP_IN_SOUND    .equ    0b6h
     106                    
     107                    
     108              0001  POWERUP_CODE_ON .set    1
     109                    
     110                    
     111              0001  PUNCH   .equ    1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    3

     112              0002  BLOCK   .equ    2
     113              0004  SUPERP  .equ    4
     114              0008  KICK    .equ    8
     115                    
     116                    
     117              0020  UP      .equ    32
     118              0040  DOWN    .equ    64
     119              0080  LEFT    .equ    128
     120              0100  RIGHT   .equ    256
     121                    
     122                    
     123              00d2  PU_START_Y      .equ    210
     124              fff1  PU_BAR_YSPACE   .equ    -15
     125                    
     126              007d  PU_LEND_X       .equ    125
     127              0113  PU_REND_X       .equ    400-PU_LEND_X
     128              ffc2  PU_LTEXT_XPOS   .equ    -(PU_LEND_X/2)
     129              01ce  PU_RTEXT_XPOS   .equ    400+(PU_LEND_X/2)
     130              0019  PU_BAR_VELOCITY .equ    25
     131                    
     132              0e10  LPUBAROID       .equ    TYPVELALWAYS+010h
     133              0e11  RPUBAROID       .equ    TYPVELALWAYS+011h
     134                    
     135              0000  MKDEBUG         .equ    0
     136                    
     137                    
     138                    PUPWAITSWITCH   .macro  SWITCHES,FAILADDR
     139                    lp?
     140                            SLEEPK  1
     141                            dec     a11
     142                            jrz     :FAILADDR:
     143                            move    a8,a0
     144                            calla   get_but_val_down
     145                            move    a0,a1
     146                            move    a8,a0
     147                            calla   get_stick_val_down
     148                            sll     5,a0
     149                            or      a1,a0
     150                            jrz     lp?
     151                            cmpi    :SWITCHES:,a0
     152                            jrnz    lp?
     153                    
     154                            .endm
     155                    
     156                    
     157                    ;performed by each player.  They are used at the end of a match to award
     158                    ;icons to the player.  These are cleared before each match.
     159                    ;
     160                    ;The pxrnd_award arrays are used to keep track of awards on a per round basis.
     161                    ;The pxmtch_award arrays are used to keep track of awards on a per match basis.
     162                    ;The pxws_award arrays are used to keep track of awards on a per winstreak basis.
     163                    ;
     164 00000000                   BSSX    p1rnd_award,    8*NUM_AWARDS    ;player 1 round awards
     165 00000000                   BSSX    p2rnd_award,    8*NUM_AWARDS    ;player 2 round awards
     166 00000000                   BSSX    p1mtch_award,   8*NUM_AWARDS    ;player 1 match awards
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    4

     167 00000000                   BSSX    p2mtch_award,   8*NUM_AWARDS    ;player 2 match awards
     168 00000000                   BSSX    p1ws_award,     16*NUM_AWARDS   ;player 1 winstreak awards
     169 00000000                   BSSX    p2ws_award,     16*NUM_AWARDS   ;player 2 winstreak awards
     170 00000000                   BSSX    award_ok_to_die,32
     171 00000000                   BSSX    pcomeback,      32*2            ;Player big comeback status
     172 00000000                   BSSX    dboxes_on,32
     173 00000000                   BSSX    powerup_requests,32
     174 00000000                   BSSX    powerup_die,32
     175 00000000                   BSSX    show_options_die,16
     176 00000000                   BSSX    do_show_options,16
     177                    
     178 00000000                   BSSX    blocking_off,16
     179 00000000                   BSSX    ring_out_on,16
     180 00000000                   BSSX    buddy_mode_on,16
     181 00000000                   BSSX    move_names_on,16
     182 00000000                   BSSX    drone_meters_on,16
     183 00000000                   BSSX    instant_combos_on,16
     184 00000000                   BSSX    hyper_speed_on,16
     185 00000000                   BSSX    no_ring_on,16
     186 00000000                   BSSX    mk3_tip_number,16
     187 00000970                   .bss    mk_cycram,16*16
     188                            
     189 00000a70                   .bss    pwsarm,         32*2            ;Player big comeback status
     190 00000ab0                   .bss    ptotal,         32*2            ;Player total Icon counts
     191 00000af0                   .bss    bar_obj_ptr,    MAX_BONUS_BARS*BONUS_RECORD_SIZE*32*2
     192 00006af0                   .bss    bonus_bar_size, 32
     193 00006b10                   .bss    picon,          32*3*MAX_BONUS_BARS*2
     194 00009b10                   .bss    player_award_state,32
     195 00000000                   BSSX    p1icon_total,   32
     196 00000000                   BSSX    p2icon_total,   32
     197 00009b70                   .bss    icon_digit_adjust,32
     198 00009b90                   .bss    p1bicon,32*8
     199 00009c90                   .bss    p2bicon,32*8
     200 00009d90                   .bss    icon_string_width,32
     201 00009db0                   .bss    progress_icons,32*8
     202 00009eb0                   .bss    p1dufus_obj,32*2
     203 00009ef0                   .bss    p2dufus_obj,32*2
     204 00009f30                   .bss    p1dufus_msg_flags,32
     205 00009f50                   .bss    p2dufus_msg_flags,32
     206 00000000                   BSSX    p1powerup_request,32
     207 00000000                   BSSX    p2powerup_request,32
     208 00000000                   BSSX    p1pins,16
     209 00000000                   BSSX    p2pins,16
     210                    
     211                            .ref    match_time,ck_live_teammates
     212                            .ref    PSTATUS2,royal_rumble
     213                            .ref    process_ptrs
     214                            .ref    p1winstreak
     215                            .ref    p2winstreak
     216                            .ref    get_health
     217                            .ref    p1oldwinstreak
     218                            .ref    p2oldwinstreak
     219                            .ref    FLASHME,FINAL_PTR
     220                            .ref    triple_sound
     221                            .ref    BEGINOBJ_TBL
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    5

     222                            .ref    get_but_val_down
     223                            .ref    get_stick_val_down
     224                            .ref    get_all_buttons_cur
     225                            .ref    END_MATCH_SPEECH
     226                            .ref    fade_down
     227                            .ref    pal_clean
     228                            .ref    fade_up
     229                            .ref    GET_AUD
     230                            .ref    STORE_AUDIT
     231                            .ref    is_8_on_1
     232                            .ref    wrestler_count
     233                            .ref    in_finish_move
     234                            .ref    NUM_OPPS
     235                    
     236                    
     237                    ***************************************************************
     238                    * rst_awards - Used to zero out per round and/or per match award arrays
     239                    * Clears both players award arrays!!!
     240                    * a14 = pointer to awards array to clear
     241                    *
     242 00000000            SUBR   rst_awards
     243 00000000                   PUSH    a0,a1
     244 00000020     09c0          movi    (NUM_AWARDS*2)-1,a0
         00000030     003f  
     245 00000040     5621          clr     a1
     246 00000050           fxworst_award_loop
     247 00000050     8c2e          movb    a1,*a14
     248 00000060     110e          addk    8,a14
     249 00000070     3c60          dsjs    a0,fxworst_award_loop
     250 00000080     09e0          movi    pcomeback,a0
         00000090 00000820- 
     251 000000b0     9220          move    a1,*a0+,L
     252 000000c0     8220          move    a1,*a0,L
     253 000000d0                   PULL    a0,a1
     254 000000f0     0960          rets
     255                    
     256                    
     257 00000100            SUBRP  accumulate_player_awards
     258 00000100     05ae          move    @royal_rumble,a14
         00000110 00000000! 
     259 00000130     cb18          jrnz    fxwoapa_done
     260 00000140                   X32     a0
     261 00000150     0b20          addi    process_ptrs,a0
         00000160 00000000! 
     262 00000180     8601          move    *a0,a1,L
     263 00000190     ca12          jrz     fxwoapa_done
     264 000001a0     4ca0          move    a5,a0
     265 000001b0     0b00          addi    (BLOCKS_AWD*8),a0
         000001c0     0018  
     266 000001d0     8e01          movb    *a0,a1
     267 000001e0     ca02          jrz     fxwono_blocks
     268 000001f0     5621          clr     a1
     269 00000200     c001          jruc    fxwodo_accumulate
     270 00000210           fxwono_blocks
     271 00000210     1841          movk    BLOCK_ICONS,a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    6

     272 00000220           fxwodo_accumulate
     273 00000220     8c20          movb    a1,*a0
     274 00000230     09c2          movi    NUM_RND_AWARDS,a2       ; number of awards
         00000240     0018  
     275 00000250           fxwoacc_awards_loop
     276 00000250     8ec3          movb    *a6,a3                  ; Get current value of match award
     277 00000260     8ea4          movb    *a5,a4                  ; Get per round award
     278 00000270     4083          add     a4,a3                   ; Add to per match award
     279 00000280     8c66          movb    a3,*a6                  ; Store back to per match award
     280 00000290     1106          addk    8,a6                    ; Increment round awards pointer
     281 000002a0     1105          addk    8,a5                    ; Increment match awards pointer
     282 000002b0     3ce2          dsjs    a2,fxwoacc_awards_loop  ; Keep going until all are accumulated
     283 000002c0           fxwoapa_done
     284 000002c0     0960          rets
     285                    
     286                    
     287                    ***************************************************************
     288                    * accumulate_awards - accumulates the per round awards into the
     289                    * per match awards.
     290                    *
     291 000002d0            SUBR   accumulate_awards
     292 000002d0                   PUSH    a0,a1,a2,a3,a4,a5,a6    ; Save reggies I'm gonna trash
     293                    
     294 000002f0     5600          clr     a0
     295 00000300     09e5          movi    p1rnd_award,a5
         00000310 00000000- 
     296 00000330     09e6          movi    p1mtch_award,a6
         00000340 00000200- 
     297 00000360     0d3f          callr   accumulate_player_awards
         00000370     ffd8  
     298                    
     299 00000380     1820          movk    1,a0
     300 00000390     09e5          movi    p2rnd_award,a5
         000003a0 00000100- 
     301 000003c0     09e6          movi    p2mtch_award,a6
         000003d0 00000300- 
     302 000003f0     0d3f          callr   accumulate_player_awards
         00000400     ffcf  
     303                    
     304 00000410                   PULL    a0,a1,a2,a3,a4,a5,a6    ; Restore reggies
     305 00000430     09ee          movi    p1rnd_award,a14         ; Clear out per round awards
         00000440 00000000- 
     306 00000460     0d3f          callr   rst_awards
         00000470     ffb8  
     307 00000480     0960          rets
     308                            
     309                            
     310                    ***************************************************************
     311                    * rst_winstreak_awards - Used to zero out per winstreak award arrays
     312                    * a14 = pointer to player winstreak award table to clear
     313                    *
     314 00000490            SUBR   rst_winstreak_awards
     315 00000490                   PUSH    a0,a1
     316 000004b0     09c0          movi    NUM_AWARDS-1,a0
         000004c0     001f  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    7

     317 000004d0     5621          clr     a1
     318 000004e0           tdblrst_ws_award_loop
     319 000004e0     902e          move    a1,*a14+,W
     320 000004f0     3c40          dsjs    a0,tdblrst_ws_award_loop
     321 00000500                   PULL    a0,a1
     322 00000520     0960          rets
     323                    
     324                    ***************************************************************
     325                    *
     326                    * This array contains the number of ICONS to award for each item in
     327                    * the awards stuff.  This array MUST be in the same order as the
     328                    * awards indecies in game.equ
     329                    *
     330 00000530            SUBRP  award_icons:
     331 00000530       00          .byte   POWER_MOVE_ICONS        ;POWER_MOVE_AWD 
     332 00000538       00          .byte   REVERSALS_ICONS         ;REVERSAL_AWD   
     333 00000540       00          .byte   HIGH_RISK_MOVE_ICONS    ;HIGH_RISK_AWD  
     334 00000548       02          .byte   BLOCK_ICONS             ;BLOCKS_AWD     
     335 00000550       00          .byte   COMBOS_STARTED_ICONS    ;COMBOS_AWD     
     336 00000558       00          .byte   COMBO_REVERSALS_ICONS   ;COMBO_REV_AWD  
     337 00000560       00          .byte   COMBO_BREAKER_ICONS     ;COMBO_BRKR_AWD 
     338 00000568       00          .byte   ULTRA_COMBOS_ICONS      ;UCOMBOS_AWD    
     339 00000570       02          .byte   PERFECT_ICONS           ;PERFECT_AWD    
     340 00000578       00          .byte   FIRST_HIT_ICONS         ;FIRST_HIT_AWD  
     341 00000580       02          .byte   BIG_COMEBACK_ICONS      ;COMEBACK_AWD   
     342 00000588       00          .byte   SUPER_QWK_VICTORY_ICONS ;SUPER_QUICK_AWD
     343 00000590       00          .byte   VERY_QWK_VICTORY_ICONS  ;VERY_QUICK_AWD 
     344 00000598       01          .byte   QUICK_VICTORY_ICONS     ;QUICK_AWD      
     345 000005a0       00          .byte   DEFEAT_HUMAN_ICONS      ;DFT_HUMAN_AWD  
     346 000005a8       00          .byte   0                       ;Not used
     347 000005b0       00          .byte   0                       ;Not used
     348 000005b8       00          .byte   0                       ;Not used
     349 000005c0       00          .byte   0                       ;Not used
     350 000005c8       00          .byte   0                       ;Not used
     351 000005d0       00          .byte   0                       ;Not used
     352 000005d8       00          .byte   0                       ;Not used
     353 000005e0       00          .byte   0                       ;Not used
     354 000005e8       00          .byte   0                       ;Not used
     355 000005f0       05          .byte   DBL_PERFECT_ICONS       ;DBL_PERFECT_AWD
     356 000005f8       01          .byte   TWO_ROUND_SWEEP_ICONS   ;TWO_RND_AWD    
     357 00000600       00          .byte   0                       ;Not used
     358 00000608       00          .byte   0                       ;Not used
     359 00000610       00          .byte   GAME_COMPLETE_ICONS     ;GAME_CMPLT_AWD
     360 00000618       03          .byte   FIVE_WINS_ICONS         ;FIVE_WINS_AWD  
     361 00000620       00          .byte   0                       ;Not used
     362 00000628       00          .byte   0                       ;Not used
     363 00000630                   .even
     364                    
     365                    ***************************************************************
     366                    * round_award - adds in round ICONS for a player.
     367                    * a0 = pointer to player data.
     368                    * a10 = award index.
     369                    *
     370 00000630            SUBR   round_award
     371 00000630                   PUSH    a9,a8
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    8

     372 00000650     b409          move    *a0(PLYRNUM),a9,W       ; Get the player number
         00000660     0580  
     373 00000670     0b49          cmpi    2,a9                    ; Is this a human player
         00000680     fffd  
     374 00000690     c513          jrge    eyqkra_out                      ; br = nope - get out
     375 000006a0                   X8      a10                     ; Mult award index by 8
     376 000006b0     4d48          move    a10,a8
     377 000006c0     ae09          movb    *a0(PLYR_SIDE),a9       ; What side are we ?
         000006d0     05b0  
     378 000006e0     ca04          jrz     eyqkcks_rnd_p1          ; br = player 1
     379 000006f0     0b2a          addi    p2rnd_award,a10         ; add player 2 round table base to index
         00000700 00000100- 
     380 00000720     c003          jruc    eyqkcks_rnd_go          ; increment counter
     381 00000730           eyqkcks_rnd_p1
     382 00000730     0b2a          addi    p1rnd_award,a10         ; add player 2 round table base to index
         00000740 00000000- 
     383 00000760           eyqkcks_rnd_go
     384 00000760     0b28          addi    award_icons,a8
         00000770 00000530' 
     385 00000790     8f08          movb    *a8,a8                  ; Get # ICONs to award
     386 000007a0     8f49          movb    *a10,a9                 ; Get current value
     387 000007b0     4109          add     a8,a9                   ; Add em in
     388 000007c0     8d2a          movb    a9,*a10                 ; Put it back
     389 000007d0           eyqkra_out      PULL    a9,a8                   ; Restore A9
     390 000007f0     0960          rets                            ; Get the hell out
     391                    
     392                    
     393                    ***************************************************************
     394                    * match_award - adds round ICONS to match ICONS total
     395                    * a0 = pointer to player data.
     396                    * a10 = award index.
     397                    *
     398 00000800            SUBR   match_award
     399 00000800                   PUSH    a9,a8
     400 00000820     b409          move    *a0(PLYRNUM),a9,W       ; Get the player number
         00000830     0580  
     401 00000840     0b49          cmpi    2,a9                    ; Is this a human player
         00000850     fffd  
     402 00000860     c513          jrge    vjghma_out                      ; br = nope - get out
     403 00000870                   X8      a10                     ; Mult award index by 8
     404 00000880     4d48          move    a10,a8
     405 00000890     ae09          movb    *a0(PLYR_SIDE),a9       ; What side are we ?
         000008a0     05b0  
     406 000008b0     ca04          jrz     vjghcks_match_p1                ; br = player 1
     407 000008c0     0b2a          addi    p2mtch_award,a10        ; add player 2 round table base to index
         000008d0 00000300- 
     408 000008f0     c003          jruc    vjghcks_match_go                ; increment counter
     409 00000900           vjghcks_match_p1
     410 00000900     0b2a          addi    p1mtch_award,a10        ; add player 2 round table base to index
         00000910 00000200- 
     411 00000930           vjghcks_match_go
     412 00000930     0b28          addi    award_icons,a8
         00000940 00000530' 
     413 00000960     8f08          movb    *a8,a8                  ; Get # ICONs to award
     414 00000970     8f49          movb    *a10,a9                 ; Get current value
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    9

     415 00000980     4109          add     a8,a9                   ; Add em in
     416 00000990     8d2a          movb    a9,*a10                 ; Put it back
     417 000009a0           vjghma_out      PULL    a9,a8                   ; Restore A9
     418 000009c0     0960          rets                            ; Get the hell out
     419                    
     420                            
     421                    * NOTE - These MUST Be in the same order as the award indexes in game.equ
     422                    *
     423 000009d0            SUBRP  award_text
     424 000009d0 00000000!         .long   PWRMVEC         ; Power Move
     425 000009f0 00000000!         .long   HIGHRSKC        ; Reversal
     426 00000a10 00000000!         .long   HIGHRSKC        ; High Risk
     427 00000a30 00000000!         .long   NOBLOCK         ; No Blocks
     428 00000a50 00000000!         .long   HIGHRSKC        ; Combos Started
     429 00000a70 00000000!         .long   CMBOREVC        ; Combo Reversals
     430 00000a90 00000000!         .long   HIGHRSKC        ; Combo Breakers
     431 00000ab0 00000000!         .long   HIGHRSKC        ; Ultra Combos
     432 00000ad0 00000000!         .long   PERFECT         ; Perfect
     433 00000af0 00000000!         .long   CMBOREVC        ; First Hit
     434 00000b10 00000000!         .long   BIGCOME         ; Big Comeback
     435 00000b30 00000000!         .long   HIGHRSKC        ; Super Quick Pin
     436 00000b50 00000000!         .long   HIGHRSKC        ; Very Quick Pin
     437 00000b70 00000000!         .long   FASTVIC         ; Quick Pin
     438 00000b90 00000000!         .long   HIGHRSKC        ; Defeated Human
     439 00000bb0 00000000          .long   0               ; Not Yet Used
     440 00000bd0 00000000          .long   0               ; Not Yet Used
     441 00000bf0 00000000          .long   0               ; Not Yet Used
     442 00000c10 00000000          .long   0               ; Not Yet Used
     443 00000c30 00000000          .long   0               ; Not Yet Used
     444 00000c50 00000000          .long   0               ; Not Yet Used
     445 00000c70 00000000          .long   0               ; Not Yet Used
     446 00000c90 00000000          .long   0               ; Not Yet Used
     447 00000cb0 00000000          .long   0               ; Not Yet Used
     448 00000cd0 00000000!         .long   DOUBPERF        ; DBL Perfect
     449 00000cf0 00000000!         .long   TWOROUND        ; First Two round win
     450 00000d10 00000000          .long   0               ; Not Yet Used
     451 00000d30 00000000          .long   0               ; Not Yet Used
     452 00000d50 00000000!         .long   HIGHRSKC        ; Game Completed with < 5 buyins
     453 00000d70 00000000!         .long   FIVEWIN         ; 5 Winstreak
     454 00000d90 00000000          .long   0               ; Not Yet Used
     455 00000db0 00000000          .long   0               ; Not Yet Used
     456                    
     457                    
     458                    ;a8 = player number 0=1 1=2
     459                    ;a9 = *bar record
     460                    ;a11 = zip out on state #, zip in then die on state #+1
     461 00000dd0            SUBRP  zip_award_bar
     462 00000dd0     07aa          move    @player_award_state,a10,L
         00000de0 00009b10- 
     463 00000e00     494b          cmp     a10,a11
     464 00000e10     ca05          jrz     vjghzip_out
     465 00000e20                   SLEEPK  1
     466 00000e60     c0f6          jruc    zip_award_bar
     467                    
     468 00000e70           vjghzip_out
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   10

     469 00000e70     09c0          movi    ZIP_IN_SOUND,a0
         00000e80     00b6  
     470 00000e90     0d5f          calla   triple_sound
         00000ea0 00000000! 
     471                    
     472 00000ec0     0be9          subi    (BONUS_RECORD_SIZE*32),a9
         00000ed0     ff3f  
     473 00000ee0     102b          addk    1,a11
     474 00000ef0     b520          move    *a9((BONUS_RECORD_SIZE-1)*32),a0,W
         00000f00     00a0  
     475 00000f10     4d08          move    a8,a8
     476 00000f20     ca04          jrz     vjghp1_zip_out
     477 00000f30     09e1          movi    [-BONUS_BAR_VEL,0],a1
         00000f40 ffec0000  
     478 00000f60     c003          jruc    vjghzip_out_loop
     479 00000f70           vjghp1_zip_out
     480 00000f70     09e1          movi    [BONUS_BAR_VEL,0],a1
         00000f80 00140000  
     481 00000fa0           vjghzip_out_loop
     482 00000fa0     872a          move    *a9,a10,L                       ; Bar
     483 00000fb0     b74e          move    *a10(OXVAL),a14,L
         00000fc0     0080  
     484 00000fd0     402e          add     a1,a14
     485 00000fe0     b3ca          move    a14,*a10(OXVAL),L
         00000ff0     0080  
     486                    
     487 00001000     b72a          move    *a9(32),a10,L                   ; Text
         00001010     0020  
     488 00001020     b74e          move    *a10(OXVAL),a14,L
         00001030     0080  
     489 00001040     402e          add     a1,a14
     490 00001050     b3ca          move    a14,*a10(OXVAL),L
         00001060     0080  
     491                    
     492 00001070     b72a          move    *a9(64),a10,L                   ; 1st Icon
         00001080     0040  
     493 00001090     b74e          move    *a10(OXVAL),a14,L
         000010a0     0080  
     494 000010b0     402e          add     a1,a14
     495 000010c0     b3ca          move    a14,*a10(OXVAL),L
         000010d0     0080  
     496                    
     497 000010e0     b72a          move    *a9(96),a10,L                   ; 2nd Icon
         000010f0     0060  
     498 00001100     ca0d          jrz     vjghzout_done
     499 00001110     b74e          move    *a10(OXVAL),a14,L
         00001120     0080  
     500 00001130     402e          add     a1,a14
     501 00001140     b3ca          move    a14,*a10(OXVAL),L
         00001150     0080  
     502                    
     503 00001160     b72a          move    *a9(128),a10,L                  ; 3rd Icon
         00001170     0080  
     504 00001180     ca05          jrz     vjghzout_done
     505 00001190     b74e          move    *a10(OXVAL),a14,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   11

         000011a0     0080  
     506 000011b0     402e          add     a1,a14
     507 000011c0     b3ca          move    a14,*a10(OXVAL),L
         000011d0     0080  
     508 000011e0           vjghzout_done
     509 000011e0                   PUSHP   a0,a1
     510 00001200                   SLEEPK  1
     511 00001240                   PULLP   a0,a1
     512 00001260     872a          move    *a9,a10,L
     513 00001270     b54a          move    *a10(OXPOS),a10,W
         00001280     0090  
     514 00001290     4940          cmp     a10,a0
     515 000012a0     cbcf          jrnz    vjghzip_out_loop
     516                    
     517                    ;       JSRP    flash_bar_icons
     518                    
     519 000012b0     b52a          move    *a9(((BONUS_RECORD_SIZE-1)*32)+16),a10,W
         000012c0     00b0  
     520 000012d0     cb68          jrnz    vjghno_zip_in
     521                    
     522 000012e0           vjghwait_2nd_state      
     523 000012e0     07aa          move    @player_award_state,a10,L
         000012f0 00009b10- 
     524 00001310     494b          cmp     a10,a11
     525 00001320     c605          jrle    vjghzip_in
     526 00001330                   SLEEPK  1
     527 00001370     c0f6          jruc    vjghwait_2nd_state
     528                    
     529 00001380           vjghzip_in
     530 00001380                   SLEEPK  3
     531 000013c0     4d08          move    a8,a8
     532 000013d0     ca06          jrz     vjghp1_zip_in
     533 000013e0     09e1          movi    [BONUS_BAR_VEL,0],a1
         000013f0 00140000  
     534 00001410     09c0          movi    399,a0
         00001420     018f  
     535 00001430     c004          jruc    vjghzip_in_loop
     536 00001440           vjghp1_zip_in
     537 00001440     09e1          movi    [-BONUS_BAR_VEL,0],a1
         00001450 ffec0000  
     538 00001470     5600          clr     a0
     539 00001480           vjghzip_in_loop
     540 00001480     872a          move    *a9,a10,L                       ; Bar
     541 00001490     b74e          move    *a10(OXVAL),a14,L
         000014a0     0080  
     542 000014b0     402e          add     a1,a14
     543 000014c0     b3ca          move    a14,*a10(OXVAL),L
         000014d0     0080  
     544                    
     545 000014e0     b72a          move    *a9(32),a10,L                   ; Text
         000014f0     0020  
     546 00001500     b74e          move    *a10(OXVAL),a14,L
         00001510     0080  
     547 00001520     402e          add     a1,a14
     548 00001530     b3ca          move    a14,*a10(OXVAL),L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   12

         00001540     0080  
     549                    
     550 00001550     b72a          move    *a9(64),a10,L                   ; 1st Icon
         00001560     0040  
     551 00001570     b74e          move    *a10(OXVAL),a14,L
         00001580     0080  
     552 00001590     402e          add     a1,a14
     553 000015a0     b3ca          move    a14,*a10(OXVAL),L
         000015b0     0080  
     554                    
     555 000015c0     b72a          move    *a9(96),a10,L                   ; 2nd Icon
         000015d0     0060  
     556 000015e0     ca0d          jrz     vjghzin_done
     557 000015f0     b74e          move    *a10(OXVAL),a14,L
         00001600     0080  
     558 00001610     402e          add     a1,a14
     559 00001620     b3ca          move    a14,*a10(OXVAL),L
         00001630     0080  
     560                    
     561 00001640     b72a          move    *a9(128),a10,L                  ; 3rd Icon
         00001650     0080  
     562 00001660     ca05          jrz     vjghzin_done
     563 00001670     b74e          move    *a10(OXVAL),a14,L
         00001680     0080  
     564 00001690     402e          add     a1,a14
     565 000016a0     b3ca          move    a14,*a10(OXVAL),L
         000016b0     0080  
     566 000016c0           vjghzin_done
     567 000016c0                   PUSHP   a0,a1
     568 000016e0                   SLEEPK  1
     569 00001720                   PULLP   a0,a1
     570 00001740     872a          move    *a9,a10,L
     571 00001750     b54a          move    *a10(OXPOS),a10,W
         00001760     0090  
     572 00001770     4940          cmp     a10,a0
     573 00001780     cbcf          jrnz    vjghzip_in_loop
     574                    
     575 00001790           vjghzip_exit
     576 00001790     8720          move    *a9,a0,L                ; Bar
     577 000017a0     0d5f          calla   DELOBJ
         000017b0 00000000! 
     578 000017d0     b720          move    *a9(32),a0,L            ; Text
         000017e0     0020  
     579 000017f0     0d5f          calla   DELOBJ
         00001800 00000000! 
     580 00001820     b720          move    *a9(64),a0,L            ; 1st Icon
         00001830     0040  
     581 00001840     0d5f          calla   DELOBJ
         00001850 00000000! 
     582 00001870     b720          move    *a9(96),a0,L            ; 2nd Icon
         00001880     0060  
     583 00001890     ca09          jrz     vjghzip_die
     584 000018a0     0d5f          calla   DELOBJ
         000018b0 00000000! 
     585 000018d0     b720          move    *a9(128),a0,L           ; 3rd Icon
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   13

         000018e0     0080  
     586 000018f0     ca03          jrz     vjghzip_die
     587 00001900     0d5f          calla   DELOBJ
         00001910 00000000! 
     588 00001930           vjghzip_die
     589 00001930                   DIE
     590                    
     591 00001960           vjghno_zip_in
     592                    ;       JSRP    flash_bar_icons
     593 00001960     07aa          move    @award_ok_to_die,a10,L
         00001970 00000800- 
     594 00001990     0b0a          addi    1,a10
         000019a0     0001  
     595 000019b0     078a          move    a10,@award_ok_to_die,L
         000019c0 00000800- 
     596 000019e0           vjghno_zip_in_wait
     597 000019e0     07aa          move    @award_ok_to_die,a10,L
         000019f0 00000800- 
     598 00001a10     0b4a          cmpi    4,a10
         00001a20     fffb  
     599 00001a30     cad5          jrz     vjghzip_exit
     600 00001a40                   SLEEPK  1
     601 00001a80     c0f5          jruc    vjghno_zip_in_wait
     602                    
     603                    
     604 00001a90            SUBRP  flash_bar_icons
     605 00001a90                   PUSHP   a8,a9
     606 00001ab0     4d2a          move    a9,a10
     607 00001ac0     0b0a          addi    64,a10
         00001ad0     0040  
     608 00001ae0     09c9          movi    0101h,a9
         00001af0     0101  
     609 00001b00           vjghiflash_loop
     610 00001b00     9748          move    *a10+,a8,L
     611 00001b10     ca09          jrz     vjghfbi_exit
     612 00001b20                   CREATE  AWARD_PID,FLASHME
     613 00001ba0     c0f5          jruc    vjghiflash_loop
     614 00001bb0           vjghfbi_exit
     615 00001bb0                   SLEEPK  10
     616 00001bf0                   PULLP   a8,a9
     617 00001c10                   RETP
     618                    
     619                    
     620 00001c40            SUBRP  get_num_awards:
     621 00001c40                   PUSH    a6,a7,a8,a9,a11
     622 00001c60     5708          clr     a8
     623 00001c70     09e6          movi    award_text,a6
         00001c80 000009d0' 
     624 00001ca0     09c9          movi    NUM_AWARDS,a9
         00001cb0     0020  
     625 00001cc0           vjghgna_loop
     626 00001cc0     8f4b          movb    *a10,a11
     627 00001cd0     ca0d          jrz     vjghno_inc
     628 00001ce0     9367          move    a11,*a7+,L
     629 00001cf0     0b4b          cmpi    5,a11
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   14

         00001d00     fffa  
     630 00001d10     c502          jrge    vjghgna_big_icon
     631 00001d20     576b          clr     a11
     632 00001d30     c002          jruc    vjghgna_get_text_obj
     633 00001d40           vjghgna_big_icon
     634 00001d40     09cb          movi    1,a11
         00001d50     0001  
     635 00001d60           vjghgna_get_text_obj
     636 00001d60     9367          move    a11,*a7+,L
     637 00001d70     8ac7          move    *a6,*a7,L
     638 00001d80     0b07          addi    32,a7
         00001d90     0020  
     639 00001da0     1028          addk    1,a8
     640 00001db0           vjghno_inc
     641 00001db0     0b06          addi    32,a6
         00001dc0     0020  
     642 00001dd0     110a          addk    8,a10
     643 00001de0     3e69          dsjs    a9,vjghgna_loop
     644 00001df0     4d0a          move    a8,a10
     645 00001e00     0b48          cmpi    6,a8
         00001e10     fff9  
     646 00001e20     c601          jrle    vjghno_limit
     647 00001e30     18ca          movk    6,a10
     648 00001e40           vjghno_limit
     649 00001e40                   PULL    a6,a7,a8,a9,a11
     650 00001e60     0960          rets
     651                    
     652                    
     653                    ****************************************************************
     654                    *
     655                    * adjust_perfects - This function is called to check to see if 2 perfects
     656                    * have been registered for a match.  If so the perfects are deleted from
     657                    * a double perfect is put into the match awards and the 2 single perfects
     658                    * are removed.  This allows the double perfect to be registered in the
     659                    * winstreak accumulation and the proper icon bar to be displayed at the
     660                    * end of the match.
     661                    *
     662 00001e70            SUBRP  adjust_perfects
     663 00001e70                   PUSH    a9,a10
     664 00001e90     09e9          movi    p1mtch_award,a9
         00001ea0 00000200- 
     665 00001ec0     0b09          addi    (PERFECT_AWD*8),a9
         00001ed0     0040  
     666 00001ee0     8f2a          movb    *a9,a10                         ; How many perfects for match
     667 00001ef0     0b4a          cmpi    (PERFECT_ICONS*2),a10           ; Is it 2?
         00001f00     fffb  
     668 00001f10     cb0a          jrnz    hbvrnop1_dbl_perfect            ; br = nope
     669 00001f20     574a          clr     a10                             ; Reset match perfects
     670 00001f30     8d49          movb    a10,*a9
     671 00001f40     0be9          subi    (PERFECT_AWD*8),a9              ; Add a double perfect
         00001f50     ffbf  
     672 00001f60     0b09          addi    (DBL_PERFECT_AWD*8),a9
         00001f70     00c0  
     673 00001f80     8f2a          movb    *a9,a10
     674 00001f90     10aa          addk    DBL_PERFECT_ICONS,a10
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   15

     675 00001fa0     8d49          movb    a10,*a9
     676 00001fb0     c012          jruc    hbvrap_done
     677 00001fc0           hbvrnop1_dbl_perfect
     678 00001fc0     09e9          movi    p2mtch_award,a9
         00001fd0 00000300- 
     679 00001ff0     0b09          addi    (PERFECT_AWD*8),a9
         00002000     0040  
     680 00002010     8f2a          movb    *a9,a10
     681 00002020     0b4a          cmpi    (PERFECT_ICONS*2),a10
         00002030     fffb  
     682 00002040     cb09          jrnz    hbvrap_done
     683 00002050     574a          clr     a10
     684 00002060     8d49          movb    a10,*a9
     685 00002070     0be9          subi    (PERFECT_AWD*8),a9
         00002080     ffbf  
     686 00002090     0b09          addi    (DBL_PERFECT_AWD*8),a9
         000020a0     00c0  
     687 000020b0     8f2a          movb    *a9,a10
     688 000020c0     10aa          addk    DBL_PERFECT_ICONS,a10
     689 000020d0     8d49          movb    a10,*a9
     690 000020e0           hbvrap_done
     691 000020e0           hbvradjust_blocks
     692 000020e0     09e9          movi    p1mtch_award,a9
         000020f0 00000200- 
     693 00002110     0b09          addi    (BLOCKS_AWD*8),a9
         00002120     0018  
     694 00002130     8f2a          movb    *a9,a10                         ; How many block awards for match
     695 00002140     0b4a          cmpi    (BLOCK_ICONS*2),a10             ; Is it >= 2?
         00002150     fffb  
     696 00002160     c402          jrlt    hbvrnop1_dbl_block                      ; br = nope
     697 00002170     18aa          movk    DBL_BLOCK_ICONS,a10             ; Give bigger award for multiround no blocking
     698 00002180     8d49          movb    a10,*a9
     699 00002190           hbvrnop1_dbl_block
     700 00002190     09e9          movi    p2mtch_award,a9
         000021a0 00000300- 
     701 000021c0     0b09          addi    (BLOCKS_AWD*8),a9
         000021d0     0018  
     702 000021e0     8f2a          movb    *a9,a10
     703 000021f0     0b4a          cmpi    (BLOCK_ICONS*2),a10
         00002200     fffb  
     704 00002210     c402          jrlt    hbvrab_done
     705 00002220     18aa          movk    DBL_BLOCK_ICONS,a10
     706 00002230     8d49          movb    a10,*a9
     707 00002240           hbvrab_done
     708 00002240                   PULL    a9,a10
     709 00002260     0960          rets
     710                    
     711                    ; A8 = Player number
     712                    ; A9 = *next bar icon record
     713 00002270            SUBRP  adjust_text_position
     714 00002270                   PUSH    a9
     715 00002280     0be9          subi    ((BONUS_RECORD_SIZE-3)*32),a9   ;Point at Icon 2 object
         00002290     ff9f  
     716 000022a0           hbvradj_t_loop
     717 000022a0     8720          move    *a9,a0,L                ;Object exist ?
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   16

     718 000022b0     ca0e          jrz     hbvratp_exit            ;br = no
     719 000022c0     b60e          move    *a0(OIMG),a14,L         ;Get image pointer
         000022d0     0170  
     720 000022e0     85ce          move    *a14,a14,W              ;Get image width
     721 000022f0     4d08          move    a8,a8                   ;Player 1?
     722 00002300     cb01          jrnz    hbvrdo_tadjust          ;br = no
     723 00002310     03ae          neg     a14
     724 00002320           hbvrdo_tadjust
     725 00002320     b520          move    *a9(OXPOS),a0,W         ;Get current XPos
         00002330     0090  
     726 00002340     41c0          add     a14,a0                  ;Adjust it
     727 00002350     b009          move    a0,*a9(OXPOS),W         ;Write it back
         00002360     0090  
     728 00002370     0b09          addi    32,a9
         00002380     0020  
     729 00002390     c0f0          jruc    hbvradj_t_loop
     730 000023a0           hbvratp_exit
     731 000023a0                   PULL    a9
     732 000023b0     0960          rets
     733                    
     734                    
     735 000023c0            SUBRP  create_player_awards
     736                    
     737 000023c0     09e9          movi    bar_obj_ptr,a9
         000023d0 00000af0- 
     738 000023f0     09ea          movi    p1mtch_award,a10
         00002400 00000200- 
     739 00002420     09e7          movi    picon,a7
         00002430 00006b10- 
     740 00002450     4d08          move    a8,a8                                           ; player 1 ?
     741 00002460     ca07          jrz     hbvrdpa_p1                                              ; br = yes
     742 00002470     0b09          addi    (MAX_BONUS_BARS*BONUS_RECORD_SIZE*32),a9
         00002480     3000  
     743 00002490     0b07          addi    (MAX_BONUS_BARS*3*32),a7
         000024a0     1800  
     744 000024b0     09ea          movi    p2mtch_award,a10
         000024c0 00000300- 
     745 000024e0           hbvrdpa_p1
     746 000024e0     0d3f          callr   get_num_awards                          ; Get the number of awards
         000024f0     ff74  
     747 00002500     4d4a          move    a10,a10
     748 00002510     ca00          jrz     hbvrno_awards
         00002520     00aa  
     749                    
     750 00002530     4ce0          move    a7,a0
     751 00002540                   PUSH    a0
     752 00002550     182b          movk    1,a11
     753 00002560     09e1          movi    [BONUS_BAR_YPOS,0],a1                   ;Start Y position
         00002570 00e60000  
     754 00002590     09c3          movi    1800h,a3                                ;Start Z position
         000025a0     1800  
     755 000025b0     09c5          movi    TYPVELALWAYS,a5                         ;Object ID
         000025c0     0e00  
     756 000025d0     56c6          clr     a6
     757 000025e0     56e7          clr     a7                                      ;Y velocity
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   17

     758                    
     759                    ; Make a bonus bar
     760 000025f0           hbvrdo_next_award_bar
     761 000025f0     09e2          movi    BONUSBAR,a2                             ;Image Pointer
         00002600 00000000! 
     762 00002620     09e0          movi    [399,0],a0                              ;Start X position
         00002630 018f0000  
     763 00002650     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4                ;DMA flags
         00002660 0000a102  
     764 00002680     09f0          movi    DPLT_R_P,b0                             ;Make em BLUE
         00002690 00000000! 
     765 000026b0     4d08          move    a8,a8                                   ;Player 1?
     766 000026c0     cb07          jrnz    hbvrdo_bar                                      ;br = no
     767 000026d0     5600          clr     a0
     768 000026e0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL|M_FLIPH,a4        ;DMA flags
         000026f0 0000a112  
     769 00002710     09f0          movi    DPLT_B_P,b0                             ;Make em BLUE
         00002720 00000000! 
     770 00002740           hbvrdo_bar
     771 00002740     098f          mmtm    sp,a1,a8
         00002750     4080  
     772 00002760     0d5f          calla   BEGINOBJP                               ;Bonus Bar
         00002770 00000000! 
     773 00002790     9309          move    a8,*a9+,L
     774 000027a0     09af          mmfm    sp,a1,a8
         000027b0     0102  
     775                    
     776                    ; Make the bonus bar text
     777 000027c0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4                ;DMA flags
         000027d0 0000a102  
     778 000027f0                   PULL    a0
     779 00002800     b602          move    *a0(64),a2,L
         00002810     0040  
     780 00002820                   PUSH    a0
     781 00002830     09e0          movi    [399+BONUS_RTEXT_START_XPOS,0],a0
         00002840 01f40000  
     782 00002860     4d08          move    a8,a8                                   ;Player 1?
     783 00002870     cb03          jrnz    hbvrdo_text                             ;br = no
     784 00002880     09e0          movi    [BONUS_LTEXT_START_XPOS,0],a0
         00002890 ff9b0000  
     785 000028b0           hbvrdo_text
     786 000028b0     0b03          addi    10h,a3
         000028c0     0010  
     787 000028d0     098f          mmtm    sp,a1,a8
         000028e0     4080  
     788 000028f0     0d5f          calla   BEGINOBJ                                ;Bonus Bar
         00002900 00000000! 
     789 00002920     9309          move    a8,*a9+,L
     790 00002930     09af          mmfm    sp,a1,a8
         00002940     0102  
     791                    
     792                    ; Make the bonus bar icon 1
     793 00002950                   PULL    a0
     794 00002960     0d3f          callr   get_bbicons
         00002970     01b2  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   18

     795 00002980                   PUSH    a0
     796 00002990     09e0          movi    [399-BONUS_ICON1_START_XPOS,0],a0       ;Start X position
         000029a0 01a50000  
     797 000029c0     4d08          move    a8,a8                                   ;Player 1?
     798 000029d0     cb03          jrnz    hbvrdo_icon_1                           ;br = no
     799 000029e0     09e0          movi    [BONUS_ICON1_START_XPOS,0],a0           ;Start X position
         000029f0 ffea0000  
     800 00002a10           hbvrdo_icon_1
     801 00002a10     0b03          addi    10h,a3
         00002a20     0010  
     802 00002a30     098f          mmtm    sp,a1,a8
         00002a40     4080  
     803 00002a50     8722          move    *a9,a2,L
     804 00002a60     0d5f          calla   BEGINOBJ                                ;Icon 1
         00002a70 00000000! 
     805 00002a90     9309          move    a8,*a9+,L
     806 00002aa0     09af          mmfm    sp,a1,a8
         00002ab0     0102  
     807                    
     808                    ; Make the bonus bar icon 2
     809 00002ac0     8722          move    *a9,a2,L
     810 00002ad0     ca13          jrz     hbvrno_2nd_icon
     811 00002ae0     09e0          movi    [399-BONUS_ICON2_START_XPOS,0],a0       ;Start X position
         00002af0 01b40000  
     812 00002b10     4d08          move    a8,a8                                   ;Player 1?
     813 00002b20     cb03          jrnz    hbvrdo_icon_2                           ;br = no
     814 00002b30     09e0          movi    [BONUS_ICON2_START_XPOS,0],a0           ;Start X position
         00002b40 ffdb0000  
     815 00002b60           hbvrdo_icon_2
     816 00002b60     0b03          addi    10h,a3
         00002b70     0010  
     817 00002b80     098f          mmtm    sp,a1,a8
         00002b90     4080  
     818 00002ba0     0d5f          calla   BEGINOBJ                                ;Icon 2
         00002bb0 00000000! 
     819 00002bd0     9309          move    a8,*a9+,L
     820 00002be0     09af          mmfm    sp,a1,a8
         00002bf0     0102  
     821 00002c00     c003          jruc    hbvrchk_3rd_icon
     822 00002c10           hbvrno_2nd_icon
     823 00002c10     5642          clr     a2
     824 00002c20     9249          move    a2,*a9+,L
     825 00002c30     c015          jruc    hbvrno_more_icons
     826 00002c40           hbvrchk_3rd_icon
     827                    
     828                    ; Make the bonus bar icon 3
     829 00002c40     8722          move    *a9,a2,L
     830 00002c50     ca13          jrz     hbvrno_more_icons
     831 00002c60     09e0          movi    [399-BONUS_ICON3_START_XPOS,0],a0       ;Start X position
         00002c70 01c30000  
     832 00002c90     4d08          move    a8,a8                                   ;Player 1?
     833 00002ca0     cb03          jrnz    hbvrdo_icon_3                           ;br = no
     834 00002cb0     09e0          movi    [BONUS_ICON3_START_XPOS,0],a0           ;Start X position
         00002cc0 ffcc0000  
     835 00002ce0           hbvrdo_icon_3
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   19

     836 00002ce0     0b03          addi    10h,a3
         00002cf0     0010  
     837 00002d00     098f          mmtm    sp,a1,a8
         00002d10     4080  
     838 00002d20     0d5f          calla   BEGINOBJ                                ;Icon 3
         00002d30 00000000! 
     839 00002d50     9309          move    a8,*a9+,L
     840 00002d60     09af          mmfm    sp,a1,a8
         00002d70     0102  
     841 00002d80     c002          jruc    hbvricon_3_done
     842                    
     843 00002d90           hbvrno_more_icons
     844 00002d90     5642          clr     a2
     845 00002da0     9249          move    a2,*a9+,L
     846 00002db0           hbvricon_3_done
     847 00002db0     09c0          movi    (399-BONUS_BAR_END_XPOS),a0
         00002dc0     00db  
     848 00002dd0     4d08          move    a8,a8                                   ;Player 1?
     849 00002de0     cb02          jrnz    hbvrdo_td_pos                           ;br = no
     850 00002df0     09c0          movi    BONUS_BAR_END_XPOS,a0                   ;End for check award
         00002e00     00b4  
     851 00002e10           hbvrdo_td_pos
     852 00002e10     9009          move    a0,*a9+,W                               ;Store Ending position
     853 00002e20     5600          clr     a0
     854 00002e30     9009          move    a0,*a9+,W                               ;Store NOT last
     855                    
     856 00002e40     0d3f          callr   adjust_text_position                    ;Adjust text position based on number of icons
         00002e50     ff41  
     857                    
     858 00002e60           hbvrcreate_bar_proc
     859 00002e60     098f          mmtm    sp,a1,a7
         00002e70     4100  
     860 00002e80                   CREATE  AWARD_PID,zip_award_bar                 ; Process to control this bar
     861 00002f00     09af          mmfm    sp,a1,a7
         00002f10     0082  
     862                    
     863 00002f20     102b          addk    1,a11
     864 00002f30                   PULL    a0
     865 00002f40     0b00          addi    96,a0
         00002f50     0060  
     866 00002f60                   PUSH    a0
     867 00002f70     0d8a          dsj     a10,hbvrdo_next_award_bar
         00002f80     ff66  
     868                    
     869 00002f90     1820          movk    1,a0
     870 00002fa0     a009          move    a0,-*a9,W                               ;Store last
     871 00002fb0                   PULL    a0
     872 00002fc0     0960          rets
     873 00002fd0           hbvrno_awards
     874 00002fd0     07a9          move    @award_ok_to_die,a9,L
         00002fe0 00000800- 
     875 00003000     0b09          addi    1,a9
         00003010     0001  
     876 00003020     0789          move    a9,@award_ok_to_die,L
         00003030 00000800- 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   20

     877 00003050     0960          rets
     878                    
     879                    
     880 00003060            SUBRP  total_icons
     881 00003060     4d08          move    a8,a8
     882 00003070     ca07          jrz     hbvrtot_p1_icons
     883 00003080     09e9          movi    p2mtch_award,a9
         00003090 00000300- 
     884 000030b0     09ea          movi    p2icon_total,a10
         000030c0 00009b50- 
     885 000030e0     c006          jruc    hbvrtot_awards
     886 000030f0           hbvrtot_p1_icons
     887 000030f0     09e9          movi    p1mtch_award,a9
         00003100 00000200- 
     888 00003120     09ea          movi    p1icon_total,a10
         00003130 00009b30- 
     889 00003150           hbvrtot_awards
     890 00003150     09cb          movi    NUM_AWARDS,a11
         00003160     0020  
     891 00003170     8748          move    *a10,a8,L
     892 00003180           hbvrtot_awards_loop
     893 00003180     8f2e          movb    *a9,a14
     894 00003190     270e          sll     24,a14
     895 000031a0     2d0e          srl     24,a14
     896 000031b0     41c8          add     a14,a8
     897 000031c0     1109          addk    8,a9
     898 000031d0     3ccb          dsjs    a11,hbvrtot_awards_loop
     899 000031e0     830a          move    a8,*a10,L
     900 000031f0     0960          rets
     901                    
     902                    
     903                    
     904 00003200            SUBR   clear_icon_total
     905 00003200     4d08          move    a8,a8
     906 00003210     ca05          jrz     hbvrclr_p1_icons
     907 00003220     5708          clr     a8
     908 00003230     0788          move    a8,@p2icon_total,L
         00003240 00009b50- 
     909 00003260     0960          rets
     910 00003270           hbvrclr_p1_icons
     911 00003270     0788          move    a8,@p1icon_total,L
         00003280 00009b30- 
     912 000032a0     0960          rets
     913                            
     914                    
     915                    ****************************************************************
     916                    *
     917                    * create_end_rnd_awards - This PROCESS creates the icon bars displayed
     918                    * at the end of a match.
     919                    *
     920 000032b0            SUBR   create_end_rnd_awards
     921 000032b0     05ae          move    @royal_rumble,a14
         000032c0 00000000! 
     922 000032e0     ca03          jrz     fcbvcera_ok
     923 000032f0                   DIE
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   21

     924 00003320           fcbvcera_ok
     925                    
     926 00003320     0d3f          callr   adjust_perfects
         00003330     feb3  
     927                    
     928 00003340     09c8          movi    (MAX_BONUS_BARS*BONUS_RECORD_SIZE*2),a8
         00003350     0300  
     929 00003360     09e9          movi    bar_obj_ptr,a9
         00003370 00000af0- 
     930 00003390     576b          clr     a11
     931 000033a0           fcbvclr_array_loop
     932 000033a0     9369          move    a11,*a9+,L
     933 000033b0     3c48          dsjs    a8,fcbvclr_array_loop
     934                    
     935 000033c0     5708          clr     a8                              ; Clear the state machine
     936 000033d0     0788          move    a8,@player_award_state,L
         000033e0 00009b10- 
     937                    
     938                    ;1PLYR
     939 00003400     b548          move    *a10(PLYR_SIDE),a8
         00003410     05b0  
     940                    
     941 00003420     0d3f          callr   create_player_awards            ; Create awards for player 1
         00003430     fef8  
     942                    ;1PLYR  movk    1,a8
     943                    ;1PLYR  callr   create_player_awards            ; Create awards for player 2
     944                    
     945 00003440     1828          movk    1,a8                            ; Start the state machine
     946 00003450     0788          move    a8,@player_award_state,L
         00003460 00009b10- 
     947                    
     948 00003480           fcbvstate_loop
     949 00003480     09c9          movi    ((TSEC*3)/4),a9                 ; How long each bar is diplayed
         00003490     0027  
     950 000034a0           fcbvstate_loop1
     951 000034a0                   SLEEPK  1
     952 000034e0     0d5f          calla   get_all_buttons_cur
         000034f0 00000000! 
     953 00003510     cb24          jrnz    fcbvquick_states
     954 00003520     38a9          dsjs    a9,fcbvno_state_advance         ; Is it time to advance the state machine?
     955 00003530     1028          addk    1,a8                            ; Yes
     956 00003540     0788          move    a8,@player_award_state,L
         00003550 00009b10- 
     957 00003570     c0f0          jruc    fcbvstate_loop                  ; Reset the Sleeper time
     958 00003580           fcbvno_state_advance
     959 00003580     07aa          move    @award_ok_to_die,a10,L          ; Is it time to exit ?
         00003590 00000800- 
     960                    ;1PLYR  cmpi    2,a10
     961 000035b0     0b4a          cmpi    1,a10
         000035c0     fffe  
     962 000035d0     cbec          jrnz    fcbvstate_loop1                 ; br = no
     963                    
     964 000035e0     5708          clr     a8
     965 000035f0     0d3f          callr   total_icons
         00003600     ffa5  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   22

     966 00003610     1828          movk    1,a8
     967 00003620     0d3f          callr   total_icons
         00003630     ffa2  
     968                    
     969 00003640     09c8          movi    TSEC/2,a8
         00003650     001a  
     970 00003660           fcbvwait
     971 00003660                   SLEEPK  1
     972 000036a0     0d5f          calla   get_all_buttons_cur
         000036b0 00000000! 
     973 000036d0     cb01          jrnz    fcbvwait_abort
     974 000036e0     3d28          dsjs    a8,fcbvwait
     975 000036f0           fcbvwait_abort
     976 000036f0     1868          movk    3,a8
     977 00003700     0788          move    a8,@award_ok_to_die,L
         00003710 00000800- 
     978                    
     979 00003730                   DIE
     980                    
     981 00003760           fcbvquick_states
     982 00003760                   SLEEPK  5
     983 000037a0     1028          addk    1,a8
     984 000037b0     0788          move    a8,@player_award_state,L
         000037c0 00009b10- 
     985 000037e0     c0d9          jruc    fcbvno_state_advance
     986                    
     987                    
     988                    ****************************************************************
     989                    * 
     990                    * is_it_a_really_quick_win - This function determines whether the win
     991                    * by the player (a10) was quick enough to be awarded an icon.  If so
     992                    * an icon is awarded. 
     993                    * 
     994 000037f0             SUBR  is_it_a_really_quick_win
     995 000037f0                   PUSH    a0,a1,a2
     996 00003810     07a0          move    @match_time,a0,L
         00003820 00000000! 
     997 00003840     4c02          move    a0,a2
     998 00003850     0b80          andi    0fh,a0
         00003860 fffffff0  
     999 00003880     1941          movk    10,a1
    1000 00003890     5e01          mpyu    a0,a1
    1001 000038a0     2e02          srl     16,a2
    1002 000038b0     4041          add     a2,a1
    1003 000038c0     0b41          cmpi    69,a1
         000038d0     ffba  
    1004 000038e0     c721          jrgt    lxulquick
    1005 000038f0     c02a          jruc    lxuliiarqw_done
    1006                    
    1007 00003900     0b41          cmpi    79,a1
         00003910     ffb0  
    1008 00003920     c707          jrgt    lxulsuper_quick
    1009 00003930     0b41          cmpi    73,a1
         00003940     ffb6  
    1010 00003950     c70f          jrgt    lxulvery_quick
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   23

    1011 00003960     0b41          cmpi    64,a1
         00003970     ffbf  
    1012 00003980     c717          jrgt    lxulquick
    1013 00003990     c020          jruc    lxuliiarqw_done
    1014 000039a0           lxulsuper_quick
    1015 000039a0                   RND_AWARD       a10,SUPER_QUICK_AWD
    1016 00003a40     c015          jruc    lxuliiarqw_done
    1017 00003a50           lxulvery_quick
    1018 00003a50                   RND_AWARD       a10,VERY_QUICK_AWD
    1019 00003af0     c00a          jruc    lxuliiarqw_done
    1020 00003b00           lxulquick
    1021 00003b00                   RND_AWARD       a10,QUICK_AWD
    1022 00003ba0           lxuliiarqw_done
    1023 00003ba0                   PULL    a0,a1,a2
    1024 00003bc0     0960          rets
    1025                    
    1026                    
    1027                    ****************************************************************
    1028                    * 
    1029                    * give_award_if_opponent_is_human - This function awards the player
    1030                    * with ICONs if he/she defeated a human player.
    1031                    * 
    1032 00003bd0             SUBR  give_award_if_opponent_is_human
    1033 00003bd0                   PUSH    a9
    1034 00003be0     af49          movb    *a10(PLYR_SIDE),a9
         00003bf0     05b0  
    1035 00003c00     ca07          jrz     cmrgi_am_player1
    1036 00003c10     05a9          move    @PSTATUS2,a9
         00003c20 00000000! 
    1037 00003c40     0b89          andi    01b,a9
         00003c50 fffffffe  
    1038 00003c70     c006          jruc    cmrggaioih_award
    1039 00003c80           cmrgi_am_player1
    1040 00003c80     05a9          move    @PSTATUS2,a9
         00003c90 00000000! 
    1041 00003cb0     0b89          andi    10b,a9
         00003cc0 fffffffd  
    1042 00003ce0           cmrggaioih_award
    1043 00003ce0     ca0a          jrz     cmrggaioih_done
    1044 00003cf0                   RND_AWARD a10,DFT_HUMAN_AWD
    1045 00003d90           cmrggaioih_done
    1046 00003d90                   PULL    a9
    1047 00003da0     0960          rets
    1048 00003db0     0960          rets
    1049                    
    1050                    
    1051                    ****************************************************************
    1052                    * 
    1053                    * arm_comeback_award - This function arms the big comeback ICON
    1054                    * awarding system.
    1055                    * 
    1056                    * a10 = Index number of player
    1057                    * 
    1058                    
    1059 00003dc0             SUBR  arm_comeback_award
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   24

    1060 00003dc0     0b4a          cmpi    2,a10
         00003dd0     fffd  
    1061 00003de0     c401          jrlt    nkxeok_to_arm
    1062 00003df0     0960          rets
    1063 00003e00           nkxeok_to_arm
    1064                    
    1065                            ;figure out if all opponents are at 80%+ strength.
    1066 00003e00     09e8          movi    process_ptrs,a8
         00003e10 00000000! 
    1067 00003e30     09c9          movi    NUM_WRES,a9
         00003e40     0007  
    1068 00003e50     9700  nkxelp  move    *a8+,a0,L
    1069 00003e60     ca0c          jrz     nkxenxt         ;skip inactive
    1070                    
    1071 00003e70     b40e          move    *a0(PLYR_SIDE),a14
         00003e80     05b0  
    1072 00003e90     49ca          cmp     a14,a10         ;humans only, so PLYRNUM == PLYR_SIDE
    1073 00003ea0     ca08          jreq    nkxenxt         ;skip teammates
    1074                    
    1075 00003eb0     b401          move    *a0(PLYRNUM),a1
         00003ec0     0580  
    1076 00003ed0     0d5f          calla   get_health
         00003ee0 00000000! 
    1077 00003f00     0b40          cmpi    (LIFE_MAX*80)/100,a0
         00003f10     ff7d  
    1078 00003f20     c40b          jrlt    nkxerets                ;abort if any enemy is under 80% strength
    1079                        
    1080 00003f30     3de9  nkxenxt dsj     a9,nkxelp
    1081                    
    1082 00003f40                   PUSH    a0,a10
    1083 00003f60                   X32     a10
    1084 00003f70     0b2a          addi    pcomeback,a10
         00003f80 00000820- 
    1085 00003fa0     1820          movk    1,a0
    1086 00003fb0     820a          move    a0,*a10,L
    1087 00003fc0                   PULL    a0,a10
    1088 00003fe0     0960  nkxerets        rets
    1089                    
    1090                    
    1091                    ****************************************************************
    1092                    * 
    1093                    * check_for_award_for_big_comeback - This function awards ICONS for a
    1094                    * player who cameback from the brink of disaster
    1095                    * 
    1096 00003ff0             SUBR  check_for_award_for_big_comeback
    1097 00003ff0                   PUSH    a9
    1098 00004000     af49          movb    *a10(PLYR_SIDE),a9
         00004010     05b0  
    1099 00004020     ca05          jrz     mqbei_am_player1
    1100 00004030     07a9          move    @(pcomeback+32),a9,L
         00004040 00000840- 
    1101 00004060     ca0f          jrz     mqbegfbc_done
    1102 00004070     c004          jruc    mqbegfbc_award
    1103 00004080           mqbei_am_player1
    1104 00004080     07a9          move    @pcomeback,a9,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   25

         00004090 00000820- 
    1105 000040b0     ca0a          jrz     mqbegfbc_done
    1106 000040c0           mqbegfbc_award
    1107 000040c0                   RND_AWARD a10,COMEBACK_AWD
    1108 00004160           mqbegfbc_done
    1109 00004160                   PULL    a9
    1110 00004170     0960          rets
    1111                    
    1112                    
    1113                    ****************************************************************
    1114                    * 
    1115                    * arm_winstreak_award - This function arms the winstreak ICON
    1116                    * awarding system.
    1117                    * 
    1118                    * a1 = Winstreak Value
    1119                    * a2 = Player Number
    1120                    * 
    1121 00004180             SUBR  arm_winstreak_award
    1122 00004180     4c21          move    a1,a1
    1123 00004190     ca0f          jrz     jrjxawa_exit
    1124 000041a0                   PUSHP   a0,a1
    1125 000041c0                   X32     a2
    1126 000041d0     0b22          addi    pwsarm,a2
         000041e0 00000a70- 
    1127 00004200     18a0          movk    5,a0
    1128 00004210     6e01          modu    a0,a1
    1129 00004220     cb02          jrnz    jrjxawa_disarm
    1130 00004230     1820          movk    1,a0
    1131 00004240     c001          jruc    jrjxawa_ok
    1132 00004250           jrjxawa_disarm
    1133 00004250     5600          clr     a0
    1134 00004260           jrjxawa_ok
    1135 00004260     8202          move    a0,*a2,L
    1136 00004270                   PULLP   a0,a1
    1137 00004290           jrjxawa_exit
    1138 00004290     0960          rets
    1139                    
    1140                    
    1141                    ****************************************************************
    1142                    * 
    1143                    * check_for_award_for_winstreak
    1144                    * player who cameback from the brink of disaster
    1145                    * 
    1146 000042a0             SUBR  check_for_award_for_winstreak
    1147 000042a0                   PUSH    a0,a9,a10
    1148 000042c0     4d40          move    a10,a0
    1149 000042d0     af49          movb    *a10(PLYR_SIDE),a9
         000042e0     05b0  
    1150 000042f0     ca06          jrz     qeuwi_am_player1
    1151 00004300     09ea          movi    (pwsarm+32),a10
         00004310 00000a90- 
    1152 00004330     8749          move    *a10,a9,L
    1153 00004340     ca12          jrz     qeuwcfafw_done
    1154 00004350     c005          jruc    qeuwcfafw_award
    1155 00004360           qeuwi_am_player1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   26

    1156 00004360     09ea          movi    pwsarm,a10
         00004370 00000a70- 
    1157 00004390     8749          move    *a10,a9,L
    1158 000043a0     ca0c          jrz     qeuwcfafw_done
    1159 000043b0           qeuwcfafw_award
    1160 000043b0                   MATCH_AWARD a0,FIVE_WINS_AWD
    1161 00004450     5729          clr     a9
    1162 00004460     832a          move    a9,*a10,L
    1163 00004470           qeuwcfafw_done
    1164 00004470                   PULL    a0,a9,a10
    1165 00004490     0960          rets
    1166                    
    1167                    ; A0 = *num icons
    1168                    ; A9 = *objects
    1169 000044a0            SUBR   get_bbicons
    1170 000044a0                   PUSH    a0,a1,a9
    1171 000044c0     8600          move    *a0,a0,L        ; Get number of Icons
    1172 000044d0     0b40          cmpi    5,a0            ; Num < 5?
         000044e0     fffa  
    1173 000044f0     c408          jrlt    qeuwsmall_icons ; br = yes
    1174 00004500     0b40          cmpi    10,a0           ; Num < 10?
         00004510     fff5  
    1175 00004520     c40f          jrlt    qeuws_and_l_icons       ; br = yes
    1176 00004530     09e0          movi    BICON_10,a0
         00004540 00000000! 
    1177 00004560     9209          move    a0,*a9+,L       ; Store the image pointer
    1178 00004570     c01d          jruc    qeuwgbb_done
    1179 00004580           qeuwsmall_icons
    1180 00004580     09e1          movi    BICON_1,a1
         00004590 00000000! 
    1181 000045b0     0b40          cmpi    4,a0
         000045c0     fffb  
    1182 000045d0     c401          jrlt    qeuwsmall_loop
    1183                            .if DEBUG
    1184                            LOCKUP
    1185                            .endif
    1186 000045e0     1420          subk    1,a0
    1187 000045f0           qeuwsmall_loop
    1188 000045f0     9229          move    a1,*a9+,L       ; Store Icon image
    1189 00004600     3c40          dsjs    a0,qeuwsmall_loop
    1190 00004610     c013          jruc    qeuwgbb_done
    1191 00004620           qeuws_and_l_icons
    1192 00004620     0b40          cmpi    5,a0
         00004630     fffa  
    1193 00004640     ca0c          jrz     qeuwis_five
    1194 00004650     0b40          cmpi    7,a0
         00004660     fff8  
    1195 00004670     c401          jrlt    qeuwgt5_ok
    1196                            .if DEBUG
    1197                            LOCKUP
    1198                            .endif
    1199 00004680     18e0          movk    7,a0
    1200 00004690           qeuwgt5_ok
    1201 00004690     09e1          movi    BICON_1,a1
         000046a0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   27

    1202 000046c0           qeuwsloop
    1203 000046c0     9229          move    a1,*a9+,L
    1204 000046d0     1420          subk    1,a0
    1205 000046e0     0b40          cmpi    5,a0
         000046f0     fffa  
    1206 00004700     cbfb          jrnz    qeuwsloop
    1207 00004710           qeuwis_five
    1208 00004710     09e1          movi    BICON_5,a1
         00004720 00000000! 
    1209 00004740     9229          move    a1,*a9+,L
    1210 00004750           qeuwgbb_done
    1211 00004750     5600          clr     a0
    1212 00004760     8209          move    a0,*a9,L
    1213 00004770                   PULL    a0,a1,a9
    1214 00004790     0960          rets
    1215                            
    1216                    
    1217                    
    1218                    
    1219 000047a0            SUBRP  bbicon_table
    1220 000047a0 00000000!         .long   BICON_1A
    1221 000047c0 00000000!         .long   BICON_5A
    1222 000047e0 00000000!         .long   BICON_10A
    1223 00004800 00000000!         .long   BICON_20A
    1224 00004820 00000000!         .long   BICON_30A
    1225 00004840 00000000!         .long   BICON_40A
    1226 00004860 00000000!         .long   BICON_50A
    1227 00004880 00000000!         .long   BICON_60A
    1228 000048a0 00000000!         .long   BICON_70A
    1229 000048c0 00000000!         .long   BICON_80A
    1230 000048e0 00000000!         .long   BICON_90A
    1231 00004900 00000000!         .long   BICON_100A
    1232                    
    1233                    
    1234 00004920            SUBRP  get_bonus_icons
    1235 00004920                   PUSH    a0,a1,a2,a3,a4,a9
    1236 00004940     0b09          addi    32,a9
         00004950     0020  
    1237 00004960     5684          clr     a4
    1238 00004970     4c23          move    a1,a3
    1239 00004980     4c20          move    a1,a0
    1240 00004990     0b43          cmpi    100,a3
         000049a0     ff9b  
    1241 000049b0     c533          jrge    qeuwicon_max
    1242                    
    1243 000049c0     5642          clr     a2
    1244 000049d0           qeuwget_tens_loop
    1245 000049d0     0b43          cmpi    10,a3
         000049e0     fff5  
    1246 000049f0     c404          jrlt    qeuwtens_done
    1247 00004a00     0be3          subi    10,a3
         00004a10     fff5  
    1248 00004a20     1022          addk    1,a2
    1249 00004a30     c0f9          jruc    qeuwget_tens_loop
    1250 00004a40           qeuwtens_done
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   28

    1251 00004a40     4c42          move    a2,a2
    1252 00004a50     ca09          jrz     qeuwno_tens
    1253 00004a60     1022          addk    1,a2
    1254 00004a70     24a2          sll     5,a2
    1255 00004a80     0b22          addi    bbicon_table,a2
         00004a90 000047a0' 
    1256 00004ab0     8641          move    *a2,a1,L
    1257 00004ac0     9229          move    a1,*a9+,L
    1258 00004ad0     8421          move    *a1,a1,W
    1259 00004ae0     4024          add     a1,a4
    1260 00004af0           qeuwno_tens
    1261 00004af0     4c03          move    a0,a3
    1262 00004b00     1942          movk    10,a2
    1263 00004b10     6e43          modu    a2,a3
    1264 00004b20     0b43          cmpi    5,a3
         00004b30     fffa  
    1265 00004b40     c408          jrlt    qeuwless_five
    1266 00004b50     07a2          move    @(bbicon_table+32),a2,L
         00004b60 000047c0' 
    1267 00004b80     9249          move    a2,*a9+,L
    1268 00004b90     8441          move    *a2,a1,W
    1269 00004ba0     4024          add     a1,a4
    1270 00004bb0     0be3          subi    5,a3
         00004bc0     fffa  
    1271 00004bd0           qeuwless_five
    1272 00004bd0     4c63          move    a3,a3
    1273 00004be0     ca07          jrz     qeuwno_ones
    1274 00004bf0     07a2          move    @bbicon_table,a2,L
         00004c00 000047a0' 
    1275 00004c20     8441          move    *a2,a1,W
    1276 00004c30           qeuwones_loop
    1277 00004c30     9249          move    a2,*a9+,L
    1278 00004c40     4024          add     a1,a4
    1279 00004c50     3c63          dsjs    a3,qeuwones_loop
    1280 00004c60           qeuwno_ones
    1281 00004c60     2fe4          srl     1,a4
    1282 00004c70     0784          move    a4,@icon_string_width,L
         00004c80 00009d90- 
    1283 00004ca0     5642          clr     a2
    1284 00004cb0     8249          move    a2,*a9,L
    1285 00004cc0                   PULL    a0,a1,a2,a3,a4,a9
    1286 00004ce0     0960          rets
    1287 00004cf0           qeuwicon_max
    1288 00004cf0     09e2          movi    BICON_100A,a2
         00004d00 00000000! 
    1289 00004d20     9249          move    a2,*a9+,L
    1290 00004d30     8441          move    *a2,a1
    1291 00004d40     4024          add     a1,a4
    1292 00004d50     c0f0          jruc    qeuwno_ones
    1293                    
    1294                    ; a10 = player num
    1295                    ; a1  = num icons
    1296 00004d60            SUBRP  audit_icons
    1297 00004d60                   PUSH    a0,a1,a2
    1298 00004d80     4c22          move    a1,a2
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   29

    1299 00004d90     09c0          movi    AUD_P1ICONMAX,a0
         00004da0     0066  
    1300 00004db0     4d4a          move    a10,a10
    1301 00004dc0     ca02          jrz     qeuwp1_audit
    1302 00004dd0     09c0          movi    AUD_P2ICONMAX,a0
         00004de0     0067  
    1303 00004df0           qeuwp1_audit
    1304 00004df0     0d5f          calla   GET_AUD
         00004e00 00000000! 
    1305 00004e20     4822          cmp     a1,a2
    1306 00004e30     c604          jrle    qeuwnot_higher
    1307 00004e40     4c41          move    a2,a1
    1308 00004e50     0d5f          calla   STORE_AUDIT
         00004e60 00000000! 
    1309 00004e80           qeuwnot_higher
    1310 00004e80                   PULL    a0,a1,a2
    1311 00004ea0     0960          rets
    1312                    
    1313                    
    1314                    
    1315 00004eb0             SUBR  show_bonus_icons
    1316 00004eb0                   PUSH    a0,a1,a2,a3,a4,a5,a6,a7,a9,a11
    1317 00004ed0     09e0          movi    [BONUS_MSG_XPOS1,0],a0
         00004ee0 00510000  
    1318 00004f00     4d4a          move    a10,a10
    1319 00004f10     ca11          jrz     qeuwp1bonus
    1320 00004f20     09e9          movi    p2bicon,a9
         00004f30 00009c90- 
    1321 00004f50     05a1          move    @p2winstreak,a1,W
         00004f60 00000000! 
    1322                    
    1323                            .if SHOW_ACCUM_ICONS
    1324                            move    @p2oldwinstreak,a2,W
    1325                            cmp     a1,a2
    1326                            .endif
    1327                    
    1328 00004f80     ca4e          jrz     qeuwtotal_reset
    1329 00004f90     07a1          move    @p2icon_total,a1,L
         00004fa0 00009b50- 
    1330 00004fc0     ca45          jrz     qeuwno_bonus
    1331 00004fd0     0d3f          callr   audit_icons
         00004fe0     ffd7  
    1332 00004ff0     09e0          movi    [BONUS_MSG_XPOS2,0],a0
         00005000 01410000  
    1333 00005020     c00d          jruc    qeuwdo_bonus
    1334 00005030           qeuwp1bonus
    1335 00005030     09e9          movi    p1bicon,a9
         00005040 00009b90- 
    1336 00005060     05a1          move    @p1winstreak,a1,W
         00005070 00000000! 
    1337                    
    1338                            .if SHOW_ACCUM_ICONS
    1339                            move    @p1oldwinstreak,a2,W
    1340                            cmp     a1,a2
    1341                            .endif
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   30

    1342                    
    1343 00005090     ca3d          jrz     qeuwtotal_reset
    1344 000050a0     07a1          move    @p1icon_total,a1,L
         000050b0 00009b30- 
    1345 000050d0     ca34          jrz     qeuwno_bonus
    1346 000050e0     0d3f          callr   audit_icons
         000050f0     ffc6  
    1347 00005100           qeuwdo_bonus
    1348 00005100     0d3f          callr   get_bonus_icons
         00005110     ff80  
    1349                    
    1350 00005120     09e1          movi    [BONUS_MSG_YPOS,0],a1
         00005130 00c60000  
    1351 00005150     09e2          movi    SKILBON,a2
         00005160 00000000! 
    1352 00005180     09c3          movi    104+200,a3
         00005190     0130  
    1353 000051a0     09e4          movi    DMAWNZ|M_SCRNREL,a4
         000051b0 0000a002  
    1354 000051d0     09c5          movi    CLSNEUT,a5
         000051e0     0000  
    1355 000051f0     56c6          clr     a6
    1356 00005200     56e7          clr     a7
    1357 00005210     0d5f          calla   BEGINOBJ
         00005220 00000000! 
    1358 00005240     9309          move    a8,*a9+,L
    1359                    
    1360 00005250     4d4a          move    a10,a10
    1361 00005260     ca04          jrz     qeuwp1icon
    1362 00005270     09e0          movi    [BONUS_ICON_XPOS2,0],a0
         00005280 01410000  
    1363 000052a0     c003          jruc    qeuwdobicon
    1364 000052b0           qeuwp1icon
    1365 000052b0     09e0          movi    [BONUS_ICON_XPOS1,0],a0
         000052c0 00510000  
    1366 000052e0           qeuwdobicon
    1367 000052e0     07a1          move    @icon_string_width,a1,L
         000052f0 00009d90- 
    1368 00005310     2601          sll     16,a1
    1369 00005320     4420          sub     a1,a0
    1370 00005330     8722          move    *a9,a2,L
    1371 00005340           qeuwdobicon_loop
    1372 00005340     09e1          movi    [BONUS_ICON_YPOS,0],a1
         00005350 00dc0000  
    1373 00005370                   PUSH    a0
    1374 00005380     0d5f          calla   BEGINOBJ
         00005390 00000000! 
    1375 000053b0                   PULL    a0
    1376 000053c0     844b          move    *a2,a11,W
    1377 000053d0     260b          sll     16,a11
    1378 000053e0     4160          add     a11,a0
    1379 000053f0     9309          move    a8,*a9+,L
    1380 00005400     8722          move    *a9,a2,L
    1381 00005410     cbf2          jrnz    qeuwdobicon_loop
    1382 00005420           qeuwno_bonus
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   31

    1383 00005420     5600          clr     a0
    1384 00005430     8209          move    a0,*a9,L
    1385 00005440                   PULL    a0,a1,a2,a3,a4,a5,a6,a7,a9,a11
    1386 00005460     0960          rets
    1387                    
    1388                    
    1389                    
    1390 00005470            SUBRP  qeuwtotal_reset
    1391 00005470     4d4a          move    a10,a10
    1392 00005480     ca05          jrz     qeuwp1_reset
    1393 00005490     5600          clr     a0
    1394 000054a0     0780          move    a0,@p2icon_total,L
         000054b0 00009b50- 
    1395 000054d0     c0f4          jruc    qeuwno_bonus
    1396 000054e0           qeuwp1_reset
    1397 000054e0     5600          clr     a0
    1398 000054f0     0780          move    a0,@p1icon_total,L
         00005500 00009b30- 
    1399 00005520     c0ef          jruc    qeuwno_bonus
    1400                    
    1401                    
    1402 00005530            SUBR   del_bonus_icons
    1403 00005530                   PUSH    a0,a2
    1404 00005550     4d4a          move    a10,a10
    1405 00005560     cb04          jrnz    qeuwdel_p2
    1406 00005570     09e2          movi    p1bicon,a2
         00005580 00009b90- 
    1407 000055a0     c003          jruc    qeuwdel_bicon
    1408 000055b0           qeuwdel_p2
    1409 000055b0     09e2          movi    p2bicon,a2
         000055c0 00009c90- 
    1410 000055e0           qeuwdel_bicon
    1411 000055e0     9640          move    *a2+,a0,L
    1412 000055f0     ca04          jrz     qeuwdel_done
    1413 00005600     0d5f          calla   DELOBJ
         00005610 00000000! 
    1414 00005630     c0fa          jruc    qeuwdel_bicon
    1415 00005640           qeuwdel_done
    1416 00005640                   PULL    a0,a2
    1417 00005660     0960          rets
    1418                    
    1419                    
    1420                    
    1421 00005670            SUBR   show_progress_bicons
    1422 00005670                   PUSH    a0,a1,a2,a3,a4,a5,a6,a6,a9,a10
    1423 00005690     07a1          move    @p2icon_total,a1,L
         000056a0 00009b50- 
    1424 000056c0     cb04          jrnz    qeuwdo_spb
    1425 000056d0           qeuwspb_p1
    1426 000056d0     07a1          move    @p1icon_total,a1,L
         000056e0 00009b30- 
    1427 00005700     ca28          jrz     qeuwno_picons
    1428 00005710           qeuwdo_spb
    1429 00005710     09e9          movi    progress_icons,a9
         00005720 00009db0- 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   32

    1430 00005740     0d3f          callr   get_bonus_icons
         00005750     ff1c  
    1431 00005760     09e0          movi    [PROG_BICON_XPOS,0],a0
         00005770 00380000  
    1432 00005790     07a1          move    @icon_string_width,a1,L
         000057a0 00009d90- 
    1433 000057c0     2601          sll     16,a1
    1434 000057d0     4420          sub     a1,a0
    1435 000057e0     8722          move    *a9,a2,L
    1436 000057f0     09c3          movi    02000H,a3
         00005800     2000  
    1437 00005810     09e4          movi    DMAWNZ|M_SCRNREL,a4
         00005820 0000a002  
    1438 00005840     09c5          movi    CLSNEUT,a5
         00005850     0000  
    1439 00005860     56c6          clr     a6
    1440 00005870     56e7          clr     a7
    1441 00005880     0b09          addi    32,a9
         00005890     0020  
    1442 000058a0     8722          move    *a9,a2,L
    1443 000058b0           qeuwdopicon_loop
    1444 000058b0     09e1          movi    [PROG_BICON_YPOS,0],a1
         000058c0 005d0000  
    1445 000058e0                   PUSH    a0
    1446 000058f0     0d5f          calla   BEGINOBJ
         00005900 00000000! 
    1447 00005920                   PULL    a0
    1448 00005930     844a          move    *a2,a10,W
    1449 00005940     260a          sll     16,a10
    1450 00005950     4140          add     a10,a0
    1451 00005960     9309          move    a8,*a9+,L
    1452 00005970     8722          move    *a9,a2,L
    1453 00005980     cbf2          jrnz    qeuwdopicon_loop
    1454 00005990           qeuwno_picons
    1455 00005990     56c6          clr     a6
    1456 000059a0     82c9          move    a6,*a9,L
    1457 000059b0                   PULL    a0,a1,a2,a3,a4,a5,a6,a6,a9,a10
    1458 000059d0     0960          rets
    1459                    
    1460                    
    1461 000059e0            SUBR   del_progress_icon
    1462 000059e0                   PUSH    a0,a2
    1463 00005a00     09e2          movi    progress_icons,a2       ; Get pointer to progess screen icon array
         00005a10 00009db0- 
    1464 00005a30     0b02          addi    32,a2
         00005a40     0020  
    1465 00005a50           qeuwdel_picon
    1466 00005a50     9640          move    *a2+,a0,L               ; Get pointer to object
    1467 00005a60     ca04          jrz     qeuwdelp_done           ; br = not valid object pointer
    1468 00005a70     0d5f          calla   DELOBJ                  ; Delete the object
         00005a80 00000000! 
    1469 00005aa0     c0fa          jruc    qeuwdel_picon           ; Go get next
    1470 00005ab0           qeuwdelp_done
    1471 00005ab0                   PULL    a0,a2
    1472 00005ad0     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   33

    1473                    
    1474                    
    1475                    ; Displays dufus messages for each HUMAN player
    1476                    
    1477 00005ae0            SUBR   show_dufus_messages
    1478                    
    1479 00005ae0                   PUSHP   a9,a10                          ; Save o reggie
    1480                    
    1481 00005b00     5729          clr     a9                              ; Set up state machine
    1482 00005b10     0789          move    a9,@award_ok_to_die,L
         00005b20 00000800- 
    1483 00005b40     0789          move    a9,@dboxes_on,L
         00005b50 00000860- 
    1484                    
    1485 00005b70           f_wait
    1486 00005b70     05ae          move    @in_finish_move,a14             ; Are we doing a finishing move ?
         00005b80 00000000! 
    1487 00005ba0     ca05          jrz     f_done                          ; br = no
    1488 00005bb0                   SLEEPK  10
    1489 00005bf0     c0f7          jruc    f_wait
    1490 00005c00           f_done
    1491                    
    1492 00005c00     182a          movk    1,a10                           ; Msg number to show
    1493 00005c10                   CREATE  AWARD_PID,display_dufus_message ; Show msgs for player 1
    1494                    
    1495 00005c90     182a          movk    1,a10                           ; Msg number to show
    1496 00005ca0     1829          movk    1,a9
    1497 00005cb0                   CREATE  AWARD_PID,display_dufus_message ; Show msgs for player 2
    1498                    
    1499 00005d30                   SLEEPK  15                              ; Give it a little time
    1500                    
    1501 00005d70                   PULLP   a9,a10                          ; All done
    1502 00005d90                   RETP
    1503                    
    1504                    
    1505 00005dc0            SUBRP  dufus_msgs
    1506 00005dc0 00000000!         .long   TORUN                   ; 1st Dufus Message (RUN)
    1507 00005de0 00000000!         .long   CONTROLI                ; 2nd Dufus Message (GETUP INSTRUCTIONS)
    1508 00005e00 00000000!         .long   OUTRING                 ; 3rd Dufus Message (OUTRING INSTRUCTIONS)
    1509                    
    1510                    
    1511                    ; A13 = *player data
    1512                    ; A1 = message number (1-3)
    1513 00005e20            SUBR   dufus_msg_off
    1514 00005e20                   PUSH    a0,a2,a3
    1515 00005e40     b5a2          move    *a13(PLYRNUM),a2,W      ; Get the player number
         00005e50     0580  
    1516 00005e60     0b42          cmpi    2,a2                    ; Is this a human player
         00005e70     fffd  
    1517 00005e80     c50f          jrge    qeuwdmoff_exit          ; br = nope - get out
    1518                    
    1519 00005e90     09e2          movi    p1dufus_msg_flags,a2    ; Get pointer to player 1 msg flags
         00005ea0 00009f30- 
    1520 00005ec0     afa0          movb    *a13(PLYR_SIDE),a0      ; Are we player 1?
         00005ed0     05b0  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   34

    1521 00005ee0     ca03          jrz     qeuwdo_dufus_msg_off    ; br = yes
    1522 00005ef0     09e2          movi    p2dufus_msg_flags,a2    ; Get pointer to player 2 msg flags
         00005f00 00009f50- 
    1523 00005f20           qeuwdo_dufus_msg_off
    1524 00005f20     1421          subk    1,a1                    ; Decrement msg number
    1525 00005f30     8640          move    *a2,a0,L                ; Get msg flags
    1526 00005f40     1823          movk    1,a3                    ; Set up for bit shift
    1527 00005f50     6223          sll     a1,a3
    1528 00005f60     5260          andn    a3,a0                   ; Disable this msg
    1529 00005f70     8202          move    a0,*a2,L                ; Write it back
    1530 00005f80           qeuwdmoff_exit
    1531 00005f80                   PULL    a0,a2,a3
    1532 00005fa0     0960          rets
    1533                    
    1534                    
    1535                    ; A9 = message number
    1536                    ; A10 = *player data
    1537 00005fb0            SUBR   dufus_msg_on
    1538                    
    1539 00005fb0     b548          move    *a10(PLYRNUM),a8,W              ; Get the player number
         00005fc0     0580  
    1540 00005fd0     0b48          cmpi    2,a8                            ; Is this a human player
         00005fe0     fffd  
    1541 00005ff0     c541          jrge    qeuwdmo_exit                    ; br = nope - get out
    1542 00006000     07ae          move    @p1dufus_msg_flags,a14,L        ; Get Player 1 msg flags
         00006010 00009f30- 
    1543 00006030     09eb          movi    p1winstreak,a11
         00006040 00000000! 
    1544                    ;       movb    *a10(PLYR_SIDE),a8              ; Get Player number
    1545 00006060     af48          movb    *a10(PLYRNUM),a8                ; Get Player number
         00006070     0580  
    1546 00006080     ca06          jrz     qeuwp1_dmo                              ; br = player 1
    1547 00006090     07ae          move    @p2dufus_msg_flags,a14,L        ; Get Player 2 msg flags
         000060a0 00009f50- 
    1548 000060c0     09eb          movi    p2winstreak,a11
         000060d0 00000000! 
    1549 000060f0           qeuwp1_dmo
    1550 000060f0     856b          move    *a11,a11,W                      ; 3 or more wins ?
    1551 00006100     0b4b          cmpi    3,a11                           
         00006110     fffc  
    1552 00006120     c52e          jrge    qeuwdmo_exit                    ; br = yes
    1553 00006130     4d2a          move    a9,a10                          ; Save msg number
    1554 00006140     4d09          move    a8,a9                           ; Save player number
    1555 00006150     4d4b          move    a10,a11
    1556 00006160     142b          subk    1,a11                           ; sub 1 from msg num
    1557 00006170     1828          movk    1,a8                            ; set up for bit shift
    1558 00006180     6368          sll     a11,a8                          ; shift by msg num-1
    1559 00006190     510e          and     a8,a14                          ; will this msg be displayed?
    1560 000061a0     ca26          jrz     qeuwdmo_exit                    ; br = no
    1561                    
    1562 000061b0     5708          clr     a8                              ; Set up state machine
    1563 000061c0     0788          move    a8,@award_ok_to_die,L
         000061d0 00000800- 
    1564                    
    1565 000061f0                   CREATE  4000h|AWARD_PID,display_dufus_message
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   35

    1566                    
    1567 00006270     09ca          movi    TSEC,a10                        ; Let box get displayed for 1 second
         00006280     0035  
    1568 00006290           qeuwmin_time_loop
    1569 00006290                   SLEEPK  1
    1570 000062d0     0d3f          callr   suspend_all                     ; Put all but unsuspendables to sleep
         000062e0     0015  
    1571 000062f0     3cea          dsjs    a10,qeuwmin_time_loop           ; 1 second? - br = no
    1572                    
    1573 00006300     09ca          movi    TSEC*2,a10                      ; Allow up to 2 more seconds
         00006310     006a  
    1574 00006320           qeuwwait_die_loop
    1575 00006320                   SLEEPK  1
    1576 00006360     0d3f          callr   suspend_all                     ; Put all but unsuspendables to sleep
         00006370     000c  
    1577 00006380     0d5f          calla   get_all_buttons_cur             ; Anybody pressing buttons?
         00006390 00000000! 
    1578 000063b0     cb01          jrnz    qeuwdmo_abort                   ; br = yes
    1579 000063c0     3d6a          dsjs    a10,qeuwwait_die_loop           ; 2 seconds? - br = no
    1580 000063d0           qeuwdmo_abort
    1581 000063d0     1829          movk    1,a9                            ; Tell display_dufus_msg to die
    1582 000063e0     0789          move    a9,@award_ok_to_die,L
         000063f0 00000800- 
    1583 00006410           qeuwdmo_exit
    1584 00006410                   DIE
    1585                            
    1586                    
    1587 00006440            SUBRP  suspend_all
    1588 00006440     09e3          movi    ACTIVE,a3,L
         00006450 00000000! 
    1589                    
    1590 00006470     8663  qeuwlp  move    *a3,a3,L        ;Get next
    1591 00006480     ca0c          jrz     qeuwx           ;End?
    1592 00006490     b46e          move    *a3(PROCID),a14 ;Get Process ID
         000064a0     0020  
    1593 000064b0     0b8e          andi    0c000h,a14      ;Is this either an indestructable or unsuspendable process?
         000064c0 ffff3fff  
    1594 000064e0     cbf8          jrnz    qeuwlp          ;br = yes
    1595                    
    1596 000064f0     b46e          move    *a3(PTIME),a14  ;Get current Sleep time
         00006500     0030  
    1597 00006510     102e          addk    1,a14           ;Add 1 to it
    1598 00006520     b1c3          move    a14,*a3(PTIME)  ;Write it back
         00006530     0030  
    1599 00006540     c0f2          jruc    qeuwlp          ;Go check next process
    1600                    
    1601 00006550     0960  qeuwx   rets
    1602                    
    1603                    
    1604                    
    1605 00006560            SUBR   reset_dufus_msgs
    1606 00006560                   PUSH    a0,a1
    1607 00006580     09e1          movi    p1dufus_msg_flags,a1            ; Pointer to player 1 msg enables
         00006590 00009f30- 
    1608 000065b0     4c00          move    a0,a0                           ; Reset player 1 msgs?
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   36

    1609 000065c0     ca03          jrz     qeuwrst_d_p1                    ; br = yes
    1610 000065d0     09e1          movi    p2dufus_msg_flags,a1            ; Pointer to player 2 msg enables
         000065e0 00009f50- 
    1611 00006600           qeuwrst_d_p1
    1612 00006600     19e0          movk    0fh,a0                          ; Enable all msgs
    1613 00006610     8201          move    a0,*a1,L
    1614 00006620                   PULL    a0,a1
    1615 00006640     0960          rets
    1616                    
    1617                    ;a9  = player number
    1618                    ;a11 = *objects (2)
    1619                    ;a2  = current scale divisor
    1620 00006650            SUBRP  qeuwadjust_tl
    1621 00006650                   PUSH    a2,a7,a10
    1622 00006670     2f02          srl     8,a2
    1623 00006680     0b82          andni   0ffh,a2                 ; Mask lower scale bits
         00006690 000000ff  
    1624 000066b0     b76e          move    *a11(32),a14,L          ; Get pointer to object
         000066c0     0020  
    1625 000066d0     b7c3          move    *a14(OIMG),a3,L         ; Get pointer to image header
         000066e0     0170  
    1626                    
    1627 000066f0     8467          move    *a3,a7,W                ; Get image Width
    1628 00006700     25e7          sll     15,a7                   ; x 10000h
    1629 00006710     5a47          divu    a2,a7                   ; divide by scale factor
    1630 00006720     09ca          movi    DUFUS_BOX_LXPOS,a10
         00006730     0063  
    1631 00006740     4d29          move    a9,a9                   ; Am I player 1?
    1632 00006750     ca02          jrz     qeuwatl_right           ; br = yes
    1633 00006760     09ca          movi    DUFUS_BOX_RXPOS,a10
         00006770     012c  
    1634 00006780           qeuwatl_right
    1635 00006780     44ea          sub     a7,a10                  ; Upper left X
    1636 00006790     b14e          move    a10,*a14(OXPOS)         ; Set box X
         000067a0     0090  
    1637 000067b0     876e          move    *a11,a14,L              ; Get text object pointer
    1638 000067c0     b14e          move    a10,*a14(OXPOS)         ; Set text X
         000067d0     0090  
    1639                    
    1640 000067e0     b467          move    *a3(16),a7,W            ; Get image Width
         000067f0     0010  
    1641 00006800     25e7          sll     15,a7                   ; x 10000h
    1642 00006810     5a47          divu    a2,a7                   ; divide by scale factor
    1643 00006820     09ca          movi    DUFUS_BOX_YPOS,a10
         00006830     00a7  
    1644 00006840     44ea          sub     a7,a10                  ; Upper Left Y
    1645 00006850     b76e          move    *a11(32),a14,L          ; Get Box object pointer
         00006860     0020  
    1646 00006870     b14e          move    a10,*a14(OYPOS)         ; Set Box Y
         00006880     00b0  
    1647 00006890     876e          move    *a11,a14,L              ; Get text object pointer
    1648 000068a0     b14e          move    a10,*a14(OYPOS)         ; Set Text Y
         000068b0     00b0  
    1649 000068c0                   PULL    a2,a7,a10
    1650                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   37

    1651 000068e0     0960          rets
    1652                            
    1653                    
    1654                    
    1655                    ; Displays dufus messages for a player
    1656                    ; A9 = player number
    1657                    ; A10 = message number (1 - 4)
    1658 000068f0            SUBR   display_dufus_message
    1659                    
    1660 000068f0     05ae          move    @PSTATUS2,a14
         00006900 00000000! 
    1661 00006920     4d29          move    a9,a9                           ; Player 1?
    1662 00006930     ca11          jrz     qeuwp1_is_dufus                 ; br = yes
    1663 00006940     05a0          move    @p2winstreak,a0,W               ; Is this player on a winstreak?
         00006950 00000000! 
    1664 00006970     0b40          cmpi    3,a0
         00006980     fffc  
    1665 00006990     c500          jrge    qeuwno_dufus_msg                        ; br = yes (no dufus msgs)
         000069a0     00b4  
    1666 000069b0     09e1          movi    p2dufus_msg_flags,a1            ; 
         000069c0 00009f50- 
    1667 000069e0     09e0          movi    [DUFUS_BOX_RXPOS,0],a0          ; Set p2 box x position
         000069f0 012c0000  
    1668 00006a10     09eb          movi    p2dufus_obj,a11                 ; Pointer to be used later
         00006a20 00009ef0- 
    1669 00006a40     c010          jruc    qeuwdufus_msg_box                       ; Go do it
    1670 00006a50           qeuwp1_is_dufus
    1671 00006a50     05a0          move    @p1winstreak,a0,W               ; Is this player on a winstreak?
         00006a60 00000000! 
    1672 00006a80     0b40          cmpi    4,a0
         00006a90     fffb  
    1673 00006aa0     c500          jrge    qeuwno_dufus_msg                        ; br = yes (no dufus msgs)
         00006ab0     00a3  
    1674 00006ac0     09e1          movi    p1dufus_msg_flags,a1            ; Get which msgs to show
         00006ad0 00009f30- 
    1675 00006af0     09eb          movi    p1dufus_obj,a11                 ; Pointer to used later
         00006b00 00009eb0- 
    1676 00006b20     09e0          movi    [DUFUS_BOX_LXPOS,0],a0          ; Set p1 box x position
         00006b30 00630000  
    1677 00006b50           qeuwdufus_msg_box
    1678 00006b50     4b2e          btst    a9,a14                          ; Is this really a human ?
    1679 00006b60     ca00          jrz     qeuwno_dufus_msg                        ; br = no
         00006b70     0097  
    1680 00006b80     8622          move    *a1,a2,L                        ; Get enabled msg flags
    1681 00006b90     1823          movk    1,a3                            ; Generate bit number of msg we want displayed
    1682 00006ba0     0bea          subi    1,a10                           ; Subtract 1 from msg number
         00006bb0     fffe  
    1683 00006bc0     4d48          move    a10,a8                          ; Save msg number
    1684 00006bd0     6343          sll     a10,a3                          ; Shift bit up
    1685 00006be0     4c4a          move    a2,a10                          ; Save bit
    1686 00006bf0     5062          and     a3,a2                           ; Ok to display msg ?
    1687 00006c00     ca00          jrz     qeuwno_dufus_msg                        ; br = no
         00006c10     008d  
    1688 00006c20     526a          andn    a3,a10                          ; Disable this msg
    1689 00006c30     8341          move    a10,*a1,L                       ; Write it back
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   38

    1690 00006c40     4d03          move    a8,a3                           ; Get msg number
    1691 00006c50     24a3          sll     5,a3                            ; Offset into table
    1692 00006c60     0b23          addi    dufus_msgs,a3                   ; Add table pointer
         00006c70 00005dc0' 
    1693 00006c90     1822          movk    1,a2
    1694 00006ca0     0782          move    a2,@dboxes_on,L
         00006cb0 00000860- 
    1695 00006cd0     8662          move    *a3,a2,L                        ; Get image pointer (text)
    1696 00006ce0     09e1          movi    [DUFUS_BOX_YPOS,0],a1           ; Vertical Position
         00006cf0 00a70000  
    1697 00006d10     09c3          movi    02000H,a3                       ; Z Position
         00006d20     2000  
    1698 00006d30     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ; DMACTRL
         00006d40 0000a102  
    1699 00006d60     09c5          movi    CLSNEUT,a5                      ; Object ID
         00006d70     0000  
    1700 00006d80     56c6          clr     a6                              ; X Velocity 
    1701 00006d90     56e7          clr     a7                              ; Y Velocity
    1702 00006da0                   PUSH    a0,a1                           ; Save these
    1703 00006dc0     0d5f          calla   BEGINOBJ                        ; Create Text Object
         00006dd0 00000000! 
    1704 00006df0                   PULL    a0,a1                           ; Restore regs
    1705 00006e10     830b          move    a8,*a11,L                       ; Save off object pointer
    1706 00006e20     09e2          movi    05000500h,a2                    ; Set initial text scale factor
         00006e30 05000500  
    1707 00006e50     b248          move    a2,*a8(OSCALE),L
         00006e60     0240  
    1708 00006e70     09e2          movi    INFOBOX,a2                      ; Box Image Pointer
         00006e80 00000000! 
    1709 00006ea0     0be3          subi    10h,a3                          ; Make sure box is behind text
         00006eb0     ffef  
    1710 00006ec0     09f0          movi    DPLT_B_P,b0                     ; Player 1 palette
         00006ed0 00000000! 
    1711 00006ef0     4d29          move    a9,a9                           ; Are we player 1?
    1712 00006f00     ca03          jrz     qeuwp1_dufus_box_pal            ; br = yes
    1713 00006f10     09f0          movi    DPLT_R_P,b0                     ; Player 2 palette
         00006f20 00000000! 
    1714 00006f40           qeuwp1_dufus_box_pal
    1715 00006f40     0d5f          calla   BEGINOBJP                       ; Create the box
         00006f50 00000000! 
    1716 00006f70     b30b          move    a8,*a11(32),L                   ; Save box object pointer
         00006f80     0020  
    1717 00006f90     09e2          movi    05000500h,a2                    ; Set initial box scale factor
         00006fa0 05000500  
    1718 00006fc0     b248          move    a2,*a8(OSCALE),L
         00006fd0     0240  
    1719 00006fe0     09e3          movi    02000200h,a3                    ; Initial amount to adjust scale factor
         00006ff0 02000200  
    1720 00007010           qeuwdufus_wait
    1721 00007010                   PUSHP   a2,a3,a8                        ; Savey reggies
    1722 00007030     0d3f          callr   qeuwadjust_tl                   ; Adjust top/left corner position
         00007040     ff60  
    1723 00007050                   SLEEPK  1                               ; Wait
    1724 00007090                   PULLP   a2,a3,a8                        ; Getty reggies
    1725 000070b0     0b62          cmpi    01000100h,a2                    ; Are we at full size
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   39

         000070c0 fefffeff  
    1726 000070e0     ca0e          jrz     qeuwdufus_flash                 ; br = yes
    1727 000070f0     4462          sub     a3,a2                           ; Adjust scale factor
    1728 00007100     0b63          cmpi    00010001h,a3                    ; Scaling value = 1?
         00007110 fffefffe  
    1729 00007130     ca01          jrz     qeuwno_more_shift                       ; br = yes
    1730 00007140     2fe3          srl     1,a3                            ; Adjust scaling value
    1731 00007150           qeuwno_more_shift                                       
    1732 00007150     8768          move    *a11,a8,L                       ; Get pointer to text object
    1733 00007160     b248          move    a2,*a8(OSCALE),L                ; Set new scale factor
         00007170     0240  
    1734 00007180     b768          move    *a11(32),a8,L                   ; Get pointer to box object
         00007190     0020  
    1735 000071a0     b248          move    a2,*a8(OSCALE),L                ; Set new scale factor
         000071b0     0240  
    1736 000071c0     c0e4          jruc    qeuwdufus_wait                  ; Do it again
    1737 000071d0           qeuwdufus_flash
    1738 000071d0     09c0          movi    BOX_OUT_SOUND,a0
         000071e0     00aa  
    1739 000071f0     0d5f          calla   triple_sound
         00007200 00000000! 
    1740 00007220     b768          move    *a11(32),a8,L                   ; Get the object pointer
         00007230     0020  
    1741 00007240     09c9          movi    0101h,a9                        ; Constant color (white)
         00007250     0101  
    1742 00007260                   CREATE  4000h|AWARD_PID,FLASHME         ; Flash him once
    1743 000072e0                   SLEEPK  5
    1744 00007320                   CREATE  4000h|AWARD_PID,FLASHME         ; Flash him twice
    1745 000073a0                   SLEEPK  5
    1746 000073e0           qeuwdufus_done
    1747 000073e0                   SLEEPK  1
    1748 00007420     07a0          move    @award_ok_to_die,a0,L           ; Should I croak?
         00007430 00000800- 
    1749 00007450     caf8          jrz     qeuwdufus_done                  ; br = no
    1750                    
    1751 00007460     8760          move    *a11,a0,L                       ; Get rid of text object
    1752 00007470     0d5f          calla   DELOBJ
         00007480 00000000! 
    1753 000074a0     b760          move    *a11(32),a0,L                   ; Get rid of box object
         000074b0     0020  
    1754 000074c0     0d5f          calla   DELOBJ
         000074d0 00000000! 
    1755 000074f0           qeuwno_dufus_msg
    1756 000074f0                   DIE                                     ; Crooooak!!!
    1757                    
    1758                    
    1759                    
    1760 00009fd0                   .bss    pin_objects,32*2
    1761                    
    1762                    
    1763                    ******************************************************************************
    1764                    *
    1765                    * a9 is dead team (0 or 1).  Figure out if we need to post the message or
    1766                    * not.
    1767                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   40

    1768 00007520            SUBR   pin_prompt
    1769                    
    1770 00007520     05ae          move    @royal_rumble,a14       ; Are we in royal rumble mode ?
         00007530 00000000! 
    1771 00007550     cb04          jrnz    qeuwcheck_count         ; br = yes
    1772 00007560     0d5f          calla   is_8_on_1               ; Are is 8 on 1 mode ?
         00007570 00000000! 
    1773 00007590     c905          jrnc    qeuwnot_8_on_1          ; br = no
    1774 000075a0           qeuwcheck_count
    1775 000075a0     05ae          move    @wrestler_count,a14     ; Are there any drones left to kill ?
         000075b0 00000000! 
    1776 000075d0     cb00          jrnz    qeuwdie                 ; br = yes
         000075e0     00e5  
    1777 000075f0           qeuwnot_8_on_1
    1778                    
    1779                            ;quit if there's already one of these going. (not likely)
    1780 000075f0     09c0          movi    PINHIM_ANIM_PID,a0
         00007600     0160  
    1781 00007610     09c1          movi    -1,a1
         00007620     ffff  
    1782 00007630     0d5f          calla   EXISTP
         00007640 00000000! 
    1783 00007660     cb00          jrnz    qeuwdie
         00007670     00dc  
    1784                    
    1785                            ;look for a live human from the winning team inside the ring.
    1786                            ;quit if there isn't one.
    1787 00007680     09e0          movi    process_ptrs,a0
         00007690 00000000! 
    1788 000076b0     09c1          movi    2,a1                    ;only check humans
         000076c0     0002  
    1789 000076d0     9602  qeuwlp0 move    *a0+,a2,L
    1790 000076e0     ca0d          jrz     qeuwnxt0                        ;skip inactive
    1791 000076f0     b44e          move    *a2(PLYR_SIDE),a14
         00007700     05b0  
    1792 00007710     492e          cmp     a9,a14
    1793 00007720     ca09          jreq    qeuwnxt0                        ;skip dead team
    1794 00007730     b44e          move    *a2(PLYRMODE),a14
         00007740     05c0  
    1795 00007750     0b4e          cmpi    MODE_DEAD,a14
         00007760     fff6  
    1796 00007770     ca04          jreq    qeuwnxt0                        ;skip dead guys (shouldn't be any)
    1797 00007780     b44e          move    *a2(INRING),a14
         00007790     0560  
    1798 000077a0     cb01          jrnz    qeuwnxt0                        ;skip outside guys
    1799 000077b0     c003          jruc    qeuwf_dead                      ;got one.  move on.
    1800 000077c0     3e01  qeuwnxt0        dsj     a1,qeuwlp0
    1801 000077d0     c000          jruc    qeuwdie                 ;no live winning human found.  quit.
         000077e0     00c5  
    1802                    
    1803 000077f0           qeuwf_dead      ;Make sure everyone on the dead team is actually dead and not
    1804                            ; a zombie.  Further, make sure at least one is inside the ring.
    1805 000077f0     4c48          move    a2,a8                   ;save proc ptr of pinner.
    1806 00007800     574a          clr     a10                     ;"found pinable guy" flag
    1807                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   41

    1808 00007810     09e0          movi    process_ptrs,a0
         00007820 00000000! 
    1809 00007840     09c1          movi    NUM_WRES,a1             ;check everyone
         00007850     0007  
    1810 00007860     9602  qeuwlp1 move    *a0+,a2,L
    1811 00007870     ca13          jrz     qeuwnxt1                        ;skip inactive
    1812 00007880     b44e          move    *a2(PLYR_SIDE),a14
         00007890     05b0  
    1813 000078a0     492e          cmp     a9,a14
    1814 000078b0     cb0f          jrne    qeuwnxt1                        ;skip live team
    1815 000078c0     b44e          move    *a2(INRING),a14
         000078d0     0560  
    1816 000078e0     cb0c          jrnz    qeuwnxt1                        ;skip outside guys
    1817 000078f0     b44e          move    *a2(PLYRMODE),a14
         00007900     05c0  
    1818 00007910     0b4e          cmpi    MODE_DEAD,a14
         00007920     fff6  
    1819 00007930     cb00          jrne    qeuwdie                 ;found live guy - quit
         00007940     00af  
    1820 00007950     b64e          move    *a2(STATUS_FLAGS),a14,L
         00007960     0b50  
    1821 00007970     1f8e          btst    B_ZOMBIE,a14
    1822 00007980     cb00          jrnz    qeuwdie                 ;found zombie - quit
         00007990     00aa  
    1823 000079a0     102a          inc     a10                     ;got one.
    1824 000079b0     3ec1  qeuwnxt1        dsj     a1,qeuwlp1
    1825                    
    1826                    
    1827                    
    1828                            ;done looking, and everyone on the dead team is dead and not a
    1829                            ;zombie.  If a10 is set, that means we also found at least one
    1830                            ;inside the ring, so we can go ahead and flash the message.
    1831 000079c0           qeuwfp_dn       TEST    a10
    1832 000079d0     ca00          jrz     qeuwdie
         000079e0     00a5  
    1833                    
    1834                    
    1835 000079f0     0d5f          calla   END_MATCH_SPEECH        ;do the obnoxious "PIN HIM!" crap.
         00007a00 00000000! 
    1836                    
    1837 00007a20     09c0          MOVI    0BBH,A0                 ;Move name annc snd
         00007a30     00bb  
    1838 00007a40     0d5f          CALLA   triple_sound
         00007a50 00000000! 
    1839                    
    1840                    
    1841 00007a70     09e9          movi    pin_objects,a9
         00007a80 00009fd0- 
    1842                            
    1843 00007aa0     09e1          movi    [128,0],a1
         00007ab0 00800000  
    1844 00007ad0     09e2          movi    CHOICBK,a2
         00007ae0 00000000! 
    1845 00007b00     09c3          movi    1800h,a3
         00007b10     1800  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   42

    1846 00007b20     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ; DMACTRL
         00007b30 0000a102  
    1847 00007b50     09c5          movi    TYPPINHIM,a5
         00007b60     0160  
    1848 00007b70     56c6          clr     a6                              ; X Velocity 
    1849 00007b80     56e7          clr     a7                              ; Y Velocity
    1850                    
    1851 00007b90     b50e          move    *a8(PLYR_SIDE),a14
         00007ba0     05b0  
    1852 00007bb0     cb13          jrnz    qeuwonrt
    1853                    
    1854                            ;left
    1855 00007bc0     05a0          move    @p1pins,a0
         00007bd0 00009fb0- 
    1856 00007bf0     1020          addk    1,a0
    1857 00007c00     0580          move    a0,@p1pins
         00007c10 00009fb0- 
    1858 00007c30     09e0          movi    [-100,0],a0
         00007c40 ff9c0000  
    1859 00007c60     09f6          movi    [-50,0],b6
         00007c70 ffce0000  
    1860 00007c90     574a          clr     a10
    1861 00007ca0     09f0          movi    DPLT_B_P,b0
         00007cb0 00000000! 
    1862 00007cd0     18ab          movk    5,a11
    1863 00007ce0     c014          jruc    qeuwdo_it
    1864                    
    1865 00007cf0           qeuwonrt        ;right
    1866 00007cf0     05a0          move    @p2pins,a0
         00007d00 00009fc0- 
    1867 00007d20     1020          addk    1,a0
    1868 00007d30     0580          move    a0,@p2pins
         00007d40 00009fc0- 
    1869 00007d60     09e0          movi    [399+101,0],a0
         00007d70 01f40000  
    1870 00007d90     09f6          movi    [399+50,0],b6
         00007da0 01c10000  
    1871 00007dc0     09ca          movi    400,a10
         00007dd0     0190  
    1872 00007de0     09f0          movi    DPLT_R_P,b0
         00007df0 00000000! 
    1873 00007e10     09cb          movi    -5,a11
         00007e20     fffb  
    1874                    
    1875 00007e30           qeuwdo_it
    1876 00007e30     098f          mmtm    sp,a0,a1
         00007e40     c000  
    1877 00007e50     0d5f          calla   BEGINOBJP
         00007e60 00000000! 
    1878 00007e80     09af          mmfm    sp,a0,a1
         00007e90     0003  
    1879 00007ea0     8309          move    a8,*a9,L
    1880                    
    1881 00007eb0     09c3          movi    1810h,a3
         00007ec0     1810  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   43

    1882 00007ed0     4ed0          move    b6,a0
    1883 00007ee0     09e2          movi    PINHIM09,a2
         00007ef0 00000000! 
    1884 00007f10     0d5f          calla   BEGINOBJ
         00007f20 00000000! 
    1885 00007f40     b309          move    a8,*a9(32),L
         00007f50     0020  
    1886                    
    1887 00007f60     4d60          move    a11,a0
    1888                    
    1889 00007f70           qeuwzin
    1890 00007f70     8728          move    *a9,a8,L
    1891 00007f80     b50b          move    *a8(OXPOS),a11,W
         00007f90     0090  
    1892 00007fa0     494b          cmp     a10,a11
    1893 00007fb0     ca11          jrz     qeuwzin_done
    1894 00007fc0     400b          add     a0,a11
    1895 00007fd0     b168          move    a11,*a8(OXPOS),W
         00007fe0     0090  
    1896 00007ff0     b728          move    *a9(32),a8,L
         00008000     0020  
    1897 00008010     b50b          move    *a8(OXPOS),a11,W
         00008020     0090  
    1898 00008030     400b          add     a0,a11
    1899 00008040     b168          move    a11,*a8(OXPOS),W
         00008050     0090  
    1900 00008060                   PUSHP   a0
    1901 00008070                   SLEEPK  1
    1902 000080b0                   PULLP   a0
    1903 000080c0     c0ea          jruc    qeuwzin
    1904                    
    1905 000080d0           qeuwzin_done
    1906                    
    1907 000080d0                   PUSHP   a0
    1908 000080e0                   CREATE  PINHIM_ANIM_PID,qeuwflash_pin_txt
    1909                    
    1910 00008160                   PUSHP   a0
    1911 00008170                   SLEEP   TSEC*2
    1912 000081c0                   PULLP   a0
    1913 000081d0     0d5f          calla   KILL
         000081e0 00000000! 
    1914 00008200                   PULLP   a0
    1915                    
    1916 00008210           qeuwzout
    1917 00008210     8728          move    *a9,a8,L
    1918 00008220     b50b          move    *a8(OXPOS),a11,W
         00008230     0090  
    1919 00008240     0b4b          cmpi    -107,a11
         00008250     006a  
    1920 00008260     c414          jrlt    qeuwzout_done
    1921 00008270     0b4b          cmpi    500,a11
         00008280     fe0b  
    1922 00008290     c711          jrgt    qeuwzout_done
    1923 000082a0     440b          sub     a0,a11
    1924 000082b0     b168          move    a11,*a8(OXPOS),W
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   44

         000082c0     0090  
    1925 000082d0     b728          move    *a9(32),a8,L
         000082e0     0020  
    1926 000082f0     b50b          move    *a8(OXPOS),a11,W
         00008300     0090  
    1927 00008310     440b          sub     a0,a11
    1928 00008320     b168          move    a11,*a8(OXPOS),W
         00008330     0090  
    1929 00008340                   PUSHP   a0
    1930 00008350                   SLEEPK  1
    1931 00008390                   PULLP   a0
    1932 000083a0     c0e6          jruc    qeuwzout
    1933                    
    1934 000083b0           qeuwzout_done
    1935 000083b0     8720          move    *a9,a0,L
    1936 000083c0     0d5f          calla   DELOBJ
         000083d0 00000000! 
    1937 000083f0     b720          move    *a9(32),a0,L
         00008400     0020  
    1938 00008410     0d5f          calla   DELOBJ
         00008420 00000000! 
    1939                    
    1940 00008440           qeuwdie DIE
    1941                    
    1942                    
    1943 00008470           qeuwflash_pin_txt
    1944                    
    1945                            .ref    setup_back_anim
    1946                            .ref    ANIM_CROWD
    1947                                      
    1948 00008470     b728          move    *a9(32),a8,L
         00008480     0020  
    1949 00008490     18a9          movk    5,a9
    1950                    
    1951 000084a0           qeuwlpa PUSHP   a9
    1952                            .ref    PIN_FLASH_ANIM
    1953 000084b0     09e1          movi    PIN_FLASH_ANIM,a1
         000084c0 00000000! 
    1954 000084e0     0d5f          calla   setup_back_anim
         000084f0 00000000! 
    1955                    
    1956 00008510                   JSRP    ANIM_CROWD
    1957                    
    1958 00008580                   PULLP   a9
    1959 00008590     3e09          dsj     a9,qeuwlpa
    1960                    
    1961 000085a0                   DIE
    1962                    
    1963                    
    1964                    ***********************************************************
    1965                    *
    1966                    ;A8 = player side (0,1)
    1967 000085d0            SUBRP  no_block_powerup_check
    1968 000085d0           sfiolp
    1969                            ;no no-block allowed if royal rumble.
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   45

    1970 000085d0     05ae          move    @royal_rumble,a14
         000085e0 00000000! 
    1971 00008600     cb4b          jrnz    sfiodie
    1972                    
    1973 00008610     576b          clr     a11
    1974 00008620                   PUPWAITSWITCH   BLOCK,sfiolp
    1975                    
    1976 00008770     09cb          movi    TSEC*2,a11
         00008780     006a  
    1977 00008790                   PUPWAITSWITCH   BLOCK,sfiolp
    1978 000088e0                   PUPWAITSWITCH   BLOCK,sfiolp
    1979                    
    1980 00008a30     24a8          sll     5,a8
    1981 00008a40     0b28          addi    p1powerup_request,a8
         00008a50 00009f70- 
    1982                    
    1983 00008a70     8709          move    *a8,a9,L
    1984 00008a80     0ba9          ori     BLOCKING_OFF,a9
         00008a90 00000001  
    1985 00008ab0     8328          move    a9,*a8,L
    1986                    
    1987 00008ac0           sfiodie DIE
    1988                    
    1989                    ***********************************************************
    1990                    **
    1991                    ;asA8 = player side (0,1)
    1992 00008af0            SUBRP  move_names_powerup_check
    1993 00008af0           dhxklp
    1994 00008af0     576b          clr     a11
    1995 00008b00                   PUPWAITSWITCH   PUNCH,dhxklp
    1996                    
    1997 00008c50     09cb          movi    TSEC*2,a11
         00008c60     006a  
    1998 00008c70                   PUPWAITSWITCH   PUNCH,dhxklp
    1999 00008dc0                   PUPWAITSWITCH   PUNCH,dhxklp
    2000 00008f10                   PUPWAITSWITCH   PUNCH,dhxklp
    2001                    
    2002 00009060     24a8          sll     5,a8
    2003 00009070     0b28          addi    p1powerup_request,a8
         00009080 00009f70- 
    2004                    
    2005 000090a0     8709          move    *a8,a9,L
    2006 000090b0     0ba9          ori     MOVE_NAMES_ON,a9
         000090c0 00000010  
    2007 000090e0     8328          move    a9,*a8,L
    2008                    
    2009 000090f0                   DIE
    2010                    
    2011                    
    2012                    
    2013                    ***********************************************************
    2014                    ***
    2015                    ;aA8 = player side (0,1)
    2016 00009120            SUBRP  drone_meters_powerup_check
    2017                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   46

    2018                            ;only in one-player games
    2019 00009120     05ab          move    @PSTATUS2,a11
         00009130 00000000! 
    2020 00009150     0b4b          cmpi    3,a11
         00009160     fffc  
    2021 00009170     ca11          jrz     bvxvonep_only
    2022                    
    2023                            ;only in one-on-one games
    2024 00009180     05ae          move    @NUM_OPPS,a14
         00009190 00000000! 
    2025 000091b0     142e          dec     a14
    2026 000091c0     cb0c          jrnz    bvxvonep_only
    2027 000091d0           bvxvlp
    2028                    
    2029                    
    2030                    ;       clr     a11
    2031                    ;       PUPWAITSWITCH   KICK,bvxvlp
    2032                    ;                            
    2033                    ;       movi    TSEC*2,a11
    2034                    ;       PUPWAITSWITCH   KICK,bvxvlp
    2035                    ;       PUPWAITSWITCH   KICK,bvxvlp
    2036                    
    2037 000091d0     24a8          sll     5,a8
    2038 000091e0     0b28          addi    p1powerup_request,a8
         000091f0 00009f70- 
    2039                    
    2040 00009210     8709          move    *a8,a9,L
    2041 00009220     0ba9          ori     D_METERS_ON,a9
         00009230 00000020  
    2042 00009250     8328          move    a9,*a8,L
    2043 00009260     0589          move    a9,@drone_meters_on
         00009270 00000920- 
    2044                    
    2045 00009290           bvxvonep_only
    2046 00009290                   DIE
    2047                    
    2048                    
    2049                    ***********************************************************
    2050                    *****
    2051                    ;bA8 = player side (0,1)
    2052 000092c0            SUBRP  hyper_match_powerup_check
    2053 000092c0           unjllp
    2054 000092c0     576b          clr     a11
    2055 000092d0                   PUPWAITSWITCH   LEFT,unjllp
    2056                    
    2057 00009420     09cb          movi    TSEC*2,a11
         00009430     006a  
    2058 00009440                   PUPWAITSWITCH   PUNCH,unjllp
    2059 00009590                   PUPWAITSWITCH   PUNCH,unjllp
    2060 000096e0                   PUPWAITSWITCH   BLOCK,unjllp
    2061                    
    2062 00009830     24a8          sll     5,a8
    2063 00009840     0b28          addi    p1powerup_request,a8
         00009850 00009f70- 
    2064                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   47

    2065 00009870     8709          move    *a8,a9,L
    2066 00009880     0ba9          ori     HYPER_MATCH_ON,a9       ; Disabled for now
         00009890 00000040  
    2067 000098b0     8328          move    a9,*a8,L
    2068                    
    2069 000098c0                   DIE
    2070                    
    2071                    
    2072                    ***********************************************************
    2073                    *****&
    2074                    ;cA8 = player side (0,1)
    2075 000098f0            SUBRP  combos_powerup_check
    2076 000098f0           txmylp
    2077 000098f0     576b          clr     a11
    2078 00009900                   PUPWAITSWITCH   RIGHT,txmylp
    2079                    
    2080 00009a50     09cb          movi    TSEC*2,a11
         00009a60     006a  
    2081 00009a70                   PUPWAITSWITCH   PUNCH,txmylp
    2082 00009bc0                   PUPWAITSWITCH   SUPERP,txmylp
    2083                    
    2084 00009d10     24a8          sll     5,a8
    2085 00009d20     0b28          addi    p1powerup_request,a8
         00009d30 00009f70- 
    2086                    
    2087 00009d50     8709          move    *a8,a9,L
    2088 00009d60     0ba9          ori     COMBOS_ON,a9
         00009d70 00000002  
    2089 00009d90     8328          move    a9,*a8,L
    2090                    
    2091 00009da0                   DIE
    2092                    
    2093                    
    2094                    ***********************************************************
    2095                    ****1
    2096                    ;dzA8 = player side (0,1)
    2097 00009dd0            SUBRP  ring_out_powerup_check
    2098 00009dd0           nhezlp
    2099 00009dd0     576b          clr     a11
    2100 00009de0                   PUPWAITSWITCH   DOWN,nhezlp
    2101                    
    2102 00009f30     09cb          movi    TSEC*2,a11
         00009f40     006a  
    2103 00009f50                   PUPWAITSWITCH   PUNCH,nhezlp
    2104 0000a0a0                   PUPWAITSWITCH   KICK,nhezlp
    2105 0000a1f0                   PUPWAITSWITCH   BLOCK,nhezlp
    2106                    
    2107 0000a340     24a8          sll     5,a8
    2108 0000a350     0b28          addi    p1powerup_request,a8
         0000a360 00009f70- 
    2109                    
    2110 0000a380     8709          move    *a8,a9,L
    2111 0000a390     0ba9          ori     RING_OUTS_ON,a9
         0000a3a0 00000004  
    2112 0000a3c0     8328          move    a9,*a8,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   48

    2113                    
    2114 0000a3d0                   DIE
    2115                    
    2116                    
    2117                    ***********************************************************
    2118                    ****1
    2119                    ;A8 = player side (0,1)
    2120 0000a400            SUBRP  no_ring_powerup_check
    2121 0000a400           jgrflp
    2122 0000a400     576b          clr     a11
    2123 0000a410                   PUPWAITSWITCH   UP,jgrflp
    2124                    
    2125 0000a560     09cb          movi    TSEC*2,a11
         0000a570     006a  
    2126 0000a580                   PUPWAITSWITCH   RIGHT,jgrflp
    2127 0000a6d0                   PUPWAITSWITCH   DOWN,jgrflp
    2128 0000a820                   PUPWAITSWITCH   LEFT,jgrflp
    2129                    
    2130 0000a970     24a8          sll     5,a8
    2131 0000a980     0b28          addi    p1powerup_request,a8
         0000a990 00009f70- 
    2132                    
    2133 0000a9b0     8709          move    *a8,a9,L
    2134 0000a9c0     0ba9          ori     NO_RING,a9
         0000a9d0 00000008  
    2135 0000a9f0     8328          move    a9,*a8,L
    2136                    
    2137 0000aa00                   DIE
    2138                    
    2139                    
    2140                    ***********************************************************
    2141                    **a
    2142                    ;eA8 = player side (0,1)
    2143                    
    2144 0000aa30                   BSSX    buddy_mode_checked,16
    2145                    
    2146 0000aa30            SUBRP  buddy_mode_powerup_check
    2147                    
    2148 0000aa30           cwgblp  ;no buddy mode allowed if royal rumble.
    2149 0000aa30     05ae          move    @royal_rumble,a14
         0000aa40 00000000! 
    2150 0000aa60     cb7d          jrnz    cwgbdie
    2151                    
    2152                            ;clear the too late flag
    2153 0000aa70     57ce          clr     a14
    2154 0000aa80     058e          move    a14,@buddy_mode_checked
         0000aa90 0000a010- 
    2155                    
    2156 0000aab0     576b          clr     a11
    2157 0000aac0                   PUPWAITSWITCH   BLOCK,cwgblp
    2158                    
    2159 0000ac10     09cb          movi    TSEC*2,a11
         0000ac20     006a  
    2160 0000ac30                   PUPWAITSWITCH   BLOCK,cwgblp
    2161 0000ad80                   PUPWAITSWITCH   BLOCK,cwgblp
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   49

    2162 0000aed0                   PUPWAITSWITCH   BLOCK,cwgblp
    2163 0000b020                   PUPWAITSWITCH   BLOCK,cwgblp
    2164                    
    2165                            ;too late?
    2166 0000b170     05ae          move    @buddy_mode_checked,a14
         0000b180 0000a010- 
    2167 0000b1a0     cb09          jrnz    cwgbdie
    2168                    
    2169 0000b1b0     24a8          sll     5,a8
    2170 0000b1c0     0b28          addi    p1powerup_request,a8
         0000b1d0 00009f70- 
    2171                    
    2172 0000b1f0     8709          move    *a8,a9,L
    2173 0000b200     0ba9          ori     BUDDY_MODE,a9
         0000b210 00000080  
    2174 0000b230     8328          move    a9,*a8,L
    2175                    
    2176 0000b240           cwgbdie DIE
    2177                    
    2178                    
    2179                    ***********************************************************
    2180                    **z
    2181                    ;fA8 = player side (0,1)
    2182 0000b270            SUBRP  player_powerup_checker
    2183                    
    2184 0000b270                   CREATE  PU_CHECK_PID,no_block_powerup_check
    2185 0000b300                   CREATE  PU_CHECK_PID,move_names_powerup_check
    2186 0000b390                   CREATE  PU_CHECK_PID,drone_meters_powerup_check
    2187                    ;       CREATE  PU_CHECK_PID,no_ring_powerup_check      ; Disable until we get blimp module
    2188 0000b420                   CREATE  PU_CHECK_PID,hyper_match_powerup_check
    2189 0000b4b0                   CREATE  PU_CHECK_PID,combos_powerup_check
    2190 0000b540                   CREATE  PU_CHECK_PID,ring_out_powerup_check
    2191 0000b5d0                   CREATE  PU_CHECK_PID,buddy_mode_powerup_check
    2192                    
    2193 0000b660                   DIE
    2194                    
    2195                    
    2196                    ***********************************************************
    2197                    *
    2198 0000b690            SUBR   powerup_check
    2199                    
    2200 0000b690     05ae          move    @do_show_options,a14
         0000b6a0 000008d0- 
    2201 0000b6c0     ca2f          jrz     zbnepowerup_check_die
    2202                    
    2203 0000b6d0     5708          clr     a8
    2204 0000b6e0     0788          move    a8,@p1powerup_request,L
         0000b6f0 00009f70- 
    2205 0000b710     0788          move    a8,@p2powerup_request,L
         0000b720 00009f90- 
    2206                    
    2207 0000b740     0588          move    a8,@blocking_off
         0000b750 000008e0- 
    2208 0000b770     0588          move    a8,@ring_out_on
         0000b780 000008f0- 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   50

    2209 0000b7a0     0588          move    a8,@move_names_on
         0000b7b0 00000910- 
    2210 0000b7d0     0588          move    a8,@drone_meters_on
         0000b7e0 00000920- 
    2211 0000b800     0588          move    a8,@instant_combos_on
         0000b810 00000930- 
    2212 0000b830     0588          move    a8,@hyper_speed_on
         0000b840 00000940- 
    2213 0000b860     0588          move    a8,@no_ring_on
         0000b870 00000950- 
    2214                    
    2215                            .if POWERUP_CODE_ON
    2216                    
    2217 0000b890                   CREATE  PU_CHECK_PID,player_powerup_checker
    2218                    
    2219 0000b920     1828          movk    1,a8
    2220 0000b930                   CREATE  PU_CHECK_PID,player_powerup_checker
    2221                    
    2222 0000b9c0           zbnepowerup_check_die
    2223                            .endif
    2224                    
    2225 0000b9c0                   DIE
    2226                    
    2227                    
    2228                    ***********************************************************
    2229                    *
    2230 0000b9f0            SUBR   get_powerups
    2231 0000b9f0     07a9          move    @p1powerup_request,a9,L         ; Player 1 powerups
         0000ba00 00009f70- 
    2232 0000ba20     07aa          move    @p2powerup_request,a10,L        ; Player 2 powerups
         0000ba30 00009f90- 
    2233 0000ba50     4d4b          move    a10,a11                         ; Save Player 2 powerups
    2234 0000ba60     512b          and     a9,a11                          ; Get h/h only powerups
    2235 0000ba70     0b8b          andi    BOTH_P_MASK,a11
         0000ba80 ffffff30  
    2236 0000baa0     0b89          andni   BOTH_P_MASK,a9
         0000bab0 000000cf  
    2237 0000bad0     0b8a          andni   BOTH_P_MASK,a10
         0000bae0 000000cf  
    2238 0000bb00     5569          or      a11,a9
    2239 0000bb10     556a          or      a11,a10
    2240 0000bb20     0789          move    a9,@p1powerup_request,L
         0000bb30 00009f70- 
    2241 0000bb50     078a          move    a10,@p2powerup_request,L
         0000bb60 00009f90- 
    2242 0000bb80     552a          or      a9,a10
    2243                    ;Both players must select these
    2244 0000bb90     4d28          move    a9,a8
    2245 0000bba0     0b88          andi    BLOCKING_OFF,a8
         0000bbb0 fffffffe  
    2246 0000bbd0     ca03          jrz     zbneblocking_on
    2247 0000bbe0     09c8          movi    2020h,a8
         0000bbf0     2020  
    2248 0000bc00     c001          jruc    zbneset_blocking
    2249 0000bc10           zbneblocking_on
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   51

    2250 0000bc10     5708          clr     a8
    2251 0000bc20           zbneset_blocking
    2252 0000bc20     0588          move    a8,@blocking_off
         0000bc30 000008e0- 
    2253                    
    2254 0000bc50     4d28          move    a9,a8
    2255 0000bc60     0b88          andi    COMBOS_ON,a8
         0000bc70 fffffffd  
    2256 0000bc90     0588          move    a8,@instant_combos_on
         0000bca0 00000930- 
    2257                    
    2258 0000bcc0     4d28          move    a9,a8
    2259 0000bcd0     0b88          andi    RING_OUTS_ON,a8
         0000bce0 fffffffb  
    2260 0000bd00     0588          move    a8,@ring_out_on
         0000bd10 000008f0- 
    2261                    
    2262 0000bd30     4d28          move    a9,a8
    2263 0000bd40     0b88          andi    NO_RING,a8
         0000bd50 fffffff7  
    2264 0000bd70     0588          move    a8,@no_ring_on
         0000bd80 00000950- 
    2265                    
    2266                            ;this one is done earlier in the wrestle code!
    2267                    ;       move    a9,a8
    2268                    ;       andi    BUDDY_MODE,a8
    2269                    ;       move    a8,@buddy_mode_on
    2270                    
    2271 0000bda0     4d28          move    a9,a8
    2272 0000bdb0     0b88          andi    HYPER_MATCH_ON,a8
         0000bdc0 ffffffbf  
    2273 0000bde0     ca03          jrz     zbnehyper_off
    2274 0000bdf0     09c8          movi    1,a8
         0000be00     0001  
    2275 0000be10     c001          jruc    zbneset_hyper
    2276 0000be20           zbnehyper_off
    2277 0000be20     5708          clr     a8
    2278 0000be30           zbneset_hyper
    2279 0000be30     0588          move    a8,@hyper_speed_on
         0000be40 00000940- 
    2280                    
    2281                    ;Either player can select these
    2282 0000be60     4d48          move    a10,a8
    2283 0000be70     0b88          andi    D_METERS_ON,a8
         0000be80 ffffffdf  
    2284 0000bea0     0588          move    a8,@drone_meters_on
         0000beb0 00000920- 
    2285                    
    2286 0000bed0     0960          rets
    2287                    
    2288                    
    2289                    
    2290                    ***********************************************************
    2291                    *
    2292 0000bee0            SUBR   show_options
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   52

    2293                            .if POWERUP_CODE_ON
    2294                    
    2295 0000bee0     05a9          move    @do_show_options,a9
         0000bef0 000008d0- 
    2296 0000bf10     cb03          jrnz    zbneok_to_show_options
    2297 0000bf20                   DIE
    2298 0000bf50           zbneok_to_show_options
    2299 0000bf50     0d3f          callr   get_powerups
         0000bf60     ffa8  
    2300                    
    2301 0000bf70     5708          clr     a8
    2302 0000bf80     0588          move    a8,@show_options_die
         0000bf90 000008c0- 
    2303                    
    2304 0000bfb0                   CREATE0 show_player_options
    2305                    
    2306 0000c020     1828          movk    1,a8
    2307 0000c030                   CREATE0 show_player_options
    2308                    
    2309                    ;Make sure combo meter starts flashing!
    2310                            .ref    SET_FLASHING
    2311                    
    2312 0000c0a0     05ae          move    @instant_combos_on,a14
         0000c0b0 00000930- 
    2313 0000c0d0     ca08          jrz     zbneno
    2314                    
    2315 0000c0e0     574a          clr     a10
    2316 0000c0f0     0d5f          calla   SET_FLASHING
         0000c100 00000000! 
    2317 0000c120     182a          movk    1,a10
    2318 0000c130     0d5f          calla   SET_FLASHING
         0000c140 00000000! 
    2319 0000c160           zbneno
    2320                    
    2321 0000c160                   SLEEP   TSEC
    2322                    
    2323 0000c1b0     09c9          movi    TSEC*2,a9
         0000c1c0     006a  
    2324 0000c1d0           zbneshow_opt_wait
    2325 0000c1d0                   SLEEPK  1
    2326 0000c210     0d5f          calla   get_all_buttons_cur
         0000c220 00000000! 
    2327 0000c240     cb01          jrnz    zbneshow_opt_done
    2328 0000c250     3d29          dsjs    a9,zbneshow_opt_wait
    2329 0000c260           zbneshow_opt_done
    2330 0000c260     1828          movk    1,a8
    2331 0000c270     0588          move    a8,@show_options_die
         0000c280 000008c0- 
    2332                    
    2333 0000c2a0     09c0          movi    RPUBAROID,a0
         0000c2b0     0e11  
    2334 0000c2c0     0d5f          calla   obj_del1c
         0000c2d0 00000000! 
    2335 0000c2f0     09c0          movi    LPUBAROID,a0
         0000c300     0e10  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   53

    2336 0000c310     0d5f          calla   obj_del1c
         0000c320 00000000! 
    2337                    
    2338 0000c340     5708          clr     a8
    2339 0000c350     0588          move    a8,@do_show_options
         0000c360 000008d0- 
    2340                    
    2341                            .endif
    2342 0000c380                   DIE
    2343                    
    2344                    
    2345                    ***********************************************************
    2346                    *
    2347 0000c3b0            SUBRP  pu_bar_text
    2348 0000c3b0 00000000!         .long   NOBLOCKA        ; Blocking off
    2349 0000c3d0 00000000!         .long   INSTCOMB        ; Combos on
    2350 0000c3f0 00000000!         .long   RINGOUT         ; Ring outs on
    2351 0000c410 00000000!         .long   SANSRING        ; No Ring
    2352 0000c430 00000000!         .long   MOVNAMES        ; Move names off
    2353 0000c450 00000000!         .long   DRONMETR        ; Drone meters off
    2354 0000c470 00000000!         .long   HYPERSPD        ; Hyper match on
    2355 0000c490 00000000!         .long   BUDDY           ; Buddy mode on
    2356                    
    2357                    
    2358                    ***********************************************************
    2359                    *
    2360 0000c4b0            SUBRP  move_pu_bars_on
    2361 0000c4b0                   PUSHP   a8,a9,a10,a11
    2362                    
    2363 0000c4d0     09cb          movi    PU_LEND_X,a11           ; Amount we gonna move em
         0000c4e0     007d  
    2364                    
    2365 0000c4f0     09c9          movi    LPUBAROID,a9            ; Player 1 pu bar objects
         0000c500     0e10  
    2366 0000c510     1b2a          movk    PU_BAR_VELOCITY,a10     ; Player 1 bar velocity
    2367 0000c520     4d08          move    a8,a8                   ; Are we player 1?
    2368 0000c530     ca03          jrz     zbnep1_pu_bars          ; br = yes
    2369 0000c540     09c9          movi    RPUBAROID,a9            ; Player 2 pu bar objects
         0000c550     0e11  
    2370 0000c560     03aa          neg     a10                     ; Player 2 bar velocity
    2371 0000c570           zbnep1_pu_bars
    2372 0000c570     09ee          movi    OBJLST,a14              ; Top of object list
         0000c580 00000000! 
    2373 0000c5a0           zbnemove_lp
    2374 0000c5a0     87ce          move    *a14,a14,L              ; Get object pointer
    2375 0000c5b0     ca0a          jrz     zbnelist_end            ; List end? - br = yes
    2376 0000c5c0     b5c1          move    *a14(OID),a1            ; Get object ID
         0000c5d0     0190  
    2377 0000c5e0     4921          cmp     a9,a1                   ; Is this one I'm a lookin fer
    2378 0000c5f0     cbfa          jrnz    zbnemove_lp
    2379                    
    2380 0000c600     b5c1          move    *a14(OXPOS),a1          ; Get current X position
         0000c610     0090  
    2381 0000c620     4141          add     a10,a1                  ; Add velocity
    2382 0000c630     b02e          move    a1,*a14(OXPOS)          ; Write it back
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   54

         0000c640     0090  
    2383 0000c650     c0f4          jruc    zbnemove_lp             ; Go chck next
    2384                    
    2385 0000c660           zbnelist_end
    2386 0000c660                   SLEEPK  1                       ; Show em
    2387                    
    2388 0000c6a0     172b          subk    PU_BAR_VELOCITY,a11     ; Are we done?
    2389 0000c6b0     cbeb          jrnz    zbnep1_pu_bars          ; br = no
    2390                    
    2391 0000c6c0                   PULLP   a8,a9,a10,a11
    2392 0000c6e0                   RETP
    2393                    
    2394                    
    2395                    
    2396                    ***********************************************************
    2397                    *
    2398                    ;a8 = player number
    2399 0000c710            SUBRP  show_player_options
    2400 0000c710     05a9          move    @PSTATUS2,a9
         0000c720 00000000! 
    2401 0000c740     4b09          btst    a8,a9
    2402 0000c750     ca74          jrz     zbnespo_die
    2403                    
    2404 0000c760           fini_wait
    2405 0000c760     05ae          move    @in_finish_move,a14     ; Are we doing a finishing move ?
         0000c770 00000000! 
    2406 0000c790     ca05          jrz     fini_done               ; br = no
    2407 0000c7a0                   SLEEPK  10
    2408 0000c7e0     c0f7          jruc    fini_wait
    2409 0000c7f0           fini_done
    2410                    
    2411 0000c7f0     09eb          movi    [PU_START_Y,0],a11
         0000c800 00d20000  
    2412                    
    2413 0000c820     4d09          move    a8,a9
    2414 0000c830     24a9          sll     5,a9
    2415 0000c840     0b29          addi    p1powerup_request,a9
         0000c850 00009f70- 
    2416 0000c870     8729          move    *a9,a9,L
    2417                    
    2418 0000c880     18ea          movk    (NUM_POWERUPS-1),a10
    2419 0000c890           zbnepu_request
    2420 0000c890     4b49          btst    a10,a9
    2421 0000c8a0     ca4e          jrz     zbneno_pu
    2422                    
    2423 0000c8b0     5600          clr     a0
    2424 0000c8c0     09f0          movi    DPLT_B_P,b0
         0000c8d0 00000000! 
    2425 0000c8f0     4d08          move    a8,a8
    2426 0000c900     ca06          jrz     zbnep1_xpos
    2427 0000c910     09f0          movi    DPLT_R_P,b0
         0000c920 00000000! 
    2428 0000c940     09e0          movi    [399,0],a0
         0000c950 018f0000  
    2429 0000c970           zbnep1_xpos
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   55

    2430 0000c970     4d61          move    a11,a1
    2431 0000c980     09e2          movi    BONUSBAR,a2
         0000c990 00000000! 
    2432 0000c9b0     09c3          movi    1800h,a3
         0000c9c0     1800  
    2433 0000c9d0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4
         0000c9e0 0000a102  
    2434 0000ca00     4d08          move    a8,a8
    2435 0000ca10     cb03          jrnz    zbneno_hflip
    2436 0000ca20     0ba4          ori     M_FLIPH,a4
         0000ca30 00000010  
    2437 0000ca50           zbneno_hflip
    2438 0000ca50     09c5          movi    LPUBAROID,a5
         0000ca60     0e10  
    2439 0000ca70     4d08          move    a8,a8
    2440 0000ca80     ca02          jrz     zbnep1_boid
    2441 0000ca90     09c5          movi    RPUBAROID,a5
         0000caa0     0e11  
    2442 0000cab0           zbnep1_boid
    2443 0000cab0     56c6          clr     a6
    2444 0000cac0     56e7          clr     a7
    2445 0000cad0                   PUSH    a8
    2446 0000cae0     0d5f          calla   BEGINOBJP
         0000caf0 00000000! 
    2447 0000cb10                   PULL    a8
    2448                    
    2449 0000cb20     09e0          movi    [PU_LTEXT_XPOS,0],a0
         0000cb30 ffc20000  
    2450 0000cb50     4d08          move    a8,a8
    2451 0000cb60     ca03          jrz     zbnelpu_p1_text
    2452 0000cb70     09e0          movi    [PU_RTEXT_XPOS,0],a0
         0000cb80 01ce0000  
    2453 0000cba0           zbnelpu_p1_text
    2454 0000cba0     4d61          move    a11,a1
    2455 0000cbb0     4d42          move    a10,a2
    2456 0000cbc0     24a2          sll     5,a2
    2457 0000cbd0     0b22          addi    pu_bar_text,a2
         0000cbe0 0000c3b0' 
    2458 0000cc00     8642          move    *a2,a2,L
    2459 0000cc10     09c3          movi    1810h,a3
         0000cc20     1810  
    2460 0000cc30     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4
         0000cc40 0000a102  
    2461 0000cc60     09c5          movi    LPUBAROID,a5
         0000cc70     0e10  
    2462 0000cc80     4d08          move    a8,a8
    2463 0000cc90     ca02          jrz     zbnep1_toid
    2464 0000cca0     09c5          movi    RPUBAROID,a5
         0000ccb0     0e11  
    2465 0000ccc0           zbnep1_toid
    2466 0000ccc0     56c6          clr     a6
    2467 0000ccd0     56e7          clr     a7
    2468 0000cce0     09f0          movi    WINFONT,b0
         0000ccf0 00000000! 
    2469 0000cd10                   PUSH    a8
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   56

    2470 0000cd20     0d5f          calla   BEGINOBJP
         0000cd30 00000000! 
    2471 0000cd50                   PULL    a8
    2472                            
    2473 0000cd60     0b2b          addi    [PU_BAR_YSPACE,0],a11
         0000cd70 fff10000  
    2474 0000cd90           zbneno_pu
    2475 0000cd90     142a          subk    1,a10
    2476 0000cda0     cfae          jrnn    zbnepu_request
    2477                    
    2478 0000cdb0                   JSRP    move_pu_bars_on
    2479                    
    2480 0000ce20           zbnewait_die
    2481 0000ce20                   SLEEPK  1
    2482 0000ce60     05ae          move    @show_options_die,a14
         0000ce70 000008c0- 
    2483 0000ce90     caf8          jrz     zbnewait_die
    2484                    
    2485 0000cea0           zbnespo_die
    2486 0000cea0                   DIE
    2487                    
    2488                    **********************************************************************
    2489                    *
    2490                    
    2491              00b0  MYOBJ_REC_SIZE  .equ    (16*11)
    2492              00a0  SIZEOF_JAM_STR  .equ    (16*10)
    2493                    
    2494                    MYOBJECT        .macro  x,y,z,img,ctrl,id,xv,yv
    2495                            .word   :x:,:y:,:z:
    2496                            .long   :img:
    2497                            .word   :ctrl:,:id:
    2498                            .long   :xv:,:yv:
    2499                            .endm
    2500                    
    2501 0000ced0            SUBRP  BLACKOUT
    2502 0000ced0     0190          .word   400,256,0,0
    2503 0000cf10 02000000          .long   2000000h
    2504 0000cf30     4000          .word   04000h
    2505 0000cf40                   .even
    2506                    
    2507                            .ref    ogmd10_ascii
    2508                            .ref    wsf14_ascii
    2509                            .ref    print_string_C2
    2510                            .ref    RNDRNG0
    2511                            .ref    setup_message
    2512                            .ref    mess_objid
    2513                            .ref    WSF_W_P
    2514                    
    2515 0000cf40            SUBRP  zbnemk3_tip_prompt1
    2516 0000cf40                   JAM_STR wsf14_ascii,10,0,200,30,WSF_R_P,print_string_C2
    2517 0000cfe0       43          .string "CONGRATULATIONS!!!",0
    2518 0000d080                   .even
    2519 0000d080            SUBRP  zbnemk3_tip_prompt2
    2520 0000d080                   JAM_STR ogmd10_ascii,10,0,200,70,SGMD8GLD,print_string_C2
    2521 0000d120       59          .string "YOU'VE ACHIEVED A LEVEL OF",0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   57

    2522 0000d200                   .even
    2523 0000d200            SUBRP  zbnemk3_tip_prompt4
    2524 0000d200                   JAM_STR ogmd10_ascii,10,0,200,85,SGMD8GLD,print_string_C2
    2525 0000d2a0       50          .string "PERFORMANCE THAT ENTITLES YOU",0
    2526 0000d390                   .even
    2527 0000d390            SUBRP  zbnemk3_tip_prompt5
    2528 0000d390                   JAM_STR ogmd10_ascii,10,0,200,100,SGMD8GLD,print_string_C2
    2529 0000d430       54          .string "TO A TIP FOR MORTAL KOMBAT 3",0
    2530 0000d520                   .even
    2531                    
    2532 0000d520            SUBRP  zbnemk3_tip1_str1
    2533 0000d520                   JAM_STR ogmd10_ascii,10,0,200,130,SGMD8BLU,print_string_C2
    2534                    ; Compressed string "FOR TWO PLAYER GAMES, USE THE"
    2535 0000d5c0       27          .byte   027h,03ch,007h,035h,00eh,007h,071h,02bh
    2536 0000d600       ea          .byte   0eah,0e6h,01ch,0a0h,0a2h,06bh,0d2h,04dh
    2537 0000d640       60          .byte   060h,0d3h,066h,050h,0a7h,026h,000h
    2538 0000d680                   .even
    2539 0000d680            SUBRP  zbnemk3_tip1_str2
    2540 0000d680                   JAM_STR ogmd10_ascii,10,0,200,145,SGMD8BLU,print_string_C2
    2541                    ; Compressed string "FOLLOWING CODE TO ENABLE A"
    2542 0000d720       27          .byte   027h,0dch,0b6h,030h,0aeh,0beh,068h,040h
    2543 0000d760       c2          .byte   0c2h,0a5h,019h,0d4h,070h,060h,0beh,0e2h
    2544 0000d7a0       d8          .byte   0d8h,09ah,081h,008h,000h
    2545 0000d7d0                   .even
    2546 0000d7d0            SUBRP  zbnemk3_tip1_str3
    2547 0000d7d0                   JAM_STR ogmd10_ascii,10,0,200,160,SGMD8BLU,print_string_C2
    2548                    ; Compressed string "SPECIAL FEATURE."
    2549 0000d870       74          .byte   074h,06ch,092h,0aah,0d8h,006h,0a7h,029h
    2550 0000d8b0       d6          .byte   0d6h,0f6h,06ch,03eh,000h
    2551 0000d8e0                   .even
    2552                    
    2553                    
    2554 0000d8e0            SUBRP  zbnemk3_tip2_str1
    2555 0000d8e0                   JAM_STR ogmd10_ascii,10,0,200,130,SGMD8BLU,print_string_C2
    2556                    ; Compressed string "IN TWO PLAYER GAMES, ENTER"
    2557 0000d980       ea          .byte   0eah,01bh,0d4h,038h,01ch,0c4h,0adh,0a8h
    2558 0000d9c0       9b          .byte   09bh,073h,080h,08ah,0aeh,049h,037h,081h
    2559 0000da00       f9          .byte   0f9h,0d6h,0e6h,00ch,000h
    2560 0000da30                   .even
    2561 0000da30            SUBRP  zbnemk3_tip2_str2
    2562 0000da30                   JAM_STR ogmd10_ascii,10,0,200,145,SGMD8BLU,print_string_C2
    2563                    ; Compressed string "THE CODE BELOW TO TURN ON A"
    2564 0000dad0       75          .byte   075h,06ah,006h,024h,05ch,09ah,0c1h,068h
    2565 0000db10       b6          .byte   0b6h,030h,01eh,0d4h,070h,050h,0dbh,0f3h
    2566 0000db50       1b          .byte   01bh,0c0h,06fh,020h,002h
    2567 0000db80                   .even
    2568 0000db80            SUBRP  zbnemk3_tip2_str3
    2569 0000db80                   JAM_STR ogmd10_ascii,10,0,200,160,SGMD8BLU,print_string_C2
    2570                    ; Compressed string "HIDDEN FEATURE."
    2571 0000dc20       a9          .byte   0a9h,05ah,096h,0e6h,01bh,09ch,0a6h,058h
    2572 0000dc60       db          .byte   0dbh,0b3h,0f9h,000h
    2573 0000dc80                   .even
    2574                    
    2575                    
    2576                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   58

    2577 0000dc80            SUBRP  zbnemk_code1_1
    2578 0000dc80     0081          .word   127+2+(24*0),179,4010h  ;x,y,z
    2579 0000dcb0 00000000!         .long   I_GORO  ;Image
    2580 0000dcd0     a102          .word   DMAWNZ|M_3D|M_SCRNREL
    2581 0000dce0     6000          .word   CLSMK3
    2582 0000dcf0 00000000          .long   0,0
    2583 0000dd30            SUBRP  zbnemk_code1_2
    2584 0000dd30     0099          .word   127+2+(24*1),179,4010h  ;x,y,z
    2585 0000dd60 00000000!         .long   I_SHOKAHN               ;Image
    2586 0000dd80     a102          .word   DMAWNZ|M_3D|M_SCRNREL
    2587 0000dd90     6000          .word   CLSMK3
    2588 0000dda0 00000000          .long   0,0
    2589 0000dde0            SUBRP  zbnemk_code1_3
    2590 0000dde0     00b1          .word   127+2+(24*2),179,4010h  ;x,y,z
    2591 0000de10 00000000!         .long   I_SHOKAHN       ;Image
    2592 0000de30     a102          .word   DMAWNZ|M_3D|M_SCRNREL
    2593 0000de40     6000          .word   CLSMK3
    2594 0000de50 00000000          .long   0,0
    2595 0000de90            SUBRP  zbnemk_code1_4
    2596 0000de90     00c9          .word   127+2+(24*3),179,4010h  ;x,y,z
    2597 0000dec0 00000000!         .long   I_QUESTION      ;Image
    2598 0000dee0     a102          .word   DMAWNZ|M_3D|M_SCRNREL
    2599 0000def0     6000          .word   CLSMK3
    2600 0000df00 00000000          .long   0,0
    2601 0000df40            SUBRP  zbnemk_code1_5
    2602 0000df40     00e1          .word   127+2+(24*4),179,4010h  ;x,y,z
    2603 0000df70 00000000!         .long   I_YINYANG       ;Image
    2604 0000df90     a102          .word   DMAWNZ|M_3D|M_SCRNREL
    2605 0000dfa0     6000          .word   CLSMK3
    2606 0000dfb0 00000000          .long   0,0
    2607 0000dff0            SUBRP  zbnemk_code1_6
    2608 0000dff0     00f9          .word   127+2+(24*5),179,4010h  ;x,y,z
    2609 0000e020 00000000!         .long   I_YINYANG       ;Image
    2610 0000e040     a102          .word   DMAWNZ|M_3D|M_SCRNREL
    2611 0000e050     6000          .word   CLSMK3
    2612 0000e060 00000000          .long   0,0
    2613                    
    2614                    
    2615                    
    2616 0000e0a0            SUBRP  zbnemk_code2_1
    2617 0000e0a0     0081          .word   127+2+(24*0),179,4010h  ;x,y,z
    2618 0000e0d0 00000000!         .long   I_QUESTION      ;Image
    2619 0000e0f0     a102          .word   DMAWNZ|M_3D|M_SCRNREL
    2620 0000e100     6000          .word   CLSMK3
    2621 0000e110 00000000          .long   0,0
    2622 0000e150            SUBRP  zbnemk_code2_2
    2623 0000e150     0099          .word   127+2+(24*1),179,4010h  ;x,y,z
    2624 0000e180 00000000!         .long   I_GORO          ;Image
    2625 0000e1a0     a102          .word   DMAWNZ|M_3D|M_SCRNREL
    2626 0000e1b0     6000          .word   CLSMK3
    2627 0000e1c0 00000000          .long   0,0
    2628 0000e200            SUBRP  zbnemk_code2_3
    2629 0000e200     00b1          .word   127+2+(24*2),179,4010h  ;x,y,z
    2630 0000e230 00000000!         .long   I_GORO          ;Image
    2631 0000e250     a102          .word   DMAWNZ|M_3D|M_SCRNREL
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   59

    2632 0000e260     6000          .word   CLSMK3
    2633 0000e270 00000000          .long   0,0
    2634 0000e2b0            SUBRP  zbnemk_code2_4
    2635 0000e2b0     00c9          .word   127+2+(24*3),179,4010h  ;x,y,z
    2636 0000e2e0 00000000!         .long   I_QUESTION      ;Image
    2637 0000e300     a102          .word   DMAWNZ|M_3D|M_SCRNREL
    2638 0000e310     6000          .word   CLSMK3
    2639 0000e320 00000000          .long   0,0
    2640 0000e360            SUBRP  zbnemk_code2_5
    2641 0000e360     00e1          .word   127+2+(24*4),179,4010h  ;x,y,z
    2642 0000e390 00000000!         .long   I_GORO          ;Image
    2643 0000e3b0     a102          .word   DMAWNZ|M_3D|M_SCRNREL
    2644 0000e3c0     6000          .word   CLSMK3
    2645 0000e3d0 00000000          .long   0,0
    2646 0000e410            SUBRP  zbnemk_code2_6
    2647 0000e410     00f9          .word   127+2+(24*5),179,4010h  ;x,y,z
    2648 0000e440 00000000!         .long   I_GORO          ;Image
    2649 0000e460     a102          .word   DMAWNZ|M_3D|M_SCRNREL
    2650 0000e470     6000          .word   CLSMK3
    2651 0000e480 00000000          .long   0,0
    2652                    
    2653 0000e4c0            SUBRP  zbnemk_code_frame
    2654 0000e4c0     007f          .word   127,177,4000h   ;x,y,z
    2655 0000e4f0 00000000!         .long   BOX2            ;Image
    2656 0000e510     a102          .word   DMAWNZ|M_3D|M_SCRNREL
    2657 0000e520     6000          .word   CLSMK3
    2658 0000e530 00000000          .long   0,0
    2659                    
    2660 0000e570            SUBRP  zbnemk_code_tbl1
    2661 0000e570 0000dc80'         .long   zbnemk_code1_1
    2662 0000e590 0000dd30'         .long   zbnemk_code1_2
    2663 0000e5b0 0000dde0'         .long   zbnemk_code1_3
    2664 0000e5d0 0000de90'         .long   zbnemk_code1_4
    2665 0000e5f0 0000df40'         .long   zbnemk_code1_5
    2666 0000e610 0000dff0'         .long   zbnemk_code1_6
    2667 0000e630 0000e4c0'         .long   zbnemk_code_frame
    2668 0000e650 00000000          .long   0
    2669                    
    2670 0000e670            SUBRP  zbnemk_code_tbl2
    2671 0000e670 0000e0a0'         .long   zbnemk_code2_1
    2672 0000e690 0000e150'         .long   zbnemk_code2_2
    2673 0000e6b0 0000e200'         .long   zbnemk_code2_3
    2674 0000e6d0 0000e2b0'         .long   zbnemk_code2_4
    2675 0000e6f0 0000e360'         .long   zbnemk_code2_5
    2676 0000e710 0000e410'         .long   zbnemk_code2_6
    2677 0000e730 0000e4c0'         .long   zbnemk_code_frame
    2678 0000e750 00000000          .long   0
    2679                    
    2680 0000e770            SUBRP  zbnemk3_tip1_str_tbl
    2681 0000e770 0000d520'         .long   zbnemk3_tip1_str1
    2682 0000e790 0000d680'         .long   zbnemk3_tip1_str2
    2683 0000e7b0 0000d7d0'         .long   zbnemk3_tip1_str3
    2684 0000e7d0 00000000          .long   0
    2685 0000e7f0 0000e570'         .long   zbnemk_code_tbl1
    2686                            
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   60

    2687 0000e810            SUBRP  zbnemk3_tip2_str_tbl
    2688 0000e810 0000d8e0'         .long   zbnemk3_tip2_str1
    2689 0000e830 0000da30'         .long   zbnemk3_tip2_str2
    2690 0000e850 0000db80'         .long   zbnemk3_tip2_str3
    2691 0000e870 00000000          .long   0
    2692 0000e890 0000e670'         .long   zbnemk_code_tbl2
    2693                    
    2694                    
    2695 0000e8b0            SUBRP  zbnemk3_tip_str_tbl
    2696 0000e8b0 0000e770'         .long   zbnemk3_tip1_str_tbl
    2697 0000e8d0 0000e810'         .long   zbnemk3_tip2_str_tbl
    2698                    
    2699 0000e8f0            SUBRP  zbnemk3_tip_prompt_str_tbl
    2700 0000e8f0 0000cf40'         .long   zbnemk3_tip_prompt1
    2701 0000e910 0000d080'         .long   zbnemk3_tip_prompt2
    2702 0000e930 0000d200'         .long   zbnemk3_tip_prompt4
    2703 0000e950 0000d390'         .long   zbnemk3_tip_prompt5
    2704 0000e970 00000000          .long   0
    2705                    
    2706 0000a020                   .bss    resume,16
    2707                    
    2708 0000e990            SUBRP  suspend_game
    2709 0000e990           zbnelp
    2710 0000e990     05aa          move    @resume,a10
         0000e9a0 0000a020- 
    2711 0000e9c0     cb07          jrnz    zbneok_to_resume
    2712 0000e9d0                   SLEEPK  1
    2713 0000ea10     0d3f          callr   suspend_all
         0000ea20     f7a1  
    2714 0000ea30     c0f5          jruc    zbnelp
    2715 0000ea40           zbneok_to_resume
    2716 0000ea40                   DIE
    2717                    
    2718 0000ea70            SUBRP  mk3_coin
    2719 0000ea70 00000000!         .long   MKCOIN_01
    2720 0000ea90 00000000!         .long   MKCOIN_02
    2721 0000eab0 00000000!         .long   MKCOIN_03
    2722 0000ead0 00000000!         .long   MKCOIN_04
    2723 0000eaf0 00000000!         .long   MKCOIN_05
    2724 0000eb10 00000000!         .long   MKCOIN_06
    2725 0000eb30 00000000!         .long   MKCOIN_07
    2726 0000eb50 00000000!         .long   MKCOIN_08
    2727 0000eb70 00000000!         .long   MKCOIN_09
    2728 0000eb90 00000000          .long   0
    2729                    
    2730 0000ebb0            SUBRP  mk3_smoke
    2731 0000ebb0 00000000!         .long   MKLIGHT1
    2732 0000ebd0 00000000!         .long   MKLIGHT2
    2733 0000ebf0 00000000!         .long   MKLIGHT3
    2734 0000ec10 00000000!         .long   MKLIGHT4
    2735 0000ec30 00000000!         .long   MKLIGHT5
    2736 0000ec50 00000000!         .long   MKLIGHT6
    2737 0000ec70 00000000!         .long   MKLIGHT7
    2738 0000ec90 00000000!         .long   MKLIGHT8
    2739 0000ecb0 00000000!         .long   MKLIGHT9
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   61

    2740 0000ecd0 00000000!         .long   MKLIGHT10
    2741 0000ecf0 00000000!         .long   MKLIGHT11
    2742 0000ed10 00000000!         .long   MKLIGHT12
    2743 0000ed30 00000000!         .long   MKLIGHT13
    2744 0000ed50 00000000!         .long   MKLIGHT14
    2745 0000ed70 00000000!         .long   MKLIGHT15
    2746 0000ed90 00000000!         .long   MKLIGHT16
    2747 0000edb0 00000000!         .long   MKLIGHT17
    2748 0000edd0 00000000!         .long   MKLIGHT18
    2749 0000edf0 00000000!         .long   MKLIGHT19
    2750 0000ee10 00000000!         .long   MKLIGHT20
    2751 0000ee30 00000000          .long   0
    2752                    
    2753                            .ref    obj_aniq
    2754                    
    2755                    ;a11 = [xpos,ypos]
    2756                    ;a10 = *img tbl
    2757                    ;a8  = flip/noflip
    2758 0000ee50            SUBRP  anim_mk
    2759 0000ee50     4d49          move    a10,a9
    2760 0000ee60     4d61          move    a11,a1
    2761 0000ee70     2601          sll     16,a1
    2762                    
    2763 0000ee80     2e0b          srl     16,a11
    2764 0000ee90     260b          sll     16,a11
    2765 0000eea0     4d60          move    a11,a0
    2766 0000eeb0     9722          move    *a9+,a2,L
    2767 0000eec0     09c3          movi    4000h,a3
         0000eed0     4000  
    2768 0000eee0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4
         0000eef0 0000a102  
    2769 0000ef10     4d08          move    a8,a8
    2770 0000ef20     ca03          jrz     zbneno_flip
    2771 0000ef30     0ba4          ori     M_FLIPH,a4
         0000ef40 00000010  
    2772 0000ef60           zbneno_flip
    2773 0000ef60     09c5          movi    CLSMK3,a5
         0000ef70     6000  
    2774 0000ef80     56c6          clr     a6
    2775 0000ef90     56e7          clr     a7
    2776 0000efa0     0d5f          calla   BEGINOBJ
         0000efb0 00000000! 
    2777 0000efd0           zbnemk_anim_lp
    2778 0000efd0                   SLEEPK  5
    2779 0000f010     9720          move    *a9+,a0,L
    2780 0000f020     cb02          jrnz    zbnedo_mka
    2781 0000f030     4d49          move    a10,a9
    2782 0000f040     9720          move    *a9+,a0,L
    2783 0000f050           zbnedo_mka
    2784 0000f050     b501          move    *a8(OCTRL),a1
         0000f060     00f0  
    2785 0000f070     0d5f          calla   obj_aniq
         0000f080 00000000! 
    2786 0000f0a0     c0f2          jruc    zbnemk_anim_lp
    2787 0000f0b0                   DIE
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   62

    2788                    
    2789                    
    2790 0000f0e0            SUBR   show_mk3_tip
    2791                    
    2792                    ;Disabled until we get real tips from end
    2793                    
    2794 0000f0e0     5600          clr     a0                      ; Make everyone wait
    2795 0000f0f0     0580          move    a0,@resume
         0000f100 0000a020- 
    2796 0000f120                   CREATE  4000h,suspend_game
    2797 0000f1a0                   SLEEPK  1
    2798                    
    2799 0000f1e0     0d5f          calla   pal_clean
         0000f1f0 00000000! 
    2800 0000f210     574a          clr     a10
    2801 0000f220     1a0b          movk    16,a11
    2802 0000f230                   CREATE  FADE_PID|4000h,fade_down
    2803 0000f2b0                   SLEEPK  32
    2804                            .if MKDEBUG
    2805                            clr     a0
    2806                            move    a0,@mk3_tip_number
    2807                            .endif
    2808                    
    2809                            .ref    display_blank
    2810                            .if MKDEBUG
    2811                    zbnereenter
    2812                            .endif
    2813 0000f2f0     0d5f          calla   display_blank
         0000f300 00000000! 
    2814                    
    2815 0000f320     5600          clr     a0
    2816 0000f330     5621          clr     a1
    2817 0000f340     09e2          movi    BLACKOUT,a2
         0000f350 0000ced0' 
    2818 0000f370     09c3          movi    3ff0h,a3
         0000f380     3ff0  
    2819 0000f390     09e4          movi    DMACNZ|DMACZ|M_3D|M_SCRNREL,a4
         0000f3a0 0000a10c  
    2820 0000f3c0     09c5          movi    CLSMK3,a5
         0000f3d0     6000  
    2821 0000f3e0     56c6          clr     a6
    2822 0000f3f0     56e7          clr     a7
    2823 0000f400     09f0          movi    DPLT_R_P,b0
         0000f410 00000000! 
    2824 0000f430     0d5f          calla   BEGINOBJP
         0000f440 00000000! 
    2825 0000f460     5600          clr     a0
    2826 0000f470     b008          move    a0,*a8(OCONST)
         0000f480     0160  
    2827                    
    2828 0000f490     09e0          movi    [200,0],a0
         0000f4a0 00c80000  
    2829 0000f4c0     09e1          movi    [254,0],a1
         0000f4d0 00fe0000  
    2830 0000f4f0     09e2          movi    TRADEMARK,a2
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   63

         0000f500 00000000! 
    2831 0000f520     09c3          movi    4000h,a3
         0000f530     4000  
    2832 0000f540     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4
         0000f550 0000a102  
    2833 0000f570     09c5          movi    CLSMK3,a5
         0000f580     6000  
    2834 0000f590     56c6          clr     a6
    2835 0000f5a0     56e7          clr     a7
    2836 0000f5b0     0d5f          calla   BEGINOBJ
         0000f5c0 00000000! 
    2837                    
    2838 0000f5e0                   SLEEPK  1
    2839                    
    2840 0000f620     5708          clr     a8
    2841 0000f630     09eb          movi    [25,205],a11
         0000f640 001900cd  
    2842 0000f660     09ea          movi    mk3_coin,a10
         0000f670 0000ea70' 
    2843 0000f690                   CREATE  4001h,anim_mk
    2844                    
    2845 0000f710     5708          clr     a8
    2846 0000f720     09eb          movi    [101,205],a11
         0000f730 006500cd  
    2847 0000f750     09ea          movi    mk3_coin,a10
         0000f760 0000ea70' 
    2848 0000f780                   CREATE  4001h,anim_mk
    2849                    
    2850 0000f800     5708          clr     a8
    2851 0000f810     09eb          movi    [178,205],a11
         0000f820 00b200cd  
    2852 0000f840     09ea          movi    mk3_coin,a10
         0000f850 0000ea70' 
    2853 0000f870                   CREATE  4001h,anim_mk
    2854                    
    2855 0000f8f0     5708          clr     a8
    2856 0000f900     09eb          movi    [254,205],a11
         0000f910 00fe00cd  
    2857 0000f930     09ea          movi    mk3_coin,a10
         0000f940 0000ea70' 
    2858 0000f960                   CREATE  4001h,anim_mk
    2859                    
    2860 0000f9e0     5708          clr     a8
    2861 0000f9f0     09eb          movi    [331,205],a11
         0000fa00 014b00cd  
    2862 0000fa20     09ea          movi    mk3_coin,a10
         0000fa30 0000ea70' 
    2863 0000fa50                   CREATE  4001h,anim_mk
    2864                    
    2865 0000fad0     5708          clr     a8
    2866 0000fae0     09cb          movi    [0,1],a11
         0000faf0     0001  
    2867 0000fb00     09ea          movi    mk3_smoke,a10
         0000fb10 0000ebb0' 
    2868 0000fb30                   CREATE  4001h,anim_mk
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   64

    2869                    
    2870 0000fbb0     1828          movk    1,a8
    2871 0000fbc0     09eb          movi    [399,1],a11
         0000fbd0 018f0001  
    2872 0000fbf0     09ea          movi    mk3_smoke,a10
         0000fc00 0000ebb0' 
    2873 0000fc20                   CREATE  4001h,anim_mk
    2874                    
    2875 0000fca0                   SLEEPK  1
    2876                    
    2877 0000fce0     09e9          movi    zbnemk3_tip_prompt_str_tbl,a9
         0000fcf0 0000e8f0' 
    2878 0000fd10           zbnemk3_tp_loop
    2879 0000fd10     9722          move    *a9+,a2,L
    2880 0000fd20     ca10          jrz     zbnemk3_tp_done
    2881 0000fd30     4c4a          move    a2,a10
    2882 0000fd40     0d5f          calla   setup_message
         0000fd50 00000000! 
    2883 0000fd70     09c0          movi    CLSMK3,a0
         0000fd80     6000  
    2884 0000fd90     0580          move    a0,@mess_objid
         0000fda0 00000000! 
    2885 0000fdc0     0b0a          addi    SIZEOF_JAM_STR,a10
         0000fdd0     00a0  
    2886 0000fde0     4d44          move    a10,a4
    2887 0000fdf0     0d5f          calla   print_string_C2
         0000fe00 00000000! 
    2888 0000fe20     c0ee          jruc    zbnemk3_tp_loop
    2889                    
    2890 0000fe30           zbnemk3_tp_done
    2891 0000fe30     1820          movk    1,a0                    ; Get a random tip to show
    2892 0000fe40     0d5f          calla   RNDRNG0
         0000fe50 00000000! 
    2893                            .if MKDEBUG
    2894                            move    @mk3_tip_number,a0
    2895                            .endif
    2896 0000fe70     24a0          sll     5,a0
    2897 0000fe80     0b20          addi    zbnemk3_tip_str_tbl,a0
         0000fe90 0000e8b0' 
    2898 0000feb0     8609          move    *a0,a9,L                ; a9 = *str table
    2899                    
    2900 0000fec0           zbnemk3_t_loop
    2901 0000fec0     9722          move    *a9+,a2,L
    2902 0000fed0     ca19          jrz     zbnemk3_tip_done
    2903 0000fee0     4c4a          move    a2,a10
    2904 0000fef0     0d5f          calla   setup_message
         0000ff00 00000000! 
    2905 0000ff20     09c0          movi    CLSMK3,a0
         0000ff30     6000  
    2906 0000ff40     0580          move    a0,@mess_objid
         0000ff50 00000000! 
    2907 0000ff70     0b0a          addi    SIZEOF_JAM_STR,a10
         0000ff80     00a0  
    2908 0000ff90     4d40          move    a10,a0
    2909 0000ffa0     0d3f          callr   decompress_string
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   65

         0000ffb0     00ca  
    2910                            .ref    message_buffer
    2911                    
    2912 0000ffc0     09e4          movi    message_buffer,a4
         0000ffd0 00000000! 
    2913 0000fff0     0d5f          calla   print_string_C2
         00010000 00000000! 
    2914 00010020                   SLEEPK  15
    2915 00010060     c0e5          jruc    zbnemk3_t_loop
    2916                            
    2917 00010070           zbnemk3_tip_done
    2918 00010070     8722          move    *a9,a2,L
    2919 00010080     ca0f          jrz     zbneno_code
    2920 00010090     4c49          move    a2,a9
    2921 000100a0           zbnemk3_c_loop
    2922 000100a0     9720          move    *a9+,a0,L
    2923 000100b0     ca04          jrz     zbnecode_done
    2924 000100c0     0d5f          calla   BEGINOBJ_TBL
         000100d0 00000000! 
    2925 000100f0     c0fa          jruc    zbnemk3_c_loop
    2926 00010100           zbnecode_done
    2927 00010100                   CREATE  4001h,sparkle_frame
    2928                    
    2929 00010180           zbneno_code
    2930                            .ref    display_unblank
    2931 00010180     0d5f          calla   display_unblank
         00010190 00000000! 
    2932                            .ref    SNDSND
    2933 000101b0     1a03          movk    16,a3
    2934 000101c0     0d5f          calla   SNDSND
         000101d0 00000000! 
    2935                    
    2936                    
    2937                            .if MKDEBUG
    2938                            movi    TSEC*120,a9
    2939                            .else
    2940 000101f0                   SLEEP   TSEC*2                  ; Minimum amount of time to display it
    2941                    
    2942 00010240     09c9          movi    TSEC*8,a9
         00010250     01a8  
    2943                            .endif
    2944 00010260           zbnedelay_loop                          ; Now wait on a button
    2945 00010260                   SLEEPK  1
    2946 000102a0     0d5f          calla   get_all_buttons_cur
         000102b0 00000000! 
    2947 000102d0     cb01          jrnz    zbnemk3t_exit
    2948 000102e0     3d29          dsjs    a9,zbnedelay_loop
    2949                    
    2950 000102f0           zbnemk3t_exit
    2951 000102f0     09c0          movi    4001h,a0
         00010300     4001  
    2952 00010310     0d5f          calla   KIL1C
         00010320 00000000! 
    2953                    
    2954 00010340     09c0          movi    CLSMK3,a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   66

         00010350     6000  
    2955 00010360     0d5f          calla   obj_del1c
         00010370 00000000! 
    2956                    
    2957 00010390                   SLEEPK  10                      ; Let em all die off
    2958                    
    2959                            .if MKDEBUG
    2960                            move    @mk3_tip_number,a14
    2961                            addk    1,a14
    2962                            andi    1,a14
    2963                            move    a14,@mk3_tip_number
    2964                            jruc    zbnereenter
    2965                            .endif
    2966 000103d0     574a          clr     a10
    2967 000103e0     1a0b          movk    16,a11
    2968 000103f0                   CREATE  4000h|FADE_PID,fade_up
    2969 00010470                   SLEEPK  31
    2970 000104b0     1820          movk    1,a0                    ; Set ok to resume game
    2971 000104c0     0580          move    a0,@resume
         000104d0 0000a020- 
    2972                    
    2973 000104f0                   DIE
    2974                    
    2975                    
    2976 00010520           sparkle_img
    2977 00010520 00000000!         .long   SPRKLA01
    2978 00010540 00000000!         .long   SPRKLA02
    2979 00010560 00000000!         .long   SPRKLA03
    2980 00010580 00000000!         .long   SPRKLA04
    2981 000105a0 00000000!         .long   SPRKLA05
    2982 000105c0 00000000!         .long   SPRKLA06
    2983 000105e0 00000000!         .long   SPRKLA07
    2984 00010600 00000000!         .long   SPRKLA08
    2985 00010620 00000000!         .long   SPRKLA09
    2986 00010640 00000000!         .long   SPRKLA10
    2987 00010660 00000000!         .long   SPRKLA11
    2988 00010680 00000000!         .long   SPRKLA12
    2989 000106a0 00000000!         .long   SPRKLA13
    2990 000106c0 00000000          .long   0
    2991                    
    2992                    ; A9 = [x,y]
    2993 000106e0            SUBRP  anim_sparkle
    2994                    
    2995 000106e0     09ea          movi    sparkle_img,a10
         000106f0 00010520' 
    2996                    
    2997 00010710     4d20          move    a9,a0
    2998 00010720     2e00          srl     16,a0
    2999 00010730     2600          sll     16,a0
    3000                    
    3001 00010740     4d21          move    a9,a1
    3002 00010750     2601          sll     16,a1
    3003                            
    3004 00010760     9742          move    *a10+,a2,L
    3005 00010770     09c3          movi    4020h,a3
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   67

         00010780     4020  
    3006 00010790     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4
         000107a0 0000a102  
    3007 000107c0     09c5          movi    CLSMK3+10,a5
         000107d0     600a  
    3008 000107e0     56c6          clr     a6
    3009 000107f0     56e7          clr     a7
    3010 00010800     09f0          movi    SPARKL_P,b0
         00010810 00000000! 
    3011 00010830     0d5f          calla   BEGINOBJP
         00010840 00000000! 
    3012                    
    3013 00010860           spa_loop
    3014 00010860                   SLEEPK  3
    3015 000108a0     9740          move    *a10+,a0,L
    3016 000108b0     ca0b          jrz     sp_exit
    3017 000108c0     b501          move    *a8(OCTRL),a1
         000108d0     00f0  
    3018 000108e0     0d5f          calla   obj_aniq
         000108f0 00000000! 
    3019 00010910     b501          move    *a8(OXPOS),a1
         00010920     0090  
    3020 00010930     1041          addk    2,a1
    3021 00010940     b028          move    a1,*a8(OXPOS)
         00010950     0090  
    3022 00010960     c0ef          jruc    spa_loop
    3023 00010970           sp_exit
    3024 00010970     0d5f          calla   DELOBJA8
         00010980 00000000! 
    3025 000109a0                   DIE
    3026                    
    3027                    
    3028 000109d0            SUBRP  sparkle_frame
    3029                    
    3030 000109d0     09c0          movi    121,a0                  ; Get a random x starting position
         000109e0     0079  
    3031 000109f0     0d5f          calla   RNDRNG0
         00010a00 00000000! 
    3032 00010a20     4c09          move    a0,a9
    3033                    
    3034 00010a30     1820          movk    1,a0                    ; Get a random top/bottom
    3035 00010a40     0d5f          calla   RNDRNG0
         00010a50 00000000! 
    3036                    
    3037 00010a70     2609          sll     16,a9                   ; Set X position
    3038 00010a80     4c00          move    a0,a0                   ; top or bottom of frame ?
    3039 00010a90     ca03          jrz     zbnetop                 ; br = top
    3040 00010aa0     0ba9          ori     19,a9                   ; Set bottom
         00010ab0 00000013  
    3041 00010ad0           zbnetop
    3042 00010ad0     0b29          addi    [127,177],a9            ; Adjust for frame position
         00010ae0 007f00b1  
    3043 00010b00                   CREATE  4000h,anim_sparkle      ; Animate a frame sparkle
    3044                    
    3045 00010b80     09c0          movi    TSEC,a0                 ; Random Sleep before creating next sparkle
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   68

         00010b90     0035  
    3046 00010ba0     0d5f          calla   RNDRNG0
         00010bb0 00000000! 
    3047 00010bd0     0b00          addi    TSEC,a0                 ; Minimum of 1 second between sparkles
         00010be0     0035  
    3048 00010bf0     0d5f          calla   PRCSLP
         00010c00 00000000! 
    3049 00010c20     c0da          jruc    sparkle_frame
    3050                            
    3051 00010c30                   DIE
    3052                    
    3053                    ;
    3054                    ; A0 = *compressed string
    3055                    ;
    3056 00010c60            SUBR   decompress_string
    3057 00010c60                   PUSH    a1,a2
    3058 00010c80     09e1          movi    message_buffer,a1,L
         00010c90 00000000! 
    3059 00010cb0     01e0          pushst                  ; Save status
    3060 00010cc0     0360          dint                    ; No interrupts during this
    3061 00010cd0     0546          setf    6,0,0           ; Field size = 6
    3062 00010ce0           zbnedecompress_loop
    3063 00010ce0     9402          move    *a0+,a2
    3064 00010cf0     ca05          jrz     zbnedecompress_done
    3065 00010d00     0b02          addi    01fh,a2
         00010d10     001f  
    3066 00010d20     8c41          movb    a2,*a1
    3067 00010d30     1101          addk    8,a1
    3068 00010d40     c0f9          jruc    zbnedecompress_loop
    3069 00010d50           zbnedecompress_done
    3070 00010d50     01c0          popst
    3071 00010d60     5600          clr     a0
    3072 00010d70     8c01          movb    a0,*a1
    3073 00010d80                   PULL    a1,a2
    3074 00010da0     0960          rets
    3075                    
    3076                            .if 0
    3077                    
    3078                    hello_prompt
    3079                            JAM_STR ogmd10_ascii,10,0,200,80,SGMD8GLD,print_string_C2
    3080                            .string "HELLO GAME DESIGNER!!!"
    3081                            .byte   0,1
    3082                            .even
    3083                    hello_prompt1
    3084                            JAM_STR ogmd10_ascii,10,0,200,110,SGMD8GLD,print_string_C2
    3085                            .string "MIDWAY GAME DESIGNERS"
    3086                            .byte   0,1
    3087                            .even
    3088                    hello_prompt2
    3089                            JAM_STR ogmd10_ascii,10,0,200,125,SGMD8GLD,print_string_C2
    3090                            .string "ARE THE WORLD'S BEST"
    3091                            .byte   0,1
    3092                            .even
    3093                    hello_prompt3
    3094                            JAM_STR ogmd10_ascii,10,0,200,140,SGMD8GLD,print_string_C2
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   69

    3095                            .string "GAME DESIGNERS!!!!!"
    3096                            .byte   0,0
    3097                            .even
    3098                    
    3099                    
    3100                     SUBRP  hi_programmer
    3101                            clr     a0                      ; Make everyone wait
    3102                            move    a0,@resume
    3103                            CREATE  4000h,suspend_game
    3104                            SLEEPK  1
    3105                    
    3106                            calla   pal_clean
    3107                            clr     a10
    3108                            movk    16,a11
    3109                            CREATE  FADE_PID|4000h,fade_down
    3110                            SLEEPK  32
    3111                    
    3112                            .ref    print_message
    3113                    
    3114                            movi    hello_prompt,a2
    3115                            calla   print_message
    3116                            movi    hello_prompt1,a2
    3117                            calla   print_message
    3118                            movi    hello_prompt2,a2
    3119                            calla   print_message
    3120                            movi    hello_prompt3,a2
    3121                            calla   print_message
    3122                    
    3123                            DIE
    3124                    
    3125                    
    3126                     SUBR   prog_specials
    3127                    
    3128                            calla   get_all_buttons_cur
    3129                            jrz     zbneno_prog
    3130                            cmpi    B_PUNCH|B_SPUNCH|B_KICK|B_SKICK,a0
    3131                            jrnz    zbneno_prog
    3132                    
    3133                            move    *a13(PROCID),a2
    3134                            ori     4000h,a2
    3135                            move    a2,*a13(PROCID)
    3136                    
    3137                            CREATE  4000h,hi_programmer
    3138                            SLEEP   TSEC
    3139                            movi    TSEC*5,a2
    3140                    zbnewait_loop
    3141                            PUSHP   a2
    3142                            SLEEPK  1
    3143                            PULLP   a2
    3144                            calla   get_all_buttons_cur
    3145                            jrnz    zbneps_exit
    3146                            dsjs    a2,zbnewait_loop
    3147                    zbneps_exit
    3148                            movk    1,a0                    ; Set ok to resume game
    3149                            move    a0,@resume
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   70

    3150                    
    3151                            move    *a13(PROCID),a2
    3152                            andni   4000h,a2
    3153                            move    a2,*a13(PROCID)
    3154                    
    3155                            clr     a10
    3156                            movk    16,a11
    3157                            CREATE  FADE_PID,fade_up
    3158                            SLEEPK  31
    3159                    zbneno_prog
    3160                            RETP
    3161                    
    3162                    
    3163                    zbnesi_table
    3164                            .long   0006864bh               ; MARK
    3165                            .long   00a0cdeeh               ; JASON
    3166                            .long   00050565h               ; JAKE
    3167                            .long   0006a565h               ; MIKE
    3168                            .long   00053d0eh               ; JOHN
    3169                            .long   000029e5h               ; JOE
    3170                            .long   0001258ch               ; BILL
    3171                            .long   013a16c5h               ; STEVE
    3172                            .long   00004c2ch               ; SAL
    3173                            .long   00053e68h               ; JOSH
    3174                            .long   000395c5h               ; GENE
    3175                            .long   013406eeh               ; SHAWN
    3176                            .long   000000a4h               ; ED
    3177                            .long   0072be47h               ; GEORG
    3178                            .long   00525d2eh               ; EDWIN
    3179                            .long   00d0c970h               ; MARKP
    3180                            .long   000a3dd9h               ; TONY
    3181                            .long   0
    3182                    
    3183                    ; A4 = *beginning of string
    3184                    ; A0 = character to add
    3185                    ;
    3186                    ; Returns
    3187                    ;   Z  - Special Inits
    3188                    ;   NZ - Not Special Inits
    3189                    ;
    3190                     SUBR   are_special_inits
    3191                            PUSH    a0,a1,a2,a4,a5,a6
    3192                            move    a4,a6
    3193                            subk    8,a6
    3194                    zbnerecheck1
    3195                            addk    8,a6
    3196                            move    a6,a4
    3197                            movb    *a6,a2
    3198                            jrz     zbnenot_special_inits1
    3199                            clr     a1
    3200                    zbneget_inits_loop1
    3201                            movb    *a4,a2
    3202                            jrz     zbnerecheck1
    3203                            cmpi    20h,a2
    3204                            jrz     zbnenot_alpha1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 17:30:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   71

    3205                            cmpi    21h,a2
    3206                            jrz     zbnenot_alpha1
    3207                            cmpi    19h,a2
    3208                            jrz     zbnenot_alpha1
    3209                            sll     5,a1
    3210                            subi    40h,a2
    3211                            andi    1fh,a2
    3212                            or      a2,a1
    3213                            callr   zbnecheck_it1
    3214                    zbnenot_alpha1
    3215                            addk    8,a4
    3216                            jruc    zbneget_inits_loop1
    3217                    zbnegi_done1
    3218                    
    3219                    zbnecheck_it1
    3220                            PUSH    a4
    3221                            movi    zbnesi_table,a4
    3222                            clr     a0
    3223                    zbnecheck_dw_loop1
    3224                            move    *a4+,a5,L
    3225                            jrz     zbnecheck_done1
    3226                            cmp     a1,a5
    3227                            jrz     zbneis_special
    3228                            jruc    zbnecheck_dw_loop1
    3229                    zbnecheck_done1
    3230                            PULL    a4
    3231                            rets
    3232                    
    3233                    zbneis_special
    3234                            PULL    a4,a14                  ; This sucks don't change this
    3235                            movk    1,a0                    ; or it will break
    3236                            jruc    zbneaid_exit1
    3237                    zbnenot_special_inits1
    3238                            clr     a0
    3239                    zbneaid_exit1
    3240                            move    a0,a0
    3241                            PULL    a0,a1,a2,a4,a5,a6
    3242                            rets
    3243                    
    3244                            .endif
    3245                    
    3246                    
    3247                    
    3248                    ******************************************************************************
    3249                    *
    3250                            .end

 No Errors,  No Warnings
