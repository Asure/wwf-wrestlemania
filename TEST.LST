TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .file   "test.asm"
       3                            .width  132
       4                            .option b,d,l,t
       5                            .mnolist
       6                    
       7                            
       8                            .include        "mproc.equ"
       9                            .include        "display.equ"
      10                            .include        "sys.equ"
      11                            .include        "gsp.equ"
      12                            .include        "imgtbl.glo"
      13                            .include        "game.equ"
      14                            .include        "link.equ"
      15                            .include        "menu.equ"
      16                            .include        "macros.h"
      17                            .include        "dip.equ"
      18                            .include        "fontsimg.glo"
      19                            .include        "sound.h"
      20                    
      21                    
      22                    
      23                            .def            fudge_switches, fudge_switches2, fudge_switches_diag
      24                            .DEF            DIAG,CHK_CMOS
      25                            .DEF            GEN_MENU,B_MENU
      26                            .DEF            TOP_BOX                 ;,WT_ADV
      27                            .DEF            MAIN_RET,GMENULEV
      28                            .DEF            AREUSURE
      29                            .DEF            F_TITLE
      30                            .DEF            ST_STICK
      31                            .DEF            GETSTICK
      32                            .DEF            SUR_MESS
      33                            .DEF            SURE_BOX
      34                            .DEF            CPU_RET
      35                            .DEF            GET_FAC
      36                            .DEF            MENU_TOP
      37                            .DEF            RED_BOX
      38                            .DEF            BLNKHELP,H_SLAVE
      39                            .DEF            DOBORDER
      40                            .DEF            COL_INST
      41                            .DEF            STD_BORD
      42                            .DEF            DIAG_EX
      43                            .DEF            WAIT_BUT
      44                            .DEF            DIGSRT
      45                            .DEF            SND_MADE
      46                            .DEF            NO_CLEAR
      47                            .DEF            LAST_BUT
      48                            .DEF            G_BORDER
      49                            .DEF            FORM_SWS
      50                            .DEF            CKTEST, CKDIAG, DIAG_COLORS
      51                    
      52                    
      53                            .ref            CMOS_VAL,L_MESS
      54                            .ref            LM_SETUP,LM_FINIS
      55                            .ref            FORM_ADC
      56                            .ref            F_ADC_S
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    2

      57                            .ref            GET_AUD
      58                            .ref            FAC_SET
      59                            .ref            CRED_P
      60                            .ref            BAD_AUD
      61                            .ref            CLR_AUD
      62                            .ref            ADJ_PAGE
      63                            .ref            COIN_PAG
      64                            .ref            ROM_NAME
      65                            .ref            STORE_AUDIT
      66                            .ref            INIT_TAB
      67                            .ref            VAL_TAB
      68                            .ref            P_FORK
      69                            .ref            RC_BYTEI
      70                            .ref            RC_BYTE
      71                            .ref            RC_WORD
      72                            .ref            RC_LONG
      73                            .ref            RC_LONGI
      74                            .ref            WC_BYTE
      75                            .ref            WC_BYTEI
      76                            .ref            WC_WORD
      77                            .ref            WC_WORDI
      78                            .ref            WC_LONG
      79                            .ref            WC_LONGI
      80                            .ref            MEN_MAIN,ANY_BUT,MEN_YN
      81                            .ref            MESS_FAC
      82                            .ref            GO_DIAG           ;ROUTINE FOR DIAGNOSTIC MENU
      83                            .ref            RTR_LEV,ROM_LEV
      84                            .ref            FAC_STUF
      85                            .ref            SCODE             ;SYNTH CODE CURRENTLY BEING MADE
      86                            .ref            DCODE             ;DIG CODE CURRENTLY BEING MADE
      87                    
      88                    
      89                            .ref    DO_ADJH, CKDIP, MEN_ADJ
      90                    
      91                    
      92                    
      93                            .ref    WIPEOUT
      94                    
      95                    
      96                    
      97                    
      98                            .ref    WARMSET
      99                            .ref    QSNDRST
     100                            .ref    FILLAREA
     101                            .ref    STRNGLEN
     102                    
     103                            .ref    osgfont_t
     104                            .ref    RD15FONT,RD7FONT,STRCNRM,STRCNRM_1,GAMSTATE
     105                            .ref    IRQSKYE,BLNKAREA,STRLNRM,CLR_SCRN
     106                            .ref    WDOGDIS, READ_DIP, dpageflip_off, SWSET1, SWSET2
     107                    
     108                            .ref    PALFRAM, pal_set, pal_getf, DIAGP
     109                    
     110                            ;from DCSSOUND.ASM
     111                            .ref    nosounds
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    3

     112                    
     113                            .ref    _coin_addr
     114                            .ref    _switch_addr
     115                            .ref    _switch2_addr
     116                    
     117                    
     118 00000000                   .BSS            MAIN_RET,16           ;FLAG SAYS RETURN TO MAIN MENU
     119 00000010                   .BSS            GMENULEV,16           ;HOW DEEP INTO GEN_MENU WE ARE
     120 00000020                   .BSS            SND_MADE,16           ;SOUND TEST FLAG
     121 00000030                   .BSS            NO_CLEAR,16           ;FLAG TELLS GET_MENU NOT TO CLEAR!
     122 00000040                   .BSS            LAST_BUT,32
     123 00000060                   .BSS            SPTEMP,32             ;STACK POINTER TEMP
     124                    
     125                            .def    fswitches_cur,fswitches_last,fswitches_down
     126                    
     127 00000080                   .bss            fswitches_cur,32
     128 000000a0                   .bss            fswitches_last,32
     129 000000c0                   .bss            fswitches_down,32
     130                    
     131                            .globl          _switch_map_mode
     132 000000e0                   .bss            _switch_map_mode,32     ; 0 = no switch mapping
     133                                                                    ; 1 = map switches for menus
     134                                                                    ; 2 = map switches for adjustments
     135                                                                    ; 3 = Any button mapping mode
     136                    
     137 00000000                   .text
     138                    
     139                    
     140 00000000           CPU_RET:
     141 00000000     0d3f          CALLR   DIGSRT          ;MAKE SURE WE'RE IN TEST MODE
         00000010     0268  
     142                    
     143 00000020     5600          CLR     A0
     144 00000030     0580          MOVE    A0,@GMENULEV    ;INDICATE WE'RE AT LEVEL ZERO.
         00000040 00000010- 
     145                    
     146 00000060     09e0          MOVI    RTR_LEV,A0      ;THIS IS THE LEVEL TO DIVE TO
         00000070 00000000! 
     147 00000090     03a0          NEG     A0              ;NEGATE IT AS FLAG TO DIVE.
     148 000000a0     0580          MOVE    A0,@MAIN_RET    ;INDICATE
         000000b0 00000000- 
     149 000000d0     c080          JAUC    DIAG_RESTART    ;NOW START IT UP....
         000000e0 00000720' 
     150                    
     151                    
     152                    
     153 00000100           WAIT_BUT:
     154 00000100     0d3f          CALLR   FORM_SWS        ;1ST STATE DOESN'T COUNT
         00000110     0703  
     155                    
     156                    
     157 00000120           WB1:    
     158 00000120                   SLEEPK  1
     159 00000160     0d3f          CALLR   FORM_SWS
         00000170     06fd  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    4

     160 00000180     03e1          NOT     A1              ;LAST = 0 AND NOW = 1 MEANS EDGE!
     161                    
     162 00000190     5020          AND     A1,A0           ;1'S WHERE WE HAVE POSITIVE EDGE.
     163 000001a0     0b80          ANDI    BUTTONS,A0      ;IS IT A BUTTON?
         000001b0 ffff0f0f  
     164 000001d0     caf4          JRZ     WB1
     165                    
     166 000001e0     09c3          movi    beep1_snd,a3
         000001f0     03d9  
     167 00000200     0d5f          calla   SNDSND
         00000210 00000000! 
     168                    
     169 00000230                   RETP
     170                    
     171                    
     172 00000260           CKTEST
     173 00000260                   PUSH    A0
     174 00000270     0d5f          CALLA   READ_DIP
         00000280 00000000! 
     175 000002a0     0b80          ANDI    DPTEST,A0
         000002b0 ffffff7f  
     176 000002d0     cb0c          JRNZ    CKRET
     177 000002e0     07a0          move    @_coin_addr,a0,L
         000002f0 00000000! 
     178 00000310     8400          move    *a0,a0,W
     179 00000320     2600          sll     16,a0
     180 00000330     03e0          NOT     A0
     181 00000340     0b80          ANDI    DIAG_BITS,A0
         00000350 ffefffff  
     182 00000370     ca80          JAZ     WARMSET                 ; WE BE OUTTA HERE!
         00000380 00000000! 
     183 000003a0           CKRET
     184 000003a0                   PULL    A0
     185 000003b0     0960          RETS
     186                    
     187                    
     188 000003c0           CKDIAG
     189 000003c0     5600          CLR     A0
     190 000003d0     0d5f          CALLA   READ_DIP
         000003e0 00000000! 
     191 00000400     0b80          ANDI    DPTEST,A0
         00000410 ffffff7f  
     192 00000430     cb0a          JRNZ    CKDGO
     193 00000440     07a0          move    @_coin_addr,a0,L
         00000450 00000000! 
     194 00000470     8400          move    *a0,a0,W
     195 00000480     2600          sll     16,a0
     196 00000490     03e0          NOT     A0
     197 000004a0     0b80          ANDI    DIAG_BITS,A0
         000004b0 ffefffff  
     198 000004d0     ca01          JRZ     CKDRET
     199 000004e0           CKDGO
     200 000004e0     1820          MOVK    1,A0
     201 000004f0           CKDRET
     202 000004f0     4c00          MOVE    A0,A0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    5

     203 00000500     0960          RETS
     204                    
     205                    
     206 00000510           DIAG
     207 00000510     09c0          movi    AUDSTAT,a0
         00000520     0017  
     208 00000530     5621          clr     a1
     209 00000540     0d5f          calla   STORE_AUDIT
         00000550 00000000! 
     210 00000570     05a0          move    @GAMSTATE,a0
         00000580 00000000! 
     211 000005a0     ce80          jan     SUCIDE          ;In diagnostics
         000005b0 00000000! 
     212 000005d0     07a0          move    @_coin_addr,a0,L
         000005e0 00000000! 
     213 00000600     8400          move    *a0,a0
     214 00000610     1e40          btst    CDI_BIT,a0              ;Coin door closed ?
     215 00000620     ca80          jaz     SUCIDE          ;Yes - then diagnostic NOT allowed
         00000630 00000000! 
     216 00000650     1820          movk    1,a0
     217 00000660     0780          move    a0,@_switch_map_mode,L
         00000670 000000e0- 
     218                    
     219 00000690           DIAG_JUMP
     220 00000690     0d3f          CALLR   DIGSRT          ;MAKE SURE WE'RE IN TEST MODE
         000006a0     01ff  
     221                    
     222 000006b0     5600          CLR     A0
     223 000006c0     0580          MOVE    A0,@MAIN_RET    ;CLEAR THE FLOAT TO TOP FLAG.
         000006d0 00000000- 
     224 000006f0     0580          MOVE    A0,@GMENULEV    ;INDICATE WE'RE AT LEVEL ZERO.
         00000700 00000010- 
     225                    
     226 00000720           DIAG_RESTART
     227 00000720     09e8          MOVI    MEN_MAIN,A8
         00000730 00000000! 
     228 00000750                   JSRP    GEN_MENU        ;PROCESS THIS MENU!
     229 000007c0     5600          clr     a0
     230 000007d0     0780          move    a0,@_switch_map_mode,L
         000007e0 000000e0- 
     231                    
     232                    
     233 00000800           DIAG_EX
     234 00000800                   SLEEPK  2               ;LET DMA EMPTY OUT IF NECESSARY
     235                    
     236                    
     237                    
     238                    
     239                    
     240 00000840     0d5f          CALLA   CLR_SCRN
         00000850 00000000! 
     241 00000870     0d5f          CALLA   CMOS_VAL                ; VALIDATE THE CMOS
         00000880 00000000! 
     242 000008a0     0d5f          CALLA   CKTEST
         000008b0 00000260' 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    6

     243 000008d0     0d5f          CALLA   READ_DIP
         000008e0 00000000! 
     244 00000900     0b80          ANDI    DPTEST,A0
         00000910 ffffff7f  
     245 00000930     0780          MOVE    A0,@SWSET2,L
         00000940 00000000! 
     246 00000960     ca0b          JRZ     DE2
     247 00000970     09e8          MOVI    NOTCLOSEDDIP,A8
         00000980 00001090' 
     248 000009a0                   JSRP    L_MESS
     249 00000a10     c020          jruc    zaitout
     250 00000a20           DE2
     251 00000a20     07a0          move    @_coin_addr,a0,L
         00000a30 00000000! 
     252 00000a50     8400          move    *a0,a0,W
     253 00000a60     2600          sll     16,a0
     254 00000a70     03e0          NOT     A0
     255 00000a80     0b80          ANDI    DIAG_BITS,A0
         00000a90 ffefffff  
     256 00000ab0     07ae          MOVE    @SWSET2,A14,L
         00000ac0 00000000! 
     257 00000ae0     540e          OR      A0,A14
     258 00000af0     078e          MOVE    A14,@SWSET2,L
         00000b00 00000000! 
     259 00000b20     4c00          MOVE    A0,A0
     260 00000b30     ca0b          JRZ     DE3
     261 00000b40     09e8          MOVI    NOTCLOSEDJAMMA,A8
         00000b50 00001280' 
     262 00000b70                   JSRP    L_MESS
     263 00000be0     c003          jruc    zaitout
     264 00000bf0           DE3
     265 00000bf0     c080          JAUC    WARMSET         
         00000c00 00000000! 
     266 00000c20           zaitout
     267 00000c20     09e8          MOVI    NOTCLOSEDWAIT,A8
         00000c30 00001420' 
     268 00000c50                   JSRP    L_MESS
     269                    
     270 00000cc0     0d5f          CALLA   fudge_switches          ;get fudged switches in a0
         00000cd0 000071c0' 
     271 00000cf0     0b80          andi    BUTTONS|START_BITS,a0
         00000d00 f9db0f0f  
     272 00000d20     0780          MOVE    A0,@SWSET1,L
         00000d30 00000000! 
     273 00000d50           DE4
     274 00000d50                   SLEEPK  1                       ;APPEASE THE MAIN LOOP
     275 00000d90     0d3f          CALLR   CKTEST                  ;CHECK STATUS OF TEST SWITCH
         00000da0     ff4b  
     276                    
     277 00000db0     0d5f          CALLA   fudge_switches          ;get fudged switches in a0
         00000dc0 000071c0' 
     278 00000de0     07a1          MOVE    @SWSET1,A1,L
         00000df0 00000000! 
     279 00000e10     0b80          andi    BUTTONS|START_BITS,a0
         00000e20 f9db0f0f  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    7

     280 00000e40     4801          CMP     A0,A1
     281 00000e50     cb1f          JRNZ    DE5
     282                    
     283                    
     284 00000e60     07a3          MOVE    @SWSET2,A3,L
         00000e70 00000000! 
     285 00000e90     4c61          MOVE    A3,A1
     286 00000ea0     0d5f          CALLA   READ_DIP
         00000eb0 00000000! 
     287 00000ed0     0b80          ANDI    DPTEST,A0
         00000ee0 ffffff7f  
     288 00000f00     0b81          ANDI    DPTEST,A1
         00000f10 ffffff7f  
     289 00000f30     4801          CMP     A0,A1
     290 00000f40     cb8b          JRNE    DIAG_EX
     291                    
     292 00000f50     07a0          move    @_coin_addr,a0,L
         00000f60 00000000! 
     293 00000f80     8400          move    *a0,a0,W
     294 00000f90     2600          sll     16,a0
     295 00000fa0     03e0          NOT     A0
     296 00000fb0     0b80          ANDI    DIAG_BITS,A0
         00000fc0 ffefffff  
     297 00000fe0     0b83          ANDI    DIAG_BITS,A3
         00000ff0 ffefffff  
     298 00001010     4803          CMP     A0,A3
     299 00001020     cb00          JRNE    DIAG_EX
         00001030     ff7c  
     300                    
     301 00001040     c0d0          JRUC    DE4
     302                    
     303 00001050           DE5
     304 00001050     0d3f          CALLR   CKTEST                  ; ONE FINAL TIME ( STILL WRONG )
         00001060     ff1f  
     305 00001070     c000          JRUC    DIAG_JUMP
         00001080     ff60  
     306                    
     307                    
     308 00001090           NOTCLOSEDDIP
     309 00001090                   MESS_MAC RD7FONT,SPACING07,200,50,COLOR_RED,STRCNRM,0
     310 00001130       44          .STRING "DIPSWITCH TEST SELECT (SW1 # 1) CLOSED.",0,0
     311 00001280                   .EVEN
     312                    
     313 00001280           NOTCLOSEDJAMMA
     314 00001280                   MESS_MAC RD7FONT,SPACING07,200,70,COLOR_RED,STRCNRM,0
     315 00001320       43          .STRING "COIN DOOR TEST SWITCH CLOSED.",0,0
     316 00001420                   .EVEN
     317                    
     318 00001420           NOTCLOSEDWAIT
     319 00001420                   MESS_MAC RD7FONT,SPACING07,200,120,COLOR_RED,STRCNRM,0
     320 000014c0       50          .STRING "PRESS ANY BUTTON TO RETURN TO TEST MODE OR",0,1
     321 00001620                   .EVEN
     322 00001620                   MESS_MAC RD7FONT,SPACING07,200,132,COLOR_RED,STRCNRM,0
     323 000016c0       4f          .STRING "OR",0,1
     324 000016e0                   .EVEN
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    8

     325 000016e0                   MESS_MAC RD7FONT,SPACING07,200,144,COLOR_RED,STRCNRM,0
     326 00001780       4f          .STRING "OPEN THE SWITCH(S) TO RETURN TO GAME.",0,0
     327 000018c0                   .EVEN
     328                    
     329              0000  MR_FONT   EQU     0
     330              0020  MR_TCAL   EQU     MR_FONT+LONG_SIZE
     331              0040  MR_TITLE  EQU     MR_TCAL+LONG_SIZE     ;POINTER TO TITLE FOR TILE BOX (IF NEC)
     332              0060  MR_TCLR   EQU     MR_TITLE+LONG_SIZE    ;COLOR OF TITLE
     333              0070  MR_WORDS  EQU     MR_TCLR+WORD_SIZE     ;STREAM OF WORDS TO COPY TO PDATA STARTS HERE
     334              0070  MR_X      EQU     MR_WORDS
     335              0080  MR_Y      EQU     MR_X+WORD_SIZE
     336              0090  MR_DY     EQU     MR_Y+WORD_SIZE
     337              00a0  MR_COL    EQU     MR_DY+WORD_SIZE
     338              00b0  MR_HITE   EQU     MR_COL+WORD_SIZE
     339              00c0  MR_BDY    EQU     MR_HITE+WORD_SIZE
     340              00d0  MR_DX     EQU     MR_BDY+WORD_SIZE
     341              00e0  MR_WID    EQU     MR_DX+WORD_SIZE
     342                            
     343 000018c0           GEN_MENU
     344 000018c0     05a0          MOVE    @GMENULEV,A0            ;KICK LEVEL POINTER
         000018d0 00000010- 
     345 000018f0     1020          INC     A0
     346 00001900     0580          MOVE    A0,@GMENULEV
         00001910 00000010- 
     347                    
     348 00001930     a30c          MOVE    A8,-*A12,L              ;SAVE MENU PTR
     349 00001940     1828          movk    1,A8                    ;START WITH "FIRST" ENTRY
     350 00001950     a10c          MOVE    A8,-*A12,W              ;PUT MENU NUMBER AS A WORD
     351                    
     352                    
     353                    
     354 00001960           GEN_LOOP
     355 00001960     05a0          MOVE    @MAIN_RET,A0            ;ARE WE IN "EXIT" MODE?
         00001970 00000000- 
     356 00001990     ca0a          JRZ     NO_EXIT                 ;NO
     357                    
     358 000019a0     ce44          JRN     DIVE_TO_MONITOR         ;WE'RE DIVING TO MONITOR PATTERNS.
     359                    
     360 000019b0     05a0          MOVE    @GMENULEV,A0            ;CHECK LEVEL
         000019c0 00000010- 
     361 000019e0     1420          subk    1,a0                    ;are we at level 1
     362 000019f0     cb33          jrne    GEN_EXIT                ;NOPE.....POP UP A LEVEL.
     363                    
     364                    
     365 00001a00           DIVE_COMPLETE
     366 00001a00     5600          CLR     A0
     367 00001a10     0580          MOVE    A0,@MAIN_RET            ;NOW WE MAY PROCEED!
         00001a20 00000000- 
     368                    
     369 00001a40           NO_EXIT
     370 00001a40     05a0          MOVE    @NO_CLEAR,A0            ;INHIBIT CLEAR?
         00001a50 00000030- 
     371 00001a70     cb04          JRNZ    SKIP_CLR
     372 00001a80     57bd          CLR     B13
     373 00001a90     0d5f          CALLA   CLR_SCRN                ;CLEAR THE SCREEN
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    9

         00001aa0 00000000! 
     374                    
     375 00001ac0           SKIP_CLR
     376 00001ac0     5600          CLR     A0
     377 00001ad0     0580          MOVE    A0,@NO_CLEAR            ;AND RE-SET IT!
         00001ae0 00000030- 
     378                    
     379 00001b00     b788          MOVE    *A12(WORD_SIZE),A8,L    ;GET MENU DESCRIPTOR
         00001b10     0010  
     380 00001b20                   JSRP    MENU_TOP
     381 00001b90                   JSRP    RED_BOX         ;PUT UP MAIN MENU INSTRUCTIONS
     382                    
     383 00001c00     8589          MOVE    *A12,A9                 ;GET MENU NUMBER TO USE
     384 00001c10                   JSRP    B_MENU                  ;GET RESULT
     385                    
     386 00001c80           PHONEY_MENU_RET
     387                    
     388 00001c80     4d4a          MOVE    A10,A10                 ;WAS IT ADVANCE?
     389 00001c90     ca01          JRZ     NO_KICK                 ;NOPE....LEAVE WHERE HE CAME FROM
     390                    
     391 00001ca0     1028          INC     A8                      ;KICK INDEX BY 1 FOR NEXT TIME
     392 00001cb0           NO_KICK
     393 00001cb0     810c          MOVE    A8,*A12                 ;AND LEAVE ON THE STACK
     394                    
     395 00001cc0     4d29          MOVE    A9,A9                   ;NOW JSRP THE ROUTINE
     396 00001cd0     ca05          JRZ     GEN_EXIT                ;NONE THERE....ITS "EXIT"
     397                    
     398                    
     399 00001ce0     09e7          MOVI    GEN_LOOP,A7
         00001cf0 00001960' 
     400 00001d10     a2ec          MOVE    A7,-*A12,L              ;PUSH RET ADDR
     401 00001d20     0169          JUMP    A9
     402                    
     403 00001d30           GEN_EXIT
     404 00001d30     0b0c          ADDI    WORD_SIZE+LONG_SIZE,A12 ;POP THE ARGUMENTS
         00001d40     0030  
     405 00001d50     05a0          MOVE    @GMENULEV,A0            ;KICK LEVEL POINTER
         00001d60 00000010- 
     406 00001d80     1420          DEC     A0
     407 00001d90     0580          MOVE    A0,@GMENULEV
         00001da0 00000010- 
     408 00001dc0                   RETP
     409                    
     410 00001df0           DIVE_TO_MONITOR:
     411 00001df0     05a0          MOVE    @GMENULEV,A0            ;CHECK LEVEL
         00001e00 00000010- 
     412 00001e20     0b40          CMPI    1,A0                    ;ARE WE AT LEVEL 1
         00001e30     fffe  
     413 00001e40     cb06          JRNZ    DTM1                    ;NOPE....SET "MONITOR" LEVEL
     414 00001e50     1828          MOVK    1,A8
     415 00001e60     09e9          MOVI    GO_DIAG,A9              ;ROUTINE FOR DIAGNOSTIC MENU
         00001e70 00000000! 
     416 00001e90     182a          MOVK    1,A10                   ;RETURN AS IF ADVANCE WAS PRESSED
     417 00001ea0     c0dd          JRUC    PHONEY_MENU_RET         ;WE'RE READY TO CALL DIAG MENU
     418 00001eb0           DTM1:   
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   10

     419 00001eb0     05a8          MOVE    @MAIN_RET,A8            ;FLAG IS OPPOSITE OF ENTRY NUMBER
         00001ec0 00000000- 
     420 00001ee0     03a8          NEG     A8                      ;THIS IS RETURN LEVEL!
     421 00001ef0     810c          MOVE    A8,*A12                 ;PUT MENU NUMBER AS A WORD
     422 00001f00     c0af          JRUC    DIVE_COMPLETE           ;THIS COMPLETES THE DIVE!
     423                    
     424                    
     425 00001f10           MENU_TOP:
     426 00001f10     b702          MOVE    *A8(MR_TITLE),A2,L      ;GET TITLE INTO A2
         00001f20     0040  
     427 00001f30     b503          MOVE    *A8(MR_TCLR),A3         ;AND COLOR INTO A3
         00001f40     0060  
     428                    
     429 00001f50           TOP_BOX:
     430 00001f50     a30c          MOVE    A8,-*A12,L              ;PUSH MENU PTR
     431 00001f60     0d3f          CALLR   SCR_BOX                 ;PUT UP THE TITLE BOX
         00001f70     002c  
     432                    
     433 00001f80     09e8          MOVI    MESS_TITLE,A8    ;SET PARAMETERS
         00001f90 0000a660' 
     434 00001fb0     0d5f          CALLA   LM_SETUP         ;PUT IT OUT.
         00001fc0 00000000! 
     435                    
     436 00001fe0     4c48          MOVE    A2,A8            ;GET STRING IN THE CORRECT REGGIE
     437                    
     438 00001ff0                   JSRP    LM_FINIS         ;AND PRINT IT!
     439                    
     440 00002060                   JSRP    SCR_REV          ;NOW ADD THE REV.
     441                    
     442 000020d0     9788          MOVE    *A12+,A8,L       ;RESTORE THE MENU PTR
     443                    
     444 000020e0                   RETP
     445                    
     446 00002110           SCR_REV:
     447 00002110     09e8          MOVI    MESS_REV,A8     ;GET READY FOR REV MESSAGE
         00002120 0000a700' 
     448 00002140     0d5f          CALLA   LM_SETUP        ;SETUP FOR REV MESSAGE
         00002150 00000000! 
     449                    
     450 00002170     09e8          MOVI    ROM_NAME,A8     ;USE ROM COPY OF REV.
         00002180 00000000! 
     451 000021a0                   JSRP    LM_FINIS        ;FINISH PRINTING MESSAGE
     452 00002210                   RETP
     453                    
     454 00002240           SCR_BOX:
     455 00002240     09e4          MOVI    TIT_ULX+(10000H*TIT_ULY),A4    ;UPPER LEFT
         00002250 00040005  
     456 00002270     09e5          MOVI    TIT_LRX+(10000H*TIT_LRY),A5    ;UPPER LEFT
         00002280 002a0185  
     457 000022a0     09c9          MOVI    COLOR_YELLOW,A9
         000022b0     0505  
     458 000022c0     0d3f          CALLR   STD_BORD
         000022d0     0688  
     459 000022e0     0960          RETS
     460                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   11

     461                    
     462 000022f0           RED_BOX:
     463 000022f0     a30c          MOVE    A8,-*A12,L                       ;PUSH THE MENU PTR
     464                    
     465 00002300     09c9          MOVI    ROBO_RED,A9
         00002310     0303  
     466 00002320     0d3f          CALLR   COL_INST                ;THIS PRINTS BOX AND STASHES
         00002330     0018  
     467                    
     468 00002340     09e8          MOVI    MM_INST1,A8     ;POINT AT INSTRUCTIONS MESSAGE
         00002350 00009d90' 
     469 00002370                   JSRP    C_PD_M
     470                    
     471 000023e0     09e8          MOVI    MM_INST2,A8     ;POINT AT INSTRUCTIONS MESSAGE
         000023f0 00009ee0' 
     472 00002410                   JSRP    C_PD_M
     473                    
     474 00002480     9788          MOVE    *A12+,A8,L      ;GET BACK MENU PTR.
     475 00002490                   RETP
     476                    
     477 000024c0           COL_INST:
     478 000024c0     0d3f          CALLR   STUFF_MENU_PROCESS               ;MOVE DATA INTO PDATA AREA
         000024d0     03af  
     479 000024e0     0d3f          CALLR   MEN_NUMS                         ;GET THE NUMBERS FOR THIS MENU
         000024f0     000b  
     480 00002500     b0cd          MOVE    A6,*A13(PDATA),W                 ;STASH THE X CENTER
         00002510     0100  
     481 00002520     0b24          ADDI    10000H*INST_ULY,A4               ;UPPER LEFT Y
         00002530 002d0000  
     482 00002550     0b25          ADDI    10000H*INST_LRY,A5               ;UPPER LEFT X
         00002560 004a0000  
     483 00002580     0d3f          CALLR   STD_BORD
         00002590     065c  
     484 000025a0     0960          RETS
     485                    
     486 000025b0           MEN_NUMS:
     487 000025b0     0d3f          CALLR   MENU_UL_A4_A5                    ;LEFT X IN A4
         000025c0     05c2  
     488 000025d0     0d3f          CALLR   MENU_LR_A6_A5                    ;RIGHT X IN A6
         000025e0     05d1  
     489 000025f0     4cc5          MOVE    A6,A5                            ;COPY RIGHT X INTO A5
     490 00002600     4086          ADD     A4,A6                            ;FIND CENTER
     491 00002610     2fe6          SRL     1,A6                             ;A6 NOW HAS CENTER X (FOR LATER)
     492 00002620     0960          RETS
     493                    
     494 00002630           C_PD_M:
     495 00002630     0d5f          CALLA   LM_SETUP        ;SETUP THE MESSAGE
         00002640 00000000! 
     496 00002660     b5a3          MOVE    *A13(PDATA),A3  ;GET THE X
         00002670     0100  
     497 00002680     ec69          movx    a3,a9           ;Move X
     498 00002690     0161          JUMP    A1              ;AND "CALL" THE ROUTINE
     499                    
     500                    
     501 000026a0           DIGSRT
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   12

     502 000026a0     0d3f          CALLR   DIAG_STATE
         000026b0     0023  
     503 000026c0     0d5f          CALLA   WIPEOUT         ;INITIALIZE THE OBJECT LIST
         000026d0 00000000! 
     504                    
     505                            ;kill that damned announcer proc too.
     506 000026f0     09e0          movi    VOICE_PID,a0
         00002700 00008100  
     507 00002720     5621          clr     a1
     508 00002730     03e1          not     a1
     509 00002740     0d5f          calla   EXISTP
         00002750 00000000! 
     510 00002770     ca03          jrz     zaitno_bleedin_announcer
     511 00002780     0d5f          calla   KILL
         00002790 00000000! 
     512 000027b0           zaitno_bleedin_announcer
     513 000027b0     0d3f          CALLR   DIAG_COLORS     ;RESTART THE COLOR PROCESSES.
         000027c0     0020  
     514 000027d0     0d5f          calla   nosounds
         000027e0 00000000! 
     515 00002800     0d5f          calla   dpageflip_off
         00002810 00000000! 
     516 00002830     1820          MOVK    1,A0
     517 00002840     0580          MOVE    A0,@DISPLAYON   ;WE NEED TO SEE THE STUFF
         00002850 00000000! 
     518                    
     519 00002870     09c0          movi    HEBLNKINIT,a0
         00002880     0065  
     520 00002890     0580          move    a0,@HEBLNK
         000028a0 c0000010  
     521                    
     522 000028c0     c080          jauc    CLR_SCRN        ;CLEAR THE SCREEN!
         000028d0 00000000! 
     523                    
     524 000028f0           DIAG_STATE
     525 000028f0     5621          CLR     A1
     526 00002900     0d5f          CALLA   KILALL                  ;KILL ABSOLUTELY EVERYONE!
         00002910 00000000! 
     527                    
     528 00002930     09c1          MOVI    DIAG_PID,A1             ;SET OUR ID TO DIAGNOSTICS MAN
         00002940     011e  
     529 00002950     b02d          MOVE    A1,*A13(PROCID)         ;PASS OUR ID TO FORKED PROCESS
         00002960     0020  
     530                    
     531 00002970     09c0          movi    INDIAG,a0
         00002980     ffff  
     532 00002990     0580          move    a0,@GAMSTATE            ;PUT US IN TEST MODE!
         000029a0 00000000! 
     533 000029c0     0960          rets
     534                    
     535                    
     536                    
     537              0004  NUM_DIAG_CYCLE_COLORS   .EQU    4
     538              003c  DIAG_CYCLE_COLOR_START  .EQU    03CH
     539                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   13

     540 00000100                   .BSS    DIAG_CRAM,NUM_DIAG_CYCLE_COLORS*16,1    ;RAM FOR TRANSFER
     541                    
     542 000029d0           DIAG_COLORS
     543 000029d0     098f          MMTM    SP,A0,A1,A7
         000029e0     c100  
     544 000029f0     09c0          MOVI    COLRPID,A0
         00002a00     0114  
     545 00002a10     5621          CLR     A1
     546 00002a20     0581          MOVE    A1,@IRQSKYE
         00002a30 00000000! 
     547 00002a50     0781          move    a1,@PALFRAM,L
         00002a60 00000000! 
     548 00002a80     0d5f          CALLA   KIL1C            ;KILL ALL COLOR UPDATE PROCESSES
         00002a90 00000000! 
     549 00002ab0     09e0          MOVI    DIAGP,A0         ;CREATE DIAGNOSTICS PALLETTE
         00002ac0 00000000! 
     550 00002ae0     0d5f          CALLA   pal_getf
         00002af0 00000000! 
     551 00002b10     09c0          MOVI    COLRPID,A0
         00002b20     0114  
     552 00002b30     5621          CLR     A1
     553 00002b40     03e1          NOT     A1
     554 00002b50     0d5f          CALLA   KILALL
         00002b60 00000000! 
     555 00002b80                   CREATE  COLRPID,PC_TRANSFER
     556 00002c00                   CREATE  COLRPID,LFLASH
     557 00002c80                   CREATE  COLRPID,RGB
     558 00002d00                   CREATE  COLRPID,BPR
     559 00002d80                   CREATE  COLRPID,DECAY
     560 00002e00     09af          MMFM    SP,A0,A1,A7
         00002e10     0083  
     561 00002e20     0960          RETS
     562                    
     563                    
     564 00002e30     0d3f  RGB     CALLR   TABDRIVE
         00002e40     008c  
     565 00002e50 00002ea0'         .LONG   RGBTAB,DIAG_CRAM+30H
     566 00002e90     0008          .WORD   8
     567 00002ea0     7c00  RGBTAB  .WORD   07C00H,001FH,077A0H,0741AH,0FFFFH
     568                    
     569 00002ef0     0d3f  DECAY   CALLR   TABDRIVE
         00002f00     0080  
     570 00002f10 00002f60'         .LONG   DCATAB,DIAG_CRAM+010H
     571 00002f50     0002          .WORD   2
     572 00002f60     001c  DCATAB  .WORD   001CH,001CH,011CH,021CH,031CH,039CH,239CH,2390H,2388H
     573 00002ff0     2380          .WORD   2380H,4300H,5280H,7180H,6180H,7080H,7000H,6000H,5000H
     574 00003080     4000          .WORD   4000H,3000H,2000H,1000H,0FFFFH
     575 000030d0     0d3f  BPR     CALLR   TABDRIVE
         000030e0     0062  
     576 000030f0 00003140'         .LONG   BPRTAB,DIAG_CRAM
     577 00003130     0001          .WORD   1
     578 00003140     001c  BPRTAB  .WORD   001CH,101CH,201CH,301CH,401CH,501CH,601CH,701CH,7010H
     579 000031d0     7010          .WORD   7010H,7008H,7008H,7000H,7000H,7008H,7008H,7010H,7010H
     580 00003260     701c          .WORD   701CH,701CH,601CH,501CH,401CH,301CH,201CH,101CH,0FFFFH
     581                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   14

     582 000032f0     09c0  LFLASH  MOVI    07FFFH,A0
         00003300     7fff  
     583 00003310     0580          MOVE    A0,@DIAG_CRAM+20H,W
         00003320 00000120- 
     584 00003340                   SLEEPK  2
     585 00003380           LFLASH1
     586 00003380     05a0          MOVE    @RAND,A0,W
         00003390 00000000! 
     587 000033b0     0b80          ANDI    0000001FH,A0
         000033c0 ffffffe0  
     588 000033e0     09e1          MOVI    COLTAB,A1
         000033f0 000034c0' 
     589 00003410     2480          SLL     4,A0
     590 00003420     4001          ADD     A0,A1
     591 00003430     8421          MOVE    *A1,A1,W
     592 00003440     0581          MOVE    A1,@DIAG_CRAM+020H,W
         00003450 00000120- 
     593 00003470                   SLEEPK  6
     594 000034b0     c0e3          JRUC    LFLASH
     595                    
     596 000034c0     0380  COLTAB  .WORD   0380H,1380H,2380H,3380H,4380H,5380H,6380H,7380H,7300H
     597 00003550     7280          .WORD   7280H,7200H,7180H,7080H,7008H,7008H,7010H,7010H,701CH
     598 000035e0     701c          .WORD   701CH,601CH,501CH,409CH,309CH,209CH,219CH,029CH,039CH
     599 00003670     139c          .WORD   139CH,239CH,339CH,539CH,739CH,7390H,7380H,6380H,4380H
     600 00003700     ffff          .WORD   0FFFFH
     601                    
     602 00003710           TABDRIVE
     603 00003710     97e0          MOVE    *SP+,A0,L
     604 00003720     960b          MOVE    *A0+,A11,L      ;A11 = TABLE START
     605 00003730     9609          MOVE    *A0+,A9,L       ;A9 = LOCATION TO STUFF COLOR
     606 00003740     840a          MOVE    *A0,A10,W       ;A10 = SLEEP TIME
     607 00003750           TABDRV1
     608 00003750     4d68          MOVE    A11,A8          ;RESET TO START OF TABLE
     609 00003760           TABDRV2
     610 00003760     9500          MOVE    *A8+,A0,W       ;GET A COLOR
     611 00003770     cefd          JRN     TABDRV1         ;BR = END OF TABLE
     612 00003780     8009          MOVE    A0,*A9,W
     613 00003790     4d40          MOVE    A10,A0
     614 000037a0     09e7          MOVI    TABDRV2,A7
         000037b0 00003760' 
     615 000037d0     c080          JAUC    PRCLSP          ;LOOP SLEEP
         000037e0 00000000! 
     616                    
     617 00003800           PC_TRANSFER
     618 00003800     09e0          MOVI    DIAG_CRAM,A0
         00003810 00000100- 
     619 00003830     09c1          MOVI    DIAG_CYCLE_COLOR_START,A1
         00003840     003c  
     620 00003850     09c2          MOVI    NUM_DIAG_CYCLE_COLORS,A2
         00003860     0004  
     621 00003870     0d5f          CALLA   pal_set
         00003880 00000000! 
     622 000038a0                   SLOOP   1,PC_TRANSFER
     623                    
     624 00003910           CHK_CMOS
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   15

     625 00003910     0d3f          CALLR   DIGSRT      ;CLEAR OUT THE SCREEN...(MESSAGE WILL FOLLOW!)
         00003920     fed7  
     626 00003930     0d5f          CALLA   CMOS_VAL
         00003940 00000000! 
     627 00003960     cb13          JRNZ    FAC_TIME
     628 00003970     09e2          MOVI    MESS_BITCHIN,A2          ;POINT AT DATA
         00003980 0000a5e0' 
     629 000039a0     09c3          MOVI    ROBO_WHITE,A3
         000039b0     0202  
     630 000039c0                   JSRP    TOP_BOX
     631 00003a30                   SLEEPK  18H
     632 00003a70                   RETP
     633 00003aa0           FAC_TIME:
     634 00003aa0                   JSRP    GET_FAC                   ;GET THE GAME TO FACTORY SETTINGS!
     635 00003b10     0d5f          CALLA   CLR_SCRN                  ;PRESSED....BLANK THE SCREEN AND
         00003b20 00000000! 
     636                                                               ;HOLD TILL HE LETS GO.
     637 00003b40     c080          JAUC     WARMSET              ;CMOS IS OK....RETURN!
         00003b50 00000000! 
     638                    
     639 00003b70           GET_FAC
     640                    
     641 00003b70           FAC_LOOP
     642 00003b70     0d5f          CALLA   CLR_SCRN                ;CLEAR SCREEN IN ANTICIPATION OF MESSAGE
         00003b80 00000000! 
     643 00003ba0     5600          clr     a0                      ;Full
     644 00003bb0     0d5f          CALLA   FAC_SET
         00003bc0 00000000! 
     645 00003be0     0d5f          CALLA   CMOS_VAL                ;IS IT OK NOW?
         00003bf0 00000000! 
     646 00003c10     ca0b          JRZ     CMOS_FIXED              ;YEP....FINISH CLEANUP!
     647                    
     648 00003c20     09e8          MOVI    MESS_FAIL,A8            ;POINT AT DATA
         00003c30 0000a1b0' 
     649 00003c50                   JSRP    L_MESS                  ;DISPLAY LARRY MESSAGE
     650                    
     651 00003cc0     c00f          JRUC    WAIT_POINT              ;WE'RE DEAD..ADVANCE TAKES US TO TEST MODE!
     652                    
     653 00003cd0           CMOS_FIXED
     654 00003cd0     0d3f          CALLR   CENT_BOX                ;PUT A BOX AROUND IT
         00003ce0     0600  
     655                    
     656 00003cf0     09e8          MOVI    MESS_FAC,A8             ;POINT AT DATA
         00003d00 00000000! 
     657 00003d20                   JSRP    L_MESS                  ;DISPLAY LARRY MESSAGE
     658                    
     659                    
     660 00003d90     0d5f          CALLA   FAC_STUF                ;DO REST OF FULL FACTORY STUFF!
         00003da0 00000000! 
     661                    
     662                    
     663 00003dc0           WAIT_POINT
     664 00003dc0                   RETP                            ;NOW LET CALLER TAKE OVER.
     665                    
     666                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   16

     667              0100  MEN_OFF   EQU     PDATA                ;WORD-OFFSET INTO MENU OF SELECTION
     668              0110  MEN_ROUT  EQU     MEN_OFF+WORD_SIZE    ;LONG-ROUTINE FOR SELECTION
     669              0130  MEN_ROM   EQU     MEN_ROUT+LONG_SIZE   ;LONG-POINTER TO ROM STRUCTURE
     670              0150  MEN_ULX   EQU     MEN_ROM+LONG_SIZE    ;WORD-LEFT X  (CENTER X WHEN CENTERING)
     671              0160  MEN_ULY   EQU     MEN_ULX+WORD_SIZE    ;WORD-TOP Y
     672              0170  MEN_DY    EQU     MEN_ULY+WORD_SIZE    ;WORD-Y UNITS PER ENTRY
     673              0180  MEN_COLR  EQU     MEN_DY+WORD_SIZE     ;WORD-COLOR FOR ENTRIES
     674              0190  MEN_BAR   EQU     MEN_COLR+WORD_SIZE   ;WORD-HEIGHT OF SELECTION BAR
     675              01a0  MEN_BDY   EQU     MEN_BAR+WORD_SIZE    ;WORD-DY FROM TOP OF TEXT TO TOP OF BAR.
     676              01b0  MEN_BDX   EQU     MEN_BDY+WORD_SIZE    ;WORD-DX FROM LEFT OF WORD TO LEFT OF BAR
     677              01c0  MEN_BWID  EQU     MEN_BDX+WORD_SIZE    ;WORD-WIDTH OF BAR
     678              01d0  MEN_SCOL  EQU     MEN_BWID+WORD_SIZE   ;WORD-COLOR OF SELECTED TEXT
     679              01e0  MEN_TPTR  EQU     MEN_SCOL+WORD_SIZE    ;LONG-POINTER TO BEGINNING OF TEXT ENTRIES.
     680              0200  MEN_ENTS  EQU     MEN_TPTR+LONG_SIZE   ;WORD-NUMBER OF ENTRIES IN MENU
     681              0210  MEN_CUR   EQU     MEN_ENTS+WORD_SIZE   ;WORD-CURRENT SELECTION (1ST IS 1)
     682              0220  MEN_WALK  EQU     MEN_CUR+WORD_SIZE    ;WORD-NUMBER OF ENTRY WE'RE ON AS WE WALK
     683              0230  MEN_STIK  EQU     MEN_WALK+WORD_SIZE   ;LONG-"STUCK" STATE OF SWITCHES
     684              0250  MEN_ACT   EQU     MEN_STIK+LONG_SIZE   ;LONG-SWITCH WE'RE ACTING ON. (BIT)
     685              0270  MEN_TYPO  EQU     MEN_ACT+LONG_SIZE    ;WORD-TYPOMATIC COUNTER
     686              0280  MEN_HITS  EQU     MEN_TYPO+WORD_SIZE   ;WORD-CONSECUTIVE TYPOMATIC HITS
     687              0290  MEN_ADV   EQU     MEN_HITS+WORD_SIZE   ;WORD-NON-ZERO IF ADVANCE WAS BUTTON USED
     688                    
     689              0009  WORD_ENTS    EQU    (MEN_TPTR-MEN_ULX)/WORD_SIZE   ;NUMBER OF WORD ENTRIES
     690                    
     691 00003df0           B_MENU: 
     692 00003df0     09e7          MOVI    BD_SLAVE,A7
         00003e00 000040a0' 
     693 00003e20     c003          JRUC    GMJMP
     694                    
     695 00003e30           GET_MENU:
     696 00003e30     09e7          MOVI    GM_SLAVE,A7             ;THIS IS ROUTINE
         00003e40 00004110' 
     697 00003e60           GMJMP:
     698 00003e60     09c1          MOVI    MENU_PID,A1             ;THIS IS ID
         00003e70     0ac1  
     699 00003e80     0d5f          CALLA   GETPRC                  ;CREATE IT
         00003e90 00000000! 
     700                    
     701 00003eb0     4c0a          MOVE    A0,A10                  ;SAVE HIS POINTER
     702                    
     703 00003ec0           GM1:    
     704 00003ec0                   SLEEPK  2
     705                    
     706 00003f00     09c0          MOVI    MDUN_PID,A0
         00003f10     0ac2  
     707 00003f20     09e1          MOVI    0FFFFH,A1
         00003f30 0000ffff  
     708 00003f50     0d5f          CALLA   EXISTP                  ;WAIT FOR ID TO CHANGE TO THIS!
         00003f60 00000000! 
     709                    
     710 00003f80     caf3          JRZ     GM1                     ;LOOP UNTIL IT EXISTS!
     711                    
     712 00003f90     b548          MOVE    *A10(MEN_OFF),A8        ;RETURN OFFSET OF SELECTION
         00003fa0     0100  
     713 00003fb0     b749          MOVE    *A10(MEN_ROUT),A9,L     ;AND ROUTINE THAT WAS SELECTED.
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   17

         00003fc0     0110  
     714 00003fd0     b54a          MOVE    *A10(MEN_ADV),A10       ;INDICATE WHETHER ADVANCE WAS USED
         00003fe0     0290  
     715                    
     716 00003ff0     09c0          MOVI    MDUN_PID,A0
         00004000     0ac2  
     717 00004010     09e1          MOVI    0FFFFH,A1
         00004020 0000ffff  
     718 00004040     0d5f          CALLA   KILALL                  ;KILL THE HANGING MENU GETTER!
         00004050 00000000! 
     719 00004070                   RETP                            ;AND RETURN
     720                    
     721                            
     722 000040a0           BD_SLAVE
     723 000040a0     0d3f          CALLR   MENU_BORDER          ;DRAW THE BORDER FOR SELCTIONS.
         000040b0     03f6  
     724 000040c0                   SLEEP   3
     725                    
     726 00004110           GM_SLAVE
     727 00004110                   JSRP    ST_STICK          ;TELL STICK(S) AND BUTTONS WE'RE STARTING.
     728                    
     729 00004180     0d3f          CALLR   STUFF_MENU_PROCESS   ;MOVE DATA INTO PDATA AREA
         00004190     01e3  
     730                    
     731                    
     732 000041a0     1820          MOVK    1,A0                        ;SETUP FOR LINE 1.
     733                    
     734 000041b0           DO_ANOTHER_LINE
     735                    
     736 000041b0     b00d          MOVE    A0,*A13(MEN_WALK),W       ;WALK THROUGH.
         000041c0     0220  
     737                    
     738 000041d0                   JSRP    DO_MENU_LINE              ;PUT OUT LINE IN A0.
     739 00004240     b5a0          MOVE    *A13(MEN_WALK),A0,W       ;GET BACK THE COUNTER
         00004250     0220  
     740                    
     741 00004260     1020          INC     A0                        ;MOVE TO NEXT ENTRY.
     742 00004270     b5a1          MOVE    *A13(MEN_ENTS),A1,W       ;SEE IF WE'RE DONE.
         00004280     0200  
     743 00004290     4820          CMP     A1,A0
     744 000042a0     c2f0          JRLS    DO_ANOTHER_LINE
     745 000042b0                   SLEEP   2
     746 00004300     0d3f          CALLR   PLOT_HELP                 ;PLOT HELP FOR 1ST IF NECESSARY
         00004310     03b3  
     747                    
     748                    
     749 00004320           MENU_LOOP
     750 00004320                   SLEEPK  1
     751 00004360     0d5f          calla   READ_DIP                ;Get the current dip switch bits
         00004370 00000000! 
     752 00004390     1f00          btst    DPTEST_B,a0
     753 000043a0     0300          jrnz    zaitdipon
     754                    
     755 000043b0           zaitdipon
     756 000043b0     09e5          MOVI    MENU_TYPO,A5
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   18

         000043c0 0004000e  
     757 000043e0                   JSRP    GETSTICK                ;ASK THE STICK HANDLER.......
     758 00004450     4c00          MOVE    A0,A0                   ;SEE WHAT GET_STICK RETURNED.
     759 00004460     caeb          JRZ     MENU_LOOP               ;MENU...(PAUSE)  NOTHING.
     760                    
     761 00004470     b5a1          MOVE    *A13(MEN_CUR),A1,W      ;GET CURRENT ENTRY...IN A1
         00004480     0210  
     762                    
     763 00004490     0b40          cmpi    4,a0
         000044a0     fffb  
     764 000044b0     ca71          jrz     menu_escape
     765                    
     766 000044c0     0b40          CMPI    3,A0                    ;BUTTON?
         000044d0     fffc  
     767 000044e0     ca38          JRZ     MENU_BUTTON             ;YEP....WE'RE OUT OF HERE.
     768                    
     769 000044f0     0b40          CMPI    2,A0
         00004500     fffd  
     770 00004510     ca10          JRZ     MENU_DOWN               ;ITS DOWN....
     771 00004520     0b41          CMPI    1,A1                    ;WELL?
         00004530     fffe  
     772 00004540     c2dd          JRLS    MENU_LOOP               ;YEP....IGNORE
     773                    
     774 00004550                   JSRP    UN_SELECT               ;PUT BACK THE OLD "CURRENT ONE
     775 000045c0     b5a0          MOVE    *A13(MEN_CUR),A0,W      ;GET CURRENT ENTRY
         000045d0     0210  
     776 000045e0     1420          DEC     A0                      ;MAKE ONE LESS.
     777 000045f0     09c3          movi    d_up_snd,a3
         00004600     03d4  
     778 00004610     c010          JRUC    JOIN_DOWN               ;NOW PLOT THE NEW ONE.
     779                    
     780 00004620           MENU_DOWN:
     781 00004620     b5a2          MOVE    *A13(MEN_ENTS),A2,W     ;GET NUMBER IN MENU
         00004630     0200  
     782 00004640     4841          CMP     A2,A1                   ;ARE WE AT MAX
     783 00004650     c9cc          JRHS    MENU_LOOP               ;YEP...NO ACTION
     784                    
     785 00004660                   JSRP    UN_SELECT               ;PUT BACK THE OLD "CURRENT ONE
     786                    
     787 000046d0     b5a0          MOVE    *A13(MEN_CUR),A0,W      ;GET CURRENT ENTRY
         000046e0     0210  
     788 000046f0     1020          INC     A0                      ;MAKE THIS THE NEXT.
     789 00004700     09c3          movi    d_dn_snd,a3
         00004710     03d5  
     790                    
     791 00004720           JOIN_DOWN:
     792 00004720                   PUSHP   a3
     793 00004730     b00d          MOVE    A0,*A13(MEN_CUR),W      ;PUT BACK
         00004740     0210  
     794 00004750                   JSRP    DO_MENU_LINE            ;PUT OUT LINE IN A0.
     795 000047c0     0d3f          CALLR   PLOT_HELP               ;PLOT HELP NEW ONE
         000047d0     0367  
     796 000047e0                   SLEEPK  1                       ;DELAY BEEP 1 FRAME
     797 00004820                   PULLP   a3
     798 00004830     0d5f          calla   SNDSND
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   19

         00004840 00000000! 
     799                    
     800 00004860     c0ab          JRUC    MENU_LOOP               ;AND WAIT FOR NEXT RESPONSE.
     801                    
     802 00004870           MENU_BUTTON:
     803 00004870     b7a0          MOVE    *A13(MEN_ROM),A0,L
         00004880     0130  
     804 00004890     0b60          CMPI    MEN_ADJ,A0              ; SPECIAL CASE FOR MENU ADJ
         000048a0 ffffffff! 
     805 000048c0     cb15          JRNZ    MBNOTADJ
     806 000048d0     0d5f          CALLA   CKDIP
         000048e0 00000000! 
     807 00004900     cb11          JRNZ    MBNOTADJ                ; NOT USING DIP SWITCHES
     808 00004910     b5a0          MOVE    *A13(MEN_CUR),A0,W      ; GET THE SELECT ITEM
         00004920     0210  
     809 00004930     0b40          CMPI    2,A0                    ; "STANDARD PRICING"
         00004940     fffd  
     810 00004950     ca06          JRZ     MBABORT
     811 00004960     0b40          CMPI    3,A0                    ; "CUSTOM PRICING"
         00004970     fffc  
     812 00004980     ca03          JRZ     MBABORT
     813 00004990     0b40          CMPI    4,A0                    ; "FREE PLAY"
         000049a0     fffb  
     814 000049b0     cb06          JRNZ    MBNOTADJ
     815 000049c0           MBABORT
     816                    
     817 000049c0     09c3          movi    d_enter_snd,a3
         000049d0     03d6  
     818 000049e0     0d5f          calla   SNDSND
         000049f0 00000000! 
     819                    
     820 00004a10     c090          JRUC    MENU_LOOP
     821 00004a20           MBNOTADJ
     822 00004a20     5600          CLR     A0                      ;NOT ADVANCE
     823                    
     824 00004a30           IS_ADV: 
     825 00004a30     b00d          MOVE    A0,*A13(MEN_ADV),W      ;NON ZERO IF IT WAS ADVANCE
         00004a40     0290  
     826                    
     827 00004a50                   JSRP    BUTTON_STALL            ;HIGHLIGHT SELECTION AND HANG ON BUTTON
     828                    
     829 00004ac0     b5a0          MOVE    *A13(MEN_CUR),A0,W      ;GET "CURRENT" ENTRY.
         00004ad0     0210  
     830 00004ae0     0d3f          CALLR   GET_MENU_DATA           ;A1=CURRENT_OFFSET  A2=TEXT  A3=ROUTINE
         00004af0     031c  
     831 00004b00     b00d          MOVE    A0,*A13(MEN_OFF),W      ;STORE THE OFFSET (CHOICE NUM)
         00004b10     0100  
     832 00004b20     b26d          MOVE    A3,*A13(MEN_ROUT),L     ;AND THE ROUTINE POINTER
         00004b30     0110  
     833 00004b40     09c0          MOVI    MDUN_PID,A0
         00004b50     0ac2  
     834 00004b60     b00d          MOVE    A0,*A13(PROCID),W       ;CHANGE OUR ID.
         00004b70     0020  
     835                    
     836 00004b80           MENU_DONE:
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   20

     837 00004b80                   SLEEPK  20
     838 00004bc0     c0fb          JRUC    MENU_DONE               ;NOW HANG TILL DISPATCHER SEES ID.
     839                    
     840 00004bd0           menu_escape:
     841 00004bd0     09c3          movi    d_escape_snd,a3
         00004be0     03d7  
     842 00004bf0     0d5f          calla   SNDSND
         00004c00 00000000! 
     843 00004c20     5600          clr     a0
     844 00004c30     b00d          move    a0,*a13(MEN_ADV),W
         00004c40     0290  
     845 00004c50                   JSRP    BUTTON_STALL
     846 00004cc0     b5a0          move    *a13(MEN_CUR),a0,W
         00004cd0     0210  
     847 00004ce0     0d3f          callr   GET_MENU_DATA
         00004cf0     02fc  
     848 00004d00     5600          clr     a0
     849 00004d10     b00d          move    a0,*a13(MEN_OFF),W
         00004d20     0100  
     850 00004d30     b20d          move    a0,*a13(MEN_ROUT),L
         00004d40     0110  
     851 00004d50     09c0          movi    MDUN_PID,a0
         00004d60     0ac2  
     852 00004d70     b00d          move    a0,*a13(PROCID),W
         00004d80     0020  
     853 00004d90     c0de          jruc    MENU_DONE
     854                    
     855 00004da0           BUTTON_STALL:
     856 00004da0     0782          MOVE    A2,@LAST_BUT,L       ;PUSH THE BUTTON STATE
         00004db0 00000040- 
     857                    
     858 00004dd0     05a0          MOVE    @SCODE,A0,W          ;NO CASH FOR REPEAT SOUND CODES
         00004de0 00000000! 
     859 00004e00     05a1          MOVE    @DCODE,A1,W
         00004e10 00000000! 
     860 00004e30     5401          OR      A0,A1
     861 00004e40     cb2c          JRNZ    DONT_WAIT            ;ITS A SOUND REPEAT....DON'T HOLD EITHER!
     862                    
     863 00004e50     09c3          movi    d_enter_snd,a3
         00004e60     03d6  
     864 00004e70     0d5f          calla   SNDSND
         00004e80 00000000! 
     865                    
     866 00004ea0     b5a0          MOVE    *A13(MEN_CUR),A0,W   ;GET CURRENT SELECTION
         00004eb0     0210  
     867 00004ec0     09c1          MOVI    COLOR_YELLOW,A1
         00004ed0     0505  
     868 00004ee0     0d3f          CALLR   MENU_BAR             ;CHANGE THE BAR COLOR.
         00004ef0     0164  
     869                    
     870 00004f00     0d3f          CALLR   GET_MENU_DATA             ;GET OUR TEXT POINTER BACK
         00004f10     02da  
     871 00004f20     09c1          MOVI    ROBO_WHITE,A1            ;WHITE ON ORANGE DURING HOT MOMENT
         00004f30     0202  
     872 00004f40                   JSRP    MENU_TEXT                 ;AND WRITE INVERTED TEXT
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   21

     873                    
     874 00004fb0     07a8          MOVE    @LAST_BUT,A8,L            ;GET BUTTON BACK
         00004fc0 00000040- 
     875 00004fe0     09c9          MOVI    08H,A9                    ;MINIMUM TIME FOR BUTTON HIGHLITE
         00004ff0     0008  
     876                    
     877 00005000           WAIT_FOR_RELEASE:
     878                    
     879                    
     880 00005000                   SLEEPK  1
     881                            
     882 00005040     4d29          MOVE    A9,A9                ;REDUCE FOR HELD TIME
     883 00005050     ca01          JRZ     WAIT_1               ;ZEROED OUT ALREADY.
     884 00005060     1429          DEC     A9
     885                    
     886 00005070           WAIT_1:
     887 00005070     0d3f          CALLR   FORM_SWS        ;WAIT FOR THIS ONE TO GO TO ZERO
         00005080     020c  
     888 00005090     5100          AND     A8,A0                ;IS OUR BUTTON STILL DOWN?
     889 000050a0     cbf5          JRNZ    WAIT_FOR_RELEASE
     890                    
     891 000050b0     1029          INC     A9                   ;MAKE SURE A9 HAS 1 OR MORE
     892 000050c0           WAIT_2:
     893 000050c0                   SLEEPK  1
     894 00005100     3ca9          DSJS    A9,WAIT_2
     895                    
     896 00005110           DONT_WAIT:
     897 00005110     b5a0          MOVE    *A13(MEN_CUR),A0,W   ;GET CURRENT SELECTION
         00005120     0210  
     898 00005130     5621          CLR     A1                   ;ERASE BAR
     899 00005140     0d3f          CALLR   MENU_BAR             ;CHANGE THE BAR COLOR.
         00005150     013e  
     900                    
     901 00005160     0d3f          CALLR   GET_MENU_DATA             ;GET OUR TEXT POINTER BACK
         00005170     02b4  
     902 00005180     b5a1          MOVE    *A13(MEN_COLR),A1,W       ;RE-PLOT THE NORMAL TEXT
         00005190     0180  
     903 000051a0                   JSRP    MENU_TEXT               
     904                    
     905 00005210                   SLEEPK  2                    ;NOW GIVE SOME BOUNCE PROTECTION.
     906                    
     907 00005250                   RETP
     908                    
     909 00005280       57          .STRING "WWRREESSTTLLEEMMAANNIIAA  CCOOPPYYRRIIGGHHTT  11999955  "
     910 00005440       4d          .STRING "MMIIDDWWAAYY  MMAANNUUFFAACCTTUURRIINNGG  CCOOMMPPAANNYY..  "
     911 00005620       41          .STRING "AALLLL  RRIIGGHHTTSS  RREESSEERRVVEEDD..  "
     912 00005770       44          .STRING "DDEESSIIGGNNEEDD  BBYY::  MMAARRKK  TTUURRMMEELLLL  "
     913 00005910       53          .STRING "SSAALL  DDIIVVIITTAA  JJAASSOONN  SSKKIILLEESS  "
     914 00005a90       4a          .STRING "JJOOSSHH  TTSSUUII  JJAAKKEE  SSIIMMPPSSOONN  "
     915 00005c00       45          .STRING "EEUUGGEENNEE  GGEEEERR  TTOONNYY  GGOOSSKKIIEE  "
     916 00005d80       4d          .STRING "MMIIKKEE  LLYYNNCCHH  JJAAMMIIEE  RRIIVVEETTTT  "
     917 00005f00       53          .STRING "SSHHAAWWNN  LLIIPPTTAAKK  "
     918 00005fd0                   .even
     919                    
     920 00005fd0           STUFF_MENU_PROCESS:
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   22

     921 00005fd0     098f          MMTM    SP,A0,A1,A2,A3,A8
         00005fe0     f080  
     922 00005ff0     4da0          MOVE    A13,A0               ;POINT IN PROCESS AREA
     923 00006000     0b00          ADDI    MEN_ROM,A0           ;THIS IS WHERE 1ST TIDBIT GOES
         00006010     0130  
     924 00006020     9300          MOVE    A8,*A0+,L            ;STORE OUR BASE POINTER IN STRUCTURE
     925 00006030     0b08          ADDI    MR_WORDS,A8          ;MOVE TO WORD LIST
         00006040     0070  
     926                    
     927 00006050     09c2          MOVI    WORD_ENTS,A2         ;NOW THIS MANY MORE WORDS.
         00006060     0009  
     928                    
     929 00006070           GMS1:   
     930 00006070     9501          MOVE    *A8+,A1
     931 00006080     9020          MOVE    A1,*A0+
     932 00006090     3c62          DSJS    A2,GMS1
     933 000060a0     b30d          MOVE    A8,*A13(MEN_TPTR),L  ;STORE IN PROCESS AREA.
         000060b0     01e0  
     934 000060c0     5600          CLR     A0                        ;START AT zait1.
     935 000060d0           HOW_MANY:
     936 000060d0     1020          INC     A0                        ;MOVE TO NEXT ENTRY.
     937 000060e0     0d3f          CALLR   GET_MENU_DATA             ;GET THE PARAMETERS FOR THIS ENTRY
         000060f0     01bc  
     938 00006100     4c42          MOVE    A2,A2                     ;AND SEE IF A2=0
     939 00006110     cbfb          JRNZ    HOW_MANY                  ;ITS REAL.....PUT IT UP.
     940                    
     941 00006120     1420          DEC     A0                        ;PREVIOUS LINE WAS THE LAST.
     942 00006130     b00d          MOVE    A0,*A13(MEN_ENTS),W       ;STUFF NUMBER IN MENU.
         00006140     0200  
     943                    
     944 00006150     4d29          MOVE    A9,A9                     ;DID BOZO PASS ZERO AS CURRENT?
     945 00006160     ca03          JRZ     USE_LAST
     946 00006170     4809          CMP     A0,A9                     ;MAKE SURE ITS NOT TOO HIGH
     947 00006180     c301          JRHI    USE_LAST                  ;A9 IS TOO HIGH
     948 00006190     4d20          MOVE    A9,A0                     ;USE THE ONE PAST
     949                    
     950 000061a0           USE_LAST:
     951 000061a0     b00d          MOVE    A0,*A13(MEN_CUR),W   ;MAKE ENTRY "1" CURRENT.
         000061b0     0210  
     952 000061c0     09af          MMFM    SP,A0,A1,A2,A3,A8
         000061d0     010f  
     953 000061e0     0960          RETS
     954                    
     955 000061f0           DO_MENU_LINE:
     956 000061f0     0d3f          CALLR   GET_MENU_DATA             ;GET "CURRENT" IN A1
         00006200     01ab  
     957 00006210     4801          CMP     A0,A1                     ;IS IT "CURRENT" ENTRY?
     958 00006220     ca0c          JRZ     DO_CURRENT_ENT            ;YEP....DO INVERSE STUFF
     959 00006230     b5a1          MOVE    *A13(MEN_COLR),A1,W       ;USE THE NORMAL ENTRY COLOR
         00006240     0180  
     960 00006250                   JSRP    MENU_TEXT                 ;PUT UP THE "TEXT" PORTION.
     961 000062c0                   RETP                              ;AND RETURN
     962                    
     963 000062f0           DO_CURRENT_ENT: 
     964 000062f0     09c1          MOVI    ROBO_WHITE,A1            ;DO THE BAR IN WHITE (AT A0 HEIGHT)
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   23

         00006300     0202  
     965 00006310     0d3f          CALLR   MENU_BAR                  ;PUT IT UP (A0 PRESERVED)
         00006320     0021  
     966                    
     967 00006330     0d3f          CALLR   GET_MENU_DATA             ;GET OUR TEXT POINTER BACK
         00006340     0197  
     968 00006350     b5a1          MOVE    *A13(MEN_SCOL),A1,W       ;GET "SELECTED" COLOR
         00006360     01d0  
     969 00006370                   JSRP    MENU_TEXT                 ;AND WRITE INVERTED TEXT
     970 000063e0                   RETP                              ;THAT'S ALL FOLKS.
     971                    
     972 00006410           UN_SELECT:
     973 00006410     b5a0          MOVE    *A13(MEN_CUR),A0,W        ;POINT AT CURRENT ENTRY
         00006420     0210  
     974 00006430     5621          CLR     A1                        ;USE BLACK FOR BACKGROUND
     975 00006440     0d3f          CALLR   MENU_BAR                  ;THIS REMOVES THE BAR.
         00006450     000e  
     976                    
     977 00006460     0d3f          CALLR   GET_MENU_DATA             ;NOW GET A2 TO TEXT POINTER
         00006470     0184  
     978 00006480     b5a1          MOVE    *A13(MEN_COLR),A1,W       ;USE THE NORMAL ENTRY COLOR
         00006490     0180  
     979 000064a0                   JSRP    MENU_TEXT                 ;PUT UP THE "TEXT" PORTION.
     980 00006510                   RETP                              ;AND RETURN
     981                    
     982 00006540           MENU_BAR:
     983 00006540     098f          MMTM    SP,A0,A1,A3,A4,A5,A6,A7,A8    ;SAVE THE OFFSET
         00006550     df80  
     984 00006560     098f          MMTM    SP,A1                     ;SAVE COLOR!
         00006570     4000  
     985 00006580     0d3f          CALLR   GET_MENU_DATA             ;GET THE TEXT POINTER
         00006590     0172  
     986 000065a0     0d3f          CALLR   STLEN_SETUP               ;SETUP FOR STRLEN CALL.
         000065b0     003d  
     987 000065c0     0d5f          CALLA   STRNGLEN                  ;FIND WIDTH OF STRING.
         000065d0 00000000! 
     988 000065f0     b5a3          MOVE    *A13(MEN_ULX),A3,W        ;LEFT X IN A3                 
         00006600     0150  
     989 00006610     b7a6          MOVE    *A13(MEN_ROM),A6,L        ;GET ROM POINTER
         00006620     0130  
     990 00006630     b6c6          MOVE    *A6(MR_TCAL),A6,L         ;CHECK ROUTINE
         00006640     0020  
     991 00006650     0b66          CMPI    STRCNRM,A6
         00006660 ffffffff! 
     992 00006680     cb06          JRNZ    NOT_CENTERING
     993 00006690     b5a7          MOVE    *A13(MEN_BWID),A7,W       ;A7 IS THE REGISTER FOR BAR WIDTH
         000066a0     01c0  
     994 000066b0     4ce4          MOVE    A7,A4                     ;GET COPY IN A4
     995 000066c0     2fe4          SRL     1,A4                      ;1/2 OF WIDTH COMES OFF OF CENTER
     996 000066d0     4483          SUB     A4,A3                     ;A3 NOW HAS "LEFT X"
     997 000066e0     c005          JRUC    CENTERING                 ;A7 IS WIDTH...A3 IS X
     998                    
     999 000066f0           NOT_CENTERING:
    1000 000066f0     b5a4          MOVE    *A13(MEN_BDX),A4,W        ;GET EXTRA X UNITS FOR BAR
         00006700     01b0  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   24

    1001 00006710     4483          SUB     A4,A3
    1002                    
    1003 00006720     2424          SLL     1,A4                      ;NOW DOUBLE THE EXCESS DX FOR BAR
    1004 00006730     4087          ADD     A4,A7                     ;NOW A7 HAS WIDTH OF BAR
    1005                    
    1006 00006740           CENTERING:
    1007 00006740     0be3          SUBI    C_KLUDGE,A3          ;KLUDGE TO NULLIFY FINAL SPACE.
         00006750     fffe  
    1008                    
    1009 00006760     0d3f          CALLR   GET_ENTRY_Y               ;GET Y FOR ENTRY IN A5
         00006770     017e  
    1010                    
    1011 00006780     b5a6          MOVE    *A13(MEN_BDY),A6,W        ;GET BAR DY (NEGATIVE)
         00006790     01a0  
    1012 000067a0     40c5          ADD     A6,A5                     ;ADJUST Y BY BAR DY
    1013 000067b0     2605          SLL     16,A5                     ;SHIFT Y INTO POSITION
    1014                    
    1015 000067c0     40a3          ADD     A5,A3                     ;A3 NOW POINTS AT UPPER LEFT
    1016                    
    1017 000067d0     b5a4          MOVE    *A13(MEN_BAR),A4,W        ;Y HEIGHT OF BAR
         000067e0     0190  
    1018 000067f0     2604          SLL     16,A4                     ;IN POSITION
    1019 00006800     40e4          ADD     A7,A4                     ;A7 HAS X WIDTH OF BAR.
    1020                    
    1021 00006810     09af          MMFM    SP,A1                     ;NOW GET COLOR BACK!
         00006820     0002  
    1022 00006830     2601          SLL     16,A1                     ;SHIFT COLOR TO HIGH HALF (PAL. 0)
    1023 00006840     0d5f          CALLA   FILLAREA                  ;FILL IT UP!
         00006850 00000000! 
    1024                    
    1025 00006870     09af          MMFM    SP,A0,A1,A3,A4,A5,A6,A7,A8    ;SAVE THE OFFSET
         00006880     01fb  
    1026 00006890     0960          RETS
    1027                    
    1028 000068a0           MENU_TEXT:
    1029 000068a0     0d3f          CALLR   GET_ENTRY_Y               ;GET Y FOR ENTRY IN A5
         000068b0     016a  
    1030 000068c0     2605          SLL     16,A5                     ;SHIFT Y INTO POSITION
    1031 000068d0     b5a9          MOVE    *A13(MEN_ULX),A9,W        ;GET THE X
         000068e0     0150  
    1032 000068f0     40a9          ADD     A5,A9                     ;A9 SET WITH SCREEN ADDRESS
    1033                    
    1034 00006900     4c26          MOVE    A1,A6                     ;COLOR
    1035 00006910     5600          CLR     A0                        ;NO SLEEP
    1036                    
    1037 00006920     0d3f          CALLR   STLEN_SETUP
         00006930     0005  
    1038                    
    1039 00006940     b7a1          MOVE    *A13(MEN_ROM),A1,L
         00006950     0130  
    1040 00006960     b621          MOVE    *A1(MR_TCAL),A1,L         ;GET THE ROUTINE TO USE
         00006970     0020  
    1041 00006980     0161          JUMP    A1                        ;AND CALL IT!
    1042                    
    1043 00006990           STLEN_SETUP:
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   25

    1044 00006990     4c48          MOVE    A2,A8                     ;TEXT POINTER
    1045 000069a0     09ca          MOVI    SPACING20,A10             ;SPACING
         000069b0     0002  
    1046 000069c0     b7ab          MOVE    *A13(MEN_ROM),A11,L
         000069d0     0130  
    1047 000069e0     b76b          MOVE    *A11(MR_FONT),A11,L       ;LOAD FONT
         000069f0     0000  
    1048 00006a00     0960          RETS
    1049                    
    1050 00006a10           ST_STICK:
    1051 00006a10     0d3f          CALLR   FORM_SWS           ;THIS LATCHES ANYONE ALREADY DOWN.
         00006a20     0072  
    1052 00006a30     5600          CLR     A0
    1053 00006a40     b20d          MOVE    A0,*A13(MEN_ACT),L      ;SHOW THAT WE'RE "ACTING" ON NONE.
         00006a50     0250  
    1054 00006a60     b00d          MOVE    A0,*A13(MEN_TYPO),W     ;CLEAR TYPOMATIC COUNTER.
         00006a70     0270  
    1055 00006a80     b00d          MOVE    A0,*A13(MEN_HITS),W     ;CLEAR OUT "CONSECUTIVE HITS"
         00006a90     0280  
    1056 00006aa0                   RETP
    1057              0303  UP_OR_DOWN       EQU     UP_BITS+DOWN_BITS
    1058              0004  TYPO_COUNT       EQU     4
    1059              0019  TYPO_STALL       EQU     25
    1060          0004000e  MENU_TYPO        EQU     (TYPO_COUNT*10000H)+14      ;14 HITS FOR MENU TILL STUCK
    1061                            
    1062 00006ad0           GETSTICK:
    1063 00006ad0     4ca6          MOVE    A5,A6
    1064 00006ae0     2e05          SRL     16,A5                ;TYPO RATE IN A5
    1065 00006af0     0b86          ANDI    WORD_MASK,A6         ;STUCK HIT COUNT IN A6
         00006b00 ffff0000  
    1066                    
    1067 00006b20     0d3f          CALLR   FORM_SWS        ;SEE WHAT THEY LOOK LIKE NOW.
         00006b30     0061  
    1068 00006b40     03e1          NOT     A1                   ;LAST = 0 AND NOW = 1 MEANS EDGE!
    1069                    
    1070 00006b50     5020          AND     A1,A0                ;1'S WHERE WE HAVE POSITIVE EDGE.
    1071 00006b60     4c04          MOVE    A0,A4                ;KEEP NEW EDGE STATE IN A4!
    1072                    
    1073 00006b70     0b80          andi    00400000h,a0
         00006b80 ffbfffff  
    1074 00006ba0     cb47          jrnz    ESC_BUT
    1075 00006bb0     4c80          move    a4,a0
    1076                    
    1077 00006bc0     0b80          ANDI    BUTTONS|START_BITS,A0        ;BUTTON SAYS ACT....IGNORE STICK!
         00006bd0 f9db0f0f  
    1078 00006bf0     cb3c          JRNZ    TEST_BUTS            ;NEW BUTTON......RETURN IT!
    1079 00006c00     b7a2          MOVE    *A13(MEN_ACT),A2,L   ;IS THERE ONE TO WATCH?
         00006c10     0250  
    1080 00006c20     ca28          JRZ     NEW_SCAN             ;NOPE....LOOK FOR NEW STUFF!
    1081 00006c30     0d3f          CALLR   FORM_SWS        ;SEE WHAT THEY LOOK LIKE NOW.
         00006c40     0050  
    1082 00006c50     5040          AND     A2,A0                ;IS IT STILL MADE?
    1083 00006c60     ca1f          JRZ     GS_STICK_OPEN        ;NOPE.......CLEAR OUT ITS STATE.
    1084 00006c70     b5a1          MOVE    *A13(MEN_TYPO),A1,W  ;DECREMENT TYPOMATIC COUNTER
         00006c80     0270  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   26

    1085 00006c90     1421          DEC     A1
    1086 00006ca0     b02d          MOVE    A1,*A13(MEN_TYPO),W  ;AND PUT BACK IN MEMORY
         00006cb0     0270  
    1087 00006cc0     cb38          JRNZ    GS_ZERO              ;NOT TIME YET.....RETURN NOTHING
    1088 00006cd0     b5a1          MOVE    *A13(MEN_HITS),A1,W  ;GET NUMBER OF HITS
         00006ce0     0280  
    1089 00006cf0     1021          INC     A1                   ;AFTER 15 TYPOS.....KILL TILL OPEN!
    1090 00006d00     b02d          MOVE    A1,*A13(MEN_HITS)    ;
         00006d10     0280  
    1091 00006d20     48c1          CMP     A6,A1                ;TOO MANY HITS?
    1092 00006d30     c90e          JRHS    GS_GONE              ;YEP....CALL THIS "STUCK"
    1093 00006d40     b0ad          MOVE    A5,*A13(MEN_TYPO),W  ;TYPOMATIC COUNTER RELOADED.
         00006d50     0270  
    1094                    
    1095 00006d60           RETURN_UP_DOWN:
    1096 00006d60     4c01          MOVE    A0,A1                ;GET THE BIT
    1097 00006d70     4c22          MOVE    A1,A2                ;MAKE A COPY
    1098 00006d80     1820          MOVK    1,A0                 ;ASSUME UP
    1099 00006d90     0b81          ANDI    UP_BITS,A1           ;IS IT AN "UP" BIT
         00006da0 fffffefe  
    1100 00006dc0     cb29          JRNZ    GS_X                 ;YEP...RETURN UP.
    1101 00006dd0     1840          MOVK    2,A0                 ;ASSUME DOWN
    1102 00006de0     0b82          ANDI    DOWN_BITS,A2         ;IS IT A "DOWN" BIT
         00006df0 fffffdfd  
    1103 00006e10     cb24          JRNZ    GS_X                 ;YEP...RETURN "DOWN"
    1104                    
    1105 00006e20           GS_GONE:
    1106 00006e20     5600          CLR     A0                   ;CLEAR OUT CURRENT HIT.
    1107 00006e30     b20d          MOVE    A0,*A13(MEN_ACT),L   ;INDICATE READY FOR NEXT HIT!
         00006e40     0250  
    1108 00006e50     c020          JRUC    GS_X                 ;AND RETURN THIS ZERO (NOTHING!)
    1109 00006e60           GS_STICK_OPEN:
    1110 00006e60                   SLEEPK  6
    1111 00006ea0     c0f7          JRUC    GS_GONE              ;NOW.....CLEAR OUT FOR NEXT HIT.
    1112 00006eb0           NEW_SCAN:
    1113 00006eb0     4c80          MOVE    A4,A0                ;LOOK AT THE NEW EDGES.
    1114                    
    1115 00006ec0     0b80          ANDI    UP_OR_DOWN,A0        ;IS IT UP OR DOWN?
         00006ed0 fffffcfc  
    1116 00006ef0     ca15          JRZ     GS_ZERO              ;NO STICK....RETURN NO ACTION!
    1117                    
    1118 00006f00     0d3f          CALLR   FRST_BIT             ;REDUCE TO ONE BIT.
         00006f10     0017  
    1119 00006f20     b20d          MOVE    A0,*A13(MEN_ACT),L   ;STORE THIS BIT
         00006f30     0250  
    1120                    
    1121 00006f40     09c1          MOVI    TYPO_STALL,A1
         00006f50     0019  
    1122 00006f60     b02d          MOVE    A1,*A13(MEN_TYPO),W  ;TYPOMATIC COUNTER SET FOR LONG STALL.
         00006f70     0270  
    1123                    
    1124 00006f80     5621          CLR     A1
    1125 00006f90     b02d          MOVE    A1,*A13(MEN_HITS),W  ;LOAD UP A BUNCH OF HITS
         00006fa0     0280  
    1126 00006fb0     c0da          JRUC    RETURN_UP_DOWN       ;RETURN CORRECT CODE UP OR DOWN
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   27

    1127 00006fc0           TEST_BUTS:
    1128 00006fc0     0d3f          CALLR   FRST_BIT             ;USE 1 OF THEM.
         00006fd0     000b  
    1129                    
    1130 00006fe0     4c02          MOVE    A0,A2                ;RETURN THE BIT.
    1131                    
    1132 00006ff0     09c0          MOVI    3,A0                 ;RETURN THAT ITS A BUTTON.
         00007000     0003  
    1133 00007010     c004          JRUC    GS_X                 ;STUCK PROCESSING WILL BE AUTOMATIC.
    1134                    
    1135 00007020           ESC_BUT
    1136 00007020     09c0          movi    4,a0
         00007030     0004  
    1137 00007040     c001          jruc    GS_X
    1138                    
    1139 00007050           GS_ZERO:
    1140 00007050     5600          CLR     A0                   ;RETURN NO SWITCH.
    1141 00007060           GS_X:   
    1142 00007060                   RETP
    1143                    
    1144 00007090           FRST_BIT:
    1145 00007090     098f          MMTM    SP,A1,A2
         000070a0     6000  
    1146 000070b0     1821          MOVK    1,A1            ;SHIFT TILL WE FIND IT.
    1147 000070c0           FB1:    
    1148 000070c0     4c02          MOVE    A0,A2
    1149 000070d0     5022          AND     A1,A2
    1150 000070e0     cb02          JRNZ    GOT_IT          ;WE HAVE ON (IN A1)
    1151 000070f0     2421          SLL     1,A1            ;SHIFT IT
    1152 00007100     c0fb          JRUC    FB1
    1153 00007110           GOT_IT: 
    1154 00007110     4c20          MOVE    A1,A0           ;RETURN THE BIT
    1155 00007120     09af          MMFM    SP,A1,A2
         00007130     0006  
    1156 00007140     0960          RETS
    1157                    
    1158 00007150           FORM_SWS:
    1159 00007150     0d3f          callr   fudge_switches
         00007160     0005  
    1160                    
    1161 00007170     b7a1          move    *a13(MEN_STIK),a1,L     ;RETURN PREVIOUS STATE
         00007180     0230  
    1162 00007190     b20d          move    a0,*a13(MEN_STIK),L     ;SAVE "STUCK" STATE.
         000071a0     0230  
    1163 000071b0     0960          rets
    1164                    
    1165 000071c0           fudge_switches
    1166                    
    1167 000071c0     07a0          move    @_coin_addr,a0,L
         000071d0 00000000! 
    1168 000071f0     8400          move    *a0,a0,W
    1169 00007200     07a1          move    @_switch_addr,a1,L
         00007210 00000000! 
    1170 00007230     8421          move    *a1,a1,W
    1171 00007240     2600          sll     16,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   28

    1172 00007250     2601          sll     16,a1           ;mask off top 16
    1173 00007260     2e01          srl     16,a1
    1174 00007270     5420          or      a1,a0
    1175 00007280     07a1          move    @_switch_map_mode,a1,L  ; Are we mapping switches?
         00007290 000000e0- 
    1176 000072b0     ca66          jrz     _switch_mapping_done    ; Nope - goto done
    1177 000072c0     0b41          cmpi    2,a1
         000072d0     fffd  
    1178 000072e0     c727          jrgt    _no_adjustment_mapping
    1179 000072f0           _no_menu_mapping
    1180 000072f0     07a1          move    @_coin_addr,a1,L
         00007300 00000000! 
    1181 00007320     8421          move    *a1,a1,W
    1182 00007330     2461          sll     3,a1
    1183 00007340     2e21          srl     15,a1
    1184 00007350     0ba1          ori     0fffffffeh,a1
         00007360 fffffffe  
    1185 00007380     5020          and     a1,a0
    1186 00007390     07a1          move    @_coin_addr,a1,L
         000073a0 00000000! 
    1187 000073c0     8421          move    *a1,a1,W
    1188 000073d0     2481          sll     4,a1
    1189 000073e0     2e41          srl     14,a1
    1190 000073f0     0ba1          ori     0fffffffdh,a1
         00007400 fffffffd  
    1191 00007420     5020          and     a1,a0
    1192 00007430     07a1          move    @_coin_addr,a1,L
         00007440 00000000! 
    1193 00007460     8421          move    *a1,a1,W
    1194 00007470     0ba1          ori     0ffffffefh,a1
         00007480 ffffffef  
    1195 000074a0     5020          and     a1,a0
    1196 000074b0     07a1          move    @_switch_map_mode,a1,L
         000074c0 000000e0- 
    1197 000074e0     0b41          cmpi    1,a1
         000074f0     fffe  
    1198 00007500     ca41          jrz     _switch_mapping_done
    1199 00007510     09e1          movi    00400000h,a1
         00007520 00400000  
    1200 00007540     5420          or      a1,a0                   ; No Service button in adjust mode
    1201 00007550     c03c          jruc    _switch_mapping_done    ; All done
    1202 00007560           _no_adjustment_mapping
    1203 00007560     0b41          cmpi    3,a1                    ; Are we in any button mapping mode
         00007570     fffc  
    1204 00007580     cb39          jrnz    _no_any_mapping         ; Nope - go check other modes
    1205 00007590     07a1          move    @_coin_addr,a1,L
         000075a0 00000000! 
    1206 000075c0     8421          move    *a1,a1,W
    1207 000075d0     2461          sll     3,a1                    ; Map Vol up/down onto action button
    1208 000075e0     2ee1          srl     9,a1
    1209 000075f0     0ba1          ori     0ffffff9fh,a1           ; Buttons B and C
         00007600 ffffff9f  
    1210 00007620     5020          and     a1,a0
    1211 00007630     07a1          move    @_coin_addr,a1,L
         00007640 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   29

    1212 00007660     8421          move    *a1,a1,W
    1213 00007670     0ba1          ori     0ffffffefh,a1           ; Button A
         00007680 ffffffef  
    1214 000076a0     5020          and     a1,a0
    1215 000076b0     07a1          move    @_coin_addr,a1,L
         000076c0 00000000! 
    1216 000076e0     8421          move    *a1,a1,W
    1217 000076f0     2521          sll     9,a1                    
    1218 00007700     2f01          srl     8,a1
    1219 00007710     0ba1          ori     0ffffff7fh,a1           ; Button D
         00007720 ffffff7f  
    1220 00007740     5020          and     a1,a0
    1221 00007750     07a1          move    @_coin_addr,a1,L
         00007760 00000000! 
    1222 00007780     8421          move    *a1,a1,W
    1223 00007790     25a1          sll     13,a1
    1224 000077a0     2fa1          srl     3,a1
    1225 000077b0     0ba1          ori     0ffffefffh,a1
         000077c0 ffffefff  
    1226 000077e0     5020          and     a1,a0
    1227 000077f0     07a1          move    @_coin_addr,a1,L
         00007800 00000000! 
    1228 00007820     8421          move    *a1,a1,W
    1229 00007830     2541          sll     10,a1
    1230 00007840     2fc1          srl     2,a1
    1231 00007850     0ba1          ori     0ffffdfffh,a1
         00007860 ffffdfff  
    1232 00007880     5020          and     a1,a0
    1233 00007890     07a1          move    @_coin_addr,a1,L
         000078a0 00000000! 
    1234 000078c0     8421          move    *a1,a1,W
    1235 000078d0     24a1          sll     5,a1
    1236 000078e0     0ba1          ori     0ffff3fffh,a1
         000078f0 ffff3fff  
    1237 00007910     5020          and     a1,a0
    1238 00007920           _no_any_mapping
    1239 00007920           _switch_mapping_done
    1240                    
    1241 00007920     03e0          not     a0                      ;COMPLEMENT
    1242 00007930     07a1          move    @_switch2_addr,a1,L
         00007940 00000000! 
    1243 00007960     8421          move    *a1,a1
    1244 00007970     0ba1          ori     0FFFF0000h,a1
         00007980 ffff0000  
    1245 000079a0     03e1          not     a1
    1246                    
    1247                    
    1248 000079b0     4c2e          move    a1,a14
    1249 000079c0     0b8e          andi    0011b,a14
         000079d0 fffffffc  
    1250 000079f0     24ce          sll     6,a14
    1251 00007a00     55c1          or      a14,a1
    1252 00007a10     5420          or      a1,a0
    1253                    
    1254 00007a20     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   30

    1255                    
    1256                    
    1257 00007a30           fudge_switches_diag
    1258 00007a30     07a0          move    @_switch_addr,a0,L
         00007a40 00000000! 
    1259 00007a60     8400          move    *a0,a0,W
    1260 00007a70     07a1          move    @_coin_addr,a1,L
         00007a80 00000000! 
    1261 00007aa0     8421          move    *a1,a1,W
    1262 00007ab0     2601          sll     16,a1
    1263 00007ac0     5420          or      a1,a0
    1264 00007ad0     03e0          not     a0                      ;COMPLEMENT
    1265                    
    1266 00007ae0     07a1          move    @_switch2_addr,a1,L
         00007af0 00000000! 
    1267 00007b10     8421          move    *a1,a1
    1268 00007b20     03e1          not     a1
    1269                    
    1270                    
    1271 00007b30     4c2e          move    a1,a14
    1272 00007b40     0b8e          andi    0011b,a14
         00007b50 fffffffc  
    1273 00007b70     24ce          sll     6,a14
    1274 00007b80     55c1          or      a14,a1
    1275                    
    1276 00007b90     5420          or      a1,a0
    1277                    
    1278 00007ba0                   FRET    B6
    1279                    
    1280 00007bb0           fudge_switches2
    1281                    
    1282 00007bb0     0d3f          callr   fudge_switches
         00007bc0     ff5f  
    1283 00007bd0     07a1          move    @fswitches_cur,a1,L
         00007be0 00000080- 
    1284 00007c00     0781          move    a1,@fswitches_last,L
         00007c10 000000a0- 
    1285 00007c30     0780          move    a0,@fswitches_cur,L
         00007c40 00000080- 
    1286 00007c60     5601          xor     a0,a1                   ;bits that have changed
    1287 00007c70     5001          and     a0,a1                   ;down transitions only
    1288 00007c80     0781          move    a1,@fswitches_down,L
         00007c90 000000c0- 
    1289                    
    1290 00007cb0     0960          rets
    1291                    
    1292 00007cc0           GET_MENU_DATA:
    1293 00007cc0     098f          MMTM    SP,A0                ;DON'T ALTER A0
         00007cd0     8000  
    1294                    
    1295 00007ce0     0d3f          CALLR   PM_ENTRY     ;POINT A1 AT ENTRY
         00007cf0     0009  
    1296                    
    1297 00007d00     b622          MOVE    *A1(MENU_TEXT_PTR),A2,L   ;FETCH THE TEXT POINTER
         00007d10     0000  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   31

    1298 00007d20     b623          MOVE    *A1(MENU_ROUTINE),A3,L    ;FETCH THE ROUTINE
         00007d30     0020  
    1299 00007d40     b5a1          MOVE    *A13(MEN_CUR),A1,W        ;RETURN CURRENT ENTRY IN A1
         00007d50     0210  
    1300 00007d60     09af          MMFM    SP,A0                ;DON'T ALTER A0
         00007d70     0001  
    1301 00007d80     0960          RETS
    1302                    
    1303 00007d90           PM_ENTRY:
    1304 00007d90     098f          MMTM    SP,A0
         00007da0     8000  
    1305 00007db0     1420          DEC     A0                   ;INDEX FROM ZERO
    1306 00007dc0     09c1          MOVI    MENU_ENTRY_SIZE,A1   ;TIMES SIZE PER ENTRY
         00007dd0     0060  
    1307 00007de0     5e01          MPYU    A0,A1                ;A1 CONTAINS OFFSET INTO TABLE
    1308                    
    1309 00007df0     b7a0          MOVE    *A13(MEN_TPTR),A0,L  ;GET THE BASE OF THE MENU TEXT ENTRIES
         00007e00     01e0  
    1310 00007e10     4001          ADD     A0,A1                ;ADD TO OFFSET
    1311 00007e20     09af          MMFM    SP,A0
         00007e30     0001  
    1312 00007e40     0960          RETS
    1313                    
    1314 00007e50           PLOT_HELP:
    1315 00007e50     b5a0          MOVE    *A13(MEN_CUR),A0,W        ;GET CURRENT ENTRY
         00007e60     0210  
    1316 00007e70     0d3f          CALLR   PM_ENTRY          ;A1 POINTS AT GROUP
         00007e80     fff0  
    1317 00007e90     b628          MOVE    *A1(MENU_HELP),A8,L       ;GET HELP TABLE
         00007ea0     0040  
    1318 00007eb0     0b48          CMPI    NO_HELP,A8                ;NOT A "HELP" SITUATION?
         00007ec0     fffe  
    1319 00007ed0     ca07          JRZ     NO_HELP_FOR_THIS_ONE
    1320 00007ee0     0b48          CMPI    ADJ_HELP,A8               ;ADJUSTMENT HELP REQUESTED?
         00007ef0     fffd  
    1321 00007f00     ca80          JAEQ    DO_ADJH                   ;THEN DO IT IN ADJ MODULE!
         00007f10 00000000! 
    1322 00007f30     0d3f          CALLR   DO_HELP_MENU
         00007f40     00cc  
    1323 00007f50           NO_HELP_FOR_THIS_ONE:
    1324 00007f50     0960           RETS
    1325                    
    1326 00007f60           GET_ENTRY_Y:
    1327 00007f60     098f          MMTM    SP,A0,A1
         00007f70     c000  
    1328 00007f80     b5a5          MOVE    *A13(MEN_ULY),A5,W
         00007f90     0160  
    1329 00007fa0     b5a1          MOVE    *A13(MEN_DY),A1,W
         00007fb0     0170  
    1330 00007fc0     1420          DEC     A0
    1331 00007fd0     5e01          MPYU    A0,A1                ;A1 HAS OFFSET PER ENTRY
    1332 00007fe0     4025          ADD     A1,A5
    1333 00007ff0     09af          MMFM    SP,A0,A1
         00008000     0003  
    1334 00008010     0960          RETS
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   32

    1335                    
    1336 00008020           MENU_BORDER:
    1337 00008020     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9
         00008030     ffc0  
    1338 00008040     0d3f          CALLR   STUFF_MENU_PROCESS   ;MOVE DATA INTO PDATA AREA
         00008050     fdf7  
    1339 00008060     0d3f          CALLR   MENU_UL_A4_A5             ;GET UPPER LEFT COORDINATES
         00008070     0017  
    1340 00008080     2605          SLL     16,A5
    1341 00008090     40a4          ADD     A5,A4                     ;A4 POINTS TO UPPER LEFT.
    1342 000080a0     0d3f          CALLR   MENU_LR_A6_A5
         000080b0     0024  
    1343 000080c0     2605          SLL     16,A5                     ;SHIFT A5 DOWN
    1344 000080d0     40c5          ADD     A6,A5                     ;A5 POINTS AT LOWER RIGHT
    1345                    
    1346 000080e0     b5a9          MOVE    *A13(MEN_COLR),A9,W       ;GET MENU TEXT COLOR
         000080f0     0180  
    1347 00008100     0d3f          CALLR   STD_BORD
         00008110     00a4  
    1348                    
    1349 00008120     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9
         00008130     03ff  
    1350 00008140     0960          RETS
    1351                    
    1352 00008150           MCSETUP:
    1353 00008150     b5a0          MOVE    *A13(MEN_ULX),A0,W        ;UPPER LEFT X (ACTUALLY CENTER)
         00008160     0150  
    1354 00008170     b5a1          MOVE    *A13(MEN_BWID),A1,W       ;BAR_WIDTH
         00008180     01c0  
    1355 00008190     2fe1          SRL     1,A1                      ;ALL CALCS USE BAR_WIDTH/2
    1356 000081a0     b5a2          MOVE    *A13(MEN_ULY),A2,W        ;UPPER LEFT Y
         000081b0     0160  
    1357 000081c0     b5a3          MOVE    *A13(MEN_BDY),A3,W        ;DELTA Y (NEGATIVE)
         000081d0     01a0  
    1358 000081e0     0960          RETS
    1359                    
    1360                    
    1361 000081f0           MENU_UL_A4_A5:
    1362 000081f0     098f          MMTM    SP,A0,A1,A2,A3
         00008200     f000  
    1363 00008210     0d3f          CALLR   MCSETUP                   ;STUFF THE REGGIES
         00008220     fff2  
    1364 00008230     4c04          MOVE    A0,A4                     ;FORM ULX
    1365 00008240     4424          SUB     A1,A4
    1366 00008250     0be4          SUBI    C_KLUDGE,A4          ;A4 HAS UPPER LEFT X
         00008260     fffe  
    1367                    
    1368 00008270     4c45          MOVE    A2,A5
    1369 00008280     4065          ADD     A3,A5                     ;A5 HAS UPPER LEFT Y
    1370                    
    1371 00008290     0be4          SUBI    MB_XWID+GAP,A4            ;NOW WE POINT AT UPPER LEFT FOR FRAME
         000082a0     fffa  
    1372 000082b0     0be5          SUBI    MB_YWID+GAP,A5
         000082c0     fffa  
    1373 000082d0     09af          MMFM    SP,A0,A1,A2,A3
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   33

         000082e0     000f  
    1374 000082f0     0960          RETS
    1375                    
    1376 00008300           MENU_LR_A6_A5:
    1377 00008300     098f          MMTM    SP,A0,A1,A2,A3
         00008310     f000  
    1378 00008320     0d3f          CALLR   MCSETUP                   ;STUFF THE REGGIES
         00008330     ffe1  
    1379                    
    1380 00008340     4c06          MOVE    A0,A6                     ;LOWER RIGHT X
    1381 00008350     4026          ADD     A1,A6
    1382 00008360     0be6          SUBI    C_KLUDGE,A6          ;THIS IS THE X
         00008370     fffe  
    1383                    
    1384 00008380     b5a0          MOVE    *A13(MEN_ENTS),A0,W       ;THIS IS LAST ENTRY
         00008390     0200  
    1385 000083a0     0d3f          CALLR   GET_ENTRY_Y               ;A5 HAS THE Y FOR THE LAST ENTRY
         000083b0     ffba  
    1386 000083c0     4065          ADD     A3,A5                     ;A5 NOW HAS TOP OF LAST BOX
    1387 000083d0     b5a7          MOVE    *A13(MEN_BAR),A7,W        ;HEIGHT OF BAR
         000083e0     0190  
    1388 000083f0     40e5          ADD     A7,A5                     ;A5 NOW HAS LOWER RIGHT Y
    1389                    
    1390 00008400     0b05          ADDI    MB_YWID+GAP,A5
         00008410     0005  
    1391 00008420     0b06          ADDI    MB_XWID+GAP,A6            ;THIS IS END OF BORDER
         00008430     0005  
    1392 00008440     09af          MMFM    SP,A0,A1,A2,A3
         00008450     000f  
    1393 00008460     0960          RETS
    1394                    
    1395                    
    1396 00008470           F_TITLE:
    1397 00008470     098f          MMTM    SP,A4,A5,A0
         00008480     8c00  
    1398 00008490     4c04          MOVE    A0,A4           ;COPY Y
    1399 000084a0     0be4          SUBI    12,A4
         000084b0     fff3  
    1400 000084c0     2604          SLL     16,A4
    1401 000084d0     0b04          ADDI    TIT_ULX,A4      ;UPPER LEFT SET
         000084e0     0005  
    1402                    
    1403 000084f0     4c05          MOVE    A0,A5           ;LOWER RIGHT
    1404 00008500     0b05          ADDI    27,A5
         00008510     001b  
    1405 00008520     2605          SLL     16,A5
    1406 00008530     0b05          ADDI    TIT_LRX,A5      ;LOWER RIGHT SET
         00008540     0185  
    1407                    
    1408 00008550     0d3f          CALLR   STD_BORD
         00008560     005f  
    1409 00008570     09af          MMFM    SP,A4,A5,A0
         00008580     0031  
    1410 00008590     0960          RETS
    1411                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   34

    1412              e0e0  FIRST_BORDER_COLOR       EQU     0E0E0H
    1413              efef  LAST_BORDER_COLOR        EQU     0EFEFH
    1414 000085a0           G_BORDER:
    1415 000085a0     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6
         000085b0     fe00  
    1416 000085c0     09e0          MOVI    10001H,A0                 ;1 BY 1 DIMENSION
         000085d0 00010001  
    1417                    
    1418 000085f0     09e9          MOVI    LAST_BORDER_COLOR,A9      ;USE LAST ONE 1ST
         00008600 0000efef  
    1419 00008620           NEXT_RING:
    1420 00008620     0d3f          CALLR   DOBORDER                  ;DO THIS RING
         00008630     0012  
    1421                    
    1422 00008640     09e1          MOVI    10001H,A1                  ;THIS IS 1 UNIT IN X AND Y
         00008650 00010001  
    1423 00008670     e024          ADDXY   A1,A4
    1424 00008680     e225          SUBXY   A1,A5
    1425                    
    1426 00008690     0be9          SUBI    101H,A9
         000086a0     fefe  
    1427 000086b0     0b69          CMPI    FIRST_BORDER_COLOR,A9
         000086c0 ffff1f1f  
    1428 000086e0     c903          JRHS    COLOK
    1429 000086f0     09e9          MOVI    LAST_BORDER_COLOR,A9
         00008700 0000efef  
    1430                    
    1431 00008720           COLOK:  
    1432 00008720     3e26          DSJS    A6,NEXT_RING
    1433 00008730     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6
         00008740     007f  
    1434 00008750     0960          RETS
    1435                    
    1436 00008760           DOBORDER:
    1437 00008760     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9
         00008770     ffc0  
    1438 00008780     4d21          MOVE    A9,A1                     ;GET COLOR
    1439 00008790     2601          SLL     16,A1                     ;COLOR ON TOP..PALETTE 0
    1440 000087a0     4c02          MOVE    A0,A2                     ;SEPARATE DELTA
    1441 000087b0     0b80          ANDI    SX_MASK,A0
         000087c0 ffff0000  
    1442 000087e0     0b82          ANDI    SY_MASK,A2
         000087f0 0000ffff  
    1443                    
    1444 00008810     4c86          MOVE    A4,A6                     ;UPPER LEFTS HERE
    1445 00008820     4c87          MOVE    A4,A7
    1446                    
    1447 00008830     4ca8          MOVE    A5,A8                     ;LOWER RIGHTS HERE
    1448 00008840     4ca9          MOVE    A5,A9
    1449                    
    1450 00008850     0b86          ANDI    SX_MASK,A6                 ;LEFT X
         00008860 ffff0000  
    1451 00008880     0b88          ANDI    SX_MASK,A8                 ;RIGHT X
         00008890 ffff0000  
    1452                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   35

    1453 000088b0     0b87          ANDI    SY_MASK,A7                 ;TOP Y
         000088c0 0000ffff  
    1454 000088e0     0b89          ANDI    SY_MASK,A9                 ;BOTTOM Y
         000088f0 0000ffff  
    1455                    
    1456 00008910     4c83          MOVE    A4,A3
    1457                    
    1458 00008920     ed04          MOVX    A8,A4
    1459 00008930     eee4          MOVY    A7,A4
    1460 00008940     e044          ADDXY   A2,A4                     ;ADD THE DELTA
    1461                    
    1462 00008950     0d3f          CALLR   DO_A_LINE                 ;DO THIS LINE
         00008960     0016  
    1463 00008970     ed03          MOVX    A8,A3
    1464 00008980     e203          SUBXY   A0,A3
    1465 00008990     eee3          MOVY    A7,A3
    1466 000089a0     ed04          MOVX    A8,A4
    1467 000089b0     ef24          MOVY    A9,A4
    1468                    
    1469 000089c0     0d3f          CALLR   DO_A_LINE
         000089d0     000f  
    1470 000089e0     ecc3          MOVX    A6,A3
    1471 000089f0     ef23          MOVY    A9,A3
    1472 00008a00     e243          SUBXY   A2,A3
    1473                    
    1474 00008a10     0d3f          CALLR   DO_A_LINE
         00008a20     000a  
    1475 00008a30     ecc3          MOVX    A6,A3
    1476 00008a40     eee3          MOVY    A7,A3
    1477                    
    1478 00008a50     ecc4          MOVX    A6,A4
    1479 00008a60     e004          ADDXY   A0,A4
    1480 00008a70     ef24          MOVY    A9,A4
    1481                    
    1482 00008a80     0d3f          CALLR   DO_A_LINE
         00008a90     0003  
    1483                    
    1484 00008aa0     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9
         00008ab0     03ff  
    1485 00008ac0     0960          RETS
    1486                    
    1487 00008ad0           DO_A_LINE:
    1488 00008ad0     098f          MMTM    SP,A4
         00008ae0     0800  
    1489 00008af0     e264          SUBXY   A3,A4           ;FORM DISTANCE
    1490 00008b00     0d5f          CALLA   FILLAREA        ;AND DO THE FILL
         00008b10 00000000! 
    1491 00008b30     09af          MMFM    SP,A4
         00008b40     0010  
    1492 00008b50     0960          RETS
    1493                    
    1494 00008b60           STD_BORD:
    1495 00008b60     098f          MMTM    SP,A0
         00008b70     8000  
    1496 00008b80     09e0          MOVI    BORDER_SIZE,A0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   36

         00008b90 00030003  
    1497 00008bb0     0d5f          CALLA   DOBORDER
         00008bc0 00008760' 
    1498 00008be0     09af          MMFM    SP,A0
         00008bf0     0001  
    1499 00008c00     0960          RETS
    1500 00008c10           DO_HELP_MENU:
    1501 00008c10     0d3f          CALLR   BLNKHELP
         00008c20     0015  
    1502                    
    1503 00008c30     4d08          MOVE    A8,A8                ;CHECK IF HELP MENU EXISTS.
    1504 00008c40     ca12          JRZ     DHMX                 ;NOPE JUST CLEARING WAS OUR JOB.
    1505                    
    1506 00008c50     b5a0          MOVE    *A13(MEN_CUR),A0,W   ;THIS IS CURRENT ENTRY
         00008c60     0210  
    1507 00008c70     4c0b          MOVE    A0,A11               ;PASS ENTRY NUMBER IN A11
    1508 00008c80     0d3f          CALLR   GET_ENTRY_Y          ;A5 HAS THE Y FOR THE CURRENT ENTRY
         00008c90     ff2c  
    1509 00008ca0     b5aa          MOVE    *A13(MEN_BDY),A10,W  ;THIS IS NEGATIVE TO GIVE US BOX TOP
         00008cb0     01a0  
    1510 00008cc0     40aa          ADD     A5,A10               ;NOW WE HAVE BOX TOP
    1511                    
    1512 00008cd0     b5a5          MOVE    *A13(MEN_BAR),A5,W   ;GET BAR HEIGHT
         00008ce0     0190  
    1513 00008cf0     2fe5          SRL     1,A5                 ;FIND CENTER OF BAR
    1514 00008d00     40aa          ADD     A5,A10               ;NOW WE'RE AT BAR CENTER.
    1515                    
    1516 00008d10     09e7          MOVI    H_SLAVE,A7        ;FORK OFF SO IT CAN USE PDATA!
         00008d20 00008ed0' 
    1517 00008d40     0d5f          CALLA   P_FORK               ;START UP ANOTHER W/ SAME ID TO FLASH!
         00008d50 00000000! 
    1518 00008d70     0960  DHMX    RETS
    1519                    
    1520 00008d80           BLNKHELP:
    1521 00008d80     098f          MMTM    SP,A3,A4,A5,A6
         00008d90     1e00  
    1522 00008da0     0d3f          CALLR   MENU_LR_A6_A5        ;GET RIGHT X OF MAIN MENU IN A6
         00008db0     ff54  
    1523 00008dc0     4cc9          MOVE    A6,A9                ;PASS TO HELP MENU SLAVE
    1524 00008dd0     4cc3          MOVE    A6,A3                ;UPPER LEFT X OF REGION TO BLANK OUT
    1525 00008de0     0b23          ADDI    INST_ULY*10000H,A3   ;THIS IS UPPER LEFT OF BLOCK
         00008df0 002d0000  
    1526                    
    1527 00008e10     09e4          MOVI    TIT_LRX+(10000H*400),A4 ;COORDINATE OF LOWER RIGHT OF HELP AREA
         00008e20 01900185  
    1528 00008e40     e264          SUBXY   A3,A4                   ;THIS IS SIZE OF REGION TO BLANK
    1529 00008e50     0d5f          CALLA   BLNKAREA                ;BLANK OUT THE HELP AREA
         00008e60 00000000! 
    1530 00008e80     0b09          ADDI    BOX_XGAP,A9             ;RETURN X FOR HELP MENUS
         00008e90     0002  
    1531 00008ea0     09af          MMFM    SP,A3,A4,A5,A6
         00008eb0     0078  
    1532 00008ec0     0960          RETS
    1533                    
    1534              0000  HM_JUST          EQU     0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   37

    1535              0010  HM_COLOR         EQU     HM_JUST+WORD_SIZE
    1536              0020  HM_ENTS          EQU     HM_COLOR+WORD_SIZE
    1537              0030  HM_DATA          EQU     HM_ENTS+WORD_SIZE      ;ENTRY POINTERS
    1538                    
    1539              0100  HS_ROUT          EQU     PDATA             ;LONG-TEXT ROUTINE
    1540              0120  HS_X             EQU     HS_ROUT+LONG_SIZE ;WORD-X FOR TEXT ROUTINE
    1541              0130  HS_Y             EQU     HS_X+WORD_SIZE    ;WORD-CURRENT Y
    1542              0140  HS_ENTS          EQU     HS_Y+WORD_SIZE    ;WORD-ENTRIES LEFT TO DO
    1543              0150  HS_COLOR         EQU     HS_ENTS+WORD_SIZE ;WORD-COLOR OF MENU
    1544              0160  HS_PTR           EQU     HS_COLOR+WORD_SIZE ;LONG-CURRENT TEXT POINTER
    1545                    
    1546 00008ed0           H_SLAVE:
    1547 00008ed0                   SLEEPK  1
    1548                    
    1549 00008f10     4d21          MOVE    A9,A1                     ;PUT THIS X VALUE IN A1
    1550                    
    1551 00008f20     b500          MOVE    *A8(HM_JUST),A0,W         ;0 = CENTER  1=LEFT
         00008f30     0000  
    1552 00008f40     ca06          JRZ     HS_CENT                   ;CENTER....SETUP X ACCORDINGLY
    1553 00008f50     09e0          MOVI    STRLNRM,A0                ;LEFT JUSTIFY ROUTIN
         00008f60 00000000! 
    1554 00008f80     0b01          ADDI    MB_XWID+HELP_X_MARGIN,A1  ;ADD MARGIN TO FORM X FOR TEXT
         00008f90     000d  
    1555 00008fa0     c006          JRUC    CENTER_JOIN               ;CONTINUE
    1556                    
    1557 00008fb0           HS_CENT:
    1558 00008fb0     09e0          MOVI    STRCNRM,A0                ;USE CENTERING ROUTINE
         00008fc0 00000000! 
    1559 00008fe0     0b01          ADDI    TIT_LRX,A1
         00008ff0     0185  
    1560 00009000     2fe1          SRL     1,A1                      ;THIS IS CENTER X
    1561                    
    1562 00009010           CENTER_JOIN:
    1563 00009010     b02d          MOVE    A1,*A13(HS_X),W           ;STORE X
         00009020     0120  
    1564 00009030     b20d          MOVE    A0,*A13(HS_ROUT),L        ;STORE ROUTINE
         00009040     0100  
    1565                    
    1566 00009050     b501          MOVE    *A8(HM_ENTS),A1,W         ;GET NUMBER OF ENTRIES
         00009060     0020  
    1567 00009070     b02d          MOVE    A1,*A13(HS_ENTS),W        ;COUNT IT DOWN IN P-AREA
         00009080     0140  
    1568                    
    1569 00009090     b500          MOVE    *A8(HM_COLOR),A0,W        ;GET COLOR
         000090a0     0010  
    1570 000090b0     b00d          MOVE    A0,*A13(HS_COLOR),W       ;STASH IT
         000090c0     0150  
    1571                    
    1572 000090d0     0b08          ADDI    HM_DATA,A8                ;POINT AT 1ST ENTRY
         000090e0     0030  
    1573 000090f0     b30d          MOVE    A8,*A13(HS_PTR),L         ;NOW WE'RE READY.
         00009100     0160  
    1574 00009110     09c5          MOVI    HELP_DY,A5                ;DISTANCE PER ENTRY
         00009120     000c  
    1575 00009130     5e25          MPYU    A1,A5                     ;DISTANCE FOR ALL ENTRIES
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   38

    1576 00009140     0b05          ADDI    HELP_Y_MARGIN+(MB_YWID*2)+HELP_YLO_MARGIN,A5
         00009150     0012  
    1577 00009160     0d3f          CALLR   TOP_IN_A10
         00009170     003a  
    1578 00009180     4d44          MOVE    A10,A4                    ;MOVE Y OVER
    1579 00009190     2604          SLL     16,A4                     ;MAKE ROOM FOR X
    1580 000091a0     4124          ADD     A9,A4                     ;PUT IN THE X...THIS IS UPPER LEFT!
    1581                    
    1582 000091b0     4145          ADD     A10,A5                    ;ADD BASE TO OFFSET
    1583 000091c0     2605          SLL     16,A5                     ;PUT IN Y POSITION
    1584 000091d0     0b05          ADDI    TIT_LRX,A5                ;ADD IN THE X FOR THE CORNER
         000091e0     0185  
    1585 000091f0     0b0a          ADDI    MB_YWID+HELP_Y_MARGIN,A10  ;Y OF 1ST ENTRY
         00009200     000b  
    1586 00009210     b14d          MOVE    A10,*A13(HS_Y),W           ;PUT AWAY
         00009220     0130  
    1587                    
    1588 00009230     b5a9          MOVE    *A13(HS_COLOR),A9,W       ;GET THE COLOR FOR DOBORDER
         00009240     0150  
    1589                    
    1590 00009250     0d3f          CALLR   STD_BORD
         00009260     ff8f  
    1591 00009270           NEXT_HELP:
    1592 00009270     b7a2          MOVE    *A13(HS_PTR),A2,L         ;GET OUR CURRENT POINTER
         00009280     0160  
    1593 00009290     9648          MOVE    *A2+,A8,L                 ;GET THE CURRENT MESSAGE POINTER
    1594 000092a0     b24d          MOVE    A2,*A13(HS_PTR),L         ;AND PUT POINTER BACK
         000092b0     0160  
    1595                    
    1596 000092c0     5600          CLR     A0
    1597 000092d0     b7a1          MOVE    *A13(HS_ROUT),A1,L        ;ROUTINE IN A1
         000092e0     0100  
    1598 000092f0     b5a6          MOVE    *A13(HS_COLOR),A6,W       ;STUFF COLOR
         00009300     0150  
    1599                    
    1600 00009310     b5a9          MOVE    *A13(HS_Y),A9,W           ;GET Y
         00009320     0130  
    1601 00009330     2609          SLL     16,A9                     ;SHIFT INTO PLACE
    1602 00009340     b5aa          MOVE    *A13(HS_X),A10,W
         00009350     0120  
    1603 00009360     4149          ADD     A10,A9                    ;A9 IS NOW POINTING AT SCREEN
    1604                    
    1605 00009370     09ca          MOVI    SPACING07,A10             ;SPACING
         00009380     0001  
    1606 00009390     09eb          MOVI    RD7FONT,A11               ;FONT IS BABY FONT
         000093a0 00000000! 
    1607 000093c0                   JSRP    LM_FINIS                  ;PRINT IT OUT!
    1608                    
    1609 00009430     b5a9          MOVE    *A13(HS_Y),A9,W           ;GET THE Y
         00009440     0130  
    1610 00009450     0b09          ADDI    HELP_DY,A9                ;KICK IT
         00009460     000c  
    1611 00009470     b12d          MOVE    A9,*A13(HS_Y),W           ;PUT IT BACK
         00009480     0130  
    1612                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   39

    1613 00009490     b5a0          MOVE    *A13(HS_ENTS),A0,W        ;ENTRY COUNT
         000094a0     0140  
    1614 000094b0     1420          DEC     A0
    1615 000094c0     b00d          MOVE    A0,*A13(HS_ENTS),W        ;PUT IT BACK
         000094d0     0140  
    1616 000094e0     cbd8          JRNZ    NEXT_HELP
    1617                    
    1618 000094f0     c080          JAUC    SUCIDE                    ;OUR WORK IS DONE!
         00009500 00000000! 
    1619                    
    1620 00009520           TOP_IN_A10:
    1621 00009520     098f          MMTM    SP,A5
         00009530     0400  
    1622 00009540     0b6a          CMPI    0FFFFH,A10                ;IS THE TOP HALF ZERO?
         00009550 ffff0000  
    1623 00009570     c302          JRHI    TOP_IS_TOP                ;TOP IS SET..RETURN
    1624 00009580     2fe5          SRL     1,A5                      ;TOP OF BOX IS HALF UP FROM MAIN MENU BAR CENTER
    1625 00009590     44aa          SUB     A5,A10                    ;NOW A10 HAS Y BASE OF BOX
    1626 000095a0           TOP_IS_TOP:
    1627 000095a0     09af          MMFM    SP,A5
         000095b0     0020  
    1628 000095c0     0960          RETS
    1629                    
    1630 000095d0           AREUSURE:
    1631 000095d0     0d5f          CALLA   CLR_SCRN             ;BLANK IT ALL OUT!
         000095e0 00000000! 
    1632 00009600     b32d          MOVE    A9,*A13(PDATA),L     ;SAVE ROUTINE
         00009610     0100  
    1633 00009620     a34c          MOVE    A10,-*A12,L          ;AND CONFIRM MESSAGE
    1634                    
    1635 00009630     0d3f          CALLR   SURE_BOX
         00009640     0060  
    1636                    
    1637 00009650     4d02          MOVE    A8,A2                ;PUT MESSAGE TEXT IN SAFE PLACE
    1638 00009660     09e8          MOVI    MESS_SURE,A8         ;SETUP FOR TITLE
         00009670 0000a7a0' 
    1639 00009690     0d5f          CALLA   LM_SETUP             ;STUFF REGGIES
         000096a0 00000000! 
    1640 000096c0     4c48          MOVE    A2,A8                ;GET STRING IN THERE
    1641 000096d0                   JSRP    LM_FINIS             ;AND PRINT IT
    1642                    
    1643 00009740     09e8          MOVI    M_SURE,A8            ;NOW THE "ARE YOU SURE" PART
         00009750 0000a840' 
    1644 00009770                   JSRP    L_MESS               ;PUT IT UP.
    1645                    
    1646 000097e0     09e8          MOVI    MEN_YN,A8            ;PUT UP THE "YES/NO" SELECTOR.
         000097f0 00000000! 
    1647 00009810     09c9          MOVI    2,A9                 ;CURSOR ON 2ND ENTRY (NO)
         00009820     0002  
    1648                    
    1649 00009830                   JSRP    B_MENU               ;AND GET A RESPONSE.
    1650 000098a0     0b48          CMPI    1,A8                 ;WAS IT YES?
         000098b0     fffe  
    1651 000098c0     cb1f          JRNZ    SURE_X               ;NOPE....GET OUT
    1652                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   40

    1653 000098d0     0d5f          CALLA   CLR_SCRN             ;CLEAR THE SCREEN FIRST, SO ROUTINE CAN PLOT!
         000098e0 00000000! 
    1654                    
    1655 00009900     b7a0          MOVE    *A13(PDATA),A0,L     ;GET THE ROUTINE TO CALL
         00009910     0100  
    1656 00009920     09e7          MOVI    SURE_RET,A7
         00009930 00009970' 
    1657 00009950     a2ec          MOVE    A7,-*A12,L           ;PUSH RETURN ADDRESS
    1658 00009960     0160          JUMP    A0                   ;AND "JSRP" THE ROUTINE
    1659                    
    1660 00009970           SURE_RET:
    1661 00009970     0d3f          CALLR   SURE_BOX             ;BOX IT!
         00009980     002c  
    1662 00009990     9788          MOVE    *A12+,A8,L
    1663 000099a0                   JSRP    SUR_MESS             ;PRINT THE MESSAGE
    1664                    
    1665 00009a10                   JSRP    ANY_BUT              ;NOW RETRIEVE ANY BUTTON THEN RETURN
    1666                    
    1667 00009a80     5600          CLR     A0                   ;RETURN SUCCESS
    1668 00009a90                   RETP
    1669                    
    1670 00009ac0           SURE_X: 
    1671 00009ac0     0b0c          ADDI    LONG_SIZE,A12        ;POP MESSAGE
         00009ad0     0020  
    1672 00009ae0     09c0          MOVI    2,A0                 ;RETURN FAILURE
         00009af0     0002  
    1673 00009b00                   RETP
    1674                    
    1675 00009b30           SUR_MESS:
    1676 00009b30     a30c          MOVE    A8,-*A12,L
    1677 00009b40     09e8          MOVI    MESS_CONFIRM,A8
         00009b50 0000a960' 
    1678 00009b70     0d5f          CALLA   LM_SETUP             ;GET CONFIRMATION DATA READY.
         00009b80 00000000! 
    1679 00009ba0     9788          MOVE    *A12+,A8,L
    1680 00009bb0                   JSRP    LM_FINIS             ;PRINT OUR PART
    1681 00009c20                   RETP
    1682                    
    1683 00009c50           SURE_BOX:
    1684 00009c50     09c9          MOVI    COLOR_YELLOW,A9
         00009c60     0505  
    1685 00009c70     09e4          MOVI    003D0025H,A4
         00009c80 003d0025  
    1686 00009ca0     09e5          MOVI    00F6016AH,A5
         00009cb0 00f6016a  
    1687 00009cd0     c000          jruc    STD_BORD            ;BORDER-IZE THE WHOLE THING.
         00009ce0     fee7  
    1688                    
    1689 00009cf0           CENT_BOX:
    1690 00009cf0     09c9          MOVI    ROBO_RED,A9
         00009d00     0303  
    1691 00009d10           CBOX_COL:
    1692 00009d10     09e4          MOVI    00450025H,A4
         00009d20 00450025  
    1693 00009d40     09e5          MOVI    00B4016AH,A5
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   41

         00009d50 00b4016a  
    1694 00009d70     c000          jruc    STD_BORD            ;BORDER-IZE THE WHOLE THING.
         00009d80     fedd  
    1695                    
    1696                    
    1697              0032  INSTR_Y  EQU     INST_ULY+5
    1698              003c  INSTR_2Y EQU     INSTR_Y+10
    1699                    
    1700 00009d90           MM_INST1
    1701 00009d90                   MESS_MAC  RD7FONT,SPACING07,MENU_X,INSTR_Y,COLOR_BPR,STRCNRM,0
    1702 00009e30       53          .byte   "SELECT WITH ANY STICK"
    1703 00009ed8       00          .BYTE    0
    1704 00009ee0                   .EVEN
    1705                    
    1706 00009ee0           MM_INST2
    1707 00009ee0                   MESS_MAC  RD7FONT,SPACING07,MENU_X,INSTR_2Y,COLOR_BPR,STRCNRM,0
    1708 00009f80       41          .byte   "ACTIVATE WITH ANY BUTTON"
    1709 0000a040       00          .BYTE    0
    1710 0000a050                   .EVEN
    1711                    
    1712 0000a050           MESS_DOOR
    1713 0000a050                   MESS_MAC  RD7FONT,SPACING20,200,128,ROBO_RED,STRCNRM,0
    1714 0000a0f0       49          .byte  "INVALID GAME SETTINGS"
    1715 0000a198       00          .BYTE    0,1                  ;0 = END OF STRING...1 = MORE MESSAGES!
    1716 0000a1b0                   .EVEN
    1717                    
    1718 0000a1b0           MESS_FAIL
    1719 0000a1b0                   MESS_MAC  RD7FONT,SPACING20,200,112,ROBO_RED,STRCNRM,0
    1720 0000a250       49          .byte  "INVALID GAME SETTINGS"
    1721 0000a2f8       00          .BYTE    0,1                  ;0 = END OF STRING...1 = MORE MESSAGES!
    1722 0000a310                   .EVEN
    1723 0000a310                   MESS_MAC  RD7FONT,SPACING20,200,144,ROBO_WHITE,STRCNRM,0
    1724 0000a3b0       41          .byte  "ATTEMPT TO RESTORE"
    1725 0000a440       00          .BYTE    0,1                  ;0 = END OF STRING...1 = MORE MESSAGES!
    1726 0000a450                   .EVEN
    1727 0000a450                   MESS_MAC  RD7FONT,SPACING20,200,164,ROBO_WHITE,STRCNRM,0
    1728 0000a4f0       46          .byte  "FACTORY SETTINGS HAS FAILED."
    1729 0000a5d0       00          .BYTE     0,0
    1730 0000a5e0                   .EVEN
    1731                    
    1732 0000a5e0           MESS_BITCHIN
    1733 0000a5e0       41          .byte   "ADJUSTMENTS OK",0
    1734 0000a660                   .even
    1735                    
    1736 0000a660           MESS_TITLE
    1737 0000a660                   MESS_MAC  RD15FONT,SPACING20,TM_X,TM_Y,ROBO_GREEN,STRCNRM,0
    1738                    
    1739              001c  RV_Y    EQU      TM_Y+18
    1740                    
    1741 0000a700           MESS_REV
    1742 0000a700                   MESS_MAC  RD7FONT,SPACING20,TM_X,RV_Y,ROBO_YELLOW,STRCNRM,0
    1743 0000a7a0           MESS_SURE
    1744 0000a7a0                   MESS_MAC  RD15FONT,SPACING20,200,102,ROBO_LF,STRCNRM,0
    1745 0000a840           M_SURE
    1746 0000a840                   MESS_MAC  RD15FONT,SPACING20,200,128,ROBO_YELLOW,STRCNRM,0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   42

    1747 0000a8e0       41          .byte   "ARE YOU SURE?"
    1748 0000a948       00          .BYTE       0,0
    1749 0000a960                   .EVEN
    1750                    
    1751 0000a960           MESS_CONFIRM
    1752 0000a960                    MESS_MAC  RD15FONT,SPACING20,200,115,COLOR_LF,STRCNRM,0
    1753                    
    1754                    
    1755              0100  OP_LINE_CHAR    equ     PDATA
    1756              0110  OP_LINE_LINE    equ     PDATA+WORD_SIZE
    1757              0120  OP_LETS         equ     OP_LINE_LINE+WORD_SIZE
    1758              0210  OP_STIME        equ     OP_LETS+(30 * BYTE_SIZE)
    1759              0220  OP_SVAL         equ     OP_STIME+WORD_SIZE
    1760                    
    1761              0019  LET_DIST_X      equ     25
    1762              0018  LET_DIST_Y      equ     24
    1763              000e  LET_BOX_CX      equ     14
    1764              0002  LET_BOX_CY      equ     2
    1765              0003  LET_BOX_WX      equ     3
    1766              0001  LET_BOX_WY      equ     1
    1767              00a3  LET_START_Y1    equ     163
    1768              00bb  LET_START_Y2    equ     LET_START_Y1+LET_DIST_Y
    1769              00d3  LET_START_Y3    equ     LET_START_Y2+LET_DIST_Y
    1770              00eb  LET_START_Y4    equ     LET_START_Y3+LET_DIST_Y
    1771              0037  LET_INST1       equ     55
    1772              0016  LET_START_X     equ     22
    1773              0003  LET_LINE_MAX    equ     3
    1774              000e  LET_CHAR_MAX    equ     14
    1775              000c  LET_TEXT_GAP    equ     12
    1776              006e  LET_TEXT1       equ     110
    1777              007a  LET_TEXT2       equ     LET_TEXT1+LET_TEXT_GAP
    1778              0086  LET_TEXT3       equ     LET_TEXT2+LET_TEXT_GAP
    1779              0019  OP_MAX_CHARS    equ     CMESS_CHARS-1
    1780              0000! FONT_T          .equ    osgfont_t
    1781                    
    1782                    
    1783 00000140                   .bss    BLINE   ,16
    1784 00000150                   .bss    BCHAR   ,16
    1785                    
    1786 0000aa00            SUBR   opmsg_main
    1787                    
    1788                            .if     PRINTER
    1789                            movk    1,a0
    1790                            calla   PBADGUY
    1791                            .endif
    1792                    
    1793 0000aa00     0d5f          calla   CLR_SCRN
         0000aa10 00000000! 
    1794 0000aa30     09e2          movi    opmsg_s,a2
         0000aa40 0000d8f0' 
    1795 0000aa60     09c3          movi    ROBO_YELLOW,a3
         0000aa70     0505  
    1796 0000aa80                   JSRP    TOP_BOX                 ;KICK OUT TOP BOX
    1797                    
    1798 0000aaf0     09e8          movi    OMINST1,a8
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   43

         0000ab00 0000d980' 
    1799 0000ab20                   JSRP    print_multi
    1800                    
    1801 0000ab90                   SLEEPK  1
    1802                    
    1803 0000abd0     5708          clr     a8                      ;Do 4 rows of letters
    1804 0000abe0     1bca          movk    30,a10
    1805 0000abf0     0d3f          callr   OPPLOTLINE
         0000ac00     0256  
    1806                    
    1807 0000ac10     1828          movk    1,a8
    1808 0000ac20     1bca          movk    30,a10
    1809 0000ac30     0d3f          callr   OPPLOTLINE
         0000ac40     0252  
    1810                    
    1811 0000ac50     1848          movk    2,a8
    1812 0000ac60     1bca          movk    30,a10
    1813 0000ac70     0d3f          callr   OPPLOTLINE
         0000ac80     024e  
    1814                    
    1815 0000ac90     1868          movk    3,a8
    1816 0000aca0     1bca          movk    30,a10
    1817 0000acb0     0d3f          callr   OPPLOTLINE
         0000acc0     024a  
    1818                    
    1819 0000acd0     5600          clr     a0
    1820 0000ace0     0580          move    a0,@BLINE
         0000acf0 00000140- 
    1821 0000ad10     0580          move    a0,@BCHAR
         0000ad20 00000150- 
    1822                    
    1823 0000ad40     5708          clr     a8
    1824 0000ad50     b10d          move    a8,*a13(OP_LINE_LINE)   ;ON THE FIRST LINE
         0000ad60     0110  
    1825                    
    1826 0000ad70     0d3f          callr   OM_STARTLINE            ;INITIALIZE ALL THE FLAGS FOR IT
         0000ad80     013d  
    1827                    
    1828 0000ad90     574a          clr     a10
    1829 0000ada0     182b          movk    1,a11
    1830 0000adb0     0d3f          callr   BOXCHAR                 ;BOX INITIAL ONE
         0000adc0     0212  
    1831                    
    1832 0000add0     182b          movk    1,a11
    1833 0000ade0     0d3f          callr   OMPLOTTEXT
         0000adf0     013e  
    1834                    
    1835                    
    1836 0000ae00     5600          clr     a0
    1837 0000ae10     b00d          move    a0,*a13(OP_SVAL)
         0000ae20     0220  
    1838 0000ae30     b00d          move    a0,*a13(OP_STIME)
         0000ae40     0210  
    1839                    
    1840 0000ae50           DOLOOP                                  ;>Loop for stick and things
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   44

    1841 0000ae50                   SLEEPK  1
    1842                    
    1843 0000ae90     0d3f          callr   om_getstick             ;Check out the player board
         0000aea0     00eb  
    1844 0000aeb0     cb05          jrnz    do1                     ;switch closed?
    1845 0000aec0     b00d          move    a0,*a13(OP_SVAL)        ;Clear timer and direction
         0000aed0     0220  
    1846 0000aee0     b00d          move    a0,*a13(OP_STIME)
         0000aef0     0210  
    1847 0000af00     c0f4          jruc    DOLOOP
    1848 0000af10           do1
    1849 0000af10     b5a1          move    *a13(OP_SVAL),A1        ;Get last direction
         0000af20     0220  
    1850 0000af30                   ANDK    7,a1                    ;Mask off repeat bit
    1851 0000af50     4801          cmp     a0,a1
    1852 0000af60     ca06          jrz     do2                     ;Still same thing?
    1853 0000af70     b00d          move    a0,*a13(OP_SVAL)
         0000af80     0220  
    1854 0000af90     5621          clr     a1
    1855 0000afa0     b02d          move    a1,*a13(OP_STIME)       ;Clear the timer
         0000afb0     0210  
    1856 0000afc0     c02a          jruc    DODONE                  ;Process initial hit
    1857 0000afd0           do2
    1858 0000afd0     b5a1          MOVE    *A13(OP_SVAL),A1        ;SNAG THE REPEAT BIT
         0000afe0     0220  
    1859 0000aff0     0b81          ANDI    80H,A1
         0000b000 ffffff7f  
    1860 0000b020     cb15          JRNZ    DO3                     ;BR = IN REPEAT MODE
    1861 0000b030     b5a0          MOVE    *A13(OP_STIME),A0       ;GET TIMER
         0000b040     0210  
    1862 0000b050     1020          INC     A0
    1863 0000b060     b00d          MOVE    A0,*A13(OP_STIME)
         0000b070     0210  
    1864 0000b080     0b40          CMPI    15,A0
         0000b090     fff0  
    1865 0000b0a0     1f60          btst    4,a0
    1866 0000b0b0     c8d9          JRLO    DOLOOP                  ;GO BACK TO SLEEP
    1867 0000b0c0     5600          CLR     A0
    1868 0000b0d0     b00d          MOVE    A0,*A13(OP_STIME)       ;CLEAR OUT THE TIMER
         0000b0e0     0210  
    1869 0000b0f0     b5a1          MOVE    *A13(OP_SVAL),A1
         0000b100     0220  
    1870 0000b110     4c20          MOVE    A1,A0
    1871 0000b120     0ba1          ORI     80H,A1                  ;PUT UPPER BIT ON
         0000b130 00000080  
    1872 0000b150     b02d          MOVE    A1,*A13(OP_SVAL)        ;SET DIRECTION WITH REPEAT ON
         0000b160     0220  
    1873 0000b170     c00f          JRUC    DODONE
    1874 0000b180           DO3
    1875 0000b180     b5a0          MOVE    *A13(OP_STIME),A0       ;GET TIMER
         0000b190     0210  
    1876 0000b1a0     1020          INC     A0
    1877 0000b1b0     b00d          MOVE    A0,*A13(OP_STIME)
         0000b1c0     0210  
    1878 0000b1d0     0b40          CMPI    5,A0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   45

         0000b1e0     fffa  
    1879 0000b1f0     c8c5          JRLO    DOLOOP                  ;GO BACK TO SLEEP
    1880 0000b200     5600          CLR     A0
    1881 0000b210     b00d          MOVE    A0,*A13(OP_STIME)       ;CLEAR OUT THE TIMER
         0000b220     0210  
    1882 0000b230     b5a0          MOVE    *A13(OP_SVAL),A0
         0000b240     0220  
    1883 0000b250                   ANDK    7,a0                    ;TURN OFF REPEAT BIT
    1884 0000b270           DODONE
    1885 0000b270     b5a1          move    *A13(OP_SVAL),a1        ;Get current entry
         0000b280     0220  
    1886 0000b290                   ANDK    7,a1
    1887 0000b2b0     05a8          move    @BLINE,a8
         0000b2c0 00000140- 
    1888 0000b2e0     05aa          move    @BCHAR,a10
         0000b2f0 00000150- 
    1889 0000b310     576b          clr     a11
    1890 0000b320     0d3f          callr   BOXCHAR                 ;UNHIGHLIGHT IT
         0000b330     01bb  
    1891                    
    1892 0000b340     0b41          CMPI    1,A1                    ;CHECK UP
         0000b350     fffe  
    1893 0000b360     cb02          JRNZ    DOC1
    1894 0000b370     1428          DEC     A8
    1895 0000b380     c02c          JRUC    DOPROC
    1896 0000b390           DOC1
    1897 0000b390     0b41          CMPI    2,A1
         0000b3a0     fffd  
    1898 0000b3b0     cb02          JRNZ    DOC2
    1899 0000b3c0     1028          INC     A8
    1900 0000b3d0     c027          JRUC    DOPROC
    1901 0000b3e0           DOC2
    1902 0000b3e0     0b41          CMPI    3,A1
         0000b3f0     fffc  
    1903 0000b400     cb02          JRNZ    DOC3
    1904 0000b410     142a          DEC     A10
    1905 0000b420     c022          JRUC    DOPROC
    1906 0000b430           DOC3
    1907 0000b430     0b41          CMPI    4,A1
         0000b440     fffb  
    1908 0000b450     cb02          JRNZ    DOC4
    1909 0000b460     102a          INC     A10
    1910 0000b470     c01d          JRUC    DOPROC
    1911 0000b480           DOC4
    1912 0000b480     0b41          CMPI    5,A1                    ; DRAW BUTTON
         0000b490     fffa  
    1913 0000b4a0     cb14          JRNZ    DOCCLR                  ; WOOF WOOF
    1914                    
    1915 0000b4b0     09c3          movi    select_snd1,a3
         0000b4c0     0658  
    1916 0000b4d0     0d5f          calla   SNDSND
         0000b4e0 00000000! 
    1917                    
    1918 0000b500     0d3f          CALLR   OMADDCHAR               ; ADD THE CHAR IN A8/A10
         0000b510     010a  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   46

    1919 0000b520     0b48          CMPI    0FFH,A8                 ; CHECK TO SEE IF DONE WITH ALL
         0000b530     ff00  
    1920 0000b540     ca2e          JRZ     DOCEND
    1921 0000b550     05a8          MOVE    @BLINE,A8
         0000b560 00000140- 
    1922 0000b580     05aa          MOVE    @BCHAR,A10
         0000b590 00000150- 
    1923 0000b5b0     182b          MOVK    1,A11
    1924 0000b5c0     0d3f          CALLR   BOXCHAR                 ; TURN THE BOX BACK ON
         0000b5d0     0191  
    1925 0000b5e0     c086          JRUC    DOLOOP
    1926 0000b5f0           DOCCLR
    1927 0000b5f0     0b41          cmpi    6,a1                    ;Start button
         0000b600     fff9  
    1928 0000b610     cb83          jrne    DOLOOP
    1929                    
    1930 0000b620     0d3f          callr   opmsg_clr
         0000b630     0060  
    1931                    
    1932 0000b640     c034          jruc    DOCCLEAR
    1933                            
    1934 0000b650           DOPROC
    1935 0000b650     09c3          movi    cursor_snd4,a3
         0000b660     064c  
    1936 0000b670     0d5f          calla   SNDSND
         0000b680 00000000! 
    1937 0000b6a0     4d08          move    a8,a8
    1938 0000b6b0     c501          jrge    doc5
    1939 0000b6c0     5708          clr     a8
    1940 0000b6d0           doc5
    1941 0000b6d0     0b48          cmpi    LET_LINE_MAX,a8
         0000b6e0     fffc  
    1942 0000b6f0     c601          jrle    doc6
    1943 0000b700     1868          movk    LET_LINE_MAX,a8
    1944 0000b710           doc6
    1945 0000b710     4d4a          move    a10,a10
    1946 0000b720     c501          jrge    doc7
    1947 0000b730     19ca          movk    LET_CHAR_MAX,a10
    1948 0000b740           doc7
    1949 0000b740     0b4a          cmpi    LET_CHAR_MAX,a10
         0000b750     fff1  
    1950 0000b760     c601          jrle    doc8
    1951 0000b770     574a          clr     a10
    1952 0000b780           doc8
    1953 0000b780     0588          move    a8,@BLINE
         0000b790 00000140- 
    1954 0000b7b0     058a          move    a10,@BCHAR
         0000b7c0 00000150- 
    1955 0000b7e0     182b          movk    1,a11
    1956 0000b7f0     0d3f          callr   BOXCHAR
         0000b800     016e  
    1957 0000b810     c000          jruc    DOLOOP
         0000b820     ff62  
    1958                    
    1959                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   47

    1960                    
    1961 0000b830           DOCEND
    1962 0000b830                   SLEEPK  2                       ;GET EVERYBODY CAUGHT UP
    1963 0000b870     0d5f          CALLA   CLR_SCRN                ;CLEAR THE SCREEN
         0000b880 00000000! 
    1964 0000b8a0     0d3f          CALLR   SURE_BOX
         0000b8b0     fe39  
    1965 0000b8c0     09e8          MOVI    MESS_SUCCESS,A8         ;THIS IS SUCCESS MESSAGE
         0000b8d0 0000ba60' 
    1966 0000b8f0           zaitsm  JSRP    SUR_MESS                ;PRINT THE MESSAGE
    1967 0000b960     c080          jauc    ANY_BUT                 ;NOW RETRIEVE ANY BUTTON THEN RETURN
         0000b970 00000000! 
    1968                    
    1969 0000b990           DOCCLEAR
    1970 0000b990                   SLEEPK  2
    1971 0000b9d0     0d5f          CALLA   CLR_SCRN
         0000b9e0 00000000! 
    1972 0000ba00     0d3f          CALLR   SURE_BOX
         0000ba10     fe23  
    1973 0000ba20     09e8          MOVI    MESS_CLEARED,A8
         0000ba30 0000bae0' 
    1974 0000ba50     c0e9          jruc    zaitsm
    1975                    
    1976                    
    1977 0000ba60           MESS_SUCCESS
    1978 0000ba60       4d          .byte   "MESSAGE STORED",0
    1979 0000bae0                   .even
    1980                    
    1981 0000bae0           MESS_CLEARED
    1982 0000bae0       4d          .byte   "MESSAGE CLEARED",0
    1983 0000bb60                   .even
    1984                    
    1985 0000bb60           BLASTMESS:                              ;GUY ENTERED A WHOLE MESSAGE
    1986 0000bb60     0d5f          calla   ADJ_PAGE
         0000bb70 00000000! 
    1987 0000bb90     5600          clr     a0
    1988 0000bba0     09e7          movi    VALID_CUSTOM,a7
         0000bbb0 01404da0  
    1989 0000bbd0     0d5f          calla   WC_WORD
         0000bbe0 00000000! 
    1990 0000bc00     0d5f          calla   F_ADC_S                 ;FIX UP THE CHECKSUM
         0000bc10 00000000! 
    1991 0000bc30     0960          rets
    1992                    
    1993                    
    1994                    
    1995 0000bc40            SUBR   opmsg_clr
    1996                    
    1997 0000bc40     0d5f          calla   ADJ_PAGE
         0000bc50 00000000! 
    1998                    
    1999 0000bc70     09e7          movi    CUSTOM_MESSAGE,a7
         0000bc80 014048c0  
    2000 0000bca0     1862          movk    CMESS_LINES,a2
    2001 0000bcb0     5600  jyoilp  clr     a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   48

    2002 0000bcc0     0d5f          calla   WC_BYTEI                ;Write a null
         0000bcd0 00000000! 
    2003 0000bcf0     0b07          addi    CMESS_LINE_SIZE,a7
         0000bd00     01a0  
    2004 0000bd10     3ce2          dsj     a2,jyoilp
    2005                    
    2006 0000bd20     0d5f          calla   F_ADC_S                 ;Refresh checksum
         0000bd30 00000000! 
    2007 0000bd50     c0e0          jruc    BLASTMESS
    2008                    
    2009                    
    2010                    
    2011                    
    2012 0000bd60           om_getstick
    2013                    
    2014 0000bd60                   PUSH    a1
    2015                    
    2016 0000bd70     07a0          move    @_switch_addr,a0,L
         0000bd80 00000000! 
    2017 0000bda0     8400          move    *a0,a0,W
    2018 0000bdb0     07a1          move    @_coin_addr,a1,L
         0000bdc0 00000000! 
    2019 0000bde0     8421          move    *a1,a1,W
    2020 0000bdf0     2601          sll     16,a1
    2021 0000be00     2600          sll     16,a0
    2022 0000be10     2e00          srl     16,a0
    2023 0000be20     5420          or      a1,a0
    2024 0000be30     03e0          not     a0
    2025 0000be40     4c01          move    a0,a1
    2026 0000be50     0b80          andi    0004007fh,a0            ;P1 draw/start/stick
         0000be60 fffbff80  
    2027 0000be80     0b81          andi    00207f00h,a1            ;P2 draw/start/stick
         0000be90 ffdf80ff  
    2028 0000beb0     2f01          srl     8,a1
    2029 0000bec0     5420          or      a1,a0
    2030 0000bed0     07a1          move    @_switch2_addr,a1,L
         0000bee0 00000000! 
    2031 0000bf00     8421          move    *a1,a1,W
    2032 0000bf10     03e1          not     a1
    2033 0000bf20     0b81          andi    07fH,a1                 ;P3 draw/stick
         0000bf30 ffffff80  
    2034 0000bf50     5420          or      a1,a0
    2035                    
    2036 0000bf60     1fe0          btst    0,a0                    ;U
    2037 0000bf70     ca02          jrz     og2
    2038 0000bf80     1820          movk    1,a0
    2039 0000bf90     c019          jruc    jyoix
    2040 0000bfa0           og2
    2041 0000bfa0     1fc0          btst    1,a0                    ;D
    2042 0000bfb0     ca02          jrz     og3
    2043 0000bfc0     1840          movk    2,a0
    2044 0000bfd0     c015          jruc    jyoix
    2045 0000bfe0           og3
    2046 0000bfe0     1fa0          btst    2,a0                    ;L
    2047 0000bff0     ca02          jrz     og4
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   49

    2048 0000c000     1860          movk    3,a0
    2049 0000c010     c011          jruc    jyoix
    2050 0000c020           og4
    2051 0000c020     1f80          btst    3,a0                    ;R
    2052 0000c030     ca02          jrz     og5
    2053 0000c040     1880          movk    4,a0
    2054 0000c050     c00d          jruc    jyoix
    2055 0000c060           og5
    2056 0000c060     09c1          movi    070H,a1
         0000c070     0070  
    2057 0000c080     5001          and     a0,a1
    2058 0000c090     ca02          jrz     og6
    2059 0000c0a0     18a0          movk    5,a0
    2060 0000c0b0     c007          jruc    jyoix
    2061 0000c0c0           og6
    2062 0000c0c0     0b80          andi    0ffffff80h,a0           ;Any other bits are start buttons
         0000c0d0 0000007f  
    2063 0000c0f0     ca02          jrz     og7
    2064 0000c100     18c0          movk    6,a0
    2065 0000c110     c001          jruc    jyoix
    2066 0000c120           og7
    2067 0000c120     5600          clr     a0
    2068 0000c130           jyoix
    2069 0000c130                   PULL    a1
    2070 0000c140     4c00          move    a0,a0
    2071 0000c150     0960          rets
    2072                    
    2073                    
    2074                    
    2075 0000c160           OM_STARTLINE
    2076                    
    2077 0000c160                   PUSH    A0
    2078 0000c170     5600          CLR     A0
    2079 0000c180     b00d          MOVE    A0,*A13(OP_LETS)
         0000c190     0120  
    2080 0000c1a0     b00d          MOVE    A0,*A13(OP_LINE_CHAR)
         0000c1b0     0100  
    2081 0000c1c0                   PULL    A0
    2082                    
    2083 0000c1d0     0960          RETS
    2084                    
    2085                    
    2086 0000c1e0           OMPLOTTEXT
    2087                    
    2088 0000c1e0     098f          MMTM    SP,A8,A10,A11
         0000c1f0     00b0  
    2089                    
    2090 0000c200                   PUSH    A11
    2091 0000c210     09e8          MOVI    OMTSETUP,A8
         0000c220 0000df60' 
    2092 0000c240     0d5f          CALLA   LM_SETUP
         0000c250 00000000! 
    2093 0000c270     4da8          MOVE    A13,A8
    2094 0000c280     0b08          ADDI    OP_LETS,A8
         0000c290     0120  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   50

    2095 0000c2a0     b5a9          MOVE    *A13(OP_LINE_LINE),A9,W
         0000c2b0     0110  
    2096 0000c2c0     24a9          SLL     5,A9
    2097 0000c2d0     0b29          ADDI    OMLOC,A9
         0000c2e0 0000ce90' 
    2098 0000c300     8729          MOVE    *A9,A9,L
    2099 0000c310     2609          SLL     16,A9
    2100 0000c320     098f          MMTM    SP,A3,A4,A9
         0000c330     1840  
    2101 0000c340     4d23          MOVE    A9,A3
    2102 0000c350     0d03          SUBI    20000H,A3
         0000c360 fffdffff  
    2103 0000c380     09e4          MOVI    [LET_TEXT_GAP+2,394],A4
         0000c390 000e018a  
    2104 0000c3b0     0d5f          CALLA   BLNKAREA
         0000c3c0 00000000! 
    2105 0000c3e0     09af          MMFM    SP,A3,A4,A9
         0000c3f0     0218  
    2106 0000c400     0b09          ADDI    200,A9
         0000c410     00c8  
    2107 0000c420                   JSRP    LM_FINIS
    2108                    
    2109 0000c490                   PULL    A5
    2110 0000c4a0     4ca5          MOVE    A5,A5                   ;FLAG FOR UNDERSCORE OR NOT
    2111 0000c4b0     ca0d          JRZ     NOUNDER
    2112 0000c4c0     09c6          movi    ROBO_LASER,a6
         0000c4d0     3e3e  
    2113 0000c4e0     09e8          movi    underscore_s,a8
         0000c4f0 0000e000' 
    2114 0000c510     10a9          addk    5,a9                    ;SHIFT THE LITTLE GUY OVER
    2115 0000c520                   JSRP    LM_FINIS
    2116 0000c590           NOUNDER
    2117 0000c590     09af          MMFM    SP,A8,A10,A11
         0000c5a0     0d00  
    2118 0000c5b0     0960          RETS
    2119                    
    2120                    
    2121                    
    2122 0000c5c0           OMADDCHAR
    2123 0000c5c0                   PUSH    a8,a10
    2124                    
    2125 0000c5e0     24a8          sll     5,a8
    2126 0000c5f0     0b28          addi    OLTAB,a8                ;+Base
         0000c600 0000d630' 
    2127 0000c620     8708          move    *a8,a8,L
    2128 0000c630     246a          sll     3,a10
    2129 0000c640     4148          add     a10,a8                  ;char offset
    2130 0000c650     8f00          movb    *a8,a0                  ;snag the char
    2131 0000c660     0b40          cmpi    '_',a0
         0000c670     ffa0  
    2132 0000c680     cb09          jrne    kklv20
    2133                    
    2134 0000c690     b5a1          move    *a13(OP_LINE_CHAR),a1   ;0BacHkspace
         0000c6a0     0100  
    2135 0000c6b0     ca38          jrz     kklvx
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   51

    2136 0000c6c0     1421          dec     a1
    2137 0000c6d0     b02d          move    a1,*a13(OP_LINE_CHAR)
         0000c6e0     0100  
    2138 0000c6f0     4c22          move    a1,a2
    2139 0000c700     5600          clr     a0
    2140 0000c710     c026          jruc    rubent
    2141                    
    2142 0000c720           kklv20
    2143 0000c720     0b40          cmpi    '^',a0
         0000c730     ffa1  
    2144 0000c740     cb1a          jrne    kklvaddchar
    2145                    
    2146 0000c750     576b          clr     a11
    2147 0000c760     0d3f          callr   OMPLOTTEXT              ; GET RID OF THE FLASHING UNDERSCORE
         0000c770     ffa6  
    2148 0000c780     5600          clr     a0
    2149 0000c790     0580          move    a0,@BLINE
         0000c7a0 00000140- 
    2150 0000c7c0     0580          move    a0,@BCHAR
         0000c7d0 00000150- 
    2151 0000c7f0     0d3f          callr   OM_STORECMOS            ; WELL, BABY -- STORE IT
         0000c800     0048  
    2152 0000c810     b5a8          MOVE    *A13(OP_LINE_LINE),A8   ; GRAB THE LINE
         0000c820     0110  
    2153 0000c830     0b48          CMPI    2,A8
         0000c840     fffd  
    2154 0000c850     c921          JRHS    OMADONE
    2155 0000c860     1028          INC     A8
    2156 0000c870     b10d          MOVE    A8,*A13(OP_LINE_LINE)   ; ON THE FIRST LINE
         0000c880     0110  
    2157 0000c890     0d3f          CALLR   OM_STARTLINE            ; INITIALIZE ALL THE FLAGS FOR IT
         0000c8a0     ff8b  
    2158 0000c8b0     182b          MOVK    1,A11
    2159 0000c8c0     0d3f          CALLR   OMPLOTTEXT
         0000c8d0     ff90  
    2160 0000c8e0     c015          jruc    kklvx
    2161                    
    2162                    
    2163 0000c8f0           kklvaddchar
    2164                    
    2165 0000c8f0     b5a1          MOVE    *A13(OP_LINE_CHAR),A1
         0000c900     0100  
    2166 0000c910     4c22          MOVE    A1,A2
    2167 0000c920     0b41          CMPI    OP_MAX_CHARS,A1
         0000c930     ffe6  
    2168 0000c940     c926          JRHS    OMACMAX
    2169 0000c950     1021          INC     A1
    2170 0000c960     b02d          MOVE    A1,*A13(OP_LINE_CHAR)
         0000c970     0100  
    2171 0000c980           rubent
    2172 0000c980     4da8          move    a13,a8
    2173 0000c990     0b08          ADDI    OP_LETS,A8
         0000c9a0     0120  
    2174 0000c9b0     2462          SLL     3,A2
    2175 0000c9c0     4048          ADD     A2,A8                   ;OFFSET INTO LOCAL STORAGE
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   52

    2176 0000c9d0     8c08          MOVB    A0,*A8
    2177 0000c9e0     1108          ADDK    8,A8
    2178 0000c9f0     5600          CLR     A0
    2179 0000ca00     8c08          MOVB    A0,*A8                  ;MAKE SURE ZERO TERMINATED
    2180 0000ca10     182b          MOVK    1,A11
    2181 0000ca20     0d3f          CALLR   OMPLOTTEXT
         0000ca30     ff7a  
    2182 0000ca40     09af  kklvx   MMFM    SP,A8,A10
         0000ca50     0500  
    2183 0000ca60     0960          RETS
    2184                    
    2185 0000ca70           OMADONE                                 ;COME HERE WHEN REALLY DONE
    2186 0000ca70     0d5f          CALLA   ADJ_PAGE                ;GUY ENTERED A WHOLE MESSAGE
         0000ca80 00000000! 
    2187 0000caa0     09e7          MOVI    VALID_CUSTOM,A7
         0000cab0 01404da0  
    2188 0000cad0     09e0          MOVI    VALID_VALUE,A0
         0000cae0 0000eabc  
    2189 0000cb00     0d5f          CALLA   WC_WORD
         0000cb10 00000000! 
    2190 0000cb30     0d5f          CALLA   F_ADC_S                 ;FIX UP THE CHECKSUM
         0000cb40 00000000! 
    2191 0000cb60     09af          MMFM    SP,A8,A10
         0000cb70     0500  
    2192 0000cb80     09c8          MOVI    0FFH,A8                 ;FLAG DONE WITH EVERYTHING
         0000cb90     00ff  
    2193 0000cba0     0960          RETS
    2194                    
    2195 0000cbb0           OMACMAX
    2196 0000cbb0     09af          mmfm    sp,a8,a10
         0000cbc0     0500  
    2197 0000cbd0     576b          clr     a11
    2198 0000cbe0     0d3f          callr   BOXCHAR
         0000cbf0     002f  
    2199 0000cc00     1868          movk    3,a8
    2200 0000cc10     19ca          movk    14,a10
    2201 0000cc20     0588          move    a8,@BLINE
         0000cc30 00000140- 
    2202 0000cc50     058a          move    a10,@BCHAR
         0000cc60 00000150- 
    2203 0000cc80     0960          rets
    2204                    
    2205                    
    2206                    
    2207 0000cc90           OM_STORECMOS
    2208 0000cc90     0d5f          CALLA   ADJ_PAGE                ;POINT AT ADJUSTMENTS PAGE
         0000cca0 00000000! 
    2209 0000ccc0     b5a7          MOVE    *A13(OP_LINE_LINE),A7
         0000ccd0     0110  
    2210 0000cce0     09c6          MOVI    CMESS_LINE_SIZE,A6
         0000ccf0     01a0  
    2211 0000cd00     5ec7          MPYU    A6,A7                   ;OFFSET ME, BABY
    2212 0000cd10     0b27          ADDI    CUSTOM_MESSAGE,A7       ;A7 IS CMOS LOCATION
         0000cd20 014048c0  
    2213 0000cd40     4da6          MOVE    A13,A6
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   53

    2214 0000cd50     0b06          ADDI    OP_LETS,A6              ;A6 IS THE PROCESS BLOCK LOC
         0000cd60     0120  
    2215 0000cd70     1b25          movk    CMESS_CHARS-1,a5        ;CHARS/LINE
    2216                    
    2217 0000cd80           cmos_loop
    2218 0000cd80     8ec0          movb    *a6,a0                  ;fetch a character
    2219 0000cd90     0b80          andi    BYTE_MASK,A0
         0000cda0 ffffff00  
    2220 0000cdc0     0d5f          calla   WC_BYTEI                ;WRITE A BYTE
         0000cdd0 00000000! 
    2221 0000cdf0     1106          addk    BYTE_SIZE,A6            ;POINT AT NEXT BYTE
    2222 0000ce00     3d25          dsj     a5,cmos_loop
    2223                    
    2224 0000ce10     5600          clr     a0
    2225 0000ce20     0d5f          calla   WC_BYTEI                ;Write a null
         0000ce30 00000000! 
    2226                    
    2227 0000ce50     0d5f          calla   F_ADC_S                 ;REFRESH CHECKSUM
         0000ce60 00000000! 
    2228                    
    2229 0000ce80     0960          rets
    2230                    
    2231 0000ce90 0000006e  OMLOC   .LONG   LET_TEXT1, LET_TEXT2, LET_TEXT3
    2232                    
    2233                    
    2234                    
    2235                    
    2236 0000cef0           BOXCHAR
    2237 0000cef0     098f          MMTM    SP,A1,A8,A10
         0000cf00     40a0  
    2238                    
    2239 0000cf10     09c1          MOVI    LET_DIST_Y,A1
         0000cf20     0018  
    2240 0000cf30     5f01          MPYU    A8,A1                           ; DISTANCE
    2241 0000cf40     0b01          ADDI    LET_START_Y1-LET_BOX_CY,A1
         0000cf50     00a1  
    2242 0000cf60     2601          SLL     16,A1
    2243 0000cf70     4c24          MOVE    A1,A4
    2244 0000cf80     09c1          MOVI    LET_DIST_X,A1
         0000cf90     0019  
    2245 0000cfa0     5f41          MPYU    A10,A1
    2246 0000cfb0     0b01          ADDI    LET_START_X-LET_BOX_CX,A1
         0000cfc0     0008  
    2247 0000cfd0     ec24          MOVX    A1,A4                           ; UPPER LEFT IN A4
    2248 0000cfe0     4c85          MOVE    A4,A5   
    2249 0000cff0     09e0          MOVI    [LET_DIST_Y+LET_BOX_WY,LET_DIST_X+LET_BOX_WX],A0
         0000d000 0019001c  
    2250 0000d020     e005          ADDXY   A0,A5                           ; LOWER RIGHT IN A5
    2251                    
    2252 0000d030     09e0          MOVI    [1,1],A0                        ; BORDER HEIGHT,WIDTH
         0000d040 00010001  
    2253 0000d060     09c9          MOVI    ROBO_BLACK,A9                   ; DOBORDER IS RETARDED
         0000d070     1414  
    2254 0000d080     4d6b          MOVE    A11,A11
    2255 0000d090     ca02          JRZ     BC1
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   54

    2256 0000d0a0     09c9          MOVI    ROBO_LF,A9
         0000d0b0     3e3e  
    2257 0000d0c0           BC1
    2258 0000d0c0     0d3f          CALLR   DOBORDER
         0000d0d0     fb68  
    2259                    
    2260 0000d0e0     4d6b          MOVE    A11,A11
    2261 0000d0f0     cb02          JRNZ    BC2
    2262 0000d100     09ca          MOVI    0FFH,A10
         0000d110     00ff  
    2263 0000d120           BC2
    2264 0000d120     0d3f          CALLR   OPPLOTLINE
         0000d130     0003  
    2265                    
    2266 0000d140     09af          MMFM    SP,A1,A8,A10
         0000d150     0502  
    2267 0000d160     0960          RETS
    2268                    
    2269                    
    2270                    
    2271 00000160                   .bss    char_s  ,16
    2272                    
    2273 0000d170           OPPLOTLINE
    2274                    
    2275 0000d170                   PUSH    a8,a9,a10,a11
    2276                    
    2277 0000d190     4d09          move    a8,a9
    2278 0000d1a0     24a8          sll     5,a8                    ;*32
    2279 0000d1b0     0b28          addi    OLTAB,a8
         0000d1c0 0000d630' 
    2280 0000d1e0     8708          move    *a8,a8,L
    2281 0000d1f0     2489          sll     4,a9
    2282 0000d200     0b29          addi    OLYTAB,a9
         0000d210 0000d6b0' 
    2283 0000d230     8529          move    *a9,a9
    2284                            
    2285 0000d240     2609          sll     16,a9                   ;Get in the y position
    2286 0000d250     12c9          addk    LET_START_X,a9
    2287 0000d260           tfvqlp
    2288 0000d260     8f00          movb    *a8,a0                  ;GRAB CHAR NUMBER
    2289 0000d270     4c00          move    a0,a0   
    2290 0000d280     ca2d          jrz     tfvqx
    2291 0000d290     05e0          movb    a0,@char_s
         0000d2a0 00000160- 
    2292 0000d2c0                   PUSH    a8
    2293 0000d2d0                   PUSH    a9
    2294 0000d2e0                   PUSH    a10
    2295 0000d2f0                   PUSH    a9
    2296 0000d300     09e0          movi    REDPAL,a0               ;*Palette
         0000d310 00000000! 
    2297 0000d330     4d4a          move    a10,a10
    2298 0000d340     cb03          jrnz    opl1
    2299 0000d350     09e0          movi    WHITEPAL,a0
         0000d360 00000000! 
    2300 0000d380     0d5f  opl1    calla   pal_getf
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   55

         0000d390 00000000! 
    2301 0000d3b0     4c05          move    a0,a5
    2302                    
    2303 0000d3c0     09e8          movi    OP_MESS,a8
         0000d3d0 0000d590' 
    2304 0000d3f0     0d5f          calla   LM_SETUP
         0000d400 00000000! 
    2305 0000d420     4ca6          move    a5,a6                   ;Color
    2306 0000d430                   PULL    a9                      ;SET THE POSITION OF THE CHAR
    2307 0000d440     09e8          movi    char_s,a8
         0000d450 00000160- 
    2308 0000d470                   JSRP    LM_FINIS
    2309                    
    2310 0000d4e0                   PULL    a10
    2311 0000d4f0     142a          dec     a10
    2312 0000d500                   PULL    a9
    2313 0000d510                   PULL    a8
    2314 0000d520     1108          addk    8,a8
    2315 0000d530     0b09          addi    LET_DIST_X,a9
         0000d540     0019  
    2316 0000d550     c0d0          jruc    tfvqlp
    2317                    
    2318 0000d560           tfvqx   PULL    a8,a9,a10,a11
    2319 0000d580     0960          rets
    2320                    
    2321                    
    2322 0000d590           OP_MESS
    2323 0000d590                   MESS_MAC FONT_T,1,200,95,REDPAL,STRCNRM_1,0
    2324 0000d630                   .even
    2325                    
    2326 0000d630 0000d6f0' OLTAB   .long   OL1TAB, OL2TAB, OL3TAB, OL4TAB
    2327 0000d6b0     00a3  OLYTAB  .word   LET_START_Y1, LET_START_Y2, LET_START_Y3, LET_START_Y4
    2328                    
    2329 0000d6f0       41  OL1TAB  .byte   "ABCDEFGHI123?!_",0
    2330 0000d770       4a  OL2TAB  .byte   "JKLMNOPQR456()_",0
    2331 0000d7f0       53  OL3TAB  .byte   "STUVWXYZ 7890:_",0
    2332 0000d870       5e  OL4TAB  .byte   "^_ #$&-./'   _^",0
    2333                    
    2334 0000d8f0       4f  opmsg_s .byte   "OPERATOR MESSAGE",0
    2335 0000d980                   .even
    2336 0000d980           OMINST1
    2337 0000d980                   MESS_MAC RD7FONT,SPACING07,200,LET_INST1,ROBO_WHITE,STRCNRM,0
    2338 0000da20       55          .byte   "USE PLAYER 1 OR 2 CONTROLS TO ENTER A MESSAGE",0,1
    2339 0000db98       4f          .byte   "OF UP TO 3 LINES OF 25 LETTERS PER LINE.",0,1
    2340 0000dce8       53          .byte   "SELECT end TO END EACH LINE.",0,1
    2341 0000ddd8       50          .byte   "PRESS PLAYER 1 OR 2 START TO CLEAR OUT MESSAGE.",0,0
    2342 0000df60                   .even
    2343                    
    2344 0000df60           OMTSETUP
    2345 0000df60                   MESS_MAC   RD7FONT,SPACING07,200,LET_INST1,ROBO_BLUE,STRCNRM,0
    2346 0000e000                   .even
    2347                    
    2348 0000e000       2d  underscore_s    .byte   "-",0
    2349 0000e010                   .even
    2350                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   56

    2351                    
    2352                    
    2353 0000e010            SUBRP  print_multi
    2354                    
    2355 0000e010                   PUSH    a2
    2356                    
    2357 0000e020     4d02          move    a8,a2
    2358 0000e030     0d5f          calla   LM_SETUP
         0000e040 00000000! 
    2359 0000e060     4d23          move    a9,a3           ;1st XY
    2360                    
    2361 0000e070           paimlp  PUSH    a8
    2362 0000e080     4c48          move    a2,a8
    2363 0000e090     0d5f          calla   LM_SETUP
         0000e0a0 00000000! 
    2364 0000e0c0                   PULL    a8
    2365                    
    2366 0000e0d0     4c69          move    a3,a9
    2367                    
    2368 0000e0e0                   JSRP    LM_FINIS
    2369 0000e150     0b23          addi    [12,0],a3       ;Next Y
         0000e160 000c0000  
    2370                    
    2371 0000e180     8f00          movb    *a8,a0
    2372 0000e190     1108          addk    8,a8
    2373 0000e1a0     4c00          move    a0,a0
    2374 0000e1b0     cbeb          jrnz    paimlp
    2375                    
    2376 0000e1c0                   PULL    a2
    2377 0000e1d0                   RETP
    2378                    
    2379                    
    2380                    
    2381                    
    2382                    
    2383                    ASCIIE  .macro  str
    2384                    
    2385                            .var    i,c,e
    2386                            .eval   1,i
    2387                            .eval   1,e
    2388                            .loop   $symlen(str)
    2389                            .asg    :str(i):,c
    2390                            .byte   0ffh & (':c:'+e)
    2391                            .eval   i+1,i
    2392                            .eval   e+7,e
    2393                            .endloop
    2394                            .byte   0ffh & :e:
    2395                    
    2396                            .endm
    2397                    
    2398 0000e200       01          .byte   1,2,4,8,16,32,64,128    ;ID
    2399                    
    2400 0000e240                   ASCIIE  "NBA-JAM-COPYRIGHT-1993-MIDWAY-MANUFACTURING-COMPANY"
    2401 0000e3e0                   ASCIIE  "ALL-RIGHTS-RESERVED"
    2402 0000e480                   ASCIIE  "PROGRAMMED-BY-SHAWN-LIPTAK-&-MARK-TURMELL-&-JAMIE-RIVETT"
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   57

    2403                    
    2404                    
    2405                    
    2406                    
    2407                    
    2408 0000e650                   .end

 No Errors,  No Warnings
