TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    **************************************************************
       2                    * START
       3                    * Software:     ?
       4                    * Initiated:    ?
       5                    *
       6                    * Modified:     Shawn Liptak, 11/14/91  -Total carnage cleanup
       7                    *               Shawn Liptak, 2/20/92   -Basketball
       8                    *               GEORGE PETRO, 1/17/93   -NBA JAM
       9                    *
      10                    * COPYRIGHT (C) 1992 WILLIAMS ELECTRONICS GAMES, INC.
      11                    *
      12                    *.Last mod - 3/19/93 13:58
      13                    **************************************************************
      14                            .file   "test.asm"
      16                            .width  132
      17                            .option b,d,l,t
      18                            .mnolist
      19                    
      20                            
      21                            .include        "mproc.equ"
      22                            .include        "display.equ"
      23                            .include        "sys.equ"
      24                            .include        "gsp.equ"
      25                            .include        "imgtbl.glo"
      26                            .include        "game.equ"
      27                            .include        "link.equ"
      28                            .include        "menu.equ"
      29                            .include        "macros.h"
      30                            .include        "dip.equ"
      31                            .include        "fontsimg.glo"
      32                            .include        "sound.h"
      33                    
      34                    
      35                    ;in this module
      36                    
      37                            .def            fudge_switches, fudge_switches2, fudge_switches_diag
      38                            .DEF            DIAG,CHK_CMOS
      39                            .DEF            GEN_MENU,B_MENU
      40                            .DEF            TOP_BOX                 ;,WT_ADV
      41                    ;       .DEF            WW_ADV
      42                            .DEF            MAIN_RET,GMENULEV
      43                    ;       .DEF            CK_DOOR
      44                            .DEF            AREUSURE
      45                            .DEF            F_TITLE
      46                            .DEF            ST_STICK
      47                            .DEF            GETSTICK
      48                            .DEF            SUR_MESS
      49                            .DEF            SURE_BOX
      50                            .DEF            CPU_RET
      51                            .DEF            GET_FAC
      52                            .DEF            MENU_TOP
      53                            .DEF            RED_BOX
      54                            .DEF            BLNKHELP,H_SLAVE
      55                            .DEF            DOBORDER
      56                            .DEF            COL_INST
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    2

      57                            .DEF            STD_BORD
      58                            .DEF            DIAG_EX
      59                            .DEF            WAIT_BUT
      60                            .DEF            DIGSRT
      61                    ;       .DEF            GET_ADV
      62                            .DEF            SND_MADE
      63                            .DEF            NO_CLEAR
      64                            .DEF            LAST_BUT
      65                            .DEF            G_BORDER
      66                            .DEF            FORM_SWS
      67                    ;       .DEF            LINKY
      68                            .DEF            CKTEST, CKDIAG, DIAG_COLORS
      69                    
      70                    ;in audit.asm
      71                    
      72                            .ref            CMOS_VAL,L_MESS
      73                            .ref            LM_SETUP,LM_FINIS
      74                            .ref            FORM_ADC
      75                            .ref            F_ADC_S
      76                            .ref            GET_AUD
      77                            .ref            FAC_SET
      78                            .ref            CRED_P
      79                            .ref            BAD_AUD
      80                            .ref            CLR_AUD
      81                            .ref            ADJ_PAGE
      82                            .ref            COIN_PAG
      83                            .ref            ROM_NAME
      84                            .ref            STORE_AUDIT
      85                    *
      86                    *       IN HSTD.ASM
      87                    *
      88                            .ref            INIT_TAB
      89                            .ref            VAL_TAB
      90                            .ref            P_FORK
      91                            .ref            RC_BYTEI
      92                            .ref            RC_BYTE
      93                            .ref            RC_WORD
      94                            .ref            RC_LONG
      95                            .ref            RC_LONGI
      96                            .ref            WC_BYTE
      97                            .ref            WC_BYTEI
      98                            .ref            WC_WORD
      99                            .ref            WC_WORDI
     100                            .ref            WC_LONG
     101                            .ref            WC_LONGI
     102                    *
     103                    *        IN MENU.ASM
     104                    *
     105                            .ref            MEN_MAIN,ANY_BUT,MEN_YN
     106                            .ref            MESS_FAC
     107                            .ref            GO_DIAG           ;ROUTINE FOR DIAGNOSTIC MENU
     108                            .ref            RTR_LEV,ROM_LEV
     109                            .ref            FAC_STUF
     110                            .ref            SCODE             ;SYNTH CODE CURRENTLY BEING MADE
     111                            .ref            DCODE             ;DIG CODE CURRENTLY BEING MADE
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    3

     112                    
     113                    ;       IN ADJUST.ASM
     114                    
     115                            .ref    DO_ADJH, CKDIP, MEN_ADJ
     116                    
     117                    
     118                    ;       IN ATTRACT.ASM
     119                    
     120                            .ref    WIPEOUT
     121                    
     122                    
     123                    ;       OTHERS
     124                    
     125                    ;       .ref    TWOPLAYERS                      ;0 = NO, 1 = YES 2 players
     126                    
     127                            .ref    WARMSET
     128                            .ref    QSNDRST
     129                            .ref    FILLAREA
     130                            .ref    STRNGLEN
     131                    
     132                            .ref    osgfont_t
     133                            .ref    RD15FONT,RD7FONT,STRCNRM,STRCNRM_1,GAMSTATE
     134                            .ref    IRQSKYE,BLNKAREA,STRLNRM,CLR_SCRN
     135                            .ref    WDOGDIS, READ_DIP, dpageflip_off, SWSET1, SWSET2
     136                    
     137                            .ref    PALFRAM, pal_set, pal_getf, DIAGP
     138                    
     139                            ;from DCSSOUND.ASM
     140                            .ref    nosounds
     141                    
     142                            .ref    _coin_addr
     143                            .ref    _switch_addr
     144                            .ref    _switch2_addr
     145                    
     146                    *        MAIN_RET
     147                    *
     148                    *        POSITIVE NUMBER HERE SAYS RETURN (UPWARD) TO MAIN MENU (GEN_MENU ONLY)
     149                    *        NEGATIVE NUMBER HERE SAYS SETUP RESTORE AFTER RAM TEST. (GEN_MENU)
     150                    
     151 00000000                   .BSS            MAIN_RET,16           ;FLAG SAYS RETURN TO MAIN MENU
     152 00000010                   .BSS            GMENULEV,16           ;HOW DEEP INTO GEN_MENU WE ARE
     153 00000020                   .BSS            SND_MADE,16           ;SOUND TEST FLAG
     154 00000030                   .BSS            NO_CLEAR,16           ;FLAG TELLS GET_MENU NOT TO CLEAR!
     155 00000040                   .BSS            LAST_BUT,32
     156 00000060                   .BSS            SPTEMP,32             ;STACK POINTER TEMP
     157                    
     158                            .def    fswitches_cur,fswitches_last,fswitches_down
     159                    
     160 00000080                   .bss            fswitches_cur,32
     161 000000a0                   .bss            fswitches_last,32
     162 000000c0                   .bss            fswitches_down,32
     163                    
     164                            .globl          _switch_map_mode
     165 000000e0                   .bss            _switch_map_mode,32     ; 0 = no switch mapping
     166                                                                    ; 1 = map switches for menus
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    4

     167                                                                    ; 2 = map switches for adjustments
     168                                                                    ; 3 = Any button mapping mode
     169                    
     170 00000000                   .text
     171                    
     172                    ;sounds
     173                    
     174                    **************************************************************************
     175                    *                                                                        *
     176                    *          CPU_RET                                                       *
     177                    *                                                                        *
     178                    *          THIS IS RETURN FROM CPU TEST.   SINCE WE NEED TO TEST         *
     179                    *          RAM BEFORE ROM, OUR STATE IS ALSO SMASHED FROM ROM TEST.      *
     180                    *                                                                        *
     181                    **************************************************************************
     182 00000000           CPU_RET:
     183                    ;       CALLR   DIAG_STATE      ;GET THE STATE RIGHT.....BUT DON'T MESS UP TILL BUTTON
     184                    ;       JSRP    WAIT_BUT        ;NOW WAIT FOR ANY BUTTON.
     185 00000000     0d3f          CALLR   DIGSRT          ;MAKE SURE WE'RE IN TEST MODE
         00000010     0268  
     186                    
     187 00000020     5600          CLR     A0
     188 00000030     0580          MOVE    A0,@GMENULEV    ;INDICATE WE'RE AT LEVEL ZERO.
         00000040 00000010- 
     189                    
     190 00000060     09e0          MOVI    RTR_LEV,A0      ;THIS IS THE LEVEL TO DIVE TO
         00000070 00000000! 
     191 00000090     03a0          NEG     A0              ;NEGATE IT AS FLAG TO DIVE.
     192 000000a0     0580          MOVE    A0,@MAIN_RET    ;INDICATE
         000000b0 00000000- 
     193 000000d0     c080          JAUC    DIAG_RESTART    ;NOW START IT UP....
         000000e0 00000720' 
     194                    
     195                    
     196                    
     197                    **************************************************************************
     198                    *                                                                        *
     199                    *          WAIT_BUT                                                      *
     200                    *                                                                        *
     201                    *          THIS IS CALLED ON RETURN FROM MANY OF THE "HARD"              *
     202                    *          DIAGNOSTIC TESTS TO HOLD CONTROL TILL ANY BUTTON IS           *
     203                    *          HIT.                                                          *
     204                    *                                                                        *
     205                    **************************************************************************
     206 00000100           WAIT_BUT:
     207 00000100     0d3f          CALLR   FORM_SWS        ;1ST STATE DOESN'T COUNT
         00000110     0703  
     208                    
     209                    *       RETURN CURRENT STATE IN A0..PREVIOUS STATE IN A1.
     210                    
     211 00000120           WB1:    
     212 00000120                   SLEEPK  1
     213 00000160     0d3f          CALLR   FORM_SWS
         00000170     06fd  
     214 00000180     03e1          NOT     A1              ;LAST = 0 AND NOW = 1 MEANS EDGE!
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    5

     215                    
     216 00000190     5020          AND     A1,A0           ;1'S WHERE WE HAVE POSITIVE EDGE.
     217 000001a0     0b80          ANDI    BUTTONS,A0      ;IS IT A BUTTON?
         000001b0 ffff0f0f  
     218 000001d0     caf4          JRZ     WB1
     219                    
     220 000001e0     09c3          movi    beep1_snd,a3
         000001f0     03d9  
     221 00000200     0d5f          calla   SNDSND
         00000210 00000000! 
     222                    
     223 00000230                   RETP
     224                    
     225                    
     226                    **************************************************************************
     227                    *                                                                        *
     228                    *       CKTEST                                                           *
     229                    *                                                                        *
     230                    *       CHECK TO SEE IF EITHER OF THE TEST BUTTONS IS CLOSED,            *
     231                    *       IF NOT, HEAD OUT TO WARMSET                                      *
     232                    *                                                                        *
     233                    *       ENTRY                                                            *
     234                    *               NOTHING                                                  *
     235                    *                                                                        *
     236                    *       EXIT                                                             *
     237                    *               NOTHING                                                  *
     238                    *                                                                        *
     239                    **************************************************************************
     240 00000260           CKTEST
     241                    ;       rets
     242 00000260                   PUSH    A0
     243 00000270     0d5f          CALLA   READ_DIP
         00000280 00000000! 
     244 000002a0     0b80          ANDI    DPTEST,A0
         000002b0 ffffff7f  
     245 000002d0     cb0c          JRNZ    CKRET
     246                    ;       MOVE    @SWITCH,A0,L
     247 000002e0     07a0          move    @_coin_addr,a0,L
         000002f0 00000000! 
     248 00000310     8400          move    *a0,a0,W
     249 00000320     2600          sll     16,a0
     250 00000330     03e0          NOT     A0
     251 00000340     0b80          ANDI    DIAG_BITS,A0
         00000350 ffefffff  
     252 00000370     ca80          JAZ     WARMSET                 ; WE BE OUTTA HERE!
         00000380 00000000! 
     253 000003a0           CKRET
     254 000003a0                   PULL    A0
     255 000003b0     0960          RETS
     256                    
     257                    
     258                    **************************************************************************
     259                    *                                                                        *
     260                    *       CKDIAG                                                           *
     261                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    6

     262                    *       CHECK TO SEE IF WE NEED TO GO OFF TO THE DIAGNOSTICS ROUTINES    *
     263                    *                                                                        *
     264                    *       ENTRY                                                            *
     265                    *               NOTHING                                                  *
     266                    *                                                                        *
     267                    *       EXIT                                                             *
     268                    *               A0      0 = COOL, 1 = GO TO DIAGS                        *
     269                    *                                                                        *
     270                    **************************************************************************
     271 000003c0           CKDIAG
     272 000003c0     5600          CLR     A0
     273 000003d0     0d5f          CALLA   READ_DIP
         000003e0 00000000! 
     274 00000400     0b80          ANDI    DPTEST,A0
         00000410 ffffff7f  
     275 00000430     cb0a          JRNZ    CKDGO
     276                    ;       MOVE    @SWITCH,A0,L
     277 00000440     07a0          move    @_coin_addr,a0,L
         00000450 00000000! 
     278 00000470     8400          move    *a0,a0,W
     279 00000480     2600          sll     16,a0
     280 00000490     03e0          NOT     A0
     281 000004a0     0b80          ANDI    DIAG_BITS,A0
         000004b0 ffefffff  
     282 000004d0     ca01          JRZ     CKDRET
     283 000004e0           CKDGO
     284 000004e0     1820          MOVK    1,A0
     285 000004f0           CKDRET
     286 000004f0     4c00          MOVE    A0,A0
     287 00000500     0960          RETS
     288                    
     289                    **************************************************************************
     290                    * DIAG - THIS IS THE ENTRY TO THE MAIN DIAGNOSTIC MENU.
     291                    
     292 00000510           DIAG
     293 00000510     09c0          movi    AUDSTAT,a0
         00000520     0017  
     294 00000530     5621          clr     a1
     295 00000540     0d5f          calla   STORE_AUDIT
         00000550 00000000! 
     296 00000570     05a0          move    @GAMSTATE,a0
         00000580 00000000! 
     297 000005a0     ce80          jan     SUCIDE          ;In diagnostics
         000005b0 00000000! 
     298                    ;       move    @COINS,a0       ;Check coin switches
     299 000005d0     07a0          move    @_coin_addr,a0,L
         000005e0 00000000! 
     300 00000600     8400          move    *a0,a0
     301 00000610     1e40          btst    CDI_BIT,a0              ;Coin door closed ?
     302 00000620     ca80          jaz     SUCIDE          ;Yes - then diagnostic NOT allowed
         00000630 00000000! 
     303 00000650     1820          movk    1,a0
     304 00000660     0780          move    a0,@_switch_map_mode,L
         00000670 000000e0- 
     305                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    7

     306 00000690           DIAG_JUMP
     307 00000690     0d3f          CALLR   DIGSRT          ;MAKE SURE WE'RE IN TEST MODE
         000006a0     01ff  
     308                    ;       JSRP    WW_ADV          ;HOLD UNTIL HE LETS GO!
     309                    
     310 000006b0     5600          CLR     A0
     311 000006c0     0580          MOVE    A0,@MAIN_RET    ;CLEAR THE FLOAT TO TOP FLAG.
         000006d0 00000000- 
     312 000006f0     0580          MOVE    A0,@GMENULEV    ;INDICATE WE'RE AT LEVEL ZERO.
         00000700 00000010- 
     313                    
     314 00000720           DIAG_RESTART
     315 00000720     09e8          MOVI    MEN_MAIN,A8
         00000730 00000000! 
     316 00000750                   JSRP    GEN_MENU        ;PROCESS THIS MENU!
     317 000007c0     5600          clr     a0
     318 000007d0     0780          move    a0,@_switch_map_mode,L
         000007e0 000000e0- 
     319                    
     320                    ;       HE (FINALLY) PICKED EXIT....RETURN!
     321                    
     322 00000800           DIAG_EX
     323 00000800                   SLEEPK  2               ;LET DMA EMPTY OUT IF NECESSARY
     324                    
     325                    ;       CALLA   CMOS_VAL        ;IF SETTINGS SMASHED....FIX EM.
     326                    ;       JAUC    WARMSET
     327                    
     328                    
     329                    
     330                    
     331                    ;       SLEEP   2
     332 00000840     0d5f          CALLA   CLR_SCRN
         00000850 00000000! 
     333 00000870     0d5f          CALLA   CMOS_VAL                ; VALIDATE THE CMOS
         00000880 00000000! 
     334 000008a0     0d5f          CALLA   CKTEST
         000008b0 00000260' 
     335 000008d0     0d5f          CALLA   READ_DIP
         000008e0 00000000! 
     336 00000900     0b80          ANDI    DPTEST,A0
         00000910 ffffff7f  
     337 00000930     0780          MOVE    A0,@SWSET2,L
         00000940 00000000! 
     338 00000960     ca0b          JRZ     DE2
     339 00000970     09e8          MOVI    NOTCLOSEDDIP,A8
         00000980 00001090' 
     340 000009a0                   JSRP    L_MESS
     341 00000a10     c020          jruc    mflxout
     342 00000a20           DE2
     343                    ;       MOVE    @SWITCH,A0,L
     344 00000a20     07a0          move    @_coin_addr,a0,L
         00000a30 00000000! 
     345 00000a50     8400          move    *a0,a0,W
     346 00000a60     2600          sll     16,a0
     347 00000a70     03e0          NOT     A0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    8

     348 00000a80     0b80          ANDI    DIAG_BITS,A0
         00000a90 ffefffff  
     349 00000ab0     07ae          MOVE    @SWSET2,A14,L
         00000ac0 00000000! 
     350 00000ae0     540e          OR      A0,A14
     351 00000af0     078e          MOVE    A14,@SWSET2,L
         00000b00 00000000! 
     352 00000b20     4c00          MOVE    A0,A0
     353 00000b30     ca0b          JRZ     DE3
     354 00000b40     09e8          MOVI    NOTCLOSEDJAMMA,A8
         00000b50 00001280' 
     355 00000b70                   JSRP    L_MESS
     356 00000be0     c003          jruc    mflxout
     357 00000bf0           DE3
     358 00000bf0     c080          JAUC    WARMSET         
         00000c00 00000000! 
     359 00000c20           mflxout
     360 00000c20     09e8          MOVI    NOTCLOSEDWAIT,A8
         00000c30 00001420' 
     361 00000c50                   JSRP    L_MESS
     362                    
     363 00000cc0     0d5f          CALLA   fudge_switches          ;get fudged switches in a0
         00000cd0 000071c0' 
     364 00000cf0     0b80          andi    BUTTONS|START_BITS,a0
         00000d00 f9db0f0f  
     365 00000d20     0780          MOVE    A0,@SWSET1,L
         00000d30 00000000! 
     366 00000d50           DE4
     367 00000d50                   SLEEPK  1                       ;APPEASE THE MAIN LOOP
     368 00000d90     0d3f          CALLR   CKTEST                  ;CHECK STATUS OF TEST SWITCH
         00000da0     ff4b  
     369                    
     370 00000db0     0d5f          CALLA   fudge_switches          ;get fudged switches in a0
         00000dc0 000071c0' 
     371 00000de0     07a1          MOVE    @SWSET1,A1,L
         00000df0 00000000! 
     372 00000e10     0b80          andi    BUTTONS|START_BITS,a0
         00000e20 f9db0f0f  
     373 00000e40     4801          CMP     A0,A1
     374 00000e50     cb1f          JRNZ    DE5
     375                    
     376                    
     377 00000e60     07a3          MOVE    @SWSET2,A3,L
         00000e70 00000000! 
     378 00000e90     4c61          MOVE    A3,A1
     379 00000ea0     0d5f          CALLA   READ_DIP
         00000eb0 00000000! 
     380 00000ed0     0b80          ANDI    DPTEST,A0
         00000ee0 ffffff7f  
     381 00000f00     0b81          ANDI    DPTEST,A1
         00000f10 ffffff7f  
     382 00000f30     4801          CMP     A0,A1
     383 00000f40     cb8b          JRNE    DIAG_EX
     384                    
     385                    ;       MOVE    @SWITCH,A0,L            ;GOTTA SEE IF TIME TO LEAVE
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    9

     386 00000f50     07a0          move    @_coin_addr,a0,L
         00000f60 00000000! 
     387 00000f80     8400          move    *a0,a0,W
     388 00000f90     2600          sll     16,a0
     389 00000fa0     03e0          NOT     A0
     390 00000fb0     0b80          ANDI    DIAG_BITS,A0
         00000fc0 ffefffff  
     391 00000fe0     0b83          ANDI    DIAG_BITS,A3
         00000ff0 ffefffff  
     392 00001010     4803          CMP     A0,A3
     393 00001020     cb00          JRNE    DIAG_EX
         00001030     ff7c  
     394                    
     395 00001040     c0d0          JRUC    DE4
     396                    
     397 00001050           DE5
     398 00001050     0d3f          CALLR   CKTEST                  ; ONE FINAL TIME ( STILL WRONG )
         00001060     ff1f  
     399 00001070     c000          JRUC    DIAG_JUMP
         00001080     ff60  
     400                    
     401                    
     402 00001090           NOTCLOSEDDIP
     403 00001090                   MESS_MAC RD7FONT,SPACING07,200,50,COLOR_RED,STRCNRM,0
     404 00001130       44          .STRING "DIPSWITCH TEST SELECT (SW1 # 1) CLOSED.",0,0
     405 00001280                   .EVEN
     406                    
     407 00001280           NOTCLOSEDJAMMA
     408 00001280                   MESS_MAC RD7FONT,SPACING07,200,70,COLOR_RED,STRCNRM,0
     409 00001320       43          .STRING "COIN DOOR TEST SWITCH CLOSED.",0,0
     410 00001420                   .EVEN
     411                    
     412 00001420           NOTCLOSEDWAIT
     413 00001420                   MESS_MAC RD7FONT,SPACING07,200,120,COLOR_RED,STRCNRM,0
     414 000014c0       50          .STRING "PRESS ANY BUTTON TO RETURN TO TEST MODE OR",0,1
     415 00001620                   .EVEN
     416 00001620                   MESS_MAC RD7FONT,SPACING07,200,132,COLOR_RED,STRCNRM,0
     417 000016c0       4f          .STRING "OR",0,1
     418 000016e0                   .EVEN
     419 000016e0                   MESS_MAC RD7FONT,SPACING07,200,144,COLOR_RED,STRCNRM,0
     420 00001780       4f          .STRING "OPEN THE SWITCH(S) TO RETURN TO GAME.",0,0
     421 000018c0                   .EVEN
     422                    
     423                    **************************************************************************
     424                    *                                                                        *
     425                    *          GEN_MENU                                                      *
     426                    *                                                                        *
     427                    *          THIS IS A GENERAL MENU HANDLER.  IT POSTS THE MENU            *
     428                    *          WITH SELECTION 1 AVAILABLE.  AFTER A SELECTION IS             *
     429                    *          MADE, IF IT HAS A ROUTINE CODE OF ZERO, (EXIT)                *
     430                    *          IT RETURNS TO THE LEVEL ABOVE IT.  ELSE, IT                   *
     431                    *          JSRP'S THE NEW ROUTINE.  WHEN THE NEW ROUTINE                 *
     432                    *          RETURNS, WE RE-POST THE SAME MENU WITH THE                    *
     433                    *          BAR ON THE FOLLOWING ENTRY.                                   *
     434                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   10

     435                    *          A8 = MENU DESCRIPTOR                                          *
     436                    *                                                                        *
     437                    **************************************************************************
     438                    *
     439                    *        MENU ROM OFFSETS
     440                    *
     441              0000  MR_FONT   EQU     0
     442              0020  MR_TCAL   EQU     MR_FONT+LONG_SIZE
     443              0040  MR_TITLE  EQU     MR_TCAL+LONG_SIZE     ;POINTER TO TITLE FOR TILE BOX (IF NEC)
     444              0060  MR_TCLR   EQU     MR_TITLE+LONG_SIZE    ;COLOR OF TITLE
     445              0070  MR_WORDS  EQU     MR_TCLR+WORD_SIZE     ;STREAM OF WORDS TO COPY TO PDATA STARTS HERE
     446              0070  MR_X      EQU     MR_WORDS
     447              0080  MR_Y      EQU     MR_X+WORD_SIZE
     448              0090  MR_DY     EQU     MR_Y+WORD_SIZE
     449              00a0  MR_COL    EQU     MR_DY+WORD_SIZE
     450              00b0  MR_HITE   EQU     MR_COL+WORD_SIZE
     451              00c0  MR_BDY    EQU     MR_HITE+WORD_SIZE
     452              00d0  MR_DX     EQU     MR_BDY+WORD_SIZE
     453              00e0  MR_WID    EQU     MR_DX+WORD_SIZE
     454                            
     455 000018c0           GEN_MENU
     456 000018c0     05a0          MOVE    @GMENULEV,A0            ;KICK LEVEL POINTER
         000018d0 00000010- 
     457 000018f0     1020          INC     A0
     458 00001900     0580          MOVE    A0,@GMENULEV
         00001910 00000010- 
     459                    
     460 00001930     a30c          MOVE    A8,-*A12,L              ;SAVE MENU PTR
     461 00001940     1828          movk    1,A8                    ;START WITH "FIRST" ENTRY
     462 00001950     a10c          MOVE    A8,-*A12,W              ;PUT MENU NUMBER AS A WORD
     463                    
     464                    *       IF WE GET HERE AND MAIN_RET IS NOT ZERO, THE WE MUST
     465                    *       RETURN TO LEVEL ABOVE US IF WE'RE NOT THE MAIN
     466                    *       MENU.
     467                    
     468                    
     469 00001960           GEN_LOOP
     470 00001960     05a0          MOVE    @MAIN_RET,A0            ;ARE WE IN "EXIT" MODE?
         00001970 00000000- 
     471 00001990     ca0a          JRZ     NO_EXIT                 ;NO
     472                    
     473 000019a0     ce44          JRN     DIVE_TO_MONITOR         ;WE'RE DIVING TO MONITOR PATTERNS.
     474                    
     475 000019b0     05a0          MOVE    @GMENULEV,A0            ;CHECK LEVEL
         000019c0 00000010- 
     476 000019e0     1420          subk    1,a0                    ;are we at level 1
     477 000019f0     cb33          jrne    GEN_EXIT                ;NOPE.....POP UP A LEVEL.
     478                    
     479                    *       WE'RE AT LEVEL 1....CLEAR OUT THE FLAG THAT
     480                    *       GOT US HERE.
     481                    
     482 00001a00           DIVE_COMPLETE
     483 00001a00     5600          CLR     A0
     484 00001a10     0580          MOVE    A0,@MAIN_RET            ;NOW WE MAY PROCEED!
         00001a20 00000000- 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   11

     485                    
     486 00001a40           NO_EXIT
     487 00001a40     05a0          MOVE    @NO_CLEAR,A0            ;INHIBIT CLEAR?
         00001a50 00000030- 
     488 00001a70     cb04          JRNZ    SKIP_CLR
     489 00001a80     57bd          CLR     B13
     490 00001a90     0d5f          CALLA   CLR_SCRN                ;CLEAR THE SCREEN
         00001aa0 00000000! 
     491                    
     492 00001ac0           SKIP_CLR
     493 00001ac0     5600          CLR     A0
     494 00001ad0     0580          MOVE    A0,@NO_CLEAR            ;AND RE-SET IT!
         00001ae0 00000030- 
     495                    
     496 00001b00     b788          MOVE    *A12(WORD_SIZE),A8,L    ;GET MENU DESCRIPTOR
         00001b10     0010  
     497 00001b20                   JSRP    MENU_TOP
     498 00001b90                   JSRP    RED_BOX         ;PUT UP MAIN MENU INSTRUCTIONS
     499                    
     500 00001c00     8589          MOVE    *A12,A9                 ;GET MENU NUMBER TO USE
     501 00001c10                   JSRP    B_MENU                  ;GET RESULT
     502                    
     503 00001c80           PHONEY_MENU_RET
     504                    
     505 00001c80     4d4a          MOVE    A10,A10                 ;WAS IT ADVANCE?
     506 00001c90     ca01          JRZ     NO_KICK                 ;NOPE....LEAVE WHERE HE CAME FROM
     507                    
     508 00001ca0     1028          INC     A8                      ;KICK INDEX BY 1 FOR NEXT TIME
     509 00001cb0           NO_KICK
     510 00001cb0     810c          MOVE    A8,*A12                 ;AND LEAVE ON THE STACK
     511                    
     512 00001cc0     4d29          MOVE    A9,A9                   ;NOW JSRP THE ROUTINE
     513 00001cd0     ca05          JRZ     GEN_EXIT                ;NONE THERE....ITS "EXIT"
     514                    
     515                    *       JSRP TO A9
     516                    
     517 00001ce0     09e7          MOVI    GEN_LOOP,A7
         00001cf0 00001960' 
     518 00001d10     a2ec          MOVE    A7,-*A12,L              ;PUSH RET ADDR
     519 00001d20     0169          JUMP    A9
     520                    
     521 00001d30           GEN_EXIT
     522 00001d30     0b0c          ADDI    WORD_SIZE+LONG_SIZE,A12 ;POP THE ARGUMENTS
         00001d40     0030  
     523 00001d50     05a0          MOVE    @GMENULEV,A0            ;KICK LEVEL POINTER
         00001d60 00000010- 
     524 00001d80     1420          DEC     A0
     525 00001d90     0580          MOVE    A0,@GMENULEV
         00001da0 00000010- 
     526 00001dc0                   RETP
     527                    
     528                    **************************************************************************
     529                    *                                                                        *
     530                    *          DIVE_TO_MONITOR                                               *
     531                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   12

     532                    *          WE GET CONTROL HERE WHEN WE ARE KLUDGING THE RETURN           *
     533                    *          FROM "CPU" TEST (WHICH BLOWS AWAY RAM!)                       *
     534                    *                                                                        *
     535                    **************************************************************************
     536 00001df0           DIVE_TO_MONITOR:
     537 00001df0     05a0          MOVE    @GMENULEV,A0            ;CHECK LEVEL
         00001e00 00000010- 
     538 00001e20     0b40          CMPI    1,A0                    ;ARE WE AT LEVEL 1
         00001e30     fffe  
     539 00001e40     cb06          JRNZ    DTM1                    ;NOPE....SET "MONITOR" LEVEL
     540                    *
     541                    *       WE'RE AT LEVEL 1......."SELECT" THE DIAGNOSTIC MENU
     542                    *       A8 = 1.....A9 = ROUTINE FOR DIAGNOSTIC MENU
     543                    *
     544 00001e50     1828          MOVK    1,A8
     545 00001e60     09e9          MOVI    GO_DIAG,A9              ;ROUTINE FOR DIAGNOSTIC MENU
         00001e70 00000000! 
     546 00001e90     182a          MOVK    1,A10                   ;RETURN AS IF ADVANCE WAS PRESSED
     547 00001ea0     c0dd          JRUC    PHONEY_MENU_RET         ;WE'RE READY TO CALL DIAG MENU
     548                    *
     549                    *       WE'RE IN DIAGNOSTIC MENU....NOW WE JUST NEED TO MAKE
     550                    *       THE "CURRENT" SELECTION THE ONE AFTER CPU TEST
     551                    *       (MONITOR PATTERNS)
     552                    *
     553 00001eb0           DTM1:   
     554 00001eb0     05a8          MOVE    @MAIN_RET,A8            ;FLAG IS OPPOSITE OF ENTRY NUMBER
         00001ec0 00000000- 
     555 00001ee0     03a8          NEG     A8                      ;THIS IS RETURN LEVEL!
     556                    *        MOVI    RTR_LEV,A8             ;START WITH "RETURN" ENTRY NUMBER
     557 00001ef0     810c          MOVE    A8,*A12                 ;PUT MENU NUMBER AS A WORD
     558 00001f00     c0af          JRUC    DIVE_COMPLETE           ;THIS COMPLETES THE DIVE!
     559                    
     560                    **************************************************************************
     561                    *
     562                    *          FOR DOBORDER
     563                    *
     564                    *          A4 = UPPER LEFT Y,X                                          
     565                    *          A5 = LOWER RIGHT Y,X                                 
     566                    *          A0 = Y,X WIDTH OF BORDER                                     
     567                    *          A9 = COLOR OF BORDER.                                        
     568                    
     569                    **************************************************************************
     570                    *                                                                        *
     571                    *          TOP_BOX                                                       *
     572                    *                                                                        *
     573                    *          THIS DISPLAYS THE TEST BOX AT THE TOP.                        *
     574                    *                                                                        *
     575                    *          A2 POINTS AT THE STRING TO CENTER IN THE BOX.                 *
     576                    *          A3 IS COLOR TO DO IT IN.                                      *
     577                    *                                                                        *
     578                    **************************************************************************
     579 00001f10           MENU_TOP:
     580 00001f10     b702          MOVE    *A8(MR_TITLE),A2,L      ;GET TITLE INTO A2
         00001f20     0040  
     581 00001f30     b503          MOVE    *A8(MR_TCLR),A3         ;AND COLOR INTO A3
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   13

         00001f40     0060  
     582                    
     583 00001f50           TOP_BOX:
     584 00001f50     a30c          MOVE    A8,-*A12,L              ;PUSH MENU PTR
     585                    *
     586                    *       FIRST MAKE THE BOX...IT BLACKS OUT THE REGION
     587                    *
     588 00001f60     0d3f          CALLR   SCR_BOX                 ;PUT UP THE TITLE BOX
         00001f70     002c  
     589                    
     590 00001f80     09e8          MOVI    MESS_TITLE,A8    ;SET PARAMETERS
         00001f90 0000a660' 
     591 00001fb0     0d5f          CALLA   LM_SETUP         ;PUT IT OUT.
         00001fc0 00000000! 
     592                    
     593 00001fe0     4c48          MOVE    A2,A8            ;GET STRING IN THE CORRECT REGGIE
     594                    ;       MOVE    A3,A6            ;MOVE COLOR TO COLOR REGGIE
     595                    
     596 00001ff0                   JSRP    LM_FINIS         ;AND PRINT IT!
     597                    
     598 00002060                   JSRP    SCR_REV          ;NOW ADD THE REV.
     599                    
     600 000020d0     9788          MOVE    *A12+,A8,L       ;RESTORE THE MENU PTR
     601                    
     602 000020e0                   RETP
     603                    
     604                    **************************************************************************
     605                    *                                                                        *
     606                    *          SCR_REV                                                       *
     607                    *                                                                        *
     608                    *          DISPLAY REV IN TITLE BOX.                                     *
     609                    *                                                                        *
     610                    **************************************************************************
     611 00002110           SCR_REV:
     612 00002110     09e8          MOVI    MESS_REV,A8     ;GET READY FOR REV MESSAGE
         00002120 0000a700' 
     613 00002140     0d5f          CALLA   LM_SETUP        ;SETUP FOR REV MESSAGE
         00002150 00000000! 
     614                    
     615 00002170     09e8          MOVI    ROM_NAME,A8     ;USE ROM COPY OF REV.
         00002180 00000000! 
     616 000021a0                   JSRP    LM_FINIS        ;FINISH PRINTING MESSAGE
     617 00002210                   RETP
     618                    
     619                    **************************************************************************
     620                    *                                                                        *
     621                    *          SCR_BOX                                                       *
     622                    *                                                                        *
     623                    *          THIS DISPLAYS THE TITLE BOX.                                  *
     624                    *                                                                        *
     625                    **************************************************************************
     626 00002240           SCR_BOX:
     627 00002240     09e4          MOVI    TIT_ULX+(10000H*TIT_ULY),A4    ;UPPER LEFT
         00002250 00040005  
     628 00002270     09e5          MOVI    TIT_LRX+(10000H*TIT_LRY),A5    ;UPPER LEFT
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   14

         00002280 002a0185  
     629 000022a0     09c9          MOVI    COLOR_YELLOW,A9
         000022b0     0505  
     630 000022c0     0d3f          CALLR   STD_BORD
         000022d0     0688  
     631 000022e0     0960          RETS
     632                    
     633                    *        THIS PRINTS THE "MOVE JOYSTICK" BOX.
     634                    *
     635                    *        A8 = MENU DESCRIPTOR THAT WILL ACCOMPANY IT
     636                    *        ON SCREEN.  WE ADJUST THE BOX EDGES AND
     637                    *        MESSAGE CENTER IN "X" ONLY TO CORRESPOND
     638                    *        TO THE MENU BOX.
     639                    
     640 000022f0           RED_BOX:
     641 000022f0     a30c          MOVE    A8,-*A12,L                       ;PUSH THE MENU PTR
     642                    
     643 00002300     09c9          MOVI    ROBO_RED,A9
         00002310     0303  
     644 00002320     0d3f          CALLR   COL_INST                ;THIS PRINTS BOX AND STASHES
         00002330     0018  
     645                    *                                       ;CENTER X AT *A13(PDATA),W
     646                    
     647 00002340     09e8          MOVI    MM_INST1,A8     ;POINT AT INSTRUCTIONS MESSAGE
         00002350 00009d90' 
     648 00002370                   JSRP    C_PD_M
     649                    
     650 000023e0     09e8          MOVI    MM_INST2,A8     ;POINT AT INSTRUCTIONS MESSAGE
         000023f0 00009ee0' 
     651 00002410                   JSRP    C_PD_M
     652                    
     653 00002480     9788          MOVE    *A12+,A8,L      ;GET BACK MENU PTR.
     654 00002490                   RETP
     655                    
     656                    **************************************************************************
     657                    *                                                                        *
     658                    *          COL_INST                                                      *
     659                    *                                                                        *
     660                    *          THIS PRINTS OUT THE "CYAN" INSTRUCTION BOX                    *
     661                    *          IN THE COLOR SPECIFIED BY A9.                                 *
     662                    *                                                                        *
     663                    **************************************************************************
     664 000024c0           COL_INST:
     665                    *
     666                    *       WE NEED TO DETERMINE LEFT AND RIGHT X
     667                    *
     668 000024c0     0d3f          CALLR   STUFF_MENU_PROCESS               ;MOVE DATA INTO PDATA AREA
         000024d0     03af  
     669 000024e0     0d3f          CALLR   MEN_NUMS                         ;GET THE NUMBERS FOR THIS MENU
         000024f0     000b  
     670 00002500     b0cd          MOVE    A6,*A13(PDATA),W                 ;STASH THE X CENTER
         00002510     0100  
     671 00002520     0b24          ADDI    10000H*INST_ULY,A4               ;UPPER LEFT Y
         00002530 002d0000  
     672 00002550     0b25          ADDI    10000H*INST_LRY,A5               ;UPPER LEFT X
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   15

         00002560 004a0000  
     673 00002580     0d3f          CALLR   STD_BORD
         00002590     065c  
     674 000025a0     0960          RETS
     675                    
     676                    **************************************************************************
     677                    *                                                                        *
     678                    *          MEN_NUMS                                                      *
     679                    *                                                                        *
     680                    *          THIS IS CALLED TO GET SOME NUMBERS ASSOCIATED                 *
     681                    *          WITH A MENU BOX.                                              *
     682                    *                                                                        *
     683                    *          THIS RETURNS:                                                 *
     684                    *                                                                        *
     685                    *          A4 = LEFT X                                                   *
     686                    *          A5 = RIGHT X                                                  *
     687                    *          A6 = CENTER X                                                 *
     688                    *                                                                        *
     689                    **************************************************************************
     690 000025b0           MEN_NUMS:
     691 000025b0     0d3f          CALLR   MENU_UL_A4_A5                    ;LEFT X IN A4
         000025c0     05c2  
     692 000025d0     0d3f          CALLR   MENU_LR_A6_A5                    ;RIGHT X IN A6
         000025e0     05d1  
     693 000025f0     4cc5          MOVE    A6,A5                            ;COPY RIGHT X INTO A5
     694 00002600     4086          ADD     A4,A6                            ;FIND CENTER
     695 00002610     2fe6          SRL     1,A6                             ;A6 NOW HAS CENTER X (FOR LATER)
     696 00002620     0960          RETS
     697                    
     698                    **************************************************************************
     699                    *                                                                        *
     700                    *          C_PD_M                                                        *
     701                    *                                                                        *
     702                    *          THIS PRINTS A L_MESS MESSAGE PASSED IN A8, CENTERED           *
     703                    *          ON THE X STORED AT *A13(PDATA),W                              *
     704                    *                                                                        *
     705                    **************************************************************************
     706 00002630           C_PD_M:
     707 00002630     0d5f          CALLA   LM_SETUP        ;SETUP THE MESSAGE
         00002640 00000000! 
     708 00002660     b5a3          MOVE    *A13(PDATA),A3  ;GET THE X
         00002670     0100  
     709 00002680     ec69          movx    a3,a9           ;Move X
     710 00002690     0161          JUMP    A1              ;AND "CALL" THE ROUTINE
     711                    
     712                    **************************************************************************
     713                    *                                                                        *
     714                    *          DIGSRT                                                        *
     715                    *                                                                        *
     716                    *          THIS IS CALLED ON ENTRY TO DIAGNOSTICS.                       *
     717                    *                                                                        *
     718                    **************************************************************************
     719                    
     720 000026a0           DIGSRT
     721 000026a0     0d3f          CALLR   DIAG_STATE
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   16

         000026b0     0023  
     722 000026c0     0d5f          CALLA   WIPEOUT         ;INITIALIZE THE OBJECT LIST
         000026d0 00000000! 
     723                    
     724                            ;kill that damned announcer proc too.
     725 000026f0     09e0          movi    VOICE_PID,a0
         00002700 00008100  
     726 00002720     5621          clr     a1
     727 00002730     03e1          not     a1
     728 00002740     0d5f          calla   EXISTP
         00002750 00000000! 
     729 00002770     ca03          jrz     mflxno_bleedin_announcer
     730 00002780     0d5f          calla   KILL
         00002790 00000000! 
     731 000027b0           mflxno_bleedin_announcer
     732 000027b0     0d3f          CALLR   DIAG_COLORS     ;RESTART THE COLOR PROCESSES.
         000027c0     0020  
     733                    ;       JSRP    QSNDRST         ;kill any sounds in progress
     734 000027d0     0d5f          calla   nosounds
         000027e0 00000000! 
     735 00002800     0d5f          calla   dpageflip_off
         00002810 00000000! 
     736 00002830     1820          MOVK    1,A0
     737 00002840     0580          MOVE    A0,@DISPLAYON   ;WE NEED TO SEE THE STUFF
         00002850 00000000! 
     738                    
     739 00002870     09c0          movi    HEBLNKINIT,a0
         00002880     0065  
     740 00002890     0580          move    a0,@HEBLNK
         000028a0 c0000010  
     741                    
     742 000028c0     c080          jauc    CLR_SCRN        ;CLEAR THE SCREEN!
         000028d0 00000000! 
     743                    
     744 000028f0           DIAG_STATE
     745 000028f0     5621          CLR     A1
     746 00002900     0d5f          CALLA   KILALL                  ;KILL ABSOLUTELY EVERYONE!
         00002910 00000000! 
     747                    
     748 00002930     09c1          MOVI    DIAG_PID,A1             ;SET OUR ID TO DIAGNOSTICS MAN
         00002940     011e  
     749 00002950     b02d          MOVE    A1,*A13(PROCID)         ;PASS OUR ID TO FORKED PROCESS
         00002960     0020  
     750                    
     751 00002970     09c0          movi    INDIAG,a0
         00002980     ffff  
     752 00002990     0580          move    a0,@GAMSTATE            ;PUT US IN TEST MODE!
         000029a0 00000000! 
     753 000029c0     0960          rets
     754                    
     755                    
     756                    
     757              0004  NUM_DIAG_CYCLE_COLORS   .EQU    4
     758              003c  DIAG_CYCLE_COLOR_START  .EQU    03CH
     759                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   17

     760 00000100                   .BSS    DIAG_CRAM,NUM_DIAG_CYCLE_COLORS*16,1    ;RAM FOR TRANSFER
     761                    
     762                    **************************************************************************
     763                    *                                                                                               *
     764                    * DIAG_COLORS - PROCESS THAT CYCLE COLORS FOR THE DIAGNOSTIC MENUS.             *
     765                    *                                                                                               *
     766                    **************************************************************************
     767 000029d0           DIAG_COLORS
     768 000029d0     098f          MMTM    SP,A0,A1,A7
         000029e0     c100  
     769 000029f0     09c0          MOVI    COLRPID,A0
         00002a00     0114  
     770 00002a10     5621          CLR     A1
     771 00002a20     0581          MOVE    A1,@IRQSKYE
         00002a30 00000000! 
     772 00002a50     0781          move    a1,@PALFRAM,L
         00002a60 00000000! 
     773 00002a80     0d5f          CALLA   KIL1C            ;KILL ALL COLOR UPDATE PROCESSES
         00002a90 00000000! 
     774 00002ab0     09e0          MOVI    DIAGP,A0         ;CREATE DIAGNOSTICS PALLETTE
         00002ac0 00000000! 
     775 00002ae0     0d5f          CALLA   pal_getf
         00002af0 00000000! 
     776 00002b10     09c0          MOVI    COLRPID,A0
         00002b20     0114  
     777 00002b30     5621          CLR     A1
     778 00002b40     03e1          NOT     A1
     779 00002b50     0d5f          CALLA   KILALL
         00002b60 00000000! 
     780 00002b80                   CREATE  COLRPID,PC_TRANSFER
     781 00002c00                   CREATE  COLRPID,LFLASH
     782 00002c80                   CREATE  COLRPID,RGB
     783 00002d00                   CREATE  COLRPID,BPR
     784 00002d80                   CREATE  COLRPID,DECAY
     785 00002e00     09af          MMFM    SP,A0,A1,A7
         00002e10     0083  
     786 00002e20     0960          RETS
     787                    
     788                    **************************************************************************
     789                    *                                                                                               *
     790                    * TABLE DRIVEN COLOR RAM PROCESSES                                       *
     791                    *                                                                                               *
     792                    **************************************************************************
     793                    *       18000B0(11)     -       BPR
     794                    *       18000C0(12)     -       DECAY
     795                    *       18000D0(13)     -       LASER FLASH
     796                    *       18000E0(14)     -       RGB
     797                    
     798 00002e30     0d3f  RGB     CALLR   TABDRIVE
         00002e40     008c  
     799 00002e50 00002ea0'         .LONG   RGBTAB,DIAG_CRAM+30H
     800 00002e90     0008          .WORD   8
     801 00002ea0     7c00  RGBTAB  .WORD   07C00H,001FH,077A0H,0741AH,0FFFFH
     802                    
     803                    *
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   18

     804 00002ef0     0d3f  DECAY   CALLR   TABDRIVE
         00002f00     0080  
     805 00002f10 00002f60'         .LONG   DCATAB,DIAG_CRAM+010H
     806 00002f50     0002          .WORD   2
     807 00002f60     001c  DCATAB  .WORD   001CH,001CH,011CH,021CH,031CH,039CH,239CH,2390H,2388H
     808 00002ff0     2380          .WORD   2380H,4300H,5280H,7180H,6180H,7080H,7000H,6000H,5000H
     809 00003080     4000          .WORD   4000H,3000H,2000H,1000H,0FFFFH
     810                    *
     811 000030d0     0d3f  BPR     CALLR   TABDRIVE
         000030e0     0062  
     812 000030f0 00003140'         .LONG   BPRTAB,DIAG_CRAM
     813 00003130     0001          .WORD   1
     814 00003140     001c  BPRTAB  .WORD   001CH,101CH,201CH,301CH,401CH,501CH,601CH,701CH,7010H
     815 000031d0     7010          .WORD   7010H,7008H,7008H,7000H,7000H,7008H,7008H,7010H,7010H
     816 00003260     701c          .WORD   701CH,701CH,601CH,501CH,401CH,301CH,201CH,101CH,0FFFFH
     817                    
     818                    **************************************************************************
     819                    *                                                                           *
     820                    * LFLASH - PROCESS TO CREATE THE FAMOUS LASER FLASH COLOR                *
     821                    *                                                                           *
     822                    **************************************************************************
     823 000032f0     09c0  LFLASH  MOVI    07FFFH,A0
         00003300     7fff  
     824 00003310     0580          MOVE    A0,@DIAG_CRAM+20H,W
         00003320 00000120- 
     825 00003340                   SLEEPK  2
     826 00003380           LFLASH1
     827 00003380     05a0          MOVE    @RAND,A0,W
         00003390 00000000! 
     828 000033b0     0b80          ANDI    0000001FH,A0
         000033c0 ffffffe0  
     829 000033e0     09e1          MOVI    COLTAB,A1
         000033f0 000034c0' 
     830 00003410     2480          SLL     4,A0
     831 00003420     4001          ADD     A0,A1
     832 00003430     8421          MOVE    *A1,A1,W
     833 00003440     0581          MOVE    A1,@DIAG_CRAM+020H,W
         00003450 00000120- 
     834 00003470                   SLEEPK  6
     835 000034b0     c0e3          JRUC    LFLASH
     836                    
     837 000034c0     0380  COLTAB  .WORD   0380H,1380H,2380H,3380H,4380H,5380H,6380H,7380H,7300H
     838 00003550     7280          .WORD   7280H,7200H,7180H,7080H,7008H,7008H,7010H,7010H,701CH
     839 000035e0     701c          .WORD   701CH,601CH,501CH,409CH,309CH,209CH,219CH,029CH,039CH
     840 00003670     139c          .WORD   139CH,239CH,339CH,539CH,739CH,7390H,7380H,6380H,4380H
     841 00003700     ffff          .WORD   0FFFFH
     842                    
     843                    **************************************************************************
     844                    *                                                                                               *
     845                    * THE TABLE DRIVEN PROCESS                                               *
     846                    *                                                                                               *
     847                    **************************************************************************
     848 00003710           TABDRIVE
     849 00003710     97e0          MOVE    *SP+,A0,L
     850 00003720     960b          MOVE    *A0+,A11,L      ;A11 = TABLE START
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   19

     851 00003730     9609          MOVE    *A0+,A9,L       ;A9 = LOCATION TO STUFF COLOR
     852 00003740     840a          MOVE    *A0,A10,W       ;A10 = SLEEP TIME
     853 00003750           TABDRV1
     854 00003750     4d68          MOVE    A11,A8          ;RESET TO START OF TABLE
     855 00003760           TABDRV2
     856 00003760     9500          MOVE    *A8+,A0,W       ;GET A COLOR
     857 00003770     cefd          JRN     TABDRV1         ;BR = END OF TABLE
     858 00003780     8009          MOVE    A0,*A9,W
     859 00003790     4d40          MOVE    A10,A0
     860 000037a0     09e7          MOVI    TABDRV2,A7
         000037b0 00003760' 
     861 000037d0     c080          JAUC    PRCLSP          ;LOOP SLEEP
         000037e0 00000000! 
     862                    
     863                    **************************************************************************
     864                    *                                                                           *
     865                    * PC_TRANSFER - PROCESS TO TRANSFER CYCLE COLORS TO THE COLOR            *
     866                    *               RAM EVERY TICK.                                          *
     867                    *                                                                           *
     868                    **************************************************************************
     869 00003800           PC_TRANSFER
     870 00003800     09e0          MOVI    DIAG_CRAM,A0
         00003810 00000100- 
     871 00003830     09c1          MOVI    DIAG_CYCLE_COLOR_START,A1
         00003840     003c  
     872 00003850     09c2          MOVI    NUM_DIAG_CYCLE_COLORS,A2
         00003860     0004  
     873 00003870     0d5f          CALLA   pal_set
         00003880 00000000! 
     874 000038a0                   SLOOP   1,PC_TRANSFER
     875                    
     876                    **************************************************************************
     877                    *                                                                        *
     878                    *          CHK_CMOS                                                      *
     879                    *                                                                        *
     880                    *          This is the routine that is called at power up.               *
     881                    *                                                                        *
     882                    *          It checks to see if CMOS adjustments are in tact.             *
     883                    *          IF THE ADJUSTMENTS ARE BAD, OR SET FOR A DIFFERENT            *
     884                    *          GAME OR REVISION, we cause a factory setting to               *
     885                    *          occur.  We then try and validate the all time                 *
     886                    *          HSTD table.  If this is bad we then zero audits.              *
     887                    *          If HSTD table is ok, then we leave audits alone.              *
     888                    *                                                                        *
     889                    **************************************************************************
     890 00003910           CHK_CMOS
     891 00003910     0d3f          CALLR   DIGSRT      ;CLEAR OUT THE SCREEN...(MESSAGE WILL FOLLOW!)
         00003920     fed7  
     892 00003930     0d5f          CALLA   CMOS_VAL
         00003940 00000000! 
     893 00003960     cb13          JRNZ    FAC_TIME
     894 00003970     09e2          MOVI    MESS_BITCHIN,A2          ;POINT AT DATA
         00003980 0000a5e0' 
     895 000039a0     09c3          MOVI    ROBO_WHITE,A3
         000039b0     0202  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   20

     896 000039c0                   JSRP    TOP_BOX
     897 00003a30                   SLEEPK  18H
     898 00003a70                   RETP
     899                    ;        JAUC    WARMSET              ;CMOS IS OK....RETURN!
     900                    *
     901                    *       WE NEED TO FACTORY SET THIS THING (DUE TO BAD SETTINGS.)
     902                    *
     903 00003aa0           FAC_TIME:
     904 00003aa0                   JSRP    GET_FAC                   ;GET THE GAME TO FACTORY SETTINGS!
     905                    ;        JSRP    WW_ADV                    ;WAIT WHILE ADVANCE IS PRESSED
     906                    ;
     907                    ;        JSRP    WT_ADV                    ;NOW WAIT TILL ADVANCE IS PRESSED
     908                    ;
     909 00003b10     0d5f          CALLA   CLR_SCRN                  ;PRESSED....BLANK THE SCREEN AND
         00003b20 00000000! 
     910                                                               ;HOLD TILL HE LETS GO.
     911                    ;
     912                    ;        JSRP    WW_ADV                    ;HOLD CONTROL HERE TILL HE LETS GO
     913 00003b40     c080          JAUC     WARMSET              ;CMOS IS OK....RETURN!
         00003b50 00000000! 
     914                    ;        JRUC    DIAG_JUMP                 ;NOW INTO TEST MODE FOR ADV. BUTTON.
     915                    
     916                    **************************************************************************
     917                    *                                                                        *
     918                    *          GET_FAC                                                       *
     919                    *                                                                        *
     920                    *          THIS IS CALLED TO BRING THE GAME TO A FACTORY SETTINGS        *
     921                    *          STATE.  IT WILL STORE THE FACTORY SETTINGS OR WAIT            *
     922                    *          UNTIL THE DOOR IS OPEN.  IF IT CAN'T GET FACTORY SETTINGS     *
     923                    *          IT WILL PRINT A FAILURE MESSAGE.                              *
     924                    *                                                                        *
     925                    **************************************************************************
     926 00003b70           GET_FAC
     927                    
     928 00003b70           FAC_LOOP
     929 00003b70     0d5f          CALLA   CLR_SCRN                ;CLEAR SCREEN IN ANTICIPATION OF MESSAGE
         00003b80 00000000! 
     930 00003ba0     5600          clr     a0                      ;Full
     931 00003bb0     0d5f          CALLA   FAC_SET
         00003bc0 00000000! 
     932 00003be0     0d5f          CALLA   CMOS_VAL                ;IS IT OK NOW?
         00003bf0 00000000! 
     933 00003c10     ca0b          JRZ     CMOS_FIXED              ;YEP....FINISH CLEANUP!
     934                    
     935 00003c20     09e8          MOVI    MESS_FAIL,A8            ;POINT AT DATA
         00003c30 0000a1b0' 
     936 00003c50                   JSRP    L_MESS                  ;DISPLAY LARRY MESSAGE
     937                    
     938 00003cc0     c00f          JRUC    WAIT_POINT              ;WE'RE DEAD..ADVANCE TAKES US TO TEST MODE!
     939                    
     940 00003cd0           CMOS_FIXED
     941                    *
     942                    *       THIS IS WHERE WE ARE ONCE WE HAVE FACTORY SET....
     943                    *       MESSAGE WOULD GO HERE.
     944                    *
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   21

     945 00003cd0     0d3f          CALLR   CENT_BOX                ;PUT A BOX AROUND IT
         00003ce0     0600  
     946                    
     947 00003cf0     09e8          MOVI    MESS_FAC,A8             ;POINT AT DATA
         00003d00 00000000! 
     948 00003d20                   JSRP    L_MESS                  ;DISPLAY LARRY MESSAGE
     949                    
     950                    *       NOW.....CLEAR HIGH SCORE TABLE
     951                    *       CLEAR OUT THE AUDITS.
     952                    
     953 00003d90     0d5f          CALLA   FAC_STUF                ;DO REST OF FULL FACTORY STUFF!
         00003da0 00000000! 
     954                    
     955                    *       AT THIS POINT WE HANG WAITING FOR THE ADVANCE SWITCH.
     956                    
     957 00003dc0           WAIT_POINT
     958 00003dc0                   RETP                            ;NOW LET CALLER TAKE OVER.
     959                    
     960                    **************************************************************************
     961                    *                                                                        *
     962                    *          WT_ADV                                                        *
     963                    *                                                                        *
     964                    *          WAIT TILL ADVANCE.  THIS HOLDS CONTROL UNTIL ADVANCE          *
     965                    *          BUTTON IS PRESSED.                                            *
     966                    *                                                                        *
     967                    **************************************************************************
     968                    ;WT_ADV:
     969                    ;       SLEEPK  2
     970                    ;
     971                    ;WT_A6: 
     972                    ;       CALLR   GET_ADV               ;SCAN THE BUTTON
     973                    ;        JRNZ    WT_ADV                ;NOT PRESSED.
     974                    ;        RETP
     975                    ;
     976                    
     977                    ;**************************************************************************
     978                    ;*                                                                        *
     979                    ;*           WW_ADV                                                        *
     980                    ;*                                                                        *
     981                    ;*          WAIT WHILE ADVANCE.  THIS HOLDS CONTROL WHILE ADVANCE         *
     982                    ;*          BUTTON IS HELD (OR STUCK).                                    *
     983                    ;*                                                                        *
     984                    ;**************************************************************************
     985                    ;WW_ADV:
     986                    ;       SLEEPK  2
     987                    ;        CALLR   GET_ADV
     988                    ;        JRZ     WW_ADV
     989                    ;        RETP
     990                    ;
     991                    ;**************************************************************************
     992                    ;*                                                                        *
     993                    ;*          GET_ADV                                                       *
     994                    ;*                                                                        *
     995                    ;*          THIS GETS PHYSICAL STATE OF ADVANCE BUTTON.                   *
     996                    ;*                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   22

     997                    ;*          .EQ.    PRESSED                                               *
     998                    ;*          .NE.    OPEN                                                  *
     999                    ;*                                                                        *
    1000                    ;**************************************************************************
    1001                    ;GET_ADV:
    1002                    ;        MMTM    SP,A0
    1003                    ;        MOVE    @COINS,A0,W               ;FETCH COIN SWITCHES (LOOKING FOR ADVANCE)
    1004                    ;        ANDI    ADV_BIT,A0                ;KEEP ADVANCE BIT.
    1005                    ;       MMFM    SP,A0
    1006                    ;       RETS
    1007                    ;
    1008                    ;**************************************************************************
    1009                    ;*                                                                        *
    1010                    ;*          CK_DOOR                                                *
    1011                    ;*                                                                        *
    1012                    ;*          THIS IS CALLED TO SEE IF THE FRONT DOOR (MEMORY               *
    1013                    ;*          PROTECT SWITCH IS OPEN.                                       *
    1014                    ;*                                                                        *
    1015                    ;*          .NE.    OPEN  (OK TO WRITE CMOS)                              *
    1016                    ;*          .EQ.    CLOSED (CAN'T WRITE CMOS)                             *
    1017                    ;*                                                                        *
    1018                    ;**************************************************************************
    1019                    ;CK_DOOR:
    1020                    ;        MMTM    SP,A0
    1021                    ;        MOVE    @COINS,A0,W               ;FETCH COIN SWITCHES (LOOKING FOR ADVANCE)
    1022                    ;        ANDI    DOOR_BIT,A0               ;KEEP COIN DOOR MEMORY PROTECT.
    1023                    ;       MMFM    SP,A0
    1024                    ;       RETS
    1025                    ;
    1026                    **************************************************************************
    1027                    *                                                                        *
    1028                    *          GET_MENU                                                      *
    1029                    *                                                                        *
    1030                    *          This routine is called (via JSRP) to display a menu on        *
    1031                    *          screen and receive a selection from the operator.             *
    1032                    *                                                                        *
    1033                    *          The menu descriptor is passed in A8.                          *
    1034                    *                                                                        *
    1035                    *          The selection number is returned in a8. (line 1 = 1)          *
    1036                    *          The routine address is returned in a9.                        *
    1037                    *          A10 is returned non-zero if advance was the button used       *
    1038                    *                                                                        *
    1039                    *          A menu (pointed to by A8) is defined as follows:              *
    1040                    *                                                                        *
    1041                    *                      FONT TO BE USED             (LONG)                *
    1042                    *                      X FOR LEFT MARGIN           (WORD)                *
    1043                    *                      Y FOR TOP LINE              (WORD)                *
    1044                    *                      DY PER ENTRY                (WORD)                *
    1045                    *                      TEXT_COLOR                  (WORD)                *
    1046                    *                      HEIGHT OF SELECTION BAR     (WORD)                *
    1047                    *                      DX FROM TOP OF TEXT TO SEL. BAR  (WORD)           *
    1048                    *                                                                        *
    1049                    *          A9 POINTS AT ENTRY TO START WITH                              *
    1050                    *                                                                        *
    1051                    *          Then for each entry:                                          *
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   23

    1052                    *                                                                        *
    1053                    *                      TEXT POINTER        (LONG)                        *
    1054                    *                      ACTIVATION ROUTINE  (LONG)                        *
    1055                    *                                                                        *
    1056                    *          The list is terminated by a zero.                             *
    1057                    *                                                                        *
    1058                    *          This routine forks a separate process to do the work          *
    1059                    *          for it.  Therefore the caller has full use of                 *
    1060                    *          the PDATA area.                                               *
    1061                    *                                                                        *
    1062                    **************************************************************************
    1063                    *
    1064                    *        Equates for GET_MENU slave process.
    1065                    *
    1066              0100  MEN_OFF   EQU     PDATA                ;WORD-OFFSET INTO MENU OF SELECTION
    1067              0110  MEN_ROUT  EQU     MEN_OFF+WORD_SIZE    ;LONG-ROUTINE FOR SELECTION
    1068              0130  MEN_ROM   EQU     MEN_ROUT+LONG_SIZE   ;LONG-POINTER TO ROM STRUCTURE
    1069              0150  MEN_ULX   EQU     MEN_ROM+LONG_SIZE    ;WORD-LEFT X  (CENTER X WHEN CENTERING)
    1070              0160  MEN_ULY   EQU     MEN_ULX+WORD_SIZE    ;WORD-TOP Y
    1071              0170  MEN_DY    EQU     MEN_ULY+WORD_SIZE    ;WORD-Y UNITS PER ENTRY
    1072              0180  MEN_COLR  EQU     MEN_DY+WORD_SIZE     ;WORD-COLOR FOR ENTRIES
    1073              0190  MEN_BAR   EQU     MEN_COLR+WORD_SIZE   ;WORD-HEIGHT OF SELECTION BAR
    1074              01a0  MEN_BDY   EQU     MEN_BAR+WORD_SIZE    ;WORD-DY FROM TOP OF TEXT TO TOP OF BAR.
    1075              01b0  MEN_BDX   EQU     MEN_BDY+WORD_SIZE    ;WORD-DX FROM LEFT OF WORD TO LEFT OF BAR
    1076              01c0  MEN_BWID  EQU     MEN_BDX+WORD_SIZE    ;WORD-WIDTH OF BAR
    1077              01d0  MEN_SCOL  EQU     MEN_BWID+WORD_SIZE   ;WORD-COLOR OF SELECTED TEXT
    1078              01e0  MEN_TPTR  EQU     MEN_SCOL+WORD_SIZE    ;LONG-POINTER TO BEGINNING OF TEXT ENTRIES.
    1079              0200  MEN_ENTS  EQU     MEN_TPTR+LONG_SIZE   ;WORD-NUMBER OF ENTRIES IN MENU
    1080              0210  MEN_CUR   EQU     MEN_ENTS+WORD_SIZE   ;WORD-CURRENT SELECTION (1ST IS 1)
    1081              0220  MEN_WALK  EQU     MEN_CUR+WORD_SIZE    ;WORD-NUMBER OF ENTRY WE'RE ON AS WE WALK
    1082              0230  MEN_STIK  EQU     MEN_WALK+WORD_SIZE   ;LONG-"STUCK" STATE OF SWITCHES
    1083              0250  MEN_ACT   EQU     MEN_STIK+LONG_SIZE   ;LONG-SWITCH WE'RE ACTING ON. (BIT)
    1084              0270  MEN_TYPO  EQU     MEN_ACT+LONG_SIZE    ;WORD-TYPOMATIC COUNTER
    1085              0280  MEN_HITS  EQU     MEN_TYPO+WORD_SIZE   ;WORD-CONSECUTIVE TYPOMATIC HITS
    1086              0290  MEN_ADV   EQU     MEN_HITS+WORD_SIZE   ;WORD-NON-ZERO IF ADVANCE WAS BUTTON USED
    1087                    
    1088              0009  WORD_ENTS    EQU    (MEN_TPTR-MEN_ULX)/WORD_SIZE   ;NUMBER OF WORD ENTRIES
    1089                    
    1090 00003df0           B_MENU: 
    1091 00003df0     09e7          MOVI    BD_SLAVE,A7
         00003e00 000040a0' 
    1092 00003e20     c003          JRUC    GMJMP
    1093                    
    1094 00003e30           GET_MENU:
    1095 00003e30     09e7          MOVI    GM_SLAVE,A7             ;THIS IS ROUTINE
         00003e40 00004110' 
    1096 00003e60           GMJMP:
    1097 00003e60     09c1          MOVI    MENU_PID,A1             ;THIS IS ID
         00003e70     0ac1  
    1098 00003e80     0d5f          CALLA   GETPRC                  ;CREATE IT
         00003e90 00000000! 
    1099                    
    1100 00003eb0     4c0a          MOVE    A0,A10                  ;SAVE HIS POINTER
    1101                    
    1102 00003ec0           GM1:    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   24

    1103 00003ec0                   SLEEPK  2
    1104                    
    1105 00003f00     09c0          MOVI    MDUN_PID,A0
         00003f10     0ac2  
    1106 00003f20     09e1          MOVI    0FFFFH,A1
         00003f30 0000ffff  
    1107 00003f50     0d5f          CALLA   EXISTP                  ;WAIT FOR ID TO CHANGE TO THIS!
         00003f60 00000000! 
    1108                    
    1109 00003f80     caf3          JRZ     GM1                     ;LOOP UNTIL IT EXISTS!
    1110                    
    1111 00003f90     b548          MOVE    *A10(MEN_OFF),A8        ;RETURN OFFSET OF SELECTION
         00003fa0     0100  
    1112 00003fb0     b749          MOVE    *A10(MEN_ROUT),A9,L     ;AND ROUTINE THAT WAS SELECTED.
         00003fc0     0110  
    1113 00003fd0     b54a          MOVE    *A10(MEN_ADV),A10       ;INDICATE WHETHER ADVANCE WAS USED
         00003fe0     0290  
    1114                    
    1115 00003ff0     09c0          MOVI    MDUN_PID,A0
         00004000     0ac2  
    1116 00004010     09e1          MOVI    0FFFFH,A1
         00004020 0000ffff  
    1117 00004040     0d5f          CALLA   KILALL                  ;KILL THE HANGING MENU GETTER!
         00004050 00000000! 
    1118 00004070                   RETP                            ;AND RETURN
    1119                    
    1120                            
    1121                    **************************************************************************
    1122                    *                                                                        *
    1123                    *          GM_SLAVE                                                      *
    1124                    *                                                                        *
    1125                    *          This displays the menu.......moves the selection bar          *
    1126                    *          and returns the selection information by stuffing             *
    1127                    *          it in its process area and changing its ID to                 *
    1128                    *          MDUN_PID once selection is made.                              *
    1129                    *                                                                        *
    1130                    *          On entry....A8 points at the GET_MENU data structure.         *
    1131                    *                      A9 is which entry to start with selected.         *
    1132                    *                                                                        *
    1133                    **************************************************************************
    1134 000040a0           BD_SLAVE
    1135 000040a0     0d3f          CALLR   MENU_BORDER          ;DRAW THE BORDER FOR SELCTIONS.
         000040b0     03f6  
    1136 000040c0                   SLEEP   3
    1137                    
    1138 00004110           GM_SLAVE
    1139 00004110                   JSRP    ST_STICK          ;TELL STICK(S) AND BUTTONS WE'RE STARTING.
    1140                    
    1141 00004180     0d3f          CALLR   STUFF_MENU_PROCESS   ;MOVE DATA INTO PDATA AREA
         00004190     01e3  
    1142                    
    1143                    *       PLOT ENTIRE MENU
    1144                    *
    1145                    *       DO_MENU_LINE WILL RETURN CARRY SET
    1146                    *       WHEN WE GET BEYOND THE END.
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   25

    1147                    
    1148 000041a0     1820          MOVK    1,A0                        ;SETUP FOR LINE 1.
    1149                    
    1150 000041b0           DO_ANOTHER_LINE
    1151                    
    1152 000041b0     b00d          MOVE    A0,*A13(MEN_WALK),W       ;WALK THROUGH.
         000041c0     0220  
    1153                    
    1154 000041d0                   JSRP    DO_MENU_LINE              ;PUT OUT LINE IN A0.
    1155 00004240     b5a0          MOVE    *A13(MEN_WALK),A0,W       ;GET BACK THE COUNTER
         00004250     0220  
    1156                    
    1157 00004260     1020          INC     A0                        ;MOVE TO NEXT ENTRY.
    1158 00004270     b5a1          MOVE    *A13(MEN_ENTS),A1,W       ;SEE IF WE'RE DONE.
         00004280     0200  
    1159 00004290     4820          CMP     A1,A0
    1160 000042a0     c2f0          JRLS    DO_ANOTHER_LINE
    1161                    *
    1162                    *       MAIN MENU PLOTTED......NOW LET THE DMA UN-LOAD BEFORE PLOTTING HELP
    1163                    *
    1164 000042b0                   SLEEP   2
    1165 00004300     0d3f          CALLR   PLOT_HELP                 ;PLOT HELP FOR 1ST IF NECESSARY
         00004310     03b3  
    1166                    
    1167                    *       SLEEPK   2                        ;NOW MAKE SURE THE HELP GETS PLOTTED
    1168                    *
    1169                    *       NOW WE JUST WANT TO UPDATE BASED ON STICK...ACT
    1170                    *       ON BUTTONS!
    1171                    *
    1172                    *       RESPONSES:   UP....DOWN....BUTTON....NOTHING....
    1173                    *
    1174                    *       NOTHING = 0
    1175                    *       UP = 1
    1176                    *       DOWN = 2
    1177                    *       BUTTON = 3
    1178                    *
    1179                    *       A0 = RESPONSE
    1180                    *       A1 = MEN_CUR VALUE.
    1181                    
    1182 00004320           MENU_LOOP
    1183 00004320                   SLEEPK  1
    1184 00004360     0d5f          calla   READ_DIP                ;Get the current dip switch bits
         00004370 00000000! 
    1185 00004390     1f00          btst    DPTEST_B,a0
    1186 000043a0     0300          jrnz    mflxdipon
    1187                    
    1188                    ;       move    @COINS,a5
    1189                    ;       btst    4,a5
    1190                    ;       jrnz    DIAG_EX                 ;Test switch off?
    1191 000043b0           mflxdipon
    1192 000043b0     09e5          MOVI    MENU_TYPO,A5
         000043c0 0004000e  
    1193 000043e0                   JSRP    GETSTICK                ;ASK THE STICK HANDLER.......
    1194 00004450     4c00          MOVE    A0,A0                   ;SEE WHAT GET_STICK RETURNED.
    1195 00004460     caeb          JRZ     MENU_LOOP               ;MENU...(PAUSE)  NOTHING.
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   26

    1196                    
    1197 00004470     b5a1          MOVE    *A13(MEN_CUR),A1,W      ;GET CURRENT ENTRY...IN A1
         00004480     0210  
    1198                    
    1199 00004490     0b40          cmpi    4,a0
         000044a0     fffb  
    1200 000044b0     ca71          jrz     menu_escape
    1201                    
    1202 000044c0     0b40          CMPI    3,A0                    ;BUTTON?
         000044d0     fffc  
    1203 000044e0     ca38          JRZ     MENU_BUTTON             ;YEP....WE'RE OUT OF HERE.
    1204                    
    1205 000044f0     0b40          CMPI    2,A0
         00004500     fffd  
    1206 00004510     ca10          JRZ     MENU_DOWN               ;ITS DOWN....
    1207                    *
    1208                    *       REQUEST TO GO UP....ARE WE AT mflx1
    1209                    *
    1210 00004520     0b41          CMPI    1,A1                    ;WELL?
         00004530     fffe  
    1211 00004540     c2dd          JRLS    MENU_LOOP               ;YEP....IGNORE
    1212                    
    1213 00004550                   JSRP    UN_SELECT               ;PUT BACK THE OLD "CURRENT ONE
    1214 000045c0     b5a0          MOVE    *A13(MEN_CUR),A0,W      ;GET CURRENT ENTRY
         000045d0     0210  
    1215 000045e0     1420          DEC     A0                      ;MAKE ONE LESS.
    1216 000045f0     09c3          movi    d_up_snd,a3
         00004600     03d4  
    1217 00004610     c010          JRUC    JOIN_DOWN               ;NOW PLOT THE NEW ONE.
    1218                    
    1219 00004620           MENU_DOWN:
    1220 00004620     b5a2          MOVE    *A13(MEN_ENTS),A2,W     ;GET NUMBER IN MENU
         00004630     0200  
    1221 00004640     4841          CMP     A2,A1                   ;ARE WE AT MAX
    1222 00004650     c9cc          JRHS    MENU_LOOP               ;YEP...NO ACTION
    1223                    
    1224 00004660                   JSRP    UN_SELECT               ;PUT BACK THE OLD "CURRENT ONE
    1225                    
    1226 000046d0     b5a0          MOVE    *A13(MEN_CUR),A0,W      ;GET CURRENT ENTRY
         000046e0     0210  
    1227 000046f0     1020          INC     A0                      ;MAKE THIS THE NEXT.
    1228 00004700     09c3          movi    d_dn_snd,a3
         00004710     03d5  
    1229                    
    1230 00004720           JOIN_DOWN:
    1231 00004720                   PUSHP   a3
    1232 00004730     b00d          MOVE    A0,*A13(MEN_CUR),W      ;PUT BACK
         00004740     0210  
    1233 00004750                   JSRP    DO_MENU_LINE            ;PUT OUT LINE IN A0.
    1234                    *
    1235                    *       MAKE THE "DINK" SOUND HERE FOR ENTRY TO ENTRY MOVEMENT
    1236                    *
    1237 000047c0     0d3f          CALLR   PLOT_HELP               ;PLOT HELP NEW ONE
         000047d0     0367  
    1238 000047e0                   SLEEPK  1                       ;DELAY BEEP 1 FRAME
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   27

    1239 00004820                   PULLP   a3
    1240 00004830     0d5f          calla   SNDSND
         00004840 00000000! 
    1241                    
    1242 00004860     c0ab          JRUC    MENU_LOOP               ;AND WAIT FOR NEXT RESPONSE.
    1243                    *
    1244                    *       CONTROL COMES HERE WHEN A BUTTON IS PRESSED
    1245                    *
    1246                    *         The selection number is returned in a8. (line 1 = 1)          
    1247                    *         The routine address is returned in a9.                        
    1248                    
    1249 00004870           MENU_BUTTON:
    1250                    *
    1251                    *       A0 HAS A 3.
    1252                    *       A2 HAS THE BUTTON BIT.....IS IT ADVANCE?
    1253                    *
    1254 00004870     b7a0          MOVE    *A13(MEN_ROM),A0,L
         00004880     0130  
    1255 00004890     0b60          CMPI    MEN_ADJ,A0              ; SPECIAL CASE FOR MENU ADJ
         000048a0 ffffffff! 
    1256 000048c0     cb15          JRNZ    MBNOTADJ
    1257 000048d0     0d5f          CALLA   CKDIP
         000048e0 00000000! 
    1258 00004900     cb11          JRNZ    MBNOTADJ                ; NOT USING DIP SWITCHES
    1259 00004910     b5a0          MOVE    *A13(MEN_CUR),A0,W      ; GET THE SELECT ITEM
         00004920     0210  
    1260 00004930     0b40          CMPI    2,A0                    ; "STANDARD PRICING"
         00004940     fffd  
    1261 00004950     ca06          JRZ     MBABORT
    1262 00004960     0b40          CMPI    3,A0                    ; "CUSTOM PRICING"
         00004970     fffc  
    1263 00004980     ca03          JRZ     MBABORT
    1264 00004990     0b40          CMPI    4,A0                    ; "FREE PLAY"
         000049a0     fffb  
    1265 000049b0     cb06          JRNZ    MBNOTADJ
    1266 000049c0           MBABORT
    1267                    
    1268 000049c0     09c3          movi    d_enter_snd,a3
         000049d0     03d6  
    1269 000049e0     0d5f          calla   SNDSND
         000049f0 00000000! 
    1270                    
    1271 00004a10     c090          JRUC    MENU_LOOP
    1272 00004a20           MBNOTADJ
    1273 00004a20     5600          CLR     A0                      ;NOT ADVANCE
    1274                    
    1275 00004a30           IS_ADV: 
    1276 00004a30     b00d          MOVE    A0,*A13(MEN_ADV),W      ;NON ZERO IF IT WAS ADVANCE
         00004a40     0290  
    1277                    
    1278 00004a50                   JSRP    BUTTON_STALL            ;HIGHLIGHT SELECTION AND HANG ON BUTTON
    1279                    
    1280 00004ac0     b5a0          MOVE    *A13(MEN_CUR),A0,W      ;GET "CURRENT" ENTRY.
         00004ad0     0210  
    1281 00004ae0     0d3f          CALLR   GET_MENU_DATA           ;A1=CURRENT_OFFSET  A2=TEXT  A3=ROUTINE
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   28

         00004af0     031c  
    1282 00004b00     b00d          MOVE    A0,*A13(MEN_OFF),W      ;STORE THE OFFSET (CHOICE NUM)
         00004b10     0100  
    1283 00004b20     b26d          MOVE    A3,*A13(MEN_ROUT),L     ;AND THE ROUTINE POINTER
         00004b30     0110  
    1284 00004b40     09c0          MOVI    MDUN_PID,A0
         00004b50     0ac2  
    1285 00004b60     b00d          MOVE    A0,*A13(PROCID),W       ;CHANGE OUR ID.
         00004b70     0020  
    1286                    
    1287 00004b80           MENU_DONE:
    1288 00004b80                   SLEEPK  20
    1289 00004bc0     c0fb          JRUC    MENU_DONE               ;NOW HANG TILL DISPATCHER SEES ID.
    1290                    
    1291 00004bd0           menu_escape:
    1292 00004bd0     09c3          movi    d_escape_snd,a3
         00004be0     03d7  
    1293 00004bf0     0d5f          calla   SNDSND
         00004c00 00000000! 
    1294 00004c20     5600          clr     a0
    1295 00004c30     b00d          move    a0,*a13(MEN_ADV),W
         00004c40     0290  
    1296 00004c50                   JSRP    BUTTON_STALL
    1297 00004cc0     b5a0          move    *a13(MEN_CUR),a0,W
         00004cd0     0210  
    1298 00004ce0     0d3f          callr   GET_MENU_DATA
         00004cf0     02fc  
    1299 00004d00     5600          clr     a0
    1300 00004d10     b00d          move    a0,*a13(MEN_OFF),W
         00004d20     0100  
    1301 00004d30     b20d          move    a0,*a13(MEN_ROUT),L
         00004d40     0110  
    1302 00004d50     09c0          movi    MDUN_PID,a0
         00004d60     0ac2  
    1303 00004d70     b00d          move    a0,*a13(PROCID),W
         00004d80     0020  
    1304 00004d90     c0de          jruc    MENU_DONE
    1305                    
    1306                    **************************************************************************
    1307                    *                                                                        *
    1308                    *                 MENU UTILITIES                                         *
    1309                    *                                                                        *
    1310                    **************************************************************************
    1311                    **************************************************************************
    1312                    *                                                                        *
    1313                    *          BUTTON_STALL                                                  *
    1314                    *                                                                        *
    1315                    *          THIS IS CALLED WHEN THE MENU GETS A BUTTON HIT.               *
    1316                    *          A1 HAS THE BIT OF THE BUTTON.                                 *
    1317                    *                                                                        *
    1318                    *          WE PAINT THE MENU SQUARE TO FEEDBACK THE HIT.                 *
    1319                    *                                                                        *
    1320                    *          THEN WE HANG ON THE BUTTON UNTIL ITS LET GO.                  *
    1321                    *                                                                        *
    1322                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   29

    1323 00004da0           BUTTON_STALL:
    1324 00004da0     0782          MOVE    A2,@LAST_BUT,L       ;PUSH THE BUTTON STATE
         00004db0 00000040- 
    1325                    
    1326 00004dd0     05a0          MOVE    @SCODE,A0,W          ;NO CASH FOR REPEAT SOUND CODES
         00004de0 00000000! 
    1327 00004e00     05a1          MOVE    @DCODE,A1,W
         00004e10 00000000! 
    1328 00004e30     5401          OR      A0,A1
    1329 00004e40     cb2c          JRNZ    DONT_WAIT            ;ITS A SOUND REPEAT....DON'T HOLD EITHER!
    1330                    
    1331 00004e50     09c3          movi    d_enter_snd,a3
         00004e60     03d6  
    1332 00004e70     0d5f          calla   SNDSND
         00004e80 00000000! 
    1333                    
    1334 00004ea0     b5a0          MOVE    *A13(MEN_CUR),A0,W   ;GET CURRENT SELECTION
         00004eb0     0210  
    1335 00004ec0     09c1          MOVI    COLOR_YELLOW,A1
         00004ed0     0505  
    1336 00004ee0     0d3f          CALLR   MENU_BAR             ;CHANGE THE BAR COLOR.
         00004ef0     0164  
    1337                    
    1338 00004f00     0d3f          CALLR   GET_MENU_DATA             ;GET OUR TEXT POINTER BACK
         00004f10     02da  
    1339 00004f20     09c1          MOVI    ROBO_WHITE,A1            ;WHITE ON ORANGE DURING HOT MOMENT
         00004f30     0202  
    1340 00004f40                   JSRP    MENU_TEXT                 ;AND WRITE INVERTED TEXT
    1341                    
    1342 00004fb0     07a8          MOVE    @LAST_BUT,A8,L            ;GET BUTTON BACK
         00004fc0 00000040- 
    1343 00004fe0     09c9          MOVI    08H,A9                    ;MINIMUM TIME FOR BUTTON HIGHLITE
         00004ff0     0008  
    1344                    
    1345                    ;        MOVI    2AH,A10              ;.5 SECONDS OF ADVANCE HOLD-DOWN
    1346                    *                                     ;WILL EXIT TEST MODE.
    1347 00005000           WAIT_FOR_RELEASE:
    1348                    ;        CMPI    ADV_HIGH,A8               ;IS IT ADVANCE BUTTON?
    1349                    ;        JRNZ    NOT_ADV                   ;NOPE.....NEVER MIND
    1350                    
    1351                    ;        DEC     A10                  ;1 LESS TIME UNIT
    1352                    ;        JRZ     DIAG_EX            ;IF HE HOLDS ADVANCE...WE'RE GONE!
    1353                    
    1354                    ;NOT_ADV:
    1355 00005000                   SLEEPK  1
    1356                            
    1357 00005040     4d29          MOVE    A9,A9                ;REDUCE FOR HELD TIME
    1358 00005050     ca01          JRZ     WAIT_1               ;ZEROED OUT ALREADY.
    1359 00005060     1429          DEC     A9
    1360                    
    1361 00005070           WAIT_1:
    1362 00005070     0d3f          CALLR   FORM_SWS        ;WAIT FOR THIS ONE TO GO TO ZERO
         00005080     020c  
    1363 00005090     5100          AND     A8,A0                ;IS OUR BUTTON STILL DOWN?
    1364 000050a0     cbf5          JRNZ    WAIT_FOR_RELEASE
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   30

    1365                    *
    1366                    *       ITS RELEASED...NOW SHOW ORANGE BAR FOR MINIMUM TIME
    1367                    
    1368 000050b0     1029          INC     A9                   ;MAKE SURE A9 HAS 1 OR MORE
    1369 000050c0           WAIT_2:
    1370 000050c0                   SLEEPK  1
    1371 00005100     3ca9          DSJS    A9,WAIT_2
    1372                    
    1373 00005110           DONT_WAIT:
    1374 00005110     b5a0          MOVE    *A13(MEN_CUR),A0,W   ;GET CURRENT SELECTION
         00005120     0210  
    1375 00005130     5621          CLR     A1                   ;ERASE BAR
    1376 00005140     0d3f          CALLR   MENU_BAR             ;CHANGE THE BAR COLOR.
         00005150     013e  
    1377                    
    1378 00005160     0d3f          CALLR   GET_MENU_DATA             ;GET OUR TEXT POINTER BACK
         00005170     02b4  
    1379 00005180     b5a1          MOVE    *A13(MEN_COLR),A1,W       ;RE-PLOT THE NORMAL TEXT
         00005190     0180  
    1380 000051a0                   JSRP    MENU_TEXT               
    1381                    
    1382 00005210                   SLEEPK  2                    ;NOW GIVE SOME BOUNCE PROTECTION.
    1383                    
    1384 00005250                   RETP
    1385                    
    1386 00005280       57          .STRING "WWRREESSTTLLEEMMAANNIIAA  CCOOPPYYRRIIGGHHTT  11999955  "
    1387 00005440       4d          .STRING "MMIIDDWWAAYY  MMAANNUUFFAACCTTUURRIINNGG  CCOOMMPPAANNYY..  "
    1388 00005620       41          .STRING "AALLLL  RRIIGGHHTTSS  RREESSEERRVVEEDD..  "
    1389 00005770       44          .STRING "DDEESSIIGGNNEEDD  BBYY::  MMAARRKK  TTUURRMMEELLLL  "
    1390 00005910       53          .STRING "SSAALL  DDIIVVIITTAA  JJAASSOONN  SSKKIILLEESS  "
    1391 00005a90       4a          .STRING "JJOOSSHH  TTSSUUII  JJAAKKEE  SSIIMMPPSSOONN  "
    1392 00005c00       45          .STRING "EEUUGGEENNEE  GGEEEERR  TTOONNYY  GGOOSSKKIIEE  "
    1393 00005d80       4d          .STRING "MMIIKKEE  LLYYNNCCHH  JJAAMMIIEE  RRIIVVEETTTT  "
    1394 00005f00       53          .STRING "SSHHAAWWNN  LLIIPPTTAAKK  "
    1395 00005fd0                   .even
    1396                    
    1397                    **************************************************************************
    1398                    *                                                                        *
    1399                    *          STUFF_MENU_PROCESS                                            *
    1400                    *                                                                        *
    1401                    *          THIS IS CALLED TO STUFF THE MENU ROM DATA INTO THE            *
    1402                    *          CURRENT PROCESSES PDATA AREA.                                 *
    1403                    *                                                                        *
    1404                    **************************************************************************
    1405 00005fd0           STUFF_MENU_PROCESS:
    1406 00005fd0     098f          MMTM    SP,A0,A1,A2,A3,A8
         00005fe0     f080  
    1407 00005ff0     4da0          MOVE    A13,A0               ;POINT IN PROCESS AREA
    1408 00006000     0b00          ADDI    MEN_ROM,A0           ;THIS IS WHERE 1ST TIDBIT GOES
         00006010     0130  
    1409 00006020     9300          MOVE    A8,*A0+,L            ;STORE OUR BASE POINTER IN STRUCTURE
    1410 00006030     0b08          ADDI    MR_WORDS,A8          ;MOVE TO WORD LIST
         00006040     0070  
    1411                    
    1412 00006050     09c2          MOVI    WORD_ENTS,A2         ;NOW THIS MANY MORE WORDS.
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   31

         00006060     0009  
    1413                    
    1414 00006070           GMS1:   
    1415 00006070     9501          MOVE    *A8+,A1
    1416 00006080     9020          MOVE    A1,*A0+
    1417 00006090     3c62          DSJS    A2,GMS1
    1418                    *
    1419                    *       ALL THE MENU PARAMETERS ARE NOW IN THE PDATA AREA.
    1420                    *       A8 POINTS AT THE FIRST ITEM TO DISPLAY.
    1421                    *
    1422 000060a0     b30d          MOVE    A8,*A13(MEN_TPTR),L  ;STORE IN PROCESS AREA.
         000060b0     01e0  
    1423                    *
    1424                    *       NOW WE WANT TO FIND THE NUMBER OF ENTRIES IN THE MENU
    1425                    *
    1426 000060c0     5600          CLR     A0                        ;START AT mflx1.
    1427 000060d0           HOW_MANY:
    1428 000060d0     1020          INC     A0                        ;MOVE TO NEXT ENTRY.
    1429 000060e0     0d3f          CALLR   GET_MENU_DATA             ;GET THE PARAMETERS FOR THIS ENTRY
         000060f0     01bc  
    1430 00006100     4c42          MOVE    A2,A2                     ;AND SEE IF A2=0
    1431 00006110     cbfb          JRNZ    HOW_MANY                  ;ITS REAL.....PUT IT UP.
    1432                    
    1433 00006120     1420          DEC     A0                        ;PREVIOUS LINE WAS THE LAST.
    1434 00006130     b00d          MOVE    A0,*A13(MEN_ENTS),W       ;STUFF NUMBER IN MENU.
         00006140     0200  
    1435                    
    1436 00006150     4d29          MOVE    A9,A9                     ;DID BOZO PASS ZERO AS CURRENT?
    1437 00006160     ca03          JRZ     USE_LAST
    1438 00006170     4809          CMP     A0,A9                     ;MAKE SURE ITS NOT TOO HIGH
    1439 00006180     c301          JRHI    USE_LAST                  ;A9 IS TOO HIGH
    1440 00006190     4d20          MOVE    A9,A0                     ;USE THE ONE PAST
    1441                    
    1442 000061a0           USE_LAST:
    1443 000061a0     b00d          MOVE    A0,*A13(MEN_CUR),W   ;MAKE ENTRY "1" CURRENT.
         000061b0     0210  
    1444 000061c0     09af          MMFM    SP,A0,A1,A2,A3,A8
         000061d0     010f  
    1445 000061e0     0960          RETS
    1446                    
    1447                    **************************************************************************
    1448                    *                                                                        *
    1449                    *          DO_MENU_LINE                                                  *
    1450                    *                                                                        *
    1451                    *          A0 HAS THE LINE TO DO. (1 THROUGH N).                         *
    1452                    *          PRINT TEXT NORMAL IF NOT "MEN_CUR".                           *
    1453                    *          PRINT INVERT BAR FOLLOWED BY BLACK TEXT IF                    *
    1454                    *          ITS THE CURRENT ENTRY.                                        *
    1455                    *                                                                        *
    1456                    **************************************************************************
    1457 000061f0           DO_MENU_LINE:
    1458 000061f0     0d3f          CALLR   GET_MENU_DATA             ;GET "CURRENT" IN A1
         00006200     01ab  
    1459 00006210     4801          CMP     A0,A1                     ;IS IT "CURRENT" ENTRY?
    1460 00006220     ca0c          JRZ     DO_CURRENT_ENT            ;YEP....DO INVERSE STUFF
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   32

    1461                    *
    1462                    *       A0 HAS OFFSET (FOR POSITIONING)
    1463                    *       A2 HAS TEXT POINTER (FOR MESSAGE)
    1464                    *       A1 NEEDS COLOR FOR MESSAGE.
    1465                    *
    1466 00006230     b5a1          MOVE    *A13(MEN_COLR),A1,W       ;USE THE NORMAL ENTRY COLOR
         00006240     0180  
    1467 00006250                   JSRP    MENU_TEXT                 ;PUT UP THE "TEXT" PORTION.
    1468 000062c0                   RETP                              ;AND RETURN
    1469                    
    1470 000062f0           DO_CURRENT_ENT: 
    1471 000062f0     09c1          MOVI    ROBO_WHITE,A1            ;DO THE BAR IN WHITE (AT A0 HEIGHT)
         00006300     0202  
    1472 00006310     0d3f          CALLR   MENU_BAR                  ;PUT IT UP (A0 PRESERVED)
         00006320     0021  
    1473                    
    1474 00006330     0d3f          CALLR   GET_MENU_DATA             ;GET OUR TEXT POINTER BACK
         00006340     0197  
    1475 00006350     b5a1          MOVE    *A13(MEN_SCOL),A1,W       ;GET "SELECTED" COLOR
         00006360     01d0  
    1476 00006370                   JSRP    MENU_TEXT                 ;AND WRITE INVERTED TEXT
    1477 000063e0                   RETP                              ;THAT'S ALL FOLKS.
    1478                    
    1479                    **************************************************************************
    1480                    *                                                                        *
    1481                    *          UN_SELECT                                                     *
    1482                    *                                                                        *
    1483                    *          THIS IS CALLED TO "UN-SELECT" THE CURRENT ENTRY.              *
    1484                    *                                                                        *
    1485                    **************************************************************************
    1486 00006410           UN_SELECT:
    1487 00006410     b5a0          MOVE    *A13(MEN_CUR),A0,W        ;POINT AT CURRENT ENTRY
         00006420     0210  
    1488 00006430     5621          CLR     A1                        ;USE BLACK FOR BACKGROUND
    1489 00006440     0d3f          CALLR   MENU_BAR                  ;THIS REMOVES THE BAR.
         00006450     000e  
    1490                    
    1491 00006460     0d3f          CALLR   GET_MENU_DATA             ;NOW GET A2 TO TEXT POINTER
         00006470     0184  
    1492 00006480     b5a1          MOVE    *A13(MEN_COLR),A1,W       ;USE THE NORMAL ENTRY COLOR
         00006490     0180  
    1493 000064a0                   JSRP    MENU_TEXT                 ;PUT UP THE "TEXT" PORTION.
    1494 00006510                   RETP                              ;AND RETURN
    1495                    
    1496                    **************************************************************************
    1497                    *                                                                        *
    1498                    *          MENU_BAR                                                      *
    1499                    *                                                                        *
    1500                    *          THIS IS CALLED TO PUT UP THE SELECTION BAR FOR                *
    1501                    *          THE ENTRY IN A0, IN THE COLOR IN A1.                          *
    1502                    *                                                                        *
    1503                    *          THIS ROUTINE MUST PRESERVE A0.                                *
    1504                    *                                                                        *
    1505                    **************************************************************************
    1506                    * STRNGLEN - RETURNS THE LENGTH, IN PIXELS, OF A GIVEN STRING            *
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   33

    1507                    * A8 = PTR TO STRING                                                     *
    1508                    * A10 = [Y,X] SPACING OF STRING                                          *
    1509                    * A11 = PTR TO FONT TABLE                                                *
    1510                    * RETURNS:                                                               *
    1511                    * A7 = LENGTH OF STRING                                                  *
    1512                    * Z BIT SET IF LENGTH IS ZERO                                            *
    1513                    *
    1514                    *        FOR FILLAREA
    1515                    *
    1516                    * A1 = <COLOR><PALETTE>
    1517                    * A3 = DAG OF AREA [YPOS,XPOS]                                          
    1518                    * A4 = [Y,X] SIZE OF AREA                                               
    1519                    *
    1520 00006540           MENU_BAR:
    1521 00006540     098f          MMTM    SP,A0,A1,A3,A4,A5,A6,A7,A8    ;SAVE THE OFFSET
         00006550     df80  
    1522 00006560     098f          MMTM    SP,A1                     ;SAVE COLOR!
         00006570     4000  
    1523 00006580     0d3f          CALLR   GET_MENU_DATA             ;GET THE TEXT POINTER
         00006590     0172  
    1524 000065a0     0d3f          CALLR   STLEN_SETUP               ;SETUP FOR STRLEN CALL.
         000065b0     003d  
    1525 000065c0     0d5f          CALLA   STRNGLEN                  ;FIND WIDTH OF STRING.
         000065d0 00000000! 
    1526                    *
    1527                    *       A7 HAS LENGTH OF STRING.
    1528                    *
    1529                    *       WE NEED TO GET INTO A3 THE COORDINATES UF UPPER LEFT
    1530                    *       AND A4 THE LENGTH.
    1531                    *
    1532                    *       IF WE'RE CENTERING, WE USE THE BAR WIDTH PARAMETER
    1533                    *       ALONG THE CENTER LINE.
    1534                    *
    1535                    *       IF WE'RE LEFT JUSTIFIED, WE'LL LET THE BOX GO THE
    1536                    *       LENGTH OF THE TEXT FOR NOW.
    1537                    *
    1538 000065f0     b5a3          MOVE    *A13(MEN_ULX),A3,W        ;LEFT X IN A3                 
         00006600     0150  
    1539                    *
    1540                    *       IF WE'RE CENTERING....WE NEED TO MOVE THE "LEFT X" BACK HALF
    1541                    *       THE WIDTH OF THE STRING.
    1542                    *
    1543 00006610     b7a6          MOVE    *A13(MEN_ROM),A6,L        ;GET ROM POINTER
         00006620     0130  
    1544 00006630     b6c6          MOVE    *A6(MR_TCAL),A6,L         ;CHECK ROUTINE
         00006640     0020  
    1545 00006650     0b66          CMPI    STRCNRM,A6
         00006660 ffffffff! 
    1546 00006680     cb06          JRNZ    NOT_CENTERING
    1547                    *
    1548                    *       WE'RE CENTERING....CENTER X IS IN A3
    1549                    *
    1550 00006690     b5a7          MOVE    *A13(MEN_BWID),A7,W       ;A7 IS THE REGISTER FOR BAR WIDTH
         000066a0     01c0  
    1551 000066b0     4ce4          MOVE    A7,A4                     ;GET COPY IN A4
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   34

    1552 000066c0     2fe4          SRL     1,A4                      ;1/2 OF WIDTH COMES OFF OF CENTER
    1553 000066d0     4483          SUB     A4,A3                     ;A3 NOW HAS "LEFT X"
    1554 000066e0     c005          JRUC    CENTERING                 ;A7 IS WIDTH...A3 IS X
    1555                    
    1556                    *
    1557                    *       LEFT JUSTIFIED....DO IT THE OLD WAY!
    1558                    *
    1559 000066f0           NOT_CENTERING:
    1560 000066f0     b5a4          MOVE    *A13(MEN_BDX),A4,W        ;GET EXTRA X UNITS FOR BAR
         00006700     01b0  
    1561 00006710     4483          SUB     A4,A3
    1562                    
    1563                    *       NOW ADD TWICE THE EXTRA X TO THE STRING LENGTH TO
    1564                    *       FORM THE BAR LENGTH.
    1565                    *
    1566 00006720     2424          SLL     1,A4                      ;NOW DOUBLE THE EXCESS DX FOR BAR
    1567 00006730     4087          ADD     A4,A7                     ;NOW A7 HAS WIDTH OF BAR
    1568                    
    1569 00006740           CENTERING:
    1570 00006740     0be3          SUBI    C_KLUDGE,A3          ;KLUDGE TO NULLIFY FINAL SPACE.
         00006750     fffe  
    1571                    
    1572 00006760     0d3f          CALLR   GET_ENTRY_Y               ;GET Y FOR ENTRY IN A5
         00006770     017e  
    1573                    
    1574 00006780     b5a6          MOVE    *A13(MEN_BDY),A6,W        ;GET BAR DY (NEGATIVE)
         00006790     01a0  
    1575 000067a0     40c5          ADD     A6,A5                     ;ADJUST Y BY BAR DY
    1576 000067b0     2605          SLL     16,A5                     ;SHIFT Y INTO POSITION
    1577                    
    1578 000067c0     40a3          ADD     A5,A3                     ;A3 NOW POINTS AT UPPER LEFT
    1579                    
    1580 000067d0     b5a4          MOVE    *A13(MEN_BAR),A4,W        ;Y HEIGHT OF BAR
         000067e0     0190  
    1581 000067f0     2604          SLL     16,A4                     ;IN POSITION
    1582 00006800     40e4          ADD     A7,A4                     ;A7 HAS X WIDTH OF BAR.
    1583                    
    1584 00006810     09af          MMFM    SP,A1                     ;NOW GET COLOR BACK!
         00006820     0002  
    1585 00006830     2601          SLL     16,A1                     ;SHIFT COLOR TO HIGH HALF (PAL. 0)
    1586 00006840     0d5f          CALLA   FILLAREA                  ;FILL IT UP!
         00006850 00000000! 
    1587                    
    1588 00006870     09af          MMFM    SP,A0,A1,A3,A4,A5,A6,A7,A8    ;SAVE THE OFFSET
         00006880     01fb  
    1589 00006890     0960          RETS
    1590                    
    1591                    **************************************************************************
    1592                    *                                                                        *
    1593                    *          MENU_TEXT                                                     *
    1594                    *                                                                        *
    1595                    *          THIS IS CALLED TO DISPLAY THE TEXT FOR AN ENTRY.              *
    1596                    *                                                                        *
    1597                    *          A0 HAS OFFSET (FOR POSITIONING)                               *
    1598                    *          A1 HAS COLOR FOR MESSAGE.                                     *
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   35

    1599                    *          A2 HAS TEXT POINTER (FOR MESSAGE)                             *
    1600                    *                                                                        *
    1601                    *          WE NEED TO SHIFT THE DATA FOR THE TEXT ROUTINE                *
    1602                    *          AS FOLLOWS:                                                   *
    1603                    *                                                                        *
    1604                    *          A0 = SLEEP                                                    *
    1605                    *          A6 = COLOR                                                    *
    1606                    *          A8 = POINTER                                                  *
    1607                    *          A9 = ADDRESS                                                  *
    1608                    *          A10 = SPACING                                                 *
    1609                    *          A11 = FONT                                                    *
    1610                    *                                                                        *
    1611                    **************************************************************************
    1612 000068a0           MENU_TEXT:
    1613 000068a0     0d3f          CALLR   GET_ENTRY_Y               ;GET Y FOR ENTRY IN A5
         000068b0     016a  
    1614 000068c0     2605          SLL     16,A5                     ;SHIFT Y INTO POSITION
    1615 000068d0     b5a9          MOVE    *A13(MEN_ULX),A9,W        ;GET THE X
         000068e0     0150  
    1616 000068f0     40a9          ADD     A5,A9                     ;A9 SET WITH SCREEN ADDRESS
    1617                    
    1618 00006900     4c26          MOVE    A1,A6                     ;COLOR
    1619 00006910     5600          CLR     A0                        ;NO SLEEP
    1620                    
    1621 00006920     0d3f          CALLR   STLEN_SETUP
         00006930     0005  
    1622                    
    1623 00006940     b7a1          MOVE    *A13(MEN_ROM),A1,L
         00006950     0130  
    1624 00006960     b621          MOVE    *A1(MR_TCAL),A1,L         ;GET THE ROUTINE TO USE
         00006970     0020  
    1625 00006980     0161          JUMP    A1                        ;AND CALL IT!
    1626                    
    1627 00006990           STLEN_SETUP:
    1628 00006990     4c48          MOVE    A2,A8                     ;TEXT POINTER
    1629 000069a0     09ca          MOVI    SPACING20,A10             ;SPACING
         000069b0     0002  
    1630 000069c0     b7ab          MOVE    *A13(MEN_ROM),A11,L
         000069d0     0130  
    1631 000069e0     b76b          MOVE    *A11(MR_FONT),A11,L       ;LOAD FONT
         000069f0     0000  
    1632 00006a00     0960          RETS
    1633                    
    1634                    **************************************************************************
    1635                    *                                                                        *
    1636                    *          MENU JOYSTICK HANDLING                                        *
    1637                    *                                                                        *
    1638                    **************************************************************************
    1639 00006a10           ST_STICK:
    1640 00006a10     0d3f          CALLR   FORM_SWS           ;THIS LATCHES ANYONE ALREADY DOWN.
         00006a20     0072  
    1641 00006a30     5600          CLR     A0
    1642 00006a40     b20d          MOVE    A0,*A13(MEN_ACT),L      ;SHOW THAT WE'RE "ACTING" ON NONE.
         00006a50     0250  
    1643 00006a60     b00d          MOVE    A0,*A13(MEN_TYPO),W     ;CLEAR TYPOMATIC COUNTER.
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   36

         00006a70     0270  
    1644 00006a80     b00d          MOVE    A0,*A13(MEN_HITS),W     ;CLEAR OUT "CONSECUTIVE HITS"
         00006a90     0280  
    1645 00006aa0                   RETP
    1646                    *
    1647                    *       GETSTICK......RETURN DEBOUNCED/TYPOMATIC FOR
    1648                    *                       UP AND DOWN......OR EDGE OUT
    1649                    *                       ANY BUTTON....(INCLUDING ADVANCE)
    1650                    *
    1651                    *       RETURN A0=
    1652                    *
    1653                    *       NOTHING = 0
    1654                    *       UP = 1
    1655                    *       DOWN = 2
    1656                    *       BUTTON = 3
    1657                    *
    1658                    *       A2 = BUTTON BIT ON BUTTON HITS
    1659                    *
    1660              0303  UP_OR_DOWN       EQU     UP_BITS+DOWN_BITS
    1661              0004  TYPO_COUNT       EQU     4
    1662              0019  TYPO_STALL       EQU     25
    1663          0004000e  MENU_TYPO        EQU     (TYPO_COUNT*10000H)+14      ;14 HITS FOR MENU TILL STUCK
    1664                            
    1665                    *
    1666                    *        TO USE THIS.......FIRST JSRP ST_START.
    1667                    *                          THIS STICKS CLOSED SWITCHES AND
    1668                    *                          INITIALIZES COUNTERS.
    1669                    *
    1670                    *                          DATA IS STORED IN YOUR PDATA
    1671                    *                          AREA.....AT AREAS DETERMINED
    1672                    *                          BY THE "MEN_" STRUCTURE.  THESE
    1673                    *                          LOCATIONS MUST BE AVAILABLE.
    1674                    *
    1675                    *                          A8-A11 ARE NOT TOUCHED.
    1676                    *
    1677                    *         AFTER ST_START.....READ AS FOLLOWS.
    1678                    *
    1679                    *
    1680                    *         LOOP      SLEEP  1
    1681                    *                   MOVI   TYPO_PARMS,A5
    1682                    *                   JSRP   GETSTICK
    1683                    *
    1684                    *                   <LOGICAL STICK STATE RETURNED IN A0>
    1685                    *                   <ACT ON LOGICAL STATE>
    1686                    *
    1687                    *                   JRUC LOOP
    1688                    *               
    1689                    *
    1690                    *        INPUT A5-----TOP HALF IS TYPOMATIC RATE
    1691                    *                     LOW HALF IS COUNT TILL STICK IS CALLED STUCK
    1692                    *
    1693 00006ad0           GETSTICK:
    1694 00006ad0     4ca6          MOVE    A5,A6
    1695 00006ae0     2e05          SRL     16,A5                ;TYPO RATE IN A5
    1696 00006af0     0b86          ANDI    WORD_MASK,A6         ;STUCK HIT COUNT IN A6
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   37

         00006b00 ffff0000  
    1697                    
    1698 00006b20     0d3f          CALLR   FORM_SWS        ;SEE WHAT THEY LOOK LIKE NOW.
         00006b30     0061  
    1699                    *
    1700                    *       RETURN CURRENT STATE IN A0..PREVIOUS STATE IN A1.
    1701                    *
    1702 00006b40     03e1          NOT     A1                   ;LAST = 0 AND NOW = 1 MEANS EDGE!
    1703                    
    1704 00006b50     5020          AND     A1,A0                ;1'S WHERE WE HAVE POSITIVE EDGE.
    1705 00006b60     4c04          MOVE    A0,A4                ;KEEP NEW EDGE STATE IN A4!
    1706                    
    1707 00006b70     0b80          andi    00400000h,a0
         00006b80 ffbfffff  
    1708 00006ba0     cb47          jrnz    ESC_BUT
    1709 00006bb0     4c80          move    a4,a0
    1710                    
    1711 00006bc0     0b80          ANDI    BUTTONS|START_BITS,A0        ;BUTTON SAYS ACT....IGNORE STICK!
         00006bd0 f9db0f0f  
    1712 00006bf0     cb3c          JRNZ    TEST_BUTS            ;NEW BUTTON......RETURN IT!
    1713                    *
    1714                    *       NO BUTTON.....DO STICK TYPOMATIC STUFF!
    1715                    *
    1716 00006c00     b7a2          MOVE    *A13(MEN_ACT),A2,L   ;IS THERE ONE TO WATCH?
         00006c10     0250  
    1717 00006c20     ca28          JRZ     NEW_SCAN             ;NOPE....LOOK FOR NEW STUFF!
    1718                    *
    1719                    *       WE HAVE ONE THAT'S DOWN THAT WE WANT TO WATCH.
    1720                    *
    1721 00006c30     0d3f          CALLR   FORM_SWS        ;SEE WHAT THEY LOOK LIKE NOW.
         00006c40     0050  
    1722 00006c50     5040          AND     A2,A0                ;IS IT STILL MADE?
    1723 00006c60     ca1f          JRZ     GS_STICK_OPEN        ;NOPE.......CLEAR OUT ITS STATE.
    1724                    *
    1725                    *       ITS STILL MADE........DO TYPOMATIC.
    1726                    *
    1727 00006c70     b5a1          MOVE    *A13(MEN_TYPO),A1,W  ;DECREMENT TYPOMATIC COUNTER
         00006c80     0270  
    1728 00006c90     1421          DEC     A1
    1729 00006ca0     b02d          MOVE    A1,*A13(MEN_TYPO),W  ;AND PUT BACK IN MEMORY
         00006cb0     0270  
    1730 00006cc0     cb38          JRNZ    GS_ZERO              ;NOT TIME YET.....RETURN NOTHING
    1731                    *
    1732                    *       WE HAVE A TYPOMATIC HIT.....WE NEED TO TURN SWITCH BIT (A0)
    1733                    *       INTO "UP" OR "DOWN" AND RE-LOAD TYPOMATIC COUNTER.
    1734                    *
    1735                    *
    1736 00006cd0     b5a1          MOVE    *A13(MEN_HITS),A1,W  ;GET NUMBER OF HITS
         00006ce0     0280  
    1737 00006cf0     1021          INC     A1                   ;AFTER 15 TYPOS.....KILL TILL OPEN!
    1738 00006d00     b02d          MOVE    A1,*A13(MEN_HITS)    ;
         00006d10     0280  
    1739 00006d20     48c1          CMP     A6,A1                ;TOO MANY HITS?
    1740 00006d30     c90e          JRHS    GS_GONE              ;YEP....CALL THIS "STUCK"
    1741 00006d40     b0ad          MOVE    A5,*A13(MEN_TYPO),W  ;TYPOMATIC COUNTER RELOADED.
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   38

         00006d50     0270  
    1742                    
    1743 00006d60           RETURN_UP_DOWN:
    1744 00006d60     4c01          MOVE    A0,A1                ;GET THE BIT
    1745 00006d70     4c22          MOVE    A1,A2                ;MAKE A COPY
    1746 00006d80     1820          MOVK    1,A0                 ;ASSUME UP
    1747 00006d90     0b81          ANDI    UP_BITS,A1           ;IS IT AN "UP" BIT
         00006da0 fffffefe  
    1748 00006dc0     cb29          JRNZ    GS_X                 ;YEP...RETURN UP.
    1749 00006dd0     1840          MOVK    2,A0                 ;ASSUME DOWN
    1750 00006de0     0b82          ANDI    DOWN_BITS,A2         ;IS IT A "DOWN" BIT
         00006df0 fffffdfd  
    1751 00006e10     cb24          JRNZ    GS_X                 ;YEP...RETURN "DOWN"
    1752                    *
    1753                    *        NOT A TYPOMATIC CONDITION.
    1754                    *
    1755                    
    1756 00006e20           GS_GONE:
    1757 00006e20     5600          CLR     A0                   ;CLEAR OUT CURRENT HIT.
    1758 00006e30     b20d          MOVE    A0,*A13(MEN_ACT),L   ;INDICATE READY FOR NEXT HIT!
         00006e40     0250  
    1759 00006e50     c020          JRUC    GS_X                 ;AND RETURN THIS ZERO (NOTHING!)
    1760                    *
    1761                    *       STICK THAT WAS CLOSED OPENED......STOP BOUNCE UPWARD!
    1762                    *
    1763 00006e60           GS_STICK_OPEN:
    1764 00006e60                   SLEEPK  6
    1765 00006ea0     c0f7          JRUC    GS_GONE              ;NOW.....CLEAR OUT FOR NEXT HIT.
    1766                    *
    1767                    *       CONTROL COMES HERE WHEN NO BUTTONS ARE PENDING.
    1768                    *
    1769 00006eb0           NEW_SCAN:
    1770 00006eb0     4c80          MOVE    A4,A0                ;LOOK AT THE NEW EDGES.
    1771                    
    1772 00006ec0     0b80          ANDI    UP_OR_DOWN,A0        ;IS IT UP OR DOWN?
         00006ed0 fffffcfc  
    1773 00006ef0     ca15          JRZ     GS_ZERO              ;NO STICK....RETURN NO ACTION!
    1774                    
    1775 00006f00     0d3f          CALLR   FRST_BIT             ;REDUCE TO ONE BIT.
         00006f10     0017  
    1776 00006f20     b20d          MOVE    A0,*A13(MEN_ACT),L   ;STORE THIS BIT
         00006f30     0250  
    1777                    
    1778 00006f40     09c1          MOVI    TYPO_STALL,A1
         00006f50     0019  
    1779 00006f60     b02d          MOVE    A1,*A13(MEN_TYPO),W  ;TYPOMATIC COUNTER SET FOR LONG STALL.
         00006f70     0270  
    1780                    
    1781 00006f80     5621          CLR     A1
    1782 00006f90     b02d          MOVE    A1,*A13(MEN_HITS),W  ;LOAD UP A BUNCH OF HITS
         00006fa0     0280  
    1783 00006fb0     c0da          JRUC    RETURN_UP_DOWN       ;RETURN CORRECT CODE UP OR DOWN
    1784                    *
    1785                    *       NOT UP OR DOWN......SEE IF ITS A BUTTON.
    1786                    *
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   39

    1787 00006fc0           TEST_BUTS:
    1788                    *
    1789                    *       ITS A BUTTON...ALL NEW BUTTON EDGES IN A0
    1790                    *
    1791 00006fc0     0d3f          CALLR   FRST_BIT             ;USE 1 OF THEM.
         00006fd0     000b  
    1792                    
    1793 00006fe0     4c02          MOVE    A0,A2                ;RETURN THE BIT.
    1794                    
    1795 00006ff0     09c0          MOVI    3,A0                 ;RETURN THAT ITS A BUTTON.
         00007000     0003  
    1796 00007010     c004          JRUC    GS_X                 ;STUCK PROCESSING WILL BE AUTOMATIC.
    1797                    
    1798 00007020           ESC_BUT
    1799 00007020     09c0          movi    4,a0
         00007030     0004  
    1800 00007040     c001          jruc    GS_X
    1801                    
    1802 00007050           GS_ZERO:
    1803 00007050     5600          CLR     A0                   ;RETURN NO SWITCH.
    1804 00007060           GS_X:   
    1805 00007060                   RETP
    1806                    
    1807                    **************************************************************************
    1808                    *                                                                        *
    1809                    *          FRST_BIT                                                      *
    1810                    *                                                                        *
    1811                    *          A0 HAS 1 OR MORE BITS SET....RETURN 1 OF THEM.                *
    1812                    *                                                                        *
    1813                    **************************************************************************
    1814 00007090           FRST_BIT:
    1815 00007090     098f          MMTM    SP,A1,A2
         000070a0     6000  
    1816 000070b0     1821          MOVK    1,A1            ;SHIFT TILL WE FIND IT.
    1817 000070c0           FB1:    
    1818 000070c0     4c02          MOVE    A0,A2
    1819 000070d0     5022          AND     A1,A2
    1820 000070e0     cb02          JRNZ    GOT_IT          ;WE HAVE ON (IN A1)
    1821 000070f0     2421          SLL     1,A1            ;SHIFT IT
    1822 00007100     c0fb          JRUC    FB1
    1823 00007110           GOT_IT: 
    1824 00007110     4c20          MOVE    A1,A0           ;RETURN THE BIT
    1825 00007120     09af          MMFM    SP,A1,A2
         00007130     0006  
    1826 00007140     0960          RETS
    1827                    
    1828                    **************************************************************************
    1829                    *                                                                        *
    1830                    *          FORM_SWS                                                 *
    1831                    *                                                                        *
    1832                    *          GET THE SWITCHES....1=CLOSED.....AND SAVE                     *
    1833                    *          THIS SCAN AS "LAST STATE".  RETURN:                           *
    1834                    *                                                                        *
    1835                    *          CURRENT STATE IN A0                                           *
    1836                    *          PREVIOUS STATE IN A1                                          *
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   40

    1837                    *                                                                        *
    1838                    **************************************************************************
    1839 00007150           FORM_SWS:
    1840 00007150     0d3f          callr   fudge_switches
         00007160     0005  
    1841                    
    1842 00007170     b7a1          move    *a13(MEN_STIK),a1,L     ;RETURN PREVIOUS STATE
         00007180     0230  
    1843 00007190     b20d          move    a0,*a13(MEN_STIK),L     ;SAVE "STUCK" STATE.
         000071a0     0230  
    1844 000071b0     0960          rets
    1845                    
    1846                    **************************************************************************
    1847 000071c0           fudge_switches
    1848                    
    1849                    ;       move    @COINS,a0,W
    1850                    ;       move    @SWITCH,a1,W
    1851 000071c0     07a0          move    @_coin_addr,a0,L
         000071d0 00000000! 
    1852 000071f0     8400          move    *a0,a0,W
    1853 00007200     07a1          move    @_switch_addr,a1,L
         00007210 00000000! 
    1854 00007230     8421          move    *a1,a1,W
    1855 00007240     2600          sll     16,a0
    1856 00007250     2601          sll     16,a1           ;mask off top 16
    1857 00007260     2e01          srl     16,a1
    1858 00007270     5420          or      a1,a0
    1859 00007280     07a1          move    @_switch_map_mode,a1,L  ; Are we mapping switches?
         00007290 000000e0- 
    1860 000072b0     ca66          jrz     _switch_mapping_done    ; Nope - goto done
    1861 000072c0     0b41          cmpi    2,a1
         000072d0     fffd  
    1862 000072e0     c727          jrgt    _no_adjustment_mapping
    1863 000072f0           _no_menu_mapping
    1864 000072f0     07a1          move    @_coin_addr,a1,L
         00007300 00000000! 
    1865 00007320     8421          move    *a1,a1,W
    1866 00007330     2461          sll     3,a1
    1867 00007340     2e21          srl     15,a1
    1868 00007350     0ba1          ori     0fffffffeh,a1
         00007360 fffffffe  
    1869 00007380     5020          and     a1,a0
    1870 00007390     07a1          move    @_coin_addr,a1,L
         000073a0 00000000! 
    1871 000073c0     8421          move    *a1,a1,W
    1872 000073d0     2481          sll     4,a1
    1873 000073e0     2e41          srl     14,a1
    1874 000073f0     0ba1          ori     0fffffffdh,a1
         00007400 fffffffd  
    1875 00007420     5020          and     a1,a0
    1876 00007430     07a1          move    @_coin_addr,a1,L
         00007440 00000000! 
    1877 00007460     8421          move    *a1,a1,W
    1878 00007470     0ba1          ori     0ffffffefh,a1
         00007480 ffffffef  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   41

    1879 000074a0     5020          and     a1,a0
    1880 000074b0     07a1          move    @_switch_map_mode,a1,L
         000074c0 000000e0- 
    1881 000074e0     0b41          cmpi    1,a1
         000074f0     fffe  
    1882 00007500     ca41          jrz     _switch_mapping_done
    1883 00007510     09e1          movi    00400000h,a1
         00007520 00400000  
    1884 00007540     5420          or      a1,a0                   ; No Service button in adjust mode
    1885 00007550     c03c          jruc    _switch_mapping_done    ; All done
    1886 00007560           _no_adjustment_mapping
    1887 00007560     0b41          cmpi    3,a1                    ; Are we in any button mapping mode
         00007570     fffc  
    1888 00007580     cb39          jrnz    _no_any_mapping         ; Nope - go check other modes
    1889 00007590     07a1          move    @_coin_addr,a1,L
         000075a0 00000000! 
    1890 000075c0     8421          move    *a1,a1,W
    1891 000075d0     2461          sll     3,a1                    ; Map Vol up/down onto action button
    1892 000075e0     2ee1          srl     9,a1
    1893 000075f0     0ba1          ori     0ffffff9fh,a1           ; Buttons B and C
         00007600 ffffff9f  
    1894 00007620     5020          and     a1,a0
    1895 00007630     07a1          move    @_coin_addr,a1,L
         00007640 00000000! 
    1896 00007660     8421          move    *a1,a1,W
    1897 00007670     0ba1          ori     0ffffffefh,a1           ; Button A
         00007680 ffffffef  
    1898 000076a0     5020          and     a1,a0
    1899 000076b0     07a1          move    @_coin_addr,a1,L
         000076c0 00000000! 
    1900 000076e0     8421          move    *a1,a1,W
    1901 000076f0     2521          sll     9,a1                    
    1902 00007700     2f01          srl     8,a1
    1903 00007710     0ba1          ori     0ffffff7fh,a1           ; Button D
         00007720 ffffff7f  
    1904 00007740     5020          and     a1,a0
    1905 00007750     07a1          move    @_coin_addr,a1,L
         00007760 00000000! 
    1906 00007780     8421          move    *a1,a1,W
    1907 00007790     25a1          sll     13,a1
    1908 000077a0     2fa1          srl     3,a1
    1909 000077b0     0ba1          ori     0ffffefffh,a1
         000077c0 ffffefff  
    1910 000077e0     5020          and     a1,a0
    1911 000077f0     07a1          move    @_coin_addr,a1,L
         00007800 00000000! 
    1912 00007820     8421          move    *a1,a1,W
    1913 00007830     2541          sll     10,a1
    1914 00007840     2fc1          srl     2,a1
    1915 00007850     0ba1          ori     0ffffdfffh,a1
         00007860 ffffdfff  
    1916 00007880     5020          and     a1,a0
    1917 00007890     07a1          move    @_coin_addr,a1,L
         000078a0 00000000! 
    1918 000078c0     8421          move    *a1,a1,W
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   42

    1919 000078d0     24a1          sll     5,a1
    1920 000078e0     0ba1          ori     0ffff3fffh,a1
         000078f0 ffff3fff  
    1921 00007910     5020          and     a1,a0
    1922 00007920           _no_any_mapping
    1923 00007920           _switch_mapping_done
    1924                    
    1925                    ;       move    @SWITCH,a0,L            ;GET BOTH SWITCH WORDS
    1926 00007920     03e0          not     a0                      ;COMPLEMENT
    1927                    ;       move    @SWITCH2,a1             ;move action 5 buttons into low 32 bits
    1928 00007930     07a1          move    @_switch2_addr,a1,L
         00007940 00000000! 
    1929 00007960     8421          move    *a1,a1
    1930 00007970     0ba1          ori     0FFFF0000h,a1
         00007980 ffff0000  
    1931 000079a0     03e1          not     a1
    1932                    
    1933                    ;       andi    01111b,a1               ;make them buttons
    1934                    ;       sll     4,a1
    1935                    
    1936 000079b0     4c2e          move    a1,a14
    1937 000079c0     0b8e          andi    0011b,a14
         000079d0 fffffffc  
    1938 000079f0     24ce          sll     6,a14
    1939 00007a00     55c1          or      a14,a1
    1940 00007a10     5420          or      a1,a0
    1941                    
    1942 00007a20     0960          rets
    1943                    
    1944                    
    1945                    **************************************************************************
    1946                    *SPECIAL DIAGNOSTIC VERSION OF fudge_switches
    1947                    *USE FCALL WITH B6 AS THE RETURN REGISTER WHEN CALLING.
    1948                    *
    1949 00007a30           fudge_switches_diag
    1950                    ;       move    @SWITCH,a0,L            ;GET BOTH SWITCH WORDS
    1951 00007a30     07a0          move    @_switch_addr,a0,L
         00007a40 00000000! 
    1952 00007a60     8400          move    *a0,a0,W
    1953 00007a70     07a1          move    @_coin_addr,a1,L
         00007a80 00000000! 
    1954 00007aa0     8421          move    *a1,a1,W
    1955 00007ab0     2601          sll     16,a1
    1956 00007ac0     5420          or      a1,a0
    1957 00007ad0     03e0          not     a0                      ;COMPLEMENT
    1958                    ;       move    @SWITCH+20h,a1          ;move action 5 buttons into low 32 bits
    1959                    
    1960 00007ae0     07a1          move    @_switch2_addr,a1,L
         00007af0 00000000! 
    1961 00007b10     8421          move    *a1,a1
    1962 00007b20     03e1          not     a1
    1963                    
    1964                    ;       andi    01111b,a1
    1965                    ;       sll     4,a1
    1966                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   43

    1967 00007b30     4c2e          move    a1,a14
    1968 00007b40     0b8e          andi    0011b,a14
         00007b50 fffffffc  
    1969 00007b70     24ce          sll     6,a14
    1970 00007b80     55c1          or      a14,a1
    1971                    
    1972 00007b90     5420          or      a1,a0
    1973                    
    1974 00007ba0                   FRET    B6
    1975                    
    1976                    **************************************************************************
    1977 00007bb0           fudge_switches2
    1978                    
    1979 00007bb0     0d3f          callr   fudge_switches
         00007bc0     ff5f  
    1980 00007bd0     07a1          move    @fswitches_cur,a1,L
         00007be0 00000080- 
    1981 00007c00     0781          move    a1,@fswitches_last,L
         00007c10 000000a0- 
    1982 00007c30     0780          move    a0,@fswitches_cur,L
         00007c40 00000080- 
    1983 00007c60     5601          xor     a0,a1                   ;bits that have changed
    1984 00007c70     5001          and     a0,a1                   ;down transitions only
    1985 00007c80     0781          move    a1,@fswitches_down,L
         00007c90 000000c0- 
    1986                    
    1987 00007cb0     0960          rets
    1988                    
    1989                    **************************************************************************
    1990                    *                                                                        *
    1991                    *          GET_MENU_DATA                                                 *
    1992                    *                                                                        *
    1993                    *          A0 IS OFFSET OF ENTRY OF INTEREST                             *
    1994                    *                                                                        *
    1995                    *          RETURN  A1 = CURRENT OFFSET                                   *
    1996                    *                  A2 = TEXT POINTER                                     *
    1997                    *                  A3 = ROUTINE                                          *
    1998                    *                                                                        *
    1999                    **************************************************************************
    2000 00007cc0           GET_MENU_DATA:
    2001 00007cc0     098f          MMTM    SP,A0                ;DON'T ALTER A0
         00007cd0     8000  
    2002                    
    2003 00007ce0     0d3f          CALLR   PM_ENTRY     ;POINT A1 AT ENTRY
         00007cf0     0009  
    2004                    
    2005 00007d00     b622          MOVE    *A1(MENU_TEXT_PTR),A2,L   ;FETCH THE TEXT POINTER
         00007d10     0000  
    2006 00007d20     b623          MOVE    *A1(MENU_ROUTINE),A3,L    ;FETCH THE ROUTINE
         00007d30     0020  
    2007 00007d40     b5a1          MOVE    *A13(MEN_CUR),A1,W        ;RETURN CURRENT ENTRY IN A1
         00007d50     0210  
    2008 00007d60     09af          MMFM    SP,A0                ;DON'T ALTER A0
         00007d70     0001  
    2009 00007d80     0960          RETS
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   44

    2010                    
    2011                    **************************************************************************
    2012                    *                                                                        *
    2013                    *          PM_ENTRY                                                      *
    2014                    *                                                                        *
    2015                    *          A0 = MENU ENTRY OF INTEREST                                   *
    2016                    *          RETURN A1 -> POINTS AT <TEXT><ROUTINE><HELP> FOR THIS         *
    2017                    *          ENTRY.                                                        *
    2018                    *                                                                        *
    2019                    **************************************************************************
    2020 00007d90           PM_ENTRY:
    2021 00007d90     098f          MMTM    SP,A0
         00007da0     8000  
    2022 00007db0     1420          DEC     A0                   ;INDEX FROM ZERO
    2023 00007dc0     09c1          MOVI    MENU_ENTRY_SIZE,A1   ;TIMES SIZE PER ENTRY
         00007dd0     0060  
    2024 00007de0     5e01          MPYU    A0,A1                ;A1 CONTAINS OFFSET INTO TABLE
    2025                    
    2026 00007df0     b7a0          MOVE    *A13(MEN_TPTR),A0,L  ;GET THE BASE OF THE MENU TEXT ENTRIES
         00007e00     01e0  
    2027 00007e10     4001          ADD     A0,A1                ;ADD TO OFFSET
    2028 00007e20     09af          MMFM    SP,A0
         00007e30     0001  
    2029 00007e40     0960          RETS
    2030                    
    2031                    **************************************************************************
    2032                    *                                                                        *
    2033                    *          PLOT_HELP                                                     *
    2034                    *                                                                        *
    2035                    *          THIS ROUTINE PLOTS (OR CLEARS) THE HELP AREA                  *
    2036                    *          FOR THE CURRENT ENTRY.                                        *
    2037                    *                                                                        *
    2038                    **************************************************************************
    2039 00007e50           PLOT_HELP:
    2040 00007e50     b5a0          MOVE    *A13(MEN_CUR),A0,W        ;GET CURRENT ENTRY
         00007e60     0210  
    2041 00007e70     0d3f          CALLR   PM_ENTRY          ;A1 POINTS AT GROUP
         00007e80     fff0  
    2042 00007e90     b628          MOVE    *A1(MENU_HELP),A8,L       ;GET HELP TABLE
         00007ea0     0040  
    2043 00007eb0     0b48          CMPI    NO_HELP,A8                ;NOT A "HELP" SITUATION?
         00007ec0     fffe  
    2044 00007ed0     ca07          JRZ     NO_HELP_FOR_THIS_ONE
    2045 00007ee0     0b48          CMPI    ADJ_HELP,A8               ;ADJUSTMENT HELP REQUESTED?
         00007ef0     fffd  
    2046 00007f00     ca80          JAEQ    DO_ADJH                   ;THEN DO IT IN ADJ MODULE!
         00007f10 00000000! 
    2047                    ;        CMPI    SND_HELP,A8               ;ARE WE IN SOUND TEST?
    2048                    ;        JREQ    DO_SHELP
    2049                    ;        CMPI    SND_PLAY,A8
    2050                    ;        JREQ    DO_SPLAY
    2051 00007f30     0d3f          CALLR   DO_HELP_MENU
         00007f40     00cc  
    2052 00007f50           NO_HELP_FOR_THIS_ONE:
    2053 00007f50     0960           RETS
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   45

    2054                    
    2055                    **************************************************************************
    2056                    *                                                                        *
    2057                    *          DO_SHELP                                                      *
    2058                    *                                                                        *
    2059                    *          THIS IS CALLED FOR EACH NON PLAYING ENTRY IN THE SOUND        *
    2060                    *          TABLE MENU.  IT CAUSES THE SOUND BOARD TO BE SHUT             *
    2061                    *          UP AND THE BOTTOM LINE (WHERE TITLES APPEAR)                  *
    2062                    *          TO BE ERASED.                                                 *
    2063                    *                                                                        *
    2064                    **************************************************************************
    2065                    ;DO_SHELP:      
    2066                    ;;      MOVE    @SND_MADE,A0,W  ;DID SOMEONE MAKE A SOUND?
    2067                    ;;        JRZ     DO_SH1          ;NOPE
    2068                    ;;        CLR     A0
    2069                    ;        MOVE    A0,@SND_MADE,W  ;CLEAR THIS AND RESET THE BOARD!
    2070                    ;        MOVE    A0,@SCODE,W
    2071                    ;        MOVE    A0,@DCODE,W
    2072                    ;        CALLA   QSNDRST                ;kill any sounds in progress
    2073                    ;DO_SH1:
    2074                    ;       CALLR   BLNKSNAM        ;BLANK OUT ANY WRITING!
    2075                    ;        RETS
    2076                    ;*
    2077                    ;*       A0 CONTAINS 3 FOR SYNTHESIZER...4 FOR DIGITIZER...
    2078                    ;*       IF CORRESPONDING "CODE" BYTE IS NON ZERO, THEN DISPLAY
    2079                    ;*       THE TEXTLINE THAT CORRESPONDS.  ELSE BLANK OUT THE
    2080                    ;*       AREA.
    2081                    ;*
    2082                    ;DO_SPLAY:
    2083                    ;       CALLR   BLNKSNAM        ;BLANK OUT LAST MESSAGE
    2084                    ;        CMPI    3,A0            ;SYNTHESIZER?
    2085                    ;        JRZ     CK_SYNT         ;YEP.
    2086                    ;*
    2087                    ;*       DIGITIZER.
    2088                    ;*
    2089                    ;        MOVE    @SCODE,A1,W     ;HOLD INFO IF SYNTH WAS RUNNING
    2090                    ;        CLR     A0
    2091                    ;        MOVE    A0,@SCODE,W     ;CLEAR OUT SYNTH CODE
    2092                    ;        MOVE    @DCODE,A0       ;ANY CODE
    2093                    ;        JRZ     DO_SPQX         ;NOTHING HERE.....SHUT UP SOUND SYS.
    2094                    ;
    2095                    ;        MOVI    DTABLE,A1       ;BASE OF POINTER TABLE FOR DIGITIZER
    2096                    ;        JRUC    DO_SP1          ;PRINT THE STRING.
    2097                    ;
    2098                    ;
    2099                    ;CK_SYNT:
    2100                    ;       MOVE    @DCODE,A1,W     ;HOLD INFO IF DIGITIZER WAS RUNNING
    2101                    ;        CLR     A0
    2102                    ;        MOVE    A0,@DCODE,W     ;CLEAR OUT DIG CODE
    2103                    ;        MOVE    @SCODE,A0       ;ANY CODE
    2104                    ;        JRZ     DO_SPQX          ;NOTHING HERE.
    2105                    ;
    2106                    ;        MOVI    STABLE,A1       ;BASE OF POINTER TABLE FOR DIGITIZER
    2107                    ;
    2108                    ;DO_SP1:
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   46

    2109                    ;       CALLR   MEN_NUMS                           ;A4 = LEFT X  A5 = RIGHT X
    2110                    ;        ADDI    10000H*SND_MESS_Y,A4               ;UPPER LEFT Y
    2111                    ;        ADDI    10000H*(SND_MESS_Y+SND_BOX_H),A5   ;UPPER LEFT X
    2112                    ;        MOVI    ROBO_WHITE,A9
    2113                    ;        CALLR   STD_BORD       
    2114                    ;
    2115                    ;        DEC     A0                        ;INDEX FROM 1.
    2116                    ;        SLL     5,A0
    2117                    ;        ADD     A0,A1
    2118                    ;        MOVE    *A1,A2,L                  ;NOW WE HAVE THE MESSAGE
    2119                    ;
    2120                    ;        MOVI    SND_INST,A8
    2121                    ;        JSRP    L_MESS                    ;PUT INSTRUCTION OUT.
    2122                    ;
    2123                    ;        MOVI    SND_SETUP,A8
    2124                    ;        CALLA   LM_SETUP
    2125                    ;
    2126                    ;        MOVE    A2,A8                  
    2127                    ;        JSRP    LM_FINIS                  ;DO THE DEED
    2128                    ;        RETS                              ;AND RETURN
    2129                    ;
    2130                    ;DO_SPQX:
    2131                    ;       MOVE    A1,A1                     ;OUR SELECTION ISN'T RUNNING...WAS OTHER?
    2132                    ;        JRZ     DO_SPX                    ;NOPE
    2133                    ;        CALLA   QSNDRST                   ;KILL SOUNDS IN PROGRESS
    2134                    ;        CLR     A0
    2135                    ;        MOVE    A0,@SND_MADE,W            ;NO RESET NECESSARY NOW
    2136                    ;DO_SPX:
    2137                    ;       RETS
    2138                    ;
    2139                    ;**************************************************************************
    2140                    ;*                                                                        *
    2141                    ;*          BLNKSNAM                                                      *
    2142                    ;*                                                                        *
    2143                    ;*          CALLED TO BLANK OUT THE SOUND CODE NAME DURING                *
    2144                    ;*          SOUND TEST.                                                   *
    2145                    ;*                                                                        *
    2146                    ;**************************************************************************
    2147                    ;*
    2148                    ;*        A3 = POINTER
    2149                    ;*        A4 = SIZE
    2150                    ;*
    2151                    ;BLNKSNAM:
    2152                    ;        MOVI    (SND_MESS_Y*10000H)+20H,A3
    2153                    ;        MOVI    (SND_BOX_H*10000H)+1E0H,A4
    2154                    ;        JAUC    BLNKAREA                  ;ITS BLANK!
    2155                    ;
    2156                    **************************************************************************
    2157                    *                                                                        *
    2158                    *          GET_ENTRY_Y                                                   *
    2159                    *                                                                        *
    2160                    *          THIS RETURNS THE Y POSITIONS FOR THE ENTRY SPECIFIED          *
    2161                    *          IN A0.                                                        *
    2162                    *                                                                        *
    2163                    *          A5 = Y VALUE IN UNITS.                                        *
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   47

    2164                    *                                                                        *
    2165                    **************************************************************************
    2166 00007f60           GET_ENTRY_Y:
    2167 00007f60     098f          MMTM    SP,A0,A1
         00007f70     c000  
    2168 00007f80     b5a5          MOVE    *A13(MEN_ULY),A5,W
         00007f90     0160  
    2169 00007fa0     b5a1          MOVE    *A13(MEN_DY),A1,W
         00007fb0     0170  
    2170 00007fc0     1420          DEC     A0
    2171 00007fd0     5e01          MPYU    A0,A1                ;A1 HAS OFFSET PER ENTRY
    2172 00007fe0     4025          ADD     A1,A5
    2173 00007ff0     09af          MMFM    SP,A0,A1
         00008000     0003  
    2174 00008010     0960          RETS
    2175                    
    2176                    **************************************************************************
    2177                    *                                                                        *
    2178                    *          MENU_BORDER                                                   *
    2179                    *                                                                        *
    2180                    *          THIS IS CALLED TO PUT A BORDER AROUND THE MENU.               *
    2181                    *                                                                        *
    2182                    *          A8 = MENU STRUCTURE                                           *
    2183                    *          A9 = 1st item to activate as current                          *
    2184                    *                                                                        *
    2185                    *          BORDER IS DONE IN MENU TEXT COLOR                             *
    2186                    *                                                                        *
    2187                    *          THIS ASSUMES MENU IS IN THE CENTERING FORMAT                  *
    2188                    *                                                                        *
    2189                    **************************************************************************
    2190                    *
    2191                    *        1ST WE NEED TO FIND UPPER LEFT.
    2192                    *
    2193                    *
    2194                    *        X = MENU_X - (BAR_WIDTH/2) - 2       (LESS BORDER WIDTH)
    2195                    *        Y = MENU_Y - BDY                     (LESS BORDER HEIGHT)
    2196                    *
    2197                    *        LOWER RIGHT :
    2198                    *
    2199                    *        X = MENU_X + (BAR_WIDTH/2) - 2       (PLUS BORDER WIDTH)
    2200                    *        Y = MENU_Y + (MENU_ENTRIES-1) * DY)) - BDY + BAR_HITE
    2201                    *
    2202                    *
    2203 00008020           MENU_BORDER:
    2204 00008020     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9
         00008030     ffc0  
    2205 00008040     0d3f          CALLR   STUFF_MENU_PROCESS   ;MOVE DATA INTO PDATA AREA
         00008050     fdf7  
    2206                    *
    2207                    *       FIRST COMPUTE UPPER LEFT
    2208                    *
    2209 00008060     0d3f          CALLR   MENU_UL_A4_A5             ;GET UPPER LEFT COORDINATES
         00008070     0017  
    2210 00008080     2605          SLL     16,A5
    2211 00008090     40a4          ADD     A5,A4                     ;A4 POINTS TO UPPER LEFT.
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   48

    2212                    *
    2213                    *       FORM LOWER RIGHT
    2214                    *
    2215 000080a0     0d3f          CALLR   MENU_LR_A6_A5
         000080b0     0024  
    2216 000080c0     2605          SLL     16,A5                     ;SHIFT A5 DOWN
    2217 000080d0     40c5          ADD     A6,A5                     ;A5 POINTS AT LOWER RIGHT
    2218                    
    2219 000080e0     b5a9          MOVE    *A13(MEN_COLR),A9,W       ;GET MENU TEXT COLOR
         000080f0     0180  
    2220 00008100     0d3f          CALLR   STD_BORD
         00008110     00a4  
    2221                    
    2222 00008120     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9
         00008130     03ff  
    2223 00008140     0960          RETS
    2224                    
    2225                    **************************************************************************
    2226                    *                                                                        *
    2227                    *          MCSETUP                                                       *
    2228                    *                                                                        *
    2229                    *          RETURN:                                                       *
    2230                    *                  A0 = CENTER OF MENU                                   *
    2231                    *                  A1 = 1/2 BAR WIDTH                                    *
    2232                    *                  A2 = Y FOR FIRST LINE OF TEXT OF MENU                 *
    2233                    *                  A3 = DELTA Y (NEGATIVE TO GET FROM TEXT TO BAR.       *
    2234                    *                                                                        *
    2235                    **************************************************************************
    2236 00008150           MCSETUP:
    2237 00008150     b5a0          MOVE    *A13(MEN_ULX),A0,W        ;UPPER LEFT X (ACTUALLY CENTER)
         00008160     0150  
    2238 00008170     b5a1          MOVE    *A13(MEN_BWID),A1,W       ;BAR_WIDTH
         00008180     01c0  
    2239 00008190     2fe1          SRL     1,A1                      ;ALL CALCS USE BAR_WIDTH/2
    2240 000081a0     b5a2          MOVE    *A13(MEN_ULY),A2,W        ;UPPER LEFT Y
         000081b0     0160  
    2241 000081c0     b5a3          MOVE    *A13(MEN_BDY),A3,W        ;DELTA Y (NEGATIVE)
         000081d0     01a0  
    2242 000081e0     0960          RETS
    2243                    
    2244                    
    2245                    **************************************************************************
    2246                    *                                                                        *
    2247                    *          MENU_UL_A4_A5                                                 *
    2248                    *                                                                        *
    2249                    *          RETURN WINDOW UPPER LEFT CORNER                               *
    2250                    *                                                                        *
    2251                    *          A4 = X                                                        *
    2252                    *          A5 = Y                                                        *
    2253                    *                                                                        *
    2254                    **************************************************************************
    2255 000081f0           MENU_UL_A4_A5:
    2256 000081f0     098f          MMTM    SP,A0,A1,A2,A3
         00008200     f000  
    2257 00008210     0d3f          CALLR   MCSETUP                   ;STUFF THE REGGIES
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   49

         00008220     fff2  
    2258 00008230     4c04          MOVE    A0,A4                     ;FORM ULX
    2259 00008240     4424          SUB     A1,A4
    2260 00008250     0be4          SUBI    C_KLUDGE,A4          ;A4 HAS UPPER LEFT X
         00008260     fffe  
    2261                    
    2262 00008270     4c45          MOVE    A2,A5
    2263 00008280     4065          ADD     A3,A5                     ;A5 HAS UPPER LEFT Y
    2264                    
    2265 00008290     0be4          SUBI    MB_XWID+GAP,A4            ;NOW WE POINT AT UPPER LEFT FOR FRAME
         000082a0     fffa  
    2266 000082b0     0be5          SUBI    MB_YWID+GAP,A5
         000082c0     fffa  
    2267 000082d0     09af          MMFM    SP,A0,A1,A2,A3
         000082e0     000f  
    2268 000082f0     0960          RETS
    2269                    
    2270                    **************************************************************************
    2271                    *                                                                        *
    2272                    *          MENU_LR_A6_A5                                                 *
    2273                    *                                                                        *
    2274                    *          RETURN WINDOW LOWER RIGHT CORNER                              *
    2275                    *                                                                        *
    2276                    *          A6 = X                                                        *
    2277                    *          A5 = Y                                                        *
    2278                    *                                                                        *
    2279                    **************************************************************************
    2280 00008300           MENU_LR_A6_A5:
    2281 00008300     098f          MMTM    SP,A0,A1,A2,A3
         00008310     f000  
    2282 00008320     0d3f          CALLR   MCSETUP                   ;STUFF THE REGGIES
         00008330     ffe1  
    2283                    
    2284 00008340     4c06          MOVE    A0,A6                     ;LOWER RIGHT X
    2285 00008350     4026          ADD     A1,A6
    2286 00008360     0be6          SUBI    C_KLUDGE,A6          ;THIS IS THE X
         00008370     fffe  
    2287                    
    2288 00008380     b5a0          MOVE    *A13(MEN_ENTS),A0,W       ;THIS IS LAST ENTRY
         00008390     0200  
    2289 000083a0     0d3f          CALLR   GET_ENTRY_Y               ;A5 HAS THE Y FOR THE LAST ENTRY
         000083b0     ffba  
    2290 000083c0     4065          ADD     A3,A5                     ;A5 NOW HAS TOP OF LAST BOX
    2291 000083d0     b5a7          MOVE    *A13(MEN_BAR),A7,W        ;HEIGHT OF BAR
         000083e0     0190  
    2292 000083f0     40e5          ADD     A7,A5                     ;A5 NOW HAS LOWER RIGHT Y
    2293                    
    2294 00008400     0b05          ADDI    MB_YWID+GAP,A5
         00008410     0005  
    2295 00008420     0b06          ADDI    MB_XWID+GAP,A6            ;THIS IS END OF BORDER
         00008430     0005  
    2296 00008440     09af          MMFM    SP,A0,A1,A2,A3
         00008450     000f  
    2297 00008460     0960          RETS
    2298                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   50

    2299                    
    2300                    **************************************************************************
    2301                    *                                                                        *
    2302                    *          F_TITLE                                                       *
    2303                    *                                                                        *
    2304                    *          THIS IS CALLED TO FRAME A TITLE IN THE SAME WIDTH             *
    2305                    *          AS THE MAIN TITLE.                                            *
    2306                    *                                                                        *
    2307                    *          A0 = Y LEVEL OF 15 POINT TEXT                                 *
    2308                    *          A9 = COLOR                                                    *
    2309                    *                                                                        *
    2310                    **************************************************************************
    2311 00008470           F_TITLE:
    2312 00008470     098f          MMTM    SP,A4,A5,A0
         00008480     8c00  
    2313 00008490     4c04          MOVE    A0,A4           ;COPY Y
    2314 000084a0     0be4          SUBI    12,A4
         000084b0     fff3  
    2315 000084c0     2604          SLL     16,A4
    2316 000084d0     0b04          ADDI    TIT_ULX,A4      ;UPPER LEFT SET
         000084e0     0005  
    2317                    
    2318 000084f0     4c05          MOVE    A0,A5           ;LOWER RIGHT
    2319 00008500     0b05          ADDI    27,A5
         00008510     001b  
    2320 00008520     2605          SLL     16,A5
    2321 00008530     0b05          ADDI    TIT_LRX,A5      ;LOWER RIGHT SET
         00008540     0185  
    2322                    
    2323 00008550     0d3f          CALLR   STD_BORD
         00008560     005f  
    2324 00008570     09af          MMFM    SP,A4,A5,A0
         00008580     0031  
    2325 00008590     0960          RETS
    2326                    
    2327              e0e0  FIRST_BORDER_COLOR       EQU     0E0E0H
    2328              efef  LAST_BORDER_COLOR        EQU     0EFEFH
    2329                    **************************************************************************
    2330                    *                                                                        *
    2331                    *          G_BORDER                                                      *
    2332                    *                                                                        *
    2333                    *          THIS IS CALLED TO DO A "HSTD TABLE" TYPE CYCLING              *
    2334                    *          BORDER.  THIS ROUTINE GETS:                                   *
    2335                    *                                                                        *
    2336                    *          A4 = UPPER LEFT Y,X                                           *
    2337                    *          A5 = LOWER RIGHT Y,X                                          *
    2338                    *          A6 = NUMBER OF SLICES GOING IN.                               *
    2339                    *                                                                        *
    2340                    **************************************************************************
    2341 000085a0           G_BORDER:
    2342 000085a0     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6
         000085b0     fe00  
    2343 000085c0     09e0          MOVI    10001H,A0                 ;1 BY 1 DIMENSION
         000085d0 00010001  
    2344                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   51

    2345 000085f0     09e9          MOVI    LAST_BORDER_COLOR,A9      ;USE LAST ONE 1ST
         00008600 0000efef  
    2346 00008620           NEXT_RING:
    2347 00008620     0d3f          CALLR   DOBORDER                  ;DO THIS RING
         00008630     0012  
    2348                    
    2349 00008640     09e1          MOVI    10001H,A1                  ;THIS IS 1 UNIT IN X AND Y
         00008650 00010001  
    2350 00008670     e024          ADDXY   A1,A4
    2351 00008680     e225          SUBXY   A1,A5
    2352                    
    2353 00008690     0be9          SUBI    101H,A9
         000086a0     fefe  
    2354 000086b0     0b69          CMPI    FIRST_BORDER_COLOR,A9
         000086c0 ffff1f1f  
    2355 000086e0     c903          JRHS    COLOK
    2356 000086f0     09e9          MOVI    LAST_BORDER_COLOR,A9
         00008700 0000efef  
    2357                    
    2358 00008720           COLOK:  
    2359 00008720     3e26          DSJS    A6,NEXT_RING
    2360 00008730     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6
         00008740     007f  
    2361 00008750     0960          RETS
    2362                    
    2363                    **************************************************************************
    2364                    *                                                                        *
    2365                    *          DOBORDER                                                      *
    2366                    *                                                                        *
    2367                    *          THIS IS CALLED TO DRAW A BORDER FRAME.                        *
    2368                    *                                                                        *
    2369                    *          A4 = UPPER LEFT Y,X                                           *
    2370                    *          A5 = LOWER RIGHT Y,X                                          *
    2371                    *          A0 = Y,X WIDTH OF BORDER                                      *
    2372                    *          A9 = COLOR OF BORDER.                                         *
    2373                    *                                                                        *
    2374                    *          THIS ROUTINE *** CLEARS OUT ALL AREA INSIDE THE BORDER***     *
    2375                    *          AS A FUNCTION OF ITS OPERATION.                               *
    2376                    *                                                                        *
    2377                    *          THE BORDER IS DONE IN THE "ROBO" PALETTE                     *
    2378                    *                                                                        *
    2379                    *          IT IS ASSUMED THAT THE DISPLAY SYSTEM IS RUNNING!             *
    2380                    *                                                                        *
    2381                    **************************************************************************
    2382                    *
    2383                    * A1 = <COLOR><PALETTE>
    2384                    * A3 = DAG OF AREA [YPOS,XPOS]                                          
    2385                    * A4 = [Y,X] SIZE OF AREA                                               
    2386                    *
    2387 00008760           DOBORDER:
    2388 00008760     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9
         00008770     ffc0  
    2389 00008780     4d21          MOVE    A9,A1                     ;GET COLOR
    2390 00008790     2601          SLL     16,A1                     ;COLOR ON TOP..PALETTE 0
    2391                    *
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   52

    2392                    *       NOW WE NEED TO MAKE 4 BARS!
    2393                    *
    2394 000087a0     4c02          MOVE    A0,A2                     ;SEPARATE DELTA
    2395 000087b0     0b80          ANDI    SX_MASK,A0
         000087c0 ffff0000  
    2396 000087e0     0b82          ANDI    SY_MASK,A2
         000087f0 0000ffff  
    2397                    
    2398 00008810     4c86          MOVE    A4,A6                     ;UPPER LEFTS HERE
    2399 00008820     4c87          MOVE    A4,A7
    2400                    
    2401 00008830     4ca8          MOVE    A5,A8                     ;LOWER RIGHTS HERE
    2402 00008840     4ca9          MOVE    A5,A9
    2403                    
    2404 00008850     0b86          ANDI    SX_MASK,A6                 ;LEFT X
         00008860 ffff0000  
    2405 00008880     0b88          ANDI    SX_MASK,A8                 ;RIGHT X
         00008890 ffff0000  
    2406                    
    2407 000088b0     0b87          ANDI    SY_MASK,A7                 ;TOP Y
         000088c0 0000ffff  
    2408 000088e0     0b89          ANDI    SY_MASK,A9                 ;BOTTOM Y
         000088f0 0000ffff  
    2409                    
    2410                    *
    2411                    *       FIRST BAR GOES FROM ORIGINAL UL XY TO RIGHT X
    2412                    *       AND TOP Y+DELTA Y
    2413                    *
    2414                    *       A3 IS ORIGINAL A4 PASSED.
    2415                    *       FORM DESTINATION IN A4
    2416                    *
    2417 00008910     4c83          MOVE    A4,A3
    2418                    
    2419 00008920     ed04          MOVX    A8,A4
    2420 00008930     eee4          MOVY    A7,A4
    2421 00008940     e044          ADDXY   A2,A4                     ;ADD THE DELTA
    2422                    
    2423 00008950     0d3f          CALLR   DO_A_LINE                 ;DO THIS LINE
         00008960     0016  
    2424                    *
    2425                    *       GOING AROUND CLOCKWISE.....THIS ONE STARTS AT RIGHT X-DELTA
    2426                    *       AND TOP Y
    2427                    *
    2428 00008970     ed03          MOVX    A8,A3
    2429 00008980     e203          SUBXY   A0,A3
    2430 00008990     eee3          MOVY    A7,A3
    2431                    *
    2432                    *       THIS IS THE NATURAL LOWER RIGHT CORNER
    2433                    *
    2434 000089a0     ed04          MOVX    A8,A4
    2435 000089b0     ef24          MOVY    A9,A4
    2436                    
    2437 000089c0     0d3f          CALLR   DO_A_LINE
         000089d0     000f  
    2438                    *
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   53

    2439                    *       NOW FOR BOTTOM LINE.....A4 IS STILL SET!
    2440                    *
    2441 000089e0     ecc3          MOVX    A6,A3
    2442 000089f0     ef23          MOVY    A9,A3
    2443 00008a00     e243          SUBXY   A2,A3
    2444                    
    2445 00008a10     0d3f          CALLR   DO_A_LINE
         00008a20     000a  
    2446                    *
    2447                    *       LEFT WALL....FROM UPPER LEFT
    2448                    *
    2449 00008a30     ecc3          MOVX    A6,A3
    2450 00008a40     eee3          MOVY    A7,A3
    2451                    
    2452 00008a50     ecc4          MOVX    A6,A4
    2453 00008a60     e004          ADDXY   A0,A4
    2454 00008a70     ef24          MOVY    A9,A4
    2455                    
    2456 00008a80     0d3f          CALLR   DO_A_LINE
         00008a90     0003  
    2457                    
    2458 00008aa0     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9
         00008ab0     03ff  
    2459 00008ac0     0960          RETS
    2460                    
    2461 00008ad0           DO_A_LINE:
    2462 00008ad0     098f          MMTM    SP,A4
         00008ae0     0800  
    2463 00008af0     e264          SUBXY   A3,A4           ;FORM DISTANCE
    2464 00008b00     0d5f          CALLA   FILLAREA        ;AND DO THE FILL
         00008b10 00000000! 
    2465 00008b30     09af          MMFM    SP,A4
         00008b40     0010  
    2466 00008b50     0960          RETS
    2467                    
    2468 00008b60           STD_BORD:
    2469 00008b60     098f          MMTM    SP,A0
         00008b70     8000  
    2470 00008b80     09e0          MOVI    BORDER_SIZE,A0
         00008b90 00030003  
    2471 00008bb0     0d5f          CALLA   DOBORDER
         00008bc0 00008760' 
    2472 00008be0     09af          MMFM    SP,A0
         00008bf0     0001  
    2473 00008c00     0960          RETS
    2474                    **************************************************************************
    2475                    *                                                                        *
    2476                    *          DO_HELP_MENU                                                  *
    2477                    *                                                                        *
    2478                    *          THIS IS CALLED TO DISPLAY A HELP MENU FOR THE CURRENT         *
    2479                    *          MENU ENTRY.                                                   *
    2480                    *                                                                        *
    2481                    *          A HELP MENU IS DEFINED AS FOLLOWS:                            *
    2482                    *                                                                        *
    2483                    *          HM_JUST         WORD    0=CENTER   1=LEFT                     *
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   54

    2484                    *          HM_COLOR        WORD    COLOR OF MENU                         *
    2485                    *          HM_ENTS         WORD    NUMBER OF LINES IN MENU               *
    2486                    *                          LONG    LONG WORD POINTERS FOR EACH LINE!     *
    2487                    *                                                                        *
    2488                    *          THE PROCESS AREA IS FILLED WITH THE CURRENT MENU              *
    2489                    *          PARAMETERS.                                                   *
    2490                    *                                                                        *
    2491                    *          A8 = POINTER TO HELP MENU STRUCTURE ABOVE                     *
    2492                    *                                                                        *
    2493                    **************************************************************************
    2494 00008c10           DO_HELP_MENU:
    2495 00008c10     0d3f          CALLR   BLNKHELP
         00008c20     0015  
    2496                    
    2497 00008c30     4d08          MOVE    A8,A8                ;CHECK IF HELP MENU EXISTS.
    2498 00008c40     ca12          JRZ     DHMX                 ;NOPE JUST CLEARING WAS OUR JOB.
    2499                    
    2500 00008c50     b5a0          MOVE    *A13(MEN_CUR),A0,W   ;THIS IS CURRENT ENTRY
         00008c60     0210  
    2501 00008c70     4c0b          MOVE    A0,A11               ;PASS ENTRY NUMBER IN A11
    2502 00008c80     0d3f          CALLR   GET_ENTRY_Y          ;A5 HAS THE Y FOR THE CURRENT ENTRY
         00008c90     ff2c  
    2503                    *
    2504                    *       NOW WE NEED TO MOVE TO MAKE TOP ENTRY BOX LINE UP.
    2505                    *
    2506 00008ca0     b5aa          MOVE    *A13(MEN_BDY),A10,W  ;THIS IS NEGATIVE TO GIVE US BOX TOP
         00008cb0     01a0  
    2507 00008cc0     40aa          ADD     A5,A10               ;NOW WE HAVE BOX TOP
    2508                    
    2509 00008cd0     b5a5          MOVE    *A13(MEN_BAR),A5,W   ;GET BAR HEIGHT
         00008ce0     0190  
    2510 00008cf0     2fe5          SRL     1,A5                 ;FIND CENTER OF BAR
    2511 00008d00     40aa          ADD     A5,A10               ;NOW WE'RE AT BAR CENTER.
    2512                    
    2513 00008d10     09e7          MOVI    H_SLAVE,A7        ;FORK OFF SO IT CAN USE PDATA!
         00008d20 00008ed0' 
    2514 00008d40     0d5f          CALLA   P_FORK               ;START UP ANOTHER W/ SAME ID TO FLASH!
         00008d50 00000000! 
    2515 00008d70     0960  DHMX    RETS
    2516                    
    2517                    **************************************************************************
    2518                    *                                                                        *
    2519                    *          BLNKHELP                                                      *
    2520                    *                                                                        *
    2521                    *          THIS IS CALLED TO BLANK OUT THE HELP AREA.  IT IS             *
    2522                    *          USED BY BOTH THE "NORMAL" HELP PLOTTER AND IS                 *
    2523                    *          CALLED BY THE ADJUSTMENT HELP PROGRAM.                        *
    2524                    *                                                                        *
    2525                    *          THIS RETURNS THE LEFT X FOR THE HELP MENU IN A9               *
    2526                    *                                                                        *
    2527                    **************************************************************************
    2528 00008d80           BLNKHELP:
    2529 00008d80     098f          MMTM    SP,A3,A4,A5,A6
         00008d90     1e00  
    2530 00008da0     0d3f          CALLR   MENU_LR_A6_A5        ;GET RIGHT X OF MAIN MENU IN A6
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   55

         00008db0     ff54  
    2531 00008dc0     4cc9          MOVE    A6,A9                ;PASS TO HELP MENU SLAVE
    2532                    *
    2533                    *       NOW BLANK OUT THE "HELP" REGION
    2534                    *
    2535 00008dd0     4cc3          MOVE    A6,A3                ;UPPER LEFT X OF REGION TO BLANK OUT
    2536 00008de0     0b23          ADDI    INST_ULY*10000H,A3   ;THIS IS UPPER LEFT OF BLOCK
         00008df0 002d0000  
    2537                    
    2538 00008e10     09e4          MOVI    TIT_LRX+(10000H*400),A4 ;COORDINATE OF LOWER RIGHT OF HELP AREA
         00008e20 01900185  
    2539 00008e40     e264          SUBXY   A3,A4                   ;THIS IS SIZE OF REGION TO BLANK
    2540 00008e50     0d5f          CALLA   BLNKAREA                ;BLANK OUT THE HELP AREA
         00008e60 00000000! 
    2541 00008e80     0b09          ADDI    BOX_XGAP,A9             ;RETURN X FOR HELP MENUS
         00008e90     0002  
    2542 00008ea0     09af          MMFM    SP,A3,A4,A5,A6
         00008eb0     0078  
    2543 00008ec0     0960          RETS
    2544                    
    2545                    **************************************************************************
    2546                    *                                                                        *
    2547                    *          H_SLAVE                                                       *
    2548                    *                                                                        *
    2549                    *          THIS IS A PROCESS CREATED TO PLOT THE HELP BOX.               *
    2550                    *          IT DOES ITS PLOTTING THEN DIES.   THIS ALLOWS IT              *
    2551                    *          TO USE THE PDATA AREA WITHOUT DISTURBING THE CALLER.          *
    2552                    *                                                                        *
    2553                    *          A8 = POINTER TO HELP BOX STRUCTURE                            *
    2554                    *          A9 = LEFT MARGIN FOR THE HELP BOX.                            *
    2555                    *          A10 = Y OF CENTER OF BOX ...HIGH HALF IS ZERO FOR Y CENTING   *
    2556                    *                IF HIGH HALF IS NON-ZERO, THEN THIS IS TOP OF BOX       *
    2557                    *                                                                        *
    2558                    **************************************************************************
    2559              0000  HM_JUST          EQU     0
    2560              0010  HM_COLOR         EQU     HM_JUST+WORD_SIZE
    2561              0020  HM_ENTS          EQU     HM_COLOR+WORD_SIZE
    2562              0030  HM_DATA          EQU     HM_ENTS+WORD_SIZE      ;ENTRY POINTERS
    2563                    
    2564              0100  HS_ROUT          EQU     PDATA             ;LONG-TEXT ROUTINE
    2565              0120  HS_X             EQU     HS_ROUT+LONG_SIZE ;WORD-X FOR TEXT ROUTINE
    2566              0130  HS_Y             EQU     HS_X+WORD_SIZE    ;WORD-CURRENT Y
    2567              0140  HS_ENTS          EQU     HS_Y+WORD_SIZE    ;WORD-ENTRIES LEFT TO DO
    2568              0150  HS_COLOR         EQU     HS_ENTS+WORD_SIZE ;WORD-COLOR OF MENU
    2569              0160  HS_PTR           EQU     HS_COLOR+WORD_SIZE ;LONG-CURRENT TEXT POINTER
    2570                    
    2571 00008ed0           H_SLAVE:
    2572 00008ed0                   SLEEPK  1
    2573                    
    2574                    *
    2575                    *       A9 HAS RIGHT X OF MENU
    2576                    *
    2577 00008f10     4d21          MOVE    A9,A1                     ;PUT THIS X VALUE IN A1
    2578                    
    2579 00008f20     b500          MOVE    *A8(HM_JUST),A0,W         ;0 = CENTER  1=LEFT
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   56

         00008f30     0000  
    2580 00008f40     ca06          JRZ     HS_CENT                   ;CENTER....SETUP X ACCORDINGLY
    2581                    *
    2582                    *       LEFT JUSTIFY....STORE ROUTINE
    2583                    *
    2584 00008f50     09e0          MOVI    STRLNRM,A0                ;LEFT JUSTIFY ROUTIN
         00008f60 00000000! 
    2585                    *
    2586                    *       NOW FORM X AS SOME MARGIN FROM WINDOW....
    2587                    *
    2588 00008f80     0b01          ADDI    MB_XWID+HELP_X_MARGIN,A1  ;ADD MARGIN TO FORM X FOR TEXT
         00008f90     000d  
    2589 00008fa0     c006          JRUC    CENTER_JOIN               ;CONTINUE
    2590                    
    2591 00008fb0           HS_CENT:
    2592 00008fb0     09e0          MOVI    STRCNRM,A0                ;USE CENTERING ROUTINE
         00008fc0 00000000! 
    2593                    *
    2594                    *       A1 HAS LEFT X OF HELP BOX...FIND RIGHT X
    2595                    *
    2596 00008fe0     0b01          ADDI    TIT_LRX,A1
         00008ff0     0185  
    2597 00009000     2fe1          SRL     1,A1                      ;THIS IS CENTER X
    2598                    
    2599 00009010           CENTER_JOIN:
    2600 00009010     b02d          MOVE    A1,*A13(HS_X),W           ;STORE X
         00009020     0120  
    2601 00009030     b20d          MOVE    A0,*A13(HS_ROUT),L        ;STORE ROUTINE
         00009040     0100  
    2602                    
    2603 00009050     b501          MOVE    *A8(HM_ENTS),A1,W         ;GET NUMBER OF ENTRIES
         00009060     0020  
    2604 00009070     b02d          MOVE    A1,*A13(HS_ENTS),W        ;COUNT IT DOWN IN P-AREA
         00009080     0140  
    2605                    
    2606 00009090     b500          MOVE    *A8(HM_COLOR),A0,W        ;GET COLOR
         000090a0     0010  
    2607 000090b0     b00d          MOVE    A0,*A13(HS_COLOR),W       ;STASH IT
         000090c0     0150  
    2608                    
    2609 000090d0     0b08          ADDI    HM_DATA,A8                ;POINT AT 1ST ENTRY
         000090e0     0030  
    2610 000090f0     b30d          MOVE    A8,*A13(HS_PTR),L         ;NOW WE'RE READY.
         00009100     0160  
    2611                    *
    2612                    *       ALL PDATA AREA SET.....NOW WE NEED TO DRAW THE BORDER
    2613                    *
    2614                    *         FOR DOBORDER
    2615                    *
    2616                    *         A4 = UPPER LEFT Y,X                                           
    2617                    *         A5 = LOWER RIGHT Y,X                                  
    2618                    *         A0 = Y,X WIDTH OF BORDER                              
    2619                    *         A9 = COLOR OF BORDER.                                         
    2620                    *
    2621                    *       LOWER RIGHT X IS SUCH THAT IT LINES UP WITH TITLE BOX.
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   57

    2622                    *       THE Y IS A BIT TRICKIER......NUMBER OF ENTRIES IS
    2623                    *       SITTING IN A1
    2624                    *
    2625 00009110     09c5          MOVI    HELP_DY,A5                ;DISTANCE PER ENTRY
         00009120     000c  
    2626 00009130     5e25          MPYU    A1,A5                     ;DISTANCE FOR ALL ENTRIES
    2627 00009140     0b05          ADDI    HELP_Y_MARGIN+(MB_YWID*2)+HELP_YLO_MARGIN,A5
         00009150     0012  
    2628                    *
    2629                    *       A5 NOW CONTAINS FULL HEIGHT OF BOX
    2630                    *
    2631                    *       NOW SEE IF WE'RE CENTERING ON A10 OR IF A10 IS THE TOP.
    2632                    *
    2633 00009160     0d3f          CALLR   TOP_IN_A10
         00009170     003a  
    2634                    *
    2635                    *       NOW FORM UPPER LEFT IN A4
    2636                    *
    2637 00009180     4d44          MOVE    A10,A4                    ;MOVE Y OVER
    2638 00009190     2604          SLL     16,A4                     ;MAKE ROOM FOR X
    2639 000091a0     4124          ADD     A9,A4                     ;PUT IN THE X...THIS IS UPPER LEFT!
    2640                    
    2641 000091b0     4145          ADD     A10,A5                    ;ADD BASE TO OFFSET
    2642 000091c0     2605          SLL     16,A5                     ;PUT IN Y POSITION
    2643 000091d0     0b05          ADDI    TIT_LRX,A5                ;ADD IN THE X FOR THE CORNER
         000091e0     0185  
    2644                    *
    2645                    *       NOW ADJUST FROM TOP OF BOX TO POSITION OF
    2646                    *       1ST ENTRY.
    2647                    *
    2648 000091f0     0b0a          ADDI    MB_YWID+HELP_Y_MARGIN,A10  ;Y OF 1ST ENTRY
         00009200     000b  
    2649 00009210     b14d          MOVE    A10,*A13(HS_Y),W           ;PUT AWAY
         00009220     0130  
    2650                    
    2651 00009230     b5a9          MOVE    *A13(HS_COLOR),A9,W       ;GET THE COLOR FOR DOBORDER
         00009240     0150  
    2652                    
    2653 00009250     0d3f          CALLR   STD_BORD
         00009260     ff8f  
    2654                    *
    2655                    *       NOW WE NEED TO WALK THROUGH AND PLOT THE HELP
    2656                    *       MENU ENTRIES.
    2657                    *
    2658                    *       A0 = SLEEP
    2659                    *       A1 = ROUTINE
    2660                    *       A6 = COLOR
    2661                    *       A8 = POINTER
    2662                    *       A9 = ADDRESS
    2663                    *       A10 = SPACING
    2664                    *       A11 = FONT
    2665                    *       A14 = FLAGS
    2666                    *
    2667 00009270           NEXT_HELP:
    2668 00009270     b7a2          MOVE    *A13(HS_PTR),A2,L         ;GET OUR CURRENT POINTER
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   58

         00009280     0160  
    2669 00009290     9648          MOVE    *A2+,A8,L                 ;GET THE CURRENT MESSAGE POINTER
    2670 000092a0     b24d          MOVE    A2,*A13(HS_PTR),L         ;AND PUT POINTER BACK
         000092b0     0160  
    2671                    
    2672 000092c0     5600          CLR     A0
    2673 000092d0     b7a1          MOVE    *A13(HS_ROUT),A1,L        ;ROUTINE IN A1
         000092e0     0100  
    2674 000092f0     b5a6          MOVE    *A13(HS_COLOR),A6,W       ;STUFF COLOR
         00009300     0150  
    2675                    
    2676 00009310     b5a9          MOVE    *A13(HS_Y),A9,W           ;GET Y
         00009320     0130  
    2677 00009330     2609          SLL     16,A9                     ;SHIFT INTO PLACE
    2678 00009340     b5aa          MOVE    *A13(HS_X),A10,W
         00009350     0120  
    2679 00009360     4149          ADD     A10,A9                    ;A9 IS NOW POINTING AT SCREEN
    2680                    
    2681 00009370     09ca          MOVI    SPACING07,A10             ;SPACING
         00009380     0001  
    2682 00009390     09eb          MOVI    RD7FONT,A11               ;FONT IS BABY FONT
         000093a0 00000000! 
    2683 000093c0                   JSRP    LM_FINIS                  ;PRINT IT OUT!
    2684                    
    2685 00009430     b5a9          MOVE    *A13(HS_Y),A9,W           ;GET THE Y
         00009440     0130  
    2686 00009450     0b09          ADDI    HELP_DY,A9                ;KICK IT
         00009460     000c  
    2687 00009470     b12d          MOVE    A9,*A13(HS_Y),W           ;PUT IT BACK
         00009480     0130  
    2688                    
    2689 00009490     b5a0          MOVE    *A13(HS_ENTS),A0,W        ;ENTRY COUNT
         000094a0     0140  
    2690 000094b0     1420          DEC     A0
    2691 000094c0     b00d          MOVE    A0,*A13(HS_ENTS),W        ;PUT IT BACK
         000094d0     0140  
    2692 000094e0     cbd8          JRNZ    NEXT_HELP
    2693                    
    2694 000094f0     c080          JAUC    SUCIDE                    ;OUR WORK IS DONE!
         00009500 00000000! 
    2695                    
    2696                    **************************************************************************
    2697                    *                                                                        *
    2698                    *          TOP_IN_A10                                                    *
    2699                    *                                                                        *
    2700                    *          THIS IS CALLED BY H_SLAVE TO GET THE UPPER LEFT               *
    2701                    *          CORNER OF THE BOX IN A10.  A10 HAS THE PASSED PARAMETER.      *
    2702                    *          A5 HAS THE HEIGHT OF THE BOX.  IF THE TOP HALF OF A10         *
    2703                    *          IS ZERO, THEN THEN WE WANT THE BOX CENTER AT THE              *
    2704                    *          A10 LEVEL.  IF THE TOP HALF OF A10 IS NON-ZERO THEN           *
    2705                    *          A10 WAS PASSED AS THE TOP.                                    *
    2706                    *                                                                        *
    2707                    *          RETURN A10 AS THE Y FOR THE TOP OF THE HELP BOX.              *
    2708                    *                                                                        *
    2709                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   59

    2710 00009520           TOP_IN_A10:
    2711 00009520     098f          MMTM    SP,A5
         00009530     0400  
    2712 00009540     0b6a          CMPI    0FFFFH,A10                ;IS THE TOP HALF ZERO?
         00009550 ffff0000  
    2713 00009570     c302          JRHI    TOP_IS_TOP                ;TOP IS SET..RETURN
    2714 00009580     2fe5          SRL     1,A5                      ;TOP OF BOX IS HALF UP FROM MAIN MENU BAR CENTER
    2715 00009590     44aa          SUB     A5,A10                    ;NOW A10 HAS Y BASE OF BOX
    2716 000095a0           TOP_IS_TOP:
    2717 000095a0     09af          MMFM    SP,A5
         000095b0     0020  
    2718 000095c0     0960          RETS
    2719                    
    2720                    **************************************************************************
    2721                    *                                                                        *
    2722                    *          AREUSURE                                                      *
    2723                    *                                                                        *
    2724                    *          THIS IS CALLED TO GET A CONFIRMATION FROM THE USER.           *
    2725                    *          A8 = PROMPT...THIS WILL APPEAR ABOVE THE "ARE YOU SURE"       *
    2726                    *          A9 = ROUTINE TO JSRP TO DO THE DESIRED ACTION                 *
    2727                    *          A10 = MESSAGE TO DISPLAY CONFIRMING COMPLETION                *
    2728                    *                                                                        *
    2729                    *          RETURN A0=0 MEANS YES WAS CHOSEN.                             *
    2730                    *                 A0 .NE. 0 MEANS NO                                     *
    2731                    *                                                                        *
    2732                    **************************************************************************
    2733 000095d0           AREUSURE:
    2734 000095d0     0d5f          CALLA   CLR_SCRN             ;BLANK IT ALL OUT!
         000095e0 00000000! 
    2735 00009600     b32d          MOVE    A9,*A13(PDATA),L     ;SAVE ROUTINE
         00009610     0100  
    2736 00009620     a34c          MOVE    A10,-*A12,L          ;AND CONFIRM MESSAGE
    2737                    
    2738 00009630     0d3f          CALLR   SURE_BOX
         00009640     0060  
    2739                    
    2740 00009650     4d02          MOVE    A8,A2                ;PUT MESSAGE TEXT IN SAFE PLACE
    2741 00009660     09e8          MOVI    MESS_SURE,A8         ;SETUP FOR TITLE
         00009670 0000a7a0' 
    2742 00009690     0d5f          CALLA   LM_SETUP             ;STUFF REGGIES
         000096a0 00000000! 
    2743 000096c0     4c48          MOVE    A2,A8                ;GET STRING IN THERE
    2744 000096d0                   JSRP    LM_FINIS             ;AND PRINT IT
    2745                    
    2746 00009740     09e8          MOVI    M_SURE,A8            ;NOW THE "ARE YOU SURE" PART
         00009750 0000a840' 
    2747 00009770                   JSRP    L_MESS               ;PUT IT UP.
    2748                    
    2749 000097e0     09e8          MOVI    MEN_YN,A8            ;PUT UP THE "YES/NO" SELECTOR.
         000097f0 00000000! 
    2750 00009810     09c9          MOVI    2,A9                 ;CURSOR ON 2ND ENTRY (NO)
         00009820     0002  
    2751                    
    2752 00009830                   JSRP    B_MENU               ;AND GET A RESPONSE.
    2753 000098a0     0b48          CMPI    1,A8                 ;WAS IT YES?
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   60

         000098b0     fffe  
    2754 000098c0     cb1f          JRNZ    SURE_X               ;NOPE....GET OUT
    2755                    
    2756 000098d0     0d5f          CALLA   CLR_SCRN             ;CLEAR THE SCREEN FIRST, SO ROUTINE CAN PLOT!
         000098e0 00000000! 
    2757                    
    2758 00009900     b7a0          MOVE    *A13(PDATA),A0,L     ;GET THE ROUTINE TO CALL
         00009910     0100  
    2759 00009920     09e7          MOVI    SURE_RET,A7
         00009930 00009970' 
    2760 00009950     a2ec          MOVE    A7,-*A12,L           ;PUSH RETURN ADDRESS
    2761 00009960     0160          JUMP    A0                   ;AND "JSRP" THE ROUTINE
    2762                    
    2763 00009970           SURE_RET:
    2764 00009970     0d3f          CALLR   SURE_BOX             ;BOX IT!
         00009980     002c  
    2765 00009990     9788          MOVE    *A12+,A8,L
    2766 000099a0                   JSRP    SUR_MESS             ;PRINT THE MESSAGE
    2767                    
    2768 00009a10                   JSRP    ANY_BUT              ;NOW RETRIEVE ANY BUTTON THEN RETURN
    2769                    
    2770 00009a80     5600          CLR     A0                   ;RETURN SUCCESS
    2771 00009a90                   RETP
    2772                    
    2773 00009ac0           SURE_X: 
    2774 00009ac0     0b0c          ADDI    LONG_SIZE,A12        ;POP MESSAGE
         00009ad0     0020  
    2775 00009ae0     09c0          MOVI    2,A0                 ;RETURN FAILURE
         00009af0     0002  
    2776 00009b00                   RETP
    2777                    
    2778                    **************************************************************************
    2779                    *                                                                        *
    2780                    *          SUR_MESS                                                      *
    2781                    *                                                                        *
    2782                    *          THIS PRINTS MESSAGE IN A8 IN THE ARE U SURE BOX               *
    2783                    *          CONFIRMATION SPOT.                                            *
    2784                    *                                                                        *
    2785                    **************************************************************************
    2786 00009b30           SUR_MESS:
    2787 00009b30     a30c          MOVE    A8,-*A12,L
    2788 00009b40     09e8          MOVI    MESS_CONFIRM,A8
         00009b50 0000a960' 
    2789 00009b70     0d5f          CALLA   LM_SETUP             ;GET CONFIRMATION DATA READY.
         00009b80 00000000! 
    2790 00009ba0     9788          MOVE    *A12+,A8,L
    2791 00009bb0                   JSRP    LM_FINIS             ;PRINT OUR PART
    2792 00009c20                   RETP
    2793                    
    2794 00009c50           SURE_BOX:
    2795 00009c50     09c9          MOVI    COLOR_YELLOW,A9
         00009c60     0505  
    2796 00009c70     09e4          MOVI    003D0025H,A4
         00009c80 003d0025  
    2797 00009ca0     09e5          MOVI    00F6016AH,A5
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   61

         00009cb0 00f6016a  
    2798 00009cd0     c000          jruc    STD_BORD            ;BORDER-IZE THE WHOLE THING.
         00009ce0     fee7  
    2799                    
    2800 00009cf0           CENT_BOX:
    2801 00009cf0     09c9          MOVI    ROBO_RED,A9
         00009d00     0303  
    2802 00009d10           CBOX_COL:
    2803 00009d10     09e4          MOVI    00450025H,A4
         00009d20 00450025  
    2804 00009d40     09e5          MOVI    00B4016AH,A5
         00009d50 00b4016a  
    2805 00009d70     c000          jruc    STD_BORD            ;BORDER-IZE THE WHOLE THING.
         00009d80     fedd  
    2806                    
    2807                    *----------------------------------------------------------------------------*
    2808                    *----------------------------------------------------------------------------*
    2809                    *****************************    MESSAGES    *********************************
    2810                    *----------------------------------------------------------------------------*
    2811                    *----------------------------------------------------------------------------*
    2812                    
    2813              0032  INSTR_Y  EQU     INST_ULY+5
    2814              003c  INSTR_2Y EQU     INSTR_Y+10
    2815                    
    2816 00009d90           MM_INST1
    2817 00009d90                   MESS_MAC  RD7FONT,SPACING07,MENU_X,INSTR_Y,COLOR_BPR,STRCNRM,0
    2818 00009e30       53          .byte   "SELECT WITH ANY STICK"
    2819 00009ed8       00          .BYTE    0
    2820 00009ee0                   .EVEN
    2821                    
    2822 00009ee0           MM_INST2
    2823 00009ee0                   MESS_MAC  RD7FONT,SPACING07,MENU_X,INSTR_2Y,COLOR_BPR,STRCNRM,0
    2824 00009f80       41          .byte   "ACTIVATE WITH ANY BUTTON"
    2825 0000a040       00          .BYTE    0
    2826 0000a050                   .EVEN
    2827                    
    2828 0000a050           MESS_DOOR
    2829 0000a050                   MESS_MAC  RD7FONT,SPACING20,200,128,ROBO_RED,STRCNRM,0
    2830 0000a0f0       49          .byte  "INVALID GAME SETTINGS"
    2831 0000a198       00          .BYTE    0,1                  ;0 = END OF STRING...1 = MORE MESSAGES!
    2832 0000a1b0                   .EVEN
    2833                    ;MESS_OPEN
    2834                    ;       MESS_MAC  RD7FONT,SPACING20,200,160,ROBO_WHITE,STRCNRM,0
    2835                    ;       .byte  "OPEN COIN DOOR TO"
    2836                    ;       .BYTE   0,1                    ;0 = END OF STRING...1 = MORE MESSAGES!
    2837                    ;       .EVEN
    2838                    ;MESS_OPEN_2
    2839                    ;       MESS_MAC  RD7FONT,SPACING20,200,179,ROBO_WHITE,STRCNRM,0
    2840                    ;       .byte  "RESTORE FACTORY SETTINGS."
    2841                    ;       .BYTE    0,0
    2842                    ;       .EVEN
    2843                    
    2844 0000a1b0           MESS_FAIL
    2845 0000a1b0                   MESS_MAC  RD7FONT,SPACING20,200,112,ROBO_RED,STRCNRM,0
    2846 0000a250       49          .byte  "INVALID GAME SETTINGS"
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   62

    2847 0000a2f8       00          .BYTE    0,1                  ;0 = END OF STRING...1 = MORE MESSAGES!
    2848 0000a310                   .EVEN
    2849 0000a310                   MESS_MAC  RD7FONT,SPACING20,200,144,ROBO_WHITE,STRCNRM,0
    2850 0000a3b0       41          .byte  "ATTEMPT TO RESTORE"
    2851 0000a440       00          .BYTE    0,1                  ;0 = END OF STRING...1 = MORE MESSAGES!
    2852 0000a450                   .EVEN
    2853 0000a450                   MESS_MAC  RD7FONT,SPACING20,200,164,ROBO_WHITE,STRCNRM,0
    2854 0000a4f0       46          .byte  "FACTORY SETTINGS HAS FAILED."
    2855 0000a5d0       00          .BYTE     0,0
    2856 0000a5e0                   .EVEN
    2857                    
    2858 0000a5e0           MESS_BITCHIN
    2859 0000a5e0       41          .byte   "ADJUSTMENTS OK",0
    2860 0000a660                   .even
    2861                    
    2862 0000a660           MESS_TITLE
    2863 0000a660                   MESS_MAC  RD15FONT,SPACING20,TM_X,TM_Y,ROBO_GREEN,STRCNRM,0
    2864                    
    2865              001c  RV_Y    EQU      TM_Y+18
    2866                    
    2867 0000a700           MESS_REV
    2868 0000a700                   MESS_MAC  RD7FONT,SPACING20,TM_X,RV_Y,ROBO_YELLOW,STRCNRM,0
    2869                    *
    2870                    *       THIS IS SETUP FOR THE QUESTION BEING ASKED
    2871                    *       BY "ARE YOU SURE"
    2872                    *
    2873 0000a7a0           MESS_SURE
    2874 0000a7a0                   MESS_MAC  RD15FONT,SPACING20,200,102,ROBO_LF,STRCNRM,0
    2875                    *
    2876                    *       THIS IS THE "ARE YOU SURE" PART.
    2877                    *
    2878 0000a840           M_SURE
    2879 0000a840                   MESS_MAC  RD15FONT,SPACING20,200,128,ROBO_YELLOW,STRCNRM,0
    2880 0000a8e0       41          .byte   "ARE YOU SURE?"
    2881 0000a948       00          .BYTE       0,0
    2882 0000a960                   .EVEN
    2883                    
    2884 0000a960           MESS_CONFIRM
    2885 0000a960                    MESS_MAC  RD15FONT,SPACING20,200,115,COLOR_LF,STRCNRM,0
    2886                    
    2887                    
    2888                    **************************************************************************
    2889                    *                                                                                               *
    2890                    *       OPERATOR MESSAGE ENTRY                                                                  *
    2891                    *                                                                                               *
    2892                    **************************************************************************
    2893              0100  OP_LINE_CHAR    equ     PDATA
    2894              0110  OP_LINE_LINE    equ     PDATA+WORD_SIZE
    2895              0120  OP_LETS         equ     OP_LINE_LINE+WORD_SIZE
    2896              0210  OP_STIME        equ     OP_LETS+(30 * BYTE_SIZE)
    2897              0220  OP_SVAL         equ     OP_STIME+WORD_SIZE
    2898                    
    2899              0019  LET_DIST_X      equ     25
    2900              0018  LET_DIST_Y      equ     24
    2901              000e  LET_BOX_CX      equ     14
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   63

    2902              0002  LET_BOX_CY      equ     2
    2903              0003  LET_BOX_WX      equ     3
    2904              0001  LET_BOX_WY      equ     1
    2905              00a3  LET_START_Y1    equ     163
    2906              00bb  LET_START_Y2    equ     LET_START_Y1+LET_DIST_Y
    2907              00d3  LET_START_Y3    equ     LET_START_Y2+LET_DIST_Y
    2908              00eb  LET_START_Y4    equ     LET_START_Y3+LET_DIST_Y
    2909              0037  LET_INST1       equ     55
    2910              0016  LET_START_X     equ     22
    2911              0003  LET_LINE_MAX    equ     3
    2912              000e  LET_CHAR_MAX    equ     14
    2913              000c  LET_TEXT_GAP    equ     12
    2914              006e  LET_TEXT1       equ     110
    2915              007a  LET_TEXT2       equ     LET_TEXT1+LET_TEXT_GAP
    2916              0086  LET_TEXT3       equ     LET_TEXT2+LET_TEXT_GAP
    2917              0019  OP_MAX_CHARS    equ     CMESS_CHARS-1
    2918              0000! FONT_T          .equ    osgfont_t
    2919                    
    2920                    
    2921 00000140                   .bss    BLINE   ,16
    2922 00000150                   .bss    BCHAR   ,16
    2923                    
    2924 0000aa00            SUBR   opmsg_main
    2925                    
    2926                            .if     PRINTER
    2927                            movk    1,a0
    2928                            calla   PBADGUY
    2929                            .endif
    2930                    
    2931 0000aa00     0d5f          calla   CLR_SCRN
         0000aa10 00000000! 
    2932 0000aa30     09e2          movi    opmsg_s,a2
         0000aa40 0000d8f0' 
    2933 0000aa60     09c3          movi    ROBO_YELLOW,a3
         0000aa70     0505  
    2934 0000aa80                   JSRP    TOP_BOX                 ;KICK OUT TOP BOX
    2935                    
    2936 0000aaf0     09e8          movi    OMINST1,a8
         0000ab00 0000d980' 
    2937 0000ab20                   JSRP    print_multi
    2938                    
    2939 0000ab90                   SLEEPK  1
    2940                    
    2941 0000abd0     5708          clr     a8                      ;Do 4 rows of letters
    2942 0000abe0     1bca          movk    30,a10
    2943 0000abf0     0d3f          callr   OPPLOTLINE
         0000ac00     0256  
    2944                    
    2945 0000ac10     1828          movk    1,a8
    2946 0000ac20     1bca          movk    30,a10
    2947 0000ac30     0d3f          callr   OPPLOTLINE
         0000ac40     0252  
    2948                    
    2949 0000ac50     1848          movk    2,a8
    2950 0000ac60     1bca          movk    30,a10
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   64

    2951 0000ac70     0d3f          callr   OPPLOTLINE
         0000ac80     024e  
    2952                    
    2953 0000ac90     1868          movk    3,a8
    2954 0000aca0     1bca          movk    30,a10
    2955 0000acb0     0d3f          callr   OPPLOTLINE
         0000acc0     024a  
    2956                    
    2957 0000acd0     5600          clr     a0
    2958 0000ace0     0580          move    a0,@BLINE
         0000acf0 00000140- 
    2959 0000ad10     0580          move    a0,@BCHAR
         0000ad20 00000150- 
    2960                    
    2961 0000ad40     5708          clr     a8
    2962 0000ad50     b10d          move    a8,*a13(OP_LINE_LINE)   ;ON THE FIRST LINE
         0000ad60     0110  
    2963                    
    2964 0000ad70     0d3f          callr   OM_STARTLINE            ;INITIALIZE ALL THE FLAGS FOR IT
         0000ad80     013d  
    2965                    
    2966 0000ad90     574a          clr     a10
    2967 0000ada0     182b          movk    1,a11
    2968 0000adb0     0d3f          callr   BOXCHAR                 ;BOX INITIAL ONE
         0000adc0     0212  
    2969                    
    2970 0000add0     182b          movk    1,a11
    2971 0000ade0     0d3f          callr   OMPLOTTEXT
         0000adf0     013e  
    2972                    
    2973                    
    2974 0000ae00     5600          clr     a0
    2975 0000ae10     b00d          move    a0,*a13(OP_SVAL)
         0000ae20     0220  
    2976 0000ae30     b00d          move    a0,*a13(OP_STIME)
         0000ae40     0210  
    2977                    
    2978 0000ae50           DOLOOP                                  ;>Loop for stick and things
    2979 0000ae50                   SLEEPK  1
    2980                    
    2981 0000ae90     0d3f          callr   om_getstick             ;Check out the player board
         0000aea0     00eb  
    2982 0000aeb0     cb05          jrnz    do1                     ;switch closed?
    2983 0000aec0     b00d          move    a0,*a13(OP_SVAL)        ;Clear timer and direction
         0000aed0     0220  
    2984 0000aee0     b00d          move    a0,*a13(OP_STIME)
         0000aef0     0210  
    2985 0000af00     c0f4          jruc    DOLOOP
    2986 0000af10           do1
    2987 0000af10     b5a1          move    *a13(OP_SVAL),A1        ;Get last direction
         0000af20     0220  
    2988 0000af30                   ANDK    7,a1                    ;Mask off repeat bit
    2989 0000af50     4801          cmp     a0,a1
    2990 0000af60     ca06          jrz     do2                     ;Still same thing?
    2991 0000af70     b00d          move    a0,*a13(OP_SVAL)
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   65

         0000af80     0220  
    2992 0000af90     5621          clr     a1
    2993 0000afa0     b02d          move    a1,*a13(OP_STIME)       ;Clear the timer
         0000afb0     0210  
    2994 0000afc0     c02a          jruc    DODONE                  ;Process initial hit
    2995 0000afd0           do2
    2996 0000afd0     b5a1          MOVE    *A13(OP_SVAL),A1        ;SNAG THE REPEAT BIT
         0000afe0     0220  
    2997 0000aff0     0b81          ANDI    80H,A1
         0000b000 ffffff7f  
    2998 0000b020     cb15          JRNZ    DO3                     ;BR = IN REPEAT MODE
    2999 0000b030     b5a0          MOVE    *A13(OP_STIME),A0       ;GET TIMER
         0000b040     0210  
    3000 0000b050     1020          INC     A0
    3001 0000b060     b00d          MOVE    A0,*A13(OP_STIME)
         0000b070     0210  
    3002 0000b080     0b40          CMPI    15,A0
         0000b090     fff0  
    3003 0000b0a0     1f60          btst    4,a0
    3004 0000b0b0     c8d9          JRLO    DOLOOP                  ;GO BACK TO SLEEP
    3005 0000b0c0     5600          CLR     A0
    3006 0000b0d0     b00d          MOVE    A0,*A13(OP_STIME)       ;CLEAR OUT THE TIMER
         0000b0e0     0210  
    3007 0000b0f0     b5a1          MOVE    *A13(OP_SVAL),A1
         0000b100     0220  
    3008 0000b110     4c20          MOVE    A1,A0
    3009 0000b120     0ba1          ORI     80H,A1                  ;PUT UPPER BIT ON
         0000b130 00000080  
    3010 0000b150     b02d          MOVE    A1,*A13(OP_SVAL)        ;SET DIRECTION WITH REPEAT ON
         0000b160     0220  
    3011 0000b170     c00f          JRUC    DODONE
    3012 0000b180           DO3
    3013 0000b180     b5a0          MOVE    *A13(OP_STIME),A0       ;GET TIMER
         0000b190     0210  
    3014 0000b1a0     1020          INC     A0
    3015 0000b1b0     b00d          MOVE    A0,*A13(OP_STIME)
         0000b1c0     0210  
    3016 0000b1d0     0b40          CMPI    5,A0
         0000b1e0     fffa  
    3017 0000b1f0     c8c5          JRLO    DOLOOP                  ;GO BACK TO SLEEP
    3018 0000b200     5600          CLR     A0
    3019 0000b210     b00d          MOVE    A0,*A13(OP_STIME)       ;CLEAR OUT THE TIMER
         0000b220     0210  
    3020 0000b230     b5a0          MOVE    *A13(OP_SVAL),A0
         0000b240     0220  
    3021 0000b250                   ANDK    7,a0                    ;TURN OFF REPEAT BIT
    3022 0000b270           DODONE
    3023 0000b270     b5a1          move    *A13(OP_SVAL),a1        ;Get current entry
         0000b280     0220  
    3024 0000b290                   ANDK    7,a1
    3025 0000b2b0     05a8          move    @BLINE,a8
         0000b2c0 00000140- 
    3026 0000b2e0     05aa          move    @BCHAR,a10
         0000b2f0 00000150- 
    3027 0000b310     576b          clr     a11
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   66

    3028 0000b320     0d3f          callr   BOXCHAR                 ;UNHIGHLIGHT IT
         0000b330     01bb  
    3029                    
    3030 0000b340     0b41          CMPI    1,A1                    ;CHECK UP
         0000b350     fffe  
    3031 0000b360     cb02          JRNZ    DOC1
    3032 0000b370     1428          DEC     A8
    3033 0000b380     c02c          JRUC    DOPROC
    3034 0000b390           DOC1
    3035 0000b390     0b41          CMPI    2,A1
         0000b3a0     fffd  
    3036 0000b3b0     cb02          JRNZ    DOC2
    3037 0000b3c0     1028          INC     A8
    3038 0000b3d0     c027          JRUC    DOPROC
    3039 0000b3e0           DOC2
    3040 0000b3e0     0b41          CMPI    3,A1
         0000b3f0     fffc  
    3041 0000b400     cb02          JRNZ    DOC3
    3042 0000b410     142a          DEC     A10
    3043 0000b420     c022          JRUC    DOPROC
    3044 0000b430           DOC3
    3045 0000b430     0b41          CMPI    4,A1
         0000b440     fffb  
    3046 0000b450     cb02          JRNZ    DOC4
    3047 0000b460     102a          INC     A10
    3048 0000b470     c01d          JRUC    DOPROC
    3049 0000b480           DOC4
    3050 0000b480     0b41          CMPI    5,A1                    ; DRAW BUTTON
         0000b490     fffa  
    3051 0000b4a0     cb14          JRNZ    DOCCLR                  ; WOOF WOOF
    3052                    
    3053 0000b4b0     09c3          movi    select_snd1,a3
         0000b4c0     0658  
    3054 0000b4d0     0d5f          calla   SNDSND
         0000b4e0 00000000! 
    3055                    
    3056 0000b500     0d3f          CALLR   OMADDCHAR               ; ADD THE CHAR IN A8/A10
         0000b510     010a  
    3057 0000b520     0b48          CMPI    0FFH,A8                 ; CHECK TO SEE IF DONE WITH ALL
         0000b530     ff00  
    3058 0000b540     ca2e          JRZ     DOCEND
    3059 0000b550     05a8          MOVE    @BLINE,A8
         0000b560 00000140- 
    3060 0000b580     05aa          MOVE    @BCHAR,A10
         0000b590 00000150- 
    3061 0000b5b0     182b          MOVK    1,A11
    3062 0000b5c0     0d3f          CALLR   BOXCHAR                 ; TURN THE BOX BACK ON
         0000b5d0     0191  
    3063 0000b5e0     c086          JRUC    DOLOOP
    3064 0000b5f0           DOCCLR
    3065 0000b5f0     0b41          cmpi    6,a1                    ;Start button
         0000b600     fff9  
    3066 0000b610     cb83          jrne    DOLOOP
    3067                    
    3068 0000b620     0d3f          callr   opmsg_clr
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   67

         0000b630     0060  
    3069                    ;       clr     a7
    3070                    ;       move    a7,*a13(OP_LINE_LINE)
    3071                    ;       move    a7,*a13(OP_LETS),L
    3072                    ;       callr   OM_STORECMOS
    3073                    ;       movk    1,a7
    3074                    ;       move    a7,*a13(OP_LINE_LINE)
    3075                    ;       callr   OM_STORECMOS
    3076                    ;       movk    2,a7
    3077                    ;       move    a7,*a13(OP_LINE_LINE)
    3078                    ;       callr   OM_STORECMOS
    3079                    ;       callr   BLASTMESS
    3080                    
    3081 0000b640     c034          jruc    DOCCLEAR
    3082                            
    3083                    ;
    3084                    ;       CHECK A8 ( BLINE ) AND A10 ( BCHAR ) FOR BOUNDARY STUFF
    3085                    ;
    3086 0000b650           DOPROC
    3087 0000b650     09c3          movi    cursor_snd4,a3
         0000b660     064c  
    3088 0000b670     0d5f          calla   SNDSND
         0000b680 00000000! 
    3089 0000b6a0     4d08          move    a8,a8
    3090 0000b6b0     c501          jrge    doc5
    3091 0000b6c0     5708          clr     a8
    3092 0000b6d0           doc5
    3093 0000b6d0     0b48          cmpi    LET_LINE_MAX,a8
         0000b6e0     fffc  
    3094 0000b6f0     c601          jrle    doc6
    3095 0000b700     1868          movk    LET_LINE_MAX,a8
    3096 0000b710           doc6
    3097 0000b710     4d4a          move    a10,a10
    3098 0000b720     c501          jrge    doc7
    3099 0000b730     19ca          movk    LET_CHAR_MAX,a10
    3100 0000b740           doc7
    3101 0000b740     0b4a          cmpi    LET_CHAR_MAX,a10
         0000b750     fff1  
    3102 0000b760     c601          jrle    doc8
    3103 0000b770     574a          clr     a10
    3104 0000b780           doc8
    3105 0000b780     0588          move    a8,@BLINE
         0000b790 00000140- 
    3106 0000b7b0     058a          move    a10,@BCHAR
         0000b7c0 00000150- 
    3107 0000b7e0     182b          movk    1,a11
    3108 0000b7f0     0d3f          callr   BOXCHAR
         0000b800     016e  
    3109 0000b810     c000          jruc    DOLOOP
         0000b820     ff62  
    3110                    
    3111                    
    3112                    ********************************
    3113                    * HERE IS WHERE ONE COMES WHEN DONE ENTERING THE MESSAGE -- ALREADY
    3114                    * STORED IN CMOS, TOO
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   68

    3115                    
    3116 0000b830           DOCEND
    3117 0000b830                   SLEEPK  2                       ;GET EVERYBODY CAUGHT UP
    3118 0000b870     0d5f          CALLA   CLR_SCRN                ;CLEAR THE SCREEN
         0000b880 00000000! 
    3119 0000b8a0     0d3f          CALLR   SURE_BOX
         0000b8b0     fe39  
    3120 0000b8c0     09e8          MOVI    MESS_SUCCESS,A8         ;THIS IS SUCCESS MESSAGE
         0000b8d0 0000ba60' 
    3121 0000b8f0           mflxsm  JSRP    SUR_MESS                ;PRINT THE MESSAGE
    3122 0000b960     c080          jauc    ANY_BUT                 ;NOW RETRIEVE ANY BUTTON THEN RETURN
         0000b970 00000000! 
    3123                    
    3124 0000b990           DOCCLEAR
    3125 0000b990                   SLEEPK  2
    3126 0000b9d0     0d5f          CALLA   CLR_SCRN
         0000b9e0 00000000! 
    3127 0000ba00     0d3f          CALLR   SURE_BOX
         0000ba10     fe23  
    3128 0000ba20     09e8          MOVI    MESS_CLEARED,A8
         0000ba30 0000bae0' 
    3129 0000ba50     c0e9          jruc    mflxsm
    3130                    
    3131                    
    3132 0000ba60           MESS_SUCCESS
    3133 0000ba60       4d          .byte   "MESSAGE STORED",0
    3134 0000bae0                   .even
    3135                    
    3136 0000bae0           MESS_CLEARED
    3137 0000bae0       4d          .byte   "MESSAGE CLEARED",0
    3138 0000bb60                   .even
    3139                    
    3140 0000bb60           BLASTMESS:                              ;GUY ENTERED A WHOLE MESSAGE
    3141                    ;       CALLA   CMOSUNLOCK
    3142 0000bb60     0d5f          calla   ADJ_PAGE
         0000bb70 00000000! 
    3143 0000bb90     5600          clr     a0
    3144 0000bba0     09e7          movi    VALID_CUSTOM,a7
         0000bbb0 01404da0  
    3145 0000bbd0     0d5f          calla   WC_WORD
         0000bbe0 00000000! 
    3146 0000bc00     0d5f          calla   F_ADC_S                 ;FIX UP THE CHECKSUM
         0000bc10 00000000! 
    3147                    ;       calla   CMOSLOCK
    3148 0000bc30     0960          rets
    3149                    
    3150                    
    3151                    *******************************
    3152                    * Clear operator message
    3153                    * Trashes scratch, A2
    3154                    
    3155 0000bc40            SUBR   opmsg_clr
    3156                    
    3157 0000bc40     0d5f          calla   ADJ_PAGE
         0000bc50 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   69

    3158                    
    3159 0000bc70     09e7          movi    CUSTOM_MESSAGE,a7
         0000bc80 014048c0  
    3160 0000bca0     1862          movk    CMESS_LINES,a2
    3161 0000bcb0     5600  gzcblp  clr     a0
    3162 0000bcc0     0d5f          calla   WC_BYTEI                ;Write a null
         0000bcd0 00000000! 
    3163 0000bcf0     0b07          addi    CMESS_LINE_SIZE,a7
         0000bd00     01a0  
    3164 0000bd10     3ce2          dsj     a2,gzcblp
    3165                    
    3166 0000bd20     0d5f          calla   F_ADC_S                 ;Refresh checksum
         0000bd30 00000000! 
    3167 0000bd50     c0e0          jruc    BLASTMESS
    3168                    
    3169                    
    3170                    
    3171                    ********************************
    3172                    * Get joystick and buttons status
    3173                    * 0A0H=Status (0-6)
    3174                    
    3175 0000bd60           om_getstick
    3176                    
    3177 0000bd60                   PUSH    a1
    3178                    
    3179                    ;       move    @SWITCH,a0,L
    3180 0000bd70     07a0          move    @_switch_addr,a0,L
         0000bd80 00000000! 
    3181 0000bda0     8400          move    *a0,a0,W
    3182 0000bdb0     07a1          move    @_coin_addr,a1,L
         0000bdc0 00000000! 
    3183 0000bde0     8421          move    *a1,a1,W
    3184 0000bdf0     2601          sll     16,a1
    3185 0000be00     2600          sll     16,a0
    3186 0000be10     2e00          srl     16,a0
    3187 0000be20     5420          or      a1,a0
    3188 0000be30     03e0          not     a0
    3189 0000be40     4c01          move    a0,a1
    3190 0000be50     0b80          andi    0004007fh,a0            ;P1 draw/start/stick
         0000be60 fffbff80  
    3191 0000be80     0b81          andi    00207f00h,a1            ;P2 draw/start/stick
         0000be90 ffdf80ff  
    3192 0000beb0     2f01          srl     8,a1
    3193 0000bec0     5420          or      a1,a0
    3194                    ;       move    @SWITCH+32,a1
    3195 0000bed0     07a1          move    @_switch2_addr,a1,L
         0000bee0 00000000! 
    3196 0000bf00     8421          move    *a1,a1,W
    3197 0000bf10     03e1          not     a1
    3198 0000bf20     0b81          andi    07fH,a1                 ;P3 draw/stick
         0000bf30 ffffff80  
    3199 0000bf50     5420          or      a1,a0
    3200                    
    3201 0000bf60     1fe0          btst    0,a0                    ;U
    3202 0000bf70     ca02          jrz     og2
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   70

    3203 0000bf80     1820          movk    1,a0
    3204 0000bf90     c019          jruc    gzcbx
    3205 0000bfa0           og2
    3206 0000bfa0     1fc0          btst    1,a0                    ;D
    3207 0000bfb0     ca02          jrz     og3
    3208 0000bfc0     1840          movk    2,a0
    3209 0000bfd0     c015          jruc    gzcbx
    3210 0000bfe0           og3
    3211 0000bfe0     1fa0          btst    2,a0                    ;L
    3212 0000bff0     ca02          jrz     og4
    3213 0000c000     1860          movk    3,a0
    3214 0000c010     c011          jruc    gzcbx
    3215 0000c020           og4
    3216 0000c020     1f80          btst    3,a0                    ;R
    3217 0000c030     ca02          jrz     og5
    3218 0000c040     1880          movk    4,a0
    3219 0000c050     c00d          jruc    gzcbx
    3220 0000c060           og5
    3221 0000c060     09c1          movi    070H,a1
         0000c070     0070  
    3222 0000c080     5001          and     a0,a1
    3223 0000c090     ca02          jrz     og6
    3224 0000c0a0     18a0          movk    5,a0
    3225 0000c0b0     c007          jruc    gzcbx
    3226 0000c0c0           og6
    3227 0000c0c0     0b80          andi    0ffffff80h,a0           ;Any other bits are start buttons
         0000c0d0 0000007f  
    3228 0000c0f0     ca02          jrz     og7
    3229 0000c100     18c0          movk    6,a0
    3230 0000c110     c001          jruc    gzcbx
    3231 0000c120           og7
    3232 0000c120     5600          clr     a0
    3233 0000c130           gzcbx
    3234 0000c130                   PULL    a1
    3235 0000c140     4c00          move    a0,a0
    3236 0000c150     0960          rets
    3237                    
    3238                    
    3239                    ********************************
    3240                    * SETUP THINGS FOR A NEW LINE OF TEXT
    3241                    
    3242 0000c160           OM_STARTLINE
    3243                    
    3244 0000c160                   PUSH    A0
    3245 0000c170     5600          CLR     A0
    3246 0000c180     b00d          MOVE    A0,*A13(OP_LETS)
         0000c190     0120  
    3247 0000c1a0     b00d          MOVE    A0,*A13(OP_LINE_CHAR)
         0000c1b0     0100  
    3248 0000c1c0                   PULL    A0
    3249                    
    3250 0000c1d0     0960          RETS
    3251                    
    3252                    ********************************
    3253                    * PLOT OUT A LINE OF TEXT ON THE SCREEN
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   71

    3254                    
    3255 0000c1e0           OMPLOTTEXT
    3256                    
    3257 0000c1e0     098f          MMTM    SP,A8,A10,A11
         0000c1f0     00b0  
    3258                    
    3259 0000c200                   PUSH    A11
    3260 0000c210     09e8          MOVI    OMTSETUP,A8
         0000c220 0000df60' 
    3261 0000c240     0d5f          CALLA   LM_SETUP
         0000c250 00000000! 
    3262 0000c270     4da8          MOVE    A13,A8
    3263 0000c280     0b08          ADDI    OP_LETS,A8
         0000c290     0120  
    3264 0000c2a0     b5a9          MOVE    *A13(OP_LINE_LINE),A9,W
         0000c2b0     0110  
    3265 0000c2c0     24a9          SLL     5,A9
    3266 0000c2d0     0b29          ADDI    OMLOC,A9
         0000c2e0 0000ce90' 
    3267 0000c300     8729          MOVE    *A9,A9,L
    3268 0000c310     2609          SLL     16,A9
    3269 0000c320     098f          MMTM    SP,A3,A4,A9
         0000c330     1840  
    3270 0000c340     4d23          MOVE    A9,A3
    3271 0000c350     0d03          SUBI    20000H,A3
         0000c360 fffdffff  
    3272 0000c380     09e4          MOVI    [LET_TEXT_GAP+2,394],A4
         0000c390 000e018a  
    3273 0000c3b0     0d5f          CALLA   BLNKAREA
         0000c3c0 00000000! 
    3274 0000c3e0     09af          MMFM    SP,A3,A4,A9
         0000c3f0     0218  
    3275 0000c400     0b09          ADDI    200,A9
         0000c410     00c8  
    3276 0000c420                   JSRP    LM_FINIS
    3277                    
    3278 0000c490                   PULL    A5
    3279 0000c4a0     4ca5          MOVE    A5,A5                   ;FLAG FOR UNDERSCORE OR NOT
    3280 0000c4b0     ca0d          JRZ     NOUNDER
    3281 0000c4c0     09c6          movi    ROBO_LASER,a6
         0000c4d0     3e3e  
    3282 0000c4e0     09e8          movi    underscore_s,a8
         0000c4f0 0000e000' 
    3283 0000c510     10a9          addk    5,a9                    ;SHIFT THE LITTLE GUY OVER
    3284 0000c520                   JSRP    LM_FINIS
    3285 0000c590           NOUNDER
    3286 0000c590     09af          MMFM    SP,A8,A10,A11
         0000c5a0     0d00  
    3287 0000c5b0     0960          RETS
    3288                    
    3289                    
    3290                    *******************************
    3291                    * Add the character pointed to by a8/a10
    3292                    * A8 =Line
    3293                    * A10=Char on line
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   72

    3294                    
    3295 0000c5c0           OMADDCHAR
    3296 0000c5c0                   PUSH    a8,a10
    3297                    
    3298 0000c5e0     24a8          sll     5,a8
    3299 0000c5f0     0b28          addi    OLTAB,a8                ;+Base
         0000c600 0000d630' 
    3300 0000c620     8708          move    *a8,a8,L
    3301 0000c630     246a          sll     3,a10
    3302 0000c640     4148          add     a10,a8                  ;char offset
    3303 0000c650     8f00          movb    *a8,a0                  ;snag the char
    3304 0000c660     0b40          cmpi    '_',a0
         0000c670     ffa0  
    3305 0000c680     cb09          jrne    ibpm20
    3306                    
    3307 0000c690     b5a1          move    *a13(OP_LINE_CHAR),a1   ;0BacHkspace
         0000c6a0     0100  
    3308 0000c6b0     ca38          jrz     ibpmx
    3309 0000c6c0     1421          dec     a1
    3310 0000c6d0     b02d          move    a1,*a13(OP_LINE_CHAR)
         0000c6e0     0100  
    3311 0000c6f0     4c22          move    a1,a2
    3312 0000c700     5600          clr     a0
    3313 0000c710     c026          jruc    rubent
    3314                    
    3315 0000c720           ibpm20
    3316 0000c720     0b40          cmpi    '^',a0
         0000c730     ffa1  
    3317 0000c740     cb1a          jrne    ibpmaddchar
    3318                    
    3319 0000c750     576b          clr     a11
    3320 0000c760     0d3f          callr   OMPLOTTEXT              ; GET RID OF THE FLASHING UNDERSCORE
         0000c770     ffa6  
    3321 0000c780     5600          clr     a0
    3322 0000c790     0580          move    a0,@BLINE
         0000c7a0 00000140- 
    3323 0000c7c0     0580          move    a0,@BCHAR
         0000c7d0 00000150- 
    3324 0000c7f0     0d3f          callr   OM_STORECMOS            ; WELL, BABY -- STORE IT
         0000c800     0048  
    3325 0000c810     b5a8          MOVE    *A13(OP_LINE_LINE),A8   ; GRAB THE LINE
         0000c820     0110  
    3326 0000c830     0b48          CMPI    2,A8
         0000c840     fffd  
    3327 0000c850     c921          JRHS    OMADONE
    3328 0000c860     1028          INC     A8
    3329 0000c870     b10d          MOVE    A8,*A13(OP_LINE_LINE)   ; ON THE FIRST LINE
         0000c880     0110  
    3330 0000c890     0d3f          CALLR   OM_STARTLINE            ; INITIALIZE ALL THE FLAGS FOR IT
         0000c8a0     ff8b  
    3331 0000c8b0     182b          MOVK    1,A11
    3332 0000c8c0     0d3f          CALLR   OMPLOTTEXT
         0000c8d0     ff90  
    3333 0000c8e0     c015          jruc    ibpmx
    3334                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   73

    3335                    ;       HERE IS JUST ENTER A NORMAL CHARACTER --
    3336                    ;
    3337                    ;       A8 = LINE
    3338                    ;       A10 = CHARACTER
    3339                    
    3340 0000c8f0           ibpmaddchar
    3341                    
    3342 0000c8f0     b5a1          MOVE    *A13(OP_LINE_CHAR),A1
         0000c900     0100  
    3343 0000c910     4c22          MOVE    A1,A2
    3344 0000c920     0b41          CMPI    OP_MAX_CHARS,A1
         0000c930     ffe6  
    3345 0000c940     c926          JRHS    OMACMAX
    3346 0000c950     1021          INC     A1
    3347 0000c960     b02d          MOVE    A1,*A13(OP_LINE_CHAR)
         0000c970     0100  
    3348 0000c980           rubent
    3349 0000c980     4da8          move    a13,a8
    3350 0000c990     0b08          ADDI    OP_LETS,A8
         0000c9a0     0120  
    3351 0000c9b0     2462          SLL     3,A2
    3352 0000c9c0     4048          ADD     A2,A8                   ;OFFSET INTO LOCAL STORAGE
    3353 0000c9d0     8c08          MOVB    A0,*A8
    3354 0000c9e0     1108          ADDK    8,A8
    3355 0000c9f0     5600          CLR     A0
    3356 0000ca00     8c08          MOVB    A0,*A8                  ;MAKE SURE ZERO TERMINATED
    3357 0000ca10     182b          MOVK    1,A11
    3358 0000ca20     0d3f          CALLR   OMPLOTTEXT
         0000ca30     ff7a  
    3359                    ;OMACRET
    3360 0000ca40     09af  ibpmx   MMFM    SP,A8,A10
         0000ca50     0500  
    3361 0000ca60     0960          RETS
    3362                    
    3363 0000ca70           OMADONE                                 ;COME HERE WHEN REALLY DONE
    3364                    ;       CALLA   CMOSUNLOCK
    3365 0000ca70     0d5f          CALLA   ADJ_PAGE                ;GUY ENTERED A WHOLE MESSAGE
         0000ca80 00000000! 
    3366 0000caa0     09e7          MOVI    VALID_CUSTOM,A7
         0000cab0 01404da0  
    3367 0000cad0     09e0          MOVI    VALID_VALUE,A0
         0000cae0 0000eabc  
    3368 0000cb00     0d5f          CALLA   WC_WORD
         0000cb10 00000000! 
    3369 0000cb30     0d5f          CALLA   F_ADC_S                 ;FIX UP THE CHECKSUM
         0000cb40 00000000! 
    3370                    ;       CALLA   CMOSLOCK
    3371 0000cb60     09af          MMFM    SP,A8,A10
         0000cb70     0500  
    3372 0000cb80     09c8          MOVI    0FFH,A8                 ;FLAG DONE WITH EVERYTHING
         0000cb90     00ff  
    3373 0000cba0     0960          RETS
    3374                    
    3375 0000cbb0           OMACMAX
    3376 0000cbb0     09af          mmfm    sp,a8,a10
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   74

         0000cbc0     0500  
    3377 0000cbd0     576b          clr     a11
    3378 0000cbe0     0d3f          callr   BOXCHAR
         0000cbf0     002f  
    3379 0000cc00     1868          movk    3,a8
    3380 0000cc10     19ca          movk    14,a10
    3381 0000cc20     0588          move    a8,@BLINE
         0000cc30 00000140- 
    3382 0000cc50     058a          move    a10,@BCHAR
         0000cc60 00000150- 
    3383 0000cc80     0960          rets
    3384                    
    3385                    
    3386                    **************************************************************************
    3387                    * STORE THE MESSAGE IN CMOS
    3388                    
    3389 0000cc90           OM_STORECMOS
    3390                    ;       CALLA   CMOSUNLOCK
    3391 0000cc90     0d5f          CALLA   ADJ_PAGE                ;POINT AT ADJUSTMENTS PAGE
         0000cca0 00000000! 
    3392 0000ccc0     b5a7          MOVE    *A13(OP_LINE_LINE),A7
         0000ccd0     0110  
    3393 0000cce0     09c6          MOVI    CMESS_LINE_SIZE,A6
         0000ccf0     01a0  
    3394 0000cd00     5ec7          MPYU    A6,A7                   ;OFFSET ME, BABY
    3395 0000cd10     0b27          ADDI    CUSTOM_MESSAGE,A7       ;A7 IS CMOS LOCATION
         0000cd20 014048c0  
    3396 0000cd40     4da6          MOVE    A13,A6
    3397 0000cd50     0b06          ADDI    OP_LETS,A6              ;A6 IS THE PROCESS BLOCK LOC
         0000cd60     0120  
    3398 0000cd70     1b25          movk    CMESS_CHARS-1,a5        ;CHARS/LINE
    3399                    
    3400 0000cd80           cmos_loop
    3401 0000cd80     8ec0          movb    *a6,a0                  ;fetch a character
    3402 0000cd90     0b80          andi    BYTE_MASK,A0
         0000cda0 ffffff00  
    3403 0000cdc0     0d5f          calla   WC_BYTEI                ;WRITE A BYTE
         0000cdd0 00000000! 
    3404 0000cdf0     1106          addk    BYTE_SIZE,A6            ;POINT AT NEXT BYTE
    3405 0000ce00     3d25          dsj     a5,cmos_loop
    3406                    
    3407 0000ce10     5600          clr     a0
    3408 0000ce20     0d5f          calla   WC_BYTEI                ;Write a null
         0000ce30 00000000! 
    3409                    
    3410 0000ce50     0d5f          calla   F_ADC_S                 ;REFRESH CHECKSUM
         0000ce60 00000000! 
    3411                    ;       CALLA   CMOSLOCK
    3412                    
    3413 0000ce80     0960          rets
    3414                    
    3415 0000ce90 0000006e  OMLOC   .LONG   LET_TEXT1, LET_TEXT2, LET_TEXT3
    3416                    
    3417                    
    3418                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   75

    3419                    **************************************************************************
    3420                    * BOXCHAR
    3421                    * A8 =WHICH LINE (0-3)
    3422                    * A10=CHARACTER ON LINE
    3423                    * A11=COLOR TO USE ( 0 = BLACK, 1 = LASER FLASH )
    3424                    
    3425 0000cef0           BOXCHAR
    3426 0000cef0     098f          MMTM    SP,A1,A8,A10
         0000cf00     40a0  
    3427                    
    3428 0000cf10     09c1          MOVI    LET_DIST_Y,A1
         0000cf20     0018  
    3429 0000cf30     5f01          MPYU    A8,A1                           ; DISTANCE
    3430 0000cf40     0b01          ADDI    LET_START_Y1-LET_BOX_CY,A1
         0000cf50     00a1  
    3431 0000cf60     2601          SLL     16,A1
    3432 0000cf70     4c24          MOVE    A1,A4
    3433 0000cf80     09c1          MOVI    LET_DIST_X,A1
         0000cf90     0019  
    3434 0000cfa0     5f41          MPYU    A10,A1
    3435 0000cfb0     0b01          ADDI    LET_START_X-LET_BOX_CX,A1
         0000cfc0     0008  
    3436 0000cfd0     ec24          MOVX    A1,A4                           ; UPPER LEFT IN A4
    3437 0000cfe0     4c85          MOVE    A4,A5   
    3438 0000cff0     09e0          MOVI    [LET_DIST_Y+LET_BOX_WY,LET_DIST_X+LET_BOX_WX],A0
         0000d000 0019001c  
    3439 0000d020     e005          ADDXY   A0,A5                           ; LOWER RIGHT IN A5
    3440                    
    3441 0000d030     09e0          MOVI    [1,1],A0                        ; BORDER HEIGHT,WIDTH
         0000d040 00010001  
    3442 0000d060     09c9          MOVI    ROBO_BLACK,A9                   ; DOBORDER IS RETARDED
         0000d070     1414  
    3443 0000d080     4d6b          MOVE    A11,A11
    3444 0000d090     ca02          JRZ     BC1
    3445 0000d0a0     09c9          MOVI    ROBO_LF,A9
         0000d0b0     3e3e  
    3446 0000d0c0           BC1
    3447 0000d0c0     0d3f          CALLR   DOBORDER
         0000d0d0     fb68  
    3448                    
    3449 0000d0e0     4d6b          MOVE    A11,A11
    3450 0000d0f0     cb02          JRNZ    BC2
    3451 0000d100     09ca          MOVI    0FFH,A10
         0000d110     00ff  
    3452 0000d120           BC2
    3453 0000d120     0d3f          CALLR   OPPLOTLINE
         0000d130     0003  
    3454                    
    3455 0000d140     09af          MMFM    SP,A1,A8,A10
         0000d150     0502  
    3456 0000d160     0960          RETS
    3457                    
    3458                    
    3459                    *******************************
    3460                    * Plot out a line of characters
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   76

    3461                    * A8 =Table #
    3462                    * A10=Which character to highlight
    3463                    
    3464 00000160                   .bss    char_s  ,16
    3465                    
    3466 0000d170           OPPLOTLINE
    3467                    
    3468 0000d170                   PUSH    a8,a9,a10,a11
    3469                    
    3470 0000d190     4d09          move    a8,a9
    3471 0000d1a0     24a8          sll     5,a8                    ;*32
    3472 0000d1b0     0b28          addi    OLTAB,a8
         0000d1c0 0000d630' 
    3473 0000d1e0     8708          move    *a8,a8,L
    3474 0000d1f0     2489          sll     4,a9
    3475 0000d200     0b29          addi    OLYTAB,a9
         0000d210 0000d6b0' 
    3476 0000d230     8529          move    *a9,a9
    3477                            
    3478 0000d240     2609          sll     16,a9                   ;Get in the y position
    3479 0000d250     12c9          addk    LET_START_X,a9
    3480 0000d260           uvsjlp
    3481 0000d260     8f00          movb    *a8,a0                  ;GRAB CHAR NUMBER
    3482 0000d270     4c00          move    a0,a0   
    3483 0000d280     ca2d          jrz     uvsjx
    3484 0000d290     05e0          movb    a0,@char_s
         0000d2a0 00000160- 
    3485 0000d2c0                   PUSH    a8
    3486 0000d2d0                   PUSH    a9
    3487 0000d2e0                   PUSH    a10
    3488 0000d2f0                   PUSH    a9
    3489 0000d300     09e0          movi    REDPAL,a0               ;*Palette
         0000d310 00000000! 
    3490 0000d330     4d4a          move    a10,a10
    3491 0000d340     cb03          jrnz    opl1
    3492 0000d350     09e0          movi    WHITEPAL,a0
         0000d360 00000000! 
    3493 0000d380     0d5f  opl1    calla   pal_getf
         0000d390 00000000! 
    3494 0000d3b0     4c05          move    a0,a5
    3495                    
    3496 0000d3c0     09e8          movi    OP_MESS,a8
         0000d3d0 0000d590' 
    3497 0000d3f0     0d5f          calla   LM_SETUP
         0000d400 00000000! 
    3498 0000d420     4ca6          move    a5,a6                   ;Color
    3499 0000d430                   PULL    a9                      ;SET THE POSITION OF THE CHAR
    3500 0000d440     09e8          movi    char_s,a8
         0000d450 00000160- 
    3501 0000d470                   JSRP    LM_FINIS
    3502                    
    3503 0000d4e0                   PULL    a10
    3504 0000d4f0     142a          dec     a10
    3505 0000d500                   PULL    a9
    3506 0000d510                   PULL    a8
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   77

    3507 0000d520     1108          addk    8,a8
    3508 0000d530     0b09          addi    LET_DIST_X,a9
         0000d540     0019  
    3509 0000d550     c0d0          jruc    uvsjlp
    3510                    
    3511 0000d560           uvsjx   PULL    a8,a9,a10,a11
    3512 0000d580     0960          rets
    3513                    
    3514                    
    3515 0000d590           OP_MESS
    3516 0000d590                   MESS_MAC FONT_T,1,200,95,REDPAL,STRCNRM_1,0
    3517                    ;       .byte   "%c",0
    3518                    ;       .long   CHAROUT
    3519 0000d630                   .even
    3520                    
    3521 0000d630 0000d6f0' OLTAB   .long   OL1TAB, OL2TAB, OL3TAB, OL4TAB
    3522 0000d6b0     00a3  OLYTAB  .word   LET_START_Y1, LET_START_Y2, LET_START_Y3, LET_START_Y4
    3523                    
    3524 0000d6f0       41  OL1TAB  .byte   "ABCDEFGHI123?!_",0
    3525 0000d770       4a  OL2TAB  .byte   "JKLMNOPQR456()_",0
    3526 0000d7f0       53  OL3TAB  .byte   "STUVWXYZ 7890:_",0
    3527 0000d870       5e  OL4TAB  .byte   "^_ #$&-./'   _^",0
    3528                    
    3529 0000d8f0       4f  opmsg_s .byte   "OPERATOR MESSAGE",0
    3530 0000d980                   .even
    3531 0000d980           OMINST1
    3532 0000d980                   MESS_MAC RD7FONT,SPACING07,200,LET_INST1,ROBO_WHITE,STRCNRM,0
    3533 0000da20       55          .byte   "USE PLAYER 1 OR 2 CONTROLS TO ENTER A MESSAGE",0,1
    3534 0000db98       4f          .byte   "OF UP TO 3 LINES OF 25 LETTERS PER LINE.",0,1
    3535 0000dce8       53          .byte   "SELECT end TO END EACH LINE.",0,1
    3536 0000ddd8       50          .byte   "PRESS PLAYER 1 OR 2 START TO CLEAR OUT MESSAGE.",0,0
    3537 0000df60                   .even
    3538                    
    3539 0000df60           OMTSETUP
    3540 0000df60                   MESS_MAC   RD7FONT,SPACING07,200,LET_INST1,ROBO_BLUE,STRCNRM,0
    3541 0000e000                   .even
    3542                    
    3543 0000e000       2d  underscore_s    .byte   "-",0
    3544 0000e010                   .even
    3545                    
    3546                    
    3547                    *******************************
    3548                    * A8=*MESS_MAC
    3549                    
    3550 0000e010            SUBRP  print_multi
    3551                    
    3552 0000e010                   PUSH    a2
    3553                    
    3554 0000e020     4d02          move    a8,a2
    3555 0000e030     0d5f          calla   LM_SETUP
         0000e040 00000000! 
    3556 0000e060     4d23          move    a9,a3           ;1st XY
    3557                    
    3558 0000e070           htsclp  PUSH    a8
    3559 0000e080     4c48          move    a2,a8
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:23 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   78

    3560 0000e090     0d5f          calla   LM_SETUP
         0000e0a0 00000000! 
    3561 0000e0c0                   PULL    a8
    3562                    
    3563 0000e0d0     4c69          move    a3,a9
    3564                    
    3565 0000e0e0                   JSRP    LM_FINIS
    3566 0000e150     0b23          addi    [12,0],a3       ;Next Y
         0000e160 000c0000  
    3567                    
    3568 0000e180     8f00          movb    *a8,a0
    3569 0000e190     1108          addk    8,a8
    3570 0000e1a0     4c00          move    a0,a0
    3571 0000e1b0     cbeb          jrnz    htsclp
    3572                    
    3573 0000e1c0                   PULL    a2
    3574 0000e1d0                   RETP
    3575                    
    3576                    
    3577                    
    3578                    ;Jamie, I think we need to keep this NBA message the same, or change
    3579                    ;the embedded code!?!?!????
    3580                    
    3581                    ****************************************************************
    3582                    * Secret embedded copyright notice
    3583                    
    3584                    ASCIIE  .macro  str
    3585                    
    3586                            .var    i,c,e
    3587                            .eval   1,i
    3588                            .eval   1,e
    3589                            .loop   $symlen(str)
    3590                            .asg    :str(i):,c
    3591                            .byte   0ffh & (':c:'+e)
    3592                            .eval   i+1,i
    3593                            .eval   e+7,e
    3594                            .endloop
    3595                            .byte   0ffh & :e:
    3596                    
    3597                            .endm
    3598                    
    3599 0000e200       01          .byte   1,2,4,8,16,32,64,128    ;ID
    3600                    
    3601 0000e240                   ASCIIE  "NBA-JAM-COPYRIGHT-1993-MIDWAY-MANUFACTURING-COMPANY"
    3602 0000e3e0                   ASCIIE  "ALL-RIGHTS-RESERVED"
    3603 0000e480                   ASCIIE  "PROGRAMMED-BY-SHAWN-LIPTAK-&-MARK-TURMELL-&-JAMIE-RIVETT"
    3604                    
    3605                    
    3606                    
    3607                    
    3608                    ****************************************************************
    3609                    
    3610 0000e650                   .end

 No Errors,  No Warnings
