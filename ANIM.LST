TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    **************************************************************
       2                    *
       3                    * Software:             Jamie Rivett
       4                    * Initiated:            6/93
       5                    *
       6                    * COPYRIGHT (C) 1992 WILLIAMS ELECTRONICS GAMES, INC.
       7                    *
       8                    **************************************************************
       9                    
      10                            .file   "anim.asm"
      12                            .width  132
      13                            .option b,d,l,t
      14                            .mnolist
      15                    
      16                    
      17                            .include        "macros.h"
      18                            .include        "mproc.equ"             ;Mproc equates
      19                            .include        "display.equ"           ;Display proc equates
      20                            .include        "gsp.equ"               ;Gsp asm equates
      21                            .include        "sys.equ"
      22                            .include        "game.equ"
      23                            .include        "plyr.equ"
      24                            .include        "anim.equ"
      25                            .include        "audit.equ"
      26                            .include        "ring.equ"
      27                            .include        "sound.h"
      28                            .include        "jjxm.h"
      29                            .INCLUDE        "SOUND.EQU"
      30                    
      31                            .include        "fontsimg.glo"
      32                            .include        "bgndtbl.glo"
      33                            .include        "miscimg.glo"
      34                    
      35                    ******************************************************************************
      36                    *
      37                    * external references
      38                    
      39                            .ref    p2rounds,p1rounds,xxx_dead_anim,is_final_match,FINAL_PTR
      40                            .ref    get_opp_process
      41                            .ref    PSTATUS2,round_award
      42                            .ref    PCNT,slowmo,do_roll,match_over,triple_sound,is_8_on_1
      43                            .ref    match_winner,process_ptrs,square_root,set_target_offsets
      44                            .ref    calc_line_x,RNDPER,wrtable_sound,rope_command,no_debris
      45                            .ref    set_rope_z,SHAKER2,get_all_buttons_down,right_rproc
      46                            .ref    left_rproc,adjust_health,create_dizzy_proc,get_mpart_offsets
      47                            .ref    get_mpart_xsize,pal_find,round_tickcount,tgt_ground
      48                            .ref    get_rope_x,allow_offscrn,ADD_TO_COMBO_COUNT,MOVE_NAME_ANNC
      49                            .ref    reduce_bog,RNDRNG0,hyper_speed_on,royal_rumble
      50                            .ref    kill_smove_procs,clear_lifebar
      51                            .ref    wrestler_count,wrestler_count_proc
      52                    
      53                            .REF    IF_SILENT_ADD_VOICE
      54                    
      55                    ******************************************************************************
      56                    *
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE    2

      57                    * external definitions
      58                    
      59                    *****************************************************************************
      60                    
      61              0000  OANIMODE        equ     0                       ;word
      62              0010  OANIBASE        equ     OANIMODE+10h            ;long
      63              0030  OANIPC          equ     OANIBASE+20h            ;long
      64              0050  OANICNT         equ     OANIPC+20h              ;word
      65              0060  OCUR_FRAME      equ     OANICNT+10h             ;long
      66                    
      67                    
      68 00000000            SUBR   animate_wrestler
      69                    
      70 00000000                   PUSH    a4,a10
      71                    
      72                            .ref    match_time
      73 00000020     07a0          move    @match_time,a0,L
         00000030 00000000! 
      74 00000050     ca0a          jrz     zrcax
      75                    
      76                    ;       callr   animate_wrestler1
      77                    ;       callr   animate_wrestler2
      78                    
      79 00000060     4daa          move    a13,a10
      80 00000070     0b0a          addi    ANIMODE,a10             ;primary animation
         00000080     0660  
      81 00000090     0d3f          callr   animate
         000000a0     001c  
      82                    
      83 000000b0     4daa          move    a13,a10
      84 000000c0     0b0a          addi    ANIMODE2,a10            ;secondary animation
         000000d0     06e0  
      85 000000e0     0d3f          callr   animate
         000000f0     0017  
      86                    
      87 00000100           zrcax
      88 00000100                   PULL    a4,a10
      89 00000120     0960          rets
      90                    
      91                    
      92 00000130            SUBR   animate_wrestler1
      93                    
      94 00000130                   PUSH    a4,a10
      95                    
      96 00000150     4daa          move    a13,a10
      97 00000160     0b0a          addi    ANIMODE,a10             ;primary animation
         00000170     0660  
      98 00000180     0d3f          callr   animate
         00000190     000d  
      99                    
     100 000001a0                   PULL    a4,a10
     101 000001c0     0960          rets
     102                    
     103 000001d0            SUBR   animate_wrestler2
     104                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE    3

     105 000001d0                   PUSH    a4,a10
     106                    
     107 000001f0     4daa          move    a13,a10
     108 00000200     0b0a          addi    ANIMODE2,a10            ;secondary animation
         00000210     06e0  
     109 00000220     0d3f          callr   animate
         00000230     0003  
     110                    
     111 00000240                   PULL    a4,a10
     112 00000260     0960          rets
     113                    
     114                    ********
     115 00000270           animate ;a10 = * anim variables base
     116                    
     117 00000270     b540          move    *a10(OANIMODE),a0       ;current animation ended???
         00000280     0000  
     118 00000290     1fe0          btst    MODE_END_BIT,a0
     119 000002a0     cb1c          jrnz    _exit
     120                    
     121                     .if 0
     122                    *** temp patch to step through images on player 1 !!!!
     123                    
     124                            move    *a13(PLYRNUM),a0
     125                            jrnz    zrcaskippit
     126                    
     127                            move    *a10(OANIBASE),a0,L
     128                            move    *a10(OANIPC),a1,L
     129                            cmp     a0,a1
     130                            jreq    _next_command
     131                    
     132                            move    *a13(BUT_VAL_DOWN),a0
     133                            move    a0,a0
     134                            jrnz    _next_command
     135                            rets
     136                    zrcaskippit
     137                     .endif
     138                    
     139                    ***
     140                    
     141                    
     142 000002b0     b540          move    *a10(OANICNT),a0        ;cur tick count
         000002c0     0050  
     143 000002d0     1420          dec     a0
     144 000002e0     b00a          move    a0,*a10(OANICNT)
         000002f0     0050  
     145 00000300     c716          jrgt    _exit
     146                    
     147 00000310           _next_command
     148 00000310     b744          move    *a10(OANIPC),a4,L
         00000320     0030  
     149 00000330           _next_command1
     150 00000330     9480          move    *a4+,a0                 ;tick count or command
     151 00000340     ce13          jrn     zrcacommand
     152 00000350     ca00          jrz     _ani_zip                ;no-op
         00000360     011e  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE    4

     153                    
     154 00000370     b5a1          move    *a13(ANI_SPEED),a1
         00000380     0650  
     155 00000390     5e01          mpyu    a0,a1
     156 000003a0     2f01          srl     8,a1
     157 000003b0     05ae          move    @hyper_speed_on,a14
         000003c0 00000000! 
     158 000003e0     67c1          srl     a14,a1
     159                            .if DEBUG
     160                            move    a1,a1
     161                            jrge    zrcanot_z
     162                            LOCKUP
     163                    zrcanot_z
     164                            .endif
     165 000003f0     b02a          move    a1,*a10(OANICNT)        ;# ticks to hold cur frame
         00000400     0050  
     166                    
     167                    ;       move    a0,a1
     168                    ;       sll     8,a1                    ;* 256
     169                    ;       move    *a13(ANI_SPEED),a0      ;divisor * 256
     170                    ;       divu    a0,a1                   ;a1/a0
     171                    ;       move    a1,*a10(OANICNT)        ;# ticks to hold cur frame
     172                    
     173 00000410     9680          move    *a4+,a0,L               ;* * multi image object
     174                    
     175                            .if DEBUG
     176                            cmpi    0ff800000H,a0
     177                            jrhs    zrcaimg_ok
     178                            LOCKUP  ;bogus image pointer
     179                    zrcaimg_ok
     180                            .endif
     181                    
     182 00000420     8600          move    *a0,a0,L                ;* image
     183                     .if DEBUG
     184                            jrnz    zrcaok
     185                            LOCKUP
     186                            jruc    zrcaskp
     187                    zrcaok
     188                     .endif
     189 00000430     b20a          move    a0,*a10(OCUR_FRAME),L
         00000440     0060  
     190 00000450           zrcaskp
     191 00000450     b28a          move    a4,*a10(OANIPC),L
         00000460     0030  
     192                    
     193 00000470           _exit
     194 00000470     0960          rets
     195                    
     196                    
     197 00000480           zrcacommand
     198                    ;       andi    0ffh,a0
     199                    ;       sll     5,a0                    ;x 32
     200 00000480     2700          sll     24,a0
     201 00000490     2da0          srl     19,a0
     202 000004a0     0b20          addi    zrcaani_commands,a0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE    5

         000004b0 000004f0' 
     203                    
     204                            .if DEBUG
     205                            cmpi    zrcaani_commands_end,a0
     206                            jrlt    zrcacmd_ok
     207                            LOCKUP  ;bogus ani command
     208                    zrcacmd_ok
     209                            .endif
     210                    
     211 000004d0     8600          move    *a0,a0,L
     212 000004e0     0160          jump    a0
     213                    
     214 000004f0           zrcaani_commands
     215 000004f0 00001550'         .long   _ani_zip                ;0
     216 00000510 00001590'         .long   _ani_repeat             ;1
     217 00000530 000015f0'         .long   _ani_setmode            ;2
     218 00000550 00001740'         .long   _ani_zerovels           ;3
     219 00000570 000017f0'         .long   _ani_setplyrmode        ;4
     220 00000590 000019a0'         .long   _ani_set_yvel           ;5
     221 000005b0 00001a10'         .long   _ani_attack_on          ;6
     222 000005d0 00001c70'         .long   _ani_attack_off         ;7
     223 000005f0 00001e10'         .long   _ani_leapatopp          ;8
     224 00000610 00002fc0'         .long   _ani_attach             ;9
     225 00000630 00003030'         .long   _ani_detach             ;10
     226 00000650 00003230'         .long   _ani_waithitgnd         ;11
     227 00000670 000034d0'         .long   _ani_xflip              ;12
     228 00000690 00003580'         .long   _ani_bounce             ;13
     229 000006b0 00003600'         .long   _ani_attack_on_Z        ;14
     230 000006d0 00003830'         .long   _ani_gravity_on         ;15
     231 000006f0 000038e0'         .long   _ani_gravity_off        ;16
     232 00000710 00003990'         .long   _ani_goto               ;17
     233 00000730 000039e0'         .long   _ani_attachz            ;18
     234 00000750 00003a80'         .long   _ani_slowmo             ;19
     235 00000770 00003b00'         .long   _ani_waitrelease        ;20
     236 00000790 00003d60'         .long   _ani_offset             ;21
     237 000007b0 00003f60'         .long   _ani_friction           ;22
     238 000007d0 00004040'         .long   _ani_min_yvel           ;23
     239 000007f0 000040f0'         .long   _ani_attachvel          ;24
     240 00000810 000042d0'         .long   _ani_throw1             ;25
     241 00000830 00004310'         .long   _ani_sound              ;26
     242 00000850 00004560'         .long   _ani_setfacing          ;27
     243 00000870 000045e0'         .long   _ani_pause              ;28
     244 00000890 00004640'         .long   _ani_ifstatus           ;29
     245 000008b0 000046e0'         .long   _ani_code               ;30
     246 000008d0 00004760'         .long   _ani_shaker             ;31
     247 000008f0 00004800'         .long   _ani_changeanim         ;32
     248 00000910 00004870'         .long   _ani_faceup             ;33
     249 00000930 00004930'         .long   _ani_facedown           ;34
     250 00000950 000049f0'         .long   _ani_bouncerope         ;35
     251 00000970 00004bc0'         .long   _ani_shakeropes         ;36
     252 00000990 00004df0'         .long   _ani_bendrope           ;37
     253 000009b0 00004f70'         .long   _ani_setspeed           ;38
     254 000009d0 00004fe0'         .long   _ani_leapatpos          ;39
     255 000009f0 000055f0'         .long   _ani_zero_xzvels        ;40
     256 00000a10 00005680'         .long   _ani_rope_z             ;41
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE    6

     257 00000a30 000057d0'         .long   _ani_loop               ;42
     258 00000a50 00001550'         .long   _ani_zip                ;43
     259 00000a70 00005a40'         .long   _ani_set_xvel           ;44
     260 00000a90 00005c20'         .long   _ani_ifnotstatus        ;45
     261 00000ab0 00005cc0'         .long   _ani_slide_back         ;46
     262 00000ad0 00006630'         .long   _ani_clr_damage         ;47
     263 00000af0 00006670'         .long   _ani_set_zvel           ;48
     264 00000b10 000067d0'         .long   _ani_checkword          ;49
     265 00000b30 00006950'         .long   _ani_face               ;50
     266 00000b50 00006a30'         .long   _ani_setword            ;51
     267 00000b70 00006ab0'         .long   _ani_getup              ;52
     268 00000b90 00006b50'         .long   _ani_getup_wait         ;53
     269 00000bb0 00006c00'         .long   _ani_clr_stars          ;54
     270 00000bd0 00006c70'         .long   _ani_shakeall           ;55
     271 00000bf0 00006f30'         .long   _ani_damage             ;56
     272 00000c10 00006fe0'         .long   _ani_start_dizzy        ;57
     273 00000c30 00007080'         .long   _ani_clr_status         ;58
     274 00000c50 00007130'         .long   _ani_set_target         ;59
     275 00000c70 000071b0'         .long   _ani_max_x              ;60
     276 00000c90 000071f0'         .long   _ani_max_z              ;61
     277 00000cb0 00007230'         .long   _ani_max_y_vel          ;62
     278 00000cd0 00007270'         .long   _ani_superslave         ;63
     279 00000cf0 000075a0'         .long   _ani_slaveanim          ;64
     280 00000d10 00007740'         .long   _ani_rawsound           ;65
     281 00000d30 000077c0'         .long   _ani_damageopp          ;66
     282 00000d50 00007f30'         .long   _ani_rndper             ;67
     283 00000d70 00008010'         .long   _ani_waithitopp         ;68
     284 00000d90 000080c0'         .long   _ani_attchimage         ;69
     285 00000db0 000082a0'         .long   _ani_ifoppmode          ;99
     286 00000dd0 00008470'         .long   _ani_ifbuttons          ;71
     287 00000df0 00008530'         .long   _ani_ifnohitblock       ;72
     288 00000e10 000085c0'         .long   _ani_end                ;73
     289 00000e30 00008650'         .long   _ani_ifrope             ;74
     290 00000e50 00008670'         .long   _ani_ifnotrope          ;75
     291 00000e70 00008b20'         .long   _ani_opp_getup          ;76
     292 00000e90 00008cb0'         .long   _ani_shakecorner        ;77
     293 00000eb0 00008e50'         .long   _ani_singlestep         ;78
     294 00000ed0 00008f20'         .long   _ani_superslave2        ;79
     295 00000ef0 000098d0'         .long   _ani_setoppmode         ;80
     296 00000f10 00009a10'         .long   _ani_clroppmode         ;81
     297 00000f30 00009b50'         .long   _ani_oppoffset          ;82
     298 00000f50 00009da0'         .long   _ani_ifblocked          ;83
     299 00000f70 00009e30'         .long   _ani_waitroll           ;84
     300 00000f90 0000a850'         .long   _ani_setoppfacing       ;85
     301 00000fb0 0000a930'         .long   _ani_ifopp              ;86
     302 00000fd0 0000ab40'         .long   _ani_snot               ;87
     303                    
     304 00000ff0 0000ac40'         .long   _ani_if_butcount_ge     ;88
     305 00001010 0000ad60'         .long   _ani_if_butcount_lt     ;89
     306 00001030 0000ae80'         .long   _ani_if_rptcount        ;90
     307 00001050 0000af50'         .long   _ani_ifnot_rptcount     ;91
     308                    
     309 00001070 0000b020'         .long   _ani_ringcheck          ;92
     310 00001090 0000b1a0'         .long   _ani_debrisat           ;93
     311 000010b0 0000b280'         .long   _ani_debris             ;94
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE    7

     312 000010d0 0000b470'         .long   _ani_set_wrestler_xflip ;95
     313 000010f0 0000b610'         .long   _ani_slideatopp         ;96
     314                    
     315 00001110 0000bc90'         .long   _ani_clr_butcount       ;97
     316 00001130 0000bd40'         .long   _ani_set_rptcount       ;98
     317 00001150 0000be00'         .long   _ani_dec_rptcount       ;99
     318                    
     319 00001170 0000bea0'         .long   _ani_shadowtrail        ;100
     320 00001190 0000c7b0'         .long   _ani_createproc         ;101
     321 000011b0 0000c8f0'         .long   _ani_target             ;102
     322 000011d0 0000cc30'         .long   _ani_hmbwait            ;103
     323 000011f0 0000ce10'         .long   _ani_safe_time          ;104
     324 00001210 0000ce80'         .long   _ani_setopp_plyrmode    ;105
     325 00001230 0000cfa0'         .long   _ani_xflip_opp          ;106
     326 00001250 0000d0b0'         .long   _ani_setlong            ;107
     327 00001270 0000d180'         .long   _ani_immobilize         ;108
     328 00001290 0000d300'         .long   _ani_xflip_tbl          ;109
     329 000012b0 0000d4c0'         .long   _ani_setoppvels         ;110
     330 000012d0 0000d6e0'         .long   _ani_waithitgnd2        ;111
     331 000012f0 0000da40'         .long   _ani_set_opp_xvel       ;112
     332 00001310 0000dcb0'         .long   _ani_set_attach         ;113
     333 00001330 0000dd50'         .long   _ani_inc_combo_count    ;114
     334 00001350 0000ded0'         .long   _ani_clear_combo_count  ;115
     335 00001370 0000e250'         .long   _ani_add_move           ;116
     336 00001390 0000e3a0'         .long   _ani_startattack        ;117
     337 000013b0 0000e4e0'         .long   _ani_changeanim_tbl     ;118
     338 000013d0 0000e5b0'         .long   _ani_if_rptcount_ge     ;119
     339 000013f0 0000e6b0'         .long   _ani_if_rptcount_lt     ;120
     340 00001410 0000e7b0'         .long   _ani_waithitany         ;121
     341 00001430 0000e910'         .long   _ani_draw_name          ;122
     342 00001450 0000ea10'         .long   _ani_set_idiot          ;123
     343 00001470 0000eaa0'         .long   _ani_attchimage2        ;124
     344 00001490 0000eb60'         .long   _ani_ground             ;125
     345 000014b0 0000ebe0'         .long   _ani_rot                ;126
     346 000014d0 0000ec20'         .long   _ani_scroll_ctrl        ;127
     347 000014f0 0000ed50'         .long   _ani_clear_climb        ;128
     348 00001510 0000edf0'         .long   _ani_opp_face           ;129
     349 00001530 0000ef30'         .long   _ani_setflag            ;130
     350 00001550           zrcaani_commands_end
     351                    
     352                    ********
     353 00001550           _ani_zip        ;0
     354                    
     355                            .if DEBUG
     356                            LOCKUP
     357                            .endif
     358                    
     359 00001550     b28a          move    a4,*a10(OANIPC),L
         00001560     0030  
     360                    ;       jruc    _next_command
     361 00001570     c000          jruc    _next_command1
         00001580     feda  
     362                    
     363                    ********
     364 00001590           _ani_repeat     ;1
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE    8

     365 00001590     b744          move    *a10(OANIBASE),a4,L
         000015a0     0010  
     366 000015b0     b28a          move    a4,*a10(OANIPC),L
         000015c0     0030  
     367                    ;       jruc    _next_command
     368 000015d0     c000          jruc    _next_command1
         000015e0     fed4  
     369                    
     370                    ********
     371 000015f0           _ani_setmode    ;2
     372 000015f0     9480          move    *a4+,a0                 ;mode bits
     373 00001600     b00a          move    a0,*a10(OANIMODE)
         00001610     0000  
     374 00001620     b28a          move    a4,*a10(OANIPC),L
         00001630     0030  
     375                    
     376                            ;clear some STATUS_FLAGS bits too.
     377 00001640     b7ae          move    *a13(STATUS_FLAGS),a14,L
         00001650     0b50  
     378 00001660     0b8e          andni   SF_CLEAR_BITS,a14
         00001670 00198480  
     379 00001690     b3cd          move    a14,*a13(STATUS_FLAGS),L
         000016a0     0b50  
     380                    
     381                            ;if *a13(PTIME) is nonzero, this anim was called by someone other
     382                            ; than our actual wrestler process.  So clearing the KOD bit isn't
     383                            ; enough, since we're still sleeping.  Set PTIME to 1.
     384 000016b0     b5ae          move    *a13(PTIME),a14
         000016c0     0030  
     385 000016d0     ca00          jrz     _next_command
         000016e0     fec2  
     386 000016f0     182e          movk    1,a14
     387 00001700     b1cd          move    a14,*a13(PTIME)
         00001710     0030  
     388 00001720     c000          jruc    _next_command
         00001730     febd  
     389                    
     390                    ********
     391 00001740           _ani_zerovels   ;3
     392 00001740     5600          clr     a0
     393 00001750     b20d          move    a0,*a13(OBJ_XVEL),L
         00001760     02d0  
     394 00001770     b20d          move    a0,*a13(OBJ_YVEL),L
         00001780     02f0  
     395 00001790     b20d          move    a0,*a13(OBJ_ZVEL),L
         000017a0     0310  
     396 000017b0     b28a          move    a4,*a10(OANIPC),L
         000017c0     0030  
     397                    ;       jruc    _next_command
     398 000017d0     c000          jruc    _next_command1
         000017e0     feb4  
     399                    
     400                    ********
     401 000017f0           _ani_setplyrmode ;4
     402                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE    9

     403                            ;clear the climbin bit, just in case...
     404 000017f0     57ce          clr     a14
     405 00001800     b1cd          move    a14,*a13(CLIMBING_THRU)
         00001810     07e0  
     406                    
     407 00001820     9480          move    *a4+,a0
     408 00001830     b5a1          move    *a13(PLYRMODE),a1               ;this is a temp fudge!!!
         00001840     05c0  
     409 00001850     0b41          cmpi    MODE_DEAD,a1
         00001860     fff6  
     410 00001870     ca0e          jreq    ilfrnoset
     411                    
     412                    ;If going into head hold mode, don't allow getup meter
     413                    ;to come out for awhile.
     414 00001880     0b40          cmpi    MODE_HEADHOLD,a0
         00001890     ffef  
     415 000018a0     cb09          jrnz    ilfrskp
     416 000018b0     b5ae          move    *a13(DELAY_METER),a14
         000018c0     0ad0  
     417 000018d0     0b4e          cmpi    6*60,a14
         000018e0     fe97  
     418 000018f0     c504          jrge    ilfrskp
     419 00001900     09ce          movi    9*60,a14
         00001910     021c  
     420 00001920     b1cd          move    a14,*a13(DELAY_METER)
         00001930     0ad0  
     421 00001940           ilfrskp
     422                    
     423 00001940     b00d          move    a0,*a13(PLYRMODE)
         00001950     05c0  
     424 00001960           ilfrnoset
     425 00001960     b28a          move    a4,*a10(OANIPC),L
         00001970     0030  
     426                    ;       jruc    _next_command
     427 00001980     c000          jruc    _next_command1
         00001990     fe99  
     428                    
     429                    ********
     430 000019a0           _ani_set_yvel   ;5
     431 000019a0     9680          move    *a4+,a0,L
     432 000019b0     b20d          move    a0,*a13(OBJ_YVEL),L
         000019c0     02f0  
     433 000019d0     b28a          move    a4,*a10(OANIPC),L
         000019e0     0030  
     434                    ;       jruc    _next_command
     435 000019f0     c000          jruc    _next_command1
         00001a00     fe92  
     436                    
     437                    ********
     438 00001a10           _ani_attack_on  ;6
     439                    
     440                    ;I'm not sure we want to zero attach_proc just for starting an attack!
     441                    ;Watch this....
     442 00001a10     5600          clr     a0                              ;start out not attached
     443                    ;       move    a0,*a13(ATTACH_PROC),L          ;to anything
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   10

     444                    
     445 00001a20     b00d          move    a0,*a13(HITBLOCKER)
         00001a30     0540  
     446                    
     447                    ;The start of each attack on will clear MODE_STATUS!
     448                    
     449 00001a40     b5a0          move    *a13(ANIMODE),a0
         00001a50     0660  
     450 00001a60     0b80          andni   MODE_STATUS2,a0
         00001a70 00000200  
     451 00001a90     b00d          move    a0,*a13(ANIMODE)
         00001aa0     0660  
     452                    
     453 00001ab0     b5a0          move    *a13(ANIMODE),a0
         00001ac0     0660  
     454 00001ad0     0ba0          ori     MODE_CHECKHIT,a0
         00001ae0 00000010  
     455 00001b00     b00d          move    a0,*a13(ANIMODE)
         00001b10     0660  
     456                    
     457 00001b20     9480          move    *a4+,a0
     458 00001b30     b00d          move    a0,*a13(ATTACK_MODE)
         00001b40     05d0  
     459                    ;       move    *a4+,a0
     460                    ;       move    a0,*a13(OBJ_ATTXOFF)
     461                    ;       move    *a4+,a0
     462                    ;       move    a0,*a13(OBJ_ATTYOFF)
     463                    ;       move    *a4+,a0
     464                    ;       move    a0,*a13(OBJ_ATTWIDTH)
     465                    ;       move    *a4+,a0
     466                    ;       move    a0,*a13(OBJ_ATTHEIGHT)
     467                    
     468 00001b50     9680          move    *a4+,a0,L
     469 00001b60     b20d          move    a0,*a13(OBJ_ATTXOFF),L
         00001b70     0240  
     470 00001b80     9680          move    *a4+,a0,L
     471 00001b90     b20d          move    a0,*a13(OBJ_ATTWIDTH),L
         00001ba0     0270  
     472                    
     473                    ;;;     clr     a0
     474                    ;;;     move    a0,*a13(OBJ_ATTZOFF)
     475                    ;;;     move    a0,*a13(OBJ_ATTDEPTH)
     476                    
     477 00001bb0     09c0          movi    -40,a0                          ;default z width (10)
         00001bc0     ffd8  
     478 00001bd0     b00d          move    a0,*a13(OBJ_ATTZOFF)
         00001be0     0260  
     479 00001bf0     09c0          movi    40*2,a0                         ;10*2
         00001c00     0050  
     480 00001c10     b00d          move    a0,*a13(OBJ_ATTDEPTH)
         00001c20     0290  
     481                    
     482 00001c30     b28a          move    a4,*a10(OANIPC),L
         00001c40     0030  
     483                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   11

     484                    ;       jruc    _next_command
     485 00001c50     c000          jruc    _next_command1
         00001c60     fe6c  
     486                    
     487                    ********
     488 00001c70           _ani_attack_off ;7
     489                    
     490                            ;clear CHECKHIT and WAITHITOPP bits
     491 00001c70     b5a0          move    *a13(ANIMODE),a0
         00001c80     0660  
     492 00001c90     0b80          andni   MODE_CHECKHIT|MODE_WAITHITOPP,a0
         00001ca0 00004010  
     493 00001cc0     b00d          move    a0,*a13(ANIMODE)
         00001cd0     0660  
     494                    
     495                            ;clear SMART_ATTACK bit and SMART_TARGET value
     496 00001ce0     b5ae          move    *a13(STATUS_FLAGS),a14
         00001cf0     0b50  
     497 00001d00     0b8e          andni   M_SMART_ATTACK,a14
         00001d10 00000010  
     498 00001d30     b1cd          move    a14,*a13(STATUS_FLAGS)
         00001d40     0b50  
     499                    
     500 00001d50     57ce          clr     a14
     501 00001d60     b3cd          move    a14,*a13(SMART_TARGET),L
         00001d70     0ca0  
     502                    
     503                            ;update ATTACK_TIME
     504 00001d80     05a0          move    @round_tickcount,a0
         00001d90 00000000! 
     505 00001db0     b00d          move    a0,*a13(ATTACK_TIME)
         00001dc0     05f0  
     506                    
     507 00001dd0     b28a          move    a4,*a10(OANIPC),L
         00001de0     0030  
     508                    ;       jruc    _next_command
     509 00001df0     c000          jruc    _next_command1
         00001e00     fe52  
     510                    
     511                    ********
     512 00001e10           _ani_leapatopp  ;8
     513                    
     514                    ;       # ticks to reach dest
     515                    ;       max total distance (X and Z)
     516                    ;       max X distance
     517                    ;       max Z distance
     518                    ;       max Y vel
     519                    ;       target area of opponent
     520                    ;       x,y,z offset of attack box
     521                    
     522 00001e10                   STRUCT  0
     523 00001e10                   WORD    oziyTICKS
     524 00001e10                   WORD    oziyMAX_TOTAL_DIST
     525 00001e10                   WORD    oziyMAX_X_DIST
     526 00001e10                   WORD    oziyMAX_Z_DIST
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   12

     527 00001e10                   LONG    oziyMAX_Y_VEL
     528 00001e10                   WORD    oziyTRGT
     529 00001e10                   WORD    oziyATT_X_OFF
     530 00001e10                   WORD    oziyATT_Y_OFF
     531 00001e10                   WORD    oziyATT_Z_OFF
     532 00001e10                   LABEL   oziySIZE
     533                    
     534                    
     535 00000000                   .bss    oppx,32
     536 00000020                   .bss    oppz,32
     537 00000040                   .bss    oppy,32
     538                    
     539                    
     540 00001e10     4c8e          move    a4,a14
     541 00001e20     0b0e          addi    oziySIZE,a14
         00001e30     00a0  
     542 00001e40     b3ca          move    a14,*a10(OANIPC),L
         00001e50     0030  
     543                    
     544 00001e60     b5ab          move    *a13(CLOSEST_NUM),a11
         00001e70     03a0  
     545 00001e80                   X32     a11
     546 00001e90     0b2b          addi    process_ptrs,a11
         00001ea0 00000000! 
     547 00001ec0     876b          move    *a11,a11,L
     548                    
     549 00001ed0     b765          move    *a11(OBJ_XVEL),a5,L
         00001ee0     02d0  
     550                    
     551 00001ef0     b56e          move    *a11(PLYRMODE),a14
         00001f00     05c0  
     552 00001f10     0b4e          cmpi    MODE_RUNNING,a14
         00001f20     fffe  
     553 00001f30     cb1b          jrne    oziyoutring
     554                    
     555 00001f40     4c00          move    a0,a0
     556 00001f50     cb19          jrnz    oziyoutring
     557                    
     558                    ;if opponent is inside the ring, running and near the ropes
     559                    ;then target where he is now (don't add in xvel)
     560                    
     561 00001f60     b561          move    *a11(OBJ_XPOSINT),a1
         00001f70     0110  
     562                    
     563 00001f80     4ca5          move    a5,a5           ;xvel
     564 00001f90     c104          jrp     oziyrun_right
     565                    ;run_left
     566 00001fa0     0b41          cmpi    RING_X_CENTER,a1
         00001fb0     fbcd  
     567 00001fc0     c712          jrgt    oziyoutring
     568 00001fd0     c003          jruc    oziycnt
     569                    
     570 00001fe0           oziyrun_right
     571 00001fe0     0b41          cmpi    RING_X_CENTER,a1
         00001ff0     fbcd  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   13

     572 00002000     c40e          jrlt    oziyoutring
     573 00002010           oziycnt
     574                    
     575 00002010                   PUSH    a13
     576 00002020     4d6d          move    a11,a13
     577 00002030     0d5f          calla   get_rope_x
         00002040 00000000! 
     578 00002060                   PULL    a13
     579 00002070     b561          move    *a11(OBJ_XPOSINT),a1
         00002080     0110  
     580 00002090     4420          sub     a1,a0
     581 000020a0     0380          abs     a0
     582 000020b0     0b40          cmpi    70,a0
         000020c0     ffb9  
     583 000020d0     c701          jrgt    oziyoutring
     584                    
     585 000020e0     56a5          clr     a5              ;clr xvel
     586 000020f0           oziyoutring
     587                    
     588 000020f0     b766          move    *a11(OBJ_ZVEL),a6,L
         00002100     0310  
     589 00002110     b767          move    *a11(OBJ_YVEL),a7,L
         00002120     02f0  
     590 00002130     b568          move    *a11(GROUND_Y),a8
         00002140     0570  
     591 00002150     2608          sll     16,a8
     592 00002160     0b28          addi    [256,0],a8
         00002170 01000000  
     593                    
     594 00002190     b761          move    *a11(OBJ_XPOS),a1,L
         000021a0     0100  
     595 000021b0     b762          move    *a11(OBJ_ZPOS),a2,L
         000021c0     0140  
     596 000021d0     b763          move    *a11(OBJ_YPOS),a3,L
         000021e0     0120  
     597 000021f0     0b23          addi    [256,0],a3
         00002200 01000000  
     598                    
     599                    
     600 00002220     b480          move    *a4(oziyTICKS),a0
         00002230     0000  
     601                    
     602 00002240     b7ae          move    *a13(OBJ_GRAVITY),a14,L
         00002250     0330  
     603 00002260           oziylp0
     604 00002260     40a1          add     a5,a1                   ;x + xvel
     605 00002270     40c2          add     a6,a2                   ;z + zvel
     606                    
     607 00002280     4ce7          move    a7,a7
     608 00002290     ca06          jrz     oziyok
     609                    
     610 000022a0     40e3          add     a7,a3                   ;y + yvel
     611 000022b0     45c7          sub     a14,a7          ;yvel - gravity
     612 000022c0     4868          cmp     a3,a8           ;hit ground?
     613 000022d0     c702          jrgt    oziyok
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   14

     614 000022e0     4d03          move    a8,a3
     615 000022f0     c001          jruc    oziydn
     616 00002300           oziyok
     617 00002300     3d60          dsj     a0,oziylp0
     618 00002310           oziydn
     619 00002310     0d03          subi    [256,0],a3
         00002320 feffffff  
     620                    
     621 00002340     0781          move    a1,@oppx,L
         00002350 00000000- 
     622 00002370     0782          move    a2,@oppz,L
         00002380 00000020- 
     623 000023a0     0783          move    a3,@oppy,L
         000023b0 00000040- 
     624                    
     625                    
     626 000023d0     b480          move    *a4(oziyTRGT),a0
         000023e0     0060  
     627 000023f0     ce0f          jrn     oziyuser
     628 00002400     1e60          btst    B_TGT_GROUND,a0
     629 00002410     ca0a          jrz     oziyngrnd
     630 00002420     0b80          andni   TGT_GROUND,a0
         00002430 00001000  
     631 00002450     0d5f          calla   set_target_offsets
         00002460 00000000! 
     632 00002480     0d5f          calla   tgt_ground
         00002490 00000000! 
     633 000024b0     c003          jruc    oziyuser
     634 000024c0           oziyngrnd
     635 000024c0     0d5f          calla   set_target_offsets
         000024d0 00000000! 
     636 000024f0           oziyuser
     637                    
     638 000024f0     b5a0          move    *a13(TGT_XOFF),a0       ;target x offset
         00002500     02a0  
     639 00002510     2600          sll     16,a0
     640 00002520     b56e          move    *a11(OBJ_CONTROL),a14
         00002530     0780  
     641 00002540     1f6e          btst    B_FLIPH,a14
     642 00002550     ca01          jrz     oziyright1
     643 00002560     03a0          neg     a0
     644 00002570           oziyright1
     645                    ;;;     move    *a11(OBJ_XPOS),a1,L
     646 00002570     07a1          move    @oppx,a1,L
         00002580 00000000- 
     647 000025a0     4001          add     a0,a1                   ;def target x
     648                    
     649 000025b0     b480          move    *a4(oziyATT_X_OFF),a0
         000025c0     0070  
     650 000025d0     2600          sll     16,a0
     651 000025e0     b5ae          move    *a13(OBJ_CONTROL),a14
         000025f0     0780  
     652 00002600     1f6e          btst    B_FLIPH,a14
     653 00002610     ca01          jrz     oziyright0
     654 00002620     03a0          neg     a0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   15

     655 00002630           oziyright0
     656 00002630     b7a2          move    *a13(OBJ_XPOS),a2,L
         00002640     0100  
     657 00002650     4002          add     a0,a2                   ;att x
     658                    
     659 00002660     4441          sub     a2,a1                   ;def x - att x
     660 00002670     4c2e          move    a1,a14
     661 00002680     038e          abs     a14
     662                    
     663 00002690     b480          move    *a4(oziyMAX_X_DIST),a0
         000026a0     0020  
     664 000026b0     ce07          jrn     oziyxok
     665 000026c0     2600          sll     16,a0
     666 000026d0     49c0          cmp     a14,a0
     667 000026e0     c504          jrge    oziyxok
     668                    
     669 000026f0     4c21          move    a1,a1
     670 00002700     c101          jrp     oziyno_negx
     671 00002710     03a0          neg     a0
     672 00002720           oziyno_negx
     673 00002720     4c01          move    a0,a1
     674 00002730           oziyxok
     675 00002730     4c25          move    a1,a5                   ;delta x
     676 00002740     b480          move    *a4(oziyTICKS),a0
         00002750     0000  
     677 00002760     5801          divs    a0,a1                   ;a1 / a0
     678 00002770     b22d          move    a1,*a13(OBJ_XVEL),L
         00002780     02d0  
     679                    
     680                    
     681                    
     682 00002790     b5a0          move    *a13(TGT_ZOFF),a0       ;target z offset
         000027a0     02c0  
     683 000027b0     2600          sll     16,a0
     684                    ;;;     move    *a11(OBJ_ZPOS),a1,L
     685 000027c0     07a1          move    @oppz,a1,L
         000027d0 00000020- 
     686 000027f0     4001          add     a0,a1                   ;def target z
     687                    
     688 00002800     b7a2          move    *a13(OBJ_ZPOS),a2,L
         00002810     0140  
     689 00002820     b480          move    *a4(oziyATT_Z_OFF),a0
         00002830     0090  
     690 00002840     2600          sll     16,a0
     691 00002850     4002          add     a0,a2                   ;att z
     692                    
     693 00002860     4441          sub     a2,a1                   ;def z - att z
     694 00002870     4c2e          move    a1,a14
     695 00002880     038e          abs     a14
     696                    
     697 00002890     b480          move    *a4(oziyMAX_Z_DIST),a0
         000028a0     0030  
     698 000028b0     ce07          jrn     oziyzok
     699 000028c0     2600          sll     16,a0
     700 000028d0     49c0          cmp     a14,a0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   16

     701 000028e0     c504          jrge    oziyzok
     702                    
     703 000028f0     4c21          move    a1,a1
     704 00002900     c101          jrp     oziyno_negz
     705 00002910     03a0          neg     a0
     706 00002920           oziyno_negz
     707 00002920     4c01          move    a0,a1
     708 00002930           oziyzok
     709 00002930     4c26          move    a1,a6                   ;delta z
     710 00002940     b480          move    *a4(oziyTICKS),a0
         00002950     0000  
     711 00002960     5801          divs    a0,a1                   ;a1 / a0
     712 00002970     b22d          move    a1,*a13(OBJ_ZVEL),L
         00002980     0310  
     713                    
     714                    
     715 00002990     b489          move    *a4(oziyMAX_TOTAL_DIST),a9
         000029a0     0010  
     716 000029b0     ce20          jrn     oziymaxok
     717                    
     718 000029c0     0385          abs     a5
     719 000029d0     2e05          srl     16,a5
     720 000029e0     4ca1          move    a5,a1
     721 000029f0     5ea1          mpyu    a5,a1                   ;deltax^2
     722 00002a00     4c25          move    a1,a5
     723                    
     724 00002a10     0386          abs     a6
     725 00002a20     2e06          srl     16,a6
     726 00002a30     4cc1          move    a6,a1
     727 00002a40     5ec1          mpyu    a6,a1                   ;deltaz^2
     728 00002a50     4c20          move    a1,a0
     729                    
     730 00002a60     40a0          add     a5,a0
     731 00002a70     0d5f          calla   square_root
         00002a80 00000000! 
     732                    
     733 00002aa0     4809          cmp     a0,a9                   ;a9-a0 (will we exceed max dist?)
     734 00002ab0     c710          jrgt    oziymaxok
     735                    
     736 00002ac0     2509          sll     8,a9                    ;x 256 (8 bits fractional)
     737 00002ad0     5a09          divu    a0,a9                   ;a9/a0
     738                    
     739 00002ae0     4d21          move    a9,a1
     740 00002af0     b7a0          move    *a13(OBJ_XVEL),a0,L
         00002b00     02d0  
     741 00002b10     5c01          mpys    a0,a1                   ;scale down xvel
     742 00002b20     2b01          sra     8,a1                    ;shift off fractional
     743 00002b30     b22d          move    a1,*a13(OBJ_XVEL),L
         00002b40     02d0  
     744                    
     745 00002b50     4d21          move    a9,a1
     746 00002b60     b7a0          move    *a13(OBJ_ZVEL),a0,L
         00002b70     0310  
     747 00002b80     5c01          mpys    a0,a1                   ;scale down yvel
     748 00002b90     2b01          sra     8,a1                    ;shift off fractional
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   17

     749 00002ba0     b22d          move    a1,*a13(OBJ_ZVEL),L
         00002bb0     0310  
     750 00002bc0           oziymaxok
     751                    
     752                    
     753                    
     754                    
     755                    ;to calculate YVEL taking into account gravity:
     756                    ;use y-y0 = v0*t + 0.5*a*t^2
     757                    
     758                    
     759 00002bc0     b488          move    *a4(oziyTICKS),a8
         00002bd0     0000  
     760 00002be0     4d01          move    a8,a1
     761 00002bf0     5f01          mpyu    a8,a1                   ;t^2
     762 00002c00     b7a0          move    *a13(OBJ_GRAVITY),a0,L
         00002c10     0330  
     763 00002c20     5e01          mpyu    a0,a1                   ;a*t^2
     764 00002c30     2fe1          srl     1,a1                    ;1/2*a*t^2
     765                    
     766                    ;;;     move    *a11(OBJ_YPOS),a0,L     ;opp y
     767 00002c40     07a0          move    @oppy,a0,L
         00002c50 00000040- 
     768                    
     769 00002c70     b5ae          move    *a13(TGT_YOFF),a14      ;target y offset
         00002c80     02b0  
     770 00002c90     260e          sll     16,a14
     771 00002ca0     41c0          add     a14,a0
     772                    
     773 00002cb0     b7a2          move    *a13(OBJ_YPOS),a2,L     ;y0
         00002cc0     0120  
     774 00002cd0     b48e          move    *a4(oziyATT_Y_OFF),a14
         00002ce0     0080  
     775 00002cf0     260e          sll     16,a14
     776                    
     777 00002d00     41c2          add     a14,a2
     778                    
     779 00002d10     4440          sub     a2,a0                   ;a0 = a0-a2 (y - y0)
     780 00002d20     4001          add     a0,a1
     781 00002d30     cf02          jrnn    oziyyvel_okay
     782                    
     783                    ;       LOCKUP
     784                    
     785 00002d40     5621          clr     a1
     786 00002d50     c006          jruc    oziyyok
     787 00002d60           oziyyvel_okay
     788 00002d60     5b01          divu    a8,a1                   ;a1 = a1/a8 ( ((y-y0)+(1/2*a*t^2)) / t )
     789                    
     790 00002d70     b680          move    *a4(oziyMAX_Y_VEL),a0,L
         00002d80     0040  
     791 00002d90     4820          cmp     a1,a0
     792 00002da0     c501          jrge    oziyyok
     793 00002db0     4c01          move    a0,a1
     794 00002dc0           oziyyok
     795 00002dc0     b22d          move    a1,*a13(OBJ_YVEL),L
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   18

         00002dd0     02f0  
     796                    
     797                    
     798                            ;make sure both have the same INRING value
     799 00002de0     b560          move    *a11(INRING),a0
         00002df0     0560  
     800 00002e00     b5a1          move    *a13(INRING),a1
         00002e10     0560  
     801 00002e20     4801          cmp     a0,a1
     802 00002e30     ca16          jreq    oziydone
     803                    
     804                            ;uh-oh.  our INRING's don't match.  Unless we're on the
     805                            ; turnbuckle (or flying from it), zero the X and Z
     806                            ; velocities and set the Y velocity to 50000h or something
     807                    
     808                            ;...unfortunately, there's no really clean way to tell if
     809                            ; we're on the turnbuckle at this point since the LEAPAT doesn't
     810                            ; happen until well into the anim sequence and our PLYRMODE could
     811                            ; be just about anything by then.  So instead we'll fudge and look
     812                            ; at some other clues, like gravity and y pos.  If a player has a
     813                            ; Y pos that's way high (80+) pixels above GROUND_Y and no gravity,
     814                            ; that sure looks like a turnbuckle, so go with it.
     815 00002e40     b5ae          move    *a13(ANIMODE),a14
         00002e50     0660  
     816 00002e60     1f4e          btst    MODE_NOGRAVITY_BIT,a14
     817 00002e70     ca08          jrz     oziynt
     818                    
     819 00002e80     b5a0          move    *a13(OBJ_YPOSINT),a0
         00002e90     0130  
     820 00002ea0     b5ae          move    *a13(GROUND_Y),a14
         00002eb0     0570  
     821 00002ec0     45c0          sub     a14,a0
     822 00002ed0     0be0          subi    80,a0
         00002ee0     ffaf  
     823 00002ef0     cf0a          jrnn    oziydone
     824                    
     825 00002f00           oziynt  ;no good.  leap in place
     826 00002f00     57ce          clr     a14
     827 00002f10     b3cd          move    a14,*a13(OBJ_XVEL),L
         00002f20     02d0  
     828 00002f30     b3cd          move    a14,*a13(OBJ_ZVEL),L
         00002f40     0310  
     829 00002f50     09ee          movi    [5,0],a14
         00002f60 00050000  
     830 00002f80     b3cd          move    a14,*a13(OBJ_YVEL),L
         00002f90     02f0  
     831                    
     832 00002fa0           oziydone
     833 00002fa0     c000          jruc    _next_command
         00002fb0     fd35  
     834                    
     835                    
     836                    ********
     837 00002fc0           _ani_attach     ;9
     838                    ;       move    *a4+,a0                 ;xoff
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   19

     839                    ;       move    a0,*a13(ATTACH_XOFF)
     840                    ;       move    *a4+,a0
     841                    ;       move    a0,*a13(ATTACH_YOFF)
     842                    
     843 00002fc0     9680          move    *a4+,a0,L                       ;xoff
     844 00002fd0     b20d          move    a0,*a13(ATTACH_XOFF),L
         00002fe0     03b0  
     845                    
     846 00002ff0     b28a          move    a4,*a10(OANIPC),L
         00003000     0030  
     847                    ;       jruc    _next_command
     848 00003010     c000          jruc    _next_command1
         00003020     fd30  
     849                    
     850                    ********
     851 00003030           _ani_detach     ;10
     852                    
     853 00003030     b7a1          move    *a13(ATTACH_PROC),a1,L
         00003040     03e0  
     854 00003050     ca19          jrz     lozwdone_really
     855 00003060     5600          clr     a0
     856 00003070     b20d          move    a0,*a13(ATTACH_PROC),L          ;not attached to anything
         00003080     03e0  
     857                    
     858 00003090     b622          move    *a1(ATTACH_PROC),a2,L
         000030a0     03e0  
     859 000030b0     484d          cmp     a2,a13
     860 000030c0     cb12          jrne    lozwdone_really                 ;attach_procs don't match!
     861                    
     862 000030d0     b201          move    a0,*a1(ATTACH_PROC),L           ;not attached to anything
         000030e0     03e0  
     863 000030f0           lozwdone
     864                    
     865                            ;if our victim is still in mode puppet, puppet2, headheld, or
     866                            ; attached, instead put him in ONGROUND.
     867 000030f0     b42e          move    *a1(PLYRMODE),a14
         00003100     05c0  
     868 00003110     0b4e          cmpi    MODE_PUPPET,a14
         00003120     ffeb  
     869 00003130     ca07          jreq    lozwfix_opp
     870 00003140     0b4e          cmpi    MODE_PUPPET2,a14
         00003150     ffee  
     871 00003160     ca04          jreq    lozwfix_opp
     872                    ;This was fucking up the shawn franknsteiner move from headhold!
     873                    ;Forcing him to dive down too low!
     874                    ;       cmpi    MODE_HEADHELD,a14
     875                    ;       jreq    lozwfix_opp
     876 00003170     0b4e          cmpi    MODE_ATTACHED,a14
         00003180     fffc  
     877 00003190     ca01          jreq    lozwfix_opp
     878 000031a0     c004          jruc    lozwdone_really
     879                    
     880 000031b0           lozwfix_opp
     881 000031b0     09ce          movi    MODE_ONGROUND,a14
         000031c0     0004  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   20

     882 000031d0     b1c1          move    a14,*a1(PLYRMODE)
         000031e0     05c0  
     883                    
     884 000031f0           lozwdone_really
     885 000031f0     b28a          move    a4,*a10(OANIPC),L
         00003200     0030  
     886                    ;       jruc    _next_command
     887 00003210     c000          jruc    _next_command1
         00003220     fd10  
     888                    
     889                    ********
     890 00003230           _ani_waithitgnd ;11
     891                    
     892 00003230     b7a0          move    *a13(OBJ_YVEL),a0,L     ;must have down velocity
         00003240     02f0  
     893 00003250     c123          jrp     vdgwno_gnd
     894                    
     895                            ;if we're the master and the attach is valid, check and see if
     896                            ; our puppet has hit the ground.
     897 00003260     b5ae          move    *a13(ANIMODE),a14
         00003270     0660  
     898 00003280     1e4e          btst    MODE_KEEPATTACHED_BIT,a14
     899 00003290     ca12          jrz     vdgwskip_pcheck
     900                    
     901 000032a0     b7a0          move    *a13(ATTACH_PROC),a0,L
         000032b0     03e0  
     902 000032c0     ca0f          jrz     vdgwskip_pcheck         ;we're attached?
     903 000032d0     b60e          move    *a0(ATTACH_PROC),a14,L
         000032e0     03e0  
     904 000032f0     ca0c          jrz     vdgwskip_pcheck         ;they're attached?
     905 00003300     49ae          cmp     a13,a14
     906 00003310     cb0a          jrne    vdgwskip_pcheck         ;to each other?
     907                    
     908                            ;ah, but if the opponent's MODE_GHOST bit is set, ignore him
     909 00003320     b40e          move    *a0(ANIMODE),a14
         00003330     0660  
     910 00003340     1e8e          btst    MODE_GHOST_BIT,a14
     911 00003350     cb06          jrnz    vdgwskip_pcheck
     912                    
     913 00003360     b401          move    *a0(OBJ_YPOSINT),a1,W
         00003370     0130  
     914 00003380     b402          move    *a0(GROUND_Y),a2,W
         00003390     0570  
     915 000033a0     4422          sub     a1,a2
     916                    
     917 000033b0     cf06          jrnn    vdgwhit_gnd
     918                    
     919 000033c0           vdgwskip_pcheck
     920                    
     921 000033c0     b5a0          move    *a13(OBJ_YPOSINT),a0
         000033d0     0130  
     922 000033e0     b5a1          move    *a13(GROUND_Y),a1
         000033f0     0570  
     923 00003400     4820          cmp     a1,a0                   ;a0-a1
     924 00003410     c707          jrgt    vdgwno_gnd
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   21

     925                    
     926 00003420           vdgwhit_gnd
     927 00003420     0d5f          CALLA   SMALL_BOUNCE
         00003430 00000000! 
     928 00003450     b28a          move    a4,*a10(OANIPC),L
         00003460     0030  
     929                    ;       jruc    _next_command
     930 00003470     c000          jruc    _next_command1
         00003480     fcea  
     931                    
     932 00003490           vdgwno_gnd
     933 00003490     1820          movk    1,a0
     934 000034a0     b00a          move    a0,*a10(OANICNT)        ;# ticks to hold cur frame
         000034b0     0050  
     935 000034c0     0960          rets
     936                    
     937                    
     938                    ********
     939 000034d0           _ani_xflip      ;12
     940                    
     941 000034d0     b5a0          move    *a13(OBJ_CONTROL),a0
         000034e0     0780  
     942 000034f0     0bc0          xori    M_FLIPH,a0
         00003500 00000010  
     943 00003520     b00d          move    a0,*a13(OBJ_CONTROL)
         00003530     0780  
     944                    
     945 00003540     b28a          move    a4,*a10(OANIPC),L
         00003550     0030  
     946                    ;       jruc    _next_command
     947 00003560     c000          jruc    _next_command1
         00003570     fcdb  
     948                    
     949                    ********
     950 00003580           _ani_bounce     ;13
     951                    
     952 00003580     9480          move    *a4+,a0                 ;Bounce value
     953 00003590     2600          sll     16,a0
     954 000035a0     b20d          move    a0,*a13(OBJ_YVEL),L
         000035b0     02f0  
     955                    
     956 000035c0     b28a          move    a4,*a10(OANIPC),L
         000035d0     0030  
     957                    ;       jruc    _next_command
     958 000035e0     c000          jruc    _next_command1
         000035f0     fcd3  
     959                    
     960                    ********
     961 00003600           _ani_attack_on_Z ;14
     962                    
     963                    ;I'm not sure we want to zero attach_proc just for starting an attack!
     964                    ;Watch this....
     965 00003600     5600          clr     a0                              ;start out not attached
     966                    ;       move    a0,*a13(ATTACH_PROC),L          ;to anything
     967                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   22

     968 00003610     b00d          move    a0,*a13(HITBLOCKER)
         00003620     0540  
     969 00003630     b00d          move    a0,*a13(ATTACH_ZOFF)
         00003640     03d0  
     970                    
     971                    ;The start of each attack on will clear MODE_STATUS!
     972                    
     973 00003650     b5a0          move    *a13(ANIMODE),a0
         00003660     0660  
     974 00003670     0b80          andni   MODE_STATUS2,a0
         00003680 00000200  
     975 000036a0     b00d          move    a0,*a13(ANIMODE)
         000036b0     0660  
     976                    
     977 000036c0     b5a0          move    *a13(ANIMODE),a0
         000036d0     0660  
     978 000036e0     0ba0          ori     MODE_CHECKHIT,a0
         000036f0 00000010  
     979 00003710     b00d          move    a0,*a13(ANIMODE)
         00003720     0660  
     980                    
     981 00003730     9480          move    *a4+,a0
     982 00003740     b00d          move    a0,*a13(ATTACK_MODE)
         00003750     05d0  
     983                    ;       move    *a4+,a0
     984                    ;       move    a0,*a13(OBJ_ATTXOFF)
     985                    ;       move    *a4+,a0
     986                    ;       move    a0,*a13(OBJ_ATTYOFF)
     987                    ;       move    *a4+,a0
     988                    ;       move    a0,*a13(OBJ_ATTZOFF)
     989                    ;       move    *a4+,a0
     990                    ;       move    a0,*a13(OBJ_ATTWIDTH)
     991                    ;       move    *a4+,a0
     992                    ;       move    a0,*a13(OBJ_ATTHEIGHT)
     993                    ;       move    *a4+,a0
     994                    ;       move    a0,*a13(OBJ_ATTDEPTH)
     995                    
     996 00003760     9680          move    *a4+,a0,L
     997 00003770     b20d          move    a0,*a13(OBJ_ATTXOFF),L
         00003780     0240  
     998 00003790     9680          move    *a4+,a0,L
     999 000037a0     b20d          move    a0,*a13(OBJ_ATTZOFF),L
         000037b0     0260  
    1000 000037c0     9680          move    *a4+,a0,L
    1001 000037d0     b20d          move    a0,*a13(OBJ_ATTHEIGHT),L
         000037e0     0280  
    1002 000037f0     b28a          move    a4,*a10(OANIPC),L
         00003800     0030  
    1003                    
    1004                    ;       jruc    _next_command
    1005 00003810     c000          jruc    _next_command1
         00003820     fcb0  
    1006                    
    1007                    ********
    1008 00003830           _ani_gravity_on ;15
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   23

    1009                    
    1010 00003830     b5a0          move    *a13(ANIMODE),a0
         00003840     0660  
    1011 00003850     0b80          andni   MODE_NOGRAVITY,a0
         00003860 00000020  
    1012 00003880     b00d          move    a0,*a13(ANIMODE)
         00003890     0660  
    1013                    
    1014 000038a0     b28a          move    a4,*a10(OANIPC),L
         000038b0     0030  
    1015                    ;       jruc    _next_command
    1016 000038c0     c000          jruc    _next_command1
         000038d0     fca5  
    1017                    
    1018                    ********
    1019 000038e0           _ani_gravity_off ;16
    1020                    
    1021 000038e0     b5a0          move    *a13(ANIMODE),a0
         000038f0     0660  
    1022 00003900     0ba0          ori     MODE_NOGRAVITY,a0
         00003910 00000020  
    1023 00003930     b00d          move    a0,*a13(ANIMODE)
         00003940     0660  
    1024                    
    1025 00003950     b28a          move    a4,*a10(OANIPC),L
         00003960     0030  
    1026                    ;       jruc    _next_command
    1027 00003970     c000          jruc    _next_command1
         00003980     fc9a  
    1028                    
    1029                    ********
    1030 00003990           _ani_goto       ;17
    1031                    
    1032 00003990     9684          move    *a4+,a4,L
    1033 000039a0     b28a          move    a4,*a10(OANIPC),L
         000039b0     0030  
    1034                    
    1035                    ;       jruc    _next_command
    1036 000039c0     c000          jruc    _next_command1
         000039d0     fc95  
    1037                    
    1038                    ********
    1039 000039e0           _ani_attachz    ;18
    1040                    
    1041                    ;       move    *a4+,a0                 ;xoff
    1042                    ;       move    a0,*a13(ATTACH_XOFF)
    1043                    ;       move    *a4+,a0
    1044                    ;       move    a0,*a13(ATTACH_YOFF)
    1045                    
    1046 000039e0     9680          move    *a4+,a0,L
    1047 000039f0     b20d          move    a0,*a13(ATTACH_XOFF),L
         00003a00     03b0  
    1048 00003a10     9480          move    *a4+,a0
    1049 00003a20     b00d          move    a0,*a13(ATTACH_ZOFF)
         00003a30     03d0  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   24

    1050                    
    1051 00003a40     b28a          move    a4,*a10(OANIPC),L
         00003a50     0030  
    1052                    ;       jruc    _next_command
    1053 00003a60     c000          jruc    _next_command1
         00003a70     fc8b  
    1054                    
    1055                    ********
    1056 00003a80           _ani_slowmo     ;19
    1057                    
    1058 00003a80     9480          move    *a4+,a0                 ;frame delay
    1059 00003a90     0580          move    a0,@slowmo
         00003aa0 00000000! 
    1060                    
    1061 00003ac0     b28a          move    a4,*a10(OANIPC),L
         00003ad0     0030  
    1062                    ;       jruc    _next_command
    1063 00003ae0     c000          jruc    _next_command1
         00003af0     fc83  
    1064                    
    1065                    ********
    1066 00003b00           _ani_waitrelease ;20
    1067                    
    1068 00003b00     b5a0          move    *a13(BUT_VAL_CUR),a0
         00003b10     0b90  
    1069                    
    1070 00003b20     9481          move    *a4+,a1                 ;button bit
    1071 00003b30     4a20          btst    a1,a0                   ;still down?
    1072 00003b40     ca1d          jrz     ziygbutton_up
    1073                    
    1074                            ;since we do the flip here, we have to update FACING_DIR too.
    1075 00003b50     b9ad          move    *a13(NEW_FACING_DIR),*a13(FACING_DIR)
         00003b60     04d0  
         00003b70     04c0  
    1076                    
    1077 00003b80     b5ae          move    *a13(NEW_FACING_DIR),a14
         00003b90     04d0  
    1078 00003ba0     1f8e          btst    PLAYER_RIGHT_BIT,a14
    1079 00003bb0     cb0b          jrnz    ziygright
    1080                    
    1081 00003bc0     b5ae          move    *a13(OBJ_CONTROL),a14
         00003bd0     0780  
    1082 00003be0     0bae          ori     M_FLIPH,a14
         00003bf0 00000010  
    1083 00003c10     b1cd          move    a14,*a13(OBJ_CONTROL)
         00003c20     0780  
    1084                    
    1085 00003c30     1820          movk    1,a0
    1086 00003c40     b00a          move    a0,*a10(OANICNT)        ;# ticks to hold cur frame
         00003c50     0050  
    1087 00003c60     0960          rets
    1088 00003c70           ziygright
    1089 00003c70     b5ae          move    *a13(OBJ_CONTROL),a14
         00003c80     0780  
    1090 00003c90     0b8e          andni   M_FLIPH,a14
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   25

         00003ca0 00000010  
    1091 00003cc0     b1cd          move    a14,*a13(OBJ_CONTROL)
         00003cd0     0780  
    1092                    
    1093 00003ce0     1820          movk    1,a0
    1094 00003cf0     b00a          move    a0,*a10(OANICNT)        ;# ticks to hold cur frame
         00003d00     0050  
    1095 00003d10     0960          rets
    1096                    
    1097 00003d20           ziygbutton_up
    1098 00003d20     b28a          move    a4,*a10(OANIPC),L
         00003d30     0030  
    1099                    ;       jruc    _next_command
    1100 00003d40     c000          jruc    _next_command1
         00003d50     fc5d  
    1101                    
    1102                    ********
    1103 00003d60           _ani_offset     ;21
    1104                    
    1105 00003d60     9481          move    *a4+,a1                 ;x offset
    1106 00003d70     b5a0          move    *a13(FACING_DIR),a0
         00003d80     04c0  
    1107 00003d90     1f80          btst    MOVE_RIGHT_BIT,a0
    1108 00003da0     cb01          jrnz    unuiright
    1109 00003db0     03a1          neg     a1
    1110 00003dc0           unuiright
    1111 00003dc0     b5a0          move    *a13(OBJ_XPOSINT),a0
         00003dd0     0110  
    1112 00003de0     4020          add     a1,a0
    1113 00003df0     b00d          move    a0,*a13(OBJ_XPOSINT)
         00003e00     0110  
    1114                    
    1115 00003e10     9481          move    *a4+,a1                 ;y offset
    1116 00003e20     b5a0          move    *a13(OBJ_YPOSINT),a0
         00003e30     0130  
    1117 00003e40     4020          add     a1,a0
    1118 00003e50     b00d          move    a0,*a13(OBJ_YPOSINT)
         00003e60     0130  
    1119                    
    1120                            ;SCROLL_CTRL stuff
    1121 00003e70     b5a0          move    *a13(SCROLL_Y),a0
         00003e80     0d90  
    1122 00003e90     4420          sub     a1,a0
    1123 00003ea0     b00d          move    a0,*a13(SCROLL_Y)
         00003eb0     0d90  
    1124                    
    1125 00003ec0     9481          move    *a4+,a1                 ;z offset
    1126 00003ed0     b5a0          move    *a13(OBJ_ZPOSINT),a0
         00003ee0     0150  
    1127 00003ef0     4020          add     a1,a0
    1128 00003f00     b00d          move    a0,*a13(OBJ_ZPOSINT)
         00003f10     0150  
    1129                    
    1130 00003f20     b28a          move    a4,*a10(OANIPC),L
         00003f30     0030  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   26

    1131                    ;       jruc    _next_command
    1132 00003f40     c000          jruc    _next_command1
         00003f50     fc3d  
    1133                    
    1134                    ********
    1135 00003f60           _ani_friction   ;22
    1136                    
    1137 00003f60     9480          move    *a4+,a0                 ;friction value
    1138 00003f70     b00d          move    a0,*a13(OBJ_FRICTION)
         00003f80     0350  
    1139                    
    1140 00003f90     b5a0          move    *a13(ANIMODE),a0
         00003fa0     0660  
    1141 00003fb0     0ba0          ori     MODE_FRICTION,a0
         00003fc0 00000040  
    1142 00003fe0     b00d          move    a0,*a13(ANIMODE)
         00003ff0     0660  
    1143                    
    1144 00004000     b28a          move    a4,*a10(OANIPC),L
         00004010     0030  
    1145                    ;       jruc    _next_command
    1146 00004020     c000          jruc    _next_command1
         00004030     fc2f  
    1147                    
    1148                    
    1149                    ********
    1150 00004040           _ani_min_yvel   ;23
    1151                    
    1152                    ;sets YVEL to given value, UNLESS it's already higher.
    1153                    
    1154 00004040     9680          move    *a4+,a0,L
    1155 00004050     b7ae          move    *a13(OBJ_YVEL),a14,L
         00004060     02f0  
    1156 00004070     480e          cmp     a0,a14
    1157 00004080     c502          jrge    peswset
    1158 00004090     b20d          move    a0,*a13(OBJ_YVEL),L
         000040a0     02f0  
    1159 000040b0     b28a  peswset move    a4,*a10(OANIPC),L
         000040c0     0030  
    1160                    ;       jruc    _next_command
    1161 000040d0     c000          jruc    _next_command1
         000040e0     fc24  
    1162                    
    1163                    ********
    1164 000040f0           _ani_attachvel  ;24
    1165                    
    1166 000040f0                   STRUCT  0
    1167 000040f0                   LONG    jxchXVEL
    1168 000040f0                   LONG    jxchYVEL
    1169 000040f0                   LONG    jxchZVEL
    1170 000040f0                   LABEL   jxchSIZE
    1171                    
    1172                            ;x velocity is always relative to attacker FACING_DIR
    1173                    
    1174 000040f0     4c8e          move    a4,a14
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   27

    1175 00004100     0b0e          addi    jxchSIZE,a14
         00004110     0060  
    1176 00004120     b3ca          move    a14,*a10(OANIPC),L
         00004130     0030  
    1177                    
    1178 00004140     b7a2          move    *a13(ATTACH_PROC),a2,L          ;proc attached to
         00004150     03e0  
    1179 00004160     ca14          jrz     jxchnot_attached
    1180 00004170     b640          move    *a2(ATTACH_PROC),a0,L
         00004180     03e0  
    1181 00004190     ca11          jrz     jxchnot_attached
    1182                    
    1183 000041a0     b680          move    *a4(jxchYVEL),a0,L
         000041b0     0020  
    1184 000041c0     b202          move    a0,*a2(OBJ_YVEL),L
         000041d0     02f0  
    1185 000041e0     b680          move    *a4(jxchZVEL),a0,L
         000041f0     0040  
    1186 00004200     b202          move    a0,*a2(OBJ_ZVEL),L
         00004210     0310  
    1187                    
    1188 00004220     b680          move    *a4(jxchXVEL),a0,L
         00004230     0000  
    1189 00004240     b5ae          move    *a13(FACING_DIR),a14
         00004250     04c0  
    1190 00004260     1f8e          btst    MOVE_RIGHT_BIT,a14
    1191 00004270     cb01          jrnz    jxchxok
    1192 00004280     03a0          neg     a0
    1193 00004290           jxchxok
    1194 00004290     b202          move    a0,*a2(OBJ_XVEL),L
         000042a0     02d0  
    1195                    
    1196 000042b0           jxchnot_attached
    1197 000042b0     c000          jruc    _next_command
         000042c0     fc04  
    1198                    
    1199                    ********
    1200 000042d0           _ani_throw1     ;25
    1201                    
    1202 000042d0     b28a          move    a4,*a10(OANIPC),L
         000042e0     0030  
    1203                    ;       jruc    _next_command
    1204 000042f0     c000          jruc    _next_command1
         00004300     fc02  
    1205                    
    1206                    ********
    1207 00004310           _ani_sound      ;26
    1208                    
    1209 00004310     9480          move    *a4+,a0
    1210 00004320     0b40          cmpi    run_snd,a0
         00004330     ff3f  
    1211 00004340     cb14          jrne    qjiunot_run
    1212                    
    1213                            ;if there's been another foot noise from this guy within the last
    1214                            ; 12 ticks, give it a miss.
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   28

    1215 00004350     05ae          move    @PCNT,a14
         00004360 00000000! 
    1216 00004380     052e          zext    a14,W
    1217 00004390     b5a1          move    *a13(FOOT_PCNT),a1
         000043a0     0890  
    1218 000043b0     442e          sub     a1,a14
    1219 000043c0     038e          abs     a14
    1220 000043d0     0b4e          cmpi    12,a14
         000043e0     fff3  
    1221 000043f0     c412          jrlt    qjiudone
    1222 00004400     05a1          move    @PCNT,a1
         00004410 00000000! 
    1223 00004430     b02d          move    a1,*a13(FOOT_PCNT)
         00004440     0890  
    1224 00004450     0d5f          calla   triple_sound
         00004460 00000000! 
    1225 00004480     c009          jruc    qjiudone
    1226                    
    1227 00004490           qjiunot_run
    1228 00004490     4c00          move    a0,a0
    1229 000044a0     ce04          jrn     qjiutable_lookup
    1230 000044b0     0d5f          calla   triple_sound
         000044c0 00000000! 
    1231 000044e0     c003          jruc    qjiudone
    1232                    
    1233 000044f0           qjiutable_lookup
    1234 000044f0     0d5f          calla   wrtable_sound
         00004500 00000000! 
    1235                    
    1236 00004520           qjiudone
    1237 00004520     b28a          move    a4,*a10(OANIPC),L
         00004530     0030  
    1238                    ;       jruc    _next_command
    1239 00004540     c000          jruc    _next_command1
         00004550     fbdd  
    1240                    
    1241                    ********
    1242 00004560           _ani_setfacing  ;27
    1243                    
    1244 00004560     b5a0          move    *a13(NEW_FACING_DIR),a0
         00004570     04d0  
    1245 00004580     b00d          move    a0,*a13(FACING_DIR)
         00004590     04c0  
    1246                    
    1247 000045a0     b28a          move    a4,*a10(OANIPC),L
         000045b0     0030  
    1248                    ;       jruc    _next_command
    1249 000045c0     c000          jruc    _next_command1
         000045d0     fbd5  
    1250                    
    1251                    ********
    1252 000045e0           _ani_pause      ;28
    1253                    
    1254                            ;hold current frame for a few ticks
    1255 000045e0     948e          move    *a4+,a14
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   29

    1256 000045f0     b28a          move    a4,*a10(OANIPC),L
         00004600     0030  
    1257 00004610     b1ca          move    a14,*a10(OANICNT)
         00004620     0050  
    1258 00004630     0960          rets
    1259                    
    1260                    
    1261                    ********
    1262 00004640           _ani_ifstatus   ;29
    1263                    
    1264 00004640     9680          move    *a4+,a0,L               ;this is a conditional goto
    1265 00004650     b5a1          move    *a13(ANIMODE),a1        ;if MODE_STATUS set then
         00004660     0660  
    1266 00004670     1ec1          btst    MODE_STATUS_BIT,a1      ;branch is taken
    1267 00004680     ca01          jrz     adwfskip
    1268                    
    1269 00004690     4c04          move    a0,a4                   ;new ani pc
    1270 000046a0           adwfskip
    1271 000046a0     b28a          move    a4,*a10(OANIPC),L
         000046b0     0030  
    1272                    ;       jruc    _next_command
    1273 000046c0     c000          jruc    _next_command1
         000046d0     fbc5  
    1274                    
    1275                    
    1276                    ********
    1277 000046e0           _ani_code       ;30
    1278                    
    1279 000046e0     9680          move    *a4+,a0,L               ;code to execute
    1280 000046f0     b28a          move    a4,*a10(OANIPC),L
         00004700     0030  
    1281 00004710                   PUSH    a10
    1282 00004720     0920          call    a0
    1283 00004730                   PULL    a10
    1284 00004740     c000          jruc    _next_command
         00004750     fbbb  
    1285                    
    1286                    ********
    1287 00004760           _ani_shaker     ;31
    1288                    
    1289 00004760                   push    a10
    1290                    
    1291 00004770     948a          move    *a4+,a10,W              ;shaker mode value
    1292 00004780     0d5f          calla   SHAKER2
         00004790 00000000! 
    1293                    
    1294 000047b0                   pull    a10
    1295                    
    1296 000047c0     b28a          move    a4,*a10(OANIPC),L
         000047d0     0030  
    1297                    ;       jruc    _next_command
    1298 000047e0     c000          jruc    _next_command1
         000047f0     fbb3  
    1299                    
    1300                    ********
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   30

    1301 00004800           _ani_changeanim ;32
    1302                    
    1303 00004800     9684          move    *a4+,a4,L
    1304 00004810     b28a          move    a4,*a10(OANIPC),L
         00004820     0030  
    1305 00004830     b28a          move    a4,*a10(OANIBASE),L
         00004840     0010  
    1306                    
    1307                    ;       jruc    _next_command
    1308 00004850     c000          jruc    _next_command1
         00004860     fbac  
    1309                            
    1310                    
    1311                    ********
    1312 00004870           _ani_faceup     ;33
    1313                    
    1314 00004870     1921          movk    MOVE_UP_RIGHT,a1
    1315 00004880     b5a0          move    *a13(OBJ_CONTROL),a0
         00004890     0780  
    1316 000048a0     1f60          btst    B_FLIPH,a0
    1317 000048b0     ca01          jrz     odtjright
    1318 000048c0     18a1          movk    MOVE_UP_LEFT,a1
    1319 000048d0     b02d  odtjright       move    a1,*a13(FACING_DIR)
         000048e0     04c0  
    1320                    
    1321 000048f0     b28a          move    a4,*a10(OANIPC),L
         00004900     0030  
    1322                    ;       jruc    _next_command
    1323 00004910     c000          jruc    _next_command1
         00004920     fba0  
    1324                    
    1325                    ********
    1326 00004930           _ani_facedown   ;34
    1327                    
    1328 00004930     1941          movk    MOVE_DOWN_RIGHT,a1
    1329 00004940     b5a0          move    *a13(OBJ_CONTROL),a0
         00004950     0780  
    1330 00004960     1f60          btst    B_FLIPH,a0
    1331 00004970     ca01          jrz     dwznright
    1332 00004980     18c1          movk    MOVE_DOWN_LEFT,a1
    1333 00004990     b02d  dwznright       move    a1,*a13(FACING_DIR)
         000049a0     04c0  
    1334                    
    1335 000049b0     b28a          move    a4,*a10(OANIPC),L
         000049c0     0030  
    1336                    ;       jruc    _next_command
    1337 000049d0     c000          jruc    _next_command1
         000049e0     fb94  
    1338                    
    1339                    ********
    1340 000049f0           _ani_bouncerope ;35
    1341                    
    1342 000049f0     09c0          movi    ROPE_LEFT,a0
         00004a00     0002  
    1343 00004a10     b5ae          move    *a13(OBJ_XPOSINT),a14
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   31

         00004a20     0110  
    1344 00004a30     0b4e          cmpi    RING_X_CENTER,a14
         00004a40     fbcd  
    1345 00004a50     c602          jrle    fjcwdir_set
    1346 00004a60     09c0          movi    ROPE_RIGHT,a0
         00004a70     0003  
    1347 00004a80           fjcwdir_set
    1348 00004a80     09c1          movi    ROPE_SIDES,a1
         00004a90     0002  
    1349 00004aa0     b7a3          move    *a13(OBJ_ZPOS),a3,L
         00004ab0     0140  
    1350 00004ac0     9482          move    *a4+,a2,W
    1351 00004ad0     b28a          move    a4,*a10(OANIPC),L
         00004ae0     0030  
    1352 00004af0     cf02          jrnn    fjcwno_release
    1353 00004b00     09c1          movi    ROPE_SIDESR,a1
         00004b10     0004  
    1354 00004b20           fjcwno_release
    1355 00004b20     0d5f          calla   rope_command
         00004b30 00000000! 
    1356 00004b50     09c0          movi    3ch,a0
         00004b60     003c  
    1357 00004b70     0d5f          calla   triple_sound
         00004b80 00000000! 
    1358 00004ba0     c000          jruc    _next_command
         00004bb0     fb75  
    1359                    
    1360                    ********
    1361 00004bc0           _ani_shakeropes ;36
    1362                    
    1363 00004bc0     09c1          movi    ROPE_BOUNCEUD,a1
         00004bd0     0000  
    1364 00004be0     9482          move    *a4+,a2,W
    1365 00004bf0     b28a          move    a4,*a10(OANIPC),L
         00004c00     0030  
    1366                    
    1367                            ;blow it off if we're outside
    1368 00004c10     b5ae          move    *a13(INRING),a14
         00004c20     0560  
    1369 00004c30     cb00          jrnz    _next_command
         00004c40     fb6c  
    1370                    
    1371                            ;force a2 into range, just to be safe...
    1372 00004c50     0b82          andi    03h,a2
         00004c60 fffffffc  
    1373                    
    1374 00004c80     09c0          movi    ROPE_BACK,a0
         00004c90     0001  
    1375 00004ca0     0d5f          calla   rope_command
         00004cb0 00000000! 
    1376                    
    1377 00004cd0     09c0          movi    ROPE_LEFT,a0
         00004ce0     0002  
    1378 00004cf0     b5ae          move    *a13(OBJ_CONTROL),a14
         00004d00     0780  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   32

    1379 00004d10     1f6e          btst    B_FLIPH,a14
    1380 00004d20     cb02          jrnz    nmtlcont
    1381                    
    1382 00004d30     09c0          movi    ROPE_RIGHT,a0
         00004d40     0003  
    1383 00004d50           nmtlcont
    1384 00004d50     0d5f          calla   rope_command
         00004d60 00000000! 
    1385                    
    1386 00004d80     09c0          movi    3ch,a0
         00004d90     003c  
    1387 00004da0     0d5f          calla   triple_sound
         00004db0 00000000! 
    1388                    
    1389 00004dd0     c000          jruc    _next_command
         00004de0     fb52  
    1390                    
    1391                    ********
    1392 00004df0           _ani_bendrope   ;37
    1393                    
    1394 00004df0     09c0          movi    ROPE_LEFT,a0
         00004e00     0002  
    1395 00004e10     b5ae          move    *a13(OBJ_XPOSINT),a14
         00004e20     0110  
    1396 00004e30     0b4e          cmpi    RING_X_CENTER,a14
         00004e40     fbcd  
    1397 00004e50     c602          jrle    piwbdir_set
    1398 00004e60     09c0          movi    ROPE_RIGHT,a0
         00004e70     0003  
    1399 00004e80           piwbdir_set
    1400 00004e80     09c1          movi    ROPE_DOWNS,a1
         00004e90     0003  
    1401 00004ea0     b7a3          move    *a13(OBJ_ZPOS),a3,L
         00004eb0     0140  
    1402 00004ec0     9482          move    *a4+,a2,W
    1403 00004ed0     b28a          move    a4,*a10(OANIPC),L
         00004ee0     0030  
    1404 00004ef0     cf02          jrnn    piwbno_release
    1405 00004f00     09c1          movi    ROPE_DOWNSR,a1
         00004f10     0005  
    1406 00004f20           piwbno_release
    1407 00004f20     0d5f          calla   rope_command
         00004f30 00000000! 
    1408 00004f50     c000          jruc    _next_command
         00004f60     fb3a  
    1409                    
    1410                    ********
    1411 00004f70           _ani_setspeed   ;38
    1412                    
    1413 00004f70     9480          move    *a4+,a0
    1414 00004f80     b00d          move    a0,*a13(ANI_SPEED)
         00004f90     0650  
    1415                    
    1416 00004fa0     b28a          move    a4,*a10(OANIPC),L
         00004fb0     0030  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   33

    1417                    ;       jruc    _next_command
    1418 00004fc0     c000          jruc    _next_command1
         00004fd0     fb35  
    1419                    
    1420                    
    1421                    ********
    1422 00004fe0           _ani_leapatpos  ;39
    1423                    
    1424                    ;WORD   - jyurticks to reach destination
    1425                    ;WORD   - max distance to travel
    1426                    ;WORD   - x,y,z offset of attack box (eg. attacker's fist)
    1427                    
    1428                    ;NB     - user must set TGT_XOFF,YOFF & ZOFF <-- these are the actual target
    1429                    
    1430                    
    1431 00004fe0     9488          move    *a4+,a8                 ;# ticks
    1432 00004ff0     9489          move    *a4+,a9                 ;max distance to travel
    1433                    
    1434 00005000           jyuruser
    1435 00005000     b5a1          move    *a13(TGT_XOFF),a1       ;target x
         00005010     02a0  
    1436 00005020     2601          sll     16,a1
    1437                    
    1438 00005030     9480          move    *a4+,a0                 ;attack x offset
    1439 00005040     2600          sll     16,a0
    1440 00005050     b5ae          move    *a13(OBJ_CONTROL),a14
         00005060     0780  
    1441 00005070     1f6e          btst    B_FLIPH,a14
    1442 00005080     ca01          jrz     jyurright0
    1443 00005090     03a0          neg     a0
    1444 000050a0           jyurright0
    1445 000050a0     b7a2          move    *a13(OBJ_XPOS),a2,L
         000050b0     0100  
    1446 000050c0     4002          add     a0,a2                   ;att x
    1447                    
    1448 000050d0     4441          sub     a2,a1                   ;def x - att x
    1449 000050e0     4c25          move    a1,a5                   ;delta x
    1450 000050f0     4d00          move    a8,a0                   ;ticks
    1451 00005100     5801          divs    a0,a1                   ;a1 / a0
    1452 00005110     b22d          move    a1,*a13(OBJ_XVEL),L
         00005120     02d0  
    1453                    
    1454                    
    1455                    ;to calculate YVEL taking into account gravity:
    1456                    ;use y-y0 = v0*t + 0.5*a*t^2
    1457                    
    1458 00005130     4d01          move    a8,a1
    1459 00005140     5f01          mpyu    a8,a1                   ;t^2
    1460 00005150     b7a0          move    *a13(OBJ_GRAVITY),a0,L
         00005160     0330  
    1461 00005170     5e01          mpyu    a0,a1                   ;a*t^2
    1462 00005180     2fe1          srl     1,a1                    ;1/2*a*t^2
    1463                    
    1464 00005190     b5a0          move    *a13(TGT_YOFF),a0       ;target y
         000051a0     02b0  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   34

    1465 000051b0     2600          sll     16,a0
    1466                    
    1467 000051c0     948e          move    *a4+,a14                ;attack y offset
    1468 000051d0     260e          sll     16,a14
    1469 000051e0     b7a2          move    *a13(OBJ_YPOS),a2,L     ;y0
         000051f0     0120  
    1470 00005200     45c2          sub     a14,a2
    1471                    
    1472 00005210     4440          sub     a2,a0                   ;a0 = a0-a2 (y - y0)
    1473 00005220     4001          add     a0,a1
    1474 00005230     5b01          divu    a8,a1                   ;a1 = a1/a8 ( ((y-y0)+(1/2*a*t^2)) / t )
    1475                    
    1476 00005240     0b61          cmpi    00f0000H,a1
         00005250 fff0ffff  
    1477 00005270     c403          jrlt    jyuryok
    1478 00005280     09e1          movi    00f0000H,a1
         00005290 000f0000  
    1479 000052b0     b22d  jyuryok move    a1,*a13(OBJ_YVEL),L
         000052c0     02f0  
    1480                    
    1481                    
    1482 000052d0     b5a1          move    *a13(TGT_ZOFF),a1       ;target z
         000052e0     02c0  
    1483 000052f0     2601          sll     16,a1
    1484                    
    1485 00005300     9480          move    *a4+,a0                 ;attack z offset
    1486 00005310     2600          sll     16,a0
    1487 00005320     b7a2          move    *a13(OBJ_ZPOS),a2,L
         00005330     0140  
    1488 00005340     4002          add     a0,a2                   ;att z
    1489                    
    1490 00005350     4441          sub     a2,a1                   ;def z - att z
    1491 00005360     4c26          move    a1,a6                   ;delta z
    1492 00005370     4d00          move    a8,a0                   ;ticks
    1493 00005380     5801          divs    a0,a1                   ;a1 / a0
    1494 00005390     b22d          move    a1,*a13(OBJ_ZVEL),L
         000053a0     0310  
    1495                    
    1496                    
    1497 000053b0     0385          abs     a5
    1498 000053c0     2e05          srl     16,a5
    1499 000053d0     4ca1          move    a5,a1
    1500 000053e0     5ea1          mpyu    a5,a1                   ;deltax^2
    1501 000053f0     4c25          move    a1,a5
    1502                    
    1503 00005400     0386          abs     a6
    1504 00005410     2e06          srl     16,a6
    1505 00005420     4cc1          move    a6,a1
    1506 00005430     5ec1          mpyu    a6,a1                   ;deltaz^2
    1507 00005440     4c20          move    a1,a0
    1508                    
    1509 00005450     40a0          add     a5,a0
    1510 00005460     0d5f          calla   square_root
         00005470 00000000! 
    1511                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   35

    1512 00005490     4809          cmp     a0,a9                   ;a9-a0 (will we exceed max dist?)
    1513 000054a0     c710          jrgt    jyurok
    1514                    
    1515 000054b0     2509          sll     8,a9                    ;x 256 (8 bits fractional)
    1516 000054c0     5a09          divu    a0,a9                   ;a9/a0
    1517                    
    1518 000054d0     4d21          move    a9,a1
    1519 000054e0     b7a0          move    *a13(OBJ_XVEL),a0,L
         000054f0     02d0  
    1520 00005500     5c01          mpys    a0,a1                   ;scale down xvel
    1521 00005510     2b01          sra     8,a1                    ;shift off fractional
    1522 00005520     b22d          move    a1,*a13(OBJ_XVEL),L
         00005530     02d0  
    1523                    
    1524 00005540     4d21          move    a9,a1
    1525 00005550     b7a0          move    *a13(OBJ_ZVEL),a0,L
         00005560     0310  
    1526 00005570     5c01          mpys    a0,a1                   ;scale down yvel
    1527 00005580     2b01          sra     8,a1                    ;shift off fractional
    1528 00005590     b22d          move    a1,*a13(OBJ_ZVEL),L
         000055a0     0310  
    1529                    
    1530 000055b0           jyurok
    1531 000055b0     b28a          move    a4,*a10(OANIPC),L
         000055c0     0030  
    1532                    ;       jruc    _next_command
    1533 000055d0     c000          jruc    _next_command1
         000055e0     fad4  
    1534                    
    1535                    
    1536                    ********
    1537 000055f0           _ani_zero_xzvels        ;40
    1538                    
    1539 000055f0     5600          clr     a0
    1540 00005600     b20d          move    a0,*a13(OBJ_XVEL),L
         00005610     02d0  
    1541 00005620     b20d          move    a0,*a13(OBJ_ZVEL),L
         00005630     0310  
    1542 00005640     b28a          move    a4,*a10(OANIPC),L
         00005650     0030  
    1543                    ;       jruc    _next_command
    1544 00005660     c000          jruc    _next_command1
         00005670     facb  
    1545                    
    1546                    
    1547                    ********
    1548 00005680           _ani_rope_z             ;41
    1549                            ;.word  ANI_ROPE_Z,R_TOP,RZ_HIGH
    1550                    
    1551                            ;which rope has he hit?
    1552 00005680     07a0          move    @right_rproc,a0,L
         00005690 00000000! 
    1553 000056b0     b7ae          move    *a13(OBJ_XPOS),a14,L
         000056c0     0100  
    1554 000056d0     0b6e          cmpi    RING_X_CENTER<<16,a14
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   36

         000056e0 fbcdffff  
    1555 00005700     c703          jrgt    rxbzright
    1556                    
    1557 00005710     07a0          move    @left_rproc,a0,L
         00005720 00000000! 
    1558 00005740           rxbzright
    1559 00005740     9481          move    *a4+,a1,W               ;rope index
    1560 00005750     9482          move    *a4+,a2,W               ;action
    1561 00005760     0d5f          calla   set_rope_z
         00005770 00000000! 
    1562 00005790     b28a          move    a4,*a10(OANIPC),L
         000057a0     0030  
    1563                    ;       jruc    _next_command
    1564 000057b0     c000          jruc    _next_command1
         000057c0     fab6  
    1565                    
    1566                    
    1567                    ********
    1568 000057d0           _ani_loop               ;42
    1569                    
    1570                            .ref    arw_bwait
    1571                    
    1572 000057d0     05a0          move    @p1rounds,a0
         000057e0 00000000! 
    1573 00005800     0b40          cmpi    2,a0
         00005810     fffd  
    1574 00005820     ca1f          jrz     mlgtat_end
    1575 00005830     05a0          move    @p2rounds,a0
         00005840 00000000! 
    1576 00005860     0b40          cmpi    2,a0
         00005870     fffd  
    1577 00005880     ca19          jreq    mlgtat_end
    1578                    
    1579                            ;oooh, wait.  If we've pinned someone, and announce_rnd_winner
    1580                            ; is waiting on the result (they'll be waiting to wake up at
    1581                            ; arw_bwait if they are) then we should wake it up.
    1582 00005890     b5ae          move    *a13(STATUS_FLAGS),a14
         000058a0     0b50  
    1583 000058b0     1f4e          btst    B_PINNED,a14
    1584 000058c0     ca11          jrz     mlgtno_pin
    1585                    
    1586 000058d0     09c0          movi    ANNC_PID,a0
         000058e0     012e  
    1587 000058f0     5621          clr     a1
    1588 00005900     03e1          not     a1
    1589 00005910     0d5f          calla   EXISTP
         00005920 00000000! 
    1590 00005940     cb09          jrnz    mlgtno_pin              ;annc exists?
    1591                    
    1592 00005950     b60e          move    *a0(PWAKE),a14,L
         00005960     00e0  
    1593 00005970     0b6e          cmpi    arw_bwait,a14
         00005980 ffffffff! 
    1594 000059a0     cb03          jrne    mlgtno_pin              ;waiting for a pin?
    1595                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   37

    1596 000059b0     182e          movk    1,a14
    1597 000059c0     b1c0          move    a14,*a0(PTIME)  ;wake it up.
         000059d0     0030  
    1598                    
    1599 000059e0     1820  mlgtno_pin      movk    1,a0
    1600 000059f0     b00a          move    a0,*a10(OANICNT)
         00005a00     0050  
    1601 00005a10     0960          rets
    1602                    
    1603 00005a20           mlgtat_end
    1604 00005a20     c000          jruc    _ani_detach     ;10
         00005a30     fd5f  
    1605                    ;
    1606                    ;       move    a4,*a10(OANIPC),L
    1607                    ;       jruc    _next_command
    1608                    
    1609                    
    1610                    ********
    1611                    ;_ani_set_opp_getup     ;43
    1612                    ;
    1613                    ;;args: .word (GETUP_TIME)
    1614                    ;
    1615                    ;       move    *a4+,a0
    1616                    ;
    1617                    ;       move    *a13(WHOIHIT),a14,L
    1618                    ;       move    a0,*a14(GETUP_TIME)
    1619                    ;
    1620                    ;       move    a4,*a10(OANIPC),L
    1621                    ;       jruc    _next_command
    1622                    ;
    1623                    
    1624                    
    1625                    ********
    1626 00005a40           _ani_set_xvel           ;44
    1627                    
    1628                    ;args:  .long (XVEL) .word (MODE)       ;if MODE=0  vel is absolute
    1629                                                            ;if MODE=3  vel is new_face relative
    1630 00005a40     9680          move    *a4+,a0,L
    1631 00005a50     9481          move    *a4+,a1
    1632 00005a60     ca15          jrz     ubgoabs
    1633 00005a70     1421          dec     a1
    1634 00005a80     ca0e          jrz     ubgoface
    1635 00005a90     1421          dec     a1
    1636 00005aa0     ca06          jrz     ubgohit
    1637                    
    1638                    ;new_facing relative
    1639 00005ab0     b5ae          move    *a13(NEW_FACING_DIR),a14
         00005ac0     04d0  
    1640 00005ad0     1f8e          btst    MOVE_RIGHT_BIT,a14
    1641 00005ae0     cb0d          jrnz    ubgoabs                 ;right
    1642 00005af0     03a0          neg     a0                      ;left
    1643 00005b00     c00b          jruc    ubgoabs
    1644                    
    1645 00005b10           ubgohit
    1646                    ;hit relative
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   38

    1647 00005b10     b5ae          move    *a13(PLYR_HIT_SIDE),a14
         00005b20     0550  
    1648 00005b30     1f8e          btst    MOVE_RIGHT_BIT,a14
    1649 00005b40     cb07          jrnz    ubgoabs                 ;hit from right
    1650                    
    1651 00005b50     03a0          neg     a0                      ;hit from left
    1652 00005b60     c005          jruc    ubgoabs
    1653 00005b70           ubgoface
    1654 00005b70     b5ae          move    *a13(FACING_DIR),a14
         00005b80     04c0  
    1655 00005b90     1f8e          btst    MOVE_RIGHT_BIT,a14
    1656 00005ba0     cb01          jrnz    ubgoabs                 ;right
    1657 00005bb0     03a0          neg     a0                      ;left
    1658 00005bc0           ubgoabs
    1659 00005bc0     b20d          move    a0,*a13(OBJ_XVEL),L
         00005bd0     02d0  
    1660                    
    1661 00005be0     b28a          move    a4,*a10(OANIPC),L
         00005bf0     0030  
    1662                    ;       jruc    _next_command
    1663 00005c00     c000          jruc    _next_command1
         00005c10     fa71  
    1664                    
    1665                    
    1666                    ********
    1667 00005c20           _ani_ifnotstatus        ;45
    1668                    
    1669 00005c20     9680          move    *a4+,a0,L               ;this is a conditional goto
    1670 00005c30     b5a1          move    *a13(ANIMODE),a1        ;if MODE_STATUS clear then
         00005c40     0660  
    1671 00005c50     1ec1          btst    MODE_STATUS_BIT,a1      ;branch is taken
    1672 00005c60     cb01          jrnz    lokiskip
    1673                    
    1674 00005c70     4c04          move    a0,a4                   ;new ani pc
    1675 00005c80           lokiskip
    1676 00005c80     b28a          move    a4,*a10(OANIPC),L
         00005c90     0030  
    1677                    ;       jruc    _next_command
    1678 00005ca0     c000          jruc    _next_command1
         00005cb0     fa67  
    1679                    
    1680                    ********
    1681 00005cc0           _ani_slide_back
    1682                    
    1683 00005cc0     9488          move    *a4+,a8                 ;range
    1684 00005cd0     9689          move    *a4+,a9,L               ;x-vel
    1685 00005ce0     9687          move    *a4+,a7,L               ;new ani PC if no slide
    1686 00005cf0     b28a          move    a4,*a10(OANIPC),L
         00005d00     0030  
    1687                    
    1688 00005d10     b5ae          move    *a13(ANIMODE),a14       ;was there a collision?
         00005d20     0660  
    1689 00005d30     1ece          btst    MODE_STATUS_BIT,a14
    1690 00005d40     ca00          jrz     vvlano_slide
         00005d50     0089  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   39

    1691                    
    1692                    
    1693 00005d60     b7a6          move    *a13(WHOIHIT),a6,L
         00005d70     0500  
    1694                    
    1695                    ;       move    *a6(PLYRMODE),a5
    1696                    ;       cmpi    MODE_BLOCK,a5
    1697                    ;       jrz     vvlano_slide
    1698                    
    1699 00005d80     b4c5          move    *a6(OBJ_XPOSINT),a5
         00005d90     0110  
    1700 00005da0     b5a0          move    *a13(OBJ_XPOSINT),a0
         00005db0     0110  
    1701                    
    1702 00005dc0     48a0          cmp     a5,a0                   ;a0-a5
    1703 00005dd0     c738          jrgt    vvlahit_from_right
    1704                    
    1705                    ;hit_from_left
    1706 00005de0     b5a0          move    *a13(INRING),a0
         00005df0     0560  
    1707 00005e00     cb12          jrnz    vvlaoutside1
    1708                    
    1709 00005e10                   PUSH    a6,a13
    1710 00005e30     4ccd          move    a6,a13
    1711 00005e40     09e6          movi    vln_right_rope,a6
         00005e50 00000000! 
    1712 00005e70     0d5f          calla   calc_line_x
         00005e80 00000000! 
    1713 00005ea0                   PULL    a6,a13
    1714 00005ec0     b4c1          move    *a6(OBJ_XPOSINT),a1
         00005ed0     0110  
    1715 00005ee0     4420          sub     a1,a0
    1716 00005ef0     0380          abs     a0
    1717 00005f00     4900          cmp     a8,a0
    1718 00005f10     c76d          jrgt    vvlano_slide
    1719 00005f20     c05d          jruc    vvlaslide
    1720                    
    1721 00005f30           vvlaoutside1
    1722                            ;hit from left outside ring.
    1723                            ; get left matedge first.  if it's zero, or greater than our
    1724                            ; x pos, check against right fence instead.
    1725 00005f30                   PUSH    a6
    1726 00005f40     09e6          movi    vln_left_matedge,a6
         00005f50 00000000! 
    1727 00005f70     0d5f          calla   calc_line_x
         00005f80 00000000! 
    1728 00005fa0                   PULL    a6
    1729 00005fb0                   TEST    a0
    1730 00005fc0     ca07          jrz     vvlacheck_right_fence
    1731 00005fd0     b4c1          move    *a6(OBJ_XPOSINT),a1
         00005fe0     0110  
    1732 00005ff0     4420          sub     a1,a0
    1733 00006000     c403          jrlt    vvlacheck_right_fence
    1734                    
    1735                            ;less than a nonzero left matedge val.  check against it.
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   40

    1736 00006010     4828          cmp     a1,a8
    1737 00006020     c75c          jrgt    vvlano_slide
    1738 00006030     c04c          jruc    vvlaslide
    1739                    
    1740 00006040           vvlacheck_right_fence
    1741 00006040                   PUSH    a6,a13
    1742 00006060     4ccd          move    a6,a13
    1743 00006070     09e6          movi    vln_right_fence,a6
         00006080 00000000! 
    1744 000060a0     0d5f          calla   calc_line_x
         000060b0 00000000! 
    1745 000060d0                   PULL    a6,a13
    1746 000060f0     b4c1          move    *a6(OBJ_XPOSINT),a1
         00006100     0110  
    1747 00006110     4420          sub     a1,a0
    1748 00006120     0380          abs     a0
    1749 00006130     4900          cmp     a8,a0
    1750 00006140     c74a          jrgt    vvlano_slide
    1751 00006150     c03a          jruc    vvlaslide
    1752                    
    1753 00006160           vvlahit_from_right
    1754 00006160     b5a0          move    *a13(INRING),a0
         00006170     0560  
    1755 00006180     cb13          jrnz    vvlaoutside2
    1756                    
    1757 00006190                   PUSH    a6,a13
    1758 000061b0     4ccd          move    a6,a13
    1759 000061c0     09e6          movi    vln_left_rope,a6
         000061d0 00000000! 
    1760 000061f0     0d5f          calla   calc_line_x
         00006200 00000000! 
    1761 00006220                   PULL    a6,a13
    1762 00006240     b4c1          move    *a6(OBJ_XPOSINT),a1
         00006250     0110  
    1763 00006260     4420          sub     a1,a0
    1764 00006270     0380          abs     a0
    1765 00006280     4900          cmp     a8,a0
    1766 00006290     c735          jrgt    vvlano_slide
    1767                    
    1768 000062a0     03a9          neg     a9
    1769 000062b0     c024          jruc    vvlaslide
    1770 000062c0           vvlaoutside2
    1771                            ;hit from right outside ring.
    1772                            ; get right matedge first.  if it's zero, or greater than our
    1773                            ; x pos, check against left fence instead.
    1774 000062c0                   PUSH    a6
    1775 000062d0     09e6          movi    vln_right_matedge,a6
         000062e0 00000000! 
    1776 00006300     0d5f          calla   calc_line_x
         00006310 00000000! 
    1777 00006330                   PULL    a6
    1778 00006340                   TEST    a0
    1779 00006350     ca08          jrz     vvlacheck_left_fence
    1780 00006360     b4c1          move    *a6(OBJ_XPOSINT),a1
         00006370     0110  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   41

    1781 00006380     4401          sub     a0,a1
    1782 00006390     c404          jrlt    vvlacheck_left_fence
    1783                    
    1784                            ;greater than a nonzero right matedge val.  check against it.
    1785 000063a0     4828          cmp     a1,a8
    1786 000063b0     c623          jrle    vvlano_slide
    1787 000063c0     03a9          neg     a9
    1788 000063d0     c012          jruc    vvlaslide
    1789                    
    1790 000063e0           vvlacheck_left_fence
    1791 000063e0                   PUSH    a6,a13
    1792 00006400     4ccd          move    a6,a13
    1793 00006410     09e6          movi    vln_left_fence,a6
         00006420 00000000! 
    1794 00006440     0d5f          calla   calc_line_x
         00006450 00000000! 
    1795 00006470                   PULL    a6,a13
    1796 00006490     b4c1          move    *a6(OBJ_XPOSINT),a1
         000064a0     0110  
    1797 000064b0     4420          sub     a1,a0
    1798 000064c0     0380          abs     a0
    1799 000064d0     4900          cmp     a8,a0
    1800 000064e0     c710          jrgt    vvlano_slide
    1801 000064f0     03a9          neg     a9
    1802                    
    1803 00006500           vvlaslide
    1804 00006500     b32d          move    a9,*a13(OBJ_XVEL),L
         00006510     02d0  
    1805                    
    1806                    
    1807 00006520     09c0          movi    3000h,a0
         00006530     3000  
    1808 00006540     b00d          move    a0,*a13(OBJ_FRICTION)
         00006550     0350  
    1809                    
    1810 00006560     b5a0          move    *a13(ANIMODE),a0
         00006570     0660  
    1811 00006580     0ba0          ori     MODE_FRICTION,a0
         00006590 00000040  
    1812 000065b0     b00d          move    a0,*a13(ANIMODE)
         000065c0     0660  
    1813 000065d0     c000          jruc    _next_command
         000065e0     f9d2  
    1814                    
    1815 000065f0           vvlano_slide
    1816 000065f0     b2ea          move    a7,*a10(OANIPC),L
         00006600     0030  
    1817 00006610     c000          jruc    _next_command
         00006620     f9ce  
    1818                    
    1819                    
    1820                    ********
    1821 00006630           _ani_clr_damage ;47
    1822                    
    1823 00006630     b28a          move    a4,*a10(OANIPC),L
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   42

         00006640     0030  
    1824                    ;       calla   clear_damage_log
    1825                    ;       jruc    _next_command
    1826 00006650     c000          jruc    _next_command1
         00006660     f9cc  
    1827                    
    1828                    ********
    1829 00006670           _ani_set_zvel           ;48
    1830                    
    1831                    ;args:  .long (ZVEL) .word (MODE)       ;if MODE=0  vel is absolute
    1832                                                            ;if MODE=1  vel is facing relative
    1833                                                            ;if MODE=2  vel is hit relative
    1834 00006670     9680          move    *a4+,a0,L
    1835 00006680     9481          move    *a4+,a1
    1836 00006690     ca0d          jrz     ltyqabs
    1837 000066a0     1421          dec     a1
    1838 000066b0     ca06          jrz     ltyqface
    1839                    ;hit relative
    1840 000066c0     b5ae          move    *a13(PLYR_HIT_SIDE),a14
         000066d0     0550  
    1841 000066e0     1fee          btst    MOVE_UP_BIT,a14
    1842 000066f0     cb07          jrnz    ltyqabs                 ;hit from above
    1843                    
    1844 00006700     03a0          neg     a0                      ;hit from below
    1845 00006710     c005          jruc    ltyqabs
    1846 00006720           ltyqface
    1847 00006720     b5ae          move    *a13(FACING_DIR),a14
         00006730     04c0  
    1848 00006740     1fce          btst    MOVE_DOWN_BIT,a14
    1849 00006750     cb01          jrnz    ltyqabs                 ;down
    1850 00006760     03a0          neg     a0                      ;up
    1851 00006770           ltyqabs
    1852 00006770     b20d          move    a0,*a13(OBJ_ZVEL),L
         00006780     0310  
    1853                    
    1854 00006790     b28a          move    a4,*a10(OANIPC),L
         000067a0     0030  
    1855                    ;       jruc    _next_command
    1856 000067b0     c000          jruc    _next_command1
         000067c0     f9b6  
    1857                    
    1858                    
    1859                    ********
    1860 000067d0           _ani_checkword  ;49
    1861                    ;sets a word in the procs pdata area
    1862                    ;       .word   ANI_SETWORD,OFFSET,VAL
    1863                    
    1864 000067d0     9480          move    *a4+,a0         ;OFFSET
    1865 000067e0     b28a          move    a4,*a10(OANIPC),L
         000067f0     0030  
    1866 00006800     41a0          add     a13,a0
    1867 00006810     8400          move    *a0,a0
    1868 00006820     ca09          jrz     yfuwclr
    1869                    
    1870                    ;hit.  set mode_status
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   43

    1871 00006830     b5a0          move    *a13(ANIMODE),a0
         00006840     0660  
    1872 00006850     0ba0          ori     MODE_STATUS2,a0
         00006860 00000200  
    1873 00006880     b00d          move    a0,*a13(ANIMODE)
         00006890     0660  
    1874                    
    1875 000068a0     c000          jruc    _next_command
         000068b0     f9a5  
    1876                    
    1877                    
    1878 000068c0           yfuwclr
    1879                    ;clear mode_status
    1880 000068c0     b5a0          move    *a13(ANIMODE),a0
         000068d0     0660  
    1881 000068e0     0b80          andni   MODE_STATUS2,a0
         000068f0 00000200  
    1882 00006910     b00d          move    a0,*a13(ANIMODE)
         00006920     0660  
    1883                    
    1884 00006930     c000          jruc    _next_command
         00006940     f99c  
    1885                    
    1886                    
    1887                    
    1888                    
    1889                    ********
    1890 00006950           _ani_face       ;50
    1891                    
    1892 00006950     9480          move    *a4+,a0
    1893 00006960     b28a          move    a4,*a10(OANIPC),L
         00006970     0030  
    1894                    
    1895 00006980     b5ae          move    *a13(OBJ_CONTROL),a14
         00006990     0780  
    1896 000069a0     1f6e          btst    B_FLIPH,a14
    1897 000069b0     ca03          jrz     atkono_flip
    1898 000069c0     0bc0          xori    MOVE_LEFT|MOVE_RIGHT,a0
         000069d0 0000000c  
    1899 000069f0           atkono_flip
    1900 000069f0     b00d          move    a0,*a13(FACING_DIR)
         00006a00     04c0  
    1901                    
    1902 00006a10     c000          jruc    _next_command
         00006a20     f98e  
    1903                    
    1904                    
    1905                    ********
    1906 00006a30           _ani_setword    ;51
    1907                    
    1908                    ;sets a word in the procs pdata area
    1909                    ;       .word   ANI_SETWORD,OFFSET,VAL
    1910                    
    1911 00006a30     9480          move    *a4+,a0         ;OFFSET
    1912 00006a40     41a0          add     a13,a0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   44

    1913 00006a50     9481          move    *a4+,a1         ;VAL
    1914 00006a60     8020          move    a1,*a0
    1915 00006a70     b28a          move    a4,*a10(OANIPC),L
         00006a80     0030  
    1916                    
    1917                    ;       jruc    _next_command
    1918 00006a90     c000          jruc    _next_command1
         00006aa0     f988  
    1919                    
    1920                    ********
    1921 00006ab0           _ani_getup      ;52
    1922                    
    1923                    ;args:  .word (GETUP_TIME)
    1924                    
    1925 00006ab0     9480          move    *a4+,a0
    1926                    
    1927 00006ac0     b5ae          move    *a13(PLYR_DIZZY),a14
         00006ad0     0600  
    1928 00006ae0     cb02          jrnz    nrilskip
    1929                    
    1930 00006af0     b00d          move    a0,*a13(GETUP_TIME)
         00006b00     0460  
    1931                    
    1932 00006b10           nrilskip
    1933 00006b10     b28a          move    a4,*a10(OANIPC),L
         00006b20     0030  
    1934                    ;       jruc    _next_command
    1935 00006b30     c000          jruc    _next_command1
         00006b40     f97e  
    1936                    
    1937                    ********
    1938 00006b50           _ani_getup_wait ;53
    1939                    
    1940 00006b50     b5a0          move    *a13(GETUP_TIME),a0
         00006b60     0460  
    1941 00006b70     cb04          jrnz    gtudno_done
    1942                    
    1943 00006b80     b28a          move    a4,*a10(OANIPC),L
         00006b90     0030  
    1944                    ;       jruc    _next_command
    1945 00006ba0     c000          jruc    _next_command1
         00006bb0     f977  
    1946                    
    1947 00006bc0           gtudno_done
    1948 00006bc0     1820          movk    1,a0
    1949 00006bd0     b00a          move    a0,*a10(OANICNT)        ;# ticks to hold cur frame
         00006be0     0050  
    1950 00006bf0     0960          rets
    1951                    
    1952                    ********
    1953 00006c00           _ani_clr_stars  ;54
    1954                    
    1955 00006c00     5600          clr     a0
    1956 00006c10     b00d          move    a0,*a13(STARS_FLAG)
         00006c20     07f0  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   45

    1957 00006c30     b28a          move    a4,*a10(OANIPC),L
         00006c40     0030  
    1958                    ;       jruc    _next_command
    1959 00006c50     c000          jruc    _next_command1
         00006c60     f96c  
    1960                    
    1961                    ********
    1962 00006c70           _ani_shakeall   ;55
    1963                    
    1964 00006c70     09c1          movi    ROPE_BOUNCEUD,a1
         00006c80     0000  
    1965 00006c90     9482          move    *a4+,a2,W
    1966 00006ca0     b28a          move    a4,*a10(OANIPC),L
         00006cb0     0030  
    1967                    
    1968                            ;blow it off if we're outside
    1969 00006cc0     b5ae          move    *a13(INRING),a14
         00006cd0     0560  
    1970 00006ce0     cb00          jrnz    _next_command
         00006cf0     f961  
    1971                    
    1972 00006d00     05ae          move    @reduce_bog,a14
         00006d10 00000000! 
    1973 00006d30     cb00          jrnz    _next_command
         00006d40     f95c  
    1974                    
    1975                            ;force a2 into range, just to be safe...
    1976 00006d50     0b82          andi    03h,a2
         00006d60 fffffffc  
    1977                    
    1978 00006d80     09c0          movi    ROPE_BACK,a0
         00006d90     0001  
    1979 00006da0     0d5f          calla   rope_command
         00006db0 00000000! 
    1980 00006dd0     09c0          movi    ROPE_LEFT,a0
         00006de0     0002  
    1981 00006df0     0d5f          calla   rope_command
         00006e00 00000000! 
    1982 00006e20     09c0          movi    ROPE_RIGHT,a0
         00006e30     0003  
    1983 00006e40     0d5f          calla   rope_command
         00006e50 00000000! 
    1984 00006e70     09c0          movi    ROPE_FRONT,a0
         00006e80     0000  
    1985 00006e90     0d5f          calla   rope_command
         00006ea0 00000000! 
    1986                    
    1987 00006ec0     09c0          movi    3ch,a0
         00006ed0     003c  
    1988 00006ee0     0d5f          calla   triple_sound
         00006ef0 00000000! 
    1989                    
    1990 00006f10     c000          jruc    _next_command
         00006f20     f93e  
    1991                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   46

    1992                    ********
    1993 00006f30           _ani_damage     ;56
    1994                    
    1995 00006f30     9480          move    *a4+,a0
    1996 00006f40     03a0          neg     a0                      ;positive a0 = health increase...
    1997 00006f50     b5a1          move    *a13(PLYRNUM),a1
         00006f60     0580  
    1998 00006f70     0d5f          calla   adjust_health
         00006f80 00000000! 
    1999                    
    2000 00006fa0     b28a          move    a4,*a10(OANIPC),L
         00006fb0     0030  
    2001                    ;       jruc    _next_command
    2002 00006fc0     c000          jruc    _next_command1
         00006fd0     f935  
    2003                    
    2004                    ********
    2005 00006fe0           _ani_start_dizzy ;57
    2006                    
    2007                    ;       clr     a0
    2008                    ;       move    a0,*a13(PLYR_DIZZY)
    2009 00006fe0                   PUSH    a10
    2010 00006ff0     948a          move    *a4+,a10                        ;Where do stars go?
    2011 00007000     0d5f          calla   create_dizzy_proc
         00007010 00000000! 
    2012 00007030                   PULL    a10
    2013                    
    2014 00007040     b28a          move    a4,*a10(OANIPC),L
         00007050     0030  
    2015                    ;       jruc    _next_command
    2016 00007060     c000          jruc    _next_command1
         00007070     f92b  
    2017                    
    2018                    ********
    2019 00007080           _ani_clr_status ;58
    2020                    
    2021 00007080     b5a1          move    *a13(ANIMODE),a1
         00007090     0660  
    2022 000070a0     0b81          andni   MODE_STATUS2,a1
         000070b0 00000200  
    2023 000070d0     b02d          move    a1,*a13(ANIMODE)
         000070e0     0660  
    2024                    
    2025 000070f0     b28a          move    a4,*a10(OANIPC),L
         00007100     0030  
    2026                    ;       jruc    _next_command
    2027 00007110     c000          jruc    _next_command1
         00007120     f920  
    2028                    
    2029                    ********
    2030 00007130           _ani_set_target ;59
    2031                    
    2032 00007130     9480          move    *a4+,a0
    2033 00007140     b28a          move    a4,*a10(OANIPC),L
         00007150     0030  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   47

    2034 00007160     0d5f          calla   set_target_offsets
         00007170 00000000! 
    2035 00007190     c000          jruc    _next_command
         000071a0     f916  
    2036                    
    2037                    ********
    2038 000071b0           _ani_max_x      ;60
    2039                    
    2040 000071b0     b28a          move    a4,*a10(OANIPC),L
         000071c0     0030  
    2041                    ;       jruc    _next_command
    2042 000071d0     c000          jruc    _next_command1
         000071e0     f914  
    2043                    
    2044                    ********
    2045 000071f0           _ani_max_z      ;61
    2046                    
    2047 000071f0     b28a          move    a4,*a10(OANIPC),L
         00007200     0030  
    2048                    ;       jruc    _next_command
    2049 00007210     c000          jruc    _next_command1
         00007220     f910  
    2050                    
    2051                    ********
    2052 00007230           _ani_max_y_vel  ;62
    2053                    
    2054 00007230     b28a          move    a4,*a10(OANIPC),L
         00007240     0030  
    2055                    ;       jruc    _next_command
    2056 00007250     c000          jruc    _next_command1
         00007260     f90c  
    2057                    
    2058                    ********
    2059 00007270           _ani_superslave ;63
    2060                    
    2061                    ;       long    pointer to slave table
    2062                    ;       word    index into table
    2063                    
    2064 00007270     9685          move    *a4+,a5,L               ;* table
    2065 00007280     9486          move    *a4+,a6                 ;index to frame & offsets
    2066 00007290     b28a          move    a4,*a10(OANIPC),L
         000072a0     0030  
    2067                    
    2068 000072b0     b7ab          move    *a13(ATTACH_PROC),a11,L
         000072c0     03e0  
    2069 000072d0     b760          move    *a11(ATTACH_PROC),a0,L
         000072e0     03e0  
    2070 000072f0     49a0          cmp     a13,a0
    2071 00007300     cb27          jrne    wwuidone
    2072                    
    2073 00007310     b560          move    *a11(WRESTLERNUM),a0
         00007320     0590  
    2074 00007330                   X32     a0
    2075 00007340     40a0          add     a5,a0
    2076 00007350     8605          move    *a0,a5,L
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   48

    2077                     .if DEBUG
    2078                            move    *a5,a0,L                ;table defined?
    2079                            jrnz    wwuiok1
    2080                            LOCKUP
    2081                    ;       no slave table defined!
    2082                    wwuiok1
    2083                     .endif
    2084                    
    2085 00007360     09c1          movi    80,a1   ;LWWW
         00007370     0050  
    2086 00007380     5ec1          mpyu    a6,a1
    2087                    
    2088 00007390     4025          add     a1,a5
    2089 000073a0     96a0          move    *a5+,a0,L               ;* * image
    2090 000073b0     8600          move    *a0,a0,L                ;* image
    2091                     .if DEBUG
    2092                            jrnz    wwuiok
    2093                            LOCKUP
    2094                    ;       image not loaded! (null pointer)
    2095                    wwuiok
    2096                     .endif
    2097 000073c0     b20b          move    a0,*a11(CUR_FRAME),L    ;primary frame
         000073d0     06c0  
    2098                    
    2099 000073e0     94a0          move    *a5+,a0                 ;xoff
    2100 000073f0     b00d          move    a0,*a13(ATTACH_XOFF)
         00007400     03b0  
    2101 00007410     94a0          move    *a5+,a0
    2102 00007420     b00d          move    a0,*a13(ATTACH_YOFF)
         00007430     03c0  
    2103                    
    2104 00007440     b563          move    *a11(OBJ_CONTROL),a3
         00007450     0780  
    2105                    
    2106 00007460     b5ae          move    *a13(FACING_DIR),a14
         00007470     04c0  
    2107 00007480     1f8e          btst    PLAYER_RIGHT_BIT,a14
    2108 00007490     cb04          jrnz    wwuiright
    2109                    ;left
    2110 000074a0     0b83          andni   M_FLIPH,a3              ;clear flip bit
         000074b0 00000010  
    2111 000074d0     c003          jruc    wwuicnt
    2112 000074e0           wwuiright
    2113 000074e0     0ba3          ori     M_FLIPH,a3              ;set flip
         000074f0 00000010  
    2114 00007510           wwuicnt
    2115 00007510     94a0          move    *a5+,a0                 ;flip flag
    2116 00007520     ca03          jrz     wwuiskip
    2117                    
    2118 00007530     0bc3          xori    M_FLIPH,a3              ;invert
         00007540 00000010  
    2119 00007560           wwuiskip
    2120 00007560     b06b          move    a3,*a11(OBJ_CONTROL)
         00007570     0780  
    2121                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   49

    2122 00007580           wwuidone
    2123 00007580     c000          jruc    _next_command
         00007590     f8d7  
    2124                    
    2125                    ********
    2126                    *
    2127                    ;same as old slaveanim except this executes
    2128                    ;the animation up to the 1st sleep
    2129                    
    2130 000075a0           _ani_slaveanim  ;64
    2131                    
    2132 000075a0     9685          move    *a4+,a5,L               ;* table
    2133 000075b0     b28a          move    a4,*a10(OANIPC),L
         000075c0     0030  
    2134                    
    2135 000075d0     b7a2          move    *a13(ATTACH_PROC),a2,L
         000075e0     03e0  
    2136 000075f0     b640          move    *a2(ATTACH_PROC),a0,L
         00007600     03e0  
    2137 00007610     49a0          cmp     a13,a0
    2138 00007620     cb0f          jrne    lhvjdone
    2139                    
    2140 00007630     b440          move    *a2(WRESTLERNUM),a0
         00007640     0590  
    2141 00007650                   X32     a0
    2142 00007660     4005          add     a0,a5
    2143 00007670     86a0          move    *a5,a0,L
    2144 00007680     cb02          jrnz    lhvjok1
    2145                     .if DEBUG
    2146                            LOCKUP
    2147                    ;       no slave anim table defined!
    2148                     .endif
    2149 00007690     c000          jruc    _next_command
         000076a0     f8c6  
    2150 000076b0           lhvjok1
    2151                    ;a0 = * animation script
    2152                    ;a2 = * wrestler process
    2153                    
    2154 000076b0                   PUSH    a10,a13
    2155                    
    2156 000076d0     4c4d          move    a2,a13
    2157 000076e0     0d3f          callr   change_anim1a   ;execute animation
         000076f0     07a5  
    2158                    
    2159 00007700                   PULL    a10,a13
    2160                    
    2161 00007720           lhvjdone
    2162 00007720     c000          jruc    _next_command
         00007730     f8bd  
    2163                    
    2164                    ********
    2165 00007740           _ani_rawsound   ;65
    2166                    
    2167 00007740     9483          move    *a4+,a3,W
    2168 00007750     0d5f          calla   SNDSND
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   50

         00007760 00000000! 
    2169 00007780     b28a          move    a4,*a10(OANIPC),L
         00007790     0030  
    2170                    ;       jruc    _next_command
    2171 000077a0     c000          jruc    _next_command1
         000077b0     f8b7  
    2172                    
    2173                    ********
    2174 000077c0           _ani_damageopp  ;66
    2175                            ;works on attached proc, or WHOIHIT if there isn't one
    2176                    
    2177                            .ref    any_hits,DAM_MULT,FIRSTATT_MESS
    2178                    
    2179 000077c0                   STRUCT  0
    2180 000077c0                   WORD    srjlFULL_DAMAGE
    2181 000077c0                   WORD    srjlREDUCED_DAMAGE
    2182 000077c0                   LABEL   srjlSIZE
    2183                    
    2184 000077c0     4c8e          move    a4,a14
    2185 000077d0     0b0e          addi    srjlSIZE,a14
         000077e0     0020  
    2186 000077f0     b3ca          move    a14,*a10(OANIPC),L
         00007800     0030  
    2187                    
    2188                            ;get victim process ptr
    2189 00007810     b7a2          move    *a13(ATTACH_PROC),a2,L
         00007820     03e0  
    2190 00007830     cb02          jrnz    srjlattach_found
    2191 00007840     b7a2          move    *a13(WHOIHIT),a2,L
         00007850     0500  
    2192 00007860           srjlattach_found
    2193                    
    2194                            ;get damage
    2195 00007860     b480          move    *a4(srjlFULL_DAMAGE),a0
         00007870     0000  
    2196 00007880     b44e          move    *a2(LAST_DAMAGE),a14
         00007890     0d50  
    2197 000078a0     ca09          jrz     srjldmset
    2198 000078b0     05a1          move    @PCNT,a1
         000078c0 00000000! 
    2199 000078e0     45c1          sub     a14,a1
    2200 000078f0     0b41          cmpi    30,a1
         00007900     ffe1  
    2201 00007910     c702          jrgt    srjldmset
    2202 00007920     b480          move    *a4(srjlREDUCED_DAMAGE),a0
         00007930     0010  
    2203 00007940           srjldmset
    2204                    
    2205                            ;ooh, wait.  if the attacker has a NEXT_DAMAGE set, use that instead.
    2206 00007940     b5ae          move    *a13(NEXT_DAMAGE),a14
         00007950     0d60  
    2207 00007960     ca09          jrz     srjlnnd         ;aw, skip it.
    2208 00007970     b7ae          move    *a13(SPECIAL_DAMAGE_TIME),a14,L
         00007980     0d70  
    2209 00007990     07a1          move    @PCNT,a1,L
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   51

         000079a0 00000000! 
    2210 000079c0     49c1          cmp     a14,a1
    2211 000079d0     c702          jrgt    srjlnnd         ;too late.  blow it off.
    2212 000079e0     b5a0          move    *a13(NEXT_DAMAGE),a0
         000079f0     0d60  
    2213                    
    2214 00007a00     03a0  srjlnnd neg     a0
    2215                    
    2216                            ;If this is the first unblocked hit this round and it did at least
    2217                            ; 2 pixels of damage, give an award
    2218                    
    2219 00007a10                   PUSH    a0
    2220                    
    2221 00007a20     0b40          cmpi    -2,a0
         00007a30     0001  
    2222 00007a40     c741          jrgt    srjln1uh
    2223                    
    2224                    ;Taunt style high risk move - give 3x dmg
    2225 00007a50     b5a1          move    *a13(RISK),a1
         00007a60     0950  
    2226 00007a70     ca18          jrz     srjlno_mult
    2227                    
    2228 00007a80                   PUSH    a0,a8,a10
    2229 00007aa0     4da8          move    a13,a8
    2230 00007ab0     1e01          btst    15,a1
    2231 00007ac0     ca0d          jrz     srjlreg
    2232                    ;Taunt style high risk move - give 3x dmg
    2233 00007ad0     09ca          movi    -1,a10
         00007ae0     ffff  
    2234 00007af0     188e          movk    4,a14
    2235 00007b00     058e          move    a14,@DAM_MULT
         00007b10 00000000! 
    2236                            .ref    BONUS_MESS
    2237 00007b30                   CREATE0 BONUS_MESS
    2238 00007ba0           srjlreg
    2239 00007ba0     5621          clr     a1
    2240 00007bb0     b02d          move    a1,*a13(RISK)
         00007bc0     0950  
    2241 00007bd0                   PULL    a0,a8,a10
    2242 00007bf0     c022          jruc    srjlclear
    2243 00007c00           srjlno_mult
    2244                    
    2245                    
    2246 00007c00     05ae          move    @any_hits,a14
         00007c10 00000000! 
    2247 00007c30     cb22          jrnz    srjln1uh                        ;skip if there's already been one
    2248                    
    2249 00007c40     b44e          move    *a2(PLYRMODE),a14
         00007c50     05c0  
    2250 00007c60     0b4e          cmpi    MODE_BLOCK,a14
         00007c70     fff8  
    2251 00007c80     ca1d          jreq    srjln1uh                        ;skip if it was blocked
    2252                    
    2253 00007c90                   RND_AWARD a13,FIRST_HIT_AWD
    2254                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   52

    2255 00007d30                   PUSH    a10
    2256 00007d40     4daa          move    a13,a10
    2257 00007d50                   CREATE  MESSAGE_PID,FIRSTATT_MESS
    2258 00007dd0                   PULL    a10
    2259                    
    2260 00007de0     184e          movk    2,a14
    2261 00007df0     058e          move    a14,@DAM_MULT
         00007e00 00000000! 
    2262 00007e20           srjlclear
    2263 00007e20     182e          movk    1,a14
    2264 00007e30     058e          move    a14,@any_hits
         00007e40 00000000! 
    2265 00007e60           srjln1uh        PULL    a0
    2266                    
    2267                    
    2268                    ;MODS REQUIRED TO MAKE ADJUST_HEALTH WORK IN COMBO MODE
    2269 00007e70     b441          move    *a2(PLYRNUM),a1
         00007e80     0580  
    2270 00007e90                   PUSH    A10,A13
    2271                    
    2272 00007eb0     4daa          MOVE    A13,A10
    2273 00007ec0     0d5f          calla   adjust_health
         00007ed0 00000000! 
    2274                    
    2275 00007ef0                   PULL    A10,A13
    2276                    
    2277 00007f10     c000  srjldone        jruc    _next_command
         00007f20     f83e  
    2278                    
    2279                    ********
    2280 00007f30           _ani_rndper     ;67
    2281                    
    2282                            ;word   probability
    2283                            ;long   jump here if hit
    2284                    
    2285 00007f30     9480          move    *a4+,a0,W
    2286 00007f40     9682          move    *a4+,a2,L
    2287 00007f50     0d5f          calla   RNDPER
         00007f60 00000000! 
    2288 00007f80     c204          jrls    sgatdone
    2289                    
    2290                            ;ANI_GOTO a2
    2291 00007f90     b24a          move    a2,*a10(OANIPC),L
         00007fa0     0030  
    2292 00007fb0     c000          jruc    _next_command
         00007fc0     f834  
    2293                    
    2294 00007fd0           sgatdone
    2295 00007fd0     b28a          move    a4,*a10(OANIPC),L
         00007fe0     0030  
    2296                    ;       jruc    _next_command
    2297 00007ff0     c000          jruc    _next_command1
         00008000     f832  
    2298                    
    2299                    ********
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   53

    2300 00008010           _ani_waithitopp ;68
    2301                    
    2302                            ;NOTE:  This is just like an ordinary "WL ticks,frame" type command
    2303                            ;       except that the ANICNT is zeroed if we hit the opponent.
    2304                    
    2305                            ;word   max ticks to wait
    2306                            ;long   frame to hold
    2307                    
    2308 00008010     b5ae          move    *a13(ANIMODE),a14
         00008020     0660  
    2309 00008030     0bae          ori     MODE_WAITHITOPP,a14
         00008040 00004000  
    2310 00008060     b1cd          move    a14,*a13(ANIMODE)
         00008070     0660  
    2311                    
    2312 00008080     b28a          move    a4,*a10(OANIPC),L
         00008090     0030  
    2313                    ;       jruc    _next_command
    2314 000080a0     c000          jruc    _next_command1
         000080b0     f827  
    2315                    
    2316                    
    2317                    ********
    2318 000080c0           _ani_attchimage ;69
    2319                    
    2320                    ;long *image,word zoff
    2321                    
    2322                            ;update OANIPC
    2323 000080c0     4c8e          move    a4,a14
    2324 000080d0     0b0e          addi    30h,a14
         000080e0     0030  
    2325 000080f0     b3ca          move    a14,*a10(OANIPC),L
         00008100     0030  
    2326                    
    2327 00008110     57ce          clr     a14
    2328                    ;       move    a14,*a13(ATTACHIMG_XOFF)
    2329                    ;       move    a14,*a13(ATTACHIMG_YOFF)
    2330                    
    2331 00008120     b3cd          move    a14,*a13(ATTACHIMG_XOFF),L
         00008130     0400  
    2332                    
    2333 00008140     9680          move    *a4+,a0,L
    2334 00008150     ca0d          jrz     uixpoffimg
    2335                    
    2336 00008160     9481          move    *a4+,a1
    2337 00008170     b02d          move    a1,*a13(ATTACHIMG_ZOFF)
         00008180     0420  
    2338 00008190           uixpoff
    2339 00008190           attach_cont69   ;entry from attachimage2 uixp124
    2340 00008190     bbad          move    *a13(ATTIMG_CUR_FRAME),*a13(ATTIMG_LAST_FRAME),L
         000081a0     08e0  
         000081b0     0900  
    2341                    
    2342 000081c0     8600          move    *a0,a0,L
    2343                     .if DEBUG
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   54

    2344                            jrnz    uixpok
    2345                            LOCKUP
    2346                    ;NULL IMAGE POINTER!!!
    2347                    uixpok
    2348                     .endif
    2349                    ;uixpoffimg
    2350 000081d0     b20d          move    a0,*a13(ATTIMG_CUR_FRAME),L
         000081e0     08e0  
    2351 000081f0     b28a          move    a4,*a10(OANIPC),L
         00008200     0030  
    2352                    ;       jruc    _next_command
    2353 00008210     c000          jruc    _next_command1
         00008220     f810  
    2354                    
    2355 00008230           uixpoffimg
    2356 00008230     b20d          move    a0,*a13(ATTIMG_CUR_FRAME),L
         00008240     08e0  
    2357 00008250     1204          addk    16,a4
    2358 00008260     b28a          move    a4,*a10(OANIPC),L
         00008270     0030  
    2359                    ;       jruc    _next_command
    2360 00008280     c000          jruc    _next_command1
         00008290     f809  
    2361                    
    2362                     .if 0
    2363                    
    2364                            move    *a4+,a0,L
    2365                            jrz     uixpoff
    2366                            move    *a4+,a1
    2367                            move    a1,*a13(ATTIMG_ZOFF)
    2368                    
    2369                            move    *a0,a0,L
    2370                     .if DEBUG
    2371                            jrnz    uixpok
    2372                            LOCKUP
    2373                    ;NULL IMAGE POINTER!!!
    2374                    uixpok
    2375                     .endif
    2376                    
    2377                            move    a0,*a13(ATTIMG_CUR_FRAME),L
    2378                            move    *a13(ATTIMG_IMG),a8,L
    2379                    
    2380                            move    a0,*a8(OIMG),L
    2381                            move    *a0(0),*a8(OSIZE),L
    2382                            move    *a0(ISAG),*a8(OSAG),L
    2383                    
    2384                            move    *a0(ICMAP),a0,L
    2385                            calla   pal_find
    2386                            jrnz    uixpAOK
    2387                    
    2388                            LOCKUP  ;can't find palette
    2389                    
    2390                    uixpAOK
    2391                            move    a0,*a8(OPAL)
    2392                            move    *a8(OIMG),a0,L
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   55

    2393                            movb    *a0(ICTRL+7),*a8(OCTRL+7)       ;Write 5 z comp bits + bits pp
    2394                    
    2395                            move    *a13(OBJ_CONTROL),a7    ;flip bits & pixel ops
    2396                            andi    0111111b,a7
    2397                    ;       setf    6,0,0
    2398                    ;       move    a7,*a8(OCTRL)                   ;Write 6 low bits
    2399                    ;       setf    16,1,0
    2400                            move    *a8(OCTRL),a14
    2401                            srl     6,a14
    2402                            sll     6,a14
    2403                            or      a7,a14
    2404                            move    a14,*a8(OCTRL)
    2405                    
    2406                            move    *a13(OBJ_CONST),*a8(OCONST)
    2407                    
    2408                            jruc    _next_command
    2409                    
    2410                    uixpoff
    2411                            move    a0,*a13(ATTIMG_CUR_FRAME),L
    2412                            jruc    _next_command
    2413                    
    2414                     .endif
    2415                    
    2416                    ********
    2417 000082a0           _ani_ifoppmode          ;70
    2418                    
    2419                            ;If opponent PLYRMODE is MODE, jump to BRANCH
    2420                            ;If the high bit of MODE is set, jump on PLYRMODE != ~MODE
    2421                    
    2422 000082a0                   STRUCT  0
    2423 000082a0                   WORD    MODE
    2424 000082a0                   LONG    BRANCH
    2425 000082a0                   LABEL   SIZE
    2426                    
    2427 000082a0     4c8e          move    a4,a14
    2428 000082b0     0b0e          addi    SIZE,a14
         000082c0     0030  
    2429 000082d0     b3ca          move    a14,*a10(OANIPC),L
         000082e0     0030  
    2430                    
    2431 000082f0     b5ab          move    *a13(CLOSEST_NUM),a11
         00008300     03a0  
    2432 00008310                   X32     a11
    2433 00008320     0b2b          addi    process_ptrs,a11
         00008330 00000000! 
    2434 00008350     876b          move    *a11,a11,L
    2435 00008360     b56e          move    *a11(PLYRMODE),a14
         00008370     05c0  
    2436                    
    2437 00008380     b480          move    *a4(MODE),a0
         00008390     0000  
    2438 000083a0     ce03          jrn     not
    2439 000083b0     480e          cmp     a0,a14
    2440 000083c0     cb08          jrne    done
    2441 000083d0     c003          jruc    branch
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   56

    2442                    
    2443 000083e0           not
    2444 000083e0     03e0          not     a0
    2445 000083f0     480e          cmp     a0,a14
    2446 00008400     ca04          jreq    done
    2447                    
    2448 00008410           branch
    2449 00008410     b680          move    *a4(BRANCH),a0,L
         00008420     0010  
    2450 00008430     b20a          move    a0,*a10(OANIPC),L
         00008440     0030  
    2451                    
    2452 00008450           done
    2453 00008450     c000          jruc    _next_command
         00008460     f7ea  
    2454                    
    2455                    ********
    2456 00008470           _ani_ifbuttons  ;71
    2457                    
    2458                    ;buttons (WORD), ani address (LONG)
    2459                    
    2460 00008470     b5a0          move    *a13(BUT_VAL_CUR),a0
         00008480     0b90  
    2461                    
    2462                    
    2463 00008490     9481          move    *a4+,a1                 ;button vals
    2464 000084a0     9682          move    *a4+,a2,L               ;ani address
    2465                    
    2466                    ;;Drones shouldn't run accidentally
    2467                    ;       move    *a13(PLYR_TYPE),a14
    2468                    ;       cmpi    PTYPE_DRONE,a14
    2469                    ;       jrz     epmqfail
    2470                    
    2471 000084b0     5020          and     a1,a0
    2472 000084c0     4820          cmp     a1,a0
    2473 000084d0     cb01          jrne    epmqfail
    2474                    
    2475 000084e0     4c44          move    a2,a4   ;jump to new ani address
    2476 000084f0           epmqfail
    2477 000084f0     b28a          move    a4,*a10(OANIPC),L
         00008500     0030  
    2478                    ;       jruc    _next_command
    2479 00008510     c000          jruc    _next_command1
         00008520     f7e0  
    2480                    
    2481                    
    2482                    ********
    2483 00008530           _ani_ifnohitblock       ;72
    2484                    
    2485                    ;ani address (LONG)
    2486                    
    2487 00008530     9680          move    *a4+,a0,L               ;this is a conditional goto
    2488 00008540     b5ae          move    *a13(HITBLOCKER),a14
         00008550     0540  
    2489 00008560     cb01          jrnz    skip?
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   57

    2490 00008570     4c04          move    a0,a4
    2491 00008580           skip?
    2492 00008580     b28a          move    a4,*a10(OANIPC),L
         00008590     0030  
    2493                    ;       jruc    _next_command
    2494 000085a0     c000          jruc    _next_command1
         000085b0     f7d7  
    2495                    
    2496                    ********
    2497 000085c0           _ani_end        ;73
    2498 000085c0     b540          move    *a10(OANIMODE),a0
         000085d0     0000  
    2499 000085e0     0ba0          ori     MODE_END,a0
         000085f0 00000001  
    2500 00008610     b00a          move    a0,*a10(OANIMODE)
         00008620     0000  
    2501 00008630     c000          jruc    _exit
         00008640     f7e2  
    2502                    
    2503                    ********
    2504 00008650           _ani_ifrope     ;74
    2505 00008650     576b          clr     a11
    2506 00008660     c001          jruc    _ani_ifrope_common
    2507                    
    2508                    ********
    2509 00008670           _ani_ifnotrope  ;75
    2510                    
    2511              0000  adugMODE        equ     0       ;UHW
    2512              0010  adugDIST        equ     10h     ;UHW
    2513              0020  adugADDR        equ     20h     ;UHL
    2514              0040  adugSIZE        equ     40h
    2515                    
    2516                            ;word   distance
    2517                            ;long   jump here if close enough
    2518                            ;word   mode    RC_FRONT    - check rope in front of caller
    2519                            ;               RC_BACK     - check rope behind caller
    2520                            ;               RC_EITHER   - check nearest rope
    2521                            ;       or'ed with:
    2522                            ;               RC_PLAYER   - check for caller
    2523                            ;               RC_OPPONENT - check for caller's closest opponent
    2524                    
    2525 00008670     182b          movk    1,a11
    2526                    
    2527 00008680           _ani_ifrope_common
    2528                            ;prepare OANIPC before doing anything else
    2529 00008680     4c8e          move    a4,a14
    2530 00008690     0b0e          addi    adugSIZE,a14
         000086a0     0040  
    2531 000086b0     b3ca          move    a14,*a10(OANIPC),L
         000086c0     0030  
    2532                    
    2533 000086d0     b5a0          move    *a13(INRING),a0
         000086e0     0560  
    2534 000086f0     cb38          jrnz    adugdefinitly_too_far
    2535                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   58

    2536                            ;;;a9 is process ptr of person for whom we're checking
    2537 00008700     4da9          move    a13,a9
    2538 00008710     b480          move    *a4(adugMODE),a0
         00008720     0000  
    2539 00008730     2b00          sra     8,a0                    ;mask off the low byte
    2540 00008740     ca07          jrz     adugplayer_set          ;RC_PLAYER == 0
    2541                    
    2542 00008750     b5a9          move    *a13(CLOSEST_NUM),a9
         00008760     03a0  
    2543 00008770                   X32     a9
    2544 00008780     0b29          addi    process_ptrs,a9
         00008790 00000000! 
    2545 000087b0     8729          move    *a9,a9,L
    2546 000087c0           adugplayer_set
    2547                    
    2548 000087c0     b48e          move    *a4(adugMODE),a14,W     ;mode
         000087d0     0000  
    2549 000087e0     0b8e          andi    00FFh,a14               ;mask off the high byte
         000087f0 ffffff00  
    2550 00008810     ca08          jrz     adugcheck_front         ;RC_FRONT == 0
    2551 00008820     142e          dec     a14
    2552 00008830     ca0b          jrz     adugcheck_back
    2553                    
    2554                            ;;;RC_(FRONT|BACK|EITHER) cases
    2555 00008840           adugcheck_closest
    2556 00008840     b521          move    *a9(OBJ_XPOSINT),a1
         00008850     0110  
    2557 00008860     0b41          cmpi    RING_X_CENTER,a1
         00008870     fbcd  
    2558 00008880     c70f          jrgt    adugcheck_right_rope
    2559 00008890     c00a          jruc    adugcheck_left_rope
    2560                    
    2561 000088a0           adugcheck_front
    2562 000088a0     b520          move    *a9(FACING_DIR),a0
         000088b0     04c0  
    2563 000088c0     1f80          btst    MOVE_RIGHT_BIT,a0
    2564 000088d0     cb0a          jrnz    adugcheck_right_rope
    2565 000088e0     c005          jruc    adugcheck_left_rope
    2566                    
    2567 000088f0           adugcheck_back
    2568 000088f0     b520          move    *a9(FACING_DIR),a0
         00008900     04c0  
    2569 00008910     1fa0          btst    MOVE_LEFT_BIT,a0
    2570 00008920     cb05          jrnz    adugcheck_right_rope
    2571 00008930     0300          jruc    adugcheck_left_rope
    2572                    
    2573                    
    2574                            ;now do the actual check
    2575 00008940           adugcheck_left_rope
    2576 00008940     09e6          movi    vln_left_rope,a6
         00008950 00000000! 
    2577 00008970     c003          jruc    adugcheck_xxx_rope
    2578 00008980           adugcheck_right_rope
    2579 00008980     09e6          movi    vln_right_rope,a6
         00008990 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   59

    2580 000089b0           adugcheck_xxx_rope
    2581 000089b0     0d5f          calla   calc_line_x
         000089c0 00000000! 
    2582 000089e0     b521          move    *a9(OBJ_XPOSINT),a1
         000089f0     0110  
    2583 00008a00     4401          sub     a0,a1
    2584 00008a10     0381          abs     a1
    2585 00008a20     b480          move    *a4(adugDIST),a0
         00008a30     0010  
    2586 00008a40     4801          cmp     a0,a1
    2587 00008a50     c604          jrle    adugclose_enough
    2588                    
    2589                    
    2590                            ;a11 is one if we are an IFNOTROPE command, so swap outcomes.
    2591 00008a60           adugtoo_far
    2592 00008a60     142b          dec     a11
    2593 00008a70     ca02          jrz     adugclose_enough
    2594 00008a80           adugdefinitly_too_far
    2595 00008a80     c000          jruc    _next_command
         00008a90     f787  
    2596                    
    2597 00008aa0           adugclose_enough
    2598 00008aa0     142b          dec     a11
    2599 00008ab0     cafa          jrz     adugtoo_far
    2600                    
    2601 00008ac0     b680          move    *a4(adugADDR),a0,L
         00008ad0     0020  
    2602 00008ae0     b20a          move    a0,*a10(OANIPC),L
         00008af0     0030  
    2603 00008b00     c000          jruc    _next_command
         00008b10     f77f  
    2604                    
    2605                    
    2606                    ********
    2607 00008b20           _ani_opp_getup  ;76
    2608                    
    2609                    ;if TIME is negative, then clear DELAY_METER
    2610                    
    2611              0000  vqdbTIME        equ     0       ;UHW
    2612              0010  vqdbSIZE        equ     10h
    2613                    
    2614 00008b20     4c8e          move    a4,a14
    2615 00008b30     0b0e          addi    vqdbSIZE,a14
         00008b40     0010  
    2616 00008b50     b3ca          move    a14,*a10(OANIPC),L
         00008b60     0030  
    2617                    
    2618 00008b70     b7a1          move    *a13(ATTACH_PROC),a1,L
         00008b80     03e0  
    2619 00008b90     cb03          jrnz    vqdbvictim_set
    2620                    
    2621                            ;not attached.  check WHOIHIT
    2622 00008ba0     b7a1          move    *a13(WHOIHIT),a1,L
         00008bb0     0500  
    2623 00008bc0     ca0c          jrz     vqdbdone
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   60

    2624                    
    2625 00008bd0           vqdbvictim_set
    2626                    
    2627 00008bd0     b480          move    *a4(vqdbTIME),a0
         00008be0     0000  
    2628 00008bf0     cf04          jrnn    vqdbnorm
    2629                    
    2630 00008c00     57ce          clr     a14
    2631 00008c10     b1c1          move    a14,*a1(DELAY_METER)    ;always do delay
         00008c20     0ad0  
    2632                    
    2633 00008c30     0380          abs     a0                      ;make GETUP_TIME positive
    2634                    
    2635 00008c40           vqdbnorm
    2636 00008c40     b42e          move    *a1(PLYR_DIZZY),a14
         00008c50     0600  
    2637 00008c60     cb02          jrnz    vqdbdone
    2638                    
    2639 00008c70     b001          move    a0,*a1(GETUP_TIME)
         00008c80     0460  
    2640 00008c90           vqdbdone
    2641 00008c90     c000          jruc    _next_command
         00008ca0     f766  
    2642                    
    2643                    ********
    2644 00008cb0           _ani_shakecorner        ;77
    2645                    
    2646 00008cb0     1822          movk    1,a2
    2647 00008cc0     09c1          movi    ROPE_BOUNCEUD,a1
         00008cd0     0000  
    2648 00008ce0     09c0          movi    ROPE_BACK,a0
         00008cf0     0001  
    2649 00008d00     0d5f          calla   rope_command
         00008d10 00000000! 
    2650                    
    2651 00008d30     09c0          movi    ROPE_LEFT,a0
         00008d40     0002  
    2652 00008d50     b5ae          move    *a13(OBJ_XPOSINT),a14
         00008d60     0110  
    2653 00008d70     0b4e          cmpi    RING_X_CENTER,a14
         00008d80     fbcd  
    2654 00008d90     c602          jrle    mbvydir_set
    2655 00008da0     09c0          movi    ROPE_RIGHT,a0
         00008db0     0003  
    2656 00008dc0           mbvydir_set
    2657                    
    2658 00008dc0     09c1          movi    ROPE_BOUNCEUD,a1
         00008dd0     0000  
    2659 00008de0     0d5f          calla   rope_command
         00008df0 00000000! 
    2660                    
    2661 00008e10     b28a          move    a4,*a10(OANIPC),L
         00008e20     0030  
    2662                    ;       jruc    _next_command
    2663 00008e30     c000          jruc    _next_command1
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   61

         00008e40     f74e  
    2664                    
    2665                    ********
    2666 00008e50           _ani_singlestep         ;78
    2667                    
    2668                            
    2669 00008e50     0d5f          calla   get_all_buttons_down
         00008e60 00000000! 
    2670 00008e80     4c00          move    a0,a0
    2671 00008e90     cb04          jrnz    dyfwdone
    2672 00008ea0     b02a          move    a1,*a10(OANICNT)
         00008eb0     0050  
    2673 00008ec0     c000          jruc    _exit
         00008ed0     f759  
    2674                    
    2675 00008ee0           dyfwdone
    2676 00008ee0     b28a          move    a4,*a10(OANIPC),L
         00008ef0     0030  
    2677                    ;       jruc    _next_command
    2678 00008f00     c000          jruc    _next_command1
         00008f10     f741  
    2679                    
    2680                    ********
    2681 00008f20           _ani_superslave2        ;79
    2682                    
    2683                    ;       # ticks
    2684                    ;       attacker frame
    2685                    ;       table address
    2686                    ;       table index
    2687                    
    2688 00008f20                   STRUCT  0               ;ANI_SUPERSLAVE data
    2689 00008f20                   WORD    cmkmTICKS
    2690 00008f20                   LONG    cmkmATTACKER
    2691 00008f20                   LONG    cmkmTABLE
    2692 00008f20                   WORD    cmkmINDEX
    2693 00008f20                   LABEL   cmkmSIZE
    2694                    
    2695 00008f20                   STRUCT  0               ;table data
    2696 00008f20                   LONG    cmkmFRAME
    2697 00008f20                   WORD    cmkmXOFF
    2698 00008f20                   WORD    cmkmYOFF
    2699 00008f20                   WORD    cmkmFLIP
    2700 00008f20                   LABEL   cmkmTABLE_SIZE
    2701                    
    2702                            ;set OANIPC
    2703 00008f20     4c8e          move    a4,a14
    2704 00008f30     0b0e          addi    cmkmSIZE,a14
         00008f40     0060  
    2705 00008f50     b3ca          move    a14,*a10(OANIPC),L
         00008f60     0030  
    2706                    
    2707                            ;verify the links
    2708 00008f70     b7ab          move    *a13(ATTACH_PROC),a11,L
         00008f80     03e0  
    2709 00008f90     b760          move    *a11(ATTACH_PROC),a0,L
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   62

         00008fa0     03e0  
    2710 00008fb0     49a0          cmp     a13,a0
    2711 00008fc0     cb78          jrne    cmkmdone
    2712                    
    2713 00008fd0     b480          move    *a4(cmkmTICKS),a0
         00008fe0     0000  
    2714 00008ff0     b5a1          move    *a13(ANI_SPEED),a1
         00009000     0650  
    2715 00009010     5e01          mpyu    a0,a1
    2716 00009020     2f01          srl     8,a1
    2717 00009030     b02a          move    a1,*a10(OANICNT)
         00009040     0050  
    2718 00009050     b680          move    *a4(cmkmATTACKER),a0,L
         00009060     0010  
    2719 00009070     8600          move    *a0,a0,L
    2720                    
    2721                            .if DEBUG
    2722                            jrnz    cmkmok0
    2723                            LOCKUP  ;image not loaded! (null pointer)
    2724                    cmkmok0
    2725                            .endif
    2726                            ;set the attacker frame
    2727 00009080     b20a          move    a0,*a10(OCUR_FRAME),L
         00009090     0060  
    2728                    
    2729                    
    2730                            ;get the slave table
    2731 000090a0     b560          move    *a11(WRESTLERNUM),a0
         000090b0     0590  
    2732 000090c0                   X32     a0
    2733 000090d0     b68e          move    *a4(cmkmTABLE),a14,L
         000090e0     0030  
    2734 000090f0     41c0          add     a14,a0
    2735 00009100     8605          move    *a0,a5,L
    2736                    
    2737                            .if DEBUG
    2738                            move    *a5,a0,L
    2739                            jrnz    cmkmok1
    2740                            LOCKUP  ;no slave table defined!
    2741                    cmkmok1
    2742                            .endif
    2743                    
    2744                            ;get the defender frame
    2745 00009110     b48e          move    *a4(cmkmINDEX),a14
         00009120     0050  
    2746 00009130     09c1          movi    cmkmTABLE_SIZE,a1
         00009140     0050  
    2747 00009150     5fc1          mpyu    a14,a1
    2748 00009160     4025          add     a1,a5
    2749 00009170     b6a0          move    *a5(cmkmFRAME),a0,L
         00009180     0000  
    2750 00009190     8600          move    *a0,a0,L
    2751                    
    2752                            .if DEBUG
    2753                            jrnz    cmkmok
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   63

    2754                            LOCKUP  ;image not loaded! (null pointer)
    2755                    cmkmok
    2756                            .endif
    2757                    
    2758                            ;set the defender frame
    2759 000091a0     b20b          move    a0,*a11(CUR_FRAME),L
         000091b0     06c0  
    2760                    
    2761                            ;compute attach offsets
    2762                            ; attach Y is raw(table)x + defender Xoff - attacker Xoff
    2763                    
    2764                            ;attacker anis in a8, defender in a9
    2765 000091c0     b7a0          move    *a13(CUR_FRAME),a0,L    ;attacker frame
         000091d0     06c0  
    2766 000091e0     0d5f          calla   get_mpart_offsets
         000091f0 00000000! 
    2767 00009210     4c08          move    a0,a8
    2768 00009220     b760          move    *a11(CUR_FRAME),a0,L    ;defender frame
         00009230     06c0  
    2769 00009240     0d5f          calla   get_mpart_offsets
         00009250 00000000! 
    2770 00009270     4c09          move    a0,a9
    2771                    
    2772                            ;attacker size in a6, defender in a7
    2773 00009280     b7a0          move    *a13(CUR_FRAME),a0,L    ;attacker frame
         00009290     06c0  
    2774 000092a0     0d5f          calla   get_mpart_xsize
         000092b0 00000000! 
    2775 000092d0     4c06          move    a0,a6
    2776 000092e0     b760          move    *a11(CUR_FRAME),a0,L    ;defender frame
         000092f0     06c0  
    2777 00009300     0d5f          calla   get_mpart_xsize
         00009310 00000000! 
    2778 00009330     4c07          move    a0,a7
    2779                    
    2780                            ;compute Y offset
    2781 00009340     b4a1          move    *a5(cmkmYOFF),a1                ;raw Y
         00009350     0030  
    2782                    
    2783 00009360     4d2e          move    a9,a14
    2784 00009370     2a0e          sra     16,a14
    2785 00009380     45c1          sub     a14,a1                  ;sub defender aniY
    2786                    
    2787 00009390     4d0e          move    a8,a14
    2788 000093a0     2a0e          sra     16,a14
    2789 000093b0     41c1          add     a14,a1                  ;add attacker aniY
    2790                    
    2791 000093c0     b02d          move    a1,*a13(ATTACH_YOFF)
         000093d0     03c0  
    2792                    
    2793                            ;attach Xoff:
    2794                            ; no flip:       raw x + def xoff - att xoff
    2795                            ; def flip:      raw x + (def xsz - def xoff) - att xoff
    2796                    
    2797                            ;compute X offset
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   64

    2798 000093e0     b4a1          move    *a5(cmkmXOFF),a1                        ;raw X
         000093f0     0020  
    2799                    
    2800                            ;defender part in a2
    2801 00009400     4d22          move    a9,a2
    2802 00009410     0b82          andi    0FFFFh,a2               ;def xoff
         00009420 ffff0000  
    2803 00009440     0502          sext    a2
    2804 00009450     0d3f          callr   cmkmattacker_flip_test
         00009460     0030  
    2805 00009470     c806          jrc     cmkmaf_match
    2806                    
    2807                            ;attack X's don't match up
    2808 00009480     b4ae          move    *a5(cmkmFLIP),a14
         00009490     0040  
    2809 000094a0     ca08          jrz     cmkmdef_set
    2810 000094b0     03a2          neg     a2
    2811 000094c0     40e2          add     a7,a2                   ;def xsize
    2812 000094d0     c005          jruc    cmkmdef_set
    2813                    
    2814                            ;attack X's match up
    2815 000094e0           cmkmaf_match
    2816 000094e0     b4ae          move    *a5(cmkmFLIP),a14
         000094f0     0040  
    2817 00009500     cb02          jrnz    cmkmdef_set
    2818 00009510     03a2          neg     a2
    2819 00009520     40e2          add     a7,a2                   ;def xsize
    2820 00009530           cmkmdef_set
    2821                    
    2822                            ;attacker part in a3
    2823 00009530     4d03          move    a8,a3
    2824 00009540     0b83          andi    0FFFFh,a3               ;att xoff
         00009550 ffff0000  
    2825                    
    2826 00009570     4041          add     a2,a1
    2827 00009580     4461          sub     a3,a1
    2828                    
    2829                            ;if X's don't match, negate this
    2830 00009590     0d5f          calla   cmkmattacker_flip_test
         000095a0 00009770' 
    2831 000095c0     c801          jrc     cmkmfoox
    2832 000095d0     03a1          neg     a1
    2833 000095e0           cmkmfoox
    2834                    
    2835 000095e0     b02d          move    a1,*a13(ATTACH_XOFF)
         000095f0     03b0  
    2836                    
    2837                    
    2838                            ;set flip bits properly
    2839 00009600     b563          move    *a11(OBJ_CONTROL),a3
         00009610     0780  
    2840 00009620     b5ae          move    *a13(FACING_DIR),a14
         00009630     04c0  
    2841 00009640     1f8e          btst    PLAYER_RIGHT_BIT,a14
    2842 00009650     cb04          jrnz    cmkmright
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   65

    2843                    ;left
    2844 00009660     0b83          andni   M_FLIPH,a3              ;clear flip bit
         00009670 00000010  
    2845 00009690     c003          jruc    cmkmcnt
    2846 000096a0           cmkmright
    2847 000096a0     0ba3          ori     M_FLIPH,a3              ;set flip
         000096b0 00000010  
    2848 000096d0           cmkmcnt
    2849 000096d0     b4a0          move    *a5(cmkmFLIP),a0                ;flip flag
         000096e0     0040  
    2850 000096f0     ca03          jrz     cmkmskip
    2851                    
    2852 00009700     0bc3          xori    M_FLIPH,a3              ;invert
         00009710 00000010  
    2853 00009730           cmkmskip
    2854 00009730     b06b          move    a3,*a11(OBJ_CONTROL)
         00009740     0780  
    2855                    
    2856 00009750           cmkmdone
    2857 00009750     c000          jruc    _exit
         00009760     f6d0  
    2858                    
    2859 00009770            SUBRP  cmkmattacker_flip_test
    2860                            ;Test for attacker flip.  When facing right, flip should be off.
    2861                            ; When facing left, should be on.  Set the carry flag if everything
    2862                            ; is okay.
    2863 00009770                   PUSH    a0,a1
    2864 00009790     b5a0          move    *a13(FACING_DIR),a0
         000097a0     04c0  
    2865 000097b0     b5a1          move    *a13(OBJ_CONTROL),a1
         000097c0     0780  
    2866 000097d0     1f61          btst    B_FLIPH,a1
    2867 000097e0     cb03          jrnz    cmkmttf_set
    2868                    
    2869 000097f0           cmkmttf_clear
    2870 000097f0     1fa0          btst    MOVE_LEFT_BIT,a0
    2871 00009800     cb04          jrnz    cmkmttf_flip
    2872 00009810     c007          jruc    cmkmttf_noflip
    2873 00009820           cmkmttf_set
    2874 00009820     1f80          btst    MOVE_RIGHT_BIT,a0
    2875 00009830     cb01          jrnz    cmkmttf_flip
    2876 00009840     c004          jruc    cmkmttf_noflip
    2877                    
    2878 00009850           cmkmttf_flip
    2879 00009850                   PULL    a0,a1
    2880 00009870     0320          clrc
    2881 00009880     0960          rets
    2882 00009890           cmkmttf_noflip
    2883 00009890                   PULL    a0,a1
    2884 000098b0     0de0          setc
    2885 000098c0     0960          rets
    2886                    
    2887                    ********
    2888 000098d0           _ani_setoppmode         ;80
    2889                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   66

    2890 000098d0                   STRUCT  0
    2891 000098d0                   WORD    pezdMODE
    2892 000098d0                   LABEL   pezdSIZE
    2893                    
    2894 000098d0     4c8e          move    a4,a14
    2895 000098e0     0b0e          addi    pezdSIZE,a14
         000098f0     0010  
    2896 00009900     b3ca          move    a14,*a10(OANIPC),L
         00009910     0030  
    2897                    
    2898 00009920     b7a0          move    *a13(ATTACH_PROC),a0,L
         00009930     03e0  
    2899 00009940     ca0a          jrz     pezddone
    2900 00009950     b60e          move    *a0(ATTACH_PROC),a14,L
         00009960     03e0  
    2901 00009970     ca07          jrz     pezddone
    2902                    
    2903 00009980     b401          move    *a0(ANIMODE),a1
         00009990     0660  
    2904 000099a0     b48e          move    *a4(pezdMODE),a14
         000099b0     0000  
    2905 000099c0     55c1          or      a14,a1
    2906 000099d0     b020          move    a1,*a0(ANIMODE)
         000099e0     0660  
    2907                    
    2908 000099f0           pezddone
    2909 000099f0     c000          jruc    _next_command
         00009a00     f690  
    2910                    
    2911                    ********
    2912 00009a10           _ani_clroppmode         ;81
    2913                    
    2914 00009a10                   STRUCT  0
    2915 00009a10                   WORD    omjuMODE
    2916 00009a10                   LABEL   omjuSIZE
    2917                    
    2918 00009a10     4c8e          move    a4,a14
    2919 00009a20     0b0e          addi    omjuSIZE,a14
         00009a30     0010  
    2920 00009a40     b3ca          move    a14,*a10(OANIPC),L
         00009a50     0030  
    2921                    
    2922 00009a60     b7a0          move    *a13(ATTACH_PROC),a0,L
         00009a70     03e0  
    2923 00009a80     ca0a          jrz     omjudone
    2924 00009a90     b60e          move    *a0(ATTACH_PROC),a14,L
         00009aa0     03e0  
    2925 00009ab0     ca07          jrz     omjudone
    2926                    
    2927 00009ac0     b401          move    *a0(ANIMODE),a1
         00009ad0     0660  
    2928 00009ae0     b48e          move    *a4(omjuMODE),a14
         00009af0     0000  
    2929 00009b00     53c1          andn    a14,a1
    2930 00009b10     b020          move    a1,*a0(ANIMODE)
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   67

         00009b20     0660  
    2931                    
    2932 00009b30           omjudone
    2933 00009b30     c000          jruc    _next_command
         00009b40     f67c  
    2934                    
    2935                    ********
    2936 00009b50           _ani_oppoffset          ;82
    2937                    
    2938 00009b50                   STRUCT  0
    2939 00009b50                   LONG    vfcqTABLE
    2940 00009b50                   LABEL   vfcqSIZE
    2941                    
    2942 00009b50     4c8e          move    a4,a14
    2943 00009b60     0b0e          addi    vfcqSIZE,a14
         00009b70     0020  
    2944 00009b80     b3ca          move    a14,*a10(OANIPC),L
         00009b90     0030  
    2945                    
    2946 00009ba0     b7a0          move    *a13(ATTACH_PROC),a0,L
         00009bb0     03e0  
    2947 00009bc0     ca1b          jrz     vfcqdone
    2948 00009bd0     b60e          move    *a0(ATTACH_PROC),a14,L
         00009be0     03e0  
    2949 00009bf0     ca18          jrz     vfcqdone
    2950                    
    2951 00009c00     b401          move    *a0(WRESTLERNUM),a1
         00009c10     0590  
    2952 00009c20                   X32     a1
    2953                    
    2954 00009c30     b68e          move    *a4(vfcqTABLE),a14,L
         00009c40     0000  
    2955 00009c50     ca12          jrz     vfcqdone
    2956 00009c60     41c1          add     a14,a1
    2957                    
    2958 00009c70     b402          move    *a0(OBJ_XPOSINT),a2
         00009c80     0110  
    2959 00009c90     9423          move    *a1+,a3
    2960 00009ca0     b40e          move    *a0(FACING_DIR),a14
         00009cb0     04c0  
    2961 00009cc0     1f8e          btst    MOVE_RIGHT_BIT,a14
    2962 00009cd0     cb01          jrnz    vfcqright
    2963 00009ce0     03a3          neg     a3
    2964 00009cf0           vfcqright
    2965 00009cf0     4062          add     a3,a2
    2966 00009d00     b040          move    a2,*a0(OBJ_XPOSINT)
         00009d10     0110  
    2967                    
    2968 00009d20     b402          move    *a0(OBJ_YPOSINT),a2
         00009d30     0130  
    2969 00009d40     9423          move    *a1+,a3
    2970 00009d50     4062          add     a3,a2
    2971 00009d60     b040          move    a2,*a0(OBJ_YPOSINT)
         00009d70     0130  
    2972                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   68

    2973 00009d80           vfcqdone
    2974 00009d80     c000          jruc    _next_command
         00009d90     f657  
    2975                    
    2976                    ********
    2977 00009da0           _ani_ifblocked  ;83
    2978                    
    2979 00009da0     9680          move    *a4+,a0,L               ;this is a conditional goto
    2980 00009db0     b5a1          move    *a13(HITBLOCKER),a1
         00009dc0     0540  
    2981 00009dd0     ca01          jrz     pwpbskip
    2982                    
    2983 00009de0     4c04          move    a0,a4                   ;new ani pc
    2984 00009df0           pwpbskip
    2985 00009df0     b28a          move    a4,*a10(OANIPC),L
         00009e00     0030  
    2986                    ;       jruc    _next_command
    2987 00009e10     c000          jruc    _next_command1
         00009e20     f650  
    2988                    
    2989                    ********
    2990 00009e30           _ani_waitroll   ;84
    2991                    
    2992                            ;Zombies always roll up.
    2993 00009e30     b5ae          move    *a13(STATUS_FLAGS),a14
         00009e40     0b50  
    2994 00009e50     1f8e          btst    B_ZOMBIE,a14
    2995 00009e60     cb00          jrnz    jltyzombie
         00009e70     008d  
    2996                    
    2997                            ;DEAD check
    2998 00009e80     b5ae          move    *a13(PLYRMODE),a14
         00009e90     05c0  
    2999 00009ea0     0b4e          cmpi    MODE_DEAD,a14
         00009eb0     fff6  
    3000 00009ec0     ca36          jreq    jltydead
    3001 00009ed0     b5ae          move    *a13(I_WILL_DIE),a14
         00009ee0     0b30  
    3002 00009ef0     ca17          jrz     jltynotded
    3003                    
    3004                            ;I_WILL_DIE is set.  If immobilize is zero, die and clear it.
    3005 00009f00     b5ae          move    *a13(IMMOBILIZE_TIME),a14
         00009f10     0ae0  
    3006 00009f20     cb25          jrnz    jltyrepeat
    3007 00009f30     57ce          clr     a14
    3008 00009f40     b1cd          move    a14,*a13(IMMOBILIZE_TIME)
         00009f50     0ae0  
    3009 00009f60     b1cd          move    a14,*a13(I_WILL_DIE)
         00009f70     0b30  
    3010 00009f80                   SETMODE DEAD
    3011                    
    3012 0000a030     0d5f          calla   clear_lifebar
         0000a040 00000000! 
    3013 0000a060     c01c          jruc    jltydead
    3014                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   69

    3015                    
    3016 0000a070           jltynotded      ;since we're not dead, set mode onground, just to be safe
    3017 0000a070     09ce          movi    MODE_ONGROUND,a14
         0000a080     0004  
    3018 0000a090     b1cd          move    a14,*a13(PLYRMODE)
         0000a0a0     05c0  
    3019                    
    3020 0000a0b0     b5a0          move    *a13(IMMOBILIZE_TIME),a0
         0000a0c0     0ae0  
    3021 0000a0d0     cb0a          jrnz    jltyrepeat
    3022                    
    3023 0000a0e0     b5a0          move    *a13(GETUP_TIME),a0
         0000a0f0     0460  
    3024 0000a100     cb07          jrnz    jltyrepeat
    3025                    
    3026 0000a110           jltyroll        ;clear stars
    3027 0000a110     5600          clr     a0
    3028 0000a120     b00d          move    a0,*a13(STARS_FLAG)
         0000a130     07f0  
    3029                    
    3030 0000a140     0d5f          calla   do_roll
         0000a150 00000000! 
    3031 0000a170     ca07          jrz     jltygetup
    3032                    
    3033 0000a180           jltyrepeat      ;come back again next tick.
    3034 0000a180     5600          clr     a0
    3035 0000a190     b00d          move    a0,*a13(Z_BOUND)
         0000a1a0     04a0  
    3036 0000a1b0     1820          movk    1,a0
    3037 0000a1c0     b00a          move    a0,*a10(OANICNT)
         0000a1d0     0050  
    3038 0000a1e0     0960          rets
    3039                    
    3040 0000a1f0     b28a  jltygetup       move    a4,*a10(OANIPC),L
         0000a200     0030  
    3041                    ;       jruc    _next_command
    3042 0000a210     c000          jruc    _next_command1
         0000a220     f610  
    3043                    
    3044 0000a230           jltydead        ;if player, change anim to xxx_dead_anim.
    3045                            ;if drone, figure out if we should become a zombie or not.
    3046                            ; if so, set it and roll up until we can't roll no more.  Then the
    3047                            ;       mode_dead code takes over so we don't worry about it here.
    3048                            ; if not, change to xxx_dead_anim.
    3049 0000a230     b5ae          move    *a13(PLYR_TYPE),a14
         0000a240     05a0  
    3050 0000a250     0b4e          cmpi    PTYPE_PLAYER,a14
         0000a260     ffff  
    3051 0000a270     ca54          jreq    jltydie
    3052                    
    3053                            ;drone.
    3054 0000a280     0d5f          calla   is_8_on_1
         0000a290 00000000! 
    3055 0000a2b0     c80b          jrc     jltyfin
    3056 0000a2c0     05ae          move    @royal_rumble,a14
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   70

         0000a2d0 00000000! 
    3057                    ;       jrnz    jltynolife
    3058 0000a2f0     cb01          jrnz    jltyrlife
    3059 0000a300     c04b          jruc    jltydie
    3060                    
    3061                    
    3062 0000a310           jltyrlife       ;royal rumble.  give the human team some life
    3063 0000a310     1880          movk    4,a0
    3064 0000a320     5621          clr     a1
    3065 0000a330     0d5f          calla   adjust_health
         0000a340 00000000! 
    3066 0000a360     c013          jruc    jltynolife
    3067                    
    3068 0000a370           jltyfin ;this is the final match.
    3069                            ; see if there's another guy in the hopper.
    3070                            ; if there is, store his number and become a zombie.
    3071                    
    3072                            ;first, tho, give the guy who killed us some life.
    3073 0000a370     05a1          move    @PSTATUS2,a1
         0000a380 00000000! 
    3074 0000a3a0     1421          dec     a1
    3075                    
    3076                            ;but not if he's already dead!
    3077 0000a3b0     4c20          move    a1,a0
    3078 0000a3c0                   X32     a0
    3079 0000a3d0     0b20          addi    process_ptrs,a0
         0000a3e0 00000000! 
    3080 0000a400     8600          move    *a0,a0,L
    3081 0000a410     b40e          move    *a0(PLYRMODE),a14
         0000a420     05c0  
    3082 0000a430     0b4e          cmpi    MODE_DEAD,a14
         0000a440     fff6  
    3083 0000a450     ca04          jreq    jltynolife
    3084                    
    3085 0000a460     1900          movk    8,a0
    3086 0000a470     0d5f          calla   adjust_health
         0000a480 00000000! 
    3087                    
    3088 0000a4a0           jltynolife
    3089 0000a4a0     07a0          move    @FINAL_PTR,a0,L
         0000a4b0 00000000! 
    3090 0000a4d0     8e01          movb    *a0,a1
    3091 0000a4e0     ce2d          jrn     jltydie                 ;no more guys
    3092                    
    3093                            ;okay, become a zombie.  set our zombie flag, store our new number
    3094                            ; in NEW_WRESTLERNUM, increment FINAL_PTR, and clear our ZOMBIE_TIME.
    3095 0000a4f0     1100          addk    8,a0
    3096 0000a500     0780          move    a0,@FINAL_PTR,L
         0000a510 00000000! 
    3097                    
    3098                            ;7-08H hack
    3099 0000a530     0b41          cmpi    7,a1
         0000a540     fff8  
    3100 0000a550     cb01          jrne    jltyvok
    3101 0000a560     1901          movk    8,a1
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   71

    3102 0000a570     b02d  jltyvok move    a1,*a13(NEW_WRESTLERNUM)
         0000a580     0cc0  
    3103 0000a590     b5ae          move    *a13(STATUS_FLAGS),a14
         0000a5a0     0b50  
    3104 0000a5b0     0bae          ori     M_ZOMBIE,a14
         0000a5c0 00000008  
    3105 0000a5e0     b1cd          move    a14,*a13(STATUS_FLAGS)
         0000a5f0     0b50  
    3106                    
    3107 0000a600     57ce          clr     a14
    3108 0000a610     b1cd          move    a14,*a13(ZOMBIE_TIME)
         0000a620     0db0  
    3109                    
    3110                            ;kill our specials
    3111 0000a630     0d5f          calla   kill_smove_procs
         0000a640 00000000! 
    3112                    
    3113                            ;if we're right up against either Z edge of the ring, move away
    3114                            ; a few pixels so we can roll.
    3115 0000a660     b5ae          move    *a13(OBJ_ZPOSINT),a14
         0000a670     0150  
    3116 0000a680     0b4e          cmpi    RING_TOP+7,a14
         0000a690     fbf9  
    3117 0000a6a0     c607          jrle    jltymvdn
    3118 0000a6b0     0b4e          cmpi    RING_BOT-7,a14
         0000a6c0     fac5  
    3119 0000a6d0     c607          jrle    jltyzombie
    3120                    
    3121                            ;move up a few
    3122 0000a6e0     14ee          subk    7,a14
    3123 0000a6f0     b1cd          move    a14,*a13(OBJ_ZPOSINT)
         0000a700     0150  
    3124 0000a710     c003          jruc    jltyzombie
    3125                    
    3126 0000a720           jltymvdn        ;move down a few
    3127 0000a720     10ee          addk    7,a14
    3128 0000a730     b1cd          move    a14,*a13(OBJ_ZPOSINT)
         0000a740     0150  
    3129                    
    3130 0000a750     09ce  jltyzombie      movi    J_UP,a14
         0000a760     0001  
    3131 0000a770     b1cd          move    a14,*a13(DRN_JOY)
         0000a780     0990  
    3132 0000a790     b1cd          move    a14,*a13(STICK_VAL_CUR)
         0000a7a0     0bc0  
    3133 0000a7b0     c095          jruc    jltyroll
    3134                    
    3135 0000a7c0     09ee  jltydie movi    xxx_dead_anim,a14
         0000a7d0 00000000! 
    3136 0000a7f0     b3ca          move    a14,*a10(OANIBASE),L
         0000a800     0010  
    3137 0000a810     b3ca          move    a14,*a10(OANIPC),L
         0000a820     0030  
    3138 0000a830     c000          jruc    _next_command
         0000a840     f5ac  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   72

    3139                    
    3140                    ********
    3141 0000a850           _ani_setoppfacing       ;85
    3142                    
    3143 0000a850     b7a0          move    *a13(ATTACH_PROC),a0,L
         0000a860     03e0  
    3144 0000a870     ca07          jrz     neiqdone
    3145 0000a880     b60e          move    *a0(ATTACH_PROC),a14,L
         0000a890     03e0  
    3146 0000a8a0     ca04          jrz     neiqdone
    3147                    
    3148 0000a8b0     b40e          move    *a0(NEW_FACING_DIR),a14
         0000a8c0     04d0  
    3149 0000a8d0     b1c0          move    a14,*a0(FACING_DIR)
         0000a8e0     04c0  
    3150                    
    3151 0000a8f0           neiqdone
    3152 0000a8f0     b28a          move    a4,*a10(OANIPC),L
         0000a900     0030  
    3153                    ;       jruc    _next_command
    3154 0000a910     c000          jruc    _next_command1
         0000a920     f5a0  
    3155                    
    3156                    ********
    3157 0000a930           _ani_ifopp              ;86
    3158                    
    3159                    ;       .word   ANI_IFOPP,wrestler1,wrestler2,...,wrestler3,-1
    3160                    ; sets STATUS if opponent is one of the wrestlers in the list, else clears.
    3161                    
    3162 0000a930     b5ab          move    *a13(CLOSEST_NUM),a11
         0000a940     03a0  
    3163 0000a950                   X32     a11
    3164 0000a960     0b2b          addi    process_ptrs,a11
         0000a970 00000000! 
    3165 0000a990     876b          move    *a11,a11,L
    3166                    
    3167 0000a9a0     b56b          move    *a11(WRESTLERNUM),a11
         0000a9b0     0590  
    3168                    
    3169                            ;clear mode_status
    3170 0000a9c0     b5a0          move    *a13(ANIMODE),a0
         0000a9d0     0660  
    3171 0000a9e0     0b80          andni   MODE_STATUS2,a0
         0000a9f0 00000200  
    3172 0000aa10     b00d          move    a0,*a13(ANIMODE)
         0000aa20     0660  
    3173                    
    3174                            ;compare loop
    3175 0000aa30           uszrloop
    3176 0000aa30     9480          move    *a4+,a0,W
    3177 0000aa40     ce0b          jrn     uszrdone
    3178 0000aa50     480b          cmp     a0,a11
    3179 0000aa60     cbfc          jrne    uszrloop
    3180                    
    3181                            ;hit.  set mode_status
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   73

    3182 0000aa70     b5a0          move    *a13(ANIMODE),a0
         0000aa80     0660  
    3183 0000aa90     0ba0          ori     MODE_STATUS2,a0
         0000aaa0 00000200  
    3184 0000aac0     b00d          move    a0,*a13(ANIMODE)
         0000aad0     0660  
    3185                    
    3186                            ;run off the rest of the list
    3187 0000aae0           uszrrunoff
    3188 0000aae0     948e          move    *a4+,a14
    3189 0000aaf0     cffe          jrnn    uszrrunoff
    3190                    
    3191 0000ab00           uszrdone
    3192 0000ab00     b28a          move    a4,*a10(OANIPC),L
         0000ab10     0030  
    3193                    ;       jruc    _next_command
    3194 0000ab20     c000          jruc    _next_command1
         0000ab30     f57f  
    3195                    
    3196                    ********
    3197 0000ab40           _ani_snot       ;87
    3198                    
    3199 0000ab40     4c80          move    a4,a0
    3200 0000ab50     0b00          addi    32+4*16,a0              ;LWWWW
         0000ab60     0060  
    3201 0000ab70     b20a          move    a0,*a10(OANIPC),L
         0000ab80     0030  
    3202                    
    3203 0000ab90                   push    a10
    3204 0000aba0     5621          clr     a1              ;proc ID
    3205 0000abb0     9687          move    *a4+,a7,L       ;wake address
    3206 0000abc0     4c88          move    a4,a8           ;* arguments
    3207 0000abd0     4dab          move    a13,a11
    3208 0000abe0     0d5f          calla   GETPRC
         0000abf0 00000000! 
    3209 0000ac10                   pull    a10
    3210                    
    3211 0000ac20     c000          jruc    _next_command
         0000ac30     f56d  
    3212                    
    3213                    ********
    3214 0000ac40           _ani_if_butcount_ge     ;88
    3215                    
    3216 0000ac40                   STRUCT  0
    3217 0000ac40                   WORD    jldpBUTTON
    3218 0000ac40                   WORD    jldpBUTCNT
    3219 0000ac40                   LONG    jldpADDR
    3220 0000ac40                   LABEL   jldpSIZE
    3221                    
    3222 0000ac40     4c8e          move    a4,a14
    3223 0000ac50     0b0e          addi    jldpSIZE,a14
         0000ac60     0040  
    3224 0000ac70     b3ca          move    a14,*a10(OANIPC),L
         0000ac80     0030  
    3225                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   74

    3226 0000ac90     b48e          move    *a4(jldpBUTTON),a14
         0000aca0     0000  
    3227 0000acb0     41ae          add     a13,a14
    3228 0000acc0     85ce          move    *a14,a14                ;button count
    3229 0000acd0     b480          move    *a4(jldpBUTCNT),a0
         0000ace0     0010  
    3230 0000acf0     480e          cmp     a0,a14                  ;jldpof presses needed to repeat
    3231 0000ad00     c403          jrlt    jldpfail
    3232                    
    3233 0000ad10     ba8a          move    *a4(jldpADDR),*a10(OANIPC),L    ;take branch
         0000ad20     0020  
         0000ad30     0030  
    3234 0000ad40           jldpfail
    3235 0000ad40     c000          jruc    _next_command
         0000ad50     f55b  
    3236                    
    3237                    
    3238                    *********
    3239 0000ad60           _ani_if_butcount_lt     ;89
    3240                    
    3241 0000ad60     4c8e          move    a4,a14
    3242 0000ad70     0b0e          addi    jldpSIZE,a14
         0000ad80     0040  
    3243 0000ad90     b3ca          move    a14,*a10(OANIPC),L
         0000ada0     0030  
    3244                    
    3245 0000adb0     b48e          move    *a4(jldpBUTTON),a14
         0000adc0     0000  
    3246 0000add0     41ae          add     a13,a14
    3247 0000ade0     85ce          move    *a14,a14                ;button count
    3248 0000adf0     b480          move    *a4(jldpBUTCNT),a0
         0000ae00     0010  
    3249 0000ae10     480e          cmp     a0,a14                  ;jldpof presses needed to repeat
    3250 0000ae20     c503          jrge    jldpfail2
    3251                    
    3252 0000ae30     ba8a          move    *a4(jldpADDR),*a10(OANIPC),L    ;take branch
         0000ae40     0020  
         0000ae50     0030  
    3253 0000ae60           jldpfail2
    3254 0000ae60     c000          jruc    _next_command
         0000ae70     f549  
    3255                    
    3256                    ********
    3257 0000ae80           _ani_if_rptcount        ;90
    3258                    
    3259 0000ae80                   STRUCT  0
    3260 0000ae80                   LONG    sqorADDR
    3261 0000ae80                   LABEL   sqorSIZE
    3262                    
    3263 0000ae80     4c8e          move    a4,a14
    3264 0000ae90     0b0e          addi    sqorSIZE,a14
         0000aea0     0020  
    3265 0000aeb0     b3ca          move    a14,*a10(OANIPC),L
         0000aec0     0030  
    3266                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   75

    3267 0000aed0     b5ae          move    *a13(RPT_COUNT),a14
         0000aee0     07d0  
    3268 0000aef0     ca03          jrz     sqorfail
    3269                    
    3270 0000af00     ba8a          move    *a4(sqorADDR),*a10(OANIPC),L    ;take branch
         0000af10     0000  
         0000af20     0030  
    3271 0000af30           sqorfail
    3272 0000af30     c000          jruc    _next_command
         0000af40     f53c  
    3273                    
    3274                    *********
    3275 0000af50           _ani_ifnot_rptcount     ;91
    3276                    
    3277 0000af50     4c8e          move    a4,a14
    3278 0000af60     0b0e          addi    sqorSIZE,a14
         0000af70     0020  
    3279 0000af80     b3ca          move    a14,*a10(OANIPC),L
         0000af90     0030  
    3280                    
    3281 0000afa0     b5ae          move    *a13(RPT_COUNT),a14
         0000afb0     07d0  
    3282 0000afc0     cb03          jrnz    sqorfail2
    3283                    
    3284 0000afd0     ba8a          move    *a4(sqorADDR),*a10(OANIPC),L    ;take branch
         0000afe0     0000  
         0000aff0     0030  
    3285 0000b000           sqorfail2
    3286 0000b000     c000          jruc    _next_command
         0000b010     f52f  
    3287                    
    3288                    
    3289                    ********
    3290 0000b020           _ani_ringcheck          ;92
    3291                    
    3292                            ;If caller and nearest opponent's INRING values don't match, jump
    3293                            ; to fnxdBRANCH
    3294                    
    3295 0000b020                   STRUCT  0
    3296 0000b020                   LONG    fnxdBRANCH
    3297 0000b020                   LABEL   fnxdSIZE
    3298                    
    3299 0000b020     4c8e          move    a4,a14
    3300 0000b030     0b0e          addi    fnxdSIZE,a14
         0000b040     0020  
    3301 0000b050     b3ca          move    a14,*a10(OANIPC),L
         0000b060     0030  
    3302                    
    3303 0000b070     b5ab          move    *a13(CLOSEST_NUM),a11
         0000b080     03a0  
    3304 0000b090                   X32     a11
    3305 0000b0a0     0b2b          addi    process_ptrs,a11
         0000b0b0 00000000! 
    3306 0000b0d0     876b          move    *a11,a11,L
    3307 0000b0e0     b560          move    *a11(INRING),a0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   76

         0000b0f0     0560  
    3308 0000b100     b5a1          move    *a13(INRING),a1
         0000b110     0560  
    3309 0000b120     4801          cmp     a0,a1
    3310 0000b130     ca04          jreq    fnxddone
    3311                    
    3312 0000b140     b680          move    *a4(fnxdBRANCH),a0,L
         0000b150     0000  
    3313 0000b160     b20a          move    a0,*a10(OANIPC),L
         0000b170     0030  
    3314                    
    3315 0000b180           fnxddone
    3316 0000b180     c000          jruc    _next_command
         0000b190     f517  
    3317                    
    3318                    ********
    3319                    
    3320                    ;--> use this in a PUPPET sequence
    3321                    ;this is the same as calling ani_debris except that
    3322                    ;everything is relative to the wrestler attached to me
    3323                    
    3324 0000b1a0           _ani_debrisat           ;93
    3325                    
    3326 0000b1a0     4c8e          move    a4,a14
    3327 0000b1b0     0b0e          addi    5*16,a14
         0000b1c0     0050  
    3328 0000b1d0     b3ca          move    a14,*a10(OANIPC),L
         0000b1e0     0030  
    3329                    
    3330 0000b1f0     b7ab          move    *a13(ATTACH_PROC),a11,L
         0000b200     03e0  
    3331 0000b210     ca04          jrz     rgyzdone
    3332 0000b220     b76e          move    *a11(ATTACH_PROC),a14,L
         0000b230     03e0  
    3333 0000b240     49ae          cmp     a13,a14
    3334 0000b250     ca08          jreq    db94
    3335 0000b260           rgyzdone
    3336 0000b260     c000          jruc    _next_command
         0000b270     f509  
    3337                    
    3338                    
    3339                    ********
    3340 0000b280           _ani_debris             ;94
    3341                    
    3342                            .ref    react_debris
    3343                    
    3344 0000b280     4c8e          move    a4,a14
    3345 0000b290     0b0e          addi    5*16,a14
         0000b2a0     0050  
    3346 0000b2b0     b3ca          move    a14,*a10(OANIPC),L
         0000b2c0     0030  
    3347 0000b2d0     4dab          move    a13,a11
    3348 0000b2e0           db94
    3349                    
    3350                    ;Stop debris if other smoke is going on!  Bog reduction...
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   77

    3351 0000b2e0     05a1          move    @no_debris,a1
         0000b2f0 00000000! 
    3352 0000b310     05ae          move    @reduce_bog,a14
         0000b320 00000000! 
    3353 0000b340     55c1          or      a14,a1
    3354 0000b350     cb00          jrnz    _next_command
         0000b360     f4fa  
    3355                    
    3356                    ;Too much bog outside...
    3357 0000b370     b5a1          move    *a13(INRING),a1
         0000b380     0560  
    3358 0000b390     cb00          jrnz    _next_command
         0000b3a0     f4f6  
    3359                    
    3360 0000b3b0                   push    a10
    3361 0000b3c0     5621          clr     a1              ;proc ID
    3362                    
    3363 0000b3d0     09e7          movi    react_debris,a7 ;wake address
         0000b3e0 00000000! 
    3364 0000b400     4c88          move    a4,a8           ;* arguments
    3365 0000b410     0d5f          calla   GETPRC
         0000b420 00000000! 
    3366 0000b440                   pull    a10
    3367                    
    3368 0000b450     c000          jruc    _next_command
         0000b460     f4ea  
    3369                    
    3370                    
    3371                    ********
    3372 0000b470           _ani_set_wrestler_xflip ;95
    3373                    
    3374 0000b470     b5ae          move    *a13(FACING_DIR),a14
         0000b480     04c0  
    3375 0000b490     1f8e          btst    PLAYER_RIGHT_BIT,a14
    3376 0000b4a0     cb0b          jrnz    ysteright
    3377                    
    3378 0000b4b0     b5ae          move    *a13(OBJ_CONTROL),a14
         0000b4c0     0780  
    3379 0000b4d0     0bae          ori     M_FLIPH,a14
         0000b4e0 00000010  
    3380 0000b500     b1cd          move    a14,*a13(OBJ_CONTROL)
         0000b510     0780  
    3381                    
    3382 0000b520     b28a          move    a4,*a10(OANIPC),L
         0000b530     0030  
    3383                    ;       jruc    _next_command
    3384 0000b540     c000          jruc    _next_command1
         0000b550     f4dd  
    3385                    
    3386 0000b560           ysteright
    3387 0000b560     b5ae          move    *a13(OBJ_CONTROL),a14
         0000b570     0780  
    3388 0000b580     0b8e          andni   M_FLIPH,a14
         0000b590 00000010  
    3389 0000b5b0     b1cd          move    a14,*a13(OBJ_CONTROL)
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   78

         0000b5c0     0780  
    3390                    
    3391 0000b5d0     b28a          move    a4,*a10(OANIPC),L
         0000b5e0     0030  
    3392                    ;       jruc    _next_command
    3393 0000b5f0     c000          jruc    _next_command1
         0000b600     f4d2  
    3394                    
    3395                    ********
    3396 0000b610           _ani_slideatopp         ;96
    3397                    
    3398                    ;       max ticks to slide
    3399                    ;       target velocity
    3400                    ;       max Z distance
    3401                    ;       target area of opponent
    3402                    ;       x,y,z offset of attack box
    3403                    
    3404                    
    3405 0000b610                   STRUCT  0
    3406 0000b610                   WORD    ejqwMAX_TICKS
    3407 0000b610                   LONG    ejqwVELOCITY
    3408 0000b610                   WORD    ejqwMAX_Z_DIST
    3409 0000b610                   WORD    ejqwTRGT
    3410 0000b610                   WORD    ejqwATT_X_OFF
    3411 0000b610                   WORD    ejqwATT_Y_OFF
    3412 0000b610                   WORD    ejqwATT_Z_OFF
    3413 0000b610                   LABEL   ejqwSIZE
    3414                    
    3415                    
    3416 0000b610     4c8e          move    a4,a14
    3417 0000b620     0b0e          addi    ejqwSIZE,a14
         0000b630     0080  
    3418 0000b640     b3ca          move    a14,*a10(OANIPC),L
         0000b650     0030  
    3419                    
    3420 0000b660     b5ab          move    *a13(CLOSEST_NUM),a11
         0000b670     03a0  
    3421 0000b680                   X32     a11
    3422 0000b690     0b2b          addi    process_ptrs,a11
         0000b6a0 00000000! 
    3423 0000b6c0     876b          move    *a11,a11,L
    3424                    
    3425                            ;make sure both have the same INRING value
    3426 0000b6d0     b560          move    *a11(INRING),a0
         0000b6e0     0560  
    3427 0000b6f0     b5a1          move    *a13(INRING),a1
         0000b700     0560  
    3428 0000b710     4801          cmp     a0,a1
    3429 0000b720     cb00          jrne    _next_command
         0000b730     f4bd  
    3430                    
    3431 0000b740     b761          move    *a11(OBJ_XPOS),a1,L
         0000b750     0100  
    3432 0000b760     b762          move    *a11(OBJ_ZPOS),a2,L
         0000b770     0140  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   79

    3433 0000b780     b763          move    *a11(OBJ_YPOS),a3,L
         0000b790     0120  
    3434 0000b7a0     0b23          addi    [256,0],a3
         0000b7b0 01000000  
    3435                    
    3436 0000b7d0     b765          move    *a11(OBJ_XVEL),a5,L
         0000b7e0     02d0  
    3437 0000b7f0     b766          move    *a11(OBJ_ZVEL),a6,L
         0000b800     0310  
    3438 0000b810     b767          move    *a11(OBJ_YVEL),a7,L
         0000b820     02f0  
    3439 0000b830     b568          move    *a11(GROUND_Y),a8
         0000b840     0570  
    3440 0000b850     2608          sll     16,a8
    3441 0000b860     0b28          addi    [256,0],a8
         0000b870 01000000  
    3442                    
    3443 0000b890     b480          move    *a4(ejqwMAX_TICKS),a0
         0000b8a0     0000  
    3444                    
    3445 0000b8b0           ejqwlp0
    3446 0000b8b0     40a1          add     a5,a1                   ;x + xvel
    3447 0000b8c0     40c2          add     a6,a2                   ;z + zvel
    3448                    
    3449 0000b8d0     4ce7          move    a7,a7
    3450 0000b8e0     ca05          jrz     ejqwok
    3451                    
    3452 0000b8f0     40e3          add     a7,a3                   ;y + yvel
    3453                    ;;;;    subi    GRAVITY,a7      ;yvel - gravity
    3454                    
    3455 0000b900     4868          cmp     a3,a8           ;hit ground?
    3456 0000b910     c702          jrgt    ejqwok
    3457 0000b920     4d03          move    a8,a3
    3458 0000b930     c001          jruc    ejqwdn
    3459 0000b940           ejqwok
    3460 0000b940     3d40          dsj     a0,ejqwlp0
    3461 0000b950           ejqwdn
    3462 0000b950     0d03          subi    [256,0],a3
         0000b960 feffffff  
    3463                    
    3464 0000b980     0781          move    a1,@oppx,L
         0000b990 00000000- 
    3465 0000b9b0     0782          move    a2,@oppz,L
         0000b9c0 00000020- 
    3466 0000b9e0     0783          move    a3,@oppy,L
         0000b9f0 00000040- 
    3467                    
    3468 0000ba10     b480          move    *a4(ejqwTRGT),a0
         0000ba20     0040  
    3469 0000ba30     ce03          jrn     ejqwuser
    3470 0000ba40     0d5f          calla   set_target_offsets
         0000ba50 00000000! 
    3471 0000ba70           ejqwuser
    3472                    
    3473 0000ba70     b5a0          move    *a13(TGT_XOFF),a0       ;target x offset
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   80

         0000ba80     02a0  
    3474 0000ba90     2600          sll     16,a0
    3475 0000baa0     b56e          move    *a11(OBJ_CONTROL),a14
         0000bab0     0780  
    3476 0000bac0     1f6e          btst    B_FLIPH,a14
    3477 0000bad0     ca01          jrz     ejqwright1
    3478 0000bae0     03a0          neg     a0
    3479 0000baf0           ejqwright1
    3480                    ;;;     move    *a11(OBJ_XPOS),a1,L
    3481 0000baf0     07a1          move    @oppx,a1,L
         0000bb00 00000000- 
    3482 0000bb20     4001          add     a0,a1                   ;def target x
    3483                    
    3484 0000bb30     b480          move    *a4(ejqwATT_X_OFF),a0
         0000bb40     0050  
    3485 0000bb50     2600          sll     16,a0
    3486 0000bb60     b5ae          move    *a13(OBJ_CONTROL),a14
         0000bb70     0780  
    3487 0000bb80     1f6e          btst    B_FLIPH,a14
    3488 0000bb90     ca01          jrz     ejqwright0
    3489 0000bba0     03a0          neg     a0
    3490 0000bbb0           ejqwright0
    3491 0000bbb0     b7a2          move    *a13(OBJ_XPOS),a2,L
         0000bbc0     0100  
    3492 0000bbd0     4002          add     a0,a2                   ;att x
    3493                    
    3494                    
    3495                    
    3496 0000bbe0     b680          move    *a4(ejqwVELOCITY),a0,L
         0000bbf0     0010  
    3497 0000bc00     b5ae          move    *a13(FACING_DIR),a14
         0000bc10     04c0  
    3498 0000bc20     1f8e          btst    MOVE_RIGHT_BIT,a14
    3499 0000bc30     cb01          jrnz    ejqwpos
    3500 0000bc40     03a0          neg     a0                      ;left
    3501 0000bc50           ejqwpos
    3502 0000bc50     b20d          move    a0,*a13(OBJ_XVEL),L
         0000bc60     02d0  
    3503                    
    3504                    
    3505                    ;       move    *a4(ejqwMAX_TICKS),a0
    3506                    ;       move    a0,*a10(OANICNT)
    3507                    
    3508 0000bc70     c000          jruc    _next_command
         0000bc80     f468  
    3509                    
    3510                    
    3511                    ********
    3512 0000bc90           _ani_clr_butcount       ;97
    3513                    
    3514 0000bc90     b28a          move    a4,*a10(OANIPC),L
         0000bca0     0030  
    3515 0000bcb0     57ce          clr     a14
    3516                    ;       move    a14,*a13(PUNCHB_COUNT)
    3517                    ;       move    a14,*a13(BLOCKB_COUNT)
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   81

    3518                    ;       move    a14,*a13(SPUNCHB_COUNT)
    3519                    ;       move    a14,*a13(KICKB_COUNT)
    3520                    ;       move    a14,*a13(SKICKB_COUNT)
    3521                    
    3522 0000bcc0     b3cd          move    a14,*a13(PUNCHB_COUNT),L
         0000bcd0     0800  
    3523 0000bce0     b3cd          move    a14,*a13(SPUNCHB_COUNT),L
         0000bcf0     0820  
    3524 0000bd00     b1cd          move    a14,*a13(SKICKB_COUNT)
         0000bd10     0840  
    3525                    
    3526                    ;;;     move    a14,*a13(BUT_COUNT)
    3527 0000bd20     c000          jruc    _next_command
         0000bd30     f45d  
    3528                    
    3529                    ********
    3530 0000bd40           _ani_set_rptcount       ;98
    3531                    
    3532 0000bd40                   STRUCT  0
    3533 0000bd40                   WORD    izbhVAL
    3534 0000bd40                   LABEL   izbhSIZE
    3535                    
    3536                            ;If izbhVAL is negative, set RPT_COUNT to RND(0-izbhVAL)
    3537                    
    3538 0000bd40     9480          move    *a4+,a0
    3539 0000bd50     cf04          jrnn    izbhset
    3540                    
    3541 0000bd60     03a0          neg     a0
    3542 0000bd70     0d5f          calla   RNDRNG0
         0000bd80 00000000! 
    3543                    
    3544 0000bda0     b00d  izbhset move    a0,*a13(RPT_COUNT)
         0000bdb0     07d0  
    3545                    
    3546 0000bdc0     b28a          move    a4,*a10(OANIPC),L
         0000bdd0     0030  
    3547                    ;       jruc    _next_command
    3548 0000bde0     c000          jruc    _next_command1
         0000bdf0     f453  
    3549                    
    3550                    
    3551                    ********
    3552 0000be00           _ani_dec_rptcount       ;99
    3553                    
    3554 0000be00     b5a0          move    *a13(RPT_COUNT),a0
         0000be10     07d0  
    3555 0000be20     ca01          jrz     nwstatz
    3556 0000be30     1420          dec     a0
    3557 0000be40           nwstatz
    3558 0000be40     b00d          move    a0,*a13(RPT_COUNT)
         0000be50     07d0  
    3559                    
    3560 0000be60     b28a          move    a4,*a10(OANIPC),L
         0000be70     0030  
    3561                    ;       jruc    _next_command
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   82

    3562 0000be80     c000          jruc    _next_command1
         0000be90     f449  
    3563                    
    3564                    ********
    3565 0000bea0           _ani_shadowtrail        ;100
    3566                    
    3567 0000bea0                   STRUCT  0
    3568 0000bea0                   LONG    fjqaPALETTE
    3569 0000bea0                   WORD    fjqaRATE
    3570 0000bea0                   WORD    fjqaLIFESPAN
    3571 0000bea0                   LABEL   fjqaSIZE
    3572                    
    3573 0000bea0     8480          move    *a4,a0
    3574 0000beb0     cb0f          jrnz    fjqanot_off
    3575                    
    3576 0000bec0     0b04          addi    010h,a4
         0000bed0     0010  
    3577 0000bee0     b28a          move    a4,*a10(OANIPC),L
         0000bef0     0030  
    3578                    
    3579 0000bf00     b7a0          move    *a13(SHADTRAIL_PROC),a0,L       ;check proc still exists
         0000bf10     0a90  
    3580 0000bf20     ca06          jrz     fjqahuh
    3581                    
    3582 0000bf30     0d5f          calla   KILL
         0000bf40 00000000! 
    3583                    
    3584 0000bf60     5600          clr     a0
    3585 0000bf70     b20d          move    a0,*a13(SHADTRAIL_PROC),L       ;proc is toast
         0000bf80     0a90  
    3586 0000bf90           fjqahuh
    3587 0000bf90     c000          jruc    _next_command
         0000bfa0     f436  
    3588                    
    3589                    
    3590                    
    3591                    
    3592 0000bfb0           fjqanot_off
    3593 0000bfb0     4c8e          move    a4,a14
    3594 0000bfc0     0b0e          addi    fjqaSIZE,a14
         0000bfd0     0040  
    3595 0000bfe0     b3ca          move    a14,*a10(OANIPC),L
         0000bff0     0030  
    3596                    
    3597 0000c000     05ae          move    @reduce_bog,a14
         0000c010 00000000! 
    3598 0000c030     cb00          jrnz    _next_command
         0000c040     f42c  
    3599                    
    3600 0000c050                   push    a10
    3601                    
    3602 0000c060     4c88          move    a4,a8                   ;* arguments
    3603 0000c070     4dab          move    a13,a11                 ;* wrestler proc
    3604                    
    3605                    ;       move    *a13(PLYRNUM),a0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   83

    3606                    ;       ori     SHADGEN_PID,a0          ;proc ID
    3607                    ;       move    a0,a1                   ;mask
    3608                    ;       calla   EXISTP                  ;does process already exist?
    3609                    ;       jrz     fjqano_proc
    3610                    
    3611 0000c080     b7a0          move    *a13(SHADTRAIL_PROC),a0,L
         0000c090     0a90  
    3612 0000c0a0     ca0c          jrz     fjqano_proc
    3613                                                            ;exists, so restart with new arguments
    3614 0000c0b0     b5a1          move    *a13(PLYRNUM),a1
         0000c0c0     0580  
    3615 0000c0d0     0ba1          ori     SHADGEN_PID,a1          ;same proc ID
         0000c0e0 00000a00  
    3616 0000c100     09e7          movi    shadow_gen,a7           ;wake address
         0000c110 0000c270' 
    3617 0000c130     0d5f          calla   XFERPROC
         0000c140 00000000! 
    3618 0000c160     c00d          jruc    fjqaexit
    3619                    
    3620 0000c170           fjqano_proc
    3621 0000c170     b5a1          move    *a13(PLYRNUM),a1
         0000c180     0580  
    3622 0000c190     0ba1          ori     SHADGEN_PID,a1          ;proc ID
         0000c1a0 00000a00  
    3623 0000c1c0     09e7          movi    shadow_gen,a7           ;wake address
         0000c1d0 0000c270' 
    3624 0000c1f0     0d5f          calla   GETPRC
         0000c200 00000000! 
    3625 0000c220     b20d          move    a0,*a13(SHADTRAIL_PROC),L
         0000c230     0a90  
    3626                    
    3627 0000c240           fjqaexit
    3628 0000c240                   pull    a10
    3629 0000c250     c000          jruc    _next_command
         0000c260     f40a  
    3630                    
    3631                    
    3632                    
    3633                    ***
    3634                    ;a8  = * arguments
    3635                    ;a11 = * wrestler proc
    3636                    
    3637 0000c270           shadow_gen
    3638                    
    3639 0000c270           fjqalp
    3640 0000c270     b760          move    *a11(SHADTRAIL_PROC),a0,L
         0000c280     0a90  
    3641 0000c290     ca1f          jrz     fjqadie
    3642                    
    3643 0000c2a0     b76a          move    *a11(CUR_FRAME),a10,L   ;* multi-part image
         0000c2b0     06c0  
    3644                    
    3645 0000c2c0     5621          clr     a1                      ;proc ID
    3646 0000c2d0     09e7          movi    shadow_proc,a7          ;wake address
         0000c2e0 0000c4c0' 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   84

    3647 0000c300     0d5f          calla   GETPRC                  ;create proc for piece
         0000c310 00000000! 
    3648                    
    3649                    ;       move    *a10(-10h),a9           ;# pieces
    3650                    ;       addi    (17-7)*16,a10           ;1st header
    3651 0000c330     b549          move    *a10(IPCOUNT),a9                ;# pieces
         0000c340     fff0  
    3652 0000c350     0b0a          addi    IANI2Y,a10              ;1st header
         0000c360     0080  
    3653 0000c370           fjqaloop
    3654 0000c370     1429          dec     a9
    3655 0000c380     ca0a          jrz     fjqadone
    3656                    ;       addi    7*16,a10
    3657 0000c390     0b0a          addi    (ICBZ-IANI2Y),a10
         0000c3a0     0070  
    3658                    
    3659 0000c3b0     5621          clr     a1                      ;proc ID
    3660 0000c3c0     09e7          movi    shadow_proc,a7          ;wake address
         0000c3d0 0000c4c0' 
    3661 0000c3f0     0d5f          calla   GETPRC                  ;create proc for piece
         0000c400 00000000! 
    3662                    
    3663 0000c420     c0f4          jruc    fjqaloop
    3664 0000c430           fjqadone
    3665 0000c430     b500          move    *a8(fjqaRATE),a0
         0000c440     0020  
    3666 0000c450     0d5f          calla   PRCSLP                  ;sleep
         0000c460 00000000! 
    3667                    
    3668 0000c480     c0de          jruc    fjqalp
    3669 0000c490           fjqadie
    3670 0000c490                   DIE
    3671                    
    3672                    
    3673                    ***
    3674                    ;created from shadow_gen - creates an image, sleeps, delobj & dies
    3675 0000c4c0           shadow_proc
    3676                    
    3677 0000c4c0     b509          move    *a8(fjqaLIFESPAN),a9
         0000c4d0     0030  
    3678                    
    3679 0000c4e0     09c0          movi    Y_SCALE_MULTIPLIER,a0
         0000c4f0     3566  
    3680 0000c500     b561          move    *a11(OBJ_ZPOSINT),a1
         0000c510     0150  
    3681 0000c520     5e01          mpyu    a0,a1
    3682 0000c530     b560          move    *a11(OBJ_YPOSINT),a0
         0000c540     0130  
    3683 0000c550     2600          sll     16,a0
    3684 0000c560     4401          sub     a0,a1                   ;y pos
    3685                    
    3686 0000c570     b760          move    *a11(OBJ_XPOS),a0,L     ;x pos
         0000c580     0100  
    3687                    
    3688 0000c590     4d42          move    a10,a2                  ;* image
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   85

    3689                    
    3690 0000c5a0     b763          move    *a11(OBJ_PRIORITY),a3,L
         0000c5b0     0160  
    3691 0000c5c0     2e03          srl     16,a3                   ;z pos
    3692                    
    3693 0000c5d0     b564          move    *a11(OBJ_CONTROL),a4    ;DMA flags
         0000c5e0     0780  
    3694                    
    3695 0000c5f0                   PUSHP   a0,a1,a2,a3,a4
    3696 0000c610                   SLEEP   1
    3697 0000c660                   PULLP   a0,a1,a2,a3,a4
    3698                    
    3699 0000c680     b705          move    *a8(fjqaPALETTE),a5,L
         0000c690     0000  
    3700 0000c6a0     4ea0          move    a5,b0                   ;palette to use
    3701                    
    3702 0000c6b0     56a5          clr     a5                      ;object ID
    3703 0000c6c0     56c6          clr     a6                      ;x vel
    3704 0000c6d0     56e7          clr     a7                      ;y vel
    3705 0000c6e0     0d5f          calla   BEGINOBJP
         0000c6f0 00000000! 
    3706                    
    3707 0000c710     4d20          move    a9,a0                   ;lifespan
    3708 0000c720     0d5f          calla   PRCSLP                  ;sleep
         0000c730 00000000! 
    3709                    ;fjqaslp
    3710                    ;       move    @PCNT,a1
    3711                    ;       andi    1,a1
    3712                    ;       sll     12,a1
    3713                    ;       move    *a8(OXPOS),a0
    3714                    ;       andi    0fffh,a0
    3715                    ;       or      a1,a0
    3716                    ;       move    a0,*a8(OXPOS)
    3717                    ;       SLEEP   1
    3718                    ;       dsj     a9,fjqaslp
    3719                    
    3720 0000c750     0d5f          calla   DELOBJA8
         0000c760 00000000! 
    3721 0000c780                   DIE
    3722                    
    3723                    
    3724                    ********
    3725 0000c7b0           _ani_createproc ;101
    3726                    
    3727 0000c7b0                   STRUCT  0
    3728 0000c7b0                   LONG    mueoADDR
    3729 0000c7b0                   WORD    mueoPROCID
    3730 0000c7b0                   WORD    mueoWORD1
    3731 0000c7b0                   WORD    mueoWORD2
    3732 0000c7b0                   WORD    mueoWORD3
    3733 0000c7b0                   LABEL   mueoSIZE
    3734                    
    3735                    
    3736 0000c7b0     4c8e          move    a4,a14
    3737 0000c7c0     0b0e          addi    mueoSIZE,a14
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   86

         0000c7d0     0060  
    3738 0000c7e0     b3ca          move    a14,*a10(OANIPC),L
         0000c7f0     0030  
    3739 0000c800     4dab          move    a13,a11
    3740                    
    3741 0000c810                   push    a10
    3742 0000c820     b481          move    *a4(mueoPROCID),a1      ;proc ID
         0000c830     0020  
    3743 0000c840     b687          move    *a4(mueoADDR),a7,L      ;wake address
         0000c850     0000  
    3744 0000c860     0b04          addi    mueoWORD1,a4
         0000c870     0030  
    3745 0000c880     4c88          move    a4,a8           ;* arguments
    3746 0000c890     0d5f          calla   GETPRC
         0000c8a0 00000000! 
    3747 0000c8c0                   pull    a10
    3748                    
    3749 0000c8d0     c000          jruc    _next_command
         0000c8e0     f3a2  
    3750                    
    3751                    
    3752                    ********
    3753 0000c8f0           _ani_target     ;102
    3754                    
    3755                            ;sets leapat target to mtjvTARGET1 or mtjvTARGET2, depending on the
    3756                            ; value of mtjvMODE.
    3757                            ;ex: ANI_TARGET,TGT_HEAD,TGT_KNEES,ATM_CLOSEST
    3758                            ;    target the victim's head or victim's knees, whichever
    3759                            ;    is closest.
    3760                    
    3761                            ;NOTE: This assumes that victim is on the ground.  If he's
    3762                            ; not, the results will be screwy.
    3763                    
    3764 0000c8f0                   STRUCT  0
    3765 0000c8f0                   WORD    mtjvTARGET1             ;TGT_???
    3766 0000c8f0                   WORD    mtjvTARGET2             ;TGT_???
    3767 0000c8f0                   WORD    mtjvMODE                        ;ATM_CLOSEST|ATM_FARTHEST
    3768 0000c8f0                   LABEL   mtjvSIZE
    3769                    
    3770 0000c8f0     4c8e          move    a4,a14
    3771 0000c900     0b0e          addi    mtjvSIZE,a14
         0000c910     0030  
    3772 0000c920     b3ca          move    a14,*a10(OANIPC),L
         0000c930     0030  
    3773                    
    3774                    
    3775                            ;first, figure out the orientation of the wrestlers
    3776 0000c940     0d5f          calla   get_opp_process
         0000c950 00000000! 
    3777 0000c970     4c0b          move    a0,a11
    3778                    
    3779                            ;see if our flip bits match
    3780 0000c980     b5a0          move    *a13(OBJ_CONTROL),a0
         0000c990     0780  
    3781 0000c9a0     b561          move    *a11(OBJ_CONTROL),a1
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   87

         0000c9b0     0780  
    3782 0000c9c0     5620          xor     a1,a0
    3783 0000c9d0     1f60          btst    B_FLIPH,a0
    3784                    
    3785                            ;if Z is set, the flips match and thus the we're facing our
    3786                            ; opponent's feet, thus the mtjvTARGET with the highest value
    3787                            ; is closest.  if Z isn't set, the opposite is true.
    3788 0000c9e0     ca01          jrz     mtjvfacing_feet
    3789 0000c9f0     c006          jruc    mtjvfacing_head
    3790                    
    3791 0000ca00           mtjvfacing_feet
    3792 0000ca00     b48e          move    *a4(mtjvMODE),a14
         0000ca10     0020  
    3793 0000ca20     0b4e          cmpi    ATM_CLOSEST,a14
         0000ca30     ffff  
    3794 0000ca40     ca07          jreq    mtjvchoose_highest
    3795 0000ca50     c00d          jruc    mtjvchoose_lowest
    3796                    
    3797 0000ca60           mtjvfacing_head
    3798 0000ca60     b48e          move    *a4(mtjvMODE),a14
         0000ca70     0020  
    3799 0000ca80     0b4e          cmpi    ATM_CLOSEST,a14
         0000ca90     ffff  
    3800 0000caa0     ca08          jreq    mtjvchoose_lowest
    3801 0000cab0     0300          jruc    mtjvchoose_highest
    3802                    
    3803 0000cac0           mtjvchoose_highest
    3804 0000cac0     b480          move    *a4(mtjvTARGET1),a0
         0000cad0     0000  
    3805 0000cae0     b481          move    *a4(mtjvTARGET2),a1
         0000caf0     0010  
    3806 0000cb00     4820          cmp     a1,a0
    3807 0000cb10     c509          jrge    mtjvset
    3808 0000cb20     c007          jruc    mtjvswitch
    3809                    
    3810 0000cb30           mtjvchoose_lowest
    3811 0000cb30     b480          move    *a4(mtjvTARGET1),a0
         0000cb40     0000  
    3812 0000cb50     b481          move    *a4(mtjvTARGET2),a1
         0000cb60     0010  
    3813 0000cb70     4820          cmp     a1,a0
    3814 0000cb80     c602          jrle    mtjvset
    3815 0000cb90     0300          jruc    mtjvswitch
    3816                    
    3817 0000cba0           mtjvswitch
    3818 0000cba0     4c20          move    a1,a0
    3819 0000cbb0           mtjvset
    3820 0000cbb0     0d5f          calla   set_target_offsets
         0000cbc0 00000000! 
    3821 0000cbe0     0d5f          calla   tgt_ground
         0000cbf0 00000000! 
    3822 0000cc10     c000          jruc    _next_command
         0000cc20     f36e  
    3823                    
    3824                    ********
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   88

    3825 0000cc30           _ani_hmbwait    ;103
    3826                    
    3827 0000cc30                   STRUCT  0
    3828 0000cc30                   WORD    gwuqHIT
    3829 0000cc30                   WORD    gwuqMISSED
    3830 0000cc30                   WORD    gwuqBLOCKED
    3831 0000cc30                   LABEL   gwuqSIZE
    3832                    
    3833 0000cc30     4c8e          move    a4,a14
    3834 0000cc40     0b0e          addi    gwuqSIZE,a14
         0000cc50     0030  
    3835 0000cc60     b3ca          move    a14,*a10(OANIPC),L
         0000cc70     0030  
    3836                    
    3837                            ;first check for a block
    3838 0000cc80     b5a1          move    *a13(HITBLOCKER),a1
         0000cc90     0540  
    3839 0000cca0     ca06          jrz     gwuqcheck_hit
    3840                    
    3841 0000ccb0     b88a          move    *a4(gwuqBLOCKED),*a10(OANICNT)
         0000ccc0     0020  
         0000ccd0     0050  
    3842 0000cce0     ca00          jrz     _next_command
         0000ccf0     f361  
    3843 0000cd00     0960          rets
    3844                    
    3845                            ;then for a hit
    3846 0000cd10           gwuqcheck_hit
    3847 0000cd10     b5ae          move    *a13(ANIMODE),a14
         0000cd20     0660  
    3848 0000cd30     1ece          btst    MODE_STATUS_BIT,a14
    3849 0000cd40     ca06          jrz     gwuqmissedkb
    3850                    
    3851 0000cd50     b88a          move    *a4(gwuqHIT),*a10(OANICNT)
         0000cd60     0000  
         0000cd70     0050  
    3852 0000cd80     ca00          jrz     _next_command
         0000cd90     f357  
    3853 0000cda0     0960          rets
    3854                    
    3855                            ;assume a miss
    3856 0000cdb0           gwuqmissedkb
    3857 0000cdb0     b88a          move    *a4(gwuqMISSED),*a10(OANICNT)
         0000cdc0     0010  
         0000cdd0     0050  
    3858 0000cde0     ca00          jrz     _next_command
         0000cdf0     f351  
    3859 0000ce00     0960          rets
    3860                    
    3861                    ********
    3862 0000ce10           _ani_safe_time  ;104
    3863                    
    3864 0000ce10     9480          move    *a4+,a0
    3865 0000ce20     b00d          move    a0,*a13(SAFE_TIME)
         0000ce30     0ac0  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   89

    3866                    
    3867 0000ce40     b28a          move    a4,*a10(OANIPC),L
         0000ce50     0030  
    3868                    ;       jruc    _next_command
    3869 0000ce60     c000          jruc    _next_command1
         0000ce70     f34b  
    3870                    
    3871                    ********
    3872                    ;this won't do anything unless they're attached
    3873                    
    3874 0000ce80           _ani_setopp_plyrmode    ;105
    3875                    
    3876 0000ce80     9480          move    *a4+,a0
    3877 0000ce90     b28a          move    a4,*a10(OANIPC),L
         0000cea0     0030  
    3878                    
    3879 0000ceb0     b7ab          move    *a13(ATTACH_PROC),a11,L
         0000cec0     03e0  
    3880 0000ced0     b76e          move    *a11(ATTACH_PROC),a14,L
         0000cee0     03e0  
    3881 0000cef0     49ae          cmp     a13,a14
    3882 0000cf00     cb07          jrne    qjkddone
    3883                    
    3884 0000cf10     b56e          move    *a11(PLYRMODE),a14
         0000cf20     05c0  
    3885 0000cf30     0b4e          cmpi    MODE_DEAD,a14
         0000cf40     fff6  
    3886 0000cf50     ca02          jreq    qjkddone
    3887                         
    3888 0000cf60     b00b          move    a0,*a11(PLYRMODE)
         0000cf70     05c0  
    3889 0000cf80           qjkddone
    3890 0000cf80     c000          jruc    _next_command
         0000cf90     f337  
    3891                    
    3892                    ********
    3893                    ;this won't do anything unless they're attached
    3894                    
    3895 0000cfa0           _ani_xflip_opp          ;106
    3896                    
    3897 0000cfa0     b7ab          move    *a13(ATTACH_PROC),a11,L
         0000cfb0     03e0  
    3898 0000cfc0     b76e          move    *a11(ATTACH_PROC),a14,L
         0000cfd0     03e0  
    3899 0000cfe0     49ae          cmp     a13,a14
    3900 0000cff0     cb07          jrne    ihfgdone
    3901                    
    3902 0000d000     b560          move    *a11(OBJ_CONTROL),a0
         0000d010     0780  
    3903 0000d020     0bc0          xori    M_FLIPH,a0
         0000d030 00000010  
    3904 0000d050     b00b          move    a0,*a11(OBJ_CONTROL)
         0000d060     0780  
    3905                    
    3906 0000d070           ihfgdone
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   90

    3907 0000d070     b28a          move    a4,*a10(OANIPC),L
         0000d080     0030  
    3908                    ;       jruc    _next_command
    3909 0000d090     c000          jruc    _next_command1
         0000d0a0     f328  
    3910                    
    3911                    ********
    3912                    ;sets a LONG in wrestler PDATA
    3913 0000d0b0           _ani_setlong    ;107
    3914                    
    3915 0000d0b0                   STRUCT  0
    3916 0000d0b0                   WORD    xzbyPDOFF
    3917 0000d0b0                   LONG    xzbyLONG
    3918 0000d0b0                   LABEL   xzbySIZE
    3919                    
    3920 0000d0b0     4c8e          move    a4,a14
    3921 0000d0c0     0b0e          addi    xzbySIZE,a14
         0000d0d0     0030  
    3922 0000d0e0     b3ca          move    a14,*a10(OANIPC),L
         0000d0f0     0030  
    3923                    
    3924 0000d100     b480          move    *a4(xzbyPDOFF),a0
         0000d110     0000  
    3925 0000d120     41a0          add     a13,a0
    3926 0000d130     b681          move    *a4(xzbyLONG),a1,L
         0000d140     0010  
    3927 0000d150     8220          move    a1,*a0,L
    3928                    
    3929 0000d160     c000          jruc    _next_command
         0000d170     f319  
    3930                    
    3931                    ********
    3932                    *
    3933 0000d180           _ani_immobilize ;108
    3934                    
    3935 0000d180     9480          move    *a4+,a0
    3936                    
    3937 0000d190     b5a1          move    *a13(PLYR_DIZZY),a1
         0000d1a0     0600  
    3938 0000d1b0     cb10          jrnz    zqroskip
    3939 0000d1c0     b7a1          move    *a13(WHOIHIT),a1,L
         0000d1d0     0500  
    3940                    
    3941                            ;don't immobilize blockers!
    3942 0000d1e0     b42e          move    *a1(PLYRMODE),a14
         0000d1f0     05c0  
    3943 0000d200     0b4e          cmpi    MODE_BLOCK,a14
         0000d210     fff8  
    3944 0000d220     ca09          jreq    zqroskip
    3945                    
    3946 0000d230     b001          move    a0,*a1(IMMOBILIZE_TIME)
         0000d240     0ae0  
    3947                    
    3948                            ;clear his velocities too.
    3949 0000d250     5600          clr     a0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   91

    3950 0000d260     b201          move    a0,*a1(OBJ_XVEL),L
         0000d270     02d0  
    3951 0000d280     b201          move    a0,*a1(OBJ_YVEL),L
         0000d290     02f0  
    3952 0000d2a0     b201          move    a0,*a1(OBJ_ZVEL),L
         0000d2b0     0310  
    3953 0000d2c0           zqroskip
    3954 0000d2c0     b28a          move    a4,*a10(OANIPC),L
         0000d2d0     0030  
    3955                    ;       jruc    _next_command
    3956 0000d2e0     c000          jruc    _next_command1
         0000d2f0     f303  
    3957                    
    3958                    ********
    3959                    ;this flips your opponent based upon flip table
    3960                    ;this won't do anything unless they're attached
    3961                    
    3962 0000d300           _ani_xflip_tbl  ;109
    3963                    
    3964 0000d300                   STRUCT  0
    3965 0000d300                   LONG    jmqoFLIPTBL
    3966 0000d300                   LABEL   jmqoSIZE
    3967                    
    3968 0000d300     4c8e          move    a4,a14
    3969 0000d310     0b0e          addi    jmqoSIZE,a14
         0000d320     0020  
    3970 0000d330     b3ca          move    a14,*a10(OANIPC),L
         0000d340     0030  
    3971                    
    3972 0000d350     b7ab          move    *a13(ATTACH_PROC),a11,L
         0000d360     03e0  
    3973 0000d370     b76e          move    *a11(ATTACH_PROC),a14,L
         0000d380     03e0  
    3974 0000d390     49ae          cmp     a13,a14
    3975 0000d3a0     cb0f          jrne    jmqodone
    3976                    
    3977 0000d3b0     b560          move    *a11(WRESTLERNUM),a0
         0000d3c0     0590  
    3978 0000d3d0                   X16     a0
    3979                    
    3980 0000d3e0     b681          move    *a4(jmqoFLIPTBL),a1,L
         0000d3f0     0000  
    3981 0000d400     4020          add     a1,a0
    3982 0000d410     8400          move    *a0,a0
    3983 0000d420     ca07          jrz     jmqodone                        ;no flip
    3984                    
    3985 0000d430     b560          move    *a11(OBJ_CONTROL),a0
         0000d440     0780  
    3986 0000d450     0bc0          xori    M_FLIPH,a0
         0000d460 00000010  
    3987 0000d480     b00b          move    a0,*a11(OBJ_CONTROL)
         0000d490     0780  
    3988 0000d4a0           jmqodone
    3989 0000d4a0     c000          jruc    _next_command
         0000d4b0     f2e5  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   92

    3990                    
    3991                    ********
    3992                    * this sets the vels for a wrestler you're attached to
    3993                    * x-vel and z-vel are relative to attackers facing dir
    3994                    
    3995                            ;works on attached proc, or WHOIHIT if there isn't one
    3996                    
    3997 0000d4c0           _ani_setoppvels         ;110
    3998                    
    3999 0000d4c0                   STRUCT  0
    4000 0000d4c0                   LONG    dvxiXVEL
    4001 0000d4c0                   LONG    dvxiYVEL
    4002 0000d4c0                   LONG    dvxiZVEL
    4003 0000d4c0                   LABEL   dvxiSIZE
    4004                    
    4005 0000d4c0     4c8e          move    a4,a14
    4006 0000d4d0     0b0e          addi    dvxiSIZE,a14
         0000d4e0     0060  
    4007 0000d4f0     b3ca          move    a14,*a10(OANIPC),L
         0000d500     0030  
    4008                    
    4009 0000d510     b7ab          move    *a13(ATTACH_PROC),a11,L
         0000d520     03e0  
    4010 0000d530     b76e          move    *a11(ATTACH_PROC),a14,L
         0000d540     03e0  
    4011 0000d550     49ae          cmp     a13,a14
    4012 0000d560     ca02          jreq    dvxiattach_match
    4013                    
    4014                            ;no attach.  instead do this to WHOIHIT
    4015 0000d570     b7ab          move    *a13(WHOIHIT),a11,L
         0000d580     0500  
    4016                    
    4017 0000d590           dvxiattach_match
    4018 0000d590     ba8b          move    *a4(dvxiYVEL),*a11(OBJ_YVEL),L
         0000d5a0     0020  
         0000d5b0     02f0  
    4019                    
    4020 0000d5c0     b680          move    *a4(dvxiXVEL),a0,L
         0000d5d0     0000  
    4021 0000d5e0     b5ae          move    *a13(FACING_DIR),a14
         0000d5f0     04c0  
    4022 0000d600     1f8e          btst    MOVE_RIGHT_BIT,a14
    4023 0000d610     cb01          jrnz    dvxixok                 ;right
    4024 0000d620     03a0          neg     a0                      ;left
    4025 0000d630           dvxixok
    4026 0000d630     b20b          move    a0,*a11(OBJ_XVEL),L
         0000d640     02d0  
    4027                    
    4028 0000d650     b680          move    *a4(dvxiZVEL),a0,L
         0000d660     0040  
    4029 0000d670     1fce          btst    MOVE_DOWN_BIT,a14
    4030 0000d680     cb01          jrnz    dvxizok                 ;down
    4031 0000d690     03a0          neg     a0                      ;up
    4032 0000d6a0           dvxizok
    4033 0000d6a0     b20b          move    a0,*a11(OBJ_ZVEL),L
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   93

         0000d6b0     0310  
    4034                    
    4035 0000d6c0           dvxidone
    4036 0000d6c0     c000          jruc    _next_command
         0000d6d0     f2c3  
    4037                    
    4038                    
    4039                    ********
    4040                    ;same as waithitgnd except you pass an offset to add to ground Y
    4041                    ;(so you can make the guy hit the ground sooner)
    4042                    
    4043 0000d6e0           _ani_waithitgnd2        ;111
    4044                    
    4045 0000d6e0                   STRUCT  0
    4046 0000d6e0                   WORD    vkixOFFSET
    4047 0000d6e0                   LABEL   vkixSIZE
    4048                    
    4049                    
    4050 0000d6e0     b7a0          move    *a13(OBJ_YVEL),a0,L     ;must have down velocity
         0000d6f0     02f0  
    4051 0000d700     c12f          jrp     vkixno_gnd
    4052                    
    4053                            ;if we're the master and the attach is valid, check and see if
    4054                            ; our puppet has hit the ground.
    4055 0000d710     b5ae          move    *a13(ANIMODE),a14
         0000d720     0660  
    4056 0000d730     1e4e          btst    MODE_KEEPATTACHED_BIT,a14
    4057 0000d740     ca15          jrz     vkixskip_pcheck
    4058                    
    4059 0000d750     b7a0          move    *a13(ATTACH_PROC),a0,L
         0000d760     03e0  
    4060 0000d770     ca12          jrz     vkixskip_pcheck         ;we're attached?
    4061 0000d780     b60e          move    *a0(ATTACH_PROC),a14,L
         0000d790     03e0  
    4062 0000d7a0     ca0f          jrz     vkixskip_pcheck         ;they're attached?
    4063 0000d7b0     49ae          cmp     a13,a14
    4064 0000d7c0     cb0d          jrne    vkixskip_pcheck         ;to each other?
    4065                    
    4066                            ;ah, but if the opponent's MODE_GHOST bit is set, ignore him
    4067 0000d7d0     b40e          move    *a0(ANIMODE),a14
         0000d7e0     0660  
    4068 0000d7f0     1e8e          btst    MODE_GHOST_BIT,a14
    4069 0000d800     cb09          jrnz    vkixskip_pcheck
    4070                    
    4071 0000d810     b401          move    *a0(OBJ_YPOSINT),a1,W
         0000d820     0130  
    4072 0000d830     b402          move    *a0(GROUND_Y),a2,W
         0000d840     0570  
    4073 0000d850     b48e          move    *a4(vkixOFFSET),a14
         0000d860     0000  
    4074 0000d870     41c2          add     a14,a2
    4075 0000d880     4841          cmp     a2,a1
    4076 0000d890     c609          jrle    vkixhit_gnd
    4077                    
    4078 0000d8a0           vkixskip_pcheck
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   94

    4079                    
    4080 0000d8a0     b5a0          move    *a13(OBJ_YPOSINT),a0
         0000d8b0     0130  
    4081 0000d8c0     b5a2          move    *a13(GROUND_Y),a2
         0000d8d0     0570  
    4082 0000d8e0     b48e          move    *a4(vkixOFFSET),a14
         0000d8f0     0000  
    4083 0000d900     41c2          add     a14,a2
    4084 0000d910     4840          cmp     a2,a0                   ;a0-a1
    4085 0000d920     c70d          jrgt    vkixno_gnd
    4086                    
    4087 0000d930           vkixhit_gnd
    4088 0000d930     2602          sll     16,a2
    4089 0000d940     b240          move    a2,*a0(OBJ_YPOS),L
         0000d950     0120  
    4090                    
    4091                            .REF    SMALL_BOUNCE
    4092 0000d960     0d5f          CALLA   SMALL_BOUNCE
         0000d970 00000000! 
    4093                    
    4094 0000d990     4c8e          move    a4,a14
    4095 0000d9a0     0b0e          addi    vkixSIZE,a14
         0000d9b0     0010  
    4096 0000d9c0     b3ca          move    a14,*a10(OANIPC),L
         0000d9d0     0030  
    4097 0000d9e0     c000          jruc    _next_command
         0000d9f0     f291  
    4098                    
    4099 0000da00           vkixno_gnd
    4100 0000da00     1820          movk    1,a0
    4101 0000da10     b00a          move    a0,*a10(OANICNT)        ;# ticks to hold cur frame
         0000da20     0050  
    4102 0000da30     0960          rets
    4103                    
    4104                    
    4105                    ********
    4106 0000da40           _ani_set_opp_xvel       ;112
    4107                    
    4108                    ;args:  .long (XVEL) .word (MODE)       ;if MODE=0  vel is absolute
    4109                                                            ;if MODE=1  vel is facing relative
    4110                                                            ;if MODE=2  vel is hit relative
    4111                                                            ;if MODE=3  vel is new_face relative
    4112                    
    4113 0000da40     4c8e          move    a4,a14
    4114 0000da50     0b0e          addi    30h,a14
         0000da60     0030  
    4115 0000da70     b3ca          move    a14,*a10(OANIPC),L
         0000da80     0030  
    4116                    
    4117 0000da90     b7ab          move    *a13(ATTACH_PROC),a11,L
         0000daa0     03e0  
    4118 0000dab0     b76e          move    *a11(ATTACH_PROC),a14,L
         0000dac0     03e0  
    4119 0000dad0     49ae          cmp     a13,a14
    4120 0000dae0     cb1a          jrne    scjwdone
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   95

    4121                    
    4122 0000daf0     9680          move    *a4+,a0,L
    4123 0000db00     9481          move    *a4+,a1
    4124 0000db10     ca15          jrz     scjwabs
    4125 0000db20     1421          dec     a1
    4126 0000db30     ca0e          jrz     scjwface
    4127 0000db40     1421          dec     a1
    4128 0000db50     ca06          jrz     scjwhit
    4129                    
    4130                    ;new_facing relative
    4131 0000db60     b5ae          move    *a13(NEW_FACING_DIR),a14
         0000db70     04d0  
    4132 0000db80     1f8e          btst    MOVE_RIGHT_BIT,a14
    4133 0000db90     cb0d          jrnz    scjwabs                 ;right
    4134 0000dba0     03a0          neg     a0                      ;left
    4135 0000dbb0     c00b          jruc    scjwabs
    4136                    
    4137 0000dbc0           scjwhit
    4138                    ;hit relative
    4139 0000dbc0     b5ae          move    *a13(PLYR_HIT_SIDE),a14
         0000dbd0     0550  
    4140 0000dbe0     1f8e          btst    MOVE_RIGHT_BIT,a14
    4141 0000dbf0     cb07          jrnz    scjwabs                 ;hit from right
    4142                    
    4143 0000dc00     03a0          neg     a0                      ;hit from left
    4144 0000dc10     c005          jruc    scjwabs
    4145 0000dc20           scjwface
    4146 0000dc20     b5ae          move    *a13(FACING_DIR),a14
         0000dc30     04c0  
    4147 0000dc40     1f8e          btst    MOVE_RIGHT_BIT,a14
    4148 0000dc50     cb01          jrnz    scjwabs                 ;right
    4149 0000dc60     03a0          neg     a0                      ;left
    4150 0000dc70           scjwabs
    4151 0000dc70     b20b          move    a0,*a11(OBJ_XVEL),L
         0000dc80     02d0  
    4152                    
    4153 0000dc90     c000  scjwdone        jruc    _next_command
         0000dca0     f266  
    4154                    
    4155                    ********
    4156 0000dcb0           _ani_set_attach ;113
    4157 0000dcb0     b7a0          move    *a13(WHOIHIT),a0,L
         0000dcc0     0500  
    4158 0000dcd0     b20d          move    a0,*a13(ATTACH_PROC),L
         0000dce0     03e0  
    4159 0000dcf0     b3a0          move    a13,*a0(ATTACH_PROC),L
         0000dd00     03e0  
    4160                    
    4161 0000dd10     b28a          move    a4,*a10(OANIPC),L
         0000dd20     0030  
    4162                    ;       jruc    _next_command
    4163 0000dd30     c000          jruc    _next_command1
         0000dd40     f25e  
    4164                    
    4165                    ********
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   96

    4166 0000dd50           _ani_inc_combo_count ;114
    4167 0000dd50     b5a0          move    *a13(COMBO_COUNT),a0
         0000dd60     0af0  
    4168 0000dd70     1020          inc     a0
    4169 0000dd80     b00d          move    a0,*a13(COMBO_COUNT)
         0000dd90     0af0  
    4170 0000dda0     0b40          CMPI    8,A0
         0000ddb0     fff7  
    4171 0000ddc0     cb05          JRNE    NO_BESERKER
    4172 0000ddd0     09c0          MOVI    HES_JUST_GONE_BERSERK,A0
         0000dde0     01aa  
    4173 0000ddf0     0d5f          CALLA   IF_SILENT_ADD_VOICE
         0000de00 00000000! 
    4174 0000de20           NO_BESERKER
    4175                    
    4176 0000de20     b7a0          MOVE    *a13(WHOIHIT),A0,L
         0000de30     0500  
    4177 0000de40     ca04          JRZ     PROBLEMS_SS
    4178 0000de50     09ce          MOVI    30,A14
         0000de60     001e  
    4179 0000de70     b1c0          move    a14,*a0(IMMOBILIZE_TIME)
         0000de80     0ae0  
    4180 0000de90           PROBLEMS_SS
    4181                    
    4182 0000de90     b28a          move    a4,*a10(OANIPC),L
         0000dea0     0030  
    4183                    ;       jruc    _next_command
    4184 0000deb0     c000          jruc    _next_command1
         0000dec0     f246  
    4185                    
    4186                    ********
    4187 0000ded0           _ani_clear_combo_count ;115
    4188 0000ded0     b5a0          move    *a13(COMBO_COUNT),a0
         0000dee0     0af0  
    4189 0000def0     ca17          jrz     ncrzstart_combo
    4190 0000df00     5600          CLR     A0
    4191 0000df10     b00d          move    a0,*a13(COMBO_COUNT)
         0000df20     0af0  
    4192 0000df30     b7a0          MOVE    *a13(ATTACH_PROC),A0,L
         0000df40     03e0  
    4193 0000df50     cb04          jrnz    ncrzok
    4194 0000df60     b7a0          MOVE    *a13(WHOIHIT),A0,L
         0000df70     0500  
    4195 0000df80     cb01          jrnz    ncrzok
    4196                    ;Fix
    4197 0000df90                   LOCKUP
    4198 0000dfa0           ncrzok
    4199                    ;       MOVE    *A0(GETUP_TIME),A14
    4200                    ;       JRZ     NO_WORRIES_MATEY
    4201                    ;Time opponent has to execute combo breaker
    4202 0000dfa0     57ce          clr     a14
    4203 0000dfb0     b1c0          move    a14,*a0(IMMOBILIZE_TIME)
         0000dfc0     0ae0  
    4204 0000dfd0     b1c0          MOVE    A14,*A0(GETUP_TIME)
         0000dfe0     0460  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   97

    4205 0000dff0     09ce          MOVI    10*60,A14
         0000e000     0258  
    4206 0000e010     b1c0          MOVE    A14,*A0(DELAY_METER)
         0000e020     0ad0  
    4207                    
    4208 0000e030     b28a          move    a4,*a10(OANIPC),L
         0000e040     0030  
    4209                    ;       jruc    _next_command
    4210 0000e050     c000          jruc    _next_command1
         0000e060     f22c  
    4211                    
    4212 0000e070           ncrzstart_combo
    4213                    ;problem here!
    4214                    ;Used to stuff a 1 in COMBO_COUNT.
    4215                    ;Mark now writes a 0 to COMBO_COUNT,
    4216                    ;Jake now skips the write altoghter.
    4217                    ;which is correct?
    4218                    ;       movk    1,a0
    4219 0000e070     5600          clr     a0
    4220 0000e080     b00d          move    a0,*a13(COMBO_COUNT)
         0000e090     0af0  
    4221 0000e0a0     b7a0          MOVE    *a13(ATTACH_PROC),A0,L
         0000e0b0     03e0  
    4222 0000e0c0     cb04          jrnz    ncrzok2
    4223 0000e0d0     b7a0          MOVE    *a13(WHOIHIT),A0,L
         0000e0e0     0500  
    4224 0000e0f0     cb01          jrnz    ncrzok2
    4225                    ;Fix
    4226 0000e100                   LOCKUP
    4227 0000e110           ncrzok2
    4228                    ;       MOVE    *A0(GETUP_TIME),A14
    4229                    ;       JRZ     NO_WORRIES_MATEY
    4230                    ;Time opponent has to execute combo breaker
    4231 0000e110     09ce          MOVI    80,A14
         0000e120     0050  
    4232 0000e130     b1c0          move    a14,*a0(IMMOBILIZE_TIME)
         0000e140     0ae0  
    4233 0000e150     05ae          move    @PCNT,a14
         0000e160 00000000! 
    4234 0000e180     b1c0          move    a14,*a0(ANTI_COMBO_TIME)                ;Time stamp
         0000e190     0b80  
    4235 0000e1a0     57ce          CLR     A14
    4236 0000e1b0     b1c0          MOVE    A14,*A0(GETUP_TIME)
         0000e1c0     0460  
    4237                    ;NO_WORRIES_MATEY
    4238 0000e1d0     09ce          MOVI    10*60,A14
         0000e1e0     0258  
    4239 0000e1f0     b1c0          MOVE    A14,*A0(DELAY_METER)
         0000e200     0ad0  
    4240                    
    4241 0000e210     b28a          move    a4,*a10(OANIPC),L
         0000e220     0030  
    4242                    ;       jruc    _next_command
    4243 0000e230     c000          jruc    _next_command1
         0000e240     f20e  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   98

    4244                    
    4245                    
    4246                    ********
    4247 0000e250           _ani_add_move ;116
    4248 0000e250     9487          move    *a4+,a7
    4249 0000e260     9485          move    *a4+,a5
    4250 0000e270     9486          move    *a4+,a6
    4251                    
    4252 0000e280     b7a0          MOVE    *A13(WHOIHIT),A0,L
         0000e290     0500  
    4253 0000e2a0     b40e          MOVE    *A0(PLYRMODE),A14
         0000e2b0     05c0  
    4254 0000e2c0     0b4e          CMPI    MODE_DEAD,A14
         0000e2d0     fff6  
    4255 0000e2e0     ca07          JREQ    NO_ADD_MORE_JUICE
    4256                    
    4257 0000e2f0     098f          mmtm    sp,a0,a4,a8,a10
         0000e300     88a0  
    4258 0000e310     0d5f          calla   ADD_TO_COMBO_COUNT
         0000e320 00000000! 
    4259 0000e340     09af          mmfm    sp,a0,a4,a8,a10
         0000e350     0511  
    4260                    
    4261 0000e360           NO_ADD_MORE_JUICE
    4262                    
    4263 0000e360     b28a          move    a4,*a10(OANIPC),L
         0000e370     0030  
    4264                    ;       jruc    _next_command
    4265 0000e380     c000          jruc    _next_command1
         0000e390     f1f9  
    4266                    
    4267                    ********
    4268                    ;
    4269                    ;if num_ticks is negative then use default value
    4270                    ;
    4271 0000e3a0           _ani_startattack ;117
    4272                    
    4273 0000e3a0                   STRUCT  0
    4274 0000e3a0                   WORD    btdxATT_TYPE
    4275 0000e3a0                   WORD    btdxNUM_TICKS
    4276 0000e3a0                   LABEL   btdxSIZE
    4277                    
    4278 0000e3a0     4c8e          move    a4,a14
    4279 0000e3b0     0b0e          addi    btdxSIZE,a14
         0000e3c0     0020  
    4280 0000e3d0     b3ca          move    a14,*a10(OANIPC),L
         0000e3e0     0030  
    4281                    
    4282 0000e3f0     b88d          move    *a4(btdxATT_TYPE),*a13(ATTACK_TYPE)
         0000e400     0000  
         0000e410     05e0  
    4283                    
    4284 0000e420     b481          move    *a4(btdxNUM_TICKS),a1
         0000e430     0010  
    4285 0000e440     c101          jrp     btdxok
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE   99

    4286                    
    4287 0000e450     1bc1          movk    30,a1                   ;default tick count
    4288 0000e460           btdxok
    4289 0000e460     05a0          move    @round_tickcount,a0
         0000e470 00000000! 
    4290 0000e490     4001          add     a0,a1
    4291 0000e4a0     b02d          move    a1,*a13(ATTACK_TIME)
         0000e4b0     05f0  
    4292                    
    4293 0000e4c0     c000          jruc    _next_command
         0000e4d0     f1e3  
    4294                    
    4295                    ********
    4296 0000e4e0           _ani_changeanim_tbl     ;118
    4297                    
    4298 0000e4e0                   STRUCT  0
    4299 0000e4e0                   LONG    kpurTABLE
    4300 0000e4e0                   LABEL   kpurEND
    4301                    
    4302 0000e4e0     b5a0          move    *a13(WRESTLERNUM),a0
         0000e4f0     0590  
    4303 0000e500                   X32     a0
    4304 0000e510     b68e          move    *a4(kpurTABLE),a14,L
         0000e520     0000  
    4305 0000e530     41c0          add     a14,a0
    4306 0000e540     8600          move    *a0,a0,L
    4307                    
    4308 0000e550     b20a          move    a0,*a10(OANIBASE),L
         0000e560     0010  
    4309 0000e570     b20a          move    a0,*a10(OANIPC),L
         0000e580     0030  
    4310                    
    4311 0000e590     c000          jruc    _next_command
         0000e5a0     f1d6  
    4312                    
    4313                    ********
    4314 0000e5b0           _ani_if_rptcount_ge     ;119
    4315                    
    4316 0000e5b0                   STRUCT  0
    4317 0000e5b0                   WORD    noulVAL
    4318 0000e5b0                   LONG    noulADDR
    4319 0000e5b0                   LABEL   noulSIZE
    4320                    
    4321 0000e5b0     4c8e          move    a4,a14
    4322 0000e5c0     0b0e          addi    noulSIZE,a14
         0000e5d0     0030  
    4323 0000e5e0     b3ca          move    a14,*a10(OANIPC),L
         0000e5f0     0030  
    4324                    
    4325 0000e600     b5ae          move    *a13(RPT_COUNT),a14
         0000e610     07d0  
    4326 0000e620     b480          move    *a4(noulVAL),a0,W
         0000e630     0000  
    4327 0000e640     480e          cmp     a0,a14
    4328 0000e650     c403          jrlt    noulfail
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE  100

    4329                    
    4330 0000e660     ba8a          move    *a4(noulADDR),*a10(OANIPC),L    ;take branch
         0000e670     0010  
         0000e680     0030  
    4331 0000e690           noulfail
    4332 0000e690     c000          jruc    _next_command
         0000e6a0     f1c6  
    4333                    
    4334                    ********
    4335 0000e6b0           _ani_if_rptcount_lt     ;120
    4336                    
    4337 0000e6b0                   STRUCT  0
    4338 0000e6b0                   WORD    bjsnVAL
    4339 0000e6b0                   LONG    bjsnADDR
    4340 0000e6b0                   LABEL   bjsnSIZE
    4341                    
    4342 0000e6b0     4c8e          move    a4,a14
    4343 0000e6c0     0b0e          addi    bjsnSIZE,a14
         0000e6d0     0030  
    4344 0000e6e0     b3ca          move    a14,*a10(OANIPC),L
         0000e6f0     0030  
    4345                    
    4346 0000e700     b5ae          move    *a13(RPT_COUNT),a14
         0000e710     07d0  
    4347 0000e720     b480          move    *a4(bjsnVAL),a0,W
         0000e730     0000  
    4348 0000e740     480e          cmp     a0,a14
    4349 0000e750     c503          jrge    bjsnfail
    4350                    
    4351 0000e760     ba8a          move    *a4(bjsnADDR),*a10(OANIPC),L    ;take branch
         0000e770     0010  
         0000e780     0030  
    4352 0000e790           bjsnfail
    4353 0000e790     c000          jruc    _next_command
         0000e7a0     f1b6  
    4354                    
    4355                    
    4356                    ********
    4357 0000e7b0           _ani_waithitany ;121
    4358                            ;holds on current frame until you hit the ground or your opponent.
    4359                            ;NOTE:  This doesn't use the WAITHITOPP bit.  We poll for a hit,
    4360                            ; which, now that I think about it, was probably the better way
    4361                            ; to implement WAITHITOPP anyway...
    4362                            ;ALSO NOTE:  This doesn't work if you're attached.  People who
    4363                            ; are attached have no business waiting for a blow to land.
    4364                    
    4365                            ;have we hit the ground?
    4366 0000e7b0     b5a0          move    *a13(OBJ_YPOSINT),a0
         0000e7c0     0130  
    4367 0000e7d0     b5a1          move    *a13(GROUND_Y),a1
         0000e7e0     0570  
    4368 0000e7f0     4820          cmp     a1,a0                   ;a0-a1
    4369 0000e800     c704          jrgt    konmno_gnd
    4370                    
    4371                            ;hit ground.  make noise and quit.
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE  101

    4372 0000e810     0d5f          calla   SMALL_BOUNCE
         0000e820 00000000! 
    4373 0000e840     c004          jruc    konmhit
    4374                    
    4375 0000e850           konmno_gnd      ;have we hit our opponent?
    4376 0000e850     b5ae          move    *a13(ANIMODE),a14
         0000e860     0660  
    4377 0000e870     1ece          btst    MODE_STATUS_BIT,a14
    4378 0000e880     ca04          jrz     konmno_hit
    4379                    
    4380 0000e890     b28a  konmhit move    a4,*a10(OANIPC),L
         0000e8a0     0030  
    4381                    ;       jruc    _next_command
    4382 0000e8b0     c000          jruc    _next_command1
         0000e8c0     f1a6  
    4383                    
    4384 0000e8d0     1820  konmno_hit      movk    1,a0
    4385 0000e8e0     b00a          move    a0,*a10(OANICNT)        ;# ticks to hold cur frame
         0000e8f0     0050  
    4386 0000e900     0960          rets
    4387                    
    4388                    ********
    4389 0000e910           _ani_draw_name  ;122
    4390                    
    4391                    ;FIX!!
    4392                    ;This is bog!  Check to see if we want messages before CREATE!
    4393 0000e910     4da8          move    a13,a8
    4394 0000e920                   CREATE  MESSAGE_PID,MOVE_NAME_ANNC
    4395 0000e9a0     948e          move    *a4+,a14
    4396 0000e9b0     b3c0          move    a14,*a0(PA10),L
         0000e9c0     0080  
    4397                    
    4398 0000e9d0     b28a          move    a4,*a10(OANIPC),L
         0000e9e0     0030  
    4399                    ;       jruc    _next_command
    4400 0000e9f0     c000          jruc    _next_command1
         0000ea00     f192  
    4401                    
    4402                    ********
    4403 0000ea10           _ani_set_idiot  ;123
    4404                            ;Allow players off screen on toss outs
    4405 0000ea10     09c0          movi    80,a0
         0000ea20     0050  
    4406 0000ea30     0580          move    a0,@allow_offscrn
         0000ea40 00000000! 
    4407                    
    4408 0000ea60     b28a          move    a4,*a10(OANIPC),L
         0000ea70     0030  
    4409                    ;       jruc    _next_command
    4410 0000ea80     c000          jruc    _next_command1
         0000ea90     f189  
    4411                    
    4412                    ********
    4413 0000eaa0           _ani_attchimage2 ;124
    4414                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE  102

    4415 0000eaa0                   STRUCT  0
    4416 0000eaa0                   LONG    xbyjIMAGE
    4417 0000eaa0                   WORD    xbyjXOFF
    4418 0000eaa0                   WORD    xbyjYOFF
    4419 0000eaa0                   WORD    xbyjZOFF
    4420 0000eaa0                   LABEL   xbyjSIZE
    4421                    
    4422                    ;       move    *a4(xbyjXOFF),*a13(ATTACHIMG_XOFF)
    4423                    ;       move    *a4(xbyjYOFF),*a13(ATTACHIMG_YOFF)
    4424                    
    4425 0000eaa0     ba8d          move    *a4(xbyjXOFF),*a13(ATTACHIMG_XOFF),L
         0000eab0     0020  
         0000eac0     0400  
    4426 0000ead0     b88d          move    *a4(xbyjZOFF),*a13(ATTACHIMG_ZOFF)
         0000eae0     0040  
         0000eaf0     0420  
    4427 0000eb00     b680          move    *a4(xbyjIMAGE),a0,L
         0000eb10     0000  
    4428                    
    4429 0000eb20     0b04          addi    xbyjSIZE,a4
         0000eb30     0050  
    4430 0000eb40     c000          jruc    attach_cont69
         0000eb50     f963  
    4431                    
    4432                    ********
    4433 0000eb60           _ani_ground     ;125
    4434 0000eb60     b5a0          move    *a13(GROUND_Y),a0
         0000eb70     0570  
    4435 0000eb80     b00d          move    a0,*a13(OBJ_YPOSINT)
         0000eb90     0130  
    4436 0000eba0     b28a          move    a4,*a10(OANIPC),L
         0000ebb0     0030  
    4437                    ;       jruc    _next_command
    4438 0000ebc0     c000          jruc    _next_command1
         0000ebd0     f175  
    4439                    
    4440                    ********
    4441 0000ebe0           _ani_rot        ;126
    4442                    
    4443 0000ebe0     182e          movk    1,a14
    4444 0000ebf0     b1ca          move    a14,*a10(OANICNT)
         0000ec00     0050  
    4445 0000ec10     0960          rets
    4446                    
    4447                    ********
    4448 0000ec20           _ani_scroll_ctrl;127
    4449                    
    4450 0000ec20                   STRUCT  0
    4451 0000ec20                   WORD    nakoY_VAL
    4452 0000ec20                   LABEL   nakoSIZE
    4453                    
    4454 0000ec20     4c8e          move    a4,a14
    4455 0000ec30     0b0e          addi    nakoSIZE,a14
         0000ec40     0010  
    4456 0000ec50     b3ca          move    a14,*a10(OANIPC),L
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE  103

         0000ec60     0030  
    4457                    
    4458 0000ec70     b48e          move    *a4(nakoY_VAL),a14
         0000ec80     0000  
    4459 0000ec90     ce02          jrn     nakocont
    4460 0000eca0     b1cd          move    a14,*a13(SCROLL_Y)
         0000ecb0     0d90  
    4461                    
    4462 0000ecc0     b5ae  nakocont        move    *a13(STATUS_FLAGS),a14
         0000ecd0     0b50  
    4463 0000ece0     0bae          ori     M_SCROLL_CTRL,a14
         0000ecf0 00000400  
    4464 0000ed10     b1cd          move    a14,*a13(STATUS_FLAGS)
         0000ed20     0b50  
    4465                    
    4466 0000ed30     c000          jruc    _next_command
         0000ed40     f15c  
    4467                    
    4468                    ********
    4469 0000ed50           _ani_clear_climb        ;128
    4470 0000ed50     57ce          clr     a14
    4471 0000ed60     b1cd          move    a14,*a13(CLIMBING_THRU)
         0000ed70     07e0  
    4472 0000ed80     102e          inc     a14
    4473 0000ed90     b1cd          move    a14,*a13(SAFE_TIME)
         0000eda0     0ac0  
    4474                    
    4475 0000edb0     b28a          move    a4,*a10(OANIPC),L
         0000edc0     0030  
    4476                    ;       jruc    _next_command
    4477 0000edd0     c000          jruc    _next_command1
         0000ede0     f154  
    4478                    
    4479                    ********
    4480 0000edf0           _ani_opp_face   ;129
    4481                    
    4482 0000edf0     9480          move    *a4+,a0
    4483 0000ee00     b28a          move    a4,*a10(OANIPC),L
         0000ee10     0030  
    4484                    
    4485 0000ee20     b7ab          move    *a13(ATTACH_PROC),a11,L
         0000ee30     03e0  
    4486 0000ee40     b76e          move    *a11(ATTACH_PROC),a14,L
         0000ee50     03e0  
    4487 0000ee60     49ae          cmp     a13,a14
    4488 0000ee70     cb09          jrne    ctxedone
    4489                    
    4490 0000ee80     b56e          move    *a11(OBJ_CONTROL),a14
         0000ee90     0780  
    4491 0000eea0     1f6e          btst    B_FLIPH,a14
    4492 0000eeb0     ca03          jrz     ctxeno_flip
    4493 0000eec0     0bc0          xori    MOVE_LEFT|MOVE_RIGHT,a0
         0000eed0 0000000c  
    4494 0000eef0           ctxeno_flip
    4495 0000eef0     b00b          move    a0,*a11(FACING_DIR)
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE  104

         0000ef00     04c0  
    4496 0000ef10           ctxedone
    4497 0000ef10     c000          jruc    _next_command
         0000ef20     f13e  
    4498                    
    4499                    ********
    4500 0000ef30           _ani_setflag    ;129
    4501                    
    4502 0000ef30     b7ae          move    *a13(STATUS_FLAGS),a14,L
         0000ef40     0b50  
    4503 0000ef50     9680          move    *a4+,a0,L
    4504 0000ef60     540e          or      a0,a14
    4505 0000ef70     b3cd          move    a14,*a13(STATUS_FLAGS),L
         0000ef80     0b50  
    4506 0000ef90     b28a          move    a4,*a10(OANIPC),L
         0000efa0     0030  
    4507 0000efb0     c000          jruc    _next_command1
         0000efc0     f136  
    4508                    
    4509                    *****************************************************************************
    4510                    * used inside anim commands - doesn't call animate_wrestler
    4511                    ;a0 = * animation script
    4512                    ;a2 = * wrestler process
    4513                    
    4514 0000efd0            SUBR   change_anim_anim
    4515                    
    4516 0000efd0     b202          move    a0,*a2(ANIBASE),L
         0000efe0     0670  
    4517 0000eff0     b202          move    a0,*a2(ANIPC),L
         0000f000     0690  
    4518                    
    4519 0000f010     09e0          movi    GRAVITY,a0              ;reset gravity
         0000f020 00008000  
    4520 0000f040     b202          move    a0,*a2(OBJ_GRAVITY),L
         0000f050     0330  
    4521 0000f060     5600          clr     a0
    4522 0000f070     b002          move    a0,*a2(ANIMODE)
         0000f080     0660  
    4523 0000f090     1820          movk    1,a0
    4524 0000f0a0     b002          move    a0,*a2(ANICNT)
         0000f0b0     06b0  
    4525                    
    4526 0000f0c0     0960          rets
    4527                    
    4528                    *****************************************************************************
    4529                    ;primary animation
    4530                    ;a0 = * animation script
    4531                    
    4532 0000f0d0            SUBR   change_anim1
    4533                    
    4534 0000f0d0     b5a2          move    *a13(ANIMODE),a2
         0000f0e0     0660  
    4535 0000f0f0     1fe2          btst    MODE_END_BIT,a2         ;if anim has ended, then
    4536 0000f100     cb04          jrnz    change_anim1a           ;always restart it
    4537                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE  105

    4538 0000f110     b7a2          move    *a13(ANIBASE),a2,L
         0000f120     0670  
    4539 0000f130     4802          cmp     a0,a2
    4540 0000f140     ca11          jreq    efmqno_change
    4541                    
    4542 0000f150            SUBR   change_anim1a
    4543                    
    4544 0000f150     b20d          move    a0,*a13(ANIBASE),L
         0000f160     0670  
    4545 0000f170     b20d          move    a0,*a13(ANIPC),L
         0000f180     0690  
    4546                    
    4547 0000f190     5600          clr     a0
    4548 0000f1a0     b00d          move    a0,*a13(ANIMODE)
         0000f1b0     0660  
    4549 0000f1c0     1820          movk    1,a0
    4550 0000f1d0     b00d          move    a0,*a13(ANICNT)
         0000f1e0     06b0  
    4551                    
    4552 0000f1f0     09e0          movi    GRAVITY,a0              ;reset gravity
         0000f200 00008000  
    4553 0000f220     b20d          move    a0,*a13(OBJ_GRAVITY),L
         0000f230     0330  
    4554 0000f240     0d3f          callr   animate_wrestler1
         0000f250     f0ed  
    4555                    
    4556 0000f260           efmqno_change
    4557 0000f260     0960          rets
    4558                    
    4559                    *****************************************************************************
    4560                    ;secondary animation
    4561                    ;a0 = * animation script
    4562                    
    4563 0000f270            SUBR   change_anim2
    4564                    
    4565 0000f270     b5a2          move    *a13(ANIMODE2),a2
         0000f280     06e0  
    4566 0000f290     1fe2          btst    MODE_END_BIT,a2         ;if anim has ended, then
    4567 0000f2a0     cb04          jrnz    change_anim2a           ;always restart it
    4568                    
    4569 0000f2b0     b7a2          move    *a13(ANIBASE2),a2,L
         0000f2c0     06f0  
    4570 0000f2d0     4802          cmp     a0,a2
    4571 0000f2e0     ca0c          jreq    vippno_change
    4572                    
    4573 0000f2f0            SUBR   change_anim2a
    4574                    
    4575 0000f2f0     b20d          move    a0,*a13(ANIBASE2),L
         0000f300     06f0  
    4576 0000f310     b20d          move    a0,*a13(ANIPC2),L
         0000f320     0710  
    4577                    
    4578 0000f330     5600          clr     a0
    4579 0000f340     b00d          move    a0,*a13(ANIMODE2)
         0000f350     06e0  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE  106

    4580 0000f360     1820          movk    1,a0
    4581 0000f370     b00d          move    a0,*a13(ANICNT2)
         0000f380     0730  
    4582                    
    4583 0000f390     0d3f          callr   animate_wrestler2
         0000f3a0     f0e2  
    4584                    
    4585 0000f3b0           vippno_change
    4586 0000f3b0     0960          rets
    4587                    
    4588                    *****************************************************************************
    4589                    
    4590 0000f3c0            SUBR   slaveanim_tbl
    4591                    
    4592 0000f3c0 0000f4e0'  .long wres_slave_anim  ;Bret
    4593 0000f3e0 0000f4e0'  .long wres_slave_anim  ;Razor
    4594 0000f400 0000f4e0'  .long wres_slave_anim  ;Taker
    4595 0000f420 0000f4e0'  .long wres_slave_anim  ;Yokozuna
    4596 0000f440 0000f4e0'  .long wres_slave_anim  ;Shawn
    4597 0000f460 0000f4e0'  .long wres_slave_anim  ;BamBam
    4598 0000f480 0000f4e0'  .long wres_slave_anim  ;Doink
    4599 0000f4a0 0000f4e0'  .long wres_slave_anim  ;Adam
    4600 0000f4c0 0000f4e0'  .long wres_slave_anim  ;Lex
    4601                    
    4602                    
    4603 0000f4e0            SUBR   wres_slave_anim
    4604                    
    4605 0000f4e0     8002          .word   ANI_SETMODE,MODE_UNINT+MODE_NOAUTOFLIP+MODE_NOGRAVITY
    4606 0000f500     8003          .word   ANI_ZEROVELS
    4607 0000f510     8026          .word   ANI_SETSPEED,100h
    4608 0000f530     8049          .word   ANI_END
    4609                    
    4610                    *****************************************************************************
    4611                    
    4612 0000f540            SUBR   set_images
    4613                    
    4614 0000f540                   PUSH    a13
    4615                    
    4616 0000f550     09e1          movi    process_ptrs,a1
         0000f560 00000000! 
    4617 0000f580     09c2          movi    NUM_WRES,a2
         0000f590     0007  
    4618 0000f5a0           kjbrslp
    4619 0000f5a0     962d          move    *a1+,a13,L
    4620 0000f5b0     ca06          jrz     kjbrskp_mtp
    4621 0000f5c0                   PUSH    a1,a2
    4622 0000f5e0     0d3f          callr   kjbrset_image
         0000f5f0     0005  
    4623 0000f600                   PULL    a1,a2
    4624 0000f620           kjbrskp_mtp
    4625 0000f620     3d22          dsj     a2,kjbrslp
    4626                    
    4627 0000f630                   PULL    a13
    4628 0000f640     0960          rets
    4629                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE  107

    4630                    
    4631 0000f650           kjbrset_image
    4632                    
    4633                    ;       CLR     A5
    4634                    ;       MOVE    A5,*A13(SCREENY)
    4635                    
    4636 0000f650     b7a0          move    *a13(OBJ_ZPOS),a0,L
         0000f660     0140  
    4637 0000f670     0ba0          ori     [01000h,0],a0
         0000f680 10000000  
    4638 0000f6a0     b5ae          move    *a13(INRING),a14
         0000f6b0     0560  
    4639 0000f6c0     ca07          jrz     kjbrinring
    4640 0000f6d0     0b60          cmpi    [015ach,0],a0
         0000f6e0 ea53ffff  
    4641 0000f700     c703          jrgt    kjbrinring
    4642                    
    4643 0000f710     0d00          subi    [01e5h,0],a0            ;below mat
         0000f720 fe1affff  
    4644 0000f740           kjbrinring
    4645 0000f740     b20d          move    a0,*a13(OBJ_PRIORITY),L
         0000f750     0160  
    4646                    
    4647                    
    4648 0000f760     b7a5          move    *a13(OBJ_XPOS),a5,L     ;x val
         0000f770     0100  
    4649                    
    4650 0000f780     09c0          movi    Y_SCALE_MULTIPLIER,a0
         0000f790     3566  
    4651 0000f7a0     b5a1          move    *a13(OBJ_ZPOSINT),a1
         0000f7b0     0150  
    4652 0000f7c0     5e01          mpyu    a0,a1
    4653 0000f7d0     4c26          move    a1,a6                   ;y val
    4654                    
    4655 0000f7e0     b7a3          move    *a13(OBJ_BASE),a3,L
         0000f7f0     0760  
    4656                    
    4657                    
    4658 0000f800     4c60          move    a3,a0
    4659 0000f810     18c1          movk    MAX_PIECES,a1
    4660 0000f820     09ee          movi    [-100,0],a14            ;set all images offscreen
         0000f830 ff9c0000  
    4661 0000f850     b7a2          move    *a13(OBJ_PRIORITY),a2,L
         0000f860     0160  
    4662 0000f870     56e7          clr     a7
    4663 0000f880           kjbrlp
    4664 0000f880     9608          move    *a0+,a8,L
    4665 0000f890     b2e8          move    a7,*a8(OSAG),L
         0000f8a0     0110  
    4666 0000f8b0     b3c8          move    a14,*a8(OXVAL),L
         0000f8c0     0080  
    4667 0000f8d0     b2c8          move    a6,*a8(OYVAL),L         ;keep updating YVAL to keep priorities
         0000f8e0     00a0  
    4668 0000f8f0     b248          move    a2,*a8(OZVAL),L
         0000f900     00c0  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE  108

    4669 0000f910     3d41          dsj     a1,kjbrlp
    4670                    
    4671                    ;       move    *a13(OBJ_CONTROL),a7    ;flip bits & pixel ops
    4672                    ;       andni   00111b,a7
    4673                    ;       movi    DMAWNZ,a0
    4674                    ;       andi    01111b,a0
    4675                    ;       or      a0,a7
    4676                    
    4677 0000f920     b5a7          move    *a13(OBJ_CONTROL),a7    ;flip bits & pixel ops
         0000f930     0780  
    4678 0000f940     0b87          andi    0110000b,a7
         0000f950 ffffffcf  
    4679 0000f970     0ba7          ori     DMAWNZ,a7
         0000f980 00008002  
    4680                    
    4681 0000f9a0     574a          clr     a10                     ;x offset
    4682 0000f9b0     b5ab          move    *a13(GROUND_Y),a11      ;y offset
         0000f9c0     0570  
    4683                    
    4684                    
    4685                    ;       move    *a13(CUR_FRAME),a0,L
    4686                    ;       move    *a0(12*16),a0           ;shadow index
    4687 0000f9d0     5600          clr     a0                      ;<------temp!!!!!!
    4688 0000f9e0     b00d          move    a0,*a13(PLYR_SHADOW)
         0000f9f0     0620  
    4689                    ;       X32     a0
    4690                    ;       addi    shadows,a0
    4691                    ;       move    *a0,a0,L
    4692                    
    4693 0000fa00     09e0          movi    shadow,a0
         0000fa10 00000000! 
    4694                    
    4695                    ;make shadow low priority
    4696                    
    4697 0000fa30     b7ae          move    *a13(OBJ_PRIORITY),a14,L
         0000fa40     0160  
    4698 0000fa50                   PUSH    a14
    4699                    
    4700 0000fa60     09ee          movi    [013c8h,0],a14          ;inside ring
         0000fa70 13c80000  
    4701 0000fa90     b5a1          move    *a13(INRING),a1
         0000faa0     0560  
    4702 0000fab0     ca03          jrz     kjbrin
    4703 0000fac0     09ee          movi    [0106Ah,0],a14          ;outside ring
         0000fad0 106a0000  
    4704 0000faf0           kjbrin
    4705 0000faf0     b3cd          move    a14,*a13(OBJ_PRIORITY),L
         0000fb00     0160  
    4706                    
    4707 0000fb10     0d3f          callr   kjbrplot_object         ;plot shadow
         0000fb20     00d5  
    4708 0000fb30                   PULL    a14
    4709 0000fb40     b3cd          move    a14,*a13(OBJ_PRIORITY),L
         0000fb50     0160  
    4710                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE  109

    4711 0000fb60     b500          move    *a8(OXPOS),a0
         0000fb70     0090  
    4712                    
    4713 0000fb80     b5ae          move    *a13(ANIMODE),a14
         0000fb90     0660  
    4714 0000fba0     1e6e          btst    MODE_NOSHADOW_BIT,a14
    4715 0000fbb0     ca01          jrz     kjbrshadow_on
    4716 0000fbc0     5600          clr     a0
    4717 0000fbd0           kjbrshadow_on
    4718 0000fbd0     0b80          andni   1,a0
         0000fbe0 00000001  
    4719 0000fc00     05a1          move    @PCNT,a1
         0000fc10 00000000! 
    4720 0000fc30     0b81          andi    1,a1
         0000fc40 fffffffe  
    4721 0000fc60     5420          or      a1,a0
    4722 0000fc70     b501          move    *a8(OYPOS),a1
         0000fc80     00b0  
    4723 0000fc90     0b81          andi    1,a1
         0000fca0 fffffffe  
    4724 0000fcc0     5620          xor     a1,a0
    4725 0000fcd0     b008          move    a0,*a8(OXPOS)           ;shake shadow
         0000fce0     0090  
    4726                    
    4727                            ;leave him off if in mode_invisible
    4728 0000fcf0     b5ae          move    *a13(ANIMODE),a14
         0000fd00     0660  
    4729 0000fd10     1e0e          btst    MODE_INVISIBLE_BIT,a14
    4730 0000fd20     cb4b          jrnz    kjbrdone2
    4731                    
    4732                    
    4733 0000fd30     b5a7          move    *a13(OBJ_CONTROL),a7    ;flip bits & pixel ops
         0000fd40     0780  
    4734 0000fd50     0b87          andi    0111111b,a7
         0000fd60 ffffffc0  
    4735                    
    4736                    
    4737 0000fd80     574a          clr     a10                     ;x offset
    4738 0000fd90     b5ab          move    *a13(OBJ_YPOSINT),a11   ;y offset
         0000fda0     0130  
    4739                    
    4740                    
    4741 0000fdb0     b7a0          move    *a13(CUR_FRAME),a0,L
         0000fdc0     06c0  
    4742 0000fdd0     0d3f          callr   kjbrplot_object         ;image
         0000fde0     00a9  
    4743                    
    4744 0000fdf0     b5a1          move    *a13(OBJ_PAL),a1
         0000fe00     07a0  
    4745 0000fe10     b028          move    a1,*a8(OPAL)
         0000fe20     0150  
    4746                    
    4747                    ;       move    *a0(-10h),a4            ;# pieces
    4748 0000fe30     b404          move    *a0(IPCOUNT),a4         ;# pieces
         0000fe40     fff0  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE  110

    4749                    
    4750                            .if DEBUG
    4751                            .bss    part_count,16
    4752                            ;part count check
    4753                            move    a4,@part_count
    4754                            .endif
    4755                    
    4756                    ;       addi    (13+4-7)*16,a0          ;1st header
    4757 0000fe50     0b00          addi    IANI2Y,a0               ;1st header
         0000fe60     0080  
    4758 0000fe70           kjbrloop1
    4759 0000fe70     1424          dec     a4
    4760 0000fe80     ca09          jrz     kjbrdone1
    4761                    ;       addi    7*16,a0
    4762 0000fe90     0b00          addi    (ICBZ-IANI2Y),a0
         0000fea0     0070  
    4763 0000feb0     0d3f          callr   kjbrplot_object         ;image
         0000fec0     009b  
    4764                    
    4765 0000fed0     b5a1          move    *a13(OBJ_PAL),a1
         0000fee0     07a0  
    4766 0000fef0     b028          move    a1,*a8(OPAL)
         0000ff00     0150  
    4767                    
    4768 0000ff10     c0f5          jruc    kjbrloop1
    4769 0000ff20           kjbrdone1
    4770                    
    4771 0000ff20     b7a9          move    *a13(CUR_FRAME),a9,L
         0000ff30     06c0  
    4772 0000ff40     b72e          move    *a9(IANI2X),a14,L               ;secondary X & Y
         0000ff50     0070  
    4773 0000ff60     102e          inc     a14                             ;should be 0
    4774 0000ff70     ca22          jrz     kjbrno_2nd_piece
    4775                    
    4776 0000ff80     b52a          move    *a9(IANIOFFX),a10               ;display x offset
         0000ff90     0020  
    4777 0000ffa0     b52e          move    *a9(IANI2X),a14                 ;secondary X
         0000ffb0     0070  
    4778 0000ffc0     45ca          sub     a14,a10
    4779                    
    4780 0000ffd0     b521          move    *a9(IANIOFFY),a1                ;display y offset
         0000ffe0     0030  
    4781 0000fff0     b52e          move    *a9(IANI2Y),a14                 ;secondary Y
         00010000     0080  
    4782 00010010     45c1          sub     a14,a1
    4783 00010020     402b          add     a1,a11
    4784                    
    4785 00010030     b7a0          move    *a13(CUR_FRAME2),a0,L
         00010040     0740  
    4786 00010050     0d3f          callr   kjbrplot_object
         00010060     0081  
    4787                    
    4788 00010070     b5a1          move    *a13(OBJ_PAL),a1
         00010080     07a0  
    4789 00010090     b028          move    a1,*a8(OPAL)
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE  111

         000100a0     0150  
    4790                    
    4791                    ;       move    *a0(-10h),a4            ;# pieces
    4792 000100b0     b404          move    *a0(IPCOUNT),a4         ;# pieces
         000100c0     fff0  
    4793                    
    4794                            .if DEBUG
    4795                            ;part count check
    4796                            move    @part_count,a14
    4797                            add     a4,a14
    4798                            cmpi    5,a14
    4799                            jrle    kjbrokay
    4800                            LOCKUP  ;too many pieces!!!
    4801                    kjbrokay
    4802                            .endif
    4803                    
    4804                    ;       addi    (13+4-7)*16,a0          ;1st header
    4805 000100d0     0b00          addi    IANI2Y,a0               ;1st header
         000100e0     0080  
    4806 000100f0           kjbrloop2
    4807 000100f0     1424          dec     a4
    4808 00010100     ca0d          jrz     kjbrdone2
    4809                    ;       addi    7*16,a0
    4810 00010110     0b00          addi    (ICBZ-IANI2Y),a0
         00010120     0070  
    4811 00010130     0d3f          callr   kjbrplot_object         ;image
         00010140     0073  
    4812                    
    4813 00010150     b5a1          move    *a13(OBJ_PAL),a1
         00010160     07a0  
    4814 00010170     b028          move    a1,*a8(OPAL)
         00010180     0150  
    4815                    
    4816 00010190     c0f5          jruc    kjbrloop2
    4817                    
    4818 000101a0           kjbrno_2nd_piece
    4819 000101a0     09c0          movi    MODE_END,a0             ;don't bother animating
         000101b0     0001  
    4820 000101c0     b00d          move    a0,*a13(ANIMODE2)       ;if no 2nd piece
         000101d0     06e0  
    4821                    
    4822 000101e0           kjbrdone2
    4823                    
    4824                    ;       move    a13,a3
    4825                    ;       addi    ATTACH_IMG1,a3
    4826                    ;       movk    4,a4
    4827                    ;kjbrattloop
    4828                    ;       move    *a3+,a8,L
    4829                    ;       jrz     kjbrskip
    4830                    
    4831                    ;set the x,y & z of image
    4832                    ;;      LOCKUP
    4833                    
    4834 000101e0     b7a8          move    *a13(ATTIMG_IMG),a8,L
         000101f0     08c0  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE  112

    4835 00010200     b7a0          move    *a13(ATTIMG_CUR_FRAME),a0,L
         00010210     08e0  
    4836 00010220     cb08          jrnz    kjbronscr
    4837                    
    4838 00010230     b208          move    a0,*a8(OXVAL),L
         00010240     0080  
    4839 00010250     09e0          movi    [-100,0],a0                     ;set all images offscreen
         00010260 ff9c0000  
    4840 00010280     b208          move    a0,*a8(OYVAL),L
         00010290     00a0  
    4841 000102a0     0960          rets
    4842                    
    4843 000102b0           kjbronscr
    4844 000102b0     b7a1          move    *a13(ATTIMG_LAST_FRAME),a1,L
         000102c0     0900  
    4845 000102d0     4801          cmp     a0,a1
    4846 000102e0     ca27          jreq    kjbrno_change
    4847                    
    4848                    ;image has just changed
    4849                    
    4850 000102f0     b7a8          move    *a13(ATTIMG_IMG),a8,L
         00010300     08c0  
    4851 00010310     b208          move    a0,*a8(OIMG),L
         00010320     0170  
    4852 00010330     ba08          move    *a0(0),*a8(OSIZE),L
         00010340     0000  
         00010350     0130  
    4853 00010360     ba08          move    *a0(ISAG),*a8(OSAG),L
         00010370     0040  
         00010380     0110  
    4854                    
    4855                            .if 1
    4856 00010390     b600          move    *a0(ICMAP),a0,L
         000103a0     0070  
    4857                    
    4858                            .ref    pal_getf
    4859 000103b0     0d5f          calla   pal_getf
         000103c0 00000000! 
    4860                    ;;;     calla   pal_find
    4861 000103e0     cb01          jrnz    kjbrAOK
    4862                    
    4863 000103f0                   LOCKUP  ;can't get palette
    4864                    
    4865 00010400           kjbrAOK
    4866 00010400     b008          move    a0,*a8(OPAL)
         00010410     0150  
    4867                            .endif
    4868 00010420     b700          move    *a8(OIMG),a0,L
         00010430     0170  
    4869 00010440     bc08          movb    *a0(ICTRL+7),*a8(OCTRL+7)       ;Write 5 z comp bits + bits pp
         00010450     0067  
         00010460     00f7  
    4870                    
    4871 00010470     b5a7          move    *a13(OBJ_CONTROL),a7    ;flip bits & pixel ops
         00010480     0780  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE  113

    4872 00010490     0b87          andi    0111111b,a7
         000104a0 ffffffc0  
    4873 000104c0     0546          setf    6,0,0
    4874 000104d0     b0e8          move    a7,*a8(OCTRL)                   ;Write 6 low bits
         000104e0     00f0  
    4875 000104f0     0570          setf    16,1,0
    4876                    
    4877 00010500     b9a8          move    *a13(OBJ_CONST),*a8(OCONST)
         00010510     0790  
         00010520     0160  
    4878                    
    4879 00010530     bbad          move    *a13(ATTIMG_CUR_FRAME),*a13(ATTIMG_LAST_FRAME),L
         00010540     08e0  
         00010550     0900  
    4880                    
    4881 00010560           kjbrno_change
    4882 00010560     5621          clr     a1
    4883 00010570     b5a0          move    *a13(ATTACHIMG_XOFF),a0
         00010580     0400  
    4884 00010590     b5ae          move    *a13(OBJ_CONTROL),a14
         000105a0     0780  
    4885 000105b0     1f6e          btst    B_FLIPH,a14
    4886 000105c0     ca03          jrz     kjbrno_flip
    4887 000105d0     09c1          movi    M_FLIPH,a1
         000105e0     0010  
    4888 000105f0     03a0          neg     a0
    4889 00010600           kjbrno_flip
    4890 00010600     2600          sll     16,a0
    4891 00010610     40a0          add     a5,a0
    4892 00010620     b208          move    a0,*a8(OXVAL),L
         00010630     0080  
    4893                    
    4894 00010640     b500          move    *a8(OFLAGS),a0
         00010650     00e0  
    4895 00010660     0b80          andni   M_FLIPH,a0
         00010670 00000010  
    4896 00010690     5420          or      a1,a0
    4897 000106a0     b008          move    a0,*a8(OFLAGS)
         000106b0     00e0  
    4898                    
    4899 000106c0     b5a0          move    *a13(ATTACHIMG_YOFF),a0
         000106d0     0410  
    4900 000106e0     2600          sll     16,a0
    4901 000106f0     03a0          neg     a0
    4902 00010700     40c0          add     a6,a0
    4903 00010710     b208          move    a0,*a8(OYVAL),L
         00010720     00a0  
    4904                    
    4905 00010730     b7a0          move    *a13(OBJ_PRIORITY),a0,L
         00010740     0160  
    4906 00010750     b5a1          move    *a13(ATTACHIMG_ZOFF),a1
         00010760     0420  
    4907 00010770     2601          sll     16,a1
    4908 00010780     4020          add     a1,a0
    4909 00010790     b208          move    a0,*a8(OZVAL),L
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE  114

         000107a0     00c0  
    4910                    
    4911 000107b0     b5ab          move    *a13(OBJ_YPOSINT),a11   ;y offset
         000107c0     0130  
    4912 000107d0     b700          move    *a8(OIMG),a0,L
         000107e0     0170  
    4913 000107f0     b401          move    *a0(IANIOFFY),a1
         00010800     0030  
    4914 00010810     4161          add     a11,a1                  ;add in Y pos & ani-offset
    4915 00010820     b028          move    a1,*a8(ODYOFF)          ;display y offset
         00010830     0230  
    4916                    
    4917 00010840     b808          move    *a0(IANIOFFX),*a8(ODXOFF)
         00010850     0020  
         00010860     0220  
    4918                    
    4919 00010870           kjbrskip
    4920                    ;       dsj     a4,kjbrattloop
    4921                    
    4922 00010870     0960          rets
    4923                    
    4924 00010880           kjbrplot_object
    4925                    
    4926 00010880     9668          move    *a3+,a8,L               ;* object
    4927                    
    4928 00010890     b2a8          move    a5,*a8(OXVAL),L
         000108a0     0080  
    4929 000108b0     b2c8          move    a6,*a8(OYVAL),L
         000108c0     00a0  
    4930                    
    4931 000108d0     bba8          move    *a13(OBJ_PRIORITY),*a8(OZVAL),L
         000108e0     0160  
         000108f0     00c0  
    4932                    
    4933 00010900     b208          move    a0,*a8(OIMG),L
         00010910     0170  
    4934 00010920     ba08          move    *a0(0),*a8(OSIZE),L
         00010930     0000  
         00010940     0130  
    4935 00010950     ba08          move    *a0(ISAG),*a8(OSAG),L
         00010960     0040  
         00010970     0110  
    4936                    
    4937 00010980     b401          move    *a0(IANIOFFX),a1
         00010990     0020  
    4938 000109a0     4141          add     a10,a1                          ;add in X ani-offset (if any)
    4939 000109b0     b028          move    a1,*a8(ODXOFF)                  ;display x offset
         000109c0     0220  
    4940                    
    4941 000109d0     b401          move    *a0(IANIOFFY),a1
         000109e0     0030  
    4942 000109f0     4161          add     a11,a1                          ;add in Y pos & ani-offset
    4943 00010a00     b028          move    a1,*a8(ODYOFF)                  ;display y offset
         00010a10     0230  
    4944                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:25 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

animation routines                                                   PAGE  115

    4945 00010a20     bc08          movb    *a0(ICTRL+7),*a8(OCTRL+7)       ;Write 5 z comp bits + bits pp
         00010a30     0067  
         00010a40     00f7  
    4946                    
    4947 00010a50     0546          setf    6,0,0
    4948 00010a60     b0e8          move    a7,*a8(OCTRL)                   ;Write 6 low bits
         00010a70     00f0  
    4949 00010a80     0570          setf    16,1,0
    4950                    
    4951 00010a90     b9a8          move    *a13(OBJ_CONST),*a8(OCONST)
         00010aa0     0790  
         00010ab0     0160  
    4952                    
    4953 00010ac0     0960          rets
    4954                    
    4955                    
    4956                    *****************************************************************************
    4957                    
    4958                    
    4959                    
    4960 00010ad0           shadows
    4961                            .ref    shadow
    4962 00010ad0 00000000!         .long   shadow
    4963                    
    4964                    
    4965                    ******************************************************************************
    4966                    
    4967                            .end

 No Errors,  No Warnings
