AUDIT .MACRO 	P1
	MOVI	:P1:,A0	
	CALLA	AUD1
	.endm
AUDITCNT .MACRO 	P1,P2
	MOVE	@:P2:,A1
	MOVI	:P1:,A0
	CALLA	AUD
	.endm
ADJUST .MACRO 	P1
	MOVI	:P1:,A0
	CALLA	GET_ADJ
	.endm
FCALL .MACRO 	n,b
	movi	:n:,:b:,L
	exgpc	:b:
	.endm
FRET .MACRO 	b
	exgpc	:b:
	.endm
REFLONG .MACRO 	label
	.globl	label
	.long	label
	.endm
FACE24 .MACRO 	NAME,MOVE,REG
	.if $isreg(REG)
	move	*:REG:(FACING_DIR),a14
	.else
	move	*a13(FACING_DIR),a14
	.endif
	movi	:NAME:_2_:MOVE:,a0
	btst	MOVE_UP_BIT,a14
	jrnz	DONE?
	movi	:NAME:_4_:MOVE:,a0
DONE?
		.endm
FACE24TBL .MACRO 	TBL,REG

	.if ($symcmp(TBL,"a0") = 0) | ($symcmp(TBL,"a14") = 0)
	.emsg	"ERROR! - Can't use a0 or a14 with FACE24TBL"
	.mexit
	.endif

	.if $isreg(REG)
	move	*:REG:(WRESTLERNUM),a0
	.else
	move	*a13(WRESTLERNUM),a0
	.endif
	X64	a0

	.if $isreg(REG)
	move	*:REG:(FACING_DIR),a14
	.else
	move	*a13(FACING_DIR),a14
	.endif

	btst	MOVE_UP_BIT,a14
	jrnz	DONE?

	addi	32,a0

DONE?
	.if $isreg(TBL)
	add	:TBL:,a0
	.else
	addi	:TBL:,a0
	.endif

	move	*a0,a0,L

	.endm
FACETBL .MACRO 	TBL,REG

	.if $symcmp(TBL,"a0") = 0)
	.emsg	"ERROR! - Can't use a0 with FACETBL"
	.mexit
	.endif

	.if $isreg(REG)
	move	*:REG:(WRESTLERNUM),a0
	.else
	move	*a13(WRESTLERNUM),a0
	.endif
	X32	a0

	.if $isreg(TBL)
	add	:TBL:,a0
	.else
	addi	:TBL:,a0
	.endif

	move	*a0,a0,L

	.endm
SETMODE .MACRO 	MODE

	move	a0,-*sp,1
	move	*a13(PLYRMODE),a0
	cmpi	MODE_DEAD,a0
	jreq	done?
	movi	MODE_:MODE:,a0
	move	a0,*a13(PLYRMODE)
done?	move	*sp+,a0,1
	.endm
JAM_STR .MACRO 	FONT,SPACING,CSPACE,X,Y,PALETTE,PR_METHOD
	.long	:FONT:
	.word   :SPACING:
	.word	:CSPACE:
	.word	:X:
	.word	:Y:
	.long   :PALETTE:
	.long   :PR_METHOD:
	.endm
OPPDIST .MACRO 	DX,DZ
	move	*a13(CLOSEST_XDIST),a14
	cmpi	DX,a14
	jrgt	FOO?
	move	*a13(CLOSEST_ZDIST),a14
	cmpi	DZ,a14
FOO?
	.endm
TBL_OBJ .MACRO 	OBJ
	movi	OBJ,a0
	calla	BEGINOBJ_TBL
	.endm
X2 .MACRO 	a
	sll	1,:a:
	.endm
X4 .MACRO 	a
	sll	2,:a:
	.endm
X8 .MACRO 	a
	sll	3,:a:
	.endm
X16 .MACRO 	a
	sll	4,:a:
	.endm
X32 .MACRO 	a
	sll	5,:a:
	.endm
X64 .MACRO 	a
	sll	6,:a:
	.endm
X128 .MACRO 	a
	sll	7,:a:
	.endm
X256 .MACRO 	a
	sll	8,:a:
	.endm
TINTON .MACRO 

	.global	tint_on
	calla	tint_on
	.endm
TINTOFF .MACRO 

	.global	tint_off
	calla	tint_off
	.endm
BSSX .MACRO 	n,s
	.def	:n:
	.bss	:n:,:s:
	.endm
SUBR .MACRO 	p1
	.def	:p1:
	.even
:p1:
	.endm
SUBRP .MACRO 	p1
	.even
:p1:
	.endm
STRUCT .MACRO 	o
	.asg	:o:,SOFF
	.endm
STRUCTPD .MACRO 
	.asg	PDATA,SOFF
	.endm
STRUC .MACRO 	n,s
:n:	.set	SOFF
	.eval	SOFF+:s:,SOFF
	.endm
WORD .MACRO 	n
:n:	.set	SOFF
	.eval	SOFF+16,SOFF
	.endm
LONG .MACRO 	n
:n:	.set	SOFF
	.eval	SOFF+32,SOFF
	.endm
APTR .MACRO 	n
:n:	.set	SOFF
	.eval	SOFF+32,SOFF
	.endm
LABEL .MACRO 	n
:n:	.set	SOFF
	.endm
FLAG .MACRO 	n
:n:_B	.equ	SOFF
:n:_M	.equ	1<<SOFF
	.eval	SOFF+1,SOFF
	.endm
W0 .MACRO 
	.word	0
	.endm
WWL .MACRO 	w,w2,l
	.word	:w:,:w2:
	.long	:l:
	.endm
WL .MACRO 	a1,a2
	.word	:a1:
	.long	:a2:
	.endm
WLW .MACRO 	w,l,w2
	.word	:w:
	.long	:l:
	.word	:w2:
	.endm
WLWW .MACRO 	w,l,w2,w3
	.word	:w:
	.long	:l:
	.word	:w2:,:w3:
	.endm
WWLWWWWW .MACRO 	w1,w2,l,w3,w4,w5,w6,w7
	.word	:w1:,:w2:
	.long	:l:
	.word	:w3:,:w4:,:w5:,:w6:,:w7:
	.endm
WLWWWW .MACRO 	w,l,w2,w3,w4,w5
	.word	:w:
	.long	:l:
	.word	:w2:,:w3:,:w4:,:w5:
	.endm
WLWWW .MACRO 	w,l,w2,w3,w4
	.word	:w:
	.long	:l:
	.word	:w2:,:w3:,:w4:
	.endm
WLL .MACRO 	w,l,l2
	.word	:w:
	.long	:l:,:l2:
	.endm
WLLL .MACRO 	w,l,l2,l3
	.word	:w:
	.long	:l:,:l2:,:l3:
	.endm
WLLLL .MACRO 	w,l,l2,l3,l4
	.word	:w:
	.long	:l:,:l2:,:l3:,:l4:
	.endm
WLLW .MACRO 	w,l,l2,w2
	.word	:w:
	.long	:l:,:l2:
	.word	:w2:
	.endm
LW .MACRO 	l,w
	.long	:l:
	.word	:w:
	.endm
LWW .MACRO 	l,w,w2
	.long	:l:
	.word	:w:,:w2:
	.endm
LWWW .MACRO 	l,w,w2,w3
	.long	:l:
	.word	:w:,:w2:,:w3:
	.endm
LWWWW .MACRO 	l,w,w2,w3,w4
	.long	:l:
	.word	:w:,:w2:,:w3:,:w4:
	.endm
WWWWL .MACRO 	w,w2,w3,w4,l
	.word	:w:,:w2:,:w3:,:w4:
	.long	:l:
	.endm
LWWWWW .MACRO 	l,w,w2,w3,w4,w5
	.long	:l:
	.word	:w:,:w2:,:w3:,:w4:,:w5:
	.endm
LWWWWWW .MACRO 	l,w,w2,w3,w4,w5,w6
	.long	:l:
	.word	:w:,:w2:,:w3:,:w4:,:w5:,:w6:
	.endm
LWL .MACRO 	l,w,l2
	.long	:l:
	.word	:w:
	.long	:l2:
	.endm
LWLW .MACRO 	l,w,l2,w2
	.long	:l:
	.word	:w:
	.long	:l2:
	.word	:w2:
	.endm
LWL0 .MACRO 	l,w
	.long	:l:
	.word	:w:
	.long	0
	.endm
WLWLWL .MACRO 	w0,l0,w1,l1,w2,l2
	.word	:w0:
	.long	:l0:
	.word	:w1:
	.long	:l1:
	.word	:w2:
	.long	:l2:
	.endm
WLWL .MACRO 	w0,l0,w1,l1
	.word	:w0:
	.long	:l0:
	.word	:w1:
	.long	:l1:
	.endm
WWLW .MACRO 	w0,w1,l0,w2
	.word	:w0:,:w1:
	.long	:l0:
	.word	:w2:
	.endm
WWWL .MACRO 	w0,w1,w2,l1
	.word	:w0:,:w1:,:w2:
	.long	:l1:
	.endm
WWLLW .MACRO 	w1,w2,l1,l2,w3
	.word	:w1:,:w2:
	.long	:l1:,:l2:
	.word	:w3:
	.endm
COLORW .MACRO 	r1,g1,b1,r2,g2,b2,r3,g3,b3,r4,g4,b4
	.word	:r1:*32*32+:g1:*32+:b1:
	.if	$symlen(r2)
	.word	:r2:*32*32+:g2:*32+:b2:
	.endif
	.if	$symlen(r3)
	.word	:r3:*32*32+:g3:*32+:b3:
	.endif
	.if	$symlen(r4)
	.word	:r4:*32*32+:g4:*32+:b4:
	.endif
	.endm
PUSH .MACRO 	r1,r2,r3,r4,r5,r6,r7,r8,r9,r10
	.if	$isreg(r10)
	mmtm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:,:r7:,:r8:,:r9:,:r10:
	.elseif	$isreg(r9)
	mmtm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:,:r7:,:r8:,:r9:
	.elseif	$isreg(r8)
	mmtm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:,:r7:,:r8:
	.elseif	$isreg(r7)
	mmtm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:,:r7:
	.elseif	$isreg(r6)
	mmtm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:
	.elseif	$isreg(r5)
	mmtm	sp,:r1:,:r2:,:r3:,:r4:,:r5:
	.elseif	$isreg(r4)
	mmtm	sp,:r1:,:r2:,:r3:,:r4:
	.elseif	$isreg(r3)
	mmtm	sp,:r1:,:r2:,:r3:
	.elseif	$isreg(r2)
	move	:r1:,-*sp,1
	move	:r2:,-*sp,1
	.else
	move	:r1:,-*sp,1
	.endif
	.endm
PULL .MACRO 	r1,r2,r3,r4,r5,r6,r7,r8,r9,r10
	.if	$isreg(r10)
	mmfm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:,:r7:,:r8:,:r9:,:r10:
	.elseif	$isreg(r9)
	mmfm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:,:r7:,:r8:,:r9:
	.elseif	$isreg(r8)
	mmfm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:,:r7:,:r8:
	.elseif	$isreg(r7)
	mmfm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:,:r7:
	.elseif	$isreg(r6)
	mmfm	sp,:r1:,:r2:,:r3:,:r4:,:r5:,:r6:
	.elseif	$isreg(r5)
	mmfm	sp,:r1:,:r2:,:r3:,:r4:,:r5:
	.elseif	$isreg(r4)
	mmfm	sp,:r1:,:r2:,:r3:,:r4:
	.elseif	$isreg(r3)
	mmfm	sp,:r1:,:r2:,:r3:
	.elseif	$isreg(r2)
	move	*sp+,:r2:,1
	move	*sp+,:r1:,1
	.else
	move	*sp+,:r1:,1
	.endif
	.endm
PUSHW .MACRO 	r1,r2,r3
	.if	:r3:
	ERROR:PUSHW
	.else
	.if	:r2:
	move	:r1:,-*sp,0
	move	:r2:,-*sp,0
	.else
	move	:r1:,-*sp,0
	.endif
	.endif
	.endm
PULLW .MACRO 	r1,r2,r3
	.if	:r3:
	ERROR:PULLW
	.else
	.if	:r2:
	move	*sp+,:r2:,0
	move	*sp+,:r1:,0
	.else
	move	*sp+,:r1:,0
	.endif
	.endif
	.endm
PUSHP .MACRO 	r1,r2,r3,r4,r5
	.if	$isreg(r5)
	mmtm	a12,:r1:,:r2:,:r3:,:r4:,:r5:
	.elseif	$isreg(r4)
	mmtm	a12,:r1:,:r2:,:r3:,:r4:
	.elseif	$isreg(r3)
	mmtm	a12,:r1:,:r2:,:r3:
	.elseif	$isreg(r2)
	move	:r1:,-*a12,1
	move	:r2:,-*a12,1
	.else
	move	:r1:,-*a12,1
	.endif
	.endm
PULLP .MACRO 	r1,r2,r3,r4,r5
	.if	$isreg(r5)
	mmfm	a12,:r1:,:r2:,:r3:,:r4:,:r5:
	.elseif	$isreg(r4)
	mmfm	a12,:r1:,:r2:,:r3:,:r4:
	.elseif	$isreg(r3)
	mmfm	a12,:r1:,:r2:,:r3:
	.elseif	$isreg(r2)
	move	*a12+,:r2:,1
	move	*a12+,:r1:,1
	.else
	move	*a12+,:r1:,1
	.endif
	.endm
ANDK .MACRO 	r1,r2
	movk	:r1:,a14
	and	a14,:r2:
	.endm
ORK .MACRO 	r1,r2
	movk	:r1:,a14
	or	a14,:r2:
	.endm
XORK .MACRO 	r1,r2
	movk	:r1:,a14
	xor	a14,:r2:
	.endm
XYTXT .MACRO 	f,x,y,c,s
	.word	:f:,:x:,:y:,:c:
	.byte	":s:",0
	.endm
XYNUM .MACRO 	f,x,y,c,p
	.word	:f:,:x:,:y:,:c:
	.long	:p:
	.endm
XYOBJ .MACRO 	f,x,y,z,i
	.word	:f:,:x:,:y:,:z:
	.long	:i:
	.endm
SWAP .MACRO  R1,R2
	xor    :R1.S:,:R2.S:
	xor    :R2.S:,:R1.S:
	xor    :R1.S:,:R2.S:
	.endm
TEST .MACRO  R1
	MOVE	:R1.S:,:R1.S:
	.endm
JRXEQ .MACRO 	P1
	JRXZ	P1.S
	.endm
JRXNE .MACRO 	P1
	JRXNZ	P1.S
	.endm
JRXGE .MACRO 	P1
	JRXNN	P1.S
	.endm
JRXLT .MACRO 	P1
	JRXN	P1.S
	.endm
JRYEQ .MACRO 	P1
	JRYZ	P1.S
	.endm
JRYNE .MACRO 	P1
	JRYNZ	P1.S
	.endm
JRYGE .MACRO 	P1
	JRYNN	P1.S
	.endm
JRYLT .MACRO 	P1
	JRYN	P1.S
	.endm
CALLERR .MACRO 	NUM,REGS
	mmtm	sp,a1,a2
	move	*sp((:REGS:+2)*20H),a1,L
	movi	:NUM:,a2
	calla	ERRORLOG	
	mmfm	sp,a1,a2
	.endm
WAITSWITCH_DWN .MACRO 	SWITCHES,MASK,FAILADDR

lp?
	SLEEPK	1
	dec	a11
	jrz	:FAILADDR:
	move	*a8(SPECIAL_MOVE_ADDR),a0,L
	jrnz	:FAILADDR:
	move	*a8(BUT_VAL_DOWN),a0
	sll	4,a0
	move	*a8(STICK_REL_NEW),a1
	or	a1,a0
	andni	:MASK:,a0
	jrz	lp?
	;subk doesn't work -- some out-of-range values in doink.
	cmpi	:SWITCHES:,a0
	jrne	:FAILADDR:

	.endm
BADCHK .MACRO 	reg,lo,hi,val
	cmpi	:lo:,reg
	jrlt	bad?
	cmpi	:hi:,reg
	jrgt	bad?
	jruc	ok?
bad?
	movi	:val:,:reg:
ok?
	.endm
WAITSWITCH_DWN2 .MACRO 	SWITCHES,MASK,FAILADDR

lp?
	SLEEPK	1
	dec	a11
	jrz	:FAILADDR:
	move	*a8(SPECIAL_MOVE_ADDR),a0,L
	jrnz	:FAILADDR:
;	move	*a8(BUT_VAL_DOWN),a0
	move	a8,a0
	calla	wres_get_but_val_down
	sll	4,a0
	move	a0,a1
;	move	*a8(STICK_REL_NEW),a1
	move	a8,a0
	calla	wres_get_stick_rel_new
	or	a1,a0
	andni	:MASK:,a0
	jrz	lp?
	;subk doesn't work -- some out-of-range values in doink.
	cmpi	:SWITCHES:,a0
	jrne	:FAILADDR:

	.endm
SPCDMG .MACRO 	DAMAGE,TIME
	move	@PCNT,a14,L
	addi	:TIME:,a14
	move	a14,*a13(SPECIAL_DAMAGE_TIME),L
	movi	:DAMAGE:,a14
	move	a14,*a13(NEXT_DAMAGE)
	.endm
SUBRM .MACRO 	P1,P2,P3
	MOVE	:P2:,A14,:P3:
	SUB	:P1:,A14
	MOVE	A14,:P2:,:P3:
	.endm
ADDRM .MACRO 	P1,P2,P3
	MOVE	:P2:,A14,:P3:
	ADD	:P1:,A14
	MOVE	A14,:P2:,:P3:
	.endm
INCW .MACRO 	P1
	MOVE	:P1:,A14
	INC	A14
	MOVE	A14,:P1:
	.endm
DECW .MACRO 	P1
	MOVE	:P1:,A14
	DEC	A14
	MOVE	A14,:P1:
	.endm
INCM .MACRO 	P1,P2
	MOVE	:P1:,A14,:P2:
	INC	A14
	MOVE	A14,:P1:,:P2:
	.endm
DECM .MACRO 	P1,P2
	MOVE	:P1:,A14,:P2:
	DEC	A14
	MOVE	A14,:P1:,:P2:
	.endm
SUBM .MACRO 	P1,P2,P3
	MOVE	:P1:,A14,:P3:
	SUB	A14,:P2:
	.endm
ADDM .MACRO 	P1,P2,P3
	MOVE	:P1:,A14,:P3:
	ADD	A14,:P2:
	.endm
NEGM .MACRO 	P1,P2
	MOVE	:P1:,A14,:P2:
	NEG	A14
	MOVE	A14,:P1:,:P2:
	.endm
CMPM .MACRO 	P1,P2,P3
	MOVE	:P1:,A14,:P3:
	CMP	A14,:P2:
	.endm
CLRM .MACRO 	P1,P2
	CLR	A14
	MOVE	A14,:P1:,:P2:
	.endm
COMM .MACRO 	P1,P2
	MOVE	:P1:,A14,:P2:
	NOT	A14
	MOVE	A14,:P1:,:P2:
	.endm
SLLM .MACRO 	P1,P2,P3
	MOVE	:P2:,A14,:P3:
	SLL	:P1:,A14
	MOVE	A14,:P2:,:P3:
	.endm
SRAM .MACRO 	P1,P2,P3
	MOVE	:P2:,A14,:P3:
	SEXT	A14,:P3:
	SRA	:P1:,A14
	MOVE	A14,:P2:,:P3:
	.endm
SRLM .MACRO 	P1,P2,P3
	MOVE	:P2:,A14,:P3:
	ZEXT 	A14,:P3:
	SRL	:P1:,A14
	MOVE	A14,:P2:,:P3:
	.endm
BSET .MACRO 	P1,R1
	MOVK	1,A14
	SLL	:P1:,A14
	OR	A14,:R1:
	.endm
BCLR .MACRO 	P1,R1
	MOVK	1,A14
	SLL	:P1:,A14
	ANDN	A14,:R1:
	.endm
SETZ .MACRO 
	CLR	A14
	.endm
CLRZ .MACRO 
	CLR	A14
	NOT	A14
	.endm
SLEEP .MACRO 	A
	movi	:A:,a0
	calla	PRCSLP
	.endm
SLEEPK .MACRO 	A
	movk	:A:,a0
	calla	PRCSLP
	.endm
SLEEPR .MACRO 	REG1
	MOVE	:REG1:,A0
	CALLA	PRCSLP
	.endm
SLOOP .MACRO 	s,a
	.if	:s: < 33
	movk	:s:,a0
	.else
	movi	:s:,a0
	.endif
	movi	:a:,a7,L
	jauc	PRCLSP
	.endm
SLOOPR .MACRO 	P1,P2
	MOVE	:P1:,A0
	MOVI	:P2:,A7,L
	JAUC	PRCLSP
	.endm
CREATE .MACRO 	p1,p2
	movi	:p1:,a1
	movi	:p2:,a7,L
	calla	GETPRC
	.endm
CREATE0 .MACRO 	A
	clr	a1
	movi	:A:,a7,L
	calla	GETPRC
	.endm
SCREATE .MACRO 	p1,p2
	movi	:p1:,a1
	movi	:p2:,a7,L
	calla	GETSPRC
	.endm
KILLIT .MACRO 	P1,P2
	MOVI	:P1:,A0
	MOVI	:P2:,A1
	CALLA	KILALL
	.endm
DIE .MACRO 
	jauc	SUCIDE
	.endm
JSRP .MACRO 	P1
	GETPC	A7
	ADDI	060h,A7
	MOVE	A7,-*A12,L	;PUSH RET ADDR
	JAUC	:P1:
	.endm
JSRPR .MACRO 	R1
	GETPC	A7
	ADDI	040h,A7
	MOVE	A7,-*A12,L	;PUSH RET ADDR
	JUMP	:R1:
	.endm
RETP .MACRO 
	mmfm	a12,a7		;PULL RETURN ADDR, W/O ZAPPING STAT
	exgpc	a7
	.endm
MATCHP .MACRO 	P1,P2,P3
	MOVI	:P1:,A0
	MOVI	:P2:,A1
	CALLA	EXISTP
	JANZ	:P3:
	.endm
NOMATCHP .MACRO 	P1,P2,P3
	 MOVI	:P1:,A0
	 MOVI	:P2:,A1
	 CALLA	EXISTP
	 JAZ	:P3:
	 .endm
LOCKUP .MACRO 
	trap	29
	.endm
LEAPATOPP .MACRO  w1,w2,w3,w4,l1,w5,w6,w7,w8
	.word	ANI_LEAPATOPP
	.word	:w1:,:w2:,:w3:,:w4:
	.long	:l1:
	.word	:w5:,:w6:,:w7:,:w8:
	.endm
WRSND .MACRO 	WRESTLER,SOUND1,SOUND2

	movi	MASTER_SOUND_TABLE+(:WRESTLER:*10h*(LAST_MOVE+1))+(:SOUND1:*16),a0
	move	*a0,a0,W
	jrnn	OKAY?

	;oops.  use the default instead
	movi	DEFAULT_SOUND_TABLE+(:SOUND1:*16),a0
	move	*a0,a0,W
	jrz	DONE1?

OKAY?
	calla	table_sound
DONE1?
	.if $isname(SOUND2)
	movi	MASTER_SOUND_TABLE+(:WRESTLER:*10h*(LAST_MOVE+1))+(:SOUND2:*16),a0
	move	*a0,a0,W
	jrnn	OKAY2?

	;oops.  use the default instead
	movi	DEFAULT_SOUND_TABLE+(:SOUND2:*16),a0
	move	*a0,a0,W
	jrz	DONE2?

OKAY2?
	calla	table_sound
DONE2?
	.endif
	.endm
WRSNDXI .MACRO 	REG,SOUND1
	PUSH	a0,a1

	move	*:REG:(WRESTLERNUM),a1,W
	movi	(LAST_MOVE+1),a14
	mpyu	a14,a1
	X16	a1
	addi	(:SOUND1:*10h),a1
	addi	MASTER_SOUND_TABLE,a1
	move	*a1,a0,W
	jrz	DONE?
	jrp	OKAY?

	;oops.  use the default instead
	movi	DEFAULT_SOUND_TABLE+(:SOUND1:*10h),a1
	move	*a1,a0,W
	jrz	DONE?
OKAY?
	calla	table_sound
DONE?	PULL	a0,a1
	.endm
