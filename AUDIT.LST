TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    **************************************************************
       2                    *
       3                    * Software:     LARRY DEMAR and DR. J
       4                    * Initiated:    ?
       5                    *
       6                    * Modified:     Shawn Liptak, 9/6/91    -SLEEPK (Total carnage)
       7                    *               Shawn Liptak, 11/1/91   -Clean up
       8                    *               Shawn Liptak, 2/11/91   -Started basketball
       9                    *               Shawn Liptak, 11/6/92   -L_TIMER clean up
      10                    *               Jason Skiles, 12/3/93   -Started WWF
      11                    *
      12                    * COPYRIGHT (C) 1992 WILLIAMS ELECTRONICS GAMES, INC.
      13                    *
      14                    *.Last mod - 12/3/93 9:52
      15                    **************************************************************
      16                            .file   "audit.asm"
      18                            .width  132
      19                            .option b,d,l,t
      20                            .mnolist
      21                    
      22                    
      23                            .include        "mproc.equ"             ;mproc equates
      24                            .include        "display.equ"           ;display proc. equates
      25                            .include        "sys.equ"               ;z unit system equates
      26                            .include        "gsp.equ"
      27                            .include        "game.equ"
      28                            .include        "link.equ"              ;link equates
      29                            .include        "menu.equ"              ;menu equates
      30                            .include        "audit.equ"
      31                            .include        "macros.h"
      32                            .include        "sound.h"
      33                    
      34                            .include        "fontsimg.glo"
      35                            .include        "miscimg.glo"
      36                            .include        "bgndtbl.glo"
      37                            .include        "imgtbl.glo"
      38                    
      39                    
      40                    *        BAD_AUD - ANYTIME AN AUDIT NUMBER IS FETCHED, IF ITS
      41                    *                       CHECKSUM IS BAD, THEN BAD_AUD GETS SET TO 1
      42                    *                       THIS CAUSES "ERROR" IF ANY AUDIT IN A CALCULATION
      43                    *                       IS CORRUPTED, AND KEEPS A BAD CHECKSUM BAD WHEN
      44                    *                       AN AUDIT IS CHANGED.
      45                                            
      46 00000000                   .BSS    BAD_AUD         ,16     ;(BAD_AUD...NOT BAD_DOG!)       
      47 00000010                   .bss    playtimer       ,16     ;timer units for game
      48 00000020                   .BSS    C_FRAC          ,16     ;TIME 10 SECONDS TO
      49                                                            ;INDICATE COIN ACTIVITY
      50 00000030                   .BSS    C_FLAGS         ,5*32   ;INTERRUPT COIN BOUNCE
      51 000000d0                   .BSS    COINCNTR        ,32     ;MECH COIN COUNTER TIMERS AND COUNTS    
      52              00d0- COINCNT1        .EQU    COINCNTR
      53              00d8- COINCNT2        .EQU    COINCNTR+8
      54                    *                       TIMERS 1,2:B16-23,B24-B31; COUNTS 1,2 B0-B7;B8-B15
      55 000000f0                   .BSS    OCT_FLG,16              ;!0=Did 1st part
      56 00000000                   BSSX    THIS_GAME_TIME,16
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE    2

      57                    
      58 00000000                   BSSX    audit_ud_flag,16        ;audit_ud process active (EXISTP is
      59                                                            ; too slow and we check this often.)
      60                    
      61                                            
      62                    *        IN THIS MODULE
      63                    ;       .def    ADD_DUMP
      64                            .def    ADJ_PAGE
      65                            .def    BAD_AUD
      66                            .def    C_FRAC,COINCNTR                 
      67                            .def    C_FLAGS
      68                            .def    L_MESS,AUD,AUD1,GET_ADJ
      69                            .def    GET_AUD,SLAM_SW,STORE_AUDIT
      70                            .def    CAT_A0
      71                            .def    CCCC
      72                            .def    CK_MAX
      73                    ;       .def    CLRSWPRC
      74                            .def    CLR_AUD,FAC_SET
      75                            .def    CLR_AUDR
      76                    ;       .def    CLR_SUBS
      77                            .def    CMOS_VAL
      78                            .def    COIN_PAG
      79                    ;       .def    COINIRQ
      80                            .def    CR_STRTP
      81                            .def    CR_CONTP
      82                            .def    CRD_SCRN
      83                            .def    CRED_P  
      84                            .def    DEF_PAGE
      85                    ;       .def    DUMP_FS
      86                            .def    FORM_ADC
      87                            .def    F_ADC_S
      88                            .def    GET_CREDITS
      89                            .def    GET_CSTR
      90                            .def    HTOHXASC
      91                    ;       .def    KILL_CRD
      92                            .def    L_TIMER
      93                            .def    LD_CTAB
      94                            .def    LM_SETUP
      95                            .def    LM_FINIS
      96                            .def    NO_CREDS
      97                            .def    P_START
      98                            .def    P_CONT  
      99                            .def    PUT_ADJ
     100                            .def    ROM_NAME
     101                            .def    STRCAT
     102                            .def    UNIT_CLR
     103                            .def    WAIT_MUT
     104                            .DEF    KILL_AUD
     105                            .ref    PCNT
     106                    
     107                            .def    CCOIN,RCOIN,SERVICE,XCOIN,LCOIN
     108                            .DEF    DBV
     109                    
     110                    ;       .ref    osgemd_ascii,sgmd8_ascii,ogmd10_ascii,lgmd_ascii
     111                    ;       .ref    osgemd_ascii,sgmd8_ascii,ogmd10_ascii,wgsf24_ascii
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE    3

     112                            .ref    osgemd_ascii,ogmd10_ascii,wgsf24_ascii
     113                            .ref    mess_cursy
     114                            .ref    mess_line_spacing
     115                    
     116                            .ref    print_message,setup_message
     117                            .ref    print_string_C,print_string_C2
     118                            .ref    dec_to_asc
     119                            .ref    copy_string,copy_rom_string
     120                            .ref    concat_string,concat_rom_string
     121                            .ref    BAKMODS
     122                            .ref    BGND_UD1
     123                            .ref    COUNTER_MODE
     124                    
     125                            .GLOBAL SYNCHALF,WDOGDIS,GAMSTATE
     126                    
     127                            .ref    IRQSKYE
     128                            .ref    PSTATUS,PSTATUS2
     129                            .ref    attract_mode
     130                    
     131                    
     132                            .ref    _coin_addr
     133                            .ref    _dipswitch_addr
     134                    
     135                            ;from DCSSOUND.ASM
     136                            .ref    triple_sound
     137                    
     138                            .REF    PSTARTS
     139                    
     140                    *       IN HSTD.ASM
     141                    
     142                            .ref            SET_PAGE
     143                            .ref            P_FORK
     144                            .ref            DEC_HSR
     145                            .ref            RC_BYTEI
     146                            .ref            RC_BYTE
     147                            .ref            RC_WORD
     148                            .ref            RC_LONG
     149                            .ref            RC_LONGI
     150                            .ref            WC_BYTE
     151                            .ref            WC_BYTEI
     152                            .ref            WC_WORD
     153                            .ref            WC_WORDI
     154                            .ref            WC_LONG
     155                            .ref            WC_LONGI
     156                    
     157                    *       IN MENU.ASM
     158                    
     159                            .ref            GET_CSPT
     160                            .ref            STR_OBJ
     161                            .ref            STR_FREE
     162                            .ref            CKPROMPT
     163                            .ref            TWO_TS,TWO_TP
     164                            .ref            BUILD_ST
     165                            .ref            HID_P
     166                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE    4

     167                    *        IN ROBOATT.ASM
     168                    
     169                            .ref            WIPEOUT
     170                    
     171                    
     172                    *        IN TEST.ASM
     173                    
     174                    ;       .ref    CK_DOOR
     175                    ;       .ref    WT_ADV,WW_ADV
     176                            .ref    FORM_SWS
     177                            .ref    opmsg_clr
     178                    
     179                    
     180                    
     181                    *        OTHERS
     182                    
     183                    ;       .ref    plyr_strtb1,plyr_strtb2
     184                            .ref    dirqtimer
     185                            .ref    SOUNDSUP
     186                            .ref    RD15FONT,RD7FONT,STRCNRM
     187                            .ref    STRNGRAM,STRLNRM,HEXTOASC
     188                            .ref    CLR_SCRN
     189                            .ref    KILALL
     190                            .ref    SUCIDE
     191                            .ref    dpageflip
     192                            .ref    TAMPEREDP
     193                            .ref    _switch_addr
     194                    
     195                    
     196 00000000                   .text
     197                    
     198                    **************************************************************************
     199                    *
     200                    *       COIN HANDLING
     201                    *
     202                    **************************************************************************
     203                    
     204                    **************************************************************************
     205                    *
     206                    *       L_TIMER
     207                    *
     208                    *       THIS IS CALLED EACH TICK THROUGH THE EXEC LOOP
     209                    *       BEFORE TIMER IS CLEARED. IT DOES NOTHING
     210                    *       IF THE GAME IS NOT IN PLAY, ELSE IT ADDS
     211                    *       THE EXEC TIME TO THE 1 PLAYER OR 2 PLAYER
     212                    *       TIMER BASED ON CURRENT NUMBER OF PEOPLE PLAYING.
     213                    *
     214                    **************************************************************************
     215                    
     216 00000000           L_TIMER
     217 00000000     05a0          move    @GAMSTATE,a0
         00000010 00000000! 
     218 00000030     0b40          cmpi    INAMODE,a0
         00000040     fffe  
     219 00000050     cb24          jrne    arjtNO_CK_OCTO          ;ATTRACT MODE..CHECK OCTOPUS!
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE    5

     220                    
     221                    ;       move    @SWITCH,a0
     222 00000060     07a0          move    @_switch_addr,a0,L
         00000070 00000000! 
     223 00000090     8400          move    *a0,a0
     224 000000a0     03e0          not     a0
     225 000000b0     0b80          andi    07f7fH,a0               ;Get sticks 'n starts
         000000c0 ffff8080  
     226 000000e0     05a1          move    @OCT_FLG,a1
         000000f0 000000f0- 
     227 00000110     c705          jrgt    arjtp2                  ;Got part one?
     228                    
     229 00000120     0b40          cmpi    07171H,a0               ;P1&P2 all buts down & both sticks up
         00000130     8e8e  
     230 00000140     cb15          jrne    arjtNO_CK_OCTO                  ;Wrong?
     231 00000150     09c1          movi    TSEC,a1                 ;One sec to get part two
         00000160     0035  
     232 00000170           arjtp2
     233 00000170     1421          subk    1,a1
     234 00000180     0581          move    a1,@OCT_FLG
         00000190 000000f0- 
     235 000001b0     c70e          jrgt    arjtNO_CK_OCTO                  ;Still counting?
     236 000001c0     0b40          cmpi    0202H,a0
         000001d0     fdfd  
     237 000001e0     cb0b          jrne    arjtNO_CK_OCTO                  ;Wrong?
     238                    
     239 000001f0     09ed          movi    ACTIVE,a13
         00000200 00000000! 
     240                    ;       movi    HID_P,a7                ;Start the process!
     241                    ;       movi    DIAG_PID,a1
     242 00000220     09c1          movi    AMODE_PID,a1
         00000230     0100  
     243                            .ref    octopus_page
     244 00000240     09e7          movi    octopus_page,a7
         00000250 00000000! 
     245 00000270     0d5f          calla   GETPRC
         00000280 00000000! 
     246 000002a0           arjtNO_CK_OCTO          ;ATTRACT MODE..CHECK OCTOPUS!
     247                    
     248 000002a0     05a1          move    @dirqtimer,a1           ;get elapsed time
         000002b0 00000000! 
     249 000002d0     05a0          move    @playtimer,a0           ;get play timer
         000002e0 00000010- 
     250 00000300     4420          sub     a1,a0                   ;add elapsed time
     251 00000310     0580          move    a0,@playtimer
         00000320 00000010- 
     252 00000340     c70a          jrgt    arjtnot5                        ;Under 5 seconds?
     253                    
     254 00000350                   CREATE  AUDIT_UD_PID,audit_ud
     255                    
     256 000003d0     09c0          movi    TSEC*5,a0               ;reset the countdown
         000003e0     0109  
     257 000003f0           arjtnot5
     258 000003f0     0580          move    a0,@playtimer
         00000400 00000010- 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE    6

     259 00000420     0960          rets
     260                    
     261                    ;each call to AUD1 takes 2 days to execute
     262                    ;so it's now split over 3 frames
     263                    
     264 00000430            SUBRP  audit_ud
     265                    
     266 00000430     09ce          movi    1,a14
         00000440     0001  
     267 00000450     058e          move    a14,@audit_ud_flag
         00000460 00000110- 
     268                    
     269 00000480     05ae          move    @GAMSTATE,a14
         00000490 00000000! 
     270 000004b0     ce33          jrn     arjtskip                        ;in diagnostics
     271                    
     272 000004c0     05ae          move    @PSTATUS2,a14
         000004d0 00000000! 
     273 000004f0     ca2f          jrz     arjtskip                        ;no players
     274                    ;oops ! wrong order
     275                    
     276 00000500     09c0          movi    AUD_1PLAYTIME,a0        ;update the 1/2P time
         00000510     001f  
     277 00000520     0b4e          cmpi    3,a14
         00000530     fffc  
     278 00000540     cb02          jrne    arjt1pmode
     279 00000550     09c0          movi    AUD_2PLAYTIME,a0
         00000560     0020  
     280 00000570           arjt1pmode
     281 00000570     0d3f          callr   AUD1
         00000580     0656  
     282 00000590     05ae          MOVE    @PSTATUS2,A14
         000005a0 00000000! 
     283 000005c0     ca16          JRZ     NO_NEED_TO_DO_ANYTHING
     284 000005d0     0b4e          CMPI    3,A14
         000005e0     fffc  
     285 000005f0     ca0c          JREQ    BETTER_STOP_THIS
     286 00000600     05a0          MOVE    @PSTARTS,A0
         00000610 00000000! 
     287 00000630     ca0f          JRZ     NO_NEED_TO_DO_ANYTHING
     288 00000640     05a0          MOVE    @THIS_GAME_TIME,A0
         00000650 00000100- 
     289 00000670     1020          INC     A0
     290 00000680     0580          MOVE    A0,@THIS_GAME_TIME
         00000690 00000100- 
     291 000006b0     c007          JRUC    NO_NEED_TO_DO_ANYTHING
     292 000006c0           BETTER_STOP_THIS
     293 000006c0     5600          CLR     A0
     294 000006d0     0580          MOVE    A0,@PSTARTS
         000006e0 00000000! 
     295 00000700     0580          MOVE    A0,@THIS_GAME_TIME
         00000710 00000100- 
     296 00000730           NO_NEED_TO_DO_ANYTHING
     297 00000730                   SLEEPK  1
     298                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE    7

     299 00000770     09c0          movi    AUD_PLTIME,a0
         00000780     001e  
     300 00000790     0d3f          callr   AUD1
         000007a0     0634  
     301                    
     302 000007b0                   SLEEPK  1
     303 000007f0           arjtskip
     304 000007f0     09c0          movi    AUD_UPTIME,a0           ;update the total uptime
         00000800     001d  
     305 00000810     0d3f          callr   AUD1
         00000820     062c  
     306                    
     307 00000830     57ce          clr     a14
     308 00000840     058e          move    a14,@audit_ud_flag
         00000850 00000110- 
     309                    
     310 00000870                   DIE
     311                    
     312                    
     313                     .if 0
     314                    
     315                    
     316                            move    @PSTATUS2,a2
     317                            jrz     arjtaudup
     318                    
     319                            move    @GAMSTATE,a2
     320                            jrn     arjtaudup
     321                    
     322                            movi    AUD_1PLAYTIME,a0        ;update the 1/2P time
     323                            cmpi    3,a2
     324                            jrne    arjt1pmode
     325                            movi    AUD_2PLAYTIME,a0
     326                    arjt1pmode
     327                            callr   AUD1
     328                    
     329                            movi    AUD_PLTIME,a0
     330                            callr   AUD1
     331                    
     332                    arjtaudup
     333                            movi    AUD_UPTIME,a0           ;update the total uptime
     334                            callr   AUD1
     335                    
     336                            movi    TSEC*5,a0               ;reset the countdown
     337                    
     338                    arjtnot5
     339                            rets
     340                    
     341                     .endif
     342                    
     343                    
     344                    *******************************
     345                    * Give him a service credit
     346                    
     347 000008a0           SERVICE
     348 000008a0     05a0          move    @GAMSTATE,a0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE    8

         000008b0 00000000! 
     349 000008d0     ce19          jrn     gebkx                   ;In diagnostics?
     350                    
     351 000008e0     07a0          move    @_coin_addr,a0,L        ;Get COIN inputs
         000008f0 00000000! 
     352 00000910     8400          move    *a0,a0
     353 00000920     1e40          btst    CDI_BIT,a0              ;Coin Door Closed ?
     354 00000930     ca13          jrz     gebkx                   ;Yes - Then NO Service Credits Allowed
     355                    
     356 00000940     0d3f          callr   CCCC                    ;MAKE SURE THINGS ARE IN TACT
         00000950     055e  
     357                    
     358 00000960     18c0          movk    AUDSERV,a0
     359 00000970     0d3f          callr   AUD1                    ;CHALK UP A SERVICE CREDITS!
         00000980     0616  
     360                    
     361 00000990     0d3f          callr   getcoin
         000009a0     0935  
     362                    
     363 000009b0     0d3f          callr   GET_CREDITS
         000009c0     01ba  
     364 000009d0     1020          addk    1,a0                    ;Add in the new ones
     365 000009e0     0d3f          callr   PUT_CREDITS             ;NOW STORE EM BACK (ENFORCE MAX)
         000009f0     0170  
     366                    
     367 00000a00     0d3f          callr   FORM_COIN_CKSUM_AND_STORE
         00000a10     0544  
     368                    
     369                            ;Update little credit message
     370                            .ref    update_credit_msg
     371 00000a20     0d5f          calla   update_credit_msg
         00000a30 00000000! 
     372                    
     373 00000a50     c000          jruc    CREDSP
         00000a60     0093  
     374                    
     375 00000a70           gebkx   DIE
     376                    
     377                    
     378                    ********************************
     379                    * THE FOLLOWING COIN ROUTINES ARE PROCESSES!
     380                    
     381 00000aa0     1848  LCOIN   MOVK    ADJLMULT,A8     ;CMOS RAM ADJUST
     382 00000ab0     09ea          MOVI    LC_FLAG,A10     ;LEFT COIN FLAG
         00000ac0 00000030- 
     383 00000ae0     09cb          MOVI    AUDLCOIN,A11    ;AUDIT NUMBER
         00000af0     0001  
     384 00000b00     c01c          JRUC    VALID_COIN
     385                    
     386 00000b10     1868  CCOIN   MOVK    ADJCMULT,A8
     387 00000b20     09ea          MOVI    CC_FLAG,A10     ;CENTER COIN FLAG
         00000b30 00000040- 
     388 00000b50     09cb          MOVI    AUDCCOIN,A11
         00000b60     0002  
     389 00000b70     c015          JRUC    VALID_COIN
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE    9

     390                    
     391 00000b80     1888  RCOIN   MOVK    ADJRMULT,A8
     392 00000b90     09ea          MOVI    RC_FLAG,A10     ;RYTE COIN FLAG
         00000ba0 00000038- 
     393 00000bc0     09cb          MOVI    AUDRCOIN,A11
         00000bd0     0003  
     394 00000be0     c00e          JRUC    VALID_COIN
     395                    
     396 00000bf0     18a8  XCOIN   MOVK    ADJXMULT,A8
     397 00000c00     09ea          MOVI    XC_FLAG,A10     ;XTRA (FOURTH) COIN FLAG
         00000c10 00000048- 
     398 00000c30     09cb          MOVI    AUDXCOIN,A11
         00000c40     0004  
     399 00000c50     c007          JRUC    VALID_COIN
     400                    
     401 00000c60     18c8  DBV     MOVK    ADJDBVMULT,A8
     402 00000c70     09ea          MOVI    DBV_FLAG,A10    ;XTRA (FOURTH) COIN FLAG
         00000c80 00000050- 
     403 00000ca0     09cb          MOVI    AUD_DBV,A11
         00000cb0     0005  
     404 00000cc0     0300          JRUC    VALID_COIN
     405                    ;
     406                    ; COIN CONTROL EQUATES
     407                    ;
     408              0030- LC_FLAG         .EQU    C_FLAGS         ;UHB LEFT COIN
     409              0038- RC_FLAG         .EQU    C_FLAGS+8       ;UHB RGT   "
     410              0040- CC_FLAG         .EQU    C_FLAGS+16      ;UHB CNTR  "
     411              0048- XC_FLAG         .EQU    C_FLAGS+24      ;UHB XTRA  "
     412              0050- DBV_FLAG        .EQU    C_FLAGS+32      ;UHB DOLLAR BILL VALIDATOR  
     413                    ;
     414                    ; VALID_COIN- CHECK THE DURATION OF COIN DROP AND SEES IF IT IS A VALID
     415                    ;       ENTRY
     416                    ;PARAMS REQUIRED:
     417                    ; A8 = MULTIPLIER FOR THAT SWITCH.                      
     418                    ; A10 = RAM TIMER/FLAG
     419                    ; A11 = BASE AUDIT NUMBER                               
     420                    
     421 00000cd0           VALID_COIN
     422 00000cd0     05a0          move    @GAMSTATE,a0
         00000ce0 00000000! 
     423 00000d00     ce77          jrn     CRX                     ;In diagnostics?
     424                    
     425 00000d10     4d00          MOVE    A8,A0                   ;MOVE MULTIPLIER ADJUST NUMBER TO A0
     426 00000d20     0d5f          CALLA   GET_ADJ                 ;FETCH IT
         00000d30 00007130' 
     427 00000d50     4c08          MOVE    A0,A8                   ;AND BACK TO STATIC REG...ANY THERE?
     428 00000d60     ca71          JRZ     CRX                     ;NOPE....DON'T WASTE THE TIME!
     429                    
     430 00000d70     0d3f          CALLR   SLAM_P                  ;SLAM AROUND?
         00000d80     04d9  
     431 00000d90     cb6e          JRNZ    CRX                     ;THEN NO ACTION
     432 00000da0     09e0          MOVI    LC_PID,A0               ;ALL 4 SLOTS USE THIS ID NOW
         00000db0 0000811a  
     433 00000dd0     b00d          MOVE    A0,*A13(PROCID)         ;SET OUR ID (IN CASE TABLE IS WRONG)
         00000de0     0020  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   10

     434                    
     435                    ;       movb    *a10,a0                 ;get flag byte
     436                    ;       jrz     gebkfok
     437                    ;       LOCKUP
     438                    ;gebkfok
     439 00000df0     8f40          MOVB    *A10,A0                 ;GET FLAG BYTE
     440 00000e00     cb67          JRNZ    CRX                     ;SOMEONE ELSE THERE...WE'RE A BOUNCE!
     441                    
     442                    ;OK....THIS IS A NEW POSITIVE EDGE....START THE DROP TIMING
     443                    
     444 00000e10     18a0          movk    5,a0                    ;Wait a few ticks
     445 00000e20     8c0a          movb    a0,*a10
     446                    
     447 00000e30           COIN_LOOP
     448 00000e30                   SLEEPK  1                       ;SLEEP TILL WE GET SUCCESS OR FAIL
     449 00000e70     8f40          MOVB    *A10,A0                 ;GET THE TIMER
     450 00000e80     c7fa          JRGT    COIN_LOOP
     451                    
     452 00000e90     0d3f          CALLR   SLAM_P                  ;SLAM?
         00000ea0     04c7  
     453 00000eb0     cb5c          JRNZ    CRX                     ;THEN WE'RE OUT OF HERE
     454                    
     455                    ; 1/2 SECOND HAS PASSED WITHOUT A SLAM....INDICATE COIN DROP
     456                                                            
     457 00000ec0     5600          CLR     A0
     458 00000ed0     0580          MOVE    A0,@SOUNDSUP            ;TURN SOUNDS ON. (A-MODE SOUND SUPRESSOR)
         00000ee0 00000000! 
     459                    
     460 00000f00     0d3f          callr   getcoin
         00000f10     08de  
     461                    
     462 00000f20     09c0          MOVI    15*40H/8,A0             ;DON'T WIPE ON GAME OVER IF ITS WITHIN
         00000f30     0078  
     463 00000f40     0580          MOVE    A0,@C_FRAC              ;15 SECONDS (THIS TIMES OUT TO OVER 20)
         00000f50 00000020- 
     464                    
     465 00000f70     4d60          MOVE    A11,A0
     466 00000f80     0d3f          CALLR   AUD1                    ;CHALK THE DIRECT AUDIT
         00000f90     05b5  
     467                    
     468                    *HIT THE MECHANICAL COIN COUNTERS
     469 00000fa0     05a0          MOVE    @COUNTER_MODE,A0,W
         00000fb0 00000000! 
     470 00000fd0     0b40          CMPI    1,A0
         00000fe0     fffe  
     471 00000ff0     cb21          JRNE    MECH20
     472                    
     473 00001000     09c0          MOVI    ADJTOTALIZER,A0
         00001010     001d  
     474 00001020     0d5f          CALLA   GET_ADJ
         00001030 00007130' 
     475 00001050     ca0b          JRZ     NORMAL_TOTALIZER
     476 00001060     09c0          MOVI    ADJTOTALIZER,A0
         00001070     001d  
     477 00001080     4160          ADD     A11,A0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   11

     478 00001090     0d5f          CALLA   GET_ADJ
         000010a0 00007130' 
     479 000010c0     4c02          MOVE    A0,A2
     480 000010d0     09e1          MOVI    COINCNT1,A1
         000010e0 000000d0- 
     481 00001100     c00b          JRUC    RE_ENTER_FROM_CUST_TOTALIZER
     482 00001110           NORMAL_TOTALIZER
     483                    
     484                    *MULTIPLE OF LEAST VALUE COIN MODE
     485 00001110     0d5f          CALLA   GET_CSPT                ;POINT TO COIN TABLE A6
         00001120 00000000! 
     486                    ;       MOVK    5,A1                    ;CHECK ALL CHUTES
     487                    ;       ADDI    CS_LVAL,A6              ;ADD IN OFFSET TO CHUTE VALUES
     488                    ;       MOVE    A6,A5                   ;SAVE A6
     489                    ;       CLR     A2
     490                    ;       NOT     A2
     491                    ;MECH1L
     492                    ;       MOVE    *A5+,A0                 ;FIND LOWEST NON-ZERO NUMBER IN LIST
     493                    ;       JRZ     MECH_SKIPZ
     494                    ;       CMP     A2,A0
     495                    ;       JRHI    MECH_SKIPZ
     496                    ;       MOVE    A0,A2                   ;A NEW LOW!
     497                    ;MECH_SKIPZ
     498                    ;       DSJS    A1,MECH1L
     499                    
     500 00001140     0b06          ADDI    CS_LVAL,A6              ;ADD IN OFFSET TO CHUTE VALUES
         00001150     00c0  
     501 00001160     142b          DEC     A11                     ;GET YOUR CLICK COUNT
     502 00001170     248b          SLL     4,A11                   ;OFFSET FOR CHUTE, WORD CORRECT
     503 00001180     4166          ADD     A11,A6
     504 00001190     84c2          MOVE    *A6,A2                  ;GET MONEY VALUE
     505 000011a0     4c42          MOVE    A2,A2
     506 000011b0     ca04          JRZ     MECH10                  ;SOMETHING ILLEGAL HAPPENED, JUST ONE
     507                    
     508 000011c0           RE_ENTER_FROM_CUST_TOTALIZER
     509                    ;       CALLA   GET_CSPT                ;POINT TO COIN TABLE A6
     510                    ;       DEC     A11                     ;GET YOUR CLICK COUNT
     511                    ;       SLL     4,A11                   ;OFFSET FOR CHUTE, WORD CORRECT
     512                    ;       ADD     A11,A6
     513                    ;       MOVE    *A6,A1                  ;GET MONEY VALUE
     514                    ;       JRZ     MECH10                  ;WIERDNESS, JUST ONE CLICK
     515                    ;       DIVU    A2,A1                   ;DIVIDE BY LOWEST COMMON DENOMINATOR
     516                    ;       MOVE    A1,A2                   ;RESULT TO KEEP COMPAT
     517 000011c0     09e1          MOVI    COINCNT1,A1
         000011d0 000000d0- 
     518 000011f0     c00f          JRUC    MECH3B
     519 00001200           MECH10
     520 00001200     1840          MOVK    2,A0                    ;VALUE OVER 10, JUST GIVE ONE CLICK
     521 00001210           MECH20
     522 00001210     09e1          MOVI    COINCNT1,A1
         00001220 000000d0- 
     523 00001240     0b40          CMPI    2,A0
         00001250     fffd  
     524 00001260     ca07          JREQ    MECH3A                  ;CLICK COUNTER 1 MODE
     525                            
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   12

     526 00001270     0b4b          CMPI    AUDLCOIN,A11
         00001280     fffe  
     527 00001290     ca04          JREQ    MECH3A
     528 000012a0     0b4b          CMPI    AUDRCOIN,A11
         000012b0     fffc  
     529 000012c0     cb07          JRNE    MECH4
     530 000012d0     1101          ADDK    8,A1
     531 000012e0           MECH3A
     532 000012e0     1822          MOVK    1,A2
     533 000012f0           MECH3B
     534 000012f0     0360          DINT
     535 00001300     8e20          MOVB    *A1,A0
     536 00001310     4040          ADD     A2,A0
     537 00001320     8c01          MOVB    A0,*A1
     538 00001330     0d60          EINT
     539 00001340           MECH4
     540 00001340     4d08          MOVE    A8,A8                   ;NO CREDIT UNITS?
     541 00001350     ca12          JRZ     CRX                     ;THEN NO MORE WORK TO DO.
     542 00001360     0d3f          CALLR   ADJUST_CREDITS          ;GIVE CREDIT FOR THE MONEY.
         00001370     0085  
     543 00001380     0d3f          CALLR   DEF_PAGE                ;POINT PAGE AWAY!
         00001390     0626  
     544                    
     545                    
     546                    ; SET-UP CREDITS MSG IN GAME SCREEN AND INDICATE 'INSERT COIN' IF NOT ENOUGH
     547                    ; HAVE BEEN DROPPED
     548                    ;
     549                    ;        CALLA   G_MSG                  ;PLOT MESSAGE FOR GAME PLAY SCREEN
     550 000013a0           CREDSP
     551                    ;       MOVE    @GAMSTATE,A0
     552                    ;       CMPI    INAMODE,A0
     553                    ;       JRNZ    NOZERO
     554                    ;NOZERO
     555                    ;       move    @GAMSTATE,a0
     556                    ;       cmpi    INGAME,a0
     557                    ;       jrne    gebknot_ingame
     558                    
     559 000013a0     0d5f          calla   update_credit_msg
         000013b0 00000000! 
     560                    
     561                    ;gebknot_ingame
     562 000013d0     05a0          MOVE    @PSTATUS2,A0
         000013e0 00000000! 
     563 00001400     cb07          JRNZ    CRX
     564 00001410     05a0          move    @GAMSTATE,a0
         00001420 00000000! 
     565 00001440     1420          subk    INAMODE,a0              ;A DISPLAY IN AMODE ONLY!
     566 00001450     cb02          jrne    CRX
     567                    
     568 00001460     c000  CRY     jruc    CRD_SCRN                ;PUT UP THE CREDITS SCREEN
         00001470     0151  
     569                    
     570 00001480     c080  CRX     JAUC    SUCIDE
         00001490 00000000! 
     571                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   13

     572                    
     573                    ********************************
     574                    * Make all switch process dumdie entries
     575                    
     576                    ;CLRSWPRC
     577                    ;       MMTM    SP,A0,A1,A3
     578                    ;
     579                    ;       CLR     A1              ;USE SWTAB ENTRY 0 FOR DUMDIE PROC
     580                    ;       MOVE    @SWSTACK,A3,L
     581                    ;CLRSTKL        CMPI    SWSTST,A3,L     ;STACK AT START?
     582                    ;       JREQ    CLRSTKX         ;YES, EXIT
     583                    ;       MOVE    *A3+,A0
     584                    ;       CMPI    31,A0
     585                    ;       JRLS    CLRSTKL         ;THIS ENTRY IS A REAL SWITCH
     586                    ;       MOVE    A1,*A3(-10H)    ;STORE THE DUMDIE CALL
     587                    ;       JRUC    CLRSTKL
     588                    ;
     589                    ;CLRSTKX        MMFM    SP,A0,A1,A3
     590                    ;       RETS
     591                    
     592                    
     593                    ********************************
     594                    *       CR_STRTP - ARE THERE ENOUGH CREDITS TO START
     595                    *       CR_CONTP - ARE THERE ENOUGH CREDITS TO CONTINUE
     596                    *       P_START  - PLAYER STARTED...DEDUCT CREDITS
     597                    *       P_CONT   - PLAYER CONTINUED...DEDUCT CREDITS
     598                    *       CRED_P   - HOW MANY CREDITS
     599                    *
     600                    *       JRHS FOR OK TO START!
     601                    
     602 000014b0           CR_STRTP
     603 000014b0                   PUSH    a0,a1
     604 000014d0     1a60          MOVK    ADJFREPL,A0
     605 000014e0     0d3f          CALLR   GET_ADJ                 ;ARE WE IN FREE PLAY?
         000014f0     05c3  
     606 00001500     0b40          CMPI    1,A0                    ;WE ARE IF ITS NOT ZERO.
         00001510     fffe  
     607 00001520     c90b          JRHS    CR_STX
     608                    
     609 00001530     0d3f          CALLR   CCCC                    ;MAKE SURE THINGS ARE IN TACT
         00001540     049f  
     610 00001550     0d3f          CALLR   COIN_PAG
         00001560     04b1  
     611 00001570     0d3f          CALLR   GET_CREDITS             ;GET CURRENT CREDITS
         00001580     00fe  
     612 00001590     4c01          MOVE    A0,A1
     613 000015a0     1980          MOVK    ADJCSTRT,A0
     614 000015b0     0d3f          CALLR   GET_ADJ                 ;GET NUMBER NEEDED
         000015c0     05b6  
     615 000015d0     4801          CMP     A0,A1                   ;DO WE HAVE ENOUGH TO START?
     616                    
     617 000015e0     09af  CR_STX  MMFM    SP,A0,A1
         000015f0     0003  
     618 00001600     0960          RETS
     619                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   14

     620 00001610           CR_CONTP
     621 00001610                   PUSH    a0,a1
     622 00001630     1a60          MOVK    ADJFREPL,A0
     623 00001640     0d3f          CALLR   GET_ADJ                 ;ARE WE IN FREE PLAY?
         00001650     05ad  
     624 00001660     0b40          CMPI    1,A0                    ;WE ARE IF ITS NOT ZERO.
         00001670     fffe  
     625 00001680     c90b          JRHS    CR_STX1
     626                    
     627 00001690     0d3f          CALLR   CCCC                    ;MAKE SURE THINGS ARE IN TACT
         000016a0     0489  
     628 000016b0     0d3f          CALLR   COIN_PAG
         000016c0     049b  
     629 000016d0     0d3f          CALLR   GET_CREDITS             ;GET CURRENT CREDITS
         000016e0     00e8  
     630 000016f0     4c01          MOVE    A0,A1
     631 00001700     19a0          MOVK    ADJCCONT,A0
     632 00001710     0d3f          CALLR   GET_ADJ                 ;GET NUMBER NEEDED
         00001720     05a0  
     633 00001730     4801          CMP     A0,A1                   ;DO WE HAVE ENOUGH TO START?
     634 00001740           CR_STX1
     635 00001740     09af          MMFM    SP,A0,A1
         00001750     0003  
     636 00001760     0960          RETS
     637                    
     638 00001770           P_START
     639 00001770     098f          MMTM    SP,A0,A1
         00001780     c000  
     640 00001790     0d3f          CALLR   CRED_P
         000017a0     00da  
     641 000017b0     4c01          MOVE    A0,A1
     642 000017c0     1980          MOVK    ADJCSTRT,A0
     643 000017d0     0d3f          CALLR   GET_ADJ                 ;GET NUMBER NEEDED
         000017e0     0594  
     644 000017f0     0d3f          CALLR   REMOVE_CREDITS
         00001800     001c  
     645 00001810     0d5f          CALLA   DEC_HSR                 ;TAKE 1 FROM HIGH SCORE RESET COUNTER
         00001820 00000000! 
     646                    
     647 00001840     0d5f          calla   update_credit_msg
         00001850 00000000! 
     648                    
     649 00001870     09af          MMFM    SP,A0,A1
         00001880     0003  
     650 00001890     0960          RETS
     651                    
     652 000018a0           P_CONT
     653 000018a0     098f          MMTM    SP,A0,A1
         000018b0     c000  
     654 000018c0     0d3f          CALLR   CRED_P
         000018d0     00c7  
     655 000018e0     4c01          MOVE    A0,A1
     656 000018f0     19a0          MOVK    ADJCCONT,A0
     657 00001900     0d3f          CALLR   GET_ADJ                 ;GET NUMBER NEEDED
         00001910     0581  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   15

     658 00001920     0d3f          CALLR   REMOVE_CREDITS
         00001930     0009  
     659 00001940     0d5f          CALLA   DEC_HSR                 ;TAKE 1 FROM HIGH SCORE RESET COUNTER
         00001950 00000000! 
     660                    
     661 00001970     0d5f          calla   update_credit_msg
         00001980 00000000! 
     662                    
     663 000019a0     09af          MMFM    SP,A0,A1
         000019b0     0003  
     664 000019c0     0960          RETS
     665                    
     666 000019d0           REMOVE_CREDITS
     667 000019d0     4401          SUB     A0,A1                   ;REMOVE START AMOUNT FROM WHAT WE HAVE
     668 000019e0     c901          JRHS    PS1                     ;WE'RE OK.
     669                    
     670 000019f0     5621          CLR     A1                      ;IT WENT NEGATIVE....MAKE ZERO.
     671 00001a00     0d3f  PS1     CALLR   COIN_PAG
         00001a10     0466  
     672 00001a20     09e7          MOVI    CREDITS,A7
         00001a30 01402940  
     673 00001a50     4c20          MOVE    A1,A0                   ;PUT WHATS LEFT OUT TO WRITE
     674 00001a60     0d5f          CALLA   WC_BYTE                 ;WRITE THE NEW AMOUNT
         00001a70 00000000! 
     675                    
     676 00001a90     0d3f          CALLR   FORM_COIN_CKSUM_AND_STORE
         00001aa0     043b  
     677 00001ab0     0d3f          CALLR   DEF_PAGE                ;POINT AT DEFAULT PAGE.
         00001ac0     05b3  
     678 00001ad0     0960          RETS
     679                                    
     680                    **************************************************************************
     681                    *
     682                    *               NO_CREDS
     683                    *
     684                    *               THIS IS CALLED TO REMOVE CREDITS AND CREDIT FRACTIONS
     685                    *               FROM THE MACHINE.
     686                    *
     687                    **************************************************************************
     688 00001ae0           NO_CREDS
     689 00001ae0     098f          MMTM    SP,A0,A1,A7
         00001af0     c100  
     690 00001b00     0d3f          CALLR   FORM_COIN_CKSUM ;MAKE THE REAL CKSUM
         00001b10     0418  
     691 00001b20     09e7          MOVI    COIN_CKSUM,A7
         00001b30 014029b0  
     692 00001b50     4c20          MOVE    A1,A0
     693 00001b60     1020          INC     A0              ;MAKE THE CKSUM BAD!
     694 00001b70     0d5f          CALLA   WC_BYTE
         00001b80 00000000! 
     695 00001ba0     09af          MMFM    SP,A0,A1,A7
         00001bb0     0083  
     696 00001bc0     0960          RETS
     697                    **************************************************************************
     698                    *
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   16

     699                    *       CHALK_COIN
     700                    *
     701                    *       A11 contains the base audit number. Chalk the audit for
     702                    *       1 more coin hit there!
     703                    *
     704                    *       3 away from the base is the "door-closed" counter
     705                    *       3 away from that is the "sub-total".
     706                    *       3 away from that is the "door-closed" sub-total.
     707                    *
     708                    **************************************************************************
     709                    ;CHALK_COIN
     710                    ;        MMTM    SP,A0
     711                    ;        MOVE    A11,A0
     712                    ;*
     713                    ;*       READY TO CHALK THE AUDIT......ZERO MEANS "EXTRA SLOT"
     714                    ;*
     715                    ;
     716                    ;CCC01
     717                    ;       CALLR   CHALK_FOR_A0    ;CHALK RELEVANT COUNTERS
     718                    ;       MMFM    SP,A0
     719                    ;       RETS
     720                    
     721                    **************************************************************************
     722                    *
     723                    *       CHALK_FOR_A0
     724                    *
     725                    *       THIS IS CALLED TO CHALK THE AUDITS FOR A COIN SWITCH.
     726                    *       A0 HAS THE BASE AUDIT FOR THE COIN SWITCH.
     727                    *
     728                    **************************************************************************
     729                    ;CHALK_FOR_A0
     730                    ;        MMTM    SP,A0
     731                    ;        CALLR   AUD1            ;CHALK THE DIRECT AUDIT
     732                    
     733                    ;        ADDI    2*CHUTES,A0     ;AND THE "SUB-TOTAL"
     734                    ;        CALLR   AUD1
     735                    
     736                    ;        SUBI    CHUTES,A0       ;MOVE TO DOOR OPEN TOTAL
     737                    ;        CALLR   AUD1
     738                    ;
     739                    ;        ADDI    2*CHUTES,A0     ;AND DOOR OPEN SUB-TOTAL
     740                    ;        CALLR   AUD1
     741                    
     742                    ;CKCN1  
     743                    ;       MMFM    SP,A0
     744                    ;       RETS
     745                    
     746                    **************************************************************************
     747                    *
     748                    *       ADJUST_CREDITS
     749                    *
     750                    *       This is the routine that turns the coin switch hit
     751                    *       into a tangable (if you could say that) reward.
     752                    *
     753                    *       The coin chute multiplier is in A8.
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   17

     754                    *
     755                    **************************************************************************
     756 00001bd0           ADJUST_CREDITS
     757                            
     758 00001bd0     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11
         00001be0     fff0  
     759 00001bf0     0d3f          CALLR   CK_MAX          ;ARE WE AT MAXIMUM CREDITS?
         00001c00     006a  
     760 00001c10     c94b          JRHS    ADCRXX          ;YEP.....DON'T ROCK THE BOAT!
     761                    
     762 00001c20     0d3f          CALLR   CCCC            ;VALIDATE THE CURRENT TOTALS (OR CLEAR!)
         00001c30     0430  
     763                    
     764 00001c40     0d3f          CALLR   FETCH_REQ       ;GET THE REQUIRED FOR CREDIT, BONUS AND MINIMUM
         00001c50     03dc  
     765                    
     766                    *       A2 = REQUIRED FOR CREDIT
     767                    *       A3 = FOR BONUS
     768                    *       A4 = MINIMUM
     769                    
     770 00001c60     0d3f          CALLR   ADD_TO_CUNITS   ;ADD TO OUR CUNITS
         00001c70     00a4  
     771 00001c80     4c63          MOVE    A3,A3           ;BONUS EFFECTIVE?
     772 00001c90     ca02          JRZ     NO_BUNITS       ;NOPE....DON'T RUN UP THE COUNTER!
     773                    
     774 00001ca0     0d3f          CALLR   ADD_TO_BUNITS   ;ADD TO BONUS UNITS
         00001cb0     00be  
     775                    
     776 00001cc0           NO_BUNITS
     777 00001cc0     4c84          MOVE    A4,A4           ;MINIMUM REQUIRED?
     778 00001cd0     ca10          JRZ     NO_MINIMUM      ;NOPE.....LEAVE ALONE.
     779                    
     780 00001ce0     09e7          MOVI    MINUNITS,A7     ;POINT AT MINIMUM
         00001cf0 01402990  
     781 00001d10     0d5f          CALLA   RC_WORD         ;GET THE AMOUNT ACCUMULATED
         00001d20 00000000! 
     782 00001d40     4100          ADD     A8,A0           ;ADD AMOUNT RECEIVED
     783 00001d50     0d5f          CALLA   WC_WORD         ;WRITE THE MINUNITS BACK IN CASE NOT ENOUGH.
         00001d60 00000000! 
     784                    
     785 00001d80     4480          SUB     A4,A0           ;DO WE HAVE ENOUGH TO ACT?
     786 00001d90     c831          JRLO    ADCRX           ;NOPE....NO CREDITS YET!
     787                    
     788 00001da0     5600          CLR     A0              ;CLEAR OUT MINIMUM FOR NEXT SHOT!
     789 00001db0     0d5f          CALLA   WC_WORD         ;REMOVE ACCUMULATED MINIMUM.
         00001dc0 00000000! 
     790                    
     791 00001de0           NO_MINIMUM
     792 00001de0     56c6          CLR     A6              ;COUNT ACCUMULATED CREDITS IN A6
     793 00001df0     574a          CLR     A10             ;IN CASE NO BONUS!
     794                    
     795 00001e00     5708          CLR     A8
     796 00001e10     09e7          MOVI    BUNITS,A7
         00001e20 01402970  
     797 00001e40     0d5f          CALLA   RC_WORD         ;GET THE NUMBER OF BUNITS
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   18

         00001e50 00000000! 
     798 00001e70     4c09          MOVE    A0,A9           ;INTO A9
     799                    
     800 00001e80     4c63          MOVE    A3,A3           ;DON'T DIVIDE BY ZERO!
     801 00001e90     ca07          JRZ     NO_BU_BU
     802 00001ea0     5a68          DIVU    A3,A8           ;DIVIDE BUNITS BY NUMBER NEEDED FOR BONUS
     803                    
     804 00001eb0     4d20          MOVE    A9,A0           ;WRITE REMAINDER BACK
     805 00001ec0     0d5f          CALLA   WC_WORD
         00001ed0 00000000! 
     806                    
     807 00001ef0     4d06          MOVE    A8,A6           ;NUMBER OF BONUS CREDITS EARNED.
     808 00001f00     4d0a          MOVE    A8,A10          ;REMEMBER IF ANY BONUS CREDITS WERE EARNED!
     809                    
     810 00001f10           NO_BU_BU
     811 00001f10     5708          CLR     A8
     812 00001f20     0d3f          CALLR   GET_CUNITS      ;READ IN THE CUNITS
         00001f30     0082  
     813 00001f40     4c09          MOVE    A0,A9
     814                    
     815 00001f50     4c42          MOVE    A2,A2           ;DON'T DIVIDE BY ZERO.
     816 00001f60     ca05          JRZ     NO_CR
     817                    
     818 00001f70     5a48          DIVU    A2,A8           ;GET CREDITS!
     819 00001f80     4d20          MOVE    A9,A0           ;REMAINDER IS LEFTOVER CUNITS
     820 00001f90     0d3f          CALLR   PUT_CUNITS
         00001fa0     0085  
     821 00001fb0     4106          ADD     A8,A6           ;A6 HAS WHAT WE'VE WON!
     822                    
     823 00001fc0           NO_CR
     824 00001fc0     4cc1          MOVE    A6,A1
     825 00001fd0     09c0          MOVI    AUDPAIDC,A0
         00001fe0     000d  
     826 00001ff0     0d5f          CALLA   AUD             ;CHALK UP THE EARNED CREDITS!
         00002000 000069e0' 
     827                    
     828 00002020     0d3f          CALLR   GET_CREDITS
         00002030     0053  
     829 00002040     40c0          ADD     A6,A0           ;ADD IN THE NEW ONES.
     830 00002050     0d3f          CALLR   PUT_CREDITS     ;NOW STORE EM BACK (ENFORCE MAX)
         00002060     0009  
     831                    
     832 00002070     4d4a          MOVE    A10,A10         ;WAS THE BONUS EARNED?
     833 00002080     ca02          JRZ     ADCRX           ;NOPE...EXIT!
     834                    *
     835                    *        WHEN BONUS EARNED...WE START THE WHOLE SYSTEM OVER!
     836                    *
     837 00002090     0d3f          CALLR   CLEAR_UNITS
         000020a0     0038  
     838                    
     839 000020b0     0d3f  ADCRX   CALLR   FORM_COIN_CKSUM_AND_STORE
         000020c0     03d9  
     840                    
     841 000020d0     09af  ADCRXX  MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11
         000020e0     0fff  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   19

     842 000020f0     0960          RETS
     843                    
     844                    **************************************************************************
     845                    *
     846                    *       PUT_CREDITS
     847                    *
     848                    *       STORE CREDIT COUNT IN A0 TO CMOS....ENFORCING MAXIMUM CREDITS.
     849                    *
     850                    **************************************************************************
     851 00002100           PUT_CREDITS
     852 00002100     098f          MMTM    SP,A0,A6,A7
         00002110     8300  
     853 00002120     0d3f          CALLR   GET_MAX         ;GET MAX CREDS IN A1....BE ON COIN PAGE
         00002130     000e  
     854 00002140     4820          CMP     A1,A0           ;SEE HOW WE STACK UP.
     855 00002150     c803          JRLO    USE_A0          ;WE'RE LOWER...JUST STORE.
     856                    *
     857                    *       WE'RE AT (OR OVER) MAXIMUM CREDITS
     858                    *
     859 00002160     0d3f          CALLR   CLEAR_UNITS     ;CLEAR OUT THE UNIT FRACTIONS.
         00002170     002b  
     860 00002180     4c20          MOVE    A1,A0           ;USE MAXIMUM
     861                    
     862 00002190     09e7  USE_A0  MOVI    CREDITS,A7
         000021a0 01402940  
     863 000021c0     0d5f          CALLA   WC_BYTE         ;WRITE THE CREDITS OUT.
         000021d0 00000000! 
     864 000021f0     09af          MMFM    SP,A0,A6,A7
         00002200     00c1  
     865 00002210     0960          RETS
     866                    
     867                    **************************************************************************
     868                    *
     869                    *       GET_MAX
     870                    *
     871                    *       GET MAXIMUM CREDITS IN A1.
     872                    *
     873                    *       THIS LEAVES YOU ON COIN PAGE.
     874                    *
     875                    **************************************************************************
     876 00002220           GET_MAX
     877 00002220                   PUSH    a0
     878 00002230     1a40          MOVK    ADJMAXC,A0
     879 00002240     0d5f          CALLA   GET_ADJ_FOR_COIN        ;FETCH MAXIMUM CREDITS (PUT US ON COIN PAGE)
         00002250 00007360' 
     880 00002270     4c01          MOVE    A0,A1
     881 00002280     09af          MMFM    SP,A0
         00002290     0001  
     882 000022a0     0960          RETS
     883                    
     884                    **************************************************************************
     885                    *
     886                    *       CK_MAX
     887                    *
     888                    *       THIS IS CALLED TO SEE IF WE ARE AT MAXIMUM CREDITS.
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   20

     889                    *       .HS. MEANS WE ARE AT MAXIMUM CREDITS.
     890                    *
     891                    **************************************************************************
     892 000022b0           CK_MAX
     893 000022b0     098f          MMTM    SP,A0,A1
         000022c0     c000  
     894 000022d0     0d3f          CALLR   GET_MAX                 ;GET MAXIMUM IN A1
         000022e0     fff3  
     895 000022f0     0d3f          CALLR   CRED_P                  ;GET CREDITS IN A0 (AND FLIP PAGE AWAY)
         00002300     0024  
     896 00002310     4820          CMP     A1,A0                   ;JRHS FOR MAXIMUM CREDITS!
     897 00002320     09af          MMFM    SP,A0,A1
         00002330     0003  
     898 00002340     0960          RETS
     899                    
     900                    **************************************************************************
     901                    *
     902                    *       UNIT_CLR
     903                    *
     904                    *       THIS IS CALLED AT GAME OVER.  IT CLEARS
     905                    *       OUT ANY COIN FRACTIONS THAT WERE NOT USED BY THE
     906                    *       CURRENT PLAYER(S).  THIS ALLOWS ALL BUY-IN TO
     907                    *       TAKE ADVANTAGE OF MULTIPLE COIN BONUSES.
     908                    *
     909                    *       ANYTIME A COIN IS INSERTED, C_FRAC IS SET TO ABOUT
     910                    *       10 SECONDS. MY TIMING INTERFACE COUNTS C_FRAC DOWN
     911                    *       TO ZERO.  IF C_FRAC IS NON ZERO WHEN THIS ROUTINE IS
     912                    *       CALLED, THEN SOMEONE PUT A COIN IN NOT TOO LONG BEFORE
     913                    *       GAME OVER.  DON'T SCREW HIM OUT OF HIS FRACTIONS.
     914                    *
     915                    **************************************************************************
     916 00002350           UNIT_CLR
     917 00002350                   PUSH    a0
     918 00002360     05a0          MOVE    @C_FRAC,A0                      ;DO WE GIVE HIM A REPRIEVE?
         00002370 00000020- 
     919 00002390     cb06          JRNZ    UC1                             ;YEP!
     920 000023a0     0d3f          CALLR   CCCC                            ;VALIDATE COINAGE
         000023b0     03b8  
     921 000023c0     0d3f          CALLR   CLEAR_UNITS                     ;CLEAR OUT FRACTIONAL UNITS
         000023d0     0005  
     922 000023e0     0d3f          CALLR   FORM_COIN_CKSUM_AND_STORE       ;MAKE ALL GOOD.
         000023f0     03a6  
     923 00002400           UC1
     924 00002400     09af          MMFM    SP,A0
         00002410     0001  
     925 00002420     0960          RETS
     926                    
     927 00002430           CLEAR_UNITS
     928 00002430     098f          MMTM    SP,A0,A7
         00002440     8100  
     929 00002450     5600          CLR     A0
     930 00002460     09e7          MOVI    CUNITS,A7               ;3 CONSECUTIVE WORDS OF CMOS
         00002470 01402950  
     931 00002490     0d5f          CALLA   WC_WORDI
         000024a0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   21

     932 000024c0     0d5f          CALLA   WC_WORDI
         000024d0 00000000! 
     933 000024f0     0d5f          CALLA   WC_WORD
         00002500 00000000! 
     934 00002520     09af          MMFM    SP,A0,A7
         00002530     0081  
     935 00002540     0960          RETS
     936                    
     937                    *        RETURN CREDITS IN A0.........AND Z BIT CLEAR IF
     938                    *        CREDITS EXIST OR IN FREE PLAY.
     939                    
     940 00002550           CRED_P
     941 00002550     0d3f          CALLR   CCCC            ;CHECK TO SEE IF DATA IS OK.
         00002560     039d  
     942                    
     943 00002570           GET_CREDITS
     944 00002570                   PUSH    a7
     945 00002580     0d3f          CALLR   COIN_PAG
         00002590     03ae  
     946 000025a0     09e7          MOVI    CREDITS,A7      ;
         000025b0 01402940  
     947 000025d0     0d5f          CALLA   RC_BYTE         ;READ CURRENT CREDITS
         000025e0 00000000! 
     948 00002600     cb06          JRNZ    GC1             ;WE GOT SOME!
     949                    
     950                                                    ;PUSH THE ZERO!
     951 00002610                   PUSH    a0
     952 00002620     1a60          MOVK    ADJFREPL,A0
     953 00002630     0d3f          CALLR   GET_ADJ         ;SEE IF FREEPLAY......(Z BIT CLEAR IF SO!)
         00002640     04ae  
     954 00002650     09af          MMFM    SP,A0           ;RESTORE A0
         00002660     0001  
     955                    
     956 00002670     0d3f  GC1     CALLR   DEF_PAGE        ;FLIP CMOS AWAY
         00002680     04f7  
     957 00002690     09af          MMFM    SP,A7
         000026a0     0080  
     958 000026b0     0960          RETS
     959                    
     960 000026c0           ADD_TO_CUNITS
     961 000026c0     098f          MMTM    SP,A0,A7
         000026d0     8100  
     962 000026e0     0d3f          CALLR   GET_CUNITS
         000026f0     0006  
     963 00002700     4100          ADD     A8,A0
     964 00002710     0d3f          CALLR   PUT_CUNITS
         00002720     000d  
     965 00002730     09af          MMFM    SP,A0,A7
         00002740     0081  
     966 00002750     0960          RETS
     967                    
     968 00002760           GET_CUNITS
     969 00002760                   PUSH    a7
     970 00002770     09e7          MOVI    CUNITS,A7
         00002780 01402950  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   22

     971 000027a0     0d5f          CALLA   RC_WORD
         000027b0 00000000! 
     972 000027d0     09af          MMFM    SP,A7
         000027e0     0080  
     973 000027f0     0960          RETS
     974                    
     975 00002800           PUT_CUNITS
     976 00002800                   PUSH    a7
     977 00002810     09e7          MOVI    CUNITS,A7
         00002820 01402950  
     978 00002840     0d5f          CALLA   WC_WORD
         00002850 00000000! 
     979 00002870     09af          MMFM    SP,A7
         00002880     0080  
     980 00002890     0960          RETS
     981                    
     982 000028a0           ADD_TO_BUNITS
     983 000028a0     098f          MMTM    SP,A7,A0
         000028b0     8100  
     984 000028c0     09e7          MOVI    BUNITS,A7
         000028d0 01402970  
     985 000028f0     0d5f          CALLA   RC_WORD
         00002900 00000000! 
     986 00002920     4100          ADD     A8,A0
     987 00002930     0d5f          CALLA   WC_WORD
         00002940 00000000! 
     988 00002960     09af          MMFM    SP,A7,A0
         00002970     0081  
     989 00002980     0960          RETS
     990                    
     991                    
     992                    ******************************************************************************
     993                    
     994 00002990           CRD_SCRN
     995                    
     996 00002990     574a          CLR     a10                     ;Sleep 7 secs
     997                    
     998 000029a0            SUBR   CRD_SCRN2                       ;Entry pnt for shorter sleep
     999                    
    1000 000029a0     5600          clr     a0
    1001 000029b0     0580          move    a0,@SHOW_CRD_FLAG
         000029c0 00000000! 
    1002                            .ref    SHOW_CRD_FLAG
    1003                    
    1004 000029e0     09c0          MOVI    CP_PID1,A0              ;CHANGE TO "CREDIT PAGE" ID 1
         000029f0     0118  
    1005 00002a00     b00d          MOVE    A0,*A13(PROCID)
         00002a10     0020  
    1006 00002a20     09e1          MOVI    0FFFFH,A1               ;CHECK TO SEE IF CREDIT PAGE IS UP
         00002a30 0000ffff  
    1007 00002a50     0d5f          CALLA   EXISTP
         00002a60 00000000! 
    1008 00002a80     cb3b          jrnz    gebkexists                      ;credit page up, so reprint text only
    1009                    
    1010 00002a90     0d5f          calla   display_blank
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   23

         00002aa0 00000000! 
    1011 00002ac0     0d5f          calla   WIPEOUT                 ;CLEAN SYSTEM OUT
         00002ad0 00000000! 
    1012                    
    1013 00002af0     1820          movk    1,a0                    ;page flipping on
    1014 00002b00     0580          move    a0,@dpageflip
         00002b10 00000000! 
    1015                    
    1016 00002b30     09e0          movi    SCRNEND,a0              ;[256,405]
         00002b40 00fe01b0  
    1017 00002b60     0780          move    a0,@SCRNLR,L
         00002b70 00000000! 
    1018                    
    1019 00002b90     5600          clr     a0
    1020 00002ba0     0780          move    a0,@WORLDTLX,L
         00002bb0 00000000! 
    1021 00002bd0     0780          move    a0,@WORLDTLY,L
         00002be0 00000000! 
    1022                    
    1023 00002c00                   SLEEPK  2
    1024                    
    1025 00002c40     09e0          movi    coinin_mod,a0
         00002c50 000033f0' 
    1026 00002c70     0780          move    a0,@BAKMODS,L
         00002c80 00000000! 
    1027 00002ca0     0d5f          calla   BGND_UD1
         00002cb0 00000000! 
    1028                    
    1029 00002cd0     1820          movk    1,a0
    1030 00002ce0     0580          move    a0,@DISPLAYON           ;Display processor on
         00002cf0 00000000! 
    1031                    
    1032 00002d10     0d3f          callr   crd_updatetxt
         00002d20     0072  
    1033                    
    1034 00002d30                   SLEEPK  2
    1035                    
    1036 00002d70     09c0          movi    4<<10+4<<5+7,a0
         00002d80     1087  
    1037 00002d90     0580          move    a0,@IRQSKYE
         00002da0 00000000! 
    1038                    
    1039 00002dc0                   SLEEPK  2
    1040 00002e00     0d5f          calla   display_unblank
         00002e10 00000000! 
    1041                    
    1042 00002e30     c011          jruc    gebkcont
    1043                    
    1044                    
    1045 00002e40           gebkexists
    1046 00002e40     05a0          move    @HEBLNK,a0
         00002e50 c0000010  
    1047 00002e70     0b40          cmpi    HEBLNKINIT,a0
         00002e80     ff9a  
    1048 00002e90     cb04          jrne    gebkinscl
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   24

    1049 00002ea0     05a0          move    @dtype,a0
         00002eb0 00000000! 
    1050 00002ed0     c503          jrge    gebknotinscl
    1051 00002ee0     4d4a  gebkinscl       move    a10,a10
    1052 00002ef0     cb4c          jrnz    KILL_CRD2
    1053 00002f00     c048          jruc    gebkdie
    1054 00002f10           gebknotinscl
    1055 00002f10                   SLEEPK  3
    1056 00002f50           gebkcont
    1057 00002f50     0d3f          callr   crd_updatetxt           ;Display players per credit messages
         00002f60     004e  
    1058                    
    1059 00002f70     09c0          movi    HEBLNKINIT,a0                   ;Display on (just in case)
         00002f80     0065  
    1060 00002f90     0580          move    a0,@HEBLNK
         00002fa0 c0000010  
    1061                    
    1062                    
    1063 00002fc0                   SLEEP   1*TSEC
    1064                    
    1065                    
    1066 00003010     09cb          movi    4*TSEC,a11
         00003020     00d4  
    1067 00003030           gebklp  SLEEPK  1
    1068                            .ref    get_all_buttons_cur2
    1069 00003070     0d5f          calla   get_all_buttons_cur2
         00003080 00000000! 
    1070 000030a0     ca08          jrz     gebknob
    1071 000030b0     09c0          movi    bounce_snd,a0
         000030c0     0001  
    1072 000030d0     0d5f          calla   triple_sound
         000030e0 00000000! 
    1073 00003100     4d4a          move    a10,a10
    1074 00003110     cb2a          jrnz    KILL_CRD2
    1075 00003120     c014          jruc    KILL_CRD
    1076 00003130           gebknob
    1077 00003130     3e2b          dsj     a11,gebklp
    1078                    
    1079 00003140           gebkck2
    1080 00003140     4d4a          move    a10,a10
    1081 00003150     cb26          jrnz    KILL_CRD2
    1082                    
    1083 00003160     09cb          movi    10*TSEC,a11
         00003170     0212  
    1084 00003180           gebklp1 SLEEPK  1
    1085 000031c0     0d5f          calla   get_all_buttons_cur2
         000031d0 00000000! 
    1086 000031f0     ca06          jrz     gebknob1
    1087 00003200     09c0          movi    bounce_snd,a0
         00003210     0001  
    1088 00003220     0d5f          calla   triple_sound
         00003230 00000000! 
    1089 00003250     c001          jruc    KILL_CRD
    1090 00003260           gebknob1
    1091 00003260     3deb          dsj     a11,gebklp1
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   25

    1092                    
    1093 00003270           KILL_CRD
    1094 00003270     0d5f          calla   display_blank
         00003280 00000000! 
    1095 000032a0     0d5f          calla   WIPEOUT                 ;CLEAN SYSTEM OUT
         000032b0 00000000! 
    1096 000032d0                   SLEEPK  1
    1097                    
    1098 00003310                   CREATE  AMODE_PID,attract_mode
    1099                    
    1100 00003390           gebkdie DIE
    1101                    
    1102                    
    1103 000033c0           KILL_CRD2
    1104 000033c0                   RETP
    1105                    
    1106 000033f0           coinin_mod
    1107 000033f0 00000000!         .long   slateBMOD
    1108 00003410     0000          .word   0,0
    1109 00003430 00000000          .long   0
    1110                    
    1111                    
    1112                    ********************************
    1113                    
    1114 00003450            SUBRP  crd_updatetxt
    1115                    
    1116 00003450     09c0          movi    CP_PID1,a0              ;PID
         00003460     0118  
    1117 00003470     09e1          movi    0ffffh,a1               ;mask bits
         00003480 0000ffff  
    1118 000034a0     0d5f          calla   KILALL                  ;kill all CP_PID1 procs except self
         000034b0 00000000! 
    1119                    
    1120 000034d0     09c0          movi    TYPTEXT,a0              ;object ID
         000034e0     0700  
    1121 000034f0     5621          clr     a1                      ;mask
    1122 00003500     0d5f          calla   obj_delc                ;delete existing text
         00003510 00000000! 
    1123                    
    1124                    ;       MOVI    CPYR_MES,a2             ;COPYRIGHT MESSAGE
    1125                    
    1126                    ;       .ref    DIPSWITCH
    1127                    ;       move    @DIPSWITCH,a0
    1128 00003530     07a0          move    @_dipswitch_addr,a0,L
         00003540 00000000! 
    1129 00003560     8400          move    *a0,a0
    1130 00003570     1f20          btst    6,a0                    ;UJ2 switch 1
    1131 00003580     cb06          jrnz    gebknotfair             ;OFF?
    1132                    
    1133                    ;Yes, a dollar bill acceptor is hooked up!
    1134                    
    1135 00003590     09e2          MOVI    dollar_mes,a2           ;Dollar bill message
         000035a0 0000ab10' 
    1136 000035c0     0d5f          calla   print_message
         000035d0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   26

    1137 000035f0           gebknotfair
    1138                    
    1139 000035f0                   PUSH    A10
    1140 00003600     0d3f          callr   credits_string
         00003610     0002  
    1141 00003620                   PULL    A10
    1142 00003630     0960          rets
    1143                    
    1144                    *****************************************************************************
    1145                    
    1146                            .asg    25,YSPACE
    1147                            .asg    17,YSPACE0
    1148                    
    1149                            .asg    40,LN0
    1150                            .asg    70,LN1
    1151                            .asg    100,LN2
    1152                            .asg    130,LN3
    1153                            .asg    90,LN3x         ;free play y-line
    1154                            .asg    160,LN4
    1155                            .asg    190,LN5
    1156                            .asg    220,LN6
    1157                    
    1158                    
    1159              000d  CM_Y_GAP        EQU     13
    1160              0050  CM_Y_GAP2       EQU     80
    1161          000d00c8  CM_Y_ADDGAP     EQU     [CM_Y_GAP,200]
    1162                    
    1163                    
    1164 00003640           credits_string
    1165                    
    1166 00003640     1a60          MOVK    ADJFREPL,A0             ;ARE WE IN FREE PLAY?
    1167 00003650     0d5f          CALLA   GET_ADJ
         00003660 00007130' 
    1168 00003680     ca12          JRZ     fmrnnot_freeply
    1169                    
    1170 00003690     09e2          movi    LN3x_setup,a2
         000036a0 00004710' 
    1171 000036c0     0d5f          calla   setup_message
         000036d0 00000000! 
    1172 000036f0     09c0          movi    40,a0
         00003700     0028  
    1173 00003710     0580          move    a0,@mess_line_spacing
         00003720 00000000! 
    1174 00003740     09e4          movi    fmrnstr_freeply,a4
         00003750 00004df8' 
    1175 00003770     0d5f          calla   print_string_C2
         00003780 00000000! 
    1176                            
    1177 000037a0     0960          rets
    1178                    
    1179 000037b0           fmrnnot_freeply
    1180                    
    1181                    ;print  "BEST VALUE"
    1182                    ;       movi    LN0a_setup,a2
    1183                    ;       calla   setup_message
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   27

    1184                    ;       movi    fmrnstr_value,a4
    1185                    ;       calla   print_string_C2
    1186                    
    1187                    
    1188                    ;print "PURCHASE FULL GAMES FOR ONLY X CREDITS!"
    1189                    ;       movi    LN0_setup,a2
    1190                    ;       calla   setup_message
    1191                    ;       movi    fmrnstr_fullg1,a4
    1192                    ;       calla   print_string_C2
    1193                    
    1194                    ;       move    @mess_cursy,a0
    1195                    ;       addi    YSPACE0,a0
    1196                    ;       move    a0,@mess_cursy
    1197                    ;       movi    ADJFULLG,a0
    1198                    ;       calla   GET_ADJ                 ;# credits for full game
    1199                    ;       movi    20,a1                   ;max string value
    1200                    ;       calla   dec_to_asc
    1201                    ;       calla   copy_string
    1202                    ;       movi    fmrnstr_fullg2,a4
    1203                    ;       calla   concat_rom_string
    1204                    ;       calla   print_string_C
    1205                    
    1206                    
    1207                    
    1208 000037b0     0d5f          calla   GET_CSPT                ;a6 = * current pricing table
         000037c0 00000000! 
    1209 000037e0     184a          movk    2,a10                   ;min number strings to print
    1210 000037f0     b6cb          move    *a6(CS_LIST),a11,L      ;a11 = * string list
         00003800     0190  
    1211 00003810     ca05          jrz     fmrnno_strings
    1212                    
    1213 00003820     4d62          move    a11,a2
    1214 00003830           fmrnnext_string
    1215 00003830     9640          move    *a2+,a0,L               ;count up number of strings
    1216 00003840     ca02          jrz     fmrnlast
    1217 00003850     102a          inc     a10
    1218 00003860     c0fc          jruc    fmrnnext_string
    1219 00003870           fmrnlast
    1220 00003870           fmrnno_strings
    1221 00003870     0d3f          callr   CRED_P                  ;get number credits
         00003880     fecc  
    1222 00003890     4c03          move    a0,a3
    1223 000038a0     1980          MOVK    ADJCSTRT,A0
    1224 000038b0     0d3f          callr   GET_ADJ                 ;# credits to start
         000038c0     0386  
    1225 000038d0     5a03          divu    a0,a3                   ;credits / credits to start
    1226 000038e0     4c63          move    a3,a3
    1227 000038f0     ca01          jrz     fmrnnot_enough1
    1228 00003900     102a          inc     a10                     ;+1 string      (READY FOR...)
    1229 00003910           fmrnnot_enough1
    1230                    
    1231                    
    1232                    ;print  "CREDITS : N"
    1233                    
    1234 00003910     09e2          movi    LN1_setup,a2
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   28

         00003920 00004530' 
    1235 00003940     0d5f          calla   setup_message
         00003950 00000000! 
    1236                    
    1237 00003970     0d3f          callr   CRED_P                  ;# credits in a0
         00003980     febc  
    1238 00003990                   PUSH    a0
    1239                    
    1240 000039a0     09e4          movi    fmrncrd_str,a4
         000039b0 00004b40' 
    1241 000039d0     0d5f          calla   copy_rom_string
         000039e0 00000000! 
    1242                    
    1243 00003a00                   PULL    a0
    1244 00003a10                   PUSH    a0
    1245 00003a20     09c1          movi    99,a1                   ;max string value
         00003a30     0063  
    1246 00003a40     0d5f          calla   dec_to_asc
         00003a50 00000000! 
    1247 00003a70     0d5f          calla   concat_string
         00003a80 00000000! 
    1248                    
    1249 00003aa0     1a40          MOVK    ADJMAXC,a0
    1250 00003ab0     0d5f          calla   GET_ADJ_FOR_COIN        ;a0 = max credits
         00003ac0 00007360' 
    1251 00003ae0                   PULL    a1
    1252 00003af0     4801          cmp     a0,a1
    1253 00003b00     c806          jrlo    fmrnnot_max_crds
    1254 00003b10     09e4          movi    fmrnstr_max,a4          ;max credits
         00003b20 00004ae8' 
    1255 00003b40     0d5f          calla   concat_rom_string
         00003b50 00000000! 
    1256 00003b70           fmrnnot_max_crds
    1257 00003b70     0d5f          calla   print_string_C          ;"CREDITS : NN"
         00003b80 00000000! 
    1258                    
    1259                    
    1260                    ;print 0-3 strings from current pricing table
    1261                    
    1262 00003ba0     09e2          movi    LN2_setup,a2
         00003bb0 000045d0' 
    1263 00003bd0     0d5f          calla   setup_message
         00003be0 00000000! 
    1264                    
    1265 00003c00     09c0          movi    140,a0
         00003c10     008c  
    1266 00003c20     09c1          movi    YSPACE0,a1
         00003c30     0011  
    1267 00003c40     5f41          mpyu    a10,a1                  ;# strings * Y spacing
    1268 00003c50     2fe1          srl     1,a1                    ;/2
    1269 00003c60     4420          sub     a1,a0
    1270 00003c70     0580          move    a0,@mess_cursy          ;centered Y
         00003c80 00000000! 
    1271                    
    1272 00003ca0     0d5f          calla   TAMPEREDP
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   29

         00003cb0 00000000! 
    1273 00003cd0     ca0e          JRZ     fmrndone
    1274                    
    1275 00003ce0           fmrnnext_string2
    1276 00003ce0     9764          move    *a11+,a4,L              ;* next string
    1277 00003cf0     ca0c          jrz     fmrndone
    1278                    
    1279 00003d00     05a0          move    @mess_cursy,a0
         00003d10 00000000! 
    1280 00003d30     0b00          addi    YSPACE0,a0
         00003d40     0011  
    1281 00003d50     0580          move    a0,@mess_cursy
         00003d60 00000000! 
    1282                    
    1283 00003d80     0d5f          calla   print_string_C2
         00003d90 00000000! 
    1284                    
    1285 00003db0     c0f2          jruc    fmrnnext_string2
    1286 00003dc0           fmrndone
    1287                    
    1288                    
    1289                    ;print  "N CREDITS TO START"
    1290                    
    1291 00003dc0     05a0          move    @mess_cursy,a0
         00003dd0 00000000! 
    1292 00003df0     0b00          addi    YSPACE0,a0
         00003e00     0011  
    1293 00003e10     0580          move    a0,@mess_cursy
         00003e20 00000000! 
    1294                    
    1295 00003e40     1980          MOVK    ADJCSTRT,a0
    1296 00003e50     0d3f          callr   GET_ADJ                 ;# credits to start
         00003e60     032c  
    1297 00003e70                   PUSH    a0
    1298 00003e80     09c1          movi    99,a1                   ;max string value
         00003e90     0063  
    1299 00003ea0     0d5f          calla   dec_to_asc
         00003eb0 00000000! 
    1300 00003ed0     0d5f          calla   copy_string
         00003ee0 00000000! 
    1301                    
    1302 00003f00     09e4          movi    fmrncrd_2start,a4
         00003f10 00004b98' 
    1303 00003f30                   PULL    a0
    1304 00003f40     1420          dec     a0
    1305 00003f50     ca03          jrz     fmrn1credit
    1306 00003f60     09e4          movi    fmrncrd_2starts,a4
         00003f70 00004c20' 
    1307 00003f90           fmrn1credit
    1308 00003f90     0d5f          calla   concat_rom_string
         00003fa0 00000000! 
    1309 00003fc0     0d5f          calla   print_string_C
         00003fd0 00000000! 
    1310                    
    1311                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   30

    1312                    ;print  "N CREDITS TO CONTINUE"
    1313                    
    1314 00003ff0     05a0          move    @mess_cursy,a0
         00004000 00000000! 
    1315 00004020     0b00          addi    YSPACE0,a0
         00004030     0011  
    1316 00004040     0580          move    a0,@mess_cursy
         00004050 00000000! 
    1317                    
    1318 00004070     09c0          MOVI    ADJCCONT,a0             ;# credits to continue
         00004080     000d  
    1319 00004090     0d3f          callr   GET_ADJ
         000040a0     0308  
    1320 000040b0                   PUSH    a0
    1321 000040c0     09c1          movi    99,a1                   ;max string value
         000040d0     0063  
    1322 000040e0     0d5f          calla   dec_to_asc
         000040f0 00000000! 
    1323 00004110     0d5f          calla   copy_string
         00004120 00000000! 
    1324 00004140     09e4          movi    fmrncrd_2cont,a4
         00004150 00004cb0' 
    1325 00004170                   PULL    a0
    1326 00004180     1420          dec     a0
    1327 00004190     ca03          jrz     fmrn1_creditb
    1328 000041a0     09e4          movi    fmrncrd_2conts,a4
         000041b0 00004d50' 
    1329 000041d0           fmrn1_creditb
    1330 000041d0     0d5f          calla   concat_rom_string
         000041e0 00000000! 
    1331 00004200     0d5f          calla   print_string_C
         00004210 00000000! 
    1332                    
    1333                    
    1334                    ;print READY FOR N PLAYERS and PRESS START/INSERT COIN messages
    1335 00004230     09e2          movi    LN5_setup,a2
         00004240 000047b0' 
    1336 00004260     0d5f          calla   setup_message
         00004270 00000000! 
    1337                    
    1338 00004290     0d3f          callr   CRED_P                  ;get number credits
         000042a0     fe2a  
    1339 000042b0     4c03          move    a0,a3
    1340                    
    1341 000042c0     1980          MOVK    ADJCSTRT,A0
    1342 000042d0     0d3f          callr   GET_ADJ                 ;# credits to start
         000042e0     02e4  
    1343                    
    1344 000042f0     5a03          divu    a0,a3                   ;credits / credits to start
    1345 00004300     4c63          move    a3,a3
    1346 00004310     ca12          jrz     fmrnnot_ready
    1347 00004320     1423          dec     a3
    1348                    
    1349                    ;;;     move    @TWOPLAYERS,a0          ;0 = NO, 1 = YES 2 players
    1350                    ;;;     jrz     fmrn4_plyrs
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   31

    1351                    
    1352 00004330     0b43          cmpi    2,a3
         00004340     fffd  
    1353 00004350     c802          jrlo    fmrnnot_max
    1354 00004360     09c3          movi    1,a3
         00004370     0001  
    1355                    
    1356 00004380           fmrn4_plyrs
    1357                    ;;;     cmpi    4,a3
    1358                    ;;;     jrlo    fmrnnot_max
    1359                    ;;;     movi    3,a3
    1360 00004380           fmrnnot_max
    1361 00004380     24a3          sll     5,a3            ;x 32 bits
    1362 00004390     0b23          addi    fmrnready_for_lookup,a3
         000043a0 00004f20' 
    1363 000043c0     8664          move    *a3,a4,L
    1364                    ;       move    @mess_cursy,a0
    1365                    ;       addi    YSPACE,a0
    1366                    ;       move    a0,@mess_cursy
    1367 000043d0     0d5f          calla   print_string_C2
         000043e0 00000000! 
    1368                    
    1369 00004400     09e4          movi    fmrnstr_start,a4
         00004410 00004e50' 
    1370 00004430     c003          jruc    fmrnready
    1371                    
    1372 00004440           fmrnnot_ready
    1373                    ;Turmell
    1374                    ;       movi    RUBYPAL,a0              ;redpal
    1375                    ;       move    a0,@message_palette
    1376 00004440     09e4          movi    fmrnstr_insert,a4
         00004450 00004eb8' 
    1377 00004470           fmrnready
    1378 00004470     05a0          move    @mess_cursy,a0
         00004480 00000000! 
    1379 000044a0     0b00          addi    YSPACE,a0
         000044b0     0019  
    1380 000044c0     0580          move    a0,@mess_cursy
         000044d0 00000000! 
    1381                    
    1382 000044f0     0d5f          calla   print_string_C2
         00004500 00000000! 
    1383                    
    1384 00004520     0960          rets
    1385                    
    1386                    
    1387                    
    1388                    ;LN0a_setup
    1389                    ;       JAM_STR osgemd_ascii,10,0,200,LN0-3-YSPACE,WHITEPAL,0
    1390                    ;       .even
    1391                    ;LN0_setup
    1392                    ;       JAM_STR ogmd10_ascii,5,0,200,LN0-YSPACE,SGMD8WHT,0
    1393                    ;       .even
    1394 00004530           LN1_setup
    1395 00004530                   JAM_STR osgemd_ascii,10,0,200,LN1+4,GOLD,0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   32

    1396 000045d0                   .even
    1397 000045d0           LN2_setup
    1398 000045d0                   JAM_STR ogmd10_ascii,5,0,200,LN2,SGMD8GLD,0
    1399 00004670                   .even
    1400 00004670           LN3_setup
    1401 00004670                   JAM_STR osgemd_ascii,5,0,200,LN3,GREENPAL,0
    1402 00004710                   .even
    1403 00004710           LN3x_setup
    1404 00004710                   JAM_STR wgsf24_ascii,8,0,200,LN3x,WGSF_Y_P,0
    1405 000047b0                   .even
    1406 000047b0           LN5_setup
    1407 000047b0                   JAM_STR osgemd_ascii,10,0,200,LN5+10,GREENPAL,0
    1408 00004850                   .even
    1409 00004850           LN6_setup
    1410 00004850                   JAM_STR osgemd_ascii,10,0,200,LN6,GOLD,0
    1411 000048f0                   .even
    1412                    
    1413 000048f0           fmrnstr_value
    1414 000048f0       42          .string "BEST VALUE:",0
    1415 00004950           fmrnstr_fullg1
    1416 00004950       50          .string "PURCHASE FULL GAMES FOR ONLY ",0
    1417 00004a40           fmrnstr_fullg2
    1418 00004a40       20          .string " CREDITS PER PLAYER!",0
    1419 00004ae8           fmrnstr_max
    1420 00004ae8       20          .string " (MAXIMUM)",0
    1421 00004b40           fmrncrd_str
    1422 00004b40       43          .string "CREDITS : ",0
    1423 00004b98           fmrncrd_2start
    1424 00004b98       20          .string " CREDIT TO START",0
    1425 00004c20           fmrncrd_2starts
    1426 00004c20       20          .string " CREDITS TO START",0
    1427 00004cb0           fmrncrd_2cont
    1428 00004cb0       20          .string " CREDIT TO CONTINUE",0
    1429 00004d50           fmrncrd_2conts
    1430 00004d50       20          .string " CREDITS TO CONTINUE",0
    1431 00004df8           fmrnstr_freeply
    1432 00004df8       46          .string "FREE  PLAY",1
    1433 00004e50           fmrnstr_start
    1434 00004e50       50          .string "PRESS  START",0
    1435 00004eb8           fmrnstr_insert
    1436 00004eb8       49          .string "INSERT COINS",0
    1437 00004f20                   .even
    1438 00004f20           fmrnready_for_lookup
    1439 00004f20 00004fa0'         .long   fmrnstr_1p,fmrnstr_2p
    1440 00004f60 00005100'         .long   fmrnstr_3p,fmrnstr_4p
    1441 00004fa0       52  fmrnstr_1p      .string "READY FOR 1 PLAYER",0
    1442 00005038       52  fmrnstr_2p      .string "READY FOR 1 OR 2 PLAYERS",0
    1443 00005100       52  fmrnstr_3p      .string "READY FOR 1 - 3 PLAYERS",0
    1444 000051c0       52  fmrnstr_4p      .string "READY FOR 1 - 4 PLAYERS",0
    1445 00005280                   .even
    1446                    
    1447                    
    1448                     .if 0
    1449                    
    1450                    CM_LINE1  EQU     CUSTOM_MESSAGE
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   33

    1451                    CM_LINE2  EQU     CUSTOM_MESSAGE+CMESS_LINE_SIZE
    1452                    CM_LINE3  EQU     CUSTOM_MESSAGE+(2*CMESS_LINE_SIZE)
    1453                    
    1454                    ;OUTPUT_CUSTOM
    1455                    
    1456                    
    1457                            CALLA   ADJ_PAGE 
    1458                            MOVI    VALID_CUSTOM,A7
    1459                            CALLA   RC_WORD
    1460                            CMPI    VALID_VALUE,A0          ; CHECK TO SEE IF MESSAGE IS VALID
    1461                            JRNZ    fmrnzippo
    1462                    
    1463                    
    1464                            movi    CM_LINE3,A10            ;CHECK LINE 3
    1465                            callr   CK_LINE                 ;3 VALID LINES?
    1466                            jrz     GO_FOR_2
    1467                            movi    LN2_setup,a2
    1468                            calla   setup_message
    1469                            movi    STRNGRAM,a4
    1470                            calla   print_string_C2
    1471                    GO_FOR_2
    1472                            movi    CM_LINE2,A10            ;CHECK LINE 2
    1473                            callr   CK_LINE                 ;2 VALID LINES?
    1474                            jrz     GO_FOR_1
    1475                            movi    LN3_setup,a2
    1476                            calla   setup_message
    1477                            movi    STRNGRAM,a4
    1478                            calla   print_string_C2
    1479                    GO_FOR_1
    1480                            movi    CM_LINE1,A10            ;CHECK LINE 1
    1481                            callr   CK_LINE                 ;1 VALID LINES?
    1482                            jrz     fmrnzippo
    1483                            movi    LN4_setup,a2
    1484                            calla   setup_message
    1485                            movi    STRNGRAM,a4
    1486                            calla   print_string_C2
    1487                    fmrnzippo
    1488                     .endif
    1489                    
    1490                    *****************************************************************************
    1491                    
    1492                            .if 0
    1493                    HELP_TAB
    1494                            .LONG    L_MESS                 ;0 SAYS USE L_MESS
    1495                            .LONG    JUST_LIST              ;1 SAYS USE LISTED MESSAGES ONLY
    1496                            .LONG    LINE_ONE_PLUS          ;2 SAYS USE 1ST LINE W/ 2 TO START
    1497                            .LONG    LINE_TWO_PLUS          ;3
    1498                            .LONG    LINE_THREE_PLUS        ;4
    1499                            .LONG    LINE_ONE_PLUS_2        ;5 USE 1ST LINE 2/ 2 CREDITS PER PLAYER
    1500                            .LONG    LINE_TWO_PLUS_2        ;6
    1501                            .LONG    LINE_THREE_PLUS_2      ;7
    1502                            .LONG    OUTPUT_CUSTOM          ;8 CUSTOM MESSAGE!
    1503                    
    1504                    JUST_LIST
    1505                            MOVE    A8,A3                   ;STASH WHERE IT WILL SURVIVE
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   34

    1506                            MOVE    *A3(LONG_SIZE),A2,L     ;ONE WORD ONLY?
    1507                            JRZ     JUST_ONE                ;YEP....CENTER IT NICELY
    1508                    *
    1509                    *       there's a 2nd line...check for 3rd!
    1510                    *
    1511                            MOVE    *A3(2*LONG_SIZE),A2,L  ;IS THERE A 3RD LINE?
    1512                            JRZ     JUST_TWO                ;NOPE
    1513                    
    1514                            MOVI    SETUP_3_OF_3,A8
    1515                            JSRP    SET_THEN_A2
    1516                    
    1517                            MOVE    *A3(LONG_SIZE),A2,L     ;GET LINE 2
    1518                    
    1519                            MOVI    SETUP_2_OF_3,A8
    1520                            JSRP    SET_THEN_A2
    1521                    
    1522                            MOVI    SETUP_1_OF_3,A8         ;SET HEIGHT FOR TOP LINE
    1523                            JRUC    FIRST_LINE
    1524                    
    1525                    JUST_TWO
    1526                            MOVE    *A3(LONG_SIZE),A2,L     ;GET LINE 2
    1527                            MOVI    SETUP_2_OF_2,A8
    1528                            JSRP    SET_THEN_A2
    1529                    
    1530                            MOVI    SETUP_1_OF_2,A8
    1531                    
    1532                    FIRST_LINE
    1533                            MOVE    *A3,A2,L
    1534                            JRUC    SET_THEN_A2               ;DO TOP LEN AND RETURN
    1535                    
    1536                    JUST_ONE
    1537                            MOVI    SETUP_1_OF_1,A8
    1538                            JRUC    FIRST_LINE                ;DO TOP LEN AND RETURN
    1539                    
    1540                    *
    1541                    *       OUTPUT THE CUSTOM MESSAGE
    1542                    *
    1543                    CM_LINE1  EQU     CUSTOM_MESSAGE
    1544                    CM_LINE2  EQU     CUSTOM_MESSAGE+CMESS_LINE_SIZE
    1545                    CM_LINE3  EQU     CUSTOM_MESSAGE+(2*CMESS_LINE_SIZE)
    1546                    
    1547                    OUTPUT_CUSTOM
    1548                            MOVI    CM_LINE3,A10            ;CHECK LINE 3
    1549                            CALLR   CK_LINE                 ;3 VALID LINES?
    1550                            JRZ     GO_FOR_2
    1551                    
    1552                            MOVI    SETUP_3_OF_3,A8
    1553                            JSRP    SET_THEN_STRNGRAM       ;PUT IT OUT
    1554                    
    1555                            MOVI    CM_LINE2,A10
    1556                            MOVI    SETUP_2_OF_3,A8
    1557                            JSRP    SET_THEN_STRNGRAM
    1558                    
    1559                            MOVI    CM_LINE1,A10
    1560                            MOVI    SETUP_1_OF_3,A8
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   35

    1561                            JRUC    SET_THEN_STRNGRAM
    1562                    
    1563                    GO_FOR_2
    1564                            MOVI    CM_LINE2,A10            ;CHECK LINE 2
    1565                            CALLR   CK_LINE                 ;2 VALID LINES?
    1566                            JRZ     GO_FOR_1
    1567                    
    1568                            MOVI    SETUP_2_OF_2,A8
    1569                            JSRP    SET_THEN_STRNGRAM       ;PUT IT OUT
    1570                    
    1571                            MOVI    CM_LINE1,A10
    1572                            MOVI    SETUP_1_OF_2,A8
    1573                            JRUC    SET_THEN_STRNGRAM
    1574                    
    1575                    GO_FOR_1
    1576                            MOVI    CM_LINE1,A10
    1577                            MOVI    SETUP_1_OF_1,A8
    1578                            JRUC    SET_THEN_STRNGRAM
    1579                    
    1580                            .endif
    1581                    
    1582                    **************************************************************************
    1583                    *
    1584                    *       SET_THEN_A2
    1585                    *
    1586                    *       THIS IS A PRIMITIVE FOR THE COIN PAGE PLOTTERS.
    1587                    *
    1588                    *       IT SETS UP WITH THE STRING IN A8, THEN FINSHES
    1589                    *       ON THE STRING IN A2.
    1590                    *
    1591                    *       JSRP THIS ROUTINE!
    1592                    *
    1593                    **************************************************************************
    1594 00005280           SET_THEN_A2
    1595 00005280     0d5f          CALLA   LM_SETUP
         00005290 000081e0' 
    1596 000052b0     4c48          MOVE    A2,A8
    1597 000052c0     c080          JAUC    LM_FINIS                ;THAT DOES LINE 3
         000052d0 00008220' 
    1598                    
    1599                    **************************************************************************
    1600                    *
    1601                    *       SET_THEN_STRNGRAM
    1602                    *
    1603                    *       A10 POINTS AT A CMOS STRING FOR CUSTOM MESSAGE.
    1604                    *       A8 CONTAINS THE SETUP STRING FOR PRINTING THIS
    1605                    *       STRING OUT. CONVERT FROM CMOS TO STRNGRAM
    1606                    *       AND PRINT ON THE STRING.
    1607                    *
    1608                    **************************************************************************
    1609 000052f0           SET_THEN_STRNGRAM
    1610 000052f0     0d3f          CALLR   CK_LINE                 ;TRANSFER TO STRNGRAM
         00005300     0008  
    1611 00005310     0d3f          CALLR   LM_SETUP
         00005320     02eb  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   36

    1612 00005330     09e8          MOVI    STRNGRAM,A8
         00005340 00000000! 
    1613 00005360     c080          JAUC    LM_FINIS
         00005370 00008220' 
    1614                    
    1615                    **************************************************************************
    1616                    *
    1617                    *       CK_LINE
    1618                    *
    1619                    *       A10 POINTS AT A CMOS STRING.  WE MOVE THIS STRING
    1620                    *       TO OUR PDATA AREA.  THEN WE CALL BUILD_ST TO
    1621                    *       PACK IT INTO "STRNGRAM" WE RETURN .EQ. (PASSED FROM
    1622                    *       BUILD_ST) BACK TO OUR CALLER IF IT IS ALL SPACES.
    1623                    *
    1624                    **************************************************************************
    1625 00005390           CK_LINE
    1626 00005390     098f          MMTM    SP,A0,A7,A1,A2,A10
         000053a0     e120  
    1627 000053b0     4d47          MOVE    A10,A7                  ;INPUT POINTER TO CMOS
    1628 000053c0     4daa          MOVE    A13,A10                 ;OUR PDATA AREA
    1629 000053d0     0b0a          ADDI    PDATA,A10               ;A10 IS DESTINATION.
         000053e0     0100  
    1630 000053f0     4d42          MOVE    A10,A2                  ;ITERATE TO LOAD IT UP.
    1631                    
    1632 00005400     09c1          MOVI    CMESS_CHARS,A1          ;COUNTER
         00005410     001a  
    1633 00005420     0d5f          CALLA   ADJ_PAGE                ;POINT THE PAGE
         00005430 00007570' 
    1634                    
    1635 00005450           CK_LOOP
    1636 00005450     0d5f          CALLA   RC_BYTEI                ;FETCH A BYTE
         00005460 00000000! 
    1637 00005480     8c02          MOVB    A0,*A2                  ;STORE
    1638 00005490     1102          ADDK    BYTE_SIZE,A2
    1639 000054a0     3cc1          DSJS    A1,CK_LOOP
    1640                    
    1641 000054b0     0d5f          CALLA   DEF_PAGE                ;POINT AWAY NOW
         000054c0 00007600' 
    1642 000054e0     0d5f          CALLA   BUILD_ST                ;NOW XFER TO STRNGRAM (REMOVING SPACES ETC)
         000054f0 00000000! 
    1643 00005510     09af          MMFM    SP,A0,A7,A1,A2,A10      ;RETURN .EQ. IF ITS ALL SPACES.
         00005520     0487  
    1644 00005530     0960          RETS
    1645                    
    1646                    
    1647                    
    1648                    
    1649 00005540           LINE_ONE_PLUS
    1650 00005540     8702          MOVE    *A8,A2,L                ;GET LINE 1
    1651 00005550           LOP_1
    1652 00005550     09e8          MOVI    SETUP_1_OF_3,A8
         00005560 0000a750' 
    1653 00005580     0d3f          CALLR   LM_SETUP
         00005590     02c4  
    1654 000055a0     4c48          MOVE    A2,A8                   ;SWAP IN TEXT POINTER
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   37

    1655 000055b0                   JSRP    LM_FINIS                ;PRINT IT
    1656                    
    1657 00005620           LOP_2
    1658 00005620     09e8          MOVI    TWO_TS,A8               ;TWO TO START STUFF
         00005630 00000000! 
    1659 00005650     c080          JAUC    L_MESS                  ;PRINT IT AND RETURN
         00005660 000080e0' 
    1660                    
    1661                    *
    1662                    *        IF THE GAME IS IN A 2 TO START....2 TO CONTINUE MODE
    1663                    *
    1664 00005680           LINE_THREE_PLUS
    1665 00005680     b702          MOVE    *A8(2*LONG_SIZE),A2,L   ;FETCH LINE 3
         00005690     0040  
    1666 000056a0     caf7          JRZ     LOP_2                   ;NOTHING ON LINE 3
    1667 000056b0     c080          JAUC    LOP_1                   ;THEN ITS THE SAME AS ABOVE!
         000056c0 00005550' 
    1668                    
    1669 000056e0           LINE_TWO_PLUS
    1670 000056e0     b702          MOVE    *A8(LONG_SIZE),A2,L     ;FETCH LINE 2
         000056f0     0020  
    1671 00005700     caf1          JRZ     LOP_2                   ;NOTHING ON LINE 2
    1672 00005710     c080          JAUC    LOP_1                   ;THEN ITS THE SAME AS ABOVE!
         00005720 00005550' 
    1673                    
    1674 00005740           LINE_ONE_PLUS_2
    1675 00005740     8702          MOVE    *A8,A2,L                ;GET LINE 1
    1676 00005750           LOP_12
    1677 00005750     09e8          MOVI    SETUP_1_OF_2,A8
         00005760 0000a930' 
    1678 00005780     0d3f          CALLR   LM_SETUP
         00005790     02a4  
    1679 000057a0     4c48          MOVE    A2,A8                   ;SWAP IN TEXT POINTER
    1680 000057b0                   JSRP    LM_FINIS                ;PRINT IT
    1681                    
    1682 00005820           LOP_22
    1683 00005820     09e8          MOVI    TWO_TP,A8               ;TWO CREDITS PER PLAYER
         00005830 00000000! 
    1684 00005850     c080          JAUC    L_MESS                  ;PRINT IT AND RETURN
         00005860 000080e0' 
    1685                    
    1686 00005880           LINE_TWO_PLUS_2
    1687 00005880     b702          MOVE    *A8(LONG_SIZE),A2,L     ;FETCH LINE 2
         00005890     0020  
    1688 000058a0     caf7          JRZ     LOP_22                  ;NOTHING ON LINE 2
    1689 000058b0     c080          JAUC    LOP_12                  ;THEN ITS THE SAME AS ABOVE!
         000058c0 00005750' 
    1690                    
    1691 000058e0           LINE_THREE_PLUS_2
    1692 000058e0     b702          MOVE    *A8(2*LONG_SIZE),A2,L   ;FETCH LINE 3
         000058f0     0040  
    1693 00005900     caf1          JRZ     LOP_22                  ;NOTHING ON LINE 3
    1694 00005910     c080          JAUC    LOP_12                  ;THEN ITS THE SAME AS ABOVE!
         00005920 00005750' 
    1695                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   38

    1696                    **************************************************************************
    1697                    *
    1698                    *       SELECT_SETUP
    1699                    *
    1700                    *       THIS IS CALLED TO SELECT A SETUP STRING FOR THE
    1701                    *       CREDITS MESSAGE.  IF THERE IS PROMPTING TO ADD...WE
    1702                    *       DROP IT DOWN....ELSE WE PRINT IT CENTERED.
    1703                    *
    1704                    **************************************************************************
    1705 00005940           SELECT_SETUP
    1706 00005940                   PUSH    a0
    1707 00005950     09e8          MOVI    MESS_CNUM,A8              ;ASSUME NO EXTRA PROMPT
         00005960 00009250' 
    1708                    
    1709 00005980     0d5f          CALLA   CKPROMPT                  ;IS THERE ONE?
         00005990 00000000! 
    1710 000059b0     ca03          JRZ     NO_EXTRA
    1711                    
    1712 000059c0     09e8          MOVI    MESS_LOWNUM,A8
         000059d0 000092f0' 
    1713 000059f0           NO_EXTRA
    1714 000059f0     09af          MMFM    SP,A0                   
         00005a00     0001  
    1715 00005a10     0960          RETS
    1716                    
    1717                    **************************************************************************
    1718                    *
    1719                    *       FETCH_REQ
    1720                    *
    1721                    *       THIS ROUTINE FETCHES THE NUMBER OF UNITS REQUIRED
    1722                    *       FOR CREDIT, BONUS AND MINIMUM:
    1723                    *
    1724                    *               A2 = REQ FOR CREDITS
    1725                    *               A3 = REQ FOR BONUS
    1726                    *               A4 = MINIMUM
    1727                    *
    1728                    **************************************************************************
    1729 00005a20           FETCH_REQ
    1730 00005a20                   PUSH    a0
    1731 00005a30     18e0          MOVK    ADJCUNIT,A0
    1732 00005a40     0d3f          CALLR   GET_ADJ
         00005a50     016d  
    1733 00005a60     4c02          MOVE    A0,A2
    1734                    
    1735 00005a70     1900          MOVK    ADJBUNIT,A0
    1736 00005a80     0d3f          CALLR   GET_ADJ
         00005a90     0169  
    1737 00005aa0     4c03          MOVE    A0,A3
    1738                    
    1739 00005ab0     1920          MOVK    ADJMUNIT,A0
    1740 00005ac0     0d3f          CALLR   GET_ADJ_FOR_COIN
         00005ad0     0188  
    1741 00005ae0     4c04          MOVE    A0,A4
    1742 00005af0     09af          MMFM    SP,A0
         00005b00     0001  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   39

    1743 00005b10     0960          RETS
    1744                    
    1745                    **************************************************************************
    1746                    *
    1747                    *       SLAM_P
    1748                    *
    1749                    *       IS THERE A SLAM PROCESS RUNNING?
    1750                    *
    1751                    *       .EQ.    NO
    1752                    *       .NE.    YES
    1753                    *
    1754                    **************************************************************************
    1755 00005b20           SLAM_P
    1756 00005b20     09e0          MOVI    SLAM_PID,A0             ;SLAM PROCESS ACTIVE?
         00005b30 0000811d  
    1757 00005b50     09e1          MOVI    0FFFFH,A1
         00005b60 0000ffff  
    1758 00005b80     c080          jauc    EXISTP
         00005b90 00000000! 
    1759                    
    1760 00005bb0           SLAM_SW
    1761 00005bb0     09c0          movi    SLAM_PID|0ffff0000H,a0  ;So we can kill other indestructables
         00005bc0     811d  
    1762 00005bd0     b00d          move    a0,*a13(PROCID)         ;Set our ID
         00005be0     0020  
    1763 00005bf0     0d5f          calla   KIL1C                   ;Kill others
         00005c00 00000000! 
    1764                    
    1765 00005c20                   SLEEP   TSEC                    ;1 second of coin ignoring
    1766 00005c70     c080          jauc    SUCIDE
         00005c80 00000000! 
    1767                    
    1768                    **************************************************************************
    1769                    *
    1770                    *       FORM_COIN_CKSUM
    1771                    *
    1772                    *       THIS ROUTINE IS CALLED TO FORM THE COIN/CREDITS
    1773                    *       CHECKSUM.  THE CHECKSUM IS RETURNED IN A1.
    1774                    *
    1775                    *       Z       IT MATCHES WHATS THERE
    1776                    *       NZ      IT DOESN'T MATCH
    1777                    *
    1778                    **************************************************************************
    1779 00005ca0           FORM_COIN_CKSUM
    1780 00005ca0     098f          MMTM    SP,A0,A7,A2
         00005cb0     a100  
    1781 00005cc0     0d3f          CALLR   COIN_PAG                 ;MAKE SURE WE'RE ON THE RIGHT PAGE.
         00005cd0     003a  
    1782 00005ce0     09e7          MOVI    COIN_CKSUM_START,A7       ;POINT AT FIRST BYTE TO CHECK
         00005cf0 01402940  
    1783 00005d10     09c2          MOVI    COIN_CKSUM_BYTES,A2
         00005d20     0007  
    1784 00005d30     5621          CLR     A1                        ;CLEAR OUT CHECKSUM
    1785                    
    1786 00005d40           CN_SUM
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   40

    1787 00005d40     0d5f          CALLA   RC_BYTEI                  ;FETCH A BYTE IN A0
         00005d50 00000000! 
    1788 00005d70     4001          ADD     A0,A1                     ;ADD TO SUM
    1789 00005d80     3ca2          DSJS    A2,CN_SUM                 ;TILL WE HAVE EM ALL
    1790                    
    1791 00005d90     03e1          NOT     A1                        ;COMPLEMENT OF COURSE
    1792 00005da0     2701          sll     32-8,a1
    1793 00005db0     2d01          srl     32-8,a1
    1794                    
    1795 00005dc0     09e7          MOVI    COIN_CKSUM,A7
         00005dd0 014029b0  
    1796 00005df0     0d5f          CALLA   RC_BYTE                   ;FETCH THE CURRENT CKSUM
         00005e00 00000000! 
    1797 00005e20     4801          CMP     A0,A1                     ;COMPARE TO THIS
    1798 00005e30     09af          MMFM    SP,A0,A7,A2
         00005e40     0085  
    1799 00005e50     0960          RETS
    1800                    
    1801 00005e60           FORM_COIN_CKSUM_AND_STORE
    1802 00005e60     098f          MMTM    SP,A1,A7,A0
         00005e70     c100  
    1803 00005e80     0d3f          CALLR   FORM_COIN_CKSUM
         00005e90     ffe0  
    1804 00005ea0     09e7          MOVI    COIN_CKSUM,A7
         00005eb0 014029b0  
    1805 00005ed0     4c20          MOVE    A1,A0
    1806 00005ee0     0d5f          CALLA   WC_BYTE
         00005ef0 00000000! 
    1807 00005f10     09af          MMFM    SP,A1,A7,A0
         00005f20     0083  
    1808 00005f30     0960          RETS
    1809                    
    1810                    **************************************************************************
    1811                    *
    1812                    *       CCCC
    1813                    *
    1814                    *       Check_Coin_and_Clear_on_bad_Checksum.
    1815                    *
    1816                    *       This is called before operations that deal with
    1817                    *       the coinage and credits values.
    1818                    *
    1819                    *       It checks to see if the area is in tact. If it
    1820                    *       is, then no action is performed.
    1821                    *
    1822                    *       Else, it clears our all values (credits, etc.)
    1823                    *       so that nothing is given away erroneously.
    1824                    *
    1825                    **************************************************************************
    1826 00005f40           CCCC
    1827 00005f40     098f          MMTM    SP,A0,A1,A7,A2
         00005f50     e100  
    1828 00005f60     0d3f          CALLR   FORM_COIN_CKSUM         ;THIS SETS US TO THE COINAGE PAGE!
         00005f70     ffd2  
    1829 00005f80     ca0c          JRZ     CCCCX                   ;ALL IS OK!
    1830                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   41

    1831 00005f90     09e7          MOVI    COIN_CKSUM_START,A7  ;POINT AT FIRST BYTE
         00005fa0 01402940  
    1832 00005fc0     09c2          MOVI    COIN_CKSUM_BYTES,A2  ;NUMBER OF BYTES TO CLEAR
         00005fd0     0007  
    1833 00005fe0     5600          CLR     A0
    1834                    
    1835 00005ff0           CCCC_LOOP
    1836 00005ff0     0d5f          CALLA   WC_BYTEI                ;WRITE A BYTE
         00006000 00000000! 
    1837 00006020     3c82          DSJS    A2,CCCC_LOOP            ;UNTIL THEY'RE DONE!
    1838                    
    1839 00006030     0d3f          CALLR   FORM_COIN_CKSUM_AND_STORE  ;NOW MAKE THE CKSUM VALID
         00006040     ffe1  
    1840                    
    1841 00006050           CCCCX
    1842 00006050     09af          MMFM    SP,A0,A1,A7,A2
         00006060     0087  
    1843 00006070     0960          RETS
    1844                    
    1845                    **************************************************************************
    1846                    *
    1847                    *       COIN_PAG
    1848                    *
    1849                    *       THIS SETS THE CURRENT CMOS PAGE FOR COIN/CREDITS
    1850                    *
    1851                    **************************************************************************
    1852 00006080           COIN_PAG
    1853 00006080                   PUSH    a1
    1854 00006090     09c1          MOVI    COIN_SELECT,A1          ;THIS IS COIN/CREDITS PAGE
         000060a0     0000  
    1855 000060b0     0d5f          CALLA   SET_PAGE                ;SET IT PLEASE
         000060c0 00000000! 
    1856 000060e0     09af          MMFM    SP,A1
         000060f0     0002  
    1857 00006100     0960          RETS
    1858                    
    1859                    
    1860                    ********************************
    1861                    * Add the # of players to the audit
    1862                    * A0=Audit #
    1863                    * Trashes A0-A1,B0-B1
    1864                    
    1865 00006110            SUBR   aud_addnumplyrs
    1866                    
    1867 00006110     1821          movk    1,a1            ;1 plyr
    1868 00006120     05b0          move    @PSTATUS2,b0
         00006130 00000000! 
    1869 00006150     1470          subk    3,b0
    1870 00006160     cb01          jrne    aanp50          ;Only 1?
    1871 00006170     1841          movk    2,a1            ;2 plyrs
    1872 00006180     c000  aanp50  jruc    AUD
         00006190     0084  
    1873                    
    1874                    
    1875                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   42

    1876                    *
    1877                    *       AUDIT HANDLING
    1878                    *
    1879                    **************************************************************************
    1880                    *
    1881                    *       POINT_AT_AUDIT
    1882                    *
    1883                    *       THIS IS CALLED TO POINT AT THE AUDIT INDICATED BY
    1884                    *       A0. A0 IS THE AUDIT NUMBER 0-30. A7 IS RETURNED
    1885                    *       POINTING AT THE BEGINNING OF THE AUDIT.
    1886                    *
    1887                    **************************************************************************
    1888 000061a0           POINT_AT_AUDIT
    1889 000061a0                   PUSH    a1
    1890 000061b0     0d3f          CALLR   AUDIT_PAGE
         000061c0     0009  
    1891                    
    1892 000061d0     09c7          MOVI    AUD_SIZE,A7             ;THIS IS SIZE PER AUDIT
         000061e0     0060  
    1893 000061f0     5e07          MPYU    A0,A7                   ;A1 NOW HAS OFFSET
    1894 00006200     0b27          ADDI    AUDITORG,A7             ;ADD BASE
         00006210 01400000  
    1895 00006230     09af          MMFM    SP,A1
         00006240     0002  
    1896 00006250     0960          RETS
    1897                    
    1898 00006260           AUDIT_PAGE
    1899 00006260                   PUSH    a1
    1900 00006270     09c1          MOVI    AUDIT_SELECT,A1         ;THIS IS AUDIT PAGE
         00006280     0000  
    1901 00006290     0d5f          CALLA   SET_PAGE                ;SET IT PLEASE
         000062a0 00000000! 
    1902 000062c0     09af          MMFM    SP,A1
         000062d0     0002  
    1903 000062e0     0960          RETS
    1904                    
    1905                    **************************************************************************
    1906                    *
    1907                    *       FORM_AUD_CKSUM
    1908                    *
    1909                    *       THIS IS CALLED TO FORM THE CHECKSUM FOR THE AUDIT
    1910                    *       SPECIFIED IN A0.
    1911                    *
    1912                    *       A1 RETURNS THE CHECKSUM.
    1913                    *
    1914                    *       Z BIT IS SET BASED ON WHETHER IT MATCHES THE CHECKSUM THERE.
    1915                    *
    1916                    **************************************************************************
    1917 000062f0           FORM_AUD_CKSUM
    1918 000062f0     098f          MMTM    SP,A0,A4,A7
         00006300     8900  
    1919 00006310     0d3f          CALLR   POINT_AT_AUDIT            ;A7 = POINTER TO CURRENT ENTRY
         00006320     ffe7  
    1920 00006330     098f          MMTM    SP,A7                     ;SAVE POINTER TO ENTRY
         00006340     0100  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   43

    1921 00006350     09c4          MOVI    AUD_BYTES_TO_CHECK,A4     ;COUNT DOWN THE BYTES
         00006360     0004  
    1922 00006370     5621          CLR     A1                        ;KEEP SUM IN A1
    1923 00006380           ADD_A_BYTE
    1924 00006380     0d5f          CALLA   RC_BYTEI                  ;GET A BYTE INTO A0
         00006390 00000000! 
    1925 000063b0     4001          ADD     A0,A1                     ;ADD TO SUM
    1926 000063c0     3ca4          DSJ     A4,ADD_A_BYTE             ;ONE MORE ADDED
    1927 000063d0     03e1          NOT     A1                        ;CHECKSUM IS NOW IN LOW WORD
    1928 000063e0     0521          ZEXT    A1
    1929                    ;        ANDI    WORD_MASK,A1                   ;MASK SO ITS COOL
    1930 000063f0     09af          MMFM    SP,A7                     ;GET POINTER BACK
         00006400     0080  
    1931 00006410     0b07          ADDI    AUD_CKSUM,A7              ;POINT AT CHECKBYTE
         00006420     0040  
    1932 00006430     0d5f          CALLA   RC_WORD                   ;READ IN THE CKSUM
         00006440 00000000! 
    1933 00006460     4801          CMP     A0,A1                     ;COMPARE WHAT'S THERE TO WHAT WE GOT
    1934 00006470     09af          MMFM    SP,A0,A4,A7               ;Z BIT RETURNS COMPARE
         00006480     0091  
    1935 00006490     0960          RETS                              ;A1 RETURNS CKSUM
    1936                    
    1937                    **************************************************************************
    1938                    *
    1939                    *       STORE_AUD_CKSUM
    1940                    *
    1941                    *       THIS WILL STORE THE AUDIT CHECKSUM IN A1 FOR THE
    1942                    *       AUDIT NUMBER SPECIFIED BY A0.
    1943                    *
    1944                    **************************************************************************
    1945 000064a0           STORE_AUD_CKSUM
    1946 000064a0     098f          MMTM    SP,A7,A0                  ;POINTING REGISTER
         000064b0     8100  
    1947 000064c0     0d3f          CALLR   POINT_AT_AUDIT            ;A7 POINTS AT AUDIT
         000064d0     ffcc  
    1948 000064e0     0b07          ADDI    AUD_CKSUM,A7              ;POINT AT CHECKBYTE
         000064f0     0040  
    1949 00006500     4c20          MOVE    A1,A0                     ;GET CHECKBYTE IN A0
    1950 00006510     0d5f          CALLA   WC_WORD                   ;WRITE THE CKSUM
         00006520 00000000! 
    1951 00006540     09af          MMFM    SP,A7,A0                  ;POINTING REGISTER
         00006550     0081  
    1952 00006560     0960          RETS
    1953                    
    1954                    **************************************************************************
    1955                    *
    1956                    *       FORM_AUD_CKSUM_AND_STORE
    1957                    *
    1958                    *       THE VALUE AT BAD_AUD IS USED TO DETERMINE WHETHER TO STORE
    1959                    *       THE CORRECT OR INCORRECT VALUE!
    1960                    *
    1961                    *       A0 = AUDIT NUMBER
    1962                    *
    1963                    **************************************************************************
    1964 00006570           FORM_AUD_CKSUM_AND_STORE
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   44

    1965 00006570     098f          MMTM    SP,A1,A2                        ;SAVE A1!
         00006580     6000  
    1966 00006590     0d3f          CALLR   FORM_AUD_CKSUM
         000065a0     ffd4  
    1967 000065b0     05a2          MOVE    @BAD_AUD,A2                     ;GET THE "FUDGE" WORD
         000065c0 00000000- 
    1968 000065e0     5641          XOR     A2,A1                           ;MAKE CKSUM BAD IF AUDIT IS BAD
    1969 000065f0     0d3f          CALLR   STORE_AUD_CKSUM
         00006600     ffe9  
    1970 00006610     09af          MMFM    SP,A1,A2
         00006620     0006  
    1971 00006630     0960          RETS
    1972                    
    1973                    **************************************************************************
    1974                    *
    1975                    *       GET_AUD
    1976                    *
    1977                    *       THIS IS CALLED TO FETCH THE AUDIT VALUE FOR THE AUDIT
    1978                    *       SPECIFIED IN A0 INTO A1.  IF THE CHECKBYTE FOR THE
    1979                    *       AUDIT IS INCORRECT, THEN RAM LOCATION BAD_AUD WILL BE
    1980                    *       SET TO 1.
    1981                    *
    1982                    **************************************************************************
    1983 00006640           GET_AUD
    1984 00006640     098f          MMTM    SP,A0,A7
         00006650     8100  
    1985 00006660     0d3f          CALLR   FORM_AUD_CKSUM          ;SEE IF CKSUM IS OK
         00006670     ffc7  
    1986 00006680     ca04          JRZ     FETCH_AUDIT_1           ;ITS OK....
    1987                    
    1988 00006690     1821          MOVK    1,A1                    ;CHECKSUM IS BAD
    1989 000066a0     0581          MOVE    A1,@BAD_AUD             ;SET THE FLAG!
         000066b0 00000000- 
    1990                    
    1991 000066d0           FETCH_AUDIT_1
    1992 000066d0     0d3f          CALLR   POINT_AT_AUDIT          ;A7 POINTS AT AUDIT
         000066e0     ffab  
    1993 000066f0     0b07          ADDI    AUD_DATA,A7             ;ADD ZERO OFFSET
         00006700     0000  
    1994 00006710     0d5f          CALLA   RC_LONG                 ;FETCH THE LONG WORD TO A0
         00006720 00000000! 
    1995 00006740     4c01          MOVE    A0,A1                   ;RETURN IN A1
    1996 00006750     09af          MMFM    SP,A0,A7
         00006760     0081  
    1997 00006770     0960          RETS
    1998                    
    1999                    **************************************************************************
    2000                    *
    2001                    *       STORE_AUDIT
    2002                    *
    2003                    *       A0 = AUDIT NUMBER TO STORE VALUE FOR
    2004                    *       A1 = VALUE TO STORE.
    2005                    *       BAD_AUD = NON ZERO IF BAD CHECKSUM IS TO BE MAINTAINED.
    2006                    *
    2007                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   45

    2008 00006780           STORE_AUDIT
    2009                            
    2010 00006780     098f          MMTM    SP,A0,A7
         00006790     8100  
    2011 000067a0     0d3f          CALLR   POINT_AT_AUDIT          ;A7 POINTS AT AUDIT
         000067b0     ff9e  
    2012 000067c0     0b07          ADDI    AUD_DATA,A7             ;ADD ZERO OFFSET
         000067d0     0000  
    2013 000067e0     4c20          MOVE    A1,A0                   ;MOVE DATA TO WRITING REGISTER
    2014 000067f0     0d5f          CALLA   WC_LONG                 ;WRITE THE DATA BACK
         00006800 00000000! 
    2015 00006820     09af          MMFM    SP,A0,A7                ;GET AUDIT NUMBER BACK
         00006830     0081  
    2016 00006840     c0d2          JRUC    FORM_AUD_CKSUM_AND_STORE        ;STORE GOOD OR BAD CKSUM BASED
    2017                                                                    ;ON BAD_AUD
    2018                    
    2019                    **************************************************************************
    2020                    *
    2021                    *       CLR_SUBS
    2022                    *
    2023                    *       THIS IS CALLED TO CLEAR OUT THE COINAGE SUB-TOTALS.
    2024                    *
    2025                    **************************************************************************
    2026                    ;CLR_SUBS
    2027                    ;       MOVI    FRST_SUB,A0
    2028                    ;        MOVI    LAST_SUB,A1
    2029                    ;        CALLR   CLR_AUDR        ;CLEAR EM OUT!
    2030                    ;        RETP
    2031                    ;
    2032                    **************************************************************************
    2033                    *
    2034                    *               CLR_AUDR
    2035                    *
    2036                    *               THIS IS CALLED TO CLEAR OUT A RANGE OF AUDITS.
    2037                    *               A0 = 1ST AUDIT NUMBER
    2038                    *               A1 = LAST AUDIT NUMBER (INCLUSIVE)
    2039                    *
    2040                    **************************************************************************
    2041 00006850           CLR_AUDR
    2042 00006850     098f          MMTM    SP,A0,A1,A2
         00006860     e000  
    2043 00006870     4c22          MOVE    A1,A2                     ;MOVE "LAST" TO A2
    2044 00006880     5621          CLR     A1                        ;WE'LL STORE ZEROS
    2045 00006890     0581          MOVE    A1,@BAD_AUD               ;MAKE CKSUMS GOOD ON STORING
         000068a0 00000000- 
    2046 000068c0           CAR1
    2047 000068c0     0d3f          CALLR   STORE_AUDIT               ;STORE THIS AUDIT
         000068d0     ffea  
    2048 000068e0     1020          INC     A0                        ;KICK TO NEXT AUDIT
    2049 000068f0     4840          CMP     A2,A0
    2050 00006900     c2fb          JRLS    CAR1
    2051 00006910     09af          MMFM    SP,A0,A1,A2
         00006920     0007  
    2052 00006930     0960          RETS
    2053                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   46

    2054                    **************************************************************************
    2055                    *
    2056                    *       CLR_DUMP_AUD
    2057                    *
    2058                    *       This is called by both joysticks down while looking
    2059                    *       at dump page.   It clears out the audits associated
    2060                    *       with that page.
    2061                    *
    2062                    **************************************************************************
    2063                    ;CLR_DUMP_AUD
    2064                    ;        MOVI    AUDDOGGY,A0
    2065                    ;       CALLR   KILL_AUD
    2066                    ;        MOVI    AUDLOCK,A0
    2067                    ;       CALLR   KILL_AUD
    2068                    ;        MOVI    AUDTRAP,A0
    2069                    ;       CALLR   KILL_AUD
    2070                    ;        MOVI    AUDSURV,A0
    2071                    ;       CALLR   KILL_AUD
    2072                    ;        MOVI    AUDBONE,A0
    2073                    ;       CALLR   KILL_AUD
    2074                    ;       RETS
    2075                            
    2076                    **************************************************************************
    2077                    *
    2078                    *       KILL_AUD
    2079                    *
    2080                    *       This is called to clear out an audit.
    2081                    *
    2082                    *       A0 = audit number.
    2083                    *
    2084                    **************************************************************************
    2085 00006940           KILL_AUD
    2086 00006940                   PUSH    a1
    2087 00006950     5621          CLR     A1                        ;WE'LL STORE ZEROS
    2088 00006960     0581          MOVE    A1,@BAD_AUD               ;MAKE CKSUMS GOOD ON STORING
         00006970 00000000- 
    2089 00006990     0d3f          CALLR   STORE_AUDIT               ;STORE THIS AUDIT
         000069a0     ffdd  
    2090 000069b0     09af          MMFM    SP,A1
         000069c0     0002  
    2091 000069d0     0960          RETS
    2092                    
    2093                    **************************************************************************
    2094                    *
    2095                    *       AUD
    2096                    *
    2097                    *       A0 = AUDIT NUMBER.......A1 = COUNT TO ADD.
    2098                    *
    2099                    **************************************************************************
    2100 000069e0           AUD
    2101 000069e0     098f          MMTM    SP,A1,A2
         000069f0     6000  
    2102 00006a00     5642          CLR     A2                      ;SET "BAD_AUD" GOOD UNTIL OTHERWISE PROVEN!
    2103 00006a10     0582          MOVE    A2,@BAD_AUD             ;ITS GOOD.
         00006a20 00000000- 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   47

    2104 00006a40     4c22          MOVE    A1,A2                   ;COPY OUR COUNT
    2105 00006a50     0d3f          CALLR   GET_AUD                 ;FETCH THE CURRENT AUDIT COUNTER
         00006a60     ffbd  
    2106 00006a70     4041          ADD     A2,A1                   ;ADD THE NEW COUNT
    2107 00006a80     0d3f          CALLR   STORE_AUDIT             ;STORE IT BACK
         00006a90     ffce  
    2108 00006aa0     0d3f          CALLR   DEF_PAGE                ;SWITCH PAGE AWAY FROM THE DATA!
         00006ab0     00b4  
    2109 00006ac0     09af          MMFM    SP,A1,A2
         00006ad0     0006  
    2110 00006ae0     0960          RETS
    2111                    
    2112 00006af0           AUD1
    2113 00006af0                   PUSH    a1
    2114 00006b00     1821          MOVK    1,A1
    2115 00006b10     0d3f          CALLR   AUD
         00006b20     ffeb  
    2116 00006b30     09af          MMFM    SP,A1
         00006b40     0002  
    2117 00006b50     0960          RETS
    2118                    
    2119                    **************************************************************************
    2120                    *
    2121                    *       CLR_AUD
    2122                    *
    2123                    *       This is called to clear out all of the audits.
    2124                    *
    2125                    *       A relatively easy task given the primitives available.
    2126                    *
    2127                    **************************************************************************
    2128 00006b60           CLR_AUD
    2129 00006b60     098f          MMTM    SP,A0,A1
         00006b70     c000  
    2130 00006b80     1820          MOVK    1,A0                    ;START AT AUDIT 1
    2131 00006b90     09c1          MOVI    N_AUDITS-1,A1           ;THIS IS TOTAL ALLOCATED
         00006ba0     006d  
    2132 00006bb0     0d3f          CALLR   CLR_AUDR
         00006bc0     ffc8  
    2133 00006bd0     09af          MMFM    SP,A0,A1
         00006be0     0003  
    2134 00006bf0     0960          RETS
    2135                    
    2136                    **************************************************************************
    2137                    *
    2138                    *       ADJUSTMENTS
    2139                    *
    2140                    **************************************************************************
    2141                    **************************************************************************
    2142                    *
    2143                    *       CMOS_VAL
    2144                    *
    2145                    *       ARE ADJUSTMENTS AND NAME/REV OK?
    2146                    *
    2147                    *       .EQ. MEANS YES
    2148                    *       .NE. MEANS NO
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   48

    2149                    *
    2150                    **************************************************************************
    2151 00006c00           CMOS_VAL
    2152 00006c00     0d3f          callr   form_crc32
         00006c10     0022  
    2153 00006c20     cb05          jrnz    CMOS_BAD
    2154 00006c30     0d3f          CALLR   FORM_ADC  ;SEE IF CKSUM IS OK.
         00006c40     0004  
    2155 00006c50     cb02          JRNZ    CMOS_BAD        ;NOPE....RETURN .NE.
    2156                    
    2157 00006c60     0d3f          CALLR   CHECK_NAME_AND_REV      ;HOW ABOUT THE NAME AND REV?
         00006c70     0073  
    2158 00006c80           CMOS_BAD
    2159 00006c80     0960          RETS
    2160                    
    2161                    **************************************************************************
    2162                    *
    2163                    *       Adjustments are all stored as long words in CMOS.
    2164                    *       They are referenced by adjustment number.  Stuff
    2165                    *       adjustment number in A0. Call GET_ADJ and the
    2166                    *       value is returned in A0.
    2167                    *
    2168                    **************************************************************************
    2169                    **************************************************************************
    2170                    *
    2171                    *       FORM_ADC
    2172                    *
    2173                    *       THIS IS CALLED TO FORM THE CHECKSUM FOR THE ADJUSTMENTS
    2174                    *       AREA.  IT IS RETURNED IN A1.
    2175                    *
    2176                    *       IT IS COMPARED TO THE REAL CHECKSUM AND .EQ. RETURNED IF OK.
    2177                    *
    2178                    **************************************************************************
    2179 00006c90           FORM_ADC
    2180 00006c90     098f          MMTM    SP,A7,A0,A6
         00006ca0     8300  
    2181 00006cb0     0d3f          CALLR   ADJ_PAGE          ;SET CMOS PAGE FOR ADJUSTMENTS
         00006cc0     008a  
    2182 00006cd0     09e7          MOVI    ADJUSTORG,A7            ;POINT AT FIRST BYTE
         00006ce0 01404000  
    2183 00006d00     09c6          MOVI    ADJ_BYTES_TO_CHECK,A6  ;NUMBER OF BYTES
         00006d10     00dc  
    2184 00006d20     5621          CLR     A1                      ;ACCUMULATE CKSUM HERE
    2185                    
    2186 00006d30           ADJ_C1
    2187 00006d30     0d5f          CALLA   RC_BYTEI                ;READ A BYTE
         00006d40 00000000! 
    2188 00006d60     4001          ADD     A0,A1                   ;ADD THE BYTE TO THE SUM
    2189 00006d70     3ca6          DSJS    A6,ADJ_C1
    2190 00006d80     03e1          NOT     A1                      ;COMPLEMENT THE SUM
    2191 00006d90     0521          ZEXT    A1
    2192 00006da0     09e7          MOVI    ADJ_CKSUM,A7
         00006db0 01404dc0  
    2193 00006dd0     0d5f          CALLA   RC_WORD                 ;FETCH THE CHECKSUM
         00006de0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   49

    2194 00006e00     4801          CMP     A0,A1                   ;COMPARE TO FETCHED VALUE
    2195 00006e10     09af          MMFM    SP,A7,A0,A6
         00006e20     00c1  
    2196 00006e30     0960          RETS
    2197                    
    2198 00006e40            SUBR   form_crc32
    2199 00006e40     098f          mmtm    sp,a7,a0,a6
         00006e50     8300  
    2200 00006e60     09e7          movi    ADJUSTORG,a7
         00006e70 01404000  
    2201 00006e90     09c6          movi    ADJ_BYTES_TO_CHECK,a6
         00006ea0     00dc  
    2202 00006eb0     5621          clr     a1
    2203 00006ec0           crc_lp
    2204 00006ec0     0d5f          calla   RC_BYTEI
         00006ed0 00000000! 
    2205 00006ef0     5601          xor     a0,a1
    2206 00006f00     3021          rl      1,a1
    2207 00006f10     3cc6          dsjs    a6,crc_lp
    2208 00006f20     09e7          movi    ADJ_CRC32,a7
         00006f30 01404fc0  
    2209 00006f50     0d5f          calla   RC_LONG
         00006f60 00000000! 
    2210 00006f80     4801          cmp     a0,a1
    2211 00006f90     09af          mmfm    sp,a7,a0,a6
         00006fa0     00c1  
    2212 00006fb0     0960          rets
    2213                    
    2214                    **************************************************************************
    2215                    *
    2216                    *       F_ADC_S
    2217                    *
    2218                    *       CALCULATE THE ADJUSTMENT CHECKSUM AND STORE THE
    2219                    *       NEW VALUE.
    2220                    *
    2221                    **************************************************************************
    2222 00006fc0           F_ADC_S
    2223 00006fc0     098f          MMTM    SP,A0,A1,A7
         00006fd0     c100  
    2224 00006fe0     0d3f          CALLR   FORM_ADC                ;FORM THE CKSUM
         00006ff0     ffc9  
    2225 00007000     4c20          MOVE    A1,A0                   ;PUT IN CMOS WRITING REGGIE
    2226 00007010     09e7          MOVI    ADJ_CKSUM,A7
         00007020 01404dc0  
    2227 00007040     0d5f          CALLA   WC_WORD                 ;AND STORE IT
         00007050 00000000! 
    2228 00007070     0d3f          callr   form_crc32
         00007080     ffdb  
    2229 00007090     4c20          move    a1,a0
    2230 000070a0     09e7          movi    ADJ_CRC32,a7
         000070b0 01404fc0  
    2231 000070d0     0d5f          calla   WC_LONG
         000070e0 00000000! 
    2232 00007100     09af          MMFM    SP,A0,A1,A7
         00007110     0083  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   50

    2233 00007120     0960          RETS
    2234                    
    2235                    **************************************************************************
    2236                    *
    2237                    *       GET_ADJ
    2238                    *
    2239                    *       THIS IS CALLED TO FETCH THE VALUE OF AN ADJUSTMENT.
    2240                    *
    2241                    *       THE ADJUSTMENT NUMBER IS GIVEN IN A0.
    2242                    *       THE VALUE FOR THE ADJUSTMENT IS RETURNED IN A0.
    2243                    *
    2244                    **************************************************************************
    2245 00007130           GET_ADJ
    2246 00007130                   PUSH    a1,a7
    2247 00007150     0d3f          CALLR   ADJPOINT                ;POINT AT ADJUSTMENT
         00007160     0016  
    2248 00007170     0d5f          CALLA   RC_LONG                 ;FETCH THE ADJUST PLEASE
         00007180 00000000! 
    2249 000071a0     0d3f          CALLR   DEF_PAGE
         000071b0     0044  
    2250 000071c0                   PULL    a1,a7
    2251 000071e0     4c00          MOVE    A0,A0                   ;RETURN Z BIT BASED ON ADJUSTMENT!
    2252 000071f0     0960          RETS
    2253                    
    2254                    **************************************************************************
    2255                    *
    2256                    *       PUT_ADJ
    2257                    *
    2258                    *       ADJUST NUMBER IN A0.
    2259                    *       VALUE IN A1.
    2260                    *       STORE IT!........
    2261                    *
    2262                    *       ****************** THIS IS A UTILITY......IT DOES NOT
    2263                    *                       CORRECT ANY CHECKSUM CHANGE THAT
    2264                    *                       MAY OCCUR!!
    2265                    *
    2266                    **************************************************************************
    2267 00007200           PUT_ADJ
    2268 00007200                   PUSH    a0,a7
    2269 00007220     0d3f          CALLR   ADJPOINT                ;POINT AT REQUESTED ADJ.
         00007230     0009  
    2270 00007240     4c20          MOVE    A1,A0                   ;GET VALUE IN WRITING REGGIE!
    2271 00007250     0d5f          CALLA   WC_LONG                 ;WRITE THE ADJUSTMENT
         00007260 00000000! 
    2272 00007280     0d3f          CALLR   DEF_PAGE                ;SWAP PAGE AWAY.
         00007290     0036  
    2273 000072a0     09af          MMFM    SP,A7,A0
         000072b0     0081  
    2274 000072c0     0960          RETS
    2275                    
    2276 000072d0           ADJPOINT
    2277 000072d0     0d3f          CALLR   ADJ_PAGE                ;SET CMOS PAGE FOR ADJUSTMENTS
         000072e0     0028  
    2278 000072f0     09c7          MOVI    ADJ_SIZE,A7             ;SIZE PER ADJUSTMENT IN A7
         00007300     0040  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   51

    2279 00007310     5e07          MPYU    A0,A7                   ;TIMES ADJUSTMENT REQUESTED.
    2280 00007320     0b27          ADDI    ADJUSTORG,A7            ;ADD TO BASE
         00007330 01404000  
    2281 00007350     0960          RETS
    2282                    
    2283 00007360           GET_ADJ_FOR_COIN
    2284 00007360     0d3f          CALLR   GET_ADJ                 ;GET THE ADJUSTMENT
         00007370     ffdb  
    2285 00007380     c080          JAUC    COIN_PAG                ;THEN RE-INSTATE THE COIN PAGE!
         00007390 00006080' 
    2286                    
    2287                    **************************************************************************
    2288                    *
    2289                    *       CHECK_NAME_AND_REV
    2290                    *
    2291                    *       THIS ROUTINE IS CALLED TO SEE IF THE GAME NAME/REV IS
    2292                    *       CORRECT.  IF IT IS NOT, THE GAME WILL AUTOMATICALLY
    2293                    *       FACTORY SET. Z MEANS OK!
    2294                    *
    2295                    **************************************************************************
    2296 000073b0           CHECK_NAME_AND_REV
    2297 000073b0     098f          MMTM    SP,A0,A1,A2,A3,A7
         000073c0     f100  
    2298 000073d0     0d3f          CALLR   ADJ_PAGE          ;MAKE SURE WE'RE ON THE CORRECT PAGE
         000073e0     0018  
    2299                    
    2300 000073f0     09e7          MOVI    NAME_REV,A7             ;POINT AT CMOS NAME STORAGE
         00007400 01404de0  
    2301 00007420     09e1          MOVI    ROM_NAME,A1             ;POINT AT OUR VERSION
         00007430 00008ee0' 
    2302 00007450     09c2          MOVI    NAME_REV_SIZE,A2        ;MAXIMUM NAME SIZE
         00007460     001e  
    2303                    
    2304 00007470           NEXT_LET1
    2305 00007470     0d5f          CALLA   RC_BYTEI                ;FETCH A BYTE
         00007480 00000000! 
    2306 000074a0     8e23          MOVB    *A1,A3                  ;GET 1 FROM ROM
    2307 000074b0     2703          SLL     24,A3
    2308 000074c0     2d03          SRL     24,A3
    2309                    
    2310 000074d0     4860          CMP     A3,A0                   ;THEY BETTER BE THE SAME
    2311 000074e0     cb05          JRNZ    RETURN_NOW              ;NOPE....BYE  (RETURN .NE.)
    2312                    
    2313 000074f0     1101          ADDK    BYTE_SIZE,A1            ;KICK SOURCE POINTER
    2314 00007500     4c00          MOVE    A0,A0                   ;WAS IT A ZERO?
    2315 00007510     ca02          JRZ     RETURN_NOW              ;YEP....NO MORE (RETURN .EQ.)
    2316 00007520     3d82          DSJS    A2,NEXT_LET1
    2317 00007530     5600          CLR     A0                      ;RETURN .EQ.
    2318                            
    2319 00007540           RETURN_NOW
    2320 00007540     09af          MMFM    SP,A0,A1,A2,A3,A7
         00007550     008f  
    2321 00007560     0960          RETS
    2322                    
    2323                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   52

    2324                    *
    2325                    *       ADJ_PAGE
    2326                    *
    2327                    *       THIS SETS THE CURRENT CMOS PAGE FOR ADJUSTMENTS.
    2328                    *
    2329                    **************************************************************************
    2330 00007570           ADJ_PAGE
    2331 00007570                   PUSH    a1
    2332 00007580     09c1          MOVI    ADJUST_SELECT,A1        ;THIS IS AUDIT PAGE
         00007590     0000  
    2333 000075a0     0d5f          CALLA   SET_PAGE                ;SET IT PLEASE
         000075b0 00000000! 
    2334 000075d0     09af          MMFM    SP,A1
         000075e0     0002  
    2335 000075f0     0960          RETS
    2336                    
    2337                    
    2338                    **************************************************************************
    2339                    *
    2340                    *       DEF_PAGE
    2341                    *
    2342                    *       THIS SWITCHES TO "DEFAULT" PAGE.  THE DEFAULT
    2343                    *       PAGE IS THE ONE THAT WE WOULD LIKE TO SMASH
    2344                    *       MOST IN THE CASE OF A CRASH.  AFTER MOST
    2345                    *       PROCESSING, WE SWITCH TO THIS PAGE!
    2346                    *
    2347                    **************************************************************************
    2348 00007600           DEF_PAGE
    2349                     .if 0
    2350                            PUSHST                          ;PRESERVE CODES THAT ARE BEING RETURNED
    2351                            PUSH    a1
    2352                            MOVI    TODAYS_SELECT,A1        ;THIS IS TODAY'S HIGH SCORES PAGE
    2353                            CALLA   SET_PAGE                ;SET IT PLEASE
    2354                            PULL    a1
    2355                            POPST
    2356                     .endif
    2357 00007600     0960          RETS
    2358                    
    2359                    **************************************************************************
    2360                    * FAC_SET - Restores the factory settings to the adjustments
    2361                    * A0=Mode (0=All adjustments, 1=Only coinage)
    2362                    
    2363 00007610           FAC_SET
    2364 00007610                   PUSH    a1,a2,a7
    2365                    
    2366 00007630     a00f          move    a0,-*sp
    2367 00007640     1420          subk    1,a0
    2368 00007650     ca15          jreq    fs20                    ;Just coinage?
    2369                    
    2370 00007660     0d5f          calla   opmsg_clr
         00007670 00000000! 
    2371                    
    2372                    ;;;     CALLR   DUMP_FS                 ;CLEAR OUT "DUMP" MEMORY
    2373                    ;;;                     (stomps on player records)
    2374                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   53

    2375                    
    2376 00007690     0d3f          CALLR   NO_CREDS                ;REMOVE ANY COINS
         000076a0     fa43  
    2377 000076b0     0d3f          CALLR   ADJ_PAGE                ;SET CMOS PAGE CORRECTLY
         000076c0     ffea  
    2378                    
    2379 000076d0     09e1          MOVI    FACTORY_TABLE,A1        ;ROM
         000076e0 00008fd0' 
    2380 00007700     09e7          MOVI    ADJUSTORG,A7            ;CMOS
         00007710 01404000  
    2381 00007730     09c2          MOVI    N_ADJUSTS,A2            ;NUMBER OF ADJUSTMENTS ALLOCATED
         00007740     0023  
    2382                    
    2383 00007750           FACS1
    2384 00007750     9420          MOVE    *A1+,A0                 ;FETCH A ROM LONG WORD
    2385 00007760     0520          ZEXT    A0
    2386 00007770     0d5f          CALLA   WC_LONGI                ;WRITE THE WORD TO CMOS
         00007780 00000000! 
    2387 000077a0     3cc2          DSJS    A2,FACS1                ;WRITE 1 LONG WORD PER ADJUST
    2388 000077b0           fs20
    2389                    ;       .if     YUNIT
    2390                    ;       move    @SWITCH+030H,a1
    2391                    ;       btst    6,a1
    2392                    ;       jrnz    fs80
    2393                    ;       not     a1
    2394                    ;       sll     32-5,a1
    2395                    ;       srl     32-5-3,a1               ;*8
    2396                    ;       cmpi    (dctend-dipcoinage_t),a1
    2397                    ;       jrhs    fs50                    ;Illegal setting?
    2398                    ;       addi    dipcoinage_t,a1
    2399                    ;       movb    *a1,a1
    2400                    ;       movk    ADJPRICE,a0             ;Master priceing
    2401                    ;       callr   PUT_ADJ
    2402                    ;fs50
    2403                    ;       movk    ADJFREPL,a0             ;Free play
    2404                    ;       clr     a1                      ;Off
    2405                    ;       callr   PUT_ADJ
    2406                    ;fs80
    2407                    ;       .endif
    2408                    
    2409 000077b0     0d3f          callr   LD_CTAB                 ;EXPAND THE CSELCT VALUE
         000077c0     0018  
    2410 000077d0     0d3f          callr   F_ADC_S                 ;MAKE THE CHECKSUM CORRECT.
         000077e0     ff7d  
    2411                    
    2412 000077f0     95e0          move    *sp+,a0
    2413 00007800     1420          subk    1,a0
    2414 00007810     ca10          jreq    fsx                     ;Only coinage?
    2415                    
    2416                    *       NOW STORE THE GAME NAME AND REVISION INFO
    2417                    
    2418 00007820     09e7          MOVI    NAME_REV,A7             ;POINT AT CMOS NAME STORAGE
         00007830 01404de0  
    2419 00007850     09e1          MOVI    ROM_NAME,A1             ;POINT AT OUR VERSION
         00007860 00008ee0' 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   54

    2420 00007880     09c2          MOVI    NAME_REV_SIZE,A2        ;MAXIMUM NAME SIZE
         00007890     001e  
    2421                    
    2422 000078a0           NEXT_LETTER
    2423 000078a0     8e20          MOVB    *A1,A0                  ;FETCH A BYTE
    2424 000078b0     0d5f          CALLA   WC_BYTEI                ;WRITE IT TO CMOS
         000078c0 00000000! 
    2425 000078e0     1101          ADDK    BYTE_SIZE,A1            ;KICK SOURCE POINTER
    2426 000078f0     4c00          move    a0,a0
    2427 00007900     ca01          jrz     fsx                     ;End?
    2428 00007910     3d02          DSJS    A2,NEXT_LETTER
    2429                            
    2430 00007920           fsx     PULL    a1,a2,a7
    2431 00007940     0960          rets
    2432                    
    2433                    ;dipcoinage_t
    2434                    ;       .byte   1,2,3, 10,11,12, 16,17,18, 29, 32, 33,34,35, 37
    2435                    ;       .byte   39, 41,42, 43, 45,46, 49, 50, 52, 53, 54, 55
    2436                    ;dctend
    2437 00007950                   .even
    2438                    
    2439                    **************************************************************************
    2440                    *
    2441                    *       SWITCH_FOR_JUMPER
    2442                    *
    2443                    *       THIS IS CALLED OUT OF THE FACTORY SETTING SEQUENCE.
    2444                    *       IT CHECKS FOR JUMPER COMBINATIONS INDICATING
    2445                    *       GERMAN OR FRENCH GAMES.
    2446                    *
    2447                    *       THE JUMPERS ARE CONNECTED AS FOLLOWS:
    2448                    *
    2449                    *       GERMAN JUMPER = BIT 15 OF "COINS"
    2450                    *       FRENCH JUMPER = BIT 14 OF "COINS"
    2451                    *
    2452                    *       IF BOTH JUMPERS ARE IN, OR BOTH ARE MISSING, THEN
    2453                    *       ITS U.S. DEFAULT....LEAVE EVERYTHING ALONE.
    2454                    *
    2455                    *       IF GERMAN IS MISSING (READ AS A 1) THEN USE
    2456                    *       GERMAN 1 COINAGE.
    2457                    *
    2458                    *       IF FRENCH IS MISSING THEN USE FRENCH 1 COINAGE.
    2459                    *
    2460                    **************************************************************************
    2461                    ;SWITCH_FOR_JUMPER
    2462                    ;        MMTM    SP,A0
    2463                    ;        MOVE    @COINS,A0              ;GET THE 16 BITS
    2464                    ;        ANDI    JUMPERS,A0             ;JUST KEEP THE BITS
    2465                    ;        JRZ     USA                    ;BOTH ARE IN...US!
    2466                    ;
    2467                    ;        CMPI    JUMPERS,A0             ;ARE BOTH MISSING?
    2468                    ;        JRZ     USA                    ;YEP....US.
    2469                    ;
    2470                    ;        CMPI    GERMAN_BIT,A0          ;IS JUST THE GERMAN MISSING?
    2471                    ;        JRNZ    NOGERM                 ;NOPE
    2472                    ;
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   55

    2473                    ;        CALLR   DO_GERMAN              ;DO THE GERMAN STUFF
    2474                    ;        JRUC    SFJX                   ;AND EXIT
    2475                    ;*
    2476                    ;*       MUST BE FRENCH
    2477                    ;*
    2478                    ;NOGERM
    2479                    ;       CALLR   DO_FRENCH               ;IF IT IS NOT POSSIBLE....DO IT.
    2480                    ;USA
    2481                    ;SFJX
    2482                    ;       MMFM    SP,A0
    2483                    ;       RETS
    2484                    ;
    2485                    ;DO_FRENCH
    2486                    ;        MMTM    SP,A0,A1
    2487                    ;        MOVK    ADJPRICE,A0            ;AS MASTER PRICER.
    2488                    ;        MOVI    F1SEL,A1               ;USE FRENCH SELECTOR
    2489                    ;        CALLA   PUT_ADJ
    2490                    ;       MMFM    SP,A0,A1
    2491                    ;       RETS
    2492                    ;
    2493                    ;DO_GERMAN
    2494                    ;        MMTM    SP,A0,A1
    2495                    ;        MOVK    ADJPRICE,A0            ;AS MASTER PRICER.
    2496                    ;        MOVI    G1SEL,A1               ;USE GERMAN SELECTOR
    2497                    ;        CALLA   PUT_ADJ
    2498                    ;
    2499                    ;        MOVK    ADJDIFF,A0
    2500                    ;        MOVI    1,A1                   ;DIFFICULTY 1 FOR GERMANS
    2501                    ;        CALLA   PUT_ADJ
    2502                    ;
    2503                    ;        MOVK    ADJBUYIN,A0
    2504                    ;        MOVI    1,A1                   ;EASY BUY-IN FOR GERMANS
    2505                    ;        CALLA   PUT_ADJ
    2506                    ;
    2507                    ;       MMFM    SP,A0,A1
    2508                    ;       RETS
    2509                    
    2510                    **************************************************************************
    2511                    *
    2512                    *       LD_CTAB
    2513                    *
    2514                    *       THIS IS CALLED TO STORE THE CSELCT VALUES FOR
    2515                    *       THE COIN SELECTOR STORED AS ADJPRICE.
    2516                    *
    2517                    **************************************************************************
    2518 00007950           LD_CTAB
    2519 00007950     098f          mmtm    sp,a0,a6,a1
         00007960     c200  
    2520                    
    2521 00007970     0d5f          calla   GET_CSPT                ;A6=CSELCT table
         00007980 00000000! 
    2522                    
    2523                    ;{
    2524                     .IF 0
    2525                            movk    1,a1
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   56

    2526                            move    *a6(16*4),a0
    2527                            jrnn    lct5                    ;Normal 1 credit to start?
    2528                            movk    2,a1
    2529                    lct5    movk    ADJCSTRT,a0
    2530                            callr   PUT_ADJ
    2531                            movk    1,a1
    2532                            movk    ADJCCONT,a0
    2533                            callr   PUT_ADJ
    2534                    
    2535                            movk    ADJC1,a0                ;1st one to store
    2536                    lct8    move    *a6+,a1                 ;Get word
    2537                            abs     a1
    2538                            callr   PUT_ADJ                 ;Write this one to memory
    2539                            addk    1,a0
    2540                            cmpi    ADJCX,a0
    2541                            jrls    lct8
    2542                    
    2543                     .ENDIF
    2544                    
    2545                    ;}
    2546                    
    2547 000079a0     09c0          movi    ADJLMULT,a0
         000079b0     0002  
    2548 000079c0     94c1          move    *a6+,a1
    2549 000079d0     0d5f          calla   PUT_ADJ
         000079e0 00007200' 
    2550                    
    2551 00007a00     09c0          movi    ADJCMULT,a0
         00007a10     0003  
    2552 00007a20     94c1          move    *a6+,a1
    2553 00007a30     0d5f          calla   PUT_ADJ
         00007a40 00007200' 
    2554                    
    2555 00007a60     09c0          movi    ADJRMULT,a0
         00007a70     0004  
    2556 00007a80     94c1          move    *a6+,a1
    2557 00007a90     0d5f          calla   PUT_ADJ
         00007aa0 00007200' 
    2558                    
    2559 00007ac0     09c0          movi    ADJXMULT,a0
         00007ad0     0005  
    2560 00007ae0     94c1          move    *a6+,a1
    2561 00007af0     0d5f          calla   PUT_ADJ
         00007b00 00007200' 
    2562                    
    2563 00007b20     09c0          movi    ADJDBVMULT,a0
         00007b30     0006  
    2564 00007b40     94c1          move    *a6+,a1
    2565 00007b50     0d5f          calla   PUT_ADJ
         00007b60 00007200' 
    2566                    
    2567 00007b80     09c0          movi    ADJCUNIT,a0
         00007b90     0007  
    2568 00007ba0     94c1          move    *a6+,a1
    2569 00007bb0     0d5f          calla   PUT_ADJ
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   57

         00007bc0 00007200' 
    2570                    
    2571 00007be0     09c0          movi    ADJBUNIT,a0
         00007bf0     0008  
    2572 00007c00     94c1          move    *a6+,a1
    2573 00007c10     0d5f          calla   PUT_ADJ
         00007c20 00007200' 
    2574                    
    2575 00007c40     09c0          movi    ADJMUNIT,a0
         00007c50     0009  
    2576 00007c60     94c1          move    *a6+,a1
    2577 00007c70     0d5f          calla   PUT_ADJ
         00007c80 00007200' 
    2578                    
    2579 00007ca0     09c0          movi    ADJCSTRT,a0
         00007cb0     000c  
    2580 00007cc0     94c1          move    *a6+,a1
    2581 00007cd0     0d5f          calla   PUT_ADJ
         00007ce0 00007200' 
    2582                    
    2583 00007d00     09c0          movi    ADJCCONT,a0
         00007d10     000d  
    2584 00007d20     94c1          move    *a6+,a1
    2585 00007d30     0d5f          calla   PUT_ADJ
         00007d40 00007200' 
    2586                    
    2587 00007d60     09c0          movi    ADJCDIV,a0
         00007d70     000a  
    2588 00007d80     94c1          move    *a6+,a1
    2589 00007d90     0d5f          calla   PUT_ADJ
         00007da0 00007200' 
    2590                    
    2591 00007dc0     09c0          movi    ADJFRAC,a0
         00007dd0     000b  
    2592 00007de0     94c1          move    *a6+,a1
    2593 00007df0     0d5f          calla   PUT_ADJ
         00007e00 00007200' 
    2594                    
    2595 00007e20                   PUSH    A6
    2596 00007e30     09c0          MOVI    ADJLTOTMULT,A0
         00007e40     001e  
    2597 00007e50     94c1          MOVE    *A6+,A1,W
    2598 00007e60     0d5f          CALLA   PUT_ADJ
         00007e70 00007200' 
    2599 00007e90     09c0          MOVI    ADJCTOTMULT,A0
         00007ea0     001f  
    2600 00007eb0     94c1          MOVE    *A6+,A1,W
    2601 00007ec0     0d5f          CALLA   PUT_ADJ
         00007ed0 00007200' 
    2602 00007ef0     09c0          MOVI    ADJRTOTMULT,A0
         00007f00     0020  
    2603 00007f10     94c1          MOVE    *A6+,A1,W
    2604 00007f20     0d5f          CALLA   PUT_ADJ
         00007f30 00007200' 
    2605 00007f50     09c0          MOVI    ADJXTOTMULT,A0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   58

         00007f60     0021  
    2606 00007f70     94c1          MOVE    *A6+,A1,W
    2607 00007f80     0d5f          CALLA   PUT_ADJ
         00007f90 00007200' 
    2608 00007fb0     09c0          MOVI    ADJBTOTMULT,A0
         00007fc0     0022  
    2609 00007fd0     94c1          MOVE    *A6+,A1,W
    2610 00007fe0     0d5f          CALLA   PUT_ADJ
         00007ff0 00007200' 
    2611 00008010                   PULL    A6
    2612                    
    2613 00008020     1a80          movk    ADJVIRGIN,a0            ;THIS SAYS 1ST 8 UNTOUCHED.
    2614 00008030     1821          movk    1,a1
    2615 00008040     0d3f          callr   PUT_ADJ
         00008050     ff1a  
    2616                    
    2617 00008060     1ac0          movk    ADJ1ST6,a0              ;THIS SAYS 1ST 6 UNTOUCHED.
    2618 00008070     1821          movk    1,a1
    2619 00008080     0d3f          callr   PUT_ADJ                 ;DONE!
         00008090     ff16  
    2620                    
    2621 000080a0     09af          mmfm    sp,a0,a6,a1
         000080b0     0043  
    2622 000080c0     0960          rets
    2623                    
    2624                    **************************************************************************
    2625                    *
    2626                    * CC_COIN
    2627                    *       MMTM    SP,A7
    2628                    *       CALLR   COIN_PAG
    2629                    *       MOVI    HSR_C,A7
    2630                    *       CALLA   RC_LONG         ;GET THE TABLE COUNTER
    2631                    *       JRZ     CCC_X           ;ITS DOWN
    2632                    *       DEC     A0              ;1 LESS
    2633                    *       CALLA   WC_LONG
    2634                    * CCC_X MMFM    SP,A7
    2635                    *       RETS
    2636                    *
    2637                    **************************************************************************
    2638                    
    2639                    **************************************************************************
    2640                    *
    2641                    *       L_MESS
    2642                    *
    2643                    *       A8 POINTS AT MESS_MAC FOLLOWED BY MESSAGE TEXT.
    2644                    *       POP ALL REGGIES LEAVING A8 POINTING AT TEXT.
    2645                    *       AND JUMP TO THE TEXT PROCESSOR!
    2646                    *
    2647                    *       THE MMFM POPS THE ROUTINE TO CALL INTO A1.
    2648                    *
    2649                    *       YOU ***MUST*** USE JSRP TO GET HERE.  WE JUMP TO
    2650                    *       THE STRING ROUTINE WHICH WILL RETP BACK TO THE CALLER!
    2651                    *
    2652                    **************************************************************************
    2653 000080d0           L_MESS_LOOP
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   59

    2654 000080d0     1108          addk    BYTE_SIZE,a8            ;PUSH BEYOND THIS BYTE
    2655 000080e0     11e8  L_MESS  addk    0fH,a8                  ;Round up word
    2656 000080f0     2f88          srl     4,a8
    2657 00008100     2488          sll     4,a8
    2658                    
    2659 00008110     09a8          MMFM    A8,A1,A6,A9,A10,A11     ;LOAD UP REGGIES FROM A8.
         00008120     0e42  
    2660 00008130     5600          CLR     A0                      ;NEVER SLEEP!
    2661                    
    2662 00008140     09e7          MOVI    L_RET,A7
         00008150 00008190' 
    2663 00008170     a2ec          MOVE    A7,-*A12,L      ;PUSH RET ADDR
    2664 00008180     0161          JUMP    A1              ;JUMP TO THE ROUTINE.
    2665 00008190     8f00  L_RET   MOVB    *A8,A0          ;CHECK NEXT BYTE 0=DONE...1=MORE.
    2666 000081a0     cbf2          JRNZ    L_MESS_LOOP
    2667 000081b0                   RETP
    2668                            
    2669                    **************************************************************************
    2670                    *
    2671                    *       LM_SETUP
    2672                    *
    2673                    *       THIS IS CALLED TO SETUP THE WORLD FOR A STRING
    2674                    *       OPERATION, BUT NOT PHYSICALLY MAKE THE CALL.
    2675                    *
    2676                    *       THIS ALLOWS TWEAKING OF REGGIES BEFORE THE CALL.
    2677                    *
    2678                    *       LM_FINIS
    2679                    *
    2680                    *       THIS IS CALLED ONCE THE MODIFICATIONS ARE MADE!
    2681                    *
    2682                    **************************************************************************
    2683 000081e0           LM_SETUP
    2684 000081e0     09a8          MMFM    A8,A1,A6,A9,A10,A11       ;LOAD UP REGGIES FROM A8.
         000081f0     0e42  
    2685 00008200     5600          CLR     A0                        ;DON'T SLEEP
    2686 00008210     0960          RETS
    2687                    
    2688 00008220           LM_FINIS
    2689 00008220     0161          JUMP    A1                              ;THIS RUNS ROUTINE AND
    2690                    
    2691                    **************************************************************************
    2692                    *
    2693                    *       GET_CSTR
    2694                    *
    2695                    *       HERE WE FORM THE CREDITS STRING AND
    2696                    *       RETURN IT IN THE STRING BUFFER.
    2697                    *       WE RETURN A8 POINTING AT THIS BUFFER.
    2698                    *
    2699                    *       WE ALSO PUT APPROPRIATE FRACTION ON THE
    2700                    *       END IF ADJUSTED ACCORDINGLY.
    2701                    *
    2702                    **************************************************************************
    2703 00008230           GET_CSTR
    2704 00008230     1a60          MOVK    ADJFREPL,A0             ;ARE WE IN FREE PLAY?
    2705 00008240     0d5f          CALLA   GET_ADJ
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   60

         00008250 00007130' 
    2706 00008270     ca04          JRZ     NOT_FREE
    2707                    
    2708 00008280     09e8          MOVI    MESS_FREEP,A8           ;RETURN POINTING AT FREE PLAY MESSAGE
         00008290 00009390' 
    2709 000082b0     c049          JRUC    GET_CX
    2710                    
    2711 000082c0           NOT_FREE
    2712 000082c0     0d5f          CALLA   STR_OBJ                 ;ALLOCATE AN OBJECT PLEASE
         000082d0 00000000! 
    2713 000082f0     c847          JRC     NO_SOBJ                 ;NONE TO USE!
    2714                            
    2715 00008300     09e8          MOVI    MESS_CREDITS,A8         ;POINT AT TEXT PART
         00008310 00009200' 
    2716 00008330     0d5f          CALLA   STRCAT                  ;BUILD THIS IN.
         00008340 0000a3f0' 
    2717 00008360     0d3f          CALLR   CRED_P
         00008370     fa1d  
    2718 00008380     4c0a          MOVE    A0,A10                  ;SAVE CREDITS
    2719 00008390     0d3f          CALLR   CAT_A0
         000083a0     0041  
    2720                    *
    2721                    *       NOW WE NEED TO SEE IF WE SHOULD ADD A FRACTION.
    2722                    *
    2723 000083b0     1960          MOVK    ADJFRAC,A0
    2724 000083c0     0d5f          CALLA   GET_ADJ                 ;CHECK THE ADJUSTMENT
         000083d0 00007130' 
    2725 000083f0     ca28          JRZ     NSFRAC                  ;DON'T SHOW IT!
    2726                    *
    2727                    *       ADD ANY FRACTION WE HAVE.
    2728                    *
    2729 00008400     0d3f          CALLR   COIN_PAG                ;PUT US ON COIN PAGE
         00008410     fdc6  
    2730 00008420     0d3f          CALLR   GET_CUNITS              ;A0 HAS CUNITS
         00008430     fa32  
    2731 00008440     0d3f          CALLR   DEF_PAGE                ;FLIP CMOS AWAY
         00008450     ff1a  
    2732 00008460     4c00          MOVE    A0,A0                   ;ZERO?
    2733 00008470     ca20          JRZ     NSFRAC                  ;THEN NO FRACTION.
    2734                    *
    2735                    *       WE HAVE A FRACTION...WERE THE CREDITS ZERO?
    2736                    *
    2737 00008480     4d4a          MOVE    A10,A10                 ;WE SAVED EM IN A10
    2738 00008490     cb0a          JRNZ    NZM                     ;NON ZERO MANTISSA
    2739                    
    2740 000084a0     4ce8          MOVE    A7,A8                   ;WALK DOWN STRING LOOKING FOR THE "ZERO"
    2741 000084b0           KILL_Z
    2742 000084b0     8f01          MOVB    *A8,A1                  ;GET A BYTE
    2743 000084c0     ca07          JRZ     NZM                     ;COULDN'T FIND IT....GO ON.
    2744                    
    2745 000084d0     0b41          CMPI    LET_0,A1                ;IS THIS THE ZERO?
         000084e0     ffcf  
    2746 000084f0     ca02          JRZ     GOT_ZERO
    2747                    
    2748 00008500     1108          ADDK    BYTE_SIZE,A8
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   61

    2749 00008510     c0f9          JRUC    KILL_Z
    2750                    
    2751 00008520           GOT_ZERO
    2752 00008520     5621          CLR     A1
    2753 00008530     8c28          MOVB    A1,*A8                  ;KILL THE ZERO
    2754                    
    2755 00008540           NZM
    2756 00008540     09e8          MOVI    MESS_2SPACE,A8          ;SPACE BET. MANTISSA AND DENMO
         00008550 0000a730' 
    2757 00008570     0d5f          CALLA   STRCAT
         00008580 0000a3f0' 
    2758                    
    2759 000085a0           NOT_ZM
    2760 000085a0     0d3f          CALLR   CAT_A0                  ;ADD A0 ONTO FRACTION
         000085b0     0020  
    2761                    
    2762 000085c0     09e8          MOVI    MESS_SLASH,A8
         000085d0 0000a720' 
    2763 000085f0     0d5f          CALLA   STRCAT                  ;ADD SLASH
         00008600 0000a3f0' 
    2764                    
    2765 00008620     18e0          MOVK    ADJCUNIT,A0             ;UNITS REQUIRED FOR CREDIT
    2766 00008630     0d5f          CALLA   GET_ADJ
         00008640 00007130' 
    2767 00008660     0d3f          CALLR   CAT_A0                  ;DENOMINATOR
         00008670     0014  
    2768                    
    2769 00008680           NSFRAC
    2770 00008680     4ce8          MOVE    A7,A8                   ;MOVE "OBJECT" TO A8
    2771 00008690     09e7          MOVI    STRNGRAM,A7             ;POINT AT STRING RAM
         000086a0 00000000! 
    2772 000086c0     5600          CLR     A0
    2773 000086d0     8c07          MOVB    A0,*A7                  ;STRINGRAM IS NULL
    2774 000086e0     0d5f          CALLA   STRCAT                  ;COPY THE STRING OUT OF OBJECT BLOCK
         000086f0 0000a3f0' 
    2775 00008710     4ce8          MOVE    A7,A8
    2776 00008720     0d5f          CALLA   STR_FREE                ;AND FREE UP THE OBJECT BLOCK
         00008730 00000000! 
    2777                    
    2778 00008750           GET_CX
    2779 00008750     0320          CLRC                            ;RETURN OK
    2780 00008760           GET_CXX
    2781 00008760     0960          RETS
    2782                    *
    2783                    *        NO OBJECTS AVAILABLE TO FORM STRING
    2784                    *
    2785 00008770           NO_SOBJ
    2786 00008770     09e8          MOVI    MESS_NULL,A8
         00008780 0000a740' 
    2787 000087a0     0de0          SETC
    2788 000087b0     c0fa          JRUC    GET_CXX                 ;RETURN BLANK STRING!
    2789                    
    2790                    **************************************************************************
    2791                    *
    2792                    *       CAT_A0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   62

    2793                    *
    2794                    *       A0 HAS A BINARY NUMBER.  TURN INTO DECIMAL STRING
    2795                    *       AND CONCATONATE TO THE STRING WE'RE BUILDING IN A7.                                             
    2796                    *
    2797                    **************************************************************************
    2798 000087c0           CAT_A0
    2799 000087c0                   PUSH    a8
    2800 000087d0     4c08          MOVE    A0,A8                   ;CREDIT COUNT IN A8
    2801 000087e0     0d5f          CALLA   HEXTOASC                ;STRING
         000087f0 00000000! 
    2802 00008810     0d5f          CALLA   STRCAT                  ;NOW WE HAVE WHOLE NUMBER.
         00008820 0000a3f0' 
    2803 00008840     09af          MMFM    SP,A8
         00008850     0100  
    2804 00008860     0960          RETS
    2805                    
    2806                    **************************************************************************
    2807                    *
    2808                    *       ADD_PROMPT
    2809                    *
    2810                    *       THIS IS CALLED ON THE CREDITS PAGE TO ADD A WORD OF
    2811                    *       WISDOM BELOW THE CREDITS MESSAGE. IT PICKS OUT THE
    2812                    *       CORRECT MESSAGES AND BLINKS THEM.
    2813                    *
    2814                    **************************************************************************
    2815 00008870           ADD_PROMPT
    2816 00008870     09e7          MOVI    PROMPT_PROC,A7
         00008880 00008900' 
    2817 000088a0     0d5f          CALLA   P_FORK                  ;START UP ANOTHER W/ SAME ID TO FLASH!
         000088b0 00000000! 
    2818 000088d0                   RETP
    2819                    
    2820 00008900           PROMPT_PROC
    2821 00008900     1a60          MOVK    ADJFREPL,A0
    2822 00008910     0d5f          CALLA   GET_ADJ
         00008920 00007130' 
    2823 00008940     cb16          JRNZ    rf4                     ;ALWAYS READY FOR 4 PLAYERS!
    2824                    
    2825 00008950     0d3f          CALLR   CRED_P
         00008960     f9be  
    2826 00008970     ca1f          JRZ     PP1
    2827                    
    2828 00008980     4c01          MOVE    A0,A1                   ;PUT CREDITS IN A1
    2829 00008990     1980          MOVK    ADJCSTRT,A0             ;GET AMOUNT NEEDED TO START.
    2830 000089a0     0d5f          CALLA   GET_ADJ
         000089b0 00007130' 
    2831 000089d0     4801          CMP     A0,A1                   ;ARE THERE ENOUGH TO START?
    2832 000089e0     c818          JRLO    PP1                     ;NOPE...."INSERT COIN"
    2833                    *
    2834                    *       WE HAVE ENOUGH TO START FOR 1....HOW ABOUT 2?
    2835                    *
    2836 000089f0     ca1c          jrz     PP2
    2837 00008a00     4c02          move    a0,a2
    2838 00008a10     4042          add     a2,a2
    2839 00008a20     4822          cmp     a1,a2
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   63

    2840 00008a30     ca0f          jrz     RF2
    2841 00008a40     c317          jrhi    PP2
    2842 00008a50     4002          add     a0,a2
    2843 00008a60     4822          cmp     a1,a2
    2844 00008a70     c30b          jrhi    RF2
    2845 00008a80     4002          add     a0,a2
    2846 00008a90     4822          cmp     a1,a2
    2847 00008aa0     c304          jrhi    rf3
    2848                    
    2849                    
    2850                    *
    2851                    *       01H = READY FOR 2 PLAYERS.  PRESS START.
    2852                    *
    2853 00008ab0           rf4
    2854 00008ab0     09e1          MOVI    MESS_READY_4,A1
         00008ac0 00009840' 
    2855 00008ae0     c010          JRUC    RED_1
    2856 00008af0           rf3
    2857 00008af0     09e1          MOVI    MESS_READY_3,A1
         00008b00 000096c0' 
    2858 00008b20     c00c          JRUC    RED_1
    2859 00008b30           RF2
    2860 00008b30     09e1          MOVI    MESS_READY_2,A1
         00008b40 00009540' 
    2861 00008b60     c008          JRUC    RED_1
    2862                    
    2863 00008b70           PP1
    2864 00008b70     09e0          MOVI    MESS_INS_COIN,A0
         00008b80 000099c0' 
    2865 00008ba0     5621          CLR     A1
    2866 00008bb0     c006          JRUC    RED_2
    2867                    
    2868 00008bc0           PP2
    2869 00008bc0     09e1          MOVI    MESS_READY_1,A1
         00008bd0 000093f0' 
    2870 00008bf0           RED_1
    2871 00008bf0     09e0          MOVI    MESS_PRESS_START,A0
         00008c00 00009ad0' 
    2872 00008c20           RED_2
    2873 00008c20     b20d          MOVE    A0,*A13(PDATA),L                ;HOLD MESSAGES
         00008c30     0100  
    2874 00008c40     b22d          MOVE    A1,*A13(PDATA+LONG_SIZE),L
         00008c50     0120  
    2875                    
    2876 00008c60           BLINK_LOOP
    2877 00008c60     b7a8          MOVE    *A13(PDATA),A8,L                ;FIRST MESSAGE
         00008c70     0100  
    2878 00008c80                   JSRP    L_MESS
    2879 00008cf0     b7a8          MOVE    *A13(PDATA+LONG_SIZE),A8,L      ;2ND MESSAGE
         00008d00     0120  
    2880 00008d10     ca07          JRZ     BL1                             ;NOT HOME!
    2881                    
    2882 00008d20                   JSRP    L_MESS
    2883                    
    2884 00008d90           BL1
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   64

    2885 00008d90                   SLEEPK  10H
    2886                    
    2887 00008dd0     b7a8          MOVE    *A13(PDATA),A8,L
         00008de0     0100  
    2888 00008df0     0d3f          CALLR   LM_SETUP
         00008e00     ff3d  
    2889 00008e10     56c6          CLR     A6                      ;BLACK
    2890 00008e20                   JSRP    LM_FINIS
    2891                    
    2892 00008e90           BL2
    2893 00008e90                   SLEEPK  10H
    2894 00008ed0     c0d8          JRUC    BLINK_LOOP
    2895                    
    2896                    **************************************************************************
    2897                    *
    2898                    *       MESSAGE SECTION
    2899                    *
    2900                    **************************************************************************
    2901 00008ee0           ROM_NAME
    2902 00008ee0       57          .byte   "WRESTLEMANIA REV 1.30 8/10/95",0
    2903 00008fd0                   .even
    2904                    
    2905 00008fd0           FACTORY_TABLE
    2906                    
    2907 00008fd0     0000          .word   0       ;ADJNULL        0
    2908 00008fe0     0001          .word   1       ;ADJPRICE       1       ;MASTER PRICING
    2909 00008ff0     0001          .word   1       ;ADJLMULT       2
    2910 00009000     0004          .word   4       ;ADJCMULT       3
    2911 00009010     0001          .word   1       ;ADJRMULT       4
    2912 00009020     0000          .word   0       ;ADJXMULT       5
    2913 00009030     0000          .word   0       ;ADJDBVMULT     6       ;DOLLR BILL VALIDATOR
    2914 00009040     0001          .word   1       ;ADJCUNIT       7
    2915 00009050     0000          .word   0       ;ADJBUNIT       8
    2916 00009060     0000          .word   0       ;ADJMUNIT       9
    2917 00009070     0004          .word   4       ;ADJCDIV        10
    2918 00009080     0001          .word   1       ;ADJFRAC        11      ;NON ZERO SAYS SHOW HALF CREDITS
    2919 00009090     0002          .word   2       ;ADJCSTRT       12      ;CREDITS REQUIRED TO START
    2920 000090a0     0002          .word   2       ;ADJCCONT       13      ;CREDITS REQUIRED TO CONTINUE
    2921                    
    2922                    ;       .word   3       ;ADJDIFF        14
    2923 000090b0     0005          .word   5       ;ADJDIFF        14      ;Difficulty Level (1-10)
    2924                    
    2925 000090c0     0000          .word   0       ;               15
    2926 000090d0     0000          .word   0       ;               16
    2927 000090e0     0001          .word   1       ;ADJMUSIC       17      ;attract mode music = off
    2928 000090f0     0032          .word   50      ;ADJMAXC        18      ;MAXIMUM CREDITS
    2929 00009100     0000          .word   0       ;ADJFREPL       19      ;NON-ZERO MEANS FREE PLAY
    2930 00009110     0001          .word   1       ;ADJVIRGIN      20      ;NON-ZERO MEANS 1ST 8 OF COIN ADJUST BLOCK UNTOUCHED
    2931 00009120     0008          .word   8       ;ADJFULLG       21      ;credits needed to purchase full game (4-16)
    2932 00009130     0001          .word   1       ;ADJ1ST6        22      ;NON-ZERO MEANS 1ST 6 UNTOUCHED.
    2933 00009140     0000          .word   0       ;ADJNOCPAG      23
    2934 00009150     0001          .word   1       ;ADJCNTR        24      ;COIN COUNTER MODE
    2935 00009160     0003          .word   3       ;ADJSPEED       25      ;game timer speed (1-5)
    2936 00009170     0001          .word   1       ;ADJHEADSZ      26      ;player head sizes (1-2)
    2937 00009180     0001          .word   1       ;ADJWINMODE     27      ;(winner stays free)
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   65

    2938 00009190     001e          .word   30      ;ADJVOLUME      28      ;sound volume (4-255)
    2939 000091a0     0000          .WORD   0       ;CUSTOM TOTALIZER
    2940 000091b0     0001          .WORD   1       ;TOTALIZER CHUTE 1
    2941 000091c0     0001          .WORD   1       ;TOTALIZER CHUTE 2
    2942 000091d0     0001          .WORD   1       ;TOTALIZER CHUTE 3
    2943 000091e0     0001          .WORD   1       ;TOTALIZER CHUTE 4
    2944 000091f0     0001          .WORD   1       ;TOTALIZER DBV
    2945                    **
    2946                    
    2947                            .if 0
    2948                            .word   0       ;ADJ_UNUSED             0
    2949                            .word   2       ;ADJ_PRICING            1  ;MASTER PRICING
    2950                            .word   1       ;ADJ_LEFT_MULT          2
    2951                            .word   1       ;ADJ_RIGHT_MULT         4
    2952                            .word   4       ;ADJ_CENTER_MULT        3
    2953                            .word   0       ;ADJ_EXTRA_MULT         5
    2954                            .word   1       ;ADJ_UNITS_CREDIT       6
    2955                            .word   0       ;ADJ_UNITS_BONUS        7
    2956                            .word   0       ;ADJ_MIN_UNITS          8
    2957                            .word   4       ;ADJCDIV                9  ;COINS PER DOLLAR
    2958                            .word   1       ;SHOW FRACTIONS         10
    2959                            .word   1       ;ADJ_START_CRED         11 ;CREDITS REQUIRED TO START
    2960                            .word   1       ;ADJ_CONT_CRED          12 ;CREDITS REQUIRED TO CONTINUE
    2961                            .word   3       ;ADJ_DIFFICULTY         13
    2962                            .word   5000    ;ADJ_HSRESET            14
    2963                            .word   3       ;ADJ_LIVES              15
    2964                            .word   0       ;ADJ_AMODE_MUSIC        16
    2965                            .word   50      ;MAXIMUM CREDITS        17
    2966                            .word   0       ;FREE PLAY              18
    2967                            .word   1       ;NON-ZERO MEANS COIN BLOCK (1ST 8) UNTOUCHED 19
    2968                            .word   0       ;ZERO MEANS NORMAL GORE ... 1 = SOFTEN IT  20
    2969                            .word   1       ;NON-ZERO MEANS 1ST 6 UNTOUCHED.                21
    2970                            .word   0       ;NON-ZERO MEANS NO COIN-SPECIFIC MESSAGE ON COIN PAGE  21
    2971                            .word   1       ;ADJCNTR  23   ADJUST MECH COIN COUNTER
    2972                            .endif
    2973                    
    2974                    *        A0 = SLEEP
    2975                    *        A1 = ROUTINE
    2976                    *        A6 = COLOR
    2977                    *        A8 = STRING POINTER
    2978                    *        A9 = SCREEN ADDRESS
    2979                    *        A10 = SPACING
    2980                    *        A11 = FONT
    2981                    *        A14 = FLAGS
    2982                    *
    2983                    
    2984 00009200           MESS_CREDITS
    2985 00009200       43          .byte   "CREDITS: ",0
    2986 00009250                   .even
    2987                    
    2988                    *        NORMAL CREDITS SETUP STRING
    2989                    *
    2990 00009250           MESS_CNUM
    2991 00009250                   MESS_MAC  RD15FONT,SPACING20,CP_CX,135,ROBO_LF,STRCNRM,0
    2992                    *
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   66

    2993                    *        "LOW" CREDITS SETUP STRING WHEN EXTRA ADVICE ON PRICING
    2994                    *        IS BEING ADDED.
    2995                    *
    2996 000092f0           MESS_LOWNUM
    2997 000092f0                   MESS_MAC  RD15FONT,SPACING20,CP_CX,135,ROBO_LF,STRCNRM,0
    2998                    
    2999 00009390           MESS_FREEP
    3000 00009390       46          .byte   "FREE  PLAY",0,0
    3001 000093f0                   .even
    3002                    
    3003 000093f0           MESS_READY_1
    3004 000093f0                   MESS_MAC  RD15FONT,SPACING20,CP_CX,155,ROBO_YELLOW,STRCNRM,0
    3005 00009490       52          .byte   "READY FOR  1  PLAYER",0,0
    3006 00009540                   .even
    3007                    
    3008 00009540           MESS_READY_2
    3009 00009540                   MESS_MAC  RD15FONT,SPACING20,CP_CX,155,ROBO_YELLOW,STRCNRM,0
    3010 000095e0       52          .byte   "READY FOR  1 - 2  PLAYERS",0,0
    3011 000096c0                   .even
    3012                    
    3013 000096c0           MESS_READY_3
    3014 000096c0                   MESS_MAC  RD15FONT,SPACING20,CP_CX,155,ROBO_YELLOW,STRCNRM,0
    3015 00009760       52          .byte   "READY FOR  1 - 3  PLAYERS",0,0
    3016 00009840                   .even
    3017                    
    3018 00009840           MESS_READY_4
    3019 00009840                   MESS_MAC  RD15FONT,SPACING20,CP_CX,155,ROBO_YELLOW,STRCNRM,0
    3020 000098e0       52          .byte   "READY FOR  1 - 4  PLAYERS",0,0
    3021 000099c0                   .even
    3022                    
    3023 000099c0           MESS_INS_COIN
    3024 000099c0                    MESS_MAC  RD15FONT,SPACING20,CP_CX,175,ROBO_YELLOW,STRCNRM,0
    3025                    
    3026                    
    3027 00009a60       49          .byte   "INSERT COINS",0,0
    3028                    
    3029                    
    3030 00009ad0                   .even
    3031                    
    3032 00009ad0           MESS_PRESS_START
    3033 00009ad0                   MESS_MAC RD15FONT,SPACING20,CP_CX,175,ROBO_YELLOW,STRCNRM,0
    3034 00009b70       50          .byte   "PRESS START",0,0
    3035 00009be0                   .even
    3036                    
    3037                     .if 0
    3038                    
    3039                    **************************************************************************
    3040                    *
    3041                    *       DUMPING SOFTWARE
    3042                    *
    3043                    **************************************************************************
    3044                    DUMP_FS
    3045                            CALLR   DUMP_PAGE
    3046                            CLR     A0
    3047                            MOVI    DUMP_PTR,A7
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   67

    3048                            CALLA   WC_WORD                 ;SET NUMBER OF DUMPS TO ZERO
    3049                            RETS
    3050                    
    3051                    **************************************************************************
    3052                    *
    3053                    *       ADD_DUMP
    3054                    *
    3055                    *       THIS IS CALLED TO RECORD A DUMP. A0 THROUGH A9 ARE
    3056                    *       RECORDED IN MEMORY.
    3057                    *
    3058                    **************************************************************************
    3059                    DUMP_SIZE        .equ    10*C_LONG_SIZE         ;9 LONG WORDS.
    3060                    DUMP_LAST        .equ    CMOS+08000H-DUMP_SIZE  ;Let em use the whole page!
    3061                    MAX_DUMP         .equ    8                      ;DON'T HOLD MORE THAN 12/PAGE
    3062                    
    3063                    ADD_DUMP
    3064                            MMTM    SP,B0,B1,B2
    3065                            MMTM    SP,A0,A1,A7
    3066                            CALLR   DUMP_PAGE               ;SET CMOS PAGE CORRECTLY.
    3067                            MOVE    A0,B0
    3068                            MOVE    A7,B2                   ;SAVE THESE!
    3069                            MOVE    A1,B1
    3070                    
    3071                            MOVI    DUMP_PTR,A7
    3072                            CALLA   RC_WORD                 ;GET THE INDICATOR OF HOW MANY.
    3073                            MOVI    DUMP_SIZE,A1
    3074                            MPYU    A0,A1                   ;THIS IS OFFSET INTO CMOS FOR THIS ENTRY!
    3075                    
    3076                            ADDI    DUMP_DATA,A1            ;NOW A1 POINTS WHERE WE'RE PUTTING THE DATA!
    3077                            CMPI    DUMP_LAST,A1            ;ARE WE TOO FAR FOR ANOTHER?
    3078                            JRHS    NO_DUMP                 ;YEP....SKIP IT
    3079                    
    3080                            INC     A0                      ;1 MORE OUT THERE!
    3081                            CALLA   WC_WORD                 ;CHALK IT!
    3082                    
    3083                            MOVE    A1,A7                   ;THIS IS POINTER TO STORE DATA.
    3084                            MOVE    B0,A0                   ;THIS IS A0
    3085                            CALLA   WC_LONGI
    3086                            MOVE    B1,A0                   ;THIS IS A1
    3087                            CALLA   WC_LONGI
    3088                            MOVE    A2,A0                   ;THIS IS A2
    3089                            CALLA   WC_LONGI
    3090                            MOVE    A3,A0                   ;THIS IS A3
    3091                            CALLA   WC_LONGI
    3092                            MOVE    A4,A0                   ;THIS IS A4
    3093                            CALLA   WC_LONGI
    3094                            MOVE    A5,A0                   ;THIS IS A5
    3095                            CALLA   WC_LONGI
    3096                            MOVE    A6,A0                   ;THIS IS A6
    3097                            CALLA   WC_LONGI
    3098                            MOVE    B2,A0                   ;THIS IS A7
    3099                            CALLA   WC_LONGI
    3100                            MOVE    A8,A0                   ;THIS IS A8
    3101                            CALLA   WC_LONGI
    3102                            MOVE    A9,A0                   ;THIS IS A9
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   68

    3103                            CALLA   WC_LONGI
    3104                    NO_DUMP
    3105                            MMFM    SP,A0,A1,A7
    3106                            MMFM    SP,B0,B1,B2
    3107                            RETS
    3108                    
    3109                    DUMP_PAGE
    3110                            PUSH    a1
    3111                            MOVI    DUMP_SELECT,A1          ;THIS IS DUMP PAGE
    3112                            CALLA   SET_PAGE                ;SET IT PLEASE
    3113                            MMFM    SP,A1
    3114                            RETS
    3115                    
    3116                    DISPDUMP
    3117                            CALLR   DUMP_PAGE
    3118                            MOVI    DUMP_PTR,A7
    3119                            CALLA   RC_WORD                 ;GET THE INDICATOR OF HOW MANY.
    3120                            JRZ     NOTHIN_TO_DUMP
    3121                    
    3122                            CLR     A9                      ;THIS IS CURRENT ONE
    3123                            MOVE    A0,A8                   ;THIS IS THE LAST ONE TO DO
    3124                    
    3125                    DO_ANOTHER_DPAGE
    3126                            CALLA   CLR_SCRN                ;CLEAR SCREEN
    3127                            CALLR   DUMP_PAGE
    3128                            movk    20,a10                  ;This is y coordiante of current one!
    3129                            MOVI    MAX_DUMP,A11            ;THIS IS MAX NUMBER PER PAGE.
    3130                    
    3131                    DO_ANOTHER_DUMP
    3132                            JSRP    DO_DUMP
    3133                            addk    30,a10                  ;Kick y up
    3134                            INC     A9                      ;KICK TO NEXT DUMP
    3135                            CMP     A8,A9                   ;UNTIL THEY'RE ALL DONE!
    3136                            JRHS    DUMP_DONE               ;WE'RE NOT ALL DONE YET!
    3137                    
    3138                            DSJS    A11,DO_ANOTHER_DUMP     ;NOT FOR THIS PAGE EITHER!
    3139                    
    3140                            JSRP    WAIT_MUT                ;WATCH FOR STICKS!
    3141                            JRUC    DO_ANOTHER_DPAGE
    3142                    
    3143                     .endif
    3144                    
    3145                    **************************************************************************
    3146                    *
    3147                    *       WAIT_MUT
    3148                    *
    3149                    *       THIS IS LIKE "WAIT_BUT"....WAIT FOR ANY BUTTON EXCEPT
    3150                    *       THAT IT WILL CLEAR OUT THE DUMPS IF BOTH STICKS ARE PUSHED
    3151                    *       DOWN.
    3152                    *
    3153                    **************************************************************************
    3154 00009be0           WAIT_MUT
    3155 00009be0     0d5f          CALLA   FORM_SWS        ;1ST STATE DOESN'T COUNT
         00009bf0 00000000! 
    3156                    *
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   69

    3157                    *       RETURN CURRENT STATE IN A0..PREVIOUS STATE IN A1.
    3158                    *
    3159 00009c10           WB1
    3160 00009c10                   SLEEPK  1
    3161                    
    3162 00009c50     0d5f          CALLA   FORM_SWS
         00009c60 00000000! 
    3163 00009c80     4c02          MOVE    A0,A2           
    3164 00009c90     0b82          ANDI    2002H,A2
         00009ca0 ffffdffd  
    3165 00009cc0     0b42          CMPI    2002H,A2
         00009cd0     dffd  
    3166 00009ce0     cb0f          JRNZ    WB2                     ;NOT "CLEAR"
    3167                    
    3168                    ;       .ref    GETSPEAK
    3169                    ;       CALLA   GETSPEAK
    3170                    
    3171                    
    3172                    ;       CALLR   DUMP_FS                 ;CLEAR OUT THE DUMPS!
    3173                    ;       CALLR   CLR_DUMP_AUD
    3174 00009cf0     c0f1          JRUC    WB1
    3175                    
    3176 00009d00           getcoin
    3177 00009d00     09c0          movi    coin_snd,a0
         00009d10     0048  
    3178                            ;one time in 512, do a different sound
    3179 00009d20     05ae          move    @PCNT,a14
         00009d30 00000000! 
    3180 00009d50     26ee          sll     32-9,a14
    3181 00009d60     2d2e          srl     32-9,a14
    3182 00009d70     cb02          jrnz    hqazcsnd
    3183 00009d80     09c0          movi    39h,a0
         00009d90     0039  
    3184 00009da0     0d5f  hqazcsnd        calla   triple_sound
         00009db0 00000000! 
    3185 00009dd0     0960          rets
    3186                    
    3187                    
    3188 00009de0     03e1  WB2     NOT     A1                      ;LAST = 0 AND NOW = 1 MEANS EDGE!
    3189 00009df0     5020          AND     A1,A0                   ;1'S WHERE WE HAVE POSITIVE EDGE.
    3190 00009e00     0b80          ANDI    BUTTONS,A0              ;IS IT A BUTTON?
         00009e10 ffff0f0f  
    3191 00009e30     cadd          JRZ     WB1
    3192                    
    3193                    ;DO NEW SOUND CALL HERE
    3194                    
    3195 00009e40     09c0          movi    beep2_snd,a0
         00009e50     03da  
    3196 00009e60     0d5f          calla   triple_sound
         00009e70 00000000! 
    3197 00009e90                   RETP
    3198                    
    3199                    
    3200 00009ec0           DUMP_DONE
    3201 00009ec0                   RETP                            ;AND RETURN TO CALLER!
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   70

    3202                    
    3203 00009ef0           NOTHIN_TO_DUMP
    3204 00009ef0     0d5f          CALLA   CLR_SCRN                ;PRINT SOMETHING PLEASE
         00009f00 00000000! 
    3205 00009f20     09e8          MOVI    MESS_NODUMP,A8
         00009f30 0000a580' 
    3206 00009f50                   JSRP    L_MESS
    3207 00009fc0                   RETP
    3208                    
    3209                    **************************************************************************
    3210                    * DO_DUMP
    3211                    * A9=DUMP NUMBER TO DO
    3212                    * A10=Y POSITION.
    3213                    
    3214                     .if 0
    3215                    DO_DUMP
    3216                            MMTM    A12,A8,A9,A10,A11
    3217                    
    3218                            MOVI    DUMP_SIZE,A7
    3219                            MPYU    A9,A7                   ;THIS IS OFFSET INTO CMOS FOR THIS ENTRY!
    3220                    
    3221                            ADDI    DUMP_DATA,A7            ;NOW A1 POINTS WHERE WE'RE PUTTING THE DATA!
    3222                    *
    3223                    *       Y IS IN A10
    3224                    *
    3225                            MOVE    A10,A3                  ;Y IN A3
    3226                            MOVK    30,A2                   ;STORE X IN A2
    3227                            MOVK    10,A5                   ;NUMBER OF WORDS TO DUMP
    3228                    NEXT_ELE
    3229                            CALLA   RC_LONGI                ;GET A WORD
    3230                            MOVE    A0,A4                   ;HEX IN A4
    3231                    
    3232                            MOVE    A7,*A13(PDATA),L
    3233                            MOVE    A2,*A13(PDATA+LONG_SIZE),L
    3234                            MOVE    A3,*A13(PDATA+(2*LONG_SIZE)),L
    3235                            MOVE    A5,*A13(PDATA+(3*LONG_SIZE)),L
    3236                    
    3237                            JSRP    WRITE_HEX               ;WRITE IT OUT.....A0 = DATA
    3238                    *                                               A10 = Y
    3239                    *                                               A11 = X
    3240                            MOVE    *A13(PDATA),A7,L
    3241                            MOVE    *A13(PDATA+LONG_SIZE),A2,L
    3242                            MOVE    *A13(PDATA+(2*LONG_SIZE)),A3,L
    3243                            MOVE    *A13(PDATA+(3*LONG_SIZE)),A5,L
    3244                    
    3245                            ADDI    48H,A2
    3246                    
    3247                            CMPI    6,A5                    ;WHEN WE'RE DOWN TO 4 SKIP TO NEXT LINE
    3248                            JRNZ    NO_SKIP_NOW
    3249                    
    3250                            ADDK    12,A3                   ;PUSH TO 2ND LINE
    3251                            MOVI    33,A2                   ;RE-MARGIN OVER. (30)
    3252                    
    3253                    NO_SKIP_NOW
    3254                            DSJ     A5,NEXT_ELE
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   71

    3255                    
    3256                            MMFM    A12,A8,A9,A10,A11
    3257                            RETP
    3258                    
    3259                     .endif
    3260                    
    3261                    **************************************************************************
    3262                    *
    3263                    *       WRITE_HEX
    3264                    *
    3265                    *       A4  = DATA
    3266                    *       A3  = Y
    3267                    *       A2  = X
    3268                    *
    3269                    **************************************************************************
    3270 00009ff0           WRITE_HEX
    3271 00009ff0     09e8          MOVI    MESS_DUMP,A8
         0000a000 0000a4e0' 
    3272 0000a020     0d3f          CALLR   LM_SETUP                ;SETUP FOR A DUMP!
         0000a030     fe1a  
    3273 0000a040     4c69          MOVE    A3,A9                   ;MOVE Y DOWN
    3274 0000a050     2609          SLL     16,A9                   ;SHIFT Y INTO PLACE
    3275 0000a060     4049          ADD     A2,A9                   ;ADD IN X
    3276                    
    3277 0000a070     4c88          MOVE    A4,A8
    3278 0000a080     5663          CLR     A3                      ;NO COMMAS!
    3279 0000a090     0d3f          CALLR   HTOHXASC                ;CONVERT PLEASE!
         0000a0a0     000a  
    3280 0000a0b0                   JSRP    LM_FINIS
    3281 0000a120                   RETP
    3282                    
    3283                    **************************************************************************
    3284                    * HTOHXASC - CONVERTS A 32 BIT HEX # TO AN ASCII STRING TERMINATED BY 0
    3285                    * A3=NON ZERO IF COMMAS ARE TO BE ADDED!
    3286                    * A8=HEX #
    3287                    * Rets:
    3288                    * A8=PTR TO THE STRING
    3289                    
    3290 0000a150           HTOHXASC
    3291 0000a150     098f          MMTM    SP,A1,A2,A9
         0000a160     6040  
    3292 0000a170     5621          CLR     A1
    3293 0000a180     5642          CLR     A2                      ;COMMA COUNT
    3294 0000a190     a02f          MOVE    A1,-*SP                 ;HERE'S THE NULL TERMINATOR
    3295 0000a1a0     1a01          MOVK    16,A1                   ;DIVISOR FOR HEX
    3296 0000a1b0     4d09          MOVE    A8,A9
    3297 0000a1c0           HEXTASC2
    3298 0000a1c0     5708          CLR     A8
    3299 0000a1d0     5a28          DIVU    A1,A8
    3300 0000a1e0     0b09          ADDI    '0',A9                  ;MAKE THE REMAINDER ASCII
         0000a1f0     0030  
    3301 0000a200     0b49          CMPI    '9',A9                  ;IS IT IN A-F RANGE?
         0000a210     ffc6  
    3302 0000a220     c202          JRLS    HHH1
    3303 0000a230     0b09          ADDI    7,A9                    ;MAKE ALPHA!
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   72

         0000a240     0007  
    3304 0000a250           HHH1
    3305 0000a250     a12f          MOVE    A9,-*SP                 ;SAVE HERE
    3306 0000a260     4d09          MOVE    A8,A9
    3307 0000a270     ca0b          JRZ     HEXTASC3                ;BR = DONE!
    3308 0000a280     1022          INC     A2
    3309 0000a290     0b42          CMPI    3,A2                    ;COMMA CHECK    
         0000a2a0     fffc  
    3310 0000a2b0     c8f0          JRLO    HEXTASC2                ;BR = NO COMMA
    3311                    *
    3312                    *        SEE IF WE'RE DOING COMMAS
    3313                    *
    3314 0000a2c0     4c63          MOVE    A3,A3                   ;COMMAS?
    3315 0000a2d0     caee          JRZ     HEXTASC2                ;NOPE....IGNORE!
    3316                    
    3317 0000a2e0     09c2          MOVI    ',',A2
         0000a2f0     002c  
    3318 0000a300     a04f          MOVE    A2,-*SP                 ;STUFF A COMMA
    3319 0000a310     5642          CLR     A2
    3320 0000a320     c0e9          JRUC    HEXTASC2
    3321 0000a330           HEXTASC3
    3322 0000a330     09e1          MOVI    STRNGRAM,A1             ;STORE HERE FOR BLOW OUT        
         0000a340 00000000! 
    3323 0000a360     4c28          MOVE    A1,A8
    3324                    
    3325 0000a370           HEXTASC4
    3326 0000a370     95e9          MOVE    *SP+,A9
    3327 0000a380     8d21          MOVB    A9,*A1
    3328 0000a390     1101          ADDK    8,A1
    3329 0000a3a0     4d29          MOVE    A9,A9
    3330 0000a3b0     cbfb          JRNZ    HEXTASC4
    3331 0000a3c0     09af          MMFM    SP,A1,A2,A9
         0000a3d0     0206  
    3332 0000a3e0     0960          RETS
    3333                    
    3334                    **************************************************************************
    3335                    * STRCAT - THIS IS CALLED TO CONCATONATE 2 STRINGS.
    3336                    * A7 <--- <A7><A8>
    3337                    * THAT IS.......CONCATONATE A8 ONTO THE END OF A7.
    3338                    
    3339 0000a3f0           STRCAT
    3340 0000a3f0     098f          MMTM    SP,A7,A0,A8
         0000a400     8180  
    3341 0000a410           STRC2
    3342 0000a410     8ee0          MOVB    *A7,A0          ;WALK DOWN A7 TO ITS ZERO.
    3343 0000a420     ca02          JRZ     STRC1           ;WE'RE THERE!
    3344                    
    3345 0000a430     1107          ADDK    BYTE_SIZE,A7    ;KICK TO NEXT BYTE
    3346 0000a440     c0fc          JRUC    STRC2
    3347                    *
    3348                    *       NOW A7 POINTS AT ITS ZERO.
    3349                    *
    3350 0000a450           STRC1
    3351 0000a450     8f00          MOVB    *A8,A0          ;GET A BYTE FROM 2ND STRING
    3352 0000a460     8c07          MOVB    A0,*A7          ;ADD THIS TO 1ST STRING
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   73

    3353 0000a470     1107          ADDK    BYTE_SIZE,A7
    3354 0000a480     1108          ADDK    BYTE_SIZE,A8
    3355 0000a490     4c00          MOVE    A0,A0           ;DID WE JUST MOVE TERMINATOR?
    3356 0000a4a0     cbfa          JRNZ    STRC1           ;NOPE...MOVE ANOTHER
    3357                    
    3358 0000a4b0     09af          MMFM    SP,A7,A0,A8
         0000a4c0     0181  
    3359 0000a4d0     0960          RETS
    3360                    
    3361 0000a4e0           MESS_DUMP
    3362 0000a4e0                   MESS_MAC RD7FONT,SPACING07,23,227,ROBO_WHITE,STRLNRM,0
    3363                    
    3364 0000a580           MESS_NODUMP
    3365 0000a580                   MESS_MAC RD15FONT,SPACING20,200,128,ROBO_ORANGE,STRCNRM,0
    3366 0000a620       4e          .byte   "NOTHING HERE....PRESS ADVANCE!",0,0
    3367 0000a720                   .even
    3368                    
    3369 0000a720           MESS_SLASH
    3370 0000a720       2f          .byte   "/",0
    3371 0000a730                   .even
    3372                    
    3373 0000a730       20  MESS_2SPACE     .byte   "  "
    3374 0000a740       00  MESS_NULL       .byte   0
    3375 0000a750                           .even
    3376                    
    3377 0000a750           SETUP_1_OF_3
    3378 0000a750                    MESS_MAC  RD15FONT,SPACING20,CP_CX,CP_13,ROBO_LASER,STRCNRM,0
    3379 0000a7f0           SETUP_2_OF_3
    3380 0000a7f0                    MESS_MAC  RD15FONT,SPACING20,CP_CX,CP_23,ROBO_LASER,STRCNRM,0
    3381 0000a890           SETUP_3_OF_3
    3382 0000a890                    MESS_MAC  RD15FONT,SPACING20,CP_CX,CP_33,ROBO_LASER,STRCNRM,0
    3383                    
    3384 0000a930           SETUP_1_OF_2
    3385 0000a930                    MESS_MAC  RD15FONT,SPACING20,CP_CX,CP_12,ROBO_LASER,STRCNRM,0
    3386                    
    3387 0000a9d0           SETUP_2_OF_2
    3388 0000a9d0                    MESS_MAC  RD15FONT,SPACING20,CP_CX,CP_22,ROBO_LASER,STRCNRM,0
    3389                    
    3390 0000aa70           SETUP_1_OF_1
    3391 0000aa70                    MESS_MAC  RD15FONT,SPACING20,CP_CX,CP_11,ROBO_LASER,STRCNRM,0
    3392                    
    3393 0000ab10           dollar_mes
    3394 0000ab10                   JAM_STR ogmd10_ascii,5,0,200,53,SGMD8YEL,print_string_C2
    3395 0000abb0       54          .byte   "THIS GAME ACCEPTS DOLLAR BILLS",0,0
    3396 0000acb0                   .even
    3397                    
    3398                    ;CPYR_MES
    3399                    ;       JAM_STR sgmd8_ascii,5,0,200,240,SGMD8YEL,print_string_C2
    3400                    ;       .byte   " COPYRIGHT 1993 MIDWAY MANUFACTURING COMPANY",0,0
    3401                    ;       .even
    3402                    ;
    3403                    ;       MESS_MAC RD7FONT,SPACING07,CP_CX,240,ROBO_WHITE,STRCNRM,0
    3404                    ;       .byte   " COPYRIGHT 1993 MIDWAY MANUFACTURING COMPANY",0,0
    3405                    ;       .even
    3406                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:30 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   74

    3407                    ;MEN_MES
    3408                    ;       MESS_MAC RD7FONT,SPACING07,CP_CX+6,20,ROBO_WHITE,STRCNRM,0
    3409                    ;       .byte   "LIVES AWARDED AT START",0,0
    3410                    ;       .even
    3411                    ;MEN_MES2
    3412                    ;       MESS_MAC RD7FONT,SPACING07,CP_CX+6,30,ROBO_WHITE,STRCNRM,0
    3413                    ;       .byte   "LIVES AWARDED FOR A CONTINUE",0,0
    3414                    ;       .even
    3415                    
    3416                    
    3417                    ******************************************************************************
    3418                    
    3419                            .end

 No Errors,  No Warnings
