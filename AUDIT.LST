TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .file   "audit.asm"
       3                            .width  132
       4                            .option b,d,l,t
       5                            .mnolist
       6                    
       7                    
       8                            .include        "mproc.equ"             ;mproc equates
       9                            .include        "display.equ"           ;display proc. equates
      10                            .include        "sys.equ"               ;z unit system equates
      11                            .include        "gsp.equ"
      12                            .include        "game.equ"
      13                            .include        "link.equ"              ;link equates
      14                            .include        "menu.equ"              ;menu equates
      15                            .include        "audit.equ"
      16                            .include        "macros.h"
      17                            .include        "sound.h"
      18                    
      19                            .include        "fontsimg.glo"
      20                            .include        "miscimg.glo"
      21                            .include        "bgndtbl.glo"
      22                            .include        "imgtbl.glo"
      23                    
      24                    
      25                                            
      26 00000000                   .BSS    BAD_AUD         ,16     ;(BAD_AUD...NOT BAD_DOG!)       
      27 00000010                   .bss    playtimer       ,16     ;timer units for game
      28 00000020                   .BSS    C_FRAC          ,16     ;TIME 10 SECONDS TO
      29                                                            ;INDICATE COIN ACTIVITY
      30 00000030                   .BSS    C_FLAGS         ,5*32   ;INTERRUPT COIN BOUNCE
      31 000000d0                   .BSS    COINCNTR        ,32     ;MECH COIN COUNTER TIMERS AND COUNTS    
      32              00d0- COINCNT1        .EQU    COINCNTR
      33              00d8- COINCNT2        .EQU    COINCNTR+8
      34 000000f0                   .BSS    OCT_FLG,16              ;!0=Did 1st part
      35 00000000                   BSSX    THIS_GAME_TIME,16
      36                    
      37 00000000                   BSSX    audit_ud_flag,16        ;audit_ud process active (EXISTP is
      38                                                            ; too slow and we check this often.)
      39                    
      40                                            
      41                            .def    ADJ_PAGE
      42                            .def    BAD_AUD
      43                            .def    C_FRAC,COINCNTR                 
      44                            .def    C_FLAGS
      45                            .def    L_MESS,AUD,AUD1,GET_ADJ
      46                            .def    GET_AUD,SLAM_SW,STORE_AUDIT
      47                            .def    CAT_A0
      48                            .def    CCCC
      49                            .def    CK_MAX
      50                            .def    CLR_AUD,FAC_SET
      51                            .def    CLR_AUDR
      52                            .def    CMOS_VAL
      53                            .def    COIN_PAG
      54                            .def    CR_STRTP
      55                            .def    CR_CONTP
      56                            .def    CRD_SCRN
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE    2

      57                            .def    CRED_P  
      58                            .def    DEF_PAGE
      59                            .def    FORM_ADC
      60                            .def    F_ADC_S
      61                            .def    GET_CREDITS
      62                            .def    GET_CSTR
      63                            .def    HTOHXASC
      64                            .def    L_TIMER
      65                            .def    LD_CTAB
      66                            .def    LM_SETUP
      67                            .def    LM_FINIS
      68                            .def    NO_CREDS
      69                            .def    P_START
      70                            .def    P_CONT  
      71                            .def    PUT_ADJ
      72                            .def    ROM_NAME
      73                            .def    STRCAT
      74                            .def    UNIT_CLR
      75                            .def    WAIT_MUT
      76                            .DEF    KILL_AUD
      77                            .ref    PCNT
      78                    
      79                            .def    CCOIN,RCOIN,SERVICE,XCOIN,LCOIN
      80                            .DEF    DBV
      81                    
      82                            .ref    osgemd_ascii,ogmd10_ascii,wgsf24_ascii
      83                            .ref    mess_cursy
      84                            .ref    mess_line_spacing
      85                    
      86                            .ref    print_message,setup_message
      87                            .ref    print_string_C,print_string_C2
      88                            .ref    dec_to_asc
      89                            .ref    copy_string,copy_rom_string
      90                            .ref    concat_string,concat_rom_string
      91                            .ref    BAKMODS
      92                            .ref    BGND_UD1
      93                            .ref    COUNTER_MODE
      94                    
      95                            .GLOBAL SYNCHALF,WDOGDIS,GAMSTATE
      96                    
      97                            .ref    IRQSKYE
      98                            .ref    PSTATUS,PSTATUS2
      99                            .ref    attract_mode
     100                    
     101                    
     102                            .ref    _coin_addr
     103                            .ref    _dipswitch_addr
     104                    
     105                            ;from DCSSOUND.ASM
     106                            .ref    triple_sound
     107                    
     108                            .REF    PSTARTS
     109                    
     110                    
     111                            .ref            SET_PAGE
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE    3

     112                            .ref            P_FORK
     113                            .ref            DEC_HSR
     114                            .ref            RC_BYTEI
     115                            .ref            RC_BYTE
     116                            .ref            RC_WORD
     117                            .ref            RC_LONG
     118                            .ref            RC_LONGI
     119                            .ref            WC_BYTE
     120                            .ref            WC_BYTEI
     121                            .ref            WC_WORD
     122                            .ref            WC_WORDI
     123                            .ref            WC_LONG
     124                            .ref            WC_LONGI
     125                    
     126                    
     127                            .ref            GET_CSPT
     128                            .ref            STR_OBJ
     129                            .ref            STR_FREE
     130                            .ref            CKPROMPT
     131                            .ref            TWO_TS,TWO_TP
     132                            .ref            BUILD_ST
     133                            .ref            HID_P
     134                    
     135                    
     136                            .ref            WIPEOUT
     137                    
     138                    
     139                    
     140                            .ref    FORM_SWS
     141                            .ref    opmsg_clr
     142                    
     143                    
     144                    
     145                    
     146                            .ref    dirqtimer
     147                            .ref    SOUNDSUP
     148                            .ref    RD15FONT,RD7FONT,STRCNRM
     149                            .ref    STRNGRAM,STRLNRM,HEXTOASC
     150                            .ref    CLR_SCRN
     151                            .ref    KILALL
     152                            .ref    SUCIDE
     153                            .ref    dpageflip
     154                            .ref    TAMPEREDP
     155                            .ref    _switch_addr
     156                    
     157                    
     158 00000000                   .text
     159                    
     160                    
     161                    
     162 00000000           L_TIMER
     163 00000000     05a0          move    @GAMSTATE,a0
         00000010 00000000! 
     164 00000030     0b40          cmpi    INAMODE,a0
         00000040     fffe  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE    4

     165 00000050     cb24          jrne    omrjNO_CK_OCTO          ;ATTRACT MODE..CHECK OCTOPUS!
     166                    
     167 00000060     07a0          move    @_switch_addr,a0,L
         00000070 00000000! 
     168 00000090     8400          move    *a0,a0
     169 000000a0     03e0          not     a0
     170 000000b0     0b80          andi    07f7fH,a0               ;Get sticks 'n starts
         000000c0 ffff8080  
     171 000000e0     05a1          move    @OCT_FLG,a1
         000000f0 000000f0- 
     172 00000110     c705          jrgt    omrjp2                  ;Got part one?
     173                    
     174 00000120     0b40          cmpi    07171H,a0               ;P1&P2 all buts down & both sticks up
         00000130     8e8e  
     175 00000140     cb15          jrne    omrjNO_CK_OCTO                  ;Wrong?
     176 00000150     09c1          movi    TSEC,a1                 ;One sec to get part two
         00000160     0035  
     177 00000170           omrjp2
     178 00000170     1421          subk    1,a1
     179 00000180     0581          move    a1,@OCT_FLG
         00000190 000000f0- 
     180 000001b0     c70e          jrgt    omrjNO_CK_OCTO                  ;Still counting?
     181 000001c0     0b40          cmpi    0202H,a0
         000001d0     fdfd  
     182 000001e0     cb0b          jrne    omrjNO_CK_OCTO                  ;Wrong?
     183                    
     184 000001f0     09ed          movi    ACTIVE,a13
         00000200 00000000! 
     185 00000220     09c1          movi    AMODE_PID,a1
         00000230     0100  
     186                            .ref    octopus_page
     187 00000240     09e7          movi    octopus_page,a7
         00000250 00000000! 
     188 00000270     0d5f          calla   GETPRC
         00000280 00000000! 
     189 000002a0           omrjNO_CK_OCTO          ;ATTRACT MODE..CHECK OCTOPUS!
     190                    
     191 000002a0     05a1          move    @dirqtimer,a1           ;get elapsed time
         000002b0 00000000! 
     192 000002d0     05a0          move    @playtimer,a0           ;get play timer
         000002e0 00000010- 
     193 00000300     4420          sub     a1,a0                   ;add elapsed time
     194 00000310     0580          move    a0,@playtimer
         00000320 00000010- 
     195 00000340     c70a          jrgt    omrjnot5                        ;Under 5 seconds?
     196                    
     197 00000350                   CREATE  AUDIT_UD_PID,audit_ud
     198                    
     199 000003d0     09c0          movi    TSEC*5,a0               ;reset the countdown
         000003e0     0109  
     200 000003f0           omrjnot5
     201 000003f0     0580          move    a0,@playtimer
         00000400 00000010- 
     202 00000420     0960          rets
     203                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE    5

     204                    
     205 00000430            SUBRP  audit_ud
     206                    
     207 00000430     09ce          movi    1,a14
         00000440     0001  
     208 00000450     058e          move    a14,@audit_ud_flag
         00000460 00000110- 
     209                    
     210 00000480     05ae          move    @GAMSTATE,a14
         00000490 00000000! 
     211 000004b0     ce33          jrn     omrjskip                        ;in diagnostics
     212                    
     213 000004c0     05ae          move    @PSTATUS2,a14
         000004d0 00000000! 
     214 000004f0     ca2f          jrz     omrjskip                        ;no players
     215                    
     216 00000500     09c0          movi    AUD_1PLAYTIME,a0        ;update the 1/2P time
         00000510     001f  
     217 00000520     0b4e          cmpi    3,a14
         00000530     fffc  
     218 00000540     cb02          jrne    omrj1pmode
     219 00000550     09c0          movi    AUD_2PLAYTIME,a0
         00000560     0020  
     220 00000570           omrj1pmode
     221 00000570     0d3f          callr   AUD1
         00000580     0656  
     222 00000590     05ae          MOVE    @PSTATUS2,A14
         000005a0 00000000! 
     223 000005c0     ca16          JRZ     NO_NEED_TO_DO_ANYTHING
     224 000005d0     0b4e          CMPI    3,A14
         000005e0     fffc  
     225 000005f0     ca0c          JREQ    BETTER_STOP_THIS
     226 00000600     05a0          MOVE    @PSTARTS,A0
         00000610 00000000! 
     227 00000630     ca0f          JRZ     NO_NEED_TO_DO_ANYTHING
     228 00000640     05a0          MOVE    @THIS_GAME_TIME,A0
         00000650 00000100- 
     229 00000670     1020          INC     A0
     230 00000680     0580          MOVE    A0,@THIS_GAME_TIME
         00000690 00000100- 
     231 000006b0     c007          JRUC    NO_NEED_TO_DO_ANYTHING
     232 000006c0           BETTER_STOP_THIS
     233 000006c0     5600          CLR     A0
     234 000006d0     0580          MOVE    A0,@PSTARTS
         000006e0 00000000! 
     235 00000700     0580          MOVE    A0,@THIS_GAME_TIME
         00000710 00000100- 
     236 00000730           NO_NEED_TO_DO_ANYTHING
     237 00000730                   SLEEPK  1
     238                    
     239 00000770     09c0          movi    AUD_PLTIME,a0
         00000780     001e  
     240 00000790     0d3f          callr   AUD1
         000007a0     0634  
     241                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE    6

     242 000007b0                   SLEEPK  1
     243 000007f0           omrjskip
     244 000007f0     09c0          movi    AUD_UPTIME,a0           ;update the total uptime
         00000800     001d  
     245 00000810     0d3f          callr   AUD1
         00000820     062c  
     246                    
     247 00000830     57ce          clr     a14
     248 00000840     058e          move    a14,@audit_ud_flag
         00000850 00000110- 
     249                    
     250 00000870                   DIE
     251                    
     252                    
     253                     .if 0
     254                    
     255                    
     256                            move    @PSTATUS2,a2
     257                            jrz     omrjaudup
     258                    
     259                            move    @GAMSTATE,a2
     260                            jrn     omrjaudup
     261                    
     262                            movi    AUD_1PLAYTIME,a0        ;update the 1/2P time
     263                            cmpi    3,a2
     264                            jrne    omrj1pmode
     265                            movi    AUD_2PLAYTIME,a0
     266                    omrj1pmode
     267                            callr   AUD1
     268                    
     269                            movi    AUD_PLTIME,a0
     270                            callr   AUD1
     271                    
     272                    omrjaudup
     273                            movi    AUD_UPTIME,a0           ;update the total uptime
     274                            callr   AUD1
     275                    
     276                            movi    TSEC*5,a0               ;reset the countdown
     277                    
     278                    omrjnot5
     279                            rets
     280                    
     281                     .endif
     282                    
     283                    
     284                    
     285 000008a0           SERVICE
     286 000008a0     05a0          move    @GAMSTATE,a0
         000008b0 00000000! 
     287 000008d0     ce19          jrn     ihfbx                   ;In diagnostics?
     288                    
     289 000008e0     07a0          move    @_coin_addr,a0,L        ;Get COIN inputs
         000008f0 00000000! 
     290 00000910     8400          move    *a0,a0
     291 00000920     1e40          btst    CDI_BIT,a0              ;Coin Door Closed ?
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE    7

     292 00000930     ca13          jrz     ihfbx                   ;Yes - Then NO Service Credits Allowed
     293                    
     294 00000940     0d3f          callr   CCCC                    ;MAKE SURE THINGS ARE IN TACT
         00000950     055e  
     295                    
     296 00000960     18c0          movk    AUDSERV,a0
     297 00000970     0d3f          callr   AUD1                    ;CHALK UP A SERVICE CREDITS!
         00000980     0616  
     298                    
     299 00000990     0d3f          callr   getcoin
         000009a0     0935  
     300                    
     301 000009b0     0d3f          callr   GET_CREDITS
         000009c0     01ba  
     302 000009d0     1020          addk    1,a0                    ;Add in the new ones
     303 000009e0     0d3f          callr   PUT_CREDITS             ;NOW STORE EM BACK (ENFORCE MAX)
         000009f0     0170  
     304                    
     305 00000a00     0d3f          callr   FORM_COIN_CKSUM_AND_STORE
         00000a10     0544  
     306                    
     307                            ;Update little credit message
     308                            .ref    update_credit_msg
     309 00000a20     0d5f          calla   update_credit_msg
         00000a30 00000000! 
     310                    
     311 00000a50     c000          jruc    CREDSP
         00000a60     0093  
     312                    
     313 00000a70           ihfbx   DIE
     314                    
     315                    
     316                    
     317 00000aa0     1848  LCOIN   MOVK    ADJLMULT,A8     ;CMOS RAM ADJUST
     318 00000ab0     09ea          MOVI    LC_FLAG,A10     ;LEFT COIN FLAG
         00000ac0 00000030- 
     319 00000ae0     09cb          MOVI    AUDLCOIN,A11    ;AUDIT NUMBER
         00000af0     0001  
     320 00000b00     c01c          JRUC    VALID_COIN
     321                    
     322 00000b10     1868  CCOIN   MOVK    ADJCMULT,A8
     323 00000b20     09ea          MOVI    CC_FLAG,A10     ;CENTER COIN FLAG
         00000b30 00000040- 
     324 00000b50     09cb          MOVI    AUDCCOIN,A11
         00000b60     0002  
     325 00000b70     c015          JRUC    VALID_COIN
     326                    
     327 00000b80     1888  RCOIN   MOVK    ADJRMULT,A8
     328 00000b90     09ea          MOVI    RC_FLAG,A10     ;RYTE COIN FLAG
         00000ba0 00000038- 
     329 00000bc0     09cb          MOVI    AUDRCOIN,A11
         00000bd0     0003  
     330 00000be0     c00e          JRUC    VALID_COIN
     331                    
     332 00000bf0     18a8  XCOIN   MOVK    ADJXMULT,A8
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE    8

     333 00000c00     09ea          MOVI    XC_FLAG,A10     ;XTRA (FOURTH) COIN FLAG
         00000c10 00000048- 
     334 00000c30     09cb          MOVI    AUDXCOIN,A11
         00000c40     0004  
     335 00000c50     c007          JRUC    VALID_COIN
     336                    
     337 00000c60     18c8  DBV     MOVK    ADJDBVMULT,A8
     338 00000c70     09ea          MOVI    DBV_FLAG,A10    ;XTRA (FOURTH) COIN FLAG
         00000c80 00000050- 
     339 00000ca0     09cb          MOVI    AUD_DBV,A11
         00000cb0     0005  
     340 00000cc0     0300          JRUC    VALID_COIN
     341              0030- LC_FLAG         .EQU    C_FLAGS         ;UHB LEFT COIN
     342              0038- RC_FLAG         .EQU    C_FLAGS+8       ;UHB RGT   "
     343              0040- CC_FLAG         .EQU    C_FLAGS+16      ;UHB CNTR  "
     344              0048- XC_FLAG         .EQU    C_FLAGS+24      ;UHB XTRA  "
     345              0050- DBV_FLAG        .EQU    C_FLAGS+32      ;UHB DOLLAR BILL VALIDATOR  
     346                    
     347 00000cd0           VALID_COIN
     348 00000cd0     05a0          move    @GAMSTATE,a0
         00000ce0 00000000! 
     349 00000d00     ce77          jrn     CRX                     ;In diagnostics?
     350                    
     351 00000d10     4d00          MOVE    A8,A0                   ;MOVE MULTIPLIER ADJUST NUMBER TO A0
     352 00000d20     0d5f          CALLA   GET_ADJ                 ;FETCH IT
         00000d30 00007130' 
     353 00000d50     4c08          MOVE    A0,A8                   ;AND BACK TO STATIC REG...ANY THERE?
     354 00000d60     ca71          JRZ     CRX                     ;NOPE....DON'T WASTE THE TIME!
     355                    
     356 00000d70     0d3f          CALLR   SLAM_P                  ;SLAM AROUND?
         00000d80     04d9  
     357 00000d90     cb6e          JRNZ    CRX                     ;THEN NO ACTION
     358 00000da0     09e0          MOVI    LC_PID,A0               ;ALL 4 SLOTS USE THIS ID NOW
         00000db0 0000811a  
     359 00000dd0     b00d          MOVE    A0,*A13(PROCID)         ;SET OUR ID (IN CASE TABLE IS WRONG)
         00000de0     0020  
     360                    
     361 00000df0     8f40          MOVB    *A10,A0                 ;GET FLAG BYTE
     362 00000e00     cb67          JRNZ    CRX                     ;SOMEONE ELSE THERE...WE'RE A BOUNCE!
     363                    
     364                    
     365 00000e10     18a0          movk    5,a0                    ;Wait a few ticks
     366 00000e20     8c0a          movb    a0,*a10
     367                    
     368 00000e30           COIN_LOOP
     369 00000e30                   SLEEPK  1                       ;SLEEP TILL WE GET SUCCESS OR FAIL
     370 00000e70     8f40          MOVB    *A10,A0                 ;GET THE TIMER
     371 00000e80     c7fa          JRGT    COIN_LOOP
     372                    
     373 00000e90     0d3f          CALLR   SLAM_P                  ;SLAM?
         00000ea0     04c7  
     374 00000eb0     cb5c          JRNZ    CRX                     ;THEN WE'RE OUT OF HERE
     375                    
     376                                                            
     377 00000ec0     5600          CLR     A0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE    9

     378 00000ed0     0580          MOVE    A0,@SOUNDSUP            ;TURN SOUNDS ON. (A-MODE SOUND SUPRESSOR)
         00000ee0 00000000! 
     379                    
     380 00000f00     0d3f          callr   getcoin
         00000f10     08de  
     381                    
     382 00000f20     09c0          MOVI    15*40H/8,A0             ;DON'T WIPE ON GAME OVER IF ITS WITHIN
         00000f30     0078  
     383 00000f40     0580          MOVE    A0,@C_FRAC              ;15 SECONDS (THIS TIMES OUT TO OVER 20)
         00000f50 00000020- 
     384                    
     385 00000f70     4d60          MOVE    A11,A0
     386 00000f80     0d3f          CALLR   AUD1                    ;CHALK THE DIRECT AUDIT
         00000f90     05b5  
     387                    
     388 00000fa0     05a0          MOVE    @COUNTER_MODE,A0,W
         00000fb0 00000000! 
     389 00000fd0     0b40          CMPI    1,A0
         00000fe0     fffe  
     390 00000ff0     cb21          JRNE    MECH20
     391                    
     392 00001000     09c0          MOVI    ADJTOTALIZER,A0
         00001010     001d  
     393 00001020     0d5f          CALLA   GET_ADJ
         00001030 00007130' 
     394 00001050     ca0b          JRZ     NORMAL_TOTALIZER
     395 00001060     09c0          MOVI    ADJTOTALIZER,A0
         00001070     001d  
     396 00001080     4160          ADD     A11,A0
     397 00001090     0d5f          CALLA   GET_ADJ
         000010a0 00007130' 
     398 000010c0     4c02          MOVE    A0,A2
     399 000010d0     09e1          MOVI    COINCNT1,A1
         000010e0 000000d0- 
     400 00001100     c00b          JRUC    RE_ENTER_FROM_CUST_TOTALIZER
     401 00001110           NORMAL_TOTALIZER
     402                    
     403 00001110     0d5f          CALLA   GET_CSPT                ;POINT TO COIN TABLE A6
         00001120 00000000! 
     404                    
     405 00001140     0b06          ADDI    CS_LVAL,A6              ;ADD IN OFFSET TO CHUTE VALUES
         00001150     00c0  
     406 00001160     142b          DEC     A11                     ;GET YOUR CLICK COUNT
     407 00001170     248b          SLL     4,A11                   ;OFFSET FOR CHUTE, WORD CORRECT
     408 00001180     4166          ADD     A11,A6
     409 00001190     84c2          MOVE    *A6,A2                  ;GET MONEY VALUE
     410 000011a0     4c42          MOVE    A2,A2
     411 000011b0     ca04          JRZ     MECH10                  ;SOMETHING ILLEGAL HAPPENED, JUST ONE
     412                    
     413 000011c0           RE_ENTER_FROM_CUST_TOTALIZER
     414 000011c0     09e1          MOVI    COINCNT1,A1
         000011d0 000000d0- 
     415 000011f0     c00f          JRUC    MECH3B
     416 00001200           MECH10
     417 00001200     1840          MOVK    2,A0                    ;VALUE OVER 10, JUST GIVE ONE CLICK
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   10

     418 00001210           MECH20
     419 00001210     09e1          MOVI    COINCNT1,A1
         00001220 000000d0- 
     420 00001240     0b40          CMPI    2,A0
         00001250     fffd  
     421 00001260     ca07          JREQ    MECH3A                  ;CLICK COUNTER 1 MODE
     422                            
     423 00001270     0b4b          CMPI    AUDLCOIN,A11
         00001280     fffe  
     424 00001290     ca04          JREQ    MECH3A
     425 000012a0     0b4b          CMPI    AUDRCOIN,A11
         000012b0     fffc  
     426 000012c0     cb07          JRNE    MECH4
     427 000012d0     1101          ADDK    8,A1
     428 000012e0           MECH3A
     429 000012e0     1822          MOVK    1,A2
     430 000012f0           MECH3B
     431 000012f0     0360          DINT
     432 00001300     8e20          MOVB    *A1,A0
     433 00001310     4040          ADD     A2,A0
     434 00001320     8c01          MOVB    A0,*A1
     435 00001330     0d60          EINT
     436 00001340           MECH4
     437 00001340     4d08          MOVE    A8,A8                   ;NO CREDIT UNITS?
     438 00001350     ca12          JRZ     CRX                     ;THEN NO MORE WORK TO DO.
     439 00001360     0d3f          CALLR   ADJUST_CREDITS          ;GIVE CREDIT FOR THE MONEY.
         00001370     0085  
     440 00001380     0d3f          CALLR   DEF_PAGE                ;POINT PAGE AWAY!
         00001390     0626  
     441                    
     442                    
     443 000013a0           CREDSP
     444                    
     445 000013a0     0d5f          calla   update_credit_msg
         000013b0 00000000! 
     446                    
     447 000013d0     05a0          MOVE    @PSTATUS2,A0
         000013e0 00000000! 
     448 00001400     cb07          JRNZ    CRX
     449 00001410     05a0          move    @GAMSTATE,a0
         00001420 00000000! 
     450 00001440     1420          subk    INAMODE,a0              ;A DISPLAY IN AMODE ONLY!
     451 00001450     cb02          jrne    CRX
     452                    
     453 00001460     c000  CRY     jruc    CRD_SCRN                ;PUT UP THE CREDITS SCREEN
         00001470     0151  
     454                    
     455 00001480     c080  CRX     JAUC    SUCIDE
         00001490 00000000! 
     456                    
     457                    
     458                    
     459                    
     460                    
     461                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   11

     462 000014b0           CR_STRTP
     463 000014b0                   PUSH    a0,a1
     464 000014d0     1a60          MOVK    ADJFREPL,A0
     465 000014e0     0d3f          CALLR   GET_ADJ                 ;ARE WE IN FREE PLAY?
         000014f0     05c3  
     466 00001500     0b40          CMPI    1,A0                    ;WE ARE IF ITS NOT ZERO.
         00001510     fffe  
     467 00001520     c90b          JRHS    CR_STX
     468                    
     469 00001530     0d3f          CALLR   CCCC                    ;MAKE SURE THINGS ARE IN TACT
         00001540     049f  
     470 00001550     0d3f          CALLR   COIN_PAG
         00001560     04b1  
     471 00001570     0d3f          CALLR   GET_CREDITS             ;GET CURRENT CREDITS
         00001580     00fe  
     472 00001590     4c01          MOVE    A0,A1
     473 000015a0     1980          MOVK    ADJCSTRT,A0
     474 000015b0     0d3f          CALLR   GET_ADJ                 ;GET NUMBER NEEDED
         000015c0     05b6  
     475 000015d0     4801          CMP     A0,A1                   ;DO WE HAVE ENOUGH TO START?
     476                    
     477 000015e0     09af  CR_STX  MMFM    SP,A0,A1
         000015f0     0003  
     478 00001600     0960          RETS
     479                    
     480 00001610           CR_CONTP
     481 00001610                   PUSH    a0,a1
     482 00001630     1a60          MOVK    ADJFREPL,A0
     483 00001640     0d3f          CALLR   GET_ADJ                 ;ARE WE IN FREE PLAY?
         00001650     05ad  
     484 00001660     0b40          CMPI    1,A0                    ;WE ARE IF ITS NOT ZERO.
         00001670     fffe  
     485 00001680     c90b          JRHS    CR_STX1
     486                    
     487 00001690     0d3f          CALLR   CCCC                    ;MAKE SURE THINGS ARE IN TACT
         000016a0     0489  
     488 000016b0     0d3f          CALLR   COIN_PAG
         000016c0     049b  
     489 000016d0     0d3f          CALLR   GET_CREDITS             ;GET CURRENT CREDITS
         000016e0     00e8  
     490 000016f0     4c01          MOVE    A0,A1
     491 00001700     19a0          MOVK    ADJCCONT,A0
     492 00001710     0d3f          CALLR   GET_ADJ                 ;GET NUMBER NEEDED
         00001720     05a0  
     493 00001730     4801          CMP     A0,A1                   ;DO WE HAVE ENOUGH TO START?
     494 00001740           CR_STX1
     495 00001740     09af          MMFM    SP,A0,A1
         00001750     0003  
     496 00001760     0960          RETS
     497                    
     498 00001770           P_START
     499 00001770     098f          MMTM    SP,A0,A1
         00001780     c000  
     500 00001790     0d3f          CALLR   CRED_P
         000017a0     00da  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   12

     501 000017b0     4c01          MOVE    A0,A1
     502 000017c0     1980          MOVK    ADJCSTRT,A0
     503 000017d0     0d3f          CALLR   GET_ADJ                 ;GET NUMBER NEEDED
         000017e0     0594  
     504 000017f0     0d3f          CALLR   REMOVE_CREDITS
         00001800     001c  
     505 00001810     0d5f          CALLA   DEC_HSR                 ;TAKE 1 FROM HIGH SCORE RESET COUNTER
         00001820 00000000! 
     506                    
     507 00001840     0d5f          calla   update_credit_msg
         00001850 00000000! 
     508                    
     509 00001870     09af          MMFM    SP,A0,A1
         00001880     0003  
     510 00001890     0960          RETS
     511                    
     512 000018a0           P_CONT
     513 000018a0     098f          MMTM    SP,A0,A1
         000018b0     c000  
     514 000018c0     0d3f          CALLR   CRED_P
         000018d0     00c7  
     515 000018e0     4c01          MOVE    A0,A1
     516 000018f0     19a0          MOVK    ADJCCONT,A0
     517 00001900     0d3f          CALLR   GET_ADJ                 ;GET NUMBER NEEDED
         00001910     0581  
     518 00001920     0d3f          CALLR   REMOVE_CREDITS
         00001930     0009  
     519 00001940     0d5f          CALLA   DEC_HSR                 ;TAKE 1 FROM HIGH SCORE RESET COUNTER
         00001950 00000000! 
     520                    
     521 00001970     0d5f          calla   update_credit_msg
         00001980 00000000! 
     522                    
     523 000019a0     09af          MMFM    SP,A0,A1
         000019b0     0003  
     524 000019c0     0960          RETS
     525                    
     526 000019d0           REMOVE_CREDITS
     527 000019d0     4401          SUB     A0,A1                   ;REMOVE START AMOUNT FROM WHAT WE HAVE
     528 000019e0     c901          JRHS    PS1                     ;WE'RE OK.
     529                    
     530 000019f0     5621          CLR     A1                      ;IT WENT NEGATIVE....MAKE ZERO.
     531 00001a00     0d3f  PS1     CALLR   COIN_PAG
         00001a10     0466  
     532 00001a20     09e7          MOVI    CREDITS,A7
         00001a30 01402940  
     533 00001a50     4c20          MOVE    A1,A0                   ;PUT WHATS LEFT OUT TO WRITE
     534 00001a60     0d5f          CALLA   WC_BYTE                 ;WRITE THE NEW AMOUNT
         00001a70 00000000! 
     535                    
     536 00001a90     0d3f          CALLR   FORM_COIN_CKSUM_AND_STORE
         00001aa0     043b  
     537 00001ab0     0d3f          CALLR   DEF_PAGE                ;POINT AT DEFAULT PAGE.
         00001ac0     05b3  
     538 00001ad0     0960          RETS
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   13

     539                                    
     540 00001ae0           NO_CREDS
     541 00001ae0     098f          MMTM    SP,A0,A1,A7
         00001af0     c100  
     542 00001b00     0d3f          CALLR   FORM_COIN_CKSUM ;MAKE THE REAL CKSUM
         00001b10     0418  
     543 00001b20     09e7          MOVI    COIN_CKSUM,A7
         00001b30 014029b0  
     544 00001b50     4c20          MOVE    A1,A0
     545 00001b60     1020          INC     A0              ;MAKE THE CKSUM BAD!
     546 00001b70     0d5f          CALLA   WC_BYTE
         00001b80 00000000! 
     547 00001ba0     09af          MMFM    SP,A0,A1,A7
         00001bb0     0083  
     548 00001bc0     0960          RETS
     549                    
     550                    
     551                    
     552                    
     553                    
     554 00001bd0           ADJUST_CREDITS
     555                            
     556 00001bd0     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11
         00001be0     fff0  
     557 00001bf0     0d3f          CALLR   CK_MAX          ;ARE WE AT MAXIMUM CREDITS?
         00001c00     006a  
     558 00001c10     c94b          JRHS    ADCRXX          ;YEP.....DON'T ROCK THE BOAT!
     559                    
     560 00001c20     0d3f          CALLR   CCCC            ;VALIDATE THE CURRENT TOTALS (OR CLEAR!)
         00001c30     0430  
     561                    
     562 00001c40     0d3f          CALLR   FETCH_REQ       ;GET THE REQUIRED FOR CREDIT, BONUS AND MINIMUM
         00001c50     03dc  
     563                    
     564                    
     565 00001c60     0d3f          CALLR   ADD_TO_CUNITS   ;ADD TO OUR CUNITS
         00001c70     00a4  
     566 00001c80     4c63          MOVE    A3,A3           ;BONUS EFFECTIVE?
     567 00001c90     ca02          JRZ     NO_BUNITS       ;NOPE....DON'T RUN UP THE COUNTER!
     568                    
     569 00001ca0     0d3f          CALLR   ADD_TO_BUNITS   ;ADD TO BONUS UNITS
         00001cb0     00be  
     570                    
     571 00001cc0           NO_BUNITS
     572 00001cc0     4c84          MOVE    A4,A4           ;MINIMUM REQUIRED?
     573 00001cd0     ca10          JRZ     NO_MINIMUM      ;NOPE.....LEAVE ALONE.
     574                    
     575 00001ce0     09e7          MOVI    MINUNITS,A7     ;POINT AT MINIMUM
         00001cf0 01402990  
     576 00001d10     0d5f          CALLA   RC_WORD         ;GET THE AMOUNT ACCUMULATED
         00001d20 00000000! 
     577 00001d40     4100          ADD     A8,A0           ;ADD AMOUNT RECEIVED
     578 00001d50     0d5f          CALLA   WC_WORD         ;WRITE THE MINUNITS BACK IN CASE NOT ENOUGH.
         00001d60 00000000! 
     579                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   14

     580 00001d80     4480          SUB     A4,A0           ;DO WE HAVE ENOUGH TO ACT?
     581 00001d90     c831          JRLO    ADCRX           ;NOPE....NO CREDITS YET!
     582                    
     583 00001da0     5600          CLR     A0              ;CLEAR OUT MINIMUM FOR NEXT SHOT!
     584 00001db0     0d5f          CALLA   WC_WORD         ;REMOVE ACCUMULATED MINIMUM.
         00001dc0 00000000! 
     585                    
     586 00001de0           NO_MINIMUM
     587 00001de0     56c6          CLR     A6              ;COUNT ACCUMULATED CREDITS IN A6
     588 00001df0     574a          CLR     A10             ;IN CASE NO BONUS!
     589                    
     590 00001e00     5708          CLR     A8
     591 00001e10     09e7          MOVI    BUNITS,A7
         00001e20 01402970  
     592 00001e40     0d5f          CALLA   RC_WORD         ;GET THE NUMBER OF BUNITS
         00001e50 00000000! 
     593 00001e70     4c09          MOVE    A0,A9           ;INTO A9
     594                    
     595 00001e80     4c63          MOVE    A3,A3           ;DON'T DIVIDE BY ZERO!
     596 00001e90     ca07          JRZ     NO_BU_BU
     597 00001ea0     5a68          DIVU    A3,A8           ;DIVIDE BUNITS BY NUMBER NEEDED FOR BONUS
     598                    
     599 00001eb0     4d20          MOVE    A9,A0           ;WRITE REMAINDER BACK
     600 00001ec0     0d5f          CALLA   WC_WORD
         00001ed0 00000000! 
     601                    
     602 00001ef0     4d06          MOVE    A8,A6           ;NUMBER OF BONUS CREDITS EARNED.
     603 00001f00     4d0a          MOVE    A8,A10          ;REMEMBER IF ANY BONUS CREDITS WERE EARNED!
     604                    
     605 00001f10           NO_BU_BU
     606 00001f10     5708          CLR     A8
     607 00001f20     0d3f          CALLR   GET_CUNITS      ;READ IN THE CUNITS
         00001f30     0082  
     608 00001f40     4c09          MOVE    A0,A9
     609                    
     610 00001f50     4c42          MOVE    A2,A2           ;DON'T DIVIDE BY ZERO.
     611 00001f60     ca05          JRZ     NO_CR
     612                    
     613 00001f70     5a48          DIVU    A2,A8           ;GET CREDITS!
     614 00001f80     4d20          MOVE    A9,A0           ;REMAINDER IS LEFTOVER CUNITS
     615 00001f90     0d3f          CALLR   PUT_CUNITS
         00001fa0     0085  
     616 00001fb0     4106          ADD     A8,A6           ;A6 HAS WHAT WE'VE WON!
     617                    
     618 00001fc0           NO_CR
     619 00001fc0     4cc1          MOVE    A6,A1
     620 00001fd0     09c0          MOVI    AUDPAIDC,A0
         00001fe0     000d  
     621 00001ff0     0d5f          CALLA   AUD             ;CHALK UP THE EARNED CREDITS!
         00002000 000069e0' 
     622                    
     623 00002020     0d3f          CALLR   GET_CREDITS
         00002030     0053  
     624 00002040     40c0          ADD     A6,A0           ;ADD IN THE NEW ONES.
     625 00002050     0d3f          CALLR   PUT_CREDITS     ;NOW STORE EM BACK (ENFORCE MAX)
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   15

         00002060     0009  
     626                    
     627 00002070     4d4a          MOVE    A10,A10         ;WAS THE BONUS EARNED?
     628 00002080     ca02          JRZ     ADCRX           ;NOPE...EXIT!
     629 00002090     0d3f          CALLR   CLEAR_UNITS
         000020a0     0038  
     630                    
     631 000020b0     0d3f  ADCRX   CALLR   FORM_COIN_CKSUM_AND_STORE
         000020c0     03d9  
     632                    
     633 000020d0     09af  ADCRXX  MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11
         000020e0     0fff  
     634 000020f0     0960          RETS
     635                    
     636 00002100           PUT_CREDITS
     637 00002100     098f          MMTM    SP,A0,A6,A7
         00002110     8300  
     638 00002120     0d3f          CALLR   GET_MAX         ;GET MAX CREDS IN A1....BE ON COIN PAGE
         00002130     000e  
     639 00002140     4820          CMP     A1,A0           ;SEE HOW WE STACK UP.
     640 00002150     c803          JRLO    USE_A0          ;WE'RE LOWER...JUST STORE.
     641 00002160     0d3f          CALLR   CLEAR_UNITS     ;CLEAR OUT THE UNIT FRACTIONS.
         00002170     002b  
     642 00002180     4c20          MOVE    A1,A0           ;USE MAXIMUM
     643                    
     644 00002190     09e7  USE_A0  MOVI    CREDITS,A7
         000021a0 01402940  
     645 000021c0     0d5f          CALLA   WC_BYTE         ;WRITE THE CREDITS OUT.
         000021d0 00000000! 
     646 000021f0     09af          MMFM    SP,A0,A6,A7
         00002200     00c1  
     647 00002210     0960          RETS
     648                    
     649 00002220           GET_MAX
     650 00002220                   PUSH    a0
     651 00002230     1a40          MOVK    ADJMAXC,A0
     652 00002240     0d5f          CALLA   GET_ADJ_FOR_COIN        ;FETCH MAXIMUM CREDITS (PUT US ON COIN PAGE)
         00002250 00007360' 
     653 00002270     4c01          MOVE    A0,A1
     654 00002280     09af          MMFM    SP,A0
         00002290     0001  
     655 000022a0     0960          RETS
     656                    
     657 000022b0           CK_MAX
     658 000022b0     098f          MMTM    SP,A0,A1
         000022c0     c000  
     659 000022d0     0d3f          CALLR   GET_MAX                 ;GET MAXIMUM IN A1
         000022e0     fff3  
     660 000022f0     0d3f          CALLR   CRED_P                  ;GET CREDITS IN A0 (AND FLIP PAGE AWAY)
         00002300     0024  
     661 00002310     4820          CMP     A1,A0                   ;JRHS FOR MAXIMUM CREDITS!
     662 00002320     09af          MMFM    SP,A0,A1
         00002330     0003  
     663 00002340     0960          RETS
     664                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   16

     665 00002350           UNIT_CLR
     666 00002350                   PUSH    a0
     667 00002360     05a0          MOVE    @C_FRAC,A0                      ;DO WE GIVE HIM A REPRIEVE?
         00002370 00000020- 
     668 00002390     cb06          JRNZ    UC1                             ;YEP!
     669 000023a0     0d3f          CALLR   CCCC                            ;VALIDATE COINAGE
         000023b0     03b8  
     670 000023c0     0d3f          CALLR   CLEAR_UNITS                     ;CLEAR OUT FRACTIONAL UNITS
         000023d0     0005  
     671 000023e0     0d3f          CALLR   FORM_COIN_CKSUM_AND_STORE       ;MAKE ALL GOOD.
         000023f0     03a6  
     672 00002400           UC1
     673 00002400     09af          MMFM    SP,A0
         00002410     0001  
     674 00002420     0960          RETS
     675                    
     676 00002430           CLEAR_UNITS
     677 00002430     098f          MMTM    SP,A0,A7
         00002440     8100  
     678 00002450     5600          CLR     A0
     679 00002460     09e7          MOVI    CUNITS,A7               ;3 CONSECUTIVE WORDS OF CMOS
         00002470 01402950  
     680 00002490     0d5f          CALLA   WC_WORDI
         000024a0 00000000! 
     681 000024c0     0d5f          CALLA   WC_WORDI
         000024d0 00000000! 
     682 000024f0     0d5f          CALLA   WC_WORD
         00002500 00000000! 
     683 00002520     09af          MMFM    SP,A0,A7
         00002530     0081  
     684 00002540     0960          RETS
     685                    
     686                    
     687 00002550           CRED_P
     688 00002550     0d3f          CALLR   CCCC            ;CHECK TO SEE IF DATA IS OK.
         00002560     039d  
     689                    
     690 00002570           GET_CREDITS
     691 00002570                   PUSH    a7
     692 00002580     0d3f          CALLR   COIN_PAG
         00002590     03ae  
     693 000025a0     09e7          MOVI    CREDITS,A7      ;
         000025b0 01402940  
     694 000025d0     0d5f          CALLA   RC_BYTE         ;READ CURRENT CREDITS
         000025e0 00000000! 
     695 00002600     cb06          JRNZ    GC1             ;WE GOT SOME!
     696                    
     697                                                    ;PUSH THE ZERO!
     698 00002610                   PUSH    a0
     699 00002620     1a60          MOVK    ADJFREPL,A0
     700 00002630     0d3f          CALLR   GET_ADJ         ;SEE IF FREEPLAY......(Z BIT CLEAR IF SO!)
         00002640     04ae  
     701 00002650     09af          MMFM    SP,A0           ;RESTORE A0
         00002660     0001  
     702                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   17

     703 00002670     0d3f  GC1     CALLR   DEF_PAGE        ;FLIP CMOS AWAY
         00002680     04f7  
     704 00002690     09af          MMFM    SP,A7
         000026a0     0080  
     705 000026b0     0960          RETS
     706                    
     707 000026c0           ADD_TO_CUNITS
     708 000026c0     098f          MMTM    SP,A0,A7
         000026d0     8100  
     709 000026e0     0d3f          CALLR   GET_CUNITS
         000026f0     0006  
     710 00002700     4100          ADD     A8,A0
     711 00002710     0d3f          CALLR   PUT_CUNITS
         00002720     000d  
     712 00002730     09af          MMFM    SP,A0,A7
         00002740     0081  
     713 00002750     0960          RETS
     714                    
     715 00002760           GET_CUNITS
     716 00002760                   PUSH    a7
     717 00002770     09e7          MOVI    CUNITS,A7
         00002780 01402950  
     718 000027a0     0d5f          CALLA   RC_WORD
         000027b0 00000000! 
     719 000027d0     09af          MMFM    SP,A7
         000027e0     0080  
     720 000027f0     0960          RETS
     721                    
     722 00002800           PUT_CUNITS
     723 00002800                   PUSH    a7
     724 00002810     09e7          MOVI    CUNITS,A7
         00002820 01402950  
     725 00002840     0d5f          CALLA   WC_WORD
         00002850 00000000! 
     726 00002870     09af          MMFM    SP,A7
         00002880     0080  
     727 00002890     0960          RETS
     728                    
     729 000028a0           ADD_TO_BUNITS
     730 000028a0     098f          MMTM    SP,A7,A0
         000028b0     8100  
     731 000028c0     09e7          MOVI    BUNITS,A7
         000028d0 01402970  
     732 000028f0     0d5f          CALLA   RC_WORD
         00002900 00000000! 
     733 00002920     4100          ADD     A8,A0
     734 00002930     0d5f          CALLA   WC_WORD
         00002940 00000000! 
     735 00002960     09af          MMFM    SP,A7,A0
         00002970     0081  
     736 00002980     0960          RETS
     737                    
     738                    
     739                    
     740 00002990           CRD_SCRN
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   18

     741                    
     742 00002990     574a          CLR     a10                     ;Sleep 7 secs
     743                    
     744 000029a0            SUBR   CRD_SCRN2                       ;Entry pnt for shorter sleep
     745                    
     746 000029a0     5600          clr     a0
     747 000029b0     0580          move    a0,@SHOW_CRD_FLAG
         000029c0 00000000! 
     748                            .ref    SHOW_CRD_FLAG
     749                    
     750 000029e0     09c0          MOVI    CP_PID1,A0              ;CHANGE TO "CREDIT PAGE" ID 1
         000029f0     0118  
     751 00002a00     b00d          MOVE    A0,*A13(PROCID)
         00002a10     0020  
     752 00002a20     09e1          MOVI    0FFFFH,A1               ;CHECK TO SEE IF CREDIT PAGE IS UP
         00002a30 0000ffff  
     753 00002a50     0d5f          CALLA   EXISTP
         00002a60 00000000! 
     754 00002a80     cb3b          jrnz    ihfbexists                      ;credit page up, so reprint text only
     755                    
     756 00002a90     0d5f          calla   display_blank
         00002aa0 00000000! 
     757 00002ac0     0d5f          calla   WIPEOUT                 ;CLEAN SYSTEM OUT
         00002ad0 00000000! 
     758                    
     759 00002af0     1820          movk    1,a0                    ;page flipping on
     760 00002b00     0580          move    a0,@dpageflip
         00002b10 00000000! 
     761                    
     762 00002b30     09e0          movi    SCRNEND,a0              ;[256,405]
         00002b40 00fe01b0  
     763 00002b60     0780          move    a0,@SCRNLR,L
         00002b70 00000000! 
     764                    
     765 00002b90     5600          clr     a0
     766 00002ba0     0780          move    a0,@WORLDTLX,L
         00002bb0 00000000! 
     767 00002bd0     0780          move    a0,@WORLDTLY,L
         00002be0 00000000! 
     768                    
     769 00002c00                   SLEEPK  2
     770                    
     771 00002c40     09e0          movi    coinin_mod,a0
         00002c50 000033f0' 
     772 00002c70     0780          move    a0,@BAKMODS,L
         00002c80 00000000! 
     773 00002ca0     0d5f          calla   BGND_UD1
         00002cb0 00000000! 
     774                    
     775 00002cd0     1820          movk    1,a0
     776 00002ce0     0580          move    a0,@DISPLAYON           ;Display processor on
         00002cf0 00000000! 
     777                    
     778 00002d10     0d3f          callr   crd_updatetxt
         00002d20     0072  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   19

     779                    
     780 00002d30                   SLEEPK  2
     781                    
     782 00002d70     09c0          movi    4<<10+4<<5+7,a0
         00002d80     1087  
     783 00002d90     0580          move    a0,@IRQSKYE
         00002da0 00000000! 
     784                    
     785 00002dc0                   SLEEPK  2
     786 00002e00     0d5f          calla   display_unblank
         00002e10 00000000! 
     787                    
     788 00002e30     c011          jruc    ihfbcont
     789                    
     790                    
     791 00002e40           ihfbexists
     792 00002e40     05a0          move    @HEBLNK,a0
         00002e50 c0000010  
     793 00002e70     0b40          cmpi    HEBLNKINIT,a0
         00002e80     ff9a  
     794 00002e90     cb04          jrne    ihfbinscl
     795 00002ea0     05a0          move    @dtype,a0
         00002eb0 00000000! 
     796 00002ed0     c503          jrge    ihfbnotinscl
     797 00002ee0     4d4a  ihfbinscl       move    a10,a10
     798 00002ef0     cb4c          jrnz    KILL_CRD2
     799 00002f00     c048          jruc    ihfbdie
     800 00002f10           ihfbnotinscl
     801 00002f10                   SLEEPK  3
     802 00002f50           ihfbcont
     803 00002f50     0d3f          callr   crd_updatetxt           ;Display players per credit messages
         00002f60     004e  
     804                    
     805 00002f70     09c0          movi    HEBLNKINIT,a0                   ;Display on (just in case)
         00002f80     0065  
     806 00002f90     0580          move    a0,@HEBLNK
         00002fa0 c0000010  
     807                    
     808                    
     809 00002fc0                   SLEEP   1*TSEC
     810                    
     811                    
     812 00003010     09cb          movi    4*TSEC,a11
         00003020     00d4  
     813 00003030           ihfblp  SLEEPK  1
     814                            .ref    get_all_buttons_cur2
     815 00003070     0d5f          calla   get_all_buttons_cur2
         00003080 00000000! 
     816 000030a0     ca08          jrz     ihfbnob
     817 000030b0     09c0          movi    bounce_snd,a0
         000030c0     0001  
     818 000030d0     0d5f          calla   triple_sound
         000030e0 00000000! 
     819 00003100     4d4a          move    a10,a10
     820 00003110     cb2a          jrnz    KILL_CRD2
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   20

     821 00003120     c014          jruc    KILL_CRD
     822 00003130           ihfbnob
     823 00003130     3e2b          dsj     a11,ihfblp
     824                    
     825 00003140           ihfbck2
     826 00003140     4d4a          move    a10,a10
     827 00003150     cb26          jrnz    KILL_CRD2
     828                    
     829 00003160     09cb          movi    10*TSEC,a11
         00003170     0212  
     830 00003180           ihfblp1 SLEEPK  1
     831 000031c0     0d5f          calla   get_all_buttons_cur2
         000031d0 00000000! 
     832 000031f0     ca06          jrz     ihfbnob1
     833 00003200     09c0          movi    bounce_snd,a0
         00003210     0001  
     834 00003220     0d5f          calla   triple_sound
         00003230 00000000! 
     835 00003250     c001          jruc    KILL_CRD
     836 00003260           ihfbnob1
     837 00003260     3deb          dsj     a11,ihfblp1
     838                    
     839 00003270           KILL_CRD
     840 00003270     0d5f          calla   display_blank
         00003280 00000000! 
     841 000032a0     0d5f          calla   WIPEOUT                 ;CLEAN SYSTEM OUT
         000032b0 00000000! 
     842 000032d0                   SLEEPK  1
     843                    
     844 00003310                   CREATE  AMODE_PID,attract_mode
     845                    
     846 00003390           ihfbdie DIE
     847                    
     848                    
     849 000033c0           KILL_CRD2
     850 000033c0                   RETP
     851                    
     852 000033f0           coinin_mod
     853 000033f0 00000000!         .long   slateBMOD
     854 00003410     0000          .word   0,0
     855 00003430 00000000          .long   0
     856                    
     857                    
     858                    
     859 00003450            SUBRP  crd_updatetxt
     860                    
     861 00003450     09c0          movi    CP_PID1,a0              ;PID
         00003460     0118  
     862 00003470     09e1          movi    0ffffh,a1               ;mask bits
         00003480 0000ffff  
     863 000034a0     0d5f          calla   KILALL                  ;kill all CP_PID1 procs except self
         000034b0 00000000! 
     864                    
     865 000034d0     09c0          movi    TYPTEXT,a0              ;object ID
         000034e0     0700  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   21

     866 000034f0     5621          clr     a1                      ;mask
     867 00003500     0d5f          calla   obj_delc                ;delete existing text
         00003510 00000000! 
     868                    
     869                    
     870 00003530     07a0          move    @_dipswitch_addr,a0,L
         00003540 00000000! 
     871 00003560     8400          move    *a0,a0
     872 00003570     1f20          btst    6,a0                    ;UJ2 switch 1
     873 00003580     cb06          jrnz    ihfbnotfair             ;OFF?
     874                    
     875                    
     876 00003590     09e2          MOVI    dollar_mes,a2           ;Dollar bill message
         000035a0 0000ab10' 
     877 000035c0     0d5f          calla   print_message
         000035d0 00000000! 
     878 000035f0           ihfbnotfair
     879                    
     880 000035f0                   PUSH    A10
     881 00003600     0d3f          callr   credits_string
         00003610     0002  
     882 00003620                   PULL    A10
     883 00003630     0960          rets
     884                    
     885                    
     886                            .asg    25,YSPACE
     887                            .asg    17,YSPACE0
     888                    
     889                            .asg    40,LN0
     890                            .asg    70,LN1
     891                            .asg    100,LN2
     892                            .asg    130,LN3
     893                            .asg    90,LN3x         ;free play y-line
     894                            .asg    160,LN4
     895                            .asg    190,LN5
     896                            .asg    220,LN6
     897                    
     898                    
     899              000d  CM_Y_GAP        EQU     13
     900              0050  CM_Y_GAP2       EQU     80
     901          000d00c8  CM_Y_ADDGAP     EQU     [CM_Y_GAP,200]
     902                    
     903                    
     904 00003640           credits_string
     905                    
     906 00003640     1a60          MOVK    ADJFREPL,A0             ;ARE WE IN FREE PLAY?
     907 00003650     0d5f          CALLA   GET_ADJ
         00003660 00007130' 
     908 00003680     ca12          JRZ     dhzhnot_freeply
     909                    
     910 00003690     09e2          movi    LN3x_setup,a2
         000036a0 00004710' 
     911 000036c0     0d5f          calla   setup_message
         000036d0 00000000! 
     912 000036f0     09c0          movi    40,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   22

         00003700     0028  
     913 00003710     0580          move    a0,@mess_line_spacing
         00003720 00000000! 
     914 00003740     09e4          movi    dhzhstr_freeply,a4
         00003750 00004df8' 
     915 00003770     0d5f          calla   print_string_C2
         00003780 00000000! 
     916                            
     917 000037a0     0960          rets
     918                    
     919 000037b0           dhzhnot_freeply
     920                    
     921                    
     922                    
     923                    
     924                    
     925                    
     926                    
     927 000037b0     0d5f          calla   GET_CSPT                ;a6 = * current pricing table
         000037c0 00000000! 
     928 000037e0     184a          movk    2,a10                   ;min number strings to print
     929 000037f0     b6cb          move    *a6(CS_LIST),a11,L      ;a11 = * string list
         00003800     0190  
     930 00003810     ca05          jrz     dhzhno_strings
     931                    
     932 00003820     4d62          move    a11,a2
     933 00003830           dhzhnext_string
     934 00003830     9640          move    *a2+,a0,L               ;count up number of strings
     935 00003840     ca02          jrz     dhzhlast
     936 00003850     102a          inc     a10
     937 00003860     c0fc          jruc    dhzhnext_string
     938 00003870           dhzhlast
     939 00003870           dhzhno_strings
     940 00003870     0d3f          callr   CRED_P                  ;get number credits
         00003880     fecc  
     941 00003890     4c03          move    a0,a3
     942 000038a0     1980          MOVK    ADJCSTRT,A0
     943 000038b0     0d3f          callr   GET_ADJ                 ;# credits to start
         000038c0     0386  
     944 000038d0     5a03          divu    a0,a3                   ;credits / credits to start
     945 000038e0     4c63          move    a3,a3
     946 000038f0     ca01          jrz     dhzhnot_enough1
     947 00003900     102a          inc     a10                     ;+1 string      (READY FOR...)
     948 00003910           dhzhnot_enough1
     949                    
     950                    
     951                    
     952 00003910     09e2          movi    LN1_setup,a2
         00003920 00004530' 
     953 00003940     0d5f          calla   setup_message
         00003950 00000000! 
     954                    
     955 00003970     0d3f          callr   CRED_P                  ;# credits in a0
         00003980     febc  
     956 00003990                   PUSH    a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   23

     957                    
     958 000039a0     09e4          movi    dhzhcrd_str,a4
         000039b0 00004b40' 
     959 000039d0     0d5f          calla   copy_rom_string
         000039e0 00000000! 
     960                    
     961 00003a00                   PULL    a0
     962 00003a10                   PUSH    a0
     963 00003a20     09c1          movi    99,a1                   ;max string value
         00003a30     0063  
     964 00003a40     0d5f          calla   dec_to_asc
         00003a50 00000000! 
     965 00003a70     0d5f          calla   concat_string
         00003a80 00000000! 
     966                    
     967 00003aa0     1a40          MOVK    ADJMAXC,a0
     968 00003ab0     0d5f          calla   GET_ADJ_FOR_COIN        ;a0 = max credits
         00003ac0 00007360' 
     969 00003ae0                   PULL    a1
     970 00003af0     4801          cmp     a0,a1
     971 00003b00     c806          jrlo    dhzhnot_max_crds
     972 00003b10     09e4          movi    dhzhstr_max,a4          ;max credits
         00003b20 00004ae8' 
     973 00003b40     0d5f          calla   concat_rom_string
         00003b50 00000000! 
     974 00003b70           dhzhnot_max_crds
     975 00003b70     0d5f          calla   print_string_C          ;"CREDITS : NN"
         00003b80 00000000! 
     976                    
     977                    
     978                    
     979 00003ba0     09e2          movi    LN2_setup,a2
         00003bb0 000045d0' 
     980 00003bd0     0d5f          calla   setup_message
         00003be0 00000000! 
     981                    
     982 00003c00     09c0          movi    140,a0
         00003c10     008c  
     983 00003c20     09c1          movi    YSPACE0,a1
         00003c30     0011  
     984 00003c40     5f41          mpyu    a10,a1                  ;# strings * Y spacing
     985 00003c50     2fe1          srl     1,a1                    ;/2
     986 00003c60     4420          sub     a1,a0
     987 00003c70     0580          move    a0,@mess_cursy          ;centered Y
         00003c80 00000000! 
     988                    
     989 00003ca0     0d5f          calla   TAMPEREDP
         00003cb0 00000000! 
     990 00003cd0     ca0e          JRZ     dhzhdone
     991                    
     992 00003ce0           dhzhnext_string2
     993 00003ce0     9764          move    *a11+,a4,L              ;* next string
     994 00003cf0     ca0c          jrz     dhzhdone
     995                    
     996 00003d00     05a0          move    @mess_cursy,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   24

         00003d10 00000000! 
     997 00003d30     0b00          addi    YSPACE0,a0
         00003d40     0011  
     998 00003d50     0580          move    a0,@mess_cursy
         00003d60 00000000! 
     999                    
    1000 00003d80     0d5f          calla   print_string_C2
         00003d90 00000000! 
    1001                    
    1002 00003db0     c0f2          jruc    dhzhnext_string2
    1003 00003dc0           dhzhdone
    1004                    
    1005                    
    1006                    
    1007 00003dc0     05a0          move    @mess_cursy,a0
         00003dd0 00000000! 
    1008 00003df0     0b00          addi    YSPACE0,a0
         00003e00     0011  
    1009 00003e10     0580          move    a0,@mess_cursy
         00003e20 00000000! 
    1010                    
    1011 00003e40     1980          MOVK    ADJCSTRT,a0
    1012 00003e50     0d3f          callr   GET_ADJ                 ;# credits to start
         00003e60     032c  
    1013 00003e70                   PUSH    a0
    1014 00003e80     09c1          movi    99,a1                   ;max string value
         00003e90     0063  
    1015 00003ea0     0d5f          calla   dec_to_asc
         00003eb0 00000000! 
    1016 00003ed0     0d5f          calla   copy_string
         00003ee0 00000000! 
    1017                    
    1018 00003f00     09e4          movi    dhzhcrd_2start,a4
         00003f10 00004b98' 
    1019 00003f30                   PULL    a0
    1020 00003f40     1420          dec     a0
    1021 00003f50     ca03          jrz     dhzh1credit
    1022 00003f60     09e4          movi    dhzhcrd_2starts,a4
         00003f70 00004c20' 
    1023 00003f90           dhzh1credit
    1024 00003f90     0d5f          calla   concat_rom_string
         00003fa0 00000000! 
    1025 00003fc0     0d5f          calla   print_string_C
         00003fd0 00000000! 
    1026                    
    1027                    
    1028                    
    1029 00003ff0     05a0          move    @mess_cursy,a0
         00004000 00000000! 
    1030 00004020     0b00          addi    YSPACE0,a0
         00004030     0011  
    1031 00004040     0580          move    a0,@mess_cursy
         00004050 00000000! 
    1032                    
    1033 00004070     09c0          MOVI    ADJCCONT,a0             ;# credits to continue
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   25

         00004080     000d  
    1034 00004090     0d3f          callr   GET_ADJ
         000040a0     0308  
    1035 000040b0                   PUSH    a0
    1036 000040c0     09c1          movi    99,a1                   ;max string value
         000040d0     0063  
    1037 000040e0     0d5f          calla   dec_to_asc
         000040f0 00000000! 
    1038 00004110     0d5f          calla   copy_string
         00004120 00000000! 
    1039 00004140     09e4          movi    dhzhcrd_2cont,a4
         00004150 00004cb0' 
    1040 00004170                   PULL    a0
    1041 00004180     1420          dec     a0
    1042 00004190     ca03          jrz     dhzh1_creditb
    1043 000041a0     09e4          movi    dhzhcrd_2conts,a4
         000041b0 00004d50' 
    1044 000041d0           dhzh1_creditb
    1045 000041d0     0d5f          calla   concat_rom_string
         000041e0 00000000! 
    1046 00004200     0d5f          calla   print_string_C
         00004210 00000000! 
    1047                    
    1048                    
    1049 00004230     09e2          movi    LN5_setup,a2
         00004240 000047b0' 
    1050 00004260     0d5f          calla   setup_message
         00004270 00000000! 
    1051                    
    1052 00004290     0d3f          callr   CRED_P                  ;get number credits
         000042a0     fe2a  
    1053 000042b0     4c03          move    a0,a3
    1054                    
    1055 000042c0     1980          MOVK    ADJCSTRT,A0
    1056 000042d0     0d3f          callr   GET_ADJ                 ;# credits to start
         000042e0     02e4  
    1057                    
    1058 000042f0     5a03          divu    a0,a3                   ;credits / credits to start
    1059 00004300     4c63          move    a3,a3
    1060 00004310     ca12          jrz     dhzhnot_ready
    1061 00004320     1423          dec     a3
    1062                    
    1063                    
    1064 00004330     0b43          cmpi    2,a3
         00004340     fffd  
    1065 00004350     c802          jrlo    dhzhnot_max
    1066 00004360     09c3          movi    1,a3
         00004370     0001  
    1067                    
    1068 00004380           dhzh4_plyrs
    1069 00004380           dhzhnot_max
    1070 00004380     24a3          sll     5,a3            ;x 32 bits
    1071 00004390     0b23          addi    dhzhready_for_lookup,a3
         000043a0 00004f20' 
    1072 000043c0     8664          move    *a3,a4,L
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   26

    1073 000043d0     0d5f          calla   print_string_C2
         000043e0 00000000! 
    1074                    
    1075 00004400     09e4          movi    dhzhstr_start,a4
         00004410 00004e50' 
    1076 00004430     c003          jruc    dhzhready
    1077                    
    1078 00004440           dhzhnot_ready
    1079 00004440     09e4          movi    dhzhstr_insert,a4
         00004450 00004eb8' 
    1080 00004470           dhzhready
    1081 00004470     05a0          move    @mess_cursy,a0
         00004480 00000000! 
    1082 000044a0     0b00          addi    YSPACE,a0
         000044b0     0019  
    1083 000044c0     0580          move    a0,@mess_cursy
         000044d0 00000000! 
    1084                    
    1085 000044f0     0d5f          calla   print_string_C2
         00004500 00000000! 
    1086                    
    1087 00004520     0960          rets
    1088                    
    1089                    
    1090                    
    1091 00004530           LN1_setup
    1092 00004530                   JAM_STR osgemd_ascii,10,0,200,LN1+4,GOLD,0
    1093 000045d0                   .even
    1094 000045d0           LN2_setup
    1095 000045d0                   JAM_STR ogmd10_ascii,5,0,200,LN2,SGMD8GLD,0
    1096 00004670                   .even
    1097 00004670           LN3_setup
    1098 00004670                   JAM_STR osgemd_ascii,5,0,200,LN3,GREENPAL,0
    1099 00004710                   .even
    1100 00004710           LN3x_setup
    1101 00004710                   JAM_STR wgsf24_ascii,8,0,200,LN3x,WGSF_Y_P,0
    1102 000047b0                   .even
    1103 000047b0           LN5_setup
    1104 000047b0                   JAM_STR osgemd_ascii,10,0,200,LN5+10,GREENPAL,0
    1105 00004850                   .even
    1106 00004850           LN6_setup
    1107 00004850                   JAM_STR osgemd_ascii,10,0,200,LN6,GOLD,0
    1108 000048f0                   .even
    1109                    
    1110 000048f0           dhzhstr_value
    1111 000048f0       42          .string "BEST VALUE:",0
    1112 00004950           dhzhstr_fullg1
    1113 00004950       50          .string "PURCHASE FULL GAMES FOR ONLY ",0
    1114 00004a40           dhzhstr_fullg2
    1115 00004a40       20          .string " CREDITS PER PLAYER!",0
    1116 00004ae8           dhzhstr_max
    1117 00004ae8       20          .string " (MAXIMUM)",0
    1118 00004b40           dhzhcrd_str
    1119 00004b40       43          .string "CREDITS : ",0
    1120 00004b98           dhzhcrd_2start
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   27

    1121 00004b98       20          .string " CREDIT TO START",0
    1122 00004c20           dhzhcrd_2starts
    1123 00004c20       20          .string " CREDITS TO START",0
    1124 00004cb0           dhzhcrd_2cont
    1125 00004cb0       20          .string " CREDIT TO CONTINUE",0
    1126 00004d50           dhzhcrd_2conts
    1127 00004d50       20          .string " CREDITS TO CONTINUE",0
    1128 00004df8           dhzhstr_freeply
    1129 00004df8       46          .string "FREE  PLAY",1
    1130 00004e50           dhzhstr_start
    1131 00004e50       50          .string "PRESS  START",0
    1132 00004eb8           dhzhstr_insert
    1133 00004eb8       49          .string "INSERT COINS",0
    1134 00004f20                   .even
    1135 00004f20           dhzhready_for_lookup
    1136 00004f20 00004fa0'         .long   dhzhstr_1p,dhzhstr_2p
    1137 00004f60 00005100'         .long   dhzhstr_3p,dhzhstr_4p
    1138 00004fa0       52  dhzhstr_1p      .string "READY FOR 1 PLAYER",0
    1139 00005038       52  dhzhstr_2p      .string "READY FOR 1 OR 2 PLAYERS",0
    1140 00005100       52  dhzhstr_3p      .string "READY FOR 1 - 3 PLAYERS",0
    1141 000051c0       52  dhzhstr_4p      .string "READY FOR 1 - 4 PLAYERS",0
    1142 00005280                   .even
    1143                    
    1144                    
    1145                     .if 0
    1146                    
    1147                    CM_LINE1  EQU     CUSTOM_MESSAGE
    1148                    CM_LINE2  EQU     CUSTOM_MESSAGE+CMESS_LINE_SIZE
    1149                    CM_LINE3  EQU     CUSTOM_MESSAGE+(2*CMESS_LINE_SIZE)
    1150                    
    1151                    
    1152                    
    1153                            CALLA   ADJ_PAGE 
    1154                            MOVI    VALID_CUSTOM,A7
    1155                            CALLA   RC_WORD
    1156                            CMPI    VALID_VALUE,A0          ; CHECK TO SEE IF MESSAGE IS VALID
    1157                            JRNZ    dhzhzippo
    1158                    
    1159                    
    1160                            movi    CM_LINE3,A10            ;CHECK LINE 3
    1161                            callr   CK_LINE                 ;3 VALID LINES?
    1162                            jrz     GO_FOR_2
    1163                            movi    LN2_setup,a2
    1164                            calla   setup_message
    1165                            movi    STRNGRAM,a4
    1166                            calla   print_string_C2
    1167                    GO_FOR_2
    1168                            movi    CM_LINE2,A10            ;CHECK LINE 2
    1169                            callr   CK_LINE                 ;2 VALID LINES?
    1170                            jrz     GO_FOR_1
    1171                            movi    LN3_setup,a2
    1172                            calla   setup_message
    1173                            movi    STRNGRAM,a4
    1174                            calla   print_string_C2
    1175                    GO_FOR_1
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   28

    1176                            movi    CM_LINE1,A10            ;CHECK LINE 1
    1177                            callr   CK_LINE                 ;1 VALID LINES?
    1178                            jrz     dhzhzippo
    1179                            movi    LN4_setup,a2
    1180                            calla   setup_message
    1181                            movi    STRNGRAM,a4
    1182                            calla   print_string_C2
    1183                    dhzhzippo
    1184                     .endif
    1185                    
    1186                    
    1187                            .if 0
    1188                    HELP_TAB
    1189                            .LONG    L_MESS                 ;0 SAYS USE L_MESS
    1190                            .LONG    JUST_LIST              ;1 SAYS USE LISTED MESSAGES ONLY
    1191                            .LONG    LINE_ONE_PLUS          ;2 SAYS USE 1ST LINE W/ 2 TO START
    1192                            .LONG    LINE_TWO_PLUS          ;3
    1193                            .LONG    LINE_THREE_PLUS        ;4
    1194                            .LONG    LINE_ONE_PLUS_2        ;5 USE 1ST LINE 2/ 2 CREDITS PER PLAYER
    1195                            .LONG    LINE_TWO_PLUS_2        ;6
    1196                            .LONG    LINE_THREE_PLUS_2      ;7
    1197                            .LONG    OUTPUT_CUSTOM          ;8 CUSTOM MESSAGE!
    1198                    
    1199                    JUST_LIST
    1200                            MOVE    A8,A3                   ;STASH WHERE IT WILL SURVIVE
    1201                            MOVE    *A3(LONG_SIZE),A2,L     ;ONE WORD ONLY?
    1202                            JRZ     JUST_ONE                ;YEP....CENTER IT NICELY
    1203                            MOVE    *A3(2*LONG_SIZE),A2,L  ;IS THERE A 3RD LINE?
    1204                            JRZ     JUST_TWO                ;NOPE
    1205                    
    1206                            MOVI    SETUP_3_OF_3,A8
    1207                            JSRP    SET_THEN_A2
    1208                    
    1209                            MOVE    *A3(LONG_SIZE),A2,L     ;GET LINE 2
    1210                    
    1211                            MOVI    SETUP_2_OF_3,A8
    1212                            JSRP    SET_THEN_A2
    1213                    
    1214                            MOVI    SETUP_1_OF_3,A8         ;SET HEIGHT FOR TOP LINE
    1215                            JRUC    FIRST_LINE
    1216                    
    1217                    JUST_TWO
    1218                            MOVE    *A3(LONG_SIZE),A2,L     ;GET LINE 2
    1219                            MOVI    SETUP_2_OF_2,A8
    1220                            JSRP    SET_THEN_A2
    1221                    
    1222                            MOVI    SETUP_1_OF_2,A8
    1223                    
    1224                    FIRST_LINE
    1225                            MOVE    *A3,A2,L
    1226                            JRUC    SET_THEN_A2               ;DO TOP LEN AND RETURN
    1227                    
    1228                    JUST_ONE
    1229                            MOVI    SETUP_1_OF_1,A8
    1230                            JRUC    FIRST_LINE                ;DO TOP LEN AND RETURN
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   29

    1231                    
    1232                    CM_LINE1  EQU     CUSTOM_MESSAGE
    1233                    CM_LINE2  EQU     CUSTOM_MESSAGE+CMESS_LINE_SIZE
    1234                    CM_LINE3  EQU     CUSTOM_MESSAGE+(2*CMESS_LINE_SIZE)
    1235                    
    1236                    OUTPUT_CUSTOM
    1237                            MOVI    CM_LINE3,A10            ;CHECK LINE 3
    1238                            CALLR   CK_LINE                 ;3 VALID LINES?
    1239                            JRZ     GO_FOR_2
    1240                    
    1241                            MOVI    SETUP_3_OF_3,A8
    1242                            JSRP    SET_THEN_STRNGRAM       ;PUT IT OUT
    1243                    
    1244                            MOVI    CM_LINE2,A10
    1245                            MOVI    SETUP_2_OF_3,A8
    1246                            JSRP    SET_THEN_STRNGRAM
    1247                    
    1248                            MOVI    CM_LINE1,A10
    1249                            MOVI    SETUP_1_OF_3,A8
    1250                            JRUC    SET_THEN_STRNGRAM
    1251                    
    1252                    GO_FOR_2
    1253                            MOVI    CM_LINE2,A10            ;CHECK LINE 2
    1254                            CALLR   CK_LINE                 ;2 VALID LINES?
    1255                            JRZ     GO_FOR_1
    1256                    
    1257                            MOVI    SETUP_2_OF_2,A8
    1258                            JSRP    SET_THEN_STRNGRAM       ;PUT IT OUT
    1259                    
    1260                            MOVI    CM_LINE1,A10
    1261                            MOVI    SETUP_1_OF_2,A8
    1262                            JRUC    SET_THEN_STRNGRAM
    1263                    
    1264                    GO_FOR_1
    1265                            MOVI    CM_LINE1,A10
    1266                            MOVI    SETUP_1_OF_1,A8
    1267                            JRUC    SET_THEN_STRNGRAM
    1268                    
    1269                            .endif
    1270                    
    1271 00005280           SET_THEN_A2
    1272 00005280     0d5f          CALLA   LM_SETUP
         00005290 000081e0' 
    1273 000052b0     4c48          MOVE    A2,A8
    1274 000052c0     c080          JAUC    LM_FINIS                ;THAT DOES LINE 3
         000052d0 00008220' 
    1275                    
    1276 000052f0           SET_THEN_STRNGRAM
    1277 000052f0     0d3f          CALLR   CK_LINE                 ;TRANSFER TO STRNGRAM
         00005300     0008  
    1278 00005310     0d3f          CALLR   LM_SETUP
         00005320     02eb  
    1279 00005330     09e8          MOVI    STRNGRAM,A8
         00005340 00000000! 
    1280 00005360     c080          JAUC    LM_FINIS
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   30

         00005370 00008220' 
    1281                    
    1282 00005390           CK_LINE
    1283 00005390     098f          MMTM    SP,A0,A7,A1,A2,A10
         000053a0     e120  
    1284 000053b0     4d47          MOVE    A10,A7                  ;INPUT POINTER TO CMOS
    1285 000053c0     4daa          MOVE    A13,A10                 ;OUR PDATA AREA
    1286 000053d0     0b0a          ADDI    PDATA,A10               ;A10 IS DESTINATION.
         000053e0     0100  
    1287 000053f0     4d42          MOVE    A10,A2                  ;ITERATE TO LOAD IT UP.
    1288                    
    1289 00005400     09c1          MOVI    CMESS_CHARS,A1          ;COUNTER
         00005410     001a  
    1290 00005420     0d5f          CALLA   ADJ_PAGE                ;POINT THE PAGE
         00005430 00007570' 
    1291                    
    1292 00005450           CK_LOOP
    1293 00005450     0d5f          CALLA   RC_BYTEI                ;FETCH A BYTE
         00005460 00000000! 
    1294 00005480     8c02          MOVB    A0,*A2                  ;STORE
    1295 00005490     1102          ADDK    BYTE_SIZE,A2
    1296 000054a0     3cc1          DSJS    A1,CK_LOOP
    1297                    
    1298 000054b0     0d5f          CALLA   DEF_PAGE                ;POINT AWAY NOW
         000054c0 00007600' 
    1299 000054e0     0d5f          CALLA   BUILD_ST                ;NOW XFER TO STRNGRAM (REMOVING SPACES ETC)
         000054f0 00000000! 
    1300 00005510     09af          MMFM    SP,A0,A7,A1,A2,A10      ;RETURN .EQ. IF ITS ALL SPACES.
         00005520     0487  
    1301 00005530     0960          RETS
    1302                    
    1303                    
    1304                    
    1305                    
    1306 00005540           LINE_ONE_PLUS
    1307 00005540     8702          MOVE    *A8,A2,L                ;GET LINE 1
    1308 00005550           LOP_1
    1309 00005550     09e8          MOVI    SETUP_1_OF_3,A8
         00005560 0000a750' 
    1310 00005580     0d3f          CALLR   LM_SETUP
         00005590     02c4  
    1311 000055a0     4c48          MOVE    A2,A8                   ;SWAP IN TEXT POINTER
    1312 000055b0                   JSRP    LM_FINIS                ;PRINT IT
    1313                    
    1314 00005620           LOP_2
    1315 00005620     09e8          MOVI    TWO_TS,A8               ;TWO TO START STUFF
         00005630 00000000! 
    1316 00005650     c080          JAUC    L_MESS                  ;PRINT IT AND RETURN
         00005660 000080e0' 
    1317                    
    1318 00005680           LINE_THREE_PLUS
    1319 00005680     b702          MOVE    *A8(2*LONG_SIZE),A2,L   ;FETCH LINE 3
         00005690     0040  
    1320 000056a0     caf7          JRZ     LOP_2                   ;NOTHING ON LINE 3
    1321 000056b0     c080          JAUC    LOP_1                   ;THEN ITS THE SAME AS ABOVE!
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   31

         000056c0 00005550' 
    1322                    
    1323 000056e0           LINE_TWO_PLUS
    1324 000056e0     b702          MOVE    *A8(LONG_SIZE),A2,L     ;FETCH LINE 2
         000056f0     0020  
    1325 00005700     caf1          JRZ     LOP_2                   ;NOTHING ON LINE 2
    1326 00005710     c080          JAUC    LOP_1                   ;THEN ITS THE SAME AS ABOVE!
         00005720 00005550' 
    1327                    
    1328 00005740           LINE_ONE_PLUS_2
    1329 00005740     8702          MOVE    *A8,A2,L                ;GET LINE 1
    1330 00005750           LOP_12
    1331 00005750     09e8          MOVI    SETUP_1_OF_2,A8
         00005760 0000a930' 
    1332 00005780     0d3f          CALLR   LM_SETUP
         00005790     02a4  
    1333 000057a0     4c48          MOVE    A2,A8                   ;SWAP IN TEXT POINTER
    1334 000057b0                   JSRP    LM_FINIS                ;PRINT IT
    1335                    
    1336 00005820           LOP_22
    1337 00005820     09e8          MOVI    TWO_TP,A8               ;TWO CREDITS PER PLAYER
         00005830 00000000! 
    1338 00005850     c080          JAUC    L_MESS                  ;PRINT IT AND RETURN
         00005860 000080e0' 
    1339                    
    1340 00005880           LINE_TWO_PLUS_2
    1341 00005880     b702          MOVE    *A8(LONG_SIZE),A2,L     ;FETCH LINE 2
         00005890     0020  
    1342 000058a0     caf7          JRZ     LOP_22                  ;NOTHING ON LINE 2
    1343 000058b0     c080          JAUC    LOP_12                  ;THEN ITS THE SAME AS ABOVE!
         000058c0 00005750' 
    1344                    
    1345 000058e0           LINE_THREE_PLUS_2
    1346 000058e0     b702          MOVE    *A8(2*LONG_SIZE),A2,L   ;FETCH LINE 3
         000058f0     0040  
    1347 00005900     caf1          JRZ     LOP_22                  ;NOTHING ON LINE 3
    1348 00005910     c080          JAUC    LOP_12                  ;THEN ITS THE SAME AS ABOVE!
         00005920 00005750' 
    1349                    
    1350 00005940           SELECT_SETUP
    1351 00005940                   PUSH    a0
    1352 00005950     09e8          MOVI    MESS_CNUM,A8              ;ASSUME NO EXTRA PROMPT
         00005960 00009250' 
    1353                    
    1354 00005980     0d5f          CALLA   CKPROMPT                  ;IS THERE ONE?
         00005990 00000000! 
    1355 000059b0     ca03          JRZ     NO_EXTRA
    1356                    
    1357 000059c0     09e8          MOVI    MESS_LOWNUM,A8
         000059d0 000092f0' 
    1358 000059f0           NO_EXTRA
    1359 000059f0     09af          MMFM    SP,A0                   
         00005a00     0001  
    1360 00005a10     0960          RETS
    1361                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   32

    1362 00005a20           FETCH_REQ
    1363 00005a20                   PUSH    a0
    1364 00005a30     18e0          MOVK    ADJCUNIT,A0
    1365 00005a40     0d3f          CALLR   GET_ADJ
         00005a50     016d  
    1366 00005a60     4c02          MOVE    A0,A2
    1367                    
    1368 00005a70     1900          MOVK    ADJBUNIT,A0
    1369 00005a80     0d3f          CALLR   GET_ADJ
         00005a90     0169  
    1370 00005aa0     4c03          MOVE    A0,A3
    1371                    
    1372 00005ab0     1920          MOVK    ADJMUNIT,A0
    1373 00005ac0     0d3f          CALLR   GET_ADJ_FOR_COIN
         00005ad0     0188  
    1374 00005ae0     4c04          MOVE    A0,A4
    1375 00005af0     09af          MMFM    SP,A0
         00005b00     0001  
    1376 00005b10     0960          RETS
    1377                    
    1378 00005b20           SLAM_P
    1379 00005b20     09e0          MOVI    SLAM_PID,A0             ;SLAM PROCESS ACTIVE?
         00005b30 0000811d  
    1380 00005b50     09e1          MOVI    0FFFFH,A1
         00005b60 0000ffff  
    1381 00005b80     c080          jauc    EXISTP
         00005b90 00000000! 
    1382                    
    1383 00005bb0           SLAM_SW
    1384 00005bb0     09c0          movi    SLAM_PID|0ffff0000H,a0  ;So we can kill other indestructables
         00005bc0     811d  
    1385 00005bd0     b00d          move    a0,*a13(PROCID)         ;Set our ID
         00005be0     0020  
    1386 00005bf0     0d5f          calla   KIL1C                   ;Kill others
         00005c00 00000000! 
    1387                    
    1388 00005c20                   SLEEP   TSEC                    ;1 second of coin ignoring
    1389 00005c70     c080          jauc    SUCIDE
         00005c80 00000000! 
    1390                    
    1391 00005ca0           FORM_COIN_CKSUM
    1392 00005ca0     098f          MMTM    SP,A0,A7,A2
         00005cb0     a100  
    1393 00005cc0     0d3f          CALLR   COIN_PAG                 ;MAKE SURE WE'RE ON THE RIGHT PAGE.
         00005cd0     003a  
    1394 00005ce0     09e7          MOVI    COIN_CKSUM_START,A7       ;POINT AT FIRST BYTE TO CHECK
         00005cf0 01402940  
    1395 00005d10     09c2          MOVI    COIN_CKSUM_BYTES,A2
         00005d20     0007  
    1396 00005d30     5621          CLR     A1                        ;CLEAR OUT CHECKSUM
    1397                    
    1398 00005d40           CN_SUM
    1399 00005d40     0d5f          CALLA   RC_BYTEI                  ;FETCH A BYTE IN A0
         00005d50 00000000! 
    1400 00005d70     4001          ADD     A0,A1                     ;ADD TO SUM
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   33

    1401 00005d80     3ca2          DSJS    A2,CN_SUM                 ;TILL WE HAVE EM ALL
    1402                    
    1403 00005d90     03e1          NOT     A1                        ;COMPLEMENT OF COURSE
    1404 00005da0     2701          sll     32-8,a1
    1405 00005db0     2d01          srl     32-8,a1
    1406                    
    1407 00005dc0     09e7          MOVI    COIN_CKSUM,A7
         00005dd0 014029b0  
    1408 00005df0     0d5f          CALLA   RC_BYTE                   ;FETCH THE CURRENT CKSUM
         00005e00 00000000! 
    1409 00005e20     4801          CMP     A0,A1                     ;COMPARE TO THIS
    1410 00005e30     09af          MMFM    SP,A0,A7,A2
         00005e40     0085  
    1411 00005e50     0960          RETS
    1412                    
    1413 00005e60           FORM_COIN_CKSUM_AND_STORE
    1414 00005e60     098f          MMTM    SP,A1,A7,A0
         00005e70     c100  
    1415 00005e80     0d3f          CALLR   FORM_COIN_CKSUM
         00005e90     ffe0  
    1416 00005ea0     09e7          MOVI    COIN_CKSUM,A7
         00005eb0 014029b0  
    1417 00005ed0     4c20          MOVE    A1,A0
    1418 00005ee0     0d5f          CALLA   WC_BYTE
         00005ef0 00000000! 
    1419 00005f10     09af          MMFM    SP,A1,A7,A0
         00005f20     0083  
    1420 00005f30     0960          RETS
    1421                    
    1422 00005f40           CCCC
    1423 00005f40     098f          MMTM    SP,A0,A1,A7,A2
         00005f50     e100  
    1424 00005f60     0d3f          CALLR   FORM_COIN_CKSUM         ;THIS SETS US TO THE COINAGE PAGE!
         00005f70     ffd2  
    1425 00005f80     ca0c          JRZ     CCCCX                   ;ALL IS OK!
    1426                    
    1427 00005f90     09e7          MOVI    COIN_CKSUM_START,A7  ;POINT AT FIRST BYTE
         00005fa0 01402940  
    1428 00005fc0     09c2          MOVI    COIN_CKSUM_BYTES,A2  ;NUMBER OF BYTES TO CLEAR
         00005fd0     0007  
    1429 00005fe0     5600          CLR     A0
    1430                    
    1431 00005ff0           CCCC_LOOP
    1432 00005ff0     0d5f          CALLA   WC_BYTEI                ;WRITE A BYTE
         00006000 00000000! 
    1433 00006020     3c82          DSJS    A2,CCCC_LOOP            ;UNTIL THEY'RE DONE!
    1434                    
    1435 00006030     0d3f          CALLR   FORM_COIN_CKSUM_AND_STORE  ;NOW MAKE THE CKSUM VALID
         00006040     ffe1  
    1436                    
    1437 00006050           CCCCX
    1438 00006050     09af          MMFM    SP,A0,A1,A7,A2
         00006060     0087  
    1439 00006070     0960          RETS
    1440                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   34

    1441 00006080           COIN_PAG
    1442 00006080                   PUSH    a1
    1443 00006090     09c1          MOVI    COIN_SELECT,A1          ;THIS IS COIN/CREDITS PAGE
         000060a0     0000  
    1444 000060b0     0d5f          CALLA   SET_PAGE                ;SET IT PLEASE
         000060c0 00000000! 
    1445 000060e0     09af          MMFM    SP,A1
         000060f0     0002  
    1446 00006100     0960          RETS
    1447                    
    1448                    
    1449                    
    1450 00006110            SUBR   aud_addnumplyrs
    1451                    
    1452 00006110     1821          movk    1,a1            ;1 plyr
    1453 00006120     05b0          move    @PSTATUS2,b0
         00006130 00000000! 
    1454 00006150     1470          subk    3,b0
    1455 00006160     cb01          jrne    aanp50          ;Only 1?
    1456 00006170     1841          movk    2,a1            ;2 plyrs
    1457 00006180     c000  aanp50  jruc    AUD
         00006190     0084  
    1458                    
    1459                    
    1460 000061a0           POINT_AT_AUDIT
    1461 000061a0                   PUSH    a1
    1462 000061b0     0d3f          CALLR   AUDIT_PAGE
         000061c0     0009  
    1463                    
    1464 000061d0     09c7          MOVI    AUD_SIZE,A7             ;THIS IS SIZE PER AUDIT
         000061e0     0060  
    1465 000061f0     5e07          MPYU    A0,A7                   ;A1 NOW HAS OFFSET
    1466 00006200     0b27          ADDI    AUDITORG,A7             ;ADD BASE
         00006210 01400000  
    1467 00006230     09af          MMFM    SP,A1
         00006240     0002  
    1468 00006250     0960          RETS
    1469                    
    1470 00006260           AUDIT_PAGE
    1471 00006260                   PUSH    a1
    1472 00006270     09c1          MOVI    AUDIT_SELECT,A1         ;THIS IS AUDIT PAGE
         00006280     0000  
    1473 00006290     0d5f          CALLA   SET_PAGE                ;SET IT PLEASE
         000062a0 00000000! 
    1474 000062c0     09af          MMFM    SP,A1
         000062d0     0002  
    1475 000062e0     0960          RETS
    1476                    
    1477 000062f0           FORM_AUD_CKSUM
    1478 000062f0     098f          MMTM    SP,A0,A4,A7
         00006300     8900  
    1479 00006310     0d3f          CALLR   POINT_AT_AUDIT            ;A7 = POINTER TO CURRENT ENTRY
         00006320     ffe7  
    1480 00006330     098f          MMTM    SP,A7                     ;SAVE POINTER TO ENTRY
         00006340     0100  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   35

    1481 00006350     09c4          MOVI    AUD_BYTES_TO_CHECK,A4     ;COUNT DOWN THE BYTES
         00006360     0004  
    1482 00006370     5621          CLR     A1                        ;KEEP SUM IN A1
    1483 00006380           ADD_A_BYTE
    1484 00006380     0d5f          CALLA   RC_BYTEI                  ;GET A BYTE INTO A0
         00006390 00000000! 
    1485 000063b0     4001          ADD     A0,A1                     ;ADD TO SUM
    1486 000063c0     3ca4          DSJ     A4,ADD_A_BYTE             ;ONE MORE ADDED
    1487 000063d0     03e1          NOT     A1                        ;CHECKSUM IS NOW IN LOW WORD
    1488 000063e0     0521          ZEXT    A1
    1489 000063f0     09af          MMFM    SP,A7                     ;GET POINTER BACK
         00006400     0080  
    1490 00006410     0b07          ADDI    AUD_CKSUM,A7              ;POINT AT CHECKBYTE
         00006420     0040  
    1491 00006430     0d5f          CALLA   RC_WORD                   ;READ IN THE CKSUM
         00006440 00000000! 
    1492 00006460     4801          CMP     A0,A1                     ;COMPARE WHAT'S THERE TO WHAT WE GOT
    1493 00006470     09af          MMFM    SP,A0,A4,A7               ;Z BIT RETURNS COMPARE
         00006480     0091  
    1494 00006490     0960          RETS                              ;A1 RETURNS CKSUM
    1495                    
    1496 000064a0           STORE_AUD_CKSUM
    1497 000064a0     098f          MMTM    SP,A7,A0                  ;POINTING REGISTER
         000064b0     8100  
    1498 000064c0     0d3f          CALLR   POINT_AT_AUDIT            ;A7 POINTS AT AUDIT
         000064d0     ffcc  
    1499 000064e0     0b07          ADDI    AUD_CKSUM,A7              ;POINT AT CHECKBYTE
         000064f0     0040  
    1500 00006500     4c20          MOVE    A1,A0                     ;GET CHECKBYTE IN A0
    1501 00006510     0d5f          CALLA   WC_WORD                   ;WRITE THE CKSUM
         00006520 00000000! 
    1502 00006540     09af          MMFM    SP,A7,A0                  ;POINTING REGISTER
         00006550     0081  
    1503 00006560     0960          RETS
    1504                    
    1505 00006570           FORM_AUD_CKSUM_AND_STORE
    1506 00006570     098f          MMTM    SP,A1,A2                        ;SAVE A1!
         00006580     6000  
    1507 00006590     0d3f          CALLR   FORM_AUD_CKSUM
         000065a0     ffd4  
    1508 000065b0     05a2          MOVE    @BAD_AUD,A2                     ;GET THE "FUDGE" WORD
         000065c0 00000000- 
    1509 000065e0     5641          XOR     A2,A1                           ;MAKE CKSUM BAD IF AUDIT IS BAD
    1510 000065f0     0d3f          CALLR   STORE_AUD_CKSUM
         00006600     ffe9  
    1511 00006610     09af          MMFM    SP,A1,A2
         00006620     0006  
    1512 00006630     0960          RETS
    1513                    
    1514 00006640           GET_AUD
    1515 00006640     098f          MMTM    SP,A0,A7
         00006650     8100  
    1516 00006660     0d3f          CALLR   FORM_AUD_CKSUM          ;SEE IF CKSUM IS OK
         00006670     ffc7  
    1517 00006680     ca04          JRZ     FETCH_AUDIT_1           ;ITS OK....
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   36

    1518                    
    1519 00006690     1821          MOVK    1,A1                    ;CHECKSUM IS BAD
    1520 000066a0     0581          MOVE    A1,@BAD_AUD             ;SET THE FLAG!
         000066b0 00000000- 
    1521                    
    1522 000066d0           FETCH_AUDIT_1
    1523 000066d0     0d3f          CALLR   POINT_AT_AUDIT          ;A7 POINTS AT AUDIT
         000066e0     ffab  
    1524 000066f0     0b07          ADDI    AUD_DATA,A7             ;ADD ZERO OFFSET
         00006700     0000  
    1525 00006710     0d5f          CALLA   RC_LONG                 ;FETCH THE LONG WORD TO A0
         00006720 00000000! 
    1526 00006740     4c01          MOVE    A0,A1                   ;RETURN IN A1
    1527 00006750     09af          MMFM    SP,A0,A7
         00006760     0081  
    1528 00006770     0960          RETS
    1529                    
    1530 00006780           STORE_AUDIT
    1531                            
    1532 00006780     098f          MMTM    SP,A0,A7
         00006790     8100  
    1533 000067a0     0d3f          CALLR   POINT_AT_AUDIT          ;A7 POINTS AT AUDIT
         000067b0     ff9e  
    1534 000067c0     0b07          ADDI    AUD_DATA,A7             ;ADD ZERO OFFSET
         000067d0     0000  
    1535 000067e0     4c20          MOVE    A1,A0                   ;MOVE DATA TO WRITING REGISTER
    1536 000067f0     0d5f          CALLA   WC_LONG                 ;WRITE THE DATA BACK
         00006800 00000000! 
    1537 00006820     09af          MMFM    SP,A0,A7                ;GET AUDIT NUMBER BACK
         00006830     0081  
    1538 00006840     c0d2          JRUC    FORM_AUD_CKSUM_AND_STORE        ;STORE GOOD OR BAD CKSUM BASED
    1539                                                                    ;ON BAD_AUD
    1540                    
    1541 00006850           CLR_AUDR
    1542 00006850     098f          MMTM    SP,A0,A1,A2
         00006860     e000  
    1543 00006870     4c22          MOVE    A1,A2                     ;MOVE "LAST" TO A2
    1544 00006880     5621          CLR     A1                        ;WE'LL STORE ZEROS
    1545 00006890     0581          MOVE    A1,@BAD_AUD               ;MAKE CKSUMS GOOD ON STORING
         000068a0 00000000- 
    1546 000068c0           CAR1
    1547 000068c0     0d3f          CALLR   STORE_AUDIT               ;STORE THIS AUDIT
         000068d0     ffea  
    1548 000068e0     1020          INC     A0                        ;KICK TO NEXT AUDIT
    1549 000068f0     4840          CMP     A2,A0
    1550 00006900     c2fb          JRLS    CAR1
    1551 00006910     09af          MMFM    SP,A0,A1,A2
         00006920     0007  
    1552 00006930     0960          RETS
    1553                    
    1554                            
    1555 00006940           KILL_AUD
    1556 00006940                   PUSH    a1
    1557 00006950     5621          CLR     A1                        ;WE'LL STORE ZEROS
    1558 00006960     0581          MOVE    A1,@BAD_AUD               ;MAKE CKSUMS GOOD ON STORING
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   37

         00006970 00000000- 
    1559 00006990     0d3f          CALLR   STORE_AUDIT               ;STORE THIS AUDIT
         000069a0     ffdd  
    1560 000069b0     09af          MMFM    SP,A1
         000069c0     0002  
    1561 000069d0     0960          RETS
    1562                    
    1563 000069e0           AUD
    1564 000069e0     098f          MMTM    SP,A1,A2
         000069f0     6000  
    1565 00006a00     5642          CLR     A2                      ;SET "BAD_AUD" GOOD UNTIL OTHERWISE PROVEN!
    1566 00006a10     0582          MOVE    A2,@BAD_AUD             ;ITS GOOD.
         00006a20 00000000- 
    1567 00006a40     4c22          MOVE    A1,A2                   ;COPY OUR COUNT
    1568 00006a50     0d3f          CALLR   GET_AUD                 ;FETCH THE CURRENT AUDIT COUNTER
         00006a60     ffbd  
    1569 00006a70     4041          ADD     A2,A1                   ;ADD THE NEW COUNT
    1570 00006a80     0d3f          CALLR   STORE_AUDIT             ;STORE IT BACK
         00006a90     ffce  
    1571 00006aa0     0d3f          CALLR   DEF_PAGE                ;SWITCH PAGE AWAY FROM THE DATA!
         00006ab0     00b4  
    1572 00006ac0     09af          MMFM    SP,A1,A2
         00006ad0     0006  
    1573 00006ae0     0960          RETS
    1574                    
    1575 00006af0           AUD1
    1576 00006af0                   PUSH    a1
    1577 00006b00     1821          MOVK    1,A1
    1578 00006b10     0d3f          CALLR   AUD
         00006b20     ffeb  
    1579 00006b30     09af          MMFM    SP,A1
         00006b40     0002  
    1580 00006b50     0960          RETS
    1581                    
    1582 00006b60           CLR_AUD
    1583 00006b60     098f          MMTM    SP,A0,A1
         00006b70     c000  
    1584 00006b80     1820          MOVK    1,A0                    ;START AT AUDIT 1
    1585 00006b90     09c1          MOVI    N_AUDITS-1,A1           ;THIS IS TOTAL ALLOCATED
         00006ba0     006d  
    1586 00006bb0     0d3f          CALLR   CLR_AUDR
         00006bc0     ffc8  
    1587 00006bd0     09af          MMFM    SP,A0,A1
         00006be0     0003  
    1588 00006bf0     0960          RETS
    1589                    
    1590 00006c00           CMOS_VAL
    1591 00006c00     0d3f          callr   form_crc32
         00006c10     0022  
    1592 00006c20     cb05          jrnz    CMOS_BAD
    1593 00006c30     0d3f          CALLR   FORM_ADC  ;SEE IF CKSUM IS OK.
         00006c40     0004  
    1594 00006c50     cb02          JRNZ    CMOS_BAD        ;NOPE....RETURN .NE.
    1595                    
    1596 00006c60     0d3f          CALLR   CHECK_NAME_AND_REV      ;HOW ABOUT THE NAME AND REV?
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   38

         00006c70     0073  
    1597 00006c80           CMOS_BAD
    1598 00006c80     0960          RETS
    1599                    
    1600 00006c90           FORM_ADC
    1601 00006c90     098f          MMTM    SP,A7,A0,A6
         00006ca0     8300  
    1602 00006cb0     0d3f          CALLR   ADJ_PAGE          ;SET CMOS PAGE FOR ADJUSTMENTS
         00006cc0     008a  
    1603 00006cd0     09e7          MOVI    ADJUSTORG,A7            ;POINT AT FIRST BYTE
         00006ce0 01404000  
    1604 00006d00     09c6          MOVI    ADJ_BYTES_TO_CHECK,A6  ;NUMBER OF BYTES
         00006d10     00dc  
    1605 00006d20     5621          CLR     A1                      ;ACCUMULATE CKSUM HERE
    1606                    
    1607 00006d30           ADJ_C1
    1608 00006d30     0d5f          CALLA   RC_BYTEI                ;READ A BYTE
         00006d40 00000000! 
    1609 00006d60     4001          ADD     A0,A1                   ;ADD THE BYTE TO THE SUM
    1610 00006d70     3ca6          DSJS    A6,ADJ_C1
    1611 00006d80     03e1          NOT     A1                      ;COMPLEMENT THE SUM
    1612 00006d90     0521          ZEXT    A1
    1613 00006da0     09e7          MOVI    ADJ_CKSUM,A7
         00006db0 01404dc0  
    1614 00006dd0     0d5f          CALLA   RC_WORD                 ;FETCH THE CHECKSUM
         00006de0 00000000! 
    1615 00006e00     4801          CMP     A0,A1                   ;COMPARE TO FETCHED VALUE
    1616 00006e10     09af          MMFM    SP,A7,A0,A6
         00006e20     00c1  
    1617 00006e30     0960          RETS
    1618                    
    1619 00006e40            SUBR   form_crc32
    1620 00006e40     098f          mmtm    sp,a7,a0,a6
         00006e50     8300  
    1621 00006e60     09e7          movi    ADJUSTORG,a7
         00006e70 01404000  
    1622 00006e90     09c6          movi    ADJ_BYTES_TO_CHECK,a6
         00006ea0     00dc  
    1623 00006eb0     5621          clr     a1
    1624 00006ec0           crc_lp
    1625 00006ec0     0d5f          calla   RC_BYTEI
         00006ed0 00000000! 
    1626 00006ef0     5601          xor     a0,a1
    1627 00006f00     3021          rl      1,a1
    1628 00006f10     3cc6          dsjs    a6,crc_lp
    1629 00006f20     09e7          movi    ADJ_CRC32,a7
         00006f30 01404fc0  
    1630 00006f50     0d5f          calla   RC_LONG
         00006f60 00000000! 
    1631 00006f80     4801          cmp     a0,a1
    1632 00006f90     09af          mmfm    sp,a7,a0,a6
         00006fa0     00c1  
    1633 00006fb0     0960          rets
    1634                    
    1635 00006fc0           F_ADC_S
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   39

    1636 00006fc0     098f          MMTM    SP,A0,A1,A7
         00006fd0     c100  
    1637 00006fe0     0d3f          CALLR   FORM_ADC                ;FORM THE CKSUM
         00006ff0     ffc9  
    1638 00007000     4c20          MOVE    A1,A0                   ;PUT IN CMOS WRITING REGGIE
    1639 00007010     09e7          MOVI    ADJ_CKSUM,A7
         00007020 01404dc0  
    1640 00007040     0d5f          CALLA   WC_WORD                 ;AND STORE IT
         00007050 00000000! 
    1641 00007070     0d3f          callr   form_crc32
         00007080     ffdb  
    1642 00007090     4c20          move    a1,a0
    1643 000070a0     09e7          movi    ADJ_CRC32,a7
         000070b0 01404fc0  
    1644 000070d0     0d5f          calla   WC_LONG
         000070e0 00000000! 
    1645 00007100     09af          MMFM    SP,A0,A1,A7
         00007110     0083  
    1646 00007120     0960          RETS
    1647                    
    1648 00007130           GET_ADJ
    1649 00007130                   PUSH    a1,a7
    1650 00007150     0d3f          CALLR   ADJPOINT                ;POINT AT ADJUSTMENT
         00007160     0016  
    1651 00007170     0d5f          CALLA   RC_LONG                 ;FETCH THE ADJUST PLEASE
         00007180 00000000! 
    1652 000071a0     0d3f          CALLR   DEF_PAGE
         000071b0     0044  
    1653 000071c0                   PULL    a1,a7
    1654 000071e0     4c00          MOVE    A0,A0                   ;RETURN Z BIT BASED ON ADJUSTMENT!
    1655 000071f0     0960          RETS
    1656                    
    1657 00007200           PUT_ADJ
    1658 00007200                   PUSH    a0,a7
    1659 00007220     0d3f          CALLR   ADJPOINT                ;POINT AT REQUESTED ADJ.
         00007230     0009  
    1660 00007240     4c20          MOVE    A1,A0                   ;GET VALUE IN WRITING REGGIE!
    1661 00007250     0d5f          CALLA   WC_LONG                 ;WRITE THE ADJUSTMENT
         00007260 00000000! 
    1662 00007280     0d3f          CALLR   DEF_PAGE                ;SWAP PAGE AWAY.
         00007290     0036  
    1663 000072a0     09af          MMFM    SP,A7,A0
         000072b0     0081  
    1664 000072c0     0960          RETS
    1665                    
    1666 000072d0           ADJPOINT
    1667 000072d0     0d3f          CALLR   ADJ_PAGE                ;SET CMOS PAGE FOR ADJUSTMENTS
         000072e0     0028  
    1668 000072f0     09c7          MOVI    ADJ_SIZE,A7             ;SIZE PER ADJUSTMENT IN A7
         00007300     0040  
    1669 00007310     5e07          MPYU    A0,A7                   ;TIMES ADJUSTMENT REQUESTED.
    1670 00007320     0b27          ADDI    ADJUSTORG,A7            ;ADD TO BASE
         00007330 01404000  
    1671 00007350     0960          RETS
    1672                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   40

    1673 00007360           GET_ADJ_FOR_COIN
    1674 00007360     0d3f          CALLR   GET_ADJ                 ;GET THE ADJUSTMENT
         00007370     ffdb  
    1675 00007380     c080          JAUC    COIN_PAG                ;THEN RE-INSTATE THE COIN PAGE!
         00007390 00006080' 
    1676                    
    1677 000073b0           CHECK_NAME_AND_REV
    1678 000073b0     098f          MMTM    SP,A0,A1,A2,A3,A7
         000073c0     f100  
    1679 000073d0     0d3f          CALLR   ADJ_PAGE          ;MAKE SURE WE'RE ON THE CORRECT PAGE
         000073e0     0018  
    1680                    
    1681 000073f0     09e7          MOVI    NAME_REV,A7             ;POINT AT CMOS NAME STORAGE
         00007400 01404de0  
    1682 00007420     09e1          MOVI    ROM_NAME,A1             ;POINT AT OUR VERSION
         00007430 00008ee0' 
    1683 00007450     09c2          MOVI    NAME_REV_SIZE,A2        ;MAXIMUM NAME SIZE
         00007460     001e  
    1684                    
    1685 00007470           NEXT_LET1
    1686 00007470     0d5f          CALLA   RC_BYTEI                ;FETCH A BYTE
         00007480 00000000! 
    1687 000074a0     8e23          MOVB    *A1,A3                  ;GET 1 FROM ROM
    1688 000074b0     2703          SLL     24,A3
    1689 000074c0     2d03          SRL     24,A3
    1690                    
    1691 000074d0     4860          CMP     A3,A0                   ;THEY BETTER BE THE SAME
    1692 000074e0     cb05          JRNZ    RETURN_NOW              ;NOPE....BYE  (RETURN .NE.)
    1693                    
    1694 000074f0     1101          ADDK    BYTE_SIZE,A1            ;KICK SOURCE POINTER
    1695 00007500     4c00          MOVE    A0,A0                   ;WAS IT A ZERO?
    1696 00007510     ca02          JRZ     RETURN_NOW              ;YEP....NO MORE (RETURN .EQ.)
    1697 00007520     3d82          DSJS    A2,NEXT_LET1
    1698 00007530     5600          CLR     A0                      ;RETURN .EQ.
    1699                            
    1700 00007540           RETURN_NOW
    1701 00007540     09af          MMFM    SP,A0,A1,A2,A3,A7
         00007550     008f  
    1702 00007560     0960          RETS
    1703                    
    1704 00007570           ADJ_PAGE
    1705 00007570                   PUSH    a1
    1706 00007580     09c1          MOVI    ADJUST_SELECT,A1        ;THIS IS AUDIT PAGE
         00007590     0000  
    1707 000075a0     0d5f          CALLA   SET_PAGE                ;SET IT PLEASE
         000075b0 00000000! 
    1708 000075d0     09af          MMFM    SP,A1
         000075e0     0002  
    1709 000075f0     0960          RETS
    1710                    
    1711                    
    1712 00007600           DEF_PAGE
    1713                     .if 0
    1714                            PUSHST                          ;PRESERVE CODES THAT ARE BEING RETURNED
    1715                            PUSH    a1
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   41

    1716                            MOVI    TODAYS_SELECT,A1        ;THIS IS TODAY'S HIGH SCORES PAGE
    1717                            CALLA   SET_PAGE                ;SET IT PLEASE
    1718                            PULL    a1
    1719                            POPST
    1720                     .endif
    1721 00007600     0960          RETS
    1722                    
    1723                    
    1724 00007610           FAC_SET
    1725 00007610                   PUSH    a1,a2,a7
    1726                    
    1727 00007630     a00f          move    a0,-*sp
    1728 00007640     1420          subk    1,a0
    1729 00007650     ca15          jreq    fs20                    ;Just coinage?
    1730                    
    1731 00007660     0d5f          calla   opmsg_clr
         00007670 00000000! 
    1732                    
    1733                    
    1734                    
    1735 00007690     0d3f          CALLR   NO_CREDS                ;REMOVE ANY COINS
         000076a0     fa43  
    1736 000076b0     0d3f          CALLR   ADJ_PAGE                ;SET CMOS PAGE CORRECTLY
         000076c0     ffea  
    1737                    
    1738 000076d0     09e1          MOVI    FACTORY_TABLE,A1        ;ROM
         000076e0 00008fd0' 
    1739 00007700     09e7          MOVI    ADJUSTORG,A7            ;CMOS
         00007710 01404000  
    1740 00007730     09c2          MOVI    N_ADJUSTS,A2            ;NUMBER OF ADJUSTMENTS ALLOCATED
         00007740     0023  
    1741                    
    1742 00007750           FACS1
    1743 00007750     9420          MOVE    *A1+,A0                 ;FETCH A ROM LONG WORD
    1744 00007760     0520          ZEXT    A0
    1745 00007770     0d5f          CALLA   WC_LONGI                ;WRITE THE WORD TO CMOS
         00007780 00000000! 
    1746 000077a0     3cc2          DSJS    A2,FACS1                ;WRITE 1 LONG WORD PER ADJUST
    1747 000077b0           fs20
    1748                    
    1749 000077b0     0d3f          callr   LD_CTAB                 ;EXPAND THE CSELCT VALUE
         000077c0     0018  
    1750 000077d0     0d3f          callr   F_ADC_S                 ;MAKE THE CHECKSUM CORRECT.
         000077e0     ff7d  
    1751                    
    1752 000077f0     95e0          move    *sp+,a0
    1753 00007800     1420          subk    1,a0
    1754 00007810     ca10          jreq    fsx                     ;Only coinage?
    1755                    
    1756                    
    1757 00007820     09e7          MOVI    NAME_REV,A7             ;POINT AT CMOS NAME STORAGE
         00007830 01404de0  
    1758 00007850     09e1          MOVI    ROM_NAME,A1             ;POINT AT OUR VERSION
         00007860 00008ee0' 
    1759 00007880     09c2          MOVI    NAME_REV_SIZE,A2        ;MAXIMUM NAME SIZE
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   42

         00007890     001e  
    1760                    
    1761 000078a0           NEXT_LETTER
    1762 000078a0     8e20          MOVB    *A1,A0                  ;FETCH A BYTE
    1763 000078b0     0d5f          CALLA   WC_BYTEI                ;WRITE IT TO CMOS
         000078c0 00000000! 
    1764 000078e0     1101          ADDK    BYTE_SIZE,A1            ;KICK SOURCE POINTER
    1765 000078f0     4c00          move    a0,a0
    1766 00007900     ca01          jrz     fsx                     ;End?
    1767 00007910     3d02          DSJS    A2,NEXT_LETTER
    1768                            
    1769 00007920           fsx     PULL    a1,a2,a7
    1770 00007940     0960          rets
    1771                    
    1772 00007950                   .even
    1773                    
    1774                    
    1775 00007950           LD_CTAB
    1776 00007950     098f          mmtm    sp,a0,a6,a1
         00007960     c200  
    1777                    
    1778 00007970     0d5f          calla   GET_CSPT                ;A6=CSELCT table
         00007980 00000000! 
    1779                    
    1780                     .IF 0
    1781                            movk    1,a1
    1782                            move    *a6(16*4),a0
    1783                            jrnn    lct5                    ;Normal 1 credit to start?
    1784                            movk    2,a1
    1785                    lct5    movk    ADJCSTRT,a0
    1786                            callr   PUT_ADJ
    1787                            movk    1,a1
    1788                            movk    ADJCCONT,a0
    1789                            callr   PUT_ADJ
    1790                    
    1791                            movk    ADJC1,a0                ;1st one to store
    1792                    lct8    move    *a6+,a1                 ;Get word
    1793                            abs     a1
    1794                            callr   PUT_ADJ                 ;Write this one to memory
    1795                            addk    1,a0
    1796                            cmpi    ADJCX,a0
    1797                            jrls    lct8
    1798                    
    1799                     .ENDIF
    1800                    
    1801                    
    1802 000079a0     09c0          movi    ADJLMULT,a0
         000079b0     0002  
    1803 000079c0     94c1          move    *a6+,a1
    1804 000079d0     0d5f          calla   PUT_ADJ
         000079e0 00007200' 
    1805                    
    1806 00007a00     09c0          movi    ADJCMULT,a0
         00007a10     0003  
    1807 00007a20     94c1          move    *a6+,a1
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   43

    1808 00007a30     0d5f          calla   PUT_ADJ
         00007a40 00007200' 
    1809                    
    1810 00007a60     09c0          movi    ADJRMULT,a0
         00007a70     0004  
    1811 00007a80     94c1          move    *a6+,a1
    1812 00007a90     0d5f          calla   PUT_ADJ
         00007aa0 00007200' 
    1813                    
    1814 00007ac0     09c0          movi    ADJXMULT,a0
         00007ad0     0005  
    1815 00007ae0     94c1          move    *a6+,a1
    1816 00007af0     0d5f          calla   PUT_ADJ
         00007b00 00007200' 
    1817                    
    1818 00007b20     09c0          movi    ADJDBVMULT,a0
         00007b30     0006  
    1819 00007b40     94c1          move    *a6+,a1
    1820 00007b50     0d5f          calla   PUT_ADJ
         00007b60 00007200' 
    1821                    
    1822 00007b80     09c0          movi    ADJCUNIT,a0
         00007b90     0007  
    1823 00007ba0     94c1          move    *a6+,a1
    1824 00007bb0     0d5f          calla   PUT_ADJ
         00007bc0 00007200' 
    1825                    
    1826 00007be0     09c0          movi    ADJBUNIT,a0
         00007bf0     0008  
    1827 00007c00     94c1          move    *a6+,a1
    1828 00007c10     0d5f          calla   PUT_ADJ
         00007c20 00007200' 
    1829                    
    1830 00007c40     09c0          movi    ADJMUNIT,a0
         00007c50     0009  
    1831 00007c60     94c1          move    *a6+,a1
    1832 00007c70     0d5f          calla   PUT_ADJ
         00007c80 00007200' 
    1833                    
    1834 00007ca0     09c0          movi    ADJCSTRT,a0
         00007cb0     000c  
    1835 00007cc0     94c1          move    *a6+,a1
    1836 00007cd0     0d5f          calla   PUT_ADJ
         00007ce0 00007200' 
    1837                    
    1838 00007d00     09c0          movi    ADJCCONT,a0
         00007d10     000d  
    1839 00007d20     94c1          move    *a6+,a1
    1840 00007d30     0d5f          calla   PUT_ADJ
         00007d40 00007200' 
    1841                    
    1842 00007d60     09c0          movi    ADJCDIV,a0
         00007d70     000a  
    1843 00007d80     94c1          move    *a6+,a1
    1844 00007d90     0d5f          calla   PUT_ADJ
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   44

         00007da0 00007200' 
    1845                    
    1846 00007dc0     09c0          movi    ADJFRAC,a0
         00007dd0     000b  
    1847 00007de0     94c1          move    *a6+,a1
    1848 00007df0     0d5f          calla   PUT_ADJ
         00007e00 00007200' 
    1849                    
    1850 00007e20                   PUSH    A6
    1851 00007e30     09c0          MOVI    ADJLTOTMULT,A0
         00007e40     001e  
    1852 00007e50     94c1          MOVE    *A6+,A1,W
    1853 00007e60     0d5f          CALLA   PUT_ADJ
         00007e70 00007200' 
    1854 00007e90     09c0          MOVI    ADJCTOTMULT,A0
         00007ea0     001f  
    1855 00007eb0     94c1          MOVE    *A6+,A1,W
    1856 00007ec0     0d5f          CALLA   PUT_ADJ
         00007ed0 00007200' 
    1857 00007ef0     09c0          MOVI    ADJRTOTMULT,A0
         00007f00     0020  
    1858 00007f10     94c1          MOVE    *A6+,A1,W
    1859 00007f20     0d5f          CALLA   PUT_ADJ
         00007f30 00007200' 
    1860 00007f50     09c0          MOVI    ADJXTOTMULT,A0
         00007f60     0021  
    1861 00007f70     94c1          MOVE    *A6+,A1,W
    1862 00007f80     0d5f          CALLA   PUT_ADJ
         00007f90 00007200' 
    1863 00007fb0     09c0          MOVI    ADJBTOTMULT,A0
         00007fc0     0022  
    1864 00007fd0     94c1          MOVE    *A6+,A1,W
    1865 00007fe0     0d5f          CALLA   PUT_ADJ
         00007ff0 00007200' 
    1866 00008010                   PULL    A6
    1867                    
    1868 00008020     1a80          movk    ADJVIRGIN,a0            ;THIS SAYS 1ST 8 UNTOUCHED.
    1869 00008030     1821          movk    1,a1
    1870 00008040     0d3f          callr   PUT_ADJ
         00008050     ff1a  
    1871                    
    1872 00008060     1ac0          movk    ADJ1ST6,a0              ;THIS SAYS 1ST 6 UNTOUCHED.
    1873 00008070     1821          movk    1,a1
    1874 00008080     0d3f          callr   PUT_ADJ                 ;DONE!
         00008090     ff16  
    1875                    
    1876 000080a0     09af          mmfm    sp,a0,a6,a1
         000080b0     0043  
    1877 000080c0     0960          rets
    1878                    
    1879                    
    1880 000080d0           L_MESS_LOOP
    1881 000080d0     1108          addk    BYTE_SIZE,a8            ;PUSH BEYOND THIS BYTE
    1882 000080e0     11e8  L_MESS  addk    0fH,a8                  ;Round up word
    1883 000080f0     2f88          srl     4,a8
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   45

    1884 00008100     2488          sll     4,a8
    1885                    
    1886 00008110     09a8          MMFM    A8,A1,A6,A9,A10,A11     ;LOAD UP REGGIES FROM A8.
         00008120     0e42  
    1887 00008130     5600          CLR     A0                      ;NEVER SLEEP!
    1888                    
    1889 00008140     09e7          MOVI    L_RET,A7
         00008150 00008190' 
    1890 00008170     a2ec          MOVE    A7,-*A12,L      ;PUSH RET ADDR
    1891 00008180     0161          JUMP    A1              ;JUMP TO THE ROUTINE.
    1892 00008190     8f00  L_RET   MOVB    *A8,A0          ;CHECK NEXT BYTE 0=DONE...1=MORE.
    1893 000081a0     cbf2          JRNZ    L_MESS_LOOP
    1894 000081b0                   RETP
    1895                            
    1896 000081e0           LM_SETUP
    1897 000081e0     09a8          MMFM    A8,A1,A6,A9,A10,A11       ;LOAD UP REGGIES FROM A8.
         000081f0     0e42  
    1898 00008200     5600          CLR     A0                        ;DON'T SLEEP
    1899 00008210     0960          RETS
    1900                    
    1901 00008220           LM_FINIS
    1902 00008220     0161          JUMP    A1                              ;THIS RUNS ROUTINE AND
    1903                    
    1904 00008230           GET_CSTR
    1905 00008230     1a60          MOVK    ADJFREPL,A0             ;ARE WE IN FREE PLAY?
    1906 00008240     0d5f          CALLA   GET_ADJ
         00008250 00007130' 
    1907 00008270     ca04          JRZ     NOT_FREE
    1908                    
    1909 00008280     09e8          MOVI    MESS_FREEP,A8           ;RETURN POINTING AT FREE PLAY MESSAGE
         00008290 00009390' 
    1910 000082b0     c049          JRUC    GET_CX
    1911                    
    1912 000082c0           NOT_FREE
    1913 000082c0     0d5f          CALLA   STR_OBJ                 ;ALLOCATE AN OBJECT PLEASE
         000082d0 00000000! 
    1914 000082f0     c847          JRC     NO_SOBJ                 ;NONE TO USE!
    1915                            
    1916 00008300     09e8          MOVI    MESS_CREDITS,A8         ;POINT AT TEXT PART
         00008310 00009200' 
    1917 00008330     0d5f          CALLA   STRCAT                  ;BUILD THIS IN.
         00008340 0000a3f0' 
    1918 00008360     0d3f          CALLR   CRED_P
         00008370     fa1d  
    1919 00008380     4c0a          MOVE    A0,A10                  ;SAVE CREDITS
    1920 00008390     0d3f          CALLR   CAT_A0
         000083a0     0041  
    1921 000083b0     1960          MOVK    ADJFRAC,A0
    1922 000083c0     0d5f          CALLA   GET_ADJ                 ;CHECK THE ADJUSTMENT
         000083d0 00007130' 
    1923 000083f0     ca28          JRZ     NSFRAC                  ;DON'T SHOW IT!
    1924 00008400     0d3f          CALLR   COIN_PAG                ;PUT US ON COIN PAGE
         00008410     fdc6  
    1925 00008420     0d3f          CALLR   GET_CUNITS              ;A0 HAS CUNITS
         00008430     fa32  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   46

    1926 00008440     0d3f          CALLR   DEF_PAGE                ;FLIP CMOS AWAY
         00008450     ff1a  
    1927 00008460     4c00          MOVE    A0,A0                   ;ZERO?
    1928 00008470     ca20          JRZ     NSFRAC                  ;THEN NO FRACTION.
    1929 00008480     4d4a          MOVE    A10,A10                 ;WE SAVED EM IN A10
    1930 00008490     cb0a          JRNZ    NZM                     ;NON ZERO MANTISSA
    1931                    
    1932 000084a0     4ce8          MOVE    A7,A8                   ;WALK DOWN STRING LOOKING FOR THE "ZERO"
    1933 000084b0           KILL_Z
    1934 000084b0     8f01          MOVB    *A8,A1                  ;GET A BYTE
    1935 000084c0     ca07          JRZ     NZM                     ;COULDN'T FIND IT....GO ON.
    1936                    
    1937 000084d0     0b41          CMPI    LET_0,A1                ;IS THIS THE ZERO?
         000084e0     ffcf  
    1938 000084f0     ca02          JRZ     GOT_ZERO
    1939                    
    1940 00008500     1108          ADDK    BYTE_SIZE,A8
    1941 00008510     c0f9          JRUC    KILL_Z
    1942                    
    1943 00008520           GOT_ZERO
    1944 00008520     5621          CLR     A1
    1945 00008530     8c28          MOVB    A1,*A8                  ;KILL THE ZERO
    1946                    
    1947 00008540           NZM
    1948 00008540     09e8          MOVI    MESS_2SPACE,A8          ;SPACE BET. MANTISSA AND DENMO
         00008550 0000a730' 
    1949 00008570     0d5f          CALLA   STRCAT
         00008580 0000a3f0' 
    1950                    
    1951 000085a0           NOT_ZM
    1952 000085a0     0d3f          CALLR   CAT_A0                  ;ADD A0 ONTO FRACTION
         000085b0     0020  
    1953                    
    1954 000085c0     09e8          MOVI    MESS_SLASH,A8
         000085d0 0000a720' 
    1955 000085f0     0d5f          CALLA   STRCAT                  ;ADD SLASH
         00008600 0000a3f0' 
    1956                    
    1957 00008620     18e0          MOVK    ADJCUNIT,A0             ;UNITS REQUIRED FOR CREDIT
    1958 00008630     0d5f          CALLA   GET_ADJ
         00008640 00007130' 
    1959 00008660     0d3f          CALLR   CAT_A0                  ;DENOMINATOR
         00008670     0014  
    1960                    
    1961 00008680           NSFRAC
    1962 00008680     4ce8          MOVE    A7,A8                   ;MOVE "OBJECT" TO A8
    1963 00008690     09e7          MOVI    STRNGRAM,A7             ;POINT AT STRING RAM
         000086a0 00000000! 
    1964 000086c0     5600          CLR     A0
    1965 000086d0     8c07          MOVB    A0,*A7                  ;STRINGRAM IS NULL
    1966 000086e0     0d5f          CALLA   STRCAT                  ;COPY THE STRING OUT OF OBJECT BLOCK
         000086f0 0000a3f0' 
    1967 00008710     4ce8          MOVE    A7,A8
    1968 00008720     0d5f          CALLA   STR_FREE                ;AND FREE UP THE OBJECT BLOCK
         00008730 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   47

    1969                    
    1970 00008750           GET_CX
    1971 00008750     0320          CLRC                            ;RETURN OK
    1972 00008760           GET_CXX
    1973 00008760     0960          RETS
    1974 00008770           NO_SOBJ
    1975 00008770     09e8          MOVI    MESS_NULL,A8
         00008780 0000a740' 
    1976 000087a0     0de0          SETC
    1977 000087b0     c0fa          JRUC    GET_CXX                 ;RETURN BLANK STRING!
    1978                    
    1979 000087c0           CAT_A0
    1980 000087c0                   PUSH    a8
    1981 000087d0     4c08          MOVE    A0,A8                   ;CREDIT COUNT IN A8
    1982 000087e0     0d5f          CALLA   HEXTOASC                ;STRING
         000087f0 00000000! 
    1983 00008810     0d5f          CALLA   STRCAT                  ;NOW WE HAVE WHOLE NUMBER.
         00008820 0000a3f0' 
    1984 00008840     09af          MMFM    SP,A8
         00008850     0100  
    1985 00008860     0960          RETS
    1986                    
    1987 00008870           ADD_PROMPT
    1988 00008870     09e7          MOVI    PROMPT_PROC,A7
         00008880 00008900' 
    1989 000088a0     0d5f          CALLA   P_FORK                  ;START UP ANOTHER W/ SAME ID TO FLASH!
         000088b0 00000000! 
    1990 000088d0                   RETP
    1991                    
    1992 00008900           PROMPT_PROC
    1993 00008900     1a60          MOVK    ADJFREPL,A0
    1994 00008910     0d5f          CALLA   GET_ADJ
         00008920 00007130' 
    1995 00008940     cb16          JRNZ    rf4                     ;ALWAYS READY FOR 4 PLAYERS!
    1996                    
    1997 00008950     0d3f          CALLR   CRED_P
         00008960     f9be  
    1998 00008970     ca1f          JRZ     PP1
    1999                    
    2000 00008980     4c01          MOVE    A0,A1                   ;PUT CREDITS IN A1
    2001 00008990     1980          MOVK    ADJCSTRT,A0             ;GET AMOUNT NEEDED TO START.
    2002 000089a0     0d5f          CALLA   GET_ADJ
         000089b0 00007130' 
    2003 000089d0     4801          CMP     A0,A1                   ;ARE THERE ENOUGH TO START?
    2004 000089e0     c818          JRLO    PP1                     ;NOPE...."INSERT COIN"
    2005 000089f0     ca1c          jrz     PP2
    2006 00008a00     4c02          move    a0,a2
    2007 00008a10     4042          add     a2,a2
    2008 00008a20     4822          cmp     a1,a2
    2009 00008a30     ca0f          jrz     RF2
    2010 00008a40     c317          jrhi    PP2
    2011 00008a50     4002          add     a0,a2
    2012 00008a60     4822          cmp     a1,a2
    2013 00008a70     c30b          jrhi    RF2
    2014 00008a80     4002          add     a0,a2
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   48

    2015 00008a90     4822          cmp     a1,a2
    2016 00008aa0     c304          jrhi    rf3
    2017                    
    2018                    
    2019 00008ab0           rf4
    2020 00008ab0     09e1          MOVI    MESS_READY_4,A1
         00008ac0 00009840' 
    2021 00008ae0     c010          JRUC    RED_1
    2022 00008af0           rf3
    2023 00008af0     09e1          MOVI    MESS_READY_3,A1
         00008b00 000096c0' 
    2024 00008b20     c00c          JRUC    RED_1
    2025 00008b30           RF2
    2026 00008b30     09e1          MOVI    MESS_READY_2,A1
         00008b40 00009540' 
    2027 00008b60     c008          JRUC    RED_1
    2028                    
    2029 00008b70           PP1
    2030 00008b70     09e0          MOVI    MESS_INS_COIN,A0
         00008b80 000099c0' 
    2031 00008ba0     5621          CLR     A1
    2032 00008bb0     c006          JRUC    RED_2
    2033                    
    2034 00008bc0           PP2
    2035 00008bc0     09e1          MOVI    MESS_READY_1,A1
         00008bd0 000093f0' 
    2036 00008bf0           RED_1
    2037 00008bf0     09e0          MOVI    MESS_PRESS_START,A0
         00008c00 00009ad0' 
    2038 00008c20           RED_2
    2039 00008c20     b20d          MOVE    A0,*A13(PDATA),L                ;HOLD MESSAGES
         00008c30     0100  
    2040 00008c40     b22d          MOVE    A1,*A13(PDATA+LONG_SIZE),L
         00008c50     0120  
    2041                    
    2042 00008c60           BLINK_LOOP
    2043 00008c60     b7a8          MOVE    *A13(PDATA),A8,L                ;FIRST MESSAGE
         00008c70     0100  
    2044 00008c80                   JSRP    L_MESS
    2045 00008cf0     b7a8          MOVE    *A13(PDATA+LONG_SIZE),A8,L      ;2ND MESSAGE
         00008d00     0120  
    2046 00008d10     ca07          JRZ     BL1                             ;NOT HOME!
    2047                    
    2048 00008d20                   JSRP    L_MESS
    2049                    
    2050 00008d90           BL1
    2051 00008d90                   SLEEPK  10H
    2052                    
    2053 00008dd0     b7a8          MOVE    *A13(PDATA),A8,L
         00008de0     0100  
    2054 00008df0     0d3f          CALLR   LM_SETUP
         00008e00     ff3d  
    2055 00008e10     56c6          CLR     A6                      ;BLACK
    2056 00008e20                   JSRP    LM_FINIS
    2057                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   49

    2058 00008e90           BL2
    2059 00008e90                   SLEEPK  10H
    2060 00008ed0     c0d8          JRUC    BLINK_LOOP
    2061                    
    2062 00008ee0           ROM_NAME
    2063 00008ee0       57          .byte   "WRESTLEMANIA REV 1.30 8/10/95",0
    2064 00008fd0                   .even
    2065                    
    2066 00008fd0           FACTORY_TABLE
    2067                    
    2068 00008fd0     0000          .word   0       ;ADJNULL        0
    2069 00008fe0     0001          .word   1       ;ADJPRICE       1       ;MASTER PRICING
    2070 00008ff0     0001          .word   1       ;ADJLMULT       2
    2071 00009000     0004          .word   4       ;ADJCMULT       3
    2072 00009010     0001          .word   1       ;ADJRMULT       4
    2073 00009020     0000          .word   0       ;ADJXMULT       5
    2074 00009030     0000          .word   0       ;ADJDBVMULT     6       ;DOLLR BILL VALIDATOR
    2075 00009040     0001          .word   1       ;ADJCUNIT       7
    2076 00009050     0000          .word   0       ;ADJBUNIT       8
    2077 00009060     0000          .word   0       ;ADJMUNIT       9
    2078 00009070     0004          .word   4       ;ADJCDIV        10
    2079 00009080     0001          .word   1       ;ADJFRAC        11      ;NON ZERO SAYS SHOW HALF CREDITS
    2080 00009090     0002          .word   2       ;ADJCSTRT       12      ;CREDITS REQUIRED TO START
    2081 000090a0     0002          .word   2       ;ADJCCONT       13      ;CREDITS REQUIRED TO CONTINUE
    2082                    
    2083 000090b0     0005          .word   5       ;ADJDIFF        14      ;Difficulty Level (1-10)
    2084                    
    2085 000090c0     0000          .word   0       ;               15
    2086 000090d0     0000          .word   0       ;               16
    2087 000090e0     0001          .word   1       ;ADJMUSIC       17      ;attract mode music = off
    2088 000090f0     0032          .word   50      ;ADJMAXC        18      ;MAXIMUM CREDITS
    2089 00009100     0000          .word   0       ;ADJFREPL       19      ;NON-ZERO MEANS FREE PLAY
    2090 00009110     0001          .word   1       ;ADJVIRGIN      20      ;NON-ZERO MEANS 1ST 8 OF COIN ADJUST BLOCK UNTOUCHED
    2091 00009120     0008          .word   8       ;ADJFULLG       21      ;credits needed to purchase full game (4-16)
    2092 00009130     0001          .word   1       ;ADJ1ST6        22      ;NON-ZERO MEANS 1ST 6 UNTOUCHED.
    2093 00009140     0000          .word   0       ;ADJNOCPAG      23
    2094 00009150     0001          .word   1       ;ADJCNTR        24      ;COIN COUNTER MODE
    2095 00009160     0003          .word   3       ;ADJSPEED       25      ;game timer speed (1-5)
    2096 00009170     0001          .word   1       ;ADJHEADSZ      26      ;player head sizes (1-2)
    2097 00009180     0001          .word   1       ;ADJWINMODE     27      ;(winner stays free)
    2098 00009190     001e          .word   30      ;ADJVOLUME      28      ;sound volume (4-255)
    2099 000091a0     0000          .WORD   0       ;CUSTOM TOTALIZER
    2100 000091b0     0001          .WORD   1       ;TOTALIZER CHUTE 1
    2101 000091c0     0001          .WORD   1       ;TOTALIZER CHUTE 2
    2102 000091d0     0001          .WORD   1       ;TOTALIZER CHUTE 3
    2103 000091e0     0001          .WORD   1       ;TOTALIZER CHUTE 4
    2104 000091f0     0001          .WORD   1       ;TOTALIZER DBV
    2105                    
    2106                            .if 0
    2107                            .word   0       ;ADJ_UNUSED             0
    2108                            .word   2       ;ADJ_PRICING            1  ;MASTER PRICING
    2109                            .word   1       ;ADJ_LEFT_MULT          2
    2110                            .word   1       ;ADJ_RIGHT_MULT         4
    2111                            .word   4       ;ADJ_CENTER_MULT        3
    2112                            .word   0       ;ADJ_EXTRA_MULT         5
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   50

    2113                            .word   1       ;ADJ_UNITS_CREDIT       6
    2114                            .word   0       ;ADJ_UNITS_BONUS        7
    2115                            .word   0       ;ADJ_MIN_UNITS          8
    2116                            .word   4       ;ADJCDIV                9  ;COINS PER DOLLAR
    2117                            .word   1       ;SHOW FRACTIONS         10
    2118                            .word   1       ;ADJ_START_CRED         11 ;CREDITS REQUIRED TO START
    2119                            .word   1       ;ADJ_CONT_CRED          12 ;CREDITS REQUIRED TO CONTINUE
    2120                            .word   3       ;ADJ_DIFFICULTY         13
    2121                            .word   5000    ;ADJ_HSRESET            14
    2122                            .word   3       ;ADJ_LIVES              15
    2123                            .word   0       ;ADJ_AMODE_MUSIC        16
    2124                            .word   50      ;MAXIMUM CREDITS        17
    2125                            .word   0       ;FREE PLAY              18
    2126                            .word   1       ;NON-ZERO MEANS COIN BLOCK (1ST 8) UNTOUCHED 19
    2127                            .word   0       ;ZERO MEANS NORMAL GORE ... 1 = SOFTEN IT  20
    2128                            .word   1       ;NON-ZERO MEANS 1ST 6 UNTOUCHED.                21
    2129                            .word   0       ;NON-ZERO MEANS NO COIN-SPECIFIC MESSAGE ON COIN PAGE  21
    2130                            .word   1       ;ADJCNTR  23   ADJUST MECH COIN COUNTER
    2131                            .endif
    2132                    
    2133                    
    2134 00009200           MESS_CREDITS
    2135 00009200       43          .byte   "CREDITS: ",0
    2136 00009250                   .even
    2137                    
    2138 00009250           MESS_CNUM
    2139 00009250                   MESS_MAC  RD15FONT,SPACING20,CP_CX,135,ROBO_LF,STRCNRM,0
    2140 000092f0           MESS_LOWNUM
    2141 000092f0                   MESS_MAC  RD15FONT,SPACING20,CP_CX,135,ROBO_LF,STRCNRM,0
    2142                    
    2143 00009390           MESS_FREEP
    2144 00009390       46          .byte   "FREE  PLAY",0,0
    2145 000093f0                   .even
    2146                    
    2147 000093f0           MESS_READY_1
    2148 000093f0                   MESS_MAC  RD15FONT,SPACING20,CP_CX,155,ROBO_YELLOW,STRCNRM,0
    2149 00009490       52          .byte   "READY FOR  1  PLAYER",0,0
    2150 00009540                   .even
    2151                    
    2152 00009540           MESS_READY_2
    2153 00009540                   MESS_MAC  RD15FONT,SPACING20,CP_CX,155,ROBO_YELLOW,STRCNRM,0
    2154 000095e0       52          .byte   "READY FOR  1 - 2  PLAYERS",0,0
    2155 000096c0                   .even
    2156                    
    2157 000096c0           MESS_READY_3
    2158 000096c0                   MESS_MAC  RD15FONT,SPACING20,CP_CX,155,ROBO_YELLOW,STRCNRM,0
    2159 00009760       52          .byte   "READY FOR  1 - 3  PLAYERS",0,0
    2160 00009840                   .even
    2161                    
    2162 00009840           MESS_READY_4
    2163 00009840                   MESS_MAC  RD15FONT,SPACING20,CP_CX,155,ROBO_YELLOW,STRCNRM,0
    2164 000098e0       52          .byte   "READY FOR  1 - 4  PLAYERS",0,0
    2165 000099c0                   .even
    2166                    
    2167 000099c0           MESS_INS_COIN
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   51

    2168 000099c0                    MESS_MAC  RD15FONT,SPACING20,CP_CX,175,ROBO_YELLOW,STRCNRM,0
    2169                    
    2170                    
    2171 00009a60       49          .byte   "INSERT COINS",0,0
    2172                    
    2173                    
    2174 00009ad0                   .even
    2175                    
    2176 00009ad0           MESS_PRESS_START
    2177 00009ad0                   MESS_MAC RD15FONT,SPACING20,CP_CX,175,ROBO_YELLOW,STRCNRM,0
    2178 00009b70       50          .byte   "PRESS START",0,0
    2179 00009be0                   .even
    2180                    
    2181                     .if 0
    2182                    
    2183                    DUMP_FS
    2184                            CALLR   DUMP_PAGE
    2185                            CLR     A0
    2186                            MOVI    DUMP_PTR,A7
    2187                            CALLA   WC_WORD                 ;SET NUMBER OF DUMPS TO ZERO
    2188                            RETS
    2189                    
    2190                    DUMP_SIZE        .equ    10*C_LONG_SIZE         ;9 LONG WORDS.
    2191                    DUMP_LAST        .equ    CMOS+08000H-DUMP_SIZE  ;Let em use the whole page!
    2192                    MAX_DUMP         .equ    8                      ;DON'T HOLD MORE THAN 12/PAGE
    2193                    
    2194                    ADD_DUMP
    2195                            MMTM    SP,B0,B1,B2
    2196                            MMTM    SP,A0,A1,A7
    2197                            CALLR   DUMP_PAGE               ;SET CMOS PAGE CORRECTLY.
    2198                            MOVE    A0,B0
    2199                            MOVE    A7,B2                   ;SAVE THESE!
    2200                            MOVE    A1,B1
    2201                    
    2202                            MOVI    DUMP_PTR,A7
    2203                            CALLA   RC_WORD                 ;GET THE INDICATOR OF HOW MANY.
    2204                            MOVI    DUMP_SIZE,A1
    2205                            MPYU    A0,A1                   ;THIS IS OFFSET INTO CMOS FOR THIS ENTRY!
    2206                    
    2207                            ADDI    DUMP_DATA,A1            ;NOW A1 POINTS WHERE WE'RE PUTTING THE DATA!
    2208                            CMPI    DUMP_LAST,A1            ;ARE WE TOO FAR FOR ANOTHER?
    2209                            JRHS    NO_DUMP                 ;YEP....SKIP IT
    2210                    
    2211                            INC     A0                      ;1 MORE OUT THERE!
    2212                            CALLA   WC_WORD                 ;CHALK IT!
    2213                    
    2214                            MOVE    A1,A7                   ;THIS IS POINTER TO STORE DATA.
    2215                            MOVE    B0,A0                   ;THIS IS A0
    2216                            CALLA   WC_LONGI
    2217                            MOVE    B1,A0                   ;THIS IS A1
    2218                            CALLA   WC_LONGI
    2219                            MOVE    A2,A0                   ;THIS IS A2
    2220                            CALLA   WC_LONGI
    2221                            MOVE    A3,A0                   ;THIS IS A3
    2222                            CALLA   WC_LONGI
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   52

    2223                            MOVE    A4,A0                   ;THIS IS A4
    2224                            CALLA   WC_LONGI
    2225                            MOVE    A5,A0                   ;THIS IS A5
    2226                            CALLA   WC_LONGI
    2227                            MOVE    A6,A0                   ;THIS IS A6
    2228                            CALLA   WC_LONGI
    2229                            MOVE    B2,A0                   ;THIS IS A7
    2230                            CALLA   WC_LONGI
    2231                            MOVE    A8,A0                   ;THIS IS A8
    2232                            CALLA   WC_LONGI
    2233                            MOVE    A9,A0                   ;THIS IS A9
    2234                            CALLA   WC_LONGI
    2235                    NO_DUMP
    2236                            MMFM    SP,A0,A1,A7
    2237                            MMFM    SP,B0,B1,B2
    2238                            RETS
    2239                    
    2240                    DUMP_PAGE
    2241                            PUSH    a1
    2242                            MOVI    DUMP_SELECT,A1          ;THIS IS DUMP PAGE
    2243                            CALLA   SET_PAGE                ;SET IT PLEASE
    2244                            MMFM    SP,A1
    2245                            RETS
    2246                    
    2247                    DISPDUMP
    2248                            CALLR   DUMP_PAGE
    2249                            MOVI    DUMP_PTR,A7
    2250                            CALLA   RC_WORD                 ;GET THE INDICATOR OF HOW MANY.
    2251                            JRZ     NOTHIN_TO_DUMP
    2252                    
    2253                            CLR     A9                      ;THIS IS CURRENT ONE
    2254                            MOVE    A0,A8                   ;THIS IS THE LAST ONE TO DO
    2255                    
    2256                    DO_ANOTHER_DPAGE
    2257                            CALLA   CLR_SCRN                ;CLEAR SCREEN
    2258                            CALLR   DUMP_PAGE
    2259                            movk    20,a10                  ;This is y coordiante of current one!
    2260                            MOVI    MAX_DUMP,A11            ;THIS IS MAX NUMBER PER PAGE.
    2261                    
    2262                    DO_ANOTHER_DUMP
    2263                            JSRP    DO_DUMP
    2264                            addk    30,a10                  ;Kick y up
    2265                            INC     A9                      ;KICK TO NEXT DUMP
    2266                            CMP     A8,A9                   ;UNTIL THEY'RE ALL DONE!
    2267                            JRHS    DUMP_DONE               ;WE'RE NOT ALL DONE YET!
    2268                    
    2269                            DSJS    A11,DO_ANOTHER_DUMP     ;NOT FOR THIS PAGE EITHER!
    2270                    
    2271                            JSRP    WAIT_MUT                ;WATCH FOR STICKS!
    2272                            JRUC    DO_ANOTHER_DPAGE
    2273                    
    2274                     .endif
    2275                    
    2276 00009be0           WAIT_MUT
    2277 00009be0     0d5f          CALLA   FORM_SWS        ;1ST STATE DOESN'T COUNT
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   53

         00009bf0 00000000! 
    2278 00009c10           WB1
    2279 00009c10                   SLEEPK  1
    2280                    
    2281 00009c50     0d5f          CALLA   FORM_SWS
         00009c60 00000000! 
    2282 00009c80     4c02          MOVE    A0,A2           
    2283 00009c90     0b82          ANDI    2002H,A2
         00009ca0 ffffdffd  
    2284 00009cc0     0b42          CMPI    2002H,A2
         00009cd0     dffd  
    2285 00009ce0     cb0f          JRNZ    WB2                     ;NOT "CLEAR"
    2286                    
    2287                    
    2288                    
    2289 00009cf0     c0f1          JRUC    WB1
    2290                    
    2291 00009d00           getcoin
    2292 00009d00     09c0          movi    coin_snd,a0
         00009d10     0048  
    2293                            ;one time in 512, do a different sound
    2294 00009d20     05ae          move    @PCNT,a14
         00009d30 00000000! 
    2295 00009d50     26ee          sll     32-9,a14
    2296 00009d60     2d2e          srl     32-9,a14
    2297 00009d70     cb02          jrnz    wugxcsnd
    2298 00009d80     09c0          movi    39h,a0
         00009d90     0039  
    2299 00009da0     0d5f  wugxcsnd        calla   triple_sound
         00009db0 00000000! 
    2300 00009dd0     0960          rets
    2301                    
    2302                    
    2303 00009de0     03e1  WB2     NOT     A1                      ;LAST = 0 AND NOW = 1 MEANS EDGE!
    2304 00009df0     5020          AND     A1,A0                   ;1'S WHERE WE HAVE POSITIVE EDGE.
    2305 00009e00     0b80          ANDI    BUTTONS,A0              ;IS IT A BUTTON?
         00009e10 ffff0f0f  
    2306 00009e30     cadd          JRZ     WB1
    2307                    
    2308                    
    2309 00009e40     09c0          movi    beep2_snd,a0
         00009e50     03da  
    2310 00009e60     0d5f          calla   triple_sound
         00009e70 00000000! 
    2311 00009e90                   RETP
    2312                    
    2313                    
    2314 00009ec0           DUMP_DONE
    2315 00009ec0                   RETP                            ;AND RETURN TO CALLER!
    2316                    
    2317 00009ef0           NOTHIN_TO_DUMP
    2318 00009ef0     0d5f          CALLA   CLR_SCRN                ;PRINT SOMETHING PLEASE
         00009f00 00000000! 
    2319 00009f20     09e8          MOVI    MESS_NODUMP,A8
         00009f30 0000a580' 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   54

    2320 00009f50                   JSRP    L_MESS
    2321 00009fc0                   RETP
    2322                    
    2323                    
    2324                     .if 0
    2325                    DO_DUMP
    2326                            MMTM    A12,A8,A9,A10,A11
    2327                    
    2328                            MOVI    DUMP_SIZE,A7
    2329                            MPYU    A9,A7                   ;THIS IS OFFSET INTO CMOS FOR THIS ENTRY!
    2330                    
    2331                            ADDI    DUMP_DATA,A7            ;NOW A1 POINTS WHERE WE'RE PUTTING THE DATA!
    2332                            MOVE    A10,A3                  ;Y IN A3
    2333                            MOVK    30,A2                   ;STORE X IN A2
    2334                            MOVK    10,A5                   ;NUMBER OF WORDS TO DUMP
    2335                    NEXT_ELE
    2336                            CALLA   RC_LONGI                ;GET A WORD
    2337                            MOVE    A0,A4                   ;HEX IN A4
    2338                    
    2339                            MOVE    A7,*A13(PDATA),L
    2340                            MOVE    A2,*A13(PDATA+LONG_SIZE),L
    2341                            MOVE    A3,*A13(PDATA+(2*LONG_SIZE)),L
    2342                            MOVE    A5,*A13(PDATA+(3*LONG_SIZE)),L
    2343                    
    2344                            JSRP    WRITE_HEX               ;WRITE IT OUT.....A0 = DATA
    2345                            MOVE    *A13(PDATA),A7,L
    2346                            MOVE    *A13(PDATA+LONG_SIZE),A2,L
    2347                            MOVE    *A13(PDATA+(2*LONG_SIZE)),A3,L
    2348                            MOVE    *A13(PDATA+(3*LONG_SIZE)),A5,L
    2349                    
    2350                            ADDI    48H,A2
    2351                    
    2352                            CMPI    6,A5                    ;WHEN WE'RE DOWN TO 4 SKIP TO NEXT LINE
    2353                            JRNZ    NO_SKIP_NOW
    2354                    
    2355                            ADDK    12,A3                   ;PUSH TO 2ND LINE
    2356                            MOVI    33,A2                   ;RE-MARGIN OVER. (30)
    2357                    
    2358                    NO_SKIP_NOW
    2359                            DSJ     A5,NEXT_ELE
    2360                    
    2361                            MMFM    A12,A8,A9,A10,A11
    2362                            RETP
    2363                    
    2364                     .endif
    2365                    
    2366 00009ff0           WRITE_HEX
    2367 00009ff0     09e8          MOVI    MESS_DUMP,A8
         0000a000 0000a4e0' 
    2368 0000a020     0d3f          CALLR   LM_SETUP                ;SETUP FOR A DUMP!
         0000a030     fe1a  
    2369 0000a040     4c69          MOVE    A3,A9                   ;MOVE Y DOWN
    2370 0000a050     2609          SLL     16,A9                   ;SHIFT Y INTO PLACE
    2371 0000a060     4049          ADD     A2,A9                   ;ADD IN X
    2372                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   55

    2373 0000a070     4c88          MOVE    A4,A8
    2374 0000a080     5663          CLR     A3                      ;NO COMMAS!
    2375 0000a090     0d3f          CALLR   HTOHXASC                ;CONVERT PLEASE!
         0000a0a0     000a  
    2376 0000a0b0                   JSRP    LM_FINIS
    2377 0000a120                   RETP
    2378                    
    2379                    
    2380 0000a150           HTOHXASC
    2381 0000a150     098f          MMTM    SP,A1,A2,A9
         0000a160     6040  
    2382 0000a170     5621          CLR     A1
    2383 0000a180     5642          CLR     A2                      ;COMMA COUNT
    2384 0000a190     a02f          MOVE    A1,-*SP                 ;HERE'S THE NULL TERMINATOR
    2385 0000a1a0     1a01          MOVK    16,A1                   ;DIVISOR FOR HEX
    2386 0000a1b0     4d09          MOVE    A8,A9
    2387 0000a1c0           HEXTASC2
    2388 0000a1c0     5708          CLR     A8
    2389 0000a1d0     5a28          DIVU    A1,A8
    2390 0000a1e0     0b09          ADDI    '0',A9                  ;MAKE THE REMAINDER ASCII
         0000a1f0     0030  
    2391 0000a200     0b49          CMPI    '9',A9                  ;IS IT IN A-F RANGE?
         0000a210     ffc6  
    2392 0000a220     c202          JRLS    HHH1
    2393 0000a230     0b09          ADDI    7,A9                    ;MAKE ALPHA!
         0000a240     0007  
    2394 0000a250           HHH1
    2395 0000a250     a12f          MOVE    A9,-*SP                 ;SAVE HERE
    2396 0000a260     4d09          MOVE    A8,A9
    2397 0000a270     ca0b          JRZ     HEXTASC3                ;BR = DONE!
    2398 0000a280     1022          INC     A2
    2399 0000a290     0b42          CMPI    3,A2                    ;COMMA CHECK    
         0000a2a0     fffc  
    2400 0000a2b0     c8f0          JRLO    HEXTASC2                ;BR = NO COMMA
    2401 0000a2c0     4c63          MOVE    A3,A3                   ;COMMAS?
    2402 0000a2d0     caee          JRZ     HEXTASC2                ;NOPE....IGNORE!
    2403                    
    2404 0000a2e0     09c2          MOVI    ',',A2
         0000a2f0     002c  
    2405 0000a300     a04f          MOVE    A2,-*SP                 ;STUFF A COMMA
    2406 0000a310     5642          CLR     A2
    2407 0000a320     c0e9          JRUC    HEXTASC2
    2408 0000a330           HEXTASC3
    2409 0000a330     09e1          MOVI    STRNGRAM,A1             ;STORE HERE FOR BLOW OUT        
         0000a340 00000000! 
    2410 0000a360     4c28          MOVE    A1,A8
    2411                    
    2412 0000a370           HEXTASC4
    2413 0000a370     95e9          MOVE    *SP+,A9
    2414 0000a380     8d21          MOVB    A9,*A1
    2415 0000a390     1101          ADDK    8,A1
    2416 0000a3a0     4d29          MOVE    A9,A9
    2417 0000a3b0     cbfb          JRNZ    HEXTASC4
    2418 0000a3c0     09af          MMFM    SP,A1,A2,A9
         0000a3d0     0206  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   56

    2419 0000a3e0     0960          RETS
    2420                    
    2421                    
    2422 0000a3f0           STRCAT
    2423 0000a3f0     098f          MMTM    SP,A7,A0,A8
         0000a400     8180  
    2424 0000a410           STRC2
    2425 0000a410     8ee0          MOVB    *A7,A0          ;WALK DOWN A7 TO ITS ZERO.
    2426 0000a420     ca02          JRZ     STRC1           ;WE'RE THERE!
    2427                    
    2428 0000a430     1107          ADDK    BYTE_SIZE,A7    ;KICK TO NEXT BYTE
    2429 0000a440     c0fc          JRUC    STRC2
    2430 0000a450           STRC1
    2431 0000a450     8f00          MOVB    *A8,A0          ;GET A BYTE FROM 2ND STRING
    2432 0000a460     8c07          MOVB    A0,*A7          ;ADD THIS TO 1ST STRING
    2433 0000a470     1107          ADDK    BYTE_SIZE,A7
    2434 0000a480     1108          ADDK    BYTE_SIZE,A8
    2435 0000a490     4c00          MOVE    A0,A0           ;DID WE JUST MOVE TERMINATOR?
    2436 0000a4a0     cbfa          JRNZ    STRC1           ;NOPE...MOVE ANOTHER
    2437                    
    2438 0000a4b0     09af          MMFM    SP,A7,A0,A8
         0000a4c0     0181  
    2439 0000a4d0     0960          RETS
    2440                    
    2441 0000a4e0           MESS_DUMP
    2442 0000a4e0                   MESS_MAC RD7FONT,SPACING07,23,227,ROBO_WHITE,STRLNRM,0
    2443                    
    2444 0000a580           MESS_NODUMP
    2445 0000a580                   MESS_MAC RD15FONT,SPACING20,200,128,ROBO_ORANGE,STRCNRM,0
    2446 0000a620       4e          .byte   "NOTHING HERE....PRESS ADVANCE!",0,0
    2447 0000a720                   .even
    2448                    
    2449 0000a720           MESS_SLASH
    2450 0000a720       2f          .byte   "/",0
    2451 0000a730                   .even
    2452                    
    2453 0000a730       20  MESS_2SPACE     .byte   "  "
    2454 0000a740       00  MESS_NULL       .byte   0
    2455 0000a750                           .even
    2456                    
    2457 0000a750           SETUP_1_OF_3
    2458 0000a750                    MESS_MAC  RD15FONT,SPACING20,CP_CX,CP_13,ROBO_LASER,STRCNRM,0
    2459 0000a7f0           SETUP_2_OF_3
    2460 0000a7f0                    MESS_MAC  RD15FONT,SPACING20,CP_CX,CP_23,ROBO_LASER,STRCNRM,0
    2461 0000a890           SETUP_3_OF_3
    2462 0000a890                    MESS_MAC  RD15FONT,SPACING20,CP_CX,CP_33,ROBO_LASER,STRCNRM,0
    2463                    
    2464 0000a930           SETUP_1_OF_2
    2465 0000a930                    MESS_MAC  RD15FONT,SPACING20,CP_CX,CP_12,ROBO_LASER,STRCNRM,0
    2466                    
    2467 0000a9d0           SETUP_2_OF_2
    2468 0000a9d0                    MESS_MAC  RD15FONT,SPACING20,CP_CX,CP_22,ROBO_LASER,STRCNRM,0
    2469                    
    2470 0000aa70           SETUP_1_OF_1
    2471 0000aa70                    MESS_MAC  RD15FONT,SPACING20,CP_CX,CP_11,ROBO_LASER,STRCNRM,0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:42 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

audits and ajustments handling                                       PAGE   57

    2472                    
    2473 0000ab10           dollar_mes
    2474 0000ab10                   JAM_STR ogmd10_ascii,5,0,200,53,SGMD8YEL,print_string_C2
    2475 0000abb0       54          .byte   "THIS GAME ACCEPTS DOLLAR BILLS",0,0
    2476 0000acb0                   .even
    2477                    
    2478                    
    2479                    
    2480                    
    2481                    
    2482                            .end

 No Errors,  No Warnings
