TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    **************************************************************
       2                    *
       3                    * Software:             Jamie Rivett
       4                    * Initiated:            5/20/94
       5                    *
       6                    * COPYRIGHT (C) 1992 WILLIAMS ELECTRONICS GAMES, INC.
       7                    *
       8                    **************************************************************
       9                    
      10                            .file   "wrestle2.asm"
      12                            .width  132
      13                            .option b,d,l,t
      14                            .mnolist
      15                    
      16                    
      17                            .include        "macros.h"
      18                            .include        "mproc.equ"             ;Mproc equates
      19                            .include        "display.equ"           ;Display proc equates
      20                            .include        "gsp.equ"               ;Gsp asm equates
      21                            .include        "sys.equ"
      22                            .include        "game.equ"
      23                            .include        "audit.equ"
      24                            .include        "plyr.equ"
      25                            .include        "anim.equ"
      26                            .include        "sound.h"
      27                            .include        "sound.equ"
      28                            .include        "ring.equ"
      29                    
      30                            .include        "imgtbl.glo"
      31                            .include        "fontsimg.glo"
      32                            .include        "bgndtbl.glo"
      33                            .include        "miscimg.glo"
      34                            .include        "jjxm.h"
      35                    
      36                            ;temp! - 314
      37                            .if DEBUG
      38                            .include        "tmpdebug.h"
      39                            .endif
      40                    
      41                    ******************************************************************************
      42                    * EXTERNAL REFERENCES
      43                    
      44                            .ref    PSTATUS2,triple_sound,change_anim1a,set_rotate_anim
      45                            .ref    get_rope_x,round_tickcount,get_process_ptr,NUM_OPPS
      46                            .ref    PALFRAM,HALT,dma_bog,GAMSTATE,pal_getf,process_ptrs
      47                            .ref    change_anim2a,announce_rnd_winner,GET_ADJ,pin_prompt
      48                            .ref    change_image,match_time,is_final_match,is_8_on_1
      49                            .ref    ADD_VOICE,p1oldwinstreak,match_winner,RNDRNG0
      50                    
      51                            .ref    calc_line_x,PCNT,drone_meters_on,FINAL_PTR
      52                            .ref    dnk_climbthru_side_anim,dnk_climbthru_bot_anim
      53                            .ref    dnk_climbthru_top_anim,dnk_climbin_bot_anim
      54                            .ref    dnk_climbin_top_anim,dnk_climbin_side_anim
      55                            .ref    get_opp_process,adjust_health,init_wres_life_data
      56                            .ref    HRTPNK_P,HRTBLU_P,UNDBLK_P,DNKPRP_P,YOKPRP_P
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE    2

      57                            .ref    LEXPRP_P,RZRPRP_P,BAMYLW_P,SHNPRP_P
      58                    
      59                            .ref    wrestler_x,wrestler_y,wrestler_z,index1,index2
      60                    
      61                            .ref    dnk_climb_up_anim,shn_climb_up_anim,bam_climb_up_anim
      62                            .ref    hrt_climb_up_anim,lex_climb_up_anim,und_climb_up_anim
      63                            .ref    yok_climb_up_anim,rzr_climb_up_anim
      64                    
      65                            .ref    bam_climbin_side_anim,bam_climbthru_side_anim
      66                            .ref    bam_climbin_top_anim,bam_climbthru_top_anim
      67                            .ref    bam_climbin_bot_anim,bam_climbthru_bot_anim
      68                            .ref    und_climbin_side_anim,und_climbthru_side_anim
      69                            .ref    und_climbin_top_anim,und_climbthru_top_anim
      70                            .ref    und_climbin_bot_anim,und_climbthru_bot_anim
      71                            .ref    rzr_climbin_side_anim,rzr_climbthru_side_anim
      72                            .ref    rzr_climbin_top_anim,rzr_climbthru_top_anim
      73                            .ref    rzr_climbin_bot_anim,rzr_climbthru_bot_anim
      74                            .ref    hrt_climbin_side_anim,hrt_climbthru_side_anim
      75                            .ref    hrt_climbin_top_anim,hrt_climbthru_top_anim
      76                            .ref    hrt_climbin_bot_anim,hrt_climbthru_bot_anim
      77                            .ref    yok_climbin_side_anim,yok_climbthru_side_anim
      78                            .ref    yok_climbin_top_anim,yok_climbthru_top_anim
      79                            .ref    yok_climbin_bot_anim,yok_climbthru_bot_anim
      80                            .ref    lex_climbin_side_anim,lex_climbthru_side_anim
      81                            .ref    lex_climbin_top_anim,lex_climbthru_top_anim
      82                            .ref    lex_climbin_bot_anim,lex_climbthru_bot_anim
      83                            .ref    shn_climbin_side_anim,shn_climbthru_side_anim
      84                            .ref    shn_climbin_top_anim,shn_climbthru_top_anim
      85                            .ref    shn_climbin_bot_anim,shn_climbthru_bot_anim
      86                            .ref    switches_cur,switches_down,switches_up
      87                            .ref    dufus_msg_off,get_rnd_wrestler,royal_rumble
      88                            .ref    START_HI_FLASHES,wrestler_count,buddy_mode_on
      89                            .ref    reduce_bog,player_pal_pref,crowd_process
      90                            .ref    wrestler_count,wrestler_count_proc,get_opp_plyrmode
      91                            .ref    THIS_GAME_TIME,STORE_AUDIT,GET_AUD,CURRENT_LADDER
      92                            .ref    AUD,match_start_time,PSTARTS,match_realtime
      93                            .ref    wrestler_audits,current_round,AUD1
      94                    
      95                    ******************************************************************************
      96                    * SYMBOLS DEFINED IN THIS FILE
      97                    
      98                    ******************************************************************************
      99                    *
     100                    * a13 = * wrestler process
     101                    * a0  = stick_val_cur
     102                    
     103 00000000            SUBR   climb_turnbuckle
     104                    
     105 00000000     4c04          move    a0,a4
     106                    
     107 00000010     1fe4          btst    MOVE_UP_BIT,a4          ;check if player should climb
     108 00000020     ca00          jrz     djfcnot_top             ;up the turnbuckle
         00000030     0088  
     109                    
     110 00000040     b5a0          move    *a13(INRING),a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE    3

         00000050     0560  
     111 00000060     cb00          jrnz    djfcno_climb
         00000070     0084  
     112                    
     113 00000080     b5a0          move    *a13(OBJ_ZPOSINT),a0
         00000090     0150  
     114 000000a0     0b40          cmpi    RING_TOP+5,a0           ;give 'em 5 pixels of leeway
         000000b0     fbfb  
     115 000000c0     c77f          jrgt    djfcnot_top
     116                    
     117                    
     118 000000d0     b5a0          move    *a13(OBJ_XPOSINT),a0
         000000e0     0110  
     119 000000f0     0b40          cmpi    RING_X_CENTER,a0
         00000100     fbcd  
     120 00000110     c70c          jrgt    djfcright
     121                    ;djfcleft
     122 00000120     0d5f          calla   get_rope_x
         00000130 00000000! 
     123 00000150     b5a1          move    *a13(OBJ_COLLX1),a1
         00000160     01e0  
     124 00000170     14a1          subk    5,a1                    ;give 'em 5
     125 00000180     4801          cmp     a0,a1                   ;a1-a0
     126 00000190     c772          jrgt    djfcno_climb
     127                    
     128 000001a0     18a3          movk    MOVE_UP_LEFT,a3         ;face top left turnbuckle
     129 000001b0     4864          cmp     a3,a4                   ;Make sure UP/LEFT is pressed
     130 000001c0     ca0c          jreq    djfcclimbit
     131 000001d0     c06e          jruc    djfcno_climb
     132                    
     133 000001e0           djfcright
     134 000001e0     0d5f          calla   get_rope_x
         000001f0 00000000! 
     135 00000210     b5a1          move    *a13(OBJ_COLLX2),a1
         00000220     01f0  
     136 00000230     10a1          addk    5,a1                    ;give 'em 5
     137 00000240     4801          cmp     a0,a1                   ;a1-a0
     138 00000250     c466          jrlt    djfcno_climb
     139                    
     140 00000260     1923          movk    MOVE_UP_RIGHT,a3        ;face top right turnbuckle
     141 00000270     4864          cmp     a3,a4                   ;Make sure UP/RIGHT is pressed
     142 00000280     cb63          jrne    djfcno_climb
     143                    
     144                    
     145 00000290           djfcclimbit
     146                    
     147                    ;If anybody is already on turnbuckles, ignore this
     148 00000290     09e4          movi    process_ptrs,a4
         000002a0 00000000! 
     149 000002c0     09c5          movi    NUM_WRES,a5
         000002d0     0007  
     150                    
     151 000002e0     9680  djfcloop        move    *a4+,a0,L
     152 000002f0     ca17          jrz     djfcnxt                 ;skip inactive
     153                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE    4

     154 00000300     b40e          move    *a0(PLYRMODE),a14
         00000310     05c0  
     155 00000320     0b4e          cmpi    MODE_ONTURNBKL,a14
         00000330     fff9  
     156 00000340     ca04          jrz     djfcfound_climber
     157 00000350     0b4e          cmpi    MODE_CLIMBTURNBKL,a14
         00000360     fff4  
     158 00000370     ca01          jrz     djfcfound_climber
     159 00000380     c00e          jruc    djfcnxt
     160                    
     161 00000390           djfcfound_climber
     162                            ;check to see if we're trying to climb the one he's on
     163 00000390     b5ae          move    *a13(OBJ_XPOSINT),a14
         000003a0     0110  
     164 000003b0     b40a          move    *a0(OBJ_XPOSINT),a10
         000003c0     0110  
     165 000003d0     0b4e          cmpi    RING_X_CENTER,a14
         000003e0     fbcd  
     166 000003f0     c704          jrgt    djfcck_rt
     167                    
     168                            ;left tbukl
     169 00000400     0b4a          cmpi    RING_X_CENTER,a10
         00000410     fbcd  
     170 00000420     c449          jrlt    djfcno_climb
     171 00000430     c003          jruc    djfcnxt
     172                    
     173 00000440           djfcck_rt       ;right tbukl
     174 00000440     0b4a          cmpi    RING_X_CENTER,a10
         00000450     fbcd  
     175 00000460     c745          jrgt    djfcno_climb
     176                    
     177 00000470     3f45  djfcnxt dsj     a5,djfcloop
     178                    
     179                    
     180                            ;we're going to climb - because we allow 'near misses' to climb,
     181                            ; we may have to glitch the guy to the corner.  do it here.
     182 00000480     09ce          movi    RING_TOP,a14
         00000490     03ff  
     183 000004a0     b1cd          move    a14,*a13(OBJ_ZPOSINT)
         000004b0     0150  
     184                    
     185 000004c0     b5a0          move    *a13(WRESTLERNUM),a0
         000004d0     0590  
     186 000004e0                   X16     a0
     187 000004f0     0b20          addi    djfcface_turnbuckle,a0
         00000500 000008e0' 
     188 00000520     8400          move    *a0,a0                          ;flip facing?
     189 00000530     ca03          jrz     djfcno_flip
     190 00000540     0bc3          xori    MOVE_UP|MOVE_DOWN|MOVE_LEFT|MOVE_RIGHT,a3       ;opposite
         00000550 0000000f  
     191 00000570           djfcno_flip
     192 00000570     b06d          move    a3,*a13(NEW_FACING_DIR)
         00000580     04d0  
     193 00000590     b5a0          move    *a13(FACING_DIR),a0
         000005a0     04c0  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE    5

     194 000005b0     4803          cmp     a0,a3
     195 000005c0     ca18          jreq    djfcclimb
     196 000005d0     0d5f          calla   set_rotate_anim
         000005e0 00000000! 
     197 00000600     0d5f          calla   change_anim1a
         00000610 00000000! 
     198                    
     199 00000630     09e0          movi    djfcclimb,a0                    ;this routine gets executed
         00000640 00000750' 
     200 00000660     b20d          move    a0,*a13(CODE_ADDR),L            ;when the rotate anim
         00000670     0430  
     201 00000680                   SETMODE WAITANIM                        ;finishes
     202                    
     203 00000730     0de0          setc
     204 00000740     0960          rets
     205                    
     206 00000750           djfcclimb
     207 00000750     b5a0          move    *a13(WRESTLERNUM),a0
         00000760     0590  
     208 00000770                   X32     a0
     209 00000780     0b20          addi    djfcclimb_anims,a0
         00000790 00000980' 
     210 000007b0     8600          move    *a0,a0,L
     211 000007c0     0d5f          calla   change_anim1a
         000007d0 00000000! 
     212                    
     213 000007f0                   SETMODE CLIMBTURNBKL
     214                    
     215 000008a0     0de0          setc
     216 000008b0     0960          rets
     217                    
     218 000008c0           djfcnot_top
     219 000008c0           djfcno_climb
     220 000008c0     0320          clrc
     221 000008d0     0960          rets
     222                    
     223                    ;0 = face turnbuckle before climb
     224                    ;1 = back to turnbuckle
     225 000008e0           djfcface_turnbuckle
     226 000008e0     0001          .word   1       ;0 Bret Hart
     227 000008f0     0001          .word   1       ;1 Razor Ramon
     228 00000900     0001          .word   1       ;2 Undertaker
     229 00000910     0000          .word   0       ;3 Yokozuna
     230 00000920     0000          .word   0       ;4 Shawn Michaels
     231 00000930     0001          .word   1       ;5 Bam Bam
     232 00000940     0000          .word   0       ;6 Doink
     233 00000950     0000          .word   0       ;7 Adam Bomb
     234 00000960     0001          .word   1       ;8 Lex Luger
     235 00000970     0000          .word   0       ;9 Referee
     236                    
     237                    
     238 00000980           djfcclimb_anims
     239 00000980 00000000!         .long   hrt_climb_up_anim       ;0 Bret Hart
     240 000009a0 00000000!         .long   rzr_climb_up_anim       ;1 Razor Ramon
     241 000009c0 00000000!         .long   und_climb_up_anim       ;2 Undertaker
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE    6

     242 000009e0 00000000!         .long   yok_climb_up_anim       ;3 Yokozuna
     243 00000a00 00000000!         .long   shn_climb_up_anim       ;4 Shawn Michaels
     244 00000a20 00000000!         .long   bam_climb_up_anim       ;5 Bam Bam
     245 00000a40 00000000!         .long   dnk_climb_up_anim       ;6 Doink
     246 00000a60 00000000!         .long   dnk_climb_up_anim       ;7 Adam Bomb
     247 00000a80 00000000!         .long   lex_climb_up_anim       ;8 Lex Luger
     248 00000aa0 00000000!         .long   dnk_climb_up_anim       ;9 Referee
     249                    
     250                    *****************************************************************************
     251                    *
     252                    * CLIMB-INS/OUTS
     253                    *
     254                    
     255 00000ac0            SUBR   ck_climb_out_bot
     256                    
     257 00000ac0     b5ae          move    *a13(PLYRMODE),a14
         00000ad0     05c0  
     258 00000ae0     0b4e          cmpi    MODE_ATTACHED,a14
         00000af0     fffc  
     259 00000b00     ca2f          jreq    cerqdone
     260 00000b10     0b4e          cmpi    MODE_RUNNING,a14
         00000b20     fffe  
     261 00000b30     ca2c          jreq    cerqdone
     262 00000b40     0b4e          cmpi    MODE_OPPOVERHEAD,a14
         00000b50     fff5  
     263 00000b60     ca29          jreq    cerqdone
     264                    
     265                    ;       calla   get_opp_process
     266                    ;       move    *a0(INRING),a0
     267                    ;       jrz     cerqdone
     268 00000b70     0d3f          callr   any_opp_outside
         00000b80     11ab  
     269 00000b90     c926          jrnc    cerqdone
     270                    
     271                            ;Far enough away from posts?
     272 00000ba0     b5a0          move    *a13(OBJ_XPOSINT),a0
         00000bb0     0110  
     273 00000bc0     0be0          subi    RING_X_CENTER,a0
         00000bd0     fbcd  
     274 00000be0     0380          abs     a0
     275 00000bf0     0b40          cmpi    10Dh,a0
         00000c00     fef2  
     276 00000c10     c71e          jrgt    cerqdone
     277                    
     278 00000c20     b5a0          move    *a13(ANIMODE),a0
         00000c30     0660  
     279 00000c40     1fa0          btst    MODE_UNINT_BIT,a0
     280 00000c50     cb1a          jrnz    cerqdone
     281                    
     282                            ;make sure we're at the bottom edge of the ring.
     283 00000c60     b7a0          move    *a13(OBJ_ZPOS),a0,L
         00000c70     0140  
     284 00000c80     0b60          cmpi    [RING_BOT,0],a0
         00000c90 fabeffff  
     285 00000cb0     cb14          jrne    cerqdone
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE    7

     286                    
     287                            ;dummy check
     288 00000cc0     0d3f          callr   idiot_check
         00000cd0     0289  
     289 00000ce0     c804          jrc     cerqclimb
     290                    
     291                            ;button press
     292 00000cf0     b5a0          move    *a13(BUT_VAL_CUR),a0
         00000d00     0b90  
     293 00000d10     4c00          move    a0,a0
     294 00000d20     ca0d          jrz     cerqdone
     295                    
     296 00000d30     b5a0  cerqclimb       move    *a13(WRESTLERNUM),a0
         00000d40     0590  
     297 00000d50                   X32     a0
     298 00000d60     0b20          addi    climbthru_bot_anims,a0
         00000d70 00002cd0' 
     299 00000d90     8600          move    *a0,a0,L
     300 00000da0     0d5f          calla   change_anim1a
         00000db0 00000000! 
     301 00000dd0     1840          movk    2,a0
     302 00000de0     b00d          move    a0,*a13(CLIMBING_THRU)
         00000df0     07e0  
     303                    
     304 00000e00     0960  cerqdone        rets
     305                    
     306                    
     307                    ********
     308 00000e10            SUBR   ck_climb_in_top
     309                    
     310 00000e10     b5ae          move    *a13(PLYRMODE),a14
         00000e20     05c0  
     311 00000e30     0b4e          cmpi    MODE_ATTACHED,a14
         00000e40     fffc  
     312 00000e50     ca3c          jreq    ejtmdone
     313 00000e60     0b4e          cmpi    MODE_DEAD,a14
         00000e70     fff6  
     314 00000e80     ca39          jreq    ejtmdone
     315 00000e90     0b4e          cmpi    MODE_RUNNING,a14
         00000ea0     fffe  
     316 00000eb0     ca36          jreq    ejtmdone
     317 00000ec0     0b4e          cmpi    MODE_INAIR,a14
         00000ed0     fffd  
     318 00000ee0     ca33          jreq    ejtmdone
     319 00000ef0     0b4e          cmpi    MODE_INAIR2,a14
         00000f00     ffea  
     320 00000f10     ca30          jreq    ejtmdone
     321 00000f20     0b4e          cmpi    MODE_OPPOVERHEAD,a14
         00000f30     fff5  
     322 00000f40     ca2d          jreq    ejtmdone
     323                    
     324 00000f50     b5a0          move    *a13(CLIMBING_THRU),a0          ;1=Climbing thru ropes flag
         00000f60     07e0  
     325 00000f70     cb2a          jrnz    ejtmdone
     326                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE    8

     327 00000f80     b5a0          move    *a13(OBJ_XPOSINT),a0
         00000f90     0110  
     328 00000fa0     0be0          subi    RING_X_CENTER,a0
         00000fb0     fbcd  
     329 00000fc0     0380          abs     a0
     330                    ;Far enough away from posts?
     331 00000fd0     0b40          cmpi    0C0h,a0         ;48h
         00000fe0     ff3f  
     332 00000ff0     c722          jrgt    ejtmdone
     333                    
     334 00001000     b5a0          move    *a13(ANIMODE),a0
         00001010     0660  
     335 00001020     1fa0          btst    MODE_UNINT_BIT,a0
     336 00001030     cb1e          jrnz    ejtmdone
     337                    
     338                            ;make sure we're at the top edge of the mat.
     339 00001040     b7a0          move    *a13(OBJ_ZPOS),a0,L
         00001050     0140  
     340 00001060     0b60          cmpi    [MAT_TOP-5,0],a0
         00001070 fc3dffff  
     341 00001090     cb18          jrne    ejtmdone
     342 000010a0     b5a0          move    *a13(MOVE_DIR),a0
         000010b0     04b0  
     343 000010c0     1fc0          btst    MOVE_DOWN_BIT,a0
     344 000010d0     ca14          jrz     ejtmdone
     345                    
     346 000010e0     0d3f          callr   idiot_check
         000010f0     0247  
     347 00001100     c804          jrc     ejtmclimb
     348                    
     349 00001110     b5a0          move    *a13(BUT_VAL_CUR),a0
         00001120     0b90  
     350 00001130     4c00          move    a0,a0
     351 00001140     ca0d          jrz     ejtmdone
     352                    
     353 00001150           ejtmclimb       
     354                    
     355 00001150     b5a0          move    *a13(WRESTLERNUM),a0
         00001160     0590  
     356 00001170                   X32     a0
     357 00001180     0b20          addi    climbin_top_anims,a0
         00001190 00003090' 
     358 000011b0     8600          move    *a0,a0,L
     359 000011c0     0d5f          calla   change_anim1a
         000011d0 00000000! 
     360 000011f0     1840          movk    2,a0
     361 00001200     b00d          move    a0,*a13(CLIMBING_THRU)
         00001210     07e0  
     362                    
     363 00001220     0960  ejtmdone        rets
     364                    
     365                    
     366                    ********
     367 00001230            SUBR   ck_climb_out_top
     368                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE    9

     369                            ;roll right on through if we're a zombie.
     370 00001230     b5ae          move    *a13(STATUS_FLAGS),a14
         00001240     0b50  
     371 00001250     1f8e          btst    B_ZOMBIE,a14
     372 00001260     cb35          jrnz    bydxzombie
     373                    
     374 00001270     b5ae          move    *a13(PLYRMODE),a14
         00001280     05c0  
     375 00001290     0b4e          cmpi    MODE_ATTACHED,a14
         000012a0     fffc  
     376 000012b0     ca2f          jreq    bydxdone
     377 000012c0     0b4e          cmpi    MODE_RUNNING,a14
         000012d0     fffe  
     378 000012e0     ca2c          jreq    bydxdone
     379 000012f0     0b4e          cmpi    MODE_OPPOVERHEAD,a14
         00001300     fff5  
     380 00001310     ca29          jreq    bydxdone
     381                    
     382                    ;       calla   get_opp_process
     383                    ;       move    *a0(INRING),a0
     384                    ;       jrz     bydxdone
     385 00001320     0d3f          callr   any_opp_outside
         00001330     1130  
     386 00001340     c926          jrnc    bydxdone
     387                    
     388                            ;Far enough away from posts?
     389 00001350     b5a0          move    *a13(OBJ_XPOSINT),a0
         00001360     0110  
     390 00001370     0be0          subi    RING_X_CENTER,a0
         00001380     fbcd  
     391 00001390     0380          abs     a0
     392 000013a0     0b40          cmpi    0C0h,a0
         000013b0     ff3f  
     393 000013c0     c71e          jrgt    bydxdone
     394                    
     395 000013d0     b5a0          move    *a13(ANIMODE),a0
         000013e0     0660  
     396 000013f0     1fa0          btst    MODE_UNINT_BIT,a0
     397 00001400     cb1a          jrnz    bydxdone
     398                    
     399                            ;make sure we're at the top edge of the ring.
     400 00001410     b7a0          move    *a13(OBJ_ZPOS),a0,L
         00001420     0140  
     401 00001430     0b60          cmpi    [RING_TOP,0],a0
         00001440 fc00ffff  
     402 00001460     cb14          jrne    bydxdone
     403                    
     404                            ;dummy check
     405 00001470     0d3f          callr   idiot_check
         00001480     020e  
     406 00001490     c804          jrc     bydxclimb
     407                    
     408                            ;button press
     409 000014a0     b5a0          move    *a13(BUT_VAL_CUR),a0
         000014b0     0b90  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   10

     410 000014c0     4c00          move    a0,a0
     411 000014d0     ca0d          jrz     bydxdone
     412                    
     413 000014e0     b5a0  bydxclimb       move    *a13(WRESTLERNUM),a0
         000014f0     0590  
     414 00001500                   X32     a0
     415 00001510     0b20          addi    climbthru_top_anims,a0
         00001520 00002e10' 
     416 00001540     8600          move    *a0,a0,L
     417 00001550     0d5f          calla   change_anim1a
         00001560 00000000! 
     418 00001580     1840          movk    2,a0
     419 00001590     b00d          move    a0,*a13(CLIMBING_THRU)
         000015a0     07e0  
     420                    
     421 000015b0     0960  bydxdone        rets
     422                    
     423 000015c0     b5a0  bydxzombie      move    *a13(WRESTLERNUM),a0
         000015d0     0590  
     424 000015e0                   X32     a0
     425 000015f0     0b20          addi    rollthru_top_anims,a0
         00001600 00003450' 
     426 00001620     8600          move    *a0,a0,L
     427                    
     428 00001630     b7ae          move    *a13(ANIBASE),a14,L
         00001640     0670  
     429 00001650     480e          cmp     a0,a14
     430 00001660     ca06          jreq    bydxskp                 ;skip if we're already doing it.
     431 00001670     0d5f          calla   change_anim1a
         00001680 00000000! 
     432 000016a0     1840          movk    2,a0
     433 000016b0     b00d          move    a0,*a13(CLIMBING_THRU)
         000016c0     07e0  
     434 000016d0     0960  bydxskp rets
     435                    
     436                    
     437                    ********
     438 000016e0            SUBR   ck_climb_in_bot
     439                    
     440 000016e0     b5ae          move    *a13(PLYRMODE),a14
         000016f0     05c0  
     441 00001700     0b4e          cmpi    MODE_ATTACHED,a14
         00001710     fffc  
     442 00001720     ca3c          jreq    cfzhdone
     443 00001730     0b4e          cmpi    MODE_DEAD,a14
         00001740     fff6  
     444 00001750     ca39          jreq    cfzhdone
     445 00001760     0b4e          cmpi    MODE_RUNNING,a14
         00001770     fffe  
     446 00001780     ca36          jreq    cfzhdone
     447 00001790     0b4e          cmpi    MODE_INAIR,a14
         000017a0     fffd  
     448 000017b0     ca33          jreq    cfzhdone
     449 000017c0     0b4e          cmpi    MODE_INAIR2,a14
         000017d0     ffea  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   11

     450 000017e0     ca30          jreq    cfzhdone
     451 000017f0     0b4e          cmpi    MODE_OPPOVERHEAD,a14
         00001800     fff5  
     452 00001810     ca2d          jreq    cfzhdone
     453                    
     454 00001820     b5a0          move    *a13(CLIMBING_THRU),a0          ;1=Climbing thru ropes flag
         00001830     07e0  
     455 00001840     cb2a          jrnz    cfzhdone
     456                    
     457                            ;Far enough away from posts?
     458 00001850     b5a0          move    *a13(OBJ_XPOSINT),a0
         00001860     0110  
     459 00001870     0be0          subi    RING_X_CENTER,a0
         00001880     fbcd  
     460 00001890     0380          abs     a0
     461 000018a0     0b40          cmpi    10Dh,a0
         000018b0     fef2  
     462 000018c0     c722          jrgt    cfzhdone
     463                    
     464 000018d0     b5a0          move    *a13(ANIMODE),a0
         000018e0     0660  
     465 000018f0     1fa0          btst    MODE_UNINT_BIT,a0
     466 00001900     cb1e          jrnz    cfzhdone
     467                    
     468                            ;make sure we're up against the bottom of the ring
     469 00001910     b7a0          move    *a13(OBJ_ZPOS),a0,L
         00001920     0140  
     470 00001930     0b60          cmpi    [MAT_BOT+5,0],a0
         00001940 fa09ffff  
     471 00001960     cb18          jrne    cfzhdone
     472                    
     473 00001970     b5a0          move    *a13(MOVE_DIR),a0
         00001980     04b0  
     474 00001990     1fe0          btst    MOVE_UP_BIT,a0
     475 000019a0     ca14          jrz     cfzhdone
     476                    
     477                            ;dummy check
     478 000019b0     0d3f          callr   idiot_check
         000019c0     01ba  
     479 000019d0     c804          jrc     cfzhclimb
     480                    
     481                            ;button press
     482 000019e0     b5a0          move    *a13(BUT_VAL_CUR),a0
         000019f0     0b90  
     483 00001a00     4c00          move    a0,a0
     484 00001a10     ca0d          jrz     cfzhdone
     485                    
     486 00001a20           cfzhclimb  
     487                    
     488 00001a20     b5a0          move    *a13(WRESTLERNUM),a0
         00001a30     0590  
     489 00001a40                   X32     a0
     490 00001a50     0b20          addi    climbin_bot_anims,a0
         00001a60 00002f50' 
     491 00001a80     8600          move    *a0,a0,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   12

     492 00001a90     0d5f          calla   change_anim1a
         00001aa0 00000000! 
     493 00001ac0     1840          movk    2,a0
     494 00001ad0     b00d          move    a0,*a13(CLIMBING_THRU)
         00001ae0     07e0  
     495                    
     496 00001af0     0960  cfzhdone        rets
     497                    
     498                    ********
     499 00001b00            SUBR   ck_climb_out_side
     500                    
     501 00001b00     b5ae          move    *a13(PLYRMODE),a14
         00001b10     05c0  
     502 00001b20     0b4e          cmpi    MODE_ATTACHED,a14
         00001b30     fffc  
     503 00001b40     ca77          jreq    wkyjdone
     504 00001b50     0b4e          cmpi    MODE_RUNNING,a14
         00001b60     fffe  
     505 00001b70     ca74          jreq    wkyjdone
     506 00001b80     0b4e          cmpi    MODE_OPPOVERHEAD,a14
         00001b90     fff5  
     507 00001ba0     ca71          jreq    wkyjdone
     508                    
     509                    ;       calla   get_opp_process
     510                    ;       move    *a0(INRING),a1
     511                    ;       jrz     wkyjdone
     512 00001bb0     0d3f          callr   any_opp_outside
         00001bc0     10a7  
     513 00001bd0     c96e          jrnc    wkyjdone
     514 00001be0     b400          move    *a0(CLIMBING_THRU),a0
         00001bf0     07e0  
     515 00001c00     0b40          CMPI    1,A0
         00001c10     fffe  
     516 00001c20     ca69          JREQ    wkyjdone
     517                    
     518                            ;Far enough away from posts?
     519 00001c30     b5a0          move    *a13(OBJ_ZPOSINT),a0
         00001c40     0150  
     520 00001c50     0be0          subi    RING_Z_CENTER,a0
         00001c60     fb5f  
     521 00001c70     0380          abs     a0
     522 00001c80     0b40          cmpi    48h,a0
         00001c90     ffb7  
     523 00001ca0     c761          jrgt    wkyjdone
     524                    
     525 00001cb0     b5a0          move    *a13(ANIMODE),a0
         00001cc0     0660  
     526 00001cd0     1fa0          btst    MODE_UNINT_BIT,a0
     527 00001ce0     cb5d          jrnz    wkyjdone
     528                    
     529                            ;make sure we're up against one of the sides
     530 00001cf0     0d5f          calla   get_rope_x
         00001d00 00000000! 
     531 00001d20     4c04          move    a0,a4
     532 00001d30     0b40          cmpi    RING_X_CENTER,a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   13

         00001d40     fbcd  
     533 00001d50     c70a          jrgt    wkyjrt
     534                    
     535 00001d60     b5a0  wkyjlf  move    *a13(STICK_VAL_CUR),a0
         00001d70     0bc0  
     536 00001d80     1fa0          btst    MOVE_LEFT_BIT,a0
     537 00001d90     ca52          jrz     wkyjdone
     538                    
     539 00001da0     4c80          move    a4,a0
     540 00001db0     b5a1          move    *a13(OBJ_COLLX1),a1
         00001dc0     01e0  
     541 00001dd0     4801          cmp     a0,a1
     542 00001de0     c60b          jrle    wkyjout_lf
     543 00001df0     c04c          jruc    wkyjdone
     544                    
     545 00001e00     b5a0  wkyjrt  move    *a13(STICK_VAL_CUR),a0
         00001e10     0bc0  
     546 00001e20     1f80          btst    MOVE_RIGHT_BIT,a0
     547 00001e30     ca48          jrz     wkyjdone
     548                    
     549 00001e40     4c80          move    a4,a0
     550 00001e50     b5a1          move    *a13(OBJ_COLLX2),a1
         00001e60     01f0  
     551 00001e70     4801          cmp     a0,a1
     552 00001e80     c503          jrge    wkyjout_rt
     553 00001e90     c042          jruc    wkyjdone
     554                    
     555 00001ea0     18c2  wkyjout_lf      movk    MOVE_DOWN_LEFT,a2
     556 00001eb0     c001          jruc    wkyjdummy
     557                    
     558 00001ec0     1942  wkyjout_rt      movk    MOVE_DOWN_RIGHT,a2
     559                    
     560 00001ed0           wkyjdummy       ;dummy check
     561 00001ed0     0d3f          callr   idiot_check
         00001ee0     0168  
     562 00001ef0     c83d          jrc     wkyjspecial_face
     563                    
     564                            ;button press
     565 00001f00     b5a0          move    *a13(BUT_VAL_CUR),a0
         00001f10     0b90  
     566 00001f20     4c00          move    a0,a0
     567 00001f30     ca38          jrz     wkyjdone
     568                    
     569 00001f40     b5a1  wkyjface        move    *a13(FACING_DIR),a1
         00001f50     04c0  
     570 00001f60     4841          cmp     a2,a1
     571 00001f70     ca1c          jreq    wkyjclimb
     572                    
     573 00001f80     b04d          move    a2,*a13(NEW_FACING_DIR)
         00001f90     04d0  
     574 00001fa0     0d5f          calla   set_rotate_anim
         00001fb0 00000000! 
     575 00001fd0     0d5f          calla   change_anim1a
         00001fe0 00000000! 
     576                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   14

     577 00002000     09e0          movi    wkyjclimb,a0
         00002010 00002140' 
     578 00002030     b20d          move    a0,*a13(CODE_ADDR),L
         00002040     0430  
     579 00002050                   SETMODE WAITANIM
     580 00002100     1820          movk    1,a0
     581 00002110     b00d          move    a0,*a13(CLIMBING_THRU)
         00002120     07e0  
     582 00002130     0960          rets
     583                    
     584 00002140     b5a0  wkyjclimb       move    *a13(WRESTLERNUM),a0
         00002150     0590  
     585 00002160                   X32     a0
     586 00002170     0b20          addi    climbthru_side_anims,a0
         00002180 000031d0' 
     587 000021a0     8600          move    *a0,a0,L
     588 000021b0     0d5f          calla   change_anim1a
         000021c0 00000000! 
     589                    
     590 000021e0                   SETMODE NORMAL
     591                    
     592 00002290     1820          movk    1,a0
     593 000022a0     b00d          move    a0,*a13(CLIMBING_THRU)
         000022b0     07e0  
     594 000022c0     0960  wkyjdone        rets
     595                    
     596 000022d0           wkyjspecial_face
     597 000022d0     b5a1          move    *a13(PLYRMODE),A1
         000022e0     05c0  
     598 000022f0     0b41          CMPI    MODE_WAITANIM,a1
         00002300     fff3  
     599 00002310     cafa          JREQ    wkyjdone
     600 00002320     c0c1          jruc    wkyjface
     601                    
     602                    ********
     603 00002330            SUBR   ck_climb_in_side
     604                    
     605 00002330     b5ae          move    *a13(PLYRMODE),a14
         00002340     05c0  
     606 00002350     0b4e          cmpi    MODE_ATTACHED,a14
         00002360     fffc  
     607 00002370     ca00          jreq    atfldone
         00002380     0093  
     608 00002390     0b4e          cmpi    MODE_DEAD,a14
         000023a0     fff6  
     609 000023b0     ca00          jreq    atfldone
         000023c0     008f  
     610 000023d0     0b4e          cmpi    MODE_OPPOVERHEAD,a14
         000023e0     fff5  
     611 000023f0     ca00          jreq    atfldone
         00002400     008b  
     612                    
     613 00002410     b5a0          move    *a13(CLIMBING_THRU),a0          ;1=Climbing thru ropes flag
         00002420     07e0  
     614 00002430     cb00          jrnz    atfldone
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   15

         00002440     0087  
     615                    
     616                    ;Far enough away from posts?
     617 00002450     b5a0          move    *a13(OBJ_ZPOSINT),a0
         00002460     0150  
     618 00002470     0be0          subi    RING_Z_CENTER,a0
         00002480     fb5f  
     619 00002490     0380          abs     a0
     620 000024a0     0b40          cmpi    0D8h,a0
         000024b0     ff27  
     621 000024c0     c77f          jrgt    atfldone
     622                    
     623                            ;is he close enough to the ring?
     624 000024d0     b5a0          move    *a13(OBJ_XPOSINT),a0
         000024e0     0110  
     625 000024f0     0b40          cmpi    RING_X_CENTER,a0
         00002500     fbcd  
     626 00002510     c408          jrlt    atflon_left
     627                    
     628                            ;he's right of center
     629 00002520     1842          movk    MOVE_LEFT_BIT,A2
     630 00002530     09e6          movi    vln_right_matedge2,a6
         00002540 00000000! 
     631 00002560     18c7          movk    MOVE_DOWN_LEFT,a7
     632 00002570     b5ae          move    *a13(OBJ_COLLX1),a14
         00002580     01e0  
     633 00002590     c007          jruc    atfld_set
     634                    
     635 000025a0           atflon_left
     636                            ;he's left of center
     637 000025a0     1862          movk    MOVE_RIGHT_BIT,A2
     638 000025b0     09e6          movi    vln_left_matedge2,a6
         000025c0 00000000! 
     639 000025e0     1947          movk    MOVE_DOWN_RIGHT,a7
     640 000025f0     b5ae          move    *a13(OBJ_COLLX2),a14
         00002600     01f0  
     641                    
     642 00002610           atfld_set
     643                    
     644 00002610     b5a0          move    *a13(PLYRMODE),a0
         00002620     05c0  
     645 00002630     0b40          cmpi    MODE_RUNNING,a0
         00002640     fffe  
     646 00002650     cb04          jrne    no_special_check
     647                    
     648 00002660     b5a0          move    *a13(GETUP_TIME),a0
         00002670     0460  
     649 00002680     cb63          jrnz    atfldone
     650                    
     651 00002690     c012          jruc    running_back_in_here
     652                    
     653 000026a0           no_special_check
     654 000026a0     b5a0          move    *a13(ANIMODE),a0
         000026b0     0660  
     655 000026c0     1fa0          btst    MODE_UNINT_BIT,a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   16

     656 000026d0     cb5e          jrnz    atfldone
     657                    
     658 000026e0     b5a0          move    *a13(PLYRMODE),a0
         000026f0     05c0  
     659 00002700     0b40          cmpi    MODE_HEADHELD,a0
         00002710     ffec  
     660 00002720     ca59          jreq    atfldone
     661 00002730     0b40          cmpi    MODE_HEADHOLD,a0
         00002740     ffef  
     662 00002750     ca56          jreq    atfldone
     663 00002760     0b40          cmpi    MODE_INAIR,a0
         00002770     fffd  
     664 00002780     ca53          jreq    atfldone
     665 00002790     0b40          cmpi    MODE_INAIR2,a0
         000027a0     ffea  
     666 000027b0     ca50          jreq    atfldone
     667                    
     668 000027c0           running_back_in_here
     669 000027c0     0d5f          calla   calc_line_x
         000027d0 00000000! 
     670 000027f0     45c0          sub     a14,a0
     671 00002800     0380          abs     a0
     672 00002810     0b40          cmpi    10,a0
         00002820     fff5  
     673 00002830     c748          jrgt    atfldone
     674                    
     675 00002840     b5a0          move    *a13(MOVE_DIR),a0
         00002850     04b0  
     676 00002860     4a40          btst    A2,a0
     677 00002870     ca44          jrz     atfldone
     678                    
     679                            ;idiot check
     680 00002880     0d3f          callr   idiot_check
         00002890     00cd  
     681 000028a0     c809          jrc     atflclimb
     682                    
     683 000028b0     b5a0          move    *a13(PLYRMODE),a0
         000028c0     05c0  
     684 000028d0     0b40          cmpi    MODE_RUNNING,a0
         000028e0     fffe  
     685 000028f0     ca04          jrz     atflclimb
     686                    
     687                            ;button press
     688 00002900     b5a0          move    *a13(BUT_VAL_CUR),a0
         00002910     0b90  
     689 00002920     4c00          move    a0,a0
     690 00002930     ca38          jrz     atfldone
     691                    
     692 00002940           atflclimb       ;he's within five pixels of his mat edge.  face the ring
     693 00002940     b5a1          move    *a13(FACING_DIR),a1
         00002950     04c0  
     694 00002960     48e1          cmp     a7,a1
     695 00002970     ca1c          jreq    atfljump_in
     696                    
     697 00002980     b0ed          move    a7,*a13(NEW_FACING_DIR)
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   17

         00002990     04d0  
     698 000029a0     0d5f          calla   set_rotate_anim
         000029b0 00000000! 
     699 000029d0     0d5f          calla   change_anim1a
         000029e0 00000000! 
     700                    
     701 00002a00     09e0          movi    atfljump_in,a0
         00002a10 00002b40' 
     702 00002a30     b20d          move    a0,*a13(CODE_ADDR),L
         00002a40     0430  
     703 00002a50                   SETMODE WAITANIM
     704 00002b00     1820          movk    1,a0
     705 00002b10     b00d          move    a0,*a13(CLIMBING_THRU)
         00002b20     07e0  
     706 00002b30     0960          rets
     707                    
     708 00002b40           atfljump_in
     709 00002b40     b5a0          move    *a13(WRESTLERNUM),a0
         00002b50     0590  
     710 00002b60                   X32     a0
     711 00002b70     0b20          addi    climbin_side_anims,a0
         00002b80 00003310' 
     712 00002ba0     8600          move    *a0,a0,L
     713 00002bb0     0d5f          calla   change_anim1a
         00002bc0 00000000! 
     714                    
     715 00002be0                   SETMODE NORMAL
     716 00002c90     1820          movk    1,a0
     717 00002ca0     b00d          move    a0,*a13(CLIMBING_THRU)
         00002cb0     07e0  
     718                    
     719 00002cc0     0960  atfldone        rets
     720                    
     721 00002cd0           climbthru_bot_anims
     722 00002cd0 00000000!         .long   hrt_climbthru_bot_anim  ;0 Bret Hart
     723 00002cf0 00000000!         .long   rzr_climbthru_bot_anim  ;1 Razor Ramon
     724 00002d10 00000000!         .long   und_climbthru_bot_anim  ;2 Undertaker
     725 00002d30 00000000!         .long   yok_climbthru_bot_anim  ;3 Yokozuna
     726 00002d50 00000000!         .long   shn_climbthru_bot_anim  ;4 Shawn Michaels
     727 00002d70 00000000!         .long   bam_climbthru_bot_anim  ;5 Bam Bam
     728 00002d90 00000000!         .long   dnk_climbthru_bot_anim  ;6 Doink
     729 00002db0 00000000!         .long   dnk_climbthru_bot_anim  ;7 Adam Bomb
     730 00002dd0 00000000!         .long   lex_climbthru_bot_anim  ;8 Lex Luger
     731 00002df0 00000000!         .long   dnk_climbthru_bot_anim  ;9 Referee
     732                    
     733 00002e10           climbthru_top_anims
     734 00002e10 00000000!         .long   hrt_climbthru_top_anim  ;0 Bret Hart
     735 00002e30 00000000!         .long   rzr_climbthru_top_anim  ;1 Razor Ramon
     736 00002e50 00000000!         .long   und_climbthru_top_anim  ;2 Undertaker
     737 00002e70 00000000!         .long   yok_climbthru_top_anim  ;3 Yokozuna
     738 00002e90 00000000!         .long   shn_climbthru_top_anim  ;4 Shawn Michaels
     739 00002eb0 00000000!         .long   bam_climbthru_top_anim  ;5 Bam Bam
     740 00002ed0 00000000!         .long   dnk_climbthru_top_anim  ;6 Doink
     741 00002ef0 00000000!         .long   dnk_climbthru_top_anim  ;7 Adam Bomb
     742 00002f10 00000000!         .long   lex_climbthru_top_anim  ;8 Lex Luger
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   18

     743 00002f30 00000000!         .long   dnk_climbthru_top_anim  ;9 Referee
     744                    
     745 00002f50           climbin_bot_anims
     746 00002f50 00000000!         .long   hrt_climbin_bot_anim    ;0 Bret Hart
     747 00002f70 00000000!         .long   rzr_climbin_bot_anim    ;1 Razor Ramon
     748 00002f90 00000000!         .long   und_climbin_bot_anim    ;2 Undertaker
     749 00002fb0 00000000!         .long   yok_climbin_bot_anim    ;3 Yokozuna
     750 00002fd0 00000000!         .long   shn_climbin_bot_anim    ;4 Shawn Michaels
     751 00002ff0 00000000!         .long   bam_climbin_bot_anim    ;5 Bam Bam
     752 00003010 00000000!         .long   dnk_climbin_bot_anim    ;6 Doink
     753 00003030 00000000!         .long   dnk_climbin_bot_anim    ;7 Adam Bomb
     754 00003050 00000000!         .long   lex_climbin_bot_anim    ;8 Lex Luger
     755 00003070 00000000!         .long   dnk_climbin_bot_anim    ;9 Referee
     756                    
     757 00003090           climbin_top_anims
     758 00003090 00000000!         .long   hrt_climbin_top_anim    ;0 Bret Hart
     759 000030b0 00000000!         .long   rzr_climbin_top_anim    ;1 Razor Ramon
     760 000030d0 00000000!         .long   und_climbin_top_anim    ;2 Undertaker
     761 000030f0 00000000!         .long   yok_climbin_top_anim    ;3 Yokozuna
     762 00003110 00000000!         .long   shn_climbin_top_anim    ;4 Shawn Michaels
     763 00003130 00000000!         .long   bam_climbin_top_anim    ;5 Bam Bam
     764 00003150 00000000!         .long   dnk_climbin_top_anim    ;6 Doink
     765 00003170 00000000!         .long   dnk_climbin_top_anim    ;7 Adam Bomb
     766 00003190 00000000!         .long   lex_climbin_top_anim    ;8 Lex Luger
     767 000031b0 00000000!         .long   dnk_climbin_top_anim    ;9 Referee
     768                    
     769 000031d0           climbthru_side_anims
     770 000031d0 00000000!         .long   hrt_climbthru_side_anim ;0 Bret Hart
     771 000031f0 00000000!         .long   rzr_climbthru_side_anim ;1 Razor Ramon
     772 00003210 00000000!         .long   und_climbthru_side_anim ;2 Undertaker
     773 00003230 00000000!         .long   yok_climbthru_side_anim ;3 Yokozuna
     774 00003250 00000000!         .long   shn_climbthru_side_anim ;4 Shawn Michaels
     775 00003270 00000000!         .long   bam_climbthru_side_anim ;5 Bam Bam
     776 00003290 00000000!         .long   dnk_climbthru_side_anim ;6 Doink
     777 000032b0 00000000!         .long   dnk_climbthru_side_anim ;7 Adam Bomb
     778 000032d0 00000000!         .long   lex_climbthru_side_anim ;8 Lex Luger
     779 000032f0 00000000!         .long   dnk_climbthru_side_anim ;9 Referee
     780                    
     781 00003310           climbin_side_anims
     782 00003310 00000000!         .long   hrt_climbin_side_anim   ;0 Bret Hart
     783 00003330 00000000!         .long   rzr_climbin_side_anim   ;1 Razor Ramon
     784 00003350 00000000!         .long   und_climbin_side_anim   ;2 Undertaker
     785 00003370 00000000!         .long   yok_climbin_side_anim   ;3 Yokozuna
     786 00003390 00000000!         .long   shn_climbin_side_anim   ;4 Shawn Michaels
     787 000033b0 00000000!         .long   bam_climbin_side_anim   ;5 Bam Bam
     788 000033d0 00000000!         .long   dnk_climbin_side_anim   ;6 Doink
     789 000033f0 00000000!         .long   dnk_climbin_side_anim   ;7 Adam Bomb
     790 00003410 00000000!         .long   lex_climbin_side_anim   ;8 Lex Luger
     791 00003430 00000000!         .long   dnk_climbin_side_anim   ;9 Referee
     792                    
     793 00003450           rollthru_top_anims
     794 00003450                   REFLONG hrt_rollthru_top_anim   ;0 Bret Hart
     795 00003470                   REFLONG rzr_rollthru_top_anim   ;1 Razor Ramon
     796 00003490                   REFLONG und_rollthru_top_anim   ;2 Undertaker
     797 000034b0                   REFLONG yok_rollthru_top_anim   ;3 Yokozuna
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   19

     798 000034d0                   REFLONG shn_rollthru_top_anim   ;4 Shawn Michaels
     799 000034f0                   REFLONG bam_rollthru_top_anim   ;5 Bam Bam
     800 00003510                   REFLONG dnk_rollthru_top_anim   ;6 Doink
     801 00003530 00000000          .long   0                       ;7 unused
     802 00003550                   REFLONG lex_rollthru_top_anim   ;8 Lex Luger
     803                    
     804                    
     805                    *****************************************************************************
     806                    *
     807                    * Updates CLIMB_START and CLIMB_LAST, and returns carry if it's time to
     808                    * climb.  Note that we can't count on idiot_check being called only once
     809                    * per tick.  As of this writing (28 Feb) it's at least two, and sometimes
     810                    * three.  If CLIMB_LAST == PCNT, quit.  If CLIMB_LAST == PCNT - 1, set
     811                    * CLIMB_LAST = PCNT, and compare CLIMB_LAST - CLIMB_START against
     812                    * IDIOT_COUNT. On GE, setc and return, else clrc and return.  If CLIMB_LAST
     813                    * isn't PCNT or PCNT-1, set it and CLIMB_START to PCNT, clrc, and rets.
     814                    *               
     815                    
     816              0015  ktfcIDIOT_COUNT .equ    21
     817                    
     818 00003570            SUBRP  idiot_check
     819                    
     820 00003570     b5ae          move    *a13(CLIMB_LAST),a14
         00003580     0c90  
     821 00003590     05a0          move    @PCNT,a0
         000035a0 00000000! 
     822 000035c0     480e          cmp     a0,a14
     823 000035d0     ca07          jreq    ktfcno
     824                    
     825 000035e0     102e          inc     a14
     826 000035f0     480e          cmp     a0,a14
     827 00003600     ca06          jreq    ktfccont
     828                    
     829                            ;new stick.
     830 00003610     b00d          move    a0,*a13(CLIMB_START)
         00003620     0c80  
     831 00003630     b00d          move    a0,*a13(CLIMB_LAST)
         00003640     0c90  
     832 00003650     0320  ktfcno  clrc
     833 00003660     0960          rets
     834                    
     835 00003670     b00d  ktfccont        move    a0,*a13(CLIMB_LAST)
         00003680     0c90  
     836 00003690     b5ae          move    *a13(CLIMB_START),a14
         000036a0     0c80  
     837 000036b0     45c0          sub     a14,a0
     838 000036c0     0b40          cmpi    ktfcIDIOT_COUNT,a0
         000036d0     ffea  
     839 000036e0     c4f6          jrlt    ktfcno
     840                    
     841                            ;climb!
     842 000036f0     0de0          setc
     843 00003700     0960          rets
     844                    
     845                    ;*****************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   20

     846                    ;*
     847                    ;* a13 = wrestler process
     848                    ;
     849                    ; SUBR  clear_damage_log
     850                    ;
     851                    ;       move    a13,a2
     852                    ;       addi    DAMAGE_HIST,a2          ;start of damage stucture
     853                    ;
     854                    ;       clr     a0
     855                    ;       movk    20,a1                   ;8 longs
     856                    ;ktfcclr_loop
     857                    ;       move    a0,*a2+,L
     858                    ;       dsj     a1,ktfcclr_loop
     859                    ;
     860                    ;       rets
     861                    ;
     862                    ;
     863                    ;*****************************************************************************
     864                    ;*
     865                    ;* a13 = wrestler process
     866                    ;* a0  = damage amount (only if negative)
     867                    ;
     868                    ; SUBR  log_damage
     869                    ;
     870                    ;       move    a0,a0
     871                    ;       jrnn    ktfcnot_damage
     872                    ;
     873                    ;       PUSH    a1,a2,a3
     874                    ;
     875                    ;       move    a13,a1
     876                    ;       move    a13,a2
     877                    ;
     878                    ;       addi    DAMAGE_HIST+19*32,a1    ;start at end of structure and
     879                    ;       addi    DAMAGE_HIST+20*32,a2    ;move everything down 1 long
     880                    ;
     881                    ;       movk    19,a3
     882                    ;ktfclp move    -*a1,-*a2,L
     883                    ;       dsjs    a3,ktfclp
     884                    ;
     885                    ;       move    a0,a1                   ;damage amount
     886                    ;       neg     a1
     887                    ;       sll     16,a1
     888                    ;       move    @round_tickcount,a2     ;ticks since match started
     889                    ;       andi    0ffffh,a2
     890                    ;       or      a1,a2
     891                    ;       move    a2,*a13(DAMAGE_HIST),L
     892                    ;
     893                    ;       PULL    a1,a2,a3
     894                    ;
     895                    ;ktfcnot_damage
     896                    ;       rets
     897                    ;
     898                    ;
     899                    ;*****************************************************************************
     900                    ;*
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   21

     901                    ;* ARGS:                a13 = wrestler process
     902                    ;*               a0 = timespan (in ticks)
     903                    ;*
     904                    ;* RETURNS:      a0 = damage total
     905                    ;*
     906                    ;* TRASHES:     a1-a6,a14
     907                    ;*
     908                    ;
     909                    ; SUBR  tally_damage
     910                    ;
     911                    ;       move    @round_tickcount,a4     ;ticks since match started
     912                    ;       clr     a5                      ;damage tally
     913                    ;
     914                    ;       move    a13,a1
     915                    ;       addi    DAMAGE_HIST,a1          ;start of damage stucture
     916                    ;
     917                    ;       movk    20,a6
     918                    ;ktfcloop
     919                    ;       move    *a1+,a2                 ;tick count
     920                    ;       jrz     ktfcexit                        ;can't have a 0 tick count
     921                    ;       move    *a1+,a3                 ;damage
     922                    ;
     923                    ;       move    a4,a14
     924                    ;       sub     a2,a14
     925                    ;       cmp     a0,a14                  ;> timespan?
     926                    ;       jrgt    ktfcexit
     927                    ;
     928                    ;       add     a3,a5
     929                    ;       dsj     a6,ktfcloop
     930                    ;
     931                    ;ktfcexit
     932                    ;       move    a5,a0
     933                    ;       rets
     934                    ;
     935                    *****************************************************************************
     936                    *
     937                    * a10 = player number (0 to NUM_WRES-1)
     938                    
     939              0050  GETUP_SIZE      equ     80 ;102 ;174    ;99
     940              013e  MAX_TIME        equ     6*TSEC
     941              0040  INV_MULT        equ     256*GETUP_SIZE/MAX_TIME
     942              00ad  ONSCR_X         equ     173
     943              00dd  OFFSCR_X        equ     221
     944                    
     945 00003710                   STRUCTPD
     946 00003710                   LONG    IPTR_FRAME
     947 00003710                   LONG    IPTR_GREEN
     948 00003710                   WORD    DISPLAY_VAL
     949                    
     950 00003710            SUBR   getup_meter
     951                    
     952                            ;HACK ALERT: In royal rumble mode, player 1 is on PLAYER 0's TEAM,
     953                            ; so this code is gonna want to put his getup meter on the left.
     954                            ; To get it over on the right where it belongs, we temporarily put
     955                            ; him on the other team.  This shouldn't break anything.
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   22

     956                    
     957 00003710     05ae          move    @royal_rumble,a14
         00003720 00000000! 
     958 00003740     ca04          jrz     fwimnorum
     959 00003750     0b4a          cmpi    1,a10           ;(plyrnum)
         00003760     fffe  
     960 00003770     cb01          jrne    fwimnorum
     961 00003780     1829          movk    1,a9            ;act like plyr 1 is on team 1.
     962 00003790           fwimnorum
     963                    
     964 00003790     4d4b          move    a10,a11                 ;a11 is PLYRNUM
     965 000037a0     4d41          move    a10,a1
     966 000037b0     0d5f          calla   get_process_ptr
         000037c0 00000000! 
     967 000037e0     4c0a          move    a0,a10                  ;a10 is our wrestler process
     968                    
     969 000037f0                   SLEEPK  2
     970                    
     971                            ;first off, figure out if this guy is even allowed to have a getup
     972                            ; meter.  Humans always get them.  A drone teammate of a human
     973                            ; doesn't get one.  Otherwise, drones only get them if the GETUP
     974                            ; powerup is set and they're the only drone on their team.
     975                    
     976 00003830     b54e          move    *a10(PLYR_TYPE),a14
         00003840     05a0  
     977 00003850     0b4e          cmpi    PTYPE_PLAYER,a14
         00003860     ffff  
     978 00003870     ca25          jreq    fwimyes         ;humans get getup meters
     979                    
     980 00003880     18e0          movk    NUM_WRES,a0
     981 00003890     09e1          movi    process_ptrs,a1
         000038a0 00000000! 
     982 000038c0     b542          move    *a10(PLYR_SIDE),a2      ;we'll need that later anyway.
         000038d0     05b0  
     983 000038e0     9623  fwimlp0 move    *a1+,a3,L
     984 000038f0     ca12          jrz     fwimnxt0                ;skip inactive
     985 00003900     486a          cmp     a3,a10
     986 00003910     ca10          jreq    fwimnxt0                ;skip self
     987 00003920     b46e          move    *a3(PLYR_SIDE),a14
         00003930     05b0  
     988 00003940     49c2          cmp     a14,a2
     989 00003950     cb0c          jrne    fwimnxt0                ;skip other team
     990 00003960     b46e          move    *a3(PLYR_TYPE),a14
         00003970     05a0  
     991 00003980     0b4e          cmpi    PTYPE_PLAYER,a14
         00003990     ffff  
     992 000039a0     ca01          jreq    fwimdie         ;we have a human teammate so we don't get one
     993 000039b0     c006          jruc    fwimnxt0
     994                    
     995 000039c0     57ce  fwimdie clr     a14
     996 000039d0     b3ca          move    a14,*a10(METER_PROC),L
         000039e0     0870  
     997 000039f0                   DIE                     ;multi-drone team--no meters
     998                    
     999 00003a20     3ea0  fwimnxt0        dsjs    a0,fwimlp0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   23

    1000                    
    1001                            ;we got through the loop and found no teammates, so we're a lone
    1002                            ; drone and we get a meter only if GETUP_POWER is set.
    1003                    ;       move    @GETUP_POWER,a14
    1004 00003a30     05ae          move    @drone_meters_on,a14
         00003a40 00000000! 
    1005 00003a60     caf5          jrz     fwimdie         ;no GETUP_POWER--no meter
    1006                    
    1007 00003a70     05a1          move    @NUM_OPPS,a1
         00003a80 00000000! 
    1008 00003aa0     0b41          cmpi    2,a1       
         00003ab0     fffd  
    1009 00003ac0     c5ef          jrge    fwimdie
    1010                    
    1011                    
    1012 00003ad0     5600  fwimyes clr     a0
    1013 00003ae0     b00d          move    a0,*a13(DISPLAY_VAL)
         00003af0     0140  
    1014                    
    1015                            ;set our x-position based on PLYR_SIDE
    1016 00003b00     09ea          movi    [OFFSCR_X,0],a10
         00003b10 00dd0000  
    1017 00003b30     4d29          move    a9,a9
    1018 00003b40     cb02          jrnz    fwimp2
    1019                    
    1020 00003b50     142a          dec     a10
    1021 00003b60     03aa          neg     a10
    1022 00003b70           fwimp2
    1023                    
    1024 00003b70     09e2          movi    RECVRBLK,a2                     ;* image (green bar)
         00003b80 00000000! 
    1025 00003ba0     09e1          movi    [109,0],a1                      ;y pos
         00003bb0 006d0000  
    1026 00003bd0     09c3          movi    1801h,a3                        ;z pos
         00003be0     1801  
    1027 00003bf0     0d3f          callr   fwimbegin_obj
         00003c00     00b1  
    1028 00003c10     b30d          move    a8,*a13(IPTR_GREEN),L
         00003c20     0120  
    1029 00003c30     09e2          movi    RECVR_R,a2                      ;* image (frame)
         00003c40 00000000! 
    1030 00003c60     4d29          move    a9,a9
    1031 00003c70     cb03          jrnz    fwimp2_meter
    1032 00003c80     09e2          movi    RECVR_L,a2                      ;* image (frame)
         00003c90 00000000! 
    1033 00003cb0           fwimp2_meter
    1034 00003cb0     09e1          movi    [189,0],a1                      ;y pos
         00003cc0 00bd0000  
    1035 00003ce0     09c3          movi    1800h,a3                        ;z pos
         00003cf0     1800  
    1036 00003d00     0d3f          callr   fwimbegin_obj
         00003d10     00a0  
    1037 00003d20     b30d          move    a8,*a13(IPTR_FRAME),L
         00003d30     0100  
    1038                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   24

    1039 00003d40     4d61          move    a11,a1
    1040 00003d50     0d5f          calla   get_process_ptr
         00003d60 00000000! 
    1041 00003d80     4c0a          move    a0,a10
    1042                    
    1043 00003d90     b3aa          move    a13,*a10(METER_PROC),L
         00003da0     0870  
    1044                    
    1045 00003db0            SUBR   slide_offscr
    1046                    
    1047                    ;Don't allow a meter to come out for awhile (unless flung)
    1048 00003db0     09c0          movi    18*60,a0        ;13
         00003dc0     0438  
    1049 00003dd0     b00a          move    a0,*a10(DELAY_METER)
         00003de0     0ad0  
    1050                    
    1051 00003df0     194b          movk    10,a11
    1052 00003e00           fwimoffscr_loop
    1053 00003e00     4d6b          move    a11,a11
    1054 00003e10     ca02          jrz     fwimupdate
    1055 00003e20     142b          dec     a11
    1056 00003e30     c022          jruc    fwimcont
    1057 00003e40           fwimupdate
    1058 00003e40     09e0          movi    [OFFSCR_X,0],a0
         00003e50 00dd0000  
    1059 00003e70     0d3f          callr   fwimset_x
         00003e80     0072  
    1060                    
    1061 00003e90     b740          move    *a10(WHOHITME),A0,L
         00003ea0     04e0  
    1062 00003eb0     b40e          move    *a0(COMBO_COUNT),A14
         00003ec0     0af0  
    1063 00003ed0     cb18          jrnz    fwimcont
    1064 00003ee0     b54e          move    *a10(DELAY_METER),a14
         00003ef0     0ad0  
    1065 00003f00     cb15          jrnz    fwimcont
    1066 00003f10     b54e          move    *a10(PLYRMODE),a14
         00003f20     05c0  
    1067 00003f30     0b4e          cmpi    MODE_DEAD,a14
         00003f40     fff6  
    1068 00003f50     ca10          jrz     fwimcont
    1069                    ;If health meter is down low, don't have getup meter come out.
    1070                    ;Unless it was a fling!
    1071 00003f60     b541          move    *a10(PLYRNUM),a1
         00003f70     0580  
    1072                            .ref    get_health
    1073 00003f80     0d5f          calla   get_health
         00003f90 00000000! 
    1074 00003fb0     0b40          cmpi    20,a0
         00003fc0     ffeb  
    1075 00003fd0     c705          jrgt    fwimnorm
    1076 00003fe0     b54e          move    *a10(GETUP_TIME),a14
         00003ff0     0460  
    1077 00004000     0b4e          cmpi    FLUNG_TIME,a14
         00004010     ff87  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   25

    1078 00004020     ca08          jrz     fwimonscr
    1079                    
    1080 00004030           fwimnorm
    1081 00004030     b54e          move    *a10(GETUP_TIME),a14
         00004040     0460  
    1082 00004050     cb05          jrnz    fwimonscr
    1083                    
    1084 00004060           fwimcont
    1085 00004060                   SLEEPK  1
    1086 000040a0     c0d5          jruc    fwimoffscr_loop
    1087                    
    1088                    
    1089 000040b0           fwimonscr
    1090 000040b0     4dcb          move    a14,a11
    1091                    
    1092 000040c0     09c0          movi    GETUP_SIZE,a0
         000040d0     0050  
    1093 000040e0     b00d          move    a0,*a13(DISPLAY_VAL)
         000040f0     0140  
    1094                    
    1095 00004100     09c0          MOVI    0BDH,A0                 ;Meter announce sound
         00004110     00bd  
    1096 00004120     0d5f          CALLA   triple_sound
         00004130 00000000! 
    1097                    
    1098 00004150     09c6          movi    120,a6
         00004160     0078  
    1099 00004170     b545          move    *a10(GETUP_TIME),a5
         00004180     0460  
    1100                    
    1101 00004190           fwimonscr_loop
    1102                    
    1103 00004190     09e0          movi    [ONSCR_X,0],a0
         000041a0 00ad0000  
    1104 000041c0     0d3f          callr   fwimset_x
         000041d0     003d  
    1105                    
    1106 000041e0     b547          move    *a10(GETUP_TIME),a7
         000041f0     0460  
    1107                    
    1108                            ;if a7 (current getup) is greater than a11 (starting getup), our
    1109                            ; scale will be messed up.  In this case, just move a7 into a11.
    1110 00004200     4967          cmp     a11,a7
    1111 00004210     c601          jrle    fwimrescale
    1112 00004220     4ceb          move    a7,a11
    1113                    
    1114 00004230           fwimrescale
    1115 00004230     09c0          movi    GETUP_SIZE,a0
         00004240     0050  
    1116 00004250     5e07          mpyu    a0,a7                   ;* GETUP_SIZE
    1117 00004260     5b67          divu    a11,a7                  ;/ INITIAL GETUP TIME
    1118                    
    1119 00004270     b5a0          move    *a13(DISPLAY_VAL),a0
         00004280     0140  
    1120 00004290     4807          cmp     a0,a7                   ;has getup been incremented?
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   26

    1121 000042a0     c605          jrle    fwimok1
    1122                    
    1123 000042b0     4ceb          move    a7,a11
    1124 000042c0     09c0          movi    GETUP_SIZE,a0
         000042d0     0050  
    1125 000042e0     5e07          mpyu    a0,a7                   ;* GETUP_SIZE
    1126 000042f0     5b67          divu    a11,a7                  ;/ INITIAL GETUP TIME
    1127 00004300           fwimok1
    1128                            .ref    dufus_msg_on
    1129                    
    1130 00004300     1426          subk    1,a6
    1131 00004310     cb13          jrnz    fwimdont_bother
    1132 00004320     b540          move    *a10(GETUP_TIME),a0
         00004330     0460  
    1133 00004340     4405          sub     a0,a5
    1134 00004350     0b45          cmpi    175,a5
         00004360     ff50  
    1135 00004370     c70d          jrgt    fwimdont_bother
    1136 00004380                   PUSH    a2,a7,a9
    1137 000043a0     1849          movk    2,a9
    1138 000043b0                   CREATE  4000h|AWARD_PID,dufus_msg_on
    1139 00004430                   PULL    a2,a7,a9
    1140 00004450           fwimdont_bother
    1141                    
    1142 00004450                   PUSH    a5,a6
    1143 00004470     0d3f          callr   fwimupdate_meter
         00004480     0037  
    1144 00004490                   PULL    a5,a6
    1145                    
    1146 000044b0     4ce7          move    a7,a7
    1147 000044c0     ca8e          jrz     slide_offscr
    1148                    
    1149 000044d0     b540          move    *a10(PLYRMODE),a0
         000044e0     05c0  
    1150 000044f0     0b40          cmpi    MODE_DEAD,a0
         00004500     fff6  
    1151 00004510     ca89          jrz     slide_offscr
    1152                    
    1153 00004520                   PUSHP   a5,a6
    1154 00004540                   SLEEPK  1
    1155 00004580                   PULLP   a5,a6
    1156 000045a0     c0be          jruc    fwimonscr_loop
    1157                    
    1158                    
    1159                    **********
    1160 000045b0            SUBRP  fwimset_x
    1161                    
    1162 000045b0     4d29          move    a9,a9
    1163 000045c0     cb01          jrnz    fwimp22
    1164 000045d0     03a0          neg     a0
    1165 000045e0           fwimp22
    1166 000045e0     0b20          addi    [200-1,0],a0                    ;center of screen
         000045f0 00c70000  
    1167 00004610     4dae          move    a13,a14
    1168 00004620     0b0e          addi    IPTR_FRAME,a14
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   27

         00004630     0100  
    1169 00004640     87c8          move    *a14,a8,L
    1170 00004650     b701          move    *a8(OXVAL),a1,L
         00004660     0080  
    1171 00004670     4420          sub     a1,a0
    1172 00004680     2bc0          sra     2,a0
    1173 00004690     1841          movk    3-1,a1
    1174 000046a0     97c8  fwimlp  move    *a14+,a8,L
    1175 000046b0     b702          move    *a8(OXVAL),a2,L
         000046c0     0080  
    1176 000046d0     4002          add     a0,a2
    1177 000046e0     b248          move    a2,*a8(OXVAL),L
         000046f0     0080  
    1178 00004700     3ce1          dsj     a1,fwimlp
    1179 00004710     0960          rets
    1180                    
    1181                    
    1182                    **********
    1183 00004720            SUBRP  fwimbegin_obj
    1184                    
    1185 00004720     09e0          movi    [200-1,0],a0                    ;x pos
         00004730 00c70000  
    1186 00004750     4140          add     a10,a0
    1187                    
    1188 00004760     09e4          movi    DMAWNZ|M_SCRNREL,a4             ;DMA flags
         00004770 0000a002  
    1189 00004790     56a5          clr     a5                              ;object ID
    1190 000047a0     56c6          clr     a6                              ;x vel
    1191 000047b0     56e7          clr     a7                              ;y vel
    1192 000047c0     0d5f          calla   BEGINOBJ
         000047d0 00000000! 
    1193 000047f0     0960          rets
    1194                    
    1195                    
    1196                    **********
    1197 00004800            SUBRP  fwimupdate_meter
    1198                    
    1199 00004800     b5a0          move    *a13(DISPLAY_VAL),a0
         00004810     0140  
    1200 00004820     4007          add     a0,a7
    1201 00004830     2fe7          srl     1,a7
    1202 00004840     b0ed          move    a7,*a13(DISPLAY_VAL)
         00004850     0140  
    1203 00004860     4ce1          move    a7,a1
    1204                    
    1205 00004870     03a1          neg     a1
    1206 00004880     0b01          addi    GETUP_SIZE,a1
         00004890     0050  
    1207 000048a0     c101          jrp     fwimok
    1208 000048b0     5621          clr     a1
    1209 000048c0     09c0  fwimok  movi    GETUP_SIZE,a0
         000048d0     0050  
    1210 000048e0     4801          cmp     a0,a1                           ;meter can't be taller
    1211 000048f0     c601          jrle    fwimok2                         ;than GETUP_SIZE pixels
    1212 00004900     4c01          move    a0,a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   28

    1213 00004910     b7a8  fwimok2 move    *a13(IPTR_GREEN),a8,L
         00004920     0120  
    1214                    
    1215 00004930     09c2          MOVI    GETUP_SIZE,A2
         00004940     0050  
    1216 00004950     4422          SUB     A1,A2
    1217 00004960     b048          MOVE    A2,*A8(OSIZEY)
         00004970     0140  
    1218 00004980     09e0          MOVI    RECVRBLK,A0
         00004990 00000000! 
    1219 000049b0     b405          MOVE    *A0(ICTRL),A5
         000049c0     0060  
    1220 000049d0     2e85          SRL     12,A5
    1221 000049e0     4c23          MOVE    A1,A3
    1222 000049f0     5ea3          MPYU    A5,A3
    1223 00004a00     b405          MOVE    *A0(ISIZEX),A5
         00004a10     0000  
    1224 00004a20     5ea3          MPYU    A5,A3
    1225 00004a30     b600          MOVE    *A0(ISAG),A0,L
         00004a40     0040  
    1226 00004a50     4060          ADD     A3,A0
    1227 00004a60     b208          MOVE    A0,*A8(OSAG),L
         00004a70     0110  
    1228                    
    1229 00004a80     0960          rets
    1230                    
    1231                    *****************************************************************************
    1232                    *
    1233                    * makes your getup meter go away if you've got one out.
    1234                    
    1235 00004a90            SUBR   ditch_getup_meter_a9
    1236 00004a90                   PUSH    a13
    1237 00004aa0     4d2d          move    a9,a13
    1238 00004ab0     0d3f          callr   ditch_getup_meter
         00004ac0     0002  
    1239 00004ad0                   PULL    a13
    1240 00004ae0     0960          rets
    1241                    
    1242 00004af0            SUBR   ditch_getup_meter
    1243                    
    1244 00004af0     b5a0          move    *a13(GETUP_TIME),a0
         00004b00     0460  
    1245 00004b10     ca18          jrz     laphcont
    1246 00004b20     b5a0          move    *a13(PLYR_DIZZY),a0
         00004b30     0600  
    1247 00004b40     cb15          jrnz    laphcont
    1248                    
    1249                    ;This guy has a getup meter on screen and is running out of control!
    1250                    ;Cause getup meter to slide off screen.
    1251                    
    1252 00004b50     b7a0          move    *a13(METER_PROC),a0,L
         00004b60     0870  
    1253 00004b70     ca12          jrz     laphcont                ;skip if we don't have a meter.
    1254 00004b80                   PUSH    a8,a9,a10
    1255 00004ba0     b608          move    *a0(PA8),a8,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   29

         00004bb0     00c0  
    1256 00004bc0     b609          move    *a0(PA9),a9,L
         00004bd0     00a0  
    1257 00004be0     b60a          move    *a0(PA10),a10,L
         00004bf0     0080  
    1258 00004c00     09c1          movi    GETUP_PID,a1
         00004c10     012b  
    1259 00004c20     09e7          movi    slide_offscr,a7
         00004c30 00003db0' 
    1260 00004c50     0d5f          calla   XFERPROC
         00004c60 00000000! 
    1261 00004c80                   PULL    a8,a9,a10
    1262                    
    1263 00004ca0     0960  laphcont        rets
    1264                    
    1265                    *****************************************************************************
    1266                    *
    1267                    *       a0  = # ticks to add
    1268                    *       a13 = * wrestler process
    1269                    
    1270 00004cb0            SUBR   inc_getup_time
    1271                    
    1272 00004cb0                   PUSH    a14
    1273 00004cc0     b5ae          move    *a13(GETUP_TIME),a14
         00004cd0     0460  
    1274 00004ce0     0b4e          cmpi    20,a14
         00004cf0     ffeb  
    1275 00004d00     c403          jrlt    gcfuexit
    1276 00004d10     400e          add     a0,a14
    1277 00004d20     b1cd          move    a14,*a13(GETUP_TIME)
         00004d30     0460  
    1278 00004d40           gcfuexit
    1279 00004d40                   PULL    a14
    1280 00004d50     0960          rets
    1281                    
    1282                    *****************************************************************************
    1283                    *
    1284                    * do rolls for any wrestler
    1285                    *
    1286                    * args : a13 = * wrestler process
    1287                    *
    1288                    * returns : Z=1 if didn't roll
    1289                    
    1290 00004d60            SUBR   do_roll
    1291                    
    1292 00004d60     b5a0          move    *a13(OBJ_ZPOSINT),a0
         00004d70     0150  
    1293 00004d80     b5ae          move    *a13(Z_BOUND),a14
         00004d90     04a0  
    1294 00004da0     ca05          jrz     ultjreg
    1295                    
    1296 00004db0     440e          sub     a0,a14
    1297 00004dc0     038e          abs     a14             ;<-new!
    1298 00004dd0     0b4e          cmpi    6,a14
         00004de0     fff9  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   30

    1299 00004df0     c627          jrle    ultjno_roll
    1300 00004e00           ultjreg
    1301 00004e00     b5a0          move    *a13(STICK_VAL_CUR),a0
         00004e10     0bc0  
    1302 00004e20     0b80          andi    MOVE_UP|MOVE_DOWN,a0
         00004e30 fffffffc  
    1303 00004e50     ca21          jrz     ultjno_roll
    1304                    
    1305 00004e60     b5ae          move    *a13(WRESTLERNUM),a14
         00004e70     0590  
    1306 00004e80                   X32     a14
    1307 00004e90     0b2e          addi    ultjroll_table,a14
         00004ea0 000050b0' 
    1308 00004ec0     87ce          move    *a14,a14,L
    1309                    
    1310 00004ed0     95c1          move    *a14+,a1                ;roll speed
    1311 00004ee0     97c2          move    *a14+,a2,L              ;z velocity
    1312                    
    1313 00004ef0     1fc0          btst    MOVE_DOWN_BIT,a0
    1314 00004f00     cb02          jrnz    ultjdown
    1315 00004f10     03a1          neg     a1                      ;must be up
    1316 00004f20     03a2          neg     a2
    1317 00004f30           ultjdown
    1318 00004f30     b24d          move    a2,*a13(OBJ_ZVEL),L
         00004f40     0310  
    1319                    
    1320 00004f50     b5a0          move    *a13(ROLL_POS),a0
         00004f60     0450  
    1321 00004f70     4001          add     a0,a1
    1322 00004f80     0b81          andi    0ffh,a1
         00004f90 ffffff00  
    1323 00004fb0     b02d          move    a1,*a13(ROLL_POS)
         00004fc0     0450  
    1324 00004fd0     97c0          move    *a14+,a0,L              ;inv multiplier
    1325 00004fe0     5e01          mpyu    a0,a1
    1326 00004ff0     2e01          srl     16,a1                   ;/65536
    1327 00005000                   X32     a1
    1328 00005010     402e          add     a1,a14
    1329 00005020     87c0          move    *a14,a0,L
    1330                     .if DEBUG
    1331                            jrnz    ultjok
    1332                            LOCKUP
    1333                    ultjok
    1334                     .endif
    1335                    
    1336 00005030     8600          move    *a0,a0,L
    1337                     .if DEBUG
    1338                            jrnz    ultjok2
    1339                            LOCKUP
    1340                    ultjok2
    1341                     .endif
    1342                    
    1343 00005040     b20d          move    a0,*a13(CUR_FRAME),L
         00005050     06c0  
    1344 00005060     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   31

    1345                    
    1346                    
    1347 00005070           ultjno_roll
    1348 00005070     5600          clr     a0
    1349 00005080     b20d          move    a0,*a13(OBJ_ZVEL),L
         00005090     0310  
    1350 000050a0     0960          rets
    1351                    
    1352                    
    1353 000050b0           ultjroll_table
    1354 000050b0                   REFLONG hrt_roll_frames ;0 Bret Hart
    1355 000050d0                   REFLONG rzr_roll_frames ;1 Razor Ramon
    1356 000050f0                   REFLONG und_roll_frames ;2 Undertaker
    1357 00005110                   REFLONG yok_roll_frames ;3 Yokozuna
    1358 00005130                   REFLONG shn_roll_frames ;4 Shawn Michaels
    1359 00005150                   REFLONG bam_roll_frames ;5 Bam Bam
    1360 00005170                   REFLONG dnk_roll_frames ;6 Doink
    1361 00005190 00000000          .long   0               ;7 unused
    1362 000051b0                   REFLONG lex_roll_frames ;8 Lex Luger
    1363                    
    1364                    
    1365                    ;
    1366                    ;*****************************************************************************
    1367                    ;
    1368                    ; SUBR  check_dizzy
    1369                    ;
    1370                    ;       movi    4*TSEC,a0
    1371                    ;       calla   tally_damage
    1372                    ;
    1373                    ;;Is this the right way to causes dizzies?
    1374                    ;;If one move is super powerful, we will tend to get dizzies when we don't want
    1375                    ;;them.  Maybe it should be based on hits over time, not damage.
    1376                    ;
    1377                    ;;A combination of the two is needed here! 10/5/94
    1378                    ;
    1379                    ;;We need less resolution on the damage that is recorded!
    1380                    ;;Perhaps 1-3?
    1381                    ;
    1382                    ;;We should allow this to happen only once per round!
    1383                    ;
    1384                    ;       cmpi    65,a0
    1385                    ;
    1386                    ;       jrlt    ultjno_dizzy
    1387                    ;
    1388                    ;       jruc    ultjno_dizzy
    1389                    ;
    1390                    ;
    1391                    ;       calla   clear_damage_log
    1392                    ;
    1393                    ;;Don't allow dizzies if your health meter is real low!
    1394                    ;;Killer Instinct sucks....
    1395                    ;       move    *a13(PLYRNUM),a1
    1396                    ;       .ref    get_health
    1397                    ;       calla   get_health
    1398                    ;       cmpi    30,a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   32

    1399                    ;       jrlt    ultjno_dizzy
    1400                    ;
    1401                    ;;Too many dizzies this round?
    1402                    ;       move    *a13(PLYR_DIZZY_CNT),a0
    1403                    ;       cmpi    1,a0                            ;Max dizzies per round
    1404                    ;       jrge    ultjno_dizzy
    1405                    ;
    1406                    ;       inc     a0
    1407                    ;       move    a0,*a13(PLYR_DIZZY_CNT)
    1408                    ;
    1409                    ;
    1410                    ;       movk    1,a0    ;return TRUE
    1411                    ;       move    a0,*a13(PLYR_DIZZY)
    1412                    ;       rets
    1413                    ;
    1414                    ;ultjno_dizzy
    1415                    ;       clr     a0      ;return FALSE
    1416                    ;       rets
    1417                    
    1418                    *****************************************************************************
    1419                    
    1420 000051d0            SUBR   form_button_value
    1421                    
    1422                            ;Combine the val_cur of the block bit with the val_down of the rest.
    1423                    
    1424 000051d0     b5a0          move    *a13(BUT_VAL_CUR),a0
         000051e0     0b90  
    1425 000051f0     0b80          andi    PLAYER_BLOCK_VAL,a0
         00005200 fffffffd  
    1426 00005220     4c01          move    a0,a1
    1427 00005230     b5a0          move    *a13(BUT_VAL_DOWN),a0
         00005240     0ba0  
    1428 00005250     5420          or      a1,a0
    1429 00005260     0960          rets
    1430                    
    1431                    ;
    1432                    ;*****************************************************************************
    1433                    ;
    1434                    ; SUBR  start_whack
    1435                    ;
    1436                    ;;a10=plyr proc
    1437                    ;;Turn on whack button graphic, animate it for a bit
    1438                    ;
    1439                    ;frame_z                .equ    202
    1440                    ;
    1441                    ;       movk    1,a0
    1442                    ;       move    a0,*a10(WHACK_CNT)
    1443                    ;
    1444                    ;       movi    [0f6h,0],a1
    1445                    ;       movi    [44h,0],a0
    1446                    ;       move    *a10(PLYRNUM),a2
    1447                    ;       jrz     zsltok
    1448                    ;       movi    [401-44h,0],a0
    1449                    ;zsltok
    1450                    ;       movi    WHAK0001,a2
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   33

    1451                    ;       movi    frame_z+2,a3                    ;Z
    1452                    ;       movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
    1453                    ;       movi    OVRHED_PID,a5
    1454                    ;       clr     a6
    1455                    ;       clr     a7
    1456                    ;       calla   BEGINOBJ
    1457                    ;       move    a8,a11
    1458                    ;
    1459                    ;       movi    [0f6h,0],a1
    1460                    ;       movi    [44h,0],a0
    1461                    ;       move    *a10(PLYRNUM),a2
    1462                    ;       jrz     zsltok2
    1463                    ;       movi    [401-44h,0],a0
    1464                    ;zsltok2
    1465                    ;       movi    WKBUTT01,a2
    1466                    ;       movi    frame_z+3,a3                    ;Z
    1467                    ;       movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
    1468                    ;       movi    OVRHED_PID,a5
    1469                    ;       clr     a6
    1470                    ;       clr     a7
    1471                    ;       calla   BEGINOBJ
    1472                    ;
    1473                    ;zsltstart
    1474                    ;       movi    butn_l,a9
    1475                    ;
    1476                    ;zsltlp move    *a10(GETUP_TIME),a0
    1477                    ;       jrz     zsltdie
    1478                    ;
    1479                    ;       move    *a9+,a0,L
    1480                    ;       jrz     zsltstart
    1481                    ;       move    *a8(OCTRL),a1
    1482                    ;       calla   obj_aniq
    1483                    ;zsltnoani
    1484                    ;       SLEEPK  3
    1485                    ;       jruc    zsltlp                  ;Going up?
    1486                    ;
    1487                    ;zsltdie
    1488                    ;       SLEEPK  10
    1489                    ;
    1490                    ;       move    a11,a0
    1491                    ;       calla   DELOBJ
    1492                    ;       jauc    DELOBJDIE
    1493                    ;
    1494                    ;
    1495                    ;butn_l
    1496                    ;       .long   WKBUTT01
    1497                    ;       .long   WKBUTT02
    1498                    ;       .long   WKBUTT03
    1499                    ;       .long   WKBUTT02
    1500                    ;     ; .long   0
    1501                    *****************************************************************************
    1502                    *
    1503                    * Gets the animation point of a multipart object.  Find the highest x and y
    1504                    * offset values among all the pieces.
    1505                    *
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   34

    1506                    * 0a0H = object table pointer
    1507                    * <a0 = [Yoff,Xoff]
    1508                    
    1509 00005270            SUBR   get_mpart_offsets
    1510 00005270                   PUSH    a1,a2,a9
    1511                    
    1512                            ;reg use
    1513                            ; a1 = current hi xoff
    1514                            ; a2 = current hi yoff
    1515                            ; a9 = loop counter
    1516                    
    1517 00005290     b409          move    *a0(IPCOUNT),a9
         000052a0     fff0  
    1518                    
    1519                            .if DEBUG
    1520                            jrle    weckbad
    1521                            cmpi    5,a9
    1522                            jrgt    weckbad
    1523                            jruc    weckok
    1524                    weckbad LOCKUP
    1525                    weckok
    1526                            .endif
    1527                    
    1528 000052b0     b401          move    *a0(IANIOFFX),a1
         000052c0     0020  
    1529 000052d0     b402          move    *a0(IANIOFFY),a2
         000052e0     0030  
    1530 000052f0     0b00          addi    ICBZ,a0
         00005300     00f0  
    1531 00005310     1429          dec     a9
    1532 00005320     c60d          jrle    weckdone
    1533                    
    1534 00005330           weckloop
    1535 00005330     b40e          move    *a0(IANIOFFX),a14
         00005340     0020  
    1536 00005350     482e          cmp     a1,a14
    1537 00005360     c601          jrle    weckxc
    1538 00005370     4dc1          move    a14,a1                  ;new hi x
    1539                    
    1540 00005380           weckxc
    1541 00005380     b40e          move    *a0(IANIOFFY),a14
         00005390     0030  
    1542 000053a0     484e          cmp     a2,a14
    1543 000053b0     c601          jrle    weckyc
    1544 000053c0     4dc2          move    a14,a2                  ;new hi y
    1545                    
    1546 000053d0           weckyc
    1547 000053d0     0b00          addi    ICPBZ,a0
         000053e0     0070  
    1548 000053f0     3da9          dsj     a9,weckloop
    1549                    
    1550 00005400           weckdone
    1551 00005400     2202          sla     16,a2
    1552 00005410     4c40          move    a2,a0
    1553 00005420     0521          zext    a1                      ;clear out sign
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   35

    1554 00005430     5420          or      a1,a0
    1555 00005440                   PULL    a1,a2,a9
    1556 00005460     0960          rets
    1557                    
    1558                    *****************************************************************************
    1559                    *
    1560                    * Gets the combined X size of a multi-part object.  The correct answer is
    1561                    * (hi anipt) + hi (size - anipt)
    1562                    *
    1563                    * 0a0H = object table pointer
    1564                    * <a0 = Xsize
    1565                    
    1566 00005470            SUBR   get_mpart_xsize
    1567 00005470                   PUSH    a1,a2,a3,a9
    1568                    
    1569                            ;reg use
    1570                            ; a1 = current hi anipt
    1571                            ; a2 = current hi size - anipt
    1572                            ; a9 = loop counter
    1573                    
    1574 00005490     b409          move    *a0(IPCOUNT),a9
         000054a0     fff0  
    1575                    
    1576 000054b0     b401          move    *a0(IANIOFFX),a1
         000054c0     0020  
    1577 000054d0     b402          move    *a0(ISIZEX),a2
         000054e0     0000  
    1578 000054f0     4422          sub     a1,a2
    1579 00005500     0b00          addi    ICBZ,a0
         00005510     00f0  
    1580 00005520     1429          dec     a9
    1581 00005530     ca10          jrz     ndcudone
    1582                    
    1583 00005540           ndculoop
    1584 00005540     b40e          move    *a0(IANIOFFX),a14
         00005550     0020  
    1585 00005560     482e          cmp     a1,a14
    1586 00005570     c601          jrle    ndcuac
    1587 00005580     4dc1          move    a14,a1                  ;new hi x
    1588                    
    1589 00005590           ndcuac
    1590 00005590     b40e          move    *a0(ISIZEX),a14
         000055a0     0000  
    1591 000055b0     b403          move    *a0(IANIOFFX),a3
         000055c0     0020  
    1592 000055d0     446e          sub     a3,a14
    1593 000055e0     484e          cmp     a2,a14
    1594 000055f0     c601          jrle    ndcusac
    1595 00005600     4dc2          move    a14,a2                  ;new hi y
    1596                    
    1597 00005610           ndcusac
    1598 00005610     0b00          addi    ICPBZ,a0
         00005620     0070  
    1599 00005630     3e09          dsj     a9,ndculoop
    1600                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   36

    1601 00005640           ndcudone
    1602 00005640     4c40          move    a2,a0
    1603 00005650     4020          add     a1,a0
    1604 00005660                   PULL    a1,a2,a3,a9
    1605 00005680     0960          rets
    1606                    
    1607                    *****************************************************************************
    1608                    *
    1609                    * Zero yer TGT_YOFF.  Do this anytime you target an opponent who's on the
    1610                    * ground.
    1611                    
    1612 00005690            SUBR   tgt_ground
    1613                    
    1614 00005690     57ce          clr     a14
    1615 000056a0     b1cd          move    a14,*a13(TGT_YOFF)
         000056b0     02b0  
    1616 000056c0     0960          rets
    1617                    
    1618                    *****************************************************************************
    1619                    *
    1620                    * Halves wrestler's X-velocity if he's moving backwards.
    1621                    
    1622 000056d0            SUBR   halve_bk_xvel
    1623                    
    1624 000056d0     b7a0          move    *a13(OBJ_XVEL),a0,L
         000056e0     02d0  
    1625 000056f0     b5ae          move    *a13(FACING_DIR),a14
         00005700     04c0  
    1626 00005710     1f8e          btst    MOVE_RIGHT_BIT,a14
    1627 00005720     cb01          jrnz    kxbeabs
    1628 00005730     03a0          neg     a0
    1629 00005740           kxbeabs
    1630 00005740     4c00          move    a0,a0
    1631 00005750     cf05          jrnn    kxbeok
    1632                    
    1633 00005760     b7a0          move    *a13(OBJ_XVEL),a0,L
         00005770     02d0  
    1634 00005780     2be0          sra     1,a0
    1635 00005790     b20d          move    a0,*a13(OBJ_XVEL),L
         000057a0     02d0  
    1636 000057b0           kxbeok
    1637 000057b0     0960          rets
    1638                    
    1639                    
    1640                    *****************************************************************************
    1641                    *
    1642                    * scroll_world moves the screen based on the midpoint of a segment connecting
    1643                    * two wrestlers.  Rules:
    1644                    *
    1645                    * - If there are two and only two active wrestlers, track on them.
    1646                    * - If there are more than two active wrestlers and two are human, track
    1647                    *   on the humans.
    1648                    * - If there are more than two active wrestlers, but only one is human,
    1649                    *   count his live opponents:
    1650                    *       0: track on only the human player
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   37

    1651                    *       1: track on human and his one live opponent
    1652                    *       2: track on the human and the mean position of the two live ones.
    1653                    *       3: track on the human and the mean position of the three live ones,
    1654                    *          with the closest counted twice.
    1655                    * - If there are more than two active wrestlers, and NONE of them are
    1656                    *   human, look for a live one.  If none are alive, track on the first
    1657                    *   dead one and his closest opponent.  If one or more is alive, track
    1658                    *   on the first live one and his closest opponent.
    1659                    * - Don't let any human players off the top of the screen.
    1660                    * - In royal rumble mode, just track on the average position of all live
    1661                    *   wrestlers.  If this results in everyone being offscreen, so be it.
    1662                    * - And finally, on top of everything else, if there's only one human
    1663                    *   player, under no circumstances will the scroller let him off-screen.
    1664                    *   He'll remain entirely on the screen regardless of whatever else might
    1665                    *   be going on. (as yet unimplemented.  coming soon...)
    1666                    *
    1667                    
    1668                    
    1669          00140000  vdeiBUFFER      equ     [20,0]
    1670                    
    1671              0000  vdeiXMINUSX     .equ    0
    1672              0100  vdeiYMINUSX     .equ    vdeiXMINUSX+32*(NUM_WRES+1)
    1673              0200  vdeiZMINUSX     .equ    vdeiYMINUSX+32*(NUM_WRES+1)
    1674                    
    1675          012f0000  LIMITXL .EQU    [12FH,0]
    1676          05e80000  LIMITXR .EQU    [5E8H,0]
    1677          02000000  LIMITYT .EQU    [200H,0]
    1678          00970000  LIMITYB .EQU    [97h,0]
    1679                    
    1680                    
    1681 000057c0            SUBR   scroll_world
    1682                    
    1683 000057c0     098f          MMTM    SP,A8,A9,A10,A11
         000057d0     00f0  
    1684                    
    1685                            .ref    in_finish_move
    1686                    
    1687 000057e0     05a0          move    @in_finish_move,a0
         000057f0 00000000! 
    1688 00005810     cb00          jrnz    vdeix
         00005820     01f4  
    1689                    
    1690 00005830     05a0          move    @HALT,a0
         00005840 00000000! 
    1691 00005860     cb00          jrnz    vdeix
         00005870     01ef  
    1692                    
    1693                            ;first, check for a royal rumble
    1694 00005880     05ae          move    @royal_rumble,a14
         00005890 00000000! 
    1695 000058b0     cb41          jrnz    vdeirumble
    1696                    
    1697                            ;check for two human players
    1698 000058c0     05a0          move    @PSTATUS2,a0
         000058d0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   38

    1699 000058f0     ca00          jrz     vdeino_humans
         00005900     014c  
    1700 00005910     0b40          cmpi    3,a0
         00005920     fffc  
    1701 00005930     cb04          jrne    vdeione_human
    1702                    
    1703                            ;two humans.  track on them.
    1704 00005940     5642          clr     a2
    1705 00005950     1823          movk    1,a3
    1706 00005960     c000          jruc    vdeiindices_set
         00005970     0158  
    1707                    
    1708 00005980           vdeione_human
    1709                            ;okay, we have only one player.  If this is one-on-one, track on
    1710                            ; him and the drone.  (also, get the human's process ptr in a8)
    1711 00005980     4c08          move    a0,a8
    1712 00005990     1428          dec     a8
    1713 000059a0                   X32     a8
    1714 000059b0     0b28          addi    process_ptrs,a8
         000059c0 00000000! 
    1715 000059e0     8708          move    *a8,a8,L
    1716                    
    1717 000059f0     05ae          move    @NUM_OPPS,a14
         00005a00 00000000! 
    1718 00005a20     142e          dec     a14
    1719 00005a30     cb05          jrnz    vdeione_v_many
    1720                    
    1721                            ;plyr v. one drone
    1722 00005a40     b502          move    *a8(PLYRNUM),a2
         00005a50     0580  
    1723 00005a60     1843          movk    2,a3
    1724 00005a70     c000          jruc    vdeiindices_set
         00005a80     0147  
    1725                    
    1726 00005a90           vdeione_v_many
    1727                            ;count live opponents.  If there is one, track the human and his
    1728                            ; closest opponent, which should be the live drone. If there are
    1729                            ; none or more than one, track only on the human.
    1730                            ;NOTE: Don't count opponents who are live but have different INRING
    1731                            ; values.
    1732 00005a90     18a0          movk    NUM_WRES-2,a0
    1733 00005aa0     09e1          movi    process_ptrs+40h,a1
         00005ab0 00000040! 
    1734 00005ad0     b502          move    *a8(PLYR_SIDE),a2
         00005ae0     05b0  
    1735 00005af0     b505          move    *a8(INRING),a5
         00005b00     0560  
    1736 00005b10     5684          clr     a4              ;live enemy counter
    1737 00005b20     9623  vdeilp0 move    *a1+,a3,L
    1738 00005b30     ca0f          jrz     vdeidone0               ;quit at first inactive since we're only
    1739                                                    ;looking at drones
    1740 00005b40     b46e          move    *a3(PLYRMODE),a14
         00005b50     05c0  
    1741 00005b60     0b4e          cmpi    MODE_DEAD,a14
         00005b70     fff6  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   39

    1742 00005b80     ca09          jreq    vdeinxt0                ;skip dead
    1743                    
    1744 00005b90     b46e          move    *a3(PLYR_SIDE),a14
         00005ba0     05b0  
    1745 00005bb0     484e          cmp     a2,a14
    1746 00005bc0     ca05          jreq    vdeinxt0                ;skip teammates
    1747                    
    1748 00005bd0     b46e          move    *a3(INRING),a14
         00005be0     0560  
    1749 00005bf0     48ae          cmp     a5,a14
    1750 00005c00     cb01          jrne    vdeinxt0                ;skip bad INRINGS
    1751                    
    1752 00005c10     1024          inc     a4
    1753 00005c20     3e20  vdeinxt0        dsj     a0,vdeilp0
    1754                    
    1755 00005c30     1424  vdeidone0       dec     a4
    1756 00005c40     ce00          jrn     vdeitrack_human_only    ;0 live opponents
         00005c50     0113  
    1757 00005c60     ca00          jrz     vdei1opp                        ;1 live opponent
         00005c70     010c  
    1758 00005c80     1424          dec     a4
    1759 00005c90     ca00          jrz     vdei2ops                        ;2 live opponents
         00005ca0     00d4  
    1760 00005cb0     c000          jruc    vdei3ops                        ;3 live opponents
         00005cc0     0091  
    1761                    
    1762                    
    1763                            ;for the three cases (vdei2ops, vdei3ops, vdeirumble) where we're tracking on
    1764                            ; a mean position rather than an actual wrestler, we store the mean
    1765                            ; position in the long word immediately before wrestler_[xyz].
    1766                            ; There's extra space allocated there.
    1767                    
    1768                            ;reggies:
    1769                            ;       a5 = x accumulator
    1770                            ;       a6 = y accumulator
    1771                            ;       a7 = z accumulator
    1772                    
    1773                    
    1774 00005cd0           vdeirumble      ;There are anywhere from 1 to 4 live wrestlers.  Track on the live
    1775                            ; ones.  If there's three, double-weight the one with the dead
    1776                            ; teammate.  Since we've only got space for one artificial set
    1777                            ; of coordinates, if we get all four alive, compute the average
    1778                            ; position of all four, put that in the artificial slot, and track
    1779                            ; on it twice.
    1780                    
    1781                            ;first, count live wrestlers (drone and human)
    1782 00005cd0     09e0          movi    process_ptrs,a0
         00005ce0 00000000! 
    1783 00005d00     1881          movk    4,a1            ;only interested in plyrnum's 0-3
    1784 00005d10     5663          clr     a3              ;live count
    1785 00005d20     5684          clr     a4              ;PLYRNUMS
    1786 00005d30     56a5          clr     a5              ; of
    1787 00005d40     56c6          clr     a6              ;  live
    1788 00005d50     56e7          clr     a7              ;   wrestlers
    1789 00005d60     9602  vdeilp3 move    *a0+,a2,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   40

    1790 00005d70     b44e          move    *a2(PLYRMODE),a14
         00005d80     05c0  
    1791 00005d90     0b4e          cmpi    MODE_DEAD,a14
         00005da0     fff6  
    1792 00005db0     ca09          jreq    vdeinxt3
    1793 00005dc0     b44e          move    *a2(I_WILL_DIE),a14
         00005dd0     0b30  
    1794 00005de0     cb06          jrnz    vdeinxt3
    1795 00005df0     1023          inc     a3
    1796 00005e00     4cc7          move    a6,a7
    1797 00005e10     4ca6          move    a5,a6
    1798 00005e20     4c85          move    a4,a5
    1799 00005e30     b444          move    *a2(PLYRNUM),a4
         00005e40     0580  
    1800 00005e50     3e01  vdeinxt3        dsj     a1,vdeilp3
    1801                    
    1802                            ;okay, branch based on the live count
    1803 00005e60     1423          dec     a3
    1804 00005e70     ce05          jrn     vdeirr0liv              ;none alive?  shouldn't happen.
    1805 00005e80     ca08          jrz     vdeirr1liv
    1806 00005e90     1443          subk    2,a3
    1807 00005ea0     ce0a          jrn     vdeirr2liv
    1808 00005eb0     ca0d          jrz     vdeirr3liv
    1809 00005ec0     c032          jruc    vdeirr4liv
    1810                    
    1811 00005ed0           vdeirr0liv      ;none alive(!?)  Track on the humans
    1812 00005ed0     5642          clr     a2
    1813 00005ee0     1823          movk    1,a3
    1814 00005ef0     c000          jruc    vdeiindices_set
         00005f00     00ff  
    1815                    
    1816 00005f10           vdeirr1liv      ;one alive.  Track on him.
    1817 00005f10     4c82          move    a4,a2
    1818 00005f20     4c83          move    a4,a3
    1819 00005f30     c000          jruc    vdeiindices_set
         00005f40     00fb  
    1820                    
    1821 00005f50           vdeirr2liv      ;two alive.  Track on them.
    1822 00005f50     4c82          move    a4,a2
    1823 00005f60     4ca3          move    a5,a3
    1824 00005f70     c000          jruc    vdeiindices_set
         00005f80     00f7  
    1825                    
    1826 00005f90           vdeirr3liv      ;three alive.  Since one human CAN'T be dead, the dead one must
    1827                            ; be a drone.  Track on the drone and the average position of the
    1828                            ; wrestlers. (a5 and a6 must be the humans, a4 the drone)
    1829                    
    1830                            ;vdei0 (human)
    1831 00005f90     09e0          movi    wrestler_x,a0
         00005fa0 00000000! 
    1832 00005fc0     b605          move    *a0(vdeiXMINUSX),a5,L
         00005fd0     0000  
    1833 00005fe0     b606          move    *a0(vdeiYMINUSX),a6,L
         00005ff0     0100  
    1834 00006000     b607          move    *a0(vdeiZMINUSX),a7,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   41

         00006010     0200  
    1835                    
    1836                            ;vdei1 (human)
    1837 00006020     09e0          movi    wrestler_x+20h,a0
         00006030 00000020! 
    1838 00006050     b60e          move    *a0(vdeiXMINUSX),a14,L
         00006060     0000  
    1839 00006070     41c5          add     a14,a5
    1840 00006080     b60e          move    *a0(vdeiYMINUSX),a14,L
         00006090     0100  
    1841 000060a0     41c6          add     a14,a6
    1842 000060b0     b60e          move    *a0(vdeiZMINUSX),a14,L
         000060c0     0200  
    1843 000060d0     41c7          add     a14,a7
    1844                    
    1845                            ;divide
    1846 000060e0     2be5          sra     1,a5
    1847 000060f0     2be6          sra     1,a6
    1848 00006100     2be7          sra     1,a7
    1849                    
    1850                            ;store
    1851 00006110     09e0          movi    wrestler_x-20h,a0
         00006120 ffffffe0! 
    1852 00006140     b2a0          move    a5,*a0(vdeiXMINUSX),L
         00006150     0000  
    1853 00006160     b2c0          move    a6,*a0(vdeiYMINUSX),L
         00006170     0100  
    1854 00006180     b2e0          move    a7,*a0(vdeiZMINUSX),L
         00006190     0200  
    1855                    
    1856                            ;go
    1857 000061a0     09c2          movi    -1,a2
         000061b0     ffff  
    1858 000061c0     4c83          move    a4,a3
    1859 000061d0     c000          jruc    vdeiindices_set
         000061e0     00d1  
    1860                    
    1861                    
    1862 000061f0           vdeirr4liv      ;four alive.  Track on all of 'em.
    1863                    
    1864                            ;vdei0
    1865 000061f0     09e0          movi    wrestler_x,a0
         00006200 00000000! 
    1866 00006220     b605          move    *a0(vdeiXMINUSX),a5,L
         00006230     0000  
    1867 00006240     b606          move    *a0(vdeiYMINUSX),a6,L
         00006250     0100  
    1868 00006260     b607          move    *a0(vdeiZMINUSX),a7,L
         00006270     0200  
    1869                    
    1870                            ;vdei1
    1871 00006280     09e0          movi    wrestler_x+20h,a0
         00006290 00000020! 
    1872 000062b0     b60e          move    *a0(vdeiXMINUSX),a14,L
         000062c0     0000  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   42

    1873 000062d0     41c5          add     a14,a5
    1874 000062e0     b60e          move    *a0(vdeiYMINUSX),a14,L
         000062f0     0100  
    1875 00006300     41c6          add     a14,a6
    1876 00006310     b60e          move    *a0(vdeiZMINUSX),a14,L
         00006320     0200  
    1877 00006330     41c7          add     a14,a7
    1878                    
    1879                            ;vdei2
    1880 00006340     09e0          movi    wrestler_x+40h,a0
         00006350 00000040! 
    1881 00006370     b60e          move    *a0(vdeiXMINUSX),a14,L
         00006380     0000  
    1882 00006390     41c5          add     a14,a5
    1883 000063a0     b60e          move    *a0(vdeiYMINUSX),a14,L
         000063b0     0100  
    1884 000063c0     41c6          add     a14,a6
    1885 000063d0     b60e          move    *a0(vdeiZMINUSX),a14,L
         000063e0     0200  
    1886 000063f0     41c7          add     a14,a7
    1887                    
    1888                            ;vdei3
    1889 00006400     09e0          movi    wrestler_x+60h,a0
         00006410 00000060! 
    1890 00006430     b60e          move    *a0(vdeiXMINUSX),a14,L
         00006440     0000  
    1891 00006450     41c5          add     a14,a5
    1892 00006460     b60e          move    *a0(vdeiYMINUSX),a14,L
         00006470     0100  
    1893 00006480     41c6          add     a14,a6
    1894 00006490     b60e          move    *a0(vdeiZMINUSX),a14,L
         000064a0     0200  
    1895 000064b0     41c7          add     a14,a7
    1896                    
    1897                            ;divide
    1898 000064c0     2bc5          sra     2,a5
    1899 000064d0     2bc6          sra     2,a6
    1900 000064e0     2bc7          sra     2,a7
    1901                    
    1902                            ;store
    1903 000064f0     09e0          movi    wrestler_x-20h,a0
         00006500 ffffffe0! 
    1904 00006520     b2a0          move    a5,*a0(vdeiXMINUSX),L
         00006530     0000  
    1905 00006540     b2c0          move    a6,*a0(vdeiYMINUSX),L
         00006550     0100  
    1906 00006560     b2e0          move    a7,*a0(vdeiZMINUSX),L
         00006570     0200  
    1907                    
    1908                            ;go
    1909 00006580     09c2          movi    -1,a2
         00006590     ffff  
    1910 000065a0     09c3          movi    -1,a3
         000065b0     ffff  
    1911 000065c0     c000          jruc    vdeiindices_set
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   43

         000065d0     0092  
    1912                    
    1913                    
    1914 000065e0           vdei3ops        ;opponents must be plyrnum's 2, 3, and 4.
    1915                    
    1916                            ;closest
    1917 000065e0     b500          move    *a8(CLOSEST_NUM),a0
         000065f0     03a0  
    1918 00006600                   X32     a0
    1919 00006610     0b20          addi    wrestler_x,a0
         00006620 00000000! 
    1920 00006640     b605          move    *a0(vdeiXMINUSX),a5,L
         00006650     0000  
    1921 00006660     b606          move    *a0(vdeiYMINUSX),a6,L
         00006670     0100  
    1922 00006680     b607          move    *a0(vdeiZMINUSX),a7,L
         00006690     0200  
    1923                    
    1924                            ;vdei2
    1925 000066a0     09e0          movi    wrestler_x+40h,a0
         000066b0 00000040! 
    1926 000066d0     b60e          move    *a0(vdeiXMINUSX),a14,L
         000066e0     0000  
    1927 000066f0     41c5          add     a14,a5
    1928 00006700     b60e          move    *a0(vdeiYMINUSX),a14,L
         00006710     0100  
    1929 00006720     41c6          add     a14,a6
    1930 00006730     b60e          move    *a0(vdeiZMINUSX),a14,L
         00006740     0200  
    1931 00006750     41c7          add     a14,a7
    1932                    
    1933                            ;vdei3
    1934 00006760     09e0          movi    wrestler_x+60h,a0
         00006770 00000060! 
    1935 00006790     b60e          move    *a0(vdeiXMINUSX),a14,L
         000067a0     0000  
    1936 000067b0     41c5          add     a14,a5
    1937 000067c0     b60e          move    *a0(vdeiYMINUSX),a14,L
         000067d0     0100  
    1938 000067e0     41c6          add     a14,a6
    1939 000067f0     b60e          move    *a0(vdeiZMINUSX),a14,L
         00006800     0200  
    1940 00006810     41c7          add     a14,a7
    1941                    
    1942                            ;vdei4
    1943 00006820     09e0          movi    wrestler_x+80h,a0
         00006830 00000080! 
    1944 00006850     b60e          move    *a0(vdeiXMINUSX),a14,L
         00006860     0000  
    1945 00006870     41c5          add     a14,a5
    1946 00006880     b60e          move    *a0(vdeiYMINUSX),a14,L
         00006890     0100  
    1947 000068a0     41c6          add     a14,a6
    1948 000068b0     b60e          move    *a0(vdeiZMINUSX),a14,L
         000068c0     0200  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   44

    1949 000068d0     41c7          add     a14,a7
    1950                    
    1951                            ;divide
    1952 000068e0     2bc5          sra     2,a5
    1953 000068f0     2bc6          sra     2,a6
    1954 00006900     2bc7          sra     2,a7
    1955                    
    1956                            ;store
    1957 00006910     09e0          movi    wrestler_x-20h,a0
         00006920 ffffffe0! 
    1958 00006940     b2a0          move    a5,*a0(vdeiXMINUSX),L
         00006950     0000  
    1959 00006960     b2c0          move    a6,*a0(vdeiYMINUSX),L
         00006970     0100  
    1960 00006980     b2e0          move    a7,*a0(vdeiZMINUSX),L
         00006990     0200  
    1961                    
    1962                            ;go
    1963 000069a0     b502          move    *a8(PLYRNUM),a2
         000069b0     0580  
    1964 000069c0     09c3          movi    -1,a3
         000069d0     ffff  
    1965 000069e0     c051          jruc    vdeiindices_set
    1966                    
    1967 000069f0           vdei2ops        ;opponents could have 2, 3, or 4.  loop.
    1968 000069f0     56a5          clr     a5
    1969 00006a00     56c6          clr     a6
    1970 00006a10     56e7          clr     a7
    1971 00006a20     18a9          movk    NUM_WRES-2,a9           ;only check drones
    1972 00006a30     09e1          movi    process_ptrs+40h,a1
         00006a40 00000040! 
    1973 00006a60     b502          move    *a8(PLYR_SIDE),a2
         00006a70     05b0  
    1974 00006a80     b50b          move    *a8(INRING),a11
         00006a90     0560  
    1975 00006aa0     9620  vdeilp2 move    *a1+,a0,L
    1976 00006ab0     ca17          jrz     vdeidone2               ;quit at first inactive--only checking drones
    1977                    
    1978 00006ac0     b40e          move    *a0(PLYRMODE),a14
         00006ad0     05c0  
    1979 00006ae0     0b4e          cmpi    MODE_DEAD,a14
         00006af0     fff6  
    1980 00006b00     ca11          jreq    vdeinxt2                ;skip dead
    1981                    
    1982 00006b10     b40e          move    *a0(PLYR_SIDE),a14
         00006b20     05b0  
    1983 00006b30     49c2          cmp     a14,a2
    1984 00006b40     ca0d          jreq    vdeinxt2                ;skip teammates
    1985                    
    1986 00006b50     b40e          move    *a0(INRING),a14
         00006b60     0560  
    1987 00006b70     49cb          cmp     a14,a11
    1988 00006b80     cb09          jrne    vdeinxt2                ;skip bad INRINGs
    1989                    
    1990 00006b90     b60e          move    *a0(OBJ_XPOS),a14,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   45

         00006ba0     0100  
    1991 00006bb0     41c5          add     a14,a5
    1992 00006bc0     b60e          move    *a0(OBJ_YPOS),a14,L
         00006bd0     0120  
    1993 00006be0     41c6          add     a14,a6
    1994 00006bf0     b60e          move    *a0(OBJ_ZPOS),a14,L
         00006c00     0140  
    1995 00006c10     41c7          add     a14,a7
    1996                    
    1997 00006c20     3f29  vdeinxt2        dsj     a9,vdeilp2
    1998                    
    1999 00006c30           vdeidone2       ;divide
    2000 00006c30     2be5          sra     1,a5
    2001 00006c40     2be6          sra     1,a6
    2002 00006c50     2be7          sra     1,a7
    2003                    
    2004                            ;store
    2005 00006c60     09e0          movi    wrestler_x-20h,a0
         00006c70 ffffffe0! 
    2006 00006c90     b2a0          move    a5,*a0(vdeiXMINUSX),L
         00006ca0     0000  
    2007 00006cb0     b2c0          move    a6,*a0(vdeiYMINUSX),L
         00006cc0     0100  
    2008 00006cd0     b2e0          move    a7,*a0(vdeiZMINUSX),L
         00006ce0     0200  
    2009                    
    2010                            ;go
    2011 00006cf0     b502          move    *a8(PLYRNUM),a2
         00006d00     0580  
    2012 00006d10     09c3          movi    -1,a3
         00006d20     ffff  
    2013 00006d30     c01c          jruc    vdeiindices_set
    2014                    
    2015                    
    2016 00006d40     b502  vdei1opp        move    *a8(PLYRNUM),a2
         00006d50     0580  
    2017 00006d60     b503          move    *a8(CLOSEST_NUM),a3
         00006d70     03a0  
    2018 00006d80     c017          jruc    vdeiindices_set
    2019                    
    2020 00006d90           vdeitrack_human_only
    2021 00006d90     b502          move    *a8(PLYRNUM),a2
         00006da0     0580  
    2022 00006db0     4c43          move    a2,a3
    2023 00006dc0     c013          jruc    vdeiindices_set
    2024                    
    2025 00006dd0           vdeino_humans
    2026                            ;attract mode play.  track on first live drone and his closest
    2027                            ; opponent.
    2028 00006dd0     18e0          movk    NUM_WRES,a0
    2029 00006de0     09e1          movi    process_ptrs,a1
         00006df0 00000000! 
    2030 00006e10     9622  vdeilp1 move    *a1+,a2,L
    2031 00006e20     ca0a          jrz     vdeinxt1                ;skip inactive
    2032 00006e30     b44e          move    *a2(PLYRMODE),a14
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   46

         00006e40     05c0  
    2033 00006e50     0b4e          cmpi    MODE_DEAD,a14
         00006e60     fff6  
    2034 00006e70     ca05          jreq    vdeinxt1                ;skip dead (shouldn't happen)
    2035                    
    2036                            ;found a live drone.  track on him and his closest opp
    2037 00006e80     b443          move    *a2(CLOSEST_NUM),a3
         00006e90     03a0  
    2038 00006ea0     b442          move    *a2(PLYRNUM),a2
         00006eb0     0580  
    2039 00006ec0     c003          jruc    vdeiindices_set
    2040                    
    2041 00006ed0     3da0  vdeinxt1        dsj     a0,vdeilp1
    2042                    
    2043                            ;bizarre.  everyone's dead in the attract mode.  Just track on
    2044                            ; first two drones.
    2045 00006ee0     1842          movk    2,a2
    2046 00006ef0     1863          movk    3,a3
    2047                            ;fall through to vdeiindices_set
    2048                    
    2049 00006f00           vdeiindices_set
    2050                            ;a2 and a3 are PLYRNUM's of wrestlers to track on.  They MAY be
    2051                            ; the same.
    2052 00006f00     4c40          move    a2,a0
    2053 00006f10     4c4a          move    a2,a10
    2054 00006f20     4c48          move    a2,a8
    2055 00006f30                   X32     a0
    2056 00006f40                   X32     a10
    2057 00006f50                   X32     a8
    2058 00006f60     0b20          addi    wrestler_x,a0
         00006f70 00000000! 
    2059 00006f90     0b2a          addi    wrestler_y,a10
         00006fa0 00000000! 
    2060 00006fc0     0b28          addi    wrestler_z,a8
         00006fd0 00000000! 
    2061                    
    2062 00006ff0     4c61          move    a3,a1
    2063 00007000     4c6b          move    a3,a11
    2064 00007010     4c69          move    a3,a9
    2065 00007020                   X32     a1
    2066 00007030                   X32     a11
    2067 00007040                   X32     a9
    2068 00007050     0b21          addi    wrestler_x,a1
         00007060 00000000! 
    2069 00007080     0b2b          addi    wrestler_y,a11
         00007090 00000000! 
    2070 000070b0     0b29          addi    wrestler_z,a9
         000070c0 00000000! 
    2071                    
    2072                            ;wrestler1 (*x,*y,*z) = (a0,a10,a8)
    2073                            ;wrestler2 (*x,*y,*z) = (a1,a11,a9)
    2074                    
    2075 000070e0           vdeivalues_set
    2076 000070e0     8600          move    *a0,a0,L
    2077 000070f0     8621          move    *a1,a1,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   47

    2078 00007100     4001          add     a0,a1
    2079 00007110     2be1          sra     1,a1
    2080 00007120     0d01          subi    [200,0],a1              ;middle of screen
         00007130 ff37ffff  
    2081                    
    2082 00007150     07a2          move    @WORLDTLX,a2,L
         00007160 00000000! 
    2083 00007180     4441          sub     a2,a1
    2084 00007190     c105          jrp     vdeipos
    2085                    
    2086 000071a0     0b21          addi    vdeiBUFFER,a1
         000071b0 00140000  
    2087 000071d0     c112          jrp     vdeiwide
    2088 000071e0     c004          jruc    vdeicont
    2089                    
    2090 000071f0     0d01  vdeipos subi    vdeiBUFFER,a1
         00007200 ffebffff  
    2091 00007220     ce0d          jrn     vdeiwide
    2092                    
    2093 00007230     2ba1  vdeicont        sra     3,a1
    2094 00007240     4022          add     a1,a2
    2095                    
    2096 00007250     0b62          cmpi    [12fh,0],a2
         00007260 fed0ffff  
    2097 00007280     c407          jrlt    vdeiwide
    2098 00007290     0b62          cmpi    [648h,0],a2
         000072a0 f9b7ffff  
    2099 000072c0     c703          jrgt    vdeiwide
    2100                    
    2101 000072d0     0782          move    a2,@WORLDTLX,L
         000072e0 00000000! 
    2102                    
    2103 00007300     8700  vdeiwide        move    *a8,a0,L
    2104 00007310     8721          move    *a9,a1,L
    2105 00007320     4001          add     a0,a1
    2106 00007330     29e1          sra     1+16,a1
    2107 00007340     09c0          movi    Y_SCALE_MULTIPLIER,a0
         00007350     3566  
    2108 00007360     5c01          mpys    a0,a1
    2109 00007370     4c22          move    a1,a2
    2110                    
    2111 00007380     8740          move    *a10,a0,L
    2112 00007390     8761          move    *a11,a1,L
    2113 000073a0     4001          add     a0,a1
    2114 000073b0     2be1          sra     1,a1
    2115 000073c0     4422          sub     a1,a2
    2116 000073d0     0d02          subi    [0d8h,0],a2             ;middle of screen
         000073e0 ff27ffff  
    2117                    
    2118                            ;Check for SCROLL_CTRL bits on active wrestlers.
    2119 00007400     09e0          movi    process_ptrs,a0
         00007410 00000000! 
    2120 00007430     18e9          movk    NUM_WRES,a9
    2121 00007440     9603  vdeilp4 move    *a0+,a3,L
    2122 00007450     ca22          jrz     vdeinxt4                ;skip inactive
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   48

    2123                    
    2124 00007460     b46e          move    *a3(STATUS_FLAGS),a14
         00007470     0b50  
    2125 00007480     1eae          btst    B_SCROLL_CTRL,a14
    2126 00007490     ca1e          jrz     vdeinxt4
    2127                    
    2128                            ;control found.  On screen in X?
    2129 000074a0     b661          move    *a3(OBJ_XPOS),a1,L
         000074b0     0100  
    2130 000074c0     07ae          move    @WORLDTLX,a14,L
         000074d0 00000000! 
    2131 000074f0     0d0e          subi    [60,0],a14
         00007500 ffc3ffff  
    2132 00007520     49c1          cmp     a14,a1
    2133 00007530     c414          jrlt    vdeinxt4
    2134 00007540     0b2e          addi    [400+120,0],a14
         00007550 02080000  
    2135 00007570     49c1          cmp     a14,a1
    2136 00007580     c70f          jrgt    vdeinxt4
    2137                    
    2138                            ;calc hi pt
    2139 00007590     b461          move    *a3(OBJ_ZPOSINT),a1
         000075a0     0150  
    2140 000075b0     09ce          movi    Y_SCALE_MULTIPLIER,a14
         000075c0     3566  
    2141 000075d0     5dc1          mpys    a14,a1
    2142 000075e0     b66e          move    *a3(OBJ_YPOS),a14,L
         000075f0     0120  
    2143 00007600     45c1          sub     a14,a1
    2144 00007610     b46e          move    *a3(SCROLL_Y),a14
         00007620     0d90  
    2145 00007630     220e          sla     16,a14
    2146 00007640     45c1          sub     a14,a1
    2147                    
    2148 00007650     4841          cmp     a2,a1
    2149 00007660     c501          jrge    vdeinxt4
    2150                            
    2151 00007670     4c22  vdeitop_ok      move    a1,a2
    2152                    
    2153 00007680     0d89  vdeinxt4        dsj     a9,vdeilp4
         00007690     ffda  
    2154                    
    2155                    
    2156                    
    2157 000076a0           vdeisc_done
    2158 000076a0     07a1          move    @WORLDTLY,a1,L
         000076b0 00000000! 
    2159 000076d0     4422          sub     a1,a2
    2160 000076e0     2bc2          sra     2,a2
    2161 000076f0     4041          add     a2,a1
    2162                    
    2163                            ;Don't allow scroller to go past front fence
    2164 00007700     0b61          cmpi    [97h,0],a1
         00007710 ff68ffff  
    2165 00007730     c703          jrgt    vdeilow
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   49

    2166 00007740     0781          move    a1,@WORLDTLY,L
         00007750 00000000! 
    2167 00007770           vdeilow
    2168 00007770     09af  vdeix   MMFM    SP,A8,A9,A10,A11
         00007780     0f00  
    2169 00007790     0960          rets
    2170                    
    2171                    *****************************************************************************
    2172                    *
    2173                    * this is called before the velocity add and
    2174                    * it's goal is to keep either wrestler from moving
    2175                    * offscreen if one or both are outside the ring
    2176                    
    2177              00b9  ftaeBUFF1       equ     185
    2178              00b9  ftaeBUFF2       equ     185     ;140
    2179                    
    2180 000077a0            SUBR   keep_onscreen
    2181                    
    2182                            ;confine only in two-player game.
    2183 000077a0     05ae          move    @PSTATUS2,a14
         000077b0 00000000! 
    2184 000077d0     0b4e          cmpi    3,a14                   ;is it a 2-player game?
         000077e0     fffc  
    2185 000077f0     cb2d          jrne    ftaeno_2_player
    2186                    
    2187 00007800     05a0          move    @WORLDTLX+16,a0         ;world x int
         00007810 00000010! 
    2188 00007830     0b00          addi    200,a0                  ;center of screen
         00007840     00c8  
    2189                    
    2190 00007850     4c01          move    a0,a1
    2191                    
    2192 00007860     0b40          cmpi    RING_X_CENTER,a0
         00007870     fbcd  
    2193 00007880     c705          jrgt    ftaeright_side
    2194                    
    2195 00007890           ftaeleft_side
    2196 00007890     0be0          subi    ftaeBUFF2,a0    ;left edge
         000078a0     ff46  
    2197 000078b0     0b01          addi    ftaeBUFF1,a1    ;right edge
         000078c0     00b9  
    2198 000078d0     c004          jruc    ftaecont
    2199                    
    2200 000078e0           ftaeright_side
    2201 000078e0     0be0          subi    ftaeBUFF1,a0
         000078f0     ff46  
    2202 00007900     0b01          addi    ftaeBUFF2,a1
         00007910     00b9  
    2203 00007920           ftaecont
    2204 00007920     07aa          move    @process_ptrs,a10,L     ;player 1
         00007930 00000000! 
    2205 00007950     07ab          move    @process_ptrs+20h,a11,L ;player 2
         00007960 00000020! 
    2206                    
    2207                    ;       move    *a10(DEC_DELAY),a14
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   50

    2208                    ;       jrnz    ftaeinring
    2209                    ;       move    *a11(DEC_DELAY),a14
    2210                    ;       jrnz    ftaeinring
    2211                    
    2212                            .ref    allow_offscrn
    2213                    
    2214 00007980     05ae          move    @allow_offscrn,a14
         00007990 00000000! 
    2215 000079b0     ca05          jrz     ftaeok
    2216 000079c0     142e          dec     a14
    2217 000079d0     058e          move    a14,@allow_offscrn
         000079e0 00000000! 
    2218 00007a00     cb0c          jrnz    ftaeinring
    2219 00007a10           ftaeok
    2220 00007a10     b54e          move    *a10(INRING),a14
         00007a20     0560  
    2221 00007a30     cb03          jrnz    ftaeoutside
    2222                    
    2223 00007a40     b56e          move    *a11(INRING),a14
         00007a50     0560  
    2224 00007a60     ca06          jrz     ftaeinring
    2225                    
    2226                    
    2227 00007a70           ftaeoutside     ;at least 1 player outside the ring
    2228                    
    2229 00007a70     4d49          move    a10,a9
    2230 00007a80     0d3f          callr   ftaedo_check
         00007a90     0004  
    2231 00007aa0     4d69          move    a11,a9
    2232 00007ab0     0d3f          callr   ftaedo_check
         00007ac0     0001  
    2233                    
    2234 00007ad0           ftaeinring
    2235 00007ad0           ftaeno_2_player
    2236 00007ad0     0960          rets
    2237                    
    2238 00007ae0           ftaedo_check
    2239 00007ae0     b52e          move    *a9(OBJ_XPOSINT),a14
         00007af0     0110  
    2240 00007b00     480e          cmp     a0,a14
    2241 00007b10     c705          jrgt    ftaeok1
    2242                    
    2243                    ;past left edge
    2244 00007b20     b72e          move    *a9(OBJ_XVEL),a14,L
         00007b30     02d0  
    2245 00007b40     ca1b          jrz     ftaedone
    2246 00007b50     ce07          jrn     ftaeclrx
    2247 00007b60     0960          rets
    2248 00007b70           ftaeok1
    2249 00007b70     482e          cmp     a1,a14
    2250 00007b80     c417          jrlt    ftaeok2
    2251                    
    2252                    ;past right edge
    2253 00007b90     b72e          move    *a9(OBJ_XVEL),a14,L
         00007ba0     02d0  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   51

    2254 00007bb0     ca14          jrz     ftaedone
    2255 00007bc0     ce13          jrn     ftaedone
    2256 00007bd0           ftaeclrx
    2257 00007bd0     b52e          move    *a9(CLIMBING_THRU),a14  ;1=Climbing thru ropes flag
         00007be0     07e0  
    2258 00007bf0     cb10          jrnz    ftaedone
    2259                    
    2260 00007c00     57ce          clr     a14
    2261 00007c10     b3c9          move    a14,*a9(OBJ_XVEL),L
         00007c20     02d0  
    2262                    
    2263 00007c30     b52e          move    *a9(PLYRMODE),a14
         00007c40     05c0  
    2264 00007c50     0b4e          cmpi    MODE_RUNNING,a14
         00007c60     fffe  
    2265 00007c70     cb08          jrne    ftaedone
    2266                    
    2267 00007c80     09ce          movi    MODE_NORMAL,a14
         00007c90     0000  
    2268 00007ca0     b1c9          move    a14,*a9(PLYRMODE)
         00007cb0     05c0  
    2269 00007cc0     b1c9          move    a14,*a9(ANIMODE)
         00007cd0     0660  
    2270                    
    2271 00007ce0     0d3f          callr   ditch_getup_meter_a9
         00007cf0     fcd9  
    2272                    
    2273 00007d00           ftaeok2
    2274 00007d00           ftaedone
    2275 00007d00     0960          rets
    2276                    
    2277                    
    2278                    *****************************************************************************
    2279                    
    2280          ff000000  MAX_YVEL        equ     -1000000h       ;-40000h
    2281                    
    2282 00007d10            SUBR   wrestler_veladd
    2283                    
    2284 00007d10     05a0          move    @HALT,a0
         00007d20 00000000! 
    2285 00007d40     cb64          jrnz    vaaux
    2286                    
    2287 00007d50     b7a0          move    *a13(OBJ_XPOS),a0,L
         00007d60     0100  
    2288 00007d70     b7a1          move    *a13(OBJ_XVEL),a1,L
         00007d80     02d0  
    2289 00007d90     4020          add     a1,a0
    2290 00007da0     b20d          move    a0,*a13(OBJ_XPOS),L
         00007db0     0100  
    2291                    
    2292 00007dc0     b5a2          move    *a13(GROUND_Y),a2
         00007dd0     0570  
    2293 00007de0     2602          sll     16,a2
    2294 00007df0     b7a0          move    *a13(OBJ_YPOS),a0,L
         00007e00     0120  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   52

    2295 00007e10     4440          sub     a2,a0                   ;- GROUND_Y
    2296 00007e20     b7a1          move    *a13(OBJ_YVEL),a1,L
         00007e30     02f0  
    2297 00007e40     4020          add     a1,a0
    2298 00007e50     cf19          jrnn    vaauyok
    2299                    
    2300                            ;under ground.  clr Yvel unless we're attached and MODE_GHOST
    2301 00007e60     b7ae          move    *a13(ATTACH_PROC),a14,L
         00007e70     03e0  
    2302 00007e80     ca0c          jrz     vaauset_yvel
    2303 00007e90     b7ce          move    *a14(ATTACH_PROC),a14,L
         00007ea0     03e0  
    2304 00007eb0     49ae          cmp     a13,a14                 ;valid link?
    2305 00007ec0     cb08          jrne    vaauset_yvel
    2306 00007ed0     b7ae          move    *a13(ANIMODE),a14,L
         00007ee0     0660  
    2307 00007ef0     1e8e          btst    MODE_GHOST_BIT,a14
    2308 00007f00     cb0e          jrnz    vaauyok
    2309 00007f10     4c21          move    a1,a1                   ;if yvel is positive then keep
    2310 00007f20     ce02          jrn     vaauset_yvel            ;velocity & put at ground level
    2311 00007f30     5600          clr     a0
    2312 00007f40     c00a          jruc    vaauyok
    2313                    
    2314 00007f50           vaauset_yvel
    2315                            ;we've hit the ground -- if our WAITHITOPP bit is set, stuff
    2316                            ; a 1 in ANICNT.
    2317 00007f50     b5ae          move    *a13(ANIMODE),a14
         00007f60     0660  
    2318 00007f70     1e2e          btst    MODE_WAITHITOPP_BIT,a14
    2319 00007f80     ca03          jrz     vaaunwho
    2320 00007f90     182e          movk    1,a14
    2321 00007fa0     b1cd          move    a14,*a13(ANICNT)
         00007fb0     06b0  
    2322                    
    2323 00007fc0     5600  vaaunwho        clr     a0
    2324 00007fd0     b20d          move    a0,*a13(OBJ_YVEL),L
         00007fe0     02f0  
    2325 00007ff0           vaauyok
    2326 00007ff0     4040          add     a2,a0                   ;+ GROUND_Y
    2327 00008000     b20d          move    a0,*a13(OBJ_YPOS),L
         00008010     0120  
    2328                    
    2329                    
    2330                    
    2331 00008020     0d5f          calla   calc_ground_y
         00008030 000083a0' 
    2332                    
    2333 00008050     b7a0          move    *a13(OBJ_YPOS),a0,L
         00008060     0120  
    2334                    
    2335 00008070     b5a2          move    *a13(GROUND_Y),a2
         00008080     0570  
    2336 00008090     2602          sll     16,a2
    2337 000080a0     4802          cmp     a0,a2                   ;a2-a0
    2338 000080b0     c40b          jrlt    vaauok
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   53

    2339                            ;we're under ground...  Unless we're attached and set MODE_GHOST,
    2340                            ; stay above.
    2341 000080c0     b7ae          move    *a13(ATTACH_PROC),a14,L
         000080d0     03e0  
    2342 000080e0     ca07          jrz     vaauset_ground_y
    2343 000080f0     b7ce          move    *a14(ATTACH_PROC),a14,L
         00008100     03e0  
    2344 00008110     ca04          jrz     vaauset_ground_y
    2345 00008120     b7ae          move    *a13(ANIMODE),a14,L
         00008130     0660  
    2346 00008140     1e8e          btst    MODE_GHOST_BIT,a14
    2347 00008150     cb01          jrnz    vaauok
    2348                    
    2349 00008160           vaauset_ground_y
    2350 00008160     4c40          move    a2,a0
    2351 00008170           vaauok
    2352 00008170     b20d          move    a0,*a13(OBJ_YPOS),L
         00008180     0120  
    2353                    
    2354 00008190     b7a0          move    *a13(OBJ_ZPOS),a0,L
         000081a0     0140  
    2355 000081b0     b7a1          move    *a13(OBJ_ZVEL),a1,L
         000081c0     0310  
    2356 000081d0     4020          add     a1,a0
    2357 000081e0     b20d          move    a0,*a13(OBJ_ZPOS),L
         000081f0     0140  
    2358                    
    2359 00008200     b5a0          move    *a13(ANIMODE),a0
         00008210     0660  
    2360 00008220     1f40          btst    MODE_NOGRAVITY_BIT,a0
    2361 00008230     cb15          jrnz    vaauno_gravity
    2362                    
    2363 00008240     b5a0          move    *a13(GROUND_Y),a0
         00008250     0570  
    2364 00008260     2600          sll     16,a0
    2365 00008270     b7a1          move    *a13(OBJ_YPOS),a1,L
         00008280     0120  
    2366 00008290     4801          cmp     a0,a1
    2367 000082a0     ca0e          jreq    vaauno_gravity
    2368                    
    2369 000082b0     b7a0          move    *a13(OBJ_YVEL),a0,L
         000082c0     02f0  
    2370 000082d0     b7ae          move    *a13(OBJ_GRAVITY),a14,L
         000082e0     0330  
    2371 000082f0     45c0          sub     a14,a0
    2372 00008300     0b60          cmpi    MAX_YVEL,a0
         00008310 00ffffff  
    2373 00008330     c503          jrge    vaaugrav_ok
    2374 00008340     09e0          movi    MAX_YVEL,a0
         00008350 ff000000  
    2375 00008370           vaaugrav_ok
    2376 00008370     b20d          move    a0,*a13(OBJ_YVEL),L
         00008380     02f0  
    2377 00008390           vaauno_gravity
    2378                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   54

    2379 00008390           vaaux
    2380 00008390     0960          rets
    2381                    
    2382                    
    2383                    *****************************************************************************
    2384                    
    2385 000083a0            SUBRP  calc_ground_y
    2386                    
    2387 000083a0     b5a0          move    *a13(INRING),a0
         000083b0     0560  
    2388 000083c0     ca0a          jrz     axvbinring
    2389                    
    2390 000083d0     09c1          movi    117,a1
         000083e0     0075  
    2391 000083f0     b5a0          move    *a13(OBJ_ZPOSINT),a0
         00008400     0150  
    2392 00008410     0b40          cmpi    05bdh,a0
         00008420     fa42  
    2393 00008430     c705          jrgt    axvbsetit
    2394                    
    2395 00008440     09c1          movi    103,a1
         00008450     0067  
    2396 00008460     c002          jruc    axvbsetit
    2397                    
    2398 00008470           axvbinring
    2399 00008470     09c1          movi    112,a1
         00008480     0070  
    2400                    
    2401 00008490           axvbsetit
    2402 00008490     b02d          move    a1,*a13(OBJ_PRIORITY)
         000084a0     0160  
    2403                    
    2404 000084b0     09e6          movi    vln_right_matedge,a6
         000084c0 00000000! 
    2405 000084e0     0d5f          calla   calc_line_x
         000084f0 00000000! 
    2406 00008510     b5a1          move    *a13(OBJ_XPOSINT),a1
         00008520     0110  
    2407 00008530     4801          cmp     a0,a1                   ;a1-a0
    2408 00008540     c515          jrge    axvboutside
    2409                    
    2410 00008550     09e6          movi    vln_left_matedge,a6
         00008560 00000000! 
    2411 00008580     0d5f          calla   calc_line_x
         00008590 00000000! 
    2412 000085b0     b5a1          move    *a13(OBJ_XPOSINT),a1
         000085c0     0110  
    2413 000085d0     4801          cmp     a0,a1                   ;a1-a0
    2414 000085e0     c60b          jrle    axvboutside
    2415                    
    2416                    
    2417                            ;an unsuccessful attempt to fix throw-into-ring bug
    2418                            ;-we fucked up climbins from behind
    2419                            ;trying again - climbin top and bottom weren't setting this flag!
    2420 000085f0     b5ae          move    *a13(CLIMBING_THRU),a14
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   55

         00008600     07e0  
    2421 00008610     ca14          jrz     axvbskip
    2422                    
    2423 00008620     09c0          movi    MAT_Y,a0
         00008630     003e  
    2424 00008640     b00d          move    a0,*a13(GROUND_Y)
         00008650     0570  
    2425                    
    2426 00008660     5600          clr     a0
    2427 00008670     b00d          move    a0,*a13(INRING)
         00008680     0560  
    2428 00008690     0960          rets
    2429                    
    2430 000086a0           axvboutside
    2431 000086a0     5600          clr     a0
    2432 000086b0     b00d          move    a0,*a13(GROUND_Y)
         000086c0     0570  
    2433 000086d0     05a0          MOVE    @GAMSTATE,A0
         000086e0 00000000! 
    2434 00008700     0b40          CMPI    INPREGAME2,A0
         00008710     fff6  
    2435 00008720     ca03          jreq    axvbskip
    2436                    
    2437 00008730     1820          movk    1,a0
    2438 00008740     b00d          move    a0,*a13(INRING)
         00008750     0560  
    2439 00008760           axvbskip
    2440 00008760     0960          rets
    2441                    
    2442                    
    2443                    *****************************************************************************
    2444                     .if 0
    2445                    
    2446                    PATCH FOR SCROLLER
    2447                    
    2448                    eauvMAX_DIST    equ     380
    2449                    
    2450                            move    @PSTATUS2,a14
    2451                            cmpi    3,a14                   ;is it a 2-player game?
    2452                            jrne    eauvno_2_player
    2453                    
    2454                            move    @process_ptrs,a10,L     ;player 1
    2455                            move    @process_ptrs+20h,a11,L ;player 2
    2456                    
    2457                            move    *a10(OBJ_XPOSINT),a0    ;p1 x
    2458                            move    *a11(OBJ_XPOSINT),a1    ;p2 x
    2459                    
    2460                            sub     a0,a1                   ;a1-a0
    2461                            abs     a1
    2462                            cmpi    eauvMAX_DIST,a1
    2463                            jrlt    eauvok
    2464                    
    2465                    ;the 2 human wrestlers are too far apart
    2466                    ;now bias towards the guy in the ring -
    2467                    ;(since the only way this should be able to happen is when
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   56

    2468                    ;both guys are outside the ring, and 1 jumps back in - ignoring
    2469                    ;the keep_onscreen code).
    2470                    
    2471                    
    2472                    eauvok
    2473                    eauvno_2_player
    2474                    
    2475                    
    2476                     .endif
    2477                    
    2478                    *****************************************************************************
    2479                    *
    2480                    * a0 = * wrestler process
    2481                    *
    2482                    
    2483 00008770            SUBR   wres_get_but_val_down
    2484                    
    2485 00008770     b40e          move    *a0(PLYR_TYPE),a14
         00008780     05a0  
    2486 00008790     cb05          jrnz    rfqqdrndt
    2487 000087a0     b400          move    *a0(PLYRNUM),a0
         000087b0     0580  
    2488 000087c0     0d3f          callr   get_but_val_down
         000087d0     00d9  
    2489 000087e0     0960          rets
    2490                    
    2491 000087f0           rfqqdrndt
    2492 000087f0     b400          move    *a0(DRN_BUTDT),a0
         00008800     0970  
    2493 00008810     0960          rets
    2494                    
    2495                    *****************************************************************************
    2496                    
    2497 00008820            SUBR   wres_get_but_val_cur
    2498                    
    2499 00008820     b40e          move    *a0(PLYR_TYPE),a14
         00008830     05a0  
    2500 00008840     cb05          jrnz    czikdrndt
    2501 00008850     b400          move    *a0(PLYRNUM),a0
         00008860     0580  
    2502 00008870     0d3f          callr   get_but_val_cur
         00008880     0086  
    2503 00008890     0960          rets
    2504                    
    2505 000088a0           czikdrndt
    2506 000088a0     b400          move    *a0(DRN_BUT),a0
         000088b0     0960  
    2507 000088c0     0960          rets
    2508                    
    2509                    *****************************************************************************
    2510                    
    2511 000088d0            SUBR   wres_get_but_val_up
    2512                    
    2513 000088d0     b40e          move    *a0(PLYR_TYPE),a14
         000088e0     05a0  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   57

    2514 000088f0     cb05          jrnz    oakmdrnut
    2515 00008900     b400          move    *a0(PLYRNUM),a0
         00008910     0580  
    2516 00008920     0d3f          callr   get_but_val_up
         00008930     00e0  
    2517 00008940     0960          rets
    2518                    
    2519 00008950           oakmdrnut
    2520 00008950     b400          move    *a0(DRN_BUTUT),a0
         00008960     0980  
    2521 00008970     0960          rets
    2522                    
    2523                    *****************************************************************************
    2524                    
    2525 00008980            SUBR   wres_get_stick_val_cur
    2526                    
    2527 00008980     b40e          move    *a0(PLYR_TYPE),a14
         00008990     05a0  
    2528 000089a0     cb05          jrnz    drn_joy
    2529 000089b0     b400          move    *a0(PLYRNUM),a0
         000089c0     0580  
    2530 000089d0     0d3f          callr   get_stick_val_cur
         000089e0     008d  
    2531 000089f0     0960          rets
    2532                    
    2533 00008a00           drn_joy
    2534 00008a00     b400          move    *a0(DRN_JOY),a0
         00008a10     0990  
    2535 00008a20     0960          rets
    2536                    
    2537                    
    2538                    *****************************************************************************
    2539                    
    2540 00008a30             SUBR  wres_get_stick_rel_cur
    2541                    
    2542                    
    2543 00008a30     b40e          move    *a0(PLYR_TYPE),a14
         00008a40     05a0  
    2544 00008a50     cbfa          jrnz    drn_joy
    2545 00008a60     b40e          move    *a0(OBJ_CONTROL),a14
         00008a70     0780  
    2546 00008a80     b400          move    *a0(PLYRNUM),a0
         00008a90     0580  
    2547 00008aa0     0d3f          callr   get_stick_val_cur
         00008ab0     0080  
    2548 00008ac0     1f6e          btst    B_FLIPH,a14
    2549 00008ad0     ca05          jrz     sakpdone
    2550                    
    2551 00008ae0                   X16     a0
    2552 00008af0     0b20          addi    sakpxflip_table,a0
         00008b00 00008e90' 
    2553 00008b20     8400          move    *a0,a0
    2554 00008b30           sakpdone
    2555 00008b30     0960          rets
    2556                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   58

    2557                    
    2558                    
    2559                    ;returns a value only if stick val
    2560                    ;has changed (but not zero)
    2561                    
    2562 00008b40             SUBR  wres_get_stick_rel_new
    2563                    
    2564                    
    2565 00008b40     b40e          move    *a0(PLYR_TYPE),a14
         00008b50     05a0  
    2566 00008b60     cb1f          jrnz    sakpnot_human2
    2567                    
    2568                    ;shawn - this needs patching too...
    2569                    
    2570 00008b70                   push    a1,a10
    2571                    
    2572 00008b90     4c0a          move    a0,a10
    2573 00008ba0     b540          move    *a10(PLYRNUM),a0
         00008bb0     0580  
    2574 00008bc0     0d3f          callr   get_stick_val_up
         00008bd0     0088  
    2575 00008be0                   push    a0
    2576                    
    2577 00008bf0     b540          move    *a10(PLYRNUM),a0
         00008c00     0580  
    2578 00008c10     0d3f          callr   get_stick_val_down
         00008c20     0076  
    2579 00008c30                   pull    a1
    2580 00008c40     5420          or      a1,a0
    2581 00008c50     ca0d          jrz     sakpdone2               ;no stick
    2582                    
    2583 00008c60     b54e          move    *a10(OBJ_CONTROL),a14
         00008c70     0780  
    2584 00008c80     b540          move    *a10(PLYRNUM),a0
         00008c90     0580  
    2585 00008ca0     0d3f          callr   get_stick_val_cur
         00008cb0     0060  
    2586 00008cc0     1f6e          btst    B_FLIPH,a14
    2587 00008cd0     ca05          jrz     sakpdone2
    2588                    
    2589 00008ce0                   X16     a0
    2590 00008cf0     0b20          addi    sakpxflip_table,a0
         00008d00 00008e90' 
    2591 00008d20     8400          move    *a0,a0
    2592 00008d30           sakpdone2
    2593 00008d30                   pull    a1,a10
    2594 00008d50     0960          rets
    2595                    
    2596                    
    2597 00008d60           sakpnot_human2
    2598 00008d60     4c0e          move    a0,a14
    2599 00008d70     b5c0          move    *a14(DRN_JOYDT),a0
         00008d80     09a0  
    2600 00008d90     b5c1          move    *a14(DRN_JOYUT),a1
         00008da0     09b0  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   59

    2601 00008db0     5420          or      a1,a0
    2602 00008dc0     ca0b          jrz     sakpdx
    2603 00008dd0     b5c0          move    *a14(DRN_JOY),a0
         00008de0     0990  
    2604 00008df0     b5ce          move    *a14(OBJ_CONTROL),a14
         00008e00     0780  
    2605 00008e10     1f6e          btst    B_FLIPH,a14
    2606 00008e20     ca05          jrz     sakpdx
    2607                    
    2608 00008e30                   X16     a0
    2609 00008e40     0b20          addi    sakpxflip_table,a0
         00008e50 00008e90' 
    2610 00008e70     8400          move    *a0,a0
    2611 00008e80           sakpdx
    2612 00008e80     0960          rets
    2613                    
    2614                    
    2615 00008e90           sakpxflip_table ;convert to forward / away  if facing left
    2616 00008e90     0000          .word   0000b   ;0
    2617 00008ea0     0001          .word   0001b   ;1
    2618 00008eb0     0002          .word   0010b   ;2
    2619 00008ec0     0003          .word   0011b   ;3
    2620 00008ed0     0008          .word   1000b   ;4
    2621 00008ee0     0009          .word   1001b   ;5
    2622 00008ef0     000a          .word   1010b   ;6
    2623 00008f00     000b          .word   1011b   ;7
    2624 00008f10     0004          .word   0100b   ;8
    2625 00008f20     0005          .word   0101b   ;9
    2626 00008f30     0006          .word   0110b   ;10
    2627 00008f40     0007          .word   0111b   ;11
    2628 00008f50     000c          .word   1100b   ;12
    2629 00008f60     000d          .word   1101b   ;13
    2630 00008f70     000e          .word   1110b   ;14
    2631 00008f80     000f          .word   1111b   ;15
    2632                    
    2633                    *****************************************************************************
    2634                    
    2635 00008f90            SUBR   wres_get_stick_val_down
    2636                    
    2637 00008f90     b40e          move    *a0(PLYR_TYPE),a14
         00008fa0     05a0  
    2638 00008fb0     cb05          jrnz    szfedrnjoy
    2639 00008fc0     b400          move    *a0(PLYRNUM),a0
         00008fd0     0580  
    2640 00008fe0     0d3f          callr   get_stick_val_down
         00008ff0     0039  
    2641 00009000     0960          rets
    2642                    
    2643 00009010           szfedrnjoy
    2644 00009010     b400          move    *a0(DRN_JOYDT),a0
         00009020     09a0  
    2645 00009030     0960          rets
    2646                    
    2647                    *****************************************************************************
    2648                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   60

    2649 00009040            SUBR   wres_get_stick_val_up
    2650                    
    2651 00009040     b40e          move    *a0(PLYR_TYPE),a14
         00009050     05a0  
    2652 00009060     cb05          jrnz    ekxcnot_human
    2653 00009070     b400          move    *a0(PLYRNUM),a0
         00009080     0580  
    2654 00009090     0d3f          callr   get_stick_val_up
         000090a0     003b  
    2655 000090b0     0960          rets
    2656                    
    2657 000090c0           ekxcnot_human
    2658 000090c0     b400          move    *a0(DRN_JOYUT),a0
         000090d0     09b0  
    2659 000090e0     0960          rets
    2660                    
    2661                    *****************************************************************************
    2662                    *
    2663                    * INPUT:        a0 = player number (0-1)
    2664                    *-----------------------------------------------------------------------------
    2665                    *
    2666                    * RETURN:       a0 = button bits
    2667                    *-----------------------------------------------------------------------------
    2668                    
    2669 000090f0            SUBR   get_but_val_cur
    2670                    
    2671                    
    2672 000090f0                   PUSH    a1
    2673 00009100     4c01          move    a0,a1
    2674 00009110     2481          sll     4,a1                    ;x 16 bits
    2675 00009120     0b21          addi    but_offs2,a1
         00009130 00009950' 
    2676 00009150     8421          move    *a1,a1
    2677 00009160     0b21          addi    switches_cur,a1
         00009170 00000000! 
    2678 00009190     8421          move    *a1,a1
    2679 000091a0     0b81          andi    011000b,a1
         000091b0 ffffffe7  
    2680                    
    2681 000091d0     2480          sll     4,a0                    ;x 16 bits
    2682 000091e0     0b20          addi    but_offs,a0
         000091f0 00009910' 
    2683 00009210     8400          move    *a0,a0
    2684 00009220     0b20          addi    switches_cur,a0
         00009230 00000000! 
    2685 00009250     8400          move    *a0,a0
    2686 00009260     0b80          andi    0111b,a0
         00009270 fffffff8  
    2687 00009290     5420          or      a1,a0
    2688 000092a0                   PULL    a1
    2689                    
    2690 000092b0     0960          rets
    2691                    
    2692                    *****************************************************************************
    2693                    *
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   61

    2694                    * INPUT:        a0 = player number (0-3)
    2695                    *-----------------------------------------------------------------------------
    2696                    *
    2697                    * RETURN:       a0 = joy switch bits
    2698                    *-----------------------------------------------------------------------------
    2699                    
    2700 000092c0             SUBR  get_stick_val_cur
    2701                    
    2702                    
    2703 000092c0     2480          sll     4,a0                    ;x 16 bits
    2704 000092d0     0b20          addi    joy_offs,a0
         000092e0 00009530' 
    2705 00009300     8400          move    *a0,a0
    2706 00009310     0b20          addi    switches_cur,a0
         00009320 00000000! 
    2707 00009340     8400          move    *a0,a0
    2708 00009350     0b80          andi    01111b,a0
         00009360 fffffff0  
    2709 00009380     0960          rets
    2710                    
    2711                    ******************************************************************************
    2712                    *
    2713                    * INPUT:        a0 = player number (0-3)
    2714                    *-----------------------------------------------------------------------------
    2715                    *
    2716                    * RETURN:       a0 = joy switch bits
    2717                    *-----------------------------------------------------------------------------
    2718                    
    2719 00009390             SUBR  get_stick_val_down
    2720                    
    2721 00009390     2480          sll     4,a0                    ;x 16 bits
    2722 000093a0     0b20          addi    joy_offs,a0
         000093b0 00009530' 
    2723 000093d0     8400          move    *a0,a0
    2724 000093e0     0b20          addi    switches_down,a0
         000093f0 00000000! 
    2725 00009410     8400          move    *a0,a0
    2726 00009420     0b80          andi    01111b,a0
         00009430 fffffff0  
    2727 00009450     0960          rets
    2728                    
    2729                    ******************************************************************************
    2730                    *
    2731                    * INPUT:        a0 = player number (0-3)
    2732                    *-----------------------------------------------------------------------------
    2733                    *
    2734                    * RETURN:       a0 = joy switch bits
    2735                    *-----------------------------------------------------------------------------
    2736                    
    2737 00009460             SUBR  get_stick_val_up
    2738                    
    2739 00009460     2480          sll     4,a0                    ;x 16 bits
    2740 00009470     0b20          addi    joy_offs,a0
         00009480 00009530' 
    2741 000094a0     8400          move    *a0,a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   62

    2742 000094b0     0b20          addi    switches_up,a0
         000094c0 00000000! 
    2743 000094e0     8400          move    *a0,a0
    2744 000094f0     0b80          andi    01111b,a0
         00009500 fffffff0  
    2745 00009520     0960          rets
    2746                    
    2747 00009530     0000  joy_offs        .word   00h,08h,20h,28h
    2748                    
    2749                    ******************************************************************************
    2750                    *
    2751                    * INPUT:        a0 = player number (0-1)
    2752                    *-----------------------------------------------------------------------------
    2753                    *
    2754                    * RETURN:       a0 = button bits
    2755                    *-----------------------------------------------------------------------------
    2756                    
    2757 00009570            SUBR   get_but_val_down
    2758                    
    2759 00009570                   PUSH    a1
    2760 00009580     4c01          move    a0,a1
    2761 00009590     2481          sll     4,a1                    ;x 16 bits
    2762 000095a0     0b21          addi    but_offs2,a1
         000095b0 00009950' 
    2763 000095d0     8421          move    *a1,a1
    2764 000095e0     0b21          addi    switches_down,a1
         000095f0 00000000! 
    2765 00009610     8421          move    *a1,a1
    2766 00009620     0b81          andi    011000b,a1
         00009630 ffffffe7  
    2767                    
    2768 00009650     2480          sll     4,a0                    ;x 16 bits
    2769 00009660     0b20          addi    but_offs,a0
         00009670 00009910' 
    2770 00009690     8400          move    *a0,a0
    2771 000096a0     0b20          addi    switches_down,a0
         000096b0 00000000! 
    2772 000096d0     8400          move    *a0,a0
    2773 000096e0     0b80          andi    0111b,a0
         000096f0 fffffff8  
    2774 00009710     5420          or      a1,a0
    2775 00009720                   PULL    a1
    2776                    
    2777 00009730     0960          rets
    2778                    
    2779                    
    2780                    ******************************************************************************
    2781                    *
    2782                    * INPUT:        a0 = player number (0-1)
    2783                    *-----------------------------------------------------------------------------
    2784                    *
    2785                    * RETURN:       a0 = button bits
    2786                    *-----------------------------------------------------------------------------
    2787                    
    2788 00009740            SUBR   get_but_val_up
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   63

    2789                    
    2790 00009740                   PUSH    a1
    2791 00009750     4c01          move    a0,a1
    2792 00009760     2481          sll     4,a1                    ;x 16 bits
    2793 00009770     0b21          addi    but_offs2,a1
         00009780 00009950' 
    2794 000097a0     8421          move    *a1,a1
    2795 000097b0     0b21          addi    switches_up,a1
         000097c0 00000000! 
    2796 000097e0     8421          move    *a1,a1
    2797 000097f0     0b81          andi    011000b,a1
         00009800 ffffffe7  
    2798                    
    2799 00009820     2480          sll     4,a0                    ;x 16 bits
    2800 00009830     0b20          addi    but_offs,a0
         00009840 00009910' 
    2801 00009860     8400          move    *a0,a0
    2802 00009870     0b20          addi    switches_up,a0
         00009880 00000000! 
    2803 000098a0     8400          move    *a0,a0
    2804 000098b0     0b80          andi    0111b,a0
         000098c0 fffffff8  
    2805 000098e0     5420          or      a1,a0
    2806 000098f0                   PULL    a1
    2807                    
    2808 00009900     0960          rets
    2809                    
    2810 00009910     0004  but_offs        .word   04h,0ch,24h,2ch
    2811 00009950     001d  but_offs2       .word   20h-3,24h-3
    2812                    
    2813                    *****************************************************************************
    2814                    *
    2815                    * sacrifice clarity for speed
    2816                    * this reads all switch transitions once
    2817                    * and stuffs them into the PDATA area
    2818                    
    2819                    
    2820 00009970            SUBR   read_switches
    2821                    
    2822                    ;evibwait
    2823                    ;       move    @vcount,a0
    2824                    ;       andi    31,a0
    2825                    ;       jrnz    evibwait
    2826                    ;       TINTON
    2827                    
    2828 00009970     09e9          movi    process_ptrs,a9
         00009980 00000000! 
    2829 000099a0     18eb          movk    NUM_WRES,a11
    2830 000099b0           evibnext
    2831 000099b0     972a          move    *a9+,a10,L
    2832 000099c0     ca00          jrz     evibskip
         000099d0     00b6  
    2833                    
    2834                            ;ignore all switches if wrestler is immobilized
    2835 000099e0     b54e          move    *a10(IMMOBILIZE_TIME),a14
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   64

         000099f0     0ae0  
    2836 00009a00     c116          jrp     evibimmob
    2837                    
    2838 00009a10     b54e          move    *a10(PLYR_TYPE),a14
         00009a20     05a0  
    2839 00009a30     ca26          jrz     evibno_drone
    2840                    
    2841 00009a40           evibdrone
    2842 00009a40     b94a          move    *a10(DRN_BUT),*a10(BUT_VAL_CUR)
         00009a50     0960  
         00009a60     0b90  
    2843 00009a70     b94a          move    *a10(DRN_BUTDT),*a10(BUT_VAL_DOWN)
         00009a80     0970  
         00009a90     0ba0  
    2844 00009aa0     b94a          move    *a10(DRN_BUTUT),*a10(BUT_VAL_UP)
         00009ab0     0980  
         00009ac0     0bb0  
    2845                    
    2846 00009ad0     b94a          move    *a10(DRN_JOY),*a10(STICK_VAL_CUR)
         00009ae0     0990  
         00009af0     0bc0  
    2847 00009b00     b94a          move    *a10(DRN_JOYDT),*a10(STICK_VAL_DOWN)
         00009b10     09a0  
         00009b20     0bd0  
    2848 00009b30     b94a          move    *a10(DRN_JOYUT),*a10(STICK_VAL_UP)
         00009b40     09b0  
         00009b50     0be0  
    2849 00009b60     c07d          jruc    evibcont
    2850                    
    2851 00009b70     57ce  evibimmob       clr     a14
    2852 00009b80     b1ca          move    a14,*a10(BUT_VAL_CUR)
         00009b90     0b90  
    2853 00009ba0     b1ca          move    a14,*a10(BUT_VAL_DOWN)
         00009bb0     0ba0  
    2854 00009bc0     b1ca          move    a14,*a10(BUT_VAL_UP)
         00009bd0     0bb0  
    2855 00009be0     b1ca          move    a14,*a10(STICK_VAL_CUR)
         00009bf0     0bc0  
    2856 00009c00     b1ca          move    a14,*a10(STICK_VAL_DOWN)
         00009c10     0bd0  
    2857 00009c20     b1ca          move    a14,*a10(STICK_VAL_UP)
         00009c30     0be0  
    2858 00009c40     b1ca          move    a14,*a10(STICK_REL_CUR)
         00009c50     0bf0  
    2859 00009c60     b1ca          move    a14,*a10(STICK_REL_NEW)
         00009c70     0c00  
    2860 00009c80     c000          jruc    evibskip
         00009c90     008a  
    2861                    
    2862 00009ca0           evibno_drone
    2863 00009ca0     b548          move    *a10(PLYRNUM),a8
         00009cb0     0580  
    2864                    
    2865 00009cc0     4d01          move    a8,a1
    2866 00009cd0                   X16     a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   65

    2867 00009ce0     4c20          move    a1,a0
    2868 00009cf0     0b20          addi    joy_offs,a0
         00009d00 00009530' 
    2869 00009d20     8405          move    *a0,a5          ;joy offset
    2870                    
    2871 00009d30     4c20          move    a1,a0
    2872 00009d40     0b20          addi    but_offs,a0
         00009d50 00009910' 
    2873 00009d70     8406          move    *a0,a6          ;switch offset1
    2874                    
    2875 00009d80     4c20          move    a1,a0
    2876 00009d90     0b20          addi    but_offs2,a0
         00009da0 00009950' 
    2877 00009dc0     8407          move    *a0,a7          ;switch offset2
    2878                    
    2879                    ;wres_get_but_val_cur
    2880                    
    2881 00009dd0     4ce1          move    a7,a1           ;switch offset2
    2882 00009de0     0b21          addi    switches_cur,a1
         00009df0 00000000! 
    2883 00009e10     8421          move    *a1,a1
    2884 00009e20     0b81          andi    011000b,a1
         00009e30 ffffffe7  
    2885                    
    2886 00009e50     4cc0          move    a6,a0           ;switch offset1
    2887 00009e60     0b20          addi    switches_cur,a0
         00009e70 00000000! 
    2888 00009e90     8400          move    *a0,a0
    2889 00009ea0     0b80          andi    0111b,a0
         00009eb0 fffffff8  
    2890 00009ed0     5420          or      a1,a0
    2891 00009ee0     b00a          move    a0,*a10(BUT_VAL_CUR)
         00009ef0     0b90  
    2892                    
    2893                    
    2894                    ;wres_get_but_val_down
    2895                    
    2896 00009f00     4ce1          move    a7,a1           ;switch offset2
    2897 00009f10     0b21          addi    switches_down,a1
         00009f20 00000000! 
    2898 00009f40     8421          move    *a1,a1
    2899 00009f50     0b81          andi    011000b,a1
         00009f60 ffffffe7  
    2900                    
    2901 00009f80     4cc0          move    a6,a0           ;switch offset1
    2902 00009f90     0b20          addi    switches_down,a0
         00009fa0 00000000! 
    2903 00009fc0     8400          move    *a0,a0
    2904 00009fd0     0b80          andi    0111b,a0
         00009fe0 fffffff8  
    2905 0000a000     5420          or      a1,a0
    2906 0000a010     b00a          move    a0,*a10(BUT_VAL_DOWN)
         0000a020     0ba0  
    2907                    
    2908                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   66

    2909                    ;wres_get_but_val_up
    2910                    
    2911 0000a030     4ce1          move    a7,a1           ;switch offset2
    2912 0000a040     0b21          addi    switches_up,a1
         0000a050 00000000! 
    2913 0000a070     8421          move    *a1,a1
    2914 0000a080     0b81          andi    011000b,a1
         0000a090 ffffffe7  
    2915                    
    2916 0000a0b0     4cc0          move    a6,a0           ;switch offset1
    2917 0000a0c0     0b20          addi    switches_up,a0
         0000a0d0 00000000! 
    2918 0000a0f0     8400          move    *a0,a0
    2919 0000a100     0b80          andi    0111b,a0
         0000a110 fffffff8  
    2920 0000a130     5420          or      a1,a0
    2921 0000a140     b00a          move    a0,*a10(BUT_VAL_UP)
         0000a150     0bb0  
    2922                    
    2923                    
    2924                    ;wres_get_stick_val_cur
    2925 0000a160     4ca0          move    a5,a0           ;joy offset
    2926 0000a170     0b20          addi    switches_cur,a0
         0000a180 00000000! 
    2927 0000a1a0     8400          move    *a0,a0
    2928 0000a1b0     0b80          andi    01111b,a0
         0000a1c0 fffffff0  
    2929 0000a1e0     b00a          move    a0,*a10(STICK_VAL_CUR)
         0000a1f0     0bc0  
    2930                    
    2931                    
    2932                    ;wres_get_stick_val_down
    2933 0000a200     4ca0          move    a5,a0           ;joy offset
    2934 0000a210     0b20          addi    switches_down,a0
         0000a220 00000000! 
    2935 0000a240     8400          move    *a0,a0
    2936 0000a250     0b80          andi    01111b,a0
         0000a260 fffffff0  
    2937 0000a280     b00a          move    a0,*a10(STICK_VAL_DOWN)
         0000a290     0bd0  
    2938                    
    2939                    
    2940                    ;wres_get_stick_val_up
    2941 0000a2a0     4ca0          move    a5,a0           ;joy offset
    2942 0000a2b0     0b20          addi    switches_up,a0
         0000a2c0 00000000! 
    2943 0000a2e0     8400          move    *a0,a0
    2944 0000a2f0     0b80          andi    01111b,a0
         0000a300 fffffff0  
    2945 0000a320     b00a          move    a0,*a10(STICK_VAL_UP)
         0000a330     0be0  
    2946                    
    2947 0000a340           evibcont
    2948                    ;wres_get_stick_rel_cur
    2949                    ;facing reletive joystick value
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   67

    2950                    
    2951 0000a340     b540          move    *a10(STICK_VAL_CUR),a0
         0000a350     0bc0  
    2952 0000a360     b54e          move    *a10(FACING_DIR),a14
         0000a370     04c0  
    2953 0000a380     1f8e          btst    PLAYER_RIGHT_BIT,a14
    2954 0000a390     cb05          jrnz    evibno_flip
    2955 0000a3a0                   X16     a0
    2956 0000a3b0     0b20          addi    evibxflip_table,a0
         0000a3c0 0000a570' 
    2957 0000a3e0     8400          move    *a0,a0
    2958 0000a3f0           evibno_flip
    2959 0000a3f0     b00a          move    a0,*a10(STICK_REL_CUR)
         0000a400     0bf0  
    2960                    
    2961                    
    2962                    ;wres_get_stick_rel_new
    2963                    ;returns a value only if stick val
    2964                    ;has changed (but not zero)
    2965                    
    2966 0000a410     b540          move    *a10(STICK_VAL_UP),a0
         0000a420     0be0  
    2967 0000a430     b541          move    *a10(STICK_VAL_DOWN),a1
         0000a440     0bd0  
    2968 0000a450     5420          or      a1,a0
    2969 0000a460     ca0b          jrz     evibno_stick
    2970 0000a470     b540          move    *a10(STICK_VAL_CUR),a0
         0000a480     0bc0  
    2971 0000a490     b54e          move    *a10(FACING_DIR),a14
         0000a4a0     04c0  
    2972 0000a4b0     1f8e          btst    PLAYER_RIGHT_BIT,a14
    2973 0000a4c0     cb05          jrnz    evibno_flip2
    2974 0000a4d0                   X16     a0
    2975 0000a4e0     0b20          addi    evibxflip_table,a0
         0000a4f0 0000a570' 
    2976 0000a510     8400          move    *a0,a0
    2977 0000a520           evibno_flip2
    2978 0000a520           evibno_stick
    2979 0000a520     b00a          move    a0,*a10(STICK_REL_NEW)
         0000a530     0c00  
    2980                    
    2981                    
    2982 0000a540           evibskip
    2983 0000a540     0d8b          dsj     a11,evibnext
         0000a550     ff45  
    2984                    ; TINTOFF
    2985                    
    2986 0000a560     0960          rets
    2987                    
    2988                    
    2989                    
    2990 0000a570           evibxflip_table ;convert to forward / away  if facing left
    2991 0000a570     0000          .word   0000b   ;0
    2992 0000a580     0001          .word   0001b   ;1
    2993 0000a590     0002          .word   0010b   ;2
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   68

    2994 0000a5a0     0003          .word   0011b   ;3
    2995 0000a5b0     0008          .word   1000b   ;4
    2996 0000a5c0     0009          .word   1001b   ;5
    2997 0000a5d0     000a          .word   1010b   ;6
    2998 0000a5e0     000b          .word   1011b   ;7
    2999 0000a5f0     0004          .word   0100b   ;8
    3000 0000a600     0005          .word   0101b   ;9
    3001 0000a610     0006          .word   0110b   ;10
    3002 0000a620     0007          .word   0111b   ;11
    3003 0000a630     000c          .word   1100b   ;12
    3004 0000a640     000d          .word   1101b   ;13
    3005 0000a650     000e          .word   1110b   ;14
    3006 0000a660     000f          .word   1111b   ;15
    3007                    
    3008                    
    3009                    ;*****************************************************************************
    3010                    ;*
    3011                    ;* puts you in mode_blocking if your safe_time is set. (or if you're a drone)
    3012                    ;* called from anim scripts with an ANI_CODE.
    3013                    ;
    3014                    ; SUBR  block_if_safe
    3015                    ;
    3016                    ;       move    *a13(PLYR_TYPE),a14
    3017                    ;       cmpi    PTYPE_DRONE,a14
    3018                    ;       jreq    evibsafe
    3019                    ;
    3020                    ;       move    *a13(SAFE_TIME),a14
    3021                    ;       jrz     evibnot_safe
    3022                    ;
    3023                    ;evibsafe       movk    MODE_BLOCK,a14
    3024                    ;       move    a14,*a13(PLYRMODE)
    3025                    ;
    3026                    ;evibnot_safe
    3027                    ;       rets
    3028                    
    3029                    *****************************************************************************
    3030                    *
    3031                    * Call at the beginning of any turnbuckle attack.  This sets the NOCONFINE
    3032                    * bit if any live opponents are outside the ring, or clears it otherwise.
    3033                    *
    3034                    * HOWEVER, if everyone is dead, it checks simply for active wrestlers outside,
    3035                    * not just live ones.
    3036                    *
    3037                    * ...except for yoko.  He can't jump out.
    3038                    *
    3039                    
    3040 0000a670            SUBR   set_tbukl_confine
    3041                    
    3042 0000a670     b5ae          move    *a13(WRESTLERNUM),a14
         0000a680     0590  
    3043 0000a690     0b4e          cmpi    W_YOKO,a14
         0000a6a0     fffc  
    3044 0000a6b0     ca25          jreq    qjhxclear_noconfine
    3045                    
    3046                            ;a3 is the 'everyone is dead' flag.
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   69

    3047 0000a6c0     5663          clr     a3
    3048 0000a6d0     b5a1          move    *a13(CLOSEST_NUM),a1
         0000a6e0     03a0  
    3049 0000a6f0     0d5f          calla   get_process_ptr
         0000a700 00000000! 
    3050 0000a720     b40e          move    *a0(PLYRMODE),a14
         0000a730     05c0  
    3051 0000a740     0b4e          cmpi    MODE_DEAD,a14
         0000a750     fff6  
    3052 0000a760     cb01          jrne    qjhxdfset
    3053                    
    3054 0000a770     1023          inc     a3              ;entire other team is dead.
    3055                    
    3056 0000a780     09e0  qjhxdfset       movi    process_ptrs,a0,L
         0000a790 00000000! 
    3057 0000a7b0     18ea          movk    NUM_WRES,a10
    3058 0000a7c0     b5a2          move    *a13(PLYR_SIDE),a2
         0000a7d0     05b0  
    3059 0000a7e0           qjhxloop
    3060 0000a7e0     9601          move    *a0+,a1,L
    3061 0000a7f0     ca10          jrz     qjhxnxt         ;skip inactive
    3062                    
    3063 0000a800     482d          cmp     a1,a13
    3064 0000a810     ca0e          jreq    qjhxnxt         ;skip self
    3065                    
    3066 0000a820     b42e          move    *a1(PLYR_SIDE),a14
         0000a830     05b0  
    3067 0000a840     49c2          cmp     a14,a2
    3068 0000a850     ca0a          jreq    qjhxnxt         ;skip teammates
    3069                    
    3070                            ;skip the dead check if everyone on enemy side is dead
    3071 0000a860                   TEST    a3
    3072 0000a870     cb05          jrnz    qjhxnsd
    3073                    
    3074 0000a880     b42e          move    *a1(PLYRMODE),a14
         0000a890     05c0  
    3075 0000a8a0     0b4e          cmpi    MODE_DEAD,a14
         0000a8b0     fff6  
    3076 0000a8c0     ca03          jreq    qjhxnxt         ;skip dead
    3077                    
    3078 0000a8d0     b42e  qjhxnsd move    *a1(INRING),a14
         0000a8e0     0560  
    3079 0000a8f0     cb36          jrnz    qjhxset_noconfine
    3080                    
    3081 0000a900     3e6a  qjhxnxt dsj     a10,qjhxloop
    3082                            ;fall through
    3083 0000a910           qjhxclear_noconfine
    3084                    
    3085                            ;he might have drifted out already, so we gotta yank 'em back in.
    3086 0000a910     b5ae          move    *a13(INRING),a14
         0000a920     0560  
    3087 0000a930     ca2c          jrz     qjhxin
    3088                    
    3089                            ;rats.  he's out.  fix it.
    3090 0000a940     57ce          clr     a14
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   70

    3091 0000a950     b1cd          move    a14,*a13(INRING)
         0000a960     0560  
    3092 0000a970     09ce          movi    MAT_Y,a14
         0000a980     003e  
    3093 0000a990     b1cd          move    a14,*a13(GROUND_Y)
         0000a9a0     0570  
    3094 0000a9b0     b5ae          move    *a13(OBJ_ZPOSINT),a14
         0000a9c0     0150  
    3095 0000a9d0     0b4e          cmpi    RING_TOP,a14
         0000a9e0     fc00  
    3096 0000a9f0     c504          jrge    qjhxzok
    3097 0000aa00     09ce          movi    RING_TOP,a14
         0000aa10     03ff  
    3098 0000aa20     b1cd          move    a14,*a13(OBJ_ZPOSINT)
         0000aa30     0150  
    3099 0000aa40     b5a2  qjhxzok move    *a13(OBJ_XPOSINT),a2
         0000aa50     0110  
    3100 0000aa60     0b42          cmpi    RING_X_CENTER,a2
         0000aa70     fbcd  
    3101 0000aa80     c70c          jrgt    qjhxrt
    3102                    
    3103                            ;on left
    3104 0000aa90     09e6          movi    vln_left_rope,a6
         0000aaa0 00000000! 
    3105 0000aac0     0d5f          calla   calc_line_x
         0000aad0 00000000! 
    3106 0000aaf0     ca10          jrz     qjhxxok         ;bad news.  leave it alone.
    3107 0000ab00     4802          cmp     a0,a2
    3108 0000ab10     c50e          jrge    qjhxxok
    3109 0000ab20     b00d          move    a0,*a13(OBJ_XPOSINT)
         0000ab30     0110  
    3110 0000ab40     c00b          jruc    qjhxxok
    3111                    
    3112 0000ab50           qjhxrt  ;on right
    3113 0000ab50     09e6          movi    vln_right_rope,a6
         0000ab60 00000000! 
    3114 0000ab80     0d5f          calla   calc_line_x
         0000ab90 00000000! 
    3115 0000abb0     ca04          jrz     qjhxxok         ;bad news.  leave it alone.
    3116 0000abc0     4802          cmp     a0,a2
    3117 0000abd0     c602          jrle    qjhxxok
    3118 0000abe0     b00d          move    a0,*a13(OBJ_XPOSINT)
         0000abf0     0110  
    3119                    
    3120 0000ac00           qjhxxok
    3121 0000ac00     b5ae  qjhxin  move    *a13(ANIMODE),a14
         0000ac10     0660  
    3122 0000ac20     0b8e          andni   MODE_NOCONFINE,a14
         0000ac30 00000080  
    3123 0000ac50     c005          jruc    qjhxcont
    3124                    
    3125 0000ac60           qjhxset_noconfine
    3126 0000ac60     b5ae          move    *a13(ANIMODE),a14
         0000ac70     0660  
    3127 0000ac80     0bae          ori     MODE_NOCONFINE,a14
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   71

         0000ac90 00000080  
    3128 0000acb0           qjhxcont
    3129 0000acb0     b1cd          move    a14,*a13(ANIMODE)
         0000acc0     0660  
    3130 0000acd0     0960          rets
    3131                    
    3132                    
    3133                    ;*****************************************************************************
    3134                    ;*
    3135                    ;* Call with ANI_CODE when a turnbuckle attack misses.  This does four pixels
    3136                    ;* of damage, or health-1, whichever is less.
    3137                    ;
    3138                    ; SUBR  tbukl_miss_damage
    3139                    ;
    3140                    ;       move    *a13(PLYRNUM),a1
    3141                    ;       calla   get_health
    3142                    ;       dec     a0
    3143                    ;       jrle    qjhxdone
    3144                    ;       movk    4,a14
    3145                    ;       cmp     a14,a0
    3146                    ;       jrle    qjhxok
    3147                    ;       move    a14,a0
    3148                    ;qjhxok neg     a0
    3149                    ;       clr     a10
    3150                    ;       calla   adjust_health
    3151                    ;qjhxdone       rets
    3152                    
    3153                    
    3154                            .if DEBUG
    3155                    *****************************************************************************
    3156                            .ref    CPUAVG
    3157                    
    3158                     SUBR   draw_dma_meter
    3159                    
    3160                            movi    DIAGP,a0
    3161                            calla   pal_getf
    3162                            move    a0,a1
    3163                            ori     00E0E0000H,a1
    3164                            movi    [1,400],a2
    3165                            move    @dma_bog,a3
    3166                            sll     16,a3
    3167                            clr     a4
    3168                            movi    DMACAL,a5
    3169                            calla   QDMAN
    3170                            rets
    3171                    
    3172                    *****************************************************************************
    3173                    
    3174                     SUBR   draw_cpu_meter
    3175                    
    3176                            movi    DIAGP,a0
    3177                            calla   pal_getf
    3178                            move    a0,a1
    3179                            ori     00D0D0000H,a1
    3180                            movi    [1,400],a2
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   72

    3181                            move    @CPUAVG,a3
    3182                            sll     14,a3
    3183                            clr     a4
    3184                            movi    DMACAL,a5
    3185                            calla   QDMAN
    3186                            rets
    3187                    
    3188                            .endif
    3189                    
    3190                    *****************************************************************************
    3191                    
    3192 0000ace0            SUBR   COLRPRC
    3193 0000ace0     09c0          movi    COLRPID,a0
         0000acf0     0114  
    3194 0000ad00     0d5f          calla   KIL1C           ;KILL ALL COLOR UPDATE PROCESSES
         0000ad10 00000000! 
    3195 0000ad30     5600          clr     a0
    3196 0000ad40     0780          move    a0,@PALFRAM,L
         0000ad50 00000000! 
    3197                    ;       movi    scorep,a0       ;Score area palette
    3198 0000ad70     c080          jauc    pal_getf
         0000ad80 00000000! 
    3199                    
    3200                    
    3201                    *****************************************************************************
    3202                    *
    3203                    * call this at the top of any anim sequence that requires that you be
    3204                    * attached before you get there, like any of the pile-drivers, vertical
    3205                    * suplexes, and so forth.  This checks for a good link, and bitches up
    3206                    * a storm if it doesn't find one.
    3207                    
    3208 0000ada0            SUBR   link_check
    3209                    
    3210                            .if DEBUG
    3211                            move    *a13(ATTACH_PROC),a14,L
    3212                            jrnz    zqopok1
    3213                    
    3214                            LOCKUP  ;I'm not attached!
    3215                            nop
    3216                    
    3217                    zqopok1 move    *a14(ATTACH_PROC),a14,L
    3218                            jrnz    zqopok2
    3219                            LOCKUP  ;I'm attached, but he's not attached to me!
    3220                            nop
    3221                    
    3222                    zqopok2 cmp     a14,a13
    3223                            jreq    zqopok3
    3224                            LOCKUP  ;We're both attached, but not to each other!
    3225                            nop
    3226                    
    3227                            .endif
    3228 0000ada0     0960  zqopok3 rets
    3229                    
    3230                    *****************************************************************************
    3231                    *
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   73

    3232                    * clears CLIMBING_THRU flag and sets SAFE_TIME to 1, which won't do you
    3233                    * any good unless you're holding block.  Call this at the end of any
    3234                    * rope climb-through anim.
    3235                    
    3236 0000adb0            SUBR   clr_climb
    3237                    
    3238 0000adb0     5600          clr     a0
    3239 0000adc0     b00d          move    a0,*a13(CLIMBING_THRU)          ;1=Climbing thru ropes flag
         0000add0     07e0  
    3240                    
    3241 0000ade0     1020          inc     a0
    3242 0000adf0     b00d          move    a0,*a13(SAFE_TIME)
         0000ae00     0ac0  
    3243                    
    3244 0000ae10     0960          rets
    3245                    
    3246                    
    3247                    *****************************************************************************
    3248                    *
    3249                    * returns carry set if one of a13's teammates has done a pin this round.
    3250                    *
    3251                    * trashes scratch
    3252                    
    3253 0000ae20            SUBR   ck_teammate_pin
    3254                    
    3255 0000ae20                   PUSH    a2,a3
    3256                    
    3257 0000ae40     18e0          movk    NUM_WRES,a0
    3258 0000ae50     09e1          movi    process_ptrs,a1
         0000ae60 00000000! 
    3259 0000ae80     b5a2          move    *a13(PLYR_SIDE),a2
         0000ae90     05b0  
    3260                    
    3261 0000aea0     9623  lhzplp  move    *a1+,a3,L
    3262 0000aeb0     ca0e          jrz     lhzpnxt         ;skip inactive
    3263                    
    3264 0000aec0     486d          cmp     a3,a13
    3265 0000aed0     ca0c          jreq    lhzpnxt         ;skip self
    3266                    
    3267 0000aee0     b46e          move    *a3(PLYR_SIDE),a14
         0000aef0     05b0  
    3268 0000af00     49c2          cmp     a14,a2
    3269 0000af10     cb08          jrne    lhzpnxt         ;skip enemies
    3270                    
    3271 0000af20     b46e          move    *a3(STATUS_FLAGS),a14
         0000af30     0b50  
    3272 0000af40     1fce          btst    B_DID_PIN,a14
    3273 0000af50     ca04          jrz     lhzpnxt         ;skip guys who didn't pin
    3274                    
    3275                            ;got a pinning teammate
    3276 0000af60                   PULL    a2,a3
    3277 0000af80     0de0          setc
    3278 0000af90     0960          rets
    3279                    
    3280 0000afa0     3e20  lhzpnxt dsj     a0,lhzplp
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   74

    3281                    
    3282                            ;no pinning teammates
    3283 0000afb0                   PULL    a2,a3
    3284 0000afd0     0320          clrc
    3285 0000afe0     0960          rets
    3286                    
    3287                    *****************************************************************************
    3288                    *
    3289                    * rummage through process_ptrs and decide which pal this wrestler should
    3290                    * get.  return pal ptr in b0
    3291                    *
    3292                    * trashes a0,a1,a2,a3, and a14.
    3293                    
    3294 0000aff0            SUBR   choose_pal
    3295                    
    3296                            ;assign pals in PLYRNUM order.  There's four in the table for
    3297                            ; each wrestler.
    3298                    
    3299                            .if 1
    3300                            ; First check to see if there are 2 human players and they are
    3301                            ; playing the same wrestler
    3302 0000aff0     05ae          move    @PSTATUS2,a14           ; Get status
         0000b000 00000000! 
    3303 0000b020     0b4e          cmpi    3,a14                   ; Do we have 2 humans playing ?
         0000b030     fffc  
    3304 0000b040     cb25          jrnz    rwlapp_go                       ; br = no
    3305                    
    3306                            ;if buddy mode, choose special pals
    3307 0000b050     05ae          move    @buddy_mode_on,a14
         0000b060 00000000! 
    3308 0000b080     cb4f          jrnz    rwlabuddy_mode
    3309                    
    3310 0000b090     5642          clr     a2
    3311 0000b0a0     57ce          clr     a14
    3312 0000b0b0     03ae          neg     a14
    3313 0000b0c0     09e0          movi    process_ptrs,a0
         0000b0d0 00000000! 
    3314 0000b0f0           rwlaf_loop
    3315 0000b0f0     9603          move    *a0+,a3,L
    3316 0000b100     ca0b          jrz     rwlaf_done
    3317 0000b110     b464          move    *a3(PLYRNUM),a4
         0000b120     0580  
    3318 0000b130     cb02          jrnz    rwlanot_p1
    3319 0000b140     b462          move    *a3(WRESTLERNUM),a2
         0000b150     0590  
    3320 0000b160           rwlanot_p1
    3321 0000b160     0b44          cmpi    1,a4
         0000b170     fffe  
    3322 0000b180     cb02          jrnz    rwlanot_p2
    3323 0000b190     b46e          move    *a3(WRESTLERNUM),a14
         0000b1a0     0590  
    3324 0000b1b0           rwlanot_p2
    3325 0000b1b0     c0f3          jruc    rwlaf_loop
    3326 0000b1c0           rwlaf_done
    3327 0000b1c0     4dce          move    a14,a14                 ; Does player 2 exist ?
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   75

    3328 0000b1d0     ce0c          jrn     rwlapp_go                       ; br = no
    3329 0000b1e0     484e          cmp     a2,a14                  ; Are player 1 and 2 same wrestler ?
    3330 0000b1f0     cb0a          jrnz    rwlapp_go                       ; br = no (no need to adjust pals)
    3331 0000b200     05a0          move    @player_pal_pref,a0     ; Get player 1 palette preference
         0000b210 00000000! 
    3332 0000b230     0b40          cmpi    7,a0                    ; Is it last palette ?
         0000b240     fff8  
    3333 0000b250     cb01          jrnz    rwlaset_pal             ; br = no
    3334 0000b260     1840          movk    2,a0                    ; force a palette above what'll be used by drones
    3335 0000b270           rwlaset_pal
    3336 0000b270     0580          move    a0,@player_pal_pref+10h ; Set player 2 palette
         0000b280 00000010! 
    3337 0000b2a0           rwlapp_go
    3338                            .endif
    3339                    
    3340                            ;count identical wrestlers with lower PLYRNUMs.
    3341 0000b2a0     09e0          movi    process_ptrs,a0
         0000b2b0 00000000! 
    3342 0000b2d0     5684          clr     a4                      ; match count
    3343 0000b2e0     b5a2          move    *a13(PLYRNUM),a2        ; Get player number
         0000b2f0     0580  
    3344 0000b300     0b42          cmpi    2,a2                    ; Are we human ?
         0000b310     fffd  
    3345 0000b320     c505          jrge    rwlanot_player          ; br = no
    3346 0000b330                   X16     a2                      ; Get playre palette preference
    3347 0000b340     0b22          addi    player_pal_pref,a2
         0000b350 00000000! 
    3348 0000b370     8444          move    *a2,a4                  ; Init the counter to preference
    3349 0000b380           rwlanot_player
    3350 0000b380     b5a1          move    *a13(WRESTLERNUM),a1
         0000b390     0590  
    3351                    
    3352                            ;loop from 0 to our PLYRNUM looking for matches, UNLESS we're a
    3353                            ; drone doink, in which case we just check 0 and 1.
    3354 0000b3a0     b5a2          move    *a13(PLYRNUM),a2
         0000b3b0     0580  
    3355 0000b3c0     ca0f          jrz     rwlaend0
    3356 0000b3d0     0b42          cmpi    2,a2            ;first drone is okay too.
         0000b3e0     fffd  
    3357 0000b3f0     c604          jrle    rwlalp0
    3358 0000b400     0b41          cmpi    W_DOINK,a1
         0000b410     fff9  
    3359 0000b420     cb01          jrne    rwlalp0
    3360 0000b430     1842          movk    2,a2
    3361 0000b440     9603  rwlalp0 move    *a0+,a3,L
    3362 0000b450     ca05          jrz     rwlanxt0                ;skip inactive
    3363 0000b460     b46e          move    *a3(WRESTLERNUM),a14
         0000b470     0590  
    3364 0000b480     482e          cmp     a1,a14
    3365 0000b490     cb01          jrne    rwlanxt0
    3366 0000b4a0     1024          inc     a4              ;got a match--inc count
    3367 0000b4b0     3d02  rwlanxt0        dsj     a2,rwlalp0
    3368 0000b4c0     0b84  rwlaend0        andi    7,a4
         0000b4d0 fffffff8  
    3369 0000b4f0                   X32     a4
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   76

    3370 0000b500                   X256    a1
    3371 0000b510     4024          add     a1,a4
    3372 0000b520     0b24          addi    rwlawrestler_pal_table,a4
         0000b530 0000b650' 
    3373 0000b550     868e          move    *a4,a14,L       
    3374 0000b560     4fc0          move    a14,b0
    3375 0000b570     0960          rets
    3376                    
    3377 0000b580           rwlabuddy_mode
    3378 0000b580     b5a0          move    *a13(WRESTLERNUM),a0
         0000b590     0590  
    3379 0000b5a0                   X64     a0
    3380 0000b5b0     b5ae          move    *a13(PLYR_SIDE),a14
         0000b5c0     05b0  
    3381 0000b5d0                   X32     a14
    3382 0000b5e0     41c0          add     a14,a0
    3383 0000b5f0     0b20          addi    rwlabuddy_mode_pals,a0
         0000b600 0000bf50' 
    3384 0000b620     860e          move    *a0,a14,L
    3385 0000b630     4fc0          move    a14,b0
    3386 0000b640     0960          rets
    3387                    
    3388 0000b650           rwlawrestler_pal_table
    3389                            ;                                            pnch     ppnch    kick     pkick
    3390 0000b650                   REFLONG HRTPNK_P,HRTBLU_P,HRTORG_P,HRTYEL_P,HRTRED_P,HRTGRN_P,HRTPRP_P,HRTGRY_P ;(Bret)
    3391 0000b750                   REFLONG RZRGRN_P,RZRPRP_P,RZRYEL_P,RZRORG_P,RZRPNK_P,RZRBLU_P,RZRRED_P,RZRGRY_P ;(Razor)
    3392 0000b850                   REFLONG UNDPRP_P,UNDBLK_P,UNDGRN_P,UNDORG_P,UNDPNK_P,UNDBLU_P,UNDYEL_P,UNDRED_P ;(Taker)
    3393 0000b950                   REFLONG YOKRED_P,YOKPRP_P,YOKYEL_P,YOKORG_P,YOKPNK_P,YOKBLU_P,YOKGRN_P,YOKGRY_P ;(Yoko)
    3394 0000ba50                   REFLONG SHNRED_P,SHNPRP_P,SHNORG_P,SHNGRN_P,SHNPNK_P,SHNBLU_P,SHNYEL_P,SHNGRY_P ;(Shawn)
    3395 0000bb50                   REFLONG BAMBLU_P,BAMYLW_P,BAMPRP_P,BAMORG_P,BAMPNK_P,BAMRED_P,BAMGRN_P,BAMGRY_P ;(Bam Bam)
    3396 0000bc50                   REFLONG DNKBLU_P,DNKPRP_P,DNKORG_P,DNKRED_P,DNKPNK_P,DNKGRN_P,DNKYEL_P,DNKGRY_P ;(Doink)
    3397 0000bd50 00000000          .long   0,0,0,0,0,0,0,0
    3398 0000be50                   REFLONG LEXWHT_P,LEXPRP_P,LEXRED_P,LEXYEL_P,LEXGRN_P,LEXPNK_P,LEXORG_P,LEXGRY_P ;(Lex)
    3399                    
    3400 0000bf50           rwlabuddy_mode_pals
    3401 0000bf50 00000000!         .long   HRTBLU_P,HRTRED_P
    3402 0000bf90 00000000!         .long   RZRBLU_P,RZRRED_P
    3403 0000bfd0 00000000!         .long   UNDBLU_P,UNDRED_P
    3404 0000c010 00000000!         .long   YOKBLU_P,YOKRED_P
    3405 0000c050 00000000!         .long   SHNBLU_P,SHNRED_P
    3406 0000c090 00000000!         .long   BAMBLU_P,BAMRED_P
    3407 0000c0d0 00000000!         .long   DNKBLU_P,DNKRED_P
    3408 0000c110 00000000          .long   0,0
    3409 0000c150 00000000!         .long   LEXPRP_P,LEXRED_P
    3410                    
    3411                    *****************************************************************************
    3412                    * Sets PLYR_TYPE to PTYPE_PLAYER if PLYRNUM < 2.
    3413                    *
    3414                    * 0a13H = process *
    3415                    
    3416 0000c190            SUBR   drone_change_back
    3417                    
    3418 0000c190     b5ae          move    *a13(PLYRNUM),a14
         0000c1a0     0580  
    3419 0000c1b0     0b4e          cmpi    2,a14
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   77

         0000c1c0     fffd  
    3420 0000c1d0     c504          jrge    cyhedone                        ;don't check real drones
    3421                    
    3422                            ;don't bother checking if they're a drone or not.  In either case,
    3423                            ; turning them human again won't hurt.
    3424 0000c1e0     09ce          movi    PTYPE_PLAYER,a14
         0000c1f0     0000  
    3425 0000c200     b1cd          move    a14,*a13(PLYR_TYPE)
         0000c210     05a0  
    3426 0000c220     0960  cyhedone        rets
    3427                    
    3428                    
    3429                    *****************************************************************************
    3430                    * (called by animation system)
    3431                    *
    3432                    
    3433 0000c230            SUBR   start_run_flung
    3434                    
    3435 0000c230     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP
    3436 0000c250     801b          .word   ANI_SETFACING           ;so the offset works properly
    3437 0000c260                   WL      ANI_CODE,qjrgx_flip
    3438 0000c290     8015          .word   ANI_OFFSET,20,0,0
    3439 0000c2d0                   WL      ANI_CODE,qjrgok2
    3440 0000c300     8034          .word   ANI_GETUP,FLUNG_TIME                    ;Flung time
    3441 0000c320     8049          .word   ANI_END
    3442                    
    3443 0000c330            SUBR   start_run_anim
    3444                    
    3445 0000c330     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP
    3446                    ;Is this a good idea?
    3447 0000c350     800a          .word   ANI_DETACH
    3448 0000c360                   WL      ANI_CODE,qjrgsetup_run
    3449 0000c390     8049          .word   ANI_END
    3450                    
    3451 0000c3a0           qjrgsetup_run
    3452                    ;       move    a13,a0
    3453                    ;       calla   wres_get_stick_val_cur
    3454 0000c3a0                   PUSH    a1
    3455                    ;       movk    4,a1
    3456 0000c3b0     1821          movk    1,a1
    3457 0000c3c0     0d5f          calla   dufus_msg_off
         0000c3d0 00000000! 
    3458 0000c3f0                   PULL    a1
    3459 0000c400     b5a0          move    *a13(STICK_VAL_CUR),a0
         0000c410     0bc0  
    3460 0000c420     0b80          andi    MOVE_LEFT+MOVE_RIGHT,a0
         0000c430 fffffff3  
    3461 0000c450     cb05          jrnz    qjrguse_joy1
    3462                    
    3463 0000c460     b5a0          move    *a13(FACING_DIR),a0     ;use facing
         0000c470     04c0  
    3464 0000c480     0b80          andi    MOVE_LEFT+MOVE_RIGHT,a0
         0000c490 fffffff3  
    3465 0000c4b0           qjrguse_joy1
    3466 0000c4b0     b5a1          move    *a13(FACING_DIR),a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   78

         0000c4c0     04c0  
    3467 0000c4d0     0b81          andi    MOVE_LEFT+MOVE_RIGHT,a1
         0000c4e0 fffffff3  
    3468 0000c500     4801          cmp     a0,a1
    3469 0000c510     ca0a          jrz     qjrgok1
    3470                    
    3471                    ;He wants to run in the opposite direction than he is facing
    3472                    ;Rotate him around first.
    3473                    
    3474 0000c520     b5a1          move    *a13(FACING_DIR),a1
         0000c530     04c0  
    3475 0000c540     0b81          andi    MOVE_UP+MOVE_DOWN,a1
         0000c550 fffffffc  
    3476 0000c570     5420          or      a1,a0
    3477 0000c580     b00d          move    a0,*a13(NEW_FACING_DIR)
         0000c590     04d0  
    3478 0000c5a0     b00d          move    a0,*a13(FACING_DIR)
         0000c5b0     04c0  
    3479                    
    3480                    ;       callr   set_rotate_anim
    3481                    ;       move    a13,a2                          ;a2 = * process
    3482                    ;       calla   change_anim_anim
    3483                    
    3484 0000c5c0           qjrgok1
    3485                    ;       movi    qjrgdorun,a0                    ;this routine gets executed
    3486 0000c5c0     c025          jruc    qjrgdorun
    3487 0000c5d0     c006          jruc    qjrgcontx
    3488 0000c5e0           qjrgok2
    3489                    ;Whenever you fling someone, a meter can & will appear
    3490 0000c5e0     5600          clr     a0
    3491 0000c5f0     b00d          move    a0,*a13(DELAY_METER)
         0000c600     0ad0  
    3492 0000c610     09e0          movi    qjrgdorun_flung,a0                      ;this routine gets executed
         0000c620 0000c850' 
    3493 0000c640           qjrgcontx
    3494 0000c640     b20d          move    a0,*a13(CODE_ADDR),L            ;when the rotate anim
         0000c650     0430  
    3495 0000c660                   SETMODE WAITANIM                        ;finishes
    3496                    
    3497 0000c710     b7a0          move    *a13(OBJ_XVEL),a0,L
         0000c720     02d0  
    3498 0000c730     2be0          sra     1,a0
    3499 0000c740     b20d          move    a0,*a13(OBJ_XVEL),L
         0000c750     02d0  
    3500 0000c760     5600          clr     a0
    3501 0000c770     b20d          move    a0,*a13(OBJ_ZVEL),L
         0000c780     0310  
    3502                    
    3503 0000c790     0960          rets
    3504                    
    3505 0000c7a0           qjrgx_flip
    3506 0000c7a0     b5ae          move    *a13(FACING_DIR),a14
         0000c7b0     04c0  
    3507 0000c7c0     0bce          xori    00CH,a14
         0000c7d0 0000000c  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   79

    3508 0000c7f0     b1cd          move    a14,*a13(FACING_DIR)
         0000c800     04c0  
    3509 0000c810     0960          rets
    3510                    
    3511 0000c820           qjrgdorun
    3512 0000c820     5600          clr     a0
    3513 0000c830     b00d          move    a0,*a13(GETUP_TIME)     ;in control
         0000c840     0460  
    3514                    
    3515 0000c850           qjrgdorun_flung
    3516 0000c850     5600          clr     a0
    3517 0000c860     b00d          move    a0,*a13(USR_VAR1)       ;with x-xel
         0000c870     0850  
    3518 0000c880     b00d          move    a0,*a13(RUN_TIME)
         0000c890     07b0  
    3519                    
    3520                    
    3521                    ;Bogosity..
    3522 0000c8a0     b5a0          move    *a13(FACING_DIR),a0     ;use facing
         0000c8b0     04c0  
    3523                    ;;      move    *a13(NEW_FACING_DIR),a0 ;use facing
    3524                    
    3525                    ;       move    *a13(WHOHITME),a14,L
    3526                    ;       move    *a14(FACING_DIR),a0
    3527                    ;       andi    MOVE_LEFT+MOVE_RIGHT,a0
    3528                    ;       xori    0ch,a0
    3529                    
    3530 0000c8c0           qjrgok
    3531 0000c8c0     b00d          move    a0,*a13(MOVE_DIR)
         0000c8d0     04b0  
    3532                    
    3533 0000c8e0     b5a1          move    *a13(NEW_FACING_DIR),a1
         0000c8f0     04d0  
    3534 0000c900     0b81          andi    MOVE_UP+MOVE_DOWN,a1
         0000c910 fffffffc  
    3535 0000c930     5401          or      a0,a1                   ;LEFT or RIGHT
    3536 0000c940     b02d          move    a1,*a13(FACING_DIR)     ;face same dir as run
         0000c950     04c0  
    3537                    
    3538 0000c960     b5a0          move    *a13(WRESTLERNUM),a0
         0000c970     0590  
    3539 0000c980                   X32     a0
    3540 0000c990     0b20          addi    qjrgrun_anims,a0
         0000c9a0 0000caf0' 
    3541 0000c9c0     8600          move    *a0,a0,L                ;run anim
    3542 0000c9d0     0d5f          calla   change_anim1a
         0000c9e0 00000000! 
    3543                    
    3544 0000ca00                   SETMODE RUNNING
    3545                    
    3546 0000cab0     1820          movk    1,a0
    3547 0000cac0     b00d          move    a0,*a13(DELAY_BUTNS)
         0000cad0     0ab0  
    3548                    
    3549 0000cae0     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   80

    3550                    
    3551                            .ref    bam_run_anim
    3552                            .ref    dnk_run_anim
    3553                            .ref    hrt_run_anim
    3554                            .ref    lex_run_anim
    3555                            .ref    rzr_run_anim
    3556                            .ref    shn_run_anim
    3557                            .ref    und_run_anim
    3558                            .ref    yok_run_anim
    3559                    
    3560 0000caf0           qjrgrun_anims
    3561 0000caf0 00000000!         .long   hrt_run_anim    ;0 Bret Hart
    3562 0000cb10 00000000!         .long   rzr_run_anim    ;1 Razor Ramon
    3563 0000cb30 00000000!         .long   und_run_anim    ;2 Undertaker
    3564 0000cb50 00000000!         .long   yok_run_anim    ;3 Yokozuna
    3565 0000cb70 00000000!         .long   shn_run_anim    ;4 Shawn Michaels
    3566 0000cb90 00000000!         .long   bam_run_anim    ;5 Bam Bam
    3567 0000cbb0 00000000!         .long   dnk_run_anim    ;6 Doink
    3568 0000cbd0 00000000!         .long   dnk_run_anim    ;7 spare
    3569 0000cbf0 00000000!         .long   lex_run_anim    ;8 Lex Luger
    3570 0000cc10 00000000!         .long   dnk_run_anim    ;9 Referee
    3571                    
    3572                    
    3573                    *****************************************************************************
    3574                    
    3575 0000cc30            SUBR   flash_white
    3576                    
    3577 0000cc30     09e1          movi    [1111h,0000h],a1        ;[color,pal]
         0000cc40 11110000  
    3578 0000cc60     09e2          movi    [256,400],a2            ;[Ysz,Xsz]
         0000cc70 01000190  
    3579 0000cc90     5663          clr     a3                      ;[Ypos,Xpos]
    3580 0000cca0     5684          clr     a4                      ;SAG
    3581 0000ccb0     09e5          movi    DMACAL,a5               ;[offset,ctrl]
         0000ccc0 0000800c  
    3582 0000cce0     0d5f          calla   QDMAN
         0000ccf0 00000000! 
    3583 0000cd10     0960          rets
    3584                    
    3585 0000cd20            SUBR   flash_red
    3586                    
    3587 0000cd20     09e1          movi    [1b1bh,0000h],a1        ;[color,pal]
         0000cd30 1b1b0000  
    3588 0000cd50     09e2          movi    [256,400],a2            ;[Ysz,Xsz]
         0000cd60 01000190  
    3589 0000cd80     5663          clr     a3                      ;[Ypos,Xpos]
    3590 0000cd90     5684          clr     a4                      ;SAG
    3591 0000cda0     09e5          movi    DMACAL,a5               ;[offset,ctrl]
         0000cdb0 0000800c  
    3592 0000cdd0     0d5f          calla   QDMAN
         0000cde0 00000000! 
    3593 0000ce00     0960          rets
    3594                    
    3595                    *****************************************************************************
    3596                    *
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   81

    3597                    * return carry set if wrestler a0 has any living teammates. (excluding self)
    3598                    *
    3599                    * trashes scratch
    3600                    
    3601 0000ce10            SUBR   ck_live_teammates
    3602                    
    3603 0000ce10                   PUSH    a2,a3,a4
    3604                    
    3605 0000ce30     b401          move    *a0(PLYR_SIDE),a1
         0000ce40     05b0  
    3606 0000ce50     09e2          movi    process_ptrs,a2
         0000ce60 00000000! 
    3607 0000ce80     18e3          movk    NUM_WRES,a3
    3608 0000ce90     9644  atzblp  move    *a2+,a4,L
    3609 0000cea0     ca0f          jrz     atzbnxt         ;skip inactive
    3610 0000ceb0     4880          cmp     a4,a0
    3611 0000cec0     ca0d          jreq    atzbnxt         ;skip self
    3612 0000ced0     b48e          move    *a4(PLYR_SIDE),a14
         0000cee0     05b0  
    3613 0000cef0     49c1          cmp     a14,a1
    3614 0000cf00     cb09          jrne    atzbnxt         ;skip other team
    3615 0000cf10     b48e          move    *a4(PLYRMODE),a14
         0000cf20     05c0  
    3616 0000cf30     0b4e          cmpi    MODE_DEAD,a14
         0000cf40     fff6  
    3617 0000cf50     ca04          jreq    atzbnxt         ;skip dead
    3618                    
    3619                            ;found live teammate.
    3620 0000cf60                   PULL    a2,a3,a4
    3621 0000cf80     0de0          setc
    3622 0000cf90     0960          rets
    3623                    
    3624 0000cfa0     3e43  atzbnxt dsj     a3,atzblp
    3625 0000cfb0                   PULL    a2,a3,a4
    3626 0000cfd0     0320          clrc
    3627 0000cfe0     0960          rets
    3628                            
    3629                            
    3630                    
    3631                    *****************************************************************************
    3632                    *
    3633                    * return carry set if wrestler a0 has any teammates, living or dead.
    3634                    *
    3635                    * trashes scratch
    3636                    
    3637 0000cff0            SUBR   ck_any_teammates
    3638                    
    3639 0000cff0                   PUSH    a2,a3,a4
    3640                    
    3641 0000d010     b401          move    *a0(PLYR_SIDE),a1
         0000d020     05b0  
    3642 0000d030     09e2          movi    process_ptrs,a2
         0000d040 00000000! 
    3643 0000d060     18e3          movk    NUM_WRES,a3
    3644 0000d070     9644  abznlp  move    *a2+,a4,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   82

    3645 0000d080     ca0a          jrz     abznnxt         ;skip inactive
    3646 0000d090     4880          cmp     a4,a0
    3647 0000d0a0     ca08          jreq    abznnxt         ;skip self
    3648 0000d0b0     b48e          move    *a4(PLYR_SIDE),a14
         0000d0c0     05b0  
    3649 0000d0d0     49c1          cmp     a14,a1
    3650 0000d0e0     cb04          jrne    abznnxt         ;skip other team
    3651                    
    3652                            ;found a teammate.
    3653 0000d0f0                   PULL    a2,a3,a4
    3654 0000d110     0de0          setc
    3655 0000d120     0960          rets
    3656                    
    3657 0000d130     3da3  abznnxt dsj     a3,abznlp
    3658 0000d140                   PULL    a2,a3,a4
    3659 0000d160     0320          clrc
    3660 0000d170     0960          rets
    3661                            
    3662                            
    3663                    
    3664                    *****************************************************************************
    3665                    *
    3666                    * set smart_attack bit and set smart_target to *a13(WHOIHIT).
    3667                    *
    3668                    
    3669 0000d180            SUBR   target_whoihit
    3670                    
    3671 0000d180     b5ae          move    *a13(STATUS_FLAGS),a14
         0000d190     0b50  
    3672 0000d1a0     0bae          ori     M_SMART_ATTACK,a14
         0000d1b0 00000010  
    3673 0000d1d0     b1cd          move    a14,*a13(STATUS_FLAGS)
         0000d1e0     0b50  
    3674                    
    3675 0000d1f0     bbad          move    *a13(WHOIHIT),*a13(SMART_TARGET),L
         0000d200     0500  
         0000d210     0ca0  
    3676 0000d220     0960          rets
    3677                    
    3678                    *****************************************************************************
    3679                    *
    3680                    * If all of a13's opponents are dead and !zombie, and a13 is either outside
    3681                    * or all his opponents are outside, setc and rets.  else clrc and rets.
    3682                    
    3683 0000d230            SUBR   raisearm_check
    3684                    
    3685                            ;if a13 is human and this is a royal rumble, make sure @FINAL_PTR is
    3686                            ;FFh.  If it isn't, don't raise arm.
    3687 0000d230     05ae          move    @royal_rumble,a14
         0000d240 00000000! 
    3688 0000d260     ca09          jrz     didehack_done
    3689 0000d270     b5ae          move    *a13(PLYR_TYPE),a14
         0000d280     05a0  
    3690 0000d290     cb06          jrnz    didehack_done           ;PLAYER=0
    3691 0000d2a0     07ae          move    @FINAL_PTR,a14,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   83

         0000d2b0 00000000! 
    3692 0000d2d0     85ce          move    *a14,a14
    3693 0000d2e0     ce01          jrn     didehack_done
    3694 0000d2f0     c022          jruc    dideclrc                        ;no good
    3695 0000d300           didehack_done
    3696                    
    3697 0000d300     b5a0          move    *a13(PLYR_SIDE),a0
         0000d310     05b0  
    3698                    
    3699 0000d320     18e1          movk    NUM_WRES,a1
    3700 0000d330     09e2          movi    process_ptrs,a2
         0000d340 00000000! 
    3701 0000d360     5684          clr     a4              ;'is any opponent inside' flag.
    3702                    
    3703 0000d370     9643  didelp  move    *a2+,a3,L
    3704 0000d380     ca11          jrz     didenxt         ;skip inactive
    3705                    
    3706 0000d390     b46e          move    *a3(PLYR_SIDE),a14
         0000d3a0     05b0  
    3707 0000d3b0     49c0          cmp     a14,a0
    3708 0000d3c0     ca0d          jreq    didenxt         ;skip a13 and teammates
    3709                    
    3710 0000d3d0     b46e          move    *a3(PLYRMODE),a14
         0000d3e0     05c0  
    3711 0000d3f0     0b4e          cmpi    MODE_DEAD,a14
         0000d400     fff6  
    3712 0000d410     cb10          jrne    dideclrc                ;opp dead?
    3713                    
    3714 0000d420     b66e          move    *a3(STATUS_FLAGS),a14,L
         0000d430     0b50  
    3715 0000d440     1f8e          btst    B_ZOMBIE,a14
    3716 0000d450     cb0c          jrnz    dideclrc                ;zombie?
    3717                    
    3718 0000d460     b463          move    *a3(INRING),a3
         0000d470     0560  
    3719 0000d480     cb01          jrnz    didenxt
    3720                    
    3721                            ;dead !zombie bad guy is inside.  set a4
    3722 0000d490     1024          inc     a4
    3723 0000d4a0     3e81  didenxt dsj     a1,didelp
    3724                    
    3725                            ;okay, all our opponents are dead and staying that way.  now check
    3726                            ; the inside/outside stuff.
    3727 0000d4b0     b5ae          move    *a13(INRING),a14
         0000d4c0     0560  
    3728 0000d4d0     cb02          jrnz    didesetc                ;am I outside?
    3729                    
    3730 0000d4e0                   TEST    a4
    3731 0000d4f0     cb02          jrnz    dideclrc                ;is any opponent inside?
    3732                    
    3733 0000d500     0de0  didesetc        setc
    3734 0000d510     0960          rets
    3735                    
    3736 0000d520     0320  dideclrc        clrc
    3737 0000d530     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   84

    3738                    
    3739                    *****************************************************************************
    3740                    *
    3741                    * Set WHOIHIT to closest opponent.  Call this after you do a LEAPAT in your
    3742                    * pin.  Since pins don't actually attack, we need to do this so that WHOIHIT
    3743                    * is correct when we call grnd_hit.  We can't use CLOSEST in grnd_hit, since
    3744                    * it's possible to land closer to someone else than the guy you meant to pin.
    3745                    * ONLY USE THIS IN PINS!!!!!!!!!!!!!! Cuz it also sets the PINNED bit.
    3746                    *
    3747                    
    3748 0000d540            SUBR   hit_nearest
    3749                    
    3750                            ;set WHOIHIT and victim WHOPINNEDME
    3751 0000d540     b5a0          move    *a13(CLOSEST_NUM),a0
         0000d550     03a0  
    3752 0000d560                   X32     a0
    3753 0000d570     0b20          addi    process_ptrs,a0
         0000d580 00000000! 
    3754 0000d5a0     8600          move    *a0,a0,L
    3755 0000d5b0     b20d          move    a0,*a13(WHOIHIT),L
         0000d5c0     0500  
    3756 0000d5d0     b3a0          move    a13,*a0(WHOPINNEDME),L
         0000d5e0     0520  
    3757                    
    3758                            ;set victim's PINNED bit.
    3759 0000d5f0     b40e          move    *a0(STATUS_FLAGS),a14
         0000d600     0b50  
    3760 0000d610     0bae          ori     M_PINNED,a14
         0000d620 00000020  
    3761 0000d640     b1c0          move    a14,*a0(STATUS_FLAGS)
         0000d650     0b50  
    3762                    
    3763 0000d660     0960          rets
    3764                    
    3765                    *****************************************************************************
    3766                    *
    3767                    * Change into another wrestler and re-enter the battle.  This should probably
    3768                    * only be used in the king of the ring match.
    3769                    *
    3770                    * 0a13H = pointer to process to change
    3771                    *
    3772                    
    3773 0000d670            SUBR   change_wrestler
    3774                    
    3775                    ****    ;change wrestlernum
    3776 0000d670     b9ad          move    *a13(NEW_WRESTLERNUM),*a13(WRESTLERNUM)
         0000d680     0cc0  
         0000d690     0590  
    3777                    
    3778                    ****    ;make the new special move processes
    3779 0000d6a0     0d3f          callr   init_smoves
         0000d6b0     012b  
    3780                    
    3781                    ****    ;change palette
    3782 0000d6c0     0d5f          calla   choose_pal
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   85

         0000d6d0 0000aff0' 
    3783 0000d6f0     4e10          move    b0,a0
    3784 0000d700     0d5f          calla   pal_getf
         0000d710 00000000! 
    3785                    
    3786 0000d730     b00d          move    a0,*a13(OBJ_PAL)
         0000d740     07a0  
    3787 0000d750     b00d          move    a0,*a13(MY_PAL)
         0000d760     08a0  
    3788 0000d770     18a9          movk    MAX_PIECES-1,a9
    3789 0000d780     b7a1          move    *a13(OBJ_BASE),a1,L
         0000d790     0760  
    3790 0000d7a0     1001          addk    20h,a1                  ;skip shadow
    3791 0000d7b0     9628  dqskglnxt       move    *a1+,a8,L
    3792 0000d7c0     b008          move    a0,*a8(OPAL)
         0000d7d0     0150  
    3793 0000d7e0     3c89          dsj     a9,dqskglnxt
    3794                    
    3795                    ****    ;re-initialize animation
    3796 0000d7f0     09ce          movi    MODE_NORMAL,a14
         0000d800     0000  
    3797 0000d810     b1cd          move    a14,*a13(PLYRMODE)
         0000d820     05c0  
    3798 0000d830     b5a9          move    *a13(WRESTLERNUM),a9
         0000d840     0590  
    3799 0000d850                   X64     a9
    3800 0000d860     0b29          addi    dqskinit_anims,a9
         0000d870 0000dc80' 
    3801 0000d890     9720          move    *a9+,a0,L
    3802 0000d8a0     0d5f          calla   change_anim1a
         0000d8b0 00000000! 
    3803 0000d8d0     8720          move    *a9,a0,L
    3804 0000d8e0     0d5f          calla   change_anim2a
         0000d8f0 00000000! 
    3805                    
    3806                    ****    ;reset STATUS_FLAGS
    3807 0000d910     57ce          clr     a14
    3808 0000d920     b3cd          move    a14,*a13(STATUS_FLAGS),L
         0000d930     0b50  
    3809                    
    3810                    ****    ;reset life and combo data
    3811 0000d940     0d5f          calla   init_wres_life_data
         0000d950 00000000! 
    3812                    
    3813                    ****    ;clear I_WILL_DIE
    3814 0000d970     57ce          clr     a14
    3815 0000d980     b1cd          move    a14,*a13(I_WILL_DIE)
         0000d990     0b30  
    3816                    
    3817                    ****    ;set new position
    3818 0000d9a0     09e0          movi    dqskinit_positions,a0
         0000d9b0 0000dec0' 
    3819 0000d9d0     b40e  dqsklp1 move    *a0(dqskNXT),a14,W
         0000d9e0     0040  
    3820 0000d9f0     ce11          jrn     dqskusea0               ;if last entry, use by default.
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   86

    3821                    
    3822                            ;use current entry if:
    3823                            ; X <= WORLDTLX-30 or
    3824                            ; X >= WORLDTLX+400+30
    3825                    
    3826 0000da00     b401          move    *a0(dqskXPOS),a1
         0000da10     0000  
    3827 0000da20     07ae          move    @WORLDTLX,a14,L
         0000da30 00000000! 
    3828 0000da50     2a0e          sra     16,a14
    3829 0000da60     17ce          subk    30,a14
    3830 0000da70     49c1          cmp     a14,a1
    3831 0000da80     c608          jrle    dqskusea0
    3832 0000da90     0b0e          addi    460,a14
         0000daa0     01cc  
    3833 0000dab0     49c1          cmp     a14,a1
    3834 0000dac0     c504          jrge    dqskusea0
    3835                    
    3836                    
    3837 0000dad0     0b20  dqsknxt1        addi    dqskSIZE,a0
         0000dae0 00000040  
    3838 0000db00     c0ec          jruc    dqsklp1
    3839                    
    3840 0000db10     b80d  dqskusea0       move    *a0(dqskXPOS),*a13(OBJ_XPOSINT)
         0000db20     0000  
         0000db30     0110  
    3841 0000db40     b80d          move    *a0(dqskZPOS),*a13(OBJ_ZPOSINT)
         0000db50     0010  
         0000db60     0150  
    3842 0000db70     b80d          move    *a0(dqskYPOS),*a13(OBJ_YPOSINT)
         0000db80     0020  
         0000db90     0130  
    3843 0000dba0     b80d          move    *a0(dqskYPOS),*a13(GROUND_Y)
         0000dbb0     0020  
         0000dbc0     0570  
    3844 0000dbd0     b80d          move    *a0(dqskINRING),*a13(INRING)
         0000dbe0     0030  
         0000dbf0     0560  
    3845                    
    3846                    ****    ;clear old velocities
    3847 0000dc00     57ce          clr     a14
    3848 0000dc10     b3cd          move    a14,*a13(OBJ_XVEL),L
         0000dc20     02d0  
    3849 0000dc30     b3cd          move    a14,*a13(OBJ_YVEL),L
         0000dc40     02f0  
    3850 0000dc50     b3cd          move    a14,*a13(OBJ_ZVEL),L
         0000dc60     0310  
    3851                    
    3852 0000dc70     0960          rets
    3853                    
    3854                    
    3855 0000dc80           dqskinit_anims
    3856 0000dc80                   REFLONG hrt_stand4_anim,hrt_torso4_anim
    3857 0000dcc0                   REFLONG rzr_stand4_anim,rzr_torso4_anim
    3858 0000dd00                   REFLONG und_stand4_anim,und_torso4_anim
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   87

    3859 0000dd40                   REFLONG yok_stand4_anim,yok_torso4_anim
    3860 0000dd80                   REFLONG shn_stand4_anim,shn_torso4_anim
    3861 0000ddc0                   REFLONG bam_stand4_anim,bam_torso4_anim
    3862 0000de00                   REFLONG dnk_stand4_anim,dnk_torso4_anim
    3863 0000de40 00000000          .long   0,0
    3864 0000de80                   REFLONG lex_stand4_anim,lex_torso4_anim
    3865                    
    3866                    
    3867                            ;possible starting positions.  hunt until you find one that's
    3868                            ; offscreen, then use it.  If none of them are offscreen (should
    3869                            ; never happen,) use the last entry in the table.
    3870                    
    3871 0000dec0                   STRUCT  0
    3872 0000dec0                   WORD    dqskXPOS
    3873 0000dec0                   WORD    dqskZPOS
    3874 0000dec0                   WORD    dqskYPOS
    3875 0000dec0                   WORD    dqskINRING
    3876 0000dec0                   LABEL   dqskSIZE
    3877 0000dec0                   WORD    dqskNXT ;first element of NEXT entry. check for -1.
    3878                    
    3879                            ;XPOSINT, ZPOSINT, YPOSINT/GROUND_Y, INRING
    3880 0000dec0           dqskinit_positions
    3881 0000dec0     0432          .word   RING_X_CENTER,RING_Z_CENTER,MAT_Y,0     ;center
    3882 0000df00     0358          .word   RING_TOP_LEFT,RING_Z_CENTER,MAT_Y,0     ;center left
    3883 0000df40     0511          .word   RING_TOP_RIGHT,RING_Z_CENTER,MAT_Y,0    ;center right
    3884 0000df80     0325          .word   RING_BOT_LEFT,RING_BOT,MAT_Y,0          ;bottom left
    3885 0000dfc0     0544          .word   RING_BOT_RIGHT,RING_BOT,MAT_Y,0         ;bottom right
    3886 0000e000     024f          .word   024Fh,060Eh,0,1                         ;outside left
    3887 0000e040     060e          .word   060Eh,04ABh,0,1                         ;outside right
    3888 0000e080     ffff          .word   -1
    3889                    
    3890                    *****************************************************************************
    3891                    *
    3892                    * Kill all my special move processes.
    3893                    *
    3894                    
    3895 0000e090            SUBR   kill_smove_procs
    3896                    
    3897 0000e090                   PUSH    a2,a3
    3898                    
    3899                            ;loop through the processes. Anything with a PID of SMOVE_PID, and
    3900                            ; a PA8 that matches our a13 must go.
    3901 0000e0b0     07a3          move    @ACTIVE,a3,L
         0000e0c0 00000000! 
    3902 0000e0e0     4c62  zwsulp0 move    a3,a2           ;a2 = p->this
    3903 0000e0f0     ca0f          jrz     zwsudone0
    3904 0000e100     8643          move    *a2,a3,L        ;a3 = p->next
    3905 0000e110     b44e          move    *a2(PROCID),a14
         0000e120     0020  
    3906 0000e130     0b4e          cmpi    SMOVE_PID,a14
         0000e140     fed0  
    3907 0000e150     cbf8          jrne    zwsulp0
    3908 0000e160     b64e          move    *a2(PA8),a14,L
         0000e170     00c0  
    3909 0000e180     49cd          cmp     a14,a13
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   88

    3910 0000e190     cbf4          jrne    zwsulp0
    3911                    
    3912                            ;match.  kill this one
    3913 0000e1a0     4c40          move    a2,a0
    3914 0000e1b0     0d5f          calla   KILL
         0000e1c0 00000000! 
    3915 0000e1e0     c0ef          jruc    zwsulp0
    3916                    
    3917 0000e1f0           zwsudone0       PULL    a2,a3
    3918 0000e210     0960          rets
    3919                    
    3920                    *****************************************************************************
    3921                    *
    3922                    * Check to make sure your opponent is at rest and staying that way.  Check
    3923                    * to see if he's in the xxx_dead_anim.  And make sure he's in range.
    3924                    * Oh, and make sure there aren't any zombies either.
    3925                    *
    3926                    
    3927 0000e220            SUBR   can_pin
    3928                    
    3929                            ;no pin if there are any zombies or live wrestler on other team
    3930 0000e220     09e0          movi    process_ptrs,a0
         0000e230 00000000! 
    3931 0000e250     18e1          movk    NUM_WRES,a1
    3932 0000e260     b5a3          move    *a13(PLYR_SIDE),a3
         0000e270     05b0  
    3933 0000e280     9602  lazrlp0 move    *a0+,a2,L
    3934 0000e290     ca0d          jrz     lazrnxt0                        ;skip inactive
    3935 0000e2a0     b44e          move    *a2(PLYR_SIDE),a14
         0000e2b0     05b0  
    3936 0000e2c0     49c3          cmp     a14,a3
    3937 0000e2d0     ca09          jreq    lazrnxt0                        ;skip teammates
    3938 0000e2e0     b44e          move    *a2(PLYRMODE),a14
         0000e2f0     05c0  
    3939 0000e300     0b4e          cmpi    MODE_DEAD,a14
         0000e310     fff6  
    3940 0000e320     cb32          jrne    lazrclrc
    3941 0000e330     b44e          move    *a2(STATUS_FLAGS),a14
         0000e340     0b50  
    3942 0000e350     1f8e          btst    B_ZOMBIE,a14
    3943 0000e360     cb2e          jrnz    lazrclrc
    3944 0000e370     3e01  lazrnxt0        dsjs    a1,lazrlp0
    3945                    
    3946                            ;check range
    3947 0000e380     b5a0          move    *a13(CLOSEST_DIST),a0
         0000e390     0360  
    3948 0000e3a0     0b40          cmpi    70h,a0
         0000e3b0     ff8f  
    3949 0000e3c0     c728          jrgt    lazrclrc
    3950 0000e3d0     b5a0          move    *a13(CLOSEST_ZDIST),a0
         0000e3e0     0390  
    3951 0000e3f0     0b40          cmpi    50h,a0
         0000e400     ffaf  
    3952 0000e410     c723          jrgt    lazrclrc
    3953                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   89

    3954 0000e420     0d5f          calla   get_opp_process
         0000e430 00000000! 
    3955                    
    3956 0000e450     b40e          move    *a0(STATUS_FLAGS),a14
         0000e460     0b50  
    3957 0000e470     1ece          btst    B_PINABLE,a14
    3958 0000e480     ca1c          jrz     lazrclrc
    3959                    
    3960 0000e490           lazrsetc        ;just to be safe, set the PINNED bit on the guy
    3961 0000e490     b40e          move    *a0(STATUS_FLAGS),a14
         0000e4a0     0b50  
    3962 0000e4b0     0bae          ori     M_PINNED,a14
         0000e4c0 00000020  
    3963 0000e4e0     b1c0          move    a14,*a0(STATUS_FLAGS)
         0000e4f0     0b50  
    3964                    
    3965                            ;and set his WHOPINNEDME
    3966 0000e500     b3a0          move    a13,*a0(WHOPINNEDME),L
         0000e510     0520  
    3967                    
    3968                            ;and zero his velocities
    3969 0000e520     57ce          clr     a14
    3970 0000e530     b3c0          move    a14,*a0(OBJ_XVEL),L
         0000e540     02d0  
    3971 0000e550     b3c0          move    a14,*a0(OBJ_YVEL),L
         0000e560     02f0  
    3972 0000e570     b3c0          move    a14,*a0(OBJ_ZVEL),L
         0000e580     0310  
    3973                    
    3974                            ;and set his PTIME to one and clear his KOD bit, 'cuz he's probably
    3975                            ; been KO'd if he's a drone.
    3976 0000e590     182e          movk    1,a14
    3977 0000e5a0     b1c0          move    a14,*a0(PTIME)
         0000e5b0     0030  
    3978 0000e5c0     b40e          move    *a0(STATUS_FLAGS),a14
         0000e5d0     0b50  
    3979 0000e5e0     0b8e          andni   M_KOD,a14
         0000e5f0 00000080  
    3980 0000e610     b1c0          move    a14,*a0(STATUS_FLAGS)
         0000e620     0b50  
    3981                    
    3982 0000e630     0de0          setc
    3983 0000e640     0960          rets
    3984                    
    3985 0000e650     0320  lazrclrc        clrc
    3986 0000e660     0960          rets
    3987                    
    3988                    *****************************************************************************
    3989                    *
    3990                    * Dead wrestlers sit here.
    3991                    
    3992 0000e670            SUBR   xxx_dead_anim
    3993                    
    3994 0000e670     8002          .word   ANI_SETMODE,MODE_NOAUTOFLIP|MODE_UNINT
    3995 0000e690     8004          .word   ANI_SETPLYRMODE,MODE_DEAD
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   90

    3996                    
    3997 0000e6b0                   WL      ANI_CODE,hitlset_pinable_bit
    3998                    
    3999 0000e6e0                   WL      ANI_CODE,hitlko_if_drone
    4000                    
    4001 0000e710     807e          .word   ANI_ROT         ;just sit and do nothing
    4002                    
    4003                    
    4004                    
    4005                    *****
    4006                    * KO my process if I'm a drone.
    4007                    
    4008 0000e720            SUBRP  hitlko_if_drone
    4009                    
    4010                            ;don't go to sleep if this is an 8-on-1 or 8-on-2 match, UNLESS
    4011                            ; wrestler_count is 0, which means there's no hope of becoming
    4012                            ; a zombie.
    4013 0000e720     05ae          move    @royal_rumble,a14
         0000e730 00000000! 
    4014 0000e750     cb04          jrnz    hitlis8
    4015 0000e760     0d5f          calla   is_8_on_1
         0000e770 00000000! 
    4016 0000e790     c904          jrnc    hitlnot8
    4017 0000e7a0     05ae  hitlis8 move    @wrestler_count,a14
         0000e7b0 00000000! 
    4018 0000e7d0     cb10          jrnz    hitlrets
    4019 0000e7e0           hitlnot8
    4020                    
    4021 0000e7e0     b5ae          move    *a13(PLYR_TYPE),a14
         0000e7f0     05a0  
    4022 0000e800     0b4e          cmpi    PTYPE_DRONE,a14
         0000e810     fffe  
    4023 0000e820     cb0b          jrne    hitlrets
    4024                    
    4025                            ;don't KO if I've been pinned
    4026 0000e830     b5ae          move    *a13(STATUS_FLAGS),a14
         0000e840     0b50  
    4027 0000e850     1f4e          btst    B_PINNED,a14
    4028 0000e860     cb07          jrnz    hitlrets
    4029                    
    4030                            ;don't KO if our NO_KO bit is set.
    4031 0000e870     1eee          btst    B_NO_KO,a14
    4032 0000e880     cb05          jrnz    hitlrets
    4033                    
    4034 0000e890     0bae          ori     M_KOD,a14
         0000e8a0 00000080  
    4035 0000e8c0     b1cd          move    a14,*a13(STATUS_FLAGS)
         0000e8d0     0b50  
    4036                    
    4037 0000e8e0     0960  hitlrets        rets
    4038                    
    4039                    *****
    4040                    * set the PINABLE bit in STATUS_FLAGS
    4041                    
    4042 0000e8f0            SUBRP  hitlset_pinable_bit
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   91

    4043                    
    4044 0000e8f0     b5ae          move    *a13(STATUS_FLAGS),a14
         0000e900     0b50  
    4045 0000e910     0bae          ori     M_PINABLE,a14
         0000e920 00000200  
    4046 0000e940     b1cd          move    a14,*a13(STATUS_FLAGS)
         0000e950     0b50  
    4047 0000e960     0960          rets
    4048                    
    4049                    *****************************************************************************
    4050                    *
    4051                    * This gets called once each MATCH for every wrestler, not each round.
    4052                    * It creates the set of 'watchdog' processes that look out for special
    4053                    * moves that the usual method can't handle; specifically, stuff that
    4054                    * involves charging up with a stick, detailed control over timing, or
    4055                    * proximity to the bad guy.
    4056                    *
    4057                    
    4058 0000e970            SUBR   init_smoves
    4059                    
    4060 0000e970     b5a2          move    *a13(WRESTLERNUM),a2,W
         0000e980     0590  
    4061 0000e990                   X32     a2
    4062 0000e9a0     0b22          addi    xtqjspecial_moves,a2
         0000e9b0 0000eac0' 
    4063 0000e9d0     8642          move    *a2,a2,L
    4064 0000e9e0     ca0c          jrz     xtqjdone
    4065                    
    4066 0000e9f0           xtqjloop
    4067 0000e9f0     9647          move    *a2+,a7,L
    4068 0000ea00     ca0a          jrz     xtqjdone
    4069 0000ea10     09c1          movi    SMOVE_PID,a1
         0000ea20     012f  
    4070 0000ea30     4da8          move    a13,a8
    4071 0000ea40     0d5f          calla   GETPRC_INSERT
         0000ea50 00000000! 
    4072                    
    4073                            ;store reset address
    4074 0000ea70     ba00          move    *a0(PWAKE),*a0(SM_RESET_ADDRESS),L
         0000ea80     00e0  
         0000ea90     0100  
    4075 0000eaa0     c0f4          jruc    xtqjloop
    4076                    
    4077 0000eab0           xtqjdone
    4078 0000eab0     0960          rets
    4079                    
    4080                    
    4081 0000eac0           xtqjspecial_moves
    4082 0000eac0                   REFLONG hrt_smove_table         ;Bret
    4083 0000eae0                   REFLONG rzr_smove_table         ;Razor
    4084 0000eb00                   REFLONG und_smove_table         ;Taker
    4085 0000eb20                   REFLONG yok_smove_table         ;Yoko
    4086 0000eb40                   REFLONG shn_smove_table         ;Shawn
    4087 0000eb60                   REFLONG bam_smove_table         ;Bam Bam
    4088 0000eb80                   REFLONG dnk_smove_table         ;Doink
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   92

    4089 0000eba0 00000000          .long   0                       ;spare
    4090 0000ebc0                   REFLONG lex_smove_table         ;Lex
    4091                    
    4092                    *****************************************************************************
    4093                    
    4094 00000000                   .bss    krngpin_timeout,16              ;pin idiot check cntdown
    4095 00000010                   .bss    krnglast_dead,16                ;PCNT last time we had a one-team
    4096                                                            ; dead condition.       
    4097                    
    4098 0000ebe0            SUBR   match_timer
    4099                    
    4100 0000ebe0     1920          movk    9,a0
    4101 0000ebf0     0580          move    a0,@match_time          ;10's
         0000ec00 00000000! 
    4102 0000ec20     0580          move    a0,@match_time+10h      ;1's
         0000ec30 00000010! 
    4103 0000ec50     5600          clr     a0
    4104 0000ec60     0580          move    a0,@match_time+20h      ;fractional
         0000ec70 00000020! 
    4105                    
    4106 0000ec90     0d3f          callr   krngcreate_timer
         0000eca0     00af  
    4107                    
    4108 0000ecb0                   SLEEP   TSEC*2
    4109                    
    4110 0000ed00     1b20          movk    ADJSPEED,a0             ;game timer speed (1-5)
    4111 0000ed10     0d5f          calla   GET_ADJ
         0000ed20 00000000! 
    4112 0000ed40                   BADCHK  a0,1,5,3                ;reg,lo,hi,val
    4113 0000edd0                   X16     a0                      ;x 16 bits
    4114 0000ede0     0b20          addi    timer_table-10h,a0
         0000edf0 00010050' 
    4115 0000ee10     8401          move    *a0,a1
    4116                    
    4117                            ;slow the clock to 1/3 speed if this is the royal rumble
    4118 0000ee20     05ae          move    @royal_rumble,a14
         0000ee30 00000000! 
    4119 0000ee50     cb0d          jrnz    krngisrum
    4120                    
    4121                            ;slow the clock (2/3 speed) if it's 1v3.
    4122 0000ee60     05ae          move    @PSTATUS2,a14
         0000ee70 00000000! 
    4123 0000ee90     ca17          jrz     krngnfin
    4124 0000eea0     0b4e          cmpi    3,a14
         0000eeb0     fffc  
    4125 0000eec0     ca14          jreq    krngnfin
    4126                    
    4127 0000eed0     05ae          move    @NUM_OPPS,a14
         0000eee0 00000000! 
    4128 0000ef00     0b4e          cmpi    3,a14
         0000ef10     fffc  
    4129 0000ef20     cb0e          jrne    krngnfin
    4130                    
    4131 0000ef30     09ee  krngisrum       movi    0AAAAH,a14
         0000ef40 0000aaaa  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   93

    4132 0000ef60     5fc1          mpyu    a14,a1
    4133 0000ef70     2e01          srl     16,a1
    4134                    
    4135                            ;slow it yet again (down to 1/3 speed) if this is the final battle,
    4136 0000ef80     0d5f          calla   is_final_match
         0000ef90 00000000! 
    4137 0000efb0     c804          jrc     krngisfin
    4138 0000efc0     05ae          move    @royal_rumble,a14
         0000efd0 00000000! 
    4139 0000eff0     ca01          jrz     krngnfin
    4140 0000f000     2be1  krngisfin       sra     1,a1
    4141                    
    4142 0000f010     4c2a  krngnfin        move    a1,a10
    4143                    
    4144                            ;initialize krnglast_dead
    4145 0000f020     57ce          clr     a14
    4146 0000f030     058e          move    a14,@krnglast_dead
         0000f040 00000010- 
    4147                    
    4148                            ;initialize krngpin_timeout - we need to do this because one time in
    4149                            ; 2^16, when we hit our first all-dead condition, PCNT will be 1,
    4150                            ; and the code will think that this isn't a new condition and it
    4151                            ; won't reset this value.  Hey, it could happen.
    4152 0000f060     09ce          movi    4*TSEC,a14
         0000f070     00d4  
    4153 0000f080     058e          move    a14,@krngpin_timeout
         0000f090 00000000- 
    4154                    
    4155 0000f0b0           krngloop
    4156 0000f0b0                   SLEEPK  1
    4157                    
    4158 0000f0f0     05a0          move    @HALT,a0
         0000f100 00000000! 
    4159 0000f120     cbf8          jrnz    krngloop
    4160                    
    4161 0000f130     07a0          move    @match_time,a0,L
         0000f140 00000000! 
    4162 0000f160     caf4          jrz     krngloop
    4163                    
    4164                            ;call krngdec_timer and update_timer only if there's a live member
    4165                            ; of every team. (for this purpose, zombies count as live members)
    4166                    
    4167 0000f170     0d3f          callr   get_live_bits
         0000f180     032a  
    4168 0000f190     4c03          move    a0,a3
    4169                    
    4170 0000f1a0     0b43          cmpi    3,a3
         0000f1b0     fffc  
    4171 0000f1c0     cb05          jrne    krng1tmded              ;a team is completely dead
    4172                    
    4173 0000f1d0     0d3f          callr   krngdec_timer
         0000f1e0     008d  
    4174 0000f1f0     0d3f          callr   update_timer
         0000f200     00ea  
    4175                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   94

    4176 0000f210     c0e9          jruc    krngloop
    4177                    
    4178 0000f220           krng1tmded      ;one team is completely dead - wait five seconds, and if there's
    4179                            ; no pin by then, award the round to the team that's sitting on
    4180                            ; it's silly drone ass instead of pinning.
    4181                    
    4182                            ;check krnglast_dead to see if this is a new all-dead condition or
    4183                            ; an old one.  if it's a new one, we need to reset krngpin_timeout.
    4184 0000f220     05ae          move    @PCNT,a14
         0000f230 00000000! 
    4185 0000f250     05a0          move    @krnglast_dead,a0
         0000f260 00000010- 
    4186 0000f280     440e          sub     a0,a14
    4187 0000f290     142e          dec     a14
    4188 0000f2a0     ca32          jrz     krngold
    4189                    
    4190                            ;new dead condition.  reset krngpin_timeout.
    4191                            ;temp! - 314
    4192                            .if DEBUG
    4193                            DBEVENT BDE_ALL_DEAD,a13,L,a13,L,a13,L
    4194                            .endif
    4195                    
    4196 0000f2b0     09ce          movi    5*TSEC,a14
         0000f2c0     0109  
    4197 0000f2d0     058e          move    a14,@krngpin_timeout
         0000f2e0 00000000- 
    4198                    
    4199                            ;clear reduce_bog.  if we're in 8-on-1 or 8-on-2 mode, clear this
    4200                            ; only if the human team is dead, or the drones are dead and no
    4201                            ; more are coming.
    4202 0000f300     05ae          move    @royal_rumble,a14
         0000f310 00000000! 
    4203 0000f330     cb0a          jrnz    krngck8_2
    4204 0000f340     0d5f          calla   is_8_on_1
         0000f350 00000000! 
    4205 0000f370     c90e          jrnc    krngcrb
    4206                    
    4207 0000f380           krngck8_1       ;check the 8-on-1 case
    4208 0000f380     05ae          move    @PSTATUS2,a14
         0000f390 00000000! 
    4209 0000f3b0     506e          and     a3,a14          ;a3 is bit of live team
    4210 0000f3c0     ca09          jrz     krngcrb         ;on z, human team is dead
    4211 0000f3d0     c002          jruc    krngdtd         ;else dead team is drones
    4212                    
    4213 0000f3e0           krngck8_2       ;check the 8-on-2 case
    4214 0000f3e0     1fe3          btst    0,a3            ;team 0 is always humans in 8 on 2
    4215 0000f3f0     ca06          jrz     krngcrb         ;on z, human team is dead
    4216                    
    4217 0000f400           krngdtd ;dead team is drones
    4218 0000f400     05ae          move    @wrestler_count,a14
         0000f410 00000000! 
    4219 0000f430     0b4e          cmpi    1,a14
         0000f440     fffe  
    4220 0000f450     c50a          jrge    krngncrb
    4221                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   95

    4222 0000f460     57ce  krngcrb clr     a14
    4223 0000f470     058e          move    a14,@reduce_bog
         0000f480 00000000! 
    4224                    
    4225                            ;wake the crowd
    4226 0000f4a0     07a0          move    @crowd_process,a0,L
         0000f4b0 00000000! 
    4227 0000f4d0     182e          movk    1,a14
    4228 0000f4e0     b1c0          move    a14,*a0(PTIME)
         0000f4f0     0030  
    4229                    
    4230                    
    4231 0000f500           krngncrb        ;create the PIN HIM message process.
    4232 0000f500     4c69          move    a3,a9
    4233 0000f510     0bc9          xori    3,a9
         0000f520 00000003  
    4234 0000f540     2fe9          srl     1,a9            ;a8 is dead team (0 or 1)
    4235 0000f550                   CREATE  PINHIM_ANIM_PID,pin_prompt
    4236                    
    4237 0000f5d0           krngold ;update krnglast_dead
    4238 0000f5d0     05ae          move    @PCNT,a14
         0000f5e0 00000000! 
    4239 0000f600     058e          move    a14,@krnglast_dead
         0000f610 00000010- 
    4240                    
    4241                            ;dec pin_timeout and call the round if time's up.
    4242 0000f630     05ae          move    @krngpin_timeout,a14
         0000f640 00000000- 
    4243 0000f660     caa4          jrz     krngloop                        ;we've already called this round
    4244 0000f670     142e          dec     a14
    4245 0000f680     ca04          jrz     krngend                 ;time's up - do it.
    4246 0000f690     058e          move    a14,@krngpin_timeout
         0000f6a0 00000000- 
    4247 0000f6c0     c09e          jruc    krngloop
    4248                    
    4249 0000f6d0           krngend
    4250 0000f6d0                   CREATE  ANNC_PID,announce_rnd_winner
    4251                            .if DEBUG
    4252                            move    a13,*a0(PDATA),L        ;krngCREATOR (pdata)
    4253                            movi    $,a14
    4254                            move    a14,*a0(PDATA+20h),L    ;krngORIGIN
    4255                            .endif
    4256                    
    4257                            ;stuff a 0 in krngpin_timeout so we'll know that there's no further
    4258                            ; action to be taken on this all-dead condition.
    4259 0000f750     57ce          clr     a14
    4260 0000f760     058e          move    a14,@krngpin_timeout
         0000f770 00000000- 
    4261 0000f790     c091          jruc    krngloop
    4262                    
    4263                    
    4264                    ********************
    4265                    
    4266 0000f7a0           krngcreate_timer
    4267                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   96

    4268                            ;set pal
    4269 0000f7a0     09f0          movi    WGFS_W_P,b0
         0000f7b0 00000000! 
    4270 0000f7d0     0d5f          calla   is_8_on_1
         0000f7e0 00000000! 
    4271 0000f800     c903          jrnc    krngnfin2
    4272 0000f810     09f0          movi    WGSF_Y_P,b0
         0000f820 00000000! 
    4273                    
    4274 0000f840     09e0  krngnfin2       movi    [186,0],a0                      ;x pos
         0000f850 00ba0000  
    4275 0000f870     09e1          movi    [21,0],a1                       ;y pos
         0000f880 00150000  
    4276 0000f8a0     09e2          movi    WGSF20_9,a2
         0000f8b0 00000000! 
    4277 0000f8d0     09c3          movi    200,a3                  ;z pos
         0000f8e0     00c8  
    4278 0000f8f0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         0000f900 0000a102  
    4279 0000f920     09c5          movi    TYPTIMERDIGIT,a5
         0000f930     0130  
    4280 0000f940     56c6          clr     a6                              ;x vel
    4281 0000f950     56e7          clr     a7                              ;y vel
    4282 0000f960                   PUSH    b0
    4283 0000f970     0d5f          calla   BEGINOBJP
         0000f980 00000000! 
    4284 0000f9a0                   PULL    b0
    4285 0000f9b0     b30d          move    a8,*a13(PDATA+20h),L            ;10's image pointer
         0000f9c0     0120  
    4286                    
    4287 0000f9d0     09e0          movi    [200+2,0],a0                    ;x pos
         0000f9e0 00ca0000  
    4288 0000fa00     09e1          movi    [21,0],a1                       ;y pos
         0000fa10 00150000  
    4289 0000fa30     09e2          movi    WGSF20_9,a2
         0000fa40 00000000! 
    4290 0000fa60     0d5f          calla   BEGINOBJP
         0000fa70 00000000! 
    4291 0000fa90     b30d          move    a8,*a13(PDATA),L                ;1's image pointer
         0000faa0     0100  
    4292                    
    4293 0000fab0     0960          rets
    4294                    
    4295                    ********************
    4296                    
    4297 0000fac0           krngdec_timer
    4298 0000fac0     07a0          move    @match_time,a0,L
         0000fad0 00000000! 
    4299 0000faf0     0b60          cmpi    090009h,a0
         0000fb00 fff6fff6  
    4300 0000fb20     cb15          jrne    krngno_reset_pal
    4301 0000fb30     09e0          movi    WGFS_W_P,a0
         0000fb40 00000000! 
    4302 0000fb60     0d5f          calla   is_8_on_1
         0000fb70 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   97

    4303 0000fb90     c903          jrnc    krngnfin3
    4304 0000fba0     09e0          movi    WGSF_Y_P,a0
         0000fbb0 00000000! 
    4305                    
    4306 0000fbd0     0d5f  krngnfin3       calla   pal_getf
         0000fbe0 00000000! 
    4307 0000fc00     b7a8          move    *a13(PDATA+20h),a8,L    ;10's image pointer
         0000fc10     0120  
    4308 0000fc20     b008          move    a0,*a8(OPAL)
         0000fc30     0150  
    4309 0000fc40     b7a8          move    *a13(PDATA),a8,L        ;10's image pointer
         0000fc50     0100  
    4310 0000fc60     b008          move    a0,*a8(OPAL)
         0000fc70     0150  
    4311                    
    4312 0000fc80           krngno_reset_pal
    4313                    
    4314 0000fc80     05a0          move    @match_time+20h,a0      ;fractional
         0000fc90 00000020! 
    4315 0000fcb0     4540          sub     a10,a0
    4316                    
    4317 0000fcc0     0580          move    a0,@match_time+20h
         0000fcd0 00000020! 
    4318 0000fcf0     c935          jrnc    krngno_change
    4319                    
    4320 0000fd00     05a0          move    @match_time+10h,a0      ;1's
         0000fd10 00000010! 
    4321 0000fd30     1420          dec     a0
    4322 0000fd40     0580          move    a0,@match_time+10h
         0000fd50 00000010! 
    4323 0000fd70     c91c          jrnc    krngno_borrow
    4324                    
    4325 0000fd80     1920          movk    9,a0
    4326 0000fd90     0580          move    a0,@match_time+10h
         0000fda0 00000010! 
    4327                    
    4328 0000fdc0     05a0          move    @match_time,a0          ;10's
         0000fdd0 00000000! 
    4329 0000fdf0     1420          dec     a0
    4330 0000fe00     0580          move    a0,@match_time
         0000fe10 00000000! 
    4331                    
    4332 0000fe30     0b40          cmpi    0,a0
         0000fe40     ffff  
    4333                    
    4334 0000fe50     cb0e          jrne    krngno_borrow
    4335 0000fe60     09e0          movi    WGSF_R_P,a0
         0000fe70 00000000! 
    4336 0000fe90     0d5f          calla   pal_getf
         0000fea0 00000000! 
    4337 0000fec0     b7a8          move    *a13(PDATA+20h),a8,L    ;10's image pointer
         0000fed0     0120  
    4338 0000fee0     b008          move    a0,*a8(OPAL)
         0000fef0     0150  
    4339 0000ff00     b7a8          move    *a13(PDATA),a8,L        ;10's image pointer
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   98

         0000ff10     0100  
    4340 0000ff20     b008          move    a0,*a8(OPAL)
         0000ff30     0150  
    4341                    
    4342 0000ff40           krngno_borrow
    4343                            ;if time is less than 15, make noise
    4344 0000ff40     07a0          move    @match_time,a0,L
         0000ff50 00000000! 
    4345 0000ff70     4c01          move    a0,a1
    4346 0000ff80     2a00          sra     16,a0
    4347 0000ff90     0b81          andi    0Fh,a1
         0000ffa0 fffffff0  
    4348 0000ffc0     2081          sla     4,a1
    4349 0000ffd0     5420          or      a1,a0
    4350 0000ffe0     0b40          cmpi    10h,a0
         0000fff0     ffef  
    4351 00010000     c704          jrgt    krngno_change
    4352 00010010     1940          movk    10,a0                   ;Time warning sound
    4353 00010020     0d5f          calla   triple_sound
         00010030 00000000! 
    4354                    
    4355 00010050           krngno_change
    4356 00010050     0960          rets
    4357                    
    4358 00010060           timer_table
    4359                            .asg    1500,BASETM     ;2100   ;16
    4360                    
    4361 00010060     041a          .word   BASETM-BASETM*30/100    ;1 (slowest)    ;76.6 seconds/round
    4362 00010070     04fb          .word   BASETM-BASETM*15/100    ;2 (slower)
    4363 00010080     05dc          .word   BASETM                  ;3 (default)    ;53.6 seconds/round
    4364 00010090     06bd          .word   BASETM+BASETM*15/100    ;4 (faster)
    4365 000100a0     079e          .word   BASETM+BASETM*30/100    ;5 (fastest)    ;41.2 seconds/round
    4366                    
    4367                    
    4368                    ********************
    4369                    
    4370 000100b0            SUBR   update_timer
    4371                    
    4372 000100b0     05a0          move    @match_time,a0          ;10's
         000100c0 00000000! 
    4373                            .if DEBUG
    4374                            cmpi    10,a0
    4375                            jrlt    krngok1
    4376                    
    4377                            ;clock digit out of range!
    4378                            LOCKUP
    4379                    krngok1
    4380                            .endif
    4381                    
    4382 000100e0                   X32     a0
    4383 000100f0     0b20          addi    digit_tbl,a0
         00010100 00010a60' 
    4384 00010120     8600          move    *a0,a0,L                ;* image
    4385 00010130     b7a8          move    *a13(PDATA+20h),a8,L    ;10's image pointer
         00010140     0120  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE   99

    4386 00010150     b501          move    *a8(OCTRL),a1           ;DMA flags
         00010160     00f0  
    4387 00010170     0d5f          calla   change_image
         00010180 00000000! 
    4388                    
    4389 000101a0     05a0          move    @match_time+10h,a0      ;1's
         000101b0 00000010! 
    4390                            .if DEBUG
    4391                            cmpi    10,a0
    4392                            jrlt    krngok2
    4393                    
    4394                            ;clock digit out of range!
    4395                            LOCKUP
    4396                            .endif
    4397 000101d0           krngok2
    4398                    
    4399 000101d0                   X32     a0
    4400 000101e0     0b20          addi    digit_tbl,a0
         000101f0 00010a60' 
    4401 00010210     8600          move    *a0,a0,L                ;* image
    4402 00010220     b7a8          move    *a13(PDATA),a8,L        ;1's image pointer
         00010230     0100  
    4403 00010240     b501          move    *a8(OCTRL),a1           ;DMA flags
         00010250     00f0  
    4404 00010260     0d5f          calla   change_image
         00010270 00000000! 
    4405                    
    4406 00010290     0960          rets
    4407                    
    4408                    **********************************************
    4409                    *
    4410                    *
    4411                    
    4412 000102a0            SUBR   wrestler_counter
    4413                    
    4414 000102a0     1909          movk    8,a9                    ; Initial wrestler count
    4415 000102b0     0589          move    a9,@wrestler_count      ; Initialize the count
         000102c0 00000000! 
    4416                    
    4417                    ;Turn on remaining word
    4418 000102e0     09e0          movi    [126h,0],a0
         000102f0 01260000  
    4419 00010310     576b          clr     a11
    4420 00010320     05ae          move    @PSTATUS2,a14
         00010330 00000000! 
    4421 00010350     0b4e          cmpi    3,a14
         00010360     fffc  
    4422 00010370     ca05          jrz     qmndno_adj
    4423 00010380     1fce          btst    1,a14
    4424 00010390     ca03          jrz     qmndno_adj
    4425 000103a0     09eb          movi    [11ah,0],a11
         000103b0 011a0000  
    4426 000103d0           qmndno_adj
    4427 000103d0     4560          sub     a11,a0
    4428 000103e0     09e1          movi    [32h,0],a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE  100

         000103f0 00320000  
    4429 00010410     09e2          movi    remaining,a2
         00010420 00000000! 
    4430              0009  name_z          equ     9
    4431 00010440     09c3          movi    name_z,a3               ;Z
         00010450     0009  
    4432 00010460     09e4          movi    DMAWNZ|M_SCRNREL,a4     ;DMA flags
         00010470 0000a002  
    4433 00010490     09c5          movi    TYPWCCOUNT,a5           ;Delete the last string
         000104a0     0150  
    4434 000104b0     56c6          clr     a6
    4435 000104c0     56e7          clr     a7
    4436 000104d0     09f0          movi    WSF_Y_P,b0
         000104e0 00000000! 
    4437 00010500     0d5f          calla   BEGINOBJP
         00010510 00000000! 
    4438 00010530     4d0a          move    a8,a10
    4439                    
    4440 00010540     09e0          movi    [17eh,0],a0
         00010550 017e0000  
    4441 00010570     4560          sub     a11,a0
    4442 00010580     09e1          movi    [32h,0],a1
         00010590 00320000  
    4443 000105b0     09e2          movi    WSF10_8,a2
         000105c0 00000000! 
    4444 000105e0     09c3          movi    name_z,a3               ;Z
         000105f0     0009  
    4445 00010600     09e4          movi    DMAWNZ|M_SCRNREL,a4     ;DMA flags
         00010610 0000a002  
    4446 00010630     09c5          movi    TYPWCCOUNT,a5           ;Delete the last string
         00010640     0150  
    4447 00010650     56c6          clr     a6
    4448 00010660     56e7          clr     a7
    4449 00010670     09f0          movi    WSF_Y_P,b0
         00010680 00000000! 
    4450 000106a0     0d5f          calla   BEGINOBJP
         000106b0 00000000! 
    4451                    
    4452 000106d0           qmndwc_loop
    4453 000106d0                   SLEEP   07fffh                  ; Sleep until woken up
    4454                    
    4455 00010720     05ae          move    @wrestler_count,a14     ; Get current count
         00010730 00000000! 
    4456 00010750     ca11          jrz     qmndwc_exit             ; Is it 0 ? - br = yes
    4457 00010760     492e          cmp     a9,a14                  ; Has it changed from last time ?
    4458 00010770     caf5          jrz     qmndwc_loop
    4459 00010780     4dc9          move    a14,a9                  ; Save for reprint
    4460                    
    4461 00010790     05a0          move    @wrestler_count,a0      ; Get current count
         000107a0 00000000! 
    4462 000107c0                   X32     a0
    4463 000107d0     0b20          addi    qmnddigit10_tbl,a0
         000107e0 00010920' 
    4464 00010800     8600          move    *a0,a0,L                ;* image
    4465 00010810     b501          move    *a8(OCTRL),a1           ;DMA flags
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE  101

         00010820     00f0  
    4466 00010830     0d5f          calla   change_image
         00010840 00000000! 
    4467                            
    4468 00010860     c0e6          jruc    qmndwc_loop             ; Go redo it
    4469                    
    4470 00010870           qmndwc_exit
    4471 00010870     5600          clr     a0
    4472 00010880     0780          move    a0,@wrestler_count_proc,L
         00010890 00000000! 
    4473                    
    4474 000108b0     0d5f          calla   DELOBJA8
         000108c0 00000000! 
    4475 000108e0     4d48          move    a10,a8
    4476 000108f0     c080          jauc    DELOBJDIE
         00010900 00000000! 
    4477                    
    4478                    
    4479 00010920           qmnddigit10_tbl
    4480 00010920 00000000!         .long   WSF10_0
    4481 00010940 00000000!         .long   WSF10_1
    4482 00010960 00000000!         .long   WSF10_2
    4483 00010980 00000000!         .long   WSF10_3
    4484 000109a0 00000000!         .long   WSF10_4
    4485 000109c0 00000000!         .long   WSF10_5
    4486 000109e0 00000000!         .long   WSF10_6
    4487 00010a00 00000000!         .long   WSF10_7
    4488 00010a20 00000000!         .long   WSF10_8
    4489 00010a40 00000000!         .long   WSF10_9
    4490                    
    4491                    
    4492 00010a60           digit_tbl
    4493 00010a60 00000000!         .long   WGSF20_0,WGSF20_1,WGSF20_2,WGSF20_3,WGSF20_4
    4494 00010b00 00000000!         .long   WGSF20_5,WGSF20_6,WGSF20_7,WGSF20_8,WGSF20_9
    4495                    
    4496                    *****************************************************************************
    4497                    
    4498 00010ba0            SUBR   maybe_do_flashes
    4499 00010ba0           ihwqtop SLEEPK  5
    4500 00010be0     05a1          move    @reduce_bog,a1
         00010bf0 00000000! 
    4501 00010c10     cb0f          jrnz    ihwqdie
    4502 00010c20     07a0          MOVE    @WORLDTLY,A0,L
         00010c30 00000000! 
    4503 00010c50     0b60          CMPI    [0ff97H,0],A0
         00010c60 0068ffff  
    4504 00010c80     c7f1          JRGT    ihwqtop
    4505 00010c90     0d5f          CALLA   START_HI_FLASHES
         00010ca0 00000000! 
    4506 00010cc0                   SLEEPK  30
    4507 00010d00     c0e9          JRUC    ihwqtop
    4508 00010d10           ihwqdie DIE
    4509                    
    4510                    *****************************************************************************
    4511                    *
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE  102

    4512                    * sets our DID_RAISEARM bit.
    4513                    
    4514 00010d40            SUBR   set_raisearm_bit
    4515                    
    4516 00010d40     b7ae          move    *a13(STATUS_FLAGS),a14,L
         00010d50     0b50  
    4517 00010d60     0bae          ori     M_DID_RAISEARM,a14
         00010d70 00010000  
    4518 00010d90     b3cd          move    a14,*a13(STATUS_FLAGS),L
         00010da0     0b50  
    4519                    
    4520 00010db0     0960          rets
    4521                    
    4522                    
    4523                    *****************************************************************************
    4524                    *
    4525                    * check our DID_RAISEARM bit--set MODE_STATUS bit if it's clear (ANI_CODE)
    4526                    
    4527 00010dc0            SUBR   check_raisearm_bit
    4528                    
    4529 00010dc0     b7ae          move    *a13(STATUS_FLAGS),a14,L
         00010dd0     0b50  
    4530 00010de0     1dee          btst    B_DID_RAISEARM,a14
    4531 00010df0     ca08          jrz     ipzvset
    4532                    
    4533 00010e00     b5ae  ipzvclr move    *a13(ANIMODE),a14
         00010e10     0660  
    4534 00010e20     0b8e          andni   MODE_STATUS2,a14
         00010e30 00000200  
    4535 00010e50     b1cd          move    a14,*a13(ANIMODE)
         00010e60     0660  
    4536 00010e70     0960          rets
    4537                    
    4538 00010e80     b5ae  ipzvset move    *a13(ANIMODE),a14
         00010e90     0660  
    4539 00010ea0     0bae          ori     MODE_STATUS2,a14
         00010eb0 00000200  
    4540 00010ed0     b1cd          move    a14,*a13(ANIMODE)
         00010ee0     0660  
    4541 00010ef0     0960          rets
    4542                    
    4543                    
    4544                    *****************************************************************************
    4545                    *
    4546                    * choose buddies for buddy mode.  return the wrestlernums in a0 and a1.
    4547                    
    4548 00010f00            SUBR   choose_buddies
    4549                    
    4550                            ;prepare an exclusion mask
    4551 00010f00     56e7          clr     a7
    4552 00010f10     1820          movk    1,a0
    4553 00010f20     05ae          move    @index1,a14
         00010f30 00000000! 
    4554 00010f50     63c0          sll     a14,a0
    4555 00010f60     5407          or      a0,a7
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE  103

    4556                    
    4557 00010f70     1820          movk    1,a0
    4558 00010f80     05ae          move    @index2,a14
         00010f90 00000000! 
    4559 00010fb0     63c0          sll     a14,a0
    4560 00010fc0     5407          or      a0,a7
    4561                    
    4562                            ;count excluded wrestlers
    4563 00010fd0     4cee          move    a7,a14
    4564 00010fe0     5708          clr     a8
    4565 00010ff0     1900          movk    8,a0
    4566 00011000     2fee  ydxxlp1 srl     1,a14
    4567 00011010     c901          jrnc    ydxxnxt1
    4568 00011020     1028          inc     a8
    4569 00011030     3c80  ydxxnxt1        dsj     a0,ydxxlp1
    4570                    
    4571                            ;get the first one
    4572 00011040     0d5f          calla   get_rnd_wrestler
         00011050 00000000! 
    4573 00011070                   PUSH    a0              ;store first WRESTLERNUM
    4574                    
    4575                            ;now exclude him and get another one.
    4576 00011080     1028          inc     a8              ;inc exclusion count
    4577 00011090     182e          movk    1,a14
    4578 000110a0     620e          sll     a0,a14
    4579 000110b0     55c7          or      a14,a7
    4580 000110c0     0d5f          calla   get_rnd_wrestler
         000110d0 00000000! 
    4581 000110f0                   PULL    a1              ;retrieve first WRESTLERNUM
    4582                    
    4583 00011100     0960          rets
    4584                    
    4585                    *****************************************************************************
    4586                    *
    4587                    * Return carry set if wrestler *a14 is behind wrestler *a13, clear otherwise.
    4588                    *
    4589                    * trashes a14 (isn't allowed to trash a0 or a1!)
    4590                    
    4591 00011110            SUBR   is_a14_behind
    4592                    
    4593 00011110                   PUSH    a1
    4594                    
    4595 00011120     b5c1          move    *a14(OBJ_XPOSINT),a1
         00011130     0110  
    4596 00011140     b5ae          move    *a13(OBJ_XPOSINT),a14
         00011150     0110  
    4597 00011160     442e          sub     a1,a14
    4598 00011170     ce07          jrn     piqmonrt
    4599                    
    4600 00011180           piqmonlt        ;opponent on my left
    4601 00011180     b5ae          move    *a13(FACING_DIR),a14
         00011190     04c0  
    4602 000111a0     1fae          btst    MOVE_LEFT_BIT,a14
    4603 000111b0     ca07          jrz     piqmbehind
    4604                    ;       jruc    piqmahead
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE  104

    4605                    
    4606 000111c0           piqmahead       PULL    a1
    4607 000111d0     0320          clrc
    4608 000111e0     0960          rets
    4609                    
    4610 000111f0           piqmonrt        ;opponent on my right
    4611 000111f0     b5ae          move    *a13(FACING_DIR),a14
         00011200     04c0  
    4612 00011210     1f8e          btst    MOVE_RIGHT_BIT,a14
    4613 00011220     cbf9          jrnz    piqmahead
    4614                    ;       jruc    piqmbehind
    4615                    
    4616 00011230           piqmbehind      PULL    a1
    4617 00011240     0de0          setc
    4618 00011250     0960          rets
    4619                    
    4620                    *****************************************************************************
    4621                    *
    4622                    * Call this when a match has just ended.  Does an appropriate sound if
    4623                    * someone's winning streak has just ended.
    4624                    
    4625 00011260            SUBR   loser_snd
    4626                    
    4627 00011260     05ae          move    @PSTATUS2,a14
         00011270 00000000! 
    4628 00011290     0b4e          cmpi    3,a14
         000112a0     fffc  
    4629 000112b0     cb1a          jrne    sehkrets
    4630                    
    4631 000112c0     05a1          move    @match_winner,a1
         000112d0 00000000! 
    4632 000112f0     03e1          NOT     A1
    4633 00011300     0b81          ANDI    3,A1
         00011310 fffffffc  
    4634 00011330     1421          DEC     A1
    4635 00011340                   X16     A1
    4636                    
    4637 00011350     0b21          ADDI    p1oldwinstreak,A1
         00011360 00000000! 
    4638 00011380     8421          MOVE    *A1,A1
    4639 00011390     ca0c          jrz     sehkrets
    4640 000113a0     1840          MOVK    2,A0
    4641 000113b0     0d5f          CALLA   RNDRNG0
         000113c0 00000000! 
    4642 000113e0     2480          SLL     4,A0
    4643 000113f0     0b20          ADDI    sehkspeech,A0
         00011400 00011470' 
    4644 00011420     8400          MOVE    *A0,A0
    4645 00011430     0d5f          CALLA   ADD_VOICE
         00011440 00000000! 
    4646 00011460     0960  sehkrets        rets
    4647                    
    4648 00011470           sehkspeech      ;.word  CONGRATULATIONS
    4649 00011470     01ba          .word   SOMEHOW_I_DONT_THINK
    4650                    ;       .word   L_CONGRATS
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE  105

    4651 00011480     0301          .word   L_BACK_TO_SANDBOX
    4652 00011490     0191          .word   ARE_YOU_TOUGH_ENOUGH
    4653                    
    4654                    ;       .WORD   L_SIGN_YOUR_NAME
    4655                    ;       .WORD   THIS_IS_FOR_ALL
    4656                    ;       .WORD   SIGN_HERE_PLEASE
    4657                    
    4658                    
    4659                    *****************************************************************************
    4660                    *
    4661                    
    4662 000114a0            SUBR   postgame_audits
    4663                    
    4664                            ;battle over accounting.
    4665                    
    4666                            ;compute match_realtime
    4667 000114a0     07ae          move    @match_start_time,a14,L
         000114b0 00000000! 
    4668 000114d0     07a1          move    @PCNT,a1,L
         000114e0 00000000! 
    4669 00011500     45c1          sub     a14,a1
    4670 00011510     09ce          movi    55,a14
         00011520     0037  
    4671 00011530     5bc1          divu    a14,a1
    4672 00011540     0581          move    a1,@match_realtime
         00011550 00000000! 
    4673                    
    4674                            ;skip all this crap after a royal_rumble
    4675 00011570     05ae          move    @royal_rumble,a14
         00011580 00000000! 
    4676 000115a0     cb00          jrnz    naykrets
         000115b0     00ca  
    4677                    
    4678                            ;increment AUD_VSHUMF or AUD_VSCPUF (and AUD_CPUWIN)
    4679 000115c0     09c0          movi    AUD_VSHUMF,a0
         000115d0     0027  
    4680 000115e0     05ae          move    @PSTATUS2,a14
         000115f0 00000000! 
    4681 00011610     0b4e          cmpi    03h,a14
         00011620     fffc  
    4682 00011630     ca02          jreq    naykvshum
    4683 00011640     09c0          movi    AUD_VSCPUF,a0
         00011650     0025  
    4684 00011660     0d5f  naykvshum       calla   AUD1
         00011670 00000000! 
    4685                    
    4686                            ;add to AUD_2PBTIME, AUD_CPUWINTIME, or AUD_CPULOSETIME
    4687 00011690     05ae          move    @PSTATUS2,a14
         000116a0 00000000! 
    4688 000116c0     0b4e          cmpi    03h,a14
         000116d0     fffc  
    4689 000116e0     ca06          jreq    nayk2pbtime
    4690                    
    4691 000116f0     05a0          move    @match_winner,a0
         00011700 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE  106

    4692 00011720     500e          and     a0,a14
    4693 00011730     cb24          jrnz    naykcpulosetime
    4694 00011740     c003          jruc    naykcpuwintime
    4695                    
    4696 00011750           nayk2pbtime
    4697 00011750     09c0          movi    AUD_2PBTIME,a0
         00011760     0021  
    4698 00011770     c023          jruc    naykaddtime
    4699                    
    4700 00011780           naykcpuwintime
    4701 00011780     05a0          MOVE    @PSTARTS,A0
         00011790 00000000! 
    4702 000117b0     ca14          JRZ     NO_UPDATE_ANYTHING
    4703                    
    4704 000117c0     09c0          MOVI    AUD_CREDLEN,A0
         000117d0     005d  
    4705 000117e0     05a1          MOVE    @THIS_GAME_TIME,A1
         000117f0 00000000! 
    4706 00011810     0d5f          CALLA   AUD
         00011820 00000000! 
    4707 00011840     09c0          MOVI    AUD_CREDLENNUM,A0
         00011850     005e  
    4708 00011860     0d5f          CALLA   AUD1
         00011870 00000000! 
    4709 00011890     5600          CLR     A0
    4710 000118a0     0580          MOVE    A0,@THIS_GAME_TIME
         000118b0 00000000! 
    4711 000118d0     0580          MOVE    A0,@PSTARTS
         000118e0 00000000! 
    4712                    
    4713 00011900           NO_UPDATE_ANYTHING
    4714 00011900     09c0          movi    AUD_CPUWIN,a0
         00011910     002b  
    4715 00011920     0d5f          calla   AUD1
         00011930 00000000! 
    4716 00011950     09c0          movi    AUD_CPUWINTIME,a0
         00011960     0022  
    4717 00011970     c003          jruc    naykaddtime
    4718 00011980           naykcpulosetime
    4719 00011980     09c0          movi    AUD_CPULOSETIME,a0
         00011990     0023  
    4720 000119a0     0300          jruc    naykaddtime
    4721                    
    4722 000119b0           naykaddtime
    4723 000119b0     05a1          move    @match_realtime,a1
         000119c0 00000000! 
    4724 000119e0     0d5f          calla   AUD
         000119f0 00000000! 
    4725                    
    4726                            ;update record speeds
    4727 00011a10     05ae          move    @PSTATUS2,a14
         00011a20 00000000! 
    4728 00011a40     0b4e          cmpi    03h,a14
         00011a50     fffc  
    4729 00011a60     ca06          jreq    naykfast_2p
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE  107

    4730                    
    4731 00011a70     05a0          move    @match_winner,a0
         00011a80 00000000! 
    4732 00011aa0     500e          and     a0,a14
    4733 00011ab0     cb15          jrnz    naykfast_cpulose
    4734 00011ac0     c028          jruc    naykfast_cpuwin
    4735                    
    4736 00011ad0           naykfast_2p
    4737 00011ad0     09c0          movi    AUD_FASTHDH,a0
         00011ae0     002a  
    4738 00011af0     0d5f          calla   GET_AUD
         00011b00 00000000! 
    4739 00011b20     ca05          jrz     naykno_prior_hdh
    4740 00011b30     05a2          move    @match_realtime,a2
         00011b40 00000000! 
    4741 00011b60     4822          cmp     a1,a2
    4742 00011b70     c530          jrge    naykrecordspeed_done
    4743 00011b80           naykno_prior_hdh
    4744 00011b80     09c0          movi    AUD_FASTHDH,a0
         00011b90     002a  
    4745 00011ba0     05a1          move    @match_realtime,a1
         00011bb0 00000000! 
    4746 00011bd0     0d5f          calla   STORE_AUDIT
         00011be0 00000000! 
    4747 00011c00     c027          jruc    naykrecordspeed_done
    4748                    
    4749 00011c10           naykfast_cpulose
    4750 00011c10     09c0          movi    AUD_FASTHDC,a0
         00011c20     0029  
    4751 00011c30     0d5f          calla   GET_AUD
         00011c40 00000000! 
    4752 00011c60     ca05          jrz     naykno_prior_hdc
    4753 00011c70     05a2          move    @match_realtime,a2
         00011c80 00000000! 
    4754 00011ca0     4822          cmp     a1,a2
    4755 00011cb0     c51c          jrge    naykrecordspeed_done
    4756 00011cc0           naykno_prior_hdc
    4757 00011cc0     09c0          movi    AUD_FASTHDC,a0
         00011cd0     0029  
    4758 00011ce0     05a1          move    @match_realtime,a1
         00011cf0 00000000! 
    4759 00011d10     0d5f          calla   STORE_AUDIT
         00011d20 00000000! 
    4760 00011d40     c013          jruc    naykrecordspeed_done
    4761                    
    4762 00011d50           naykfast_cpuwin
    4763 00011d50     09c0          movi    AUD_FASTCDH,a0
         00011d60     0028  
    4764 00011d70     0d5f          calla   GET_AUD
         00011d80 00000000! 
    4765 00011da0     ca05          jrz     naykno_prior_cdh
    4766 00011db0     05a2          move    @match_realtime,a2
         00011dc0 00000000! 
    4767 00011de0     4822          cmp     a1,a2
    4768 00011df0     c508          jrge    naykrecordspeed_done
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE  108

    4769 00011e00           naykno_prior_cdh
    4770 00011e00     09c0          movi    AUD_FASTCDH,a0
         00011e10     0028  
    4771 00011e20     05a1          move    @match_realtime,a1
         00011e30 00000000! 
    4772 00011e50     0d5f          calla   STORE_AUDIT
         00011e60 00000000! 
    4773                    
    4774 00011e80           naykrecordspeed_done
    4775                    ;No speedy victories in 3 rnd matches!
    4776 00011e80     05a0          move    @current_round,a0
         00011e90 00000000! 
    4777 00011eb0     0b40          cmpi    3,a0
         00011ec0     fffc  
    4778 00011ed0     ca38          jrz     naykrets
    4779                    
    4780                    
    4781                            ;increment the proper wrestler use thingies
    4782                    
    4783 00011ee0     05a0          MOVE    @PSTATUS2,A0
         00011ef0 00000000! 
    4784 00011f10     0b40          CMPI    3,A0
         00011f20     fffc  
    4785 00011f30     ca26          JREQ    nayk2pmatch
    4786                    
    4787                            ;it's a one-player match.
    4788 00011f40     05a2          move    @index1,a2
         00011f50 00000000! 
    4789 00011f70     5621          CLR     A1
    4790 00011f80     2fe0          SRL     1,A0
    4791 00011f90     c804          JRC     AUDIT_THE_HUMAN
    4792 00011fa0     05a2          move    @index2,a2
         00011fb0 00000000! 
    4793 00011fd0     1821          MOVK    1,A1
    4794                    
    4795 00011fe0           AUDIT_THE_HUMAN
    4796 00011fe0     0d3f          CALLR   naykaudit_wrestler
         00011ff0     0027  
    4797                    
    4798 00012000     05ae          move    @NUM_OPPS,a14
         00012010 00000000! 
    4799 00012030     0b4e          cmpi    1,a14
         00012040     fffe  
    4800 00012050     cb20          jrne    naykrets                ;don't audit 1-vs-many matches
    4801                    
    4802                            ;audit the computer
    4803 00012060     07a0          move    @CURRENT_LADDER,a0,L
         00012070 00000000! 
    4804 00012090     8602          move    *a0,a2,L
    4805 000120a0     2702          sll     24,a2
    4806 000120b0     2d02          srl     24,a2           ;CPU wrestlernum in a2
    4807                    
    4808                            ;convert 7 to 8.
    4809 000120c0     0b42          cmpi    7,a2
         000120d0     fff8  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE  109

    4810 000120e0     cb01          jrne    naykvok0
    4811 000120f0     1022          inc     a2
    4812 00012100           naykvok0
    4813                    
    4814 00012100     05a1          move    @PSTATUS2,a1
         00012110 00000000! 
    4815 00012130     0bc1          xori    3,a1
         00012140 00000003  
    4816 00012160     2fe1          srl     1,a1            ;CPU side in a3 (!PSTATUS >> 1)
    4817                    
    4818 00012170     0d3f          callr   naykaudit_wrestler
         00012180     000e  
    4819                    
    4820 00012190     0960          rets
    4821                            
    4822                    
    4823                    ;human vs. human match
    4824 000121a0           nayk2pmatch
    4825                            ;player 1
    4826 000121a0     05a2          move    @index1,a2
         000121b0 00000000! 
    4827 000121d0     5621          CLR     A1
    4828 000121e0     0d3f          CALLR   naykaudit_wrestler
         000121f0     0007  
    4829                    
    4830                            ;player 2
    4831 00012200     05a2          move    @index2,a2
         00012210 00000000! 
    4832 00012230     1821          MOVK    1,A1
    4833 00012240     0d3f          CALLR   naykaudit_wrestler
         00012250     0001  
    4834                    
    4835 00012260     0960  naykrets        RETS
    4836                    
    4837                    ******************
    4838                    * a2 = WRESTLERNUM
    4839                    * a1 = PLYR_SIDE
    4840                    
    4841 00012270            SUBRP  naykaudit_wrestler
    4842                    
    4843 00012270                   TEST    a2
    4844 00012280     cf01          jrnn    naykok
    4845                            .if DEBUG
    4846                            LOCKUP
    4847                            .endif
    4848 00012290     0960          rets
    4849 000122a0           naykok
    4850 000122a0                   X64     a2                      ;x 4 words
    4851 000122b0     0b22          addi    wrestler_audits,a2
         000122c0 00000000! 
    4852                    
    4853 000122e0     05a0          move    @PSTATUS2,a0
         000122f0 00000000! 
    4854 00012310     4a20          btst    A1,a0
    4855 00012320     cb02          jrnz    naykp1hum
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE  110

    4856 00012330     0b02          addi    20h,a2                  ;skip 2 words
         00012340     0020  
    4857 00012350           naykp1hum
    4858 00012350     9440          move    *a2+,a0,W               ;increment uses
    4859 00012360     0d5f          calla   AUD1
         00012370 00000000! 
    4860                    
    4861 00012390     05a0          move    @match_winner,a0
         000123a0 00000000! 
    4862 000123c0     4a20          btst    A1,a0
    4863 000123d0     ca04          jrz     naykp1_audited
    4864 000123e0     9440          move    *a2+,a0,W               ;increment wins
    4865 000123f0     0d5f          calla   AUD1
         00012400 00000000! 
    4866                    
    4867 00012420           naykp1_audited
    4868 00012420     0960          RETS
    4869                    
    4870                    
    4871                    ****************************************************************************
    4872                    *
    4873                    * Returns bits of teams with live members in a0.
    4874                    *
    4875                    
    4876 00012430            SUBR   get_live_bits
    4877                    
    4878 00012430                   PUSH    a1,a2,a3
    4879                    
    4880 00012450     18e0          movk    NUM_WRES,a0
    4881 00012460     09e1          movi    process_ptrs,a1
         00012470 00000000! 
    4882 00012490     5663          clr     a3
    4883                    
    4884 000124a0     9622  cauflp1 move    *a1+,a2,L
    4885 000124b0     ca13          jrz     caufnxt1                ;skip inactive
    4886                    
    4887 000124c0     b44e          move    *a2(PLYRMODE),a14
         000124d0     05c0  
    4888 000124e0     0b4e          cmpi    MODE_DEAD,a14
         000124f0     fff6  
    4889 00012500     cb04          jrne    cauflive
    4890                    
    4891 00012510     b44e          move    *a2(STATUS_FLAGS),a14
         00012520     0b50  
    4892 00012530     1f8e          btst    B_ZOMBIE,a14
    4893 00012540     ca0a          jrz     caufnxt1                ;skip dead &! zombie
    4894                    
    4895 00012550           cauflive        ;live wrestler.  flag his team
    4896 00012550     b44e          move    *a2(PLYR_SIDE),a14
         00012560     05b0  
    4897 00012570     cb04          jrnz    cauft2
    4898                    
    4899                            ;member of team 1
    4900 00012580     0ba3          ori     01h,a3  
         00012590 00000001  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE  111

    4901 000125b0     c003          jruc    caufnxt1
    4902                    
    4903 000125c0           cauft2  ;member of team 2
    4904 000125c0     0ba3          ori     02h,a3
         000125d0 00000002  
    4905                    
    4906 000125f0     3ec0  caufnxt1        dsj     a0,cauflp1
    4907 00012600     4c60          move    a3,a0
    4908 00012610                   PULL    a1,a2,a3
    4909                    
    4910 00012630     0960          rets
    4911                    
    4912                    *****************************************************************************
    4913                    *
    4914                    * Returns carry set if any of a13's live opponents are outside the ring.
    4915                    * Trashes a0, a1, a14
    4916                    *
    4917                    
    4918 00012640            SUBRP  any_opp_outside
    4919                    
    4920 00012640                   PUSH    a3
    4921                    
    4922 00012650     09e0          movi    process_ptrs,a0
         00012660 00000000! 
    4923 00012680     09c1          movi    NUM_WRES,a1
         00012690     0007  
    4924 000126a0     b5a2          move    *a13(PLYR_SIDE),a2
         000126b0     05b0  
    4925 000126c0     9603  gvdblp0 move    *a0+,a3,L
    4926 000126d0     ca0c          jrz     gvdbnxt0                        ;skip inactive
    4927 000126e0     b46e          move    *a3(PLYR_SIDE),a14
         000126f0     05b0  
    4928 00012700     49c2          cmp     a14,a2
    4929 00012710     ca08          jreq    gvdbnxt0                        ;skip teammates
    4930 00012720     b46e          move    *a3(PLYRMODE),a14
         00012730     05c0  
    4931 00012740     0b4e          cmpi    MODE_DEAD,a14
         00012750     fff6  
    4932 00012760     ca03          jreq    gvdbnxt0                        ;skip dead guys
    4933 00012770     b46e          move    *a3(INRING),a14
         00012780     0560  
    4934 00012790     cb04          jrnz    gvdbsetc                        ;is outside?
    4935 000127a0     3de1  gvdbnxt0        dsj     a1,gvdblp0
    4936                    
    4937 000127b0                   PULL    a3
    4938 000127c0     0320          clrc
    4939 000127d0     0960          rets
    4940                    
    4941 000127e0           gvdbsetc        PULL    a3
    4942 000127f0     0de0          setc
    4943 00012800     0960          rets
    4944                    
    4945                    *****************************************************************************
    4946                    *
    4947                    * Sets a13's PLYRMODE to INAIR2 if his nearest opponent is dead, INAIR
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE  112

    4948                    * otherwise.
    4949                    *
    4950                    
    4951 00012810            SUBR   set_tbukl_airmode
    4952                    
    4953 00012810     0d5f          calla   get_opp_plyrmode
         00012820 00000000! 
    4954 00012840     0b40          cmpi    MODE_DEAD,a0
         00012850     fff6  
    4955 00012860     ca03          jreq    emtudead
    4956 00012870     09c0          movi    MODE_INAIR2,a0
         00012880     0015  
    4957 00012890     c002          jruc    emtugo
    4958                    
    4959 000128a0     09c0  emtudead        movi    MODE_INAIR,a0
         000128b0     0002  
    4960 000128c0     b00d  emtugo  move    a0,*a13(PLYRMODE)
         000128d0     05c0  
    4961 000128e0     0960          rets
    4962                            
    4963                    *****************************************************************************
    4964                    *
    4965                    * set MODE_STATUS bit if switches are AWAY & PUNCH.
    4966                    
    4967 000128f0            SUBR   free_toss_check
    4968                    
    4969 000128f0     b5a0          move    *a13(ANIMODE),a0
         00012900     0660  
    4970 00012910     0ba0          ori     MODE_STATUS2,a0
         00012920 00000200  
    4971                    
    4972 00012940     b5ae          move    *a13(CLOSEST_NUM),a14
         00012950     03a0  
    4973 00012960                   X32     a14
    4974 00012970     0b2e          addi    process_ptrs,a14
         00012980 00000000! 
    4975 000129a0     87ce          move    *a14,a14,L
    4976                    
    4977 000129b0     b7ce          move    *a14(OBJ_ZPOS),a14,L
         000129c0     0140  
    4978 000129d0     b7a1          move    *a13(OBJ_ZPOS),a1,L
         000129e0     0140  
    4979 000129f0     442e          sub     a1,a14
    4980 00012a00     038e          abs     a14
    4981 00012a10     2e0e          srl     16,a14
    4982 00012a20     0b4e          cmpi    15,a14
         00012a30     fff0  
    4983 00012a40     c408          jrlt    avyaset
    4984                    
    4985                    
    4986                    ;       move    *a13(STICK_REL_CUR),a14
    4987                    ;       btst    MOVE_AWAY_BIT,a14
    4988                    ;       jrz     avyaclr
    4989                    
    4990 00012a50     b5ae          move    *a13(BUT_VAL_CUR),a14
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 31 09:43:14 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program cont...                                       PAGE  113

         00012a60     0b90  
    4991 00012a70     0b4e          cmpi    PLAYER_BLOCK_VAL,a14
         00012a80     fffd  
    4992 00012a90     ca03          jreq    avyaset
    4993                    ;avyaclr
    4994 00012aa0     0b80          andni   MODE_STATUS2,a0
         00012ab0 00000200  
    4995 00012ad0           avyaset
    4996 00012ad0     b00d          move    a0,*a13(ANIMODE)
         00012ae0     0660  
    4997 00012af0     0960          rets
    4998                    
    4999                    *****************************************************************************
    5000                    *
    5001                    * We're gonna do a free hiptoss.  Do all the neccesary setup here.  Set our
    5002                    * PLYRMODE to normal, IMMOBILIZE the bad guy, clear velocities, etc.
    5003                    
    5004 00012b00            SUBR   setup_freetoss
    5005                    
    5006                            ;mode normal
    5007 00012b00                   SETMODE NORMAL
    5008                    
    5009                            ;immobilize bad guy
    5010 00012bb0     b7a0          move    *a13(WHOIHIT),a0,L
         00012bc0     0500  
    5011 00012bd0     1a8e          movk    20,a14
    5012 00012be0     b1c0          move    a14,*a0(IMMOBILIZE_TIME)
         00012bf0     0ae0  
    5013                    
    5014                            ;smart-target bad guy
    5015 00012c00                   SMRTTGT a13,WHOIHIT
    5016                    
    5017 00012ca0     0960          rets
    5018                    
    5019                    ******************************************************************************
    5020                    
    5021                            .end

 No Errors,  No Warnings
