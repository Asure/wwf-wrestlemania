TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    **************************************************************
       2                    *
       3                    * Software:     Mike Lynch, Jason Skiles, Mark Turmell
       4                    * Initiated:    05/12/95
       5                    *
       6                    * Modified:
       7                    *
       8                    * COPYRIGHT (C) 1992 WILLIAMS ELECTRONICS GAMES, INC.
       9                    *
      10                    **************************************************************
      11                    
      12                            .file   "fireword.asm"
      14                            .width  132
      15                            .option b,d,l,t
      16                            .mnolist
      17                    
      18                    
      19                            .include        "macros.h"
      20                            .include        "mproc.equ"             ;Mproc equates
      21                            .include        "display.equ"           ;Display proc equates
      22                            .include        "gsp.equ"               ;Gsp asm equates
      23                            .include        "sys.equ"
      24                            .include        "wwfsec.equ"
      25                            .include        "game.equ"
      26                            .include        "audit.equ"
      27                            .include        "plyr.equ"
      28                            .include        "anim.equ"
      29                            .include        "sound.h"
      30                            .include        "ring.equ"
      31                            .include        "sound.equ"
      32                            .include        "damage.equ"
      33                            .include        "jjxm.h"
      34                    
      35                            .include        "imgtbl.glo"
      36                            .include        "fontsimg.glo"
      37                            .include        "bgndtbl.glo"
      38                            .include        "miscimg.glo"
      39                    
      40                            .ref    RNDRNG0
      41                            .ref    BEGINOBJP
      42                            .ref    PRCSLP
      43                            .ref    DELOBJA8
      44                            .ref    obj_aniq
      45                            .ref    flash_white
      46                            .ref    pal_clean
      47                            .ref    fade_up
      48                            .ref    fade_down
      49                            .ref    BGND_UD1
      50                            .ref    crowd_anim
      51                            .ref    crowd_cheer
      52                            .ref    reduce_bog
      53                            .ref    is_8_on_1
      54                            .ref    print_message
      55                            .ref    wsf14_ascii
      56                            .ref    royal_rumble
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    2

      57                            .ref    print_string_C2
      58                            .ref    print_string_C
      59                            .ref    font9_ascii
      60                            .ref    setup_message
      61                            .ref    mess_objid
      62                            .ref    SNDSND
      63                            .ref    crowd_process
      64                            .ref    process_ptrs
      65                            .ref    ogmd10_ascii
      66                    
      67 00000000                   .bss    fizzle_flare,16
      68 00000010                   .bss    pan_down,16
      69                    
      70              04e4  EXP_FW_SND      .equ    1252
      71              04dc  FLR_FW_SND      .equ    1244
      72                    
      73                    **********************************************************************
      74                    *
      75 00000000            SUBRP  gpwrfwexa_anim
      76 00000000 00000000!         .long   FWEXPA01
      77 00000020 00000000!         .long   FWEXPA02
      78 00000040 00000000!         .long   FWEXPA03
      79 00000060 00000000!         .long   FWEXPA04
      80 00000080 00000000!         .long   FWEXPA05
      81 000000a0 00000000!         .long   FWEXPA06
      82 000000c0 00000000!         .long   FWEXPA07
      83 000000e0 00000000!         .long   FWEXPA08
      84 00000100 00000000!         .long   FWEXPA09
      85 00000120 00000000!         .long   FWEXPA10
      86 00000140 00000000!         .long   FWEXPA11
      87 00000160 00000000          .long   0
      88                    
      89 00000180            SUBRP  gpwrfwexb_anim
      90 00000180 00000000!         .long   FWEXPB01
      91 000001a0 00000000!         .long   FWEXPB02
      92 000001c0 00000000!         .long   FWEXPB03
      93 000001e0 00000000!         .long   FWEXPB04
      94 00000200 00000000!         .long   FWEXPB05
      95 00000220 00000000!         .long   FWEXPB06
      96 00000240 00000000!         .long   FWEXPB07
      97 00000260 00000000!         .long   FWEXPB08
      98 00000280 00000000!         .long   FWEXPB09
      99 000002a0 00000000!         .long   FWEXPB10
     100 000002c0 00000000!         .long   FWEXPB11
     101 000002e0 00000000          .long   0
     102                    
     103 00000300            SUBRP  gpwrfwexp_tbl
     104 00000300 00000000'         .long   gpwrfwexa_anim
     105 00000320 00000180'         .long   gpwrfwexb_anim
     106                    
     107 00000340            SUBRP  gpwrflare_anim
     108 00000340 00000000!         .long   FWFLAR01
     109 00000360 00000000!         .long   FWFLAR02
     110 00000380 00000000!         .long   FWFLAR03
     111 000003a0 00000000!         .long   FWFLAR04
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    3

     112 000003c0 00000000!         .long   FWFLAR05
     113 000003e0            SUBRP  gpwrflare_anim2
     114 000003e0 00000000!         .long   FWFLAR06
     115 00000400 00000000!         .long   FWFLAR07
     116 00000420 00000000!         .long   FWFLAR08
     117 00000440 00000000!         .long   FWFLAR09
     118 00000460 00000000!         .long   FWFLAR10
     119 00000480 00000000!         .long   FWFLAR11
     120 000004a0 00000000!         .long   FWFLAR12
     121 000004c0 00000000!         .long   FWFLAR13
     122 000004e0 00000000          .long   0
     123                    
     124 00000500            SUBRP  gpwrfw_pals
     125 00000500 00000000!         .long   FWWHT_P
     126 00000520 00000000!         .long   FWBLV_P
     127 00000540 00000000!         .long   FWPNK_P
     128 00000560 00000000!         .long   FWBLU_P
     129 00000580 00000000!         .long   FWYEL_P
     130                    
     131              fefc  EXP_FWY .equ    -260
     132                    
     133 000005a0            SUBRP  gpwranimate_fwexp
     134                    
     135                            ; First Get a random position to place the explosion
     136 000005a0     09c0          movi    96,a0           ; Get a random vertical position
         000005b0     0060  
     137 000005c0     0d5f          calla   RNDRNG0
         000005d0 00000000! 
     138 000005f0     0b00          addi    EXP_FWY-48,a0
         00000600     fecc  
     139 00000610     4c09          move    a0,a9           ; Save it away
     140                    
     141 00000620     09c0          movi    350,a0          ; Get a random horizontal postion
         00000630     015e  
     142 00000640     0d5f          calla   RNDRNG0
         00000650 00000000! 
     143 00000670     0b00          addi    850,a0  
         00000680     0352  
     144 00000690     4c0a          move    a0,a10
     145                    
     146 000006a0     09c0          movi    200h,a0         ; Get a random Zpos
         000006b0     0200  
     147 000006c0     0d5f          calla   RNDRNG0
         000006d0 00000000! 
     148 000006f0     0b00          addi    700h,a0         ; Make sure we can see it
         00000700     0700  
     149 00000710     4c03          move    a0,a3
     150                    
     151                            ; Now get a random firework explosion to use
     152 00000720     09c0          movi    1,a0            ; Get a random explosion to use
         00000730     0001  
     153 00000740     0d5f          calla   RNDRNG0
         00000750 00000000! 
     154 00000770     24a0          sll     5,a0
     155 00000780     0b20          addi    gpwrfwexp_tbl,a0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    4

         00000790 00000300' 
     156 000007b0     860b          move    *a0,a11,L       ; Get pointer to image table
     157 000007c0     9762          move    *a11+,a2,L      ; Get the first image
     158                    
     159                            ; Set up some additional object creation junk
     160 000007d0     09e4          movi    DMAWNZ|M_3D,a4
         000007e0 00008102  
     161 00000800     09c5          movi    CLSNEUT,a5      ; Set the Object ID
         00000810     0000  
     162 00000820     56c6          clr     a6              ; Set the X velocity
     163 00000830     56e7          clr     a7              ; Set the Y velocity
     164                    
     165                            ; Get a random palette to use
     166 00000840     09c0          movi    4,a0            ; Get a random palette number
         00000850     0004  
     167 00000860     0d5f          calla   RNDRNG0
         00000870 00000000! 
     168 00000890     4e00          move    a0,b0           ; Get entry from palette table
     169 000008a0     24b0          sll     5,b0
     170 000008b0     0b30          addi    gpwrfw_pals,b0
         000008c0 00000500' 
     171 000008e0     8610          move    *b0,b0,L
     172                            
     173                            ; Set up the x and y positions for the object
     174 000008f0     4d21          move    a9,a1           ; Get saved YPOS
     175 00000900     2601          sll     16,a1           ; Shift it for object creation
     176 00000910     4d40          move    a10,a0          ; Get saved XPOS
     177 00000920     2600          sll     16,a0           ; Shift it for object creattion
     178                    
     179                            ; Now create the first image
     180 00000930     0d5f          calla   BEGINOBJP       ; Create the object
         00000940 00000000! 
     181                    
     182                            ; Make an explosion sound
     183 00000960     09c3          movi    EXP_FW_SND,a3
         00000970     04e4  
     184 00000980     0d5f          calla   SNDSND
         00000990 00000000! 
     185                    
     186                            ; And animate the whole works
     187 000009b0     b50a          move    *a8(OCTRL),a10
         000009c0     00f0  
     188 000009d0     b509          move    *a8(OYPOS),a9
         000009e0     00b0  
     189 000009f0           gpwranimate_loop
     190 000009f0                   SLEEPK  1
     191 00000a30     9760          move    *a11+,a0,L      ; Get the next image
     192 00000a40     ca08          jrz     gpwrfwanim_done ; Are we done ? - br = yes
     193 00000a50     4d41          move    a10,a1
     194 00000a60     0d5f          calla   obj_aniq        ; Change the image
         00000a70 00000000! 
     195 00000a90     1089          addk    4,a9
     196 00000aa0     b128          move    a9,*a8(OYPOS)
         00000ab0     00b0  
     197 00000ac0     c0f2          jruc    gpwranimate_loop        ; Go do next image
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    5

     198                    
     199                            ; We all done - soooo get rid of the object and die
     200 00000ad0           gpwrfwanim_done
     201 00000ad0     0d5f          calla   DELOBJA8        ; Kill off the object
         00000ae0 00000000! 
     202 00000b00                   DIE                     ; And die
     203                    
     204                    
     205 00000b30            SUBRP  firework_flare
     206 00000b30     1b20          movk    25,a0
     207 00000b40     0d5f          calla   RNDRNG0
         00000b50 00000000! 
     208 00000b70     1020          addk    1,a0
     209 00000b80     0d5f          calla   PRCSLP
         00000b90 00000000! 
     210                    
     211 00000bb0     1880          movk    4,a0
     212 00000bc0     0d5f          calla   RNDRNG0
         00000bd0 00000000! 
     213 00000bf0     4e00          move    a0,b0
     214 00000c00     24b0          sll     5,b0
     215 00000c10     0b30          addi    gpwrfw_pals,b0
         00000c20 00000500' 
     216 00000c40     8610          move    *b0,b0,L
     217                    
     218 00000c50     4d20          move    a9,a0
     219 00000c60     2e00          srl     16,a0
     220 00000c70     2600          sll     16,a0
     221                    
     222 00000c80     4d21          move    a9,a1
     223 00000c90     2601          sll     16,a1
     224                    
     225 00000ca0     09e9          movi    gpwrflare_anim,a9
         00000cb0 00000340' 
     226 00000cd0     9722          move    *a9+,a2,L
     227                    
     228 00000ce0     09c3          movi    810h,a3
         00000cf0     0810  
     229 00000d00     09e4          movi    DMAWNZ|M_3D,a4
         00000d10 00008102  
     230 00000d30     09c5          movi    CLSFRWK,a5
         00000d40     7000  
     231 00000d50     56c6          clr     a6
     232 00000d60     56e7          clr     a7
     233                    
     234 00000d70     0d5f          calla   BEGINOBJP
         00000d80 00000000! 
     235                    
     236                    
     237                    
     238                    ;       PUSH    a0,a1,a2,a3,a4,a5,a6,a7
     239                    ;       calla   flash_white
     240                    ;       movi    FLR_FW_SND,a3
     241                    ;       calla   SNDSND
     242                    ;       PULL    a0,a1,a2,a3,a4,a5,a6,a7
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    6

     243                    
     244                    
     245                    
     246 00000da0     b50a          move    *a8(OCTRL),a10
         00000db0     00f0  
     247 00000dc0           gpwrflare_loop
     248 00000dc0                   SLEEPK  2
     249 00000e00           gpwrfl_loop
     250 00000e00     9720          move    *a9+,a0,L
     251 00000e10     ca05          jrz     gpwrreset_flare
     252 00000e20     4d41          move    a10,a1
     253 00000e30     0d5f          calla   obj_aniq
         00000e40 00000000! 
     254 00000e60     c0f5          jruc    gpwrflare_loop
     255                    
     256 00000e70           gpwrreset_flare
     257 00000e70     05a9          move    @fizzle_flare,a9
         00000e80 00000000- 
     258 00000ea0     cb04          jrnz    gpwrflare_fizzle
     259 00000eb0     09e9          movi    gpwrflare_anim2,a9
         00000ec0 000003e0' 
     260 00000ee0     c0f1          jruc    gpwrfl_loop
     261                    
     262 00000ef0           gpwrflare_fizzle
     263                    
     264 00000ef0     09e9          movi    gpwrflare_anim2,a9
         00000f00 000003e0' 
     265 00000f20           gpwrff_loop
     266 00000f20                   SLEEPK  4
     267 00000f60     0b69          cmpi    gpwrflare_anim,a9
         00000f70 fffffcbf' 
     268 00000f90     ca06          jrz     gpwrff_exit
     269 00000fa0     a720          move    -*a9,a0,L
     270 00000fb0     4d41          move    a10,a1
     271 00000fc0     0d5f          calla   obj_aniq
         00000fd0 00000000! 
     272 00000ff0     c0f2          jruc    gpwrff_loop
     273 00001000           gpwrff_exit
     274                    
     275 00001000     0d5f          calla   DELOBJA8
         00001010 00000000! 
     276 00001030                   DIE
     277                    
     278                    
     279                    
     280 00001060            SUBR   do_fireworks
     281                    
     282                    ;       RETP
     283 00001060                   PUSHP   a9,a10
     284                    
     285 00001080     0d5f          calla   pal_clean       ; Get rid of extra palettes
         00001090 00000000! 
     286                    
     287 000010b0     574a          clr     a10             ; Fade down the lights
     288 000010c0     058a          move    a10,@fizzle_flare
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    7

         000010d0 00000000- 
     289 000010f0     180b          movk    32,a11
     290 00001100                   CREATE0 fade_down
     291 00001170                   SLEEPK  30
     292                    
     293 000011b0     09c0          movi    ANNC_PID,a0
         000011c0     012e  
     294 000011d0     0d5f          calla   KIL1C           ; Kill off any announcer processes
         000011e0 00000000! 
     295                    
     296 00001200     09c0          movi    METER_PID,a0
         00001210     0240  
     297 00001220     0d5f          calla   KIL1C           ; Kill off meter processes
         00001230 00000000! 
     298                    
     299 00001250     09c0          movi    TIMER_PID,a0
         00001260     0124  
     300 00001270     0d5f          calla   KIL1C           ; Kill off match timer process
         00001280 00000000! 
     301                    
     302 000012a0     09c0          movi    FLASH_PID,a0
         000012b0     0139  
     303 000012c0     0d5f          calla   KIL1C           ; Kill off any flasher processes
         000012d0 00000000! 
     304                    
     305 000012f0     09c0          movi    ICON_PID,a0
         00001300     0141  
     306 00001310     0d5f          calla   KIL1C           ; Kill off any icon flashers
         00001320 00000000! 
     307                    
     308 00001340     09c0          movi    SMOVE_PID,a0
         00001350     012f  
     309 00001360     0d5f          calla   KIL1C           ; Kill off special move processes
         00001370 00000000! 
     310                    
     311 00001390     09c0          movi    PINHIM_ANIM_PID,a0
         000013a0     0160  
     312 000013b0     0d5f          calla   KIL1C           ; Kill off pin him processes
         000013c0 00000000! 
     313                    
     314 000013e0     09c0          movi    REWIRE_PID,a0
         000013f0     0148  
     315 00001400     0d5f          calla   KIL1C           ; Kill off rewire processes
         00001410 00000000! 
     316                    
     317 00001430     09c0          movi    ZSHIFT_PID,a0
         00001440     0149  
     318 00001450     0d5f          calla   KIL1C           ; Kill off something to do with progress ladder
         00001460 00000000! 
     319                    
     320 00001480     09c0          movi    GETUP_PID,a0
         00001490     012b  
     321 000014a0     0d5f          calla   KIL1C           ; Kill off getup meter processes
         000014b0 00000000! 
     322                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    8

     323 000014d0     09c0          movi    FLASH_COMBO_PID,a0
         000014e0     0143  
     324 000014f0     0d5f          calla   KIL1C           ; Kill off any combo flashers
         00001500 00000000! 
     325                    
     326                    
     327                    ;Jake adds 1 to FLASH_COMBO_PID to point at plyr 2!
     328 00001520     09c0          movi    FLASH_COMBO_PID+1,a0
         00001530     0144  
     329 00001540     0d5f          calla   KIL1C           ; Kill off any combo flashers
         00001550 00000000! 
     330                    
     331                    
     332 00001570     09c0          movi    CYCPID,a0
         00001580     0110  
     333 00001590     0d5f          calla   KIL1C           ; Kill any cyclers
         000015a0 00000000! 
     334                    
     335 000015c0     09c0          movi    FX_PID,a0
         000015d0     0120  
     336 000015e0     0d5f          calla   KIL1C           ; Kill and FX processes
         000015f0 00000000! 
     337                    
     338 00001610     09c0          movi    ADD_INIT_PID,a0
         00001620     0130  
     339 00001630     0d5f          calla   KIL1C           ; Kill any perfect processes
         00001640 00000000! 
     340                    
     341 00001660     09c0          movi    OVRHED_PID,a0
         00001670     0121  
     342 00001680     0d5f          calla   KIL1C           ; Kill any of these that are laying around
         00001690 00000000! 
     343                    
     344                            .if DEBUG
     345                            movi    CDEBUG_PID,a0
     346                            calla   KIL1C           ; Kill off collision box debug processes
     347                            .endif
     348                    
     349                    ;       movi    ROPE_PID,a0
     350                    ;       calla   KIL1C           ; Kill off any rope processes
     351                    
     352 000016b0     0d3f          callr   knockout_drones ; Knock out any wrestler process that are drone wrestlers
         000016c0     03a5  
     353                            
     354 000016d0     09c0          movi    CLSNEUT|TYPTEXT|SUBMES1,a0
         000016e0     0702  
     355 000016f0     0d5f          calla   obj_del1c       ; Kill off any announcer objects
         00001700 00000000! 
     356                    
     357 00001720     09c0          movi    CLSNEUT|TYPNEUT|SUBMFRAME,a0
         00001730     0009  
     358 00001740     0d5f          calla   obj_del1c       ; Kill off the meter objects
         00001750 00000000! 
     359                    
     360 00001770     09c0          movi    CLSNEUT|TYPNEUT|SUBLBAR,a0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    9

         00001780     0007  
     361 00001790     0d5f          calla   obj_del1c       ; Kill off meter bars
         000017a0 00000000! 
     362                    
     363 000017c0     09c0          movi    TYPTIMERDIGIT,a0
         000017d0     0130  
     364 000017e0     0d5f          calla   obj_del1c       ; Kill off the match timer objects
         000017f0 00000000! 
     365                    
     366 00001810     09c0          movi    TYPWWFICON,a0
         00001820     0140  
     367 00001830     0d5f          calla   obj_del1c       ; Kill off any WWF Icon objects
         00001840 00000000! 
     368                    
     369 00001860     09c0          movi    CLSDEAD,a0
         00001870     2000  
     370 00001880     0d5f          calla   obj_del1c       ; Kill off winstreak number
         00001890 00000000! 
     371                    
     372 000018b0     09c0          movi    TYPPINHIM,a0
         000018c0     0160  
     373 000018d0     0d5f          calla   obj_del1c       ; Kill off any pin him objects
         000018e0 00000000! 
     374                    
     375 00001900     09c0          movi    TYPPERFECT,a0
         00001910     0170  
     376 00001920     0d5f          calla   obj_del1c       ; Kill off any perfect objects
         00001930 00000000! 
     377                    
     378 00001950     5600          clr     a0                      ; Turn off bog reduction
     379 00001960     0580          move    a0,@reduce_bog          ; Animate the crowd
         00001970 00000000! 
     380                    ;       CREATE  CROWD_PID,crowd_anim
     381                    
     382                            ;wake up the crowd
     383 00001990     07a0          move    @crowd_process,a0,L
         000019a0 00000000! 
     384 000019c0     182e          movk    1,a14
     385 000019d0     b1c0          move    a14,*a0(PTIME)
         000019e0     0030  
     386                    
     387 000019f0     0d5f          calla   pal_clean       ; Clean any other palettes we freed by
         00001a00 00000000! 
     388                                                    ; Getting rid of all of the above shit
     389                    
     390                            ;ORIGINAL MIKE CODE
     391                            ;JASON'S QUICK-HACK VERSION
     392                    
     393                    
     394                    
     395 00001a20     0d5f          calla   flash_white
         00001a30 00000000! 
     396 00001a50     09c3          movi    FLR_FW_SND,a3
         00001a60     04dc  
     397 00001a70     0d5f          calla   SNDSND
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   10

         00001a80 00000000! 
     398                    
     399                    
     400                            ; Back of ring flares
     401 00001aa0     198a          movk    12,a10          ; Make 12 flares
     402 00001ab0     09e9          movi    [798,128],a9    ; [sx,y] of flare positions
         00001ac0 031e0080  
     403 00001ae0           gpwrdo_flare
     404 00001ae0                   CREATE  FIREWRK_PID,firework_flare
     405 00001b60     0b29          addi    [50,0],a9       ; Increment x position
         00001b70 00320000  
     406 00001b90     3d8a          dsjs    a10,gpwrdo_flare        ; go do next flare
     407                    
     408                            ; Left Side flares
     409 00001ba0     09e9          movi    [770,148],a9
         00001bb0 03020094  
     410 00001bd0                   CREATE  FIREWRK_PID,firework_flare
     411 00001c50     09e9          movi    [753,168],a9
         00001c60 02f100a8  
     412 00001c80                   CREATE  FIREWRK_PID,firework_flare
     413 00001d00     09e9          movi    [736,188],a9
         00001d10 02e000bc  
     414 00001d30                   CREATE  FIREWRK_PID,firework_flare
     415 00001db0     09e9          movi    [719,208],a9
         00001dc0 02cf00d0  
     416 00001de0                   CREATE  FIREWRK_PID,firework_flare
     417 00001e60     09e9          movi    [702,228],a9
         00001e70 02be00e4  
     418 00001e90                   CREATE  FIREWRK_PID,firework_flare
     419                    
     420                            ; Right Side flares
     421 00001f10     09e9          movi    [1372,148],a9
         00001f20 055c0094  
     422 00001f40                   CREATE  FIREWRK_PID,firework_flare
     423 00001fc0     09e9          movi    [1389,168],a9
         00001fd0 056d00a8  
     424 00001ff0                   CREATE  FIREWRK_PID,firework_flare
     425 00002070     09e9          movi    [1406,188],a9
         00002080 057e00bc  
     426 000020a0                   CREATE  FIREWRK_PID,firework_flare
     427 00002120     09e9          movi    [1423,208],a9
         00002130 058f00d0  
     428 00002150                   CREATE  FIREWRK_PID,firework_flare
     429 000021d0     09e9          movi    [1440,228],a9
         000021e0 05a000e4  
     430 00002200                   CREATE  FIREWRK_PID,firework_flare
     431                    
     432 00002280     574a          clr     a10             ; Lights back on
     433 00002290     09cb          movi    64,a11
         000022a0     0040  
     434 000022b0                   CREATE0 fade_up
     435 00002320                   SLEEPK  16
     436                    
     437 00002360     0d5f          calla   flash_white
         00002370 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   11

     438 00002390     09c3          movi    FLR_FW_SND,a3
         000023a0     04dc  
     439 000023b0     0d5f          calla   SNDSND
         000023c0 00000000! 
     440                    
     441                            ;sleep while flares go off
     442 000023e0                   SLEEP   TSEC
     443                    
     444                            ;now slowly pan up
     445 00002430     57ce          clr     a14
     446 00002440     058e          move    a14,@pan_down
         00002450 00000010- 
     447 00002470                   CREATE0 pan_around
     448                    
     449                            ;do fireworks
     450                    
     451 000024e0     09c8          movi    TSEC*6,a8
         000024f0     013e  
     452                    
     453 00002500           gpwrdo_exfw_loop
     454 00002500                   CREATE0 gpwranimate_fwexp       ; Create an exploding firework
     455                    
     456 00002570     18c0          movk    6,a0            ; Sleep a random amount of time
     457 00002580     0d5f          calla   RNDRNG0
         00002590 00000000! 
     458 000025b0     1020          addk    1,a0            ; Make sure we sleep at least 1
     459 000025c0     4408          sub     a0,a8
     460 000025d0     0d5f          calla   PRCSLP          ; Sleep
         000025e0 00000000! 
     461 00002600     4d08          move    a8,a8
     462 00002610     c7ee          jrgt    gpwrdo_exfw_loop
     463                    
     464                    ;Kill text on scrn
     465                    
     466 00002620     1820          movk    1,a0
     467 00002630     0580          move    a0,@pan_down
         00002640 00000010- 
     468 00002660     09c9          movi    TSEC*2,a9
         00002670     006a  
     469 00002680     c002          jruc    gpwrcheer_lp
     470 00002690           gpwrno_exp_fw
     471 00002690     09c9          movi    TSEC*5,a9
         000026a0     0109  
     472 000026b0           gpwrcheer_lp
     473 000026b0     4d29          move    a9,a9
     474 000026c0     c60e          jrle    gpwrclp_done
     475 000026d0                   PUSH    a0,a1,a2,a3,a4,a5,a6,a7,a8,a9
     476 000026f0     1823          movk    1,a3            ; And make 'em do something
     477 00002700     0d5f          calla   crowd_cheer
         00002710 00000000! 
     478 00002730                   PULL    a0,a1,a2,a3,a4,a5,a6,a7,a8,a9
     479 00002750                   SLEEPK  15
     480 00002790     15e9          subk    15,a9
     481 000027a0     c0f0          jruc    gpwrcheer_lp
     482 000027b0           gpwrclp_done
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   12

     483                            
     484                    
     485 000027b0     1820          movk    1,a0            ; Tell flares to fizzle out
     486 000027c0     0580          move    a0,@fizzle_flare
         000027d0 00000000- 
     487                    
     488                    
     489 000027f0                   SLEEP   TSEC            ; Give flares time to die out
     490                    
     491                    
     492 00002840                   PULLP   a9,a10
     493 00002860                   RETP
     494                    
     495 00000020                   .bss    pan_status,16
     496                    
     497 00002890           panning_points                                  ; figure 8  
     498                    
     499              0035  INIT_PAN_SPEED  .equ    TSEC
     500                    
     501 00002890 00000035          .long   INIT_PAN_SPEED,[850,0],[EXP_FWY+0,0]
     502 000028f0 00000003          .long   3,[848,0],[EXP_FWY-10,0]
     503 00002950 00000003          .long   3,[844,0],[EXP_FWY-20,0]
     504 000029b0 00000003          .long   3,[836,0],[EXP_FWY-28,0]
     505 00002a10 00000003          .long   3,[825,0],[EXP_FWY-36,0]
     506 00002a70 00000003          .long   3,[812,0],[EXP_FWY-42,0]
     507 00002ad0 00000003          .long   3,[798,0],[EXP_FWY-46,0]
     508 00002b30 00000003          .long   3,[783,0],[EXP_FWY-48,0]
     509 00002b90 00000003          .long   3,[767,0],[EXP_FWY-48,0]
     510 00002bf0 00000003          .long   3,[752,0],[EXP_FWY-46,0]
     511 00002c50 00000003          .long   3,[738,0],[EXP_FWY-42,0]
     512 00002cb0 00000003          .long   3,[725,0],[EXP_FWY-36,0]
     513 00002d10 00000003          .long   3,[714,0],[EXP_FWY-28,0]
     514 00002d70 00000003          .long   3,[706,0],[EXP_FWY-20,0]
     515 00002dd0 00000003          .long   3,[702,0],[EXP_FWY-10,0]
     516 00002e30 00000003          .long   3,[700,0],[EXP_FWY+0,0]
     517 00002e90 00000003          .long   3,[702,0],[EXP_FWY+10,0]
     518 00002ef0 00000003          .long   3,[706,0],[EXP_FWY+20,0]
     519 00002f50 00000003          .long   3,[714,0],[EXP_FWY+28,0]
     520 00002fb0 00000003          .long   3,[725,0],[EXP_FWY+36,0]
     521 00003010 00000003          .long   3,[737,0],[EXP_FWY+42,0]
     522 00003070 00000003          .long   3,[752,0],[EXP_FWY+46,0]
     523 000030d0 00000003          .long   3,[767,0],[EXP_FWY+48,0]
     524 00003130 00000003          .long   3,[783,0],[EXP_FWY+48,0]
     525 00003190 00000003          .long   3,[798,0],[EXP_FWY+46,0]
     526 000031f0 00000003          .long   3,[812,0],[EXP_FWY+42,0]
     527 00003250 00000003          .long   3,[825,0],[EXP_FWY+36,0]
     528 000032b0 00000003          .long   3,[836,0],[EXP_FWY+28,0]
     529 00003310 00000003          .long   3,[844,0],[EXP_FWY+20,0]
     530 00003370 00000003          .long   3,[848,0],[EXP_FWY+10,0]
     531 000033d0 00000003          .long   3,[850,0],[EXP_FWY+0,0]
     532 00003430 00000003          .long   3,[852,0],[EXP_FWY-10,0]
     533 00003490 00000003          .long   3,[856,0],[EXP_FWY-20,0]
     534 000034f0 00000003          .long   3,[864,0],[EXP_FWY-28,0]
     535 00003550 00000003          .long   3,[875,0],[EXP_FWY-36,0]
     536 000035b0 00000003          .long   3,[888,0],[EXP_FWY-42,0]
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   13

     537 00003610 00000003          .long   3,[902,0],[EXP_FWY-46,0]
     538 00003670 00000003          .long   3,[917,0],[EXP_FWY-48,0]
     539 000036d0 00000003          .long   3,[933,0],[EXP_FWY-48,0]
     540 00003730 00000003          .long   3,[948,0],[EXP_FWY-46,0]
     541 00003790 00000003          .long   3,[962,0],[EXP_FWY-42,0]
     542 000037f0 00000003          .long   3,[975,0],[EXP_FWY-36,0]
     543 00003850 00000003          .long   3,[986,0],[EXP_FWY-28,0]
     544 000038b0 00000003          .long   3,[994,0],[EXP_FWY-20,0]
     545 00003910 00000003          .long   3,[998,0],[EXP_FWY-10,0]
     546 00003970 00000003          .long   3,[1000,0],[EXP_FWY+0,0]
     547 000039d0 00000003          .long   3,[998,0],[EXP_FWY+10,0]
     548 00003a30 00000003          .long   3,[994,0],[EXP_FWY+20,0]
     549 00003a90 00000003          .long   3,[986,0],[EXP_FWY+28,0]
     550 00003af0 00000003          .long   3,[975,0],[EXP_FWY+36,0]
     551 00003b50 00000003          .long   3,[963,0],[EXP_FWY+42,0]
     552 00003bb0 00000003          .long   3,[948,0],[EXP_FWY+46,0]
     553 00003c10 00000003          .long   3,[933,0],[EXP_FWY+48,0]
     554 00003c70 00000003          .long   3,[917,0],[EXP_FWY+48,0]
     555 00003cd0 00000003          .long   3,[902,0],[EXP_FWY+46,0]
     556 00003d30 00000003          .long   3,[888,0],[EXP_FWY+42,0]
     557 00003d90 00000003          .long   3,[875,0],[EXP_FWY+36,0]
     558 00003df0 00000003          .long   3,[864,0],[EXP_FWY+28,0]
     559 00003e50 00000003          .long   3,[856,0],[EXP_FWY+20,0]
     560 00003eb0 00000003          .long   3,[852,0],[EXP_FWY+10,0]
     561 00003f10 00000003          .long   3,[850,0],[EXP_FWY+0,0]
     562 00003f70 00000000          .long   0
     563                    
     564 00000030                   .bss    ticks,32                ; Ticks for this move
     565 00000050                   .bss    dx,32                   ; X movement per tick
     566 00000070                   .bss    dy,32                   ; Y movement per tick
     567 00000090                   .bss    targ_x,16               ; Target X position
     568 000000a0                   .bss    targ_y,16               ; Target Y position
     569 000000b0                   .bss    final_x,32              ; Final X position to pan to
     570 000000d0                   .bss    final_y,32              ; Final Y position to pan to
     571 000000f0                   .bss    p1x,32                  ; Start X point
     572 00000110                   .bss    p1y,32                  ; Start Y point
     573 00000130                   .bss    p2x,32                  ; End X point
     574 00000150                   .bss    p2y,32                  ; End Y point
     575                    
     576                    *************************************************************
     577                    *
     578 00003f90            SUBRP  calc_dxdy
     579 00003f90                   PUSH    a8,a9,a10,a11
     580                    
     581 00003fb0     09e8          movi    p1x,a8                  ; Get pointer to start and end points
         00003fc0 000000f0- 
     582                    
     583 00003fe0     07aa          move    @ticks,a10,L            ; Get ticks for this move
         00003ff0 00000030- 
     584                    
     585 00004010     870b          move    *a8,a11,L               ; Get start X position
     586 00004020     b709          move    *a8(64),a9,L            ; Get End X position
         00004030     0040  
     587 00004040     4569          sub     a11,a9                  ; Get X difference
     588 00004050     5949          divs    a10,a9                  ; Divide by ticks to get there
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   14

     589 00004060     0789          move    a9,@dx,L                ; Store delta X
         00004070 00000050- 
     590                    
     591 00004090     b70b          move    *a8(32),a11,L           ; Get start Y position
         000040a0     0020  
     592 000040b0     b709          move    *a8(96),a9,L            ; Get End Y position
         000040c0     0060  
     593 000040d0     4569          sub     a11,a9                  ; Get Y difference
     594 000040e0     5949          divs    a10,a9                  ; Divide by ticks to get there
     595 000040f0     0789          move    a9,@dy,L                ; Store delta Y
         00004100 00000070- 
     596                    
     597 00004120                   PULL    a8,a9,a10,a11
     598 00004140     0960          rets
     599                    
     600                    
     601                    *************************************************************
     602                    *
     603 00004150            SUBRP  move_camera
     604 00004150                   PUSH    a0
     605                    
     606 00004160     07ae          move    @WORLDTLX,a14,L         ; Get Current X position
         00004170 00000000! 
     607 00004190     07a0          move    @dx,a0,L                ; Get Delta X
         000041a0 00000050- 
     608 000041c0     400e          add     a0,a14                  ; Add to Current X postion
     609 000041d0     078e          move    a14,@WORLDTLX,L         ; Write new position
         000041e0 00000000! 
     610                    
     611                    
     612 00004200     07ae          move    @WORLDTLY,a14,L         ; Get Current Y position
         00004210 00000000! 
     613 00004230     07a0          move    @dy,a0,L                ; Get Delta Y
         00004240 00000070- 
     614 00004260     400e          add     a0,a14                  ; Add to Current Y position
     615 00004270     078e          move    a14,@WORLDTLY,L         ; Write new Y position
         00004280 00000000! 
     616                    
     617 000042a0                   PULL    a0
     618 000042b0     0960          rets
     619                    
     620                    **************************************************************
     621                    *
     622 000042c0            SUBRP  check_camera_position
     623 000042c0                   PUSH    a0
     624                    
     625 000042d0     07ae          move    @WORLDTLX,a14,L         ; Get current X position
         000042e0 00000000! 
     626 00004300     2a0e          sra     16,a14                  ; Get rid of fractional portion
     627 00004310     05a0          move    @targ_x,a0              ; Get current target X position
         00004320 00000090- 
     628 00004340     440e          sub     a0,a14                  ; Subtract the two
     629 00004350     038e          abs     a14                     ; Make sure it is positive
     630 00004360     0b4e          cmpi    3,a14                   ; Are we within 3 ?
         00004370     fffc  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   15

     631 00004380     c704          jrgt    vhgkcheck_y             ; br = no
     632 00004390     57ce          clr     a14
     633 000043a0     078e          move    a14,@dx,L               ; Stop X movement
         000043b0 00000050- 
     634                    
     635 000043d0           vhgkcheck_y
     636 000043d0     07ae          move    @WORLDTLY,a14,L         ; Get current Y position
         000043e0 00000000! 
     637 00004400     2a0e          sra     16,a14                  ; Get rid of fractional portion
     638 00004410     05a0          move    @targ_y,a0              ; Get current target Y position
         00004420 000000a0- 
     639 00004440     440e          sub     a0,a14                  ; Subtract the two
     640 00004450     038e          abs     a14                     ; Make sure it is positive
     641 00004460     0b4e          cmpi    3,a14                   ; Are we within 3 ?
         00004470     fffc  
     642 00004480     c704          jrgt    vhgkcheck_done          ; br = no
     643 00004490     57ce          clr     a14
     644 000044a0     078e          move    a14,@dy,L               ; Stop Y movement
         000044b0 00000070- 
     645                    
     646 000044d0           vhgkcheck_done
     647 000044d0                   PULL    a0
     648 000044e0     0960          rets
     649                    
     650                    *******************************************************************
     651                    *
     652 000044f0            SUBRP  pan_around
     653                    
     654 000044f0                   SLEEP   TSEC/2
     655                    
     656 00004540     57ce          clr     a14
     657 00004550     058e          move    a14,@pan_status
         00004560 00000020- 
     658                    
     659 00004580     07ae          move    @WORLDTLX,a14,L         ; Get current X position
         00004590 00000000! 
     660 000045b0     078e          move    a14,@final_x,L          ; Save off for pan back
         000045c0 000000b0- 
     661 000045e0     078e          move    a14,@p1x,L              ; Set as the starting X point
         000045f0 000000f0- 
     662 00004610     07ae          move    @WORLDTLY,a14,L         ; Get current Y position
         00004620 00000000! 
     663 00004640     078e          move    a14,@final_y,L          ; Save off for pan back
         00004650 000000d0- 
     664 00004670     078e          move    a14,@p1y,L              ; Set as the starting Y point
         00004680 00000110- 
     665                    
     666 000046a0           rdjppan_again
     667 000046a0     09e8          movi    panning_points,a8       ; Get pointer to pan points table
         000046b0 00002890' 
     668                    
     669 000046d0           rdjpp1on8_lp
     670 000046d0     970e          move    *a8+,a14,L              ; Get Ticks for the move
     671 000046e0     078e          move    a14,@ticks,L            ; Set ticks for this move
         000046f0 00000030- 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   16

     672 00004710     970e          move    *a8+,a14,L              ; Get Target X position
     673 00004720     078e          move    a14,@p2x,L              ; Set Ending X position
         00004730 00000130- 
     674 00004750     2e0e          srl     16,a14                  ; Lop off fractional part
     675 00004760     058e          move    a14,@targ_x             ; Store it as the target X position
         00004770 00000090- 
     676 00004790     970e          move    *a8+,a14,L              ; Get Target Y position
     677 000047a0     078e          move    a14,@p2y,L              ; Set Ending Y position
         000047b0 00000150- 
     678 000047d0     2e0e          srl     16,a14                  ; Lop off fractional part
     679 000047e0     058e          move    a14,@targ_y             ; Store it as the target Y position
         000047f0 000000a0- 
     680 00004810     19ea          movk    15,a10                  ; Number of ticks for this move
     681 00004820     0d3f          callr   calc_dxdy               ; Calculate dx and dy
         00004830     ff75  
     682 00004840           rdjpnext_move
     683 00004840     0d3f          callr   move_camera             ; Move the camera
         00004850     ff8f  
     684 00004860     0d5f          calla   BGND_UD1                ; Update the background
         00004870 00000000! 
     685 00004890                   SLEEPK  1                       ; Let it actually move
     686 000048d0                   PUSH    a0,a1,a2,a3,a4,a5,a6,a7,a8,a9
     687 000048f0     1823          movk    1,a3
     688 00004900     0d5f          calla   crowd_cheer             ; Make the crowd cheer
         00004910 00000000! 
     689 00004930                   PULL    a0,a1,a2,a3,a4,a5,a6,a7,a8,a9
     690 00004950     0d3f          callr   check_camera_position   ; Adjust dx and dy
         00004960     ff95  
     691                    
     692 00004970     07ae          move    @dx,a14,L               ; Get current dx
         00004980 00000050- 
     693 000049a0     07a0          move    @dy,a0,L                ; Get current dy
         000049b0 00000070- 
     694 000049d0     540e          or      a0,a14                  ; Or 'em together
     695 000049e0     cbe5          jrnz    rdjpnext_move           ; Done with this segment ? - br - no
     696                    
     697                            ; This is probably where I want to put up different lines of text
     698 000049f0     05ae          move    @pan_status,a14
         00004a00 00000020- 
     699 00004a20     cb1b          jrnz    rdjptext_is_up
     700                    
     701 00004a30                   SLEEPK  5
     702                    
     703 00004a70     182e          movk    1,a14
     704 00004a80     058e          move    a14,@pan_status
         00004a90 00000020- 
     705 00004ab0     05ae          move    @royal_rumble,a14
         00004ac0 00000000! 
     706 00004ae0     cb06          jrnz    rdjpdo_8_on_2
     707 00004af0     0d5f          calla   is_8_on_1
         00004b00 00000000! 
     708 00004b20     c804          jrc     rdjpdo_8_on_1
     709                    
     710 00004b30           rdjpdo_3_on_1
     711                            ; Print 1vs3 congrats message - GAWD IS THIS UUUUGGGLY
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   17

     712 00004b30     57ce          clr     a14
     713 00004b40     c003          jruc    rdjppcx
     714 00004b50           rdjpdo_8_on_2
     715                            ; Print 2vs8 congrats message - GAWD IS THIS UUUUGGGLY
     716 00004b50     184e          movk    2,a14
     717 00004b60     c001          jruc    rdjppcx
     718 00004b70           rdjpdo_8_on_1
     719                            ; Print 1vs8 congrats message - GAWD IS THIS UUUUGGGLY
     720 00004b70     182e          movk    1,a14
     721 00004b80     0d3f  rdjppcx callr   print_congrats
         00004b90     00b0  
     722 00004ba0                   SLEEPK  2
     723 00004be0           rdjptext_is_up
     724                    
     725                    
     726 00004be0     07ae          move    @p2x,a14,L              ; Get Last End X position
         00004bf0 00000130- 
     727 00004c10     078e          move    a14,@p1x,L              ; Store as new Start X position
         00004c20 000000f0- 
     728 00004c40     07ae          move    @p2y,a14,L              ; Get Last End Y position
         00004c50 00000150- 
     729 00004c70     078e          move    a14,@p1y,L              ; Store as new Start Y position
         00004c80 00000110- 
     730 00004ca0     05ae          move    @pan_down,a14
         00004cb0 00000010- 
     731 00004cd0     cb06          jrnz    rdjppan_done
     732 00004ce0     870e          move    *a8,a14,L               ; Get next X target
     733 00004cf0     cb9d          jrnz    rdjpp1on8_lp            ; Done ? - br = no
     734                    
     735 00004d00     05ae          move    @pan_down,a14
         00004d10 00000010- 
     736 00004d30     ca96          jrz     rdjppan_again
     737                    
     738 00004d40           rdjppan_done
     739                    
     740 00004d40     09c0          movi    CLSMK3,a0
         00004d50     6000  
     741 00004d60     0d5f          calla   obj_del1c       ; Get rid of the text when we pan back down
         00004d70 00000000! 
     742                    
     743 00004d90     07ae          move    @final_x,a14,L          ; Get final X position
         00004da0 000000b0- 
     744 00004dc0     078e          move    a14,@p2x,L              ; Store it as new End Y postion
         00004dd0 00000130- 
     745 00004df0     2e0e          srl     16,a14                  ; Lop off fractional part
     746 00004e00     058e          move    a14,@targ_x             ; Store it as the target X position
         00004e10 00000090- 
     747 00004e30     07ae          move    @final_y,a14,L          ; Get final Y position
         00004e40 000000d0- 
     748 00004e60     078e          move    a14,@p2y,L              ; Store it as new End Y postion
         00004e70 00000150- 
     749 00004e90     2e0e          srl     16,a14                  ; Lop off fractional part
     750 00004ea0     058e          move    a14,@targ_y             ; Store it as the target Y position
         00004eb0 000000a0- 
     751                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   18

     752 00004ed0     09ce          movi    INIT_PAN_SPEED,a14
         00004ee0     0035  
     753 00004ef0     078e          move    a14,@ticks,L            ; Store ticks for this move
         00004f00 00000030- 
     754                    
     755 00004f20     0d3f          callr   calc_dxdy               ; Calculate dx and dy
         00004f30     ff05  
     756 00004f40           rdjpnpb_move
     757 00004f40     0d3f          callr   move_camera             ; Move the camera
         00004f50     ff1f  
     758 00004f60     0d5f          calla   BGND_UD1                ; Update the background
         00004f70 00000000! 
     759 00004f90                   SLEEPK  1                       ; Let it actually move
     760 00004fd0                   PUSH    a0,a1,a2,a3,a4,a5,a6,a7,a8,a9
     761 00004ff0     1823          movk    1,a3
     762 00005000     0d5f          calla   crowd_cheer             ; Make the crowd cheer
         00005010 00000000! 
     763 00005030                   PULL    a0,a1,a2,a3,a4,a5,a6,a7,a8,a9
     764 00005050     0d3f          callr   check_camera_position   ; Adjust dx and dy
         00005060     ff25  
     765                    
     766 00005070     07ae          move    @dx,a14,L               ; Get current dx
         00005080 00000050- 
     767 000050a0     07a0          move    @dy,a0,L                ; Get current dy
         000050b0 00000070- 
     768 000050d0     540e          or      a0,a14                  ; Or 'em together
     769 000050e0     cbe5          jrnz    rdjpnpb_move            ; Done with last segment ? - br = no
     770                    
     771 000050f0                   DIE
     772                    
     773                    *****************************************
     774                    *
     775 00005120            SUBRP  knockout_drones
     776 00005120     09e9          movi    process_ptrs,a9
         00005130 00000000! 
     777 00005150           avcnnext
     778 00005150     9728          move    *a9+,a8,L
     779 00005160     ca08          jrz     avcnko_done
     780 00005170     b50e          move    *a8(PLYR_TYPE),a14
         00005180     05a0  
     781 00005190     cafb          jrz     avcnnext
     782 000051a0     09ce          movi    7fffh,a14
         000051b0     7fff  
     783 000051c0     b1c8          move    a14,*a8(PTIME)
         000051d0     0030  
     784 000051e0     c0f6          jruc    avcnnext
     785 000051f0           avcnko_done
     786 000051f0     0960          rets
     787                    
     788                    ***************************************
     789                    *
     790 00005200            SUBRP  maiic1v3s_tbl
     791 00005200 00006430'         .long   maiicongrat_1v8_1
     792 00005220 000064d0'         .long   maiicongrat_1v8_2
     793 00005240 00006570'         .long   maiicongrat_1v8_3
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   19

     794                    ;       .long   maiicongrat_1v8_4
     795                    ;       .long   maiicongrat_1v8_5
     796 00005260 000066b0'         .long   maiicongrat_1v8_5
     797 00005280 00006750'         .long   maiicongrat_1v8_6
     798 000052a0 00000000          .long   0
     799                    
     800 000052c0            SUBRP  maiic1v8s_tbl
     801 000052c0 00006430'         .long   maiicongrat_1v8_1
     802 000052e0 000064d0'         .long   maiicongrat_1v8_2
     803 00005300 00006570'         .long   maiicongrat_1v8_3
     804 00005320 00006610'         .long   maiicongrat_1v8_4
     805 00005340 00006750'         .long   maiicongrat_1v8_6
     806 00005360 00000000          .long   0
     807                    
     808 00005380            SUBRP  maiic2v8s_tbl
     809 00005380 00006430'         .long   maiicongrat_1v8_1
     810 000053a0 000064d0'         .long   maiicongrat_1v8_2
     811 000053c0 00006570'         .long   maiicongrat_1v8_3
     812 000053e0 00006750'         .long   maiicongrat_1v8_6
     813 00005400 00000000          .long   0
     814                    
     815 00005420            SUBRP  maiicongrats_setup_tbl
     816 00005420 00005200'         .long   maiic1v3s_tbl
     817 00005440 000052c0'         .long   maiic1v8s_tbl
     818 00005460 00005380'         .long   maiic2v8s_tbl
     819                    
     820                    
     821 00005480            SUBRP  maiic1v3_tbl
     822 00005480 00005c40'         .long   maiicongrat_1v8_1_str
     823 000054a0 000058b0'         .long   maiicongrat_1v3_2_str
     824 000054c0 000059f0'         .long   maiicongrat_1v3_3_str
     825 000054e0 00005b20'         .long   maiicongrat_1v3_4_str
     826 00005500 00006040'         .long   maiicongrat_1v8_5_str
     827                    
     828 00005520            SUBRP  maiic1v8_tbl
     829 00005520 00005c40'         .long   maiicongrat_1v8_1_str
     830 00005540 00005ce0'         .long   maiicongrat_1v8_2_str
     831 00005560 00005e00'         .long   maiicongrat_1v8_3_str
     832 00005580 00005f30'         .long   maiicongrat_1v8_4_str
     833 000055a0 00006040'         .long   maiicongrat_1v8_5_str
     834                    
     835 000055c0            SUBRP  maiic2v8_tbl
     836 000055c0 00005c40'         .long   maiicongrat_1v8_1_str
     837 000055e0 00006120'         .long   maiicongrat_2v8_2_str
     838 00005600 00006220'         .long   maiicongrat_2v8_3_str
     839 00005620 00006330'         .long   maiicongrat_2v8_4_str
     840                    
     841 00005640            SUBRP  maiicongrats_str_tbl
     842 00005640 00005480'         .long   maiic1v3_tbl
     843 00005660 00005520'         .long   maiic1v8_tbl
     844 00005680 000055c0'         .long   maiic2v8_tbl
     845                    
     846                    ; a14 = 0 - 1v3, 1 - 1vs8, 2 - 2vs 8
     847 000056a0            SUBRP  print_congrats
     848 000056a0                   PUSH    a8,a9,a10,a11
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   20

     849 000056c0     24ae          sll     5,a14
     850 000056d0     4dc9          move    a14,a9
     851 000056e0     4dca          move    a14,a10
     852 000056f0     0b29          addi    maiicongrats_setup_tbl,a9
         00005700 00005420' 
     853 00005720     0b2a          addi    maiicongrats_str_tbl,a10
         00005730 00005640' 
     854 00005750     8729          move    *a9,a9,L
     855 00005760     874a          move    *a10,a10,L
     856 00005770           maiiprint_clp
     857 00005770     9728          move    *a9+,a8,L
     858 00005780     ca0f          jrz     maiic_done
     859 00005790     974b          move    *a10+,a11,L
     860 000057a0     4d02          move    a8,a2
     861 000057b0     0d5f          calla   setup_message
         000057c0 00000000! 
     862 000057e0     09c4          movi    CLSMK3,a4
         000057f0     6000  
     863 00005800     0584          move    a4,@mess_objid
         00005810 00000000! 
     864 00005830     4d64          move    a11,a4
     865 00005840     0d5f          calla   print_string_C2
         00005850 00000000! 
     866 00005870     c0ef          jruc    maiiprint_clp
     867 00005880           maiic_done
     868 00005880                   PULL    a8,a9,a10,a11
     869 000058a0     0960          rets
     870                    
     871 000058b0           maiicongrat_1v3_2_str
     872 000058b0       59          .string "YOU ARE THE INTERCONTINENTAL CHAMPION!",0
     873 000059f0                   .even
     874 000059f0           maiicongrat_1v3_3_str
     875 000059f0       49          .string "IT'S TIME TO SEEK A BIGGER CHALLENGE:",0
     876 00005b20                   .even
     877 00005b20           maiicongrat_1v3_4_str
     878 00005b20       43          .string "COMPETE FOR THE WORLD CHAMPIONSHIP!",0
     879 00005c40                   .even
     880                    
     881                    
     882 00005c40           maiicongrat_1v8_1_str
     883 00005c40       43          .string "CONGRATULATIONS!!!",0
     884 00005ce0                   .even
     885 00005ce0           maiicongrat_1v8_2_str
     886 00005ce0       59          .string "YOU ARE THE NEW WWF WORLD CHAMPION!",0
     887 00005e00                   .even
     888 00005e00           maiicongrat_1v8_3_str
     889 00005e00       59          .string "YOUR NAME WILL LIVE FOREVER AMONG THE",0
     890 00005f30                   .even
     891 00005f30           maiicongrat_1v8_4_str
     892 00005f30       47          .string "GREATEST WRESTLERS OF ALL TIME!!!",0
     893 00006040                   .even
     894 00006040           maiicongrat_1v8_5_str
     895 00006040       2e          .string "...THANK YOU FOR PLAYING...",0
     896 00006120                   .even
     897                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:17 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   21

     898                    
     899 00006120           maiicongrat_2v8_2_str
     900 00006120       59          .string "YOU ARE THE NEW WORLD WRESTLING",0
     901 00006220                   .even
     902 00006220           maiicongrat_2v8_3_str
     903 00006220       46          .string "FEDERATION TAG TEAM CHAMPIONS!!!",0
     904 00006330                   .even
     905 00006330           maiicongrat_2v8_4_str
     906 00006330       50          .string "PREPARE TO BATTLE EACH OTHER!!!",0
     907 00006430                   .even
     908                    
     909                    
     910 00006430           maiicongrat_1v8_1
     911 00006430                   JAM_STR wsf14_ascii,10,0,200,60,WSF_R_P,print_string_C2
     912 000064d0                   .even
     913 000064d0           maiicongrat_1v8_2
     914 000064d0                   JAM_STR ogmd10_ascii,10,0,200,100,SGMD8YEL,print_string_C2
     915 00006570                   .even
     916 00006570           maiicongrat_1v8_3
     917 00006570                   JAM_STR ogmd10_ascii,10,0,200,113,SGMD8YEL,print_string_C2
     918 00006610                   .even
     919 00006610           maiicongrat_1v8_4
     920 00006610                   JAM_STR ogmd10_ascii,10,0,200,126,SGMD8YEL,print_string_C2
     921 000066b0                   .even
     922 000066b0           maiicongrat_1v8_5
     923 000066b0                   JAM_STR ogmd10_ascii,10,0,200,152,SGMD8WHT,print_string_C2
     924 00006750                   .even
     925 00006750           maiicongrat_1v8_6
     926 00006750                   JAM_STR ogmd10_ascii,10,0,200,178,SGMD8BLU,print_string_C2
     927 000067f0                   .even
     928                    
     929                    
     930                    ******************************************************************************
     931                    
     932                            .end

 No Errors,  No Warnings
