TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    
       2                            .file   "fireword.asm"
       4                            .width  132
       5                            .option b,d,l,t
       6                            .mnolist
       7                    
       8                    
       9                            .include        "macros.h"
      10                            .include        "mproc.equ"             ;Mproc equates
      11                            .include        "display.equ"           ;Display proc equates
      12                            .include        "gsp.equ"               ;Gsp asm equates
      13                            .include        "sys.equ"
      14                            .include        "wwfsec.equ"
      15                            .include        "game.equ"
      16                            .include        "audit.equ"
      17                            .include        "plyr.equ"
      18                            .include        "anim.equ"
      19                            .include        "sound.h"
      20                            .include        "ring.equ"
      21                            .include        "sound.equ"
      22                            .include        "damage.equ"
      23                            .include        "jjxm.h"
      24                    
      25                            .include        "imgtbl.glo"
      26                            .include        "fontsimg.glo"
      27                            .include        "bgndtbl.glo"
      28                            .include        "miscimg.glo"
      29                    
      30                            .ref    RNDRNG0
      31                            .ref    BEGINOBJP
      32                            .ref    PRCSLP
      33                            .ref    DELOBJA8
      34                            .ref    obj_aniq
      35                            .ref    flash_white
      36                            .ref    pal_clean
      37                            .ref    fade_up
      38                            .ref    fade_down
      39                            .ref    BGND_UD1
      40                            .ref    crowd_anim
      41                            .ref    crowd_cheer
      42                            .ref    reduce_bog
      43                            .ref    is_8_on_1
      44                            .ref    print_message
      45                            .ref    wsf14_ascii
      46                            .ref    royal_rumble
      47                            .ref    print_string_C2
      48                            .ref    print_string_C
      49                            .ref    font9_ascii
      50                            .ref    setup_message
      51                            .ref    mess_objid
      52                            .ref    SNDSND
      53                            .ref    crowd_process
      54                            .ref    process_ptrs
      55                            .ref    ogmd10_ascii
      56                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    2

      57 00000000                   .bss    fizzle_flare,16
      58 00000010                   .bss    pan_down,16
      59                    
      60              04e4  EXP_FW_SND      .equ    1252
      61              04dc  FLR_FW_SND      .equ    1244
      62                    
      63 00000000            SUBRP  omvzfwexa_anim
      64 00000000 00000000!         .long   FWEXPA01
      65 00000020 00000000!         .long   FWEXPA02
      66 00000040 00000000!         .long   FWEXPA03
      67 00000060 00000000!         .long   FWEXPA04
      68 00000080 00000000!         .long   FWEXPA05
      69 000000a0 00000000!         .long   FWEXPA06
      70 000000c0 00000000!         .long   FWEXPA07
      71 000000e0 00000000!         .long   FWEXPA08
      72 00000100 00000000!         .long   FWEXPA09
      73 00000120 00000000!         .long   FWEXPA10
      74 00000140 00000000!         .long   FWEXPA11
      75 00000160 00000000          .long   0
      76                    
      77 00000180            SUBRP  omvzfwexb_anim
      78 00000180 00000000!         .long   FWEXPB01
      79 000001a0 00000000!         .long   FWEXPB02
      80 000001c0 00000000!         .long   FWEXPB03
      81 000001e0 00000000!         .long   FWEXPB04
      82 00000200 00000000!         .long   FWEXPB05
      83 00000220 00000000!         .long   FWEXPB06
      84 00000240 00000000!         .long   FWEXPB07
      85 00000260 00000000!         .long   FWEXPB08
      86 00000280 00000000!         .long   FWEXPB09
      87 000002a0 00000000!         .long   FWEXPB10
      88 000002c0 00000000!         .long   FWEXPB11
      89 000002e0 00000000          .long   0
      90                    
      91 00000300            SUBRP  omvzfwexp_tbl
      92 00000300 00000000'         .long   omvzfwexa_anim
      93 00000320 00000180'         .long   omvzfwexb_anim
      94                    
      95 00000340            SUBRP  omvzflare_anim
      96 00000340 00000000!         .long   FWFLAR01
      97 00000360 00000000!         .long   FWFLAR02
      98 00000380 00000000!         .long   FWFLAR03
      99 000003a0 00000000!         .long   FWFLAR04
     100 000003c0 00000000!         .long   FWFLAR05
     101 000003e0            SUBRP  omvzflare_anim2
     102 000003e0 00000000!         .long   FWFLAR06
     103 00000400 00000000!         .long   FWFLAR07
     104 00000420 00000000!         .long   FWFLAR08
     105 00000440 00000000!         .long   FWFLAR09
     106 00000460 00000000!         .long   FWFLAR10
     107 00000480 00000000!         .long   FWFLAR11
     108 000004a0 00000000!         .long   FWFLAR12
     109 000004c0 00000000!         .long   FWFLAR13
     110 000004e0 00000000          .long   0
     111                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    3

     112 00000500            SUBRP  omvzfw_pals
     113 00000500 00000000!         .long   FWWHT_P
     114 00000520 00000000!         .long   FWBLV_P
     115 00000540 00000000!         .long   FWPNK_P
     116 00000560 00000000!         .long   FWBLU_P
     117 00000580 00000000!         .long   FWYEL_P
     118                    
     119              fefc  EXP_FWY .equ    -260
     120                    
     121 000005a0            SUBRP  omvzanimate_fwexp
     122                    
     123                            ; First Get a random position to place the explosion
     124 000005a0     09c0          movi    96,a0           ; Get a random vertical position
         000005b0     0060  
     125 000005c0     0d5f          calla   RNDRNG0
         000005d0 00000000! 
     126 000005f0     0b00          addi    EXP_FWY-48,a0
         00000600     fecc  
     127 00000610     4c09          move    a0,a9           ; Save it away
     128                    
     129 00000620     09c0          movi    350,a0          ; Get a random horizontal postion
         00000630     015e  
     130 00000640     0d5f          calla   RNDRNG0
         00000650 00000000! 
     131 00000670     0b00          addi    850,a0  
         00000680     0352  
     132 00000690     4c0a          move    a0,a10
     133                    
     134 000006a0     09c0          movi    200h,a0         ; Get a random Zpos
         000006b0     0200  
     135 000006c0     0d5f          calla   RNDRNG0
         000006d0 00000000! 
     136 000006f0     0b00          addi    700h,a0         ; Make sure we can see it
         00000700     0700  
     137 00000710     4c03          move    a0,a3
     138                    
     139                            ; Now get a random firework explosion to use
     140 00000720     09c0          movi    1,a0            ; Get a random explosion to use
         00000730     0001  
     141 00000740     0d5f          calla   RNDRNG0
         00000750 00000000! 
     142 00000770     24a0          sll     5,a0
     143 00000780     0b20          addi    omvzfwexp_tbl,a0
         00000790 00000300' 
     144 000007b0     860b          move    *a0,a11,L       ; Get pointer to image table
     145 000007c0     9762          move    *a11+,a2,L      ; Get the first image
     146                    
     147                            ; Set up some additional object creation junk
     148 000007d0     09e4          movi    DMAWNZ|M_3D,a4
         000007e0 00008102  
     149 00000800     09c5          movi    CLSNEUT,a5      ; Set the Object ID
         00000810     0000  
     150 00000820     56c6          clr     a6              ; Set the X velocity
     151 00000830     56e7          clr     a7              ; Set the Y velocity
     152                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    4

     153                            ; Get a random palette to use
     154 00000840     09c0          movi    4,a0            ; Get a random palette number
         00000850     0004  
     155 00000860     0d5f          calla   RNDRNG0
         00000870 00000000! 
     156 00000890     4e00          move    a0,b0           ; Get entry from palette table
     157 000008a0     24b0          sll     5,b0
     158 000008b0     0b30          addi    omvzfw_pals,b0
         000008c0 00000500' 
     159 000008e0     8610          move    *b0,b0,L
     160                            
     161                            ; Set up the x and y positions for the object
     162 000008f0     4d21          move    a9,a1           ; Get saved YPOS
     163 00000900     2601          sll     16,a1           ; Shift it for object creation
     164 00000910     4d40          move    a10,a0          ; Get saved XPOS
     165 00000920     2600          sll     16,a0           ; Shift it for object creattion
     166                    
     167                            ; Now create the first image
     168 00000930     0d5f          calla   BEGINOBJP       ; Create the object
         00000940 00000000! 
     169                    
     170                            ; Make an explosion sound
     171 00000960     09c3          movi    EXP_FW_SND,a3
         00000970     04e4  
     172 00000980     0d5f          calla   SNDSND
         00000990 00000000! 
     173                    
     174                            ; And animate the whole works
     175 000009b0     b50a          move    *a8(OCTRL),a10
         000009c0     00f0  
     176 000009d0     b509          move    *a8(OYPOS),a9
         000009e0     00b0  
     177 000009f0           omvzanimate_loop
     178 000009f0                   SLEEPK  1
     179 00000a30     9760          move    *a11+,a0,L      ; Get the next image
     180 00000a40     ca08          jrz     omvzfwanim_done ; Are we done ? - br = yes
     181 00000a50     4d41          move    a10,a1
     182 00000a60     0d5f          calla   obj_aniq        ; Change the image
         00000a70 00000000! 
     183 00000a90     1089          addk    4,a9
     184 00000aa0     b128          move    a9,*a8(OYPOS)
         00000ab0     00b0  
     185 00000ac0     c0f2          jruc    omvzanimate_loop        ; Go do next image
     186                    
     187                            ; We all done - soooo get rid of the object and die
     188 00000ad0           omvzfwanim_done
     189 00000ad0     0d5f          calla   DELOBJA8        ; Kill off the object
         00000ae0 00000000! 
     190 00000b00                   DIE                     ; And die
     191                    
     192                    
     193 00000b30            SUBRP  firework_flare
     194 00000b30     1b20          movk    25,a0
     195 00000b40     0d5f          calla   RNDRNG0
         00000b50 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    5

     196 00000b70     1020          addk    1,a0
     197 00000b80     0d5f          calla   PRCSLP
         00000b90 00000000! 
     198                    
     199 00000bb0     1880          movk    4,a0
     200 00000bc0     0d5f          calla   RNDRNG0
         00000bd0 00000000! 
     201 00000bf0     4e00          move    a0,b0
     202 00000c00     24b0          sll     5,b0
     203 00000c10     0b30          addi    omvzfw_pals,b0
         00000c20 00000500' 
     204 00000c40     8610          move    *b0,b0,L
     205                    
     206 00000c50     4d20          move    a9,a0
     207 00000c60     2e00          srl     16,a0
     208 00000c70     2600          sll     16,a0
     209                    
     210 00000c80     4d21          move    a9,a1
     211 00000c90     2601          sll     16,a1
     212                    
     213 00000ca0     09e9          movi    omvzflare_anim,a9
         00000cb0 00000340' 
     214 00000cd0     9722          move    *a9+,a2,L
     215                    
     216 00000ce0     09c3          movi    810h,a3
         00000cf0     0810  
     217 00000d00     09e4          movi    DMAWNZ|M_3D,a4
         00000d10 00008102  
     218 00000d30     09c5          movi    CLSFRWK,a5
         00000d40     7000  
     219 00000d50     56c6          clr     a6
     220 00000d60     56e7          clr     a7
     221                    
     222 00000d70     0d5f          calla   BEGINOBJP
         00000d80 00000000! 
     223                    
     224                    
     225                    
     226                    
     227                    
     228                    
     229 00000da0     b50a          move    *a8(OCTRL),a10
         00000db0     00f0  
     230 00000dc0           omvzflare_loop
     231 00000dc0                   SLEEPK  2
     232 00000e00           omvzfl_loop
     233 00000e00     9720          move    *a9+,a0,L
     234 00000e10     ca05          jrz     omvzreset_flare
     235 00000e20     4d41          move    a10,a1
     236 00000e30     0d5f          calla   obj_aniq
         00000e40 00000000! 
     237 00000e60     c0f5          jruc    omvzflare_loop
     238                    
     239 00000e70           omvzreset_flare
     240 00000e70     05a9          move    @fizzle_flare,a9
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    6

         00000e80 00000000- 
     241 00000ea0     cb04          jrnz    omvzflare_fizzle
     242 00000eb0     09e9          movi    omvzflare_anim2,a9
         00000ec0 000003e0' 
     243 00000ee0     c0f1          jruc    omvzfl_loop
     244                    
     245 00000ef0           omvzflare_fizzle
     246                    
     247 00000ef0     09e9          movi    omvzflare_anim2,a9
         00000f00 000003e0' 
     248 00000f20           omvzff_loop
     249 00000f20                   SLEEPK  4
     250 00000f60     0b69          cmpi    omvzflare_anim,a9
         00000f70 fffffcbf' 
     251 00000f90     ca06          jrz     omvzff_exit
     252 00000fa0     a720          move    -*a9,a0,L
     253 00000fb0     4d41          move    a10,a1
     254 00000fc0     0d5f          calla   obj_aniq
         00000fd0 00000000! 
     255 00000ff0     c0f2          jruc    omvzff_loop
     256 00001000           omvzff_exit
     257                    
     258 00001000     0d5f          calla   DELOBJA8
         00001010 00000000! 
     259 00001030                   DIE
     260                    
     261                    
     262                    
     263 00001060            SUBR   do_fireworks
     264                    
     265 00001060                   PUSHP   a9,a10
     266                    
     267 00001080     0d5f          calla   pal_clean       ; Get rid of extra palettes
         00001090 00000000! 
     268                    
     269 000010b0     574a          clr     a10             ; Fade down the lights
     270 000010c0     058a          move    a10,@fizzle_flare
         000010d0 00000000- 
     271 000010f0     180b          movk    32,a11
     272 00001100                   CREATE0 fade_down
     273 00001170                   SLEEPK  30
     274                    
     275 000011b0     09c0          movi    ANNC_PID,a0
         000011c0     012e  
     276 000011d0     0d5f          calla   KIL1C           ; Kill off any announcer processes
         000011e0 00000000! 
     277                    
     278 00001200     09c0          movi    METER_PID,a0
         00001210     0240  
     279 00001220     0d5f          calla   KIL1C           ; Kill off meter processes
         00001230 00000000! 
     280                    
     281 00001250     09c0          movi    TIMER_PID,a0
         00001260     0124  
     282 00001270     0d5f          calla   KIL1C           ; Kill off match timer process
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    7

         00001280 00000000! 
     283                    
     284 000012a0     09c0          movi    FLASH_PID,a0
         000012b0     0139  
     285 000012c0     0d5f          calla   KIL1C           ; Kill off any flasher processes
         000012d0 00000000! 
     286                    
     287 000012f0     09c0          movi    ICON_PID,a0
         00001300     0141  
     288 00001310     0d5f          calla   KIL1C           ; Kill off any icon flashers
         00001320 00000000! 
     289                    
     290 00001340     09c0          movi    SMOVE_PID,a0
         00001350     012f  
     291 00001360     0d5f          calla   KIL1C           ; Kill off special move processes
         00001370 00000000! 
     292                    
     293 00001390     09c0          movi    PINHIM_ANIM_PID,a0
         000013a0     0160  
     294 000013b0     0d5f          calla   KIL1C           ; Kill off pin him processes
         000013c0 00000000! 
     295                    
     296 000013e0     09c0          movi    REWIRE_PID,a0
         000013f0     0148  
     297 00001400     0d5f          calla   KIL1C           ; Kill off rewire processes
         00001410 00000000! 
     298                    
     299 00001430     09c0          movi    ZSHIFT_PID,a0
         00001440     0149  
     300 00001450     0d5f          calla   KIL1C           ; Kill off something to do with progress ladder
         00001460 00000000! 
     301                    
     302 00001480     09c0          movi    GETUP_PID,a0
         00001490     012b  
     303 000014a0     0d5f          calla   KIL1C           ; Kill off getup meter processes
         000014b0 00000000! 
     304                    
     305 000014d0     09c0          movi    FLASH_COMBO_PID,a0
         000014e0     0143  
     306 000014f0     0d5f          calla   KIL1C           ; Kill off any combo flashers
         00001500 00000000! 
     307                    
     308                    
     309 00001520     09c0          movi    FLASH_COMBO_PID+1,a0
         00001530     0144  
     310 00001540     0d5f          calla   KIL1C           ; Kill off any combo flashers
         00001550 00000000! 
     311                    
     312                    
     313 00001570     09c0          movi    CYCPID,a0
         00001580     0110  
     314 00001590     0d5f          calla   KIL1C           ; Kill any cyclers
         000015a0 00000000! 
     315                    
     316 000015c0     09c0          movi    FX_PID,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    8

         000015d0     0120  
     317 000015e0     0d5f          calla   KIL1C           ; Kill and FX processes
         000015f0 00000000! 
     318                    
     319 00001610     09c0          movi    ADD_INIT_PID,a0
         00001620     0130  
     320 00001630     0d5f          calla   KIL1C           ; Kill any perfect processes
         00001640 00000000! 
     321                    
     322 00001660     09c0          movi    OVRHED_PID,a0
         00001670     0121  
     323 00001680     0d5f          calla   KIL1C           ; Kill any of these that are laying around
         00001690 00000000! 
     324                    
     325                            .if DEBUG
     326                            movi    CDEBUG_PID,a0
     327                            calla   KIL1C           ; Kill off collision box debug processes
     328                            .endif
     329                    
     330                    
     331 000016b0     0d3f          callr   knockout_drones ; Knock out any wrestler process that are drone wrestlers
         000016c0     03a5  
     332                            
     333 000016d0     09c0          movi    CLSNEUT|TYPTEXT|SUBMES1,a0
         000016e0     0702  
     334 000016f0     0d5f          calla   obj_del1c       ; Kill off any announcer objects
         00001700 00000000! 
     335                    
     336 00001720     09c0          movi    CLSNEUT|TYPNEUT|SUBMFRAME,a0
         00001730     0009  
     337 00001740     0d5f          calla   obj_del1c       ; Kill off the meter objects
         00001750 00000000! 
     338                    
     339 00001770     09c0          movi    CLSNEUT|TYPNEUT|SUBLBAR,a0
         00001780     0007  
     340 00001790     0d5f          calla   obj_del1c       ; Kill off meter bars
         000017a0 00000000! 
     341                    
     342 000017c0     09c0          movi    TYPTIMERDIGIT,a0
         000017d0     0130  
     343 000017e0     0d5f          calla   obj_del1c       ; Kill off the match timer objects
         000017f0 00000000! 
     344                    
     345 00001810     09c0          movi    TYPWWFICON,a0
         00001820     0140  
     346 00001830     0d5f          calla   obj_del1c       ; Kill off any WWF Icon objects
         00001840 00000000! 
     347                    
     348 00001860     09c0          movi    CLSDEAD,a0
         00001870     2000  
     349 00001880     0d5f          calla   obj_del1c       ; Kill off winstreak number
         00001890 00000000! 
     350                    
     351 000018b0     09c0          movi    TYPPINHIM,a0
         000018c0     0160  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    9

     352 000018d0     0d5f          calla   obj_del1c       ; Kill off any pin him objects
         000018e0 00000000! 
     353                    
     354 00001900     09c0          movi    TYPPERFECT,a0
         00001910     0170  
     355 00001920     0d5f          calla   obj_del1c       ; Kill off any perfect objects
         00001930 00000000! 
     356                    
     357 00001950     5600          clr     a0                      ; Turn off bog reduction
     358 00001960     0580          move    a0,@reduce_bog          ; Animate the crowd
         00001970 00000000! 
     359                    
     360                            ;wake up the crowd
     361 00001990     07a0          move    @crowd_process,a0,L
         000019a0 00000000! 
     362 000019c0     182e          movk    1,a14
     363 000019d0     b1c0          move    a14,*a0(PTIME)
         000019e0     0030  
     364                    
     365 000019f0     0d5f          calla   pal_clean       ; Clean any other palettes we freed by
         00001a00 00000000! 
     366                                                    ; Getting rid of all of the above shit
     367                    
     368                            ;ORIGINAL MIKE CODE
     369                            ;JASON'S QUICK-HACK VERSION
     370                    
     371                    
     372                    
     373 00001a20     0d5f          calla   flash_white
         00001a30 00000000! 
     374 00001a50     09c3          movi    FLR_FW_SND,a3
         00001a60     04dc  
     375 00001a70     0d5f          calla   SNDSND
         00001a80 00000000! 
     376                    
     377                    
     378                            ; Back of ring flares
     379 00001aa0     198a          movk    12,a10          ; Make 12 flares
     380 00001ab0     09e9          movi    [798,128],a9    ; [sx,y] of flare positions
         00001ac0 031e0080  
     381 00001ae0           omvzdo_flare
     382 00001ae0                   CREATE  FIREWRK_PID,firework_flare
     383 00001b60     0b29          addi    [50,0],a9       ; Increment x position
         00001b70 00320000  
     384 00001b90     3d8a          dsjs    a10,omvzdo_flare        ; go do next flare
     385                    
     386                            ; Left Side flares
     387 00001ba0     09e9          movi    [770,148],a9
         00001bb0 03020094  
     388 00001bd0                   CREATE  FIREWRK_PID,firework_flare
     389 00001c50     09e9          movi    [753,168],a9
         00001c60 02f100a8  
     390 00001c80                   CREATE  FIREWRK_PID,firework_flare
     391 00001d00     09e9          movi    [736,188],a9
         00001d10 02e000bc  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   10

     392 00001d30                   CREATE  FIREWRK_PID,firework_flare
     393 00001db0     09e9          movi    [719,208],a9
         00001dc0 02cf00d0  
     394 00001de0                   CREATE  FIREWRK_PID,firework_flare
     395 00001e60     09e9          movi    [702,228],a9
         00001e70 02be00e4  
     396 00001e90                   CREATE  FIREWRK_PID,firework_flare
     397                    
     398                            ; Right Side flares
     399 00001f10     09e9          movi    [1372,148],a9
         00001f20 055c0094  
     400 00001f40                   CREATE  FIREWRK_PID,firework_flare
     401 00001fc0     09e9          movi    [1389,168],a9
         00001fd0 056d00a8  
     402 00001ff0                   CREATE  FIREWRK_PID,firework_flare
     403 00002070     09e9          movi    [1406,188],a9
         00002080 057e00bc  
     404 000020a0                   CREATE  FIREWRK_PID,firework_flare
     405 00002120     09e9          movi    [1423,208],a9
         00002130 058f00d0  
     406 00002150                   CREATE  FIREWRK_PID,firework_flare
     407 000021d0     09e9          movi    [1440,228],a9
         000021e0 05a000e4  
     408 00002200                   CREATE  FIREWRK_PID,firework_flare
     409                    
     410 00002280     574a          clr     a10             ; Lights back on
     411 00002290     09cb          movi    64,a11
         000022a0     0040  
     412 000022b0                   CREATE0 fade_up
     413 00002320                   SLEEPK  16
     414                    
     415 00002360     0d5f          calla   flash_white
         00002370 00000000! 
     416 00002390     09c3          movi    FLR_FW_SND,a3
         000023a0     04dc  
     417 000023b0     0d5f          calla   SNDSND
         000023c0 00000000! 
     418                    
     419                            ;sleep while flares go off
     420 000023e0                   SLEEP   TSEC
     421                    
     422                            ;now slowly pan up
     423 00002430     57ce          clr     a14
     424 00002440     058e          move    a14,@pan_down
         00002450 00000010- 
     425 00002470                   CREATE0 pan_around
     426                    
     427                            ;do fireworks
     428                    
     429 000024e0     09c8          movi    TSEC*6,a8
         000024f0     013e  
     430                    
     431 00002500           omvzdo_exfw_loop
     432 00002500                   CREATE0 omvzanimate_fwexp       ; Create an exploding firework
     433                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   11

     434 00002570     18c0          movk    6,a0            ; Sleep a random amount of time
     435 00002580     0d5f          calla   RNDRNG0
         00002590 00000000! 
     436 000025b0     1020          addk    1,a0            ; Make sure we sleep at least 1
     437 000025c0     4408          sub     a0,a8
     438 000025d0     0d5f          calla   PRCSLP          ; Sleep
         000025e0 00000000! 
     439 00002600     4d08          move    a8,a8
     440 00002610     c7ee          jrgt    omvzdo_exfw_loop
     441                    
     442                    
     443 00002620     1820          movk    1,a0
     444 00002630     0580          move    a0,@pan_down
         00002640 00000010- 
     445 00002660     09c9          movi    TSEC*2,a9
         00002670     006a  
     446 00002680     c002          jruc    omvzcheer_lp
     447 00002690           omvzno_exp_fw
     448 00002690     09c9          movi    TSEC*5,a9
         000026a0     0109  
     449 000026b0           omvzcheer_lp
     450 000026b0     4d29          move    a9,a9
     451 000026c0     c60e          jrle    omvzclp_done
     452 000026d0                   PUSH    a0,a1,a2,a3,a4,a5,a6,a7,a8,a9
     453 000026f0     1823          movk    1,a3            ; And make 'em do something
     454 00002700     0d5f          calla   crowd_cheer
         00002710 00000000! 
     455 00002730                   PULL    a0,a1,a2,a3,a4,a5,a6,a7,a8,a9
     456 00002750                   SLEEPK  15
     457 00002790     15e9          subk    15,a9
     458 000027a0     c0f0          jruc    omvzcheer_lp
     459 000027b0           omvzclp_done
     460                            
     461                    
     462 000027b0     1820          movk    1,a0            ; Tell flares to fizzle out
     463 000027c0     0580          move    a0,@fizzle_flare
         000027d0 00000000- 
     464                    
     465                    
     466 000027f0                   SLEEP   TSEC            ; Give flares time to die out
     467                    
     468                    
     469 00002840                   PULLP   a9,a10
     470 00002860                   RETP
     471                    
     472 00000020                   .bss    pan_status,16
     473                    
     474 00002890           panning_points                                  ; figure 8  
     475                    
     476              0035  INIT_PAN_SPEED  .equ    TSEC
     477                    
     478 00002890 00000035          .long   INIT_PAN_SPEED,[850,0],[EXP_FWY+0,0]
     479 000028f0 00000003          .long   3,[848,0],[EXP_FWY-10,0]
     480 00002950 00000003          .long   3,[844,0],[EXP_FWY-20,0]
     481 000029b0 00000003          .long   3,[836,0],[EXP_FWY-28,0]
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   12

     482 00002a10 00000003          .long   3,[825,0],[EXP_FWY-36,0]
     483 00002a70 00000003          .long   3,[812,0],[EXP_FWY-42,0]
     484 00002ad0 00000003          .long   3,[798,0],[EXP_FWY-46,0]
     485 00002b30 00000003          .long   3,[783,0],[EXP_FWY-48,0]
     486 00002b90 00000003          .long   3,[767,0],[EXP_FWY-48,0]
     487 00002bf0 00000003          .long   3,[752,0],[EXP_FWY-46,0]
     488 00002c50 00000003          .long   3,[738,0],[EXP_FWY-42,0]
     489 00002cb0 00000003          .long   3,[725,0],[EXP_FWY-36,0]
     490 00002d10 00000003          .long   3,[714,0],[EXP_FWY-28,0]
     491 00002d70 00000003          .long   3,[706,0],[EXP_FWY-20,0]
     492 00002dd0 00000003          .long   3,[702,0],[EXP_FWY-10,0]
     493 00002e30 00000003          .long   3,[700,0],[EXP_FWY+0,0]
     494 00002e90 00000003          .long   3,[702,0],[EXP_FWY+10,0]
     495 00002ef0 00000003          .long   3,[706,0],[EXP_FWY+20,0]
     496 00002f50 00000003          .long   3,[714,0],[EXP_FWY+28,0]
     497 00002fb0 00000003          .long   3,[725,0],[EXP_FWY+36,0]
     498 00003010 00000003          .long   3,[737,0],[EXP_FWY+42,0]
     499 00003070 00000003          .long   3,[752,0],[EXP_FWY+46,0]
     500 000030d0 00000003          .long   3,[767,0],[EXP_FWY+48,0]
     501 00003130 00000003          .long   3,[783,0],[EXP_FWY+48,0]
     502 00003190 00000003          .long   3,[798,0],[EXP_FWY+46,0]
     503 000031f0 00000003          .long   3,[812,0],[EXP_FWY+42,0]
     504 00003250 00000003          .long   3,[825,0],[EXP_FWY+36,0]
     505 000032b0 00000003          .long   3,[836,0],[EXP_FWY+28,0]
     506 00003310 00000003          .long   3,[844,0],[EXP_FWY+20,0]
     507 00003370 00000003          .long   3,[848,0],[EXP_FWY+10,0]
     508 000033d0 00000003          .long   3,[850,0],[EXP_FWY+0,0]
     509 00003430 00000003          .long   3,[852,0],[EXP_FWY-10,0]
     510 00003490 00000003          .long   3,[856,0],[EXP_FWY-20,0]
     511 000034f0 00000003          .long   3,[864,0],[EXP_FWY-28,0]
     512 00003550 00000003          .long   3,[875,0],[EXP_FWY-36,0]
     513 000035b0 00000003          .long   3,[888,0],[EXP_FWY-42,0]
     514 00003610 00000003          .long   3,[902,0],[EXP_FWY-46,0]
     515 00003670 00000003          .long   3,[917,0],[EXP_FWY-48,0]
     516 000036d0 00000003          .long   3,[933,0],[EXP_FWY-48,0]
     517 00003730 00000003          .long   3,[948,0],[EXP_FWY-46,0]
     518 00003790 00000003          .long   3,[962,0],[EXP_FWY-42,0]
     519 000037f0 00000003          .long   3,[975,0],[EXP_FWY-36,0]
     520 00003850 00000003          .long   3,[986,0],[EXP_FWY-28,0]
     521 000038b0 00000003          .long   3,[994,0],[EXP_FWY-20,0]
     522 00003910 00000003          .long   3,[998,0],[EXP_FWY-10,0]
     523 00003970 00000003          .long   3,[1000,0],[EXP_FWY+0,0]
     524 000039d0 00000003          .long   3,[998,0],[EXP_FWY+10,0]
     525 00003a30 00000003          .long   3,[994,0],[EXP_FWY+20,0]
     526 00003a90 00000003          .long   3,[986,0],[EXP_FWY+28,0]
     527 00003af0 00000003          .long   3,[975,0],[EXP_FWY+36,0]
     528 00003b50 00000003          .long   3,[963,0],[EXP_FWY+42,0]
     529 00003bb0 00000003          .long   3,[948,0],[EXP_FWY+46,0]
     530 00003c10 00000003          .long   3,[933,0],[EXP_FWY+48,0]
     531 00003c70 00000003          .long   3,[917,0],[EXP_FWY+48,0]
     532 00003cd0 00000003          .long   3,[902,0],[EXP_FWY+46,0]
     533 00003d30 00000003          .long   3,[888,0],[EXP_FWY+42,0]
     534 00003d90 00000003          .long   3,[875,0],[EXP_FWY+36,0]
     535 00003df0 00000003          .long   3,[864,0],[EXP_FWY+28,0]
     536 00003e50 00000003          .long   3,[856,0],[EXP_FWY+20,0]
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   13

     537 00003eb0 00000003          .long   3,[852,0],[EXP_FWY+10,0]
     538 00003f10 00000003          .long   3,[850,0],[EXP_FWY+0,0]
     539 00003f70 00000000          .long   0
     540                    
     541 00000030                   .bss    ticks,32                ; Ticks for this move
     542 00000050                   .bss    dx,32                   ; X movement per tick
     543 00000070                   .bss    dy,32                   ; Y movement per tick
     544 00000090                   .bss    targ_x,16               ; Target X position
     545 000000a0                   .bss    targ_y,16               ; Target Y position
     546 000000b0                   .bss    final_x,32              ; Final X position to pan to
     547 000000d0                   .bss    final_y,32              ; Final Y position to pan to
     548 000000f0                   .bss    p1x,32                  ; Start X point
     549 00000110                   .bss    p1y,32                  ; Start Y point
     550 00000130                   .bss    p2x,32                  ; End X point
     551 00000150                   .bss    p2y,32                  ; End Y point
     552                    
     553 00003f90            SUBRP  calc_dxdy
     554 00003f90                   PUSH    a8,a9,a10,a11
     555                    
     556 00003fb0     09e8          movi    p1x,a8                  ; Get pointer to start and end points
         00003fc0 000000f0- 
     557                    
     558 00003fe0     07aa          move    @ticks,a10,L            ; Get ticks for this move
         00003ff0 00000030- 
     559                    
     560 00004010     870b          move    *a8,a11,L               ; Get start X position
     561 00004020     b709          move    *a8(64),a9,L            ; Get End X position
         00004030     0040  
     562 00004040     4569          sub     a11,a9                  ; Get X difference
     563 00004050     5949          divs    a10,a9                  ; Divide by ticks to get there
     564 00004060     0789          move    a9,@dx,L                ; Store delta X
         00004070 00000050- 
     565                    
     566 00004090     b70b          move    *a8(32),a11,L           ; Get start Y position
         000040a0     0020  
     567 000040b0     b709          move    *a8(96),a9,L            ; Get End Y position
         000040c0     0060  
     568 000040d0     4569          sub     a11,a9                  ; Get Y difference
     569 000040e0     5949          divs    a10,a9                  ; Divide by ticks to get there
     570 000040f0     0789          move    a9,@dy,L                ; Store delta Y
         00004100 00000070- 
     571                    
     572 00004120                   PULL    a8,a9,a10,a11
     573 00004140     0960          rets
     574                    
     575                    
     576 00004150            SUBRP  move_camera
     577 00004150                   PUSH    a0
     578                    
     579 00004160     07ae          move    @WORLDTLX,a14,L         ; Get Current X position
         00004170 00000000! 
     580 00004190     07a0          move    @dx,a0,L                ; Get Delta X
         000041a0 00000050- 
     581 000041c0     400e          add     a0,a14                  ; Add to Current X postion
     582 000041d0     078e          move    a14,@WORLDTLX,L         ; Write new position
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   14

         000041e0 00000000! 
     583                    
     584                    
     585 00004200     07ae          move    @WORLDTLY,a14,L         ; Get Current Y position
         00004210 00000000! 
     586 00004230     07a0          move    @dy,a0,L                ; Get Delta Y
         00004240 00000070- 
     587 00004260     400e          add     a0,a14                  ; Add to Current Y position
     588 00004270     078e          move    a14,@WORLDTLY,L         ; Write new Y position
         00004280 00000000! 
     589                    
     590 000042a0                   PULL    a0
     591 000042b0     0960          rets
     592                    
     593 000042c0            SUBRP  check_camera_position
     594 000042c0                   PUSH    a0
     595                    
     596 000042d0     07ae          move    @WORLDTLX,a14,L         ; Get current X position
         000042e0 00000000! 
     597 00004300     2a0e          sra     16,a14                  ; Get rid of fractional portion
     598 00004310     05a0          move    @targ_x,a0              ; Get current target X position
         00004320 00000090- 
     599 00004340     440e          sub     a0,a14                  ; Subtract the two
     600 00004350     038e          abs     a14                     ; Make sure it is positive
     601 00004360     0b4e          cmpi    3,a14                   ; Are we within 3 ?
         00004370     fffc  
     602 00004380     c704          jrgt    jsjqcheck_y             ; br = no
     603 00004390     57ce          clr     a14
     604 000043a0     078e          move    a14,@dx,L               ; Stop X movement
         000043b0 00000050- 
     605                    
     606 000043d0           jsjqcheck_y
     607 000043d0     07ae          move    @WORLDTLY,a14,L         ; Get current Y position
         000043e0 00000000! 
     608 00004400     2a0e          sra     16,a14                  ; Get rid of fractional portion
     609 00004410     05a0          move    @targ_y,a0              ; Get current target Y position
         00004420 000000a0- 
     610 00004440     440e          sub     a0,a14                  ; Subtract the two
     611 00004450     038e          abs     a14                     ; Make sure it is positive
     612 00004460     0b4e          cmpi    3,a14                   ; Are we within 3 ?
         00004470     fffc  
     613 00004480     c704          jrgt    jsjqcheck_done          ; br = no
     614 00004490     57ce          clr     a14
     615 000044a0     078e          move    a14,@dy,L               ; Stop Y movement
         000044b0 00000070- 
     616                    
     617 000044d0           jsjqcheck_done
     618 000044d0                   PULL    a0
     619 000044e0     0960          rets
     620                    
     621 000044f0            SUBRP  pan_around
     622                    
     623 000044f0                   SLEEP   TSEC/2
     624                    
     625 00004540     57ce          clr     a14
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   15

     626 00004550     058e          move    a14,@pan_status
         00004560 00000020- 
     627                    
     628 00004580     07ae          move    @WORLDTLX,a14,L         ; Get current X position
         00004590 00000000! 
     629 000045b0     078e          move    a14,@final_x,L          ; Save off for pan back
         000045c0 000000b0- 
     630 000045e0     078e          move    a14,@p1x,L              ; Set as the starting X point
         000045f0 000000f0- 
     631 00004610     07ae          move    @WORLDTLY,a14,L         ; Get current Y position
         00004620 00000000! 
     632 00004640     078e          move    a14,@final_y,L          ; Save off for pan back
         00004650 000000d0- 
     633 00004670     078e          move    a14,@p1y,L              ; Set as the starting Y point
         00004680 00000110- 
     634                    
     635 000046a0           vcstpan_again
     636 000046a0     09e8          movi    panning_points,a8       ; Get pointer to pan points table
         000046b0 00002890' 
     637                    
     638 000046d0           vcstp1on8_lp
     639 000046d0     970e          move    *a8+,a14,L              ; Get Ticks for the move
     640 000046e0     078e          move    a14,@ticks,L            ; Set ticks for this move
         000046f0 00000030- 
     641 00004710     970e          move    *a8+,a14,L              ; Get Target X position
     642 00004720     078e          move    a14,@p2x,L              ; Set Ending X position
         00004730 00000130- 
     643 00004750     2e0e          srl     16,a14                  ; Lop off fractional part
     644 00004760     058e          move    a14,@targ_x             ; Store it as the target X position
         00004770 00000090- 
     645 00004790     970e          move    *a8+,a14,L              ; Get Target Y position
     646 000047a0     078e          move    a14,@p2y,L              ; Set Ending Y position
         000047b0 00000150- 
     647 000047d0     2e0e          srl     16,a14                  ; Lop off fractional part
     648 000047e0     058e          move    a14,@targ_y             ; Store it as the target Y position
         000047f0 000000a0- 
     649 00004810     19ea          movk    15,a10                  ; Number of ticks for this move
     650 00004820     0d3f          callr   calc_dxdy               ; Calculate dx and dy
         00004830     ff75  
     651 00004840           vcstnext_move
     652 00004840     0d3f          callr   move_camera             ; Move the camera
         00004850     ff8f  
     653 00004860     0d5f          calla   BGND_UD1                ; Update the background
         00004870 00000000! 
     654 00004890                   SLEEPK  1                       ; Let it actually move
     655 000048d0                   PUSH    a0,a1,a2,a3,a4,a5,a6,a7,a8,a9
     656 000048f0     1823          movk    1,a3
     657 00004900     0d5f          calla   crowd_cheer             ; Make the crowd cheer
         00004910 00000000! 
     658 00004930                   PULL    a0,a1,a2,a3,a4,a5,a6,a7,a8,a9
     659 00004950     0d3f          callr   check_camera_position   ; Adjust dx and dy
         00004960     ff95  
     660                    
     661 00004970     07ae          move    @dx,a14,L               ; Get current dx
         00004980 00000050- 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   16

     662 000049a0     07a0          move    @dy,a0,L                ; Get current dy
         000049b0 00000070- 
     663 000049d0     540e          or      a0,a14                  ; Or 'em together
     664 000049e0     cbe5          jrnz    vcstnext_move           ; Done with this segment ? - br - no
     665                    
     666                            ; This is probably where I want to put up different lines of text
     667 000049f0     05ae          move    @pan_status,a14
         00004a00 00000020- 
     668 00004a20     cb1b          jrnz    vcsttext_is_up
     669                    
     670 00004a30                   SLEEPK  5
     671                    
     672 00004a70     182e          movk    1,a14
     673 00004a80     058e          move    a14,@pan_status
         00004a90 00000020- 
     674 00004ab0     05ae          move    @royal_rumble,a14
         00004ac0 00000000! 
     675 00004ae0     cb06          jrnz    vcstdo_8_on_2
     676 00004af0     0d5f          calla   is_8_on_1
         00004b00 00000000! 
     677 00004b20     c804          jrc     vcstdo_8_on_1
     678                    
     679 00004b30           vcstdo_3_on_1
     680                            ; Print 1vs3 congrats message - GAWD IS THIS UUUUGGGLY
     681 00004b30     57ce          clr     a14
     682 00004b40     c003          jruc    vcstpcx
     683 00004b50           vcstdo_8_on_2
     684                            ; Print 2vs8 congrats message - GAWD IS THIS UUUUGGGLY
     685 00004b50     184e          movk    2,a14
     686 00004b60     c001          jruc    vcstpcx
     687 00004b70           vcstdo_8_on_1
     688                            ; Print 1vs8 congrats message - GAWD IS THIS UUUUGGGLY
     689 00004b70     182e          movk    1,a14
     690 00004b80     0d3f  vcstpcx callr   print_congrats
         00004b90     00b0  
     691 00004ba0                   SLEEPK  2
     692 00004be0           vcsttext_is_up
     693                    
     694                    
     695 00004be0     07ae          move    @p2x,a14,L              ; Get Last End X position
         00004bf0 00000130- 
     696 00004c10     078e          move    a14,@p1x,L              ; Store as new Start X position
         00004c20 000000f0- 
     697 00004c40     07ae          move    @p2y,a14,L              ; Get Last End Y position
         00004c50 00000150- 
     698 00004c70     078e          move    a14,@p1y,L              ; Store as new Start Y position
         00004c80 00000110- 
     699 00004ca0     05ae          move    @pan_down,a14
         00004cb0 00000010- 
     700 00004cd0     cb06          jrnz    vcstpan_done
     701 00004ce0     870e          move    *a8,a14,L               ; Get next X target
     702 00004cf0     cb9d          jrnz    vcstp1on8_lp            ; Done ? - br = no
     703                    
     704 00004d00     05ae          move    @pan_down,a14
         00004d10 00000010- 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   17

     705 00004d30     ca96          jrz     vcstpan_again
     706                    
     707 00004d40           vcstpan_done
     708                    
     709 00004d40     09c0          movi    CLSMK3,a0
         00004d50     6000  
     710 00004d60     0d5f          calla   obj_del1c       ; Get rid of the text when we pan back down
         00004d70 00000000! 
     711                    
     712 00004d90     07ae          move    @final_x,a14,L          ; Get final X position
         00004da0 000000b0- 
     713 00004dc0     078e          move    a14,@p2x,L              ; Store it as new End Y postion
         00004dd0 00000130- 
     714 00004df0     2e0e          srl     16,a14                  ; Lop off fractional part
     715 00004e00     058e          move    a14,@targ_x             ; Store it as the target X position
         00004e10 00000090- 
     716 00004e30     07ae          move    @final_y,a14,L          ; Get final Y position
         00004e40 000000d0- 
     717 00004e60     078e          move    a14,@p2y,L              ; Store it as new End Y postion
         00004e70 00000150- 
     718 00004e90     2e0e          srl     16,a14                  ; Lop off fractional part
     719 00004ea0     058e          move    a14,@targ_y             ; Store it as the target Y position
         00004eb0 000000a0- 
     720                    
     721 00004ed0     09ce          movi    INIT_PAN_SPEED,a14
         00004ee0     0035  
     722 00004ef0     078e          move    a14,@ticks,L            ; Store ticks for this move
         00004f00 00000030- 
     723                    
     724 00004f20     0d3f          callr   calc_dxdy               ; Calculate dx and dy
         00004f30     ff05  
     725 00004f40           vcstnpb_move
     726 00004f40     0d3f          callr   move_camera             ; Move the camera
         00004f50     ff1f  
     727 00004f60     0d5f          calla   BGND_UD1                ; Update the background
         00004f70 00000000! 
     728 00004f90                   SLEEPK  1                       ; Let it actually move
     729 00004fd0                   PUSH    a0,a1,a2,a3,a4,a5,a6,a7,a8,a9
     730 00004ff0     1823          movk    1,a3
     731 00005000     0d5f          calla   crowd_cheer             ; Make the crowd cheer
         00005010 00000000! 
     732 00005030                   PULL    a0,a1,a2,a3,a4,a5,a6,a7,a8,a9
     733 00005050     0d3f          callr   check_camera_position   ; Adjust dx and dy
         00005060     ff25  
     734                    
     735 00005070     07ae          move    @dx,a14,L               ; Get current dx
         00005080 00000050- 
     736 000050a0     07a0          move    @dy,a0,L                ; Get current dy
         000050b0 00000070- 
     737 000050d0     540e          or      a0,a14                  ; Or 'em together
     738 000050e0     cbe5          jrnz    vcstnpb_move            ; Done with last segment ? - br = no
     739                    
     740 000050f0                   DIE
     741                    
     742 00005120            SUBRP  knockout_drones
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   18

     743 00005120     09e9          movi    process_ptrs,a9
         00005130 00000000! 
     744 00005150           zcbknext
     745 00005150     9728          move    *a9+,a8,L
     746 00005160     ca08          jrz     zcbkko_done
     747 00005170     b50e          move    *a8(PLYR_TYPE),a14
         00005180     05a0  
     748 00005190     cafb          jrz     zcbknext
     749 000051a0     09ce          movi    7fffh,a14
         000051b0     7fff  
     750 000051c0     b1c8          move    a14,*a8(PTIME)
         000051d0     0030  
     751 000051e0     c0f6          jruc    zcbknext
     752 000051f0           zcbkko_done
     753 000051f0     0960          rets
     754                    
     755 00005200            SUBRP  muqcc1v3s_tbl
     756 00005200 00006430'         .long   muqccongrat_1v8_1
     757 00005220 000064d0'         .long   muqccongrat_1v8_2
     758 00005240 00006570'         .long   muqccongrat_1v8_3
     759 00005260 000066b0'         .long   muqccongrat_1v8_5
     760 00005280 00006750'         .long   muqccongrat_1v8_6
     761 000052a0 00000000          .long   0
     762                    
     763 000052c0            SUBRP  muqcc1v8s_tbl
     764 000052c0 00006430'         .long   muqccongrat_1v8_1
     765 000052e0 000064d0'         .long   muqccongrat_1v8_2
     766 00005300 00006570'         .long   muqccongrat_1v8_3
     767 00005320 00006610'         .long   muqccongrat_1v8_4
     768 00005340 00006750'         .long   muqccongrat_1v8_6
     769 00005360 00000000          .long   0
     770                    
     771 00005380            SUBRP  muqcc2v8s_tbl
     772 00005380 00006430'         .long   muqccongrat_1v8_1
     773 000053a0 000064d0'         .long   muqccongrat_1v8_2
     774 000053c0 00006570'         .long   muqccongrat_1v8_3
     775 000053e0 00006750'         .long   muqccongrat_1v8_6
     776 00005400 00000000          .long   0
     777                    
     778 00005420            SUBRP  muqccongrats_setup_tbl
     779 00005420 00005200'         .long   muqcc1v3s_tbl
     780 00005440 000052c0'         .long   muqcc1v8s_tbl
     781 00005460 00005380'         .long   muqcc2v8s_tbl
     782                    
     783                    
     784 00005480            SUBRP  muqcc1v3_tbl
     785 00005480 00005c40'         .long   muqccongrat_1v8_1_str
     786 000054a0 000058b0'         .long   muqccongrat_1v3_2_str
     787 000054c0 000059f0'         .long   muqccongrat_1v3_3_str
     788 000054e0 00005b20'         .long   muqccongrat_1v3_4_str
     789 00005500 00006040'         .long   muqccongrat_1v8_5_str
     790                    
     791 00005520            SUBRP  muqcc1v8_tbl
     792 00005520 00005c40'         .long   muqccongrat_1v8_1_str
     793 00005540 00005ce0'         .long   muqccongrat_1v8_2_str
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   19

     794 00005560 00005e00'         .long   muqccongrat_1v8_3_str
     795 00005580 00005f30'         .long   muqccongrat_1v8_4_str
     796 000055a0 00006040'         .long   muqccongrat_1v8_5_str
     797                    
     798 000055c0            SUBRP  muqcc2v8_tbl
     799 000055c0 00005c40'         .long   muqccongrat_1v8_1_str
     800 000055e0 00006120'         .long   muqccongrat_2v8_2_str
     801 00005600 00006220'         .long   muqccongrat_2v8_3_str
     802 00005620 00006330'         .long   muqccongrat_2v8_4_str
     803                    
     804 00005640            SUBRP  muqccongrats_str_tbl
     805 00005640 00005480'         .long   muqcc1v3_tbl
     806 00005660 00005520'         .long   muqcc1v8_tbl
     807 00005680 000055c0'         .long   muqcc2v8_tbl
     808                    
     809 000056a0            SUBRP  print_congrats
     810 000056a0                   PUSH    a8,a9,a10,a11
     811 000056c0     24ae          sll     5,a14
     812 000056d0     4dc9          move    a14,a9
     813 000056e0     4dca          move    a14,a10
     814 000056f0     0b29          addi    muqccongrats_setup_tbl,a9
         00005700 00005420' 
     815 00005720     0b2a          addi    muqccongrats_str_tbl,a10
         00005730 00005640' 
     816 00005750     8729          move    *a9,a9,L
     817 00005760     874a          move    *a10,a10,L
     818 00005770           muqcprint_clp
     819 00005770     9728          move    *a9+,a8,L
     820 00005780     ca0f          jrz     muqcc_done
     821 00005790     974b          move    *a10+,a11,L
     822 000057a0     4d02          move    a8,a2
     823 000057b0     0d5f          calla   setup_message
         000057c0 00000000! 
     824 000057e0     09c4          movi    CLSMK3,a4
         000057f0     6000  
     825 00005800     0584          move    a4,@mess_objid
         00005810 00000000! 
     826 00005830     4d64          move    a11,a4
     827 00005840     0d5f          calla   print_string_C2
         00005850 00000000! 
     828 00005870     c0ef          jruc    muqcprint_clp
     829 00005880           muqcc_done
     830 00005880                   PULL    a8,a9,a10,a11
     831 000058a0     0960          rets
     832                    
     833 000058b0           muqccongrat_1v3_2_str
     834 000058b0       59          .string "YOU ARE THE INTERCONTINENTAL CHAMPION!",0
     835 000059f0                   .even
     836 000059f0           muqccongrat_1v3_3_str
     837 000059f0       49          .string "IT'S TIME TO SEEK A BIGGER CHALLENGE:",0
     838 00005b20                   .even
     839 00005b20           muqccongrat_1v3_4_str
     840 00005b20       43          .string "COMPETE FOR THE WORLD CHAMPIONSHIP!",0
     841 00005c40                   .even
     842                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:00 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   20

     843                    
     844 00005c40           muqccongrat_1v8_1_str
     845 00005c40       43          .string "CONGRATULATIONS!!!",0
     846 00005ce0                   .even
     847 00005ce0           muqccongrat_1v8_2_str
     848 00005ce0       59          .string "YOU ARE THE NEW WWF WORLD CHAMPION!",0
     849 00005e00                   .even
     850 00005e00           muqccongrat_1v8_3_str
     851 00005e00       59          .string "YOUR NAME WILL LIVE FOREVER AMONG THE",0
     852 00005f30                   .even
     853 00005f30           muqccongrat_1v8_4_str
     854 00005f30       47          .string "GREATEST WRESTLERS OF ALL TIME!!!",0
     855 00006040                   .even
     856 00006040           muqccongrat_1v8_5_str
     857 00006040       2e          .string "...THANK YOU FOR PLAYING...",0
     858 00006120                   .even
     859                    
     860                    
     861 00006120           muqccongrat_2v8_2_str
     862 00006120       59          .string "YOU ARE THE NEW WORLD WRESTLING",0
     863 00006220                   .even
     864 00006220           muqccongrat_2v8_3_str
     865 00006220       46          .string "FEDERATION TAG TEAM CHAMPIONS!!!",0
     866 00006330                   .even
     867 00006330           muqccongrat_2v8_4_str
     868 00006330       50          .string "PREPARE TO BATTLE EACH OTHER!!!",0
     869 00006430                   .even
     870                    
     871                    
     872 00006430           muqccongrat_1v8_1
     873 00006430                   JAM_STR wsf14_ascii,10,0,200,60,WSF_R_P,print_string_C2
     874 000064d0                   .even
     875 000064d0           muqccongrat_1v8_2
     876 000064d0                   JAM_STR ogmd10_ascii,10,0,200,100,SGMD8YEL,print_string_C2
     877 00006570                   .even
     878 00006570           muqccongrat_1v8_3
     879 00006570                   JAM_STR ogmd10_ascii,10,0,200,113,SGMD8YEL,print_string_C2
     880 00006610                   .even
     881 00006610           muqccongrat_1v8_4
     882 00006610                   JAM_STR ogmd10_ascii,10,0,200,126,SGMD8YEL,print_string_C2
     883 000066b0                   .even
     884 000066b0           muqccongrat_1v8_5
     885 000066b0                   JAM_STR ogmd10_ascii,10,0,200,152,SGMD8WHT,print_string_C2
     886 00006750                   .even
     887 00006750           muqccongrat_1v8_6
     888 00006750                   JAM_STR ogmd10_ascii,10,0,200,178,SGMD8BLU,print_string_C2
     889 000067f0                   .even
     890                    
     891                    
     892                    
     893                            .end

 No Errors,  No Warnings
