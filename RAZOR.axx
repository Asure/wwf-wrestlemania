
	.file	"razor.asm"
	.title	"Razor Ramon specific game code"
	.width	132
	.option	b,d,l,t
	.mnolist


	.include	"macros.h"
	.include	"jjxm.h"
	.include	"mproc.equ"		;Mproc equates
	.include	"display.equ"		;Display proc equates
	.include	"gsp.equ"		;Gsp asm equates
	.include	"sys.equ"
	.include	"game.equ"
	.include	"plyr.equ"
	.include	"anim.equ"
	.include	"audit.equ"
	.include	"sound.h"
	.include	"ring.equ"
	.include	"lifebar.h"
	.include	"damage.equ"



	.ref	change_anim1a,change_anim2a,do_taunt,bounce_off_ropes
	.ref	check_secret_moves,master_keep_attached,ck_ignore
	.ref	climb_turnbuckle,execute_walk,get_opp_plyrmode,mode_inair2
	.ref	process_ptrs,keep_attached,FIND_AND_KILL_ENDLESS
	.ref	change_anim1,JUMP_ROPES,PCNT
	.ref	DO_REVERSAL,DO_REVERSAL_MESS,CHECK_COMBO_GO
	.ref	ADD_IF_SILENT,CLIMB_ROPES,can_pin
	.ref	get_opp_process,round_award,set_raisearm_bit
	.ref	BONUS_MESS,ck_teammate_pin,raisearm_check
	.ref	BLOCK_WOOSH,drone_change_back
	.ref	blocking_off,std_taunt,std_walk_fast
	.ref	hyper_speed_on
	.ref	in_finish_move
	.ref	p1rounds,p2rounds
	.if NUM_RAZOR_FINISHES
	.ref	rzr_finish1_move
	.if NUM_RAZOR_FINISHES > 1
	.ref	rzr_finish2_move
	.endif
	.endif


	.ref	rzr_run2_anim

	.ref	start_run_anim

	.ref	rzr_3_head_hold2_anim
	.ref	rzr_3_head_hold_anim

	.ref	rzr_stand2_anim,rzr_stand8_anim
	.ref	rzr_stand4_anim,rzr_stand6_anim
	.ref	rzr_torso2_anim,rzr_torso8_anim
	.ref	rzr_torso4_anim,rzr_torso6_anim

	.ref	rzr_2_to_4_turn_anim,rzr_8_to_6_turn_anim	;stand
	.ref	rzr_4_to_2_turn_anim,rzr_6_to_8_turn_anim
	.ref	rzr_4_to_6_turn_anim,rzr_6_to_4_turn_anim
	.ref	rzr_2_to_8_turn_anim,rzr_8_to_2_turn_anim
	.ref	rzr_4_to_8_turn_anim,rzr_6_to_2_turn_anim
	.ref	rzr_2_to_6_turn_anim,rzr_8_to_4_turn_anim

	.ref	rzr_2_to_4_turn2_anim,rzr_8_to_6_turn2_anim	;torso
	.ref	rzr_4_to_2_turn2_anim,rzr_6_to_8_turn2_anim
	.ref	rzr_4_to_6_turn2_anim,rzr_6_to_4_turn2_anim
	.ref	rzr_2_to_8_turn2_anim,rzr_8_to_2_turn2_anim
	.ref	rzr_4_to_8_turn2_anim,rzr_6_to_2_turn2_anim
	.ref	rzr_2_to_6_turn2_anim,rzr_8_to_4_turn2_anim

	.ref	rzr_walk1_f2_anim,rzr_walk2_f2_anim,rzr_walk4_f2_anim
	.ref	rzr_walk5_f2_anim,rzr_walk6_f2_anim,rzr_walk8_f2_anim

	.ref	rzr_walk1_f4_anim,rzr_walk2_f4_anim,rzr_walk4_f4_anim
	.ref	rzr_3_head_held_stand_anim
	.ref	rzr_walk5_f4_anim,rzr_walk6_f4_anim,rzr_walk8_f4_anim

	.ref	rzr_2_punch_anim,rzr_4_punch_anim
	.ref	rzr_2_pin_anim,rzr_4_pin_anim
	.ref	rzr_4_uprcut_anim
	.ref	rzr_2_butt_anim,rzr_4_butt_anim
	.ref	rzr_2_kick_anim,rzr_4_kick_anim
	.ref	rzr_2_super_kick_anim,rzr_4_super_kick_anim
	.ref	rzr_2_knee_anim,rzr_4_knee_anim
	.ref	rzr_flying_kick_anim
	.ref	rzr_2_ground_punch_anim,rzr_4_ground_punch_anim
	.ref	rzr_2_stomp_anim,rzr_4_stomp_anim
	.ref	rzr_2_grabfling_anim,rzr_4_grabfling_anim
	.ref	rzr_2_hair_pickup_anim,rzr_4_hair_pickup_anim

	.ref	rzr_4_push_anim
	.ref	rzr_4_bigboot_anim
	.ref	rzr_climb_down_anim,rzr_climb_up_anim

	.ref	rzr_2_block_anim,rzr_4_block_anim
	.ref	rzr_2_hiptoss_anim,rzr_4_hiptoss_anim
	.ref	rzr_2_hiptoss2_anim,rzr_4_hiptoss2_anim
	.ref	rzr_flying_elbow_anim
	.ref	rzr_3_uslash_anim,rzr_3_dslash_anim
	.ref	rzr_dslashes_to_head_anim,rzr_dslash_to_head_anim
	.ref	rzr_uslashes_to_head_anim,rzr_uslash_to_head_anim
	.ref	rzr_rugshake_anim
	.ref	rzr_tbukl_elbow_anim,rzr_3_pile_driver_anim
	.ref	rzr_repeat_slash_anim
	.ref	rzr_4_knee_fall_anim

	.ref	rzr_combo_punch_anim,rzr_combo_kick_anim

	.ref	rzr_2_raise_arm_anim,rzr_4_raise_arm_anim

	.ref	rzr_rugshake2_anim
	.ref	rzr_fall_back_anim,rzr_razors_edge_anim




razor_secret_moves

	.long	tvnicharge_flying_kick	;must have this one
	.long	tvnineck_grab
	.long	tvnigrab_fling
	.long	tvnihip_toss
	.long	tvnigrab_fling2
	.long	tvnihip_toss2
	.long	tvnidown_slash
	.long	0


 SUBR	rzr_smove_table
	.long	rzr_charge_slashes
	.long	rzr_hdhold_pile
	.long	rzr_hdhold_combo1
	.long	rzr_hdhold_edge
	.long	rzr_hdhold_rug
	.long	rzr_grab_toss_air
	.long	rzr_hdhold_combo2
	.long	std_walk_fast
	.long	std_taunt
	.long	rzr_sliding_rug

	.if NUM_RAZOR_FINISHES
	.long	rzr_finish_move1
	.endif
	.if NUM_RAZOR_FINISHES > 1
	.long	rzr_finish_move2
	.endif
	.long	0



tvnicharge_flying_kick
	move	*a13(BUT_VAL_UP),a0
	btst	PLAYER_SKICK_BIT,a0
	jrz	tvnino_kick

	move	*a13(PLYRNUM),a0
	.ref	get_powerk_dtime
	calla	get_powerk_dtime
	cmpi	85,a0			;> min?
	jrlt	tvnino_kick

	callr	tvniscrt_kick
	setc
	rets

tvnino_kick
	clrc
	rets

tvniscrt_kick

	move	*a13(PLYRMODE),a0
	cmpi	MODE_HEADHELD,a0
	jrz	tvniout
	cmpi	MODE_HEADHOLD,a0
	jrz	tvniout
	move	*a13(GETUP_TIME),a0
	jrnz	tvniout
	cmpi	MODE_ONGROUND,a0
	jrz	tvniout
	cmpi	MODE_DEAD,a0
	jrz	tvniout

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	tvniout

	.ref	ck_ignore
	calla	ck_ignore
	jrc	tvniout

	calla	get_opp_plyrmode
	cmpi	MODE_ONGROUND,a0
	jrz	tvniout
	cmpi	MODE_DEAD,a0
	jrz	tvniout

	SETMODE	INAIR

	movk	1,a0			;Ensure leap at
	move	a0,*a8(OBJ_XVEL),L

	movi	rzr_flying_kick_anim,a0
	calla	change_anim1a

	WRSND	W_RAZOR,FLYKICK_T1,FLYKICK_T2

	rets


tvnineck_grab
	.word	B_SPUNCH,		J_REAL_LR | J_TOWARD | J_AWAY | J_UP
	.word	J_TOWARD,		J_REAL_LR
	.word	J_TOWARD,		J_REAL_LR
	.word	8000h | 30		;max
	.long	tvniscrt_neck

tvniscrt_neck
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	tvniout

	calla	get_opp_plyrmode
	cmpi	MODE_ONGROUND,a0
	jrz	tvniout
	cmpi	MODE_DEAD,a0
	jrz	tvniout
	cmpi	MODE_HEADHELD,a0
	jrz	tvniout

	move	*a13(LAST_HEADHOLD),a14,L
	move	@PCNT,a0,L
	sub	a14,a0
	cmpi	2*60,a0
	jrge	tvniok2

	.ref	rzr_3_fake_hold_anim
	movi	rzr_3_fake_hold_anim,a0
	calla	change_anim1a
	rets

tvniok2
	move	*a13(CLOSEST_XDIST),a1
	cmpi	85,a1
	jrgt	tvnistd_grab

	movi	rzr_3_head_hold2_anim,a0
	calla	change_anim1a
	rets

tvnistd_grab
	movi	rzr_3_head_hold_anim,a0
	calla	change_anim1a
	rets

tvnidown_slash
	.word	B_PUNCH,		J_ALL
	.word	J_TOWARD,		J_REAL_LR
	.word	J_DOWN|J_TOWARD,	J_REAL_LR
	.word	J_DOWN,			J_REAL_LR
	.word	8000h | 50		;max
	.long	tvnidslash

tvnidslash
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	tvniout

	;check opp mode
	calla	get_opp_plyrmode
	cmpi	MODE_DEAD,a0
	jreq	tvniout

	;don't do it unless you're in mode_normal, running, or headhold
	move	*a13(PLYRMODE),a0
	cmpi	MODE_NORMAL,a0
	jreq	tvnislash
	cmpi	MODE_RUNNING,a0
	jreq	tvnirunslash
	cmpi	MODE_HEADHOLD,a0
	jreq	tvnislash
	jruc	tvniz

tvnirunslash
	;don't interrupt an OCRUN
	move	*a13(GETUP_TIME),a14
	jrnz	tvniz
tvnislash
	WRSND	W_RAZOR,KICK_T2
	movi	rzr_3_dslash_anim,a0
	calla	change_anim1a
tvniz	rets


tvnigrab_fling2
	.word	B_SPUNCH | J_AWAY,	J_REAL_LR | J_UP | J_DOWN
	.word	8000h | 10		;max
	.long	tvniscrt_grabfling2

tvnihip_toss2
	.word	B_PUNCH | J_AWAY,	J_REAL_LR | J_UP | J_DOWN
	.word	8000h | 10		;max
	.long	tvniscrt_grabfling2

tvniscrt_grabfling2
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	tvniout

	calla	get_opp_plyrmode
	cmpi	MODE_BOUNCING,a0
	jrz	tvniyes
	cmpi	MODE_RUNNING,a0
	jrz	tvniyes
	rets

tvnigrab_fling

	.word	B_SPUNCH,		J_ALL
	.word	J_AWAY,		J_REAL_LR
	.word	J_AWAY,		J_REAL_LR
	.word	8000h | 32		;max
	.long	tvniscrt_grabfling

tvniscrt_grabfling


	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	tvniout

	calla	get_opp_plyrmode
	cmpi	MODE_BOUNCING,a0
	jrz	tvniyes
	cmpi	MODE_RUNNING,a0
	jrnz	tvninope
tvniyes
	FACE24	rzr,hiptoss_anim
	calla	change_anim1a

	WRSND	W_RAZOR,GRABFLING_T1,PUNCH_T2
	rets

tvninope
	calla	get_opp_plyrmode
	cmpi	MODE_HEADHELD,a0
	jrz	tvniout
	cmpi	MODE_ONGROUND,a0
	jrz	tvniout
	cmpi	MODE_DEAD,a0
	jrz	tvniout


	FACE24	rzr,grabfling_anim
	calla	change_anim1a

	WRSND	W_RAZOR,GRABFLING_T1,PUNCH_T2
tvniout	rets


tvnihip_toss

	.word	B_PUNCH,		J_ALL
	.word	J_AWAY,		J_REAL_LR
	.word	J_AWAY,		J_REAL_LR
	.word	8000h | 32		;max
	.long	tvniscrt_hiptoss


tvniscrt_hiptoss
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	tvniout

	calla	get_opp_plyrmode
	cmpi	MODE_ONGROUND,a0
	jrz	tvniout
	cmpi	MODE_DEAD,a0
	jrz	tvniout
	cmpi	MODE_HEADHELD,a0
	jrz	tvniout
	cmpi	MODE_INAIR,a0
	jrz	tvnidoit
	cmpi	MODE_INAIR2,a0
	jrz	tvnidoit

	move	*a13(CLOSEST_DIST),a0
	cmpi	70h,a0
	jrgt	tvniout

tvnidoit
	FACE24	rzr,hiptoss_anim
	calla	change_anim1a

	WRSND	W_RAZOR,GRABFLING_T1,PUNCH_T2
	rets

	.if NUM_RAZOR_FINISHES
 SUBRP	rzr_finish_move1

faylTIMEOUT	.equ	TSEC

faylend_wait
	SLEEP		TSEC/4
	move		@p1rounds,a0			; Get player 1 rounds
	move		@p2rounds,a1			; Get player 2 rounds
	or		a1,a0				; Put em together
	cmpi		2,a0				; Anybody got 2?
	jrlt		faylend_wait			; br = no

faylreset
	clr		a11
	move		a11,@in_finish_move
	SLEEPK		1
	WAITSWITCH_DWN	J_UP,0,faylreset
	movi		faylTIMEOUT,a11
	move		a11,@in_finish_move
	WAITSWITCH_DWN	J_DOWN,0,faylreset
	WAITSWITCH_DWN	J_TOWARD,J_DOWN|J_UP,faylreset
	WAITSWITCH_DWN	J_TOWARD,J_DOWN|J_UP,faylreset
	WAITSWITCH_DWN	B_PUNCH,J_ALL,faylreset

	movi		rzr_finish1_move,a0
	move		a0,*a8(SPECIAL_MOVE_ADDR),L
	DIE
	.endif
	

	.if NUM_RAZOR_FINISHES > 1
 SUBRP	rzr_finish_move2

bogoTIMEOUT	.equ	TSEC

bogoend_wait
	SLEEP		TSEC/4
	move		@p1rounds,a0			; Get player 1 rounds
	move		@p2rounds,a1			; Get player 2 rounds
	or		a1,a0				; Put em together
	cmpi		2,a0				; Anybody got 2?
	jrlt		bogoend_wait			; br = no

bogoreset
	clr		a11
	move		a11,@in_finish_move
	SLEEPK		1
	WAITSWITCH_DWN	J_UP,0,bogoreset
	movi		bogoTIMEOUT,a11
	move		a11,@in_finish_move
	WAITSWITCH_DWN	J_UP,0,bogoreset
	WAITSWITCH_DWN	J_RIGHT,J_UP,bogoreset
	WAITSWITCH_DWN	J_RIGHT,J_UP,bogoreset
	WAITSWITCH_DWN	B_SPUNCH,J_ALL,bogoreset

	movi		rzr_finish2_move,a0
	move		a0,*a8(SPECIAL_MOVE_ADDR),L
	DIE
	.endif



xpkgCHARGE_TIME	.equ	SM_USRW1

rzr_charge_slashes

xpkgstart_over
	clr	a14
	move	a14,*a13(xpkgCHARGE_TIME),W
xpkgloop1
	SLEEPK	1

	move	*a13(xpkgCHARGE_TIME),a14,W
	inc	a14
	move	a14,*a13(xpkgCHARGE_TIME),W

	move	*a8(BUT_VAL_CUR),a0
	btst	PLAYER_PUNCH_BIT,a0
	jrz	xpkgp1

	jruc	xpkgloop1

xpkgp1

	move	*a13(xpkgCHARGE_TIME),a14
	cmpi	100,a14
	jrlt	xpkgstart_over

	move	*a8(ANIMODE),a14
	btst	MODE_UNINT_BIT,a14
	jrnz	xpkgstart_over

	move	*a8(GETUP_TIME),a0
	jrnz	xpkgstart_over

	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHELD,a0
	jrz	xpkgstart_over
	cmpi	MODE_HEADHOLD,a0
	jrz	xpkgstart_over
	cmpi	MODE_ONGROUND,a0
	jrz	xpkgstart_over
	cmpi	MODE_DEAD,a0
	jrz	xpkgstart_over

	movi	rzr_repeat_slash_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L
	WRSND	W_RAZOR,KICK_T2

	jruc	xpkgstart_over


rzr_sliding_rug

hnvdTIMEOUT	.equ	60

hnvdlp0
	SLEEPK	1
hnvdlp
	clr	a11

	WAITSWITCH_DWN	J_TOWARD,0,hnvdlp

	movi	hnvdTIMEOUT,a11

	WAITSWITCH_DWN	J_TOWARD,0,hnvdlp
	WAITSWITCH_DWN	B_KICK,J_ALL,hnvdlp

	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHELD,a0
	jrz	hnvdlp0
	cmpi	MODE_HEADHOLD,a0
	jrz	hnvdlp0
	cmpi	MODE_ONGROUND,a0
	jrz	hnvdlp0
	cmpi	MODE_DEAD,a0
	jrz	hnvdlp0

	move	*a8(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	hnvdlp0

	move	*a8(GETUP_TIME),a0
	jrnz	hnvdlp0


	SWAP	a8,a13
	calla	get_opp_plyrmode
	SWAP	a8,a13
	cmpi	MODE_DEAD,a0
	jrz	hnvdlp

	SWAP	a8,a13
	calla	ck_ignore
	jrnc	hnvdnorm
	SWAP	a8,a13
	jruc 	hnvdlp
hnvdnorm	
	SWAP	a8,a13

	WRSND	W_RAZOR,GRABHOLD_T1,GRABHOLD_T2
	.ref	rzr_sliding_rug_anim
	movi	rzr_sliding_rug_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	SLEEPK	20

	jruc	hnvdlp

rzr_hdhold_edge

iembTIMEOUT	.equ	60

iemblp0
	SLEEPK	1
iemblp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	iembcont
	cmpi	MODE_HEADHELD,a0
	jrnz	iemblp0

iembcont
	clr	a11

	WAITSWITCH_DWN	J_TOWARD,0,iemblp

	movi	iembTIMEOUT,a11

	WAITSWITCH_DWN	J_TOWARD,0,iemblp
	WAITSWITCH_DWN	B_SPUNCH,J_ALL,iemblp
	
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	iembslam
	cmpi	MODE_HEADHELD,a0
	jrnz	iemblp0
	move	*a8(I_WILL_DIE),A14
	jrnz	iemblp0

	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	iemblp0				;ignore

	calla	DO_REVERSAL
	calla	DO_REVERSAL_MESS

	;target WHOHITME -- don't hit anyone else
	SMRTTGT	a8,WHOHITME

	;immobilize WHOHITME
	move	*a8(WHOHITME),a0,L
	jruc	iembis_reversal

iembslam
	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	iemblp0				;ignore

	movi	33,a10
	CREATE	MESSAGE_PID,BONUS_MESS

	;target WHOIHIT -- don't hit anyone else
	SMRTTGT	a8,WHOIHIT

	;immobilize WHOIHIT
	move	*a8(WHOIHIT),a0,L

iembis_reversal
	movk	15,a14
	move	a14,*a0(IMMOBILIZE_TIME)

	CALLA	FIND_AND_KILL_ENDLESS

	movi	rzr_razors_edge_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L
	WRSND	W_RAZOR,GRABHOLD_T1,GRABHOLD_T2

	SLEEPK	20

	jruc	iemblp

rzr_hdhold_pile

lgcbTIMEOUT	.equ	60

lgcblp0
	SLEEPK	1
lgcblp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	lgcbcont
	cmpi	MODE_HEADHELD,a0
	jrnz	lgcblp0

lgcbcont
	clr	a11

	WAITSWITCH_DWN	J_DOWN,0,lgcblp

	movi	lgcbTIMEOUT,a11

	WAITSWITCH_DWN	J_DOWN,0,lgcblp
	WAITSWITCH_DWN	B_SKICK,J_ALL,lgcblp
	
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	lgcbslam
	cmpi	MODE_HEADHELD,a0
	jrnz	lgcblp0
	move	*a8(I_WILL_DIE),A14
	jrnz	lgcblp0

	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	lgcblp0				;ignore

	calla	DO_REVERSAL
	calla	DO_REVERSAL_MESS

	;target WHOHITME -- don't hit anyone else
	SMRTTGT	a8,WHOHITME

	;immobilize WHOHITME
	move	*a8(WHOHITME),a0,L
	jruc	lgcbis_reversal

lgcbslam
	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	lgcblp0				;ignore

	movk	7,a10
	CREATE	MESSAGE_PID,BONUS_MESS

	;target WHOIHIT -- don't hit anyone else
	SMRTTGT	a8,WHOIHIT

	;immobilize WHOIHIT
	move	*a8(WHOIHIT),a0,L

lgcbis_reversal
	movk	15,a14
	move	a14,*a0(IMMOBILIZE_TIME)

	CALLA	FIND_AND_KILL_ENDLESS
	movi	rzr_3_pile_driver_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L
	WRSND	W_RAZOR,GRABHOLD_T1,GRABHOLD_T2

	SLEEPK	20

	jruc	lgcblp

rzr_hdhold_rug

pfnsTIMEOUT	.equ	60

pfnslp0
	SLEEPK	1
pfnslp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	pfnscont
	cmpi	MODE_HEADHELD,a0
	jrnz	pfnslp0

pfnscont
	clr	a11

	WAITSWITCH_DWN	J_DOWN,0,pfnslp

	movi	pfnsTIMEOUT,a11

	WAITSWITCH_DWN	J_DOWN,0,pfnslp
	WAITSWITCH_DWN	B_KICK,J_ALL,pfnslp
	
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	pfnsslam
	cmpi	MODE_HEADHELD,a0
	jrnz	pfnslp0
	move	*a8(I_WILL_DIE),A14
	jrnz	pfnslp0

	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	pfnslp0				;ignore

	calla	DO_REVERSAL
	calla	DO_REVERSAL_MESS

	;target WHOHITME -- don't hit anyone else
	SMRTTGT	a8,WHOHITME

	;immobilize WHOHITME
	move	*a8(WHOHITME),a0,L
	jruc	pfnsis_reversal

pfnsslam
	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	pfnslp0				;ignore

	movk	6,a10
	CREATE	MESSAGE_PID,BONUS_MESS

	;target WHOIHIT -- don't hit anyone else
	SMRTTGT	a8,WHOIHIT

	;immobilize WHOIHIT
	move	*a8(WHOIHIT),a0,L

pfnsis_reversal
	movk	15,a14
	move	a14,*a0(IMMOBILIZE_TIME)

	CALLA	FIND_AND_KILL_ENDLESS

	movi	rzr_rugshake2_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	SLEEPK	20

	jruc	pfnslp

rzr_hdhold_combo1

xqfrTIMEOUT	.equ	60

xqfrlp0
	SLEEPK	1
xqfrlp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrnz	xqfrlp0
	calla	CHECK_COMBO_GO
	jrlt	xqfrlp0


	clr	a11

	WAITSWITCH_DWN	J_TOWARD,0,xqfrlp

	movi	xqfrTIMEOUT,a11

	WAITSWITCH_DWN	J_TOWARD,0,xqfrlp
	WAITSWITCH_DWN	B_SPUNCH,J_ALL,xqfrlp

	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	xqfrslam
	cmpi	MODE_HEADHELD,a0
	jrnz	xqfrlp0

xqfrslam
	CALLA	FIND_AND_KILL_ENDLESS
	movi	rzr_combo_punch_anim,a14
 	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	SLEEPK	20

	jruc	xqfrlp


rzr_hdhold_combo2

zkvmTIMEOUT	.equ	60

zkvmlp0
	SLEEPK	1
zkvmlp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrnz	zkvmlp0
	calla	CHECK_COMBO_GO
	jrlt	zkvmlp0

	clr	a11

	WAITSWITCH_DWN	J_TOWARD,0,zkvmlp

	movi	zkvmTIMEOUT,a11

	WAITSWITCH_DWN	J_TOWARD,0,zkvmlp
	WAITSWITCH_DWN	B_KICK,J_ALL,zkvmlp

	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	zkvmslam
	cmpi	MODE_HEADHELD,a0
	jrnz	zkvmlp0

zkvmslam
	CALLA	FIND_AND_KILL_ENDLESS
	movi	rzr_combo_kick_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	SLEEPK	20

	jruc	zkvmlp

rzr_grab_toss_air

trjhTIMEOUT	.equ	40

trjhlp0
	SLEEPK	1
trjhlp
	clr	a11

	WAITSWITCH_DWN	J_AWAY,0,trjhlp

	movi	trjhTIMEOUT,a11

	WAITSWITCH_DWN	J_AWAY,0,trjhlp
	WAITSWITCH_DWN	B_PUNCH,J_ALL,trjhlp

	move	*a8(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	trjhlp

	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jreq	trjhlp0

	SWAP	a8,a13
	calla	get_opp_plyrmode
	SWAP	a8,a13
	cmpi	MODE_ONGROUND,a0
	jrz	trjhlp
	cmpi	MODE_DEAD,a0
	jrz	trjhlp
	cmpi	MODE_INAIR,a0
	jrz	trjhdoit2
	cmpi	MODE_INAIR2,a0
	jrz	trjhdoit2

	CALLA	FIND_AND_KILL_ENDLESS
	move	*a8(CLOSEST_NUM),a0
	X32	a0
	addi	process_ptrs,a0
	move	*a0,a0,L
	move	*a0(ATTACK_TYPE),a0
	cmpi	AT_LEAPING,a0
	jrz	trjhdoit2

	move	*a8(CLOSEST_DIST),a0
	cmpi	68h,a0
	jrgt	trjhlp

	FACE24	rzr,hiptoss_anim
	move	a0,*a8(SPECIAL_MOVE_ADDR),L

	WRSND	W_RAZOR,GRABFLING_T1,PUNCH_T2

	SLEEPK	20
	jruc	trjhlp

trjhdoit2
	FACE24	rzr,hiptoss2_anim
	move	a0,*a8(SPECIAL_MOVE_ADDR),L

	WRSND	W_RAZOR,GRABFLING_T1,PUNCH_T2

	SLEEPK	20

	jruc	trjhlp



 SUBR	razor_ani_init

	move	*a13(FACING_DIR),a0
	btst	PLAYER_RIGHT_BIT,a0
	jrnz	hldtp1
	movi	rzr_stand4_anim,a0
	calla	change_anim1a

	movi	rzr_torso4_anim,a0
	calla	change_anim2a

	PUSH	a10
	move	a13,a10
	CREATE	TAUNT_PID,do_taunt
	PULL	a10

	rets

hldtp1
	movi	rzr_stand2_anim,a0
	calla	change_anim1a

	movi	rzr_torso2_anim,a0
	calla	change_anim2a

	rets



 SUBR	move_razor


	movi	razor_secret_moves,a11
	calla	check_secret_moves

	move	*a13(PLYRMODE),a0
	sll	5,a0			;x 32
	addi	oprcmode_table,a0
	move	*a0,a0,L
	call	a0
	rets

oprcmode_table
	.long	mode_normal		;0
	.long	mode_running		;1
	.long	mode_inair		;2
	.long	mode_attached		;3
	.long	mode_onground		;4
	.long	mode_bouncing		;5
	.long	mode_onturnbkl		;6
	.long	mode_block		;7
	.long	mode_dizzy		;8
	REFLONG	mode_dead		;9
	.long	mode_oppoverhead	;10
	.long	mode_climbturnbkl	;11
	.long	mode_waitanim		;12
	.long	mode_grapple		;13
	.long	mode_master		;14
	.long	mode_slave		;15
	.long	mode_headhold		;16
	.long	mode_puppet2		;17
	.long	mode_normal	;18
	.long	mode_headheld		;19
	REFLONG	mode_puppet		;20
	.long	mode_inair2		;21
	.long	mode_normal	;22
	.long	mode_normal	;23
	.long	mode_chokehold		;24
	REFLONG	mode_choking		;25


mode_normal	;0

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	liadno_interrupt

	move	*a13(I_WILL_DIE),a0
	jrz	liadnope
	move	*a13(IMMOBILIZE_TIME),a0
	jrnz	liadnope
	movi	rzr_fall_back_anim,a0
	calla	change_anim1a

	movi	-10,a0
	move	*a13(PLYRNUM),a1
	calla	adjust_health

	SETMODE	DEAD

	clr	a0
	move	a0,*a13(I_WILL_DIE)

	rets

liadnope

	calla	get_opp_plyrmode
	cmpi	MODE_DEAD,a0
	jrne	liadopp_not_dead

	;if closest is a zombie, skip pin section.
	calla	get_opp_process
	move	*a0(STATUS_FLAGS),a14
	btst	B_ZOMBIE,a14
	jrnz	liadopp_not_dead
	
	;all opponents are dead.  Check for pins/raisearms

	;if we're attached to someone, don't interrupt it.
	move	*a13(ATTACH_PROC),a1,L
	jrz	liadno_attch
	move	*a1(ATTACH_PROC),a2,L
	cmp	a2,a13
	jreq	liadno_pin_yet
liadno_attch

	;if a teammate has pinned, raise yer arm.
	calla	ck_teammate_pin	
	jrc	liadraisearm

	;nobody has pinned.  if we're outside or all our opponents are
	; outside, do a raisearm.
	calla	raisearm_check
	jrc	liadraisearm

	;we're inside with a pinnable opponent.  any button pins.
	move	*a13(BUT_VAL_CUR),a0
	jrz	liadno_pin_yet

	;we have a press -- make sure opponent is on the ground
	calla	can_pin
	jrnc	liadopp_notgnd

	;opponent is on the ground.  pin him.
	FACE24	rzr,pin_anim
	calla	change_anim1a

	;set the 'I did a pin' flag.
	move	*a13(STATUS_FLAGS),a14
	ori	M_DID_PIN,a14
	move	a14,*a13(STATUS_FLAGS)

	;if we're a temp drone for auto-pin purposes, turn back into
	; a normal player here.
	calla	drone_change_back

	rets

liadraisearm
	FACE24	rzr,raise_arm_anim
	calla	change_anim1a
	calla	set_raisearm_bit

	;if we're a temp drone for auto-pin purposes, turn back into
	; a normal player here.
	calla	drone_change_back

	rets

liadtoo_far_to_pin
liadopp_notgnd
liadopp_not_dead
liadno_pin_yet

	move	*a13(IMMOBILIZE_TIME),a0
	jrnz	liadimmobilized

	move	*a13(BUT_VAL_CUR),a0
	btst	PLAYER_BLOCK_BIT,a0	;maybe have to action tables?
	jrz	liadnblk			;1 for down transitions
	callr	liadblock			;& 1 for current buttons
	jrc	liadnblk
	clr	a0
	move	a0,*a13(ATTACK_TYPE)
	rets
liadnblk
	move	*a13(BUT_VAL_CUR),a0
	andi	011111b,a0
	cmpi	PLAYER_PUNCH_VAL|PLAYER_KICK_VAL,a0
	jrz	liadpunchkick

	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	X32	a0
	addi	liadaction_table,a0
	move	*a0,a0,L
	call	a0

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	liadno_interrupt


	move	*a13(STICK_VAL_CUR),a0
	move	a0,*a13(MOVE_DIR)
	calla	climb_turnbuckle
	jrnc	liadno_climb
	move	*a13(WRESTLERNUM),A5
	MOVI	CLIMB_ROPES,A2
	MOVI	1000,A0
	CALLA	ADD_IF_SILENT
	rets

liadimmobilized
	clr	a14
	move	a14,*a13(MOVE_DIR)
liadno_climb
	calla	execute_walk

liadno_interrupt
	rets

liadaction_table
	.long	liadz,liadpunch,liadblock,liadblock			;0-3
	.long	liadsuper_punch,liadsuper_punch,liadblock,liadblock	;4-7
	.long	liadkick,liadpunchkick,liadblock,liadblock		;8-11
	.long	liadsuper_punch,liadpunchkick,liadblock,liadblock	;12-15
	.long	liadsuper_kick,liadsuper_kick,liadblock,liadblock	;16-19
	.long	liadgraboh,liadgraboh,liadblock,liadblock		;20-23
	.long	liadsuper_kick,liadpunchkick,liadblock,liadblock	;24-27
	.long	liadgraboh,liadgraboh,liadblock,liadblock		;28-31


liadz
	rets


liadpunch		;1

	JJXM_INIT
	JJXM	NORMAL,		 44, 45,liadpunch_hdbutt,liadpunch_punch
	JJXM	DIZZY,		 44, 45,liadpunch_hdbutt,liadpunch_punch
	JJXM	BLOCK,		 44, 45,liadpunch_hdbutt,liadpunch_punch
	JJXM	ONGROUND,	160,140,liadpunch_lbdrop,liadpunch_punch
	JJXM	RUNNING, 	 44, 45,liadpunch_hdbutt,liadpunch_punch
	JJXM	BOUNCING,	 44, 45,liadpunch_hdbutt,liadpunch_punch
	JJXM	ONTURNBKL,		liadpunch_punch
	JJXM	CLIMBTURNBKL,		liadpunch_punch
	JJXM	INAIR,		 44, 45,liadpunch_hdbutt,liadpunch_punch
	JJXM	ATTACHED,	 44, 45,liadpunch_hdbutt,liadpunch_punch
	JJXM	DEAD,		160,140,liadpunch_lbdrop,liadpunch_punch
	JJXM	OPPOVERHEAD,	 44, 45,liadpunch_hdbutt,liadpunch_punch
	JJXM	WAITANIM,	 44, 45,liadpunch_hdbutt,liadpunch_punch
	JJXM	GRAPPLE,	 44, 45,liadpunch_hdbutt,liadpunch_punch
	JJXM	MASTER,		 44, 45,liadpunch_hdbutt,liadpunch_punch
	JJXM	SLAVE,		 44, 45,liadpunch_hdbutt,liadpunch_punch
	JJXM	HEADHOLD,	 44, 45,liadpunch_hdbutt,liadpunch_punch
	JJXM	HEADHELD,	 44, 45,liadpunch_hdbutt,liadpunch_punch
	JJXM	CHOKEHOLD,	 44, 45,liadpunch_hdbutt,liadpunch_punch
	JJXM	PUPPET,		 44, 45,liadpunch_hdbutt,liadpunch_punch
	JJXM	PUPPET2,	 44, 45,liadpunch_hdbutt,liadpunch_punch
	JJXM	INAIR2,		 44, 45,liadpunch_hdbutt,liadpunch_punch
	JJXM_END

liadpunch_punch
std_punch

	FACE24	rzr,punch_anim
	calla	change_anim1a

	WRSND	W_RAZOR,PUNCH_T1,PUNCH_T2

	rets

liadpunch_hdbutt

	FACE24	rzr,butt_anim
	calla	change_anim1a

	WRSND	W_RAZOR,HDBUTT_T1,HDBUTT_T2
	rets

liadpunch_lbdrop

	FACE24	rzr,ground_punch_anim
	calla	change_anim1a

	WRSND	W_RAZOR,LBOWDROP_T1,LBOWDROP_T2
	rets


liadblock		;2

std_block
	move	@blocking_off,a0
	jrnz	liadno_blocking

	RND_AWARD	a13,BLOCKS_AWD

	FACE24	rzr,block_anim
	calla	change_anim1a

	calla	BLOCK_WOOSH

	clr	a0
	move	a0,*a13(BLOCK_TIME)
	clrc
	rets

liadno_blocking
	setc
	rets


liadsuper_punch	;4
liadgraboh

	JJXM_INIT
	JJXM	NORMAL,		 85, 45,liadspunch_close,liadspunch_far
	JJXM	DIZZY,		 85, 45,liadspunch_close,liadspunch_far
	JJXM	BLOCK,		 85, 45,liadspunch_close,liadspunch_far
	JJXM	ONGROUND,	160,140,liadspunch_lbowdrop,std_punch
	JJXM	DEAD,		160,140,liadspunch_lbowdrop,std_punch
	JJXM	RUNNING,	 	liadspunch_downslash
	JJXM	BOUNCING,	 	liadspunch_downslash
	JJXM	ONTURNBKL,	 85, 45,liadspunch_close,liadspunch_far
	JJXM	CLIMBTURNBKL,	 85, 45,liadspunch_close,liadspunch_far
	JJXM	INAIR,		 	liadspunch_downslash
	JJXM	ATTACHED,	 85, 45,liadspunch_close,liadspunch_far
	JJXM	OPPOVERHEAD,	 85, 45,liadspunch_close,liadspunch_far
	JJXM	WAITANIM,	 85, 45,liadspunch_close,liadspunch_far
	JJXM	GRAPPLE,	 85, 45,liadspunch_close,liadspunch_far
	JJXM	MASTER,		 85, 45,liadspunch_close,liadspunch_far
	JJXM	SLAVE,		 85, 45,liadspunch_close,liadspunch_far
	JJXM	HEADHOLD,	 85, 45,liadspunch_close,liadspunch_far
	JJXM	HEADHELD,	 85, 45,liadspunch_close,liadspunch_far
	JJXM	CHOKEHOLD,	 85, 45,liadspunch_close,liadspunch_far
	JJXM	PUPPET,		 85, 45,liadspunch_close,liadspunch_far
	JJXM	PUPPET2,	 85, 45,liadspunch_close,liadspunch_far
	JJXM	INAIR2,		 	liadspunch_downslash
	JJXM_END


liadspunch_lbowdrop


	move	*a13(CLOSEST_NUM),a3
	X32	a3

	addi	process_ptrs,a3
	move	*a3,a3,L
	move	*a3(PLYRMODE),a2
	cmpi	MODE_DEAD,a2
	jrz	liadno
	move	*a13(OBJ_XPOS),a1,L 
	move	*a3(OBJ_XPOS),a2,L
	sub	a2,a1
	abs	a1
	srl	16,a1
	cmpi	30h,a1	;28
 	jrlt	liadno


	move	*a3(OBJ_CONTROL),a14
	andi	M_FLIPH,a14
	move	*a13(OBJ_CONTROL),a0
	andi	M_FLIPH,a0
	cmp	a0,a14
	jrz	liadfeet


	FACE24	rzr,hair_pickup_anim
	calla	change_anim1
	WRSND	W_RAZOR,LBOWDROP_T1,LBOWDROP_T2
	rets

liadfeet
	cmpi	40h,a1	;28
 	jrlt	liadno

	;smart-target the intended victim
	move	*a13(STATUS_FLAGS),a14
	ori	M_SMART_ATTACK,a14
	move	a14,*a13(STATUS_FLAGS)
	move	a3,*a13(SMART_TARGET),L

	movi	rzr_rugshake_anim,a0
	calla	change_anim1a
	rets

liadno
	FACE24	rzr,ground_punch_anim
	calla	change_anim1a

	WRSND	W_RAZOR,LBOWDROP_T1,LBOWDROP_T2
	rets

liadspunch_close
	move	*a13(STICK_VAL_CUR),a0
	btst	MOVE_DOWN_BIT,a0
	jrnz	liadck_up

	move	*a13(CLOSEST_XDIST),a1
	cmpi	65,a1
	jrgt	std_punch
	.ref	rzr_2_pummel_anim
	.ref	rzr_4_pummel_anim

	FACE24	rzr,pummel_anim
	calla	change_anim1
	WRSND	W_RAZOR,HDBUTT_T1,HDBUTT_T2
	rets

liadck_up
	movi	rzr_4_uprcut_anim,a0
	calla	change_anim1a
	WRSND	W_RAZOR,UPRCUT_T1,UPRCUT_T2
	rets

liadspunch_far
	WRSND	W_RAZOR,UPRCUT_T1,UPRCUT_T2
	movi	rzr_3_uslash_anim,a0
	calla	change_anim1a
	rets

liadspunch_downslash
	WRSND	W_RAZOR,UPRCUT_T1,UPRCUT_T2
	movi	rzr_3_dslash_anim,a0
	calla	change_anim1a
	rets

liadkick		;8

	JJXM_INIT
	JJXM	NORMAL,		 70, 50,liadkick_knee,liadkick_kick
	JJXM	DIZZY,		 70, 50,liadkick_knee,liadkick_kick
	JJXM	BLOCK,		 70, 50,liadkick_knee,liadkick_kick
	JJXM	ONGROUND,	160,140,liadkick_stomp,liadkick_kick
	JJXM	RUNNING,	 70, 50,liadkick_knee,liadkick_kick
	JJXM	BOUNCING, 	 70, 50,liadkick_knee,liadkick_kick
	JJXM	ONTURNBKL,	 	liadkick_kick
	JJXM	CLIMBTURNBKL,	 	liadkick_kick
	JJXM	INAIR,		 70, 50,liadkick_knee,liadkick_kick
	JJXM	ATTACHED,	 70, 50,liadkick_knee,liadkick_kick
	JJXM	DEAD,		160,140,liadkick_stomp,liadkick_kick
	JJXM	OPPOVERHEAD,	 70, 50,liadkick_knee,liadkick_kick
	JJXM	WAITANIM,	 70, 50,liadkick_knee,liadkick_kick
	JJXM	GRAPPLE,	 70, 50,liadkick_knee,liadkick_kick
	JJXM	MASTER,		 70, 50,liadkick_knee,liadkick_kick
	JJXM	SLAVE,		 70, 50,liadkick_knee,liadkick_kick
	JJXM	HEADHOLD,	 70, 50,liadkick_knee,liadkick_kick
	JJXM	HEADHELD,	 70, 50,liadkick_knee,liadkick_kick
	JJXM	CHOKEHOLD,	 70, 50,liadkick_knee,liadkick_kick
	JJXM	PUPPET,		 70, 50,liadkick_knee,liadkick_kick
	JJXM	PUPPET2,	 70, 50,liadkick_knee,liadkick_kick
	JJXM	INAIR2,		 	liadkick_TB
	JJXM_END

liadkick_TB
	.ref	rzr_kick_TB_anim
	movi	rzr_kick_TB_anim,a0
	calla	change_anim1a

	WRSND	W_RAZOR,KICK_T1,KICK_T2
	rets

liadkick_kick
std_kick

	FACE24	rzr,kick_anim
	calla	change_anim1a

	WRSND	W_RAZOR,KICK_T1,KICK_T2
	rets

liadkick_knee
std_knee

	FACE24	rzr,knee_anim
	calla	change_anim1a

	WRSND	W_RAZOR,KICK_T1,KICK_T2
	rets

liadkick_stomp

	FACE24	rzr,stomp_anim
	calla	change_anim1a

	WRSND	W_RAZOR,KICK_T1,KICK_T2
	rets


liadsuper_kick	;16
	JJXM_INIT
	JJXM	NORMAL,		 70, 60,liadskick_special,liadskick_kick	;0
	JJXM	RUNNING,	 	liadskick_bigboot			;1
	JJXM	INAIR,		 70, 60,liadskick_special,liadskick_kick	;2
	JJXM	ATTACHED,	 70, 60,liadskick_special,liadskick_kick	;3
	JJXM	ONGROUND,	160,140,liadskick_stomp,std_kick		;4
	JJXM	BOUNCING,	 	liadskick_bigboot			;5
	JJXM	ONTURNBKL,	 70, 96,liadskick_kick,std_kick		;6
	JJXM	BLOCK,		 70, 60,liadskick_special,liadskick_kick	;7
	JJXM	DIZZY,		 70, 60,liadskick_special,liadskick_kick	;8
	JJXM	DEAD,		160,140,liadskick_stomp,std_kick		;9
	JJXM	OPPOVERHEAD,	 70, 60,liadskick_special,liadskick_kick	;10
	JJXM	CLIMBTURNBKL,	 70, 96,liadskick_kick,std_kick		;11
	JJXM	WAITANIM,	 70, 62,liadskick_special,liadskick_kick	;12
	JJXM	GRAPPLE,	 70, 62,liadskick_special,liadskick_kick	;13
	JJXM	MASTER,		 70, 62,liadskick_special,liadskick_kick	;14
	JJXM	SLAVE, 		 70, 62,liadskick_special,liadskick_kick	;15
	JJXM	HEADHOLD,	 70, 62,liadskick_special,liadskick_kick	;16
	JJXM	HEADHELD,	 	std_kick
	JJXM	CHOKEHOLD,	 70, 62,liadskick_special,liadskick_kick	;16
	JJXM	PUPPET,		 70, 62,liadskick_special,liadskick_kick	;20
	JJXM	PUPPET2,	 70, 62,liadskick_special,liadskick_kick	;20
	JJXM	INAIR2,		 	liadkick_TB
	JJXM_END

liadskick_kick
	FACE24	rzr,super_kick_anim
	calla	change_anim1a

	WRSND	W_RAZOR,FLYKICK_T1,FLYKICK_T2
	rets


liadskick_special

	move	*a13(STICK_VAL_CUR),a0
	move	*a13(NEW_FACING_DIR),a1
	andi	0ch,a1
	cmp	a0,a1
	jrz	liadsuper_knee

	FACE24	rzr,knee_anim
	calla	change_anim1a

	WRSND	W_RAZOR,KICK_T1,KICK_T2

	rets

liadsuper_knee
	movi	rzr_4_knee_fall_anim,a0
	calla	change_anim1

	WRSND	W_RAZOR,GRABHOLD_T1,GRABHOLD_T2
	rets

liadskick_stomp

	FACE24	rzr,stomp_anim
	calla	change_anim1a

	WRSND	W_RAZOR,KICK_T1,KICK_T2

	rets

liadskick_bigboot

	movi	rzr_4_bigboot_anim,a0		;*****
	calla	change_anim1a

	WRSND	W_RAZOR,FLYKICK_T1,FLYKICK_T2

	rets


liadpunchkick	;9

	movi	start_run_anim,a0
	calla	change_anim1a

	rets




viidXRUN_VAL	equ	RZR_XRUN
viidZDRIFT_VAL	equ	RZR_ZDRIFT

mode_running

	move	*a13(RUN_TIME),a0		;Used for flying kick
	addk	1,a0
	move	a0,*a13(RUN_TIME)

	move	*a13(USR_VAR1),a0
	jrnz	viidno_vel

	calla	bounce_off_ropes

	movi	viidXRUN_VAL,a0
	move	*a13(MOVE_DIR),a14
	btst	PLAYER_RIGHT_BIT,a14
	jrnz	viidpos
	neg	a0
viidpos
	move	@hyper_speed_on,a14
	sll	a14,a0
	move	a0,*a13(OBJ_XVEL),L

viidno_vel

	move	*a13(GETUP_TIME),a0		;delay b4 gaining control
	jrnz	viidout_of_control

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	viidno_interrupt

	move	*a13(STICK_VAL_CUR),a0
	move	*a13(MOVE_DIR),a1
	or	a0,a1
	andi	MOVE_LEFT|MOVE_RIGHT,a1
	cmpi	MOVE_LEFT|MOVE_RIGHT,a1
	jrne	viidcontinue_run

	;braking with stick.  abort run.

	SETMODE	NORMAL

viidcontinue_run
viidno_interrupt

	move	*a13(STICK_VAL_CUR),a0
	clr	a1

	movi	-viidZDRIFT_VAL,a1
	btst	PLAYER_UP_BIT,a0
	jrnz	viidsetvel

	movi	viidZDRIFT_VAL,a1
	btst	PLAYER_DOWN_BIT,a0
	jrnz	viidsetvel

	clr	a1
viidsetvel
	move	a1,*a13(OBJ_ZVEL),L


	move	*a13(DELAY_BUTNS),a0
	jrnz	viidout_of_control


	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	X32	a0
	addi	viidaction_table,a0
	move	*a0,a0,L
	call	a0
viidout_of_control
	rets

viidaction_table
	.long	viidz,viidpunch,viidblock,viidblock			;0-3
	.long	viidsuper_punch,viidsuper_punch,viidblock,viidblock	;4-7
	.long	viidkick,viidpunchkick,viidblock,viidblock		;8-11
	.long	viidsuper_punch,viidpunchkick,viidblock,viidblock	;12-15
	.long	viidsuper_kick,viidsuper_kick,viidblock,viidblock	;16-19
	.long	viidgraboh,viidgraboh,viidblock,viidblock		;20-23
	.long	viidsuper_kick,viidpunchkick,viidblock,viidblock	;24-27
	.long	viidgraboh,viidgraboh,viidblock,viidblock		;28-31




viidz
	rets


viidblock		;2
	move	*a13(OBJ_XVEL),a0,L
	sra	1,a0
	move	a0,*a13(OBJ_XVEL),L
	SETMODE	NORMAL
	jruc	std_block


viidpunch		;1
viidsuper_punch	;4
viidpunchkick
viidgraboh

	JJXM_INIT
	JJXM	NORMAL,			viidpunch_clothesline
	JJXM	BLOCK,			viidpunch_clothesline
	JJXM	DIZZY,			viidpunch_clothesline
	JJXM	ONGROUND,	176,176,viidpunch_flyelbow,viidpunch_rets
	JJXM	RUNNING,		viidpunch_clothesline
	JJXM	BOUNCING,		viidpunch_clothesline
	JJXM	ONTURNBKL,		viidpunch_clothesline
	JJXM	CLIMBTURNBKL,		viidpunch_clothesline
	JJXM	INAIR,			viidpunch_clothesline
	JJXM	ATTACHED,		viidpunch_clothesline
	JJXM	DEAD,		176,176,viidpunch_flyelbow,viidpunch_rets
	JJXM	OPPOVERHEAD,		viidpunch_clothesline
	JJXM	WAITANIM,		viidpunch_clothesline
	JJXM	GRAPPLE,		viidpunch_clothesline
	JJXM	MASTER,			viidpunch_clothesline
	JJXM	SLAVE,			viidpunch_clothesline
	JJXM	HEADHOLD,		viidpunch_clothesline
	JJXM	HEADHELD,		viidpunch_clothesline
	JJXM	CHOKEHOLD,		viidpunch_clothesline
	JJXM	PUPPET,			viidpunch_clothesline
	JJXM	PUPPET2,		viidpunch_clothesline
	JJXM	INAIR2,			viidpunch_clothesline
	JJXM_END

viidpunch_clothesline

	;don't do it if you're running away from your opponent.
	move	*a13(FACING_DIR),a0
	move	*a13(NEW_FACING_DIR),a1
	and	a0,a1
	andi	MOVE_LEFT|MOVE_RIGHT,a1
	jrz	viidz

	clr	a0
	move	a0,*a13(RUN_TIME)

	SETMODE	NORMAL

	move	*a13(CLOSEST_XDIST),a1
	cmpi	70,a1
	jrlt	viidhdbutt

	movi	rzr_3_uslash_anim,a0
	calla	change_anim1a

	WRSND	W_RAZOR,GRABHOLD_T1,GRABHOLD_T2

	rets

viidhdbutt

	FACE24	rzr,butt_anim
	calla	change_anim1

	WRSND	W_RAZOR,HDBUTT_T1,HDBUTT_T2

	rets

viidpunch_flyelbow
std_flyelbow
	movi	rzr_flying_elbow_anim,a0
	calla	change_anim1a

	move	*a13(OBJ_XVEL),a0,L
	sra	1,a0
	move	a0,*a13(OBJ_XVEL),L

	WRSND	W_RAZOR,FLYKICK_T1,FLYKICK_T2

	rets

viidpunch_rets
	rets

viidkick		;8
viidsuper_kick	;16
	JJXM_INIT
	JJXM	NORMAL,			viidkick_flykick
	JJXM	BLOCK,			viidkick_flykick
	JJXM	DIZZY,			viidkick_flykick
	JJXM	ONGROUND,		std_flyelbow
	JJXM	RUNNING,		viidkick_flykick
	JJXM	BOUNCING,		viidkick_flykick
	JJXM	ONTURNBKL,		viidkick_flykick
	JJXM	CLIMBTURNBKL,		viidkick_flykick
	JJXM	INAIR,			viidkick_flykick
	JJXM	ATTACHED,		viidkick_flykick
	JJXM	DEAD,			std_flyelbow
	JJXM	OPPOVERHEAD,		viidkick_flykick
	JJXM	WAITANIM,		viidkick_flykick
	JJXM	GRAPPLE,		viidkick_flykick
	JJXM	MASTER,			viidkick_flykick
	JJXM	SLAVE,			viidkick_flykick
	JJXM	HEADHOLD,		viidkick_flykick
	JJXM	HEADHELD,		viidkick_flykick
	JJXM	CHOKEHOLD,		viidkick_flykick
	JJXM	PUPPET,			viidkick_flykick
	JJXM	PUPPET2,		viidkick_flykick
	JJXM	INAIR2,			viidkick_flykick
	JJXM_END

viidkick_flykick
std_flykick

	calla	ck_ignore
	jrc	viidz

	movi	rzr_flying_kick_anim,a0
	calla	change_anim1a

	WRSND	W_RAZOR,FLYKICK_T1,FLYKICK_T2

	SETMODE	INAIR

	rets

viidkick_rets
	rets

mode_inair	;2

	rets

mode_attached	;3

	calla	keep_attached
	jrnz	qvrgstill_attached

	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL

	movi	MODE_NORMAL,a0
	move	a0,*a13(ANIMODE)

qvrgstill_attached
	rets

mode_onground	;4

	rets



mode_bouncing	;5

	clr	a0
	move	a0,*a13(OBJ_XVEL),L
	move	a0,*a13(OBJ_ZVEL),L

	move	*a13(ANIMODE),a0
	btst	MODE_END_BIT,a0
	jrz	roxlnot_ended

	move	*a13(MOVE_DIR),a0
	xori	MOVE_LEFT+MOVE_RIGHT,a0	;flip LEFT/RIGHT
	move	a0,*a13(MOVE_DIR)

	move	*a13(NEW_FACING_DIR),a1
	andi	MOVE_UP+MOVE_DOWN,a1
	or	a0,a1			;LEFT or RIGHT
	move	a1,*a13(FACING_DIR)	;face same dir as run

	movi	rzr_run2_anim,a0
	calla	change_anim1a

	SETMODE	RUNNING


roxlnot_ended
	rets


mode_onturnbkl	;6


	move	*a13(STICK_VAL_CUR),a0
	btst	PLAYER_DOWN_BIT,a0
	jrz	rpdgno_climbdown

	movi	rzr_climb_down_anim,a0
	calla	change_anim1a

	SETMODE	CLIMBTURNBKL

rpdgno_interrupt
	rets

rpdgno_climbdown
	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	jrz	rpdgz

	X32	a0
	addi	rpdgaction_table,a0
	move	*a0,a0,L
	call	a0

	move	*a13(PLYRNUM),a5
	movi	JUMP_ROPES,a2
	movi	1000,a0
	calla	ADD_IF_SILENT

	rets



rpdgaction_table
	.long	rpdgz,rpdgpunch,rpdgblock,rpdgblock			;0-3
	.long	rpdgsuper_punch,rpdgsuper_punch,rpdgblock,rpdgblock	;4-7
	.long	rpdgkick,rpdgpunchkick,rpdgblock,rpdgblock		;8-11
	.long	rpdgsuper_punch,rpdgpunchkick,rpdgblock,rpdgblock	;12-15
	.long	rpdgsuper_kick,rpdgsuper_kick,rpdgblock,rpdgblock	;16-19
	.long	rpdggraboh,rpdggraboh,rpdgblock,rpdgblock		;20-23
	.long	rpdgsuper_kick,rpdgpunchkick,rpdgblock,rpdgblock	;24-27
	.long	rpdggraboh,rpdggraboh,rpdgblock,rpdgblock		;28-31


rpdgz
	rets

rpdgpunch		;1
rpdgblock		;2
rpdgsuper_punch	;4
rpdgpunchkick	;5
rpdgkick		;8
rpdgsuper_kick	;16
rpdggraboh		;20

	SETMODE	INAIR

	movi	rzr_tbukl_elbow_anim,a0
	calla	change_anim1a

	WRSND	W_RAZOR,TURNDIVE_T1,TURNDIVE_T2
	rets


mode_block	;7

	move	*a13(BLOCK_TIME),a0
	inc	a0
	move	a0,*a13(BLOCK_TIME)
	cmpi	160,a0
	jrlt	lnncno

	calla	get_opp_plyrmode
	cmpi	MODE_BLOCK,a0
	jrnz	lnncno
	move	*a13(CLOSEST_XDIST),a0
	cmpi	61h,a0
	jrge	lnncno
	cmpi	45,a0
	jrlt	lnncno
	move	*a13(CLOSEST_ZDIST),a0
	cmpi	30,a0
	jrlt	lnncpunchblock

lnncno
	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	jrz	lnncno_interrupt

	;press.  if block isn't down, let mode_normal handle it
	move	a0,a2			;save a0 from ...val_down
	move	*a13(BUT_VAL_CUR),a0
	btst	PLAYER_BLOCK_BIT,a0
	jrz	lnncset_mode_normal
	move	a2,a0			;restore a0 from ...val_down

	X32	a0
	addi	lnncaction_table,a0
	move	*a0,a0,L
	call	a0

lnncno_interrupt
	rets

lnncset_mode_normal
	SETMODE	NORMAL
	jruc	mode_normal

lnncaction_table
	.long	lnncz,lnncpunchblock,lnncz	;0-2
	.long	lnncpunchblock		;3
	.long	lnncz,lnncz,lnncz,lnncz,lnncz,lnncz,lnncz	;4-10
	.long	lnncz,lnncz,lnncz,lnncz,lnncz,lnncz,lnncz	;11-17
	.long	lnncz,lnncz,lnncz,lnncz,lnncz,lnncz,lnncz	;18-24
	.long	lnncz,lnncz,lnncz,lnncz,lnncz,lnncz,lnncz	;25-31

lnncz
	rets

lnncpunchblock	;3

	SETMODE	NORMAL

	movi	rzr_4_push_anim,a0
	calla	change_anim1a

	WRSND	W_RAZOR,PUSH_T1,PUSH_T2

	rets



mode_dizzy	;8

	rets


mode_oppoverhead ;10

	rets


mode_climbturnbkl	;11

	rets



mode_waitanim	;12

	move	*a13(ANIMODE),a0
	btst	MODE_END_BIT,a0
	jrz	jkocnot_ended

	move	*a13(CODE_ADDR),a0,L
	call	a0

jkocnot_ended
	rets



mode_grapple	;13

	rets


mode_master	;14

	calla	master_keep_attached	;keep slave attached to me

	rets


mode_slave	;15
	rets


mode_headhold	;16

	.ref	bozo_check
	calla	bozo_check
	jrnc	fhbwfail

	WRSND	W_RAZOR,GRABHOLD_T1,GRABHOLD_T2

	movi	rzr_razors_edge_anim,a0
	move	@PCNT,a14
	btst	0,a14
	jrz	fhbwtag
	movi	rzr_3_pile_driver_anim,a0
fhbwtag	calla	change_anim1a

	rets

fhbwfail
	move	*a13(WHOIHIT),a0,L
	move	*a0(PLYRMODE),a0
	cmpi	MODE_HEADHELD,a0
	jrnz	fhbwexit


	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	fhbwno_interrupt

	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	X32	a0
	addi	fhbwaction_table,a0
	move	*a0,a0,L
	call	a0

fhbwno_interrupt
	rets

fhbwexit
	move	*a13(OBJ_ZPOS),a14,L
	subi	[6,0],a14
	move	a14,*a13(OBJ_ZPOS),L

	movk	MOVE_DOWN_RIGHT,a1
	move	*a13(OBJ_CONTROL),a0
	btst	B_FLIPH,a0
	jrz	fhbwright
	movk	MOVE_DOWN_LEFT,a1
fhbwright	move	a1,*a13(FACING_DIR)
	move	a1,*a13(NEW_FACING_DIR)

	SETMODE	NORMAL

	rets

fhbwaction_table
	.long	fhbwz,fhbwpunch,fhbwblock,fhbwblock			;0-3
	.long	fhbwsuper_punch,fhbwsuper_punch,fhbwblock,fhbwblock	;4-7
	.long	fhbwkick,fhbwpunchkick,fhbwblock,fhbwblock		;8-11
	.long	fhbwsuper_punch,fhbwpunchkick,fhbwblock,fhbwblock	;12-15
	.long	fhbwsuper_kick,fhbwsuper_kick,fhbwblock,fhbwblock	;16-19
	.long	fhbwgraboh,fhbwgraboh,fhbwblock,fhbwblock		;20-23
	.long	fhbwsuper_kick,fhbwpunchkick,fhbwblock,fhbwblock	;24-27
	.long	fhbwgraboh,fhbwgraboh,fhbwblock,fhbwblock		;28-31



fhbwblock
fhbwgraboh
fhbwz		;0
	rets

fhbwpunch		;1
fhbwpunchkick

	CALLA	FIND_AND_KILL_ENDLESS
	;if stick is up, do quick upslashes.  If it's down, do quick
	; downslashes.  Otherwise, do a normal upslash.
	move	*a13(STICK_VAL_CUR),a0
	btst	MOVE_UP_BIT,a0
	jrnz	fhbwquick_upslashes
	btst	MOVE_DOWN_BIT,a0
	jrnz	fhbwquick_dnslashes

	.ref	rzr_4_kick2_anim
	movi	rzr_4_kick2_anim,a0
	calla	change_anim1a
	WRSND	W_RAZOR,KICK_T1,KICK_T2
	rets

fhbwquick_upslashes
	movi	rzr_uslashes_to_head_anim,a0
	calla	change_anim1a
	WRSND	W_RAZOR,UPRCUT_T2
	rets

fhbwquick_dnslashes
	movi	rzr_dslashes_to_head_anim,a0
	calla	change_anim1a
	WRSND	W_RAZOR,UPRCUT_T2
	rets

fhbwsuper_punch	;4

	move	*a13(STICK_VAL_CUR),a0
	btst	MOVE_DOWN_BIT,a0
	jrz	fhbwz

	CALLA	FIND_AND_KILL_ENDLESS

	SPCDMG	D_UPRCUT/2,15

	movi	rzr_4_uprcut_anim,a0
	calla	change_anim1a
	WRSND	W_RAZOR,UPRCUT_T1,UPRCUT_T2

	rets

fhbwkick		;8

	CALLA	FIND_AND_KILL_ENDLESS
	movi	rzr_4_kick2_anim,a0
	calla	change_anim1a
	WRSND	W_RAZOR,KICK_T1,KICK_T2
	rets

fhbwsuper_kick	;16
	rets


mode_puppet2	;17

	rets

mode_headheld	;19

	move	*a13(ANIMODE),a0
	btst	MODE_NOGRAVITY_BIT,a0
	janz	mode_choking

	calla	bozo_check
	jrnc	gjeyfail

	PUSH	a8
	move	a13,a8
	CALLA	DO_REVERSAL
	CALLA	DO_REVERSAL_MESS
	PULL	a8

	WRSND	W_RAZOR,GRABHOLD_T1,GRABHOLD_T2

	movi	rzr_razors_edge_anim,a0
	move	@PCNT,a14
	btst	0,a14
	jrz	gjeytag
	movi	rzr_3_pile_driver_anim,a0
gjeytag	calla	change_anim1a

	rets
gjeyfail
	move	*a13(ATTACH_PROC),a0,L
	jrnz	gjeyno_luck

	move	*a13(OBJ_YPOSINT),a0
	move	*a13(GROUND_Y),a1
	cmp	a1,a0			;a0-a1
	jrgt	gjeyno_luck


	movi	rzr_3_head_held_stand_anim,a0
	calla	change_anim1a

gjeyno_luck
	rets

mode_chokehold	;24
	rets


jmpiVEL	equ	3a000h		;38000h	;30000h
jmpiDVEL	equ	31000h		;27978h	;21f0eh


 SUBR rzr_velocity_table


	.long	0,	-jmpiVEL	;0 UP

	.long	jmpiDVEL,	-jmpiDVEL	;1 UP-RIGHT

	.long	jmpiVEL,	0	;2 RIGHT

	.long	jmpiDVEL,	jmpiDVEL	;3 DOWN-RIGHT

	.long	0,	jmpiVEL	;4 DOWN

	.long	-jmpiDVEL,	jmpiDVEL	;5 DOWN-LEFT

	.long	-jmpiVEL,	0	;6 LEFT

	.long	-jmpiDVEL,	-jmpiDVEL	;7 UP-LEFT



 SUBR rzr_rotate_anims_table
	.long	rzr_stand2_anim		;new = up right
	.long	rzr_2_to_4_turn_anim	;    = down right
	.long	rzr_2_to_6_turn_anim	;    = down left ***
	.long	rzr_2_to_8_turn_anim	;    = up left

	.long	rzr_4_to_2_turn_anim	;new = up right
	.long	rzr_stand4_anim		;    = down right
	.long	rzr_4_to_6_turn_anim	;    = down left
	.long	rzr_4_to_8_turn_anim	;    = up left ***

	.long	rzr_6_to_2_turn_anim	;new = up right ***
	.long	rzr_6_to_4_turn_anim	;    = down right
	.long	rzr_stand6_anim		;    = down left
	.long	rzr_6_to_8_turn_anim	;    = up left

	.long	rzr_8_to_2_turn_anim	;new = up right
	.long	rzr_8_to_4_turn_anim	;    = down right ***
	.long	rzr_8_to_6_turn_anim	;    = down left
	.long	rzr_stand8_anim		;    = up left


 SUBR rzr_leg_anims_table
	.long	rzr_walk1_f2_anim	;1 (UP)
	.long	rzr_walk1_f2_anim	;2 (UP_RIGHT)
	.long	rzr_walk1_f4_anim	;3 (RIGHT)
	.long	rzr_walk1_f4_anim	;4 (DOWN_RIGHT)
	.long	rzr_walk1_f4_anim	;5 (DOWN)
	.long	rzr_walk1_f4_anim	;6 (DOWN_LEFT)
	.long	rzr_walk1_f2_anim	;7 (LEFT)
	.long	rzr_walk1_f2_anim	;8 (UP-LEFT)

	.long	rzr_walk2_f2_anim	;1 (UP)
	.long	rzr_walk2_f2_anim	;2 (UP_RIGHT)
	.long	rzr_walk2_f2_anim	;3 (RIGHT)
	.long	rzr_walk2_f4_anim	;4 (DOWN_RIGHT)
	.long	rzr_walk8_f4_anim	;5 (DOWN)
	.long	rzr_walk8_f4_anim	;6 (DOWN_LEFT)
	.long	rzr_walk4_f2_anim	;7 (LEFT)
	.long	rzr_walk4_f2_anim	;8 (UP-LEFT)

	.long	rzr_walk2_f2_anim	;1 (UP)
	.long	rzr_walk2_f2_anim	;2 (UP_RIGHT)
	.long	rzr_walk2_f2_anim	;3 (RIGHT)
	.long	rzr_walk4_f4_anim	;4 (DOWN_RIGHT)
	.long	rzr_walk4_f4_anim	;5 (DOWN)
	.long	rzr_walk8_f4_anim	;6 (DOWN_LEFT)
	.long	rzr_walk6_f2_anim	;7 (LEFT)
	.long	rzr_walk6_f2_anim	;8 (UP-LEFT)


	.long	rzr_walk2_f2_anim	;1 (UP)
	.long	rzr_walk8_f2_anim	;2 (UP_RIGHT)
	.long	rzr_walk4_f4_anim	;3 (RIGHT)
	.long	rzr_walk4_f4_anim	;4 (DOWN_RIGHT)
	.long	rzr_walk2_f4_anim	;5 (DOWN)
	.long	rzr_walk6_f4_anim	;6 (DOWN_LEFT)
	.long	rzr_walk2_f2_anim	;7 (LEFT)
	.long	rzr_walk6_f2_anim	;8 (UP-LEFT)

	.long	rzr_walk5_f2_anim	;1 (UP)
	.long	rzr_walk5_f2_anim	;2 (UP_RIGHT)
	.long	rzr_walk5_f4_anim	;3 (RIGHT)
	.long	rzr_walk5_f4_anim	;4 (DOWN_RIGHT)
	.long	rzr_walk5_f4_anim	;5 (DOWN)
	.long	rzr_walk5_f4_anim	;6 (DOWN_LEFT)
	.long	rzr_walk5_f2_anim	;7 (LEFT)
	.long	rzr_walk5_f2_anim	;8 (UP-LEFT)

	.long	rzr_walk2_f2_anim	;1 (UP)
	.long	rzr_walk6_f2_anim	;2 (UP_RIGHT)
	.long	rzr_walk2_f2_anim	;3 (RIGHT)
	.long	rzr_walk6_f4_anim	;4 (DOWN_RIGHT)
	.long	rzr_walk2_f4_anim	;5 (DOWN)
	.long	rzr_walk4_f4_anim	;6 (DOWN_LEFT)
	.long	rzr_walk2_f2_anim	;7 (LEFT)
	.long	rzr_walk8_f2_anim	;8 (UP-LEFT)

	.long	rzr_walk2_f2_anim	;1 (UP)
	.long	rzr_walk6_f2_anim	;2 (UP_RIGHT)
	.long	rzr_walk6_f2_anim	;3 (RIGHT)
	.long	rzr_walk8_f4_anim	;4 (DOWN_RIGHT)
	.long	rzr_walk4_f4_anim	;5 (DOWN)
	.long	rzr_walk4_f4_anim	;6 (DOWN_LEFT)
	.long	rzr_walk2_f2_anim	;7 (LEFT)
	.long	rzr_walk2_f2_anim	;8 (UP-LEFT)

	.long	rzr_walk2_f2_anim	;1 (UP)
	.long	rzr_walk4_f2_anim	;2 (UP_RIGHT)
	.long	rzr_walk6_f2_anim	;3 (RIGHT)
	.long	rzr_walk8_f4_anim	;4 (DOWN_RIGHT)
	.long	rzr_walk6_f4_anim	;5 (DOWN)
	.long	rzr_walk2_f4_anim	;6 (DOWN_LEFT)
	.long	rzr_walk2_f2_anim	;7 (LEFT)
	.long	rzr_walk2_f2_anim	;8 (UP-LEFT)


 SUBR rzr_torso_anims_table
	.long	rzr_torso2_anim		;new = up right
	.long	rzr_2_to_4_turn2_anim	;    = down right
	.long	rzr_2_to_6_turn2_anim	;    = down left ***
	.long	rzr_2_to_8_turn2_anim	;    = up left

	.long	rzr_4_to_2_turn2_anim	;new = up right
	.long	rzr_torso4_anim		;    = down right
	.long	rzr_4_to_6_turn2_anim	;    = down left
	.long	rzr_4_to_8_turn2_anim	;    = up left ***

	.long	rzr_6_to_2_turn2_anim	;new = up right ***
	.long	rzr_6_to_4_turn2_anim	;    = down right
	.long	rzr_torso6_anim		;    = down left
	.long	rzr_6_to_8_turn2_anim	;    = up left

	.long	rzr_8_to_2_turn2_anim	;new = up right
	.long	rzr_8_to_4_turn2_anim	;    = down right ***
	.long	rzr_8_to_6_turn2_anim	;    = down left
	.long	rzr_torso8_anim		;    = up left



	.end

