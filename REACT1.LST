TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    **************************************************************
       2                    *
       3                    * Software:             Jamie Rivett
       4                    * Initiated:            8/8/94
       5                    *
       6                    * COPYRIGHT (C) 1992 WILLIAMS ELECTRONICS GAMES, INC.
       7                    *
       8                    **************************************************************
       9                    
      10                            .file   "react1.asm"
      12                            .width  132
      13                            .option b,d,l,t
      14                            .mnolist
      15                    
      16                    
      17                            .include        "macros.h"
      18                            .include        "mproc.equ"             ;Mproc equates
      19                            .include        "display.equ"           ;Display proc equates
      20                            .include        "gsp.equ"               ;Gsp asm equates
      21                            .include        "sys.equ"
      22                            .include        "game.equ"
      23                            .include        "plyr.equ"
      24                            .include        "anim.equ"
      25                            .include        "audit.equ"
      26                            .include        "sound.h"
      27                            .include        "ring.equ"
      28                            .include        "lifebar.h"
      29                            .include        "damage.equ"
      30                            .include        "special.equ"
      31                            .include        "jjxm.h"
      32                    
      33                    
      34                    ******************************************************************************
      35                    * EXTERNAL REFERENCES
      36                    
      37                            .ref    change_anim1a,PCNT,flash_white,round_award,any_hits
      38                            .ref    wres_collis_off,slide_offscr
      39                            .ref    set_getup_time
      40                            .ref    good_run_hit,MOVE_NAME_ANNC
      41                            .ref    CALL_FACE_HIT,CALL_MID_HIT,DO_BLOCK_SND,DO_SCREAM
      42                            .ref    CALL_DROP_KICK,ADD_IF_SILENT,BONUS_MESS,DAM_MULT
      43                            .ref    FIRSTATT_MESS
      44                            .ref    delete_special_objlist
      45                            .ref    sp_change_anim
      46                    
      47                    
      48                    ******************************************************************************
      49                    * EXTERNAL ANIM SEQUENCES
      50                    
      51                    ;BAM BAM
      52                            .ref    bam_2_head_hit_anim,bam_4_head_hit_anim
      53                            .ref    bam_2_body_hit_anim,bam_4_body_hit_anim
      54                            .ref    bam_head_hit2_anim,bam_4_body_hit_dizzy_anim
      55                            .ref    bam_head_hit_dizzy_anim,bam_hitonground_anim
      56                            .ref    bam_fall_back_anim,bam_fall_back_tbukl_anim
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    2

      57                            .ref    bam_4_hitblock_anim
      58                    
      59                    ;DOINK
      60                            .ref    dnk_2_head_hit_anim,dnk_4_head_hit_anim
      61                            .ref    dnk_head_hit2_anim,dnk_hitonground_anim
      62                            .ref    dnk_head_hit_dizzy_anim
      63                            .ref    dnk_4_hitblock_anim
      64                            .ref    dnk_fall_back_anim,dnk_fall_back_tbukl_anim
      65                            .ref    dnk_4_body_hit_anim
      66                            .ref    dnk_4_body_hit_dizzy_anim
      67                    
      68                    ;BRET
      69                            .ref    hrt_4_hitblock_anim,hrt_hitonground_anim
      70                            .ref    hrt_2_head_hit_anim,hrt_4_head_hit_anim
      71                            .ref    hrt_4_head_hit_dizzy_anim
      72                            .ref    hrt_2_head_hit2_anim,hrt_4_head_hit2_anim
      73                            .ref    hrt_2_body_hit_anim,hrt_4_body_hit_anim
      74                            .ref    hrt_4_body_hit_dizzy_anim
      75                            .ref    hrt_fall_back_anim,hrt_fall_back_tbukl_anim
      76                    
      77                    ;LEX
      78                            .ref    lex_2_head_hit_anim,lex_4_head_hit_anim
      79                            .ref    lex_2_body_hit_anim,lex_4_body_hit_anim
      80                            .ref    lex_4_hitblock_anim
      81                            .ref    lex_head_hit_dizzy_anim,lex_hitonground_anim
      82                            .ref    lex_2_head_hit2_anim,lex_4_head_hit2_anim
      83                            .ref    lex_4_body_hit_dizzy_anim
      84                            .ref    lex_fall_back_anim,lex_fall_back_tbukl_anim
      85                            .ref    lex_flying_kick_anim,lex_super_kick_anim
      86                    
      87                    ;RAZOR
      88                            .ref    rzr_4_head_hit_dizzy_anim
      89                            .ref    rzr_2_head_hit_anim,rzr_4_head_hit_anim
      90                            .ref    rzr_2_body_hit_anim,rzr_4_body_hit_anim
      91                            .ref    rzr_4_hitblock_anim
      92                            .ref    rzr_2_head_hit2_anim,rzr_4_head_hit2_anim
      93                            .ref    rzr_fall_back_anim,rzr_fall_back_tbukl_anim
      94                            .ref    rzr_4_body_hit_dizzy_anim,rzr_hitonground_anim
      95                    
      96                    ;SHAWN
      97                            .ref    shn_4_head_hit_dizzy_anim
      98                            .ref    shn_2_head_hit_anim,shn_4_head_hit_anim
      99                            .ref    shn_2_head_hit2_anim,shn_4_head_hit2_anim
     100                            .ref    shn_2_body_hit_anim,shn_4_body_hit_anim
     101                            .ref    shn_4_body_hit_dizzy_anim,shn_hitonground_anim
     102                            .ref    shn_fall_back_anim,shn_fall_back_tbukl_anim
     103                            .ref    shn_4_hitblock_anim
     104                    
     105                    ;TAKER
     106                            .ref    und_2_head_hit_anim,und_4_head_hit_anim
     107                            .ref    und_2_body_hit_anim,und_4_body_hit_anim
     108                            .ref    und_head_hit_dizzy_anim
     109                            .ref    und_head_hit2_anim,und_hitonground_anim
     110                            .ref    und_4_body_hit_dizzy_anim
     111                            .ref    und_fall_back_anim,und_fall_back_tbukl_anim
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    3

     112                            .ref    und_4_hitblock_anim
     113                    
     114                    ;YOKO
     115                            .ref    yok_4_head_hit_dizzy_anim
     116                            .ref    yok_2_head_hit_anim,yok_4_head_hit_anim
     117                            .ref    yok_2_head_hit2_anim,yok_4_head_hit2_anim
     118                            .ref    yok_2_body_hit_anim,yok_4_body_hit_anim
     119                            .ref    yok_4_hitblock_anim
     120                            .ref    yok_4_body_hit_dizzy_anim
     121                            .ref    yok_fall_back_anim,yok_hitonground_anim
     122                    
     123                    
     124                    ******************************************************************************
     125                    * SYMBOLS DEFINED IN THIS FILE
     126                    
     127                            .def    hit_flykick
     128                    
     129                    ;when a hit is scored, the damage is computed, then stuck in 'ere.  It won't
     130                    ; be applied until AFTER the appropriate hit routine is called, so you have
     131                    ; a chance to change the value in special mode-dependent cases. (A stomp
     132                    ; which shouldn't hurt someone in MODE_NORMAL, for example...)
     133                    
     134 00000000                   BSSX    hit_damage_pending,16
     135                    
     136                    ;In general, we want to clear a victim's MOVE_DIR when we hit him.  This
     137                    ; value is set to 0 before the hit routine is called.  If, for whatever
     138                    ; reason, we don't want a particular attack mode to clear the victim's
     139                    ; MOVE_DIR, just stuff it in here.  new_victim_movedir is stuffed into
     140                    ; victim's MOVE_DIR right after the amode routine returns.
     141                    
     142 00000000                   BSSX    new_victim_movedir,16
     143                    
     144                            .if DEBUG
     145                            BSSX    instant_death,16                ;debug thing
     146                            .endif
     147                    
     148                    ******************************************************************************
     149                    * EQUATES FOR THIS FILE
     150                    
     151                    *****************************************************************************
     152                    * A WRESTLER HAS JUST HIT/BEEN HIT (BY A PROJECTILE/SPECIAL OBJECT)
     153                    *
     154                    * a10 = * projectile process
     155                    * a13 = * victim process
     156                    
     157 00000000            SUBR   wrestler_hit_special
     158                    
     159                            ;update LAST_HIT_TIME on attacker
     160 00000000     07ae          move    @PCNT,a14,L                     ;use 32-bit PCNT!
         00000010 00000000! 
     161 00000030     b740          move    *a10(SP_WRESPROC),a0,L
         00000040     0200  
     162 00000050     b3c0          move    a14,*a0(LAST_HIT_TIME),L
         00000060     0c50  
     163                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    4

     164 00000070     0d3f          callr   hit_stuff
         00000080     021e  
     165                    
     166 00000090     b54e          move    *a10(SP_ID),a14
         000000a0     0440  
     167 000000b0     0b4e          cmpi    2,a14
         000000c0     fffd  
     168 000000d0     cb00          jrnz    fhvtnot_salt
         000000e0     0084  
     169                    
     170                    ;Salt hits player
     171 000000f0     b5ae          move    *a13(PLYRMODE),a14
         00000100     05c0  
     172 00000110     0b4e          cmpi    MODE_BLOCK,a14
         00000120     fff8  
     173 00000130     cb06          jrnz    fhvttag
     174 00000140     b740          move    *a10(SP_WRESPROC),a0,L
         00000150     0200  
     175 00000160     182e          movk    1,a14
     176 00000170     b080          move    a4,*a0(USR_VAR2)                ;Tell Yoko his salt was failed!
         00000180     0860  
     177 00000190     c00a          jruc    fhvtin_block0
     178 000001a0           fhvttag
     179                    ;       cmpi    MODE_INAIR,a14
     180                    ;       jrz     fhvtin_block0
     181                    
     182                    ;Salt projectiles do damage
     183 000001a0     0d5f          calla   DO_SCREAM
         000001b0 00000000! 
     184 000001d0     09c0          movi    -D_SALT,a0
         000001e0     fff1  
     185 000001f0     b5a1          move    *a13(PLYRNUM),a1
         00000200     0580  
     186 00000210     0d5f          calla   adjust_health
         00000220 00000000! 
     187                    
     188 00000240           fhvtin_block0
     189 00000240                   PUSH    a13
     190 00000250     4d4d          move    a10,a13
     191 00000260     09e0          movi    saltsplat_anim,a0
         00000270 00000000! 
     192 00000290     0d5f          calla   sp_change_anim
         000002a0 00000000! 
     193 000002c0                   PULL    a13
     194                    
     195 000002d0     b5a1          move    *a13(PLYRMODE),a1
         000002e0     05c0  
     196 000002f0     0b41          cmpi    MODE_BLOCK,a1
         00000300     fff8  
     197 00000310     cb1a          jrnz    fhvtnoblock0
     198                    
     199                    ;       move    *a13(FACING_DIR),a0             ;check for hit
     200                    ;       move    *a13(NEW_FACING_DIR),a1         ;from behind
     201                    ;       and     a0,a1
     202                    ;       andi    MOVE_LEFT|MOVE_RIGHT,a1
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    5

     203                    ;       jrz     fhvtnoblock0
     204                    
     205                    ;Block_hit
     206                    ;Slide opponent away from attacker
     207 00000320     09e2          movi    [3,0],a2
         00000330 00030000  
     208 00000350     b540          move    *a10(SP_OBJ_XPOSINT),a0
         00000360     0110  
     209 00000370     b5a1          move    *a13(OBJ_XPOSINT),a1
         00000380     0110  
     210 00000390     4801          cmp     a0,a1                   ;offx - defx
     211 000003a0     c701          jrgt    fhvtfall_right0         ;attacker on left
     212 000003b0     03a2          neg     a2
     213 000003c0           fhvtfall_right0
     214 000003c0     b24d          move    a2,*a13(OBJ_XVEL),L
         000003d0     02d0  
     215                    
     216 000003e0     0d5f          CALLA   DO_BLOCK_SND
         000003f0 00000000! 
     217                    
     218 00000410                   FACETBL hitblock_tbl
     219 00000480     0d5f          calla   change_anim1a
         00000490 00000000! 
     220                    
     221 000004b0     0960          rets
     222                    
     223 000004c0           fhvtnoblock0
     224                    
     225                    ;Salt will pick off in air opponent!
     226                    ;       move    *a13(PLYRMODE),a14
     227                    ;       cmpi    MODE_INAIR,a14
     228                    ;       jrz     fhvtisdead
     229                    
     230 000004c0                   GETLIFE
     231 00000510     ca00          jrz     fhvtisdead
         00000520     00e5  
     232                    
     233                    
     234 00000530                   SETMODE NORMAL
     235                    
     236 000005e0     b740          move    *a10(SP_WRESPROC),a0,L
         000005f0     0200  
     237                    
     238 00000600     b600          move    *a0(OBJ_ZPOS),a0,L
         00000610     0140  
     239 00000620     0d00          subi    [1,0],a0
         00000630 fffeffff  
     240 00000650     b20d          move    a0,*a13(OBJ_ZPOS),L
         00000660     0140  
     241                    
     242                    ;If opponent is in air, do fall back!
     243 00000670                   FACETBL head_hit2_sand_tbl
     244 000006e0     0d5f          calla   change_anim1a
         000006f0 00000000! 
     245                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    6

     246 00000710     5600          clr     a0
     247 00000720     b00d          move    a0,*a13(USR_VAR1)
         00000730     0850  
     248                    
     249 00000740     09ce          movi    8*60,a14
         00000750     01e0  
     250 00000760     b1cd          move    a14,*a13(DELAY_METER)
         00000770     0ad0  
     251                    
     252                    
     253 00000780     09e0          movi    -[1,0h],a0
         00000790 ffff0000  
     254                    ;       movi    -[3,8000h],a0
     255 000007b0     b5ae          move    *a13(FACING_DIR),a14
         000007c0     04c0  
     256 000007d0     1f8e          btst    MOVE_RIGHT_BIT,a14
     257 000007e0     cb01          jrnz    fhvtabs0                        ;right
     258 000007f0     03a0          neg     a0                      ;left
     259 00000800           fhvtabs0
     260 00000800     b20d          move    a0,*a13(OBJ_XVEL),L
         00000810     02d0  
     261                    ;       movi    [5,0],a0
     262 00000820     09e0          movi    [3,0],a0
         00000830 00030000  
     263 00000850     b20d          move    a0,*a13(OBJ_YVEL),L
         00000860     02f0  
     264 00000870     09c0          movi    7000h,a0
         00000880     7000  
     265 00000890     b20d          move    a0,*a13(OBJ_ZVEL),L
         000008a0     0310  
     266 000008b0     b20a          move    a0,*a10(SP_OBJ_ZVEL),L
         000008c0     03e0  
     267                    
     268 000008d0     b740          move    *a10(SP_OBJ_XVEL),a0,L
         000008e0     03a0  
     269 000008f0     2be0          sra     1,a0
     270 00000900     b20a          move    a0,*a10(SP_OBJ_XVEL),L
         00000910     03a0  
     271                    
     272 00000920     0960          rets
     273                    
     274 00000930           fhvtnot_salt
     275 00000930     b5ae          move    *a13(PLYRMODE),a14
         00000940     05c0  
     276 00000950     0b4e          cmpi    MODE_BLOCK,a14
         00000960     fff8  
     277 00000970     ca0f          jrz     fhvtin_block
     278                    ;       cmpi    MODE_INAIR,a14
     279                    ;       jrz     fhvtin_block
     280                    
     281 00000980     b54e          move    *a10(SP_ID),a14
         00000990     0440  
     282 000009a0     cb05          jrnz    fhvtdmg
     283                    ;Pull in spirits do no damage until Taker
     284                    ;whacks him at end!
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    7

     285 000009b0     09c0          movi    60,a0
         000009c0     003c  
     286 000009d0     b00d          move    a0,*a13(IMMOBILIZE_TIME)
         000009e0     0ae0  
     287 000009f0     c007          jruc    fhvtin_block
     288 00000a00           fhvtdmg
     289                    ;Reaper projectiles do 2 damage hits
     290 00000a00     09c0          movi    -3,a0
         00000a10     fffd  
     291 00000a20     b5a1          move    *a13(PLYRNUM),a1
         00000a30     0580  
     292 00000a40     0d5f          calla   adjust_health
         00000a50 00000000! 
     293                    
     294 00000a70           fhvtin_block
     295                    
     296 00000a70                   PUSH    a13
     297 00000a80     4d4d          move    a10,a13
     298 00000a90     4da0          move    a13,a0
     299 00000aa0     0d5f          calla   delete_special_objlist
         00000ab0 00000000! 
     300                    
     301 00000ad0     b5ae          move    *a13(SP_ID),a14
         00000ae0     0440  
     302 00000af0     24ae          sll     5,a14
     303 00000b00     0b2e          addi    fhvtsplat_tbl,a14
         00000b10 00001390' 
     304                    
     305                            ;range check
     306 00000b30     0b6e          cmpi    fhvtsplat_tbl_end,a14
         00000b40 ffffec0f' 
     307 00000b60     c403          jrlt    fhvtstok
     308 00000b70     09ee          movi    fhvtsplat_tbl,a14
         00000b80 00001390' 
     309                            .if DEBUG
     310                            LOCKUP
     311                            .endif
     312                    
     313 00000ba0     87c0  fhvtstok        move    *a14,a0,L
     314 00000bb0           fhvtreg
     315 00000bb0     0d5f          calla   sp_change_anim
         00000bc0 00000000! 
     316 00000be0                   PULL    a13
     317                    
     318 00000bf0     b5a1          move    *a13(PLYRMODE),a1
         00000c00     05c0  
     319 00000c10     0b41          cmpi    MODE_BLOCK,a1
         00000c20     fff8  
     320 00000c30     cb1a          jrnz    fhvtnoblock
     321                    
     322                    ;       move    *a13(FACING_DIR),a0             ;check for hit
     323                    ;       move    *a13(NEW_FACING_DIR),a1         ;from behind
     324                    ;       and     a0,a1
     325                    ;       andi    MOVE_LEFT|MOVE_RIGHT,a1
     326                    ;       jrz     fhvtnoblock
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    8

     327                    
     328                    ;Block_hit
     329                    ;Slide opponent away from attacker
     330 00000c40     09e2          movi    [2,0],a2
         00000c50 00020000  
     331 00000c70     b540          move    *a10(SP_OBJ_XPOSINT),a0
         00000c80     0110  
     332 00000c90     b5a1          move    *a13(OBJ_XPOSINT),a1
         00000ca0     0110  
     333 00000cb0     4801          cmp     a0,a1                   ;offx - defx
     334 00000cc0     c701          jrgt    fhvtfall_right          ;attacker on left
     335 00000cd0     03a2          neg     a2
     336 00000ce0           fhvtfall_right
     337 00000ce0     b24d          move    a2,*a13(OBJ_XVEL),L
         00000cf0     02d0  
     338                    
     339 00000d00     0d5f          CALLA   DO_BLOCK_SND
         00000d10 00000000! 
     340                    
     341 00000d30                   FACETBL hitblock_tbl
     342 00000da0     0d5f          calla   change_anim1a
         00000db0 00000000! 
     343                    
     344 00000dd0     0960          rets
     345                    
     346 00000de0           fhvtnoblock
     347 00000de0     b5ae          move    *a13(PLYRMODE),a14
         00000df0     05c0  
     348 00000e00     0b4e          cmpi    MODE_INAIR,a14
         00000e10     fffd  
     349 00000e20     ca55          jrz     fhvtisdead
     350 00000e30                   GETLIFE
     351 00000e80     ca4f          jrz     fhvtisdead
     352                    
     353 00000e90                   SETMODE NORMAL
     354                    
     355 00000f40     b740          move    *a10(SP_WRESPROC),a0,L
         00000f50     0200  
     356                    
     357 00000f60     b600          move    *a0(OBJ_ZPOS),a0,L
         00000f70     0140  
     358 00000f80     0d00          subi    [1,0],a0
         00000f90 fffeffff  
     359 00000fb0     b20d          move    a0,*a13(OBJ_ZPOS),L
         00000fc0     0140  
     360                    
     361                    ;If opponent is in air, do fall back!
     362 00000fd0                   FACETBL body_hit2_tbl
     363 00001040     0d5f          calla   change_anim1a
         00001050 00000000! 
     364                    
     365 00001070     5600          clr     a0
     366 00001080     b00d          move    a0,*a13(USR_VAR1)
         00001090     0850  
     367                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    9

     368 000010a0     09e0          movi    -[3,0],a0
         000010b0 fffd0000  
     369 000010d0     b54e          move    *a10(SP_ID),a14
         000010e0     0440  
     370 000010f0     cb16          jrnz    fhvtpush_away
     371                    ;Pull toward
     372                    ;Send body hit into dizzy state at the end.
     373 00001100     1820          movk    1,a0
     374 00001110     b00d          move    a0,*a13(USR_VAR1)
         00001120     0850  
     375                    
     376 00001130     09ce          movi    10*60,a14
         00001140     0258  
     377 00001150     b1cd          move    a14,*a13(DELAY_METER)
         00001160     0ad0  
     378                    
     379                    ;Get Taker's xpos
     380                    ;Don't allow the wrestler to get real close to Taker
     381                    ;Try to set him up for an uppercut!
     382 00001170     b740          move    *a10(SP_WRESPROC),a0,L
         00001180     0200  
     383 00001190     b40e          move    *a0(OBJ_XPOSINT),a14
         000011a0     0110  
     384 000011b0     b5a0          move    *a13(OBJ_XPOSINT),a0
         000011c0     0110  
     385 000011d0     440e          sub     a0,a14
     386 000011e0     038e          abs     a14
     387 000011f0     5600          clr     a0
     388 00001200     0b4e          cmpi    5ch,a14
         00001210     ffa3  
     389 00001220     c408          jrlt    fhvtabs
     390 00001230     09e0          movi    [4,0],a0
         00001240 00040000  
     391 00001260           fhvtpush_away
     392                    
     393 00001260     b5ae          move    *a13(FACING_DIR),a14
         00001270     04c0  
     394 00001280     1f8e          btst    MOVE_RIGHT_BIT,a14
     395 00001290     cb01          jrnz    fhvtabs                 ;right
     396 000012a0     03a0          neg     a0                      ;left
     397 000012b0           fhvtabs
     398 000012b0     b20d          move    a0,*a13(OBJ_XVEL),L
         000012c0     02d0  
     399 000012d0     09e0          movi    [3,0],a0
         000012e0 00030000  
     400 00001300     b20d          move    a0,*a13(OBJ_YVEL),L
         00001310     02f0  
     401 00001320     5600          clr     a0
     402 00001330     b20d          move    a0,*a13(OBJ_ZVEL),L
         00001340     0310  
     403                    
     404 00001350     0d5f          calla   DO_SCREAM
         00001360 00000000! 
     405                    
     406 00001380           fhvtisdead
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   10

     407 00001380     0960          rets
     408                    
     409 00001390           fhvtsplat_tbl
     410 00001390                   REFLONG spiritsplat_anim
     411 000013b0                   REFLONG reapersplat_anim
     412 000013d0                   REFLONG saltsplat_anim
     413 000013f0           fhvtsplat_tbl_end
     414                    
     415                    *****************************************************************************
     416                    * A WRESTLER HAS JUST BEEN HIT
     417                    * a10 = * attacking wrestler proc
     418                    * a13 = * victim process
     419                    
     420 000013f0            SUBR   wrestler_hit
     421                    
     422                            ;If the attack is a run, we have to check and see first if it's
     423                            ; going to be ignored, in which case we skip ALL this crap.
     424                    
     425 000013f0     b54e          move    *a10(ATTACK_MODE),a14
         00001400     05d0  
     426 00001410     0b4e          cmpi    AMODE_RUN,a14
         00001420     ffeb  
     427 00001430     cb05          jrne    kogugood_hit
     428 00001440     0d5f          calla   good_run_hit
         00001450 00000000! 
     429 00001470     c801          jrc     kogugood_hit
     430                    
     431                            ;crummy hit.  forget it.
     432 00001480     0960          rets
     433                    
     434 00001490           kogugood_hit
     435                            ;set WHOIHIT and WHOHITME HERE, not in COLLIS, because we don't
     436                            ; want bogus run hits to change them.  (Otherwise reversals will
     437                            ; start hitting innocent bystanders who run by.)
     438 00001490     b34d          move    a10,*a13(WHOHITME),L
         000014a0     04e0  
     439 000014b0     b3aa          move    a13,*a10(WHOIHIT),L
         000014c0     0500  
     440                    
     441                    ;Need to clear STARS_FLAG to get rid of stars!
     442 000014d0     0d3f          callr   hit_stuff
         000014e0     00d8  
     443                    
     444                            ;update LAST_HIT_TIME on attacker
     445 000014f0     07ae          move    @PCNT,a14,L
         00001500 00000000! 
     446 00001520     b3ca          move    a14,*a10(LAST_HIT_TIME),L       ;use 32-bit PCNT!
         00001530     0c50  
     447                    
     448                            ;set up the new victim move_dir thingie
     449 00001540     57ce          clr     a14
     450 00001550     058e          move    a14,@new_victim_movedir
         00001560 00000010- 
     451                    
     452                            ;get base damage val
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   11

     453 00001580     b540          move    *a10(ATTACK_MODE),a0
         00001590     05d0  
     454 000015a0                   X32     a0
     455 000015b0     0b20          addi    damage_values,a0
         000015c0 000081e0' 
     456                    
     457                            ;if we've taken damage in the last 50 ticks, use the second value
     458                            ; in the damage table.
     459 000015e0     b5ae          move    *a13(LAST_DAMAGE),a14
         000015f0     0d50  
     460 00001600     ca08          jrz     kogudmset
     461 00001610     05a1          move    @PCNT,a1
         00001620 00000000! 
     462 00001640     45c1          sub     a14,a1
     463 00001650     0b41          cmpi    50,a1   ;20
         00001660     ffcd  
     464 00001670     c701          jrgt    kogudmset
     465 00001680     1200          addk    10h,a0
     466 00001690     8401  kogudmset       move    *a0,a1
     467                    
     468                            ;ooh, wait.  if the attacker has a NEXT_DAMAGE set, use that instead.
     469                            ; Exceptions:  If this hit does zero damage, don't mess with it,
     470                            ; AND leave NEXT_DAMAGE value in place.  If this hit does more than
     471                            ; zero damage, but LESS THAN NEXT_DAMAGE, leave the value alone,
     472                            ; and clear NEXT_DAMAGE.
     473 000016a0                   TEST    a1
     474 000016b0     ca12          jrz     kogunnd         ;not a damaging hit - don't check.
     475 000016c0     b54e          move    *a10(NEXT_DAMAGE),a14
         000016d0     0d60  
     476 000016e0     ca0f          jrz     kogunnd         ;no NEXT_DAMAGE set.  move on.
     477 000016f0     b74e          move    *a10(SPECIAL_DAMAGE_TIME),a14,L
         00001700     0d70  
     478 00001710     07a0          move    @PCNT,a0,L
         00001720 00000000! 
     479 00001740     49c0          cmp     a14,a0
     480 00001750     c705          jrgt    koguclrnd               ;too late.  clear NEXT_DAMAGE
     481                    
     482 00001760     b54e          move    *a10(NEXT_DAMAGE),a14
         00001770     0d60  
     483 00001780     482e          cmp     a1,a14
     484 00001790     c701          jrgt    koguclrnd               ;if NEXT_DAMAGE is more than we were gonna
     485                                                    ; do anyway, use the original damage.
     486 000017a0     4dc1          move    a14,a1          ;use NEXT_DAMAGE
     487 000017b0     57ce  koguclrnd       clr     a14
     488 000017c0     b1ca          move    a14,*a10(NEXT_DAMAGE)
         000017d0     0d60  
     489                    
     490 000017e0           kogunnd ;add attacker mod
     491 000017e0     b540          move    *a10(WRESTLERNUM),a0
         000017f0     0590  
     492 00001800                   X16     a0
     493 00001810     0b20          addi    offense_mods,a0
         00001820 000088e0' 
     494 00001840     8400          move    *a0,a0
     495 00001850     0b00          addi    100h,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   12

         00001860     0100  
     496 00001870     5e01          mpyu    a0,a1
     497                    
     498                            ;add defender mod
     499 00001880     b5a0          move    *a13(WRESTLERNUM),a0
         00001890     0590  
     500 000018a0                   X16     a0
     501 000018b0     0b20          addi    defense_mods,a0
         000018c0 00008970' 
     502 000018e0     8400          move    *a0,a0
     503 000018f0     0b00          addi    100h,a0
         00001900     0100  
     504 00001910     5e01          mpyu    a0,a1
     505 00001920     4c20          move    a1,a0
     506 00001930     2a00          sra     16,a0
     507 00001940     03a0          neg     a0
     508                    
     509                            ;block check
     510 00001950     b5ae          move    *a13(PLYRMODE),a14
         00001960     05c0  
     511 00001970     0b4e          cmpi    MODE_BLOCK,a14
         00001980     fff8  
     512 00001990     cb0d          jrnz    koguno_block
     513                    
     514                            ;Hey!  If the attack mode is BSTOMP or BSTOMP2, don't reduce the
     515                            ; damage!
     516 000019a0     b54e          move    *a10(ATTACK_MODE),a14
         000019b0     05d0  
     517 000019c0     0b4e          cmpi    AMODE_BSTOMP,a14
         000019d0     ffe5  
     518 000019e0     ca08          jreq    koguno_block
     519                    ;       cmpi    AMODE_BSTOMP2,a14       ;bstomp2 is NOT a turnbuckle attack!
     520                    ;       jreq    koguno_block
     521 000019f0     0b4e          cmpi    AMODE_BLBOWDROP,a14
         00001a00     ffe6  
     522 00001a10     ca05          jreq    koguno_block
     523                    
     524                            ;we're blocking.  if damage isn't zero, reduce it to one.
     525 00001a20                   TEST    a0
     526 00001a30     ca22          jrz     koguno_mult
     527 00001a40     09c0          movi    -1,a0
         00001a50     ffff  
     528 00001a60     c01f          jruc    koguno_mult
     529 00001a70           koguno_block
     530 00001a70     5621          CLR     A1
     531 00001a80     4c00          MOVE    A0,A0
     532 00001a90     ca1f          JRZ     JUST_CLEAR_OPP
     533                    
     534 00001aa0     b541          MOVE    *A10(RISK),A1
         00001ab0     0950  
     535 00001ac0     ca19          JRZ     koguno_mult
     536                    
     537                    ;Is there a real good reason why this is a CREATE0 instead of a CREATE?
     538 00001ad0                   PUSH    a0,a8,a10
     539 00001af0     4d48          move    a10,a8
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   13

     540 00001b00     574a          clr     a10
     541 00001b10     1e01          btst    15,a1
     542 00001b20     ca06          jrz     kogureg
     543                    ;Taunt style high risk move - give 3x dmg
     544 00001b30     09ca          movi    -1,a10
         00001b40     ffff  
     545 00001b50     188e          movk    4,a14
     546 00001b60     058e          move    a14,@DAM_MULT
         00001b70 00000000! 
     547 00001b90           kogureg
     548 00001b90     1820          movk    1,a0
     549 00001ba0     0580          move    a0,@any_hits
         00001bb0 00000000! 
     550 00001bd0                   CREATE0 BONUS_MESS
     551 00001c40                   PULL    a0,a8,a10
     552 00001c60           koguno_mult
     553 00001c60     5621          CLR     A1
     554 00001c70     b02a          MOVE    A1,*A10(RISK)
         00001c80     0950  
     555 00001c90           JUST_CLEAR_OPP
     556 00001c90     b02d          MOVE    A1,*A13(RISK)
         00001ca0     0950  
     557                    
     558                            ;store the damage value where hit functions can get at it
     559 00001cb0     0580          move    a0,@hit_damage_pending
         00001cc0 00000000- 
     560                    
     561                            ;if victim is on the turnbuckle, go to the special tbukl reaction
     562 00001ce0     b5ae          move    *a13(PLYRMODE),a14
         00001cf0     05c0  
     563 00001d00     0b4e          cmpi    MODE_ONTURNBKL,a14
         00001d10     fff9  
     564 00001d20     cb12          jrne    kogunot_onbukl
     565                    
     566                            ;if the attack mode is some kind of puppet, don't do this
     567 00001d30     b54e          move    *a10(ATTACK_MODE),a14
         00001d40     05d0  
     568                    
     569 00001d50     0b4e          cmpi    AMODE_PUPPET,a14
         00001d60     ffea  
     570 00001d70     ca0d          jreq    kogunot_onbukl
     571 00001d80     0b4e          cmpi    AMODE_PUPPET2,a14
         00001d90     ffe0  
     572 00001da0     ca0a          jreq    kogunot_onbukl
     573 00001db0     0b4e          cmpi    AMODE_PUPPET_HDGRAB,a14
         00001dc0     ffdf  
     574 00001dd0     ca07          jreq    kogunot_onbukl
     575 00001de0     0b4e          cmpi    AMODE_HITCHECK,a14
         00001df0     ffd9  
     576 00001e00     ca04          jreq    kogunot_onbukl
     577                    
     578 00001e10     09e1          movi    hit_ontbukl,a1
         00001e20 00007b70' 
     579 00001e40     c008          jruc    kogucontinue
     580                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   14

     581 00001e50           kogunot_onbukl
     582                    
     583 00001e50     b540          move    *a10(ATTACK_MODE),a0    ;type of attack that hit doink
         00001e60     05d0  
     584 00001e70     4c01          move    a0,a1
     585 00001e80     24a1          sll     5,a1                    ;x 32
     586 00001e90     0b21          addi    koguhit_table,a1
         00001ea0 00002da0' 
     587 00001ec0     8621          move    *a1,a1,L                ;appropriate routine
     588 00001ed0           kogucontinue
     589 00001ed0     0921          call    a1
     590                    
     591                            ;now apply the damage, unless it's zero.
     592 00001ee0     05a0          move    @hit_damage_pending,a0
         00001ef0 00000000- 
     593                    
     594                            .if DEBUG
     595                            move    @instant_death,a14
     596                            jrz     kogunid
     597                            movi    -200,a0
     598                    kogunid TEST    a0
     599                            .endif
     600                    
     601 00001f10     ca2f          jrz     koguskip_adjust
     602                    
     603                            ;If this is the first unblocked hit this round and it did at least
     604                            ; 2 pixels of damage, give an award
     605                    
     606 00001f20                   PUSH    a0
     607                    
     608 00001f30     0b40          cmpi    -2,a0
         00001f40     0001  
     609 00001f50     c725          jrgt    kogun1uh
     610                    
     611 00001f60     05ae          move    @any_hits,a14
         00001f70 00000000! 
     612 00001f90     cb21          jrnz    kogun1uh                        ;skip if there's already been one
     613                    
     614 00001fa0     b5ae          move    *a13(PLYRMODE),a14
         00001fb0     05c0  
     615 00001fc0     0b4e          cmpi    MODE_BLOCK,a14
         00001fd0     fff8  
     616 00001fe0     ca1c          jreq    kogun1uh                        ;skip if it was blocked
     617                    
     618 00001ff0                   RND_AWARD a10,FIRST_HIT_AWD
     619                    
     620 00002090                   PUSH    a10
     621 000020a0                   CREATE  MESSAGE_PID,FIRSTATT_MESS
     622 00002120                   PULL    a10
     623                    
     624 00002130     184e          movk    2,a14
     625 00002140     058e          move    a14,@DAM_MULT
         00002150 00000000! 
     626                    
     627 00002170     182e          movk    1,a14
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   15

     628 00002180     058e          move    a14,@any_hits
         00002190 00000000! 
     629 000021b0           kogun1uh        PULL    a0
     630                    
     631 000021c0     b5a1          move    *a13(PLYRNUM),a1
         000021d0     0580  
     632 000021e0     0d5f          calla   adjust_health
         000021f0 00000000! 
     633 00002210           koguskip_adjust
     634 00002210     05a0          move    @new_victim_movedir,a0
         00002220 00000010- 
     635 00002240     b00d          move    a0,*a13(MOVE_DIR)
         00002250     04b0  
     636                    
     637                    
     638 00002260     0960          rets
     639                    
     640                    **********
     641                    * Stuff to do to the wrestler who got hit by another wrestler or by a
     642                    * projectile.
     643                    
     644 00002270            SUBRP  hit_stuff
     645                    
     646                            ;don't do ANY of this stuff if the attack mode is AMODE_HITCHECK
     647 00002270     b54e          move    *a10(ATTACK_MODE),a14
         00002280     05d0  
     648 00002290     0b4e          cmpi    AMODE_HITCHECK,a14
         000022a0     ffd9  
     649 000022b0     ca00          jreq    kogurets
         000022c0     00ac  
     650                    
     651                            ;if our victim is KO'd, wake him up and set his NO_KO bit.
     652 000022d0     b5ae          move    *a13(STATUS_FLAGS),a14
         000022e0     0b50  
     653 000022f0     1f0e          btst    B_KOD,a14
     654 00002300     ca0b          jrz     kogunko
     655                    
     656 00002310     0bae          ori     M_NO_KO,a14
         00002320 00000100  
     657 00002340     0b8e          andni   M_KOD,a14
         00002350 00000080  
     658 00002370     b1cd          move    a14,*a13(STATUS_FLAGS)
         00002380     0b50  
     659                    
     660 00002390     182e          movk    1,a14
     661 000023a0     b1cd          move    a14,*a13(PTIME)
         000023b0     0030  
     662 000023c0           kogunko
     663                    
     664                            ;routine cleanup
     665 000023c0     5600          clr     a0
     666 000023d0     b00d          move    a0,*a13(STARS_FLAG)     ;Gets rid of them...
         000023e0     07f0  
     667 000023f0     b20d          move    a0,*a13(DEBRIS_X),L     ;Gets rid of them...
         00002400     0b10  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   16

     668 00002410     b00d          MOVE    A0,*A13(COMBO_COUNT)
         00002420     0af0  
     669                    
     670 00002430     b20d          move    a0,*a13(SHADTRAIL_PROC),L       ;proc is toast
         00002440     0a90  
     671 00002450     b20d          move    a0,*a13(ATTIMG_CUR_FRAME),L
         00002460     08e0  
     672 00002470     b9ad          move    *a13(MY_PAL),*a13(OBJ_PAL)
         00002480     08a0  
         00002490     07a0  
     673 000024a0     b5ae          move    *a13(OBJ_CONTROL),a14
         000024b0     0780  
     674 000024c0     0b8e          andni   01111b,a14
         000024d0 0000000f  
     675 000024f0     0bae          ori     DMAWNZ,a14
         00002500 00008002  
     676 00002520     b1cd          move    a14,*a13(OBJ_CONTROL)
         00002530     0780  
     677                    
     678                            ;attach cleanup
     679 00002540     b7a1          move    *a13(ATTACH_PROC),a1,L
         00002550     03e0  
     680 00002560     ca5e          jrz     kogudone_attch
     681                    
     682 00002570     5600          clr     a0
     683 00002580     b20d          move    a0,*a13(ATTACH_PROC),L  ;not attached to anything
         00002590     03e0  
     684                    
     685 000025a0     b622          move    *a1(ATTACH_PROC),a2,L
         000025b0     03e0  
     686 000025c0     484d          cmp     a2,a13
     687 000025d0     cb43          jrne    kogumismatch
     688                    
     689 000025e0     482a          cmp     a1,a10
     690 000025f0     ca55          jreq    kogudone_attch  ;ignore if victim is attached to attacker
     691                    
     692 00002600     b201          move    a0,*a1(ATTACH_PROC),L
         00002610     03e0  
     693 00002620     b201          move    a0,*a1(SHADTRAIL_PROC),L        ;proc is toast
         00002630     0a90  
     694 00002640     b201          move    a0,*a1(ATTIMG_CUR_FRAME),L
         00002650     08e0  
     695 00002660     b001          move    a0,*a1(STARS_FLAG)      ;Gets rid of them...
         00002670     07f0  
     696 00002680     b201          move    a0,*a1(DEBRIS_X),L      ;Gets rid of them...
         00002690     0b10  
     697 000026a0     b821          move    *a1(MY_PAL),*a1(OBJ_PAL)
         000026b0     08a0  
         000026c0     07a0  
     698 000026d0     b42e          move    *a1(OBJ_CONTROL),a14
         000026e0     0780  
     699 000026f0     0b8e          andni   01111b,a14
         00002700 0000000f  
     700 00002720     0bae          ori     DMAWNZ,a14
         00002730 00008002  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   17

     701 00002750     b1c1          move    a14,*a1(OBJ_CONTROL)
         00002760     0780  
     702                    
     703                            ;victim was attached to someone.  Depending on their mode, break
     704                            ; 'em out of it.
     705 00002770     b42e          move    *a1(PLYRMODE),a14
         00002780     05c0  
     706 00002790     0b4e          cmpi    MODE_PUPPET,a14
         000027a0     ffeb  
     707 000027b0     ca26          jreq    kogugoto_stand_anim
     708 000027c0     0b4e          cmpi    MODE_ONGROUND,a14
         000027d0     fffb  
     709 000027e0     ca2d          jreq    koguabort_att_anim
     710 000027f0     0b4e          cmpi    MODE_ATTACHED,a14
         00002800     fffc  
     711 00002810     ca2a          jreq    koguabort_att_anim
     712 00002820     0b4e          cmpi    MODE_INAIR,a14
         00002830     fffd  
     713 00002840     ca27          jreq    koguabort_att_anim
     714 00002850     0b4e          cmpi    MODE_INAIR2,a14
         00002860     ffea  
     715 00002870     ca24          jreq    koguabort_att_anim
     716 00002880     0b4e          cmpi    MODE_DEAD,a14
         00002890     fff6  
     717 000028a0     ca21          jreq    koguabort_att_anim
     718 000028b0     0b4e          cmpi    MODE_PUPPET2,a14
         000028c0     ffee  
     719 000028d0     ca14          jreq    kogugoto_stand_anim
     720 000028e0     0b4e          cmpi    MODE_NORMAL,a14
         000028f0     ffff  
     721 00002900     ca11          jreq    kogugoto_stand_anim
     722 00002910     0b4e          cmpi    MODE_RUNNING,a14
         00002920     fffe  
     723 00002930     ca0e          jreq    kogugoto_stand_anim
     724 00002940     0b4e          cmpi    MODE_HEADHELD,a14
         00002950     ffec  
     725 00002960     ca0b          jreq    kogugoto_stand_anim
     726 00002970     0b4e          cmpi    MODE_HEADHOLD,a14
         00002980     ffef  
     727 00002990     ca08          jreq    kogugoto_stand_anim
     728 000029a0     0b4e          cmpi    MODE_CHOKEHOLD,a14
         000029b0     ffe7  
     729 000029c0     ca05          jreq    kogugoto_stand_anim
     730 000029d0     0b4e          cmpi    MODE_OPPOVERHEAD,a14
         000029e0     fff5  
     731 000029f0     ca02          jreq    kogugoto_stand_anim
     732                    
     733                            .if DEBUG
     734                            LOCKUP  ;bizarre mode - don't know how to fix it.
     735                            .endif
     736 00002a00     c014          jruc    kogudone_attch
     737                    
     738 00002a10           kogumismatch
     739                            .if DEBUG
     740                            LOCKUP  ;I've been hit, but the guy I'm attached to isn't attached
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   18

     741                                    ; to me, so I don't know if I should break him out of what
     742                                    ; he's doing or not...
     743                            .endif
     744 00002a10     c013          jruc    kogudone_attch
     745                    
     746 00002a20           kogugoto_stand_anim
     747 00002a20                   PUSH    a13
     748 00002a30     4c2d          move    a1,a13
     749 00002a40     09e0          movi    xxx_goto_stand_anim,a0
         00002a50 0000a150' 
     750 00002a70     0d5f          calla   change_anim1a
         00002a80 00000000! 
     751 00002aa0                   PULL    a13
     752 00002ab0     c009          jruc    kogudone_attch
     753                    
     754 00002ac0           koguabort_att_anim
     755 00002ac0                   PUSH    a13
     756 00002ad0     4c2d          move    a1,a13
     757 00002ae0     09e0          movi    xxx_aborted_attach_anim,a0
         00002af0 00009d40' 
     758 00002b10     0d5f          calla   change_anim1a
         00002b20 00000000! 
     759 00002b40                   PULL    a13
     760                    
     761 00002b50           kogudone_attch
     762                    
     763                    ;       ;If our TEMP_PAL bit is set, restore the original, since we'll be
     764                    ;       ; aborting the sequence that would otherwise have restored it.
     765                            ;Do this above, whether or not the bit is set, and for anyone
     766                            ; we're attached to too.
     767                    ;       move    *a13(STATUS_FLAGS),a0
     768                    ;       btst    B_TEMP_PAL,a0
     769                    ;       jrz     kogudone_pal
     770                    ;
     771                    ;       ;clear the bit
     772                    ;       andni   M_TEMP_PAL,a0
     773                    ;       move    a0,*a13(STATUS_FLAGS)
     774                    ;
     775                    ;       ;restore the pal
     776                    ;       move    *a13(MY_PAL),*a13(OBJ_PAL)
     777                    ;
     778                    ;kogudone_pal
     779                    
     780                            ;if we're in SMART_ATTACK mode, clear it.
     781 00002b50     57ce          clr     a14
     782 00002b60     b3cd          move    a14,*a13(SMART_TARGET),L
         00002b70     0ca0  
     783 00002b80     b5ae          move    *a13(STATUS_FLAGS),a14
         00002b90     0b50  
     784 00002ba0     0b8e          andni   M_SMART_ATTACK,a14
         00002bb0 00000010  
     785 00002bd0     b1cd          move    a14,*a13(STATUS_FLAGS)
         00002be0     0b50  
     786                    
     787                    ;If a wrestler is running out of control, and gets hit, we need to make the
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   19

     788                    ;GETUP meter go away.
     789                    
     790 00002bf0     b5a0          move    *a13(PLYRMODE),a0
         00002c00     05c0  
     791 00002c10     0b40          cmpi    MODE_BOUNCING,a0
         00002c20     fffa  
     792 00002c30     ca03          jrz     koguyes
     793 00002c40     0b40          cmpi    MODE_RUNNING,a0
         00002c50     fffe  
     794 00002c60     cb03          jrnz    kogucont
     795                    
     796 00002c70           koguyes
     797                            .ref    ditch_getup_meter
     798 00002c70     0d5f          calla   ditch_getup_meter
         00002c80 00000000! 
     799                    
     800 00002ca0           kogucont
     801 00002ca0     5600          clr     a0
     802 00002cb0     b00d          move    a0,*a13(RUN_TIME)
         00002cc0     07b0  
     803                    
     804                    ;If he's attached to someone, detach both of them.  (Note that we're not
     805                    ; checking the blocking case here.  you've no business being in mode_block
     806                    ; if you're attached.  Pbltltlt.)
     807                    
     808                            .if DEBUG
     809                            move    *a13(PLYRMODE),a14
     810                            cmpi    MODE_BLOCK,a14
     811                            jrne    kogux0
     812                            move    *a13(ATTACH_PROC),a14,L
     813                            jrz     kogux0
     814                    
     815                            LOCKUP  ;HEY!  No blocking when attached.  Bogus.
     816                    kogux0
     817                            .endif
     818                    
     819 00002cd0     b7a0          move    *a13(ATTACH_PROC),a0,L
         00002ce0     03e0  
     820 00002cf0     cb09          jrnz    koguattach_check_done
     821                    
     822                            ;attached.  zero attach_procs both ways, and set other guy to NORMAL.
     823 00002d00     57ce          clr     a14
     824 00002d10     b3cd          move    a14,*a13(ATTACH_PROC),L
         00002d20     03e0  
     825 00002d30     b3c0          move    a14,*a0(ATTACH_PROC),L
         00002d40     03e0  
     826 00002d50     09ce          movi    MODE_NORMAL,a14
         00002d60     0000  
     827 00002d70     b1c0          move    a14,*a0(PLYRMODE)
         00002d80     05c0  
     828                    
     829 00002d90           koguattach_check_done
     830 00002d90     0960  kogurets        rets
     831                    
     832                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   20

     833 00002da0           koguhit_table
     834 00002da0 00003840'         .long   hit_punch       ;0      (this file)
     835 00002dc0 00004360'         .long   hit_hdbutt      ;1
     836 00002de0 00006450'         .long   hit_kick        ;2
     837 00002e00 00006ac0'         .long   hit_flykick     ;3
     838 00002e20 00007b60'         .long   hit_grabthrow   ;4
     839                    
     840 00002e40                   REFLONG hit_uprcut      ;5      (react2.asm)
     841 00002e60                   REFLONG hit_lbowdrop    ;6
     842 00002e80                   REFLONG hit_grabhold    ;7
     843 00002ea0                   REFLONG hit_grabfling   ;8
     844 00002ec0                   REFLONG hit_push        ;9
     845                    
     846 00002ee0 00004ed0'         .long   hit_urn         ;10     (This file)
     847 00002f00                   REFLONG hit_bigboot     ;11     (react3.asm)
     848 00002f20                   REFLONG hit_knee        ;12
     849 00002f40 000049a0'         .long   hit_hdbutt2     ;13
     850 00002f60                   REFLONG hit_boxpunch    ;14
     851                    
     852 00002f80                   REFLONG hit_stomp       ;15     (react4.asm)
     853 00002fa0                   REFLONG hit_spinkick    ;16
     854 00002fc0                   REFLONG hit_cline       ;17
     855 00002fe0                   REFLONG hit_headhold    ;18
     856 00003000                   REFLONG hit_jumpkick    ;19
     857                    
     858 00003020                   REFLONG hit_run         ;20     (react5.asm)
     859 00003040                   REFLONG hit_puppet      ;21
     860 00003060                   REFLONG hit_backhand    ;22
     861 00003080                   REFLONG hit_buzz        ;23
     862 000030a0                   REFLONG hit_haymaker    ;24
     863                    
     864 000030c0                   REFLONG hit_blbowdrop   ;25     (react2.asm)
     865 000030e0                   REFLONG hit_bstomp      ;26     (react4.asm)
     866 00003100                   REFLONG hit_headknees   ;27     (react3.asm)
     867                    
     868 00003120                   REFLONG hit_earslap     ;28     (react5.asm) - MARK
     869 00003140                   REFLONG hit_hammer      ;29     (react4.asm)
     870                    
     871 00003160                   REFLONG hit_buttstomp   ;30     (react4.asm)
     872 00003180                   REFLONG hit_puppet2     ;31     (react5.asm) - MARK
     873 000031a0                   REFLONG hit_puppet_hdgrab       ;32
     874 000031c0 00005d80'         .long   hit_tomb        ;33     (This file)
     875 000031e0 00007440'         .long   hit_bigknee     ;34
     876                    
     877 00003200                   REFLONG hit_shnbfkik    ;35     (react8.asm) - JASON
     878 00003220                   REFLONG hit_shnspdkik   ;36
     879 00003240                   REFLONG hit_shnspdkik2  ;37
     880 00003260                   REFLONG hit_hitcheck    ;38
     881 00003280                   REFLONG hit_combo_uprcut        ;39     (react2.asm) - why was this taken out ????
     882                    
     883 000032a0                   REFLONG hit_rslash      ;40     (react9.asm) - JASON
     884 000032c0                   REFLONG hit_headdslash  ;41
     885 000032e0                   REFLONG hit_headuslash  ;42
     886 00003300                   REFLONG hit_rslash      ;43     (same rxn, diff damage)
     887 00003320 00005730'         .long   hit_hdbutt_stay ;44     (This file)
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   21

     888                    
     889 00003340 00003840'         .long   hit_fire_punch  ;45
     890 00003360                   REFLONG hit_bstomp2     ;46     (react4.asm)
     891 00003380                   REFLONG hit_gutpush     ;47     (react2.asm)
     892 000033a0 000063d0'         .long   hit_super_kick  ;48
     893 000033c0 00003840'         .long   hit_punch       ;49     (AMODE_PUNCH2)
     894 000033e0 00004ed0'         .long   hit_urn         ;50     (AMODE_HDBUTT3)
     895 00003400                   REFLONG hit_lbowdrop    ;51     (AMODE_LBOWDROP2)
     896 00003420                   REFLONG hit_stomp       ;52     (AMODE_STOMP2 - react4.asm)
     897                    
     898 00003440                   REFLONG hit_puppet_noflail ;53  (react5.asm)
     899 00003460                   REFLONG hit_puppet_toss ;54     (react5.asm)
     900 00003480                   REFLONG hit_napalm      ;55     (react9.asm)
     901                    
     902                    *****************************************************************************
     903                    ;All hit routine use this block code
     904                    ;Perhaps the DAMAGE amount should be table driven
     905                    ;Perhaps we push him away after x blocks?
     906                    
     907                    
     908 000034a0            SUBR   block_hit
     909                    
     910                    ;Slide opponent away from attacker
     911 000034a0     09e2          movi    [4,8000h],a2
         000034b0 00048000  
     912 000034d0     b540          move    *a10(OBJ_XPOSINT),a0
         000034e0     0110  
     913 000034f0     b5a1          move    *a13(OBJ_XPOSINT),a1
         00003500     0110  
     914 00003510     4801          cmp     a0,a1                   ;offx - defx
     915 00003520     c701          jrgt    vzgafall_right          ;attacker on left
     916 00003530     03a2          neg     a2
     917 00003540           vzgafall_right
     918 00003540     b24d          move    a2,*a13(OBJ_XVEL),L
         00003550     02d0  
     919                    
     920                    ;FIX!!
     921                    ;We need to put in grunts or something... This doesn't work!
     922 00003560     0d5f          CALLA   DO_BLOCK_SND
         00003570 00000000! 
     923                    
     924 00003590                   FACETBL hitblock_tbl
     925 00003600     0d5f          calla   change_anim1a
         00003610 00000000! 
     926                    
     927 00003630           vzgaisdead
     928 00003630     0d5f          calla   wres_collis_off
         00003640 00000000! 
     929 00003660     0960          rets
     930                    
     931                    *****************************************************************************
     932                    ;All hit routine use this block code
     933                    ;Perhaps the DAMAGE amount should be table driven
     934                    ;Perhaps we push him away after x blocks?
     935                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   22

     936                    
     937 00003670            SUBR   block_hit_flail
     938                    
     939                    ;Slide opponent away from attacker
     940 00003670     09e2          movi    [6,8000h],a2
         00003680 00068000  
     941 000036a0     b540          move    *a10(OBJ_XPOSINT),a0
         000036b0     0110  
     942 000036c0     b5a1          move    *a13(OBJ_XPOSINT),a1
         000036d0     0110  
     943 000036e0     4801          cmp     a0,a1                   ;offx - defx
     944 000036f0     c701          jrgt    lmunfall_right          ;attacker on left
     945 00003700     03a2          neg     a2
     946 00003710           lmunfall_right
     947 00003710     b24d          move    a2,*a13(OBJ_XVEL),L
         00003720     02d0  
     948                    
     949                    ;FIX!!
     950                    ;We need to put in grunts or something... This doesn't work!
     951 00003730     0d5f          CALLA   DO_BLOCK_SND
         00003740 00000000! 
     952                    
     953                    ;       FACETBL hitblock_tbl
     954 00003760                   FACETBL hitblock_flail_tbl
     955 000037d0     0d5f          calla   change_anim1a
         000037e0 00000000! 
     956                    
     957 00003800           lmunisdead
     958 00003800     0d5f          calla   wres_collis_off
         00003810 00000000! 
     959 00003830     0960          rets
     960                    ;
     961                    ;
     962                    ;
     963                    ;
     964                    ;
     965                    ;       CALLA   DO_BLOCK_SND
     966                    ;
     967                    ;       FACETBL hitblock_flail_tbl
     968                    ;       calla   change_anim1a
     969                    ;
     970                    ;lmunisdead
     971                    ;       calla   wres_collis_off
     972                    ;       rets
     973                    
     974                    *****************************************************************************
     975                    ;AMODE_PUNCH    0
     976 00003840           hit_unused      ;13
     977 00003840           hit_punch
     978 00003840           hit_fire_punch
     979                    
     980 00003840     b5a1          move    *a13(PLYRMODE),a1
         00003850     05c0  
     981 00003860     0b41          cmpi    MODE_BLOCK,a1
         00003870     fff8  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   23

     982 00003880     cb03          jrnz    tgmqnoblock
     983                    
     984                    ;       move    *a13(FACING_DIR),a0             ;check for hit
     985                    ;       move    *a13(NEW_FACING_DIR),a1         ;from behind
     986                    ;       and     a0,a1
     987                    ;       andi    MOVE_LEFT|MOVE_RIGHT,a1
     988                    ;       jrz     tgmqnoblock
     989                    
     990 00003890     0d3f          callr   block_hit
         000038a0     ffbf  
     991 000038b0     0960          rets
     992                    
     993 000038c0           tgmqnoblock
     994                    
     995                    ;All of the damage amounts need to be in lookup tables linked to the wrestler
     996                    ;who actually struck the blow.
     997                    
     998 000038c0     0d5f          CALLA   CALL_FACE_HIT
         000038d0 00000000! 
     999                    
    1000 000038f0                   GETLIFE
    1001 00003940     ca71          jrz     tgmqisdead
    1002                    
    1003                    ;       calla   create_damage_points
    1004                    
    1005 00003950                   WRSNDX  PUNCH_L1,PUNCH_L2
    1006                    
    1007                    ;       move    *a13(PLYR_DIZZY),a0
    1008                    ;       jrnz    tgmqdiz
    1009                    ;
    1010                    ;       calla   check_dizzy
    1011                    ;       jrz     tgmqnot_dizzy
    1012                    ;
    1013                    ;       movi    5*TSEC,a0
    1014                    ;       move    a0,*a13(GETUP_TIME)
    1015                    ;
    1016                    ;tgmqdiz
    1017                    ;       FACE24TBL head_hit_dizzy_tbl
    1018                    ;       calla   change_anim1a
    1019                    ;
    1020                    ;tgmqisdead
    1021                    ;       calla   wres_collis_off
    1022                    ;
    1023                    ;       rets
    1024                    ;
    1025                    ;tgmqnot_dizzy
    1026                    ;
    1027                    ;;      calla   inc_burnout
    1028                    ;
    1029                    ;;Test code
    1030                    ;;      cmpi    6,a1                    ;a1 = consecutive hits
    1031                    ;;      jrlt    tgmqok
    1032                    ;;      LOCKUP
    1033                    ;;tgmqok
    1034                    ;
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   24

    1035 00003c90                   SETMODE NORMAL
    1036                    
    1037                    ;tgmqdo_hit
    1038 00003d40     b5ae          move    *a13(OBJ_YPOSINT),a14
         00003d50     0130  
    1039 00003d60     b5a0          move    *a13(GROUND_Y),a0
         00003d70     0570  
    1040 00003d80     440e          sub     a0,a14
    1041 00003d90     0b4e          cmpi    20,a14
         00003da0     ffeb  
    1042 00003db0     c52e          jrge    tgmqfall_back
    1043                    
    1044 00003dc0     b5a0          move    *a13(CONSECUTIVE_HITS),a0
         00003dd0     0e50  
    1045 00003de0     1020          inc     a0
    1046 00003df0     b00d          move    a0,*a13(CONSECUTIVE_HITS)
         00003e00     0e50  
    1047 00003e10     14c0          subk    6,a0
    1048 00003e20     cb13          jrnz    tgmqok
    1049                    
    1050 00003e30     5600          clr     a0
    1051 00003e40     b00d          move    a0,*a13(CONSECUTIVE_HITS)
         00003e50     0e50  
    1052                    ;Consecutive hits without blocking/walking
    1053                    ;Do push away
    1054                    
    1055                            ;go to tgmqok if opp is in combo mode
    1056 00003e60     b7ae          move    *a13(WHOHITME),a14,L
         00003e70     04e0  
    1057 00003e80     b5ce          move    *a14(COMBO_COUNT),a14
         00003e90     0af0  
    1058 00003ea0     cb0b          jrnz    tgmqok
    1059                    
    1060 00003eb0                   FACETBL tgmqlosebal
    1061 00003f20     0d5f          calla   change_anim1a
         00003f30 00000000! 
    1062                    
    1063                    ;       movi    [5,0],a2
    1064                    ;
    1065                    ;       move    *a10(OBJ_XPOSINT),a0
    1066                    ;       move    *a13(OBJ_XPOSINT),a1
    1067                    ;       cmp     a0,a1                   ;offx - defx
    1068                    ;       jrgt    tgmqfall_right          ;attacker on left
    1069                    ;       neg     a2
    1070                    ;tgmqfall_right
    1071                    ;       move    a2,*a13(OBJ_XVEL),L
    1072                    
    1073 00003f50     c010          jruc    tgmqisdead
    1074                    
    1075 00003f60           tgmqok
    1076                    
    1077                            ;normal punch
    1078 00003f60                   FACE24TBL head_hit_tbl
    1079 00004030     0d5f          calla   change_anim1a
         00004040 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   25

    1080                    
    1081 00004060           tgmqisdead
    1082 00004060     0d5f          calla   wres_collis_off
         00004070 00000000! 
    1083 00004090     0960          rets
    1084                    
    1085 000040a0           tgmqfall_back
    1086 000040a0                   FACETBL fall_back_tbl
    1087                    
    1088 00004110     0d5f          calla   change_anim1a
         00004120 00000000! 
    1089 00004140     0d5f          calla   wres_collis_off
         00004150 00000000! 
    1090                    
    1091 00004170     09e2          movi    [3,0],a2
         00004180 00030000  
    1092 000041a0     b540          move    *a10(OBJ_XPOSINT),a0
         000041b0     0110  
    1093 000041c0     b5a1          move    *a13(OBJ_XPOSINT),a1
         000041d0     0110  
    1094 000041e0     4801          cmp     a0,a1                   ;offx - defx
    1095 000041f0     c701          jrgt    tgmqfall_right1         ;attacker on left
    1096 00004200     03a2          neg     a2
    1097 00004210           tgmqfall_right1
    1098 00004210     b24d          move    a2,*a13(OBJ_XVEL),L
         00004220     02d0  
    1099                    
    1100 00004230     0960          rets
    1101                    
    1102 00004240           tgmqlosebal
    1103 00004240                   REFLONG hrt_4_losebal_anim      ;0 Bret Hart
    1104 00004260                   REFLONG rzr_4_losebal_anim      ;1 Razor Ramon
    1105 00004280                   REFLONG und_4_losebal_anim      ;2 Undertaker
    1106 000042a0                   REFLONG yok_4_losebal_anim      ;3 Yokozuna
    1107 000042c0                   REFLONG shn_4_losebal_anim      ;4 Shawn Michaels
    1108 000042e0                   REFLONG bam_4_losebal_anim      ;5 Bam Bam
    1109 00004300                   REFLONG dnk_4_losebal_anim      ;6 Doink
    1110 00004320                   REFLONG dnk_4_losebal_anim      ;7 spare
    1111 00004340                   REFLONG lex_4_losebal_anim      ;8 Lex Luger
    1112                    
    1113                    *****************************************************************************
    1114                    ;AMODE_HDBUTT   1
    1115 00004360           hit_hdbutt
    1116                    
    1117 00004360     b5a1          move    *a13(PLYRMODE),a1
         00004370     05c0  
    1118 00004380     0b41          cmpi    MODE_BLOCK,a1
         00004390     fff8  
    1119 000043a0     cb03          jrnz    gjnrnoblock
    1120                    
    1121 000043b0     0d3f          callr   block_hit
         000043c0     ff0d  
    1122 000043d0     0960          rets
    1123                    
    1124 000043e0           gjnrnoblock
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   26

    1125                    
    1126 000043e0     0d5f          CALLA   CALL_FACE_HIT
         000043f0 00000000! 
    1127                    
    1128 00004410                   GETLIFE
    1129 00004460     ca4f          jrz     gjnrisdead
    1130                    
    1131 00004470                   WRSNDX  HDBUTT_L1,HDBUTT_L2
    1132                    
    1133                    ;       move    *a13(PLYR_DIZZY),a0
    1134                    ;       jrnz    gjnrdiz
    1135                    ;
    1136                    ;       calla   check_dizzy
    1137                    ;       jrz     gjnrnot_dizzy
    1138                    ;
    1139                    ;       movi    5*TSEC,a0
    1140                    ;       move    a0,*a13(GETUP_TIME)
    1141                    ;
    1142                    ;gjnrdiz
    1143                    ;       FACE24TBL head_hit_dizzy_tbl
    1144                    ;       calla   change_anim1a
    1145                    ;
    1146                    ;gjnrnot_dizzy
    1147                    ;       calla   inc_burnout
    1148                    
    1149 000047b0                   SETMODE NORMAL
    1150                    
    1151 00004860                   FACE24TBL head_hit2_tbl
    1152 00004930     0d5f          calla   change_anim1a
         00004940 00000000! 
    1153                    
    1154 00004960           gjnrisdead
    1155 00004960     0d5f          calla   wres_collis_off
         00004970 00000000! 
    1156                    
    1157 00004990     0960          rets
    1158                    
    1159                    *****************************************************************************
    1160                    ;AMODE_HDBUTT2  13
    1161 000049a0           hit_hdbutt2
    1162                    ;From head hold attacks
    1163                    
    1164 000049a0     0d5f          CALLA   CALL_FACE_HIT
         000049b0 00000000! 
    1165                    
    1166 000049d0                   WRSNDX  HDBUTT_L1,HDBUTT_L2
    1167                    
    1168 00004d10                   FACE24TBL head_hit2_tbl
    1169 00004de0     0d5f          calla   change_anim1a
         00004df0 00000000! 
    1170                    
    1171 00004e10     09e0          movi    3C000h,a0
         00004e20 0003c000  
    1172 00004e40     b20d          move    a0,*a13(OBJ_YVEL),L
         00004e50     02f0  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   27

    1173                    
    1174 00004e60     5600          clr     a0
    1175 00004e70     b20d          move    a0,*a13(OBJ_XVEL),L
         00004e80     02d0  
    1176                    
    1177 00004e90     0d5f          calla   wres_collis_off
         00004ea0 00000000! 
    1178                    
    1179 00004ec0     0960          rets
    1180                    
    1181                    *****************************************************************************
    1182                    ;AMODE_URN      10
    1183 00004ed0           hit_urn
    1184                    
    1185                    ;From slap type attacks that want a face hit reaction!
    1186                    
    1187 00004ed0     b5a1          move    *a13(PLYRMODE),a1
         00004ee0     05c0  
    1188 00004ef0     0b41          cmpi    MODE_BLOCK,a1
         00004f00     fff8  
    1189 00004f10     cb03          jrnz    dzeunoblock
    1190                    
    1191 00004f20     0d3f          callr   block_hit_flail
         00004f30     fe73  
    1192 00004f40     0960          rets
    1193                    
    1194 00004f50           dzeunoblock
    1195                    
    1196 00004f50     0d5f          CALLA   CALL_FACE_HIT
         00004f60 00000000! 
    1197                    
    1198 00004f80                   GETLIFE
    1199 00004fd0     ca57          jrz     dzeuisdead
    1200                    
    1201 00004fe0                   WRSNDX  HDBUTT_L1,HDBUTT_L2
    1202                    
    1203 00005320                   SETMODE NORMAL
    1204 000053d0     b5ae          move    *a13(OBJ_YPOSINT),a14
         000053e0     0130  
    1205 000053f0     b5a0          move    *a13(GROUND_Y),a0
         00005400     0570  
    1206 00005410     440e          sub     a0,a14
    1207 00005420     0b4e          cmpi    20,a14
         00005430     ffeb  
    1208 00005440     c514          jrge    dzeufall_back
    1209                    
    1210                    
    1211 00005450                   FACE24TBL head_hit2_tbl
    1212 00005520     0d5f          calla   change_anim1a
         00005530 00000000! 
    1213 00005550           dzeuisdead
    1214 00005550     0d5f          calla   wres_collis_off
         00005560 00000000! 
    1215                    
    1216 00005580     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   28

    1217                    
    1218 00005590           dzeufall_back
    1219 00005590                   FACETBL fall_back_tbl
    1220                    
    1221 00005600     0d5f          calla   change_anim1a
         00005610 00000000! 
    1222 00005630     0d5f          calla   wres_collis_off
         00005640 00000000! 
    1223                    
    1224 00005660     09e2          movi    [3,0],a2
         00005670 00030000  
    1225 00005690     b540          move    *a10(OBJ_XPOSINT),a0
         000056a0     0110  
    1226 000056b0     b5a1          move    *a13(OBJ_XPOSINT),a1
         000056c0     0110  
    1227 000056d0     4801          cmp     a0,a1                   ;offx - defx
    1228 000056e0     c701          jrgt    dzeufall_right          ;attacker on left
    1229 000056f0     03a2          neg     a2
    1230 00005700           dzeufall_right
    1231 00005700     b24d          move    a2,*a13(OBJ_XVEL),L
         00005710     02d0  
    1232                    
    1233 00005720     0960          rets
    1234                    
    1235                    
    1236                    
    1237                    *****************************************************************************
    1238                    ;AMODE_HDBUTT_STAY      44
    1239                    ;No xvel will happen
    1240 00005730           hit_hdbutt_stay
    1241 00005730     b5a1          move    *a13(PLYRMODE),a1
         00005740     05c0  
    1242 00005750     0b41          cmpi    MODE_BLOCK,a1
         00005760     fff8  
    1243 00005770     cb03          jrnz    hgtpnoblock
    1244                    
    1245 00005780     0d3f          callr   block_hit_flail
         00005790     fded  
    1246 000057a0     0960          rets
    1247                    
    1248 000057b0           hgtpnoblock
    1249                    
    1250 000057b0     0d5f          CALLA   CALL_FACE_HIT
         000057c0 00000000! 
    1251                    
    1252                    ;       calla   inc_burnout
    1253                    
    1254 000057e0                   SETMODE NORMAL
    1255                    
    1256 00005890                   WRSNDX  HDBUTT_L1,HDBUTT_L2
    1257                    
    1258 00005bd0                   FACE24TBL head_hit2_tbl
    1259 00005ca0     0d5f          calla   change_anim1a
         00005cb0 00000000! 
    1260                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   29

    1261 00005cd0     0d5f          calla   wres_collis_off
         00005ce0 00000000! 
    1262                    
    1263 00005d00     09ce          movi    6*60,a14
         00005d10     0168  
    1264 00005d20     b1cd          move    a14,*a13(DELAY_METER)
         00005d30     0ad0  
    1265                    
    1266 00005d40     5600          clr     a0
    1267 00005d50     b20d          move    a0,*a13(OBJ_XVEL),L
         00005d60     02d0  
    1268                    
    1269 00005d70     0960          rets
    1270                    
    1271                    *****************************************************************************
    1272                    ;AMODE_TOMB     33
    1273 00005d80           hit_tomb
    1274                    
    1275 00005d80     b5a1          move    *a13(PLYRMODE),a1
         00005d90     05c0  
    1276 00005da0     0b41          cmpi    MODE_BLOCK,a1
         00005db0     fff8  
    1277 00005dc0     cb03          jrnz    fpsrnoblock
    1278                    
    1279 00005dd0     0d3f          callr   block_hit_flail
         00005de0     fd88  
    1280 00005df0     0960          rets
    1281                    
    1282 00005e00           fpsrnoblock
    1283                    
    1284 00005e00     0d5f          CALLA   CALL_FACE_HIT
         00005e10 00000000! 
    1285                    
    1286 00005e30                   GETLIFE
    1287 00005e80     ca50          jrz     fpsrisdead
    1288                    
    1289 00005e90     0d5f          calla   DO_SCREAM
         00005ea0 00000000! 
    1290                    
    1291                    
    1292                    ;       move    *a13(PLYR_DIZZY),a0
    1293                    ;       jrnz    fpsrdiz
    1294                    ;
    1295                    ;       calla   check_dizzy
    1296                    ;       jrz     fpsrnot_dizzy
    1297                    ;
    1298                    ;       movi    5*TSEC,a0
    1299                    ;       move    a0,*a13(GETUP_TIME)
    1300                    ;
    1301                    ;fpsrdiz
    1302                    ;       FACE24TBL head_hit_dizzy_tbl
    1303                    ;       calla   change_anim1a
    1304                    ;
    1305                    ;fpsrisdead
    1306                    ;       calla   wres_collis_off
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   30

    1307                    ;       rets
    1308                    ;
    1309                    ;fpsrnot_dizzy
    1310                    
    1311 00005ec0     b5ae          move    *a13(PLYRMODE),a14
         00005ed0     05c0  
    1312 00005ee0     0b4e          cmpi    MODE_ONGROUND,a14
         00005ef0     fffb  
    1313 00005f00     ca3e          jreq    fpsrongnd
    1314 00005f10     0b4e          cmpi    MODE_DEAD,a14
         00005f20     fff6  
    1315 00005f30     ca3b          jreq    fpsrongnd
    1316                    
    1317                    
    1318                    
    1319 00005f40                   SETMODE NORMAL
    1320 00005ff0     b5ae          move    *a13(OBJ_YPOSINT),a14
         00006000     0130  
    1321 00006010     b5a0          move    *a13(GROUND_Y),a0
         00006020     0570  
    1322 00006030     440e          sub     a0,a14
    1323 00006040     0b4e          cmpi    20,a14
         00006050     ffeb  
    1324 00006060     c50e          jrge    fpsrfall_back
    1325                    
    1326 00006070                   FACE24TBL head_hit2_tbl
    1327 00006140     c021          jruc    fpsranim
    1328                    
    1329 00006150           fpsrfall_back
    1330 00006150                   FACETBL fall_back_tbl
    1331                    
    1332 000061c0     0d5f          calla   change_anim1a
         000061d0 00000000! 
    1333 000061f0     0d5f          calla   wres_collis_off
         00006200 00000000! 
    1334                    
    1335 00006220     09e2          movi    [3,0],a2
         00006230 00030000  
    1336 00006250     b540          move    *a10(OBJ_XPOSINT),a0
         00006260     0110  
    1337 00006270     b5a1          move    *a13(OBJ_XPOSINT),a1
         00006280     0110  
    1338 00006290     4801          cmp     a0,a1                   ;offx - defx
    1339 000062a0     c701          jrgt    fpsrfall_right          ;attacker on left
    1340 000062b0     03a2          neg     a2
    1341 000062c0           fpsrfall_right
    1342 000062c0     b24d          move    a2,*a13(OBJ_XVEL),L
         000062d0     02d0  
    1343                    
    1344 000062e0     0960          rets
    1345                    
    1346                    
    1347 000062f0           fpsrongnd       FACETBL hitonground_tbl
    1348 00006360     0d5f  fpsranim        calla   change_anim1a
         00006370 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   31

    1349                    
    1350 00006390           fpsrisdead
    1351 00006390     0d5f          calla   wres_collis_off
         000063a0 00000000! 
    1352                    
    1353 000063c0     0960          rets
    1354                    
    1355                    *****************************************************************************
    1356                    ;AMODE_SUPER_KICK       48
    1357 000063d0           hit_super_kick
    1358                    
    1359 000063d0     b5a1          move    *a13(PLYRMODE),a1
         000063e0     05c0  
    1360 000063f0     0b41          cmpi    MODE_BLOCK,a1
         00006400     fff8  
    1361 00006410     cb0b          jrnz    zwlpnoblock
    1362                    
    1363 00006420     0d3f          callr   block_hit_flail
         00006430     fd23  
    1364 00006440     0960          rets
    1365                    
    1366                    ;AMODE_KICK     2
    1367 00006450           hit_kick
    1368                    
    1369                    
    1370 00006450     b5a1          move    *a13(PLYRMODE),a1
         00006460     05c0  
    1371 00006470     0b41          cmpi    MODE_BLOCK,a1
         00006480     fff8  
    1372 00006490     cb03          jrnz    zwlpnoblock
    1373                    
    1374 000064a0     0d3f          callr   block_hit
         000064b0     fcfe  
    1375 000064c0     0960          rets
    1376                    
    1377 000064d0           zwlpnoblock
    1378                    
    1379 000064d0     0d5f          CALLA   CALL_MID_HIT
         000064e0 00000000! 
    1380                    
    1381 00006500                   GETLIFE
    1382 00006550     ca52          jrz     zwlpisdead
    1383                    
    1384 00006560                   WRSNDX  KICK_L1,KICK_L2
    1385                    
    1386                    ;       move    *a13(PLYR_DIZZY),a0
    1387                    ;       jrnz    zwlpdiz
    1388                    ;
    1389                    ;       calla   check_dizzy
    1390                    ;       jrz     zwlpnot_dizzy
    1391                    ;
    1392                    ;       movi    5*TSEC,a0
    1393                    ;       move    a0,*a13(GETUP_TIME)
    1394                    ;
    1395                    ;zwlpdiz
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   32

    1396                    ;       FACE24TBL body_hit_dizzy_tbl
    1397                    ;       calla   change_anim1a
    1398                    ;
    1399                    ;zwlpisdead
    1400                    ;       calla   wres_collis_off
    1401                    ;       rets
    1402                    ;
    1403                    ;zwlpnot_dizzy
    1404                    ;
    1405                    ;       calla   inc_burnout
    1406                    
    1407 000068a0                   SETMODE NORMAL
    1408                    
    1409 00006950     5600          clr     a0
    1410 00006960     b00d          move    a0,*a13(USR_VAR1)
         00006970     0850  
    1411                    
    1412 00006980                   FACE24TBL body_hit_tbl
    1413 00006a50     0d5f          calla   change_anim1a
         00006a60 00000000! 
    1414 00006a80           zwlpisdead
    1415 00006a80     0d5f          calla   wres_collis_off
         00006a90 00000000! 
    1416 00006ab0     0960          rets
    1417                    
    1418                    
    1419                    *****************************************************************************
    1420                    ;AMODE_FLYKICK  3
    1421 00006ac0            SUBR   hit_flykick
    1422                    
    1423                    
    1424                    ;Any hit mode which does a fall back sequence onto the ground
    1425                    ;will not check dizzy at the start.
    1426                    ;The check dizzy happens in the sequence.
    1427                    
    1428 00006ac0     b740          move    *a10(OBJ_XVEL),a0,L     ;slow down doink's
         00006ad0     02d0  
    1429 00006ae0     2be0          sra     1,a0                    ;x_vel after collis
    1430 00006af0     0380          abs     a0
    1431 00006b00     0b60          cmpi    20000h,a0
         00006b10 fffdffff  
    1432 00006b30     c403          jrlt    vlywokv
    1433 00006b40     09e0          movi    40000h,a0
         00006b50 00040000  
    1434 00006b70           vlywokv
    1435 00006b70     b74e          move    *a10(OBJ_XVEL),a14,L
         00006b80     02d0  
    1436 00006b90     ce01          jrn     vlywokv2
    1437 00006ba0     03a0          neg     a0
    1438 00006bb0           vlywokv2
    1439 00006bb0     b20a          move    a0,*a10(OBJ_XVEL),L
         00006bc0     02d0  
    1440 00006bd0     09e0          movi    40000h,a0
         00006be0 00040000  
    1441 00006c00     b20a          move    a0,*a10(OBJ_YVEL),L
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   33

         00006c10     02f0  
    1442                    
    1443 00006c20     b5a1          move    *a13(PLYRMODE),a1
         00006c30     05c0  
    1444 00006c40     0b41          cmpi    MODE_BLOCK,a1
         00006c50     fff8  
    1445 00006c60     cb04          jrnz    vlywnoblock
    1446                    
    1447 00006c70     0d3f          callr   block_hit_flail
         00006c80     fc9e  
    1448 00006c90     0de0          setc                            ;return aborted
    1449 00006ca0     0960          rets
    1450                    
    1451 00006cb0           vlywnoblock
    1452                            ;HACK! - Lex's flying kicks don't knock you down.  Use CALL_MID_HIT.
    1453 00006cb0     b74e          move    *a10(ANIBASE),a14,L
         00006cc0     0670  
    1454 00006cd0     0b6e          cmpi    lex_flying_kick_anim,a14
         00006ce0 ffffffff! 
    1455 00006d00     ca08          jreq    vlywmidhit
    1456 00006d10     0b6e          cmpi    lex_super_kick_anim,a14
         00006d20 ffffffff! 
    1457 00006d40     ca04          jreq    vlywmidhit
    1458                    
    1459 00006d50     0d5f          calla   CALL_DROP_KICK
         00006d60 00000000! 
    1460 00006d80     c003          jruc    vlywsnd_done
    1461 00006d90     0d5f  vlywmidhit      calla   CALL_MID_HIT
         00006da0 00000000! 
    1462                    
    1463 00006dc0           vlywsnd_done
    1464 00006dc0                   WRSNDX  FLYKICK_L1,FLYKICK_L2
    1465                    
    1466 00007100                   GETLIFE
    1467 00007150     ca0b          jrz     vlywskip
    1468                    
    1469                    
    1470                    ;       calla   inc_burnout
    1471                    
    1472 00007160                   SETMODE NORMAL
    1473                    
    1474 00007210           vlywskip
    1475                    
    1476                    ;       move    *a10(OBJ_XVEL),a0,L     ;slow down doink's
    1477                    ;       sra     1,a0                    ;x_vel after collis
    1478                    ;       abs     a0
    1479                    ;       cmpi    28000h,a0
    1480                    ;       jrlt    vlywokv
    1481                    ;       movi    28000h,a0
    1482                    ;vlywokv
    1483                    ;       move    *a10(OBJ_XVEL),a14,L
    1484                    ;       jrn     vlywokv2
    1485                    ;       neg     a0
    1486                    ;vlywokv2
    1487                    ;       move    a0,*a10(OBJ_XVEL),L
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   34

    1488                    ;       movi    40000h,a0
    1489                    ;       move    a0,*a10(OBJ_YVEL),L
    1490                    
    1491 00007210     5600          clr     a0
    1492 00007220     b00d          move    a0,*a13(ROLL_POS)
         00007230     0450  
    1493                    
    1494                    ;       move    *a13(PLYR_DIZZY),a0
    1495                    ;       jrnz    vlywdiz
    1496                    
    1497 00007240     0d5f          calla   set_getup_time
         00007250 00000000! 
    1498                    
    1499                    
    1500                    ;vlywdiz
    1501 00007270                   FACETBL fall_back_tbl
    1502 000072e0     0d5f          calla   change_anim1a
         000072f0 00000000! 
    1503                    
    1504 00007310     09e2          movi    [2,0],a2
         00007320 00020000  
    1505 00007340     b540          move    *a10(OBJ_XPOSINT),a0
         00007350     0110  
    1506 00007360     b5a1          move    *a13(OBJ_XPOSINT),a1
         00007370     0110  
    1507 00007380     4801          cmp     a0,a1                   ;offx - defx
    1508 00007390     c703          jrgt    vlywfall_right          ;attacker on left
    1509 000073a0     09e2          movi    [-2,0],a2
         000073b0 fffe0000  
    1510 000073d0           vlywfall_right
    1511 000073d0     b24d          move    a2,*a13(OBJ_XVEL),L
         000073e0     02d0  
    1512                    
    1513 000073f0           vlywisdead
    1514 000073f0     0d5f          calla   wres_collis_off
         00007400 00000000! 
    1515 00007420     0320          clrc                            ;return okay
    1516 00007430     0960          rets
    1517                    
    1518                    *****************************************************************************
    1519                    ;AMODE_BIGKNEE  34
    1520 00007440           hit_bigknee
    1521                    
    1522                    ;Any hit mode which does a fall back sequence onto the ground
    1523                    ;will not check dizzy at the start.
    1524                    ;The check dizzy happens in the sequence.
    1525                    
    1526 00007440     b5a1          move    *a13(PLYRMODE),a1
         00007450     05c0  
    1527 00007460     0b41          cmpi    MODE_BLOCK,a1
         00007470     fff8  
    1528 00007480     cb03          jrnz    rkxvnoblock
    1529                    
    1530 00007490     0d3f          callr   block_hit_flail
         000074a0     fc1c  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   35

    1531 000074b0     0960          rets
    1532                    
    1533 000074c0           rkxvnoblock
    1534 000074c0     0d5f          calla   CALL_DROP_KICK
         000074d0 00000000! 
    1535 000074f0                   WRSNDX  FLYKICK_L1,FLYKICK_L2
    1536                    
    1537 00007830                   GETLIFE
    1538 00007880     ca0b          jrz     rkxvskip
    1539                    
    1540                    
    1541                    ;       calla   inc_burnout
    1542                    
    1543 00007890                   SETMODE NORMAL
    1544                    
    1545 00007940           rkxvskip
    1546                    ;       move    *a10(OBJ_XVEL),a0,L     ;slow down doink's
    1547                    ;       sra     1,a0                    ;x_vel after collis
    1548                    ;       neg     a0
    1549                    ;       move    a0,*a10(OBJ_XVEL),L
    1550                    ;       movi    40000h,a0
    1551                    ;       move    a0,*a10(OBJ_YVEL),L
    1552                    
    1553 00007940     5600          clr     a0
    1554 00007950     b00d          move    a0,*a13(ROLL_POS)
         00007960     0450  
    1555                    
    1556                    ;       move    *a13(PLYR_DIZZY),a0
    1557                    ;       jrnz    rkxvdiz
    1558                    
    1559 00007970     0d5f          calla   set_getup_time
         00007980 00000000! 
    1560                    
    1561                    ;rkxvdiz
    1562 000079a0                   FACETBL fall_back_tbl
    1563 00007a10     0d5f          calla   change_anim1a
         00007a20 00000000! 
    1564                    
    1565 00007a40     09e2          movi    [4,0],a2
         00007a50 00040000  
    1566 00007a70     b540          move    *a10(OBJ_XPOSINT),a0
         00007a80     0110  
    1567 00007a90     b5a1          move    *a13(OBJ_XPOSINT),a1
         00007aa0     0110  
    1568 00007ab0     4801          cmp     a0,a1                   ;offx - defx
    1569 00007ac0     c703          jrgt    rkxvfall_right          ;attacker on left
    1570 00007ad0     09e2          movi    -[4,0],a2
         00007ae0 fffc0000  
    1571 00007b00           rkxvfall_right
    1572 00007b00     b24d          move    a2,*a13(OBJ_XVEL),L
         00007b10     02d0  
    1573                    
    1574 00007b20           rkxvisdead
    1575 00007b20     0d5f          calla   wres_collis_off
         00007b30 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   36

    1576 00007b50     0960          rets
    1577                    
    1578                    
    1579                    
    1580                    *****************************************************************************
    1581                    ;AMODE_GRABTHROW 4
    1582 00007b60           hit_grabthrow
    1583                    
    1584 00007b60     0960          rets
    1585                    
    1586                    *****************************************************************************
    1587                    ; HIT WHILE STANDING ON TURNBUCKLE -- DOESN'T MATTER WHAT THE AMODE WAS
    1588 00007b70           hit_ontbukl
    1589                    
    1590                    
    1591 00007b70                   WRSNDX  FLYKICK_L1,FLYKICK_L2
    1592                    
    1593 00007eb0                   FACETBL fall_back_tbukl_tbl
    1594 00007f20     0d5f          calla   change_anim1a
         00007f30 00000000! 
    1595                    
    1596 00007f50                   SETMODE INAIR
    1597                    
    1598                            ;set the DEAD_ANIM bit so that if this hit killed us, we won't
    1599                            ; get the normal fall_back_anim instead.
    1600 00008000     b5ae          move    *a13(STATUS_FLAGS),a14
         00008010     0b50  
    1601 00008020     0bae          ori     M_DEAD_ANIM,a14
         00008030 00008000  
    1602 00008050     b1cd          move    a14,*a13(STATUS_FLAGS)
         00008060     0b50  
    1603                    
    1604 00008070     09e2          movi    [4,0],a2
         00008080 00040000  
    1605 000080a0     b540          move    *a10(OBJ_XPOSINT),a0
         000080b0     0110  
    1606 000080c0     b5a1          move    *a13(OBJ_XPOSINT),a1
         000080d0     0110  
    1607 000080e0     4801          cmp     a0,a1                   ;offx - defx
    1608 000080f0     c703          jrgt    ofolfall_right          ;attacker on left
    1609 00008100     09e2          movi    [-4,0],a2
         00008110 fffc0000  
    1610 00008130           ofolfall_right
    1611 00008130     b24d          move    a2,*a13(OBJ_XVEL),L
         00008140     02d0  
    1612 00008150     09e2          movi    [6,0],a2
         00008160 00060000  
    1613 00008180     b24d          move    a2,*a13(OBJ_YVEL),L
         00008190     02f0  
    1614                    
    1615 000081a0           ofolisdead
    1616 000081a0     0d5f          calla   wres_collis_off
         000081b0 00000000! 
    1617 000081d0     0960          rets
    1618                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   37

    1619                    
    1620                    ******************************************************************************
    1621                    *
    1622                    * DAMAGE SECTION
    1623                    *
    1624                    
    1625                    ;Base damage values and getup times
    1626 000081e0           damage_values
    1627 000081e0     0008          .word   D_PUNCH,        RD_PUNCH        ;AMODE_PUNCH    
    1628 00008200     000c          .word   D_HDBUTT,       RD_HDBUTT       ;AMODE_HDBUTT   
    1629 00008220     000d          .word   D_KICK,         RD_KICK         ;AMODE_KICK     
    1630 00008240     001c          .word   D_FLYKICK,      RD_FLYKICK      ;AMODE_FLYKICK  
    1631 00008260     0000          .word   D_GRABTHROW,    RD_GRABTHROW    ;AMODE_GRABTHROW        
    1632                    
    1633 00008280     0014          .word   D_UPRCUT,       RD_UPRCUT       ;AMODE_UPRCUT   
    1634 000082a0     0011          .word   D_LBDROP,       RD_LBDROP       ;AMODE_LBOWDROP 
    1635 000082c0     0000          .word   D_GRBHOLD,      RD_GRBHOLD      ;AMODE_GRABHOLD 
    1636 000082e0     0000          .word   D_GRBFLNG,      RD_GRBFLNG      ;AMODE_GRABFLING        
    1637 00008300     0001          .word   D_PUSH,         RD_PUSH         ;AMODE_PUSH     
    1638                    
    1639 00008320     0013          .word   D_BCKHAND,      RD_BCKHAND      ;AMODE_URN      
    1640 00008340     0012          .word   D_BIGBOOT,      RD_BIGBOOT      ;AMODE_BIGBOOT  
    1641 00008360     000c          .word   D_KNEE,         RD_KNEE         ;AMODE_KNEE     
    1642 00008380     0008          .word   D_HDKNEES,      RD_HDKNEES      ;AMODE_HDBUTT2  
    1643 000083a0     0014          .word   D_BOXPUNCH,     RD_BOXPUNCH     ;AMODE_BOXPUNCH 
    1644                    
    1645 000083c0     0008          .word   D_STOMP,        RD_STOMP        ;AMODE_STOMP    
    1646 000083e0     0011          .word   D_SPINKIK,      RD_SPINKIK      ;AMODE_SPINKICK 
    1647 00008400     0014          .word   D_CLINE,        RD_CLINE        ;AMODE_CLINE    
    1648 00008420     0000          .word   D_HEDHOLD,      RD_HEDHOLD      ;AMODE_HEADHOLD 
    1649 00008440     0014          .word   D_JUMPKICK,     RD_JUMPKICK     ;AMODE_JUMPKICK 
    1650                    
    1651 00008460     0000          .word   D_RUN,          RD_RUN          ;AMODE_RUN      
    1652 00008480     0000          .word   D_PUPPET,       RD_PUPPET       ;AMODE_PUPPET   
    1653 000084a0     0013          .word   D_BCKHAND,      RD_BCKHAND      ;AMODE_BACKHAND 
    1654 000084c0     0019          .word   D_BUZZ,         RD_BUZZ         ;AMODE_BUZZ     
    1655 000084e0     0017          .word   D_HAYMAKER,     RD_HAYMAKER     ;AMODE_HAYMAKER 
    1656                    
    1657 00008500     0014          .word   D_BLBDROP,      RD_BLBDROP      ;AMODE_BLBOWDROP        
    1658 00008520     0011          .word   D_BSTOMP,       RD_BSTOMP       ;AMODE_BSTOMP   
    1659 00008540     0008          .word   D_HDKNEES,      RD_HDKNEES      ;AMODE_HEADKNEES        
    1660 00008560     0008          .word   D_EARSLAP2,     RD_EARSLAP2     ;AMODE_EARSLAP  
    1661 00008580     0005          .word   D_HAMMER2,      RD_HAMMER2      ;AMODE_HAMMER   
    1662                    
    1663 000085a0     001c          .word   D_BUTTSTOMP,    RD_BUTTSTOMP    ;AMODE_BUTTSTOMP        
    1664 000085c0     0000          .word   D_ATT31,        RD_ATT31        ;AMODE_PUPPET2  
    1665 000085e0     0000          .word   D_ATT32,        RD_ATT32        ;AMODE_HDGRAB
    1666 00008600     0008          .word   D_TOMB,         RD_TOMB         ;AMODE_TOMB     
    1667 00008620     0011          .word   D_BIGKNEE,      RD_BIGKNEE      ;AMODE_BIGKNEE  
    1668                    
    1669 00008640     0000          .word   D_FLPKIK,       RD_FLPKIK       ;AMODE_SHNBFKIK 
    1670 00008660     000a          .word   D_SPDKIK,       RD_SPDKIK       ;AMODE_SHNSPDKIK        
    1671 00008680     0009          .word   D_SPDKIK2,      RD_SPDKIK2      ;AMODE_SHNSPDKIK2
    1672 000086a0     0000          .word   D_HITCK,        RD_HITCK        ;AMODE_HITCHECK 
    1673 000086c0     0011          .word   D_ARMBRK,       RD_ARMBRK       ;AMODE_ARMBREAK 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   38

    1674                    
    1675 000086e0     000e          .word   D_RSLASH,       RD_RSLASH       ;AMODE_RSLASH   
    1676 00008700     0008          .word   D_HEADDSLASH,   RD_HEADDSLASH   ;AMODE_HEADDSLASH
    1677 00008720     0008          .word   D_HEADUSLASH,   RD_HEADUSLASH   ;AMODE_HEADUSLASH
    1678 00008740     0006          .word   D_RSLASH2,      RD_RSLASH2      ;AMODE_RSLASH2  
    1679 00008760     0005          .word   D_HDBUTT_STAY,  RD_HDBUTT_STAY  ;AMODE_HDBUTT_STAY
    1680                    
    1681 00008780     000a          .word   D_FIRE_PUNCH,   RD_FIRE_PUNCH   ;AMODE_FIRE_PUNCH
    1682 000087a0     0014          .word   D_BSTOMP2,      RD_BSTOMP2      ;AMODE_BSTOMP2
    1683 000087c0     000f          .word   D_GUTPUSH,      RD_GUTPUSH      ;AMODE_GUTPUSH
    1684 000087e0     0011          .word   D_SPINKIK,      RD_SPINKIK      ;AMODE_SUPER_KICK
    1685 00008800     0006          .word   D_PUNCH2,       RD_PUNCH2       ;AMODE_PUNCH2
    1686                    
    1687 00008820     0013          .word   D_BCKHAND,      RD_BCKHAND      ;AMODE_HDBUTT3
    1688 00008840     0009          .word   D_LBDROP2,      RD_LBDROP2      ;AMODE_LBOWDROP2
    1689 00008860     0006          .word   D_STOMP2,       RD_STOMP2       ;AMODE_STOMP2
    1690 00008880     0000          .word   0,              0               ;AMODE_NOFLAIL
    1691 000088a0     0000          .word   0,              0               ;AMODE_TOSS
    1692 000088c0     0014          .word   D_NAPALM,       RD_NAPALM       ;AMODE_NAPALM
    1693                    
    1694                    ;Wrestler offensive multipliers
    1695 000088e0           offense_mods
    1696 000088e0     0059          .word   _35PCT  ;Bret
    1697 000088f0     0059          .word   _35PCT  ;Razor
    1698 00008900     0059          .word   _35PCT  ;Taker
    1699 00008910     0059          .word   _35PCT  ;Yoko
    1700 00008920     0059          .word   _35PCT  ;Shawn
    1701 00008930     0059          .word   _35PCT  ;Bam Bam
    1702 00008940     0059          .word   _35PCT  ;Doink
    1703 00008950     0059          .word   _35PCT  ;
    1704 00008960     0059          .word   _35PCT  ;Lex
    1705                    
    1706                    ;Wrestler defensive multipliers
    1707 00008970           defense_mods
    1708 00008970     0000          .word   0       ;Bret
    1709 00008980     0000          .word   0       ;Razor
    1710 00008990     0000          .word   0       ;Taker
    1711 000089a0     0000          .word   0       ;Yoko
    1712 000089b0     0000          .word   0       ;Shawn
    1713 000089c0     0000          .word   0       ;Bam Bam
    1714 000089d0     0000          .word   0       ;Doink
    1715 000089e0     0000          .word   0       ;
    1716 000089f0     0000          .word   0       ;Lex
    1717                    
    1718                    ******************************************************************************
    1719                    *
    1720                    * STANDARD REACTION TABLES
    1721                    *
    1722                    
    1723 00008a00            SUBR   head_hit_tbl
    1724 00008a00 00000000!         .long   hrt_2_head_hit_anim,hrt_4_head_hit_anim                 ;0 Bret Hart
    1725 00008a40 00000000!         .long   rzr_2_head_hit_anim,rzr_4_head_hit_anim                 ;1 Razor Ramon
    1726 00008a80 00000000!         .long   und_2_head_hit_anim,und_4_head_hit_anim                 ;2 Undertaker
    1727 00008ac0 00000000!         .long   yok_2_head_hit_anim,yok_4_head_hit_anim                 ;3 Yokozuna
    1728 00008b00 00000000!         .long   shn_2_head_hit_anim,shn_4_head_hit_anim                 ;4 Shawn Michaels
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   39

    1729 00008b40 00000000!         .long   bam_2_head_hit_anim,bam_4_head_hit_anim                 ;5 Bam Bam
    1730 00008b80 00000000!         .long   dnk_2_head_hit_anim,dnk_4_head_hit_anim                 ;6 Doink
    1731 00008bc0 00000000          .long   0,0                                                     ;7 spare
    1732 00008c00 00000000!         .long   lex_2_head_hit_anim,lex_4_head_hit_anim                 ;8 Lex Luger
    1733                    
    1734                    
    1735 00008c40            SUBR   head_hit2_tbl
    1736 00008c40 00000000!         .long   hrt_2_head_hit2_anim,hrt_4_head_hit2_anim               ;0 Bret Hart
    1737 00008c80 00000000!         .long   rzr_2_head_hit2_anim,rzr_4_head_hit2_anim               ;1 Razor Ramon
    1738 00008cc0 00000000!         .long   und_head_hit2_anim,und_head_hit2_anim                   ;2 Undertaker
    1739 00008d00 00000000!         .long   yok_2_head_hit2_anim,yok_4_head_hit2_anim               ;3 Yokozuna
    1740 00008d40 00000000!         .long   shn_2_head_hit2_anim,shn_4_head_hit2_anim               ;4 Shawn Michaels
    1741 00008d80 00000000!         .long   bam_head_hit2_anim,bam_head_hit2_anim                   ;5 Bam Bam
    1742 00008dc0 00000000!         .long   dnk_head_hit2_anim,dnk_head_hit2_anim                   ;6 Doink
    1743 00008e00 00000000          .long   0,0                                                     ;7 spare
    1744 00008e40 00000000!         .long   lex_2_head_hit2_anim,lex_4_head_hit2_anim               ;8 Lex Luger
    1745                    
    1746 00008e80            SUBR   head_hit2_sand_tbl
    1747 00008e80                   REFLONG hrt_4_head_hit2s_anim
    1748 00008ea0                   REFLONG rzr_4_head_hit2s_anim
    1749 00008ec0                   REFLONG und_head_hit2s_anim  
    1750 00008ee0                   REFLONG yok_4_head_hit2s_anim
    1751 00008f00                   REFLONG shn_4_head_hit2s_anim
    1752 00008f20                   REFLONG bam_head_hit2s_anim  
    1753 00008f40                   REFLONG dnk_head_hit2s_anim  
    1754 00008f60 00000000          .long   0
    1755 00008f80                   REFLONG lex_4_head_hit2s_anim
    1756                    
    1757 00008fa0            SUBR   head_hit_dizzy_tbl
    1758 00008fa0 00000000!         .long   hrt_4_head_hit_dizzy_anim,hrt_4_head_hit_dizzy_anim     ;0 Bret Hart
    1759 00008fe0 00000000!         .long   rzr_4_head_hit_dizzy_anim,rzr_4_head_hit_dizzy_anim     ;1 Razor Ramon
    1760 00009020 00000000!         .long   und_head_hit_dizzy_anim,und_head_hit_dizzy_anim         ;2 Undertaker
    1761 00009060 00000000!         .long   yok_4_head_hit_dizzy_anim,yok_4_head_hit_dizzy_anim     ;3 Yokozuna
    1762 000090a0 00000000!         .long   shn_4_head_hit_dizzy_anim,shn_4_head_hit_dizzy_anim     ;4 Shawn Michaels
    1763 000090e0 00000000!         .long   bam_head_hit_dizzy_anim,bam_head_hit_dizzy_anim         ;5 Bam Bam
    1764 00009120 00000000!         .long   dnk_head_hit_dizzy_anim,dnk_head_hit_dizzy_anim         ;6 Doink
    1765 00009160 00000000          .long   0,0                                                     ;7 spare
    1766 000091a0 00000000!         .long   lex_head_hit_dizzy_anim,lex_head_hit_dizzy_anim         ;8 Lex Luger
    1767                    
    1768 000091e0            SUBR   body_hit_tbl
    1769 000091e0 00000000!         .long   hrt_2_body_hit_anim,hrt_4_body_hit_anim                 ;0 Bret Hart
    1770 00009220 00000000!         .long   rzr_2_body_hit_anim,rzr_4_body_hit_anim                 ;1 Razor Ramon
    1771 00009260 00000000!         .long   und_2_body_hit_anim,und_4_body_hit_anim                 ;2 Undertaker
    1772 000092a0 00000000!         .long   yok_2_body_hit_anim,yok_4_body_hit_anim                 ;3 Yokozuna
    1773 000092e0 00000000!         .long   shn_2_body_hit_anim,shn_4_body_hit_anim                 ;4 Shawn Michaels
    1774 00009320 00000000!         .long   bam_2_body_hit_anim,bam_4_body_hit_anim                 ;5 Bam Bam
    1775 00009360 00000000!         .long   dnk_4_body_hit_anim,dnk_4_body_hit_anim                 ;6 Doink
    1776 000093a0 00000000          .long   0,0                                                     ;7 spare
    1777 000093e0 00000000!         .long   lex_2_body_hit_anim,lex_4_body_hit_anim                 ;8 Lex Luger
    1778                    
    1779 00009420            SUBR   body_hit2_tbl
    1780 00009420 00000000!         .long   hrt_4_body_hit_anim                     ;0 Bret Hart
    1781 00009440 00000000!         .long   rzr_4_body_hit_anim                     ;1 Razor Ramon
    1782 00009460 00000000!         .long   und_4_body_hit_anim                     ;2 Undertaker
    1783 00009480 00000000!         .long   yok_4_body_hit_anim                     ;3 Yokozuna
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   40

    1784 000094a0 00000000!         .long   shn_4_body_hit_anim                     ;4 Shawn Michaels
    1785 000094c0 00000000!         .long   bam_4_body_hit_anim                     ;5 Bam Bam
    1786 000094e0 00000000!         .long   dnk_4_body_hit_anim                     ;6 Doink
    1787 00009500 00000000          .long   0                                                       ;7 spare
    1788 00009520 00000000!         .long   lex_4_body_hit_anim                     ;8 Lex Luger
    1789                    
    1790 00009540            SUBR   body_hit_dizzy_tbl
    1791 00009540 00000000!         .long   hrt_4_body_hit_dizzy_anim,hrt_4_body_hit_dizzy_anim     ;0 Bret Hart
    1792 00009580 00000000!         .long   rzr_4_body_hit_dizzy_anim,rzr_4_body_hit_dizzy_anim     ;1 Razor Ramon
    1793 000095c0 00000000!         .long   und_4_body_hit_dizzy_anim,und_4_body_hit_dizzy_anim     ;2 Undertaker
    1794 00009600 00000000!         .long   yok_4_body_hit_dizzy_anim,yok_4_body_hit_dizzy_anim     ;3 Yokozuna
    1795 00009640 00000000!         .long   shn_4_body_hit_dizzy_anim,shn_4_body_hit_dizzy_anim     ;4 Shawn Michaels
    1796 00009680 00000000!         .long   bam_4_body_hit_dizzy_anim,bam_4_body_hit_dizzy_anim     ;5 Bam Bam
    1797 000096c0 00000000!         .long   dnk_4_body_hit_dizzy_anim,dnk_4_body_hit_dizzy_anim     ;6 Doink
    1798 00009700 00000000          .long   0,0                                                     ;7 spare
    1799 00009740 00000000!         .long   lex_4_body_hit_dizzy_anim,lex_4_body_hit_dizzy_anim     ;8 Lex Luger
    1800                    
    1801 00009780            SUBR   fall_back_tbl
    1802 00009780 00000000!         .long   hrt_fall_back_anim                                      ;0 Bret Hart
    1803 000097a0 00000000!         .long   rzr_fall_back_anim                                      ;1 Razor Ramon
    1804 000097c0 00000000!         .long   und_fall_back_anim                                      ;2 Undertaker
    1805 000097e0 00000000!         .long   yok_fall_back_anim                                      ;3 Yokozuna
    1806 00009800 00000000!         .long   shn_fall_back_anim                                      ;4 Shawn Michaels
    1807 00009820 00000000!         .long   bam_fall_back_anim                                      ;5 Bam Bam
    1808 00009840 00000000!         .long   dnk_fall_back_anim                                      ;6 Doink
    1809 00009860 00000000          .long   0                                                       ;7 spare
    1810 00009880 00000000!         .long   lex_fall_back_anim                                      ;8 Lex Luger
    1811                    
    1812 000098a0            SUBR   fall_back_tbukl_tbl
    1813 000098a0 00000000!         .long   hrt_fall_back_tbukl_anim                                ;0 Bret Hart
    1814 000098c0 00000000!         .long   rzr_fall_back_tbukl_anim                                ;1 Razor Ramon
    1815 000098e0 00000000!         .long   und_fall_back_tbukl_anim                                ;2 Undertaker
    1816 00009900 00000000!         .long   yok_fall_back_anim                                      ;3 Yokozuna
    1817 00009920 00000000!         .long   shn_fall_back_tbukl_anim                                ;4 Shawn Michaels
    1818 00009940 00000000!         .long   bam_fall_back_tbukl_anim                                ;5 Bam Bam
    1819 00009960 00000000!         .long   dnk_fall_back_tbukl_anim                                ;6 Doink
    1820 00009980 00000000          .long   0                                                       ;7 spare
    1821 000099a0 00000000!         .long   lex_fall_back_tbukl_anim                                ;8 Lex Luger
    1822                    
    1823 000099c0           hitblock_tbl
    1824 000099c0 00000000!         .long   hrt_4_hitblock_anim     ;0 Bret Hart
    1825 000099e0 00000000!         .long   rzr_4_hitblock_anim     ;1 Razor Ramon
    1826 00009a00 00000000!         .long   und_4_hitblock_anim     ;2 Undertaker
    1827 00009a20 00000000!         .long   yok_4_hitblock_anim     ;3 Yokozuna
    1828 00009a40 00000000!         .long   shn_4_hitblock_anim     ;4 Shawn Michaels
    1829 00009a60 00000000!         .long   bam_4_hitblock_anim     ;5 Bam Bam
    1830 00009a80 00000000!         .long   dnk_4_hitblock_anim     ;6 Doink
    1831 00009aa0 00000000          .long   0                       ;7 spare
    1832 00009ac0 00000000!         .long   lex_4_hitblock_anim     ;8 Lex Luger
    1833                    
    1834 00009ae0           hitblock_flail_tbl
    1835 00009ae0                   REFLONG hrt_4_hitblock2_anim    ;0 Bret Hart
    1836 00009b00                   REFLONG rzr_4_hitblock2_anim    ;1 Razor Ramon
    1837 00009b20                   REFLONG und_4_hitblock2_anim    ;2 Undertaker
    1838 00009b40                   REFLONG yok_4_hitblock2_anim    ;3 Yokozuna
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   41

    1839 00009b60                   REFLONG shn_4_hitblock2_anim    ;4 Shawn Michaels
    1840 00009b80                   REFLONG bam_4_hitblock2_anim    ;5 Bam Bam
    1841 00009ba0                   REFLONG dnk_4_hitblock2_anim    ;6 Doink
    1842 00009bc0 00000000          .long   0                       ;7 spare
    1843 00009be0                   REFLONG lex_4_hitblock2_anim    ;8 Lex Luger
    1844                    
    1845                    ;       .long   hrt_4_losebal_anim      ;0 Bret Hart
    1846                    ;       .long   rzr_4_losebal_anim      ;1 Razor Ramon
    1847                    ;       .long   und_4_losebal_anim      ;2 Undertaker
    1848                    ;       .long   yok_4_losebal_anim      ;3 Yokozuna
    1849                    ;       .long   shn_4_losebal_anim      ;4 Shawn Michaels
    1850                    ;       .long   bam_4_losebal_anim      ;5 Bam Bam
    1851                    ;       .long   dnk_4_losebal_anim      ;6 Doink
    1852                    ;       .long   dnk_4_losebal_anim      ;7 spare
    1853                    ;       .long   lex_4_losebal_anim      ;8 Lex Luger
    1854                    ;       .long   dnk_4_losebal_anim      ;9 Referee
    1855                    
    1856 00009c00            SUBR   hitonground_tbl
    1857 00009c00 00000000!         .long   hrt_hitonground_anim            ;0 Bret Hart
    1858 00009c20 00000000!         .long   rzr_hitonground_anim            ;1 Razor Ramon
    1859 00009c40 00000000!         .long   und_hitonground_anim            ;2 Undertaker
    1860 00009c60 00000000!         .long   yok_hitonground_anim            ;3 Yokozuna
    1861 00009c80 00000000!         .long   shn_hitonground_anim            ;4 Shawn Michaels
    1862 00009ca0 00000000!         .long   bam_hitonground_anim            ;5 Bam Bam
    1863 00009cc0 00000000!         .long   dnk_hitonground_anim            ;6 Doink
    1864 00009ce0 00000000          .long   0                               ;7 spare
    1865 00009d00 00000000!         .long   lex_hitonground_anim            ;8 Lex Luger
    1866 00009d20 00000000          .long   0                               ;9 Referee
    1867                    
    1868                    *****************************************************************************
    1869                    *
    1870                    * Script for a wrestler who was the victim of a puppet sequence that got
    1871                    * interrupted by the attacker being smacked.
    1872                    
    1873 00009d40            SUBR   xxx_aborted_attach_anim
    1874                    
    1875 00009d40     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP
    1876 00009d60     8004          .word   ANI_SETPLYRMODE,MODE_INAIR
    1877 00009d80     8026          .word   ANI_SETSPEED,100h
    1878                    
    1879 00009da0     800b          .word   ANI_WAITHITGND
    1880 00009db0     8004          .word   ANI_SETPLYRMODE,MODE_ONGROUND
    1881 00009dd0     8002          .word   ANI_SETMODE,MODE_NORMAL
    1882                    
    1883                            ;WAIT!  If I'm dead, just do a hitonground instead.
    1884 00009df0                   WL      ANI_CODE,nuvidead_or_dying
    1885 00009e20                   WL      ANI_IFSTATUS2,nuvidead
    1886 00009e50                   WL      ANI_CHANGEANIM_TBL,nuvigetup_tbl
    1887 00009e80           nuvidead        WL      ANI_CHANGEANIM_TBL,hitonground_tbl
    1888                    
    1889 00009eb0           nuvigetup_tbl
    1890 00009eb0                   REFLONG hrt_faceup_getup_anim
    1891 00009ed0                   REFLONG rzr_faceup_getup_anim
    1892 00009ef0                   REFLONG und_faceup_getup_anim
    1893 00009f10                   REFLONG yok_faceup_getup_anim
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   42

    1894 00009f30                   REFLONG shn_faceup_getup_anim
    1895 00009f50                   REFLONG bam_faceup_getup_anim
    1896 00009f70                   REFLONG dnk_faceup_getup_anim
    1897 00009f90 00000000          .long   0
    1898 00009fb0                   REFLONG lex_faceup_getup_anim
    1899                    
    1900                    
    1901 00009fd0            SUBRP  nuvidead_or_dying
    1902                    
    1903                            ;set status if I'm dead or my I_WILL_DIE flag is set.
    1904 00009fd0     b5ae          move    *a13(ANIMODE),a14
         00009fe0     0660  
    1905 00009ff0     0b8e          andni   MODE_STATUS2,a14
         0000a000 00000200  
    1906 0000a020     b1cd          move    a14,*a13(ANIMODE)
         0000a030     0660  
    1907                    
    1908 0000a040     b5ae          move    *a13(I_WILL_DIE),a14
         0000a050     0b30  
    1909 0000a060     cb06          jrnz    nuvidie
    1910                    
    1911 0000a070     b5a1          move    *a13(PLYRNUM),a1
         0000a080     0580  
    1912 0000a090     0d5f          calla   get_health
         0000a0a0 00000000! 
    1913 0000a0c0     cb07          jrnz    nuviok
    1914                    
    1915 0000a0d0     b5ae  nuvidie move    *a13(ANIMODE),a14
         0000a0e0     0660  
    1916 0000a0f0     0bae          ori     MODE_STATUS2,a14
         0000a100 00000200  
    1917 0000a120     b1cd          move    a14,*a13(ANIMODE)
         0000a130     0660  
    1918                    
    1919 0000a140     0960  nuviok  rets
    1920                    
    1921                    *****************************************************************************
    1922                    *
    1923                    * Script for a wrestler who was the victim of a puppet sequence that got
    1924                    * interrupted by the attacker being smacked.  - go to stand instead of
    1925                    * falling.
    1926                    
    1927 0000a150            SUBR   xxx_goto_stand_anim
    1928                    
    1929 0000a150     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP
    1930 0000a170     8004          .word   ANI_SETPLYRMODE,MODE_INAIR
    1931 0000a190     8026          .word   ANI_SETSPEED,100h
    1932                    
    1933 0000a1b0     800b          .word   ANI_WAITHITGND
    1934 0000a1c0     8004          .word   ANI_SETPLYRMODE,MODE_NORMAL
    1935 0000a1e0     8002          .word   ANI_SETMODE,MODE_NORMAL
    1936 0000a200     8049          .word   ANI_END
    1937                    
    1938                    ******************************************************************************
    1939                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   43

    1940                            .end

 No Errors,  No Warnings
