TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    **************************************************************
       2                    *
       3                    * Software:             Shawn Liptak and ?
       4                    * Initiated:            ?
       5                    *
       6                    * Modified:             Shawn Liptak, 8/?/91    -Clean up
       7                    *                       Shawn Liptak, 1/27/92   -Basketball start
       8                    *                       Shawn Liptak, 3/19/93   -Clean up
       9                    *
      10                    * COPYRIGHT (C) 1992 WILLIAMS ELECTRONICS GAMES, INC.
      11                    *
      12                    *.Last mod - 3/19/93 13:59
      13                    **************************************************************
      14                            .file   "main.asm"
      16                            .width  132
      17                            .option b,d,l,t
      18                            .mnolist
      19                    
      20                    
      21                            .include        "audit.equ"
      22                            .include        "mproc.equ"
      23                            .include        "display.equ"
      24                            .include        "gsp.equ"
      25                            .include        "sys.equ"
      26                            .include        "game.equ"
      27                            .include        "dip.equ"
      28                            .include        "macros.h"
      29                            .include        "wwfsec.equ"
      30                                            
      31                    
      32                    ******************************************************************************
      33                    * EXTERNAL REFERENCES
      34                    
      35                            .ref    RESET_VOICE_QUEUE,ANNOUNCE_VOICE
      36                    
      37                            .ref    set_up_line_tables
      38                    
      39                            .ref    swstackbot
      40                            .ref    process_init
      41                            .ref    C_FLAGS
      42                            .ref    display_init
      43                            .ref    GAMSTATE
      44                            .ref    dma_irq
      45                            .ref    swstacktop
      46                            .ref    C_FRAC
      47                            .ref    READ_DIP
      48                            .ref    init_prog
      49                            .ref    swstack_p
      50                            .ref    COINCNTR
      51                            .ref    pal_transfer
      52                    
      53                            .ref    _sound_addr
      54                            .ref    _coin_addr
      55                            .ref    _switch_addr
      56                            .ref    _switch2_addr
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE    2

      57                            .ref    _watchdog_addr
      58                            .ref    _dipswitch_addr
      59                            .ref    _soundirq_addr
      60                            .ref    _coin_counter_addr
      61                            .ref    _get_time
      62                            .ref    _aquire_time
      63                            .ref    _tmonth
      64                            .ref    _tdate
      65                            .ref    _thours
      66                            .ref    _tminutes
      67                            .ref    _tseconds
      68                    
      69                            ;from DCSSOUND.ASM
      70                            .ref    qsndrst_proc
      71                    
      72                            .def    InitPIC
      73                            .def    SecFuncCheck
      74                    
      75                            .globl  RemapIO
      76                            .globl  InitPIC
      77                            .globl  _clk_rd
      78                            .globl  SecFuncCheck
      79                    
      80                    ALARM_MAC       .macro  month,date,hour,minute,func
      81                            .word   :month:                 ;month number 1-12 (-1 = don't care)
      82                            .word   :date:                  ;date (1-31) (-1 = don't care)
      83                            .word   :hour:                  ;hour (0-23) (-1 = don't care)
      84                            .word   :minute:                ;minute (0-59) (-1 = don't care)
      85                            .long   :func:                  ;func - Pointer to function to call
      86                            .endm
      87                    
      88                    
      89 00000000                   .bss    _clk_rd,32              ;Clock Trigger Counter
      90 00000020                   .bss    _io_map,32              ;Current I/O Map
      91                    
      92 00000000                   BSSX    dma_bog,16              ;VCOUNT at end of DIRQ
      93 00000000                   BSSX    dma_meter,16            ;show line?
      94 00000000                   BSSX    cpu_meter,16            ;show line for cpu
      95                    
      96                    ******************************************************************************
      97                    
      98                    ;ram
      99                    
     100 00000000                   BSSX    SYSCOPY         ,16     ;Copy of SYSCTRL latch
     101                    
     102 00000000                   BSSX    WDOGRAM         ,32     ;INITIALIZED LONG FOR WATCH DOG DETECT
     103                    
     104 00000000                   BSSX    IRQSKYE         ,16     ;Erase color
     105 00000000                   BSSX    dpageflip       ,16     ;1=Enable page flip and erasure, 0=No erasure
     106                    
     107 00000000                   BSSX    dirqtimer       ,16     ;+1 by dirq, cleared by mproc
     108 00000000                   BSSX    dirqcnt         ,16     ;+1 each dirq
     109 000000e0                   .bss    dirqdraw        ,16     ;!0=Still drawing last frame
     110                    
     111 000000f0                   .bss    swtemp1         ,32
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE    3

     112 00000110                   .bss    swtemp2         ,32
     113                    
     114                    
     115 00000130                   .bss    FSWITCH         ,64
     116                    
     117 00000000                   BSSX    switches_old    ,64
     118 00000000                   BSSX    switches_cur    ,64
     119 00000000                   BSSX    switches_up     ,64
     120 00000000                   BSSX    switches_down   ,64
     121                    
     122 00000000                   BSSX    NPLAYERS        ,16     ;NUMBER OF PLAYERS ALLOWED
     123 00000000                   BSSX    COUNTER_MODE    ,16     ;COIN COUNTER MODE
     124 00000000                   BSSX    VALIDATOR       ,16     ;VALIDATOR FLAG 0 = NONE, 1 = INSTALLED
     125                    
     126 00000000                   BSSX    TWOPLAYERS      ,16     ;0 = NO, 1 = YES 2 players
     127                    
     128 00000000                   BSSX    ROLLING_COUNT,16
     129                    
     130 00000000                   .data
     131 00000000           ALARM_TAB
     132 00000000                   ALARM_MAC       -1,-1,-1,38,RemapIO     ;Remap I/O at 38 minutes past hour
     133 00000060                   ALARM_MAC       -1,-1,11,4,RemapIO      ;Remap I/O at 11:04 a.m. every day
     134 000000c0                   ALARM_MAC       -1,31,16,27,RemapIO     ;Remap I/O on the 31st at 4:27 p.m.
     135 00000120                   ALARM_MAC       4,1,12,30,RemapIO       ;Remap I/O at 12:30 p.m. on April fools day
     136 00000180 00000000          .long           0
     137 000001a0                   .even
     138                    
     139 000001a0 000015b0' _SecurityFunctions      .long   SetAddresses
     140 000001c0                   .even
     141                    
     142 00000000                   .text
     143                    
     144                    
     145                    ********************************
     146                    * Alarm Clock Support (Called by DIRQ when seconds are 0)
     147                    * Trashes a0
     148 00000000             SUBR  _AlarmClock
     149 00000000     098f          mmtm    sp,a0,a1,a2
         00000010     e000  
     150 00000020     09e0          movi    ALARM_TAB,a0,L
         00000030 00000000" 
     151 00000050           _ac_loop
     152 00000050     8401          move    *a0,a1,W                ;Get Alarm month
     153 00000060     ca24          jrz     _ac_done                ;BR = No more alarm settings
     154 00000070     ce05          jrn     _ac_date                ;Do we care what month BR = NO
     155 00000080     05a2          move    @_tmonth,a2,W           ;Get current month
         00000090 00000000! 
     156 000000b0     4820          cmp     a1,a0                   ;Same ?
     157 000000c0     cb1b          jrnz    _ac_next                ;Nope - Done with this alarm
     158 000000d0           _ac_date
     159 000000d0     b401          move    *a0(16),a1,W            ;Get Alarm Date
         000000e0     0010  
     160 000000f0     ce05          jrn     _ac_hour                ;Do we care what date BR = no
     161 00000100     05a2          move    @_tdate,a2,W            ;Get current date
         00000110 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE    4

     162 00000130     4822          cmp     a1,a2                   ;Same ?
     163 00000140     cb13          jrnz    _ac_next                ;Nope - Done with this alarm
     164 00000150           _ac_hour
     165 00000150     b401          move    *a0(32),a1,W            ;Get Alarm Hour
         00000160     0020  
     166 00000170     ce05          jrn     _ac_minute              ;Do we care what hour BR = no
     167 00000180     05a2          move    @_thours,a2,W           ;Get current hour
         00000190 00000000! 
     168 000001b0     4822          cmp     a1,a2                   ;Same ?
     169 000001c0     cb0b          jrnz    _ac_next                ;Nope - Done with this alarm
     170 000001d0           _ac_minute
     171 000001d0     b401          move    *a0(48),a1,W            ;Get Alarm minute
         000001e0     0030  
     172 000001f0     ce08          jrn     _ac_next                ;Do we care what minute BR = no
     173 00000200     05a2          move    @_tminutes,a2,W         ;Get current minute
         00000210 00000000! 
     174 00000230     4822          cmp     a1,a2                   ;Same ?
     175 00000240     cb03          jrnz    _ac_next                ;Nope - Done with this alarm
     176 00000250     b600          move    *a0(64),a0,L            ;Yes - run this alarm function
         00000260     0040  
     177 00000270     0920          call    a0
     178 00000280           _ac_next
     179 00000280     0b00          addi    96,a0                   ;Increment to next alarm record
         00000290     0060  
     180 000002a0     c0da          jruc    _ac_loop
     181 000002b0           _ac_done
     182 000002b0     09af          mmfm    sp,a0,a1,a2             ;All done - restore registers
         000002c0     0007  
     183 000002d0     0960          rets                            ;Go back to interrupt handler
     184                    
     185                    ********************************
     186                    * Remap I/O space - Changes the I/O map
     187                    * Trashes a0,a1
     188 000002e0            SUBR   RemapIO
     189                    
     190                            ;temp!
     191                    ;       rets
     192                    
     193 000002e0     07a0          move    @_io_map,a0,L           ;Get Current I/O map
         000002f0 00000020- 
     194 00000310     1020          addk    1,a0                    ;Increment it
     195 00000320     0b40          cmpi    5,a0                    ;>= 5?
         00000330     fffa  
     196 00000340     c401          jrlt    hfbzmap_ok                      ;Nope - then use it
     197 00000350     5600          clr     a0                      ;else reset it back to 0
     198 00000360           hfbzmap_ok
     199 00000360     0780          move    a0,@_io_map,L           ;a0 = I/O map number
         00000370 00000020- 
     200 00000390     5621          clr     a1                      ;a1 = SetAddresses Trap Request
     201 000003a0     0903          trap    3                       ;Remap I/O space
     202 000003b0     0960          rets
     203 000003c0           RemapIO_End
     204                    
     205 000003c0           SecFuncTable
     206 000003c0 000002e0'         .long   RemapIO,RemapIO_End
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE    5

     207 00000400     06a9          .word   06a9h                   ;This is a checksum of the function
     208 00000410 00000000          .long   0
     209                    
     210                    ******************************************************************************
     211 00000430            SUBR  InitAddresses
     212 00000430     09e0          movi    COINS,a0
         00000440 01860030  
     213 00000460     0780          move    a0,@_coin_addr,L
         00000470 00000000! 
     214 00000490     09e0          movi    SWITCH,a0
         000004a0 01860000  
     215 000004c0     0780          move    a0,@_switch_addr,L
         000004d0 00000000! 
     216 000004f0     09e0          movi    SWITCH2,a0
         00000500 01860010  
     217 00000520     0780          move    a0,@_switch2_addr,L
         00000530 00000000! 
     218 00000550     09e0          movi    WATCHDOG,a0
         00000560 01860030  
     219 00000580     0780          move    a0,@_watchdog_addr,L
         00000590 00000000! 
     220 000005b0     09e0          movi    DIPSWITCH,a0
         000005c0 01860020  
     221 000005e0     0780          move    a0,@_dipswitch_addr,L
         000005f0 00000000! 
     222 00000610     09e0          movi    SOUND,a0
         00000620 01680000  
     223 00000640     0780          move    a0,@_sound_addr,L
         00000650 00000000! 
     224 00000670     09e0          movi    SOUNDIRQ,a0
         00000680 01860040  
     225 000006a0     0780          move    a0,@_soundirq_addr,L
         000006b0 00000000! 
     226 000006d0     09e0          movi    COIN_COUNTERS,a0
         000006e0 01860010  
     227 00000700     0780          move    a0,@_coin_counter_addr,L
         00000710 00000000! 
     228 00000730     09c0          movi    VMUX_INITMODE,a0
         00000740     0000  
     229 00000750     0580          move    a0,@VMUX_CONTROL
         00000760 01800000  
     230 00000780     0960          rets
     231                    
     232                    ******************************************************************************
     233 00000790            SUBR  AddressSet1
     234 00000790     09e0          movi    COINS_M1,a0
         000007a0 01860090  
     235 000007c0     0780          move    a0,@_coin_addr,L
         000007d0 00000000! 
     236 000007f0     09e0          movi    SWITCH_M1,a0
         00000800 01860040  
     237 00000820     0780          move    a0,@_switch_addr,L
         00000830 00000000! 
     238 00000850     09e0          movi    SWITCH2_M1,a0
         00000860 01860080  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE    6

     239 00000880     0780          move    a0,@_switch2_addr,L
         00000890 00000000! 
     240 000008b0     09e0          movi    WATCHDOG_M1,a0
         000008c0 01860090  
     241 000008e0     0780          move    a0,@_watchdog_addr,L
         000008f0 00000000! 
     242 00000910     09e0          movi    DIPSWITCH_M1,a0
         00000920 01860010  
     243 00000940     0780          move    a0,@_dipswitch_addr,L
         00000950 00000000! 
     244 00000970     09e0          movi    SOUND_M1,a0
         00000980 01680000  
     245 000009a0     0780          move    a0,@_sound_addr,L
         000009b0 00000000! 
     246 000009d0     09e0          movi    SOUNDIRQ_M1,a0
         000009e0 01860020  
     247 00000a00     0780          move    a0,@_soundirq_addr,L
         00000a10 00000000! 
     248 00000a30     09e0          movi    COIN_COUNTERS_M1,a0
         00000a40 01860080  
     249 00000a60     0780          move    a0,@_coin_counter_addr,L
         00000a70 00000000! 
     250 00000a90     09c0          movi    (VMUX_INITMODE|VMUX_MODE1),a0
         00000aa0     0001  
     251 00000ab0     0580          move    a0,@VMUX_CONTROL
         00000ac0 01800000  
     252 00000ae0     0960          rets
     253                    
     254                    ******************************************************************************
     255 00000af0            SUBR  AddressSet2
     256 00000af0     09e0          movi    COINS_M2,a0
         00000b00 01860060  
     257 00000b20     0780          move    a0,@_coin_addr,L
         00000b30 00000000! 
     258 00000b50     09e0          movi    SWITCH_M2,a0
         00000b60 01860080  
     259 00000b80     0780          move    a0,@_switch_addr,L
         00000b90 00000000! 
     260 00000bb0     09e0          movi    SWITCH2_M2,a0
         00000bc0 01860020  
     261 00000be0     0780          move    a0,@_switch2_addr,L
         00000bf0 00000000! 
     262 00000c10     09e0          movi    WATCHDOG_M2,a0
         00000c20 01860060  
     263 00000c40     0780          move    a0,@_watchdog_addr,L
         00000c50 00000000! 
     264 00000c70     09e0          movi    DIPSWITCH_M2,a0
         00000c80 01860040  
     265 00000ca0     0780          move    a0,@_dipswitch_addr,L
         00000cb0 00000000! 
     266 00000cd0     09e0          movi    SOUND_M2,a0
         00000ce0 01680000  
     267 00000d00     0780          move    a0,@_sound_addr,L
         00000d10 00000000! 
     268 00000d30     09e0          movi    SOUNDIRQ_M2,a0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE    7

         00000d40 01860010  
     269 00000d60     0780          move    a0,@_soundirq_addr,L
         00000d70 00000000! 
     270 00000d90     09e0          movi    COIN_COUNTERS_M2,a0
         00000da0 01860020  
     271 00000dc0     0780          move    a0,@_coin_counter_addr,L
         00000dd0 00000000! 
     272 00000df0     09c0          movi    (VMUX_INITMODE|VMUX_MODE2),a0
         00000e00     0002  
     273 00000e10     0580          move    a0,@VMUX_CONTROL
         00000e20 01800000  
     274 00000e40     0960          rets
     275                    
     276                    ******************************************************************************
     277 00000e50            SUBR  AddressSet3
     278 00000e50     09e0          movi    COINS_M3,a0
         00000e60 018600a0  
     279 00000e80     0780          move    a0,@_coin_addr,L
         00000e90 00000000! 
     280 00000eb0     09e0          movi    SWITCH_M3,a0
         00000ec0 01860010  
     281 00000ee0     0780          move    a0,@_switch_addr,L
         00000ef0 00000000! 
     282 00000f10     09e0          movi    SWITCH2_M3,a0
         00000f20 01860080  
     283 00000f40     0780          move    a0,@_switch2_addr,L
         00000f50 00000000! 
     284 00000f70     09e0          movi    WATCHDOG_M3,a0
         00000f80 018600a0  
     285 00000fa0     0780          move    a0,@_watchdog_addr,L
         00000fb0 00000000! 
     286 00000fd0     09e0          movi    DIPSWITCH_M3,a0
         00000fe0 01860020  
     287 00001000     0780          move    a0,@_dipswitch_addr,L
         00001010 00000000! 
     288 00001030     09e0          movi    SOUND_M3,a0
         00001040 01680000  
     289 00001060     0780          move    a0,@_sound_addr,L
         00001070 00000000! 
     290 00001090     09e0          movi    SOUNDIRQ_M3,a0
         000010a0 01860050  
     291 000010c0     0780          move    a0,@_soundirq_addr,L
         000010d0 00000000! 
     292 000010f0     09e0          movi    COIN_COUNTERS_M3,a0
         00001100 01860080  
     293 00001120     0780          move    a0,@_coin_counter_addr,L
         00001130 00000000! 
     294 00001150     09c0          movi    (VMUX_INITMODE|VMUX_MODE3),a0
         00001160     0003  
     295 00001170     0580          move    a0,@VMUX_CONTROL
         00001180 01800000  
     296 000011a0     0960          rets
     297                    
     298                    ******************************************************************************
     299 000011b0            SUBR  AddressSet4
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE    8

     300 000011b0     09e0          movi    COINS_M4,a0
         000011c0 01860070  
     301 000011e0     0780          move    a0,@_coin_addr,L
         000011f0 00000000! 
     302 00001210     09e0          movi    SWITCH_M4,a0
         00001220 01860020  
     303 00001240     0780          move    a0,@_switch_addr,L
         00001250 00000000! 
     304 00001270     09e0          movi    SWITCH2_M4,a0
         00001280 01860040  
     305 000012a0     0780          move    a0,@_switch2_addr,L
         000012b0 00000000! 
     306 000012d0     09e0          movi    WATCHDOG_M4,a0
         000012e0 01860070  
     307 00001300     0780          move    a0,@_watchdog_addr,L
         00001310 00000000! 
     308 00001330     09e0          movi    DIPSWITCH_M4,a0
         00001340 01860010  
     309 00001360     0780          move    a0,@_dipswitch_addr,L
         00001370 00000000! 
     310 00001390     09e0          movi    SOUND_M4,a0
         000013a0 01680000  
     311 000013c0     0780          move    a0,@_sound_addr,L
         000013d0 00000000! 
     312 000013f0     09e0          movi    SOUNDIRQ_M4,a0
         00001400 01860080  
     313 00001420     0780          move    a0,@_soundirq_addr,L
         00001430 00000000! 
     314 00001450     09e0          movi    COIN_COUNTERS_M4,a0
         00001460 01860040  
     315 00001480     0780          move    a0,@_coin_counter_addr,L
         00001490 00000000! 
     316 000014b0     09c0          movi    (VMUX_INITMODE|VMUX_MODE4),a0
         000014c0     0004  
     317 000014d0     0580          move    a0,@VMUX_CONTROL
         000014e0 01800000  
     318 00001500     0960          rets
     319                    
     320 00001510 00000430' AddressTable    .long   InitAddresses, AddressSet1, AddressSet2
     321 00001570 00000e50'                 .long   AddressSet3, AddressSet4
     322                    
     323                    ******************************************************************************
     324                    ; A0 = Address Set to install (0-4)
     325                    
     326 000015b0            SUBR  SetAddresses
     327 000015b0     4c00          move    a0,a0
     328 000015c0     ce0c          jrn     _invalid
     329 000015d0     0b40          cmpi    4,a0
         000015e0     fffb  
     330 000015f0     c709          jrgt    _invalid
     331 00001600     24a0          sll     5,a0
     332 00001610     0b20          addi    AddressTable,a0
         00001620 00001510' 
     333 00001640     8600          move    *a0,a0,L
     334 00001650     01e0          pushst
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE    9

     335 00001660     0360          dint
     336 00001670     0920          call    a0
     337 00001680     01c0          popst
     338 00001690           _invalid
     339 00001690     0960          rets
     340                    
     341                    **********************************
     342                    * SecFuncCheck - Checks to make sure security functions have not be mucked with
     343                    * Trashes a0,a1,a2,a3, a4
     344 000016a0            SUBR   SecFuncCheck
     345                    
     346                    
     347 000016a0     0960          rets            ;<----------------temp!!!!!!!!!!!!!!!!!!!!!!
     348                    
     349                    
     350 000016b0     09e0          movi    SecFuncTable,a0,L       ;Table of security functions to check
         000016c0 000003c0' 
     351 000016e0           SFC_loop
     352 000016e0     9601          move    *a0+,a1,L               ;Pointer to beginning of function
     353 000016f0     ca0f          jrz     SFC_done
     354 00001700     9602          move    *a0+,a2,L               ;Pointer to end of function
     355 00001710     4422          sub     a1,a2
     356 00001720     2fa2          srl     3,a2
     357 00001730     5663          clr     a3
     358 00001740           SFC_iloop
     359 00001740     8e24          movb    *a1,a4
     360 00001750     0b84          andi    0ffh,a4
         00001760 ffffff00  
     361 00001780     4083          add     a4,a3
     362 00001790     1101          addk    8,a1
     363 000017a0     3ce2          dsjs    a2,SFC_iloop
     364 000017b0     9404          move    *a0+,a4,W
     365 000017c0     4883          cmp     a4,a3
     366 000017d0     caf0          jrz     SFC_loop
     367 000017e0                   LOCKUP
     368 000017f0           SFC_done
     369                            
     370                    
     371                    ***************************************************************
     372                    * InitPIC - Initializes the PIC Microcontroller
     373                    *
     374 000017f0             SUBR  InitPIC
     375 000017f0     0d5f          calla   InitAddresses
         00001800 00000430' 
     376 00001820     5600          clr     a0                      ;Reset the PIC
     377 00001830     07a1          move    @_coin_counter_addr,a1,L
         00001840 00000000! 
     378 00001860     8001          move    a0,*a1,W
     379 00001870     1940          movk    10,a0                   ;Hold RESET fer a bit
     380 00001880     3c20          dsjs    a0,$
     381 00001890     1a00          movk    010h,a0                 ;Set no command request
     382 000018a0     0580          move    a0,@PIC_COMMAND,W
         000018b0 01600000  
     383 000018d0     1800          movk    020h,a0                 ;Allow PIC to run
     384 000018e0     07a1          move    @_coin_counter_addr,a1,L
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   10

         000018f0 00000000! 
     385 00001910     8001          move    a0,*a1,W
     386 00001920     09e1          movi    200000000,a1
         00001930 0bebc200  
     387 00001950           _pwait_loop
     388 00001950     07a0          move    @_soundirq_addr,a0,L
         00001960 00000000! 
     389 00001980     8400          move    *a0,a0,W
     390 00001990     1e60          btst    12,a0
     391 000019a0     ca05          jrz     _pnwait
     392 000019b0     07a0          move    @_watchdog_addr,a0,L
         000019c0 00000000! 
     393 000019e0     8000          move    a0,*a0
     394 000019f0     3d61          dsjs    a1,_pwait_loop
     395 00001a00           _pnwait
     396 00001a00     1a00          movk    010h,a0
     397 00001a10     0580          move    a0,@PIC_COMMAND,W
         00001a20 01600000  
     398 00001a40     09e1          movi    2000000,a1
         00001a50 001e8480  
     399 00001a70           _pwait_loop1
     400 00001a70     07a0          move    @_soundirq_addr,a0,L
         00001a80 00000000! 
     401 00001aa0     8400          move    *a0,a0,W
     402 00001ab0     1e60          btst    12,a0
     403 00001ac0     cb05          jrnz    _pwait_done
     404 00001ad0     07a0          move    @_watchdog_addr,a0,L
         00001ae0 00000000! 
     405 00001b00     8000          move    a0,*a0
     406 00001b10     3d61          dsjs    a1,_pwait_loop1
     407 00001b20           _pwait_done
     408 00001b20     0960          rets
     409                    
     410                    ********************************
     411                    * Init hardware, IO, RAM
     412                    * Trashes scratch, A2-A7
     413                    
     414 00001b30            SUBR   init_all
     415 00001b30     0360          dint                            ;No interrupts until addresses set up
     416 00001b40     5600          clr     a0                      ;0CHlr scratch mem
     417 00001b50     09e1          movi    SCRATCH,a1
         00001b60 01000000  
     418 00001b80     09e2          movi    018000H-20,a2           ;128K minus some stack
         00001b90 00017fec  
     419 00001bb0     9201  hfbzlp  move    a0,*a1+,L
     420 00001bc0     3c42          dsjs    a2,hfbzlp
     421                    
     422 00001bd0     0d5f          calla   set_up_line_tables
         00001be0 00000000! 
     423 00001c00     09c0          movi    -1,a0                   ;Auto Clock update OFF
         00001c10     ffff  
     424 00001c20     0780          move    a0,@_clk_rd,L
         00001c30 00000000- 
     425 00001c50     0d5f          calla   InitPIC                 ;Initialize the PIC
         00001c60 000017f0' 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   11

     426                    
     427 00001c80     09e0          movi    WDOGNUM,a0
         00001c90 1a2b3c4d  
     428 00001cb0     0780          move    a0,@WDOGRAM,L           ;Mark system as initialized
         00001cc0 00000080- 
     429                    
     430 00001ce0     09e0          movi    SYSCINIT|WPIROM,a0
         00001cf0 000098ff  
     431                    
     432 00001d10     0580          move    a0,@SYSCTRL
         00001d20 01b00000  
     433 00001d40     0580          move    a0,@SYSCOPY             ;Copy
         00001d50 00000070- 
     434                    
     435 00001d70     0d3f          callr   io_init                 ;Initialize the I/O regs
         00001d80     0074  
     436                    
     437 00001d90     0d5f          calla   display_init            ;Init display system
         00001da0 00000000! 
     438                    
     439 00001dc0     0d5f          calla   process_init            ;Init process list
         00001dd0 00000000! 
     440                    
     441 00001df0     1820          movk    INAMODE,a0
     442 00001e00     0580          move    a0,@GAMSTATE
         00001e10 00000000! 
     443 00001e30     09e0          movi    81261A8CH,a0            ;Random seed
         00001e40 81261a8c  
     444 00001e60     0780          move    a0,@RAND,L
         00001e70 00000000! 
     445                    
     446 00001e90     09e0          movi    swstacktop,a0           ;Initialize switch stack
         00001ea0 00000000! 
     447 00001ec0     0780          move    a0,@swstack_p,L
         00001ed0 00000000! 
     448                    
     449 00001ef0     0d3f          callr   dip_init                ;Initialize the dipswitches
         00001f00     002a  
     450                    
     451 00001f10                   CREATE  QSNDRST_PID,qsndrst_proc        ;Init sound board
     452 00001fa0     0d5f          CALLA   RESET_VOICE_QUEUE
         00001fb0 00000000! 
     453 00001fd0                   CREATE  VOICE_PID,ANNOUNCE_VOICE
     454                    
     455 00002060     1820          movk    1,a0
     456 00002070     0580          move    a0,@DISPLAYON
         00002080 00000000! 
     457                    
     458                            ;clear write-to-rom ints
     459                            ; Toddview messes with the interrupt vector table at startup,
     460                            ; and we end up with a pending WROM int.  Clear it out to avoid
     461                            ; hanging right off the bat.
     462 000020a0     05a0          move    @SYSCOPY,a0
         000020b0 00000070- 
     463 000020d0     0bc0          xori    02000h,a0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   12

         000020e0 00002000  
     464 00002100     0580          move    a0,@SYSCTRL
         00002110 01b00000  
     465 00002130     05a0          move    @SYSCOPY,a0
         00002140 00000070- 
     466 00002160     0580          move    a0,@SYSCTRL
         00002170 01b00000  
     467                    
     468 00002190     0d60          eint
     469                    
     470 000021a0     0960          rets
     471                    
     472                    
     473                    ********************************
     474                    * Initialize options via dip switch settings
     475                    
     476 000021b0           dip_init
     477 000021b0                   PUSH    a0,a1
     478                    
     479 000021d0     0d5f          calla   READ_DIP                ;Get the current dip switch bits
         000021e0 00000000! 
     480 00002200     4c01          move    a0,a1
     481                    
     482 00002210     0b80          andi    DPPLAYERS,a0            ;AQUIRE THE NUMBER OF PLAYERS
         00002220 fffffffe  
     483 00002240     2460          sll     3,a0
     484 00002250     0b20          addi    hfbzpnum_t,a0
         00002260 000024a0' 
     485 00002280     8e00          movb    *a0,a0
     486 00002290     0580          move    a0,@NPLAYERS
         000022a0 00000270- 
     487                    
     488 000022c0     4c20          move    a1,a0
     489 000022d0     0b80          andi    DPCOUNTER,a0
         000022e0 ffff3fff  
     490 00002300     2ea0          srl     DPCOUNTER_SRL-3,a0
     491 00002310     0b20          addi    hfbzcntr_t,a0
         00002320 000024b0' 
     492 00002340     8e00          movb    *a0,a0                  ;Match eugene's old shit
     493 00002350     0580          move    a0,@COUNTER_MODE
         00002360 00000280- 
     494                    
     495 00002380     4c20          move    a1,a0
     496 00002390     0b80          andi    DPVALIDATOR,a0          ;AQUIRE THE VALIDATOR STATUS
         000023a0 fffffffd  
     497 000023c0     2fe0          srl     DPVALIDATOR_SRL,a0
     498 000023d0     0580          move    a0,@VALIDATOR           ;SAVE IT
         000023e0 00000290- 
     499                    
     500 00002400     4c20          move    a1,a0
     501 00002410     0b80          andi    DPPLAYERS,a0
         00002420 fffffffe  
     502 00002440     0580          move    a0,@TWOPLAYERS          ;0=4 plyrs, 1=2 plyrs
         00002450 000002a0- 
     503                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   13

     504 00002470                   PULL    a0,a1
     505 00002490     0960          rets
     506                    
     507                    ;Translate dipswitch into number of players allowed
     508                    
     509 000024a0       04  hfbzpnum_t      .byte   4,2
     510                    
     511                    ;Translate dipswitch coin counter adjustment to what the old cmos values were
     512                    
     513 000024b0       02  hfbzcntr_t      .byte   2,3,1,2
     514 000024d0                   .even
     515                    
     516                    
     517                    **************************************************************************
     518                    * Initialize GSP I/O registers
     519                    
     520 000024d0           io_init
     521 000024d0                   PUSH    b2,b6
     522 000024f0     09f6          movi    INTIO,b6
         00002500 00002560' 
     523 00002520     0136          exgpc   b6
     524 00002530                   PULL    b2,b6
     525 00002550     0960          rets
     526                    
     527                    
     528                    *******************************
     529                    * Initialize GSP I/O registers
     530                    * B6=*Return address
     531                    * Trashes B0-B2
     532                    
     533 00002560            SUBR   INTIO
     534                    
     535 00002560     09f2          movi    HESYNC,b2
         00002570 c0000000  
     536 00002590     09f0          movi    gspioinit_t,b0
         000025a0 000045d0' 
     537 000025c0     09f1          movi    (giiend-gspioinit_t)/16,b1
         000025d0 0000001c  
     538 000025f0     9812  wauulp  move    *b0+,*b2+
     539 00002600     3c51          dsj     b1,wauulp
     540                    
     541 00002610     09c0          movi    VMUX_INITMODE,a0
         00002620     0000  
     542 00002630     0580          move    a0,@VMUX_CONTROL,W
         00002640 01800000  
     543                    
     544 00002660     0136          exgpc   b6
     545                    
     546                    
     547                    *******************************
     548                    * Watch dog disable
     549                    * Note: Call while interrupts are turned off
     550                    
     551 00002670            SUBR   WDOGDIS
     552                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   14

     553                            .if     TUNIT=0
     554                    
     555                            PUSH    a0,a1,a2,a3,a4
     556                    
     557                            pushst
     558                            setf    16,1,0
     559                    
     560                            movi    asdpdis_t,a1
     561                            move    @SYSCOPY,a2
     562                            movk    1,a3
     563                            movi    SYSCTRL,a4
     564                            move    *a1+,a0
     565                    
     566                    asdplp  or      a2,a0
     567                            move    a0,*a4
     568                            xor     a3,a0
     569                            move    a0,*a4
     570                            move    *a1+,a0
     571                            jrnn    asdplp
     572                    
     573                            move    a2,*a4
     574                    
     575                            popst
     576                            PULL    a0,a1,a2,a3,a4
     577                            rets
     578                    
     579                    
     580                    asdpdis_t       .word   0,0,0,0, 2,0,2,0, -1    ;WATCH DOG DISABLE TABLE
     581                    
     582                            .else
     583                    
     584 00002670     0960          rets
     585                    
     586                            .endif
     587                    
     588                    
     589                    ****************************************************************
     590                    * Display IRQ
     591                    
     592 00002680           DIRQ
     593 00002680     099f          mmtm    sp,b0,b1,b2,b3,b4,b5,b6,b7,b11
         00002690     ff10  
     594 000026a0     098f          mmtm    sp,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14
         000026b0     fffe  
     595                    
     596                    
     597 000026c0     0541          setf    1,0,0
     598 000026d0     058f          move    sp,@INTPEND+DIP         ;Clear int pending
         000026e0 c000012a  
     599 00002700     058f          move    sp,@INTENB+DIP          ;Disable display int
         00002710 c000011a  
     600                    
     601 00002730     0d60          eint                            ;Let DMA int run
     602                    
     603 00002740     0570          setf    16,1,0                  ;Word sign extend
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   15

     604                    
     605 00002750     05a1          MOVE    @ROLLING_COUNT,A1
         00002760 000002b0- 
     606 00002780     1021          INC     A1
     607 00002790     0581          MOVE    A1,@ROLLING_COUNT
         000027a0 000002b0- 
     608                    
     609 000027c0     09e8          movi    DPYCTL,a8
         000027d0 c0000080  
     610                    
     611 000027f0     8507          move    *a8,a7                  ;>Shift register read to restart DMA
     612 00002800     09c0          movi    NIL|DXV|SRT|010H,a0
         00002810     6810  
     613 00002820     8008          move    a0,*a8
     614 00002830     09e2          movi    510*01000H,a2           ;*Autoerase lines
         00002840 001fe000  
     615 00002860     fa42          pixt    *a2,a2                  ;Mem to shift reg xfer
     616                    
     617 00002870     0d3f          callr   switch_stack            ;Scan misc switches
         00002880     0154  
     618                    
     619 00002890     05a0          move    @dirqdraw,a0
         000028a0 000000e0- 
     620 000028c0     cb14          jrnz    di50                    ;In draw code?
     621                    
     622 000028d0     4db0          move    b13,b0
     623 000028e0     ce14          jrn     asdpchkmp                       ;DMA done?
     624                    
     625                    
     626 000028f0     05a0          move    @GAMSTATE,a0
         00002900 00000000! 
     627 00002920     ce10          jrn     asdpchkmp                       ;In diagnostics? (B13 invalid)
     628                    
     629 00002930     09c1          movi    26000/4,a1              ;>Make sure DMA is OK
         00002940     1964  
     630 00002950     49b0  asdpdqwait      cmp     b13,b0
     631 00002960     cb0a          jrne    di50                    ;DMAQ changed?
     632 00002970     3c61          dsj     a1,asdpdqwait
     633                    
     634                            .if     DEBUG
     635                            trap    29
     636                            .endif
     637                    
     638 00002980     5621          clr     a1
     639 00002990     0581          move    a1,@DMACTRL             ;Timed out
         000029a0 01a00010  
     640 000029c0     0581          move    a1,@DMACTRL
         000029d0 01a00010  
     641 000029f0     1421          subk    1,a1
     642 00002a00     4e2d          move    a1,b13
     643                    
     644 00002a10     80e8  di50    move    a7,*a8                  ;Restore
     645 00002a20     c05f          jruc    asdp60hzcode            ;Skip flip
     646                    
     647                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   16

     648 00002a30     05a1  asdpchkmp       move    @dirqtimer,a1
         00002a40 000000c0- 
     649 00002a60     cbfa          jrnz    di50                    ;Mproc not done?
     650                    
     651 00002a70     05a2          move    @dpageflip,a2
         00002a80 000000b0- 
     652 00002aa0     ca3c          jrz     di400                   ;Flipping off?
     653                    
     654                    
     655                    ;       movi    -4,a0                   ;Page0
     656 00002ab0     1880          movk    4,a0                    ; this save 1 cycle
     657 00002ac0     03a0          neg     a0
     658 00002ad0     09f2          movi    PAGE1YO*01000H,b2       ;*Page1
         00002ae0 00100000  
     659 00002b00     05a1          move    @dpage,a1
         00002b10 00000000! 
     660 00002b30     cb03          jrnz    asdponp1
     661 00002b40     09c0          movi    -01004H,a0              ;Page1
         00002b50     effc  
     662 00002b60     5652          clr     b2                      ;*Page0
     663 00002b70     0580  asdponp1        move    a0,@DPYSTRT             ;If we don't page flip next time
         00002b80 c0000090  
     664 00002ba0     0580          move    a0,@DPYADR              ;Override DPYSTRT
         00002bb0 c00001e0  
     665 00002bd0     03e1          not     a1                      ;Flip
     666 00002be0     0581          move    a1,@dpage
         00002bf0 00000000! 
     667                    
     668                    
     669 00002c10     0360          dint
     670 00002c20     09c1          movi    26000/8,a1              ;>Wait on last DMA
         00002c30     0cb2  
     671 00002c40     05a0  asdpdwait       move    @DMACTRL,a0
         00002c50 01a00010  
     672 00002c70     cf04          jrnn    asdpdmaoff                      ;DMA stopped?
     673 00002c80     3ca1          dsj     a1,asdpdwait
     674 00002c90     0581          move    a1,@DMACTRL             ;Timed out
         00002ca0 01a00010  
     675                            .if     DEBUG
     676                            trap    29
     677                            .endif
     678 00002cc0           asdpdmaoff
     679                    
     680 00002cc0     4c42          move    a2,a2
     681 00002cd0     ce19          jrn     asdpnoerase             ;Erase off?
     682                    
     683 00002ce0     09e9          movi    CONTROL,a9              ;0CHlear whole page
         00002cf0 c00000b0  
     684 00002d10     8526          move    *a9,a6
     685                    
     686                    ;NEW - This is a bug - NEVER Turn OFF CAS before RAS Refreshes
     687                    ;There is a possibility that by putting an 8 in the CONTROL register
     688                    ;the Dynamic RAM device's (Bitmap RAM and/or Scratch RAM) could lose
     689                    ;data. Because the amount of time that CAS before RAS refreshes are turned
     690                    ;off is very short, the probabilty of actual data loss is minimal.  Data
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   17

     691                    ;loss could occur if the CAS before RAS refreshes are shut off just prior
     692                    ;to a refresh cycle occuring.  This is not very likely though because of the
     693                    ;asynchronous nature of the 34010's refresh cycles.  Setting the control
     694                    ;register to 0ch will guarentee that there will be no possibilty of losing
     695                    ;refresh cycles to the DRAM and VRAM devices.  This NOTE is here simply to
     696                    ;explain the reason for the code change below.
     697                    ;  ---> movk    8,a0 <---
     698                    
     699 00002d20     1980          MOVk    0ch,a0
     700                    
     701 00002d30     8009          move    a0,*a9                  ;Transparency off
     702 00002d40     1a00          movk    16,a0
     703 00002d50     0580          move    a0,@PSIZE
         00002d60 c0000150  
     704 00002d80     09d3          movi    SCRN_PTCH*2,b3          ;Pitch (2 lines)
         00002d90     2000  
     705 00002da0                   PUSH    b10,b11,b12,b13,b14
     706 00002dc0     09f7          movi    [127,1],b7              ;Rows:Columns
         00002dd0 007f0001  
     707 00002df0     0fc0          fill    l
     708 00002e00                   PULL    b10,b11,b12,b13,b14
     709                    
     710 00002e20     80c9          move    a6,*a9                  ;Restore
     711 00002e30     1900          movk    PXSIZE,a0
     712 00002e40     0580          move    a0,@PSIZE               ;Normal
         00002e50 c0000150  
     713 00002e70           asdpnoerase
     714                    
     715 00002e70     80e8  di400   move    a7,*a8                  ;Restore
     716 00002e80     0d60          eint
     717                    
     718                    
     719 00002e90     0d5f          calla   pal_transfer            ;Copy new PALs
         00002ea0 00000000! 
     720                    
     721 00002ec0     05c0          move    @IRQSKYE,@ERASELOC      ;Copy bkgnd color
         00002ed0 000000a0- 
         00002ef0 01880000  
     722                    ;       move    @COLRTEMP,a0,L
     723                    ;       jrz     asdpnotindiag
     724                    ;       movi    CYCOLORS,a1
     725                    ;       move    a0,*a1+,L               ;Copy diagnostics color cycler
     726                    ;       move    @COLRTEMP+32,*a1,L
     727                    ;asdpnotindiag
     728                    ;       callr   switch_stack            ;Scan misc switches
     729                    
     730 00002f10     1820          movk    1,a0
     731                    
     732 00002f20     0580          move    a0,@dirqdraw
         00002f30 000000e0- 
     733                    
     734 00002f50     0541          setf    1,0,0                   ;Enable display int
     735 00002f60     0580          move    a0,@INTENB+DIP
         00002f70 c000011a  
     736 00002f90     0570          setf    16,1,0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   18

     737                    
     738                    
     739 00002fa0     0d5f          calla   DISPLAY                 ;Build DMAQ, update XYPOS
         00002fb0 00000000! 
     740                    
     741 00002fd0     0360          dint
     742 00002fe0     5600          clr     a0
     743 00002ff0     0580          move    a0,@dirqdraw            ;Draw done
         00003000 000000e0- 
     744                    
     745                    
     746                    
     747                    
     748 00003020           asdp60hzcode                            ;*** This code must run at 60HZ
     749                    
     750 00003020     07a2          move    @_clk_rd,a2,L           ;Increment the time get counter
         00003030 00000000- 
     751 00003050     ce1c          jrn     _no_gt                  ;If negative then no auto clock update
     752 00003060     1022          addk    1,a2
     753 00003070     0782          move    a2,@_clk_rd,L
         00003080 00000000- 
     754 000030a0     0b42          cmpi    1,a2                    ;Time to transfer the time?
         000030b0     fffe  
     755 000030c0     ca0b          jrz     _gt                     ;BR = yes go get time
     756 000030d0     0bc2          xori    01bh,a2                 ;Time to trigger time aquisition?
         000030e0 0000001b  
     757 00003100     cb11          jrnz    _no_gt                  ;BR = nope - exit
     758 00003110     0782          move    a2,@_clk_rd,L           ;Set counter back to 0
         00003120 00000000- 
     759 00003140     0d5f          calla   _aquire_time            ;Trigger time aquistion
         00003150 00000000! 
     760 00003170     c00a          jruc    _no_gt                  ;Done
     761 00003180           _gt
     762 00003180     0d5f          calla   _get_time               ;Transfer time from PIC
         00003190 00000000! 
     763 000031b0     05a2          move    @_tseconds,a2,W         ;Seconds = 0 ?
         000031c0 00000000! 
     764 000031e0     cb03          jrnz    _no_gt                  ;BR = Nope - all done
     765 000031f0     0d5f          calla   _AlarmClock             ;else - go check for alarm functions
         00003200 00000000' 
     766 00003220           _no_gt
     767                    
     768                            .if     WWFUNIT
     769                            .else
     770                            movi    SWITCH,a2
     771                            .endif
     772 00003220     09e3          movi    FSWITCH,a3
         00003230 00000130- 
     773                    
     774                            .if     WWFUNIT
     775                    ;       move    @SWITCH,a2
     776                    ;       move    @COINS,a0
     777 00003250     07a2          move    @_switch_addr,a2,L
         00003260 00000000! 
     778 00003280     8442          move    *a2,a2
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   19

     779 00003290     07a0          move    @_coin_addr,a0,L
         000032a0 00000000! 
     780 000032c0     8400          move    *a0,a0
     781 000032d0     2600          sll     16,a0
     782                    ;       andi    0ffffh,a2               ; 3,12
     783                    ;       or      a2,a0                   ; 1,4
     784 000032e0     ec40          movx    a2,a0                   ; 1,4
     785                            .else
     786                            move    *a2+,a0,L
     787                            .endif
     788 000032f0     03e0          not     a0
     789 00003300     9203          move    a0,*a3+,L
     790                    
     791                            .if     WWFUNIT
     792                    ;       move    @SWITCH2,a0
     793                    ;       move    @DIPSWITCH,a1
     794 00003310     07a0          move    @_switch2_addr,a0,L
         00003320 00000000! 
     795 00003340     8400          move    *a0,a0
     796 00003350     07a1          move    @_dipswitch_addr,a1,L
         00003360 00000000! 
     797 00003380     8421          move    *a1,a1
     798 00003390     2601          sll     16,a1
     799                    ;       andi    0ffffh,a2               ; 3,12
     800                    ;       or      a2,a0                   ; 1,4
     801 000033a0     ec01          movx    a0,a1                   ; 1,4
     802                            .else
     803                            move    *a2,a1,L
     804                            .endif
     805                    
     806                    
     807 000033b0     03e1          not     a1
     808 000033c0     8223          move    a1,*a3,L
     809                    
     810                    
     811 000033d0     07a2          move    @switches_cur,a2,L
         000033e0 000001b0- 
     812 00003400     0782          move    a2,@switches_old,L
         00003410 00000170- 
     813 00003430     07a1          move    @FSWITCH,a1,L
         00003440 00000130- 
     814 00003460     0781          move    a1,@switches_cur,L
         00003470 000001b0- 
     815 00003490     4c40          move    a2,a0
     816 000034a0     5622          xor     a1,a2                   ;down transitions
     817 000034b0     5022          and     a1,a2
     818 000034c0     0782          move    a2,@switches_down,L
         000034d0 00000230- 
     819 000034f0     5601          xor     a0,a1                   ;up transitions
     820 00003500     5001          and     a0,a1
     821 00003510     0781          move    a1,@switches_up,L
         00003520 000001f0- 
     822                    
     823 00003540     07a2          move    @switches_cur+20h,a2,L
         00003550 000001d0- 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   20

     824 00003570     0782          move    a2,@switches_old+20h,L
         00003580 00000190- 
     825 000035a0     07a1          move    @FSWITCH+20h,a1,L
         000035b0 00000150- 
     826 000035d0     0781          move    a1,@switches_cur+20h,L
         000035e0 000001d0- 
     827 00003600     4c40          move    a2,a0
     828 00003610     5622          xor     a1,a2                   ;down transitions
     829 00003620     5022          and     a1,a2
     830 00003630     0782          move    a2,@switches_down+20h,L
         00003640 00000250- 
     831 00003660     5601          xor     a0,a1                   ;up transitions
     832 00003670     5001          and     a0,a1
     833 00003680     0781          move    a1,@switches_up+20h,L
         00003690 00000210- 
     834                    
     835                    
     836 000036b0     05a1          move    @dirqtimer,a1           ;Tell mproc to run
         000036c0 000000c0- 
     837 000036e0     1021          addk    1,a1
     838 000036f0     0581          move    a1,@dirqtimer
         00003700 000000c0- 
     839                    
     840                    ;       callr   switch_stack            ;Scan misc switches
     841                    
     842 00003720     18a1          MOVK    5,A1
     843 00003730     09e2          MOVI    C_FLAGS,A2
         00003740 00000000! 
     844 00003760           ALL_COUNTERS_DONE
     845 00003760     8e43          MOVB    *A2,A3
     846 00003770     ca02          JRZ     NO_WORRY_COUNTER
     847 00003780     1423          SUBK    1,A3
     848 00003790     8062          MOVE    A3,*A2
     849 000037a0           NO_WORRY_COUNTER
     850 000037a0     1102          ADDK    8,A2
     851 000037b0     3cc1          DSJS    A1,ALL_COUNTERS_DONE
     852                    
     853                    
     854 000037c0     0360          dint
     855 000037d0     0541          setf    1,0,0                   ;Enable display int
     856 000037e0     1821          movk    1,a1
     857 000037f0     0581          move    a1,@INTENB+DIP
         00003800 c000011a  
     858 00003820     0570          setf    16,1,0
     859                    
     860                    
     861 00003830     05a0          move    @dirqcnt,a0
         00003840 000000d0- 
     862 00003860     1020          addk    1,a0
     863 00003870     0580          move    a0,@dirqcnt
         00003880 000000d0- 
     864 000038a0     27a0          sll     32-3,a0
     865 000038b0     cb46          jrnz    dirqx                   ;Skip?
     866                    
     867                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   21

     868                                                            ;0DHo every 8 ticks
     869                            .if     DEBUG
     870                            .else
     871 000038c0     05a0          move    @dirqtimer,a0
         000038d0 000000c0- 
     872 000038f0     0b40          cmpi    400,a0
         00003900     fe6f  
     873 00003910     c980          jahs    init_prog               ;Reset?
         00003920 00000000! 
     874                            .endif
     875                    
     876                    
     877 00003940     05a0          move    @C_FRAC,a0              ;0CHount down coin fraction timer
         00003950 00000000! 
     878 00003970     ca06          jrz     asdpnfrc                        ;No frac?
     879 00003980     2700          sll     32-8,a0
     880 00003990     2d00          srl     32-8,a0
     881 000039a0     1420          subk    1,a0
     882 000039b0     0580          move    a0,@C_FRAC
         000039c0 00000000! 
     883 000039e0           asdpnfrc
     884                    
     885                                                            ;0CHoin counters
     886 000039e0     07a0          move    @COINCNTR,a0,L
         000039f0 00000000! 
     887 00003a10     ca26          jrz     l_dog                   ;Counters, timers inactive?
     888                    
     889 00003a20     1844          movk    2,a4                    ;do both counters
     890 00003a30     09e5          movi    COINCNTR,a5
         00003a40 00000000! 
     891 00003a60           ccntr0l
     892 00003a60     8ea1          movb    *a5,a1                  ;more counts for counter ?
     893 00003a70     ca08          jrz     c_cntr0                 ;no
     894 00003a80     aea2          movb    *a5(16),a2              ;previous pulse time out?
         00003a90     0010  
     895 00003aa0     cb05          jrnz    c_cntr0                 ;no
     896 00003ab0     1842          movk    2,a2
     897 00003ac0     ac45          movb    a2,*a5(16)              ;start new pulse
         00003ad0     0010  
     898 00003ae0     1421          dec     a1                      ;decrement counts
     899 00003af0     8c25          movb    a1,*a5
     900 00003b00           c_cntr0
     901 00003b00     1105          addk    8,a5
     902 00003b10     3d84          dsjs    a4,ccntr0l
     903                    
     904 00003b20     5642          clr     a2                      ;counter on mask
     905                    ;       movi    0100H,a3
     906 00003b30     1823          movk    1,a3
     907 00003b40     1844          movk    2,a4
     908 00003b50           c_cntr1l
     909 00003b50     8ea0          movb    *a5,a0                  ;counter timer active?
     910 00003b60     ca04          jreq    c_cntr1                 ;no
     911 00003b70     1420          dec     a0                      ;yes, dec it and store
     912 00003b80     8c05          movb    a0,*a5
     913 00003b90     ca01          jreq    c_cntr1                 ;done
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   22

     914 00003ba0     4062          add     a3,a2                   ;turn counter solenoid on
     915 00003bb0           c_cntr1
     916 00003bb0     2423          sll     1,a3
     917 00003bc0     1105          addk    8,a5
     918 00003bd0     3d24          dsjs    a4,c_cntr1l
     919                    
     920 00003be0     07a0          move    @_coin_counter_addr,a0,L
         00003bf0 00000000! 
     921 00003c10     0ba2          ori     32,a2
         00003c20 00000020  
     922                    
     923 00003c40     0b82          andi    21h,a2                  ;only set bits 5 and maybe 0.
         00003c50 ffffffde  
     924                    
     925 00003c70     8040          move    a2,*a0,W
     926                    
     927 00003c80           l_dog
     928                            .if     TUNIT2
     929                    ;       move    a0,@WATCHDOG            ;Hit
     930 00003c80     07a0          move    @_watchdog_addr,a0,L
         00003c90 00000000! 
     931 00003cb0     8000          move    a0,*a0
     932                            .else
     933                    
     934                            movi    wdogbone_t,a1           ;0CHlock watchdog
     935                            move    @SYSCOPY,a2
     936                            movk    1,a3
     937                            movi    SYSCTRL,a4
     938                            move    *a1+,a0
     939                    
     940                    roverl  or      a2,a0
     941                            move    a0,*a4
     942                            xor     a3,a0
     943                            move    a0,*a4
     944                            move    *a1+,a0
     945                            jrnn    roverl                  ;More?
     946                    
     947                            move    a2,*a4                  ;Restore
     948                            .endif
     949                    
     950 00003cc0     05ae          move    @VCOUNT,a14
         00003cd0 c00001d0  
     951 00003cf0     058e          move    a14,@dma_bog
         00003d00 00000040- 
     952                    
     953 00003d20     09af  dirqx   mmfm    sp,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14
         00003d30     7fff  
     954 00003d40     09bf          mmfm    sp,b0,b1,b2,b3,b4,b5,b6,b7,b11
         00003d50     08ff  
     955 00003d60     0940          reti
     956                    
     957                    
     958 00003d70           wdogbone_t
     959 00003d70     0000          .word   0,2,0,2,2,-1    ;Watchdog feed table
     960                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   23

     961                    
     962                    *******************************
     963                    * Scan switches
     964                    
     965 00003dd0            SUBRP  switch_stack
     966                    
     967                    ;       move    @COINS,a0,W
     968                    ;       move    @SWITCH,a1,W
     969                    
     970                    ;02/23/95 - This maps the Test Dipswitch onto the TEST switch from the
     971                    ; coindoor when NOT in Diagnostics mode - This allows the diagnostics
     972                    ; process to be triggered by the TEST dipswitch
     973 00003dd0     05a0          move    @GAMSTATE,a0,W
         00003de0 00000000! 
     974 00003e00     ce08          jrn     jiwono_testsw_map
     975 00003e10     07a1          move    @_dipswitch_addr,a1,L
         00003e20 00000000! 
     976 00003e40     8421          move    *a1,a1,W
     977 00003e50     2481          sll     4,a1
     978 00003e60     0ba1          ori     0ffefh,a1
         00003e70 0000ffef  
     979 00003e90           jiwono_testsw_map
     980 00003e90     07a0          move    @_coin_addr,a0,L
         00003ea0 00000000! 
     981 00003ec0     8400          move    *a0,a0,W
     982 00003ed0     5020          and     a1,a0
     983 00003ee0     07a1          move    @_switch_addr,a1,L
         00003ef0 00000000! 
     984 00003f10     8421          move    *a1,a1,W
     985 00003f20     2600          sll     16,a0
     986                    ;       sll     16,a1           ;mask off top 16
     987                    ;       srl     16,a1
     988                    ;       or      a1,a0
     989 00003f30     ec20          movx    a1,a0
     990                    
     991 00003f40     0ba0          ori     06600ffffH,a0   ;Set ignore bits
         00003f50 6600ffff  
     992                    ;       movb    @COINS+16,a1
     993                    ;       move    @SWITCH2,a1,W
     994 00003f70     07a1          move    @_switch2_addr,a1,L
         00003f80 00000000! 
     995 00003fa0     8421          move    *a1,a1,W
     996 00003fb0     07a1          move    @swtemp1,a1,L   ;previous state t=n-1
         00003fc0 000000f0- 
     997 00003fe0     07a2          move    @swtemp2,a2,L   ;previous previous t=n-2
         00003ff0 00000110- 
     998 00004010     0781          move    a1,@swtemp2,L   ;new previous previous
         00004020 00000110- 
     999 00004040     0780          move    a0,@swtemp1,L   ;new previous
         00004050 000000f0- 
    1000 00004070     5022          and     a1,a2
    1001 00004080     5202          andn    a0,a2           ;look for 110
    1002 00004090     ca14          jrz     jiwox           ;No switches?
    1003                    
    1004 000040a0     07a3          move    @swstack_p,a3,L
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   24

         000040b0 00000000! 
    1005                    
    1006 000040d0     0b63  jiwolp  cmpi    swstackbot,a3
         000040e0 ffffffff! 
    1007 00004100     ca0d          jreq    jiwox           ;Switch stack overflow?
    1008                    
    1009 00004110     4c42          move    a2,a2
    1010 00004120     ca0b          jrz     jiwox
    1011                    
    1012 00004130     6a40          lmo     a2,a0           ;1's comp leftmost bit
    1013 00004140     6802          rl      a0,a2           ;get rid of bit
    1014 00004150     2422          sll     1,a2
    1015 00004160     1be1          movk    31,a1           ;calc true bit #
    1016 00004170     4401          sub     a0,a1
    1017 00004180     a023          move    a1,-*a3         ;Stack switch number (0-31)
    1018 00004190     6822          rl      a1,a2           ;Restore switch word without bit
    1019 000041a0     cbf2          jrnz    jiwolp
    1020                    
    1021 000041b0     0783          move    a3,@swstack_p,L ;restore switch stack
         000041c0 00000000! 
    1022                    
    1023 000041e0     0960  jiwox   rets
    1024                    
    1025                    
    1026                    ******************************************************************************
    1027                    * badtrapx - Come here when a trap is hit that is not defined and log it
    1028                    
    1029 000041f0           badtrap31
    1030 000041f0           badtrap30
    1031 000041f0           badtrap28
    1032 000041f0           badtrap27
    1033 000041f0           badtrap26
    1034 000041f0           badtrap25
    1035 000041f0           badtrap24
    1036 000041f0           badtrap23
    1037 000041f0           badtrap22
    1038 000041f0           badtrap21
    1039 000041f0           badtrap20
    1040 000041f0           badtrap19
    1041 000041f0           badtrap18
    1042 000041f0           badtrap17
    1043 000041f0           badtrap16
    1044 000041f0           badtrap15
    1045 000041f0           badtrap14
    1046 000041f0           badtrap13
    1047 000041f0           badtrap12
    1048 000041f0           badtrap11
    1049 000041f0           badtrap9
    1050 000041f0           badtrap8
    1051 000041f0           badtrap7
    1052 000041f0           badtrap6
    1053 000041f0           badtrap5
    1054 000041f0           badtrap4
    1055 000041f0           badtrap3
    1056                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   25

    1057                            .if     DEBUG           ;???
    1058                            LOCKUP
    1059                            eint
    1060                            .else
    1061 000041f0                   CALLERR 9,0
    1062                            .endif
    1063                    
    1064 000042a0     0940          reti
    1065                    
    1066                    
    1067                    ;WRITE TO CODE/IMAGE ROM
    1068 000042b0           wrom_int
    1069                    
    1070                            .if     DEBUG
    1071                    ;If debug, just lockup so we can fix it.
    1072                            LOCKUP
    1073                            eint
    1074                            .else
    1075                    
    1076                    ;If shipping code, audit the error and clear the int
    1077 000042b0                   PUSH    a14
    1078 000042c0     09ee          movi    SYSCINIT,a14
         000042d0 0000987f  
    1079 000042f0     0bce          xori    02000h,a14
         00004300 00002000  
    1080 00004320     058e          move    a14,@SYSCTRL
         00004330 01b00000  
    1081 00004350     0bae          ori     02000h,a14
         00004360 00002000  
    1082 00004380     058e          move    a14,@SYSCTRL
         00004390 01b00000  
    1083 000043b0                   PULL    a14
    1084 000043c0                   CALLERR 9,0
    1085 00004470     0d60          eint
    1086                            .endif
    1087                    
    1088 00004480     0940          reti
    1089                    
    1090 00004490           badtrap
    1091                            .if     DEBUG
    1092                            LOCKUP
    1093                            eint
    1094                            .else
    1095 00004490                   CALLERR 9,0
    1096                            .endif
    1097                    
    1098 00004540     0940          reti
    1099                    
    1100 00004550           badtrap29
    1101                            .if     DEBUG
    1102                            reti
    1103                    ;       LOCKUP                  ;A write to ROM!
    1104                            .endif
    1105 00004550     c0f3          jruc    badtrap
    1106                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   26

    1107                    ******************************************************************************
    1108                    * trap3_handler - Security Trap
    1109                    * a1 = Security Service Identifier
    1110                    *      0 = SetAddresses (I/O address remap)
    1111                    * a0 = Data for particular Security Service
    1112                    *      Security Service         Value
    1113                    *            0                  Don't Care
    1114 00004560            SUBR trap3_handler
    1115 00004560     24a1          sll     5,a1
    1116 00004570     0b21          addi    _SecurityFunctions,a1
         00004580 000001a0" 
    1117 000045a0     8621          move    *a1,a1,L
    1118 000045b0     0921          call    a1
    1119 000045c0     0940          reti
    1120                    
    1121                    ;Initial GSP I/O register values
    1122                    
    1123 000045d0           gspioinit_t
    1124                    ;NEW - Values change because dot clock is twice as fast.
    1125                    ;       .word   015h            ;0C0000000H -- HESYNC
    1126                    ;       .word   HEBLNKINIT      ;0C0000010H -- HEBLNK
    1127                    ;       .word   0fah            ;0C0000020H -- HSBLNK
    1128                    ;       .word   0fch            ;0C0000030H -- HTOTAL
    1129 000045d0     002b          .word   02bh            ;0C0000000H -- HESYNC
    1130 000045e0     0065          .word   HEBLNKINIT      ;0C0000010H -- HEBLNK
    1131 000045f0     01f5          .word   01f5h           ;0C0000020H -- HSBLNK
    1132 00004600     01f9          .word   01f9h           ;0C0000030H -- HTOTAL
    1133                    
    1134 00004610     0003          .word   3               ;0C0000040H -- VESYNC
    1135 00004620     0014          .word   20              ;0C0000050H -- VEBLNK
    1136 00004630     0112          .word   274             ;0C0000060H -- VSBLNK   ;254 lines
    1137 00004640     0120          .word   288             ;0C0000070H -- VTOTAL
    1138 00004650     f010          .word   0f010H          ;0C0000080H -- DPYCTL   ENV|NIL|DXV|SRE|010H
    1139 00004660     fffc          .word   0fffch          ;0C0000090H -- DPYSTRT
    1140 00004670     0112          .word   EOSINT          ;0C00000A0H -- DPYINT 
    1141 00004680     002c          .word   2ch             ;0C00000B0H -- CONTROL
    1142 00004690     0000          .word   0               ;0C00000C0H -- HSTDATA
    1143 000046a0     0000          .word   0               ;0C00000D0H -- HSTADRL
    1144 000046b0     0000          .word   0               ;0C00000E0H -- HSTADRH
    1145 000046c0     0000          .word   0               ;0C00000F0H -- HSTCTLL
    1146 000046d0     0000          .word   0               ;0C0000100H -- HSTCTLH
    1147 000046e0     0000          .word   0               ;0C0000110H -- INTENBL
    1148 000046f0     0000          .word   0               ;0C0000120H -- INTPEND
    1149 00004700     0000          .word   0               ;0C0000130H -- CONVSP
    1150 00004710     0000          .word   0               ;0C0000140H -- CONVDP
    1151 00004720     0008          .word   PXSIZE          ;0C0000150H -- PSIZE
    1152 00004730     0000          .word   0               ;0C0000160H -- PMASK
    1153 00004740     0000          .word   0               ;0C0000170H -- RESERVED
    1154 00004750     0000          .word   0               ;0C0000180H -- RESERVED
    1155 00004760     0000          .word   0               ;0C0000190H -- RESERVED
    1156 00004770     0000          .word   0               ;0C00001A0H -- RESERVED
    1157 00004780     001c          .word   28              ;0C00001B0H -- DPYTAP
    1158 00004790           giiend
    1159                    
    1160                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 02:21:43 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   27

    1161                    ;Initialize all 32 trap vectors
    1162                    
    1163 00000000                   .sect   "VECTORS"
    1164                    
    1165 00000000 000041f0'         .long   badtrap31       ;TRAP 31
    1166 00000020 000041f0'         .long   badtrap30       ;TRAP 30        ILLOP --- ILLEGAL OPCODE
    1167 00000040 00004550'         .long   badtrap29       ;TRAP 29
    1168 00000060 000041f0'         .long   badtrap28       ;TRAP 28
    1169 00000080 000041f0'         .long   badtrap27       ;TRAP 27
    1170 000000a0 000041f0'         .long   badtrap26       ;TRAP 26
    1171 000000c0 000041f0'         .long   badtrap25       ;TRAP 25
    1172 000000e0 000041f0'         .long   badtrap24       ;TRAP 24
    1173 00000100 000041f0'         .long   badtrap23       ;TRAP 23
    1174 00000120 000041f0'         .long   badtrap22       ;TRAP 22
    1175 00000140 000041f0'         .long   badtrap21       ;TRAP 21
    1176 00000160 000041f0'         .long   badtrap20       ;TRAP 20
    1177 00000180 000041f0'         .long   badtrap19       ;TRAP 19
    1178 000001a0 000041f0'         .long   badtrap18       ;TRAP 18
    1179 000001c0 000041f0'         .long   badtrap17       ;TRAP 17
    1180 000001e0 000041f0'         .long   badtrap16       ;TRAP 16
    1181 00000200 000041f0'         .long   badtrap15       ;TRAP 15
    1182 00000220 000041f0'         .long   badtrap14       ;TRAP 14
    1183 00000240 000041f0'         .long   badtrap13       ;TRAP 13
    1184 00000260 000041f0'         .long   badtrap12       ;TRAP 12
    1185 00000280 000041f0'         .long   badtrap11       ;TRAP 11        WV --- WINDOW VIOLATION
    1186 000002a0 00002680'         .long   DIRQ            ;TRAP 10        DI --- DISPLAY INTERRUPT
    1187 000002c0 000041f0'         .long   badtrap9        ;TRAP 9         HI --- HOST INTERRUPT
    1188 000002e0 000041f0'         .long   badtrap8        ;TRAP 8         NMI -- NONMASKABLE INTERRUPT
    1189 00000300 000041f0'         .long   badtrap7        ;TRAP 7
    1190 00000320 000041f0'         .long   badtrap6        ;TRAP 6
    1191 00000340 000041f0'         .long   badtrap5        ;TRAP 5
    1192 00000360 000041f0'         .long   badtrap4        ;TRAP 4
    1193 00000380 00004560'         .long   trap3_handler   ;TRAP 3         Security Trap
    1194 000003a0 000042b0'         .long   wrom_int        ;TRAP 2         INT2 --- EXTERNAL INTERRUPT 2
    1195 000003c0 00000000!         .long   dma_irq         ;TRAP 1         INT1 --- EXTERNAL INTERRUPT 1
    1196 000003e0 00000000!         .long   init_prog       ;TRAP 0         RESET
    1197                    
    1198                    ******************************************************************************
    1199                    
    1200                            .end

 No Errors,  No Warnings
