TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .file   "main.asm"
       3                            .width  132
       4                            .option b,d,l,t
       5                            .mnolist
       6                    
       7                    
       8                            .include        "audit.equ"
       9                            .include        "mproc.equ"
      10                            .include        "display.equ"
      11                            .include        "gsp.equ"
      12                            .include        "sys.equ"
      13                            .include        "game.equ"
      14                            .include        "dip.equ"
      15                            .include        "macros.h"
      16                            .include        "wwfsec.equ"
      17                                            
      18                    
      19                    
      20                            .ref    RESET_VOICE_QUEUE,ANNOUNCE_VOICE
      21                    
      22                            .ref    set_up_line_tables
      23                    
      24                            .ref    swstackbot
      25                            .ref    process_init
      26                            .ref    C_FLAGS
      27                            .ref    display_init
      28                            .ref    GAMSTATE
      29                            .ref    dma_irq
      30                            .ref    swstacktop
      31                            .ref    C_FRAC
      32                            .ref    READ_DIP
      33                            .ref    init_prog
      34                            .ref    swstack_p
      35                            .ref    COINCNTR
      36                            .ref    pal_transfer
      37                    
      38                            .ref    _sound_addr
      39                            .ref    _coin_addr
      40                            .ref    _switch_addr
      41                            .ref    _switch2_addr
      42                            .ref    _watchdog_addr
      43                            .ref    _dipswitch_addr
      44                            .ref    _soundirq_addr
      45                            .ref    _coin_counter_addr
      46                            .ref    _get_time
      47                            .ref    _aquire_time
      48                            .ref    _tmonth
      49                            .ref    _tdate
      50                            .ref    _thours
      51                            .ref    _tminutes
      52                            .ref    _tseconds
      53                    
      54                            ;from DCSSOUND.ASM
      55                            .ref    qsndrst_proc
      56                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE    2

      57                            .def    InitPIC
      58                            .def    SecFuncCheck
      59                    
      60                            .globl  RemapIO
      61                            .globl  InitPIC
      62                            .globl  _clk_rd
      63                            .globl  SecFuncCheck
      64                    
      65                    ALARM_MAC       .macro  month,date,hour,minute,func
      66                            .word   :month:                 ;month number 1-12 (-1 = don't care)
      67                            .word   :date:                  ;date (1-31) (-1 = don't care)
      68                            .word   :hour:                  ;hour (0-23) (-1 = don't care)
      69                            .word   :minute:                ;minute (0-59) (-1 = don't care)
      70                            .long   :func:                  ;func - Pointer to function to call
      71                            .endm
      72                    
      73                    
      74 00000000                   .bss    _clk_rd,32              ;Clock Trigger Counter
      75 00000020                   .bss    _io_map,32              ;Current I/O Map
      76                    
      77 00000000                   BSSX    dma_bog,16              ;VCOUNT at end of DIRQ
      78 00000000                   BSSX    dma_meter,16            ;show line?
      79 00000000                   BSSX    cpu_meter,16            ;show line for cpu
      80                    
      81                    
      82                    
      83 00000000                   BSSX    SYSCOPY         ,16     ;Copy of SYSCTRL latch
      84                    
      85 00000000                   BSSX    WDOGRAM         ,32     ;INITIALIZED LONG FOR WATCH DOG DETECT
      86                    
      87 00000000                   BSSX    IRQSKYE         ,16     ;Erase color
      88 00000000                   BSSX    dpageflip       ,16     ;1=Enable page flip and erasure, 0=No erasure
      89                    
      90 00000000                   BSSX    dirqtimer       ,16     ;+1 by dirq, cleared by mproc
      91 00000000                   BSSX    dirqcnt         ,16     ;+1 each dirq
      92 000000e0                   .bss    dirqdraw        ,16     ;!0=Still drawing last frame
      93                    
      94 000000f0                   .bss    swtemp1         ,32
      95 00000110                   .bss    swtemp2         ,32
      96                    
      97                    
      98 00000130                   .bss    FSWITCH         ,64
      99                    
     100 00000000                   BSSX    switches_old    ,64
     101 00000000                   BSSX    switches_cur    ,64
     102 00000000                   BSSX    switches_up     ,64
     103 00000000                   BSSX    switches_down   ,64
     104                    
     105 00000000                   BSSX    NPLAYERS        ,16     ;NUMBER OF PLAYERS ALLOWED
     106 00000000                   BSSX    COUNTER_MODE    ,16     ;COIN COUNTER MODE
     107 00000000                   BSSX    VALIDATOR       ,16     ;VALIDATOR FLAG 0 = NONE, 1 = INSTALLED
     108                    
     109 00000000                   BSSX    TWOPLAYERS      ,16     ;0 = NO, 1 = YES 2 players
     110                    
     111 00000000                   BSSX    ROLLING_COUNT,16
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE    3

     112                    
     113 00000000                   .data
     114 00000000           ALARM_TAB
     115 00000000                   ALARM_MAC       -1,-1,-1,38,RemapIO     ;Remap I/O at 38 minutes past hour
     116 00000060                   ALARM_MAC       -1,-1,11,4,RemapIO      ;Remap I/O at 11:04 a.m. every day
     117 000000c0                   ALARM_MAC       -1,31,16,27,RemapIO     ;Remap I/O on the 31st at 4:27 p.m.
     118 00000120                   ALARM_MAC       4,1,12,30,RemapIO       ;Remap I/O at 12:30 p.m. on April fools day
     119 00000180 00000000          .long           0
     120 000001a0                   .even
     121                    
     122 000001a0 000015b0' _SecurityFunctions      .long   SetAddresses
     123 000001c0                   .even
     124                    
     125 00000000                   .text
     126                    
     127                    
     128 00000000             SUBR  _AlarmClock
     129 00000000     098f          mmtm    sp,a0,a1,a2
         00000010     e000  
     130 00000020     09e0          movi    ALARM_TAB,a0,L
         00000030 00000000" 
     131 00000050           _ac_loop
     132 00000050     8401          move    *a0,a1,W                ;Get Alarm month
     133 00000060     ca24          jrz     _ac_done                ;BR = No more alarm settings
     134 00000070     ce05          jrn     _ac_date                ;Do we care what month BR = NO
     135 00000080     05a2          move    @_tmonth,a2,W           ;Get current month
         00000090 00000000! 
     136 000000b0     4820          cmp     a1,a0                   ;Same ?
     137 000000c0     cb1b          jrnz    _ac_next                ;Nope - Done with this alarm
     138 000000d0           _ac_date
     139 000000d0     b401          move    *a0(16),a1,W            ;Get Alarm Date
         000000e0     0010  
     140 000000f0     ce05          jrn     _ac_hour                ;Do we care what date BR = no
     141 00000100     05a2          move    @_tdate,a2,W            ;Get current date
         00000110 00000000! 
     142 00000130     4822          cmp     a1,a2                   ;Same ?
     143 00000140     cb13          jrnz    _ac_next                ;Nope - Done with this alarm
     144 00000150           _ac_hour
     145 00000150     b401          move    *a0(32),a1,W            ;Get Alarm Hour
         00000160     0020  
     146 00000170     ce05          jrn     _ac_minute              ;Do we care what hour BR = no
     147 00000180     05a2          move    @_thours,a2,W           ;Get current hour
         00000190 00000000! 
     148 000001b0     4822          cmp     a1,a2                   ;Same ?
     149 000001c0     cb0b          jrnz    _ac_next                ;Nope - Done with this alarm
     150 000001d0           _ac_minute
     151 000001d0     b401          move    *a0(48),a1,W            ;Get Alarm minute
         000001e0     0030  
     152 000001f0     ce08          jrn     _ac_next                ;Do we care what minute BR = no
     153 00000200     05a2          move    @_tminutes,a2,W         ;Get current minute
         00000210 00000000! 
     154 00000230     4822          cmp     a1,a2                   ;Same ?
     155 00000240     cb03          jrnz    _ac_next                ;Nope - Done with this alarm
     156 00000250     b600          move    *a0(64),a0,L            ;Yes - run this alarm function
         00000260     0040  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE    4

     157 00000270     0920          call    a0
     158 00000280           _ac_next
     159 00000280     0b00          addi    96,a0                   ;Increment to next alarm record
         00000290     0060  
     160 000002a0     c0da          jruc    _ac_loop
     161 000002b0           _ac_done
     162 000002b0     09af          mmfm    sp,a0,a1,a2             ;All done - restore registers
         000002c0     0007  
     163 000002d0     0960          rets                            ;Go back to interrupt handler
     164                    
     165 000002e0            SUBR   RemapIO
     166                    
     167                            ;temp!
     168                    
     169 000002e0     07a0          move    @_io_map,a0,L           ;Get Current I/O map
         000002f0 00000020- 
     170 00000310     1020          addk    1,a0                    ;Increment it
     171 00000320     0b40          cmpi    5,a0                    ;>= 5?
         00000330     fffa  
     172 00000340     c401          jrlt    dizumap_ok                      ;Nope - then use it
     173 00000350     5600          clr     a0                      ;else reset it back to 0
     174 00000360           dizumap_ok
     175 00000360     0780          move    a0,@_io_map,L           ;a0 = I/O map number
         00000370 00000020- 
     176 00000390     5621          clr     a1                      ;a1 = SetAddresses Trap Request
     177 000003a0     0903          trap    3                       ;Remap I/O space
     178 000003b0     0960          rets
     179 000003c0           RemapIO_End
     180                    
     181 000003c0           SecFuncTable
     182 000003c0 000002e0'         .long   RemapIO,RemapIO_End
     183 00000400     06a9          .word   06a9h                   ;This is a checksum of the function
     184 00000410 00000000          .long   0
     185                    
     186 00000430            SUBR  InitAddresses
     187 00000430     09e0          movi    COINS,a0
         00000440 01860030  
     188 00000460     0780          move    a0,@_coin_addr,L
         00000470 00000000! 
     189 00000490     09e0          movi    SWITCH,a0
         000004a0 01860000  
     190 000004c0     0780          move    a0,@_switch_addr,L
         000004d0 00000000! 
     191 000004f0     09e0          movi    SWITCH2,a0
         00000500 01860010  
     192 00000520     0780          move    a0,@_switch2_addr,L
         00000530 00000000! 
     193 00000550     09e0          movi    WATCHDOG,a0
         00000560 01860030  
     194 00000580     0780          move    a0,@_watchdog_addr,L
         00000590 00000000! 
     195 000005b0     09e0          movi    DIPSWITCH,a0
         000005c0 01860020  
     196 000005e0     0780          move    a0,@_dipswitch_addr,L
         000005f0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE    5

     197 00000610     09e0          movi    SOUND,a0
         00000620 01680000  
     198 00000640     0780          move    a0,@_sound_addr,L
         00000650 00000000! 
     199 00000670     09e0          movi    SOUNDIRQ,a0
         00000680 01860040  
     200 000006a0     0780          move    a0,@_soundirq_addr,L
         000006b0 00000000! 
     201 000006d0     09e0          movi    COIN_COUNTERS,a0
         000006e0 01860010  
     202 00000700     0780          move    a0,@_coin_counter_addr,L
         00000710 00000000! 
     203 00000730     09c0          movi    VMUX_INITMODE,a0
         00000740     0000  
     204 00000750     0580          move    a0,@VMUX_CONTROL
         00000760 01800000  
     205 00000780     0960          rets
     206                    
     207 00000790            SUBR  AddressSet1
     208 00000790     09e0          movi    COINS_M1,a0
         000007a0 01860090  
     209 000007c0     0780          move    a0,@_coin_addr,L
         000007d0 00000000! 
     210 000007f0     09e0          movi    SWITCH_M1,a0
         00000800 01860040  
     211 00000820     0780          move    a0,@_switch_addr,L
         00000830 00000000! 
     212 00000850     09e0          movi    SWITCH2_M1,a0
         00000860 01860080  
     213 00000880     0780          move    a0,@_switch2_addr,L
         00000890 00000000! 
     214 000008b0     09e0          movi    WATCHDOG_M1,a0
         000008c0 01860090  
     215 000008e0     0780          move    a0,@_watchdog_addr,L
         000008f0 00000000! 
     216 00000910     09e0          movi    DIPSWITCH_M1,a0
         00000920 01860010  
     217 00000940     0780          move    a0,@_dipswitch_addr,L
         00000950 00000000! 
     218 00000970     09e0          movi    SOUND_M1,a0
         00000980 01680000  
     219 000009a0     0780          move    a0,@_sound_addr,L
         000009b0 00000000! 
     220 000009d0     09e0          movi    SOUNDIRQ_M1,a0
         000009e0 01860020  
     221 00000a00     0780          move    a0,@_soundirq_addr,L
         00000a10 00000000! 
     222 00000a30     09e0          movi    COIN_COUNTERS_M1,a0
         00000a40 01860080  
     223 00000a60     0780          move    a0,@_coin_counter_addr,L
         00000a70 00000000! 
     224 00000a90     09c0          movi    (VMUX_INITMODE|VMUX_MODE1),a0
         00000aa0     0001  
     225 00000ab0     0580          move    a0,@VMUX_CONTROL
         00000ac0 01800000  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE    6

     226 00000ae0     0960          rets
     227                    
     228 00000af0            SUBR  AddressSet2
     229 00000af0     09e0          movi    COINS_M2,a0
         00000b00 01860060  
     230 00000b20     0780          move    a0,@_coin_addr,L
         00000b30 00000000! 
     231 00000b50     09e0          movi    SWITCH_M2,a0
         00000b60 01860080  
     232 00000b80     0780          move    a0,@_switch_addr,L
         00000b90 00000000! 
     233 00000bb0     09e0          movi    SWITCH2_M2,a0
         00000bc0 01860020  
     234 00000be0     0780          move    a0,@_switch2_addr,L
         00000bf0 00000000! 
     235 00000c10     09e0          movi    WATCHDOG_M2,a0
         00000c20 01860060  
     236 00000c40     0780          move    a0,@_watchdog_addr,L
         00000c50 00000000! 
     237 00000c70     09e0          movi    DIPSWITCH_M2,a0
         00000c80 01860040  
     238 00000ca0     0780          move    a0,@_dipswitch_addr,L
         00000cb0 00000000! 
     239 00000cd0     09e0          movi    SOUND_M2,a0
         00000ce0 01680000  
     240 00000d00     0780          move    a0,@_sound_addr,L
         00000d10 00000000! 
     241 00000d30     09e0          movi    SOUNDIRQ_M2,a0
         00000d40 01860010  
     242 00000d60     0780          move    a0,@_soundirq_addr,L
         00000d70 00000000! 
     243 00000d90     09e0          movi    COIN_COUNTERS_M2,a0
         00000da0 01860020  
     244 00000dc0     0780          move    a0,@_coin_counter_addr,L
         00000dd0 00000000! 
     245 00000df0     09c0          movi    (VMUX_INITMODE|VMUX_MODE2),a0
         00000e00     0002  
     246 00000e10     0580          move    a0,@VMUX_CONTROL
         00000e20 01800000  
     247 00000e40     0960          rets
     248                    
     249 00000e50            SUBR  AddressSet3
     250 00000e50     09e0          movi    COINS_M3,a0
         00000e60 018600a0  
     251 00000e80     0780          move    a0,@_coin_addr,L
         00000e90 00000000! 
     252 00000eb0     09e0          movi    SWITCH_M3,a0
         00000ec0 01860010  
     253 00000ee0     0780          move    a0,@_switch_addr,L
         00000ef0 00000000! 
     254 00000f10     09e0          movi    SWITCH2_M3,a0
         00000f20 01860080  
     255 00000f40     0780          move    a0,@_switch2_addr,L
         00000f50 00000000! 
     256 00000f70     09e0          movi    WATCHDOG_M3,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE    7

         00000f80 018600a0  
     257 00000fa0     0780          move    a0,@_watchdog_addr,L
         00000fb0 00000000! 
     258 00000fd0     09e0          movi    DIPSWITCH_M3,a0
         00000fe0 01860020  
     259 00001000     0780          move    a0,@_dipswitch_addr,L
         00001010 00000000! 
     260 00001030     09e0          movi    SOUND_M3,a0
         00001040 01680000  
     261 00001060     0780          move    a0,@_sound_addr,L
         00001070 00000000! 
     262 00001090     09e0          movi    SOUNDIRQ_M3,a0
         000010a0 01860050  
     263 000010c0     0780          move    a0,@_soundirq_addr,L
         000010d0 00000000! 
     264 000010f0     09e0          movi    COIN_COUNTERS_M3,a0
         00001100 01860080  
     265 00001120     0780          move    a0,@_coin_counter_addr,L
         00001130 00000000! 
     266 00001150     09c0          movi    (VMUX_INITMODE|VMUX_MODE3),a0
         00001160     0003  
     267 00001170     0580          move    a0,@VMUX_CONTROL
         00001180 01800000  
     268 000011a0     0960          rets
     269                    
     270 000011b0            SUBR  AddressSet4
     271 000011b0     09e0          movi    COINS_M4,a0
         000011c0 01860070  
     272 000011e0     0780          move    a0,@_coin_addr,L
         000011f0 00000000! 
     273 00001210     09e0          movi    SWITCH_M4,a0
         00001220 01860020  
     274 00001240     0780          move    a0,@_switch_addr,L
         00001250 00000000! 
     275 00001270     09e0          movi    SWITCH2_M4,a0
         00001280 01860040  
     276 000012a0     0780          move    a0,@_switch2_addr,L
         000012b0 00000000! 
     277 000012d0     09e0          movi    WATCHDOG_M4,a0
         000012e0 01860070  
     278 00001300     0780          move    a0,@_watchdog_addr,L
         00001310 00000000! 
     279 00001330     09e0          movi    DIPSWITCH_M4,a0
         00001340 01860010  
     280 00001360     0780          move    a0,@_dipswitch_addr,L
         00001370 00000000! 
     281 00001390     09e0          movi    SOUND_M4,a0
         000013a0 01680000  
     282 000013c0     0780          move    a0,@_sound_addr,L
         000013d0 00000000! 
     283 000013f0     09e0          movi    SOUNDIRQ_M4,a0
         00001400 01860080  
     284 00001420     0780          move    a0,@_soundirq_addr,L
         00001430 00000000! 
     285 00001450     09e0          movi    COIN_COUNTERS_M4,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE    8

         00001460 01860040  
     286 00001480     0780          move    a0,@_coin_counter_addr,L
         00001490 00000000! 
     287 000014b0     09c0          movi    (VMUX_INITMODE|VMUX_MODE4),a0
         000014c0     0004  
     288 000014d0     0580          move    a0,@VMUX_CONTROL
         000014e0 01800000  
     289 00001500     0960          rets
     290                    
     291 00001510 00000430' AddressTable    .long   InitAddresses, AddressSet1, AddressSet2
     292 00001570 00000e50'                 .long   AddressSet3, AddressSet4
     293                    
     294                    
     295 000015b0            SUBR  SetAddresses
     296 000015b0     4c00          move    a0,a0
     297 000015c0     ce0c          jrn     _invalid
     298 000015d0     0b40          cmpi    4,a0
         000015e0     fffb  
     299 000015f0     c709          jrgt    _invalid
     300 00001600     24a0          sll     5,a0
     301 00001610     0b20          addi    AddressTable,a0
         00001620 00001510' 
     302 00001640     8600          move    *a0,a0,L
     303 00001650     01e0          pushst
     304 00001660     0360          dint
     305 00001670     0920          call    a0
     306 00001680     01c0          popst
     307 00001690           _invalid
     308 00001690     0960          rets
     309                    
     310 000016a0            SUBR   SecFuncCheck
     311                    
     312                    
     313 000016a0     0960          rets            ;<----------------temp!!!!!!!!!!!!!!!!!!!!!!
     314                    
     315                    
     316 000016b0     09e0          movi    SecFuncTable,a0,L       ;Table of security functions to check
         000016c0 000003c0' 
     317 000016e0           SFC_loop
     318 000016e0     9601          move    *a0+,a1,L               ;Pointer to beginning of function
     319 000016f0     ca0f          jrz     SFC_done
     320 00001700     9602          move    *a0+,a2,L               ;Pointer to end of function
     321 00001710     4422          sub     a1,a2
     322 00001720     2fa2          srl     3,a2
     323 00001730     5663          clr     a3
     324 00001740           SFC_iloop
     325 00001740     8e24          movb    *a1,a4
     326 00001750     0b84          andi    0ffh,a4
         00001760 ffffff00  
     327 00001780     4083          add     a4,a3
     328 00001790     1101          addk    8,a1
     329 000017a0     3ce2          dsjs    a2,SFC_iloop
     330 000017b0     9404          move    *a0+,a4,W
     331 000017c0     4883          cmp     a4,a3
     332 000017d0     caf0          jrz     SFC_loop
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE    9

     333 000017e0                   LOCKUP
     334 000017f0           SFC_done
     335                            
     336                    
     337 000017f0             SUBR  InitPIC
     338 000017f0     0d5f          calla   InitAddresses
         00001800 00000430' 
     339 00001820     5600          clr     a0                      ;Reset the PIC
     340 00001830     07a1          move    @_coin_counter_addr,a1,L
         00001840 00000000! 
     341 00001860     8001          move    a0,*a1,W
     342 00001870     1940          movk    10,a0                   ;Hold RESET fer a bit
     343 00001880     3c20          dsjs    a0,$
     344 00001890     1a00          movk    010h,a0                 ;Set no command request
     345 000018a0     0580          move    a0,@PIC_COMMAND,W
         000018b0 01600000  
     346 000018d0     1800          movk    020h,a0                 ;Allow PIC to run
     347 000018e0     07a1          move    @_coin_counter_addr,a1,L
         000018f0 00000000! 
     348 00001910     8001          move    a0,*a1,W
     349 00001920     09e1          movi    200000000,a1
         00001930 0bebc200  
     350 00001950           _pwait_loop
     351 00001950     07a0          move    @_soundirq_addr,a0,L
         00001960 00000000! 
     352 00001980     8400          move    *a0,a0,W
     353 00001990     1e60          btst    12,a0
     354 000019a0     ca05          jrz     _pnwait
     355 000019b0     07a0          move    @_watchdog_addr,a0,L
         000019c0 00000000! 
     356 000019e0     8000          move    a0,*a0
     357 000019f0     3d61          dsjs    a1,_pwait_loop
     358 00001a00           _pnwait
     359 00001a00     1a00          movk    010h,a0
     360 00001a10     0580          move    a0,@PIC_COMMAND,W
         00001a20 01600000  
     361 00001a40     09e1          movi    2000000,a1
         00001a50 001e8480  
     362 00001a70           _pwait_loop1
     363 00001a70     07a0          move    @_soundirq_addr,a0,L
         00001a80 00000000! 
     364 00001aa0     8400          move    *a0,a0,W
     365 00001ab0     1e60          btst    12,a0
     366 00001ac0     cb05          jrnz    _pwait_done
     367 00001ad0     07a0          move    @_watchdog_addr,a0,L
         00001ae0 00000000! 
     368 00001b00     8000          move    a0,*a0
     369 00001b10     3d61          dsjs    a1,_pwait_loop1
     370 00001b20           _pwait_done
     371 00001b20     0960          rets
     372                    
     373                    
     374 00001b30            SUBR   init_all
     375 00001b30     0360          dint                            ;No interrupts until addresses set up
     376 00001b40     5600          clr     a0                      ;0CHlr scratch mem
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   10

     377 00001b50     09e1          movi    SCRATCH,a1
         00001b60 01000000  
     378 00001b80     09e2          movi    018000H-20,a2           ;128K minus some stack
         00001b90 00017fec  
     379 00001bb0     9201  dizulp  move    a0,*a1+,L
     380 00001bc0     3c42          dsjs    a2,dizulp
     381                    
     382 00001bd0     0d5f          calla   set_up_line_tables
         00001be0 00000000! 
     383 00001c00     09c0          movi    -1,a0                   ;Auto Clock update OFF
         00001c10     ffff  
     384 00001c20     0780          move    a0,@_clk_rd,L
         00001c30 00000000- 
     385 00001c50     0d5f          calla   InitPIC                 ;Initialize the PIC
         00001c60 000017f0' 
     386                    
     387 00001c80     09e0          movi    WDOGNUM,a0
         00001c90 1a2b3c4d  
     388 00001cb0     0780          move    a0,@WDOGRAM,L           ;Mark system as initialized
         00001cc0 00000080- 
     389                    
     390 00001ce0     09e0          movi    SYSCINIT|WPIROM,a0
         00001cf0 000098ff  
     391                    
     392 00001d10     0580          move    a0,@SYSCTRL
         00001d20 01b00000  
     393 00001d40     0580          move    a0,@SYSCOPY             ;Copy
         00001d50 00000070- 
     394                    
     395 00001d70     0d3f          callr   io_init                 ;Initialize the I/O regs
         00001d80     0074  
     396                    
     397 00001d90     0d5f          calla   display_init            ;Init display system
         00001da0 00000000! 
     398                    
     399 00001dc0     0d5f          calla   process_init            ;Init process list
         00001dd0 00000000! 
     400                    
     401 00001df0     1820          movk    INAMODE,a0
     402 00001e00     0580          move    a0,@GAMSTATE
         00001e10 00000000! 
     403 00001e30     09e0          movi    81261A8CH,a0            ;Random seed
         00001e40 81261a8c  
     404 00001e60     0780          move    a0,@RAND,L
         00001e70 00000000! 
     405                    
     406 00001e90     09e0          movi    swstacktop,a0           ;Initialize switch stack
         00001ea0 00000000! 
     407 00001ec0     0780          move    a0,@swstack_p,L
         00001ed0 00000000! 
     408                    
     409 00001ef0     0d3f          callr   dip_init                ;Initialize the dipswitches
         00001f00     002a  
     410                    
     411 00001f10                   CREATE  QSNDRST_PID,qsndrst_proc        ;Init sound board
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   11

     412 00001fa0     0d5f          CALLA   RESET_VOICE_QUEUE
         00001fb0 00000000! 
     413 00001fd0                   CREATE  VOICE_PID,ANNOUNCE_VOICE
     414                    
     415 00002060     1820          movk    1,a0
     416 00002070     0580          move    a0,@DISPLAYON
         00002080 00000000! 
     417                    
     418                            ;clear write-to-rom ints
     419                            ; Toddview messes with the interrupt vector table at startup,
     420                            ; and we end up with a pending WROM int.  Clear it out to avoid
     421                            ; hanging right off the bat.
     422 000020a0     05a0          move    @SYSCOPY,a0
         000020b0 00000070- 
     423 000020d0     0bc0          xori    02000h,a0
         000020e0 00002000  
     424 00002100     0580          move    a0,@SYSCTRL
         00002110 01b00000  
     425 00002130     05a0          move    @SYSCOPY,a0
         00002140 00000070- 
     426 00002160     0580          move    a0,@SYSCTRL
         00002170 01b00000  
     427                    
     428 00002190     0d60          eint
     429                    
     430 000021a0     0960          rets
     431                    
     432                    
     433                    
     434 000021b0           dip_init
     435 000021b0                   PUSH    a0,a1
     436                    
     437 000021d0     0d5f          calla   READ_DIP                ;Get the current dip switch bits
         000021e0 00000000! 
     438 00002200     4c01          move    a0,a1
     439                    
     440 00002210     0b80          andi    DPPLAYERS,a0            ;AQUIRE THE NUMBER OF PLAYERS
         00002220 fffffffe  
     441 00002240     2460          sll     3,a0
     442 00002250     0b20          addi    dizupnum_t,a0
         00002260 000024a0' 
     443 00002280     8e00          movb    *a0,a0
     444 00002290     0580          move    a0,@NPLAYERS
         000022a0 00000270- 
     445                    
     446 000022c0     4c20          move    a1,a0
     447 000022d0     0b80          andi    DPCOUNTER,a0
         000022e0 ffff3fff  
     448 00002300     2ea0          srl     DPCOUNTER_SRL-3,a0
     449 00002310     0b20          addi    dizucntr_t,a0
         00002320 000024b0' 
     450 00002340     8e00          movb    *a0,a0                  ;Match eugene's old shit
     451 00002350     0580          move    a0,@COUNTER_MODE
         00002360 00000280- 
     452                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   12

     453 00002380     4c20          move    a1,a0
     454 00002390     0b80          andi    DPVALIDATOR,a0          ;AQUIRE THE VALIDATOR STATUS
         000023a0 fffffffd  
     455 000023c0     2fe0          srl     DPVALIDATOR_SRL,a0
     456 000023d0     0580          move    a0,@VALIDATOR           ;SAVE IT
         000023e0 00000290- 
     457                    
     458 00002400     4c20          move    a1,a0
     459 00002410     0b80          andi    DPPLAYERS,a0
         00002420 fffffffe  
     460 00002440     0580          move    a0,@TWOPLAYERS          ;0=4 plyrs, 1=2 plyrs
         00002450 000002a0- 
     461                    
     462 00002470                   PULL    a0,a1
     463 00002490     0960          rets
     464                    
     465                    
     466 000024a0       04  dizupnum_t      .byte   4,2
     467                    
     468                    
     469 000024b0       02  dizucntr_t      .byte   2,3,1,2
     470 000024d0                   .even
     471                    
     472                    
     473                    
     474 000024d0           io_init
     475 000024d0                   PUSH    b2,b6
     476 000024f0     09f6          movi    INTIO,b6
         00002500 00002560' 
     477 00002520     0136          exgpc   b6
     478 00002530                   PULL    b2,b6
     479 00002550     0960          rets
     480                    
     481                    
     482                    
     483 00002560            SUBR   INTIO
     484                    
     485 00002560     09f2          movi    HESYNC,b2
         00002570 c0000000  
     486 00002590     09f0          movi    gspioinit_t,b0
         000025a0 000045d0' 
     487 000025c0     09f1          movi    (giiend-gspioinit_t)/16,b1
         000025d0 0000001c  
     488 000025f0     9812  jjgdlp  move    *b0+,*b2+
     489 00002600     3c51          dsj     b1,jjgdlp
     490                    
     491 00002610     09c0          movi    VMUX_INITMODE,a0
         00002620     0000  
     492 00002630     0580          move    a0,@VMUX_CONTROL,W
         00002640 01800000  
     493                    
     494 00002660     0136          exgpc   b6
     495                    
     496                    
     497                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   13

     498 00002670            SUBR   WDOGDIS
     499                    
     500                            .if     TUNIT=0
     501                    
     502                            PUSH    a0,a1,a2,a3,a4
     503                    
     504                            pushst
     505                            setf    16,1,0
     506                    
     507                            movi    jnhudis_t,a1
     508                            move    @SYSCOPY,a2
     509                            movk    1,a3
     510                            movi    SYSCTRL,a4
     511                            move    *a1+,a0
     512                    
     513                    jnhulp  or      a2,a0
     514                            move    a0,*a4
     515                            xor     a3,a0
     516                            move    a0,*a4
     517                            move    *a1+,a0
     518                            jrnn    jnhulp
     519                    
     520                            move    a2,*a4
     521                    
     522                            popst
     523                            PULL    a0,a1,a2,a3,a4
     524                            rets
     525                    
     526                    
     527                    jnhudis_t       .word   0,0,0,0, 2,0,2,0, -1    ;WATCH DOG DISABLE TABLE
     528                    
     529                            .else
     530                    
     531 00002670     0960          rets
     532                    
     533                            .endif
     534                    
     535                    
     536                    
     537 00002680           DIRQ
     538 00002680     099f          mmtm    sp,b0,b1,b2,b3,b4,b5,b6,b7,b11
         00002690     ff10  
     539 000026a0     098f          mmtm    sp,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14
         000026b0     fffe  
     540                    
     541                    
     542 000026c0     0541          setf    1,0,0
     543 000026d0     058f          move    sp,@INTPEND+DIP         ;Clear int pending
         000026e0 c000012a  
     544 00002700     058f          move    sp,@INTENB+DIP          ;Disable display int
         00002710 c000011a  
     545                    
     546 00002730     0d60          eint                            ;Let DMA int run
     547                    
     548 00002740     0570          setf    16,1,0                  ;Word sign extend
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   14

     549                    
     550 00002750     05a1          MOVE    @ROLLING_COUNT,A1
         00002760 000002b0- 
     551 00002780     1021          INC     A1
     552 00002790     0581          MOVE    A1,@ROLLING_COUNT
         000027a0 000002b0- 
     553                    
     554 000027c0     09e8          movi    DPYCTL,a8
         000027d0 c0000080  
     555                    
     556 000027f0     8507          move    *a8,a7                  ;>Shift register read to restart DMA
     557 00002800     09c0          movi    NIL|DXV|SRT|010H,a0
         00002810     6810  
     558 00002820     8008          move    a0,*a8
     559 00002830     09e2          movi    510*01000H,a2           ;*Autoerase lines
         00002840 001fe000  
     560 00002860     fa42          pixt    *a2,a2                  ;Mem to shift reg xfer
     561                    
     562 00002870     0d3f          callr   switch_stack            ;Scan misc switches
         00002880     0154  
     563                    
     564 00002890     05a0          move    @dirqdraw,a0
         000028a0 000000e0- 
     565 000028c0     cb14          jrnz    di50                    ;In draw code?
     566                    
     567 000028d0     4db0          move    b13,b0
     568 000028e0     ce14          jrn     jnhuchkmp                       ;DMA done?
     569                    
     570                    
     571 000028f0     05a0          move    @GAMSTATE,a0
         00002900 00000000! 
     572 00002920     ce10          jrn     jnhuchkmp                       ;In diagnostics? (B13 invalid)
     573                    
     574 00002930     09c1          movi    26000/4,a1              ;>Make sure DMA is OK
         00002940     1964  
     575 00002950     49b0  jnhudqwait      cmp     b13,b0
     576 00002960     cb0a          jrne    di50                    ;DMAQ changed?
     577 00002970     3c61          dsj     a1,jnhudqwait
     578                    
     579                            .if     DEBUG
     580                            trap    29
     581                            .endif
     582                    
     583 00002980     5621          clr     a1
     584 00002990     0581          move    a1,@DMACTRL             ;Timed out
         000029a0 01a00010  
     585 000029c0     0581          move    a1,@DMACTRL
         000029d0 01a00010  
     586 000029f0     1421          subk    1,a1
     587 00002a00     4e2d          move    a1,b13
     588                    
     589 00002a10     80e8  di50    move    a7,*a8                  ;Restore
     590 00002a20     c05f          jruc    jnhu60hzcode            ;Skip flip
     591                    
     592                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   15

     593 00002a30     05a1  jnhuchkmp       move    @dirqtimer,a1
         00002a40 000000c0- 
     594 00002a60     cbfa          jrnz    di50                    ;Mproc not done?
     595                    
     596 00002a70     05a2          move    @dpageflip,a2
         00002a80 000000b0- 
     597 00002aa0     ca3c          jrz     di400                   ;Flipping off?
     598                    
     599                    
     600 00002ab0     1880          movk    4,a0                    ; this save 1 cycle
     601 00002ac0     03a0          neg     a0
     602 00002ad0     09f2          movi    PAGE1YO*01000H,b2       ;*Page1
         00002ae0 00100000  
     603 00002b00     05a1          move    @dpage,a1
         00002b10 00000000! 
     604 00002b30     cb03          jrnz    jnhuonp1
     605 00002b40     09c0          movi    -01004H,a0              ;Page1
         00002b50     effc  
     606 00002b60     5652          clr     b2                      ;*Page0
     607 00002b70     0580  jnhuonp1        move    a0,@DPYSTRT             ;If we don't page flip next time
         00002b80 c0000090  
     608 00002ba0     0580          move    a0,@DPYADR              ;Override DPYSTRT
         00002bb0 c00001e0  
     609 00002bd0     03e1          not     a1                      ;Flip
     610 00002be0     0581          move    a1,@dpage
         00002bf0 00000000! 
     611                    
     612                    
     613 00002c10     0360          dint
     614 00002c20     09c1          movi    26000/8,a1              ;>Wait on last DMA
         00002c30     0cb2  
     615 00002c40     05a0  jnhudwait       move    @DMACTRL,a0
         00002c50 01a00010  
     616 00002c70     cf04          jrnn    jnhudmaoff                      ;DMA stopped?
     617 00002c80     3ca1          dsj     a1,jnhudwait
     618 00002c90     0581          move    a1,@DMACTRL             ;Timed out
         00002ca0 01a00010  
     619                            .if     DEBUG
     620                            trap    29
     621                            .endif
     622 00002cc0           jnhudmaoff
     623                    
     624 00002cc0     4c42          move    a2,a2
     625 00002cd0     ce19          jrn     jnhunoerase             ;Erase off?
     626                    
     627 00002ce0     09e9          movi    CONTROL,a9              ;0CHlear whole page
         00002cf0 c00000b0  
     628 00002d10     8526          move    *a9,a6
     629                    
     630                    
     631 00002d20     1980          MOVk    0ch,a0
     632                    
     633 00002d30     8009          move    a0,*a9                  ;Transparency off
     634 00002d40     1a00          movk    16,a0
     635 00002d50     0580          move    a0,@PSIZE
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   16

         00002d60 c0000150  
     636 00002d80     09d3          movi    SCRN_PTCH*2,b3          ;Pitch (2 lines)
         00002d90     2000  
     637 00002da0                   PUSH    b10,b11,b12,b13,b14
     638 00002dc0     09f7          movi    [127,1],b7              ;Rows:Columns
         00002dd0 007f0001  
     639 00002df0     0fc0          fill    l
     640 00002e00                   PULL    b10,b11,b12,b13,b14
     641                    
     642 00002e20     80c9          move    a6,*a9                  ;Restore
     643 00002e30     1900          movk    PXSIZE,a0
     644 00002e40     0580          move    a0,@PSIZE               ;Normal
         00002e50 c0000150  
     645 00002e70           jnhunoerase
     646                    
     647 00002e70     80e8  di400   move    a7,*a8                  ;Restore
     648 00002e80     0d60          eint
     649                    
     650                    
     651 00002e90     0d5f          calla   pal_transfer            ;Copy new PALs
         00002ea0 00000000! 
     652                    
     653 00002ec0     05c0          move    @IRQSKYE,@ERASELOC      ;Copy bkgnd color
         00002ed0 000000a0- 
         00002ef0 01880000  
     654                    
     655 00002f10     1820          movk    1,a0
     656                    
     657 00002f20     0580          move    a0,@dirqdraw
         00002f30 000000e0- 
     658                    
     659 00002f50     0541          setf    1,0,0                   ;Enable display int
     660 00002f60     0580          move    a0,@INTENB+DIP
         00002f70 c000011a  
     661 00002f90     0570          setf    16,1,0
     662                    
     663                    
     664 00002fa0     0d5f          calla   DISPLAY                 ;Build DMAQ, update XYPOS
         00002fb0 00000000! 
     665                    
     666 00002fd0     0360          dint
     667 00002fe0     5600          clr     a0
     668 00002ff0     0580          move    a0,@dirqdraw            ;Draw done
         00003000 000000e0- 
     669                    
     670                    
     671                    
     672                    
     673 00003020           jnhu60hzcode                            ;*** This code must run at 60HZ
     674                    
     675 00003020     07a2          move    @_clk_rd,a2,L           ;Increment the time get counter
         00003030 00000000- 
     676 00003050     ce1c          jrn     _no_gt                  ;If negative then no auto clock update
     677 00003060     1022          addk    1,a2
     678 00003070     0782          move    a2,@_clk_rd,L
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   17

         00003080 00000000- 
     679 000030a0     0b42          cmpi    1,a2                    ;Time to transfer the time?
         000030b0     fffe  
     680 000030c0     ca0b          jrz     _gt                     ;BR = yes go get time
     681 000030d0     0bc2          xori    01bh,a2                 ;Time to trigger time aquisition?
         000030e0 0000001b  
     682 00003100     cb11          jrnz    _no_gt                  ;BR = nope - exit
     683 00003110     0782          move    a2,@_clk_rd,L           ;Set counter back to 0
         00003120 00000000- 
     684 00003140     0d5f          calla   _aquire_time            ;Trigger time aquistion
         00003150 00000000! 
     685 00003170     c00a          jruc    _no_gt                  ;Done
     686 00003180           _gt
     687 00003180     0d5f          calla   _get_time               ;Transfer time from PIC
         00003190 00000000! 
     688 000031b0     05a2          move    @_tseconds,a2,W         ;Seconds = 0 ?
         000031c0 00000000! 
     689 000031e0     cb03          jrnz    _no_gt                  ;BR = Nope - all done
     690 000031f0     0d5f          calla   _AlarmClock             ;else - go check for alarm functions
         00003200 00000000' 
     691 00003220           _no_gt
     692                    
     693                            .if     WWFUNIT
     694                            .else
     695                            movi    SWITCH,a2
     696                            .endif
     697 00003220     09e3          movi    FSWITCH,a3
         00003230 00000130- 
     698                    
     699                            .if     WWFUNIT
     700 00003250     07a2          move    @_switch_addr,a2,L
         00003260 00000000! 
     701 00003280     8442          move    *a2,a2
     702 00003290     07a0          move    @_coin_addr,a0,L
         000032a0 00000000! 
     703 000032c0     8400          move    *a0,a0
     704 000032d0     2600          sll     16,a0
     705 000032e0     ec40          movx    a2,a0                   ; 1,4
     706                            .else
     707                            move    *a2+,a0,L
     708                            .endif
     709 000032f0     03e0          not     a0
     710 00003300     9203          move    a0,*a3+,L
     711                    
     712                            .if     WWFUNIT
     713 00003310     07a0          move    @_switch2_addr,a0,L
         00003320 00000000! 
     714 00003340     8400          move    *a0,a0
     715 00003350     07a1          move    @_dipswitch_addr,a1,L
         00003360 00000000! 
     716 00003380     8421          move    *a1,a1
     717 00003390     2601          sll     16,a1
     718 000033a0     ec01          movx    a0,a1                   ; 1,4
     719                            .else
     720                            move    *a2,a1,L
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   18

     721                            .endif
     722                    
     723                    
     724 000033b0     03e1          not     a1
     725 000033c0     8223          move    a1,*a3,L
     726                    
     727                    
     728 000033d0     07a2          move    @switches_cur,a2,L
         000033e0 000001b0- 
     729 00003400     0782          move    a2,@switches_old,L
         00003410 00000170- 
     730 00003430     07a1          move    @FSWITCH,a1,L
         00003440 00000130- 
     731 00003460     0781          move    a1,@switches_cur,L
         00003470 000001b0- 
     732 00003490     4c40          move    a2,a0
     733 000034a0     5622          xor     a1,a2                   ;down transitions
     734 000034b0     5022          and     a1,a2
     735 000034c0     0782          move    a2,@switches_down,L
         000034d0 00000230- 
     736 000034f0     5601          xor     a0,a1                   ;up transitions
     737 00003500     5001          and     a0,a1
     738 00003510     0781          move    a1,@switches_up,L
         00003520 000001f0- 
     739                    
     740 00003540     07a2          move    @switches_cur+20h,a2,L
         00003550 000001d0- 
     741 00003570     0782          move    a2,@switches_old+20h,L
         00003580 00000190- 
     742 000035a0     07a1          move    @FSWITCH+20h,a1,L
         000035b0 00000150- 
     743 000035d0     0781          move    a1,@switches_cur+20h,L
         000035e0 000001d0- 
     744 00003600     4c40          move    a2,a0
     745 00003610     5622          xor     a1,a2                   ;down transitions
     746 00003620     5022          and     a1,a2
     747 00003630     0782          move    a2,@switches_down+20h,L
         00003640 00000250- 
     748 00003660     5601          xor     a0,a1                   ;up transitions
     749 00003670     5001          and     a0,a1
     750 00003680     0781          move    a1,@switches_up+20h,L
         00003690 00000210- 
     751                    
     752                    
     753 000036b0     05a1          move    @dirqtimer,a1           ;Tell mproc to run
         000036c0 000000c0- 
     754 000036e0     1021          addk    1,a1
     755 000036f0     0581          move    a1,@dirqtimer
         00003700 000000c0- 
     756                    
     757                    
     758 00003720     18a1          MOVK    5,A1
     759 00003730     09e2          MOVI    C_FLAGS,A2
         00003740 00000000! 
     760 00003760           ALL_COUNTERS_DONE
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   19

     761 00003760     8e43          MOVB    *A2,A3
     762 00003770     ca02          JRZ     NO_WORRY_COUNTER
     763 00003780     1423          SUBK    1,A3
     764 00003790     8062          MOVE    A3,*A2
     765 000037a0           NO_WORRY_COUNTER
     766 000037a0     1102          ADDK    8,A2
     767 000037b0     3cc1          DSJS    A1,ALL_COUNTERS_DONE
     768                    
     769                    
     770 000037c0     0360          dint
     771 000037d0     0541          setf    1,0,0                   ;Enable display int
     772 000037e0     1821          movk    1,a1
     773 000037f0     0581          move    a1,@INTENB+DIP
         00003800 c000011a  
     774 00003820     0570          setf    16,1,0
     775                    
     776                    
     777 00003830     05a0          move    @dirqcnt,a0
         00003840 000000d0- 
     778 00003860     1020          addk    1,a0
     779 00003870     0580          move    a0,@dirqcnt
         00003880 000000d0- 
     780 000038a0     27a0          sll     32-3,a0
     781 000038b0     cb46          jrnz    dirqx                   ;Skip?
     782                    
     783                    
     784                                                            ;0DHo every 8 ticks
     785                            .if     DEBUG
     786                            .else
     787 000038c0     05a0          move    @dirqtimer,a0
         000038d0 000000c0- 
     788 000038f0     0b40          cmpi    400,a0
         00003900     fe6f  
     789 00003910     c980          jahs    init_prog               ;Reset?
         00003920 00000000! 
     790                            .endif
     791                    
     792                    
     793 00003940     05a0          move    @C_FRAC,a0              ;0CHount down coin fraction timer
         00003950 00000000! 
     794 00003970     ca06          jrz     jnhunfrc                        ;No frac?
     795 00003980     2700          sll     32-8,a0
     796 00003990     2d00          srl     32-8,a0
     797 000039a0     1420          subk    1,a0
     798 000039b0     0580          move    a0,@C_FRAC
         000039c0 00000000! 
     799 000039e0           jnhunfrc
     800                    
     801                                                            ;0CHoin counters
     802 000039e0     07a0          move    @COINCNTR,a0,L
         000039f0 00000000! 
     803 00003a10     ca26          jrz     l_dog                   ;Counters, timers inactive?
     804                    
     805 00003a20     1844          movk    2,a4                    ;do both counters
     806 00003a30     09e5          movi    COINCNTR,a5
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   20

         00003a40 00000000! 
     807 00003a60           ccntr0l
     808 00003a60     8ea1          movb    *a5,a1                  ;more counts for counter ?
     809 00003a70     ca08          jrz     c_cntr0                 ;no
     810 00003a80     aea2          movb    *a5(16),a2              ;previous pulse time out?
         00003a90     0010  
     811 00003aa0     cb05          jrnz    c_cntr0                 ;no
     812 00003ab0     1842          movk    2,a2
     813 00003ac0     ac45          movb    a2,*a5(16)              ;start new pulse
         00003ad0     0010  
     814 00003ae0     1421          dec     a1                      ;decrement counts
     815 00003af0     8c25          movb    a1,*a5
     816 00003b00           c_cntr0
     817 00003b00     1105          addk    8,a5
     818 00003b10     3d84          dsjs    a4,ccntr0l
     819                    
     820 00003b20     5642          clr     a2                      ;counter on mask
     821 00003b30     1823          movk    1,a3
     822 00003b40     1844          movk    2,a4
     823 00003b50           c_cntr1l
     824 00003b50     8ea0          movb    *a5,a0                  ;counter timer active?
     825 00003b60     ca04          jreq    c_cntr1                 ;no
     826 00003b70     1420          dec     a0                      ;yes, dec it and store
     827 00003b80     8c05          movb    a0,*a5
     828 00003b90     ca01          jreq    c_cntr1                 ;done
     829 00003ba0     4062          add     a3,a2                   ;turn counter solenoid on
     830 00003bb0           c_cntr1
     831 00003bb0     2423          sll     1,a3
     832 00003bc0     1105          addk    8,a5
     833 00003bd0     3d24          dsjs    a4,c_cntr1l
     834                    
     835 00003be0     07a0          move    @_coin_counter_addr,a0,L
         00003bf0 00000000! 
     836 00003c10     0ba2          ori     32,a2
         00003c20 00000020  
     837                    
     838 00003c40     0b82          andi    21h,a2                  ;only set bits 5 and maybe 0.
         00003c50 ffffffde  
     839                    
     840 00003c70     8040          move    a2,*a0,W
     841                    
     842 00003c80           l_dog
     843                            .if     TUNIT2
     844 00003c80     07a0          move    @_watchdog_addr,a0,L
         00003c90 00000000! 
     845 00003cb0     8000          move    a0,*a0
     846                            .else
     847                    
     848                            movi    wdogbone_t,a1           ;0CHlock watchdog
     849                            move    @SYSCOPY,a2
     850                            movk    1,a3
     851                            movi    SYSCTRL,a4
     852                            move    *a1+,a0
     853                    
     854                    roverl  or      a2,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   21

     855                            move    a0,*a4
     856                            xor     a3,a0
     857                            move    a0,*a4
     858                            move    *a1+,a0
     859                            jrnn    roverl                  ;More?
     860                    
     861                            move    a2,*a4                  ;Restore
     862                            .endif
     863                    
     864 00003cc0     05ae          move    @VCOUNT,a14
         00003cd0 c00001d0  
     865 00003cf0     058e          move    a14,@dma_bog
         00003d00 00000040- 
     866                    
     867 00003d20     09af  dirqx   mmfm    sp,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14
         00003d30     7fff  
     868 00003d40     09bf          mmfm    sp,b0,b1,b2,b3,b4,b5,b6,b7,b11
         00003d50     08ff  
     869 00003d60     0940          reti
     870                    
     871                    
     872 00003d70           wdogbone_t
     873 00003d70     0000          .word   0,2,0,2,2,-1    ;Watchdog feed table
     874                    
     875                    
     876                    
     877 00003dd0            SUBRP  switch_stack
     878                    
     879                    
     880 00003dd0     05a0          move    @GAMSTATE,a0,W
         00003de0 00000000! 
     881 00003e00     ce08          jrn     vatrno_testsw_map
     882 00003e10     07a1          move    @_dipswitch_addr,a1,L
         00003e20 00000000! 
     883 00003e40     8421          move    *a1,a1,W
     884 00003e50     2481          sll     4,a1
     885 00003e60     0ba1          ori     0ffefh,a1
         00003e70 0000ffef  
     886 00003e90           vatrno_testsw_map
     887 00003e90     07a0          move    @_coin_addr,a0,L
         00003ea0 00000000! 
     888 00003ec0     8400          move    *a0,a0,W
     889 00003ed0     5020          and     a1,a0
     890 00003ee0     07a1          move    @_switch_addr,a1,L
         00003ef0 00000000! 
     891 00003f10     8421          move    *a1,a1,W
     892 00003f20     2600          sll     16,a0
     893 00003f30     ec20          movx    a1,a0
     894                    
     895 00003f40     0ba0          ori     06600ffffH,a0   ;Set ignore bits
         00003f50 6600ffff  
     896 00003f70     07a1          move    @_switch2_addr,a1,L
         00003f80 00000000! 
     897 00003fa0     8421          move    *a1,a1,W
     898 00003fb0     07a1          move    @swtemp1,a1,L   ;previous state t=n-1
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   22

         00003fc0 000000f0- 
     899 00003fe0     07a2          move    @swtemp2,a2,L   ;previous previous t=n-2
         00003ff0 00000110- 
     900 00004010     0781          move    a1,@swtemp2,L   ;new previous previous
         00004020 00000110- 
     901 00004040     0780          move    a0,@swtemp1,L   ;new previous
         00004050 000000f0- 
     902 00004070     5022          and     a1,a2
     903 00004080     5202          andn    a0,a2           ;look for 110
     904 00004090     ca14          jrz     vatrx           ;No switches?
     905                    
     906 000040a0     07a3          move    @swstack_p,a3,L
         000040b0 00000000! 
     907                    
     908 000040d0     0b63  vatrlp  cmpi    swstackbot,a3
         000040e0 ffffffff! 
     909 00004100     ca0d          jreq    vatrx           ;Switch stack overflow?
     910                    
     911 00004110     4c42          move    a2,a2
     912 00004120     ca0b          jrz     vatrx
     913                    
     914 00004130     6a40          lmo     a2,a0           ;1's comp leftmost bit
     915 00004140     6802          rl      a0,a2           ;get rid of bit
     916 00004150     2422          sll     1,a2
     917 00004160     1be1          movk    31,a1           ;calc true bit #
     918 00004170     4401          sub     a0,a1
     919 00004180     a023          move    a1,-*a3         ;Stack switch number (0-31)
     920 00004190     6822          rl      a1,a2           ;Restore switch word without bit
     921 000041a0     cbf2          jrnz    vatrlp
     922                    
     923 000041b0     0783          move    a3,@swstack_p,L ;restore switch stack
         000041c0 00000000! 
     924                    
     925 000041e0     0960  vatrx   rets
     926                    
     927                    
     928                    
     929 000041f0           badtrap31
     930 000041f0           badtrap30
     931 000041f0           badtrap28
     932 000041f0           badtrap27
     933 000041f0           badtrap26
     934 000041f0           badtrap25
     935 000041f0           badtrap24
     936 000041f0           badtrap23
     937 000041f0           badtrap22
     938 000041f0           badtrap21
     939 000041f0           badtrap20
     940 000041f0           badtrap19
     941 000041f0           badtrap18
     942 000041f0           badtrap17
     943 000041f0           badtrap16
     944 000041f0           badtrap15
     945 000041f0           badtrap14
     946 000041f0           badtrap13
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   23

     947 000041f0           badtrap12
     948 000041f0           badtrap11
     949 000041f0           badtrap9
     950 000041f0           badtrap8
     951 000041f0           badtrap7
     952 000041f0           badtrap6
     953 000041f0           badtrap5
     954 000041f0           badtrap4
     955 000041f0           badtrap3
     956                    
     957                            .if     DEBUG           ;???
     958                            LOCKUP
     959                            eint
     960                            .else
     961 000041f0                   CALLERR 9,0
     962                            .endif
     963                    
     964 000042a0     0940          reti
     965                    
     966                    
     967 000042b0           wrom_int
     968                    
     969                            .if     DEBUG
     970                            LOCKUP
     971                            eint
     972                            .else
     973                    
     974 000042b0                   PUSH    a14
     975 000042c0     09ee          movi    SYSCINIT,a14
         000042d0 0000987f  
     976 000042f0     0bce          xori    02000h,a14
         00004300 00002000  
     977 00004320     058e          move    a14,@SYSCTRL
         00004330 01b00000  
     978 00004350     0bae          ori     02000h,a14
         00004360 00002000  
     979 00004380     058e          move    a14,@SYSCTRL
         00004390 01b00000  
     980 000043b0                   PULL    a14
     981 000043c0                   CALLERR 9,0
     982 00004470     0d60          eint
     983                            .endif
     984                    
     985 00004480     0940          reti
     986                    
     987 00004490           badtrap
     988                            .if     DEBUG
     989                            LOCKUP
     990                            eint
     991                            .else
     992 00004490                   CALLERR 9,0
     993                            .endif
     994                    
     995 00004540     0940          reti
     996                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   24

     997 00004550           badtrap29
     998                            .if     DEBUG
     999                            reti
    1000                            .endif
    1001 00004550     c0f3          jruc    badtrap
    1002                    
    1003 00004560            SUBR trap3_handler
    1004 00004560     24a1          sll     5,a1
    1005 00004570     0b21          addi    _SecurityFunctions,a1
         00004580 000001a0" 
    1006 000045a0     8621          move    *a1,a1,L
    1007 000045b0     0921          call    a1
    1008 000045c0     0940          reti
    1009                    
    1010                    
    1011 000045d0           gspioinit_t
    1012 000045d0     002b          .word   02bh            ;0C0000000H -- HESYNC
    1013 000045e0     0065          .word   HEBLNKINIT      ;0C0000010H -- HEBLNK
    1014 000045f0     01f5          .word   01f5h           ;0C0000020H -- HSBLNK
    1015 00004600     01f9          .word   01f9h           ;0C0000030H -- HTOTAL
    1016                    
    1017 00004610     0003          .word   3               ;0C0000040H -- VESYNC
    1018 00004620     0014          .word   20              ;0C0000050H -- VEBLNK
    1019 00004630     0112          .word   274             ;0C0000060H -- VSBLNK   ;254 lines
    1020 00004640     0120          .word   288             ;0C0000070H -- VTOTAL
    1021 00004650     f010          .word   0f010H          ;0C0000080H -- DPYCTL   ENV|NIL|DXV|SRE|010H
    1022 00004660     fffc          .word   0fffch          ;0C0000090H -- DPYSTRT
    1023 00004670     0112          .word   EOSINT          ;0C00000A0H -- DPYINT 
    1024 00004680     002c          .word   2ch             ;0C00000B0H -- CONTROL
    1025 00004690     0000          .word   0               ;0C00000C0H -- HSTDATA
    1026 000046a0     0000          .word   0               ;0C00000D0H -- HSTADRL
    1027 000046b0     0000          .word   0               ;0C00000E0H -- HSTADRH
    1028 000046c0     0000          .word   0               ;0C00000F0H -- HSTCTLL
    1029 000046d0     0000          .word   0               ;0C0000100H -- HSTCTLH
    1030 000046e0     0000          .word   0               ;0C0000110H -- INTENBL
    1031 000046f0     0000          .word   0               ;0C0000120H -- INTPEND
    1032 00004700     0000          .word   0               ;0C0000130H -- CONVSP
    1033 00004710     0000          .word   0               ;0C0000140H -- CONVDP
    1034 00004720     0008          .word   PXSIZE          ;0C0000150H -- PSIZE
    1035 00004730     0000          .word   0               ;0C0000160H -- PMASK
    1036 00004740     0000          .word   0               ;0C0000170H -- RESERVED
    1037 00004750     0000          .word   0               ;0C0000180H -- RESERVED
    1038 00004760     0000          .word   0               ;0C0000190H -- RESERVED
    1039 00004770     0000          .word   0               ;0C00001A0H -- RESERVED
    1040 00004780     001c          .word   28              ;0C00001B0H -- DPYTAP
    1041 00004790           giiend
    1042                    
    1043                    
    1044                    
    1045 00000000                   .sect   "VECTORS"
    1046                    
    1047 00000000 000041f0'         .long   badtrap31       ;TRAP 31
    1048 00000020 000041f0'         .long   badtrap30       ;TRAP 30        ILLOP --- ILLEGAL OPCODE
    1049 00000040 00004550'         .long   badtrap29       ;TRAP 29
    1050 00000060 000041f0'         .long   badtrap28       ;TRAP 28
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:56 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

initialization and interrupts                                        PAGE   25

    1051 00000080 000041f0'         .long   badtrap27       ;TRAP 27
    1052 000000a0 000041f0'         .long   badtrap26       ;TRAP 26
    1053 000000c0 000041f0'         .long   badtrap25       ;TRAP 25
    1054 000000e0 000041f0'         .long   badtrap24       ;TRAP 24
    1055 00000100 000041f0'         .long   badtrap23       ;TRAP 23
    1056 00000120 000041f0'         .long   badtrap22       ;TRAP 22
    1057 00000140 000041f0'         .long   badtrap21       ;TRAP 21
    1058 00000160 000041f0'         .long   badtrap20       ;TRAP 20
    1059 00000180 000041f0'         .long   badtrap19       ;TRAP 19
    1060 000001a0 000041f0'         .long   badtrap18       ;TRAP 18
    1061 000001c0 000041f0'         .long   badtrap17       ;TRAP 17
    1062 000001e0 000041f0'         .long   badtrap16       ;TRAP 16
    1063 00000200 000041f0'         .long   badtrap15       ;TRAP 15
    1064 00000220 000041f0'         .long   badtrap14       ;TRAP 14
    1065 00000240 000041f0'         .long   badtrap13       ;TRAP 13
    1066 00000260 000041f0'         .long   badtrap12       ;TRAP 12
    1067 00000280 000041f0'         .long   badtrap11       ;TRAP 11        WV --- WINDOW VIOLATION
    1068 000002a0 00002680'         .long   DIRQ            ;TRAP 10        DI --- DISPLAY INTERRUPT
    1069 000002c0 000041f0'         .long   badtrap9        ;TRAP 9         HI --- HOST INTERRUPT
    1070 000002e0 000041f0'         .long   badtrap8        ;TRAP 8         NMI -- NONMASKABLE INTERRUPT
    1071 00000300 000041f0'         .long   badtrap7        ;TRAP 7
    1072 00000320 000041f0'         .long   badtrap6        ;TRAP 6
    1073 00000340 000041f0'         .long   badtrap5        ;TRAP 5
    1074 00000360 000041f0'         .long   badtrap4        ;TRAP 4
    1075 00000380 00004560'         .long   trap3_handler   ;TRAP 3         Security Trap
    1076 000003a0 000042b0'         .long   wrom_int        ;TRAP 2         INT2 --- EXTERNAL INTERRUPT 2
    1077 000003c0 00000000!         .long   dma_irq         ;TRAP 1         INT1 --- EXTERNAL INTERRUPT 1
    1078 000003e0 00000000!         .long   init_prog       ;TRAP 0         RESET
    1079                    
    1080                    
    1081                            .end

 No Errors,  No Warnings
