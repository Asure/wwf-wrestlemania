TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    **************************************************************
       2                    *
       3                    * Software:             Jamie Rivett
       4                    * Initiated:            9/3/93
       5                    *
       6                    * COPYRIGHT (C) 1992 WILLIAMS ELECTRONICS GAMES, INC.
       7                    *
       8                    **************************************************************
       9                    
      10                            .file   "doink.asm"
      12                            .width  132
      13                            .option b,d,l,t
      14                            .mnolist
      15                    
      16                    
      17                            .include        "macros.h"
      18                            .include        "jjxm.h"
      19                            .include        "mproc.equ"             ;Mproc equates
      20                            .include        "display.equ"           ;Display proc equates
      21                            .include        "gsp.equ"               ;Gsp asm equates
      22                            .include        "sys.equ"
      23                            .include        "game.equ"
      24                            .include        "plyr.equ"
      25                            .include        "anim.equ"
      26                            .include        "audit.equ"
      27                            .include        "sound.h"
      28                            .include        "ring.equ"
      29                            .include        "lifebar.h"
      30                            .include        "damage.equ"
      31                    
      32                            ;temp! - 314
      33                            .include        "tmpdebug.h"
      34                    
      35                    
      36                    ******************************************************************************
      37                    * EXTERNAL REFERENCES
      38                    
      39                    
      40                            .ref    BLOCK_WOOSH,get_opp_process,calc_line_x,can_pin
      41                            .ref    PSTATUS2,is_final_match,FINAL_PTR
      42                            .ref    DO_REVERSAL,DO_REVERSAL_MESS,FIND_AND_KILL_ENDLESS
      43                            .ref    ADD_IF_SILENT,JUMP_ROPES,CLIMB_ROPES
      44                            .ref    get_powerk_dtime
      45                    
      46                            .ref    set_getup_time,set_raisearm_bit
      47                            .ref    get_punch_dtime
      48                            .ref    get_rope_x,ck_teammate_pin,raisearm_check
      49                            .ref    inc_getup_time
      50                    
      51                            .ref    change_anim1,change_anim1a
      52                            .ref    change_anim2,change_anim2a
      53                            .ref    process_ptrs
      54                            .ref    keep_attached
      55                            .ref    get_opp_plyrmode
      56                            .ref    wres_collis_off
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    2

      57                            .ref    convert_facing
      58                            .ref    check_secret_moves
      59                            .ref    change_walk_anim
      60                            .ref    set_rotate_anim
      61                            .ref    execute_walk
      62                            .ref    bounce_off_ropes
      63                            .ref    climb_turnbuckle
      64                            .ref    ADD_VOICE,round_award
      65                            .ref    HALT,clear_combo_meter
      66                            .ref    mode_choking
      67                            .ref    master_keep_attached
      68                            .ref    PCNT,init_reduce_bog
      69                            .ref    RNDPER,is_8_on_1
      70                            .ref    current_round,change_wrestler
      71                            .ref    p1rounds,p2rounds,hitonground_tbl,arw_bwait
      72                    
      73                            ;from DCSSOUND.ASM
      74                            .ref    triple_sound
      75                    
      76                            ;from WRESTLE.ASM
      77                            .ref    drone_change_back
      78                            .ref    read_switches
      79                            .ref    BONUS_MESS
      80                            .ref    blocking_off
      81                            .ref    hyper_speed_on
      82                            .ref    in_finish_move,royal_rumble
      83                            .ref    p1rounds,p2rounds
      84                            .if NUM_DOINK_FINISHES
      85                            .ref    dnk_finish1_move
      86                            .if NUM_DOINK_FINISHES > 1
      87                            .ref    dnk_finish2_move
      88                            .endif
      89                            .endif
      90                            .ref    in_finish_move,finish_completed
      91                    
      92                    ;animation sequence
      93                    
      94                            .ref    dnk_3_pile_driver_anim
      95                            .ref    start_run_anim
      96                    
      97                            .ref    dnk_4_earslap_anim
      98                            .ref    dnk_2_earslap_anim
      99                            .ref    dnk_4_slap_anim
     100                            .ref    dnk_2_slap_anim
     101                    ;       .ref    dnk_4_slap2_anim
     102                    ;       .ref    dnk_2_slap2_anim
     103                            .ref    dnk_head_hit_dizzy_anim
     104                            .ref    dnk_knockdwn_anim
     105                            .ref    dnk_4_hammer_anim
     106                    
     107                            .ref    wres_slave_anim
     108                            .ref    dnk_zip_anim
     109                    
     110                            .ref    dnk_2_raise_arm_anim,dnk_4_raise_arm_anim
     111                            .ref    dnk_stand2_anim,dnk_stand8_anim
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    3

     112                            .ref    dnk_stand4_anim,dnk_stand6_anim
     113                            .ref    dnk_torso2_anim,dnk_torso8_anim
     114                            .ref    dnk_torso4_anim,dnk_torso6_anim
     115                    
     116                            .ref    dnk_2_to_4_turn_anim,dnk_8_to_6_turn_anim       ;stand
     117                            .ref    dnk_4_to_2_turn_anim,dnk_6_to_8_turn_anim
     118                            .ref    dnk_4_to_6_turn_anim,dnk_6_to_4_turn_anim
     119                            .ref    dnk_2_to_8_turn_anim,dnk_8_to_2_turn_anim
     120                            .ref    dnk_4_to_8_turn_anim,dnk_6_to_2_turn_anim
     121                            .ref    dnk_2_to_6_turn_anim,dnk_8_to_4_turn_anim
     122                    
     123                            .ref    dnk_2_to_4_turn2_anim,dnk_8_to_6_turn2_anim     ;torso
     124                            .ref    dnk_4_to_2_turn2_anim,dnk_6_to_8_turn2_anim
     125                            .ref    dnk_4_to_6_turn2_anim,dnk_6_to_4_turn2_anim
     126                            .ref    dnk_2_to_8_turn2_anim,dnk_8_to_2_turn2_anim
     127                            .ref    dnk_4_to_8_turn2_anim,dnk_6_to_2_turn2_anim
     128                            .ref    dnk_2_to_6_turn2_anim,dnk_8_to_4_turn2_anim
     129                    
     130                            .ref    dnk_walk1_f2_anim,dnk_walk2_f2_anim,dnk_walk4_f2_anim
     131                            .ref    dnk_walk5_f2_anim,dnk_walk6_f2_anim,dnk_walk8_f2_anim
     132                    
     133                            .ref    dnk_walk1_f4_anim,dnk_walk2_f4_anim,dnk_walk4_f4_anim
     134                            .ref    dnk_walk5_f4_anim,dnk_walk6_f4_anim,dnk_walk8_f4_anim
     135                    
     136                            .ref    dnk_2_punch_anim,dnk_4_punch_anim
     137                            .ref    dnk_2_buzz_anim,dnk_4_buzz_anim
     138                            .ref    dnk_2_buzz2_anim,dnk_4_buzz2_anim
     139                            .ref    dnk_2_butt_anim,dnk_4_butt_anim
     140                            .REF    dnk_combo_uppercut_to_head_anim
     141                            .ref    dnk_4_combo_kick_anim
     142                            .REF    CHECK_COMBO_GO
     143                    
     144                            .ref    dnk_2_kick_anim,dnk_4_kick_anim
     145                            .ref    dnk_2_spin_kick_anim,dnk_4_spin_kick_anim
     146                            .ref    dnk_2_knee_anim,dnk_4_knee_anim
     147                    
     148                            .ref    dnk_2_box_anim,dnk_4_box_anim
     149                    
     150                            .ref    dnk_run_anim,dnk_run2_anim
     151                    
     152                            .ref    dnk_4_blbowdrop_anim
     153                    
     154                            .ref    dnk_2_hair_pickup_anim,dnk_4_hair_pickup_anim
     155                    
     156                            .ref    dnk_2_lbowdrop_anim,dnk_4_lbowdrop_anim
     157                            .ref    dnk_2_grabfling_anim
     158                            .ref    dnk_4_grabfling_anim
     159                    
     160                            .ref    dnk_heldoh_anim
     161                    
     162                            .ref    dnk_diveofftb_anim
     163                    
     164                            .ref    dnk_fly_cline_anim
     165                            .ref    dnk_flying_kick_anim
     166                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    4

     167                            .ref    dnk_4_head_hit_anim,dnk_head_hit3_anim
     168                            .ref    dnk_2_head_hit_anim,dnk_head_hit2_anim
     169                            .ref    dnk_fall_back_anim
     170                            .ref    dnk_4_losebal_dizzy_anim
     171                    
     172                            .ref    dnk_hitonground_anim
     173                            .ref    dnk_4_stomp_anim,dnk_2_stomp_anim
     174                            .ref    dnk_4_bstomp_anim
     175                    
     176                            .ref    dnk_climb_up_anim,dnk_climb_down_anim
     177                            .ref    dnk_4_block_anim
     178                            .ref    dnk_2_hiptoss_anim,dnk_4_hiptoss_anim
     179                            .ref    dnk_2_hiptoss2_anim,dnk_4_hiptoss2_anim
     180                            .ref    dnk_4_push_anim
     181                            .ref    dnk_4_bigboot_anim,dnk_2_bigboot_anim
     182                            .ref    dnk_4_losebal_anim
     183                            .ref    dnk_dizzy_anim
     184                            .ref    dnk_2_pin_anim
     185                            .ref    dnk_4_pin_anim
     186                    
     187                            .ref    dnk_belly_anim
     188                            .ref    ck_ignore               ;Ignore button press?
     189                    
     190                    ;       .ref    dnk_pkup_chair_anim
     191                    
     192                            .ref    dnk_3_knee_to_head_anim
     193                            .ref    dnk_3_knees_to_head_anim
     194                            .ref    dnk_uppercut_to_head_anim
     195                            .ref    dnk_uppercuts_to_head_anim
     196                            .ref    dnk_get_buzz_anim
     197                    
     198                            .ref    dnk_3_head_hold2_anim
     199                            .ref    dnk_3_head_hold_anim
     200                    
     201                            .ref    dnk_2_butts_anim,dnk_4_butts_anim
     202                            .ref    dnk_3_head_held_stand_anim
     203                            .ref    dnk_3_head_slam_anim
     204                            .ref    dnk_4_knee_fall_anim
     205                    
     206                    ******************************************************************************
     207                    * SYMBOLS DEFINED IN THIS FILE
     208                    
     209                    ******************************************************************************
     210                    * EQUATES FOR THIS FILE
     211                    
     212                    *****************************************************************************
     213                    
     214 00000000           doink_secret_moves
     215                    
     216                    ;These secret moves are triggered only after a move list seq has ended!  You
     217                    ;can't hold on the last button press and have it trigger!
     218                    
     219                    ;Button held down moves need to be first entry
     220 00000000 00000280'         .long   lgqkcharge_buzz
     221 00000020 00001c60'         .long   lgqkgrab_fling
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    5

     222 00000040 00002390'         .long   lgqkhip_toss
     223 00000060 00001a90'         .long   lgqkgrab_fling2
     224 00000080 00001ae0'         .long   lgqkhip_toss2
     225 000000a0 000010d0'         .long   lgqkearslap
     226 000000c0 00000e50'         .long   lgqkhammer
     227 000000e0 000014f0'         .long   lgqkneck_grab
     228 00000100 00000940'         .long   lgqkboxing_pnch
     229                    ;       .long   lgqkcharge_flying_kick
     230 00000120 00000000          .long   0
     231                    
     232                    
     233                    ******************************************************************************
     234                    *
     235                    * SPECIAL MOVE PROCESSES - Secret moves
     236                    *
     237                    ;a8=process of wrestler
     238                    
     239 00000140            SUBR   dnk_smove_table
     240 00000140 000081f0'         .long   dnk_charge_flykick
     241 00000160 00002890'         .long   dnk_hdhold_slam
     242 00000180 00003f30'         .long   dnk_hdhold_combo1
     243 000001a0 000033e0'         .long   dnk_hdhold_pile
     244 000001c0 00004670'         .long   dnk_hdhold_combo2
     245 000001e0 00008880'         .long   dnk_hdhold_buzz
     246                    ;       .long   dnk_hdhold_anti_combo
     247 00000200 00004db0'         .long   dnk_grab_toss_air
     248 00000220 00005ab0'         .long   std_walk_fast
     249 00000240 000070f0'         .long   std_taunt
     250                            .if NUM_DOINK_FINISHES
     251                            .long   dnk_finish_move1
     252                            .endif
     253                            .if NUM_DOINK_FINISHES > 1
     254                            .long   dnk_finish_move2
     255                            .endif
     256 00000260 00000000          .long   0
     257                    
     258                    
     259                    *******************************************************************************
     260 00000280           lgqkcharge_buzz
     261 00000280     b5a0          move    *a13(BUT_VAL_UP),a0
         00000290     0bb0  
     262 000002a0     1fe0          btst    PLAYER_PUNCH_BIT,a0
     263 000002b0     ca0c          jrz     lgqkno_punch
     264                    
     265                    ;FIX!!  Give some jumping velocity
     266                    
     267                    ;       move    *a13(PLYRMODE),a0
     268                    ;       cmpi    MODE_ONTURNBKL,a0
     269                    ;       jrz     lgqkno_punch
     270                    
     271 000002c0     b5a0          move    *a13(PLYRNUM),a0
         000002d0     0580  
     272 000002e0     0d5f          calla   get_punch_dtime
         000002f0 00000000! 
     273 00000310     0b40          cmpi    100,a0                  ;> min?
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    6

         00000320     ff9b  
     274 00000330     c404          jrlt    lgqkno_punch
     275                    
     276 00000340     0d3f          callr   lgqkscrt_buzz
         00000350     0004  
     277 00000360     0de0          setc
     278 00000370     0960          rets
     279                    
     280 00000380           lgqkno_punch
     281 00000380     0320          clrc
     282 00000390     0960          rets
     283                    
     284                    
     285 000003a0           lgqkscrt_buzz
     286                    
     287 000003a0     b5a0          move    *a13(PLYRMODE),a0
         000003b0     05c0  
     288 000003c0     0b40          cmpi    MODE_HEADHELD,a0
         000003d0     ffec  
     289 000003e0     ca00          jrz     lgqkout
         000003f0     0244  
     290 00000400     0b40          cmpi    MODE_HEADHOLD,a0
         00000410     ffef  
     291 00000420     ca00          jrz     lgqkout
         00000430     0240  
     292                    
     293 00000440     b5a0          move    *a13(ANIMODE),a0
         00000450     0660  
     294 00000460     1fa0          btst    MODE_UNINT_BIT,a0
     295 00000470     cb00          jrnz    lgqkout
         00000480     023b  
     296                    
     297                    ;Don't do it when he is on ground
     298 00000490     0d5f          calla   get_opp_plyrmode
         000004a0 00000000! 
     299                    ;       cmpi    MODE_ONGROUND,a0
     300                    ;       jrz     lgqkout
     301 000004c0     0b40          cmpi    MODE_DEAD,a0
         000004d0     fff6  
     302 000004e0     ca00          jrz     lgqkout
         000004f0     0234  
     303                    
     304 00000500     b5a0          move    *a13(PLYRMODE),a0
         00000510     05c0  
     305 00000520     0b40          cmpi    MODE_RUNNING,a0
         00000530     fffe  
     306 00000540     ca09          jrz     lgqkleapbuzz
     307                    
     308                    ;If stick is toward opponent, then do sliding/leaping buzzer
     309 00000550     b5a0          move    *a13(STICK_VAL_CUR),a0
         00000560     0bc0  
     310 00000570     b5a1          move    *a13(NEW_FACING_DIR),a1
         00000580     04d0  
     311 00000590     0b81          andi    0ch,a1
         000005a0 fffffff3  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    7

     312 000005c0     4801          cmp     a0,a1
     313 000005d0     cb1b          jrnz    lgqknorm
     314                    
     315 000005e0           lgqkleapbuzz
     316                    ;missing noise for a reason !
     317 000005e0                   WRSND   W_DOINK,HDBUTT_T1
     318 000006b0                   FACE24  dnk,buzz2_anim
     319 00000750     0d5f          calla   change_anim1a
         00000760 00000000! 
     320 00000780     0960          rets
     321 00000790           lgqknorm
     322                    ;missing noise for a reason !
     323 00000790                   WRSND   W_DOINK,HDBUTT_T1
     324 00000860                   FACE24  dnk,buzz_anim
     325 00000900     0d5f          calla   change_anim1a
         00000910 00000000! 
     326 00000930     0960          rets
     327                    
     328                    *******************************************************************************
     329                    ;               BITS                    MASK
     330 00000940           lgqkboxing_pnch
     331 00000940     0010          .word   B_PUNCH,                J_ALL
     332 00000960     0010          .word   B_PUNCH,                J_ALL
     333 00000980     0010          .word   B_PUNCH,                J_ALL
     334 000009a0     0010          .word   B_PUNCH,                J_ALL
     335 000009c0     0010          .word   B_PUNCH,                J_ALL
     336 000009e0     0010          .word   B_PUNCH,                J_ALL
     337 00000a00     0010          .word   B_PUNCH,                J_ALL
     338 00000a20     803c          .word   8000h | 60              ;max
     339 00000a30 00000a50'         .long   scrt_glove
     340                    
     341 00000a50           scrt_glove
     342 00000a50     b5a0          move    *a13(ANIMODE),a0
         00000a60     0660  
     343 00000a70     1fa0          btst    MODE_UNINT_BIT,a0
     344 00000a80     cb00          jrnz    lgqkout
         00000a90     01da  
     345                    
     346                    ;Don't do it when he is on ground
     347 00000aa0     0d5f          calla   get_opp_plyrmode
         00000ab0 00000000! 
     348 00000ad0     0b40          cmpi    MODE_ONGROUND,a0
         00000ae0     fffb  
     349 00000af0     ca00          jrz     lgqkout
         00000b00     01d3  
     350 00000b10     0b40          cmpi    MODE_DEAD,a0
         00000b20     fff6  
     351 00000b30     ca00          jrz     lgqkout
         00000b40     01cf  
     352 00000b50     0b40          cmpi    MODE_HEADHELD,a0
         00000b60     ffec  
     353 00000b70     ca00          jrz     lgqkout
         00000b80     01cb  
     354                    
     355 00000b90     b5a0          MOVE    *A13(COMBO_COUNT),A0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    8

         00000ba0     0af0  
     356 00000bb0     cb00          JRNZ    lgqkout
         00000bc0     01c7  
     357                    
     358 00000bd0                   FACE24  dnk,box_anim
     359 00000c70     0d5f          calla   change_anim1a
         00000c80 00000000! 
     360 00000ca0                   WRSND   W_DOINK,SPUNCH_T1,SPUNCH_T2
     361                    
     362 00000e40     0960          rets
     363                    
     364                    *******************************************************************************
     365 00000e50           lgqkhammer
     366 00000e50     0100          .word   B_SKICK,                        J_ALL
     367 00000e70     0008          .word   J_TOWARD,               J_REAL_LR
     368 00000e90     0008          .word   J_TOWARD,               J_REAL_LR
     369 00000eb0     8020          .word   8000h | 32              ;max
     370 00000ec0 00000ee0'         .long   scrt_hammer
     371                    
     372 00000ee0           scrt_hammer
     373 00000ee0     b5a0          move    *a13(ANIMODE),a0
         00000ef0     0660  
     374 00000f00     1fa0          btst    MODE_UNINT_BIT,a0
     375 00000f10     cb00          jrnz    lgqkout
         00000f20     0191  
     376                    
     377 00000f30     b5a0          move    *a13(PLYRMODE),a0
         00000f40     05c0  
     378 00000f50     0b40          cmpi    MODE_ONTURNBKL,a0
         00000f60     fff9  
     379 00000f70     ca00          jrz     lgqkout
         00000f80     018b  
     380                    
     381 00000f90     09e0          movi    dnk_4_hammer_anim,a0
         00000fa0 00000000! 
     382 00000fc0     0d5f          calla   change_anim1a
         00000fd0 00000000! 
     383                    
     384                    ;missing noise for a reason !
     385 00000ff0                   WRSND   W_DOINK,HDBUTT_T2
     386                    
     387 000010c0     0960          rets
     388                    
     389                    *******************************************************************************
     390                    
     391 000010d0           lgqkearslap
     392 000010d0     0010          .word   B_PUNCH,                J_ALL
     393 000010f0     0008          .word   J_TOWARD,               J_REAL_LR
     394 00001110     000a          .word   J_DOWN_TOWARD,          J_REAL_LR
     395 00001130     0002          .word   J_DOWN,                 J_REAL_LR
     396 00001150     8032          .word   8000h | 50              ;max
     397 00001160 00001180'         .long   lgqkscrt_earslap
     398                    
     399 00001180           lgqkscrt_earslap
     400 00001180     b5a0          move    *a13(ANIMODE),a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    9

         00001190     0660  
     401 000011a0     1fa0          btst    MODE_UNINT_BIT,a0
     402 000011b0     cb00          jrnz    lgqkout
         000011c0     0167  
     403                    
     404 000011d0     b5a0          move    *a13(PLYRMODE),a0
         000011e0     05c0  
     405 000011f0     0b40          cmpi    MODE_ONTURNBKL,a0
         00001200     fff9  
     406 00001210     ca00          jrz     lgqkout
         00001220     0161  
     407                    
     408                    ;Don't do it when he is dead or held
     409 00001230     0d5f          calla   get_opp_plyrmode
         00001240 00000000! 
     410                    ;       cmpi    MODE_ONGROUND,a0
     411                    ;       jrz     lgqkout
     412 00001260     0b40          cmpi    MODE_DEAD,a0
         00001270     fff6  
     413 00001280     ca00          jrz     lgqkout
         00001290     015a  
     414 000012a0     0b40          cmpi    MODE_HEADHELD,a0
         000012b0     ffec  
     415 000012c0     ca00          jrz     lgqkout
         000012d0     0156  
     416                    
     417 000012e0     09e0          movi    dnk_4_earslap_anim,a0
         000012f0 00000000! 
     418 00001310     0d5f          calla   change_anim1a
         00001320 00000000! 
     419                    
     420 00001340                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
     421                    
     422 000014e0     0960          rets
     423                    
     424                    *******************************************************************************
     425                    
     426 000014f0           lgqkneck_grab
     427 000014f0     0040          .word   B_SPUNCH,               J_ALL
     428 00001510     0008          .word   J_TOWARD,               J_REAL_LR
     429 00001530     0008          .word   J_TOWARD,               J_REAL_LR
     430 00001550     8020          .word   8000h | 32              ;max
     431 00001560 00001580'         .long   lgqkscrt_neck
     432                    
     433 00001580           lgqkscrt_neck
     434 00001580     b5a0          move    *a13(ANIMODE),a0
         00001590     0660  
     435 000015a0     1fa0          btst    MODE_UNINT_BIT,a0
     436 000015b0     cb00          jrnz    lgqkout
         000015c0     0127  
     437                    
     438                    ;Don't do it when he is on ground
     439 000015d0     0d5f          calla   get_opp_plyrmode
         000015e0 00000000! 
     440 00001600     0b40          cmpi    MODE_ONGROUND,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   10

         00001610     fffb  
     441 00001620     ca00          jrz     lgqkout
         00001630     0120  
     442 00001640     0b40          cmpi    MODE_DEAD,a0
         00001650     fff6  
     443 00001660     ca00          jrz     lgqkout
         00001670     011c  
     444 00001680     0b40          cmpi    MODE_HEADHELD,a0
         00001690     ffec  
     445 000016a0     ca00          jrz     lgqkout
         000016b0     0118  
     446                    
     447 000016c0     b7ae          move    *a13(LAST_HEADHOLD),a14,L
         000016d0     0cd0  
     448 000016e0     07a0          move    @PCNT,a0,L
         000016f0 00000000! 
     449 00001710     45c0          sub     a14,a0
     450 00001720     0b40          cmpi    2*60,a0
         00001730     ff87  
     451 00001740     c507          jrge    lgqkok2
     452                    
     453                    ;This head grab is too close (in terms of time) to most recent grab
     454                            .ref    dnk_3_fake_hold_anim
     455 00001750     09e0          movi    dnk_3_fake_hold_anim,a0
         00001760 00000000! 
     456 00001780     0d5f          calla   change_anim1a
         00001790 00000000! 
     457 000017b0     0960          rets
     458                    
     459 000017c0           lgqkok2
     460 000017c0                   WRSND   W_DOINK,GRABFLING_T1,PUNCH_T2
     461                    
     462 00001960     b5a1          move    *a13(CLOSEST_XDIST),a1
         00001970     0370  
     463 00001980     0b41          cmpi    90,a1
         00001990     ffa5  
     464 000019a0     c707          jrgt    lgqkstd_grab
     465                    
     466 000019b0     09e0          movi    dnk_3_head_hold2_anim,a0
         000019c0 00000000! 
     467 000019e0     0d5f          calla   change_anim1a
         000019f0 00000000! 
     468 00001a10     0960          rets
     469                    
     470 00001a20           lgqkstd_grab
     471 00001a20     09e0          movi    dnk_3_head_hold_anim,a0
         00001a30 00000000! 
     472 00001a50     0d5f          calla   change_anim1a
         00001a60 00000000! 
     473 00001a80     0960          rets
     474                    
     475                    *******************************************************************************
     476                    
     477 00001a90           lgqkgrab_fling2
     478 00001a90     0044          .word   B_SPUNCH | J_AWAY,      J_REAL_LR | J_UP | J_DOWN
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   11

     479 00001ab0     800a          .word   8000h | 10              ;max
     480 00001ac0 00001b30'         .long   lgqkscrt_grabfling2
     481                    
     482 00001ae0           lgqkhip_toss2
     483 00001ae0     0014          .word   B_PUNCH | J_AWAY,       J_REAL_LR | J_UP | J_DOWN
     484 00001b00     800a          .word   8000h | 10              ;max
     485 00001b10 00001b30'         .long   lgqkscrt_grabfling2
     486                    
     487 00001b30           lgqkscrt_grabfling2
     488 00001b30     b5a0          move    *a13(ANIMODE),a0
         00001b40     0660  
     489 00001b50     1fa0          btst    MODE_UNINT_BIT,a0
     490 00001b60     cb00          jrnz    lgqkout
         00001b70     00cc  
     491                    
     492                    ;If opponent is running, do a hip toss
     493 00001b80     0d5f          calla   get_opp_plyrmode
         00001b90 00000000! 
     494 00001bb0     0b40          cmpi    MODE_BOUNCING,a0
         00001bc0     fffa  
     495 00001bd0     ca1f          jrz     lgqkyes
     496 00001be0     0b40          cmpi    MODE_RUNNING,a0
         00001bf0     fffe  
     497 00001c00     ca1c          jrz     lgqkyes
     498 00001c10     0b40          cmpi    MODE_HEADHELD,a0
         00001c20     ffec  
     499 00001c30     ca00          jrz     lgqkck2
         00001c40     00c0  
     500 00001c50     0960          rets
     501                    
     502                    *******************************************************************************
     503                    
     504 00001c60           lgqkgrab_fling
     505                    ;       .word   B_SPUNCH | J_AWAY,      J_REAL_LR | J_UP | J_DOWN
     506                    ;       .word   8000h | 10              ;max
     507                    ;       .long   lgqkscrt_grabfling
     508                    
     509 00001c60     0040          .word   B_SPUNCH,               J_ALL
     510 00001c80     0004          .word   J_AWAY,         J_REAL_LR
     511 00001ca0     0004          .word   J_AWAY,         J_REAL_LR
     512 00001cc0     8020          .word   8000h | 32              ;max
     513 00001cd0 00001cf0'         .long   lgqkscrt_grabfling
     514                    
     515 00001cf0           lgqkscrt_grabfling
     516                    
     517                    ;Make this miss, rotate to missed opponent,
     518                    ;and stay rotated to flung opponent, also make
     519                    ;this work from both angles!
     520                    
     521 00001cf0     b5a0          move    *a13(ANIMODE),a0
         00001d00     0660  
     522 00001d10     1fa0          btst    MODE_UNINT_BIT,a0
     523 00001d20     cb00          jrnz    lgqkout
         00001d30     00b0  
     524                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   12

     525                    ;If opponent is running, do a hip toss
     526 00001d40     0d5f          calla   get_opp_plyrmode
         00001d50 00000000! 
     527 00001d70     0b40          cmpi    MODE_BOUNCING,a0
         00001d80     fffa  
     528 00001d90     ca03          jrz     lgqkyes
     529 00001da0     0b40          cmpi    MODE_RUNNING,a0
         00001db0     fffe  
     530 00001dc0     cb28          jrnz    lgqknope
     531 00001dd0           lgqkyes
     532 00001dd0                   FACE24  dnk,hiptoss_anim
     533 00001e70     0d5f          calla   change_anim1a
         00001e80 00000000! 
     534                    
     535 00001ea0                   WRSND   W_DOINK,HIPTOSS_T1,PUNCH_T2
     536 00002040     0960          rets
     537                    
     538 00002050           lgqknope
     539                    ;Don't fling when he is on ground
     540 00002050     0d5f          calla   get_opp_plyrmode
         00002060 00000000! 
     541 00002080     0b40          cmpi    MODE_HEADHELD,a0
         00002090     ffec  
     542 000020a0     ca79          jrz     lgqkout
     543 000020b0     0b40          cmpi    MODE_ONGROUND,a0
         000020c0     fffb  
     544 000020d0     ca76          jrz     lgqkout
     545 000020e0     0b40          cmpi    MODE_DEAD,a0
         000020f0     fff6  
     546 00002100     ca73          jrz     lgqkout
     547                    
     548                    ;       move    *a13(LAST_FLING_ATTEMPT),a14,L
     549                    ;       move    @PCNT,a0,L
     550                    ;       sub     a14,a0
     551                    ;       cmpi    3*60,a0
     552                    ;       jrge    lgqkok2a
     553                    ;
     554                    ;       FACE24  dnk,slap_anim
     555                    ;       calla   change_anim1a
     556                    ;
     557                    ;       WRSND   W_DOINK,SPUNCH_T1,SPUNCH_T2
     558                    ;       rets
     559                    ;
     560                    ;lgqkok2a
     561                    ;       move    @PCNT,a14,L                     ;use 32-bit PCNT!
     562                    ;       move    a14,*a13(LAST_FLING_ATTEMPT),L
     563                    
     564 00002110                   FACE24  dnk,grabfling_anim
     565 000021b0     0d5f          calla   change_anim1a
         000021c0 00000000! 
     566                    
     567 000021e0                   WRSND   W_DOINK,GRABFLING_T1,PUNCH_T2
     568 00002380     0960          rets
     569                    
     570                    *******************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   13

     571                    
     572 00002390           lgqkhip_toss
     573                    ;       .word   B_PUNCH | J_AWAY,       J_REAL_LR | J_UP | J_DOWN
     574                    ;       .word   8000h | 10              ;max
     575                    ;       .long   lgqkscrt_hiptoss
     576                    
     577 00002390     0010          .word   B_PUNCH,                J_ALL
     578 000023b0     0004          .word   J_AWAY,         J_REAL_LR
     579 000023d0     0004          .word   J_AWAY,         J_REAL_LR
     580 000023f0     8020          .word   8000h | 32              ;max
     581 00002400 00002420'         .long   lgqkscrt_hiptoss
     582                    
     583 00002420           lgqkscrt_hiptoss
     584 00002420     b5a0          move    *a13(ANIMODE),a0
         00002430     0660  
     585 00002440     1fa0          btst    MODE_UNINT_BIT,a0
     586 00002450     cb3e          jrnz    lgqkout
     587                    
     588                    ;Don't do it when he is on ground
     589 00002460     0d5f          calla   get_opp_plyrmode
         00002470 00000000! 
     590 00002490     0b40          cmpi    MODE_ONGROUND,a0
         000024a0     fffb  
     591 000024b0     ca38          jrz     lgqkout
     592                    ;       cmpi    MODE_BLOCK,a0
     593                    ;       jrz     lgqkout
     594 000024c0     0b40          cmpi    MODE_DEAD,a0
         000024d0     fff6  
     595 000024e0     ca35          jrz     lgqkout
     596 000024f0     0b40          cmpi    MODE_HEADHELD,a0
         00002500     ffec  
     597 00002510     ca33          jrz     lgqkck2
     598 00002520     0b40          cmpi    MODE_INAIR,a0
         00002530     fffd  
     599 00002540     ca08          jrz     lgqkdoit
     600 00002550     0b40          cmpi    MODE_INAIR2,a0
         00002560     ffea  
     601 00002570     ca05          jrz     lgqkdoit
     602                    
     603 00002580     b5a0          move    *a13(CLOSEST_DIST),a0
         00002590     0360  
     604 000025a0     0b40          cmpi    70h,a0
         000025b0     ff8f  
     605 000025c0     c727          jrgt    lgqkout
     606                    
     607 000025d0           lgqkdoit
     608 000025d0                   FACE24  dnk,hiptoss_anim
     609 00002670     0d5f          calla   change_anim1a
         00002680 00000000! 
     610                    
     611 000026a0                   WRSND   W_DOINK,HIPTOSS_T1,PUNCH_T2
     612                    
     613 00002840     0960  lgqkout rets
     614                    
     615 00002850           lgqkck2
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   14

     616 00002850     b5a0          move    *a13(USR_VAR2),a0
         00002860     0860  
     617 00002870     cbd5          jrnz    lgqkdoit
     618 00002880     0960          rets    
     619                    
     620                            .if NUM_DOINK_FINISHES
     621                    ******************************************************************************
     622                     SUBRP  dnk_finish_move1
     623                    
     624                    fkgnTIMEOUT     .equ    TSEC
     625                    
     626                    fkgnend_wait
     627                            SLEEP           TSEC/4
     628                            move            @p1rounds,a0                    ; Get player 1 rounds
     629                            move            @p2rounds,a1                    ; Get player 2 rounds
     630                            or              a1,a0                           ; Put em together
     631                            cmpi            2,a0                            ; Anybody got 2?
     632                            jrlt            fkgnend_wait                    ; br = no
     633                    
     634                    fkgnreset
     635                            clr             a11
     636                            move            a11,@in_finish_move
     637                            SLEEPK          1
     638                            WAITSWITCH_DWN  J_UP,0,fkgnreset
     639                            movi            fkgnTIMEOUT,a11
     640                            move            a11,@in_finish_move
     641                            WAITSWITCH_DWN  J_DOWN,0,fkgnreset
     642                            WAITSWITCH_DWN  J_TOWARD,J_DOWN|J_UP,fkgnreset
     643                            WAITSWITCH_DWN  J_TOWARD,J_DOWN|J_UP,fkgnreset
     644                            WAITSWITCH_DWN  B_PUNCH,J_ALL,fkgnreset
     645                    
     646                            movi            dnk_finish1_move,a0
     647                            move            a0,*a8(SPECIAL_MOVE_ADDR),L
     648                            DIE
     649                            .endif
     650                            
     651                    
     652                            .if NUM_DOINK_FINISHES > 1
     653                    ******************************************************************************
     654                     SUBRP  dnk_finish_move2
     655                    
     656                    uzfoTIMEOUT     .equ    TSEC
     657                    
     658                    uzfoend_wait
     659                            SLEEP           TSEC/4
     660                            move            @p1rounds,a0                    ; Get player 1 rounds
     661                            move            @p2rounds,a1                    ; Get player 2 rounds
     662                            or              a1,a0                           ; Put em together
     663                            cmpi            2,a0                            ; Anybody got 2?
     664                            jrlt            uzfoend_wait                    ; br = no
     665                    
     666                    uzforeset
     667                            clr             a11
     668                            move            a11,@in_finish_move
     669                            SLEEPK          1
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   15

     670                            WAITSWITCH_DWN  J_UP,0,uzforeset
     671                            movi            uzfoTIMEOUT,a11
     672                            move            a11,@in_finish_move
     673                            WAITSWITCH_DWN  J_UP,0,uzforeset
     674                            WAITSWITCH_DWN  J_RIGHT,J_UP,uzforeset
     675                            WAITSWITCH_DWN  J_RIGHT,J_UP,uzforeset
     676                            WAITSWITCH_DWN  B_SPUNCH,J_ALL,uzforeset
     677                    
     678                            movi            dnk_finish2_move,a0
     679                            move            a0,*a8(SPECIAL_MOVE_ADDR),L
     680                            DIE
     681                            .endif
     682                    
     683                    
     684                    *******************************************************************************
     685 00002890           dnk_hdhold_slam
     686                    
     687              003c  dkwwTIMEOUT     .equ    60
     688                    
     689 00002890           dkwwlp0
     690 00002890                   SLEEPK  1
     691 000028d0           dkwwlp
     692 000028d0     b500          move    *a8(PLYRMODE),a0
         000028e0     05c0  
     693 000028f0     0b40          cmpi    MODE_HEADHOLD,a0
         00002900     ffef  
     694 00002910     ca03          jrz     dkwwcont
     695 00002920     0b40          cmpi    MODE_HEADHELD,a0
         00002930     ffec  
     696 00002940     cbf4          jrnz    dkwwlp0
     697                    
     698 00002950           dkwwcont
     699 00002950     576b          clr     a11
     700                    
     701                    ;       WAITSWITCH_DWN  J_UP,0,dkwwlp
     702                    
     703 00002960                   WAITSWITCH_DWN  J_DOWN,0,dkwwlp
     704                    
     705 00002ac0     09cb          movi    dkwwTIMEOUT,a11
         00002ad0     003c  
     706                    
     707 00002ae0                   WAITSWITCH_DWN  J_DOWN,0,dkwwlp
     708 00002c40                   WAITSWITCH_DWN  B_SKICK,J_ALL,dkwwlp
     709 00002da0           dkwwcontz
     710 00002da0     b500          move    *a8(PLYRMODE),a0
         00002db0     05c0  
     711 00002dc0     0b40          cmpi    MODE_HEADHOLD,a0
         00002dd0     ffef  
     712 00002de0     ca1c          jrz     dkwwslam
     713 00002df0     0b40          cmpi    MODE_HEADHELD,a0
         00002e00     ffec  
     714 00002e10     cba7          jrnz    dkwwlp0
     715 00002e20     b50e          move    *a8(I_WILL_DIE),A14
         00002e30     0b30  
     716 00002e40     cba4          jrnz    dkwwlp0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   16

     717                    
     718                    ;Do reversal unless I have been immobilized!
     719                    ;If not, set immobilize time for opponent and reverse
     720                    
     721 00002e50     b50e          move    *a8(IMMOBILIZE_TIME),a14
         00002e60     0ae0  
     722 00002e70     cba1          jrnz    dkwwlp0                         ;ignore
     723                    
     724 00002e80     0d5f          CALLA   DO_REVERSAL
         00002e90 00000000! 
     725 00002eb0     0d5f          CALLA   DO_REVERSAL_MESS
         00002ec0 00000000! 
     726                    
     727                            ;target WHOHITME -- don't hit anyone else
     728 00002ee0                   SMRTTGT a8,WHOHITME
     729                    
     730                            ;immobilize WHOHITME
     731 00002f80     b700          move    *a8(WHOHITME),a0,L
         00002f90     04e0  
     732 00002fa0     c018          jruc    dkwwis_reversal
     733                    
     734 00002fb0           dkwwslam
     735 00002fb0     b50e          move    *a8(IMMOBILIZE_TIME),a14
         00002fc0     0ae0  
     736 00002fd0     cb8b          jrnz    dkwwlp0                         ;ignore
     737                    
     738 00002fe0     182a          movk    1,a10
     739 00002ff0                   CREATE  MESSAGE_PID,BONUS_MESS
     740                    
     741                            ;target WHOIHIT -- don't hit anyone else
     742 00003070                   SMRTTGT a8,WHOIHIT
     743                    
     744                            ;immobilize WHOIHIT
     745 00003110     b700          move    *a8(WHOIHIT),a0,L
         00003120     0500  
     746                    
     747 00003130           dkwwis_reversal
     748 00003130     19ee          movk    15,a14
     749 00003140     b1c0          move    a14,*a0(IMMOBILIZE_TIME)
         00003150     0ae0  
     750                    
     751 00003160     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         00003170 00000000! 
     752 00003190                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
     753                    
     754 00003330     09ee          movi    dnk_3_head_slam_anim,a14
         00003340 00000000! 
     755 00003360     b3c8          move    a14,*a8(SPECIAL_MOVE_ADDR),L
         00003370     0930  
     756                    
     757 00003380                   SLEEPK  20
     758                    
     759 000033c0     c000          jruc    dkwwlp
         000033d0     ff4f  
     760                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   17

     761                    *****************************************************************************
     762 000033e0           dnk_hdhold_pile
     763                    
     764              003c  tewvTIMEOUT     .equ    60
     765                    
     766 000033e0           tewvlp0
     767 000033e0                   SLEEPK  1
     768 00003420           tewvlp
     769 00003420     b500          move    *a8(PLYRMODE),a0
         00003430     05c0  
     770 00003440     0b40          cmpi    MODE_HEADHOLD,a0
         00003450     ffef  
     771 00003460     ca03          jrz     tewvcont
     772 00003470     0b40          cmpi    MODE_HEADHELD,a0
         00003480     ffec  
     773 00003490     cbf4          jrnz    tewvlp0
     774                    
     775 000034a0           tewvcont
     776 000034a0     576b          clr     a11
     777                    
     778                    ;       WAITSWITCH_DWN  J_AWAY,0,tewvlp
     779 000034b0                   WAITSWITCH_DWN  J_TOWARD,0,tewvlp
     780                    
     781 00003610     09cb          movi    tewvTIMEOUT,a11
         00003620     003c  
     782                    
     783 00003630                   WAITSWITCH_DWN  J_TOWARD,0,tewvlp
     784 00003790                   WAITSWITCH_DWN  B_SPUNCH,J_ALL,tewvlp
     785 000038f0           tewvcontz       
     786 000038f0     b500          move    *a8(PLYRMODE),a0
         00003900     05c0  
     787 00003910     0b40          cmpi    MODE_HEADHOLD,a0
         00003920     ffef  
     788 00003930     ca1c          jrz     tewvslam
     789 00003940     0b40          cmpi    MODE_HEADHELD,a0
         00003950     ffec  
     790 00003960     cba7          jrnz    tewvlp0
     791 00003970     b50e          move    *a8(I_WILL_DIE),A14
         00003980     0b30  
     792 00003990     cba4          jrnz    tewvlp0
     793                    
     794 000039a0     b50e          move    *a8(IMMOBILIZE_TIME),a14
         000039b0     0ae0  
     795 000039c0     cba1          jrnz    tewvlp0                         ;ignore
     796                    
     797 000039d0     0d5f          CALLA   DO_REVERSAL
         000039e0 00000000! 
     798 00003a00     0d5f          CALLA   DO_REVERSAL_MESS
         00003a10 00000000! 
     799                    
     800                            ;target WHOHITME -- don't hit anyone else
     801 00003a30                   SMRTTGT a8,WHOHITME
     802                    
     803                            ;immobilize WHOHITME
     804 00003ad0     b700          move    *a8(WHOHITME),a0,L
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   18

         00003ae0     04e0  
     805 00003af0     c018          jruc    tewvis_reversal
     806                    
     807 00003b00           tewvslam
     808 00003b00     b50e          move    *a8(IMMOBILIZE_TIME),a14
         00003b10     0ae0  
     809 00003b20     cb8b          jrnz    tewvlp0                         ;ignore
     810                    
     811 00003b30     18ea          movk    7,A10                   ;Pile driver
     812 00003b40                   CREATE  MESSAGE_PID,BONUS_MESS
     813                    
     814                            ;target WHOIHIT -- don't hit anyone else
     815 00003bc0                   SMRTTGT a8,WHOIHIT
     816                    
     817                            ;immobilize WHOIHIT
     818 00003c60     b700          move    *a8(WHOIHIT),a0,L
         00003c70     0500  
     819                    
     820 00003c80           tewvis_reversal
     821 00003c80     19ee          movk    15,a14
     822 00003c90     b1c0          move    a14,*a0(IMMOBILIZE_TIME)
         00003ca0     0ae0  
     823                    
     824 00003cb0     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         00003cc0 00000000! 
     825 00003ce0                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
     826 00003e80     09ee          movi    dnk_3_pile_driver_anim,a14
         00003e90 00000000! 
     827 00003eb0     b3c8          move    a14,*a8(SPECIAL_MOVE_ADDR),L
         00003ec0     0930  
     828                    
     829 00003ed0                   SLEEPK  20
     830                    
     831 00003f10     c000          jruc    tewvlp
         00003f20     ff4f  
     832                    
     833                    ;******************************************************************************
     834                    ;
     835                    ;;Could start this process only when opponent is in combo mode!
     836                    ;
     837                    ;dnk_hdhold_anti_combo
     838                    ;
     839                    ;tewvTIMEOUT    .equ    30
     840                    ;
     841                    ;tewvlp0
     842                    ;       SLEEPK  1
     843                    ;tewvlp
     844                    ;;Is my opponent in combo mode?
     845                    ;;      move    *a8(IMMOBILIZE_TIME),a14
     846                    ;;      jrz     tewvlp0
     847                    ;;      move    *a8(CLOSEST_NUM),a0
     848                    ;;      X32     a0
     849                    ;;      addi    process_ptrs,a0
     850                    ;;      move    *a0,a0,L
     851                    ;;      move    *a0(COMBO_COUNT),a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   19

     852                    ;;      jrz     tewvlp0
     853                    ;
     854                    ;       clr     a11
     855                    ;
     856                    ;       WAITSWITCH_DWN  B_SPUNCH,J_ALL,tewvlp
     857                    ;
     858                    ;       movk    tewvTIMEOUT,a11
     859                    ;
     860                    ;       WAITSWITCH_DWN  B_SPUNCH,J_ALL,tewvlp
     861                    ;       WAITSWITCH_DWN  B_SPUNCH,J_ALL,tewvlp
     862                    ;
     863                    ;;Is my opponent in combo mode?
     864                    ;       move    *a8(CLOSEST_NUM),a0
     865                    ;       X32     a0
     866                    ;       addi    process_ptrs,a0
     867                    ;       move    *a0,a0,L
     868                    ;       move    *a0(COMBO_COUNT),a0
     869                    ;       jrz     tewvlp0
     870                    ;
     871                    ;       move    *a8(ANTI_COMBO_TIME),a0         ;Time stamp
     872                    ;       move    @PCNT,a14
     873                    ;       sub     a0,a14
     874                    ;       abs     a14
     875                    ;       cmpi    80,a14
     876                    ;       jrge    tewvlp0
     877                    ;       move    *a8(I_WILL_DIE),A14
     878                    ;       jrnz    tewvlp0
     879                    ;
     880                    ;;Combo breaker message!
     881                    ;       CALLA   DO_REVERSAL
     882                    ;       CALLA   DO_REVERSAL_MESS
     883                    ;
     884                    ;       clr     a0
     885                    ;       move    a0,*a8(IMMOBILIZE_TIME)
     886                    ;
     887                    ;       move    *a8(WHOHITME),a14,L
     888                    ;       movk    15,a0
     889                    ;       move    a0,*a14(IMMOBILIZE_TIME)
     890                    ;
     891                    ;       ;target WHOHITME
     892                    ;       SMRTTGT a8,WHOHITME
     893                    ;
     894                    ;       CALLA   FIND_AND_KILL_ENDLESS
     895                    ;
     896                    ;       WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
     897                    ;       movi    dnk_3_pile_driver_anim,a14
     898                    ;       move    a14,*a8(SPECIAL_MOVE_ADDR),L
     899                    ;
     900                    ;       SLEEPK  20
     901                    ;
     902                    ;       jruc    tewvlp
     903                    ;
     904                    *******************************************************************************
     905                    
     906                    *
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   20

     907 00003f30           dnk_hdhold_combo1
     908                    
     909              003c  xjviTIMEOUT     .equ    60
     910                    
     911 00003f30           xjvilp0
     912 00003f30                   SLEEPK  1
     913 00003f70           xjvilp
     914 00003f70     b500          move    *a8(PLYRMODE),a0
         00003f80     05c0  
     915 00003f90     0b40          cmpi    MODE_HEADHOLD,a0
         00003fa0     ffef  
     916 00003fb0     cbf7          jrnz    xjvilp0
     917                    ;       cmpi    MODE_HEADHELD,a0
     918                    ;       jrnz    xjvilp0
     919                    ;xjvicont
     920                    ;In combo mode?
     921 00003fc0     0d5f          calla   CHECK_COMBO_GO
         00003fd0 00000000! 
     922 00003ff0     c4f3          jrlt    xjvilp0
     923                    
     924 00004000     576b          clr     a11
     925                    
     926 00004010                   WAITSWITCH_DWN  J_TOWARD,0,xjvilp
     927                    
     928 00004170     09cb          movi    xjviTIMEOUT,a11
         00004180     003c  
     929                    
     930 00004190                   WAITSWITCH_DWN  J_TOWARD,0,xjvilp
     931 000042f0                   WAITSWITCH_DWN  B_SPUNCH,J_ALL,xjvilp
     932                    
     933 00004450     b500          move    *a8(PLYRMODE),a0
         00004460     05c0  
     934 00004470     0b40          cmpi    MODE_HEADHOLD,a0
         00004480     ffef  
     935 00004490     ca03          jrz     xjvislam
     936 000044a0     0b40          cmpi    MODE_HEADHELD,a0
         000044b0     ffec  
     937 000044c0     cba6          jrnz    xjvilp0
     938                    
     939                    
     940 000044d0           xjvislam
     941 000044d0     b50e          move    *a8(IMMOBILIZE_TIME),a14
         000044e0     0ae0  
     942 000044f0     cba3          jrnz    xjvilp0                         ;ignore
     943                    
     944                    ;Start combo rules here
     945                    ;       move    *a8(ATTACH_PROC),a14,L
     946                    ;       movk    15,a0
     947                    ;       move    a0,*a14(IMMOBILIZE_TIME)
     948                    
     949                            ;target WHOIHIT
     950 00004500                   SMRTTGT a8,WHOIHIT
     951                    
     952 000045a0     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         000045b0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   21

     953                    
     954 000045d0     09ee          movi    dnk_combo_uppercut_to_head_anim,a14
         000045e0 00000000! 
     955 00004600     b3c8          move    a14,*a8(SPECIAL_MOVE_ADDR),L
         00004610     0930  
     956                    
     957 00004620                   SLEEPK  20
     958                    
     959 00004660     c090          jruc    xjvilp
     960                    
     961                    *******************************************************************************
     962                    
     963                    *
     964 00004670           dnk_hdhold_combo2
     965                    
     966              003c  pwpwTIMEOUT     .equ    60
     967                    
     968 00004670           pwpwlp0
     969 00004670                   SLEEPK  1
     970 000046b0           pwpwlp
     971 000046b0     b500          move    *a8(PLYRMODE),a0
         000046c0     05c0  
     972 000046d0     0b40          cmpi    MODE_HEADHOLD,a0
         000046e0     ffef  
     973 000046f0     cbf7          jrnz    pwpwlp0
     974                    ;       jrz     pwpwcont
     975                    ;       cmpi    MODE_HEADHELD,a0
     976                    ;       jrnz    pwpwlp0
     977                    ;pwpwcont
     978                    ;In combo mode?
     979 00004700     0d5f          calla   CHECK_COMBO_GO
         00004710 00000000! 
     980 00004730     c4f3          jrlt    pwpwlp0
     981                    
     982                    
     983 00004740     576b          clr     a11
     984                    
     985 00004750                   WAITSWITCH_DWN  J_TOWARD,0,pwpwlp
     986                    
     987 000048b0     09cb          movi    pwpwTIMEOUT,a11
         000048c0     003c  
     988                    
     989 000048d0                   WAITSWITCH_DWN  J_TOWARD,0,pwpwlp
     990 00004a30                   WAITSWITCH_DWN  B_SKICK,J_ALL,pwpwlp
     991                    
     992 00004b90     b500          move    *a8(PLYRMODE),a0
         00004ba0     05c0  
     993 00004bb0     0b40          cmpi    MODE_HEADHOLD,a0
         00004bc0     ffef  
     994 00004bd0     ca03          jrz     pwpwslam
     995 00004be0     0b40          cmpi    MODE_HEADHELD,a0
         00004bf0     ffec  
     996 00004c00     cba6          jrnz    pwpwlp0
     997                    
     998                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   22

     999 00004c10           pwpwslam
    1000 00004c10     b50e          move    *a8(IMMOBILIZE_TIME),a14
         00004c20     0ae0  
    1001 00004c30     cba3          jrnz    pwpwlp0                         ;ignore
    1002                    
    1003                    ;Start combo rules here
    1004                    ;       move    *a8(ATTACH_PROC),a14,L
    1005                    ;       movk    15,a0
    1006                    ;       move    a0,*a14(IMMOBILIZE_TIME)
    1007 00004c40     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         00004c50 00000000! 
    1008                    
    1009                            ;target WHOIHIT
    1010 00004c70                   SMRTTGT a8,WHOIHIT
    1011                    
    1012 00004d10     09ee          movi    dnk_4_combo_kick_anim,a14
         00004d20 00000000! 
    1013 00004d40     b3c8          move    a14,*a8(SPECIAL_MOVE_ADDR),L
         00004d50     0930  
    1014                    
    1015 00004d60                   SLEEPK  20
    1016                    
    1017 00004da0     c090          jruc    pwpwlp
    1018                    
    1019                    *******************************************************************************
    1020                    *
    1021                    
    1022 00004db0           dnk_grab_toss_air
    1023                    
    1024              0028  ldhnTIMEOUT     .equ    40
    1025                    
    1026 00004db0           ldhnlp0
    1027 00004db0                   SLEEPK  1
    1028 00004df0           ldhnlp
    1029 00004df0     576b          clr     a11
    1030                    
    1031 00004e00                   WAITSWITCH_DWN  J_AWAY,0,ldhnlp
    1032                    
    1033 00004f60     09cb          movi    ldhnTIMEOUT,a11
         00004f70     0028  
    1034                    
    1035 00004f80                   WAITSWITCH_DWN  J_AWAY,0,ldhnlp
    1036 000050e0                   WAITSWITCH_DWN  B_PUNCH,J_ALL,ldhnlp
    1037                    
    1038 00005240     b500          move    *a8(ANIMODE),a0
         00005250     0660  
    1039 00005260     1fa0          btst    MODE_UNINT_BIT,a0
    1040 00005270     cbb7          jrnz    ldhnlp
    1041                    
    1042 00005280     b500          move    *a8(PLYRMODE),a0
         00005290     05c0  
    1043 000052a0     0b40          cmpi    MODE_HEADHOLD,a0
         000052b0     ffef  
    1044 000052c0     caae          jreq    ldhnlp0
    1045                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   23

    1046                    ;Don't do it when he is on ground
    1047 000052d0                   SWAP    a8,a13
    1048 00005300     0d5f          calla   get_opp_plyrmode
         00005310 00000000! 
    1049 00005330                   SWAP    a8,a13
    1050                    ;Don't do it when he is on ground
    1051 00005360     0b40          cmpi    MODE_ONGROUND,a0
         00005370     fffb  
    1052 00005380     caa6          jrz     ldhnlp
    1053 00005390     0b40          cmpi    MODE_DEAD,a0
         000053a0     fff6  
    1054 000053b0     caa3          jrz     ldhnlp
    1055 000053c0     0b40          cmpi    MODE_INAIR,a0
         000053d0     fffd  
    1056 000053e0     ca40          jrz     ldhndoit2
    1057 000053f0     0b40          cmpi    MODE_INAIR2,a0
         00005400     ffea  
    1058 00005410     ca3d          jrz     ldhndoit2
    1059                    
    1060 00005420     b500          move    *a8(CLOSEST_NUM),a0
         00005430     03a0  
    1061 00005440                   X32     a0
    1062 00005450     0b20          addi    process_ptrs,a0
         00005460 00000000! 
    1063 00005480     8600          move    *a0,a0,L
    1064 00005490     b400          move    *a0(ATTACK_TYPE),a0
         000054a0     05e0  
    1065 000054b0     0b40          cmpi    AT_LEAPING,a0
         000054c0     ffc6  
    1066 000054d0     ca31          jrz     ldhndoit2
    1067                    
    1068 000054e0     b500          move    *a8(CLOSEST_DIST),a0
         000054f0     0360  
    1069 00005500     0b40          cmpi    6ch,a0
         00005510     ff93  
    1070 00005520     c78c          jrgt    ldhnlp
    1071                    
    1072 00005530                   FACE24  dnk,hiptoss_anim
    1073 000055d0     b208          move    a0,*a8(SPECIAL_MOVE_ADDR),L
         000055e0     0930  
    1074                    
    1075 000055f0                   WRSND   W_DOINK,GRABFLING_T1,PUNCH_T2
    1076                    
    1077 00005790                   SLEEPK  20
    1078 000057d0     c000          jruc    ldhnlp
         000057e0     ff60  
    1079                    
    1080 000057f0           ldhndoit2       FACE24  dnk,hiptoss2_anim
    1081 00005890     b208          move    a0,*a8(SPECIAL_MOVE_ADDR),L
         000058a0     0930  
    1082                    
    1083 000058b0                   WRSND   W_DOINK,GRABFLING_T1,PUNCH_T2
    1084                    
    1085 00005a50                   SLEEPK  20
    1086                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   24

    1087 00005a90     c000          jruc    ldhnlp
         00005aa0     ff34  
    1088                    
    1089                    
    1090                    *******************************************************************************
    1091                    *
    1092 00005ab0            SUBR   std_walk_fast
    1093                    ;One time per match
    1094                    
    1095              003d  ougxTIMEOUT     .equ    61
    1096                    
    1097 00005ab0           ougxlp0
    1098 00005ab0                   SLEEPK  1
    1099 00005af0           ougxlp
    1100 00005af0     b500          move    *a8(WALK_FAST),a0
         00005b00     0b40  
    1101 00005b10     cbf9          jrnz    ougxlp0
    1102 00005b20     b500          move    *a8(PLYRMODE),a0
         00005b30     05c0  
    1103 00005b40     0b40          cmpi    MODE_NORMAL,a0
         00005b50     ffff  
    1104 00005b60     cbf4          jrnz    ougxlp0
    1105                    
    1106 00005b70     576b          clr     a11
    1107                    
    1108 00005b80                   WAITSWITCH_DWN  J_AWAY,0,ougxlp
    1109                    
    1110 00005ce0     09cb          movi    ougxTIMEOUT,a11
         00005cf0     003d  
    1111                    
    1112 00005d00                   WAITSWITCH_DWN  J_DOWN_AWAY,0,ougxlp
    1113 00005e60                   WAITSWITCH_DWN  J_DOWN,0,ougxlp
    1114 00005fc0                   WAITSWITCH_DWN  J_DOWN_TOWARD,0,ougxlp
    1115 00006120                   WAITSWITCH_DWN  J_TOWARD,0,ougxlp
    1116 00006280                   WAITSWITCH_DWN  J_UP_TOWARD,0,ougxlp
    1117 00006400                   WAITSWITCH_DWN  J_UP,0,ougxlp
    1118 00006590                   WAITSWITCH_DWN  J_UP_AWAY,0,ougxlp
    1119                    
    1120                    
    1121 00006720     b500          move    *a8(PLYRMODE),a0
         00006730     05c0  
    1122 00006740     0b40          cmpi    MODE_NORMAL,a0
         00006750     ffff  
    1123 00006760     cb00          jrnz    ougxlp0
         00006770     ff33  
    1124                    
    1125 00006780     09c0          movi    15*60,a0
         00006790     0384  
    1126 000067a0     b008          move    a0,*a8(WALK_FAST)
         000067b0     0b40  
    1127                    
    1128 000067c0     b500          move    *a8(WRESTLERNUM),a0
         000067d0     0590  
    1129 000067e0     14c0          subk    6,a0
    1130 000067f0     cb08          jrnz    ougxnot_dnk
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   25

    1131                    ;Doink
    1132 00006800     09e0          movi    30000h,a0
         00006810 00030000  
    1133 00006830     b208          move    a0,*a8(OBJ_YVEL),L
         00006840     02f0  
    1134                    
    1135                    ;Doink speech call
    1136                    ;211h
    1137 00006850     09c0          movi    211h,a0
         00006860     0211  
    1138 00006870     c002          jruc    ougxgo
    1139                    
    1140 00006880           ougxnot_dnk
    1141 00006880     09c0          movi    17eh,a0
         00006890     017e  
    1142 000068a0     0d5f  ougxgo  calla   ADD_VOICE
         000068b0 00000000! 
    1143                    ;       calla   IF_SILENT_ADD_VOICE
    1144                    
    1145 000068d0     09ce          movi    0101h,a14
         000068e0     0101  
    1146 000068f0     b1c8          move    a14,*a8(OBJ_CONST)
         00006900     0790  
    1147 00006910     b50e          move    *a8(OBJ_CONTROL),a14
         00006920     0780  
    1148 00006930     0b8e          andni   01111b,a14
         00006940 0000000f  
    1149 00006960     0bae          ori     M_CONNON,a14
         00006970 00000008  
    1150 00006990     b1c8          move    a14,*a8(OBJ_CONTROL)
         000069a0     0780  
    1151                    
    1152 000069b0                   SLEEPK  3
    1153                     
    1154 000069f0     b50e          move    *a8(OBJ_CONTROL),a14
         00006a00     0780  
    1155 00006a10     0b8e          andni   01111b,a14
         00006a20 0000000f  
    1156 00006a40     0bae          ori     DMAWNZ,a14
         00006a50 00008002  
    1157 00006a70     b1c8          move    a14,*a8(OBJ_CONTROL)
         00006a80     0780  
    1158                    
    1159 00006a90                   SLEEPK  3
    1160                    
    1161 00006ad0     09ce          movi    0101h,a14
         00006ae0     0101  
    1162 00006af0     b1c8          move    a14,*a8(OBJ_CONST)
         00006b00     0790  
    1163 00006b10     b50e          move    *a8(OBJ_CONTROL),a14
         00006b20     0780  
    1164 00006b30     0b8e          andni   01111b,a14
         00006b40 0000000f  
    1165 00006b60     0bae          ori     M_CONNON,a14
         00006b70 00000008  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   26

    1166 00006b90     b1c8          move    a14,*a8(OBJ_CONTROL)
         00006ba0     0780  
    1167                    
    1168 00006bb0                   SLEEPK  3
    1169                    
    1170 00006bf0     b50e          move    *a8(OBJ_CONTROL),a14
         00006c00     0780  
    1171 00006c10     0b8e          andni   01111b,a14
         00006c20 0000000f  
    1172 00006c40     0bae          ori     DMAWNZ,a14
         00006c50 00008002  
    1173 00006c70     b1c8          move    a14,*a8(OBJ_CONTROL)
         00006c80     0780  
    1174                    
    1175 00006c90                   SLEEP   30
    1176                    
    1177 00006ce0     b500          move    *a8(WRESTLERNUM),a0
         00006cf0     0590  
    1178 00006d00     14c0          subk    6,a0
    1179 00006d10     cb17          jrnz    ougxtag
    1180                    
    1181 00006d20     09c0          movi    0b2h,a0                 ;Honk
         00006d30     00b2  
    1182 00006d40     0d5f          calla   triple_sound
         00006d50 00000000! 
    1183                    
    1184 00006d70                   SLEEPK  18
    1185                    
    1186 00006db0     09c0          movi    0b2h,a0                 ;Honk
         00006dc0     00b2  
    1187 00006dd0     0d5f          calla   triple_sound
         00006de0 00000000! 
    1188                    
    1189 00006e00                   SLEEPK  18
    1190                    
    1191 00006e40     09c0          movi    0b2h,a0                 ;Honk
         00006e50     00b2  
    1192 00006e60     0d5f          calla   triple_sound
         00006e70 00000000! 
    1193                    
    1194 00006e90           ougxtag SLEEPK  5
    1195 00006ed0     b500          move    *a8(WALK_FAST),a0
         00006ee0     0b40  
    1196 00006ef0     cbf9          jrnz    ougxtag
    1197                    
    1198 00006f00     09ce          movi    0101h,a14
         00006f10     0101  
    1199 00006f20     b1c8          move    a14,*a8(OBJ_CONST)
         00006f30     0790  
    1200 00006f40     b50e          move    *a8(OBJ_CONTROL),a14
         00006f50     0780  
    1201 00006f60     0b8e          andni   01111b,a14
         00006f70 0000000f  
    1202 00006f90     0bae          ori     M_CONNON,a14
         00006fa0 00000008  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   27

    1203 00006fc0     b1c8          move    a14,*a8(OBJ_CONTROL)
         00006fd0     0780  
    1204                    
    1205 00006fe0                   SLEEPK  3
    1206                    
    1207 00007020     b50e          move    *a8(OBJ_CONTROL),a14
         00007030     0780  
    1208 00007040     0b8e          andni   01111b,a14
         00007050 0000000f  
    1209 00007070     0bae          ori     DMAWNZ,a14
         00007080 00008002  
    1210 000070a0     b1c8          move    a14,*a8(OBJ_CONTROL)
         000070b0     0780  
    1211                    
    1212 000070c0                   DIE
    1213                    
    1214                    *******************************************************************************
    1215                    *
    1216 000070f0            SUBR   std_taunt
    1217                    
    1218 000070f0     b50e          move    *a8(PLYR_TYPE),a14
         00007100     05a0  
    1219 00007110     cb80          janz    SUCIDE
         00007120 00000000! 
    1220                    
    1221              003d  jfyvTIMEOUT     .equ    61
    1222                    
    1223 00007140           jfyvlp0
    1224 00007140                   SLEEPK  1
    1225 00007180           jfyvlp
    1226 00007180     b500          move    *a8(PLYRMODE),a0
         00007190     05c0  
    1227 000071a0     0b40          cmpi    MODE_BLOCK,a0
         000071b0     fff8  
    1228 000071c0     cbf7          jrnz    jfyvlp0
    1229                    
    1230 000071d0     576b          clr     a11
    1231                    
    1232 000071e0                   WAITSWITCH_DWN  J_UP,B_BLOCK,jfyvlp
    1233                    
    1234 00007340     b50e          move    *a8(BUT_VAL_CUR),a14
         00007350     0b90  
    1235 00007360     1fce          btst    PLAYER_BLOCK_BIT,a14
    1236 00007370     cadc          jrz     jfyvlp0
    1237                    
    1238 00007380     09cb          movi    jfyvTIMEOUT,a11
         00007390     003d  
    1239                    
    1240 000073a0                   WAITSWITCH_DWN  J_UP_TOWARD,B_BLOCK,jfyvlp
    1241 00007500                   WAITSWITCH_DWN  J_TOWARD,B_BLOCK,jfyvlp
    1242 00007660                   WAITSWITCH_DWN  J_DOWN_TOWARD,B_BLOCK,jfyvlp
    1243 000077c0                   WAITSWITCH_DWN  J_DOWN,B_BLOCK,jfyvlp
    1244 00007920                   WAITSWITCH_DWN  J_DOWN_AWAY,B_BLOCK,jfyvlp
    1245 00007ab0                   WAITSWITCH_DWN  J_AWAY,B_BLOCK,jfyvlp
    1246 00007c40                   WAITSWITCH_DWN  J_UP_AWAY,B_BLOCK,jfyvlp
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   28

    1247                    
    1248 00007dd0     b50e          move    *a8(BUT_VAL_CUR),a14
         00007de0     0b90  
    1249 00007df0     1fce          btst    PLAYER_BLOCK_BIT,a14
    1250 00007e00     ca00          jrz     jfyvlp0
         00007e10     ff32  
    1251                    
    1252 00007e20     b500          move    *a8(PLYRMODE),a0
         00007e30     05c0  
    1253 00007e40     0b40          cmpi    MODE_BLOCK,a0
         00007e50     fff8  
    1254 00007e60     cb00          jrne    jfyvlp0
         00007e70     ff2c  
    1255                    
    1256                            ;no taunts if all opponents are dead.
    1257 00007e80                   SWAP    a8,a13
    1258 00007eb0     0d5f          calla   get_opp_plyrmode
         00007ec0 00000000! 
    1259 00007ee0                   SWAP    a8,a13
    1260 00007f10     0b40          cmpi    MODE_DEAD,a0
         00007f20     fff6  
    1261 00007f30     ca00          jreq    jfyvlp0
         00007f40     ff1f  
    1262                    
    1263 00007f50                   SWAP    a8,a13
    1264 00007f80                   FACETBL jfyvtaunt_tbl
    1265 00007ff0     0d5f          calla   change_anim1a
         00008000 00000000! 
    1266 00008020                   SWAP    a8,a13
    1267                    
    1268                    ;Time to execute high-risk move!
    1269 00008050     09e0          movi    8000h+12*60,a0
         00008060 000082d0  
    1270 00008080     b008          move    a0,*a8(RISK)
         00008090     0950  
    1271                    
    1272 000080a0                   DIE
    1273                    
    1274                    ;       SLEEP   10*60
    1275                    ;       jruc    jfyvlp0
    1276                    
    1277 000080d0           jfyvtaunt_tbl
    1278 000080d0                   REFLONG hrt_4_taunt_anim        ;0 Bret Hart
    1279 000080f0                   REFLONG rzr_4_taunt_anim        ;1 Razor Ramon
    1280 00008110                   REFLONG und_4_taunt_anim        ;2 Undertaker
    1281 00008130                   REFLONG yok_4_taunt_anim        ;3 Yokozuna
    1282 00008150                   REFLONG shn_4_taunt_anim        ;4 Shawn Michaels
    1283 00008170                   REFLONG bam_4_taunt_anim        ;5 Bam Bam
    1284 00008190                   REFLONG dnk_4_taunt_anim        ;6 Doink
    1285 000081b0 00000000          .long   0                       ;7 spare
    1286 000081d0                   REFLONG lex_4_taunt_anim        ;8 Lex Luger
    1287                    
    1288                    ;*******************************************************************************
    1289                    ;
    1290                    ;jfyvcharge_flying_kick
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   29

    1291                    ;       move    *a13(BUT_VAL_UP),a0
    1292                    ;       btst    PLAYER_SKICK_BIT,a0
    1293                    ;       jrz     jfyvno_kick
    1294                    ;
    1295                    ;       move    *a13(PLYRNUM),a0
    1296                    ;       calla   get_powerk_dtime
    1297                    ;       cmpi    85,a0                   ;> min?
    1298                    ;       jrlt    jfyvno_kick
    1299                    ;
    1300                    ;       callr   jfyvscrt_kick
    1301                    ;       setc
    1302                    ;       rets
    1303                    ;
    1304                    ;jfyvno_kick
    1305                    ;       clrc
    1306                    ;       rets
    1307                    ;
    1308                    ;jfyvscrt_kick
    1309                    ;
    1310                    ;       move    *a13(PLYRMODE),a0
    1311                    ;       cmpi    MODE_HEADHELD,a0
    1312                    ;       jrz     jfyvout
    1313                    ;       cmpi    MODE_HEADHOLD,a0
    1314                    ;       jrz     jfyvout
    1315                    ;
    1316                    ;       move    *a13(ANIMODE),a0
    1317                    ;       btst    MODE_UNINT_BIT,a0
    1318                    ;       jrnz    jfyvout
    1319                    ;
    1320                    ;;Don't do it when he is on ground
    1321                    ;       calla   get_opp_plyrmode
    1322                    ;       cmpi    MODE_ONGROUND,a0
    1323                    ;       jrz     jfyvout
    1324                    ;       cmpi    MODE_DEAD,a0
    1325                    ;       jrz     jfyvout
    1326                    ;
    1327                    ;jfyvok
    1328                    ;       SETMODE INAIR
    1329                    ;
    1330                    ;       movk    1,a0                    ;Ensure leap at
    1331                    ;       move    a0,*a13(OBJ_XVEL),L
    1332                    ;
    1333                    ;       movi    dnk_flying_kick_anim,a0
    1334                    ;       calla   change_anim1a
    1335                    ;
    1336                    ;       WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    1337                    ;
    1338                    ;jfyvout        rets
    1339                    ;
    1340                    *******************************************************************************
    1341                    
    1342                    ;       STRUCTPD
    1343                    ;       WORD            tjxhCHARGE_TIME ;UDW
    1344              0160  tjxhCHARGE_TIME .equ    SM_USRW1        ;
    1345                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   30

    1346 000081f0           dnk_charge_flykick
    1347                    
    1348 000081f0           tjxhstart_over
    1349 000081f0     57ce          clr     a14
    1350 00008200     b1cd          move    a14,*a13(tjxhCHARGE_TIME),W
         00008210     0160  
    1351 00008220           tjxhloop1
    1352 00008220                   SLEEPK  1
    1353                    
    1354 00008260     b5ae          move    *a13(tjxhCHARGE_TIME),a14,W
         00008270     0160  
    1355 00008280     102e          inc     a14
    1356 00008290     b1cd          move    a14,*a13(tjxhCHARGE_TIME),W
         000082a0     0160  
    1357                    
    1358 000082b0     b500          move    *a8(BUT_VAL_CUR),a0
         000082c0     0b90  
    1359 000082d0     1f60          btst    PLAYER_SKICK_BIT,a0
    1360 000082e0     ca01          jrz     tjxhp1
    1361                    
    1362 000082f0     c0f2          jruc    tjxhloop1
    1363                    
    1364 00008300           tjxhp1
    1365                    
    1366                    ;no longer holding button
    1367 00008300     b5ae          move    *a13(tjxhCHARGE_TIME),a14
         00008310     0160  
    1368 00008320     0b4e          cmpi    100,a14
         00008330     ff9b  
    1369 00008340     c4ea          jrlt    tjxhstart_over
    1370                    
    1371 00008350     b500          move    *a8(GETUP_TIME),a0
         00008360     0460  
    1372 00008370     cbe7          jrnz    tjxhstart_over
    1373 00008380     b500          move    *a8(PLYRMODE),a0
         00008390     05c0  
    1374 000083a0     0b40          cmpi    MODE_HEADHELD,a0
         000083b0     ffec  
    1375 000083c0     cae2          jrz     tjxhstart_over
    1376 000083d0     0b40          cmpi    MODE_HEADHOLD,a0
         000083e0     ffef  
    1377 000083f0     cadf          jrz     tjxhstart_over
    1378 00008400     0b40          cmpi    MODE_ONGROUND,a0
         00008410     fffb  
    1379 00008420     cadc          jrz     tjxhstart_over
    1380 00008430     0b40          cmpi    MODE_DEAD,a0
         00008440     fff6  
    1381 00008450     cad9          jrz     tjxhstart_over
    1382                    
    1383 00008460     b500          move    *a8(CLOSEST_NUM),a0
         00008470     03a0  
    1384 00008480                   X32     a0
    1385 00008490     0b20          addi    process_ptrs,a0
         000084a0 00000000! 
    1386 000084c0     8600          move    *a0,a0,L
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   31

    1387 000084d0     b400          move    *a0(PLYRMODE),a0
         000084e0     05c0  
    1388 000084f0     0b40          cmpi    MODE_ONGROUND,a0
         00008500     fffb  
    1389 00008510     cacd          jrz     tjxhstart_over
    1390 00008520     0b40          cmpi    MODE_DEAD,a0
         00008530     fff6  
    1391 00008540     caca          jrz     tjxhstart_over
    1392                    
    1393                    ;Success!  Check for the UNINT bit, then queue it up.
    1394 00008550     b50e          move    *a8(ANIMODE),a14
         00008560     0660  
    1395 00008570     1fae          btst    MODE_UNINT_BIT,a14
    1396 00008580     cbc6          jrnz    tjxhstart_over
    1397                    
    1398                            .ref    ck_ignore_a8
    1399 00008590     0d5f          calla   ck_ignore_a8
         000085a0 00000000! 
    1400 000085c0     c8c2          jrc     tjxhstart_over
    1401                    
    1402 000085d0     09ee          movi    dnk_flying_kick_anim,a14
         000085e0 00000000! 
    1403 00008600     b3c8          move    a14,*a8(SPECIAL_MOVE_ADDR),L
         00008610     0930  
    1404 00008620                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    1405                    
    1406 000087c0                   SETMODE INAIR
    1407                    
    1408 00008870     c097          jruc    tjxhstart_over
    1409                            
    1410                    
    1411                    *******************************************************************************
    1412                    ;
    1413                    ;       STRUCTPD
    1414                    ;       WORD            wvtpCHARGE_TIME ;UDW
    1415                    ;       WORD            wvtpTIMEOUT     ;UDW
    1416                    ;
    1417                    ;       ;in:
    1418                    ;       ; a8 = wrestler process address
    1419                    ;
    1420                    ;dnk_charge_flykick
    1421                    ;
    1422                    ;wvtpstart_over
    1423                    ;       ;charge on stick away
    1424                    ;       clr     a14
    1425                    ;       move    a14,*a13(wvtpCHARGE_TIME),W
    1426                    ;wvtploop1
    1427                    ;       SLEEPK  1
    1428                    ;
    1429                    ;       move    *a13(wvtpCHARGE_TIME),a14,W
    1430                    ;       inc     a14
    1431                    ;       move    a14,*a13(wvtpCHARGE_TIME),W
    1432                    ;
    1433                    ;       move    *a8(STICK_VAL_CUR),a0
    1434                    ;
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   32

    1435                    ;       ;arbitrarily define TOWARD to be RIGHT.  So if the opponent is to
    1436                    ;       ; our left, flip the L|R direction bits...
    1437                    ;
    1438                    ;       ;...however, if the stick isn't pointed left or right, don't do
    1439                    ;       ;anything.
    1440                    ;       move    a0,a14
    1441                    ;       andi    MOVE_LEFT|MOVE_RIGHT,a14
    1442                    ;       jrz     wvtpno_flip
    1443                    ;
    1444                    ;       move    *a8(NEW_FACING_DIR),a14
    1445                    ;       btst    MOVE_LEFT_BIT,a14
    1446                    ;       jrz     wvtpno_flip
    1447                    ;       xori    MOVE_LEFT|MOVE_RIGHT,a0
    1448                    ;wvtpno_flip
    1449                    ;
    1450                    ;       ;if we're still holding away, jump back to wvtploop1
    1451                    ;       btst    MOVE_LEFT_BIT,a0
    1452                    ;       jrnz    wvtploop1
    1453                    ;
    1454                    ;       ;no longer holding away...
    1455                    ;       move    *a13(wvtpCHARGE_TIME),a14
    1456                    ;       cmpi    20,a14
    1457                    ;       jrlt    wvtpstart_over
    1458                    ;
    1459                    ;       ;okay, they released after holding away for 2 seconds.  Give them
    1460                    ;       ; half a second to push forward + super_kick
    1461                    ;
    1462                    ;       movi    TSEC/2,a14
    1463                    ;       move    a14,*a13(wvtpTIMEOUT)
    1464                    ;wvtploop2
    1465                    ;       SLEEPK  1
    1466                    ;
    1467                    ;       move    *a8(BUT_VAL_DOWN),a0
    1468                    ;       jrnz    wvtppress
    1469                    ;
    1470                    ;       move    *a13(wvtpTIMEOUT),a14
    1471                    ;       dec     a14
    1472                    ;       jrz     wvtpstart_over
    1473                    ;       move    a14,*a13(wvtpTIMEOUT)
    1474                    ;       jruc    wvtploop2
    1475                    ;
    1476                    ;wvtppress
    1477                    ;       ;we have a button press.  Is is super kick?
    1478                    ;       btst    PLAYER_KICK_BIT,a0
    1479                    ;
    1480                    ;       jrz     wvtpstart_over  ;wrong button.  No good.
    1481                    ;
    1482                    ;       
    1483                    ;       ;Check for a towards on the stick.
    1484                    ;       move    *a8(STICK_VAL_CUR),a0
    1485                    ;       jrz     wvtpstart_over  ;no stick at all.  No good.
    1486                    ;
    1487                    ;       move    *a8(NEW_FACING_DIR),a14
    1488                    ;       btst    MOVE_LEFT_BIT,a14
    1489                    ;       jrz     wvtpno_flip2
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   33

    1490                    ;       xori    MOVE_LEFT|MOVE_RIGHT,a0
    1491                    ;wvtpno_flip2
    1492                    ;       btst    MOVE_RIGHT_BIT,a0
    1493                    ;       jrz     wvtpstart_over  ;pooched it
    1494                    ;
    1495                    ;
    1496                    ;;Don't do it when he is on ground
    1497                    ;       SWAP    a8,a13
    1498                    ;       calla   get_opp_plyrmode
    1499                    ;       SWAP    a8,a13
    1500                    ;;Don't do it when he is on ground
    1501                    ;       cmpi    MODE_ONGROUND,a0
    1502                    ;       jrz     wvtpstart_over
    1503                    ;       cmpi    MODE_DEAD,a0
    1504                    ;       jrz     wvtpstart_over
    1505                    ;
    1506                    ;
    1507                    ;;success!  Check for the UNINT bit, then queue it up.
    1508                    ;       move    *a8(ANIMODE),a14
    1509                    ;       btst    MODE_UNINT_BIT,a14
    1510                    ;       jrnz    wvtpstart_over
    1511                    ;
    1512                    ;       movi    dnk_flying_kick_anim,a14
    1513                    ;       move    a14,*a8(SPECIAL_MOVE_ADDR),L
    1514                    ;
    1515                    ;       SETMODE INAIR
    1516                    ;
    1517                    ;       movi    1000h,a0
    1518                    ;       move    a0,*a13(OBJ_XVEL),L
    1519                    ;
    1520                    ;       WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    1521                    ;
    1522                    ;       jruc    wvtpstart_over
    1523                    
    1524                    *******************************************************************************
    1525 00008880           dnk_hdhold_buzz
    1526                    
    1527              003c  oejqTIMEOUT     .equ    60
    1528                    
    1529 00008880           oejqlp0
    1530 00008880                   SLEEPK  1
    1531 000088c0           oejqlp
    1532 000088c0     b500          move    *a8(PLYRMODE),a0
         000088d0     05c0  
    1533 000088e0     0b40          cmpi    MODE_HEADHOLD,a0
         000088f0     ffef  
    1534 00008900     ca03          jrz     oejqcont
    1535 00008910     0b40          cmpi    MODE_HEADHELD,a0
         00008920     ffec  
    1536 00008930     cbf4          jrnz    oejqlp0
    1537 00008940           oejqcont
    1538 00008940     576b          clr     a11
    1539                    
    1540 00008950                   WAITSWITCH_DWN  J_DOWN,0,oejqlp
    1541                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   34

    1542 00008ab0     09cb          movi    oejqTIMEOUT,a11
         00008ac0     003c  
    1543                    
    1544 00008ad0                   WAITSWITCH_DWN  J_TOWARD,J_DOWN|J_UP,oejqlp
    1545                    ;       WAITSWITCH_DWN  J_DOWN_TOWARD,0,oejqlp
    1546 00008c30                   WAITSWITCH_DWN  B_PUNCH,J_ALL,oejqlp
    1547                            
    1548 00008d90     b500          move    *a8(PLYRMODE),a0
         00008da0     05c0  
    1549 00008db0     0b40          cmpi    MODE_HEADHOLD,a0
         00008dc0     ffef  
    1550 00008dd0     cbaa          jrnz    oejqlp0
    1551                    
    1552                    ;oejqslam
    1553 00008de0     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         00008df0 00000000! 
    1554 00008e10     09ee          movi    dnk_4_buzz_anim,a14
         00008e20 00000000! 
    1555 00008e40     b3c8          move    a14,*a8(SPECIAL_MOVE_ADDR),L
         00008e50     0930  
    1556                    
    1557                    ;missing noise for a reason !
    1558 00008e60                   WRSND   W_DOINK,HDBUTT_T1
    1559                    
    1560 00008f30                   SLEEP   120
    1561                    
    1562 00008f80     c093          jruc    oejqlp
    1563                    
    1564                    *****************************************************************************
    1565                    
    1566 00008f90            SUBR   doink_ani_init
    1567                    
    1568 00008f90     b5a0          move    *a13(FACING_DIR),a0
         00008fa0     04c0  
    1569 00008fb0     1f80          btst    PLAYER_RIGHT_BIT,a0
    1570 00008fc0     cb18          jrnz    eatgp1
    1571                    ;Plyr 2
    1572 00008fd0     09e0          movi    dnk_stand4_anim,a0
         00008fe0 00000000! 
    1573 00009000     0d5f          calla   change_anim1a
         00009010 00000000! 
    1574                    
    1575 00009030     09e0          movi    dnk_torso4_anim,a0
         00009040 00000000! 
    1576 00009060     0d5f          calla   change_anim2a
         00009070 00000000! 
    1577                    
    1578 00009090                   PUSH    a10
    1579 000090a0     4daa          move    a13,a10
    1580 000090b0                   CREATE  TAUNT_PID,do_taunt
    1581 00009130                   PULL    a10
    1582                    
    1583 00009140     0960          rets
    1584                    
    1585 00009150           eatgp1
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   35

    1586 00009150     09e0          movi    dnk_stand2_anim,a0
         00009160 00000000! 
    1587 00009180     0d5f          calla   change_anim1a
         00009190 00000000! 
    1588                    
    1589 000091b0     09e0          movi    dnk_torso2_anim,a0
         000091c0 00000000! 
    1590 000091e0     0d5f          calla   change_anim2a
         000091f0 00000000! 
    1591                    
    1592 00009210     0960          rets
    1593                    
    1594 00009220            SUBR   do_taunt
    1595                    ;a10=*wrestler proc
    1596                    ;Do a taunt at start of rounds
    1597                    
    1598                    ;       SLEEP   60
    1599 00009220     05a0          move    @HALT,a0
         00009230 00000000! 
    1600 00009250     ca80          jaz     SUCIDE
         00009260 00000000! 
    1601                    
    1602 00009280                   PUSH    a10
    1603 00009290     0d5f          calla   read_switches
         000092a0 00000000! 
    1604 000092c0                   PULL    a10
    1605                    
    1606 000092d0     b5a0          move    *a13(PLYR_TYPE),a0
         000092e0     05a0  
    1607 000092f0     cb1c          jrnz    eatgdrone
    1608                    ;Human chooses to taunt?
    1609 00009300     b540          move    *a10(STICK_VAL_CUR),a0
         00009310     0bc0  
    1610 00009320     1fe0          btst    MOVE_UP_BIT,a0
    1611 00009330     ca80          jaz     SUCIDE
         00009340 00000000! 
    1612 00009360     b540          move    *a10(BUT_VAL_CUR),a0
         00009370     0b90  
    1613 00009380     1fc0          btst    PLAYER_BLOCK_BIT,a0
    1614 00009390     ca80          jaz     SUCIDE
         000093a0 00000000! 
    1615                    
    1616 000093c0           eatgdo_taunt
    1617 000093c0                   PUSH    a13
    1618 000093d0     4d4d          move    a10,a13
    1619 000093e0     b5a0          move    *a13(WRESTLERNUM),a0
         000093f0     0590  
    1620 00009400                   X32     a0
    1621 00009410     0b20          addi    eatgtaunt_t,a0
         00009420 00009550' 
    1622 00009440     8600          move    *a0,a0,L
    1623                    
    1624 00009450     0d5f          calla   change_anim1a
         00009460 00000000! 
    1625 00009480                   PULL    a13
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   36

    1626                    
    1627 00009490                   DIE
    1628                    
    1629 000094c0           eatgdrone
    1630 000094c0     09c0          movi    250,a0
         000094d0     00fa  
    1631 000094e0     0d5f          calla   RNDPER
         000094f0 00000000! 
    1632 00009510     c3ea          jrhi    eatgdo_taunt
    1633                    
    1634 00009520                   DIE
    1635                    
    1636 00009550           eatgtaunt_t
    1637 00009550                   REFLONG hrt_4_taunt_anim                        ;0 Bret Hart
    1638 00009570                   REFLONG rzr_4_taunt_anim                        ;1 Razor Ramon
    1639 00009590                   REFLONG und_4_taunt_anim                        ;2 Undertaker
    1640 000095b0                   REFLONG yok_4_taunt_anim                        ;3 Yokozuna
    1641 000095d0                   REFLONG shn_4_taunt_anim                        ;4 Shawn Michaels
    1642 000095f0                   REFLONG bam_4_taunt_anim                        ;5 Bam Bam
    1643 00009610                   REFLONG dnk_4_taunt_anim                        ;6 Doink
    1644 00009630 00000000          .long   0                                       ;7 spare
    1645 00009650                   REFLONG lex_4_taunt_anim                        ;8 Lex Luger
    1646 00009670 00000000          .long   0                                       ;9 Referee
    1647                    
    1648                    *****************************************************************************
    1649                    *
    1650                    * DOINKS CONTROL CODE
    1651                    *
    1652                    * a13 = * doink process
    1653                    
    1654 00009690            SUBR   move_doink
    1655                    
    1656                    ;       movi    100h,a0                 ;temp fix!
    1657                    ;       move    a0,*a13(ANI_SPEED)
    1658                    
    1659 00009690     09eb          movi    doink_secret_moves,a11
         000096a0 00000000' 
    1660 000096c0     0d5f          calla   check_secret_moves
         000096d0 00000000! 
    1661                    
    1662 000096f0     b5a0          move    *a13(PLYRMODE),a0
         00009700     05c0  
    1663 00009710     24a0          sll     5,a0                    ;x 32
    1664 00009720     0b20          addi    ifoymode_table,a0
         00009730 00009780' 
    1665 00009750     8600          move    *a0,a0,L
    1666 00009760     0920          call    a0
    1667 00009770     0960          rets
    1668                    
    1669 00009780           ifoymode_table
    1670 00009780 00009ac0'         .long   mode_normal             ;0
    1671 000097a0 000116a0'         .long   mode_running            ;1
    1672 000097c0 00013e90'         .long   mode_inair              ;2
    1673 000097e0 00013ea0'         .long   mode_attached           ;3
    1674 00009800 00014010'         .long   mode_onground           ;4
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   37

    1675 00009820 00014020'         .long   mode_bouncing           ;5
    1676 00009840 000142c0'         .long   mode_onturnbkl          ;6
    1677 00009860 000151e0'         .long   mode_block              ;7
    1678 00009880 00015c90'         .long   mode_dizzy              ;8
    1679 000098a0 00015ca0'         .long   mode_dead               ;9
    1680 000098c0 00017280'         .long   mode_oppoverhead        ;10
    1681 000098e0 00017290'         .long   mode_climbturnbkl       ;11
    1682 00009900 000172a0'         .long   mode_waitanim           ;12
    1683 00009920 00017320'         .long   mode_grapple            ;13
    1684 00009940 00017330'         .long   mode_master             ;14
    1685 00009960 00017370'         .long   mode_slave              ;15
    1686 00009980 000175c0'         .long   mode_headhold           ;16
    1687 000099a0 00018c80'         .long   mode_puppet2
    1688 000099c0 00009ac0'         .long   mode_normal     ;18
    1689 000099e0 00018c90'         .long   mode_headheld           ;19
    1690 00009a00 00019210'         .long   mode_puppet             ;20
    1691 00009a20 00019800'         .long   mode_inair2             ;21
    1692 00009a40 00009ac0'         .long   mode_normal     ;22
    1693 00009a60 00009ac0'         .long   mode_normal     ;23
    1694 00009a80 000197f0'         .long   mode_chokehold          ;24
    1695 00009aa0 00000000!         .long   mode_choking            ;25
    1696                    
    1697                    *****************************************************************************
    1698                    
    1699 00009ac0           mode_normal
    1700                    
    1701 00009ac0     b5a0          move    *a13(ANIMODE),a0
         00009ad0     0660  
    1702 00009ae0     1fa0          btst    MODE_UNINT_BIT,a0
    1703 00009af0     cb00          jrnz    sytzno_interrupt
         00009b00     00b0  
    1704                    
    1705 00009b10     b5a0          move    *a13(I_WILL_DIE),a0
         00009b20     0b30  
    1706 00009b30     ca1f          jrz     sytznope
    1707 00009b40     b5a0          move    *a13(IMMOBILIZE_TIME),a0
         00009b50     0ae0  
    1708 00009b60     cb1c          jrnz    sytznope
    1709                    ;Player has died amidst a combo...
    1710                    ;Knock me down.
    1711 00009b70     09e0          movi    dnk_fall_back_anim,a0
         00009b80 00000000! 
    1712 00009ba0     0d5f          calla   change_anim1a
         00009bb0 00000000! 
    1713                    
    1714                    ;Zero health bar
    1715 00009bd0     09c0          movi    -10,a0
         00009be0     fff6  
    1716 00009bf0     b5a1          move    *a13(PLYRNUM),a1
         00009c00     0580  
    1717 00009c10     0d5f          calla   adjust_health
         00009c20 00000000! 
    1718                    
    1719 00009c40                   SETMODE DEAD
    1720                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   38

    1721 00009cf0     5600          clr     a0
    1722 00009d00     b00d          move    a0,*a13(I_WILL_DIE)
         00009d10     0b30  
    1723                    
    1724 00009d20     0960          rets
    1725                    
    1726 00009d30           sytznope
    1727                    ;Perhaps we need to interrupt any sequence when a wrestler has won?
    1728 00009d30     0d5f          calla   get_opp_plyrmode
         00009d40 00000000! 
    1729 00009d60     0b40          cmpi    MODE_DEAD,a0
         00009d70     fff6  
    1730 00009d80     cb49          jrne    sytzopp_not_dead
    1731                    
    1732                            ;if closest is a zombie, skip pin section.
    1733 00009d90     0d5f          calla   get_opp_process
         00009da0 00000000! 
    1734 00009dc0     b40e          move    *a0(STATUS_FLAGS),a14
         00009dd0     0b50  
    1735 00009de0     1f8e          btst    B_ZOMBIE,a14
    1736 00009df0     cb42          jrnz    sytzopp_not_dead
    1737                    
    1738                            ;all opponents are dead.  Check for pins/raisearms
    1739                    
    1740                            ;if we're attached to someone, don't interrupt it.
    1741 00009e00     b7a1          move    *a13(ATTACH_PROC),a1,L
         00009e10     03e0  
    1742 00009e20     ca04          jrz     sytzno_attch
    1743 00009e30     b622          move    *a1(ATTACH_PROC),a2,L
         00009e40     03e0  
    1744 00009e50     484d          cmp     a2,a13
    1745 00009e60     ca3b          jreq    sytzno_pin_yet
    1746 00009e70           sytzno_attch
    1747                    
    1748                            ;if a teammate has pinned, raise yer arm.
    1749 00009e70     0d5f          calla   ck_teammate_pin 
         00009e80 00000000! 
    1750 00009ea0     c823          jrc     sytzraisearm
    1751                    
    1752                            ;nobody has pinned.  if we're outside or all our opponents are
    1753                            ; outside, do a raisearm.
    1754 00009eb0     0d5f          calla   raisearm_check
         00009ec0 00000000! 
    1755 00009ee0     c81f          jrc     sytzraisearm
    1756                    
    1757                            ;we're inside with a pinnable opponent.  any button pins.
    1758 00009ef0     b5a0          move    *a13(BUT_VAL_CUR),a0
         00009f00     0b90  
    1759 00009f10     ca30          jrz     sytzno_pin_yet
    1760                    
    1761                            ;we have a press -- make sure opponent is on the ground
    1762                    
    1763 00009f20     0d5f          calla   can_pin
         00009f30 00000000! 
    1764 00009f50     c92c          jrnc    sytzopp_notgnd
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   39

    1765                    
    1766                            ;opponent is on the ground.  pin him.
    1767 00009f60                   FACE24  dnk,pin_anim
    1768 0000a000     0d5f          calla   change_anim1a
         0000a010 00000000! 
    1769                    
    1770                            ;set the 'I did a pin' flag.
    1771 0000a030     b5ae          move    *a13(STATUS_FLAGS),a14
         0000a040     0b50  
    1772 0000a050     0bae          ori     M_DID_PIN,a14
         0000a060 00000002  
    1773 0000a080     b1cd          move    a14,*a13(STATUS_FLAGS)
         0000a090     0b50  
    1774                    
    1775                            ;if we're a temp drone for auto-pin purposes, turn back into
    1776                            ; a normal player here.
    1777 0000a0a0     0d5f          calla   drone_change_back
         0000a0b0 00000000! 
    1778                    
    1779 0000a0d0     0960          rets
    1780                    
    1781 0000a0e0           sytzraisearm
    1782 0000a0e0                   FACE24  dnk,raise_arm_anim
    1783 0000a180     0d5f          calla   change_anim1a
         0000a190 00000000! 
    1784 0000a1b0     0d5f          calla   set_raisearm_bit
         0000a1c0 00000000! 
    1785                    
    1786                            ;if we're a temp drone for auto-pin purposes, turn back into
    1787                            ; a normal player here.
    1788 0000a1e0     0d5f          calla   drone_change_back
         0000a1f0 00000000! 
    1789                    
    1790 0000a210     0960          rets
    1791                    
    1792 0000a220           sytztoo_far_to_pin
    1793 0000a220           sytzopp_notgnd
    1794 0000a220           sytzopp_not_dead
    1795 0000a220           sytzno_pin_yet
    1796                    
    1797 0000a220     b5a0          move    *a13(IMMOBILIZE_TIME),a0
         0000a230     0ae0  
    1798 0000a240     cb36          jrnz    sytzimmobilized
    1799                    
    1800 0000a250     b5a0          move    *a13(BUT_VAL_CUR),a0
         0000a260     0b90  
    1801 0000a270     1fc0          btst    PLAYER_BLOCK_BIT,a0     ;maybe have to action tables?
    1802 0000a280     ca07          jrz     sytznblk                        ;1 for down transitions
    1803 0000a290     0d3f          callr   sytzblock                       ;& 1 for current buttons
         0000a2a0     01ee  
    1804 0000a2b0     c804          jrc     sytznblk
    1805 0000a2c0     5600          clr     a0
    1806 0000a2d0     b00d          move    a0,*a13(ATTACK_TYPE)
         0000a2e0     05e0  
    1807 0000a2f0     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   40

    1808 0000a300           sytznblk
    1809 0000a300     b5a0          move    *a13(BUT_VAL_CUR),a0
         0000a310     0b90  
    1810 0000a320     0b80          andi    011111b,a0
         0000a330 ffffffe0  
    1811 0000a350     0b40          cmpi    PLAYER_PUNCH_VAL|PLAYER_KICK_VAL,a0
         0000a360     fff6  
    1812 0000a370     ca00          jrz     sytzpunchkick
         0000a380     0545  
    1813                    
    1814 0000a390     b5a0          move    *a13(BUT_VAL_DOWN),a0
         0000a3a0     0ba0  
    1815 0000a3b0     0b80          andi    011111b,a0
         0000a3c0 ffffffe0  
    1816 0000a3e0                   X32     a0
    1817 0000a3f0     0b20          addi    sytzaction_table,a0
         0000a400 0000a620' 
    1818 0000a420     8600          move    *a0,a0,L
    1819 0000a430     0920          call    a0
    1820                    
    1821 0000a440     b5a0          move    *a13(ANIMODE),a0
         0000a450     0660  
    1822 0000a460     1fa0          btst    MODE_UNINT_BIT,a0
    1823 0000a470     cb19          jrnz    sytzno_interrupt
    1824                    
    1825                    
    1826 0000a480     b5a0          move    *a13(STICK_VAL_CUR),a0
         0000a490     0bc0  
    1827 0000a4a0     b00d          move    a0,*a13(MOVE_DIR)
         0000a4b0     04b0  
    1828 0000a4c0     0d5f          calla   climb_turnbuckle
         0000a4d0 00000000! 
    1829 0000a4f0     c90e          jrnc    sytzno_climb
    1830 0000a500     b5a5          move    *a13(WRESTLERNUM),A5
         0000a510     0590  
    1831 0000a520     09e2          MOVI    CLIMB_ROPES,A2
         0000a530 00000000! 
    1832 0000a550     09c0          MOVI    1000,A0
         0000a560     03e8  
    1833 0000a570     0d5f          CALLA   ADD_IF_SILENT
         0000a580 00000000! 
    1834 0000a5a0     0960          rets
    1835                    
    1836 0000a5b0           sytzimmobilized
    1837 0000a5b0     57ce          clr     a14
    1838 0000a5c0     b1cd          move    a14,*a13(MOVE_DIR)
         0000a5d0     04b0  
    1839 0000a5e0           sytzno_climb
    1840 0000a5e0     0d5f          calla   execute_walk
         0000a5f0 00000000! 
    1841                    
    1842 0000a610           sytzno_interrupt
    1843 0000a610     0960          rets
    1844                    
    1845 0000a620           sytzaction_table
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   41

    1846 0000a620 0000aa20'         .long   sytzz,sytzpunch,sytzblock,sytzblock                     ;0-3
    1847 0000a6a0 0000c370'         .long   sytzsuper_punch,sytzsuper_punch,sytzblock,sytzblock     ;4-7
    1848 0000a720 0000e180'         .long   sytzkick,sytzpunchkick,sytzblock,sytzblock              ;8-11
    1849 0000a7a0 0000c370'         .long   sytzsuper_punch,sytzpunchkick,sytzblock,sytzblock       ;12-15
    1850 0000a820 0000f850'         .long   sytzsuper_kick,sytzsuper_kick,sytzblock,sytzblock       ;16-19
    1851 0000a8a0 00010a00'         .long   sytzgraboh,sytzgraboh,sytzblock,sytzblock               ;20-23
    1852 0000a920 0000f850'         .long   sytzsuper_kick,sytzpunchkick,sytzblock,sytzblock        ;24-27
    1853 0000a9a0 00010a00'         .long   sytzgraboh,sytzgraboh,sytzblock,sytzblock               ;28-31
    1854                    
    1855                    ************
    1856 0000aa20           sytzz           ;0
    1857                    
    1858 0000aa20     0960          rets
    1859                    
    1860                    
    1861                    ************
    1862 0000aa30           sytzpunch               ;1
    1863                    *
    1864                    * MODE             DX  DZ       ACTION
    1865                    * ----------------------------------------------------
    1866                    * normal        <  50   92      headbutt
    1867                    * dizzy                 "               "
    1868                    * normal        >               normal punch
    1869                    * dizzy                 "               "
    1870                    *
    1871                    * onground      < 120  120      elbow drop
    1872                    * onground      >               normal punch
    1873                    *
    1874                    * running                       hiptoss
    1875                    * bouncing                      nothing
    1876                    *
    1877                    * onturnbkl     <  60   96      yank down
    1878                    * onturnbkl     >               normal punch
    1879                    * climbturnbkl                  normal punch
    1880                    *
    1881 0000aa30                   JJXM_INIT
    1882 0000aaa0                   JJXM    NORMAL,          50, 45,sytzpunch_hdbutt,sytzpunch_punch        ;0
    1883 0000ab70                   JJXM    RUNNING,         50, 45,sytzpunch_hdbutt,sytzpunch_punch        ;1
    1884 0000ac40                   JJXM    INAIR,           50, 45,sytzpunch_hdbutt,sytzpunch_punch        ;2
    1885 0000ad10                   JJXM    ATTACHED,        50, 45,sytzpunch_hdbutt,sytzpunch_punch        ;3
    1886 0000ade0                   JJXM    ONGROUND,       160,140,sytzpunch_lbowdrop,sytzpunch_punch      ;4
    1887 0000aeb0                   JJXM    BOUNCING,        50, 45,sytzpunch_hdbutt,sytzpunch_punch        ;1
    1888 0000af80                   JJXM    ONTURNBKL,       50, 45,sytzpunch_hdbutt,sytzpunch_punch        ;6
    1889 0000b050                   JJXM    BLOCK,           50, 45,sytzpunch_hdbutt,sytzpunch_punch        ;7
    1890 0000b120                   JJXM    DIZZY,           50, 45,sytzpunch_hdbutt,sytzpunch_punch        ;8
    1891 0000b1f0                   JJXM    DEAD,           160,140,sytzpunch_lbowdrop,sytzpunch_punch      ;9
    1892 0000b2a0                   JJXM    OPPOVERHEAD,     50, 45,sytzpunch_hdbutt,sytzpunch_punch        ;10
    1893 0000b350                   JJXM    CLIMBTURNBKL,           sytzpunch_punch                 ;11
    1894 0000b390                   JJXM    WAITANIM,        50, 45,sytzpunch_hdbutt,sytzpunch_punch        ;12
    1895 0000b440                   JJXM    GRAPPLE,         50, 45,sytzpunch_hdbutt,sytzpunch_punch        ;13
    1896 0000b4e0                   JJXM    MASTER,          50, 45,sytzpunch_hdbutt,sytzpunch_punch        ;14
    1897 0000b580                   JJXM    SLAVE,           50, 45,sytzpunch_hdbutt,sytzpunch_punch        ;15
    1898 0000b620                   JJXM    HEADHOLD,        50, 45,sytzpunch_hdbutt,sytzpunch_punch        ;16
    1899 0000b6c0                   JJXM    HEADHELD,        50, 45,sytzpunch_hdbutt,sytzpunch_punch        ;19
    1900 0000b760                   JJXM    CHOKEHOLD,       50, 45,sytzpunch_hdbutt,sytzpunch_punch        ;16
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   42

    1901 0000b800                   JJXM    PUPPET,          50, 45,sytzpunch_hdbutt,sytzpunch_punch        ;20
    1902 0000b8a0                   JJXM    PUPPET2,         50, 45,sytzpunch_hdbutt,sytzpunch_punch        ;20
    1903 0000b940                   JJXM    INAIR2,          50, 45,sytzpunch_hdbutt,sytzpunch_punch        ;21
    1904 0000b9e0                   JJXM_END
    1905                    
    1906 0000ba00           sytzpunch_rets
    1907 0000ba00     0960          rets
    1908                    
    1909                    *****
    1910 0000ba10           sytzpunch_punch
    1911 0000ba10           std_punch
    1912                    
    1913 0000ba10                   FACE24  dnk,punch_anim
    1914 0000bab0     0d5f          calla   change_anim1a
         0000bac0 00000000! 
    1915                    
    1916 0000bae0                   WRSND   W_DOINK,PUNCH_T1,PUNCH_T2
    1917                    
    1918 0000bc80     0960          rets
    1919                    
    1920                    *****
    1921 0000bc90           sytzpunch_hdbutt
    1922                    
    1923 0000bc90                   FACE24  dnk,butt_anim
    1924 0000bd30     0d5f          calla   change_anim1a
         0000bd40 00000000! 
    1925                    
    1926 0000bd60                   WRSND   W_DOINK,HDBUTT_T1,HDBUTT_T2
    1927                    
    1928 0000bf00     0960          rets
    1929                    
    1930                    *****
    1931 0000bf10           sytzpunch_lbowdrop
    1932                    
    1933 0000bf10                   FACE24  dnk,lbowdrop_anim
    1934 0000bfb0     0d5f          calla   change_anim1a
         0000bfc0 00000000! 
    1935                    
    1936 0000bfe0                   WRSND   W_DOINK,LBOWDROP_T1,LBOWDROP_T2
    1937                    
    1938 0000c180     0960          rets
    1939                    
    1940                    ************
    1941 0000c190           sytzblock               ;2
    1942 0000c190           std_block
    1943 0000c190     05a0          move    @blocking_off,a0
         0000c1a0 00000000! 
    1944 0000c1c0     cb18          jrnz    sytzno_blocking
    1945                    
    1946 0000c1d0                   RND_AWARD       a13,BLOCKS_AWD
    1947                    
    1948 0000c270     09e0          movi    dnk_4_block_anim,a0
         0000c280 00000000! 
    1949 0000c2a0     0d5f          calla   change_anim1
         0000c2b0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   43

    1950                    
    1951 0000c2d0     0d5f          calla   BLOCK_WOOSH
         0000c2e0 00000000! 
    1952                    
    1953 0000c300     5600          clr     a0
    1954 0000c310     b00d          move    a0,*a13(BLOCK_TIME)
         0000c320     0d30  
    1955 0000c330     0320          clrc
    1956 0000c340     0960          rets
    1957                    
    1958 0000c350           sytzno_blocking
    1959 0000c350     0de0          setc
    1960 0000c360     0960          rets
    1961                    
    1962                    
    1963                    ************
    1964 0000c370           sytzsuper_punch ;4
    1965                    *
    1966                    * MODE             DX  DZ       ACTION
    1967                    * ----------------------------------------------------
    1968                    * normal        <  50   92      close in super move
    1969                    * dizzy                 "               "
    1970                    * normal        >               jumping punch move
    1971                    * dizzy                 "               "
    1972                    *
    1973                    * onground      < 144  160      super elbow drop
    1974                    * onground      >               normal punch
    1975                    *
    1976                    * running                       hip toss
    1977                    * bouncing                      nothing
    1978                    *
    1979                    * onturnbkl     <  60   96      yank down
    1980                    * onturnbkl     >               normal punch
    1981                    * climbturnbkl                  normal punch
    1982                    *
    1983 0000c370                   JJXM_INIT
    1984 0000c3e0                   JJXM    NORMAL,          85, 55,sytzspunch_special,sytzspunch_slap      ;0
    1985 0000c4b0                   JJXM    RUNNING,         85, 55,sytzspunch_special,sytzspunch_slap      ;1
    1986 0000c580                   JJXM    INAIR,           85, 55,sytzspunch_special,sytzspunch_slap      ;2
    1987 0000c650                   JJXM    ATTACHED,        85, 55,sytzspunch_special,sytzspunch_slap      ;3
    1988 0000c720                   JJXM    ONGROUND,       160,140,sytzspunch_lbowdrop,std_punch   ;4
    1989 0000c7f0                   JJXM    BOUNCING,        85, 55,sytzspunch_special,sytzspunch_slap      ;1
    1990 0000c8c0                   JJXM    ONTURNBKL,              sytzspunch_slap                 ;6
    1991 0000c910                   JJXM    BLOCK,           85, 55,sytzspunch_special,sytzspunch_slap      ;7
    1992 0000c9e0                   JJXM    DIZZY,           85, 55,sytzspunch_special,sytzspunch_slap      ;8
    1993 0000cab0                   JJXM    DEAD,           160,140,sytzspunch_lbowdrop,std_punch   ;9
    1994 0000cb80                   JJXM    OPPOVERHEAD,     85, 55,sytzspunch_special,sytzspunch_slap      ;10
    1995 0000cc30                   JJXM    CLIMBTURNBKL,           std_punch                       ;11
    1996 0000cc80                   JJXM    WAITANIM,        85, 55,sytzspunch_special,sytzspunch_slap      ;12
    1997 0000cd30                   JJXM    GRAPPLE,         85, 55,sytzspunch_special,sytzspunch_slap      ;13
    1998 0000cdd0                   JJXM    MASTER,          85, 55,sytzspunch_special,sytzspunch_slap      ;14
    1999 0000ce70                   JJXM    SLAVE,           85, 55,sytzspunch_special,sytzspunch_slap      ;15
    2000 0000cf10                   JJXM    HEADHOLD,        85, 55,sytzspunch_special,sytzspunch_slap      ;16
    2001 0000cfb0                   JJXM    HEADHELD,               do_pile                         ;19
    2002 0000d000                   JJXM    CHOKEHOLD,       85, 55,sytzspunch_special,sytzspunch_slap      ;16
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   44

    2003 0000d0a0                   JJXM    PUPPET,          85, 55,sytzspunch_special,sytzspunch_slap      ;20
    2004 0000d140                   JJXM    PUPPET2,         85, 55,sytzspunch_special,sytzspunch_slap      ;20
    2005 0000d1e0                   JJXM    INAIR2,          85, 55,sytzspunch_special,sytzspunch_slap      ;21
    2006 0000d280                   JJXM_END
    2007                    
    2008 0000d2a0           sytzspunch_rets
    2009 0000d2a0     0960          rets
    2010                    
    2011                    *****
    2012 0000d2b0           sytzspunch_slap
    2013 0000d2b0                   FACE24  dnk,slap_anim
    2014 0000d350     0d5f          calla   change_anim1a
         0000d360 00000000! 
    2015                    
    2016 0000d380                   WRSND   W_DOINK,SPUNCH_T1,SPUNCH_T2
    2017                    
    2018 0000d520     0960          rets
    2019                    
    2020                    *****
    2021 0000d530           sytzspunch_special
    2022                    ;If stick is toward opponent, then do quick punches
    2023                    
    2024 0000d530     b5a0          move    *a13(STICK_VAL_CUR),a0
         0000d540     0bc0  
    2025 0000d550     1fc0          btst    MOVE_DOWN_BIT,a0
    2026 0000d560     cb2e          jrnz    sytzck_up
    2027                    
    2028                    
    2029                    ;       move    *a13(STICK_VAL_CUR),a0
    2030                    ;       move    *a13(NEW_FACING_DIR),a1
    2031                    ;       andi    0ch,a1
    2032                    ;       cmp     a0,a1
    2033                    ;       jrz     sytzcont
    2034                    
    2035 0000d570     b5a1          move    *a13(CLOSEST_XDIST),a1
         0000d580     0370  
    2036 0000d590     0b41          cmpi    60,a1
         0000d5a0     ffc3  
    2037 0000d5b0     c700          jrgt    std_punch
         0000d5c0     fe44  
    2038                    
    2039                    ;       jruc    sytzhdbutt
    2040                    ;sytzcont
    2041                    ;       .ref    dnk_3_head_hold2_anim
    2042                    ;       movi    dnk_3_head_hold2_anim,a0
    2043                    ;       calla   change_anim1a
    2044                    ;
    2045                    ;       WRSND   W_DOINK,GRABHOLD_T1,GRABHOLD_T2
    2046                    ;
    2047                    ;       rets
    2048                    ;sytzhdbutt
    2049                    
    2050 0000d5d0                   FACE24  dnk,butts_anim
    2051 0000d670     0d5f          calla   change_anim1
         0000d680 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   45

    2052                    
    2053 0000d6a0                   WRSND   W_DOINK,HDBUTT_T1,HDBUTT_T2
    2054                    
    2055 0000d840     0960          rets
    2056                    
    2057 0000d850           sytzck_up
    2058                    ;Check for uppercut
    2059                            .ref    dnk_4_uppercut_anim
    2060 0000d850     09e0          movi    dnk_4_uppercut_anim,a0
         0000d860 00000000! 
    2061 0000d880     0d5f          calla   change_anim1
         0000d890 00000000! 
    2062                    
    2063 0000d8b0                   WRSND   W_DOINK,SPUNCH_T1,SPUNCH_T2
    2064 0000da50     0960          rets
    2065                    
    2066                    *****
    2067 0000da60           sytzspunch_lbowdrop
    2068                    ;If near opponents head, and facing down, do the hair grab!
    2069                    ;Allow hair grab from below!
    2070                    
    2071                    ;       move    *a13(FACING_DIR),a14
    2072                    ;       btst    MOVE_DOWN_BIT,a14
    2073                    ;       jrz     sytzno
    2074                    
    2075 0000da60     b5ae          move    *a13(CLOSEST_NUM),a14
         0000da70     03a0  
    2076 0000da80                   X32     a14
    2077 0000da90     0b2e          addi    process_ptrs,a14
         0000daa0 00000000! 
    2078 0000dac0     87ce          move    *a14,a14,L
    2079 0000dad0     b5c2          move    *a14(PLYRMODE),a2
         0000dae0     05c0  
    2080 0000daf0     0b42          cmpi    MODE_DEAD,a2
         0000db00     fff6  
    2081 0000db10     ca3e          jrz     sytzno
    2082 0000db20     b7a1          move    *a13(OBJ_XPOS),a1,L 
         0000db30     0100  
    2083 0000db40     b7c2          move    *a14(OBJ_XPOS),a2,L
         0000db50     0100  
    2084 0000db60     4441          sub     a2,a1
    2085 0000db70     0381          abs     a1
    2086 0000db80     2e01          srl     16,a1
    2087 0000db90     0b41          cmpi    20h,a1  ;28
         0000dba0     ffdf  
    2088 0000dbb0     c434          jrlt    sytzno
    2089                    
    2090                    ;At head or feet!
    2091                    
    2092 0000dbc0     b5ce          move    *a14(OBJ_CONTROL),a14
         0000dbd0     0780  
    2093 0000dbe0     0b8e          andi    M_FLIPH,a14
         0000dbf0 ffffffef  
    2094 0000dc10     b5a0          move    *a13(OBJ_CONTROL),a0
         0000dc20     0780  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   46

    2095 0000dc30     0b80          andi    M_FLIPH,a0
         0000dc40 ffffffef  
    2096 0000dc60     480e          cmp     a0,a14
    2097 0000dc70     ca28          jrz     sytzno
    2098                    
    2099                    ;At head!  Do hair pickup.
    2100                    
    2101 0000dc80                   FACE24  dnk,hair_pickup_anim
    2102 0000dd20     0d5f          calla   change_anim1
         0000dd30 00000000! 
    2103 0000dd50                   WRSND   W_DOINK,LBOWDROP_T1,LBOWDROP_T2
    2104 0000def0     0960          rets
    2105                    
    2106 0000df00           sytzno  FACE24  dnk,lbowdrop_anim
    2107 0000dfa0     0d5f          calla   change_anim1
         0000dfb0 00000000! 
    2108 0000dfd0                   WRSND   W_DOINK,LBOWDROP_T1,LBOWDROP_T2
    2109 0000e170     0960          rets
    2110                    
    2111                    
    2112                    ************
    2113 0000e180           sytzkick                ;8
    2114                    *
    2115                    * MODE             DX  DZ       ACTION
    2116                    * ----------------------------------------------------
    2117                    * normal        <  50   92      knee
    2118                    * dizzy                 "               "
    2119                    * normal        >               normal kick
    2120                    * dizzy                 "               "
    2121                    *
    2122                    * onground      < 120  120      stomp
    2123                    * onground      >               normal kick
    2124                    *
    2125                    * running                       normal kick
    2126                    * bouncing                      normal kick
    2127                    *
    2128                    * onturnbkl                     normal kick
    2129                    * climbturnbkl                  normal kick
    2130                    *
    2131 0000e180                   JJXM_INIT
    2132 0000e1f0                   JJXM    NORMAL,          50, 92,sytzkick_knee,sytzkick_kick             ;0
    2133 0000e2c0                   JJXM    RUNNING,                 50, 92,sytzkick_knee,sytzkick_kick             ;0
    2134 0000e390                   JJXM    INAIR,           50, 92,sytzkick_knee,sytzkick_kick             ;2
    2135 0000e460                   JJXM    ATTACHED,        50, 92,sytzkick_knee,sytzkick_kick             ;3
    2136 0000e530                   JJXM    ONGROUND,       160,140,sytzkick_stomp,sytzkick_kick            ;4
    2137 0000e600                   JJXM    BOUNCING,        50, 92,sytzkick_knee,sytzkick_kick             ;0
    2138 0000e6d0                   JJXM    ONTURNBKL,              sytzkick_kick                   ;6
    2139 0000e720                   JJXM    BLOCK,           50, 92,sytzkick_knee,sytzkick_kick             ;7
    2140 0000e7f0                   JJXM    DIZZY,           50, 92,sytzkick_knee,sytzkick_kick             ;8
    2141 0000e8b0                   JJXM    DEAD,           160,140,sytzkick_stomp,sytzkick_kick            ;9
    2142 0000e960                   JJXM    OPPOVERHEAD,     50, 92,sytzkick_knee,sytzkick_kick             ;10
    2143 0000ea10                   JJXM    CLIMBTURNBKL,           sytzkick_kick                   ;11
    2144 0000ea50                   JJXM    WAITANIM,        50, 92,sytzkick_knee,sytzkick_kick             ;12
    2145 0000eaf0                   JJXM    GRAPPLE,         50, 92,sytzkick_knee,sytzkick_kick             ;13
    2146 0000eb90                   JJXM    MASTER,          50, 92,sytzkick_knee,sytzkick_kick             ;14
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   47

    2147 0000ec30                   JJXM    SLAVE,           50, 92,sytzkick_knee,sytzkick_kick             ;15
    2148 0000ecd0                   JJXM    HEADHOLD,        50, 92,sytzkick_knee,sytzkick_kick             ;16
    2149 0000ed70                   JJXM    HEADHELD,        50, 92,sytzkick_knee,sytzkick_kick             ;19
    2150 0000ee10                   JJXM    CHOKEHOLD,       50, 92,sytzkick_knee,sytzkick_kick             ;16
    2151 0000eeb0                   JJXM    PUPPET,          50, 92,sytzkick_knee,sytzkick_kick             ;20
    2152 0000ef50                   JJXM    PUPPET2,         50, 92,sytzkick_knee,sytzkick_kick             ;20
    2153 0000eff0                   JJXM    INAIR2,                 sytzskick_TB                    ;21
    2154 0000f040                   JJXM_END
    2155                    
    2156                    ;*****
    2157                    ;sytzkick_flyingkick
    2158                    ;
    2159                    ;       movi    dnk_flying_kick_anim,a0
    2160                    ;       calla   change_anim1a
    2161                    ;
    2162                    ;       SETMODE INAIR
    2163                    ;
    2164                    ;       WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    2165                    ;
    2166                    ;       rets
    2167                    
    2168                    *****
    2169 0000f060           sytzkick_kick
    2170 0000f060           std_kick
    2171                    
    2172 0000f060                   FACE24  dnk,kick_anim
    2173 0000f100     0d5f          calla   change_anim1a
         0000f110 00000000! 
    2174                    
    2175 0000f130                   WRSND   W_DOINK,KICK_T1,KICK_T2
    2176                    
    2177 0000f2d0     0960          rets
    2178                    
    2179                    *****
    2180 0000f2e0           sytzkick_knee
    2181 0000f2e0           std_knee
    2182 0000f2e0                   FACE24  dnk,knee_anim
    2183 0000f380     0d5f          calla   change_anim1a
         0000f390 00000000! 
    2184                    
    2185 0000f3b0                   WRSND   W_DOINK,KICK_T1,KICK_T2
    2186                    
    2187 0000f550     0960          rets
    2188                    
    2189                    *****
    2190 0000f560           sytzkick_stomp
    2191                    
    2192 0000f560                   FACE24  dnk,stomp_anim
    2193 0000f600     0d5f          calla   change_anim1a
         0000f610 00000000! 
    2194                    
    2195 0000f630                   WRSND   W_DOINK,KICK_T1,KICK_T2
    2196                    
    2197 0000f7d0     0960          rets
    2198                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   48

    2199                    
    2200                    ************
    2201 0000f7e0           sytzpunchkick   ;9
    2202                    
    2203 0000f7e0     09e0          movi    start_run_anim,a0
         0000f7f0 00000000! 
    2204 0000f810     0d5f          calla   change_anim1a
         0000f820 00000000! 
    2205                    
    2206 0000f840     0960          rets
    2207                    
    2208                    ************
    2209 0000f850           sytzsuper_kick  ;16
    2210                    *
    2211                    * MODE             DX  DZ       ACTION
    2212                    * ----------------------------------------------------
    2213                    * normal        <  60   60      close in super move
    2214                    * dizzy                 "               "
    2215                    * normal        >               jumping kick move
    2216                    * dizzy                 "               "
    2217                    *
    2218                    * onground      < 144  160      super stomp
    2219                    * onground      >               normal kick
    2220                    *
    2221                    * running                       big boot
    2222                    * bouncing                      big boot
    2223                    *
    2224                    * onturnbkl     <  60   96      jumping kick move
    2225                    * climbturnbkl          "               "
    2226                    * onturnbkl     >               normal kick
    2227                    * climbturnbkl          "               "
    2228                    *
    2229 0000f850                   JJXM_INIT
    2230 0000f8c0                   JJXM    NORMAL,          60, 60,sytzskick_special,sytzskick_kick        ;0
    2231 0000f990                   JJXM    RUNNING,                sytzskick_bigboot                       ;1
    2232 0000f9e0                   JJXM    INAIR,           60, 60,sytzskick_special,sytzskick_kick        ;2
    2233 0000fab0                   JJXM    ATTACHED,        60, 60,sytzskick_special,sytzskick_kick        ;3
    2234 0000fb80                   JJXM    ONGROUND,       160,140,sytzskick_stomp,std_kick                ;4
    2235 0000fc50                   JJXM    BOUNCING,               sytzskick_bigboot                       ;5
    2236 0000fca0                   JJXM    ONTURNBKL,       60, 96,sytzskick_kick,std_kick         ;6
    2237 0000fd70                   JJXM    BLOCK,           60, 60,sytzskick_special,sytzskick_kick        ;7
    2238 0000fe40                   JJXM    DIZZY,           60, 60,sytzskick_special,sytzskick_kick        ;8
    2239 0000ff10                   JJXM    DEAD,           160,140,sytzskick_stomp,std_kick                ;9
    2240 0000ffe0                   JJXM    OPPOVERHEAD,     60, 60,sytzskick_special,sytzskick_kick        ;10
    2241 000100b0                   JJXM    CLIMBTURNBKL,    60, 96,sytzskick_kick,std_kick         ;11
    2242 00010180                   JJXM    WAITANIM,        60, 62,sytzskick_special,sytzskick_kick        ;12
    2243 00010240                   JJXM    GRAPPLE,         60, 62,sytzskick_special,sytzskick_kick        ;13
    2244 000102f0                   JJXM    MASTER,          60, 62,sytzskick_special,sytzskick_kick        ;14
    2245 000103a0                   JJXM    SLAVE,           60, 62,sytzskick_special,sytzskick_kick        ;15
    2246 00010450                   JJXM    HEADHOLD,        60, 62,sytzskick_special,sytzskick_kick        ;16
    2247 000104f0                   JJXM    HEADHELD,               std_kick
    2248 00010540                   JJXM    CHOKEHOLD,       60, 62,sytzskick_special,sytzskick_kick        ;16
    2249 000105e0                   JJXM    PUPPET,          60, 62,sytzskick_special,sytzskick_kick        ;20
    2250 00010680                   JJXM    PUPPET2,         60, 62,sytzskick_special,sytzskick_kick        ;20
    2251 00010720                   JJXM    INAIR2,                 sytzskick_TB                    ;21
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   49

    2252 00010760                   JJXM_END
    2253                    
    2254                    *****
    2255 00010780           sytzskick_TB
    2256                            .ref    dnk_2_spin_kick_TB_anim
    2257                            .ref    dnk_4_spin_kick_TB_anim
    2258 00010780                   FACE24  dnk,spin_kick_TB_anim
    2259 00010820     0d5f          calla   change_anim1a
         00010830 00000000! 
    2260                    
    2261 00010850                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    2262 000109f0     0960          rets
    2263                    
    2264                    *****
    2265 00010a00           sytzskick_kick
    2266 00010a00           sytzgraboh
    2267                    
    2268 00010a00                   FACE24  dnk,spin_kick_anim
    2269 00010aa0     0d5f          calla   change_anim1a
         00010ab0 00000000! 
    2270                    
    2271 00010ad0                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    2272 00010c70     0960          rets
    2273                    
    2274                    *****
    2275 00010c80           sytzskick_special
    2276                    ;If stick is toward opponent, then do quick punches
    2277 00010c80     b5a0          move    *a13(STICK_VAL_CUR),a0
         00010c90     0bc0  
    2278 00010ca0     b5a1          move    *a13(NEW_FACING_DIR),a1
         00010cb0     04d0  
    2279 00010cc0     0b81          andi    0ch,a1
         00010cd0 fffffff3  
    2280 00010cf0     4801          cmp     a0,a1
    2281 00010d00     ca28          jrz     sytzcont2
    2282                    
    2283 00010d10                   FACE24  dnk,knee_anim
    2284 00010db0     0d5f          calla   change_anim1
         00010dc0 00000000! 
    2285                    
    2286                    ;       WRSND   W_DOINK,GRABHOLD_T1,GRABHOLD_T2
    2287                    ;no, lets try..... 
    2288 00010de0                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    2289 00010f80     0960          rets
    2290                    
    2291 00010f90           sytzcont2
    2292 00010f90     09e0          movi    dnk_4_knee_fall_anim,a0
         00010fa0 00000000! 
    2293 00010fc0     0d5f          calla   change_anim1
         00010fd0 00000000! 
    2294                    
    2295 00010ff0                   WRSND   W_DOINK,GRABHOLD_T1,GRABHOLD_T2
    2296 00011190     0960          rets
    2297                    
    2298                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   50

    2299                    *****
    2300 000111a0           sytzskick_stomp
    2301                    
    2302 000111a0                   FACE24  dnk,stomp_anim
    2303 00011240     0d5f          calla   change_anim1a
         00011250 00000000! 
    2304                    
    2305 00011270                   WRSND   W_DOINK,KICK_T1,KICK_T2
    2306                    
    2307 00011410     0960          rets
    2308                    
    2309                    *****
    2310 00011420           sytzskick_bigboot       ;we can probably get away with just a sytz4 big boot
    2311                    
    2312 00011420                   FACE24  dnk,bigboot_anim
    2313 000114c0     0d5f          calla   change_anim1a
         000114d0 00000000! 
    2314                    
    2315 000114f0                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    2316                    
    2317 00011690     0960          rets
    2318                    
    2319                    *****************************************************************************
    2320                    *
    2321                    * RUNNING (if GETUP_TIME > 0 then player is out of control)
    2322                    *
    2323                    
    2324          00064000  ldrdXRUN_VAL    equ     DNK_XRUN
    2325          00088000  ldrdXRUN2_VAL   equ     DNK_XRUN2
    2326          00028000  ldrdZDRIFT_VAL  equ     DNK_ZDRIFT
    2327                    
    2328 000116a0           mode_running
    2329                    
    2330 000116a0     b5a0          move    *a13(RUN_TIME),a0               ;Used for flying kick
         000116b0     07b0  
    2331 000116c0     1020          addk    1,a0
    2332 000116d0     b00d          move    a0,*a13(RUN_TIME)
         000116e0     07b0  
    2333                    
    2334 000116f0     b5a0          move    *a13(USR_VAR1),a0
         00011700     0850  
    2335 00011710     cb17          jrnz    ldrdno_vel
    2336                    
    2337 00011720     0d5f          calla   bounce_off_ropes
         00011730 00000000! 
    2338                    
    2339 00011750     09e0          movi    ldrdXRUN_VAL,a0
         00011760 00064000  
    2340                    
    2341 00011780     b5ae          move    *a13(WALK_FAST),a14
         00011790     0b40  
    2342 000117a0     ca03          jrz     ldrdno
    2343 000117b0     09e0          movi    ldrdXRUN2_VAL,a0
         000117c0 00088000  
    2344 000117e0           ldrdno
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   51

    2345 000117e0     05ae          move    @hyper_speed_on,a14
         000117f0 00000000! 
    2346 00011810     63c0          sll     a14,a0
    2347                    
    2348 00011820     b5ae          move    *a13(MOVE_DIR),a14
         00011830     04b0  
    2349 00011840     1f8e          btst    PLAYER_RIGHT_BIT,a14
    2350 00011850     cb01          jrnz    ldrdpos
    2351 00011860     03a0          neg     a0
    2352 00011870           ldrdpos
    2353 00011870     b20d          move    a0,*a13(OBJ_XVEL),L
         00011880     02d0  
    2354                    
    2355 00011890           ldrdno_vel
    2356                    
    2357 00011890     b5a0          move    *a13(GETUP_TIME),a0             ;delay b4 gaining control
         000118a0     0460  
    2358 000118b0     cb38          jrnz    ldrdout_of_control
    2359                    
    2360 000118c0     b5a0          move    *a13(ANIMODE),a0
         000118d0     0660  
    2361 000118e0     1fa0          btst    MODE_UNINT_BIT,a0
    2362 000118f0     cb16          jrnz    ldrdno_interrupt
    2363                    
    2364 00011900     b5a0          move    *a13(STICK_VAL_CUR),a0
         00011910     0bc0  
    2365 00011920     b5a1          move    *a13(MOVE_DIR),a1
         00011930     04b0  
    2366 00011940     5401          or      a0,a1
    2367 00011950     0b81          andi    MOVE_LEFT|MOVE_RIGHT,a1
         00011960 fffffff3  
    2368 00011980     0b41          cmpi    MOVE_LEFT|MOVE_RIGHT,a1
         00011990     fff3  
    2369 000119a0     cb0b          jrne    ldrdcontinue_run
    2370                    
    2371                            ;braking with stick.  abort run.
    2372                    
    2373 000119b0                   SETMODE NORMAL
    2374                    
    2375 00011a60           ldrdcontinue_run
    2376 00011a60           ldrdno_interrupt
    2377                    
    2378 00011a60     b5a0          move    *a13(STICK_VAL_CUR),a0
         00011a70     0bc0  
    2379 00011a80     5621          clr     a1
    2380                    
    2381 00011a90     09e1          movi    -ldrdZDRIFT_VAL,a1
         00011aa0 fffd8000  
    2382 00011ac0     1fe0          btst    PLAYER_UP_BIT,a0
    2383 00011ad0     cb06          jrnz    ldrdsetvel
    2384                    
    2385 00011ae0     09e1          movi    ldrdZDRIFT_VAL,a1
         00011af0 00028000  
    2386 00011b10     1fc0          btst    PLAYER_DOWN_BIT,a0
    2387 00011b20     cb01          jrnz    ldrdsetvel
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   52

    2388                    
    2389 00011b30     5621          clr     a1
    2390 00011b40           ldrdsetvel
    2391 00011b40     b22d          move    a1,*a13(OBJ_ZVEL),L
         00011b50     0310  
    2392                    
    2393                    
    2394                    ;Delay reading buttons after just getting out of an out of control run
    2395                    ;so a mistaken move isn't fired off
    2396 00011b60     b5a0          move    *a13(DELAY_BUTNS),a0
         00011b70     0ab0  
    2397 00011b80     cb0b          jrnz    ldrdout_of_control
    2398                    
    2399                    
    2400 00011b90     b5a0          move    *a13(BUT_VAL_DOWN),a0
         00011ba0     0ba0  
    2401 00011bb0     0b80          andi    011111b,a0
         00011bc0 ffffffe0  
    2402 00011be0                   X32     a0
    2403 00011bf0     0b20          addi    ldrdaction_table,a0
         00011c00 00011c50' 
    2404 00011c20     8600          move    *a0,a0,L
    2405 00011c30     0920          call    a0
    2406 00011c40           ldrdout_of_control
    2407 00011c40     0960          rets
    2408                    
    2409 00011c50           ldrdaction_table
    2410 00011c50 00012050'         .long   ldrdz,ldrdpunch,ldrdblock,ldrdblock                     ;0-3
    2411 00011cd0 00012060'         .long   ldrdsuper_punch,ldrdsuper_punch,ldrdblock,ldrdblock     ;4-7
    2412 00011d50 000131b0'         .long   ldrdkick,ldrdpunchkick,ldrdblock,ldrdblock              ;8-11
    2413 00011dd0 00012060'         .long   ldrdsuper_punch,ldrdpunchkick,ldrdblock,ldrdblock       ;12-15
    2414 00011e50 000131b0'         .long   ldrdsuper_kick,ldrdsuper_kick,ldrdblock,ldrdblock       ;16-19
    2415 00011ed0 00012060'         .long   ldrdgraboh,ldrdgraboh,ldrdblock,ldrdblock               ;20-23
    2416 00011f50 000131b0'         .long   ldrdsuper_kick,ldrdpunchkick,ldrdblock,ldrdblock        ;24-27
    2417 00011fd0 00012060'         .long   ldrdgraboh,ldrdgraboh,ldrdblock,ldrdblock               ;28-31
    2418                    
    2419                    ************
    2420 00012050           ldrdz
    2421 00012050     0960          rets
    2422                    
    2423                    
    2424                    ************
    2425 00012060           ldrdpunch               ;1
    2426 00012060           ldrdsuper_punch ;4
    2427 00012060           ldrdpunchkick
    2428 00012060           ldrdgraboh
    2429                    *
    2430                    * MODE             DX  DZ       ACTION
    2431                    * ----------------------------------------------------
    2432                    * normal                        flying clothesline
    2433                    * dizzy                                 "
    2434                    *
    2435                    * onground      < 176  176      belly flop
    2436                    * onground      >               nothing
    2437                    *
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   53

    2438                    * running                       flying clothesline
    2439                    * bouncing                      flying clothesline
    2440                    *
    2441                    * onturnbkl                     flying clothesline
    2442                    * climbturnbkl                  flying clothesline
    2443                    *
    2444 00012060                   JJXM_INIT
    2445 000120d0                   JJXM    NORMAL,                 ldrdpunch_clothesline           ;0
    2446 00012110                   JJXM    RUNNING,                ldrdpunch_clothesline           ;1
    2447 00012150                   JJXM    INAIR,                  ldrdpunch_clothesline           ;2
    2448 00012190                   JJXM    ATTACHED,               ldrdpunch_clothesline           ;3
    2449 000121d0                   JJXM    ONGROUND,       176,176,ldrdpunch_bellyflop,ldrdpunch_lbowdrop ;4
    2450 000122a0                   JJXM    BOUNCING,               ldrdpunch_clothesline           ;5      
    2451 000122e0                   JJXM    ONTURNBKL,              ldrdpunch_clothesline           ;6
    2452 00012320                   JJXM    BLOCK,                  ldrdpunch_clothesline           ;7
    2453 00012360                   JJXM    DIZZY,                  ldrdpunch_clothesline           ;8
    2454 000123a0                   JJXM    DEAD,           176,176,ldrdpunch_bellyflop,ldrdpunch_lbowdrop ;9
    2455 00012470                   JJXM    OPPOVERHEAD,            ldrdpunch_clothesline           ;10
    2456 000124b0                   JJXM    CLIMBTURNBKL,           ldrdpunch_clothesline           ;11
    2457 000124f0                   JJXM    WAITANIM,               ldrdpunch_clothesline           ;12
    2458 00012530                   JJXM    GRAPPLE,                ldrdpunch_clothesline           ;13
    2459 00012570                   JJXM    MASTER,                 ldrdpunch_clothesline           ;14
    2460 000125b0                   JJXM    SLAVE,                  ldrdpunch_clothesline           ;15
    2461 000125f0                   JJXM    HEADHOLD,               ldrdpunch_clothesline           ;16
    2462 00012630                   JJXM    HEADHELD,               ldrdpunch_clothesline           ;19
    2463 00012670                   JJXM    CHOKEHOLD,              ldrdpunch_clothesline           ;16
    2464 000126b0                   JJXM    PUPPET,                 ldrdpunch_clothesline           ;20
    2465 000126f0                   JJXM    PUPPET2,                ldrdpunch_clothesline           ;20
    2466 00012730                   JJXM    INAIR2,                 ldrdpunch_clothesline           ;21
    2467 00012770                   JJXM_END
    2468                    
    2469                    
    2470                    *****
    2471 00012790           ldrdpunch_clothesline
    2472                    
    2473                    ;Only allow clothesline if near center of ring, and running toward opponent
    2474 00012790     b5a1          move    *a13(MOVE_DIR),a1
         000127a0     04b0  
    2475 000127b0     1fa1          btst    MOVE_LEFT_BIT,a1
    2476 000127c0     cb06          jrnz    ldrdlft
    2477                    ;Moving right
    2478                            
    2479 000127d0     b5a0          move    *a13(OBJ_XPOSINT),a0
         000127e0     0110  
    2480 000127f0     0b40          cmpi    RING_X_MID+70h,a0
         00012800     fb8f  
    2481 00012810     c407          jrlt    ldrdok
    2482                    
    2483                    ;       LOCKUP
    2484                    
    2485 00012820     0960          rets
    2486                    
    2487 00012830           ldrdlft
    2488                    ;Moving left
    2489                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   54

    2490 00012830     b5a0          move    *a13(OBJ_XPOSINT),a0
         00012840     0110  
    2491 00012850     0b40          cmpi    RING_X_MID-70h,a0
         00012860     fc6f  
    2492 00012870     c701          jrgt    ldrdok
    2493                    
    2494                    ;       LOCKUP
    2495                    
    2496 00012880     0960          rets
    2497 00012890           ldrdok
    2498 00012890     b5a1          move    *a13(MOVE_DIR),a1
         000128a0     04b0  
    2499 000128b0     b5a0          move    *a13(NEW_FACING_DIR),a0 ;Current facing dir (9,10,6,5 only)
         000128c0     04d0  
    2500 000128d0     24a0          sll     5,a0
    2501 000128e0     0b20          addi    ldrdmv_tbl,a0
         000128f0 00012c40' 
    2502 00012910     8600          move    *a0,a0,L
    2503 00012920     4a01          btst    a0,a1
    2504 00012930     ca01          jrz     ldrdyes
    2505                    
    2506                    ;       LOCKUP
    2507                    
    2508 00012940     0960          rets
    2509 00012950           ldrdyes
    2510                    
    2511                    ;Will lunge toward opponent
    2512                    ;Is facing opponent - nt running away from him!
    2513 00012950     09e0          movi    dnk_fly_cline_anim,a0
         00012960 00000000! 
    2514 00012980     0d5f          calla   change_anim1a
         00012990 00000000! 
    2515                    
    2516 000129b0                   SETMODE INAIR
    2517                    
    2518 00012a60     5600          clr     a0
    2519 00012a70     b00d          move    a0,*a13(RUN_TIME)
         00012a80     07b0  
    2520                    
    2521 00012a90                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    2522                    
    2523 00012c30     0960          rets
    2524                    
    2525 00012c40 00000000  ldrdmv_tbl      .long   0,0,0,0,0,MOVE_RIGHT_BIT,MOVE_RIGHT_BIT
    2526 00012d20 00000000          .long   0,0,MOVE_LEFT_BIT,MOVE_LEFT_BIT
    2527                    
    2528                    *****
    2529 00012da0           ldrdpunch_lbowdrop
    2530 00012da0           ldrdpunch_bellyflop
    2531                    
    2532 00012da0     09e0          movi    dnk_belly_anim,a0
         00012db0 00000000! 
    2533 00012dd0     0d5f          calla   change_anim1a
         00012de0 00000000! 
    2534                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   55

    2535 00012e00                   SETMODE INAIR
    2536                    
    2537 00012eb0     5600          clr     a0
    2538 00012ec0     b00d          move    a0,*a13(RUN_TIME)
         00012ed0     07b0  
    2539                    
    2540 00012ee0                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    2541                    
    2542 00013080     0960          rets
    2543                    
    2544                    *****
    2545                    ;ldrdpunch_lbowdrop
    2546                    ;
    2547                    ;       FACE24  dnk,lbowdrop_anim
    2548                    ;       calla   change_anim1a
    2549                    ;
    2550                    ;       WRSND   W_DOINK,LBOWDROP_T1,LBOWDROP_T2
    2551                    ;
    2552                    ;       rets
    2553                    
    2554                    ************
    2555 00013090           ldrdblock               ;2
    2556 00013090     b7a0          move    *a13(OBJ_XVEL),a0,L
         000130a0     02d0  
    2557 000130b0     2be0          sra     1,a0
    2558 000130c0     b20d          move    a0,*a13(OBJ_XVEL),L
         000130d0     02d0  
    2559 000130e0                   SETMODE NORMAL
    2560 00013190     c000          jruc    std_block
         000131a0     f8fe  
    2561                    
    2562                    ************
    2563 000131b0           ldrdkick                ;8
    2564 000131b0           ldrdsuper_kick  ;16
    2565                    *
    2566                    * MODE             DX  DZ       ACTION
    2567                    * ----------------------------------------------------
    2568                    * normal                        flying kick
    2569                    * dizzy                                 "
    2570                    *
    2571                    * onground      < 176 176       running stomp
    2572                    * onground      >               nothing
    2573                    *
    2574                    * running                       flying kick
    2575                    * bouncing                      flying kick
    2576                    *
    2577                    * onturnbkl                     flying kick
    2578                    * climbturnbkl                  flying kick
    2579                    *
    2580 000131b0                   JJXM_INIT
    2581 00013220                   JJXM    NORMAL,                 ldrdkick_flyingkick             ;0
    2582 00013260                   JJXM    RUNNING,                ldrdkick_flyingkick             ;1
    2583 000132a0                   JJXM    INAIR,                  ldrdkick_flyingkick             ;2
    2584 000132e0                   JJXM    ATTACHED,               ldrdkick_flyingkick             ;3
    2585 00013320                   JJXM    ONGROUND,       176,176,ldrdkick_runstomp,ldrdkick_runstomp     ;4
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   56

    2586 000133d0                   JJXM    BOUNCING,               ldrdkick_flyingkick             ;5
    2587 00013410                   JJXM    ONTURNBKL,              ldrdkick_flyingkick             ;6
    2588 00013450                   JJXM    BLOCK,                  ldrdkick_flyingkick             ;7
    2589 00013490                   JJXM    DIZZY,                  ldrdkick_flyingkick             ;8
    2590 000134d0                   JJXM    DEAD,           176,176,ldrdkick_runstomp,ldrdkick_runstomp     ;9
    2591 00013570                   JJXM    OPPOVERHEAD,            ldrdkick_flyingkick             ;10
    2592 000135b0                   JJXM    CLIMBTURNBKL,           ldrdkick_flyingkick             ;11
    2593 000135f0                   JJXM    WAITANIM,               ldrdkick_flyingkick             ;12
    2594 00013630                   JJXM    GRAPPLE,                ldrdkick_flyingkick             ;13
    2595 00013670                   JJXM    MASTER,                 ldrdkick_flyingkick             ;14
    2596 000136b0                   JJXM    SLAVE,                  ldrdkick_flyingkick             ;15
    2597 000136f0                   JJXM    HEADHOLD,               ldrdkick_flyingkick             ;16
    2598 00013730                   JJXM    HEADHELD,               ldrdkick_flyingkick             ;19
    2599 00013770                   JJXM    CHOKEHOLD,              ldrdkick_flyingkick             ;16
    2600 000137b0                   JJXM    PUPPET,                 ldrdkick_flyingkick             ;20
    2601 000137f0                   JJXM    PUPPET2,                ldrdkick_flyingkick             ;20
    2602 00013830                   JJXM    INAIR2,                 ldrdkick_flyingkick             ;21
    2603 00013870                   JJXM_END
    2604                    
    2605                    *****
    2606 00013890           ldrdkick_flyingkick
    2607                    
    2608 00013890     0d5f          calla   ck_ignore
         000138a0 00000000! 
    2609 000138c0     c800          jrc     ldrdz
         000138d0     fe77  
    2610                    
    2611                    
    2612 000138e0     09e0          movi    dnk_flying_kick_anim,a0
         000138f0 00000000! 
    2613 00013910     0d5f          calla   change_anim1a
         00013920 00000000! 
    2614                    
    2615 00013940                   SETMODE INAIR
    2616                    
    2617 000139f0                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    2618                    
    2619 00013b90     0960          rets
    2620                    
    2621                    *****
    2622 00013ba0           ldrdkick_runstomp
    2623 00013ba0     09e0          movi    dnk_belly_anim,a0
         00013bb0 00000000! 
    2624 00013bd0     0d5f          calla   change_anim1a
         00013be0 00000000! 
    2625                    
    2626 00013c00                   SETMODE INAIR
    2627                    
    2628 00013cb0     5600          clr     a0
    2629 00013cc0     b00d          move    a0,*a13(RUN_TIME)
         00013cd0     07b0  
    2630                    
    2631 00013ce0                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    2632                    
    2633 00013e80     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   57

    2634                    
    2635                    
    2636                    *****************************************************************************
    2637                    *
    2638                    
    2639 00013e90           mode_inair      ;2
    2640                    
    2641 00013e90     0960          rets
    2642                    
    2643                    *****************************************************************************
    2644                    *
    2645                    
    2646 00013ea0           mode_attached   ;3
    2647                    
    2648 00013ea0     0d5f          calla   keep_attached
         00013eb0 00000000! 
    2649 00013ed0     cb12          jrnz    htmzstill_attached
    2650                    
    2651 00013ee0     5600          clr     a0
    2652 00013ef0     b20d          move    a0,*a13(ATTACH_PROC),L
         00013f00     03e0  
    2653                    
    2654 00013f10                   SETMODE NORMAL
    2655                    
    2656 00013fc0     09c0          movi    MODE_NORMAL,a0
         00013fd0     0000  
    2657 00013fe0     b00d          move    a0,*a13(ANIMODE)
         00013ff0     0660  
    2658                    
    2659 00014000           htmzstill_attached
    2660                    
    2661 00014000     0960          rets
    2662                    
    2663                    *****************************************************************************
    2664                    
    2665 00014010           mode_onground   ;4
    2666                    
    2667 00014010     0960          rets
    2668                    
    2669                    
    2670                    *****************************************************************************
    2671                    *
    2672                    * bouncing off ropes while running
    2673                    
    2674 00014020           mode_bouncing   ;5
    2675                    
    2676 00014020     5600          clr     a0
    2677 00014030     b20d          move    a0,*a13(OBJ_XVEL),L
         00014040     02d0  
    2678 00014050     b20d          move    a0,*a13(OBJ_ZVEL),L
         00014060     0310  
    2679                    
    2680 00014070     b5a0          move    *a13(ANIMODE),a0
         00014080     0660  
    2681 00014090     1fe0          btst    MODE_END_BIT,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   58

    2682 000140a0     ca20          jrz     ibnonot_ended
    2683                    
    2684 000140b0     b5a0          move    *a13(MOVE_DIR),a0
         000140c0     04b0  
    2685 000140d0     0bc0          xori    MOVE_LEFT+MOVE_RIGHT,a0 ;flip LEFT/RIGHT
         000140e0 0000000c  
    2686 00014100     b00d          move    a0,*a13(MOVE_DIR)
         00014110     04b0  
    2687                    
    2688 00014120     b5a1          move    *a13(NEW_FACING_DIR),a1
         00014130     04d0  
    2689 00014140     0b81          andi    MOVE_UP+MOVE_DOWN,a1
         00014150 fffffffc  
    2690 00014170     5401          or      a0,a1                   ;LEFT or RIGHT
    2691 00014180     b02d          move    a1,*a13(FACING_DIR)     ;face same dir as run
         00014190     04c0  
    2692                    
    2693 000141a0     09e0          movi    dnk_run2_anim,a0
         000141b0 00000000! 
    2694 000141d0     0d5f          calla   change_anim1a
         000141e0 00000000! 
    2695                    
    2696 00014200                   SETMODE RUNNING
    2697                    
    2698                    ;       clr     a0
    2699                    ;       move    a0,*a13(GETUP_TIME)     ;in control
    2700                    
    2701 000142b0           ibnonot_ended
    2702 000142b0     0960          rets
    2703                    
    2704                    *****************************************************************************
    2705                    *
    2706                    * STANDING ON TOP OF TURNBUCKLE
    2707                    
    2708 000142c0           mode_onturnbkl  ;6
    2709                    
    2710                    ;       ;check unint
    2711                    ;       move    *a13(ANIMODE),a14
    2712                    ;       btst    MODE_UNINT_BIT,a14
    2713                    ;       jrnz    vudvno_interrupt
    2714                    
    2715 000142c0     b5a0          move    *a13(STICK_VAL_CUR),a0
         000142d0     0bc0  
    2716 000142e0     1fc0          btst    PLAYER_DOWN_BIT,a0
    2717 000142f0     ca12          jrz     vudvno_climbdown
    2718                    
    2719 00014300     09e0          movi    dnk_climb_down_anim,a0
         00014310 00000000! 
    2720 00014330     0d5f          calla   change_anim1a
         00014340 00000000! 
    2721                    
    2722 00014360                   SETMODE CLIMBTURNBKL
    2723                    
    2724 00014410           vudvno_interrupt
    2725 00014410     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   59

    2726                    
    2727 00014420           vudvno_climbdown
    2728 00014420     b5a0          move    *a13(BUT_VAL_DOWN),a0
         00014430     0ba0  
    2729 00014440     0b80          andi    011111b,a0
         00014450 ffffffe0  
    2730 00014470     ca51          jrz     vudvz
    2731                    
    2732 00014480                   X32     a0
    2733 00014490     0b20          addi    vudvaction_table,a0
         000144a0 00014590' 
    2734 000144c0     8600          move    *a0,a0,L
    2735 000144d0     0920          call    a0
    2736                    
    2737 000144e0     b5a5          move    *a13(PLYRNUM),a5
         000144f0     0580  
    2738 00014500     09e2          movi    JUMP_ROPES,a2
         00014510 00000000! 
    2739 00014530     09c0          movi    1000,a0
         00014540     03e8  
    2740 00014550     0d5f          calla   ADD_IF_SILENT
         00014560 00000000! 
    2741                    
    2742 00014580     0960          rets
    2743                    
    2744                    
    2745                    ;For standing on top of turnbuckles
    2746                    
    2747 00014590           vudvaction_table
    2748 00014590 00014990'         .long   vudvz,vudvpunch,vudvblock,vudvblock                     ;0-3
    2749 00014610 00014c60'         .long   vudvsuper_punch,vudvsuper_punch,vudvblock,vudvblock     ;4-7
    2750 00014690 00014f20'         .long   vudvkick,vudvpunchkick,vudvblock,vudvblock              ;8-11
    2751 00014710 00014c60'         .long   vudvsuper_punch,vudvpunchkick,vudvblock,vudvblock       ;12-15
    2752 00014790 00014f20'         .long   vudvsuper_kick,vudvsuper_kick,vudvblock,vudvblock       ;16-19
    2753 00014810 00014c60'         .long   vudvgraboh,vudvgraboh,vudvblock,vudvblock               ;20-23
    2754 00014890 00014f20'         .long   vudvsuper_kick,vudvpunchkick,vudvblock,vudvblock        ;24-27
    2755 00014910 00014c60'         .long   vudvgraboh,vudvgraboh,vudvblock,vudvblock               ;28-31
    2756                    
    2757                    ************
    2758 00014990           vudvz
    2759 00014990     0960          rets
    2760                    
    2761                    ************
    2762 000149a0           vudvpunch               ;1
    2763 000149a0           vudvpunchkick   ;1
    2764 000149a0           vudvblock               ;2
    2765                    
    2766 000149a0                   SETMODE INAIR
    2767 00014a50                   WRSND   W_DOINK,GRABFLING_T1,GRABFLING_T2
    2768                    
    2769 00014bf0     09e0          movi    dnk_4_blbowdrop_anim,a0         ;Buckle
         00014c00 00000000! 
    2770 00014c20     0d5f          calla   change_anim1a
         00014c30 00000000! 
    2771 00014c50     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   60

    2772                    
    2773                    ************
    2774                    
    2775                    ;       movi    dnk_4_bjump_anim,a0             ;Buckle
    2776                    ;       calla   change_anim1a
    2777                    ;       rets
    2778                    
    2779                    ************
    2780 00014c60           vudvsuper_punch ;4
    2781                    ;If stick is toward opponent, then do hammer pound move
    2782                    ;       move    *a13(STICK_VAL_CUR),a0
    2783                    ;       move    *a13(NEW_FACING_DIR),a1
    2784                    ;       andi    0ch,a1
    2785                    ;       cmp     a0,a1
    2786                    
    2787                    ;       xor     a0,a1
    2788                    ;       andi    MOVE_LEFT|MOVE_RIGHT,a1
    2789                    ;       cmpi    MOVE_LEFT|MOVE_RIGHT,a1
    2790                    
    2791                    ;       jrnz    vudvgraboh                              ;Br=regular
    2792                    ;
    2793                    ;;Do hammer pound
    2794                    ;       movi    dnk_4_bhammer_anim,a0
    2795                    ;       calla   change_anim1a
    2796                    ;       rets
    2797                    ;
    2798                    ;
    2799 00014c60           vudvgraboh              ;1
    2800                    
    2801 00014c60                   SETMODE INAIR
    2802 00014d10                   WRSND   W_DOINK,GRABFLING_T1,GRABFLING_T2
    2803                    
    2804 00014eb0     09e0          movi    dnk_diveofftb_anim,a0
         00014ec0 00000000! 
    2805 00014ee0     0d5f          calla   change_anim1a
         00014ef0 00000000! 
    2806 00014f10     0960          rets
    2807                    
    2808                    ************
    2809 00014f20           vudvkick                ;8
    2810 00014f20           vudvsuper_kick  ;16
    2811                    
    2812 00014f20                   SETMODE INAIR
    2813 00014fd0                   WRSND   W_DOINK,GRABFLING_T1,GRABFLING_T2
    2814                    
    2815 00015170     09e0          movi    dnk_4_bstomp_anim,a0            ;Buckle
         00015180 00000000! 
    2816 000151a0     0d5f          calla   change_anim1a
         000151b0 00000000! 
    2817 000151d0     0960          rets
    2818                    
    2819                    *****************************************************************************
    2820                    * blocking
    2821                    
    2822 000151e0           mode_block      ;7
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   61

    2823                    
    2824 000151e0     5600          clr     a0
    2825 000151f0     b00d          move    a0,*a13(CONSECUTIVE_HITS)
         00015200     0e50  
    2826                    
    2827 00015210     b5a0          move    *a13(BLOCK_TIME),a0
         00015220     0d30  
    2828 00015230     1020          inc     a0
    2829 00015240     b00d          move    a0,*a13(BLOCK_TIME)
         00015250     0d30  
    2830 00015260     0b40          cmpi    160,a0
         00015270     ff5f  
    2831 00015280     c413          jrlt    sfftno
    2832                    
    2833 00015290     0d5f          calla   get_opp_plyrmode
         000152a0 00000000! 
    2834 000152c0     0b40          cmpi    MODE_BLOCK,a0
         000152d0     fff8  
    2835 000152e0     cb0d          jrnz    sfftno
    2836 000152f0     b5a0          move    *a13(CLOSEST_XDIST),a0
         00015300     0370  
    2837 00015310     0b40          cmpi    61h,a0
         00015320     ff9e  
    2838 00015330     c508          jrge    sfftno
    2839 00015340     0b40          cmpi    45,a0
         00015350     ffd2  
    2840 00015360     c405          jrlt    sfftno
    2841 00015370     b5a0          move    *a13(CLOSEST_ZDIST),a0
         00015380     0390  
    2842 00015390     0b40          cmpi    30,a0
         000153a0     ffe1  
    2843 000153b0     c461          jrlt    sfftpunchblock
    2844                    
    2845 000153c0           sfftno
    2846 000153c0     b5a0          move    *a13(BUT_VAL_DOWN),a0
         000153d0     0ba0  
    2847 000153e0     0b80          andi    011111b,a0
         000153f0 ffffffe0  
    2848 00015410     ca0c          jrz     sfftno_interrupt
    2849                    
    2850                            ;press.  if block isn't down, let mode_normal handle it
    2851 00015420     4c02          move    a0,a2                   ;save a0 from ...val_down
    2852 00015430     b5a0          move    *a13(BUT_VAL_CUR),a0
         00015440     0b90  
    2853 00015450     1fc0          btst    PLAYER_BLOCK_BIT,a0
    2854 00015460     ca08          jrz     sfftset_mode_normal
    2855 00015470     4c40          move    a2,a0                   ;restore a0 from ...val_down
    2856                    
    2857 00015480                   X32     a0
    2858 00015490     0b20          addi    sfftaction_table,a0
         000154a0 000155c0' 
    2859 000154c0     8600          move    *a0,a0,L
    2860 000154d0     0920          call    a0
    2861                    
    2862 000154e0           sfftno_interrupt
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   62

    2863 000154e0     0960          rets
    2864                    
    2865 000154f0           sfftset_mode_normal
    2866 000154f0                   SETMODE NORMAL
    2867 000155a0     c000          jruc    mode_normal
         000155b0     f450  
    2868                    
    2869 000155c0           sfftaction_table
    2870 000155c0 000159c0'         .long   sfftz,sfftpunchblock,sfftz      ;0-2
    2871 00015620 000159d0'         .long   sfftpunchblock          ;3
    2872 00015640 000159c0'         .long   sfftz,sfftz,sfftz,sfftz,sfftz,sfftz,sfftz       ;4-10
    2873 00015720 000159c0'         .long   sfftz,sfftz,sfftz,sfftz,sfftz,sfftz,sfftz       ;11-17
    2874 00015800 000159c0'         .long   sfftz,sfftz,sfftz,sfftz,sfftz,sfftz,sfftz       ;18-24
    2875 000158e0 000159c0'         .long   sfftz,sfftz,sfftz,sfftz,sfftz,sfftz,sfftz       ;25-31
    2876                    
    2877                    ************
    2878 000159c0           sfftz
    2879 000159c0     0960          rets
    2880                    
    2881                    ************
    2882 000159d0           sfftpunchblock  ;3
    2883                    *
    2884                    * MODE             DX  DZ       ACTION
    2885                    * ----------------------------------------------------
    2886                    * all                           push
    2887                    *
    2888                    
    2889                    ;This push has no collisions set!
    2890                    
    2891 000159d0                   SETMODE NORMAL
    2892                    
    2893 00015a80     09e0          movi    dnk_4_push_anim,a0
         00015a90 00000000! 
    2894 00015ab0     0d5f          calla   change_anim1a
         00015ac0 00000000! 
    2895                    
    2896 00015ae0                   WRSND   W_DOINK,PUSH_T1,PUSH_T2
    2897                    
    2898 00015c80     0960          rets
    2899                    
    2900                    *****************************************************************************
    2901                    *
    2902                    
    2903 00015c90           mode_dizzy      ;8
    2904                    
    2905                    ;       move    *a13(GETUP_TIME),a0
    2906                    ;       jrnz    tyjlstill_going
    2907                    ;
    2908                    ;       calla   clear_damage_log
    2909                    ;
    2910                    ;       clr     a0
    2911                    ;       move    a0,*a13(STARS_FLAG)
    2912                    ;
    2913                    ;       SETMODE NORMAL
    2914                    ;
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   63

    2915                    ;tyjlstill_going
    2916 00015c90     0960          rets
    2917                    
    2918                    *****************************************************************************
    2919                    
    2920 00015ca0            SUBR   mode_dead       ;9
    2921                    
    2922                            ;if our zombie bit is set, move
    2923 00015ca0     b5ae          move    *a13(STATUS_FLAGS),a14
         00015cb0     0b50  
    2924 00015cc0     1f8e          btst    B_ZOMBIE,a14            ;are we already a zombie?
    2925 00015cd0     cb45          jrnz    cwbfzmb
    2926                    
    2927 00015ce0     1e2e          btst    B_DID_BUCKOFF,a14
    2928 00015cf0     cb00          jrnz    cwbfdone                        ;have we already done one this match?
         00015d00     0086  
    2929                    
    2930 00015d10     1e4e          btst    B_NO_BUCKOFF,a14
    2931 00015d20     cb00          jrnz    cwbfdone                        ;have we already checked this round?
         00015d30     0083  
    2932                    
    2933 00015d40     1e6e          btst    B_DO_BUCKOFF,a14
    2934 00015d50     cb00          jrnz    cwbfcount_btns          ;are we already counting?
         00015d60     0081  
    2935                    
    2936 00015d70     05ae          move    @royal_rumble,a14
         00015d80 00000000! 
    2937 00015da0     cb7c          jrnz    cwbfdone                        ;are we in royal rumble mode?
    2938                    
    2939                            ;We may have to fire up a come back to life process:
    2940                            ; IF this is the second round we've lost,
    2941                            ; AND IF our combo meter is flashing,
    2942                            ; AND IF the hit that killed us was wimpy and our WEAK_HIT bit is set,
    2943                            ; AND IF we haven't already done a buckoff this match,
    2944                            ; AND IF we're inside the ring,
    2945                            ; THEN start counting button presses.
    2946                    
    2947                            ;Is this the second round we've lost?
    2948                            ;(skip this test if we're in the 8-on-1 match)
    2949 00015db0     0d5f          calla   is_8_on_1
         00015dc0 00000000! 
    2950 00015de0     c80c          jrc     cwbfck81
    2951 00015df0     05a0          move    @p1rounds,a0
         00015e00 00000000! 
    2952 00015e20     b5ae          move    *a13(PLYR_SIDE),a14
         00015e30     05b0  
    2953 00015e40     cb03          jrnz    cwbfrndok
    2954 00015e50     05a0          move    @p2rounds,a0
         00015e60 00000000! 
    2955 00015e80           cwbfrndok       TEST    a0
    2956 00015e90     ca21          jrz     cwbfnobuck
    2957 00015ea0     c005          jruc    cwbftcombo
    2958                    
    2959 00015eb0           cwbfck81        ;it's 8-on-1.  only the player is allowed to buckoff.
    2960 00015eb0     b5ae          move    *a13(PLYRNUM),a14
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   64

         00015ec0     0580  
    2961 00015ed0     0b4e          cmpi    2,a14
         00015ee0     fffd  
    2962 00015ef0     c51b          jrge    cwbfnobuck
    2963                    
    2964 00015f00           cwbftcombo      ;is our combo meter lit?
    2965 00015f00     4da8          move    a13,a8
    2966 00015f10     0d5f          calla   CHECK_COMBO_GO
         00015f20 00000000! 
    2967 00015f40     c416          jrlt    cwbfnobuck
    2968                    
    2969                            ;are we inside the ring?
    2970 00015f50     b5ae          move    *a13(INRING),a14
         00015f60     0560  
    2971 00015f70     cb13          jrnz    cwbfnobuck
    2972                    
    2973                            ;Buckoff is NOT allowed if undertaker started his finish move or
    2974                            ;has completed his finish move!!!!
    2975 00015f80     05ae          move    @in_finish_move,a14
         00015f90 00000000! 
    2976 00015fb0     cb0f          jrnz    cwbfnobuck
    2977 00015fc0     05ae          move    @finish_completed,a14
         00015fd0 00000000! 
    2978 00015ff0     cb0b          jrnz    cwbfnobuck
    2979                    
    2980                            ;temp! - 314
    2981                            .if DEBUG
    2982                            DBEVENT BDE_MAYBE_BUCK,a13,L,*a13(WRESTLERNUM),W,*a13(PLYRNUM),W
    2983                            .endif
    2984                    
    2985                            ;possible buckoff.  Zero BUCKOFF_COUNT and set DO_BUCKOFF bit
    2986 00016000     57ce          clr     a14
    2987 00016010     b1cd          move    a14,*a13(BUCKOFF_COUNT)
         00016020     0da0  
    2988 00016030     b5ae          move    *a13(STATUS_FLAGS),a14
         00016040     0b50  
    2989 00016050     0bae          ori     M_DO_BUCKOFF,a14
         00016060 00001000  
    2990 00016080     b1cd          move    a14,*a13(STATUS_FLAGS)
         00016090     0b50  
    2991 000160a0     c04d          jruc    cwbfcount_btns
    2992                    
    2993 000160b0           cwbfnobuck      ;no buckoff.  set NO_BUCKOFF bit
    2994 000160b0     b5ae          move    *a13(STATUS_FLAGS),a14
         000160c0     0b50  
    2995 000160d0     0bae          ori     M_NO_BUCKOFF,a14
         000160e0 00002000  
    2996 00016100     b1cd          move    a14,*a13(STATUS_FLAGS)
         00016110     0b50  
    2997 00016120     c044          jruc    cwbfdone
    2998                    
    2999 00016130           cwbfzmb ;we're a zombie.  WAITROLL is going to automatically roll us up
    3000                            ; until we can't roll anymore, and then our anim should make us
    3001                            ; stand up.  (There should always be a getup after a waitroll.)
    3002                            ; So all we do is wait for the MODE_END bit to get set, which tells
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   65

    3003                            ; us that we're standing up, outside, with a clear lane to either
    3004                            ; side.  At that point we begin running toward whichever side of
    3005                            ; the arena is farther from the camera.  We don't want to be seen
    3006                            ; vanishing when we hit the edge.
    3007                    
    3008                            ;Update ZOMBIE_TIME.  If we've been a zombie for ten seconds,
    3009                            ; something has probably gone wrong with our trip to the side
    3010                            ; of the arena, so we'll just transform now.
    3011 00016130     b5ae          move    *a13(ZOMBIE_TIME),a14
         00016140     0db0  
    3012 00016150     102e          inc     a14
    3013 00016160     b1cd          move    a14,*a13(ZOMBIE_TIME)
         00016170     0db0  
    3014 00016180     0b4e          cmpi    TSEC*10,a14
         00016190     fded  
    3015 000161a0     c404          jrlt    cwbfzmb_ok
    3016                    
    3017 000161b0           cwbfchange      ;timeout!
    3018 000161b0     0d5f          calla   change_wrestler
         000161c0 00000000! 
    3019 000161e0     c038          jruc    cwbfdone
    3020 000161f0           cwbfzmb_ok
    3021                    
    3022 000161f0     b5ae          move    *a13(ANIMODE),a14
         00016200     0660  
    3023 00016210     1fee          btst    MODE_END_BIT,a14
    3024 00016220     ca34          jrz     cwbfdone
    3025                    
    3026 00016230           cwbfrun ;begin running left if WORLDTLX > RING_X_CENTER-200, right otherwise.
    3027                    
    3028                            ;set CAN_XFORM bit so we can transform
    3029 00016230     b5ae          move    *a13(STATUS_FLAGS),a14
         00016240     0b50  
    3030 00016250     0bae          ori     M_CAN_XFORM,a14
         00016260 00000040  
    3031 00016280     b1cd          move    a14,*a13(STATUS_FLAGS)
         00016290     0b50  
    3032                    
    3033 000162a0     07ae          move    @WORLDTLX,a14,L
         000162b0 00000000! 
    3034 000162d0     2a0e          sra     16,a14
    3035 000162e0     0b4e          cmpi    RING_X_CENTER-200,a14
         000162f0     fc95  
    3036 00016300     c513          jrge    cwbfrun_left
    3037                    
    3038 00016310           cwbfrun_right
    3039 00016310     190e          movk    MOVE_RIGHT,a14
    3040 00016320     b1cd          move    a14,*a13(STICK_VAL_CUR)
         00016330     0bc0  
    3041 00016340     09e0          movi    start_run_anim,a0
         00016350 00000000! 
    3042 00016370     0d5f          calla   change_anim1a
         00016380 00000000! 
    3043                    
    3044 000163a0     b5ae          move    *a13(WRESTLERNUM),a14
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   66

         000163b0     0590  
    3045 000163c0                   X32     a14
    3046 000163d0     0b2e          addi    cwbfrun_speeds,a14
         000163e0 00017110' 
    3047 00016400     87ce          move    *a14,a14,L
    3048 00016410     b3cd          move    a14,*a13(OBJ_XVEL),L
         00016420     02d0  
    3049 00016430     c013          jruc    cwbfdone
    3050                    
    3051 00016440           cwbfrun_left
    3052 00016440     188e          movk    MOVE_LEFT,a14
    3053 00016450     b1cd          move    a14,*a13(STICK_VAL_CUR)
         00016460     0bc0  
    3054 00016470     09e0          movi    start_run_anim,a0
         00016480 00000000! 
    3055 000164a0     0d5f          calla   change_anim1a
         000164b0 00000000! 
    3056                    
    3057 000164d0     b5ae          move    *a13(WRESTLERNUM),a14
         000164e0     0590  
    3058 000164f0                   X32     a14
    3059 00016500     0b2e          addi    cwbfrun_speeds,a14
         00016510 00017110' 
    3060 00016530     87ce          move    *a14,a14,L
    3061 00016540     03ae          neg     a14
    3062 00016550     b3cd          move    a14,*a13(OBJ_XVEL),L
         00016560     02d0  
    3063                    
    3064                    
    3065 00016570     0960  cwbfdone        rets
    3066                    
    3067 00016580           cwbfcount_btns
    3068                            ;count new presses this tick and add to BUCKOFF_COUNT
    3069 00016580     b5a0          move    *a13(BUT_VAL_DOWN),a0
         00016590     0ba0  
    3070 000165a0     5621          clr     a1
    3071 000165b0     6a0e  cwbflp0 lmo     a0,a14
    3072 000165c0     ca04          jrz     cwbfend0
    3073 000165d0     69c0          rl      a14,a0
    3074 000165e0     2020          sla     1,a0
    3075 000165f0     1021          inc     a1
    3076 00016600     c0fa          jruc    cwbflp0
    3077 00016610     b5a0  cwbfend0        move    *a13(BUCKOFF_COUNT),a0
         00016620     0da0  
    3078                    
    3079 00016630     4020          add     a1,a0
    3080 00016640     b00d          move    a0,*a13(BUCKOFF_COUNT)
         00016650     0da0  
    3081                    
    3082 00016660     0b40          cmpi    50,a0
         00016670     ffcd  
    3083 00016680     c501          jrge    cwbfdobuck
    3084                    
    3085                            .ref    obj_del1c,dec_to_asc,concat_rom_string,mess_spacing
    3086                            .ref    ogmd10_ascii,message_ascii,mess_cursx,mess_cursy
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   67

    3087                            .ref    message_palette,print_string,BINBCD,SGMD8GLD,mess_objid
    3088                            .ref    copy_string
    3089                    
    3090 00016690     0960          rets
    3091                    
    3092 000166a0           cwbfdobuck      ;SUCCESS!  Do the buckoff.
    3093                    
    3094                            ;temp! - 314
    3095                            .if DEBUG
    3096                            DBEVENT BDE_DONE_BUCK,a13,L,*a13(WRESTLERNUM),W,*a13(PLYRNUM),W
    3097                            .endif
    3098                    
    3099                            ;clear my combo meter
    3100 000166a0     0d5f          calla   clear_combo_meter
         000166b0 00000000! 
    3101                    
    3102                    ;       ;If we've been pinned, send the pinner to his buckoff anim.
    3103                    ;       move    *a13(STATUS_FLAGS),a14
    3104                    ;       btst    B_PINNED,a14
    3105                    ;       jrz     cwbfme_not_pinned
    3106                    ;
    3107                    ;       move    *a13(WHOPINNEDME),a0,L
    3108                    
    3109                            ;If any opponent has pinned, send him to his buckoff anim.
    3110 000166d0     09c0          movi    NUM_WRES,a0
         000166e0     0007  
    3111 000166f0     09e1          movi    process_ptrs,a1
         00016700 00000000! 
    3112 00016720     9622  cwbflp2 move    *a1+,a2,L
    3113 00016730     ca06          jrz     cwbfnxt2
    3114 00016740     b64e          move    *a2(STATUS_FLAGS),a14,L
         00016750     0b50  
    3115 00016760     1fce          btst    B_DID_PIN,a14
    3116 00016770     ca02          jrz     cwbfnxt2
    3117 00016780     4c40          move    a2,a0
    3118 00016790     c001          jruc    cwbfdone2
    3119 000167a0     3d20  cwbfnxt2        dsj     a0,cwbflp2
    3120 000167b0           cwbfdone2
    3121                    
    3122                            ;clear his pinned bit
    3123 000167b0     b40e          move    *a0(STATUS_FLAGS),a14
         000167c0     0b50  
    3124 000167d0     0b8e          andni   M_DID_PIN,a14
         000167e0 00000002  
    3125 00016800     b1c0          move    a14,*a0(STATUS_FLAGS)
         00016810     0b50  
    3126                    
    3127                            ;if his DID_RAISEARM bit is set, then it was probably taker and he's
    3128                            ; no longer on top of us, so skip the buckoff and just let him get
    3129                            ; his raisearm anim shut off along with the other drones.
    3130 00016820     b40e          move    *a0(STATUS_FLAGS),a14
         00016830     0b50  
    3131 00016840     1dee          btst    B_DID_RAISEARM,a14
    3132 00016850     cb0a          jrnz    cwbfme_not_pinned
    3133                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   68

    3134                            ;do his bucked off anim (stick it into special_move_addr?)
    3135 00016860     4c08          move    a0,a8
    3136 00016870                   FACETBL cwbfbuckoff_tbl,a8
    3137 000168e0     b208          move    a0,*a8(SPECIAL_MOVE_ADDR),L
         000168f0     0930  
    3138                    
    3139 00016900           cwbfme_not_pinned
    3140                            ;back to life...
    3141 00016900     09ce          movi    MODE_ONGROUND,a14
         00016910     0004  
    3142 00016920     b1cd          move    a14,*a13(PLYRMODE)
         00016930     05c0  
    3143                    
    3144                            ;get two pixels back
    3145 00016940     1840          movk    2,a0
    3146 00016950     b5a1          move    *a13(PLYRNUM),a1
         00016960     0580  
    3147 00016970     0d5f          calla   adjust_health
         00016980 00000000! 
    3148                    
    3149                            ;no getup meter
    3150 000169a0     57ce          clr     a14
    3151 000169b0     b1cd          move    a14,*a13(GETUP_TIME)
         000169c0     0460  
    3152 000169d0     b1cd          move    a14,*a13(DELAY_METER)
         000169e0     0ad0  
    3153                    
    3154                    ;If died in a combo, allow buckoff to continue
    3155 000169f0     5600          clr     a0
    3156 00016a00     b00d          move    a0,*a13(I_WILL_DIE)
         00016a10     0b30  
    3157                    
    3158                            ;reset my pal, just in case.
    3159 00016a20     b9ad          move    *a13(MY_PAL),*a13(OBJ_PAL)
         00016a30     08a0  
         00016a40     07a0  
    3160                    
    3161                    ;Slide out 2nd wind message
    3162 00016a50     4da8          move    a13,a8
    3163 00016a60     09ca          movi    41,a10
         00016a70     0029  
    3164                            .ref    MOVE_NAME_ANNC
    3165 00016a80                   CREATE  MESSAGE_PID,MOVE_NAME_ANNC
    3166                    
    3167                            ;clear DO_BUCKOFF|PINABLE|PINNED, and set DID_BUCKOFF|NEW_BUCKOFF
    3168 00016b00     b7ae          move    *a13(STATUS_FLAGS),a14,L
         00016b10     0b50  
    3169 00016b20     0bae          ori     M_DID_BUCKOFF|M_NEW_BUCKOFF,a14
         00016b30 00024000  
    3170 00016b50     0b8e          andni   M_DO_BUCKOFF|M_PINNED|M_PINABLE,a14
         00016b60 00001220  
    3171 00016b80     b3cd          move    a14,*a13(STATUS_FLAGS),L
         00016b90     0b50  
    3172                    
    3173                            ;convulse
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   69

    3174 00016ba0                   FACETBL hitonground_tbl
    3175 00016c10     0d5f          calla   change_anim1a
         00016c20 00000000! 
    3176                    
    3177                            ;set nocollis bit
    3178 00016c40     b5ae          move    *a13(ANIMODE),a14
         00016c50     0660  
    3179 00016c60     0bae          ori     MODE_NOCOLLIS,a14
         00016c70 00000100  
    3180 00016c90     b1cd          move    a14,*a13(ANIMODE)
         00016ca0     0660  
    3181                    
    3182                            ;if anyone has done a raisearm, put 'em back in a stand.
    3183 00016cb0     09e0          movi    process_ptrs,a0
         00016cc0 00000000! 
    3184 00016ce0     09c1          movi    NUM_WRES,a1
         00016cf0     0007  
    3185 00016d00     9602  cwbflp1 move    *a0+,a2,L
    3186 00016d10     ca09          jrz     cwbfnxt1
    3187 00016d20     b64e          move    *a2(STATUS_FLAGS),a14,L
         00016d30     0b50  
    3188 00016d40     1dee          btst    B_DID_RAISEARM,a14
    3189 00016d50     ca05          jrz     cwbfnxt1
    3190                    
    3191                            ;just clear the DID_RAISEARM bit.  Anim scripts will do the rest.
    3192 00016d60     0b8e          andni   M_DID_RAISEARM,a14
         00016d70 00010000  
    3193 00016d90     b3c2          move    a14,*a2(STATUS_FLAGS),L
         00016da0     0b50  
    3194                    
    3195                    
    3196 00016db0     3d81  cwbfnxt1        dsj     a1,cwbflp1
    3197                    
    3198                            ;If anyone has turned into a drone, turn 'em back.
    3199 00016dc0     57ce          clr     a14
    3200 00016dd0     07a0          move    @process_ptrs,a0,L
         00016de0 00000000! 
    3201 00016e00     ca02          jrz     cwbfadc1
    3202 00016e10     b1c0          move    a14,*a0(PLYR_TYPE)
         00016e20     05a0  
    3203 00016e30     07a0  cwbfadc1        move    @process_ptrs+20h,a0,L
         00016e40 00000020! 
    3204 00016e60     ca02          jrz     cwbfadc2
    3205 00016e70     b1c0          move    a14,*a0(PLYR_TYPE)
         00016e80     05a0  
    3206 00016e90           cwbfadc2
    3207                    
    3208                            ;call init_reduce_bog, because match_timer clears it when it
    3209                            ; sees one team dead.
    3210 00016e90     0d5f          calla   init_reduce_bog
         00016ea0 00000000! 
    3211                    
    3212                            ;if there's an ANNOUNCE_RND_WINNER process waiting,
    3213                            ; wake it up so it'll see us alive and die.
    3214 00016ec0     09c0          movi    ANNC_PID,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   70

         00016ed0     012e  
    3215 00016ee0     5621          clr     a1
    3216 00016ef0     03e1          not     a1
    3217 00016f00     0d5f          calla   EXISTP
         00016f10 00000000! 
    3218 00016f30     ca0a          jrz     cwbfrets
    3219                    
    3220 00016f40     b60e          move    *a0(PWAKE),a14,L
         00016f50     00e0  
    3221 00016f60     0b6e          cmpi    arw_bwait,a14
         00016f70 ffffffff! 
    3222 00016f90     cb04          jrne    cwbfuh_oh
    3223                    
    3224 00016fa0     182e          movk    1,a14
    3225 00016fb0     b1c0          move    a14,*a0(PTIME)
         00016fc0     0030  
    3226 00016fd0     0300          jruc    cwbfrets
    3227                    
    3228 00016fe0           cwbfuh_oh
    3229                            .if DEBUG       
    3230                            LOCKUP  ;announce_rnd_winner ISN'T at arw_bwait!
    3231                            .endif
    3232 00016fe0     0960  cwbfrets        rets
    3233                    
    3234                    
    3235 00016ff0           cwbfbuckoff_tbl
    3236 00016ff0                   REFLONG hrt_buckoff_anim        ;Bret
    3237 00017010                   REFLONG rzr_buckoff_anim        ;Razor
    3238 00017030                   REFLONG und_buckoff_anim        ;Taker
    3239 00017050                   REFLONG yok_buckoff_anim        ;Yoko
    3240 00017070                   REFLONG shn_buckoff_anim        ;Shawn
    3241 00017090                   REFLONG bam_buckoff_anim        ;Bam Bam
    3242 000170b0                   REFLONG dnk_buckoff_anim        ;Doink
    3243 000170d0 00000000          .long   0
    3244 000170f0                   REFLONG lex_buckoff_anim        ;Lex
    3245                    
    3246                    
    3247 00017110           cwbfrun_speeds
    3248 00017110 00064000          .long   HRT_XRUN
    3249 00017130 00060000          .long   RZR_XRUN
    3250 00017150 00064000          .long   UND_XRUN
    3251 00017170 00058000          .long   YOK_XRUN
    3252 00017190 00064000          .long   SHN_XRUN
    3253 000171b0 00064000          .long   BAM_XRUN
    3254 000171d0 00064000          .long   DNK_XRUN
    3255 000171f0 00000000          .long   0
    3256 00017210 00060000          .long   LEX_XRUN
    3257                    
    3258                    
    3259 00017230            SUBRP  ani_end_anim
    3260 00017230     8004          .word   ANI_SETPLYRMODE,MODE_NORMAL
    3261 00017250     8002          .word   ANI_SETMODE,MODE_NORMAL
    3262 00017270     8049          .word   ANI_END 
    3263                    
    3264                    *****************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   71

    3265                    * opponent held overhead
    3266                    
    3267 00017280           mode_oppoverhead ;10
    3268                    
    3269 00017280     0960          rets
    3270                    
    3271                    *****************************************************************************
    3272                    *
    3273                    * CLIMBING UP OR DOWN THE TURNBUCKLE
    3274                    
    3275 00017290           mode_climbturnbkl       ;11
    3276                    
    3277 00017290     0960          rets
    3278                    
    3279                    
    3280                    *****************************************************************************
    3281                    
    3282 000172a0           mode_waitanim   ;12
    3283                    
    3284 000172a0     b5a0          move    *a13(ANIMODE),a0
         000172b0     0660  
    3285 000172c0     1fe0          btst    MODE_END_BIT,a0
    3286 000172d0     ca03          jrz     ggifnot_ended
    3287                    
    3288 000172e0     b7a0          move    *a13(CODE_ADDR),a0,L
         000172f0     0430  
    3289 00017300     0920          call    a0
    3290                    
    3291 00017310           ggifnot_ended
    3292 00017310     0960          rets
    3293                    
    3294                    
    3295                    *****************************************************************************
    3296                    
    3297 00017320           mode_grapple    ;13
    3298                    
    3299 00017320     0960          rets
    3300                    
    3301                    *****************************************************************************
    3302                    
    3303 00017330           mode_master     ;14
    3304                    
    3305 00017330     0d5f          calla   master_keep_attached    ;keep slave attached to me
         00017340 00000000! 
    3306                    
    3307 00017360     0960          rets
    3308                    
    3309                    *****************************************************************************
    3310                    
    3311 00017370           mode_slave      ;15
    3312 00017370     0960          rets
    3313                    
    3314                    
    3315                    
    3316 00017380            SUBR   bozo_check
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   72

    3317                    
    3318                    ;Bozo check
    3319 00017380     b5a0          move    *a13(SPUNCHB_COUNT),a0
         00017390     0820  
    3320 000173a0     b5a1          move    *a13(SKICKB_COUNT),a1
         000173b0     0840  
    3321 000173c0     b5a2          move    *a13(BLOCKB_COUNT),a2
         000173d0     0810  
    3322 000173e0     4001          add     a0,a1
    3323 000173f0     4022          add     a1,a2
    3324 00017400     0b42          cmpi    18,a2
         00017410     ffed  
    3325 00017420     c417          jrlt    jowpno_bozo
    3326                    ;Lots of super buttons and blocks have been hit!
    3327                    ;Reverse out
    3328                    ;Do reversal unless I have been immobilized!
    3329                    ;If not, set immobilize time for opponent and reverse
    3330                    
    3331 00017430     b5ae          move    *a13(IMMOBILIZE_TIME),a14
         00017440     0ae0  
    3332 00017450     cb14          jrnz    jowpno_bozo                             ;ignore
    3333                    
    3334                            ;target WHOHITME -- don't hit anyone else
    3335 00017460                   SMRTTGT a13,WHOHITME
    3336                    
    3337                            ;immobilize WHOHITME
    3338 00017500     b7a0          move    *a13(WHOHITME),a0,L
         00017510     04e0  
    3339 00017520     180e          movk    32,a14
    3340 00017530     b1c0          move    a14,*a0(IMMOBILIZE_TIME)
         00017540     0ae0  
    3341                    
    3342 00017550     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         00017560 00000000! 
    3343                            
    3344 00017580     0de0          setc
    3345 00017590     0960          rets
    3346                    
    3347 000175a0           jowpno_bozo
    3348 000175a0     0320          clrc
    3349 000175b0     0960          rets
    3350                    
    3351                    *****************************************************************************
    3352                    
    3353 000175c0           mode_headhold   ;16
    3354                    
    3355                    ;Bozo power move
    3356 000175c0     0d3f          callr   bozo_check
         000175d0     ffda  
    3357 000175e0     c929          jrnc    qpwbfail
    3358                    
    3359 000175f0                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    3360                    
    3361 00017790     09e0          movi    dnk_3_head_slam_anim,a0
         000177a0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   73

    3362 000177c0     05ae          move    @PCNT,a14
         000177d0 00000000! 
    3363 000177f0     1fee          btst    0,a14
    3364 00017800     ca03          jrz     qpwbtag
    3365 00017810     09e0          movi    dnk_3_pile_driver_anim,a0
         00017820 00000000! 
    3366 00017840     0d5f  qpwbtag calla   change_anim1a
         00017850 00000000! 
    3367                    
    3368 00017870     0960          rets
    3369                    
    3370 00017880           qpwbfail
    3371 00017880     b7a0          move    *a13(WHOIHIT),a0,L
         00017890     0500  
    3372 000178a0     b400          move    *a0(PLYRMODE),a0
         000178b0     05c0  
    3373 000178c0     0b40          cmpi    MODE_HEADHELD,a0
         000178d0     ffec  
    3374 000178e0     cb10          jrnz    qpwbexit
    3375                    
    3376                    ;       move    *a13(ATTACH_PROC),a10,L
    3377                    ;       jrz     qpwbexit
    3378                    
    3379 000178f0     b5a0          move    *a13(ANIMODE),a0
         00017900     0660  
    3380 00017910     1fa0          btst    MODE_UNINT_BIT,a0
    3381 00017920     cb0b          jrnz    qpwbno_interrupt
    3382                    
    3383 00017930     b5a0          move    *a13(BUT_VAL_DOWN),a0
         00017940     0ba0  
    3384 00017950     0b80          andi    011111b,a0
         00017960 ffffffe0  
    3385 00017980                   X32     a0
    3386 00017990     0b20          addi    qpwbaction_table,a0
         000179a0 00017bc0' 
    3387 000179c0     8600          move    *a0,a0,L
    3388 000179d0     0920          call    a0
    3389                    
    3390 000179e0           qpwbno_interrupt
    3391 000179e0     0960          rets
    3392                    
    3393 000179f0           qpwbexit
    3394 000179f0     b7ae          move    *a13(OBJ_ZPOS),a14,L
         00017a00     0140  
    3395 00017a10     0d0e          subi    [6,0],a14
         00017a20 fff9ffff  
    3396 00017a40     b3cd          move    a14,*a13(OBJ_ZPOS),L
         00017a50     0140  
    3397                    
    3398 00017a60     1941          movk    MOVE_DOWN_RIGHT,a1
    3399 00017a70     b5a0          move    *a13(OBJ_CONTROL),a0
         00017a80     0780  
    3400 00017a90     1f60          btst    B_FLIPH,a0
    3401 00017aa0     ca01          jrz     qpwbright
    3402 00017ab0     18c1          movk    MOVE_DOWN_LEFT,a1
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   74

    3403 00017ac0     b02d  qpwbright       move    a1,*a13(FACING_DIR)
         00017ad0     04c0  
    3404 00017ae0     b02d          move    a1,*a13(NEW_FACING_DIR)
         00017af0     04d0  
    3405                    
    3406 00017b00                   SETMODE NORMAL
    3407                    
    3408 00017bb0     0960          rets
    3409                    
    3410 00017bc0           qpwbaction_table
    3411 00017bc0 00017fc0'         .long   qpwbz,qpwbpunch,qpwbblock,qpwbblock                     ;0-3
    3412 00017c40 000184b0'         .long   qpwbsuper_punch,qpwbsuper_punch,qpwbblock,qpwbblock     ;4-7
    3413 00017cc0 00018760'         .long   qpwbkick,qpwbpunchkick,qpwbblock,qpwbblock              ;8-11
    3414 00017d40 000184b0'         .long   qpwbsuper_punch,qpwbpunchkick,qpwbblock,qpwbblock       ;12-15
    3415 00017dc0 000189a0'         .long   qpwbsuper_kick,qpwbsuper_kick,qpwbblock,qpwbblock       ;16-19
    3416 00017e40 00017fc0'         .long   qpwbgraboh,qpwbgraboh,qpwbblock,qpwbblock               ;20-23
    3417 00017ec0 000189a0'         .long   qpwbsuper_kick,qpwbpunchkick,qpwbblock,qpwbblock        ;24-27
    3418 00017f40 00017fc0'         .long   qpwbgraboh,qpwbgraboh,qpwbblock,qpwbblock               ;28-31
    3419                    
    3420                    
    3421                    ************
    3422 00017fc0           qpwbblock
    3423 00017fc0           qpwbgraboh
    3424 00017fc0           qpwbz           ;0
    3425 00017fc0     0960          rets
    3426                    
    3427                    ************
    3428                    
    3429 00017fd0           qpwbpunch               ;1
    3430 00017fd0     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         00017fe0 00000000! 
    3431                    ;If stick is toward opponent, then do quick punches
    3432 00018000     b5a0          move    *a13(STICK_VAL_CUR),a0
         00018010     0bc0  
    3433 00018020     b5a1          move    *a13(NEW_FACING_DIR),a1
         00018030     04d0  
    3434 00018040     0b81          andi    0ch,a1
         00018050 fffffff3  
    3435 00018070     4801          cmp     a0,a1
    3436 00018080     cb21          jrnz    qpwbtag2
    3437                    
    3438 00018090                   WRSND   W_DOINK,UPRCUT_T1,UPRCUT_T2
    3439 00018230     09e0          movi    dnk_uppercuts_to_head_anim,a0
         00018240 00000000! 
    3440 00018260     0d5f          calla   change_anim1a
         00018270 00000000! 
    3441 00018290     0960          rets
    3442                    
    3443 000182a0     09e0  qpwbtag2        movi    dnk_uppercut_to_head_anim,a0
         000182b0 00000000! 
    3444 000182d0     0d5f          calla   change_anim1a
         000182e0 00000000! 
    3445 00018300                   WRSND   W_DOINK,UPRCUT_T1,UPRCUT_T2
    3446 000184a0     0960          rets
    3447                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   75

    3448                    ************
    3449 000184b0           qpwbsuper_punch ;4
    3450                    
    3451 000184b0           do_pile
    3452                    ;This flag is only set if doink has done repeated uppercuts!
    3453 000184b0     b5a0          move    *a13(USR_VAR2),a0
         000184c0     0860  
    3454 000184d0     caae          jrz     qpwbz
    3455                    
    3456 000184e0     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         000184f0 00000000! 
    3457 00018510     b5a0          move    *a13(STICK_VAL_CUR),a0
         00018520     0bc0  
    3458 00018530     1fc0          btst    PLAYER_DOWN_BIT,a0
    3459 00018540     caa8          jrz     qpwbpunch
    3460                    
    3461 00018550                   WRSND   W_DOINK,UPRCUT_T1,UPRCUT_T2
    3462 000186f0     09e0          movi    dnk_3_pile_driver_anim,a0
         00018700 00000000! 
    3463 00018720     0d5f          calla   change_anim1a
         00018730 00000000! 
    3464 00018750     0960          rets
    3465                    
    3466 00018760           qpwbkick
    3467 00018760           qpwbpunchkick
    3468 00018760     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         00018770 00000000! 
    3469 00018790                   WRSND   W_DOINK,KICK_T1,KICK_T2
    3470                    
    3471 00018930     09e0          movi    dnk_3_knee_to_head_anim,a0
         00018940 00000000! 
    3472 00018960     0d5f          calla   change_anim1a
         00018970 00000000! 
    3473 00018990     0960          rets
    3474                    
    3475 000189a0           qpwbsuper_kick  ;16
    3476                    ;If stick is toward opponent, then do quick knees
    3477 000189a0     b5a0          move    *a13(STICK_VAL_CUR),a0
         000189b0     0bc0  
    3478 000189c0     b5a1          move    *a13(NEW_FACING_DIR),a1
         000189d0     04d0  
    3479 000189e0     0b81          andi    0ch,a1
         000189f0 fffffff3  
    3480 00018a10     4801          cmp     a0,a1
    3481 00018a20     cb00          jrnz    qpwbz
         00018a30     ff58  
    3482                    
    3483                    ;Quick knees
    3484 00018a40     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         00018a50 00000000! 
    3485 00018a70                   WRSND   W_DOINK,KICK_T1,KICK_T2
    3486 00018c10     09e0          movi    dnk_3_knees_to_head_anim,a0
         00018c20 00000000! 
    3487 00018c40     0d5f          calla   change_anim1a
         00018c50 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   76

    3488 00018c70     0960          rets
    3489                    
    3490                    
    3491                    *****************************************************************************
    3492 00018c80           mode_puppet2    ;17
    3493                    
    3494                            .if DEBUG
    3495                            LOCKUP          ;should never be in this mode anymore.
    3496                            .endif
    3497                    
    3498 00018c80     0960          rets
    3499                    
    3500                    *****************************************************************************
    3501                    
    3502 00018c90           mode_headheld   ;19
    3503 00018c90     b5a0          move    *a13(ANIMODE),a0
         00018ca0     0660  
    3504 00018cb0     1f40          btst    MODE_NOGRAVITY_BIT,a0
    3505 00018cc0     cb80          janz    mode_choking
         00018cd0 00000000! 
    3506                    
    3507                    ;Bozo reversal
    3508 00018cf0     0d3f          callr   bozo_check
         00018d00     fe67  
    3509 00018d10     c932          jrnc    xbjtfail
    3510                    
    3511 00018d20                   PUSH    a8
    3512 00018d30     4da8          move    a13,a8
    3513 00018d40     0d5f          CALLA   DO_REVERSAL
         00018d50 00000000! 
    3514 00018d70     0d5f          CALLA   DO_REVERSAL_MESS
         00018d80 00000000! 
    3515 00018da0                   PULL    a8
    3516                    
    3517 00018db0                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    3518                    
    3519 00018f50     09e0          movi    dnk_3_head_slam_anim,a0
         00018f60 00000000! 
    3520 00018f80     05ae          move    @PCNT,a14
         00018f90 00000000! 
    3521 00018fb0     1fee          btst    0,a14
    3522 00018fc0     ca03          jrz     xbjttag
    3523 00018fd0     09e0          movi    dnk_3_pile_driver_anim,a0
         00018fe0 00000000! 
    3524 00019000     0d5f  xbjttag calla   change_anim1a
         00019010 00000000! 
    3525                    
    3526 00019030     0960          rets
    3527                    
    3528 00019040           xbjtfail
    3529                    
    3530                    ;He may have let me go by hitting his block butn!
    3531 00019040     b7a0          move    *a13(ATTACH_PROC),a0,L
         00019050     03e0  
    3532 00019060     cb19          jrnz    xbjtno_luck
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   77

    3533                    
    3534                    ;Make sure this guy is on ground
    3535 00019070     b5a0          move    *a13(OBJ_YPOSINT),a0
         00019080     0130  
    3536 00019090     b5a1          move    *a13(GROUND_Y),a1
         000190a0     0570  
    3537 000190b0     4820          cmp     a1,a0                   ;a0-a1
    3538 000190c0     c713          jrgt    xbjtno_luck
    3539                    
    3540                    ;hit_gnd
    3541                    
    3542 000190d0                   WRSND   W_DOINK,PUSH_T2
    3543 000191a0     09e0          movi    dnk_3_head_held_stand_anim,a0
         000191b0 00000000! 
    3544 000191d0     0d5f          calla   change_anim1a
         000191e0 00000000! 
    3545                    
    3546 00019200           xbjtno_luck
    3547 00019200     0960          rets
    3548                    
    3549                    *****************************************************************************
    3550 00019210            SUBR   mode_puppet     ;20     (used by everyone)
    3551                    
    3552              006a  xongtimeout_val .equ    TSEC*2
    3553                    
    3554                            ;if we're attached, don't check anything.
    3555 00019210     b7a0          move    *a13(ATTACH_PROC),a0,L
         00019220     03e0  
    3556 00019230     ca04          jrz     xongcheck
    3557 00019240     b601          move    *a0(ATTACH_PROC),a1,L
         00019250     03e0  
    3558 00019260     482d          cmp     a1,a13
    3559 00019270     ca32          jreq    xongdone
    3560                    
    3561 00019280           xongcheck       ;figure out if we're newly in mode_puppet or if we've been
    3562                            ; here awhile.
    3563 00019280     b5ae          move    *a13(PUPPET_TIME),a14   ;last time we were in mode_puppet
         00019290     0c20  
    3564 000192a0     05a0          move    @PCNT,a0                ;this tick
         000192b0 00000000! 
    3565 000192d0     b00d          move    a0,*a13(PUPPET_TIME)    ;in either case, update PUPPET_TIME
         000192e0     0c20  
    3566                    
    3567 000192f0     45c0          sub     a14,a0
    3568 00019300     0b40          cmpi    1,a0
         00019310     fffe  
    3569 00019320     cb24          jrne    xongnew_arrival
    3570                    
    3571                            ;been here awhile
    3572 00019330     b5a0          move    *a13(PUPPET_TICKS),a0
         00019340     0c30  
    3573 00019350     1020          inc     a0
    3574 00019360     b00d          move    a0,*a13(PUPPET_TICKS)
         00019370     0c30  
    3575                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   78

    3576 00019380     0b40          cmpi    xongtimeout_val,a0
         00019390     ff95  
    3577 000193a0     c41f          jrlt    xongdone
    3578                    
    3579                            ;bark!  Been here too long.  glitch to a stand or something.
    3580                            .if DEBUG
    3581                            LOCKUP
    3582                            .endif
    3583 000193b0                   SETMODE NORMAL
    3584 00019460                   FACE24TBL xongstand_tbl
    3585 00019530     0d5f          calla   change_anim1a
         00019540 00000000! 
    3586 00019560     c003          jruc    xongdone
    3587                    
    3588 00019570           xongnew_arrival
    3589 00019570     182e          movk    1,a14
    3590 00019580     b1cd          move    a14,*a13(PUPPET_TICKS)
         00019590     0c30  
    3591                    
    3592 000195a0     0960  xongdone        rets
    3593                    
    3594 000195b0           xongstand_tbl
    3595 000195b0                   REFLONG hrt_stand2_anim,hrt_stand4_anim         ;0 Bret Hart
    3596 000195f0                   REFLONG rzr_stand2_anim,rzr_stand4_anim         ;1 Razor Ramon
    3597 00019630                   REFLONG und_stand2_anim,und_stand4_anim         ;2 Undertaker
    3598 00019670                   REFLONG yok_stand2_anim,yok_stand4_anim         ;3 Yokozuna
    3599 000196b0                   REFLONG shn_stand2_anim,shn_stand4_anim         ;4 Shawn Michaels
    3600 000196f0                   REFLONG bam_stand2_anim,bam_stand4_anim         ;5 Bam Bam
    3601 00019730                   REFLONG dnk_stand2_anim,dnk_stand4_anim         ;6 Doink
    3602 00019770 00000000          .long   0,0                                     ;7 spare
    3603 000197b0                   REFLONG lex_stand2_anim,lex_stand4_anim         ;8 Lex Luger
    3604                    
    3605                    *****************************************************************************
    3606 000197f0           mode_chokehold  ;24
    3607 000197f0     0960          rets
    3608                    
    3609                    *****************************************************************************
    3610                    *
    3611 00019800            SUBR   mode_inair2     ;21
    3612                    
    3613                    ;All wrestlers use this mode_inair2 code, and only for turnbuckle stuff.
    3614                    
    3615                    ;Read joystick for floating off from turnbuckle moves
    3616                    
    3617                    ;Perhaps each wrestler will have a different drift value
    3618          00058000  flxqZDRIFT2_VAL equ     58000h
    3619          00030000  flxqXDRIFT_VAL  equ     30000h
    3620                    
    3621 00019800     b5a0          move    *a13(STICK_VAL_CUR),a0
         00019810     0bc0  
    3622 00019820     5621          clr     a1
    3623                    
    3624 00019830     09e1          movi    -flxqZDRIFT2_VAL,a1
         00019840 fffa8000  
    3625 00019860     1fe0          btst    PLAYER_UP_BIT,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   79

    3626 00019870     cb06          jrnz    flxqsetvel
    3627                    
    3628 00019880     09e1          movi    flxqZDRIFT2_VAL,a1
         00019890 00058000  
    3629 000198b0     1fc0          btst    PLAYER_DOWN_BIT,a0
    3630 000198c0     cb01          jrnz    flxqsetvel
    3631                    
    3632 000198d0     5621          clr     a1
    3633 000198e0           flxqsetvel
    3634                    ;       move    *a13(OBJ_ZVEL),a14,L
    3635                    ;       add     a1,a14
    3636                    ;       move    a14,*a13(OBJ_ZVEL),L
    3637                    
    3638 000198e0     b7ae          move    *a13(OBJ_ZPOS),a14,L
         000198f0     0140  
    3639 00019900     402e          add     a1,a14
    3640 00019910     b3cd          move    a14,*a13(OBJ_ZPOS),L
         00019920     0140  
    3641                    
    3642                    
    3643 00019930     5621          clr     a1
    3644                    
    3645 00019940     09e1          movi    -flxqXDRIFT_VAL,a1
         00019950 fffd0000  
    3646 00019970     1fa0          btst    PLAYER_LEFT_BIT,a0
    3647 00019980     cb06          jrnz    flxqsetvel2
    3648                    
    3649 00019990     09e1          movi    flxqXDRIFT_VAL,a1
         000199a0 00030000  
    3650 000199c0     1f80          btst    PLAYER_RIGHT_BIT,a0
    3651 000199d0     cb01          jrnz    flxqsetvel2
    3652                    
    3653 000199e0     5621          clr     a1
    3654 000199f0           flxqsetvel2
    3655                    ;       move    *a13(OBJ_XVEL),a14,L
    3656                    ;       add     a1,a14
    3657                    ;       move    a14,*a13(OBJ_XVEL),L
    3658                    
    3659 000199f0     b7ae          move    *a13(OBJ_XPOS),a14,L
         00019a00     0100  
    3660 00019a10     402e          add     a1,a14
    3661 00019a20     b3cd          move    a14,*a13(OBJ_XPOS),L
         00019a30     0100  
    3662                    
    3663 00019a40     0960          rets
    3664                    
    3665                    *****************************************************************************
    3666                    
    3667                    
    3668                    ;yfbcVEL        equ     30000h          ;38000h ;30000h
    3669                    ;yfbcDVEL       equ     21f0eh          ;27978h ;21f0eh
    3670                    ;yfbcVEL        equ     38000h          ;38000h ;30000h
    3671                    ;yfbcDVEL       equ     30000h          ;27978h ;21f0eh
    3672          0003a000  yfbcVEL equ     3a000h          ;38000h ;30000h
    3673          00031000  yfbcDVEL        equ     31000h          ;27978h ;21f0eh
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   80

    3674                    
    3675                    
    3676 00019a50            SUBR dnk_velocity_table
    3677                    
    3678                    ;               X,      Z
    3679                    
    3680 00019a50 00000000          .long   0,      -yfbcVEL        ;0 UP
    3681                    
    3682 00019a90 00031000          .long   yfbcDVEL,       -yfbcDVEL       ;1 UP-RIGHT
    3683                    
    3684 00019ad0 0003a000          .long   yfbcVEL,        0       ;2 RIGHT
    3685                    
    3686 00019b10 00031000          .long   yfbcDVEL,       yfbcDVEL        ;3 DOWN-RIGHT
    3687                    
    3688 00019b50 00000000          .long   0,      yfbcVEL ;4 DOWN
    3689                    
    3690 00019b90 fffcf000          .long   -yfbcDVEL,      yfbcDVEL        ;5 DOWN-LEFT
    3691                    
    3692 00019bd0 fffc6000          .long   -yfbcVEL,       0       ;6 LEFT
    3693                    
    3694 00019c10 fffcf000          .long   -yfbcDVEL,      -yfbcDVEL       ;7 UP-LEFT
    3695                    
    3696                    
    3697                    *****************************************************************************
    3698                    
    3699 00019c50            SUBR dnk_rotate_anims_table
    3700                    ; old = up right
    3701 00019c50 00000000!         .long   dnk_stand2_anim         ;new = up right
    3702 00019c70 00000000!         .long   dnk_2_to_4_turn_anim    ;    = down right
    3703 00019c90 00000000!         .long   dnk_2_to_6_turn_anim    ;    = down left ***
    3704 00019cb0 00000000!         .long   dnk_2_to_8_turn_anim    ;    = up left
    3705                    
    3706                    ; old = down right
    3707 00019cd0 00000000!         .long   dnk_4_to_2_turn_anim    ;new = up right
    3708 00019cf0 00000000!         .long   dnk_stand4_anim         ;    = down right
    3709 00019d10 00000000!         .long   dnk_4_to_6_turn_anim    ;    = down left
    3710 00019d30 00000000!         .long   dnk_4_to_8_turn_anim    ;    = up left ***
    3711                    
    3712                    ; old = down left
    3713 00019d50 00000000!         .long   dnk_6_to_2_turn_anim    ;new = up right ***
    3714 00019d70 00000000!         .long   dnk_6_to_4_turn_anim    ;    = down right
    3715 00019d90 00000000!         .long   dnk_stand6_anim         ;    = down left
    3716 00019db0 00000000!         .long   dnk_6_to_8_turn_anim    ;    = up left
    3717                    
    3718                    ; old = up left
    3719 00019dd0 00000000!         .long   dnk_8_to_2_turn_anim    ;new = up right
    3720 00019df0 00000000!         .long   dnk_8_to_4_turn_anim    ;    = down right ***
    3721 00019e10 00000000!         .long   dnk_8_to_6_turn_anim    ;    = down left
    3722 00019e30 00000000!         .long   dnk_stand8_anim         ;    = up left
    3723                    
    3724                    
    3725 00019e50            SUBR dnk_leg_anims_table
    3726                    ;  MOVE
    3727                    ;(jatm1 - UP)                           FACING
    3728 00019e50 00000000!         .long   dnk_walk1_f2_anim       ;1 (UP)
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   81

    3729 00019e70 00000000!         .long   dnk_walk1_f2_anim       ;2 (UP_RIGHT)
    3730 00019e90 00000000!         .long   dnk_walk1_f4_anim       ;3 (RIGHT)
    3731 00019eb0 00000000!         .long   dnk_walk1_f4_anim       ;4 (DOWN_RIGHT)
    3732 00019ed0 00000000!         .long   dnk_walk1_f4_anim       ;5 (DOWN)
    3733 00019ef0 00000000!         .long   dnk_walk1_f4_anim       ;6 (DOWN_LEFT)
    3734 00019f10 00000000!         .long   dnk_walk1_f2_anim       ;7 (LEFT)
    3735 00019f30 00000000!         .long   dnk_walk1_f2_anim       ;8 (UP-LEFT)
    3736                    
    3737                    ;(jatm2 - UP-RIGHT)
    3738 00019f50 00000000!         .long   dnk_walk2_f2_anim       ;1 (UP)
    3739 00019f70 00000000!         .long   dnk_walk2_f2_anim       ;2 (UP_RIGHT)
    3740 00019f90 00000000!         .long   dnk_walk2_f2_anim       ;3 (RIGHT)
    3741 00019fb0 00000000!         .long   dnk_walk2_f4_anim       ;4 (DOWN_RIGHT)
    3742 00019fd0 00000000!         .long   dnk_walk8_f4_anim       ;5 (DOWN)
    3743 00019ff0 00000000!         .long   dnk_walk8_f4_anim       ;6 (DOWN_LEFT)
    3744 0001a010 00000000!         .long   dnk_walk4_f2_anim       ;7 (LEFT)
    3745 0001a030 00000000!         .long   dnk_walk4_f2_anim       ;8 (UP-LEFT)
    3746                    
    3747                    ;(jatm3 - RIGHT)
    3748 0001a050 00000000!         .long   dnk_walk2_f2_anim       ;1 (UP)
    3749 0001a070 00000000!         .long   dnk_walk2_f2_anim       ;2 (UP_RIGHT)
    3750 0001a090 00000000!         .long   dnk_walk2_f2_anim       ;3 (RIGHT)
    3751 0001a0b0 00000000!         .long   dnk_walk4_f4_anim       ;4 (DOWN_RIGHT)
    3752 0001a0d0 00000000!         .long   dnk_walk4_f4_anim       ;5 (DOWN)
    3753 0001a0f0 00000000!         .long   dnk_walk8_f4_anim       ;6 (DOWN_LEFT)
    3754 0001a110 00000000!         .long   dnk_walk6_f2_anim       ;7 (LEFT)
    3755 0001a130 00000000!         .long   dnk_walk6_f2_anim       ;8 (UP-LEFT)
    3756                    
    3757                    
    3758                    ;(jatm4 - DOWN-RIGHT)
    3759 0001a150 00000000!         .long   dnk_walk2_f2_anim       ;1 (UP)
    3760 0001a170 00000000!         .long   dnk_walk8_f2_anim       ;2 (UP_RIGHT)
    3761 0001a190 00000000!         .long   dnk_walk4_f4_anim       ;3 (RIGHT)
    3762 0001a1b0 00000000!         .long   dnk_walk4_f4_anim       ;4 (DOWN_RIGHT)
    3763 0001a1d0 00000000!         .long   dnk_walk2_f4_anim       ;5 (DOWN)
    3764 0001a1f0 00000000!         .long   dnk_walk6_f4_anim       ;6 (DOWN_LEFT)
    3765 0001a210 00000000!         .long   dnk_walk2_f2_anim       ;7 (LEFT)
    3766 0001a230 00000000!         .long   dnk_walk6_f2_anim       ;8 (UP-LEFT)
    3767                    
    3768                    ;(jatm5 - DOWN)
    3769 0001a250 00000000!         .long   dnk_walk5_f2_anim       ;1 (UP)
    3770 0001a270 00000000!         .long   dnk_walk5_f2_anim       ;2 (UP_RIGHT)
    3771 0001a290 00000000!         .long   dnk_walk5_f4_anim       ;3 (RIGHT)
    3772 0001a2b0 00000000!         .long   dnk_walk5_f4_anim       ;4 (DOWN_RIGHT)
    3773 0001a2d0 00000000!         .long   dnk_walk5_f4_anim       ;5 (DOWN)
    3774 0001a2f0 00000000!         .long   dnk_walk5_f4_anim       ;6 (DOWN_LEFT)
    3775 0001a310 00000000!         .long   dnk_walk5_f2_anim       ;7 (LEFT)
    3776 0001a330 00000000!         .long   dnk_walk5_f2_anim       ;8 (UP-LEFT)
    3777                    
    3778                    ;(jatm6 - DOWN-LEFT)
    3779 0001a350 00000000!         .long   dnk_walk2_f2_anim       ;1 (UP)
    3780 0001a370 00000000!         .long   dnk_walk6_f2_anim       ;2 (UP_RIGHT)
    3781 0001a390 00000000!         .long   dnk_walk2_f2_anim       ;3 (RIGHT)
    3782 0001a3b0 00000000!         .long   dnk_walk6_f4_anim       ;4 (DOWN_RIGHT)
    3783 0001a3d0 00000000!         .long   dnk_walk2_f4_anim       ;5 (DOWN)
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   82

    3784 0001a3f0 00000000!         .long   dnk_walk4_f4_anim       ;6 (DOWN_LEFT)
    3785 0001a410 00000000!         .long   dnk_walk2_f2_anim       ;7 (LEFT)
    3786 0001a430 00000000!         .long   dnk_walk8_f2_anim       ;8 (UP-LEFT)
    3787                    
    3788                    ;(jatm7 - LEFT)
    3789 0001a450 00000000!         .long   dnk_walk2_f2_anim       ;1 (UP)
    3790 0001a470 00000000!         .long   dnk_walk6_f2_anim       ;2 (UP_RIGHT)
    3791 0001a490 00000000!         .long   dnk_walk6_f2_anim       ;3 (RIGHT)
    3792 0001a4b0 00000000!         .long   dnk_walk8_f4_anim       ;4 (DOWN_RIGHT)
    3793 0001a4d0 00000000!         .long   dnk_walk4_f4_anim       ;5 (DOWN)
    3794 0001a4f0 00000000!         .long   dnk_walk4_f4_anim       ;6 (DOWN_LEFT)
    3795 0001a510 00000000!         .long   dnk_walk2_f2_anim       ;7 (LEFT)
    3796 0001a530 00000000!         .long   dnk_walk2_f2_anim       ;8 (UP-LEFT)
    3797                    
    3798                    ;(jatm8 - UP-LEFT)
    3799 0001a550 00000000!         .long   dnk_walk2_f2_anim       ;1 (UP)
    3800 0001a570 00000000!         .long   dnk_walk4_f2_anim       ;2 (UP_RIGHT)
    3801 0001a590 00000000!         .long   dnk_walk6_f2_anim       ;3 (RIGHT)
    3802 0001a5b0 00000000!         .long   dnk_walk8_f4_anim       ;4 (DOWN_RIGHT)
    3803 0001a5d0 00000000!         .long   dnk_walk6_f4_anim       ;5 (DOWN)
    3804 0001a5f0 00000000!         .long   dnk_walk2_f4_anim       ;6 (DOWN_LEFT)
    3805 0001a610 00000000!         .long   dnk_walk2_f2_anim       ;7 (LEFT)
    3806 0001a630 00000000!         .long   dnk_walk2_f2_anim       ;8 (UP-LEFT)
    3807                    
    3808                    
    3809 0001a650            SUBR dnk_torso_anims_table
    3810                    ; old = up right
    3811 0001a650 00000000!         .long   dnk_torso2_anim         ;new = up right
    3812 0001a670 00000000!         .long   dnk_2_to_4_turn2_anim   ;    = down right
    3813 0001a690 00000000!         .long   dnk_2_to_6_turn2_anim   ;    = down left ***
    3814 0001a6b0 00000000!         .long   dnk_2_to_8_turn2_anim   ;    = up left
    3815                    
    3816                    ; old = down right
    3817 0001a6d0 00000000!         .long   dnk_4_to_2_turn2_anim   ;new = up right
    3818 0001a6f0 00000000!         .long   dnk_torso4_anim         ;    = down right
    3819 0001a710 00000000!         .long   dnk_4_to_6_turn2_anim   ;    = down left
    3820 0001a730 00000000!         .long   dnk_4_to_8_turn2_anim   ;    = up left ***
    3821                    
    3822                    ; old = down left
    3823 0001a750 00000000!         .long   dnk_6_to_2_turn2_anim   ;new = up right ***
    3824 0001a770 00000000!         .long   dnk_6_to_4_turn2_anim   ;    = down right
    3825 0001a790 00000000!         .long   dnk_torso6_anim         ;    = down left
    3826 0001a7b0 00000000!         .long   dnk_6_to_8_turn2_anim   ;    = up left
    3827                    
    3828                    ; old = up left
    3829 0001a7d0 00000000!         .long   dnk_8_to_2_turn2_anim   ;new = up right
    3830 0001a7f0 00000000!         .long   dnk_8_to_4_turn2_anim   ;    = down right ***
    3831 0001a810 00000000!         .long   dnk_8_to_6_turn2_anim   ;    = down left
    3832 0001a830 00000000!         .long   dnk_torso8_anim         ;    = up left
    3833                    
    3834                    
    3835                    ;       STRUCTPD
    3836                    ;       WORD            jatmCHARGE_TIME ;UDW
    3837                    ;       WORD            jatmTIMEOUT     ;UDW
    3838                    ;
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   83

    3839                    ;
    3840                    ; SUBRP dnk_hammer_mv
    3841                    ;
    3842                    ;;in:
    3843                    ;;a8 = wrestler process address
    3844                    ;
    3845                    ;;Hammer pound opponent
    3846                    ;;Charge away for 30 ticks
    3847                    ;;Toward & Super punch
    3848                    ;
    3849                    ;jatmstart_over
    3850                    ;       ;charge on stick away
    3851                    ;       clr     a14
    3852                    ;       move    a14,*a13(jatmCHARGE_TIME),W
    3853                    ;jatmloop1
    3854                    ;       SLEEPK  1
    3855                    ;
    3856                    ;;Disallow these type of moves if out of control
    3857                    ;       move    *a8(GETUP_TIME),a0
    3858                    ;       jrnz    jatmloop1
    3859                    ;
    3860                    ;       move    *a13(jatmCHARGE_TIME),a14,W
    3861                    ;       inc     a14
    3862                    ;       move    a14,*a13(jatmCHARGE_TIME),W
    3863                    ;
    3864                    ;       move    *a8(STICK_VAL_CUR),a0
    3865                    ;
    3866                    ;       ;arbitrarily define TOWARD to be RIGHT.  So if the opponent is to
    3867                    ;       ; our left, flip the L|R direction bits...
    3868                    ;
    3869                    ;       ;...however, if the stick isn't pointed left or right, don't do
    3870                    ;       ;anything.
    3871                    ;       move    a0,a14
    3872                    ;       andi    MOVE_LEFT|MOVE_RIGHT,a14
    3873                    ;       jrz     jatmno_flip
    3874                    ;
    3875                    ;       move    *a8(NEW_FACING_DIR),a14
    3876                    ;       btst    MOVE_LEFT_BIT,a14
    3877                    ;       jrz     jatmno_flip
    3878                    ;       xori    MOVE_LEFT|MOVE_RIGHT,a0
    3879                    ;jatmno_flip
    3880                    ;
    3881                    ;       ;if we're still holding away, jump back to jatmloop1
    3882                    ;       btst    MOVE_LEFT_BIT,a0
    3883                    ;       jrnz    jatmloop1
    3884                    ;
    3885                    ;       ;no longer holding away...
    3886                    ;       move    *a13(jatmCHARGE_TIME),a14
    3887                    ;
    3888                    ;;x seconds held stick is away
    3889                    ;
    3890                    ;       cmpi    15,a14
    3891                    ;       jrlt    jatmstart_over
    3892                    ;
    3893                    ;       ;okay, they released after holding away for 2 seconds.  Give them
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   84

    3894                    ;       ;half a second to push forward + super_punch
    3895                    ;
    3896                    ;;      movi    TSEC/2,a14
    3897                    ;       movk    20,a14
    3898                    ;       move    a14,*a13(jatmTIMEOUT)
    3899                    ;jatmloop2
    3900                    ;       SLEEPK  1
    3901                    ;
    3902                    ;       move    *a8(BUT_VAL_DOWN),a0
    3903                    ;       jrnz    jatmpress
    3904                    ;
    3905                    ;       move    *a13(jatmTIMEOUT),a14
    3906                    ;       dec     a14
    3907                    ;       jrz     jatmstart_over
    3908                    ;       move    a14,*a13(jatmTIMEOUT)
    3909                    ;       jruc    jatmloop2
    3910                    ;
    3911                    ;jatmpress
    3912                    ;       ;we have a button press.  Is it super punch?
    3913                    ;       btst    PLAYER_PUNCH_BIT,a0
    3914                    ;       jrz     jatmstart_over  ;wrong button.  No good.
    3915                    ;       
    3916                    ;       ;Check for a towards on the stick.
    3917                    ;       move    *a8(STICK_VAL_CUR),a0
    3918                    ;       jrz     jatmstart_over  ;no stick at all.  No good.
    3919                    ;
    3920                    ;       move    *a8(NEW_FACING_DIR),a14
    3921                    ;       btst    MOVE_LEFT_BIT,a14
    3922                    ;       jrz     jatmno_flip2
    3923                    ;       xori    MOVE_LEFT|MOVE_RIGHT,a0
    3924                    ;jatmno_flip2
    3925                    ;       btst    MOVE_RIGHT_BIT,a0
    3926                    ;       jrz     jatmstart_over  ;pooched it
    3927                    ;
    3928                    ;;success!  Check for the UNINT bit, then queue it up.
    3929                    ;       move    *a8(ANIMODE),a14
    3930                    ;       btst    MODE_UNINT_BIT,a14
    3931                    ;       jrnz    jatmstart_over
    3932                    ;
    3933                    ;       movi    dnk_4_hammer_anim,a14
    3934                    ;
    3935                    ;       move    *a13(PLYRMODE),a0
    3936                    ;       cmpi    MODE_ONTURNBKL,a0
    3937                    ;       jrz     jatmstart_over
    3938                    ;
    3939                    ;;      move    *a13(PLYRMODE),a0
    3940                    ;;      cmpi    MODE_ONTURNBKL,a0
    3941                    ;;      jrnz    jatmdo
    3942                    ;;      movi    dnk_4_bhammer_anim,a14
    3943                    ;;jatmdo
    3944                    ;       move    a14,*a8(SPECIAL_MOVE_ADDR),L
    3945                    ;       jruc    jatmstart_over
    3946                    ;
    3947                    ;;      .endif
    3948                    ;
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   85

    3949                    ;*
    3950                    ;
    3951                    ; SUBRP dnk_earslap_mv
    3952                    ;
    3953                    ;       STRUCTPD
    3954                    ;       WORD            jatmCHARGE_TIME ;UDW
    3955                    ;       WORD            jatmTIMEOUT     ;UDW
    3956                    ;
    3957                    ;
    3958                    ;;in:
    3959                    ;;a8 = wrestler process address
    3960                    ;
    3961                    ;;Ear slap opponent
    3962                    ;;Charge away for 30 ticks
    3963                    ;;Toward & Super punch
    3964                    ;
    3965                    ;jatmstart_over
    3966                    ;       ;charge on stick away
    3967                    ;       clr     a14
    3968                    ;       move    a14,*a13(jatmCHARGE_TIME),W
    3969                    ;jatmloop1
    3970                    ;       SLEEPK  1
    3971                    ;
    3972                    ;;Disallow these type of moves if out of control
    3973                    ;       move    *a8(GETUP_TIME),a0
    3974                    ;       jrnz    jatmloop1
    3975                    ;       calla   get_opp_plyrmode
    3976                    ;       cmpi    MODE_ONGROUND,a0
    3977                    ;       jrz     jatmloop1
    3978                    ;       cmpi    MODE_DEAD,a0
    3979                    ;       jrz     jatmloop1
    3980                    ;
    3981                    ;       move    *a13(jatmCHARGE_TIME),a14,W
    3982                    ;       inc     a14
    3983                    ;       move    a14,*a13(jatmCHARGE_TIME),W
    3984                    ;
    3985                    ;       move    *a8(STICK_VAL_CUR),a0
    3986                    ;
    3987                    ;       ;arbitrarily define TOWARD to be RIGHT.  So if the opponent is to
    3988                    ;       ; our left, flip the L|R direction bits...
    3989                    ;
    3990                    ;       ;...however, if the stick isn't pointed left or right, don't do
    3991                    ;       ;anything.
    3992                    ;       move    a0,a14
    3993                    ;       andi    MOVE_LEFT|MOVE_RIGHT,a14
    3994                    ;       jrz     jatmno_flip
    3995                    ;
    3996                    ;       move    *a8(NEW_FACING_DIR),a14
    3997                    ;       btst    MOVE_LEFT_BIT,a14
    3998                    ;       jrz     jatmno_flip
    3999                    ;       xori    MOVE_LEFT|MOVE_RIGHT,a0
    4000                    ;jatmno_flip
    4001                    ;
    4002                    ;       ;if we're still holding away, jump back to jatmloop1
    4003                    ;       btst    MOVE_LEFT_BIT,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   86

    4004                    ;       jrnz    jatmloop1
    4005                    ;
    4006                    ;       ;no longer holding away...
    4007                    ;       move    *a13(jatmCHARGE_TIME),a14
    4008                    ;
    4009                    ;;x seconds held stick is away
    4010                    ;
    4011                    ;       cmpi    20,a14
    4012                    ;       jrlt    jatmstart_over
    4013                    ;
    4014                    ;       ;okay, they released after holding away for 2 seconds.  Give them
    4015                    ;       ;half a second to push forward + super_punch
    4016                    ;
    4017                    ;;      movi    TSEC/2,a14
    4018                    ;       movk    15,a14
    4019                    ;       move    a14,*a13(jatmTIMEOUT)
    4020                    ;jatmloop2
    4021                    ;       SLEEPK  1
    4022                    ;
    4023                    ;       move    *a8(BUT_VAL_DOWN),a0
    4024                    ;       jrnz    jatmpress
    4025                    ;
    4026                    ;       move    *a13(jatmTIMEOUT),a14
    4027                    ;       dec     a14
    4028                    ;       jrz     jatmstart_over
    4029                    ;       move    a14,*a13(jatmTIMEOUT)
    4030                    ;       jruc    jatmloop2
    4031                    ;
    4032                    ;jatmpress
    4033                    ;       ;we have a button press.  Is it super punch?
    4034                    ;       btst    PLAYER_SPUNCH_BIT,a0
    4035                    ;;      jrz     jatmstart_over  ;wrong button.  No good.
    4036                    ;       jrz     jatmloop2
    4037                    ;       btst    PLAYER_PUNCH_BIT,a0
    4038                    ;       jrz     jatmloop2
    4039                    ;       
    4040                    ;       ;Check for a towards on the stick.
    4041                    ;       move    *a8(STICK_VAL_CUR),a0
    4042                    ;;      jrz     jatmstart_over  ;no stick at all.  No good.
    4043                    ;       jrz     jatmloop2
    4044                    ;
    4045                    ;       move    *a8(NEW_FACING_DIR),a14
    4046                    ;       btst    MOVE_LEFT_BIT,a14
    4047                    ;       jrz     jatmno_flip2
    4048                    ;       xori    MOVE_LEFT|MOVE_RIGHT,a0
    4049                    ;jatmno_flip2
    4050                    ;       btst    MOVE_RIGHT_BIT,a0
    4051                    ;;      jrz     jatmstart_over  ;pooched it
    4052                    ;       jrz     jatmloop2
    4053                    ;
    4054                    ;;success!  Check for the UNINT bit, then queue it up.
    4055                    ;       move    *a8(ANIMODE),a14
    4056                    ;       btst    MODE_UNINT_BIT,a14
    4057                    ;       jrnz    jatmstart_over
    4058                    ;
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:31 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   87

    4059                    ;       movi    dnk_4_earslap_anim,a14
    4060                    ;
    4061                    ;       move    *a13(PLYRMODE),a0
    4062                    ;       cmpi    MODE_ONTURNBKL,a0
    4063                    ;       jrz     jatmstart_over
    4064                    ;
    4065                    ;       move    a14,*a8(SPECIAL_MOVE_ADDR),L
    4066                    ;       jruc    jatmstart_over
    4067                    
    4068                    
    4069                    ******************************************************************************
    4070                    
    4071                            .end

 No Errors,  No Warnings
