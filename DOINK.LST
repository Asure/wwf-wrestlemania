TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    **************************************************************
       2                    * START
       3                    * Software:             Jamie Rivett
       4                    * Initiated:            9/3/93
       5                    *
       6                    * COPYRIGHT (C) 1992 WILLIAMS ELECTRONICS GAMES, INC.
       7                    *
       8                    **************************************************************
       9                    
      10                            .file   "doink.asm"
      12                            .width  132
      13                            .option b,d,l,t
      14                            .mnolist
      15                    
      16                    
      17                            .include        "macros.h"
      18                            .include        "jjxm.h"
      19                            .include        "mproc.equ"             ;Mproc equates
      20                            .include        "display.equ"           ;Display proc equates
      21                            .include        "gsp.equ"               ;Gsp asm equates
      22                            .include        "sys.equ"
      23                            .include        "game.equ"
      24                            .include        "plyr.equ"
      25                            .include        "anim.equ"
      26                            .include        "audit.equ"
      27                            .include        "sound.h"
      28                            .include        "ring.equ"
      29                            .include        "lifebar.h"
      30                            .include        "damage.equ"
      31                    
      32                            ;temp! - 314
      33                            .include        "tmpdebug.h"
      34                    
      35                    
      36                    ******************************************************************************
      37                    * EXTERNAL REFERENCES
      38                    
      39                    
      40                            .ref    BLOCK_WOOSH,get_opp_process,calc_line_x,can_pin
      41                            .ref    PSTATUS2,is_final_match,FINAL_PTR
      42                            .ref    DO_REVERSAL,DO_REVERSAL_MESS,FIND_AND_KILL_ENDLESS
      43                            .ref    ADD_IF_SILENT,JUMP_ROPES,CLIMB_ROPES
      44                            .ref    get_powerk_dtime
      45                    
      46                            .ref    set_getup_time,set_raisearm_bit
      47                            .ref    get_punch_dtime
      48                            .ref    get_rope_x,ck_teammate_pin,raisearm_check
      49                            .ref    inc_getup_time
      50                    
      51                            .ref    change_anim1,change_anim1a
      52                            .ref    change_anim2,change_anim2a
      53                            .ref    process_ptrs
      54                            .ref    keep_attached
      55                            .ref    get_opp_plyrmode
      56                            .ref    wres_collis_off
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    2

      57                            .ref    convert_facing
      58                            .ref    check_secret_moves
      59                            .ref    change_walk_anim
      60                            .ref    set_rotate_anim
      61                            .ref    execute_walk
      62                            .ref    bounce_off_ropes
      63                            .ref    climb_turnbuckle
      64                            .ref    ADD_VOICE,round_award
      65                            .ref    HALT,clear_combo_meter
      66                            .ref    mode_choking
      67                            .ref    master_keep_attached
      68                            .ref    PCNT,init_reduce_bog
      69                            .ref    RNDPER,is_8_on_1
      70                            .ref    current_round,change_wrestler
      71                            .ref    p1rounds,p2rounds,hitonground_tbl,arw_bwait
      72                    
      73                            ;from DCSSOUND.ASM
      74                            .ref    triple_sound
      75                    
      76                            ;from WRESTLE.ASM
      77                            .ref    drone_change_back
      78                            .ref    read_switches
      79                            .ref    BONUS_MESS
      80                            .ref    blocking_off
      81                            .ref    hyper_speed_on
      82                            .ref    in_finish_move,royal_rumble
      83                            .ref    p1rounds,p2rounds
      84                            .if NUM_DOINK_FINISHES
      85                            .ref    dnk_finish1_move
      86                            .if NUM_DOINK_FINISHES > 1
      87                            .ref    dnk_finish2_move
      88                            .endif
      89                            .endif
      90                            .ref    in_finish_move,finish_completed
      91                    
      92                    ;animation sequence
      93                    
      94                            .ref    dnk_3_pile_driver_anim
      95                            .ref    start_run_anim
      96                    
      97                            .ref    dnk_4_earslap_anim
      98                            .ref    dnk_2_earslap_anim
      99                            .ref    dnk_4_slap_anim
     100                            .ref    dnk_2_slap_anim
     101                    ;       .ref    dnk_4_slap2_anim
     102                    ;       .ref    dnk_2_slap2_anim
     103                            .ref    dnk_head_hit_dizzy_anim
     104                            .ref    dnk_knockdwn_anim
     105                            .ref    dnk_4_hammer_anim
     106                    
     107                            .ref    wres_slave_anim
     108                            .ref    dnk_zip_anim
     109                    
     110                            .ref    dnk_2_raise_arm_anim,dnk_4_raise_arm_anim
     111                            .ref    dnk_stand2_anim,dnk_stand8_anim
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    3

     112                            .ref    dnk_stand4_anim,dnk_stand6_anim
     113                            .ref    dnk_torso2_anim,dnk_torso8_anim
     114                            .ref    dnk_torso4_anim,dnk_torso6_anim
     115                    
     116                            .ref    dnk_2_to_4_turn_anim,dnk_8_to_6_turn_anim       ;stand
     117                            .ref    dnk_4_to_2_turn_anim,dnk_6_to_8_turn_anim
     118                            .ref    dnk_4_to_6_turn_anim,dnk_6_to_4_turn_anim
     119                            .ref    dnk_2_to_8_turn_anim,dnk_8_to_2_turn_anim
     120                            .ref    dnk_4_to_8_turn_anim,dnk_6_to_2_turn_anim
     121                            .ref    dnk_2_to_6_turn_anim,dnk_8_to_4_turn_anim
     122                    
     123                            .ref    dnk_2_to_4_turn2_anim,dnk_8_to_6_turn2_anim     ;torso
     124                            .ref    dnk_4_to_2_turn2_anim,dnk_6_to_8_turn2_anim
     125                            .ref    dnk_4_to_6_turn2_anim,dnk_6_to_4_turn2_anim
     126                            .ref    dnk_2_to_8_turn2_anim,dnk_8_to_2_turn2_anim
     127                            .ref    dnk_4_to_8_turn2_anim,dnk_6_to_2_turn2_anim
     128                            .ref    dnk_2_to_6_turn2_anim,dnk_8_to_4_turn2_anim
     129                    
     130                            .ref    dnk_walk1_f2_anim,dnk_walk2_f2_anim,dnk_walk4_f2_anim
     131                            .ref    dnk_walk5_f2_anim,dnk_walk6_f2_anim,dnk_walk8_f2_anim
     132                    
     133                            .ref    dnk_walk1_f4_anim,dnk_walk2_f4_anim,dnk_walk4_f4_anim
     134                            .ref    dnk_walk5_f4_anim,dnk_walk6_f4_anim,dnk_walk8_f4_anim
     135                    
     136                            .ref    dnk_2_punch_anim,dnk_4_punch_anim
     137                            .ref    dnk_2_buzz_anim,dnk_4_buzz_anim
     138                            .ref    dnk_2_buzz2_anim,dnk_4_buzz2_anim
     139                            .ref    dnk_2_butt_anim,dnk_4_butt_anim
     140                            .REF    dnk_combo_uppercut_to_head_anim
     141                            .ref    dnk_4_combo_kick_anim
     142                            .REF    CHECK_COMBO_GO
     143                    
     144                            .ref    dnk_2_kick_anim,dnk_4_kick_anim
     145                            .ref    dnk_2_spin_kick_anim,dnk_4_spin_kick_anim
     146                            .ref    dnk_2_knee_anim,dnk_4_knee_anim
     147                    
     148                            .ref    dnk_2_box_anim,dnk_4_box_anim
     149                    
     150                            .ref    dnk_run_anim,dnk_run2_anim
     151                    
     152                            .ref    dnk_4_blbowdrop_anim
     153                    
     154                            .ref    dnk_2_hair_pickup_anim,dnk_4_hair_pickup_anim
     155                    
     156                            .ref    dnk_2_lbowdrop_anim,dnk_4_lbowdrop_anim
     157                            .ref    dnk_2_grabfling_anim
     158                            .ref    dnk_4_grabfling_anim
     159                    
     160                            .ref    dnk_heldoh_anim
     161                    
     162                            .ref    dnk_diveofftb_anim
     163                    
     164                            .ref    dnk_fly_cline_anim
     165                            .ref    dnk_flying_kick_anim
     166                    
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    4

     167                            .ref    dnk_4_head_hit_anim,dnk_head_hit3_anim
     168                            .ref    dnk_2_head_hit_anim,dnk_head_hit2_anim
     169                            .ref    dnk_fall_back_anim
     170                            .ref    dnk_4_losebal_dizzy_anim
     171                    
     172                            .ref    dnk_hitonground_anim
     173                            .ref    dnk_4_stomp_anim,dnk_2_stomp_anim
     174                            .ref    dnk_4_bstomp_anim
     175                    
     176                            .ref    dnk_climb_up_anim,dnk_climb_down_anim
     177                            .ref    dnk_4_block_anim
     178                            .ref    dnk_2_hiptoss_anim,dnk_4_hiptoss_anim
     179                            .ref    dnk_2_hiptoss2_anim,dnk_4_hiptoss2_anim
     180                            .ref    dnk_4_push_anim
     181                            .ref    dnk_4_bigboot_anim,dnk_2_bigboot_anim
     182                            .ref    dnk_4_losebal_anim
     183                            .ref    dnk_dizzy_anim
     184                            .ref    dnk_2_pin_anim
     185                            .ref    dnk_4_pin_anim
     186                    
     187                            .ref    dnk_belly_anim
     188                            .ref    ck_ignore               ;Ignore button press?
     189                    
     190                    ;       .ref    dnk_pkup_chair_anim
     191                    
     192                            .ref    dnk_3_knee_to_head_anim
     193                            .ref    dnk_3_knees_to_head_anim
     194                            .ref    dnk_uppercut_to_head_anim
     195                            .ref    dnk_uppercuts_to_head_anim
     196                            .ref    dnk_get_buzz_anim
     197                    
     198                            .ref    dnk_3_head_hold2_anim
     199                            .ref    dnk_3_head_hold_anim
     200                    
     201                            .ref    dnk_2_butts_anim,dnk_4_butts_anim
     202                            .ref    dnk_3_head_held_stand_anim
     203                            .ref    dnk_3_head_slam_anim
     204                            .ref    dnk_4_knee_fall_anim
     205                    
     206                    ******************************************************************************
     207                    * SYMBOLS DEFINED IN THIS FILE
     208                    
     209                    ******************************************************************************
     210                    * EQUATES FOR THIS FILE
     211                    
     212                    *****************************************************************************
     213                    
     214 00000000           doink_secret_moves
     215                    
     216                    ;These secret moves are triggered only after a move list seq has ended!  You
     217                    ;can't hold on the last button press and have it trigger!
     218                    
     219                    ;Button held down moves need to be first entry
     220 00000000 00000280'         .long   inwhcharge_buzz
     221 00000020 00001c60'         .long   inwhgrab_fling
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    5

     222 00000040 00002390'         .long   inwhhip_toss
     223 00000060 00001a90'         .long   inwhgrab_fling2
     224 00000080 00001ae0'         .long   inwhhip_toss2
     225 000000a0 000010d0'         .long   inwhearslap
     226 000000c0 00000e50'         .long   inwhhammer
     227 000000e0 000014f0'         .long   inwhneck_grab
     228 00000100 00000940'         .long   inwhboxing_pnch
     229                    ;       .long   inwhcharge_flying_kick
     230 00000120 00000000          .long   0
     231                    
     232                    
     233                    ******************************************************************************
     234                    *
     235                    * SPECIAL MOVE PROCESSES - Secret moves
     236                    *
     237                    ;a8=process of wrestler
     238                    
     239 00000140            SUBR   dnk_smove_table
     240 00000140 000084e0'         .long   dnk_charge_flykick
     241 00000160 00002890'         .long   dnk_hdhold_slam
     242 00000180 00003f30'         .long   dnk_hdhold_combo1
     243 000001a0 000033e0'         .long   dnk_hdhold_pile
     244 000001c0 00004670'         .long   dnk_hdhold_combo2
     245 000001e0 00008b70'         .long   dnk_hdhold_buzz
     246                    ;       .long   dnk_hdhold_anti_combo
     247 00000200 00004db0'         .long   dnk_grab_toss_air
     248 00000220 00005b70'         .long   std_walk_fast
     249 00000240 000072d0'         .long   std_taunt
     250                            .if NUM_DOINK_FINISHES
     251                            .long   dnk_finish_move1
     252                            .endif
     253                            .if NUM_DOINK_FINISHES > 1
     254                            .long   dnk_finish_move2
     255                            .endif
     256 00000260 00000000          .long   0
     257                    
     258                    
     259                    *******************************************************************************
     260 00000280           inwhcharge_buzz
     261 00000280     b5a0          move    *a13(BUT_VAL_UP),a0
         00000290     0bb0  
     262 000002a0     1fe0          btst    PLAYER_PUNCH_BIT,a0
     263 000002b0     ca0c          jrz     inwhno_punch
     264                    
     265                    ;FIX!!  Give some jumping velocity
     266                    
     267                    ;       move    *a13(PLYRMODE),a0
     268                    ;       cmpi    MODE_ONTURNBKL,a0
     269                    ;       jrz     inwhno_punch
     270                    
     271 000002c0     b5a0          move    *a13(PLYRNUM),a0
         000002d0     0580  
     272 000002e0     0d5f          calla   get_punch_dtime
         000002f0 00000000! 
     273 00000310     0b40          cmpi    100,a0                  ;> min?
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    6

         00000320     ff9b  
     274 00000330     c404          jrlt    inwhno_punch
     275                    
     276 00000340     0d3f          callr   inwhscrt_buzz
         00000350     0004  
     277 00000360     0de0          setc
     278 00000370     0960          rets
     279                    
     280 00000380           inwhno_punch
     281 00000380     0320          clrc
     282 00000390     0960          rets
     283                    
     284                    
     285 000003a0           inwhscrt_buzz
     286                    
     287 000003a0     b5a0          move    *a13(PLYRMODE),a0
         000003b0     05c0  
     288 000003c0     0b40          cmpi    MODE_HEADHELD,a0
         000003d0     ffec  
     289 000003e0     ca00          jrz     inwhout
         000003f0     0244  
     290 00000400     0b40          cmpi    MODE_HEADHOLD,a0
         00000410     ffef  
     291 00000420     ca00          jrz     inwhout
         00000430     0240  
     292                    
     293 00000440     b5a0          move    *a13(ANIMODE),a0
         00000450     0660  
     294 00000460     1fa0          btst    MODE_UNINT_BIT,a0
     295 00000470     cb00          jrnz    inwhout
         00000480     023b  
     296                    
     297                    ;Don't do it when he is on ground
     298 00000490     0d5f          calla   get_opp_plyrmode
         000004a0 00000000! 
     299                    ;       cmpi    MODE_ONGROUND,a0
     300                    ;       jrz     inwhout
     301 000004c0     0b40          cmpi    MODE_DEAD,a0
         000004d0     fff6  
     302 000004e0     ca00          jrz     inwhout
         000004f0     0234  
     303                    
     304 00000500     b5a0          move    *a13(PLYRMODE),a0
         00000510     05c0  
     305 00000520     0b40          cmpi    MODE_RUNNING,a0
         00000530     fffe  
     306 00000540     ca09          jrz     inwhleapbuzz
     307                    
     308                    ;If stick is toward opponent, then do sliding/leaping buzzer
     309 00000550     b5a0          move    *a13(STICK_VAL_CUR),a0
         00000560     0bc0  
     310 00000570     b5a1          move    *a13(NEW_FACING_DIR),a1
         00000580     04d0  
     311 00000590     0b81          andi    0ch,a1
         000005a0 fffffff3  
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    7

     312 000005c0     4801          cmp     a0,a1
     313 000005d0     cb1b          jrnz    inwhnorm
     314                    
     315 000005e0           inwhleapbuzz
     316                    ;missing noise for a reason !
     317 000005e0                   WRSND   W_DOINK,HDBUTT_T1
     318 000006b0                   FACE24  dnk,buzz2_anim
     319 00000750     0d5f          calla   change_anim1a
         00000760 00000000! 
     320 00000780     0960          rets
     321 00000790           inwhnorm
     322                    ;missing noise for a reason !
     323 00000790                   WRSND   W_DOINK,HDBUTT_T1
     324 00000860                   FACE24  dnk,buzz_anim
     325 00000900     0d5f          calla   change_anim1a
         00000910 00000000! 
     326 00000930     0960          rets
     327                    
     328                    *******************************************************************************
     329                    ;               BITS                    MASK
     330 00000940           inwhboxing_pnch
     331 00000940     0010          .word   B_PUNCH,                J_ALL
     332 00000960     0010          .word   B_PUNCH,                J_ALL
     333 00000980     0010          .word   B_PUNCH,                J_ALL
     334 000009a0     0010          .word   B_PUNCH,                J_ALL
     335 000009c0     0010          .word   B_PUNCH,                J_ALL
     336 000009e0     0010          .word   B_PUNCH,                J_ALL
     337 00000a00     0010          .word   B_PUNCH,                J_ALL
     338 00000a20     803c          .word   8000h | 60              ;max
     339 00000a30 00000a50'         .long   scrt_glove
     340                    
     341 00000a50           scrt_glove
     342 00000a50     b5a0          move    *a13(ANIMODE),a0
         00000a60     0660  
     343 00000a70     1fa0          btst    MODE_UNINT_BIT,a0
     344 00000a80     cb00          jrnz    inwhout
         00000a90     01da  
     345                    
     346                    ;Don't do it when he is on ground
     347 00000aa0     0d5f          calla   get_opp_plyrmode
         00000ab0 00000000! 
     348 00000ad0     0b40          cmpi    MODE_ONGROUND,a0
         00000ae0     fffb  
     349 00000af0     ca00          jrz     inwhout
         00000b00     01d3  
     350 00000b10     0b40          cmpi    MODE_DEAD,a0
         00000b20     fff6  
     351 00000b30     ca00          jrz     inwhout
         00000b40     01cf  
     352 00000b50     0b40          cmpi    MODE_HEADHELD,a0
         00000b60     ffec  
     353 00000b70     ca00          jrz     inwhout
         00000b80     01cb  
     354                    
     355 00000b90     b5a0          MOVE    *A13(COMBO_COUNT),A0
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    8

         00000ba0     0af0  
     356 00000bb0     cb00          JRNZ    inwhout
         00000bc0     01c7  
     357                    
     358 00000bd0                   FACE24  dnk,box_anim
     359 00000c70     0d5f          calla   change_anim1a
         00000c80 00000000! 
     360 00000ca0                   WRSND   W_DOINK,SPUNCH_T1,SPUNCH_T2
     361                    
     362 00000e40     0960          rets
     363                    
     364                    *******************************************************************************
     365 00000e50           inwhhammer
     366 00000e50     0100          .word   B_SKICK,                        J_ALL
     367 00000e70     0008          .word   J_TOWARD,               J_REAL_LR
     368 00000e90     0008          .word   J_TOWARD,               J_REAL_LR
     369 00000eb0     8020          .word   8000h | 32              ;max
     370 00000ec0 00000ee0'         .long   scrt_hammer
     371                    
     372 00000ee0           scrt_hammer
     373 00000ee0     b5a0          move    *a13(ANIMODE),a0
         00000ef0     0660  
     374 00000f00     1fa0          btst    MODE_UNINT_BIT,a0
     375 00000f10     cb00          jrnz    inwhout
         00000f20     0191  
     376                    
     377 00000f30     b5a0          move    *a13(PLYRMODE),a0
         00000f40     05c0  
     378 00000f50     0b40          cmpi    MODE_ONTURNBKL,a0
         00000f60     fff9  
     379 00000f70     ca00          jrz     inwhout
         00000f80     018b  
     380                    
     381 00000f90     09e0          movi    dnk_4_hammer_anim,a0
         00000fa0 00000000! 
     382 00000fc0     0d5f          calla   change_anim1a
         00000fd0 00000000! 
     383                    
     384                    ;missing noise for a reason !
     385 00000ff0                   WRSND   W_DOINK,HDBUTT_T2
     386                    
     387 000010c0     0960          rets
     388                    
     389                    *******************************************************************************
     390                    
     391 000010d0           inwhearslap
     392 000010d0     0010          .word   B_PUNCH,                J_ALL
     393 000010f0     0008          .word   J_TOWARD,               J_REAL_LR
     394 00001110     000a          .word   J_DOWN_TOWARD,          J_REAL_LR
     395 00001130     0002          .word   J_DOWN,                 J_REAL_LR
     396 00001150     8032          .word   8000h | 50              ;max
     397 00001160 00001180'         .long   inwhscrt_earslap
     398                    
     399 00001180           inwhscrt_earslap
     400 00001180     b5a0          move    *a13(ANIMODE),a0
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    9

         00001190     0660  
     401 000011a0     1fa0          btst    MODE_UNINT_BIT,a0
     402 000011b0     cb00          jrnz    inwhout
         000011c0     0167  
     403                    
     404 000011d0     b5a0          move    *a13(PLYRMODE),a0
         000011e0     05c0  
     405 000011f0     0b40          cmpi    MODE_ONTURNBKL,a0
         00001200     fff9  
     406 00001210     ca00          jrz     inwhout
         00001220     0161  
     407                    
     408                    ;Don't do it when he is dead or held
     409 00001230     0d5f          calla   get_opp_plyrmode
         00001240 00000000! 
     410                    ;       cmpi    MODE_ONGROUND,a0
     411                    ;       jrz     inwhout
     412 00001260     0b40          cmpi    MODE_DEAD,a0
         00001270     fff6  
     413 00001280     ca00          jrz     inwhout
         00001290     015a  
     414 000012a0     0b40          cmpi    MODE_HEADHELD,a0
         000012b0     ffec  
     415 000012c0     ca00          jrz     inwhout
         000012d0     0156  
     416                    
     417 000012e0     09e0          movi    dnk_4_earslap_anim,a0
         000012f0 00000000! 
     418 00001310     0d5f          calla   change_anim1a
         00001320 00000000! 
     419                    
     420 00001340                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
     421                    
     422 000014e0     0960          rets
     423                    
     424                    *******************************************************************************
     425                    
     426 000014f0           inwhneck_grab
     427 000014f0     0040          .word   B_SPUNCH,               J_ALL
     428 00001510     0008          .word   J_TOWARD,               J_REAL_LR
     429 00001530     0008          .word   J_TOWARD,               J_REAL_LR
     430 00001550     8020          .word   8000h | 32              ;max
     431 00001560 00001580'         .long   inwhscrt_neck
     432                    
     433 00001580           inwhscrt_neck
     434 00001580     b5a0          move    *a13(ANIMODE),a0
         00001590     0660  
     435 000015a0     1fa0          btst    MODE_UNINT_BIT,a0
     436 000015b0     cb00          jrnz    inwhout
         000015c0     0127  
     437                    
     438                    ;Don't do it when he is on ground
     439 000015d0     0d5f          calla   get_opp_plyrmode
         000015e0 00000000! 
     440 00001600     0b40          cmpi    MODE_ONGROUND,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   10

         00001610     fffb  
     441 00001620     ca00          jrz     inwhout
         00001630     0120  
     442 00001640     0b40          cmpi    MODE_DEAD,a0
         00001650     fff6  
     443 00001660     ca00          jrz     inwhout
         00001670     011c  
     444 00001680     0b40          cmpi    MODE_HEADHELD,a0
         00001690     ffec  
     445 000016a0     ca00          jrz     inwhout
         000016b0     0118  
     446                    
     447 000016c0     b7ae          move    *a13(LAST_HEADHOLD),a14,L
         000016d0     0cd0  
     448 000016e0     07a0          move    @PCNT,a0,L
         000016f0 00000000! 
     449 00001710     45c0          sub     a14,a0
     450 00001720     0b40          cmpi    2*60,a0
         00001730     ff87  
     451 00001740     c507          jrge    inwhok2
     452                    
     453                    ;This head grab is too close (in terms of time) to most recent grab
     454                            .ref    dnk_3_fake_hold_anim
     455 00001750     09e0          movi    dnk_3_fake_hold_anim,a0
         00001760 00000000! 
     456 00001780     0d5f          calla   change_anim1a
         00001790 00000000! 
     457 000017b0     0960          rets
     458                    
     459 000017c0           inwhok2
     460 000017c0                   WRSND   W_DOINK,GRABFLING_T1,PUNCH_T2
     461                    
     462 00001960     b5a1          move    *a13(CLOSEST_XDIST),a1
         00001970     0370  
     463 00001980     0b41          cmpi    90,a1
         00001990     ffa5  
     464 000019a0     c707          jrgt    inwhstd_grab
     465                    
     466 000019b0     09e0          movi    dnk_3_head_hold2_anim,a0
         000019c0 00000000! 
     467 000019e0     0d5f          calla   change_anim1a
         000019f0 00000000! 
     468 00001a10     0960          rets
     469                    
     470 00001a20           inwhstd_grab
     471 00001a20     09e0          movi    dnk_3_head_hold_anim,a0
         00001a30 00000000! 
     472 00001a50     0d5f          calla   change_anim1a
         00001a60 00000000! 
     473 00001a80     0960          rets
     474                    
     475                    *******************************************************************************
     476                    
     477 00001a90           inwhgrab_fling2
     478 00001a90     0044          .word   B_SPUNCH | J_AWAY,      J_REAL_LR | J_UP | J_DOWN
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   11

     479 00001ab0     800a          .word   8000h | 10              ;max
     480 00001ac0 00001b30'         .long   inwhscrt_grabfling2
     481                    
     482 00001ae0           inwhhip_toss2
     483 00001ae0     0014          .word   B_PUNCH | J_AWAY,       J_REAL_LR | J_UP | J_DOWN
     484 00001b00     800a          .word   8000h | 10              ;max
     485 00001b10 00001b30'         .long   inwhscrt_grabfling2
     486                    
     487 00001b30           inwhscrt_grabfling2
     488 00001b30     b5a0          move    *a13(ANIMODE),a0
         00001b40     0660  
     489 00001b50     1fa0          btst    MODE_UNINT_BIT,a0
     490 00001b60     cb00          jrnz    inwhout
         00001b70     00cc  
     491                    
     492                    ;If opponent is running, do a hip toss
     493 00001b80     0d5f          calla   get_opp_plyrmode
         00001b90 00000000! 
     494 00001bb0     0b40          cmpi    MODE_BOUNCING,a0
         00001bc0     fffa  
     495 00001bd0     ca1f          jrz     inwhyes
     496 00001be0     0b40          cmpi    MODE_RUNNING,a0
         00001bf0     fffe  
     497 00001c00     ca1c          jrz     inwhyes
     498 00001c10     0b40          cmpi    MODE_HEADHELD,a0
         00001c20     ffec  
     499 00001c30     ca00          jrz     inwhck2
         00001c40     00c0  
     500 00001c50     0960          rets
     501                    
     502                    *******************************************************************************
     503                    
     504 00001c60           inwhgrab_fling
     505                    ;       .word   B_SPUNCH | J_AWAY,      J_REAL_LR | J_UP | J_DOWN
     506                    ;       .word   8000h | 10              ;max
     507                    ;       .long   inwhscrt_grabfling
     508                    
     509 00001c60     0040          .word   B_SPUNCH,               J_ALL
     510 00001c80     0004          .word   J_AWAY,         J_REAL_LR
     511 00001ca0     0004          .word   J_AWAY,         J_REAL_LR
     512 00001cc0     8020          .word   8000h | 32              ;max
     513 00001cd0 00001cf0'         .long   inwhscrt_grabfling
     514                    
     515 00001cf0           inwhscrt_grabfling
     516                    
     517                    ;Make this miss, rotate to missed opponent,
     518                    ;and stay rotated to flung opponent, also make
     519                    ;this work from both angles!
     520                    
     521 00001cf0     b5a0          move    *a13(ANIMODE),a0
         00001d00     0660  
     522 00001d10     1fa0          btst    MODE_UNINT_BIT,a0
     523 00001d20     cb00          jrnz    inwhout
         00001d30     00b0  
     524                    
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   12

     525                    ;If opponent is running, do a hip toss
     526 00001d40     0d5f          calla   get_opp_plyrmode
         00001d50 00000000! 
     527 00001d70     0b40          cmpi    MODE_BOUNCING,a0
         00001d80     fffa  
     528 00001d90     ca03          jrz     inwhyes
     529 00001da0     0b40          cmpi    MODE_RUNNING,a0
         00001db0     fffe  
     530 00001dc0     cb28          jrnz    inwhnope
     531 00001dd0           inwhyes
     532 00001dd0                   FACE24  dnk,hiptoss_anim
     533 00001e70     0d5f          calla   change_anim1a
         00001e80 00000000! 
     534                    
     535 00001ea0                   WRSND   W_DOINK,HIPTOSS_T1,PUNCH_T2
     536 00002040     0960          rets
     537                    
     538 00002050           inwhnope
     539                    ;Don't fling when he is on ground
     540 00002050     0d5f          calla   get_opp_plyrmode
         00002060 00000000! 
     541 00002080     0b40          cmpi    MODE_HEADHELD,a0
         00002090     ffec  
     542 000020a0     ca79          jrz     inwhout
     543 000020b0     0b40          cmpi    MODE_ONGROUND,a0
         000020c0     fffb  
     544 000020d0     ca76          jrz     inwhout
     545 000020e0     0b40          cmpi    MODE_DEAD,a0
         000020f0     fff6  
     546 00002100     ca73          jrz     inwhout
     547                    
     548                    ;       move    *a13(LAST_FLING_ATTEMPT),a14,L
     549                    ;       move    @PCNT,a0,L
     550                    ;       sub     a14,a0
     551                    ;       cmpi    3*60,a0
     552                    ;       jrge    inwhok2a
     553                    ;
     554                    ;       FACE24  dnk,slap_anim
     555                    ;       calla   change_anim1a
     556                    ;
     557                    ;       WRSND   W_DOINK,SPUNCH_T1,SPUNCH_T2
     558                    ;       rets
     559                    ;
     560                    ;inwhok2a
     561                    ;       move    @PCNT,a14,L                     ;use 32-bit PCNT!
     562                    ;       move    a14,*a13(LAST_FLING_ATTEMPT),L
     563                    
     564 00002110                   FACE24  dnk,grabfling_anim
     565 000021b0     0d5f          calla   change_anim1a
         000021c0 00000000! 
     566                    
     567 000021e0                   WRSND   W_DOINK,GRABFLING_T1,PUNCH_T2
     568 00002380     0960          rets
     569                    
     570                    *******************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   13

     571                    
     572 00002390           inwhhip_toss
     573                    ;       .word   B_PUNCH | J_AWAY,       J_REAL_LR | J_UP | J_DOWN
     574                    ;       .word   8000h | 10              ;max
     575                    ;       .long   inwhscrt_hiptoss
     576                    
     577 00002390     0010          .word   B_PUNCH,                J_ALL
     578 000023b0     0004          .word   J_AWAY,         J_REAL_LR
     579 000023d0     0004          .word   J_AWAY,         J_REAL_LR
     580 000023f0     8020          .word   8000h | 32              ;max
     581 00002400 00002420'         .long   inwhscrt_hiptoss
     582                    
     583 00002420           inwhscrt_hiptoss
     584 00002420     b5a0          move    *a13(ANIMODE),a0
         00002430     0660  
     585 00002440     1fa0          btst    MODE_UNINT_BIT,a0
     586 00002450     cb3e          jrnz    inwhout
     587                    
     588                    ;Don't do it when he is on ground
     589 00002460     0d5f          calla   get_opp_plyrmode
         00002470 00000000! 
     590 00002490     0b40          cmpi    MODE_ONGROUND,a0
         000024a0     fffb  
     591 000024b0     ca38          jrz     inwhout
     592                    ;       cmpi    MODE_BLOCK,a0
     593                    ;       jrz     inwhout
     594 000024c0     0b40          cmpi    MODE_DEAD,a0
         000024d0     fff6  
     595 000024e0     ca35          jrz     inwhout
     596 000024f0     0b40          cmpi    MODE_HEADHELD,a0
         00002500     ffec  
     597 00002510     ca33          jrz     inwhck2
     598 00002520     0b40          cmpi    MODE_INAIR,a0
         00002530     fffd  
     599 00002540     ca08          jrz     inwhdoit
     600 00002550     0b40          cmpi    MODE_INAIR2,a0
         00002560     ffea  
     601 00002570     ca05          jrz     inwhdoit
     602                    
     603 00002580     b5a0          move    *a13(CLOSEST_DIST),a0
         00002590     0360  
     604 000025a0     0b40          cmpi    70h,a0
         000025b0     ff8f  
     605 000025c0     c727          jrgt    inwhout
     606                    
     607 000025d0           inwhdoit
     608 000025d0                   FACE24  dnk,hiptoss_anim
     609 00002670     0d5f          calla   change_anim1a
         00002680 00000000! 
     610                    
     611 000026a0                   WRSND   W_DOINK,HIPTOSS_T1,PUNCH_T2
     612                    
     613 00002840     0960  inwhout rets
     614                    
     615 00002850           inwhck2
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   14

     616 00002850     b5a0          move    *a13(USR_VAR2),a0
         00002860     0860  
     617 00002870     cbd5          jrnz    inwhdoit
     618 00002880     0960          rets    
     619                    
     620                            .if NUM_DOINK_FINISHES
     621                    ******************************************************************************
     622                     SUBRP  dnk_finish_move1
     623                    
     624                    hmpiTIMEOUT     .equ    TSEC
     625                    
     626                    hmpiend_wait
     627                            SLEEP           TSEC/4
     628                            move            @p1rounds,a0                    ; Get player 1 rounds
     629                            move            @p2rounds,a1                    ; Get player 2 rounds
     630                            or              a1,a0                           ; Put em together
     631                            cmpi            2,a0                            ; Anybody got 2?
     632                            jrlt            hmpiend_wait                    ; br = no
     633                    
     634                    hmpireset
     635                            clr             a11
     636                            move            a11,@in_finish_move
     637                            SLEEPK          1
     638                            WAITSWITCH_DWN  J_UP,0,hmpireset
     639                            movi            hmpiTIMEOUT,a11
     640                            move            a11,@in_finish_move
     641                            WAITSWITCH_DWN  J_DOWN,0,hmpireset
     642                            WAITSWITCH_DWN  J_TOWARD,J_DOWN|J_UP,hmpireset
     643                            WAITSWITCH_DWN  J_TOWARD,J_DOWN|J_UP,hmpireset
     644                            WAITSWITCH_DWN  B_PUNCH,J_ALL,hmpireset
     645                    
     646                            movi            dnk_finish1_move,a0
     647                            move            a0,*a8(SPECIAL_MOVE_ADDR),L
     648                            DIE
     649                            .endif
     650                            
     651                    
     652                            .if NUM_DOINK_FINISHES > 1
     653                    ******************************************************************************
     654                     SUBRP  dnk_finish_move2
     655                    
     656                    qtdjTIMEOUT     .equ    TSEC
     657                    
     658                    qtdjend_wait
     659                            SLEEP           TSEC/4
     660                            move            @p1rounds,a0                    ; Get player 1 rounds
     661                            move            @p2rounds,a1                    ; Get player 2 rounds
     662                            or              a1,a0                           ; Put em together
     663                            cmpi            2,a0                            ; Anybody got 2?
     664                            jrlt            qtdjend_wait                    ; br = no
     665                    
     666                    qtdjreset
     667                            clr             a11
     668                            move            a11,@in_finish_move
     669                            SLEEPK          1
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   15

     670                            WAITSWITCH_DWN  J_UP,0,qtdjreset
     671                            movi            qtdjTIMEOUT,a11
     672                            move            a11,@in_finish_move
     673                            WAITSWITCH_DWN  J_UP,0,qtdjreset
     674                            WAITSWITCH_DWN  J_RIGHT,J_UP,qtdjreset
     675                            WAITSWITCH_DWN  J_RIGHT,J_UP,qtdjreset
     676                            WAITSWITCH_DWN  B_SPUNCH,J_ALL,qtdjreset
     677                    
     678                            movi            dnk_finish2_move,a0
     679                            move            a0,*a8(SPECIAL_MOVE_ADDR),L
     680                            DIE
     681                            .endif
     682                    
     683                    
     684                    *******************************************************************************
     685 00002890           dnk_hdhold_slam
     686                    
     687              003c  sgykTIMEOUT     .equ    60
     688                    
     689 00002890           sgyklp0
     690 00002890                   SLEEPK  1
     691 000028d0           sgyklp
     692 000028d0     b500          move    *a8(PLYRMODE),a0
         000028e0     05c0  
     693 000028f0     0b40          cmpi    MODE_HEADHOLD,a0
         00002900     ffef  
     694 00002910     ca03          jrz     sgykcont
     695 00002920     0b40          cmpi    MODE_HEADHELD,a0
         00002930     ffec  
     696 00002940     cbf4          jrnz    sgyklp0
     697                    
     698 00002950           sgykcont
     699 00002950     576b          clr     a11
     700                    
     701                    ;       WAITSWITCH_DWN  J_UP,0,sgyklp
     702                    
     703 00002960                   WAITSWITCH_DWN  J_DOWN,0,sgyklp
     704                    
     705 00002ac0     09cb          movi    sgykTIMEOUT,a11
         00002ad0     003c  
     706                    
     707 00002ae0                   WAITSWITCH_DWN  J_DOWN,0,sgyklp
     708 00002c40                   WAITSWITCH_DWN  B_SKICK,J_ALL,sgyklp
     709 00002da0           sgykcontz
     710 00002da0     b500          move    *a8(PLYRMODE),a0
         00002db0     05c0  
     711 00002dc0     0b40          cmpi    MODE_HEADHOLD,a0
         00002dd0     ffef  
     712 00002de0     ca1c          jrz     sgykslam
     713 00002df0     0b40          cmpi    MODE_HEADHELD,a0
         00002e00     ffec  
     714 00002e10     cba7          jrnz    sgyklp0
     715 00002e20     b50e          move    *a8(I_WILL_DIE),A14
         00002e30     0b30  
     716 00002e40     cba4          jrnz    sgyklp0
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   16

     717                    
     718                    ;Do reversal unless I have been immobilized!
     719                    ;If not, set immobilize time for opponent and reverse
     720                    
     721 00002e50     b50e          move    *a8(IMMOBILIZE_TIME),a14
         00002e60     0ae0  
     722 00002e70     cba1          jrnz    sgyklp0                         ;ignore
     723                    
     724 00002e80     0d5f          CALLA   DO_REVERSAL
         00002e90 00000000! 
     725 00002eb0     0d5f          CALLA   DO_REVERSAL_MESS
         00002ec0 00000000! 
     726                    
     727                            ;target WHOHITME -- don't hit anyone else
     728 00002ee0                   SMRTTGT a8,WHOHITME
     729                    
     730                            ;immobilize WHOHITME
     731 00002f80     b700          move    *a8(WHOHITME),a0,L
         00002f90     04e0  
     732 00002fa0     c018          jruc    sgykis_reversal
     733                    
     734 00002fb0           sgykslam
     735 00002fb0     b50e          move    *a8(IMMOBILIZE_TIME),a14
         00002fc0     0ae0  
     736 00002fd0     cb8b          jrnz    sgyklp0                         ;ignore
     737                    
     738 00002fe0     182a          movk    1,a10
     739 00002ff0                   CREATE  MESSAGE_PID,BONUS_MESS
     740                    
     741                            ;target WHOIHIT -- don't hit anyone else
     742 00003070                   SMRTTGT a8,WHOIHIT
     743                    
     744                            ;immobilize WHOIHIT
     745 00003110     b700          move    *a8(WHOIHIT),a0,L
         00003120     0500  
     746                    
     747 00003130           sgykis_reversal
     748 00003130     19ee          movk    15,a14
     749 00003140     b1c0          move    a14,*a0(IMMOBILIZE_TIME)
         00003150     0ae0  
     750                    
     751 00003160     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         00003170 00000000! 
     752 00003190                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
     753                    
     754 00003330     09ee          movi    dnk_3_head_slam_anim,a14
         00003340 00000000! 
     755 00003360     b3c8          move    a14,*a8(SPECIAL_MOVE_ADDR),L
         00003370     0930  
     756                    
     757 00003380                   SLEEPK  20
     758                    
     759 000033c0     c000          jruc    sgyklp
         000033d0     ff4f  
     760                    
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   17

     761                    *****************************************************************************
     762 000033e0           dnk_hdhold_pile
     763                    
     764              003c  ewhpTIMEOUT     .equ    60
     765                    
     766 000033e0           ewhplp0
     767 000033e0                   SLEEPK  1
     768 00003420           ewhplp
     769 00003420     b500          move    *a8(PLYRMODE),a0
         00003430     05c0  
     770 00003440     0b40          cmpi    MODE_HEADHOLD,a0
         00003450     ffef  
     771 00003460     ca03          jrz     ewhpcont
     772 00003470     0b40          cmpi    MODE_HEADHELD,a0
         00003480     ffec  
     773 00003490     cbf4          jrnz    ewhplp0
     774                    
     775 000034a0           ewhpcont
     776 000034a0     576b          clr     a11
     777                    
     778                    ;       WAITSWITCH_DWN  J_AWAY,0,ewhplp
     779 000034b0                   WAITSWITCH_DWN  J_TOWARD,0,ewhplp
     780                    
     781 00003610     09cb          movi    ewhpTIMEOUT,a11
         00003620     003c  
     782                    
     783 00003630                   WAITSWITCH_DWN  J_TOWARD,0,ewhplp
     784 00003790                   WAITSWITCH_DWN  B_SPUNCH,J_ALL,ewhplp
     785 000038f0           ewhpcontz       
     786 000038f0     b500          move    *a8(PLYRMODE),a0
         00003900     05c0  
     787 00003910     0b40          cmpi    MODE_HEADHOLD,a0
         00003920     ffef  
     788 00003930     ca1c          jrz     ewhpslam
     789 00003940     0b40          cmpi    MODE_HEADHELD,a0
         00003950     ffec  
     790 00003960     cba7          jrnz    ewhplp0
     791 00003970     b50e          move    *a8(I_WILL_DIE),A14
         00003980     0b30  
     792 00003990     cba4          jrnz    ewhplp0
     793                    
     794 000039a0     b50e          move    *a8(IMMOBILIZE_TIME),a14
         000039b0     0ae0  
     795 000039c0     cba1          jrnz    ewhplp0                         ;ignore
     796                    
     797 000039d0     0d5f          CALLA   DO_REVERSAL
         000039e0 00000000! 
     798 00003a00     0d5f          CALLA   DO_REVERSAL_MESS
         00003a10 00000000! 
     799                    
     800                            ;target WHOHITME -- don't hit anyone else
     801 00003a30                   SMRTTGT a8,WHOHITME
     802                    
     803                            ;immobilize WHOHITME
     804 00003ad0     b700          move    *a8(WHOHITME),a0,L
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   18

         00003ae0     04e0  
     805 00003af0     c018          jruc    ewhpis_reversal
     806                    
     807 00003b00           ewhpslam
     808 00003b00     b50e          move    *a8(IMMOBILIZE_TIME),a14
         00003b10     0ae0  
     809 00003b20     cb8b          jrnz    ewhplp0                         ;ignore
     810                    
     811 00003b30     18ea          movk    7,A10                   ;Pile driver
     812 00003b40                   CREATE  MESSAGE_PID,BONUS_MESS
     813                    
     814                            ;target WHOIHIT -- don't hit anyone else
     815 00003bc0                   SMRTTGT a8,WHOIHIT
     816                    
     817                            ;immobilize WHOIHIT
     818 00003c60     b700          move    *a8(WHOIHIT),a0,L
         00003c70     0500  
     819                    
     820 00003c80           ewhpis_reversal
     821 00003c80     19ee          movk    15,a14
     822 00003c90     b1c0          move    a14,*a0(IMMOBILIZE_TIME)
         00003ca0     0ae0  
     823                    
     824 00003cb0     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         00003cc0 00000000! 
     825 00003ce0                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
     826 00003e80     09ee          movi    dnk_3_pile_driver_anim,a14
         00003e90 00000000! 
     827 00003eb0     b3c8          move    a14,*a8(SPECIAL_MOVE_ADDR),L
         00003ec0     0930  
     828                    
     829 00003ed0                   SLEEPK  20
     830                    
     831 00003f10     c000          jruc    ewhplp
         00003f20     ff4f  
     832                    
     833                    ;******************************************************************************
     834                    ;
     835                    ;;Could start this process only when opponent is in combo mode!
     836                    ;
     837                    ;dnk_hdhold_anti_combo
     838                    ;
     839                    ;ewhpTIMEOUT    .equ    30
     840                    ;
     841                    ;ewhplp0
     842                    ;       SLEEPK  1
     843                    ;ewhplp
     844                    ;;Is my opponent in combo mode?
     845                    ;;      move    *a8(IMMOBILIZE_TIME),a14
     846                    ;;      jrz     ewhplp0
     847                    ;;      move    *a8(CLOSEST_NUM),a0
     848                    ;;      X32     a0
     849                    ;;      addi    process_ptrs,a0
     850                    ;;      move    *a0,a0,L
     851                    ;;      move    *a0(COMBO_COUNT),a0
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   19

     852                    ;;      jrz     ewhplp0
     853                    ;
     854                    ;       clr     a11
     855                    ;
     856                    ;       WAITSWITCH_DWN  B_SPUNCH,J_ALL,ewhplp
     857                    ;
     858                    ;       movk    ewhpTIMEOUT,a11
     859                    ;
     860                    ;       WAITSWITCH_DWN  B_SPUNCH,J_ALL,ewhplp
     861                    ;       WAITSWITCH_DWN  B_SPUNCH,J_ALL,ewhplp
     862                    ;
     863                    ;;Is my opponent in combo mode?
     864                    ;       move    *a8(CLOSEST_NUM),a0
     865                    ;       X32     a0
     866                    ;       addi    process_ptrs,a0
     867                    ;       move    *a0,a0,L
     868                    ;       move    *a0(COMBO_COUNT),a0
     869                    ;       jrz     ewhplp0
     870                    ;
     871                    ;       move    *a8(ANTI_COMBO_TIME),a0         ;Time stamp
     872                    ;       move    @PCNT,a14
     873                    ;       sub     a0,a14
     874                    ;       abs     a14
     875                    ;       cmpi    80,a14
     876                    ;       jrge    ewhplp0
     877                    ;       move    *a8(I_WILL_DIE),A14
     878                    ;       jrnz    ewhplp0
     879                    ;
     880                    ;;Combo breaker message!
     881                    ;       CALLA   DO_REVERSAL
     882                    ;       CALLA   DO_REVERSAL_MESS
     883                    ;
     884                    ;       clr     a0
     885                    ;       move    a0,*a8(IMMOBILIZE_TIME)
     886                    ;
     887                    ;       move    *a8(WHOHITME),a14,L
     888                    ;       movk    15,a0
     889                    ;       move    a0,*a14(IMMOBILIZE_TIME)
     890                    ;
     891                    ;       ;target WHOHITME
     892                    ;       SMRTTGT a8,WHOHITME
     893                    ;
     894                    ;       CALLA   FIND_AND_KILL_ENDLESS
     895                    ;
     896                    ;       WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
     897                    ;       movi    dnk_3_pile_driver_anim,a14
     898                    ;       move    a14,*a8(SPECIAL_MOVE_ADDR),L
     899                    ;
     900                    ;       SLEEPK  20
     901                    ;
     902                    ;       jruc    ewhplp
     903                    ;
     904                    *******************************************************************************
     905                    ******
     906                    * t1
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   20

     907 00003f30           dnk_hdhold_combo1
     908                    
     909              003c  gqugTIMEOUT     .equ    60
     910                    
     911 00003f30           gquglp0
     912 00003f30                   SLEEPK  1
     913 00003f70           gquglp
     914 00003f70     b500          move    *a8(PLYRMODE),a0
         00003f80     05c0  
     915 00003f90     0b40          cmpi    MODE_HEADHOLD,a0
         00003fa0     ffef  
     916 00003fb0     cbf7          jrnz    gquglp0
     917                    ;       cmpi    MODE_HEADHELD,a0
     918                    ;       jrnz    gquglp0
     919                    ;gqugcont
     920                    ;In combo mode?
     921 00003fc0     0d5f          calla   CHECK_COMBO_GO
         00003fd0 00000000! 
     922 00003ff0     c4f3          jrlt    gquglp0
     923                    
     924 00004000     576b          clr     a11
     925                    
     926 00004010                   WAITSWITCH_DWN  J_TOWARD,0,gquglp
     927                    
     928 00004170     09cb          movi    gqugTIMEOUT,a11
         00004180     003c  
     929                    
     930 00004190                   WAITSWITCH_DWN  J_TOWARD,0,gquglp
     931 000042f0                   WAITSWITCH_DWN  B_SPUNCH,J_ALL,gquglp
     932                    
     933 00004450     b500          move    *a8(PLYRMODE),a0
         00004460     05c0  
     934 00004470     0b40          cmpi    MODE_HEADHOLD,a0
         00004480     ffef  
     935 00004490     ca03          jrz     gqugslam
     936 000044a0     0b40          cmpi    MODE_HEADHELD,a0
         000044b0     ffec  
     937 000044c0     cba6          jrnz    gquglp0
     938                    
     939                    
     940 000044d0           gqugslam
     941 000044d0     b50e          move    *a8(IMMOBILIZE_TIME),a14
         000044e0     0ae0  
     942 000044f0     cba3          jrnz    gquglp0                         ;ignore
     943                    
     944                    ;Start combo rules here
     945                    ;       move    *a8(ATTACH_PROC),a14,L
     946                    ;       movk    15,a0
     947                    ;       move    a0,*a14(IMMOBILIZE_TIME)
     948                    
     949                            ;target WHOIHIT
     950 00004500                   SMRTTGT a8,WHOIHIT
     951                    
     952 000045a0     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         000045b0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   21

     953                    
     954 000045d0     09ee          movi    dnk_combo_uppercut_to_head_anim,a14
         000045e0 00000000! 
     955 00004600     b3c8          move    a14,*a8(SPECIAL_MOVE_ADDR),L
         00004610     0930  
     956                    
     957 00004620                   SLEEPK  20
     958                    
     959 00004660     c090          jruc    gquglp
     960                    
     961                    *******************************************************************************
     962                    *****
     963                    * ttt
     964 00004670           dnk_hdhold_combo2
     965                    
     966              003c  jdngTIMEOUT     .equ    60
 *********  PASS1/PASS2 OPERAND CONFLICT
     967                    
     968 00004670           jdnglp0
     969 00004670                   SLEEPK  1
     970 000046b0           jdnglp
     971 000046b0     b500          move    *a8(PLYRMODE),a0
         000046c0     05c0  
     972 000046d0     0b40          cmpi    MODE_HEADHOLD,a0
         000046e0     ffef  
     973 000046f0     cbf7          jrnz    jdnglp0
     974                    ;       jrz     jdngcont
     975                    ;       cmpi    MODE_HEADHELD,a0
     976                    ;       jrnz    jdnglp0
     977                    ;jdngcont
     978                    ;In combo mode?
     979 00004700     0d5f          calla   CHECK_COMBO_GO
         00004710 00000000! 
     980 00004730     c4f3          jrlt    jdnglp0
     981                    
     982                    
     983 00004740     576b          clr     a11
     984                    
     985 00004750                   WAITSWITCH_DWN  J_TOWARD,0,jdnglp
     986                    
     987 000048b0     09cb          movi    jdngTIMEOUT,a11
         000048c0     003d  
     988                    
     989 000048d0                   WAITSWITCH_DWN  J_TOWARD,0,jdnglp
     990 00004a30                   WAITSWITCH_DWN  B_SKICK,J_ALL,jdnglp
     991                    
     992 00004b90     b500          move    *a8(PLYRMODE),a0
         00004ba0     05c0  
     993 00004bb0     0b40          cmpi    MODE_HEADHOLD,a0
         00004bc0     ffef  
     994 00004bd0     ca03          jrz     jdngslam
     995 00004be0     0b40          cmpi    MODE_HEADHELD,a0
         00004bf0     ffec  
     996 00004c00     cba6          jrnz    jdnglp0
     997                    
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   22

     998                    
     999 00004c10           jdngslam
    1000 00004c10     b50e          move    *a8(IMMOBILIZE_TIME),a14
         00004c20     0ae0  
    1001 00004c30     cba3          jrnz    jdnglp0                         ;ignore
    1002                    
    1003                    ;Start combo rules here
    1004                    ;       move    *a8(ATTACH_PROC),a14,L
    1005                    ;       movk    15,a0
    1006                    ;       move    a0,*a14(IMMOBILIZE_TIME)
    1007 00004c40     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         00004c50 00000000! 
    1008                    
    1009                            ;target WHOIHIT
    1010 00004c70                   SMRTTGT a8,WHOIHIT
    1011                    
    1012 00004d10     09ee          movi    dnk_4_combo_kick_anim,a14
         00004d20 00000000! 
    1013 00004d40     b3c8          move    a14,*a8(SPECIAL_MOVE_ADDR),L
         00004d50     0930  
    1014                    
    1015 00004d60                   SLEEPK  20
    1016                    
    1017 00004da0     c090          jruc    jdnglp
    1018                    
    1019                    *******************************************************************************
    1020                    *
    1021                    
    1022 00004db0           dnk_grab_toss_air
    1023                    
    1024              0028  jdngTIMEOUT     .equ    40
 *********  PASS1/PASS2 OPERAND CONFLICT
LAST ERROR AT  966
    1025                    
    1026 00004db0           jdnglp0
 *********  DUPLICATE DEFINITION
LAST ERROR AT  1024
    1027 00004db0                   SLEEPK  1
    1028 00004df0           jdnglp
 *********  DUPLICATE DEFINITION
LAST ERROR AT  1026
    1029 00004df0     576b          clr     a11
    1030                    
    1031 00004e00                   WAITSWITCH_DWN  J_AWAY,0,jdnglp
    1032                    
    1033 00004f70     09cb          movi    jdngTIMEOUT,a11
         00004f80     003d  
    1034                    
    1035 00004f90                   WAITSWITCH_DWN  J_AWAY,0,jdnglp
    1036 00005120                   WAITSWITCH_DWN  B_PUNCH,J_ALL,jdnglp
    1037                    
    1038 000052b0     b500          move    *a8(ANIMODE),a0
         000052c0     0660  
    1039 000052d0     1fa0          btst    MODE_UNINT_BIT,a0
    1040 000052e0     cb00          jrnz    jdnglp
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   23

         000052f0     ff3b  
    1041                    
    1042 00005300     b500          move    *a8(PLYRMODE),a0
         00005310     05c0  
    1043 00005320     0b40          cmpi    MODE_HEADHOLD,a0
         00005330     ffef  
    1044 00005340     ca00          jreq    jdnglp0
         00005350     ff31  
    1045                    
    1046                    ;Don't do it when he is on ground
    1047 00005360                   SWAP    a8,a13
    1048 00005390     0d5f          calla   get_opp_plyrmode
         000053a0 00000000! 
    1049 000053c0                   SWAP    a8,a13
    1050                    ;Don't do it when he is on ground
    1051 000053f0     0b40          cmpi    MODE_ONGROUND,a0
         00005400     fffb  
    1052 00005410     ca00          jrz     jdnglp
         00005420     ff28  
    1053 00005430     0b40          cmpi    MODE_DEAD,a0
         00005440     fff6  
    1054 00005450     ca00          jrz     jdnglp
         00005460     ff24  
    1055 00005470     0b40          cmpi    MODE_INAIR,a0
         00005480     fffd  
    1056 00005490     ca41          jrz     jdngdoit2
    1057 000054a0     0b40          cmpi    MODE_INAIR2,a0
         000054b0     ffea  
    1058 000054c0     ca3e          jrz     jdngdoit2
    1059                    
    1060 000054d0     b500          move    *a8(CLOSEST_NUM),a0
         000054e0     03a0  
    1061 000054f0                   X32     a0
    1062 00005500     0b20          addi    process_ptrs,a0
         00005510 00000000! 
    1063 00005530     8600          move    *a0,a0,L
    1064 00005540     b400          move    *a0(ATTACK_TYPE),a0
         00005550     05e0  
    1065 00005560     0b40          cmpi    AT_LEAPING,a0
         00005570     ffc6  
    1066 00005580     ca32          jrz     jdngdoit2
    1067                    
    1068 00005590     b500          move    *a8(CLOSEST_DIST),a0
         000055a0     0360  
    1069 000055b0     0b40          cmpi    6ch,a0
         000055c0     ff93  
    1070 000055d0     c700          jrgt    jdnglp
         000055e0     ff0c  
    1071                    
    1072 000055f0                   FACE24  dnk,hiptoss_anim
    1073 00005690     b208          move    a0,*a8(SPECIAL_MOVE_ADDR),L
         000056a0     0930  
    1074                    
    1075 000056b0                   WRSND   W_DOINK,GRABFLING_T1,PUNCH_T2
    1076                    
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   24

    1077 00005850                   SLEEPK  20
    1078 00005890     c000          jruc    jdnglp
         000058a0     fee0  
    1079                    
    1080 000058b0           jdngdoit2       FACE24  dnk,hiptoss2_anim
    1081 00005950     b208          move    a0,*a8(SPECIAL_MOVE_ADDR),L
         00005960     0930  
    1082                    
    1083 00005970                   WRSND   W_DOINK,GRABFLING_T1,PUNCH_T2
    1084                    
    1085 00005b10                   SLEEPK  20
    1086                    
    1087 00005b50     c000          jruc    jdnglp
         00005b60     feb4  
    1088                    
    1089                    
    1090                    *******************************************************************************
    1091                    *
    1092 00005b70            SUBR   std_walk_fast
    1093                    ;One time per match
    1094                    
    1095              003d  jdngTIMEOUT     .equ    61
    1096                    
    1097 00005b70           jdnglp0
 *********  DUPLICATE DEFINITION
LAST ERROR AT  1028
    1098 00005b70                   SLEEPK  1
    1099 00005bb0           jdnglp
 *********  DUPLICATE DEFINITION
LAST ERROR AT  1097
    1100 00005bb0     b500          move    *a8(WALK_FAST),a0
         00005bc0     0b40  
    1101 00005bd0     cb00          jrnz    jdnglp0
         00005be0     fea8  
    1102 00005bf0     b500          move    *a8(PLYRMODE),a0
         00005c00     05c0  
    1103 00005c10     0b40          cmpi    MODE_NORMAL,a0
         00005c20     ffff  
    1104 00005c30     cb00          jrnz    jdnglp0
         00005c40     fea2  
    1105                    
    1106 00005c50     576b          clr     a11
    1107                    
    1108 00005c60                   WAITSWITCH_DWN  J_AWAY,0,jdnglp
    1109                    
    1110 00005df0     09cb          movi    jdngTIMEOUT,a11
         00005e00     003d  
    1111                    
    1112 00005e10                   WAITSWITCH_DWN  J_DOWN_AWAY,0,jdnglp
    1113 00005fa0                   WAITSWITCH_DWN  J_DOWN,0,jdnglp
    1114 00006130                   WAITSWITCH_DWN  J_DOWN_TOWARD,0,jdnglp
    1115 000062c0                   WAITSWITCH_DWN  J_TOWARD,0,jdnglp
    1116 00006450                   WAITSWITCH_DWN  J_UP_TOWARD,0,jdnglp
    1117 000065e0                   WAITSWITCH_DWN  J_UP,0,jdnglp
    1118 00006770                   WAITSWITCH_DWN  J_UP_AWAY,0,jdnglp
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   25

    1119                    
    1120                    
    1121 00006900     b500          move    *a8(PLYRMODE),a0
         00006910     05c0  
    1122 00006920     0b40          cmpi    MODE_NORMAL,a0
         00006930     ffff  
    1123 00006940     cb00          jrnz    jdnglp0
         00006950     fdd1  
    1124                    
    1125 00006960     09c0          movi    15*60,a0
         00006970     0384  
    1126 00006980     b008          move    a0,*a8(WALK_FAST)
         00006990     0b40  
    1127                    
    1128 000069a0     b500          move    *a8(WRESTLERNUM),a0
         000069b0     0590  
    1129 000069c0     14c0          subk    6,a0
    1130 000069d0     cb08          jrnz    jdngnot_dnk
    1131                    ;Doink
    1132 000069e0     09e0          movi    30000h,a0
         000069f0 00030000  
    1133 00006a10     b208          move    a0,*a8(OBJ_YVEL),L
         00006a20     02f0  
    1134                    
    1135                    ;Doink speech call
    1136                    ;211h
    1137 00006a30     09c0          movi    211h,a0
         00006a40     0211  
    1138 00006a50     c002          jruc    jdnggo
    1139                    
    1140 00006a60           jdngnot_dnk
    1141 00006a60     09c0          movi    17eh,a0
         00006a70     017e  
    1142 00006a80     0d5f  jdnggo  calla   ADD_VOICE
         00006a90 00000000! 
    1143                    ;       calla   IF_SILENT_ADD_VOICE
    1144                    
    1145 00006ab0     09ce          movi    0101h,a14
         00006ac0     0101  
    1146 00006ad0     b1c8          move    a14,*a8(OBJ_CONST)
         00006ae0     0790  
    1147 00006af0     b50e          move    *a8(OBJ_CONTROL),a14
         00006b00     0780  
    1148 00006b10     0b8e          andni   01111b,a14
         00006b20 0000000f  
    1149 00006b40     0bae          ori     M_CONNON,a14
         00006b50 00000008  
    1150 00006b70     b1c8          move    a14,*a8(OBJ_CONTROL)
         00006b80     0780  
    1151                    
    1152 00006b90                   SLEEPK  3
    1153                     
    1154 00006bd0     b50e          move    *a8(OBJ_CONTROL),a14
         00006be0     0780  
    1155 00006bf0     0b8e          andni   01111b,a14
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   26

         00006c00 0000000f  
    1156 00006c20     0bae          ori     DMAWNZ,a14
         00006c30 00008002  
    1157 00006c50     b1c8          move    a14,*a8(OBJ_CONTROL)
         00006c60     0780  
    1158                    
    1159 00006c70                   SLEEPK  3
    1160                    
    1161 00006cb0     09ce          movi    0101h,a14
         00006cc0     0101  
    1162 00006cd0     b1c8          move    a14,*a8(OBJ_CONST)
         00006ce0     0790  
    1163 00006cf0     b50e          move    *a8(OBJ_CONTROL),a14
         00006d00     0780  
    1164 00006d10     0b8e          andni   01111b,a14
         00006d20 0000000f  
    1165 00006d40     0bae          ori     M_CONNON,a14
         00006d50 00000008  
    1166 00006d70     b1c8          move    a14,*a8(OBJ_CONTROL)
         00006d80     0780  
    1167                    
    1168 00006d90                   SLEEPK  3
    1169                    
    1170 00006dd0     b50e          move    *a8(OBJ_CONTROL),a14
         00006de0     0780  
    1171 00006df0     0b8e          andni   01111b,a14
         00006e00 0000000f  
    1172 00006e20     0bae          ori     DMAWNZ,a14
         00006e30 00008002  
    1173 00006e50     b1c8          move    a14,*a8(OBJ_CONTROL)
         00006e60     0780  
    1174                    
    1175 00006e70                   SLEEP   30
    1176                    
    1177 00006ec0     b500          move    *a8(WRESTLERNUM),a0
         00006ed0     0590  
    1178 00006ee0     14c0          subk    6,a0
    1179 00006ef0     cb17          jrnz    jdngtag
    1180                    
    1181 00006f00     09c0          movi    0b2h,a0                 ;Honk
         00006f10     00b2  
    1182 00006f20     0d5f          calla   triple_sound
         00006f30 00000000! 
    1183                    
    1184 00006f50                   SLEEPK  18
    1185                    
    1186 00006f90     09c0          movi    0b2h,a0                 ;Honk
         00006fa0     00b2  
    1187 00006fb0     0d5f          calla   triple_sound
         00006fc0 00000000! 
    1188                    
    1189 00006fe0                   SLEEPK  18
    1190                    
    1191 00007020     09c0          movi    0b2h,a0                 ;Honk
         00007030     00b2  
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   27

    1192 00007040     0d5f          calla   triple_sound
         00007050 00000000! 
    1193                    
    1194 00007070           jdngtag SLEEPK  5
    1195 000070b0     b500          move    *a8(WALK_FAST),a0
         000070c0     0b40  
    1196 000070d0     cbf9          jrnz    jdngtag
    1197                    
    1198 000070e0     09ce          movi    0101h,a14
         000070f0     0101  
    1199 00007100     b1c8          move    a14,*a8(OBJ_CONST)
         00007110     0790  
    1200 00007120     b50e          move    *a8(OBJ_CONTROL),a14
         00007130     0780  
    1201 00007140     0b8e          andni   01111b,a14
         00007150 0000000f  
    1202 00007170     0bae          ori     M_CONNON,a14
         00007180 00000008  
    1203 000071a0     b1c8          move    a14,*a8(OBJ_CONTROL)
         000071b0     0780  
    1204                    
    1205 000071c0                   SLEEPK  3
    1206                    
    1207 00007200     b50e          move    *a8(OBJ_CONTROL),a14
         00007210     0780  
    1208 00007220     0b8e          andni   01111b,a14
         00007230 0000000f  
    1209 00007250     0bae          ori     DMAWNZ,a14
         00007260 00008002  
    1210 00007280     b1c8          move    a14,*a8(OBJ_CONTROL)
         00007290     0780  
    1211                    
    1212 000072a0                   DIE
    1213                    
    1214                    *******************************************************************************
    1215                    *
    1216 000072d0            SUBR   std_taunt
    1217                    
    1218 000072d0     b50e          move    *a8(PLYR_TYPE),a14
         000072e0     05a0  
    1219 000072f0     cb80          janz    SUCIDE
         00007300 00000000! 
    1220                    
    1221              003d  jdngTIMEOUT     .equ    61
    1222                    
    1223 00007320           jdnglp0
 *********  DUPLICATE DEFINITION
LAST ERROR AT  1099
    1224 00007320                   SLEEPK  1
    1225 00007360           jdnglp
 *********  DUPLICATE DEFINITION
LAST ERROR AT  1223
    1226 00007360     b500          move    *a8(PLYRMODE),a0
         00007370     05c0  
    1227 00007380     0b40          cmpi    MODE_BLOCK,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   28

         00007390     fff8  
    1228 000073a0     cb00          jrnz    jdnglp0
         000073b0     fd2b  
    1229                    
    1230 000073c0     576b          clr     a11
    1231                    
    1232 000073d0                   WAITSWITCH_DWN  J_UP,B_BLOCK,jdnglp
    1233                    
    1234 00007560     b50e          move    *a8(BUT_VAL_CUR),a14
         00007570     0b90  
    1235 00007580     1fce          btst    PLAYER_BLOCK_BIT,a14
    1236 00007590     ca00          jrz     jdnglp0
         000075a0     fd0c  
    1237                    
    1238 000075b0     09cb          movi    jdngTIMEOUT,a11
         000075c0     003d  
    1239                    
    1240 000075d0                   WAITSWITCH_DWN  J_UP_TOWARD,B_BLOCK,jdnglp
    1241 00007760                   WAITSWITCH_DWN  J_TOWARD,B_BLOCK,jdnglp
    1242 000078f0                   WAITSWITCH_DWN  J_DOWN_TOWARD,B_BLOCK,jdnglp
    1243 00007a80                   WAITSWITCH_DWN  J_DOWN,B_BLOCK,jdnglp
    1244 00007c10                   WAITSWITCH_DWN  J_DOWN_AWAY,B_BLOCK,jdnglp
    1245 00007da0                   WAITSWITCH_DWN  J_AWAY,B_BLOCK,jdnglp
    1246 00007f30                   WAITSWITCH_DWN  J_UP_AWAY,B_BLOCK,jdnglp
    1247                    
    1248 000080c0     b50e          move    *a8(BUT_VAL_CUR),a14
         000080d0     0b90  
    1249 000080e0     1fce          btst    PLAYER_BLOCK_BIT,a14
    1250 000080f0     ca00          jrz     jdnglp0
         00008100     fc56  
    1251                    
    1252 00008110     b500          move    *a8(PLYRMODE),a0
         00008120     05c0  
    1253 00008130     0b40          cmpi    MODE_BLOCK,a0
         00008140     fff8  
    1254 00008150     cb00          jrne    jdnglp0
         00008160     fc50  
    1255                    
    1256                            ;no taunts if all opponents are dead.
    1257 00008170                   SWAP    a8,a13
    1258 000081a0     0d5f          calla   get_opp_plyrmode
         000081b0 00000000! 
    1259 000081d0                   SWAP    a8,a13
    1260 00008200     0b40          cmpi    MODE_DEAD,a0
         00008210     fff6  
    1261 00008220     ca00          jreq    jdnglp0
         00008230     fc43  
    1262                    
    1263 00008240                   SWAP    a8,a13
    1264 00008270                   FACETBL jdngtaunt_tbl
    1265 000082e0     0d5f          calla   change_anim1a
         000082f0 00000000! 
    1266 00008310                   SWAP    a8,a13
    1267                    
    1268                    ;Time to execute high-risk move!
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   29

    1269 00008340     09e0          movi    8000h+12*60,a0
         00008350 000082d0  
    1270 00008370     b008          move    a0,*a8(RISK)
         00008380     0950  
    1271                    
    1272 00008390                   DIE
    1273                    
    1274                    ;       SLEEP   10*60
    1275                    ;       jruc    jdnglp0
    1276                    
    1277 000083c0           jdngtaunt_tbl
    1278 000083c0                   REFLONG hrt_4_taunt_anim        ;0 Bret Hart
    1279 000083e0                   REFLONG rzr_4_taunt_anim        ;1 Razor Ramon
    1280 00008400                   REFLONG und_4_taunt_anim        ;2 Undertaker
    1281 00008420                   REFLONG yok_4_taunt_anim        ;3 Yokozuna
    1282 00008440                   REFLONG shn_4_taunt_anim        ;4 Shawn Michaels
    1283 00008460                   REFLONG bam_4_taunt_anim        ;5 Bam Bam
    1284 00008480                   REFLONG dnk_4_taunt_anim        ;6 Doink
    1285 000084a0 00000000          .long   0                       ;7 spare
    1286 000084c0                   REFLONG lex_4_taunt_anim        ;8 Lex Luger
    1287                    
    1288                    ;*******************************************************************************
    1289                    ;
    1290                    ;jdngcharge_flying_kick
    1291                    ;       move    *a13(BUT_VAL_UP),a0
    1292                    ;       btst    PLAYER_SKICK_BIT,a0
    1293                    ;       jrz     jdngno_kick
    1294                    ;
    1295                    ;       move    *a13(PLYRNUM),a0
    1296                    ;       calla   get_powerk_dtime
    1297                    ;       cmpi    85,a0                   ;> min?
    1298                    ;       jrlt    jdngno_kick
    1299                    ;
    1300                    ;       callr   jdngscrt_kick
    1301                    ;       setc
    1302                    ;       rets
    1303                    ;
    1304                    ;jdngno_kick
    1305                    ;       clrc
    1306                    ;       rets
    1307                    ;
    1308                    ;jdngscrt_kick
    1309                    ;
    1310                    ;       move    *a13(PLYRMODE),a0
    1311                    ;       cmpi    MODE_HEADHELD,a0
    1312                    ;       jrz     jdngout
    1313                    ;       cmpi    MODE_HEADHOLD,a0
    1314                    ;       jrz     jdngout
    1315                    ;
    1316                    ;       move    *a13(ANIMODE),a0
    1317                    ;       btst    MODE_UNINT_BIT,a0
    1318                    ;       jrnz    jdngout
    1319                    ;
    1320                    ;;Don't do it when he is on ground
    1321                    ;       calla   get_opp_plyrmode
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   30

    1322                    ;       cmpi    MODE_ONGROUND,a0
    1323                    ;       jrz     jdngout
    1324                    ;       cmpi    MODE_DEAD,a0
    1325                    ;       jrz     jdngout
    1326                    ;
    1327                    ;jdngok
    1328                    ;       SETMODE INAIR
    1329                    ;
    1330                    ;       movk    1,a0                    ;Ensure leap at
    1331                    ;       move    a0,*a13(OBJ_XVEL),L
    1332                    ;
    1333                    ;       movi    dnk_flying_kick_anim,a0
    1334                    ;       calla   change_anim1a
    1335                    ;
    1336                    ;       WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    1337                    ;
    1338                    ;jdngout        rets
    1339                    ;
    1340                    *******************************************************************************
    1341                    
    1342                    ;       STRUCTPD
    1343                    ;       WORD            pyfkCHARGE_TIME ;UDW
    1344              0160  pyfkCHARGE_TIME .equ    SM_USRW1        ;
    1345                    
    1346 000084e0           dnk_charge_flykick
    1347                    
    1348 000084e0           pyfkstart_over
    1349 000084e0     57ce          clr     a14
    1350 000084f0     b1cd          move    a14,*a13(pyfkCHARGE_TIME),W
         00008500     0160  
    1351 00008510           pyfkloop1
    1352 00008510                   SLEEPK  1
    1353                    
    1354 00008550     b5ae          move    *a13(pyfkCHARGE_TIME),a14,W
         00008560     0160  
    1355 00008570     102e          inc     a14
    1356 00008580     b1cd          move    a14,*a13(pyfkCHARGE_TIME),W
         00008590     0160  
    1357                    
    1358 000085a0     b500          move    *a8(BUT_VAL_CUR),a0
         000085b0     0b90  
    1359 000085c0     1f60          btst    PLAYER_SKICK_BIT,a0
    1360 000085d0     ca01          jrz     pyfkp1
    1361                    
    1362 000085e0     c0f2          jruc    pyfkloop1
    1363                    
    1364 000085f0           pyfkp1
    1365                    
    1366                    ;no longer holding button
    1367 000085f0     b5ae          move    *a13(pyfkCHARGE_TIME),a14
         00008600     0160  
    1368 00008610     0b4e          cmpi    100,a14
         00008620     ff9b  
    1369 00008630     c4ea          jrlt    pyfkstart_over
    1370                    
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   31

    1371 00008640     b500          move    *a8(GETUP_TIME),a0
         00008650     0460  
    1372 00008660     cbe7          jrnz    pyfkstart_over
    1373 00008670     b500          move    *a8(PLYRMODE),a0
         00008680     05c0  
    1374 00008690     0b40          cmpi    MODE_HEADHELD,a0
         000086a0     ffec  
    1375 000086b0     cae2          jrz     pyfkstart_over
    1376 000086c0     0b40          cmpi    MODE_HEADHOLD,a0
         000086d0     ffef  
    1377 000086e0     cadf          jrz     pyfkstart_over
    1378 000086f0     0b40          cmpi    MODE_ONGROUND,a0
         00008700     fffb  
    1379 00008710     cadc          jrz     pyfkstart_over
    1380 00008720     0b40          cmpi    MODE_DEAD,a0
         00008730     fff6  
    1381 00008740     cad9          jrz     pyfkstart_over
    1382                    
    1383 00008750     b500          move    *a8(CLOSEST_NUM),a0
         00008760     03a0  
    1384 00008770                   X32     a0
    1385 00008780     0b20          addi    process_ptrs,a0
         00008790 00000000! 
    1386 000087b0     8600          move    *a0,a0,L
    1387 000087c0     b400          move    *a0(PLYRMODE),a0
         000087d0     05c0  
    1388 000087e0     0b40          cmpi    MODE_ONGROUND,a0
         000087f0     fffb  
    1389 00008800     cacd          jrz     pyfkstart_over
    1390 00008810     0b40          cmpi    MODE_DEAD,a0
         00008820     fff6  
    1391 00008830     caca          jrz     pyfkstart_over
    1392                    
    1393                    ;Success!  Check for the UNINT bit, then queue it up.
    1394 00008840     b50e          move    *a8(ANIMODE),a14
         00008850     0660  
    1395 00008860     1fae          btst    MODE_UNINT_BIT,a14
    1396 00008870     cbc6          jrnz    pyfkstart_over
    1397                    
    1398                            .ref    ck_ignore_a8
    1399 00008880     0d5f          calla   ck_ignore_a8
         00008890 00000000! 
    1400 000088b0     c8c2          jrc     pyfkstart_over
    1401                    
    1402 000088c0     09ee          movi    dnk_flying_kick_anim,a14
         000088d0 00000000! 
    1403 000088f0     b3c8          move    a14,*a8(SPECIAL_MOVE_ADDR),L
         00008900     0930  
    1404 00008910                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    1405                    
    1406 00008ab0                   SETMODE INAIR
    1407                    
    1408 00008b60     c097          jruc    pyfkstart_over
    1409                            
    1410                    
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   32

    1411                    *******************************************************************************
    1412                    ;
    1413                    ;       STRUCTPD
    1414                    ;       WORD            leckCHARGE_TIME ;UDW
    1415                    ;       WORD            leckTIMEOUT     ;UDW
    1416                    ;
    1417                    ;       ;in:
    1418                    ;       ; a8 = wrestler process address
    1419                    ;
    1420                    ;dnk_charge_flykick
    1421                    ;
    1422                    ;leckstart_over
    1423                    ;       ;charge on stick away
    1424                    ;       clr     a14
    1425                    ;       move    a14,*a13(leckCHARGE_TIME),W
    1426                    ;leckloop1
    1427                    ;       SLEEPK  1
    1428                    ;
    1429                    ;       move    *a13(leckCHARGE_TIME),a14,W
    1430                    ;       inc     a14
    1431                    ;       move    a14,*a13(leckCHARGE_TIME),W
    1432                    ;
    1433                    ;       move    *a8(STICK_VAL_CUR),a0
    1434                    ;
    1435                    ;       ;arbitrarily define TOWARD to be RIGHT.  So if the opponent is to
    1436                    ;       ; our left, flip the L|R direction bits...
    1437                    ;
    1438                    ;       ;...however, if the stick isn't pointed left or right, don't do
    1439                    ;       ;anything.
    1440                    ;       move    a0,a14
    1441                    ;       andi    MOVE_LEFT|MOVE_RIGHT,a14
    1442                    ;       jrz     leckno_flip
    1443                    ;
    1444                    ;       move    *a8(NEW_FACING_DIR),a14
    1445                    ;       btst    MOVE_LEFT_BIT,a14
    1446                    ;       jrz     leckno_flip
    1447                    ;       xori    MOVE_LEFT|MOVE_RIGHT,a0
    1448                    ;leckno_flip
    1449                    ;
    1450                    ;       ;if we're still holding away, jump back to leckloop1
    1451                    ;       btst    MOVE_LEFT_BIT,a0
    1452                    ;       jrnz    leckloop1
    1453                    ;
    1454                    ;       ;no longer holding away...
    1455                    ;       move    *a13(leckCHARGE_TIME),a14
    1456                    ;       cmpi    20,a14
    1457                    ;       jrlt    leckstart_over
    1458                    ;
    1459                    ;       ;okay, they released after holding away for 2 seconds.  Give them
    1460                    ;       ; half a second to push forward + super_kick
    1461                    ;
    1462                    ;       movi    TSEC/2,a14
    1463                    ;       move    a14,*a13(leckTIMEOUT)
    1464                    ;leckloop2
    1465                    ;       SLEEPK  1
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   33

    1466                    ;
    1467                    ;       move    *a8(BUT_VAL_DOWN),a0
    1468                    ;       jrnz    leckpress
    1469                    ;
    1470                    ;       move    *a13(leckTIMEOUT),a14
    1471                    ;       dec     a14
    1472                    ;       jrz     leckstart_over
    1473                    ;       move    a14,*a13(leckTIMEOUT)
    1474                    ;       jruc    leckloop2
    1475                    ;
    1476                    ;leckpress
    1477                    ;       ;we have a button press.  Is is super kick?
    1478                    ;       btst    PLAYER_KICK_BIT,a0
    1479                    ;
    1480                    ;       jrz     leckstart_over  ;wrong button.  No good.
    1481                    ;
    1482                    ;       
    1483                    ;       ;Check for a towards on the stick.
    1484                    ;       move    *a8(STICK_VAL_CUR),a0
    1485                    ;       jrz     leckstart_over  ;no stick at all.  No good.
    1486                    ;
    1487                    ;       move    *a8(NEW_FACING_DIR),a14
    1488                    ;       btst    MOVE_LEFT_BIT,a14
    1489                    ;       jrz     leckno_flip2
    1490                    ;       xori    MOVE_LEFT|MOVE_RIGHT,a0
    1491                    ;leckno_flip2
    1492                    ;       btst    MOVE_RIGHT_BIT,a0
    1493                    ;       jrz     leckstart_over  ;pooched it
    1494                    ;
    1495                    ;
    1496                    ;;Don't do it when he is on ground
    1497                    ;       SWAP    a8,a13
    1498                    ;       calla   get_opp_plyrmode
    1499                    ;       SWAP    a8,a13
    1500                    ;;Don't do it when he is on ground
    1501                    ;       cmpi    MODE_ONGROUND,a0
    1502                    ;       jrz     leckstart_over
    1503                    ;       cmpi    MODE_DEAD,a0
    1504                    ;       jrz     leckstart_over
    1505                    ;
    1506                    ;
    1507                    ;;success!  Check for the UNINT bit, then queue it up.
    1508                    ;       move    *a8(ANIMODE),a14
    1509                    ;       btst    MODE_UNINT_BIT,a14
    1510                    ;       jrnz    leckstart_over
    1511                    ;
    1512                    ;       movi    dnk_flying_kick_anim,a14
    1513                    ;       move    a14,*a8(SPECIAL_MOVE_ADDR),L
    1514                    ;
    1515                    ;       SETMODE INAIR
    1516                    ;
    1517                    ;       movi    1000h,a0
    1518                    ;       move    a0,*a13(OBJ_XVEL),L
    1519                    ;
    1520                    ;       WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   34

    1521                    ;
    1522                    ;       jruc    leckstart_over
    1523                    
    1524                    *******************************************************************************
    1525                    * BZZ
    1526 00008b70           dnk_hdhold_buzz
    1527                    
    1528              003c  kdfgTIMEOUT     .equ    60
    1529                    
    1530 00008b70           kdfglp0
    1531 00008b70                   SLEEPK  1
    1532 00008bb0           kdfglp
    1533 00008bb0     b500          move    *a8(PLYRMODE),a0
         00008bc0     05c0  
    1534 00008bd0     0b40          cmpi    MODE_HEADHOLD,a0
         00008be0     ffef  
    1535 00008bf0     ca03          jrz     kdfgcont
    1536 00008c00     0b40          cmpi    MODE_HEADHELD,a0
         00008c10     ffec  
    1537 00008c20     cbf4          jrnz    kdfglp0
    1538 00008c30           kdfgcont
    1539 00008c30     576b          clr     a11
    1540                    
    1541 00008c40                   WAITSWITCH_DWN  J_DOWN,0,kdfglp
    1542                    
    1543 00008da0     09cb          movi    kdfgTIMEOUT,a11
         00008db0     003c  
    1544                    
    1545 00008dc0                   WAITSWITCH_DWN  J_TOWARD,J_DOWN|J_UP,kdfglp
    1546                    ;       WAITSWITCH_DWN  J_DOWN_TOWARD,0,kdfglp
    1547 00008f20                   WAITSWITCH_DWN  B_PUNCH,J_ALL,kdfglp
    1548                            
    1549 00009080     b500          move    *a8(PLYRMODE),a0
         00009090     05c0  
    1550 000090a0     0b40          cmpi    MODE_HEADHOLD,a0
         000090b0     ffef  
    1551 000090c0     cbaa          jrnz    kdfglp0
    1552                    
    1553                    ;kdfgslam
    1554 000090d0     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         000090e0 00000000! 
    1555 00009100     09ee          movi    dnk_4_buzz_anim,a14
         00009110 00000000! 
    1556 00009130     b3c8          move    a14,*a8(SPECIAL_MOVE_ADDR),L
         00009140     0930  
    1557                    
    1558                    ;missing noise for a reason !
    1559 00009150                   WRSND   W_DOINK,HDBUTT_T1
    1560                    
    1561 00009220                   SLEEP   120
    1562                    
    1563 00009270     c093          jruc    kdfglp
    1564                    
    1565                    *****************************************************************************
    1566                    
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   35

    1567 00009280            SUBR   doink_ani_init
    1568                    
    1569 00009280     b5a0          move    *a13(FACING_DIR),a0
         00009290     04c0  
    1570 000092a0     1f80          btst    PLAYER_RIGHT_BIT,a0
    1571 000092b0     cb18          jrnz    dmqdp1
    1572                    ;Plyr 2
    1573 000092c0     09e0          movi    dnk_stand4_anim,a0
         000092d0 00000000! 
    1574 000092f0     0d5f          calla   change_anim1a
         00009300 00000000! 
    1575                    
    1576 00009320     09e0          movi    dnk_torso4_anim,a0
         00009330 00000000! 
    1577 00009350     0d5f          calla   change_anim2a
         00009360 00000000! 
    1578                    
    1579 00009380                   PUSH    a10
    1580 00009390     4daa          move    a13,a10
    1581 000093a0                   CREATE  TAUNT_PID,do_taunt
    1582 00009420                   PULL    a10
    1583                    
    1584 00009430     0960          rets
    1585                    
    1586 00009440           dmqdp1
    1587 00009440     09e0          movi    dnk_stand2_anim,a0
         00009450 00000000! 
    1588 00009470     0d5f          calla   change_anim1a
         00009480 00000000! 
    1589                    
    1590 000094a0     09e0          movi    dnk_torso2_anim,a0
         000094b0 00000000! 
    1591 000094d0     0d5f          calla   change_anim2a
         000094e0 00000000! 
    1592                    
    1593 00009500     0960          rets
    1594                    
    1595 00009510            SUBR   do_taunt
    1596                    ;a10=*wrestler proc
    1597                    ;Do a taunt at start of rounds
    1598                    
    1599                    ;       SLEEP   60
    1600 00009510     05a0          move    @HALT,a0
         00009520 00000000! 
    1601 00009540     ca80          jaz     SUCIDE
         00009550 00000000! 
    1602                    
    1603 00009570                   PUSH    a10
    1604 00009580     0d5f          calla   read_switches
         00009590 00000000! 
    1605 000095b0                   PULL    a10
    1606                    
    1607 000095c0     b5a0          move    *a13(PLYR_TYPE),a0
         000095d0     05a0  
    1608 000095e0     cb1c          jrnz    dmqddrone
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   36

    1609                    ;Human chooses to taunt?
    1610 000095f0     b540          move    *a10(STICK_VAL_CUR),a0
         00009600     0bc0  
    1611 00009610     1fe0          btst    MOVE_UP_BIT,a0
    1612 00009620     ca80          jaz     SUCIDE
         00009630 00000000! 
    1613 00009650     b540          move    *a10(BUT_VAL_CUR),a0
         00009660     0b90  
    1614 00009670     1fc0          btst    PLAYER_BLOCK_BIT,a0
    1615 00009680     ca80          jaz     SUCIDE
         00009690 00000000! 
    1616                    
    1617 000096b0           dmqddo_taunt
    1618 000096b0                   PUSH    a13
    1619 000096c0     4d4d          move    a10,a13
    1620 000096d0     b5a0          move    *a13(WRESTLERNUM),a0
         000096e0     0590  
    1621 000096f0                   X32     a0
    1622 00009700     0b20          addi    dmqdtaunt_t,a0
         00009710 00009840' 
    1623 00009730     8600          move    *a0,a0,L
    1624                    
    1625 00009740     0d5f          calla   change_anim1a
         00009750 00000000! 
    1626 00009770                   PULL    a13
    1627                    
    1628 00009780                   DIE
    1629                    
    1630 000097b0           dmqddrone
    1631 000097b0     09c0          movi    250,a0
         000097c0     00fa  
    1632 000097d0     0d5f          calla   RNDPER
         000097e0 00000000! 
    1633 00009800     c3ea          jrhi    dmqddo_taunt
    1634                    
    1635 00009810                   DIE
    1636                    
    1637 00009840           dmqdtaunt_t
    1638 00009840                   REFLONG hrt_4_taunt_anim                        ;0 Bret Hart
    1639 00009860                   REFLONG rzr_4_taunt_anim                        ;1 Razor Ramon
    1640 00009880                   REFLONG und_4_taunt_anim                        ;2 Undertaker
    1641 000098a0                   REFLONG yok_4_taunt_anim                        ;3 Yokozuna
    1642 000098c0                   REFLONG shn_4_taunt_anim                        ;4 Shawn Michaels
    1643 000098e0                   REFLONG bam_4_taunt_anim                        ;5 Bam Bam
    1644 00009900                   REFLONG dnk_4_taunt_anim                        ;6 Doink
    1645 00009920 00000000          .long   0                                       ;7 spare
    1646 00009940                   REFLONG lex_4_taunt_anim                        ;8 Lex Luger
    1647 00009960 00000000          .long   0                                       ;9 Referee
    1648                    
    1649                    *****************************************************************************
    1650                    *
    1651                    * DOINKS CONTROL CODE
    1652                    *
    1653                    * a13 = * doink process
    1654                    
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   37

    1655 00009980            SUBR   move_doink
    1656                    
    1657                    ;       movi    100h,a0                 ;temp fix!
    1658                    ;       move    a0,*a13(ANI_SPEED)
    1659                    
    1660 00009980     09eb          movi    doink_secret_moves,a11
         00009990 00000000' 
    1661 000099b0     0d5f          calla   check_secret_moves
         000099c0 00000000! 
    1662                    
    1663 000099e0     b5a0          move    *a13(PLYRMODE),a0
         000099f0     05c0  
    1664 00009a00     24a0          sll     5,a0                    ;x 32
    1665 00009a10     0b20          addi    jsmrmode_table,a0
         00009a20 00009a70' 
    1666 00009a40     8600          move    *a0,a0,L
    1667 00009a50     0920          call    a0
    1668 00009a60     0960          rets
    1669                    
    1670 00009a70           jsmrmode_table
    1671 00009a70 00009db0'         .long   mode_normal             ;0
    1672 00009a90 00011990'         .long   mode_running            ;1
    1673 00009ab0 00014180'         .long   mode_inair              ;2
    1674 00009ad0 00014190'         .long   mode_attached           ;3
    1675 00009af0 00014300'         .long   mode_onground           ;4
    1676 00009b10 00014310'         .long   mode_bouncing           ;5
    1677 00009b30 000145b0'         .long   mode_onturnbkl          ;6
    1678 00009b50 000154d0'         .long   mode_block              ;7
    1679 00009b70 00015f80'         .long   mode_dizzy              ;8
    1680 00009b90 00015f90'         .long   mode_dead               ;9
    1681 00009bb0 00017570'         .long   mode_oppoverhead        ;10
    1682 00009bd0 00017580'         .long   mode_climbturnbkl       ;11
    1683 00009bf0 00017590'         .long   mode_waitanim           ;12
    1684 00009c10 00017610'         .long   mode_grapple            ;13
    1685 00009c30 00017620'         .long   mode_master             ;14
    1686 00009c50 00017660'         .long   mode_slave              ;15
    1687 00009c70 000178b0'         .long   mode_headhold           ;16
    1688 00009c90 00018f70'         .long   mode_puppet2
    1689 00009cb0 00009db0'         .long   mode_normal     ;18
    1690 00009cd0 00018f80'         .long   mode_headheld           ;19
    1691 00009cf0 00019500'         .long   mode_puppet             ;20
    1692 00009d10 00019af0'         .long   mode_inair2             ;21
    1693 00009d30 00009db0'         .long   mode_normal     ;22
    1694 00009d50 00009db0'         .long   mode_normal     ;23
    1695 00009d70 00019ae0'         .long   mode_chokehold          ;24
    1696 00009d90 00000000!         .long   mode_choking            ;25
    1697                    
    1698                    *****************************************************************************
    1699                    
    1700 00009db0           mode_normal
    1701                    
    1702 00009db0     b5a0          move    *a13(ANIMODE),a0
         00009dc0     0660  
    1703 00009dd0     1fa0          btst    MODE_UNINT_BIT,a0
    1704 00009de0     cb00          jrnz    bpzpno_interrupt
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   38

         00009df0     00b0  
    1705                    
    1706 00009e00     b5a0          move    *a13(I_WILL_DIE),a0
         00009e10     0b30  
    1707 00009e20     ca1f          jrz     bpzpnope
    1708 00009e30     b5a0          move    *a13(IMMOBILIZE_TIME),a0
         00009e40     0ae0  
    1709 00009e50     cb1c          jrnz    bpzpnope
    1710                    ;Player has died amidst a combo...
    1711                    ;Knock me down.
    1712 00009e60     09e0          movi    dnk_fall_back_anim,a0
         00009e70 00000000! 
    1713 00009e90     0d5f          calla   change_anim1a
         00009ea0 00000000! 
    1714                    
    1715                    ;Zero health bar
    1716 00009ec0     09c0          movi    -10,a0
         00009ed0     fff6  
    1717 00009ee0     b5a1          move    *a13(PLYRNUM),a1
         00009ef0     0580  
    1718 00009f00     0d5f          calla   adjust_health
         00009f10 00000000! 
    1719                    
    1720 00009f30                   SETMODE DEAD
    1721                    
    1722 00009fe0     5600          clr     a0
    1723 00009ff0     b00d          move    a0,*a13(I_WILL_DIE)
         0000a000     0b30  
    1724                    
    1725 0000a010     0960          rets
    1726                    
    1727 0000a020           bpzpnope
    1728                    ;Perhaps we need to interrupt any sequence when a wrestler has won?
    1729 0000a020     0d5f          calla   get_opp_plyrmode
         0000a030 00000000! 
    1730 0000a050     0b40          cmpi    MODE_DEAD,a0
         0000a060     fff6  
    1731 0000a070     cb49          jrne    bpzpopp_not_dead
    1732                    
    1733                            ;if closest is a zombie, skip pin section.
    1734 0000a080     0d5f          calla   get_opp_process
         0000a090 00000000! 
    1735 0000a0b0     b40e          move    *a0(STATUS_FLAGS),a14
         0000a0c0     0b50  
    1736 0000a0d0     1f8e          btst    B_ZOMBIE,a14
    1737 0000a0e0     cb42          jrnz    bpzpopp_not_dead
    1738                    
    1739                            ;all opponents are dead.  Check for pins/raisearms
    1740                    
    1741                            ;if we're attached to someone, don't interrupt it.
    1742 0000a0f0     b7a1          move    *a13(ATTACH_PROC),a1,L
         0000a100     03e0  
    1743 0000a110     ca04          jrz     bpzpno_attch
    1744 0000a120     b622          move    *a1(ATTACH_PROC),a2,L
         0000a130     03e0  
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   39

    1745 0000a140     484d          cmp     a2,a13
    1746 0000a150     ca3b          jreq    bpzpno_pin_yet
    1747 0000a160           bpzpno_attch
    1748                    
    1749                            ;if a teammate has pinned, raise yer arm.
    1750 0000a160     0d5f          calla   ck_teammate_pin 
         0000a170 00000000! 
    1751 0000a190     c823          jrc     bpzpraisearm
    1752                    
    1753                            ;nobody has pinned.  if we're outside or all our opponents are
    1754                            ; outside, do a raisearm.
    1755 0000a1a0     0d5f          calla   raisearm_check
         0000a1b0 00000000! 
    1756 0000a1d0     c81f          jrc     bpzpraisearm
    1757                    
    1758                            ;we're inside with a pinnable opponent.  any button pins.
    1759 0000a1e0     b5a0          move    *a13(BUT_VAL_CUR),a0
         0000a1f0     0b90  
    1760 0000a200     ca30          jrz     bpzpno_pin_yet
    1761                    
    1762                            ;we have a press -- make sure opponent is on the ground
    1763                    
    1764 0000a210     0d5f          calla   can_pin
         0000a220 00000000! 
    1765 0000a240     c92c          jrnc    bpzpopp_notgnd
    1766                    
    1767                            ;opponent is on the ground.  pin him.
    1768 0000a250                   FACE24  dnk,pin_anim
    1769 0000a2f0     0d5f          calla   change_anim1a
         0000a300 00000000! 
    1770                    
    1771                            ;set the 'I did a pin' flag.
    1772 0000a320     b5ae          move    *a13(STATUS_FLAGS),a14
         0000a330     0b50  
    1773 0000a340     0bae          ori     M_DID_PIN,a14
         0000a350 00000002  
    1774 0000a370     b1cd          move    a14,*a13(STATUS_FLAGS)
         0000a380     0b50  
    1775                    
    1776                            ;if we're a temp drone for auto-pin purposes, turn back into
    1777                            ; a normal player here.
    1778 0000a390     0d5f          calla   drone_change_back
         0000a3a0 00000000! 
    1779                    
    1780 0000a3c0     0960          rets
    1781                    
    1782 0000a3d0           bpzpraisearm
    1783 0000a3d0                   FACE24  dnk,raise_arm_anim
    1784 0000a470     0d5f          calla   change_anim1a
         0000a480 00000000! 
    1785 0000a4a0     0d5f          calla   set_raisearm_bit
         0000a4b0 00000000! 
    1786                    
    1787                            ;if we're a temp drone for auto-pin purposes, turn back into
    1788                            ; a normal player here.
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   40

    1789 0000a4d0     0d5f          calla   drone_change_back
         0000a4e0 00000000! 
    1790                    
    1791 0000a500     0960          rets
    1792                    
    1793 0000a510           bpzptoo_far_to_pin
    1794 0000a510           bpzpopp_notgnd
    1795 0000a510           bpzpopp_not_dead
    1796 0000a510           bpzpno_pin_yet
    1797                    
    1798 0000a510     b5a0          move    *a13(IMMOBILIZE_TIME),a0
         0000a520     0ae0  
    1799 0000a530     cb36          jrnz    bpzpimmobilized
    1800                    
    1801 0000a540     b5a0          move    *a13(BUT_VAL_CUR),a0
         0000a550     0b90  
    1802 0000a560     1fc0          btst    PLAYER_BLOCK_BIT,a0     ;maybe have to action tables?
    1803 0000a570     ca07          jrz     bpzpnblk                        ;1 for down transitions
    1804 0000a580     0d3f          callr   bpzpblock                       ;& 1 for current buttons
         0000a590     01ee  
    1805 0000a5a0     c804          jrc     bpzpnblk
    1806 0000a5b0     5600          clr     a0
    1807 0000a5c0     b00d          move    a0,*a13(ATTACK_TYPE)
         0000a5d0     05e0  
    1808 0000a5e0     0960          rets
    1809 0000a5f0           bpzpnblk
    1810 0000a5f0     b5a0          move    *a13(BUT_VAL_CUR),a0
         0000a600     0b90  
    1811 0000a610     0b80          andi    011111b,a0
         0000a620 ffffffe0  
    1812 0000a640     0b40          cmpi    PLAYER_PUNCH_VAL|PLAYER_KICK_VAL,a0
         0000a650     fff6  
    1813 0000a660     ca00          jrz     bpzppunchkick
         0000a670     0545  
    1814                    
    1815 0000a680     b5a0          move    *a13(BUT_VAL_DOWN),a0
         0000a690     0ba0  
    1816 0000a6a0     0b80          andi    011111b,a0
         0000a6b0 ffffffe0  
    1817 0000a6d0                   X32     a0
    1818 0000a6e0     0b20          addi    bpzpaction_table,a0
         0000a6f0 0000a910' 
    1819 0000a710     8600          move    *a0,a0,L
    1820 0000a720     0920          call    a0
    1821                    
    1822 0000a730     b5a0          move    *a13(ANIMODE),a0
         0000a740     0660  
    1823 0000a750     1fa0          btst    MODE_UNINT_BIT,a0
    1824 0000a760     cb19          jrnz    bpzpno_interrupt
    1825                    
    1826                    
    1827 0000a770     b5a0          move    *a13(STICK_VAL_CUR),a0
         0000a780     0bc0  
    1828 0000a790     b00d          move    a0,*a13(MOVE_DIR)
         0000a7a0     04b0  
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   41

    1829 0000a7b0     0d5f          calla   climb_turnbuckle
         0000a7c0 00000000! 
    1830 0000a7e0     c90e          jrnc    bpzpno_climb
    1831 0000a7f0     b5a5          move    *a13(WRESTLERNUM),A5
         0000a800     0590  
    1832 0000a810     09e2          MOVI    CLIMB_ROPES,A2
         0000a820 00000000! 
    1833 0000a840     09c0          MOVI    1000,A0
         0000a850     03e8  
    1834 0000a860     0d5f          CALLA   ADD_IF_SILENT
         0000a870 00000000! 
    1835 0000a890     0960          rets
    1836                    
    1837 0000a8a0           bpzpimmobilized
    1838 0000a8a0     57ce          clr     a14
    1839 0000a8b0     b1cd          move    a14,*a13(MOVE_DIR)
         0000a8c0     04b0  
    1840 0000a8d0           bpzpno_climb
    1841 0000a8d0     0d5f          calla   execute_walk
         0000a8e0 00000000! 
    1842                    
    1843 0000a900           bpzpno_interrupt
    1844 0000a900     0960          rets
    1845                    
    1846 0000a910           bpzpaction_table
    1847 0000a910 0000ad10'         .long   bpzpz,bpzppunch,bpzpblock,bpzpblock                     ;0-3
    1848 0000a990 0000c660'         .long   bpzpsuper_punch,bpzpsuper_punch,bpzpblock,bpzpblock     ;4-7
    1849 0000aa10 0000e470'         .long   bpzpkick,bpzppunchkick,bpzpblock,bpzpblock              ;8-11
    1850 0000aa90 0000c660'         .long   bpzpsuper_punch,bpzppunchkick,bpzpblock,bpzpblock       ;12-15
    1851 0000ab10 0000fb40'         .long   bpzpsuper_kick,bpzpsuper_kick,bpzpblock,bpzpblock       ;16-19
    1852 0000ab90 00010cf0'         .long   bpzpgraboh,bpzpgraboh,bpzpblock,bpzpblock               ;20-23
    1853 0000ac10 0000fb40'         .long   bpzpsuper_kick,bpzppunchkick,bpzpblock,bpzpblock        ;24-27
    1854 0000ac90 00010cf0'         .long   bpzpgraboh,bpzpgraboh,bpzpblock,bpzpblock               ;28-31
    1855                    
    1856                    ************
    1857 0000ad10           bpzpz           ;0
    1858                    
    1859 0000ad10     0960          rets
    1860                    
    1861                    
    1862                    ************
    1863 0000ad20           bpzppunch               ;1
    1864                    *
    1865                    * MODE             DX  DZ       ACTION
    1866                    * ----------------------------------------------------
    1867                    * normal        <  50   92      headbutt
    1868                    * dizzy                 "               "
    1869                    * normal        >               normal punch
    1870                    * dizzy                 "               "
    1871                    *
    1872                    * onground      < 120  120      elbow drop
    1873                    * onground      >               normal punch
    1874                    *
    1875                    * running                       hiptoss
    1876                    * bouncing                      nothing
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   42

    1877                    *
    1878                    * onturnbkl     <  60   96      yank down
    1879                    * onturnbkl     >               normal punch
    1880                    * climbturnbkl                  normal punch
    1881                    *
    1882 0000ad20                   JJXM_INIT
    1883 0000ad90                   JJXM    NORMAL,          50, 45,bpzppunch_hdbutt,bpzppunch_punch        ;0
    1884 0000ae60                   JJXM    RUNNING,         50, 45,bpzppunch_hdbutt,bpzppunch_punch        ;1
    1885 0000af30                   JJXM    INAIR,           50, 45,bpzppunch_hdbutt,bpzppunch_punch        ;2
    1886 0000b000                   JJXM    ATTACHED,        50, 45,bpzppunch_hdbutt,bpzppunch_punch        ;3
    1887 0000b0d0                   JJXM    ONGROUND,       160,140,bpzppunch_lbowdrop,bpzppunch_punch      ;4
    1888 0000b1a0                   JJXM    BOUNCING,        50, 45,bpzppunch_hdbutt,bpzppunch_punch        ;1
    1889 0000b270                   JJXM    ONTURNBKL,       50, 45,bpzppunch_hdbutt,bpzppunch_punch        ;6
    1890 0000b340                   JJXM    BLOCK,           50, 45,bpzppunch_hdbutt,bpzppunch_punch        ;7
    1891 0000b410                   JJXM    DIZZY,           50, 45,bpzppunch_hdbutt,bpzppunch_punch        ;8
    1892 0000b4e0                   JJXM    DEAD,           160,140,bpzppunch_lbowdrop,bpzppunch_punch      ;9
    1893 0000b590                   JJXM    OPPOVERHEAD,     50, 45,bpzppunch_hdbutt,bpzppunch_punch        ;10
    1894 0000b640                   JJXM    CLIMBTURNBKL,           bpzppunch_punch                 ;11
    1895 0000b680                   JJXM    WAITANIM,        50, 45,bpzppunch_hdbutt,bpzppunch_punch        ;12
    1896 0000b730                   JJXM    GRAPPLE,         50, 45,bpzppunch_hdbutt,bpzppunch_punch        ;13
    1897 0000b7d0                   JJXM    MASTER,          50, 45,bpzppunch_hdbutt,bpzppunch_punch        ;14
    1898 0000b870                   JJXM    SLAVE,           50, 45,bpzppunch_hdbutt,bpzppunch_punch        ;15
    1899 0000b910                   JJXM    HEADHOLD,        50, 45,bpzppunch_hdbutt,bpzppunch_punch        ;16
    1900 0000b9b0                   JJXM    HEADHELD,        50, 45,bpzppunch_hdbutt,bpzppunch_punch        ;19
    1901 0000ba50                   JJXM    CHOKEHOLD,       50, 45,bpzppunch_hdbutt,bpzppunch_punch        ;16
    1902 0000baf0                   JJXM    PUPPET,          50, 45,bpzppunch_hdbutt,bpzppunch_punch        ;20
    1903 0000bb90                   JJXM    PUPPET2,         50, 45,bpzppunch_hdbutt,bpzppunch_punch        ;20
    1904 0000bc30                   JJXM    INAIR2,          50, 45,bpzppunch_hdbutt,bpzppunch_punch        ;21
    1905 0000bcd0                   JJXM_END
    1906                    
    1907 0000bcf0           bpzppunch_rets
    1908 0000bcf0     0960          rets
    1909                    
    1910                    *****
    1911 0000bd00           bpzppunch_punch
    1912 0000bd00           std_punch
    1913                    
    1914 0000bd00                   FACE24  dnk,punch_anim
    1915 0000bda0     0d5f          calla   change_anim1a
         0000bdb0 00000000! 
    1916                    
    1917 0000bdd0                   WRSND   W_DOINK,PUNCH_T1,PUNCH_T2
    1918                    
    1919 0000bf70     0960          rets
    1920                    
    1921                    *****
    1922 0000bf80           bpzppunch_hdbutt
    1923                    
    1924 0000bf80                   FACE24  dnk,butt_anim
    1925 0000c020     0d5f          calla   change_anim1a
         0000c030 00000000! 
    1926                    
    1927 0000c050                   WRSND   W_DOINK,HDBUTT_T1,HDBUTT_T2
    1928                    
    1929 0000c1f0     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   43

    1930                    
    1931                    *****
    1932 0000c200           bpzppunch_lbowdrop
    1933                    
    1934 0000c200                   FACE24  dnk,lbowdrop_anim
    1935 0000c2a0     0d5f          calla   change_anim1a
         0000c2b0 00000000! 
    1936                    
    1937 0000c2d0                   WRSND   W_DOINK,LBOWDROP_T1,LBOWDROP_T2
    1938                    
    1939 0000c470     0960          rets
    1940                    
    1941                    ************
    1942 0000c480           bpzpblock               ;2
    1943 0000c480           std_block
    1944 0000c480     05a0          move    @blocking_off,a0
         0000c490 00000000! 
    1945 0000c4b0     cb18          jrnz    bpzpno_blocking
    1946                    
    1947 0000c4c0                   RND_AWARD       a13,BLOCKS_AWD
    1948                    
    1949 0000c560     09e0          movi    dnk_4_block_anim,a0
         0000c570 00000000! 
    1950 0000c590     0d5f          calla   change_anim1
         0000c5a0 00000000! 
    1951                    
    1952 0000c5c0     0d5f          calla   BLOCK_WOOSH
         0000c5d0 00000000! 
    1953                    
    1954 0000c5f0     5600          clr     a0
    1955 0000c600     b00d          move    a0,*a13(BLOCK_TIME)
         0000c610     0d30  
    1956 0000c620     0320          clrc
    1957 0000c630     0960          rets
    1958                    
    1959 0000c640           bpzpno_blocking
    1960 0000c640     0de0          setc
    1961 0000c650     0960          rets
    1962                    
    1963                    
    1964                    ************
    1965 0000c660           bpzpsuper_punch ;4
    1966                    *
    1967                    * MODE             DX  DZ       ACTION
    1968                    * ----------------------------------------------------
    1969                    * normal        <  50   92      close in super move
    1970                    * dizzy                 "               "
    1971                    * normal        >               jumping punch move
    1972                    * dizzy                 "               "
    1973                    *
    1974                    * onground      < 144  160      super elbow drop
    1975                    * onground      >               normal punch
    1976                    *
    1977                    * running                       hip toss
    1978                    * bouncing                      nothing
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   44

    1979                    *
    1980                    * onturnbkl     <  60   96      yank down
    1981                    * onturnbkl     >               normal punch
    1982                    * climbturnbkl                  normal punch
    1983                    *
    1984 0000c660                   JJXM_INIT
    1985 0000c6d0                   JJXM    NORMAL,          85, 55,bpzpspunch_special,bpzpspunch_slap      ;0
    1986 0000c7a0                   JJXM    RUNNING,         85, 55,bpzpspunch_special,bpzpspunch_slap      ;1
    1987 0000c870                   JJXM    INAIR,           85, 55,bpzpspunch_special,bpzpspunch_slap      ;2
    1988 0000c940                   JJXM    ATTACHED,        85, 55,bpzpspunch_special,bpzpspunch_slap      ;3
    1989 0000ca10                   JJXM    ONGROUND,       160,140,bpzpspunch_lbowdrop,std_punch   ;4
    1990 0000cae0                   JJXM    BOUNCING,        85, 55,bpzpspunch_special,bpzpspunch_slap      ;1
    1991 0000cbb0                   JJXM    ONTURNBKL,              bpzpspunch_slap                 ;6
    1992 0000cc00                   JJXM    BLOCK,           85, 55,bpzpspunch_special,bpzpspunch_slap      ;7
    1993 0000ccd0                   JJXM    DIZZY,           85, 55,bpzpspunch_special,bpzpspunch_slap      ;8
    1994 0000cda0                   JJXM    DEAD,           160,140,bpzpspunch_lbowdrop,std_punch   ;9
    1995 0000ce70                   JJXM    OPPOVERHEAD,     85, 55,bpzpspunch_special,bpzpspunch_slap      ;10
    1996 0000cf20                   JJXM    CLIMBTURNBKL,           std_punch                       ;11
    1997 0000cf70                   JJXM    WAITANIM,        85, 55,bpzpspunch_special,bpzpspunch_slap      ;12
    1998 0000d020                   JJXM    GRAPPLE,         85, 55,bpzpspunch_special,bpzpspunch_slap      ;13
    1999 0000d0c0                   JJXM    MASTER,          85, 55,bpzpspunch_special,bpzpspunch_slap      ;14
    2000 0000d160                   JJXM    SLAVE,           85, 55,bpzpspunch_special,bpzpspunch_slap      ;15
    2001 0000d200                   JJXM    HEADHOLD,        85, 55,bpzpspunch_special,bpzpspunch_slap      ;16
    2002 0000d2a0                   JJXM    HEADHELD,               do_pile                         ;19
    2003 0000d2f0                   JJXM    CHOKEHOLD,       85, 55,bpzpspunch_special,bpzpspunch_slap      ;16
    2004 0000d390                   JJXM    PUPPET,          85, 55,bpzpspunch_special,bpzpspunch_slap      ;20
    2005 0000d430                   JJXM    PUPPET2,         85, 55,bpzpspunch_special,bpzpspunch_slap      ;20
    2006 0000d4d0                   JJXM    INAIR2,          85, 55,bpzpspunch_special,bpzpspunch_slap      ;21
    2007 0000d570                   JJXM_END
    2008                    
    2009 0000d590           bpzpspunch_rets
    2010 0000d590     0960          rets
    2011                    
    2012                    *****
    2013 0000d5a0           bpzpspunch_slap
    2014 0000d5a0                   FACE24  dnk,slap_anim
    2015 0000d640     0d5f          calla   change_anim1a
         0000d650 00000000! 
    2016                    
    2017 0000d670                   WRSND   W_DOINK,SPUNCH_T1,SPUNCH_T2
    2018                    
    2019 0000d810     0960          rets
    2020                    
    2021                    *****
    2022 0000d820           bpzpspunch_special
    2023                    ;If stick is toward opponent, then do quick punches
    2024                    
    2025 0000d820     b5a0          move    *a13(STICK_VAL_CUR),a0
         0000d830     0bc0  
    2026 0000d840     1fc0          btst    MOVE_DOWN_BIT,a0
    2027 0000d850     cb2e          jrnz    bpzpck_up
    2028                    
    2029                    
    2030                    ;       move    *a13(STICK_VAL_CUR),a0
    2031                    ;       move    *a13(NEW_FACING_DIR),a1
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   45

    2032                    ;       andi    0ch,a1
    2033                    ;       cmp     a0,a1
    2034                    ;       jrz     bpzpcont
    2035                    
    2036 0000d860     b5a1          move    *a13(CLOSEST_XDIST),a1
         0000d870     0370  
    2037 0000d880     0b41          cmpi    60,a1
         0000d890     ffc3  
    2038 0000d8a0     c700          jrgt    std_punch
         0000d8b0     fe44  
    2039                    
    2040                    ;       jruc    bpzphdbutt
    2041                    ;bpzpcont
    2042                    ;       .ref    dnk_3_head_hold2_anim
    2043                    ;       movi    dnk_3_head_hold2_anim,a0
    2044                    ;       calla   change_anim1a
    2045                    ;
    2046                    ;       WRSND   W_DOINK,GRABHOLD_T1,GRABHOLD_T2
    2047                    ;
    2048                    ;       rets
    2049                    ;bpzphdbutt
    2050                    
    2051 0000d8c0                   FACE24  dnk,butts_anim
    2052 0000d960     0d5f          calla   change_anim1
         0000d970 00000000! 
    2053                    
    2054 0000d990                   WRSND   W_DOINK,HDBUTT_T1,HDBUTT_T2
    2055                    
    2056 0000db30     0960          rets
    2057                    
    2058 0000db40           bpzpck_up
    2059                    ;Check for uppercut
    2060                            .ref    dnk_4_uppercut_anim
    2061 0000db40     09e0          movi    dnk_4_uppercut_anim,a0
         0000db50 00000000! 
    2062 0000db70     0d5f          calla   change_anim1
         0000db80 00000000! 
    2063                    
    2064 0000dba0                   WRSND   W_DOINK,SPUNCH_T1,SPUNCH_T2
    2065 0000dd40     0960          rets
    2066                    
    2067                    *****
    2068 0000dd50           bpzpspunch_lbowdrop
    2069                    ;If near opponents head, and facing down, do the hair grab!
    2070                    ;Allow hair grab from below!
    2071                    
    2072                    ;       move    *a13(FACING_DIR),a14
    2073                    ;       btst    MOVE_DOWN_BIT,a14
    2074                    ;       jrz     bpzpno
    2075                    
    2076 0000dd50     b5ae          move    *a13(CLOSEST_NUM),a14
         0000dd60     03a0  
    2077 0000dd70                   X32     a14
    2078 0000dd80     0b2e          addi    process_ptrs,a14
         0000dd90 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   46

    2079 0000ddb0     87ce          move    *a14,a14,L
    2080 0000ddc0     b5c2          move    *a14(PLYRMODE),a2
         0000ddd0     05c0  
    2081 0000dde0     0b42          cmpi    MODE_DEAD,a2
         0000ddf0     fff6  
    2082 0000de00     ca3e          jrz     bpzpno
    2083 0000de10     b7a1          move    *a13(OBJ_XPOS),a1,L 
         0000de20     0100  
    2084 0000de30     b7c2          move    *a14(OBJ_XPOS),a2,L
         0000de40     0100  
    2085 0000de50     4441          sub     a2,a1
    2086 0000de60     0381          abs     a1
    2087 0000de70     2e01          srl     16,a1
    2088 0000de80     0b41          cmpi    20h,a1  ;28
         0000de90     ffdf  
    2089 0000dea0     c434          jrlt    bpzpno
    2090                    
    2091                    ;At head or feet!
    2092                    
    2093 0000deb0     b5ce          move    *a14(OBJ_CONTROL),a14
         0000dec0     0780  
    2094 0000ded0     0b8e          andi    M_FLIPH,a14
         0000dee0 ffffffef  
    2095 0000df00     b5a0          move    *a13(OBJ_CONTROL),a0
         0000df10     0780  
    2096 0000df20     0b80          andi    M_FLIPH,a0
         0000df30 ffffffef  
    2097 0000df50     480e          cmp     a0,a14
    2098 0000df60     ca28          jrz     bpzpno
    2099                    
    2100                    ;At head!  Do hair pickup.
    2101                    
    2102 0000df70                   FACE24  dnk,hair_pickup_anim
    2103 0000e010     0d5f          calla   change_anim1
         0000e020 00000000! 
    2104 0000e040                   WRSND   W_DOINK,LBOWDROP_T1,LBOWDROP_T2
    2105 0000e1e0     0960          rets
    2106                    
    2107 0000e1f0           bpzpno  FACE24  dnk,lbowdrop_anim
    2108 0000e290     0d5f          calla   change_anim1
         0000e2a0 00000000! 
    2109 0000e2c0                   WRSND   W_DOINK,LBOWDROP_T1,LBOWDROP_T2
    2110 0000e460     0960          rets
    2111                    
    2112                    
    2113                    ************
    2114 0000e470           bpzpkick                ;8
    2115                    *
    2116                    * MODE             DX  DZ       ACTION
    2117                    * ----------------------------------------------------
    2118                    * normal        <  50   92      knee
    2119                    * dizzy                 "               "
    2120                    * normal        >               normal kick
    2121                    * dizzy                 "               "
    2122                    *
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   47

    2123                    * onground      < 120  120      stomp
    2124                    * onground      >               normal kick
    2125                    *
    2126                    * running                       normal kick
    2127                    * bouncing                      normal kick
    2128                    *
    2129                    * onturnbkl                     normal kick
    2130                    * climbturnbkl                  normal kick
    2131                    *
    2132 0000e470                   JJXM_INIT
    2133 0000e4e0                   JJXM    NORMAL,          50, 92,bpzpkick_knee,bpzpkick_kick             ;0
    2134 0000e5b0                   JJXM    RUNNING,                 50, 92,bpzpkick_knee,bpzpkick_kick             ;0
    2135 0000e680                   JJXM    INAIR,           50, 92,bpzpkick_knee,bpzpkick_kick             ;2
    2136 0000e750                   JJXM    ATTACHED,        50, 92,bpzpkick_knee,bpzpkick_kick             ;3
    2137 0000e820                   JJXM    ONGROUND,       160,140,bpzpkick_stomp,bpzpkick_kick            ;4
    2138 0000e8f0                   JJXM    BOUNCING,        50, 92,bpzpkick_knee,bpzpkick_kick             ;0
    2139 0000e9c0                   JJXM    ONTURNBKL,              bpzpkick_kick                   ;6
    2140 0000ea10                   JJXM    BLOCK,           50, 92,bpzpkick_knee,bpzpkick_kick             ;7
    2141 0000eae0                   JJXM    DIZZY,           50, 92,bpzpkick_knee,bpzpkick_kick             ;8
    2142 0000eba0                   JJXM    DEAD,           160,140,bpzpkick_stomp,bpzpkick_kick            ;9
    2143 0000ec50                   JJXM    OPPOVERHEAD,     50, 92,bpzpkick_knee,bpzpkick_kick             ;10
    2144 0000ed00                   JJXM    CLIMBTURNBKL,           bpzpkick_kick                   ;11
    2145 0000ed40                   JJXM    WAITANIM,        50, 92,bpzpkick_knee,bpzpkick_kick             ;12
    2146 0000ede0                   JJXM    GRAPPLE,         50, 92,bpzpkick_knee,bpzpkick_kick             ;13
    2147 0000ee80                   JJXM    MASTER,          50, 92,bpzpkick_knee,bpzpkick_kick             ;14
    2148 0000ef20                   JJXM    SLAVE,           50, 92,bpzpkick_knee,bpzpkick_kick             ;15
    2149 0000efc0                   JJXM    HEADHOLD,        50, 92,bpzpkick_knee,bpzpkick_kick             ;16
    2150 0000f060                   JJXM    HEADHELD,        50, 92,bpzpkick_knee,bpzpkick_kick             ;19
    2151 0000f100                   JJXM    CHOKEHOLD,       50, 92,bpzpkick_knee,bpzpkick_kick             ;16
    2152 0000f1a0                   JJXM    PUPPET,          50, 92,bpzpkick_knee,bpzpkick_kick             ;20
    2153 0000f240                   JJXM    PUPPET2,         50, 92,bpzpkick_knee,bpzpkick_kick             ;20
    2154 0000f2e0                   JJXM    INAIR2,                 bpzpskick_TB                    ;21
    2155 0000f330                   JJXM_END
    2156                    
    2157                    ;*****
    2158                    ;bpzpkick_flyingkick
    2159                    ;
    2160                    ;       movi    dnk_flying_kick_anim,a0
    2161                    ;       calla   change_anim1a
    2162                    ;
    2163                    ;       SETMODE INAIR
    2164                    ;
    2165                    ;       WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    2166                    ;
    2167                    ;       rets
    2168                    
    2169                    *****
    2170 0000f350           bpzpkick_kick
    2171 0000f350           std_kick
    2172                    
    2173 0000f350                   FACE24  dnk,kick_anim
    2174 0000f3f0     0d5f          calla   change_anim1a
         0000f400 00000000! 
    2175                    
    2176 0000f420                   WRSND   W_DOINK,KICK_T1,KICK_T2
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   48

    2177                    
    2178 0000f5c0     0960          rets
    2179                    
    2180                    *****
    2181 0000f5d0           bpzpkick_knee
    2182 0000f5d0           std_knee
    2183 0000f5d0                   FACE24  dnk,knee_anim
    2184 0000f670     0d5f          calla   change_anim1a
         0000f680 00000000! 
    2185                    
    2186 0000f6a0                   WRSND   W_DOINK,KICK_T1,KICK_T2
    2187                    
    2188 0000f840     0960          rets
    2189                    
    2190                    *****
    2191 0000f850           bpzpkick_stomp
    2192                    
    2193 0000f850                   FACE24  dnk,stomp_anim
    2194 0000f8f0     0d5f          calla   change_anim1a
         0000f900 00000000! 
    2195                    
    2196 0000f920                   WRSND   W_DOINK,KICK_T1,KICK_T2
    2197                    
    2198 0000fac0     0960          rets
    2199                    
    2200                    
    2201                    ************
    2202 0000fad0           bpzppunchkick   ;9
    2203                    
    2204 0000fad0     09e0          movi    start_run_anim,a0
         0000fae0 00000000! 
    2205 0000fb00     0d5f          calla   change_anim1a
         0000fb10 00000000! 
    2206                    
    2207 0000fb30     0960          rets
    2208                    
    2209                    ************
    2210 0000fb40           bpzpsuper_kick  ;16
    2211                    *
    2212                    * MODE             DX  DZ       ACTION
    2213                    * ----------------------------------------------------
    2214                    * normal        <  60   60      close in super move
    2215                    * dizzy                 "               "
    2216                    * normal        >               jumping kick move
    2217                    * dizzy                 "               "
    2218                    *
    2219                    * onground      < 144  160      super stomp
    2220                    * onground      >               normal kick
    2221                    *
    2222                    * running                       big boot
    2223                    * bouncing                      big boot
    2224                    *
    2225                    * onturnbkl     <  60   96      jumping kick move
    2226                    * climbturnbkl          "               "
    2227                    * onturnbkl     >               normal kick
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   49

    2228                    * climbturnbkl          "               "
    2229                    *
    2230 0000fb40                   JJXM_INIT
    2231 0000fbb0                   JJXM    NORMAL,          60, 60,bpzpskick_special,bpzpskick_kick        ;0
    2232 0000fc80                   JJXM    RUNNING,                bpzpskick_bigboot                       ;1
    2233 0000fcd0                   JJXM    INAIR,           60, 60,bpzpskick_special,bpzpskick_kick        ;2
    2234 0000fda0                   JJXM    ATTACHED,        60, 60,bpzpskick_special,bpzpskick_kick        ;3
    2235 0000fe70                   JJXM    ONGROUND,       160,140,bpzpskick_stomp,std_kick                ;4
    2236 0000ff40                   JJXM    BOUNCING,               bpzpskick_bigboot                       ;5
    2237 0000ff90                   JJXM    ONTURNBKL,       60, 96,bpzpskick_kick,std_kick         ;6
    2238 00010060                   JJXM    BLOCK,           60, 60,bpzpskick_special,bpzpskick_kick        ;7
    2239 00010130                   JJXM    DIZZY,           60, 60,bpzpskick_special,bpzpskick_kick        ;8
    2240 00010200                   JJXM    DEAD,           160,140,bpzpskick_stomp,std_kick                ;9
    2241 000102d0                   JJXM    OPPOVERHEAD,     60, 60,bpzpskick_special,bpzpskick_kick        ;10
    2242 000103a0                   JJXM    CLIMBTURNBKL,    60, 96,bpzpskick_kick,std_kick         ;11
    2243 00010470                   JJXM    WAITANIM,        60, 62,bpzpskick_special,bpzpskick_kick        ;12
    2244 00010530                   JJXM    GRAPPLE,         60, 62,bpzpskick_special,bpzpskick_kick        ;13
    2245 000105e0                   JJXM    MASTER,          60, 62,bpzpskick_special,bpzpskick_kick        ;14
    2246 00010690                   JJXM    SLAVE,           60, 62,bpzpskick_special,bpzpskick_kick        ;15
    2247 00010740                   JJXM    HEADHOLD,        60, 62,bpzpskick_special,bpzpskick_kick        ;16
    2248 000107e0                   JJXM    HEADHELD,               std_kick
    2249 00010830                   JJXM    CHOKEHOLD,       60, 62,bpzpskick_special,bpzpskick_kick        ;16
    2250 000108d0                   JJXM    PUPPET,          60, 62,bpzpskick_special,bpzpskick_kick        ;20
    2251 00010970                   JJXM    PUPPET2,         60, 62,bpzpskick_special,bpzpskick_kick        ;20
    2252 00010a10                   JJXM    INAIR2,                 bpzpskick_TB                    ;21
    2253 00010a50                   JJXM_END
    2254                    
    2255                    *****
    2256 00010a70           bpzpskick_TB
    2257                            .ref    dnk_2_spin_kick_TB_anim
    2258                            .ref    dnk_4_spin_kick_TB_anim
    2259 00010a70                   FACE24  dnk,spin_kick_TB_anim
    2260 00010b10     0d5f          calla   change_anim1a
         00010b20 00000000! 
    2261                    
    2262 00010b40                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    2263 00010ce0     0960          rets
    2264                    
    2265                    *****
    2266 00010cf0           bpzpskick_kick
    2267 00010cf0           bpzpgraboh
    2268                    
    2269 00010cf0                   FACE24  dnk,spin_kick_anim
    2270 00010d90     0d5f          calla   change_anim1a
         00010da0 00000000! 
    2271                    
    2272 00010dc0                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    2273 00010f60     0960          rets
    2274                    
    2275                    *****
    2276 00010f70           bpzpskick_special
    2277                    ;If stick is toward opponent, then do quick punches
    2278 00010f70     b5a0          move    *a13(STICK_VAL_CUR),a0
         00010f80     0bc0  
    2279 00010f90     b5a1          move    *a13(NEW_FACING_DIR),a1
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   50

         00010fa0     04d0  
    2280 00010fb0     0b81          andi    0ch,a1
         00010fc0 fffffff3  
    2281 00010fe0     4801          cmp     a0,a1
    2282 00010ff0     ca28          jrz     bpzpcont2
    2283                    
    2284 00011000                   FACE24  dnk,knee_anim
    2285 000110a0     0d5f          calla   change_anim1
         000110b0 00000000! 
    2286                    
    2287                    ;       WRSND   W_DOINK,GRABHOLD_T1,GRABHOLD_T2
    2288                    ;no, lets try..... 
    2289 000110d0                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    2290 00011270     0960          rets
    2291                    
    2292 00011280           bpzpcont2
    2293 00011280     09e0          movi    dnk_4_knee_fall_anim,a0
         00011290 00000000! 
    2294 000112b0     0d5f          calla   change_anim1
         000112c0 00000000! 
    2295                    
    2296 000112e0                   WRSND   W_DOINK,GRABHOLD_T1,GRABHOLD_T2
    2297 00011480     0960          rets
    2298                    
    2299                    
    2300                    *****
    2301 00011490           bpzpskick_stomp
    2302                    
    2303 00011490                   FACE24  dnk,stomp_anim
    2304 00011530     0d5f          calla   change_anim1a
         00011540 00000000! 
    2305                    
    2306 00011560                   WRSND   W_DOINK,KICK_T1,KICK_T2
    2307                    
    2308 00011700     0960          rets
    2309                    
    2310                    *****
    2311 00011710           bpzpskick_bigboot       ;we can probably get away with just a bpzp4 big boot
    2312                    
    2313 00011710                   FACE24  dnk,bigboot_anim
    2314 000117b0     0d5f          calla   change_anim1a
         000117c0 00000000! 
    2315                    
    2316 000117e0                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    2317                    
    2318 00011980     0960          rets
    2319                    
    2320                    *****************************************************************************
    2321                    *
    2322                    * RUNNING (if GETUP_TIME > 0 then player is out of control)
    2323                    *
    2324                    
    2325          00064000  fvdyXRUN_VAL    equ     DNK_XRUN
    2326          00088000  fvdyXRUN2_VAL   equ     DNK_XRUN2
    2327          00028000  fvdyZDRIFT_VAL  equ     DNK_ZDRIFT
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   51

    2328                    
    2329 00011990           mode_running
    2330                    
    2331 00011990     b5a0          move    *a13(RUN_TIME),a0               ;Used for flying kick
         000119a0     07b0  
    2332 000119b0     1020          addk    1,a0
    2333 000119c0     b00d          move    a0,*a13(RUN_TIME)
         000119d0     07b0  
    2334                    
    2335 000119e0     b5a0          move    *a13(USR_VAR1),a0
         000119f0     0850  
    2336 00011a00     cb17          jrnz    fvdyno_vel
    2337                    
    2338 00011a10     0d5f          calla   bounce_off_ropes
         00011a20 00000000! 
    2339                    
    2340 00011a40     09e0          movi    fvdyXRUN_VAL,a0
         00011a50 00064000  
    2341                    
    2342 00011a70     b5ae          move    *a13(WALK_FAST),a14
         00011a80     0b40  
    2343 00011a90     ca03          jrz     fvdyno
    2344 00011aa0     09e0          movi    fvdyXRUN2_VAL,a0
         00011ab0 00088000  
    2345 00011ad0           fvdyno
    2346 00011ad0     05ae          move    @hyper_speed_on,a14
         00011ae0 00000000! 
    2347 00011b00     63c0          sll     a14,a0
    2348                    
    2349 00011b10     b5ae          move    *a13(MOVE_DIR),a14
         00011b20     04b0  
    2350 00011b30     1f8e          btst    PLAYER_RIGHT_BIT,a14
    2351 00011b40     cb01          jrnz    fvdypos
    2352 00011b50     03a0          neg     a0
    2353 00011b60           fvdypos
    2354 00011b60     b20d          move    a0,*a13(OBJ_XVEL),L
         00011b70     02d0  
    2355                    
    2356 00011b80           fvdyno_vel
    2357                    
    2358 00011b80     b5a0          move    *a13(GETUP_TIME),a0             ;delay b4 gaining control
         00011b90     0460  
    2359 00011ba0     cb38          jrnz    fvdyout_of_control
    2360                    
    2361 00011bb0     b5a0          move    *a13(ANIMODE),a0
         00011bc0     0660  
    2362 00011bd0     1fa0          btst    MODE_UNINT_BIT,a0
    2363 00011be0     cb16          jrnz    fvdyno_interrupt
    2364                    
    2365 00011bf0     b5a0          move    *a13(STICK_VAL_CUR),a0
         00011c00     0bc0  
    2366 00011c10     b5a1          move    *a13(MOVE_DIR),a1
         00011c20     04b0  
    2367 00011c30     5401          or      a0,a1
    2368 00011c40     0b81          andi    MOVE_LEFT|MOVE_RIGHT,a1
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   52

         00011c50 fffffff3  
    2369 00011c70     0b41          cmpi    MOVE_LEFT|MOVE_RIGHT,a1
         00011c80     fff3  
    2370 00011c90     cb0b          jrne    fvdycontinue_run
    2371                    
    2372                            ;braking with stick.  abort run.
    2373                    
    2374 00011ca0                   SETMODE NORMAL
    2375                    
    2376 00011d50           fvdycontinue_run
    2377 00011d50           fvdyno_interrupt
    2378                    
    2379 00011d50     b5a0          move    *a13(STICK_VAL_CUR),a0
         00011d60     0bc0  
    2380 00011d70     5621          clr     a1
    2381                    
    2382 00011d80     09e1          movi    -fvdyZDRIFT_VAL,a1
         00011d90 fffd8000  
    2383 00011db0     1fe0          btst    PLAYER_UP_BIT,a0
    2384 00011dc0     cb06          jrnz    fvdysetvel
    2385                    
    2386 00011dd0     09e1          movi    fvdyZDRIFT_VAL,a1
         00011de0 00028000  
    2387 00011e00     1fc0          btst    PLAYER_DOWN_BIT,a0
    2388 00011e10     cb01          jrnz    fvdysetvel
    2389                    
    2390 00011e20     5621          clr     a1
    2391 00011e30           fvdysetvel
    2392 00011e30     b22d          move    a1,*a13(OBJ_ZVEL),L
         00011e40     0310  
    2393                    
    2394                    
    2395                    ;Delay reading buttons after just getting out of an out of control run
    2396                    ;so a mistaken move isn't fired off
    2397 00011e50     b5a0          move    *a13(DELAY_BUTNS),a0
         00011e60     0ab0  
    2398 00011e70     cb0b          jrnz    fvdyout_of_control
    2399                    
    2400                    
    2401 00011e80     b5a0          move    *a13(BUT_VAL_DOWN),a0
         00011e90     0ba0  
    2402 00011ea0     0b80          andi    011111b,a0
         00011eb0 ffffffe0  
    2403 00011ed0                   X32     a0
    2404 00011ee0     0b20          addi    fvdyaction_table,a0
         00011ef0 00011f40' 
    2405 00011f10     8600          move    *a0,a0,L
    2406 00011f20     0920          call    a0
    2407 00011f30           fvdyout_of_control
    2408 00011f30     0960          rets
    2409                    
    2410 00011f40           fvdyaction_table
    2411 00011f40 00012340'         .long   fvdyz,fvdypunch,fvdyblock,fvdyblock                     ;0-3
    2412 00011fc0 00012350'         .long   fvdysuper_punch,fvdysuper_punch,fvdyblock,fvdyblock     ;4-7
    2413 00012040 000134a0'         .long   fvdykick,fvdypunchkick,fvdyblock,fvdyblock              ;8-11
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   53

    2414 000120c0 00012350'         .long   fvdysuper_punch,fvdypunchkick,fvdyblock,fvdyblock       ;12-15
    2415 00012140 000134a0'         .long   fvdysuper_kick,fvdysuper_kick,fvdyblock,fvdyblock       ;16-19
    2416 000121c0 00012350'         .long   fvdygraboh,fvdygraboh,fvdyblock,fvdyblock               ;20-23
    2417 00012240 000134a0'         .long   fvdysuper_kick,fvdypunchkick,fvdyblock,fvdyblock        ;24-27
    2418 000122c0 00012350'         .long   fvdygraboh,fvdygraboh,fvdyblock,fvdyblock               ;28-31
    2419                    
    2420                    ************
    2421 00012340           fvdyz
    2422 00012340     0960          rets
    2423                    
    2424                    
    2425                    ************
    2426 00012350           fvdypunch               ;1
    2427 00012350           fvdysuper_punch ;4
    2428 00012350           fvdypunchkick
    2429 00012350           fvdygraboh
    2430                    *
    2431                    * MODE             DX  DZ       ACTION
    2432                    * ----------------------------------------------------
    2433                    * normal                        flying clothesline
    2434                    * dizzy                                 "
    2435                    *
    2436                    * onground      < 176  176      belly flop
    2437                    * onground      >               nothing
    2438                    *
    2439                    * running                       flying clothesline
    2440                    * bouncing                      flying clothesline
    2441                    *
    2442                    * onturnbkl                     flying clothesline
    2443                    * climbturnbkl                  flying clothesline
    2444                    *
    2445 00012350                   JJXM_INIT
    2446 000123c0                   JJXM    NORMAL,                 fvdypunch_clothesline           ;0
    2447 00012400                   JJXM    RUNNING,                fvdypunch_clothesline           ;1
    2448 00012440                   JJXM    INAIR,                  fvdypunch_clothesline           ;2
    2449 00012480                   JJXM    ATTACHED,               fvdypunch_clothesline           ;3
    2450 000124c0                   JJXM    ONGROUND,       176,176,fvdypunch_bellyflop,fvdypunch_lbowdrop ;4
    2451 00012590                   JJXM    BOUNCING,               fvdypunch_clothesline           ;5      
    2452 000125d0                   JJXM    ONTURNBKL,              fvdypunch_clothesline           ;6
    2453 00012610                   JJXM    BLOCK,                  fvdypunch_clothesline           ;7
    2454 00012650                   JJXM    DIZZY,                  fvdypunch_clothesline           ;8
    2455 00012690                   JJXM    DEAD,           176,176,fvdypunch_bellyflop,fvdypunch_lbowdrop ;9
    2456 00012760                   JJXM    OPPOVERHEAD,            fvdypunch_clothesline           ;10
    2457 000127a0                   JJXM    CLIMBTURNBKL,           fvdypunch_clothesline           ;11
    2458 000127e0                   JJXM    WAITANIM,               fvdypunch_clothesline           ;12
    2459 00012820                   JJXM    GRAPPLE,                fvdypunch_clothesline           ;13
    2460 00012860                   JJXM    MASTER,                 fvdypunch_clothesline           ;14
    2461 000128a0                   JJXM    SLAVE,                  fvdypunch_clothesline           ;15
    2462 000128e0                   JJXM    HEADHOLD,               fvdypunch_clothesline           ;16
    2463 00012920                   JJXM    HEADHELD,               fvdypunch_clothesline           ;19
    2464 00012960                   JJXM    CHOKEHOLD,              fvdypunch_clothesline           ;16
    2465 000129a0                   JJXM    PUPPET,                 fvdypunch_clothesline           ;20
    2466 000129e0                   JJXM    PUPPET2,                fvdypunch_clothesline           ;20
    2467 00012a20                   JJXM    INAIR2,                 fvdypunch_clothesline           ;21
    2468 00012a60                   JJXM_END
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   54

    2469                    
    2470                    
    2471                    *****
    2472 00012a80           fvdypunch_clothesline
    2473                    
    2474                    ;Only allow clothesline if near center of ring, and running toward opponent
    2475 00012a80     b5a1          move    *a13(MOVE_DIR),a1
         00012a90     04b0  
    2476 00012aa0     1fa1          btst    MOVE_LEFT_BIT,a1
    2477 00012ab0     cb06          jrnz    fvdylft
    2478                    ;Moving right
    2479                            
    2480 00012ac0     b5a0          move    *a13(OBJ_XPOSINT),a0
         00012ad0     0110  
    2481 00012ae0     0b40          cmpi    RING_X_MID+70h,a0
         00012af0     fb8f  
    2482 00012b00     c407          jrlt    fvdyok
    2483                    
    2484                    ;       LOCKUP
    2485                    
    2486 00012b10     0960          rets
    2487                    
    2488 00012b20           fvdylft
    2489                    ;Moving left
    2490                    
    2491 00012b20     b5a0          move    *a13(OBJ_XPOSINT),a0
         00012b30     0110  
    2492 00012b40     0b40          cmpi    RING_X_MID-70h,a0
         00012b50     fc6f  
    2493 00012b60     c701          jrgt    fvdyok
    2494                    
    2495                    ;       LOCKUP
    2496                    
    2497 00012b70     0960          rets
    2498 00012b80           fvdyok
    2499 00012b80     b5a1          move    *a13(MOVE_DIR),a1
         00012b90     04b0  
    2500 00012ba0     b5a0          move    *a13(NEW_FACING_DIR),a0 ;Current facing dir (9,10,6,5 only)
         00012bb0     04d0  
    2501 00012bc0     24a0          sll     5,a0
    2502 00012bd0     0b20          addi    fvdymv_tbl,a0
         00012be0 00012f30' 
    2503 00012c00     8600          move    *a0,a0,L
    2504 00012c10     4a01          btst    a0,a1
    2505 00012c20     ca01          jrz     fvdyyes
    2506                    
    2507                    ;       LOCKUP
    2508                    
    2509 00012c30     0960          rets
    2510 00012c40           fvdyyes
    2511                    
    2512                    ;Will lunge toward opponent
    2513                    ;Is facing opponent - nt running away from him!
    2514 00012c40     09e0          movi    dnk_fly_cline_anim,a0
         00012c50 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   55

    2515 00012c70     0d5f          calla   change_anim1a
         00012c80 00000000! 
    2516                    
    2517 00012ca0                   SETMODE INAIR
    2518                    
    2519 00012d50     5600          clr     a0
    2520 00012d60     b00d          move    a0,*a13(RUN_TIME)
         00012d70     07b0  
    2521                    
    2522 00012d80                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    2523                    
    2524 00012f20     0960          rets
    2525                    
    2526 00012f30 00000000  fvdymv_tbl      .long   0,0,0,0,0,MOVE_RIGHT_BIT,MOVE_RIGHT_BIT
    2527 00013010 00000000          .long   0,0,MOVE_LEFT_BIT,MOVE_LEFT_BIT
    2528                    
    2529                    *****
    2530 00013090           fvdypunch_lbowdrop
    2531 00013090           fvdypunch_bellyflop
    2532                    
    2533 00013090     09e0          movi    dnk_belly_anim,a0
         000130a0 00000000! 
    2534 000130c0     0d5f          calla   change_anim1a
         000130d0 00000000! 
    2535                    
    2536 000130f0                   SETMODE INAIR
    2537                    
    2538 000131a0     5600          clr     a0
    2539 000131b0     b00d          move    a0,*a13(RUN_TIME)
         000131c0     07b0  
    2540                    
    2541 000131d0                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    2542                    
    2543 00013370     0960          rets
    2544                    
    2545                    *****
    2546                    ;fvdypunch_lbowdrop
    2547                    ;
    2548                    ;       FACE24  dnk,lbowdrop_anim
    2549                    ;       calla   change_anim1a
    2550                    ;
    2551                    ;       WRSND   W_DOINK,LBOWDROP_T1,LBOWDROP_T2
    2552                    ;
    2553                    ;       rets
    2554                    
    2555                    ************
    2556 00013380           fvdyblock               ;2
    2557 00013380     b7a0          move    *a13(OBJ_XVEL),a0,L
         00013390     02d0  
    2558 000133a0     2be0          sra     1,a0
    2559 000133b0     b20d          move    a0,*a13(OBJ_XVEL),L
         000133c0     02d0  
    2560 000133d0                   SETMODE NORMAL
    2561 00013480     c000          jruc    std_block
         00013490     f8fe  
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   56

    2562                    
    2563                    ************
    2564 000134a0           fvdykick                ;8
    2565 000134a0           fvdysuper_kick  ;16
    2566                    *
    2567                    * MODE             DX  DZ       ACTION
    2568                    * ----------------------------------------------------
    2569                    * normal                        flying kick
    2570                    * dizzy                                 "
    2571                    *
    2572                    * onground      < 176 176       running stomp
    2573                    * onground      >               nothing
    2574                    *
    2575                    * running                       flying kick
    2576                    * bouncing                      flying kick
    2577                    *
    2578                    * onturnbkl                     flying kick
    2579                    * climbturnbkl                  flying kick
    2580                    *
    2581 000134a0                   JJXM_INIT
    2582 00013510                   JJXM    NORMAL,                 fvdykick_flyingkick             ;0
    2583 00013550                   JJXM    RUNNING,                fvdykick_flyingkick             ;1
    2584 00013590                   JJXM    INAIR,                  fvdykick_flyingkick             ;2
    2585 000135d0                   JJXM    ATTACHED,               fvdykick_flyingkick             ;3
    2586 00013610                   JJXM    ONGROUND,       176,176,fvdykick_runstomp,fvdykick_runstomp     ;4
    2587 000136c0                   JJXM    BOUNCING,               fvdykick_flyingkick             ;5
    2588 00013700                   JJXM    ONTURNBKL,              fvdykick_flyingkick             ;6
    2589 00013740                   JJXM    BLOCK,                  fvdykick_flyingkick             ;7
    2590 00013780                   JJXM    DIZZY,                  fvdykick_flyingkick             ;8
    2591 000137c0                   JJXM    DEAD,           176,176,fvdykick_runstomp,fvdykick_runstomp     ;9
    2592 00013860                   JJXM    OPPOVERHEAD,            fvdykick_flyingkick             ;10
    2593 000138a0                   JJXM    CLIMBTURNBKL,           fvdykick_flyingkick             ;11
    2594 000138e0                   JJXM    WAITANIM,               fvdykick_flyingkick             ;12
    2595 00013920                   JJXM    GRAPPLE,                fvdykick_flyingkick             ;13
    2596 00013960                   JJXM    MASTER,                 fvdykick_flyingkick             ;14
    2597 000139a0                   JJXM    SLAVE,                  fvdykick_flyingkick             ;15
    2598 000139e0                   JJXM    HEADHOLD,               fvdykick_flyingkick             ;16
    2599 00013a20                   JJXM    HEADHELD,               fvdykick_flyingkick             ;19
    2600 00013a60                   JJXM    CHOKEHOLD,              fvdykick_flyingkick             ;16
    2601 00013aa0                   JJXM    PUPPET,                 fvdykick_flyingkick             ;20
    2602 00013ae0                   JJXM    PUPPET2,                fvdykick_flyingkick             ;20
    2603 00013b20                   JJXM    INAIR2,                 fvdykick_flyingkick             ;21
    2604 00013b60                   JJXM_END
    2605                    
    2606                    *****
    2607 00013b80           fvdykick_flyingkick
    2608                    
    2609 00013b80     0d5f          calla   ck_ignore
         00013b90 00000000! 
    2610 00013bb0     c800          jrc     fvdyz
         00013bc0     fe77  
    2611                    
    2612                    
    2613 00013bd0     09e0          movi    dnk_flying_kick_anim,a0
         00013be0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   57

    2614 00013c00     0d5f          calla   change_anim1a
         00013c10 00000000! 
    2615                    
    2616 00013c30                   SETMODE INAIR
    2617                    
    2618 00013ce0                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    2619                    
    2620 00013e80     0960          rets
    2621                    
    2622                    *****
    2623 00013e90           fvdykick_runstomp
    2624 00013e90     09e0          movi    dnk_belly_anim,a0
         00013ea0 00000000! 
    2625 00013ec0     0d5f          calla   change_anim1a
         00013ed0 00000000! 
    2626                    
    2627 00013ef0                   SETMODE INAIR
    2628                    
    2629 00013fa0     5600          clr     a0
    2630 00013fb0     b00d          move    a0,*a13(RUN_TIME)
         00013fc0     07b0  
    2631                    
    2632 00013fd0                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    2633                    
    2634 00014170     0960          rets
    2635                    
    2636                    
    2637                    *****************************************************************************
    2638                    *
    2639                    
    2640 00014180           mode_inair      ;2
    2641                    
    2642 00014180     0960          rets
    2643                    
    2644                    *****************************************************************************
    2645                    *
    2646                    
    2647 00014190           mode_attached   ;3
    2648                    
    2649 00014190     0d5f          calla   keep_attached
         000141a0 00000000! 
    2650 000141c0     cb12          jrnz    fnrzstill_attached
    2651                    
    2652 000141d0     5600          clr     a0
    2653 000141e0     b20d          move    a0,*a13(ATTACH_PROC),L
         000141f0     03e0  
    2654                    
    2655 00014200                   SETMODE NORMAL
    2656                    
    2657 000142b0     09c0          movi    MODE_NORMAL,a0
         000142c0     0000  
    2658 000142d0     b00d          move    a0,*a13(ANIMODE)
         000142e0     0660  
    2659                    
    2660 000142f0           fnrzstill_attached
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   58

    2661                    
    2662 000142f0     0960          rets
    2663                    
    2664                    *****************************************************************************
    2665                    
    2666 00014300           mode_onground   ;4
    2667                    
    2668 00014300     0960          rets
    2669                    
    2670                    
    2671                    *****************************************************************************
    2672                    *
    2673                    * bouncing off ropes while running
    2674                    
    2675 00014310           mode_bouncing   ;5
    2676                    
    2677 00014310     5600          clr     a0
    2678 00014320     b20d          move    a0,*a13(OBJ_XVEL),L
         00014330     02d0  
    2679 00014340     b20d          move    a0,*a13(OBJ_ZVEL),L
         00014350     0310  
    2680                    
    2681 00014360     b5a0          move    *a13(ANIMODE),a0
         00014370     0660  
    2682 00014380     1fe0          btst    MODE_END_BIT,a0
    2683 00014390     ca20          jrz     dbhanot_ended
    2684                    
    2685 000143a0     b5a0          move    *a13(MOVE_DIR),a0
         000143b0     04b0  
    2686 000143c0     0bc0          xori    MOVE_LEFT+MOVE_RIGHT,a0 ;flip LEFT/RIGHT
         000143d0 0000000c  
    2687 000143f0     b00d          move    a0,*a13(MOVE_DIR)
         00014400     04b0  
    2688                    
    2689 00014410     b5a1          move    *a13(NEW_FACING_DIR),a1
         00014420     04d0  
    2690 00014430     0b81          andi    MOVE_UP+MOVE_DOWN,a1
         00014440 fffffffc  
    2691 00014460     5401          or      a0,a1                   ;LEFT or RIGHT
    2692 00014470     b02d          move    a1,*a13(FACING_DIR)     ;face same dir as run
         00014480     04c0  
    2693                    
    2694 00014490     09e0          movi    dnk_run2_anim,a0
         000144a0 00000000! 
    2695 000144c0     0d5f          calla   change_anim1a
         000144d0 00000000! 
    2696                    
    2697 000144f0                   SETMODE RUNNING
    2698                    
    2699                    ;       clr     a0
    2700                    ;       move    a0,*a13(GETUP_TIME)     ;in control
    2701                    
    2702 000145a0           dbhanot_ended
    2703 000145a0     0960          rets
    2704                    
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   59

    2705                    *****************************************************************************
    2706                    *
    2707                    * STANDING ON TOP OF TURNBUCKLE
    2708                    
    2709 000145b0           mode_onturnbkl  ;6
    2710                    
    2711                    ;       ;check unint
    2712                    ;       move    *a13(ANIMODE),a14
    2713                    ;       btst    MODE_UNINT_BIT,a14
    2714                    ;       jrnz    wzksno_interrupt
    2715                    
    2716 000145b0     b5a0          move    *a13(STICK_VAL_CUR),a0
         000145c0     0bc0  
    2717 000145d0     1fc0          btst    PLAYER_DOWN_BIT,a0
    2718 000145e0     ca12          jrz     wzksno_climbdown
    2719                    
    2720 000145f0     09e0          movi    dnk_climb_down_anim,a0
         00014600 00000000! 
    2721 00014620     0d5f          calla   change_anim1a
         00014630 00000000! 
    2722                    
    2723 00014650                   SETMODE CLIMBTURNBKL
    2724                    
    2725 00014700           wzksno_interrupt
    2726 00014700     0960          rets
    2727                    
    2728 00014710           wzksno_climbdown
    2729 00014710     b5a0          move    *a13(BUT_VAL_DOWN),a0
         00014720     0ba0  
    2730 00014730     0b80          andi    011111b,a0
         00014740 ffffffe0  
    2731 00014760     ca51          jrz     wzksz
    2732                    
    2733 00014770                   X32     a0
    2734 00014780     0b20          addi    wzksaction_table,a0
         00014790 00014880' 
    2735 000147b0     8600          move    *a0,a0,L
    2736 000147c0     0920          call    a0
    2737                    
    2738 000147d0     b5a5          move    *a13(PLYRNUM),a5
         000147e0     0580  
    2739 000147f0     09e2          movi    JUMP_ROPES,a2
         00014800 00000000! 
    2740 00014820     09c0          movi    1000,a0
         00014830     03e8  
    2741 00014840     0d5f          calla   ADD_IF_SILENT
         00014850 00000000! 
    2742                    
    2743 00014870     0960          rets
    2744                    
    2745                    
    2746                    ;For standing on top of turnbuckles
    2747                    
    2748 00014880           wzksaction_table
    2749 00014880 00014c80'         .long   wzksz,wzkspunch,wzksblock,wzksblock                     ;0-3
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   60

    2750 00014900 00014f50'         .long   wzkssuper_punch,wzkssuper_punch,wzksblock,wzksblock     ;4-7
    2751 00014980 00015210'         .long   wzkskick,wzkspunchkick,wzksblock,wzksblock              ;8-11
    2752 00014a00 00014f50'         .long   wzkssuper_punch,wzkspunchkick,wzksblock,wzksblock       ;12-15
    2753 00014a80 00015210'         .long   wzkssuper_kick,wzkssuper_kick,wzksblock,wzksblock       ;16-19
    2754 00014b00 00014f50'         .long   wzksgraboh,wzksgraboh,wzksblock,wzksblock               ;20-23
    2755 00014b80 00015210'         .long   wzkssuper_kick,wzkspunchkick,wzksblock,wzksblock        ;24-27
    2756 00014c00 00014f50'         .long   wzksgraboh,wzksgraboh,wzksblock,wzksblock               ;28-31
    2757                    
    2758                    ************
    2759 00014c80           wzksz
    2760 00014c80     0960          rets
    2761                    
    2762                    ************
    2763 00014c90           wzkspunch               ;1
    2764 00014c90           wzkspunchkick   ;1
    2765 00014c90           wzksblock               ;2
    2766                    
    2767 00014c90                   SETMODE INAIR
    2768 00014d40                   WRSND   W_DOINK,GRABFLING_T1,GRABFLING_T2
    2769                    
    2770 00014ee0     09e0          movi    dnk_4_blbowdrop_anim,a0         ;Buckle
         00014ef0 00000000! 
    2771 00014f10     0d5f          calla   change_anim1a
         00014f20 00000000! 
    2772 00014f40     0960          rets
    2773                    
    2774                    ************
    2775                    
    2776                    ;       movi    dnk_4_bjump_anim,a0             ;Buckle
    2777                    ;       calla   change_anim1a
    2778                    ;       rets
    2779                    
    2780                    ************
    2781 00014f50           wzkssuper_punch ;4
    2782                    ;If stick is toward opponent, then do hammer pound move
    2783                    ;       move    *a13(STICK_VAL_CUR),a0
    2784                    ;       move    *a13(NEW_FACING_DIR),a1
    2785                    ;       andi    0ch,a1
    2786                    ;       cmp     a0,a1
    2787                    
    2788                    ;       xor     a0,a1
    2789                    ;       andi    MOVE_LEFT|MOVE_RIGHT,a1
    2790                    ;       cmpi    MOVE_LEFT|MOVE_RIGHT,a1
    2791                    
    2792                    ;       jrnz    wzksgraboh                              ;Br=regular
    2793                    ;
    2794                    ;;Do hammer pound
    2795                    ;       movi    dnk_4_bhammer_anim,a0
    2796                    ;       calla   change_anim1a
    2797                    ;       rets
    2798                    ;
    2799                    ;
    2800 00014f50           wzksgraboh              ;1
    2801                    
    2802 00014f50                   SETMODE INAIR
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   61

    2803 00015000                   WRSND   W_DOINK,GRABFLING_T1,GRABFLING_T2
    2804                    
    2805 000151a0     09e0          movi    dnk_diveofftb_anim,a0
         000151b0 00000000! 
    2806 000151d0     0d5f          calla   change_anim1a
         000151e0 00000000! 
    2807 00015200     0960          rets
    2808                    
    2809                    ************
    2810 00015210           wzkskick                ;8
    2811 00015210           wzkssuper_kick  ;16
    2812                    
    2813 00015210                   SETMODE INAIR
    2814 000152c0                   WRSND   W_DOINK,GRABFLING_T1,GRABFLING_T2
    2815                    
    2816 00015460     09e0          movi    dnk_4_bstomp_anim,a0            ;Buckle
         00015470 00000000! 
    2817 00015490     0d5f          calla   change_anim1a
         000154a0 00000000! 
    2818 000154c0     0960          rets
    2819                    
    2820                    *****************************************************************************
    2821                    * blocking
    2822                    
    2823 000154d0           mode_block      ;7
    2824                    
    2825 000154d0     5600          clr     a0
    2826 000154e0     b00d          move    a0,*a13(CONSECUTIVE_HITS)
         000154f0     0e50  
    2827                    
    2828 00015500     b5a0          move    *a13(BLOCK_TIME),a0
         00015510     0d30  
    2829 00015520     1020          inc     a0
    2830 00015530     b00d          move    a0,*a13(BLOCK_TIME)
         00015540     0d30  
    2831 00015550     0b40          cmpi    160,a0
         00015560     ff5f  
    2832 00015570     c413          jrlt    pukwno
    2833                    
    2834 00015580     0d5f          calla   get_opp_plyrmode
         00015590 00000000! 
    2835 000155b0     0b40          cmpi    MODE_BLOCK,a0
         000155c0     fff8  
    2836 000155d0     cb0d          jrnz    pukwno
    2837 000155e0     b5a0          move    *a13(CLOSEST_XDIST),a0
         000155f0     0370  
    2838 00015600     0b40          cmpi    61h,a0
         00015610     ff9e  
    2839 00015620     c508          jrge    pukwno
    2840 00015630     0b40          cmpi    45,a0
         00015640     ffd2  
    2841 00015650     c405          jrlt    pukwno
    2842 00015660     b5a0          move    *a13(CLOSEST_ZDIST),a0
         00015670     0390  
    2843 00015680     0b40          cmpi    30,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   62

         00015690     ffe1  
    2844 000156a0     c461          jrlt    pukwpunchblock
    2845                    
    2846 000156b0           pukwno
    2847 000156b0     b5a0          move    *a13(BUT_VAL_DOWN),a0
         000156c0     0ba0  
    2848 000156d0     0b80          andi    011111b,a0
         000156e0 ffffffe0  
    2849 00015700     ca0c          jrz     pukwno_interrupt
    2850                    
    2851                            ;press.  if block isn't down, let mode_normal handle it
    2852 00015710     4c02          move    a0,a2                   ;save a0 from ...val_down
    2853 00015720     b5a0          move    *a13(BUT_VAL_CUR),a0
         00015730     0b90  
    2854 00015740     1fc0          btst    PLAYER_BLOCK_BIT,a0
    2855 00015750     ca08          jrz     pukwset_mode_normal
    2856 00015760     4c40          move    a2,a0                   ;restore a0 from ...val_down
    2857                    
    2858 00015770                   X32     a0
    2859 00015780     0b20          addi    pukwaction_table,a0
         00015790 000158b0' 
    2860 000157b0     8600          move    *a0,a0,L
    2861 000157c0     0920          call    a0
    2862                    
    2863 000157d0           pukwno_interrupt
    2864 000157d0     0960          rets
    2865                    
    2866 000157e0           pukwset_mode_normal
    2867 000157e0                   SETMODE NORMAL
    2868 00015890     c000          jruc    mode_normal
         000158a0     f450  
    2869                    
    2870 000158b0           pukwaction_table
    2871 000158b0 00015cb0'         .long   pukwz,pukwpunchblock,pukwz      ;0-2
    2872 00015910 00015cc0'         .long   pukwpunchblock          ;3
    2873 00015930 00015cb0'         .long   pukwz,pukwz,pukwz,pukwz,pukwz,pukwz,pukwz       ;4-10
    2874 00015a10 00015cb0'         .long   pukwz,pukwz,pukwz,pukwz,pukwz,pukwz,pukwz       ;11-17
    2875 00015af0 00015cb0'         .long   pukwz,pukwz,pukwz,pukwz,pukwz,pukwz,pukwz       ;18-24
    2876 00015bd0 00015cb0'         .long   pukwz,pukwz,pukwz,pukwz,pukwz,pukwz,pukwz       ;25-31
    2877                    
    2878                    ************
    2879 00015cb0           pukwz
    2880 00015cb0     0960          rets
    2881                    
    2882                    ************
    2883 00015cc0           pukwpunchblock  ;3
    2884                    *
    2885                    * MODE             DX  DZ       ACTION
    2886                    * ----------------------------------------------------
    2887                    * all                           push
    2888                    *
    2889                    
    2890                    ;This push has no collisions set!
    2891                    
    2892 00015cc0                   SETMODE NORMAL
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   63

    2893                    
    2894 00015d70     09e0          movi    dnk_4_push_anim,a0
         00015d80 00000000! 
    2895 00015da0     0d5f          calla   change_anim1a
         00015db0 00000000! 
    2896                    
    2897 00015dd0                   WRSND   W_DOINK,PUSH_T1,PUSH_T2
    2898                    
    2899 00015f70     0960          rets
    2900                    
    2901                    *****************************************************************************
    2902                    *
    2903                    
    2904 00015f80           mode_dizzy      ;8
    2905                    
    2906                    ;       move    *a13(GETUP_TIME),a0
    2907                    ;       jrnz    legzstill_going
    2908                    ;
    2909                    ;       calla   clear_damage_log
    2910                    ;
    2911                    ;       clr     a0
    2912                    ;       move    a0,*a13(STARS_FLAG)
    2913                    ;
    2914                    ;       SETMODE NORMAL
    2915                    ;
    2916                    ;legzstill_going
    2917 00015f80     0960          rets
    2918                    
    2919                    *****************************************************************************
    2920                    
    2921 00015f90            SUBR   mode_dead       ;9
    2922                    
    2923                            ;if our zombie bit is set, move
    2924 00015f90     b5ae          move    *a13(STATUS_FLAGS),a14
         00015fa0     0b50  
    2925 00015fb0     1f8e          btst    B_ZOMBIE,a14            ;are we already a zombie?
    2926 00015fc0     cb45          jrnz    adohzmb
    2927                    
    2928 00015fd0     1e2e          btst    B_DID_BUCKOFF,a14
    2929 00015fe0     cb00          jrnz    adohdone                        ;have we already done one this match?
         00015ff0     0086  
    2930                    
    2931 00016000     1e4e          btst    B_NO_BUCKOFF,a14
    2932 00016010     cb00          jrnz    adohdone                        ;have we already checked this round?
         00016020     0083  
    2933                    
    2934 00016030     1e6e          btst    B_DO_BUCKOFF,a14
    2935 00016040     cb00          jrnz    adohcount_btns          ;are we already counting?
         00016050     0081  
    2936                    
    2937 00016060     05ae          move    @royal_rumble,a14
         00016070 00000000! 
    2938 00016090     cb7c          jrnz    adohdone                        ;are we in royal rumble mode?
    2939                    
    2940                            ;We may have to fire up a come back to life process:
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   64

    2941                            ; IF this is the second round we've lost,
    2942                            ; AND IF our combo meter is flashing,
    2943                            ; AND IF the hit that killed us was wimpy and our WEAK_HIT bit is set,
    2944                            ; AND IF we haven't already done a buckoff this match,
    2945                            ; AND IF we're inside the ring,
    2946                            ; THEN start counting button presses.
    2947                    
    2948                            ;Is this the second round we've lost?
    2949                            ;(skip this test if we're in the 8-on-1 match)
    2950 000160a0     0d5f          calla   is_8_on_1
         000160b0 00000000! 
    2951 000160d0     c80c          jrc     adohck81
    2952 000160e0     05a0          move    @p1rounds,a0
         000160f0 00000000! 
    2953 00016110     b5ae          move    *a13(PLYR_SIDE),a14
         00016120     05b0  
    2954 00016130     cb03          jrnz    adohrndok
    2955 00016140     05a0          move    @p2rounds,a0
         00016150 00000000! 
    2956 00016170           adohrndok       TEST    a0
    2957 00016180     ca21          jrz     adohnobuck
    2958 00016190     c005          jruc    adohtcombo
    2959                    
    2960 000161a0           adohck81        ;it's 8-on-1.  only the player is allowed to buckoff.
    2961 000161a0     b5ae          move    *a13(PLYRNUM),a14
         000161b0     0580  
    2962 000161c0     0b4e          cmpi    2,a14
         000161d0     fffd  
    2963 000161e0     c51b          jrge    adohnobuck
    2964                    
    2965 000161f0           adohtcombo      ;is our combo meter lit?
    2966 000161f0     4da8          move    a13,a8
    2967 00016200     0d5f          calla   CHECK_COMBO_GO
         00016210 00000000! 
    2968 00016230     c416          jrlt    adohnobuck
    2969                    
    2970                            ;are we inside the ring?
    2971 00016240     b5ae          move    *a13(INRING),a14
         00016250     0560  
    2972 00016260     cb13          jrnz    adohnobuck
    2973                    
    2974                            ;Buckoff is NOT allowed if undertaker started his finish move or
    2975                            ;has completed his finish move!!!!
    2976 00016270     05ae          move    @in_finish_move,a14
         00016280 00000000! 
    2977 000162a0     cb0f          jrnz    adohnobuck
    2978 000162b0     05ae          move    @finish_completed,a14
         000162c0 00000000! 
    2979 000162e0     cb0b          jrnz    adohnobuck
    2980                    
    2981                            ;temp! - 314
    2982                            .if DEBUG
    2983                            DBEVENT BDE_MAYBE_BUCK,a13,L,*a13(WRESTLERNUM),W,*a13(PLYRNUM),W
    2984                            .endif
    2985                    
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   65

    2986                            ;possible buckoff.  Zero BUCKOFF_COUNT and set DO_BUCKOFF bit
    2987 000162f0     57ce          clr     a14
    2988 00016300     b1cd          move    a14,*a13(BUCKOFF_COUNT)
         00016310     0da0  
    2989 00016320     b5ae          move    *a13(STATUS_FLAGS),a14
         00016330     0b50  
    2990 00016340     0bae          ori     M_DO_BUCKOFF,a14
         00016350 00001000  
    2991 00016370     b1cd          move    a14,*a13(STATUS_FLAGS)
         00016380     0b50  
    2992 00016390     c04d          jruc    adohcount_btns
    2993                    
    2994 000163a0           adohnobuck      ;no buckoff.  set NO_BUCKOFF bit
    2995 000163a0     b5ae          move    *a13(STATUS_FLAGS),a14
         000163b0     0b50  
    2996 000163c0     0bae          ori     M_NO_BUCKOFF,a14
         000163d0 00002000  
    2997 000163f0     b1cd          move    a14,*a13(STATUS_FLAGS)
         00016400     0b50  
    2998 00016410     c044          jruc    adohdone
    2999                    
    3000 00016420           adohzmb ;we're a zombie.  WAITROLL is going to automatically roll us up
    3001                            ; until we can't roll anymore, and then our anim should make us
    3002                            ; stand up.  (There should always be a getup after a waitroll.)
    3003                            ; So all we do is wait for the MODE_END bit to get set, which tells
    3004                            ; us that we're standing up, outside, with a clear lane to either
    3005                            ; side.  At that point we begin running toward whichever side of
    3006                            ; the arena is farther from the camera.  We don't want to be seen
    3007                            ; vanishing when we hit the edge.
    3008                    
    3009                            ;Update ZOMBIE_TIME.  If we've been a zombie for ten seconds,
    3010                            ; something has probably gone wrong with our trip to the side
    3011                            ; of the arena, so we'll just transform now.
    3012 00016420     b5ae          move    *a13(ZOMBIE_TIME),a14
         00016430     0db0  
    3013 00016440     102e          inc     a14
    3014 00016450     b1cd          move    a14,*a13(ZOMBIE_TIME)
         00016460     0db0  
    3015 00016470     0b4e          cmpi    TSEC*10,a14
         00016480     fded  
    3016 00016490     c404          jrlt    adohzmb_ok
    3017                    
    3018 000164a0           adohchange      ;timeout!
    3019 000164a0     0d5f          calla   change_wrestler
         000164b0 00000000! 
    3020 000164d0     c038          jruc    adohdone
    3021 000164e0           adohzmb_ok
    3022                    
    3023 000164e0     b5ae          move    *a13(ANIMODE),a14
         000164f0     0660  
    3024 00016500     1fee          btst    MODE_END_BIT,a14
    3025 00016510     ca34          jrz     adohdone
    3026                    
    3027 00016520           adohrun ;begin running left if WORLDTLX > RING_X_CENTER-200, right otherwise.
    3028                    
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   66

    3029                            ;set CAN_XFORM bit so we can transform
    3030 00016520     b5ae          move    *a13(STATUS_FLAGS),a14
         00016530     0b50  
    3031 00016540     0bae          ori     M_CAN_XFORM,a14
         00016550 00000040  
    3032 00016570     b1cd          move    a14,*a13(STATUS_FLAGS)
         00016580     0b50  
    3033                    
    3034 00016590     07ae          move    @WORLDTLX,a14,L
         000165a0 00000000! 
    3035 000165c0     2a0e          sra     16,a14
    3036 000165d0     0b4e          cmpi    RING_X_CENTER-200,a14
         000165e0     fc95  
    3037 000165f0     c513          jrge    adohrun_left
    3038                    
    3039 00016600           adohrun_right
    3040 00016600     190e          movk    MOVE_RIGHT,a14
    3041 00016610     b1cd          move    a14,*a13(STICK_VAL_CUR)
         00016620     0bc0  
    3042 00016630     09e0          movi    start_run_anim,a0
         00016640 00000000! 
    3043 00016660     0d5f          calla   change_anim1a
         00016670 00000000! 
    3044                    
    3045 00016690     b5ae          move    *a13(WRESTLERNUM),a14
         000166a0     0590  
    3046 000166b0                   X32     a14
    3047 000166c0     0b2e          addi    adohrun_speeds,a14
         000166d0 00017400' 
    3048 000166f0     87ce          move    *a14,a14,L
    3049 00016700     b3cd          move    a14,*a13(OBJ_XVEL),L
         00016710     02d0  
    3050 00016720     c013          jruc    adohdone
    3051                    
    3052 00016730           adohrun_left
    3053 00016730     188e          movk    MOVE_LEFT,a14
    3054 00016740     b1cd          move    a14,*a13(STICK_VAL_CUR)
         00016750     0bc0  
    3055 00016760     09e0          movi    start_run_anim,a0
         00016770 00000000! 
    3056 00016790     0d5f          calla   change_anim1a
         000167a0 00000000! 
    3057                    
    3058 000167c0     b5ae          move    *a13(WRESTLERNUM),a14
         000167d0     0590  
    3059 000167e0                   X32     a14
    3060 000167f0     0b2e          addi    adohrun_speeds,a14
         00016800 00017400' 
    3061 00016820     87ce          move    *a14,a14,L
    3062 00016830     03ae          neg     a14
    3063 00016840     b3cd          move    a14,*a13(OBJ_XVEL),L
         00016850     02d0  
    3064                    
    3065                    
    3066 00016860     0960  adohdone        rets
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   67

    3067                    
    3068 00016870           adohcount_btns
    3069                            ;count new presses this tick and add to BUCKOFF_COUNT
    3070 00016870     b5a0          move    *a13(BUT_VAL_DOWN),a0
         00016880     0ba0  
    3071 00016890     5621          clr     a1
    3072 000168a0     6a0e  adohlp0 lmo     a0,a14
    3073 000168b0     ca04          jrz     adohend0
    3074 000168c0     69c0          rl      a14,a0
    3075 000168d0     2020          sla     1,a0
    3076 000168e0     1021          inc     a1
    3077 000168f0     c0fa          jruc    adohlp0
    3078 00016900     b5a0  adohend0        move    *a13(BUCKOFF_COUNT),a0
         00016910     0da0  
    3079                    
    3080 00016920     4020          add     a1,a0
    3081 00016930     b00d          move    a0,*a13(BUCKOFF_COUNT)
         00016940     0da0  
    3082                    
    3083 00016950     0b40          cmpi    50,a0
         00016960     ffcd  
    3084 00016970     c501          jrge    adohdobuck
    3085                    
    3086                            .ref    obj_del1c,dec_to_asc,concat_rom_string,mess_spacing
    3087                            .ref    ogmd10_ascii,message_ascii,mess_cursx,mess_cursy
    3088                            .ref    message_palette,print_string,BINBCD,SGMD8GLD,mess_objid
    3089                            .ref    copy_string
    3090                    
    3091 00016980     0960          rets
    3092                    
    3093 00016990           adohdobuck      ;SUCCESS!  Do the buckoff.
    3094                    
    3095                            ;temp! - 314
    3096                            .if DEBUG
    3097                            DBEVENT BDE_DONE_BUCK,a13,L,*a13(WRESTLERNUM),W,*a13(PLYRNUM),W
    3098                            .endif
    3099                    
    3100                            ;clear my combo meter
    3101 00016990     0d5f          calla   clear_combo_meter
         000169a0 00000000! 
    3102                    
    3103                    ;       ;If we've been pinned, send the pinner to his buckoff anim.
    3104                    ;       move    *a13(STATUS_FLAGS),a14
    3105                    ;       btst    B_PINNED,a14
    3106                    ;       jrz     adohme_not_pinned
    3107                    ;
    3108                    ;       move    *a13(WHOPINNEDME),a0,L
    3109                    
    3110                            ;If any opponent has pinned, send him to his buckoff anim.
    3111 000169c0     09c0          movi    NUM_WRES,a0
         000169d0     0007  
    3112 000169e0     09e1          movi    process_ptrs,a1
         000169f0 00000000! 
    3113 00016a10     9622  adohlp2 move    *a1+,a2,L
    3114 00016a20     ca06          jrz     adohnxt2
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   68

    3115 00016a30     b64e          move    *a2(STATUS_FLAGS),a14,L
         00016a40     0b50  
    3116 00016a50     1fce          btst    B_DID_PIN,a14
    3117 00016a60     ca02          jrz     adohnxt2
    3118 00016a70     4c40          move    a2,a0
    3119 00016a80     c001          jruc    adohdone2
    3120 00016a90     3d20  adohnxt2        dsj     a0,adohlp2
    3121 00016aa0           adohdone2
    3122                    
    3123                            ;clear his pinned bit
    3124 00016aa0     b40e          move    *a0(STATUS_FLAGS),a14
         00016ab0     0b50  
    3125 00016ac0     0b8e          andni   M_DID_PIN,a14
         00016ad0 00000002  
    3126 00016af0     b1c0          move    a14,*a0(STATUS_FLAGS)
         00016b00     0b50  
    3127                    
    3128                            ;if his DID_RAISEARM bit is set, then it was probably taker and he's
    3129                            ; no longer on top of us, so skip the buckoff and just let him get
    3130                            ; his raisearm anim shut off along with the other drones.
    3131 00016b10     b40e          move    *a0(STATUS_FLAGS),a14
         00016b20     0b50  
    3132 00016b30     1dee          btst    B_DID_RAISEARM,a14
    3133 00016b40     cb0a          jrnz    adohme_not_pinned
    3134                    
    3135                            ;do his bucked off anim (stick it into special_move_addr?)
    3136 00016b50     4c08          move    a0,a8
    3137 00016b60                   FACETBL adohbuckoff_tbl,a8
    3138 00016bd0     b208          move    a0,*a8(SPECIAL_MOVE_ADDR),L
         00016be0     0930  
    3139                    
    3140 00016bf0           adohme_not_pinned
    3141                            ;back to life...
    3142 00016bf0     09ce          movi    MODE_ONGROUND,a14
         00016c00     0004  
    3143 00016c10     b1cd          move    a14,*a13(PLYRMODE)
         00016c20     05c0  
    3144                    
    3145                            ;get two pixels back
    3146 00016c30     1840          movk    2,a0
    3147 00016c40     b5a1          move    *a13(PLYRNUM),a1
         00016c50     0580  
    3148 00016c60     0d5f          calla   adjust_health
         00016c70 00000000! 
    3149                    
    3150                            ;no getup meter
    3151 00016c90     57ce          clr     a14
    3152 00016ca0     b1cd          move    a14,*a13(GETUP_TIME)
         00016cb0     0460  
    3153 00016cc0     b1cd          move    a14,*a13(DELAY_METER)
         00016cd0     0ad0  
    3154                    
    3155                    ;If died in a combo, allow buckoff to continue
    3156 00016ce0     5600          clr     a0
    3157 00016cf0     b00d          move    a0,*a13(I_WILL_DIE)
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   69

         00016d00     0b30  
    3158                    
    3159                            ;reset my pal, just in case.
    3160 00016d10     b9ad          move    *a13(MY_PAL),*a13(OBJ_PAL)
         00016d20     08a0  
         00016d30     07a0  
    3161                    
    3162                    ;Slide out 2nd wind message
    3163 00016d40     4da8          move    a13,a8
    3164 00016d50     09ca          movi    41,a10
         00016d60     0029  
    3165                            .ref    MOVE_NAME_ANNC
    3166 00016d70                   CREATE  MESSAGE_PID,MOVE_NAME_ANNC
    3167                    
    3168                            ;clear DO_BUCKOFF|PINABLE|PINNED, and set DID_BUCKOFF|NEW_BUCKOFF
    3169 00016df0     b7ae          move    *a13(STATUS_FLAGS),a14,L
         00016e00     0b50  
    3170 00016e10     0bae          ori     M_DID_BUCKOFF|M_NEW_BUCKOFF,a14
         00016e20 00024000  
    3171 00016e40     0b8e          andni   M_DO_BUCKOFF|M_PINNED|M_PINABLE,a14
         00016e50 00001220  
    3172 00016e70     b3cd          move    a14,*a13(STATUS_FLAGS),L
         00016e80     0b50  
    3173                    
    3174                            ;convulse
    3175 00016e90                   FACETBL hitonground_tbl
    3176 00016f00     0d5f          calla   change_anim1a
         00016f10 00000000! 
    3177                    
    3178                            ;set nocollis bit
    3179 00016f30     b5ae          move    *a13(ANIMODE),a14
         00016f40     0660  
    3180 00016f50     0bae          ori     MODE_NOCOLLIS,a14
         00016f60 00000100  
    3181 00016f80     b1cd          move    a14,*a13(ANIMODE)
         00016f90     0660  
    3182                    
    3183                            ;if anyone has done a raisearm, put 'em back in a stand.
    3184 00016fa0     09e0          movi    process_ptrs,a0
         00016fb0 00000000! 
    3185 00016fd0     09c1          movi    NUM_WRES,a1
         00016fe0     0007  
    3186 00016ff0     9602  adohlp1 move    *a0+,a2,L
    3187 00017000     ca09          jrz     adohnxt1
    3188 00017010     b64e          move    *a2(STATUS_FLAGS),a14,L
         00017020     0b50  
    3189 00017030     1dee          btst    B_DID_RAISEARM,a14
    3190 00017040     ca05          jrz     adohnxt1
    3191                    
    3192                            ;just clear the DID_RAISEARM bit.  Anim scripts will do the rest.
    3193 00017050     0b8e          andni   M_DID_RAISEARM,a14
         00017060 00010000  
    3194 00017080     b3c2          move    a14,*a2(STATUS_FLAGS),L
         00017090     0b50  
    3195                    
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   70

    3196                    
    3197 000170a0     3d81  adohnxt1        dsj     a1,adohlp1
    3198                    
    3199                            ;If anyone has turned into a drone, turn 'em back.
    3200 000170b0     57ce          clr     a14
    3201 000170c0     07a0          move    @process_ptrs,a0,L
         000170d0 00000000! 
    3202 000170f0     ca02          jrz     adohadc1
    3203 00017100     b1c0          move    a14,*a0(PLYR_TYPE)
         00017110     05a0  
    3204 00017120     07a0  adohadc1        move    @process_ptrs+20h,a0,L
         00017130 00000020! 
    3205 00017150     ca02          jrz     adohadc2
    3206 00017160     b1c0          move    a14,*a0(PLYR_TYPE)
         00017170     05a0  
    3207 00017180           adohadc2
    3208                    
    3209                            ;call init_reduce_bog, because match_timer clears it when it
    3210                            ; sees one team dead.
    3211 00017180     0d5f          calla   init_reduce_bog
         00017190 00000000! 
    3212                    
    3213                            ;if there's an ANNOUNCE_RND_WINNER process waiting,
    3214                            ; wake it up so it'll see us alive and die.
    3215 000171b0     09c0          movi    ANNC_PID,a0
         000171c0     012e  
    3216 000171d0     5621          clr     a1
    3217 000171e0     03e1          not     a1
    3218 000171f0     0d5f          calla   EXISTP
         00017200 00000000! 
    3219 00017220     ca0a          jrz     adohrets
    3220                    
    3221 00017230     b60e          move    *a0(PWAKE),a14,L
         00017240     00e0  
    3222 00017250     0b6e          cmpi    arw_bwait,a14
         00017260 ffffffff! 
    3223 00017280     cb04          jrne    adohuh_oh
    3224                    
    3225 00017290     182e          movk    1,a14
    3226 000172a0     b1c0          move    a14,*a0(PTIME)
         000172b0     0030  
    3227 000172c0     0300          jruc    adohrets
    3228                    
    3229 000172d0           adohuh_oh
    3230                            .if DEBUG       
    3231                            LOCKUP  ;announce_rnd_winner ISN'T at arw_bwait!
    3232                            .endif
    3233 000172d0     0960  adohrets        rets
    3234                    
    3235                    
    3236 000172e0           adohbuckoff_tbl
    3237 000172e0                   REFLONG hrt_buckoff_anim        ;Bret
    3238 00017300                   REFLONG rzr_buckoff_anim        ;Razor
    3239 00017320                   REFLONG und_buckoff_anim        ;Taker
    3240 00017340                   REFLONG yok_buckoff_anim        ;Yoko
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   71

    3241 00017360                   REFLONG shn_buckoff_anim        ;Shawn
    3242 00017380                   REFLONG bam_buckoff_anim        ;Bam Bam
    3243 000173a0                   REFLONG dnk_buckoff_anim        ;Doink
    3244 000173c0 00000000          .long   0
    3245 000173e0                   REFLONG lex_buckoff_anim        ;Lex
    3246                    
    3247                    
    3248 00017400           adohrun_speeds
    3249 00017400 00064000          .long   HRT_XRUN
    3250 00017420 00060000          .long   RZR_XRUN
    3251 00017440 00064000          .long   UND_XRUN
    3252 00017460 00058000          .long   YOK_XRUN
    3253 00017480 00064000          .long   SHN_XRUN
    3254 000174a0 00064000          .long   BAM_XRUN
    3255 000174c0 00064000          .long   DNK_XRUN
    3256 000174e0 00000000          .long   0
    3257 00017500 00060000          .long   LEX_XRUN
    3258                    
    3259                    
    3260 00017520            SUBRP  ani_end_anim
    3261 00017520     8004          .word   ANI_SETPLYRMODE,MODE_NORMAL
    3262 00017540     8002          .word   ANI_SETMODE,MODE_NORMAL
    3263 00017560     8049          .word   ANI_END 
    3264                    
    3265                    *****************************************************************************
    3266                    * opponent held overhead
    3267                    
    3268 00017570           mode_oppoverhead ;10
    3269                    
    3270 00017570     0960          rets
    3271                    
    3272                    *****************************************************************************
    3273                    *
    3274                    * CLIMBING UP OR DOWN THE TURNBUCKLE
    3275                    
    3276 00017580           mode_climbturnbkl       ;11
    3277                    
    3278 00017580     0960          rets
    3279                    
    3280                    
    3281                    *****************************************************************************
    3282                    
    3283 00017590           mode_waitanim   ;12
    3284                    
    3285 00017590     b5a0          move    *a13(ANIMODE),a0
         000175a0     0660  
    3286 000175b0     1fe0          btst    MODE_END_BIT,a0
    3287 000175c0     ca03          jrz     vnbanot_ended
    3288                    
    3289 000175d0     b7a0          move    *a13(CODE_ADDR),a0,L
         000175e0     0430  
    3290 000175f0     0920          call    a0
    3291                    
    3292 00017600           vnbanot_ended
    3293 00017600     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   72

    3294                    
    3295                    
    3296                    *****************************************************************************
    3297                    
    3298 00017610           mode_grapple    ;13
    3299                    
    3300 00017610     0960          rets
    3301                    
    3302                    *****************************************************************************
    3303                    
    3304 00017620           mode_master     ;14
    3305                    
    3306 00017620     0d5f          calla   master_keep_attached    ;keep slave attached to me
         00017630 00000000! 
    3307                    
    3308 00017650     0960          rets
    3309                    
    3310                    *****************************************************************************
    3311                    
    3312 00017660           mode_slave      ;15
    3313 00017660     0960          rets
    3314                    
    3315                    
    3316                    
    3317 00017670            SUBR   bozo_check
    3318                    
    3319                    ;Bozo check
    3320 00017670     b5a0          move    *a13(SPUNCHB_COUNT),a0
         00017680     0820  
    3321 00017690     b5a1          move    *a13(SKICKB_COUNT),a1
         000176a0     0840  
    3322 000176b0     b5a2          move    *a13(BLOCKB_COUNT),a2
         000176c0     0810  
    3323 000176d0     4001          add     a0,a1
    3324 000176e0     4022          add     a1,a2
    3325 000176f0     0b42          cmpi    18,a2
         00017700     ffed  
    3326 00017710     c417          jrlt    xhzmno_bozo
    3327                    ;Lots of super buttons and blocks have been hit!
    3328                    ;Reverse out
    3329                    ;Do reversal unless I have been immobilized!
    3330                    ;If not, set immobilize time for opponent and reverse
    3331                    
    3332 00017720     b5ae          move    *a13(IMMOBILIZE_TIME),a14
         00017730     0ae0  
    3333 00017740     cb14          jrnz    xhzmno_bozo                             ;ignore
    3334                    
    3335                            ;target WHOHITME -- don't hit anyone else
    3336 00017750                   SMRTTGT a13,WHOHITME
    3337                    
    3338                            ;immobilize WHOHITME
    3339 000177f0     b7a0          move    *a13(WHOHITME),a0,L
         00017800     04e0  
    3340 00017810     180e          movk    32,a14
    3341 00017820     b1c0          move    a14,*a0(IMMOBILIZE_TIME)
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   73

         00017830     0ae0  
    3342                    
    3343 00017840     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         00017850 00000000! 
    3344                            
    3345 00017870     0de0          setc
    3346 00017880     0960          rets
    3347                    
    3348 00017890           xhzmno_bozo
    3349 00017890     0320          clrc
    3350 000178a0     0960          rets
    3351                    
    3352                    *****************************************************************************
    3353                    
    3354 000178b0           mode_headhold   ;16
    3355                    
    3356                    ;Bozo power move
    3357 000178b0     0d3f          callr   bozo_check
         000178c0     ffda  
    3358 000178d0     c929          jrnc    wdtqfail
    3359                    
    3360 000178e0                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    3361                    
    3362 00017a80     09e0          movi    dnk_3_head_slam_anim,a0
         00017a90 00000000! 
    3363 00017ab0     05ae          move    @PCNT,a14
         00017ac0 00000000! 
    3364 00017ae0     1fee          btst    0,a14
    3365 00017af0     ca03          jrz     wdtqtag
    3366 00017b00     09e0          movi    dnk_3_pile_driver_anim,a0
         00017b10 00000000! 
    3367 00017b30     0d5f  wdtqtag calla   change_anim1a
         00017b40 00000000! 
    3368                    
    3369 00017b60     0960          rets
    3370                    
    3371 00017b70           wdtqfail
    3372 00017b70     b7a0          move    *a13(WHOIHIT),a0,L
         00017b80     0500  
    3373 00017b90     b400          move    *a0(PLYRMODE),a0
         00017ba0     05c0  
    3374 00017bb0     0b40          cmpi    MODE_HEADHELD,a0
         00017bc0     ffec  
    3375 00017bd0     cb10          jrnz    wdtqexit
    3376                    
    3377                    ;       move    *a13(ATTACH_PROC),a10,L
    3378                    ;       jrz     wdtqexit
    3379                    
    3380 00017be0     b5a0          move    *a13(ANIMODE),a0
         00017bf0     0660  
    3381 00017c00     1fa0          btst    MODE_UNINT_BIT,a0
    3382 00017c10     cb0b          jrnz    wdtqno_interrupt
    3383                    
    3384 00017c20     b5a0          move    *a13(BUT_VAL_DOWN),a0
         00017c30     0ba0  
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   74

    3385 00017c40     0b80          andi    011111b,a0
         00017c50 ffffffe0  
    3386 00017c70                   X32     a0
    3387 00017c80     0b20          addi    wdtqaction_table,a0
         00017c90 00017eb0' 
    3388 00017cb0     8600          move    *a0,a0,L
    3389 00017cc0     0920          call    a0
    3390                    
    3391 00017cd0           wdtqno_interrupt
    3392 00017cd0     0960          rets
    3393                    
    3394 00017ce0           wdtqexit
    3395 00017ce0     b7ae          move    *a13(OBJ_ZPOS),a14,L
         00017cf0     0140  
    3396 00017d00     0d0e          subi    [6,0],a14
         00017d10 fff9ffff  
    3397 00017d30     b3cd          move    a14,*a13(OBJ_ZPOS),L
         00017d40     0140  
    3398                    
    3399 00017d50     1941          movk    MOVE_DOWN_RIGHT,a1
    3400 00017d60     b5a0          move    *a13(OBJ_CONTROL),a0
         00017d70     0780  
    3401 00017d80     1f60          btst    B_FLIPH,a0
    3402 00017d90     ca01          jrz     wdtqright
    3403 00017da0     18c1          movk    MOVE_DOWN_LEFT,a1
    3404 00017db0     b02d  wdtqright       move    a1,*a13(FACING_DIR)
         00017dc0     04c0  
    3405 00017dd0     b02d          move    a1,*a13(NEW_FACING_DIR)
         00017de0     04d0  
    3406                    
    3407 00017df0                   SETMODE NORMAL
    3408                    
    3409 00017ea0     0960          rets
    3410                    
    3411 00017eb0           wdtqaction_table
    3412 00017eb0 000182b0'         .long   wdtqz,wdtqpunch,wdtqblock,wdtqblock                     ;0-3
    3413 00017f30 000187a0'         .long   wdtqsuper_punch,wdtqsuper_punch,wdtqblock,wdtqblock     ;4-7
    3414 00017fb0 00018a50'         .long   wdtqkick,wdtqpunchkick,wdtqblock,wdtqblock              ;8-11
    3415 00018030 000187a0'         .long   wdtqsuper_punch,wdtqpunchkick,wdtqblock,wdtqblock       ;12-15
    3416 000180b0 00018c90'         .long   wdtqsuper_kick,wdtqsuper_kick,wdtqblock,wdtqblock       ;16-19
    3417 00018130 000182b0'         .long   wdtqgraboh,wdtqgraboh,wdtqblock,wdtqblock               ;20-23
    3418 000181b0 00018c90'         .long   wdtqsuper_kick,wdtqpunchkick,wdtqblock,wdtqblock        ;24-27
    3419 00018230 000182b0'         .long   wdtqgraboh,wdtqgraboh,wdtqblock,wdtqblock               ;28-31
    3420                    
    3421                    
    3422                    ************
    3423 000182b0           wdtqblock
    3424 000182b0           wdtqgraboh
    3425 000182b0           wdtqz           ;0
    3426 000182b0     0960          rets
    3427                    
    3428                    ************
    3429                    
    3430 000182c0           wdtqpunch               ;1
    3431 000182c0     0d5f          CALLA   FIND_AND_KILL_ENDLESS
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   75

         000182d0 00000000! 
    3432                    ;If stick is toward opponent, then do quick punches
    3433 000182f0     b5a0          move    *a13(STICK_VAL_CUR),a0
         00018300     0bc0  
    3434 00018310     b5a1          move    *a13(NEW_FACING_DIR),a1
         00018320     04d0  
    3435 00018330     0b81          andi    0ch,a1
         00018340 fffffff3  
    3436 00018360     4801          cmp     a0,a1
    3437 00018370     cb21          jrnz    wdtqtag2
    3438                    
    3439 00018380                   WRSND   W_DOINK,UPRCUT_T1,UPRCUT_T2
    3440 00018520     09e0          movi    dnk_uppercuts_to_head_anim,a0
         00018530 00000000! 
    3441 00018550     0d5f          calla   change_anim1a
         00018560 00000000! 
    3442 00018580     0960          rets
    3443                    
    3444 00018590     09e0  wdtqtag2        movi    dnk_uppercut_to_head_anim,a0
         000185a0 00000000! 
    3445 000185c0     0d5f          calla   change_anim1a
         000185d0 00000000! 
    3446 000185f0                   WRSND   W_DOINK,UPRCUT_T1,UPRCUT_T2
    3447 00018790     0960          rets
    3448                    
    3449                    ************
    3450 000187a0           wdtqsuper_punch ;4
    3451                    
    3452 000187a0           do_pile
    3453                    ;This flag is only set if doink has done repeated uppercuts!
    3454 000187a0     b5a0          move    *a13(USR_VAR2),a0
         000187b0     0860  
    3455 000187c0     caae          jrz     wdtqz
    3456                    
    3457 000187d0     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         000187e0 00000000! 
    3458 00018800     b5a0          move    *a13(STICK_VAL_CUR),a0
         00018810     0bc0  
    3459 00018820     1fc0          btst    PLAYER_DOWN_BIT,a0
    3460 00018830     caa8          jrz     wdtqpunch
    3461                    
    3462 00018840                   WRSND   W_DOINK,UPRCUT_T1,UPRCUT_T2
    3463 000189e0     09e0          movi    dnk_3_pile_driver_anim,a0
         000189f0 00000000! 
    3464 00018a10     0d5f          calla   change_anim1a
         00018a20 00000000! 
    3465 00018a40     0960          rets
    3466                    
    3467 00018a50           wdtqkick
    3468 00018a50           wdtqpunchkick
    3469 00018a50     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         00018a60 00000000! 
    3470 00018a80                   WRSND   W_DOINK,KICK_T1,KICK_T2
    3471                    
    3472 00018c20     09e0          movi    dnk_3_knee_to_head_anim,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   76

         00018c30 00000000! 
    3473 00018c50     0d5f          calla   change_anim1a
         00018c60 00000000! 
    3474 00018c80     0960          rets
    3475                    
    3476 00018c90           wdtqsuper_kick  ;16
    3477                    ;If stick is toward opponent, then do quick knees
    3478 00018c90     b5a0          move    *a13(STICK_VAL_CUR),a0
         00018ca0     0bc0  
    3479 00018cb0     b5a1          move    *a13(NEW_FACING_DIR),a1
         00018cc0     04d0  
    3480 00018cd0     0b81          andi    0ch,a1
         00018ce0 fffffff3  
    3481 00018d00     4801          cmp     a0,a1
    3482 00018d10     cb00          jrnz    wdtqz
         00018d20     ff58  
    3483                    
    3484                    ;Quick knees
    3485 00018d30     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         00018d40 00000000! 
    3486 00018d60                   WRSND   W_DOINK,KICK_T1,KICK_T2
    3487 00018f00     09e0          movi    dnk_3_knees_to_head_anim,a0
         00018f10 00000000! 
    3488 00018f30     0d5f          calla   change_anim1a
         00018f40 00000000! 
    3489 00018f60     0960          rets
    3490                    
    3491                    
    3492                    *****************************************************************************
    3493 00018f70           mode_puppet2    ;17
    3494                    
    3495                            .if DEBUG
    3496                            LOCKUP          ;should never be in this mode anymore.
    3497                            .endif
    3498                    
    3499 00018f70     0960          rets
    3500                    
    3501                    *****************************************************************************
    3502                    
    3503 00018f80           mode_headheld   ;19
    3504 00018f80     b5a0          move    *a13(ANIMODE),a0
         00018f90     0660  
    3505 00018fa0     1f40          btst    MODE_NOGRAVITY_BIT,a0
    3506 00018fb0     cb80          janz    mode_choking
         00018fc0 00000000! 
    3507                    
    3508                    ;Bozo reversal
    3509 00018fe0     0d3f          callr   bozo_check
         00018ff0     fe67  
    3510 00019000     c932          jrnc    xysffail
    3511                    
    3512 00019010                   PUSH    a8
    3513 00019020     4da8          move    a13,a8
    3514 00019030     0d5f          CALLA   DO_REVERSAL
         00019040 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   77

    3515 00019060     0d5f          CALLA   DO_REVERSAL_MESS
         00019070 00000000! 
    3516 00019090                   PULL    a8
    3517                    
    3518 000190a0                   WRSND   W_DOINK,FLYKICK_T1,FLYKICK_T2
    3519                    
    3520 00019240     09e0          movi    dnk_3_head_slam_anim,a0
         00019250 00000000! 
    3521 00019270     05ae          move    @PCNT,a14
         00019280 00000000! 
    3522 000192a0     1fee          btst    0,a14
    3523 000192b0     ca03          jrz     xysftag
    3524 000192c0     09e0          movi    dnk_3_pile_driver_anim,a0
         000192d0 00000000! 
    3525 000192f0     0d5f  xysftag calla   change_anim1a
         00019300 00000000! 
    3526                    
    3527 00019320     0960          rets
    3528                    
    3529 00019330           xysffail
    3530                    
    3531                    ;He may have let me go by hitting his block butn!
    3532 00019330     b7a0          move    *a13(ATTACH_PROC),a0,L
         00019340     03e0  
    3533 00019350     cb19          jrnz    xysfno_luck
    3534                    
    3535                    ;Make sure this guy is on ground
    3536 00019360     b5a0          move    *a13(OBJ_YPOSINT),a0
         00019370     0130  
    3537 00019380     b5a1          move    *a13(GROUND_Y),a1
         00019390     0570  
    3538 000193a0     4820          cmp     a1,a0                   ;a0-a1
    3539 000193b0     c713          jrgt    xysfno_luck
    3540                    
    3541                    ;hit_gnd
    3542                    
    3543 000193c0                   WRSND   W_DOINK,PUSH_T2
    3544 00019490     09e0          movi    dnk_3_head_held_stand_anim,a0
         000194a0 00000000! 
    3545 000194c0     0d5f          calla   change_anim1a
         000194d0 00000000! 
    3546                    
    3547 000194f0           xysfno_luck
    3548 000194f0     0960          rets
    3549                    
    3550                    *****************************************************************************
    3551 00019500            SUBR   mode_puppet     ;20     (used by everyone)
    3552                    
    3553              006a  vilotimeout_val .equ    TSEC*2
    3554                    
    3555                            ;if we're attached, don't check anything.
    3556 00019500     b7a0          move    *a13(ATTACH_PROC),a0,L
         00019510     03e0  
    3557 00019520     ca04          jrz     vilocheck
    3558 00019530     b601          move    *a0(ATTACH_PROC),a1,L
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   78

         00019540     03e0  
    3559 00019550     482d          cmp     a1,a13
    3560 00019560     ca32          jreq    vilodone
    3561                    
    3562 00019570           vilocheck       ;figure out if we're newly in mode_puppet or if we've been
    3563                            ; here awhile.
    3564 00019570     b5ae          move    *a13(PUPPET_TIME),a14   ;last time we were in mode_puppet
         00019580     0c20  
    3565 00019590     05a0          move    @PCNT,a0                ;this tick
         000195a0 00000000! 
    3566 000195c0     b00d          move    a0,*a13(PUPPET_TIME)    ;in either case, update PUPPET_TIME
         000195d0     0c20  
    3567                    
    3568 000195e0     45c0          sub     a14,a0
    3569 000195f0     0b40          cmpi    1,a0
         00019600     fffe  
    3570 00019610     cb24          jrne    vilonew_arrival
    3571                    
    3572                            ;been here awhile
    3573 00019620     b5a0          move    *a13(PUPPET_TICKS),a0
         00019630     0c30  
    3574 00019640     1020          inc     a0
    3575 00019650     b00d          move    a0,*a13(PUPPET_TICKS)
         00019660     0c30  
    3576                    
    3577 00019670     0b40          cmpi    vilotimeout_val,a0
         00019680     ff95  
    3578 00019690     c41f          jrlt    vilodone
    3579                    
    3580                            ;bark!  Been here too long.  glitch to a stand or something.
    3581                            .if DEBUG
    3582                            LOCKUP
    3583                            .endif
    3584 000196a0                   SETMODE NORMAL
    3585 00019750                   FACE24TBL vilostand_tbl
    3586 00019820     0d5f          calla   change_anim1a
         00019830 00000000! 
    3587 00019850     c003          jruc    vilodone
    3588                    
    3589 00019860           vilonew_arrival
    3590 00019860     182e          movk    1,a14
    3591 00019870     b1cd          move    a14,*a13(PUPPET_TICKS)
         00019880     0c30  
    3592                    
    3593 00019890     0960  vilodone        rets
    3594                    
    3595 000198a0           vilostand_tbl
    3596 000198a0                   REFLONG hrt_stand2_anim,hrt_stand4_anim         ;0 Bret Hart
    3597 000198e0                   REFLONG rzr_stand2_anim,rzr_stand4_anim         ;1 Razor Ramon
    3598 00019920                   REFLONG und_stand2_anim,und_stand4_anim         ;2 Undertaker
    3599 00019960                   REFLONG yok_stand2_anim,yok_stand4_anim         ;3 Yokozuna
    3600 000199a0                   REFLONG shn_stand2_anim,shn_stand4_anim         ;4 Shawn Michaels
    3601 000199e0                   REFLONG bam_stand2_anim,bam_stand4_anim         ;5 Bam Bam
    3602 00019a20                   REFLONG dnk_stand2_anim,dnk_stand4_anim         ;6 Doink
    3603 00019a60 00000000          .long   0,0                                     ;7 spare
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   79

    3604 00019aa0                   REFLONG lex_stand2_anim,lex_stand4_anim         ;8 Lex Luger
    3605                    
    3606                    *****************************************************************************
    3607 00019ae0           mode_chokehold  ;24
    3608 00019ae0     0960          rets
    3609                    
    3610                    *****************************************************************************
    3611                    *
    3612 00019af0            SUBR   mode_inair2     ;21
    3613                    
    3614                    ;All wrestlers use this mode_inair2 code, and only for turnbuckle stuff.
    3615                    
    3616                    ;Read joystick for floating off from turnbuckle moves
    3617                    
    3618                    ;Perhaps each wrestler will have a different drift value
    3619          00058000  eassZDRIFT2_VAL equ     58000h
    3620          00030000  eassXDRIFT_VAL  equ     30000h
    3621                    
    3622 00019af0     b5a0          move    *a13(STICK_VAL_CUR),a0
         00019b00     0bc0  
    3623 00019b10     5621          clr     a1
    3624                    
    3625 00019b20     09e1          movi    -eassZDRIFT2_VAL,a1
         00019b30 fffa8000  
    3626 00019b50     1fe0          btst    PLAYER_UP_BIT,a0
    3627 00019b60     cb06          jrnz    easssetvel
    3628                    
    3629 00019b70     09e1          movi    eassZDRIFT2_VAL,a1
         00019b80 00058000  
    3630 00019ba0     1fc0          btst    PLAYER_DOWN_BIT,a0
    3631 00019bb0     cb01          jrnz    easssetvel
    3632                    
    3633 00019bc0     5621          clr     a1
    3634 00019bd0           easssetvel
    3635                    ;       move    *a13(OBJ_ZVEL),a14,L
    3636                    ;       add     a1,a14
    3637                    ;       move    a14,*a13(OBJ_ZVEL),L
    3638                    
    3639 00019bd0     b7ae          move    *a13(OBJ_ZPOS),a14,L
         00019be0     0140  
    3640 00019bf0     402e          add     a1,a14
    3641 00019c00     b3cd          move    a14,*a13(OBJ_ZPOS),L
         00019c10     0140  
    3642                    
    3643                    
    3644 00019c20     5621          clr     a1
    3645                    
    3646 00019c30     09e1          movi    -eassXDRIFT_VAL,a1
         00019c40 fffd0000  
    3647 00019c60     1fa0          btst    PLAYER_LEFT_BIT,a0
    3648 00019c70     cb06          jrnz    easssetvel2
    3649                    
    3650 00019c80     09e1          movi    eassXDRIFT_VAL,a1
         00019c90 00030000  
    3651 00019cb0     1f80          btst    PLAYER_RIGHT_BIT,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   80

    3652 00019cc0     cb01          jrnz    easssetvel2
    3653                    
    3654 00019cd0     5621          clr     a1
    3655 00019ce0           easssetvel2
    3656                    ;       move    *a13(OBJ_XVEL),a14,L
    3657                    ;       add     a1,a14
    3658                    ;       move    a14,*a13(OBJ_XVEL),L
    3659                    
    3660 00019ce0     b7ae          move    *a13(OBJ_XPOS),a14,L
         00019cf0     0100  
    3661 00019d00     402e          add     a1,a14
    3662 00019d10     b3cd          move    a14,*a13(OBJ_XPOS),L
         00019d20     0100  
    3663                    
    3664 00019d30     0960          rets
    3665                    
    3666                    *****************************************************************************
    3667                    
    3668                    
    3669                    ;dxhyVEL        equ     30000h          ;38000h ;30000h
    3670                    ;dxhyDVEL       equ     21f0eh          ;27978h ;21f0eh
    3671                    ;dxhyVEL        equ     38000h          ;38000h ;30000h
    3672                    ;dxhyDVEL       equ     30000h          ;27978h ;21f0eh
    3673          0003a000  dxhyVEL equ     3a000h          ;38000h ;30000h
    3674          00031000  dxhyDVEL        equ     31000h          ;27978h ;21f0eh
    3675                    
    3676                    
    3677 00019d40            SUBR dnk_velocity_table
    3678                    
    3679                    ;               X,      Z
    3680                    
    3681 00019d40 00000000          .long   0,      -dxhyVEL        ;0 UP
    3682                    
    3683 00019d80 00031000          .long   dxhyDVEL,       -dxhyDVEL       ;1 UP-RIGHT
    3684                    
    3685 00019dc0 0003a000          .long   dxhyVEL,        0       ;2 RIGHT
    3686                    
    3687 00019e00 00031000          .long   dxhyDVEL,       dxhyDVEL        ;3 DOWN-RIGHT
    3688                    
    3689 00019e40 00000000          .long   0,      dxhyVEL ;4 DOWN
    3690                    
    3691 00019e80 fffcf000          .long   -dxhyDVEL,      dxhyDVEL        ;5 DOWN-LEFT
    3692                    
    3693 00019ec0 fffc6000          .long   -dxhyVEL,       0       ;6 LEFT
    3694                    
    3695 00019f00 fffcf000          .long   -dxhyDVEL,      -dxhyDVEL       ;7 UP-LEFT
    3696                    
    3697                    
    3698                    *****************************************************************************
    3699                    
    3700 00019f40            SUBR dnk_rotate_anims_table
    3701                    ; old = up right
    3702 00019f40 00000000!         .long   dnk_stand2_anim         ;new = up right
    3703 00019f60 00000000!         .long   dnk_2_to_4_turn_anim    ;    = down right
    3704 00019f80 00000000!         .long   dnk_2_to_6_turn_anim    ;    = down left ***
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   81

    3705 00019fa0 00000000!         .long   dnk_2_to_8_turn_anim    ;    = up left
    3706                    
    3707                    ; old = down right
    3708 00019fc0 00000000!         .long   dnk_4_to_2_turn_anim    ;new = up right
    3709 00019fe0 00000000!         .long   dnk_stand4_anim         ;    = down right
    3710 0001a000 00000000!         .long   dnk_4_to_6_turn_anim    ;    = down left
    3711 0001a020 00000000!         .long   dnk_4_to_8_turn_anim    ;    = up left ***
    3712                    
    3713                    ; old = down left
    3714 0001a040 00000000!         .long   dnk_6_to_2_turn_anim    ;new = up right ***
    3715 0001a060 00000000!         .long   dnk_6_to_4_turn_anim    ;    = down right
    3716 0001a080 00000000!         .long   dnk_stand6_anim         ;    = down left
    3717 0001a0a0 00000000!         .long   dnk_6_to_8_turn_anim    ;    = up left
    3718                    
    3719                    ; old = up left
    3720 0001a0c0 00000000!         .long   dnk_8_to_2_turn_anim    ;new = up right
    3721 0001a0e0 00000000!         .long   dnk_8_to_4_turn_anim    ;    = down right ***
    3722 0001a100 00000000!         .long   dnk_8_to_6_turn_anim    ;    = down left
    3723 0001a120 00000000!         .long   dnk_stand8_anim         ;    = up left
    3724                    
    3725                    
    3726 0001a140            SUBR dnk_leg_anims_table
    3727                    ;  MOVE
    3728                    ;(qgrn1 - UP)                           FACING
    3729 0001a140 00000000!         .long   dnk_walk1_f2_anim       ;1 (UP)
    3730 0001a160 00000000!         .long   dnk_walk1_f2_anim       ;2 (UP_RIGHT)
    3731 0001a180 00000000!         .long   dnk_walk1_f4_anim       ;3 (RIGHT)
    3732 0001a1a0 00000000!         .long   dnk_walk1_f4_anim       ;4 (DOWN_RIGHT)
    3733 0001a1c0 00000000!         .long   dnk_walk1_f4_anim       ;5 (DOWN)
    3734 0001a1e0 00000000!         .long   dnk_walk1_f4_anim       ;6 (DOWN_LEFT)
    3735 0001a200 00000000!         .long   dnk_walk1_f2_anim       ;7 (LEFT)
    3736 0001a220 00000000!         .long   dnk_walk1_f2_anim       ;8 (UP-LEFT)
    3737                    
    3738                    ;(qgrn2 - UP-RIGHT)
    3739 0001a240 00000000!         .long   dnk_walk2_f2_anim       ;1 (UP)
    3740 0001a260 00000000!         .long   dnk_walk2_f2_anim       ;2 (UP_RIGHT)
    3741 0001a280 00000000!         .long   dnk_walk2_f2_anim       ;3 (RIGHT)
    3742 0001a2a0 00000000!         .long   dnk_walk2_f4_anim       ;4 (DOWN_RIGHT)
    3743 0001a2c0 00000000!         .long   dnk_walk8_f4_anim       ;5 (DOWN)
    3744 0001a2e0 00000000!         .long   dnk_walk8_f4_anim       ;6 (DOWN_LEFT)
    3745 0001a300 00000000!         .long   dnk_walk4_f2_anim       ;7 (LEFT)
    3746 0001a320 00000000!         .long   dnk_walk4_f2_anim       ;8 (UP-LEFT)
    3747                    
    3748                    ;(qgrn3 - RIGHT)
    3749 0001a340 00000000!         .long   dnk_walk2_f2_anim       ;1 (UP)
    3750 0001a360 00000000!         .long   dnk_walk2_f2_anim       ;2 (UP_RIGHT)
    3751 0001a380 00000000!         .long   dnk_walk2_f2_anim       ;3 (RIGHT)
    3752 0001a3a0 00000000!         .long   dnk_walk4_f4_anim       ;4 (DOWN_RIGHT)
    3753 0001a3c0 00000000!         .long   dnk_walk4_f4_anim       ;5 (DOWN)
    3754 0001a3e0 00000000!         .long   dnk_walk8_f4_anim       ;6 (DOWN_LEFT)
    3755 0001a400 00000000!         .long   dnk_walk6_f2_anim       ;7 (LEFT)
    3756 0001a420 00000000!         .long   dnk_walk6_f2_anim       ;8 (UP-LEFT)
    3757                    
    3758                    
    3759                    ;(qgrn4 - DOWN-RIGHT)
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   82

    3760 0001a440 00000000!         .long   dnk_walk2_f2_anim       ;1 (UP)
    3761 0001a460 00000000!         .long   dnk_walk8_f2_anim       ;2 (UP_RIGHT)
    3762 0001a480 00000000!         .long   dnk_walk4_f4_anim       ;3 (RIGHT)
    3763 0001a4a0 00000000!         .long   dnk_walk4_f4_anim       ;4 (DOWN_RIGHT)
    3764 0001a4c0 00000000!         .long   dnk_walk2_f4_anim       ;5 (DOWN)
    3765 0001a4e0 00000000!         .long   dnk_walk6_f4_anim       ;6 (DOWN_LEFT)
    3766 0001a500 00000000!         .long   dnk_walk2_f2_anim       ;7 (LEFT)
    3767 0001a520 00000000!         .long   dnk_walk6_f2_anim       ;8 (UP-LEFT)
    3768                    
    3769                    ;(qgrn5 - DOWN)
    3770 0001a540 00000000!         .long   dnk_walk5_f2_anim       ;1 (UP)
    3771 0001a560 00000000!         .long   dnk_walk5_f2_anim       ;2 (UP_RIGHT)
    3772 0001a580 00000000!         .long   dnk_walk5_f4_anim       ;3 (RIGHT)
    3773 0001a5a0 00000000!         .long   dnk_walk5_f4_anim       ;4 (DOWN_RIGHT)
    3774 0001a5c0 00000000!         .long   dnk_walk5_f4_anim       ;5 (DOWN)
    3775 0001a5e0 00000000!         .long   dnk_walk5_f4_anim       ;6 (DOWN_LEFT)
    3776 0001a600 00000000!         .long   dnk_walk5_f2_anim       ;7 (LEFT)
    3777 0001a620 00000000!         .long   dnk_walk5_f2_anim       ;8 (UP-LEFT)
    3778                    
    3779                    ;(qgrn6 - DOWN-LEFT)
    3780 0001a640 00000000!         .long   dnk_walk2_f2_anim       ;1 (UP)
    3781 0001a660 00000000!         .long   dnk_walk6_f2_anim       ;2 (UP_RIGHT)
    3782 0001a680 00000000!         .long   dnk_walk2_f2_anim       ;3 (RIGHT)
    3783 0001a6a0 00000000!         .long   dnk_walk6_f4_anim       ;4 (DOWN_RIGHT)
    3784 0001a6c0 00000000!         .long   dnk_walk2_f4_anim       ;5 (DOWN)
    3785 0001a6e0 00000000!         .long   dnk_walk4_f4_anim       ;6 (DOWN_LEFT)
    3786 0001a700 00000000!         .long   dnk_walk2_f2_anim       ;7 (LEFT)
    3787 0001a720 00000000!         .long   dnk_walk8_f2_anim       ;8 (UP-LEFT)
    3788                    
    3789                    ;(qgrn7 - LEFT)
    3790 0001a740 00000000!         .long   dnk_walk2_f2_anim       ;1 (UP)
    3791 0001a760 00000000!         .long   dnk_walk6_f2_anim       ;2 (UP_RIGHT)
    3792 0001a780 00000000!         .long   dnk_walk6_f2_anim       ;3 (RIGHT)
    3793 0001a7a0 00000000!         .long   dnk_walk8_f4_anim       ;4 (DOWN_RIGHT)
    3794 0001a7c0 00000000!         .long   dnk_walk4_f4_anim       ;5 (DOWN)
    3795 0001a7e0 00000000!         .long   dnk_walk4_f4_anim       ;6 (DOWN_LEFT)
    3796 0001a800 00000000!         .long   dnk_walk2_f2_anim       ;7 (LEFT)
    3797 0001a820 00000000!         .long   dnk_walk2_f2_anim       ;8 (UP-LEFT)
    3798                    
    3799                    ;(qgrn8 - UP-LEFT)
    3800 0001a840 00000000!         .long   dnk_walk2_f2_anim       ;1 (UP)
    3801 0001a860 00000000!         .long   dnk_walk4_f2_anim       ;2 (UP_RIGHT)
    3802 0001a880 00000000!         .long   dnk_walk6_f2_anim       ;3 (RIGHT)
    3803 0001a8a0 00000000!         .long   dnk_walk8_f4_anim       ;4 (DOWN_RIGHT)
    3804 0001a8c0 00000000!         .long   dnk_walk6_f4_anim       ;5 (DOWN)
    3805 0001a8e0 00000000!         .long   dnk_walk2_f4_anim       ;6 (DOWN_LEFT)
    3806 0001a900 00000000!         .long   dnk_walk2_f2_anim       ;7 (LEFT)
    3807 0001a920 00000000!         .long   dnk_walk2_f2_anim       ;8 (UP-LEFT)
    3808                    
    3809                    
    3810 0001a940            SUBR dnk_torso_anims_table
    3811                    ; old = up right
    3812 0001a940 00000000!         .long   dnk_torso2_anim         ;new = up right
    3813 0001a960 00000000!         .long   dnk_2_to_4_turn2_anim   ;    = down right
    3814 0001a980 00000000!         .long   dnk_2_to_6_turn2_anim   ;    = down left ***
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   83

    3815 0001a9a0 00000000!         .long   dnk_2_to_8_turn2_anim   ;    = up left
    3816                    
    3817                    ; old = down right
    3818 0001a9c0 00000000!         .long   dnk_4_to_2_turn2_anim   ;new = up right
    3819 0001a9e0 00000000!         .long   dnk_torso4_anim         ;    = down right
    3820 0001aa00 00000000!         .long   dnk_4_to_6_turn2_anim   ;    = down left
    3821 0001aa20 00000000!         .long   dnk_4_to_8_turn2_anim   ;    = up left ***
    3822                    
    3823                    ; old = down left
    3824 0001aa40 00000000!         .long   dnk_6_to_2_turn2_anim   ;new = up right ***
    3825 0001aa60 00000000!         .long   dnk_6_to_4_turn2_anim   ;    = down right
    3826 0001aa80 00000000!         .long   dnk_torso6_anim         ;    = down left
    3827 0001aaa0 00000000!         .long   dnk_6_to_8_turn2_anim   ;    = up left
    3828                    
    3829                    ; old = up left
    3830 0001aac0 00000000!         .long   dnk_8_to_2_turn2_anim   ;new = up right
    3831 0001aae0 00000000!         .long   dnk_8_to_4_turn2_anim   ;    = down right ***
    3832 0001ab00 00000000!         .long   dnk_8_to_6_turn2_anim   ;    = down left
    3833 0001ab20 00000000!         .long   dnk_torso8_anim         ;    = up left
    3834                    
    3835                    
    3836                    ;       STRUCTPD
    3837                    ;       WORD            qgrnCHARGE_TIME ;UDW
    3838                    ;       WORD            qgrnTIMEOUT     ;UDW
    3839                    ;
    3840                    ;
    3841                    ; SUBRP dnk_hammer_mv
    3842                    ;
    3843                    ;;in:
    3844                    ;;a8 = wrestler process address
    3845                    ;
    3846                    ;;Hammer pound opponent
    3847                    ;;Charge away for 30 ticks
    3848                    ;;Toward & Super punch
    3849                    ;
    3850                    ;qgrnstart_over
    3851                    ;       ;charge on stick away
    3852                    ;       clr     a14
    3853                    ;       move    a14,*a13(qgrnCHARGE_TIME),W
    3854                    ;qgrnloop1
    3855                    ;       SLEEPK  1
    3856                    ;
    3857                    ;;Disallow these type of moves if out of control
    3858                    ;       move    *a8(GETUP_TIME),a0
    3859                    ;       jrnz    qgrnloop1
    3860                    ;
    3861                    ;       move    *a13(qgrnCHARGE_TIME),a14,W
    3862                    ;       inc     a14
    3863                    ;       move    a14,*a13(qgrnCHARGE_TIME),W
    3864                    ;
    3865                    ;       move    *a8(STICK_VAL_CUR),a0
    3866                    ;
    3867                    ;       ;arbitrarily define TOWARD to be RIGHT.  So if the opponent is to
    3868                    ;       ; our left, flip the L|R direction bits...
    3869                    ;
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   84

    3870                    ;       ;...however, if the stick isn't pointed left or right, don't do
    3871                    ;       ;anything.
    3872                    ;       move    a0,a14
    3873                    ;       andi    MOVE_LEFT|MOVE_RIGHT,a14
    3874                    ;       jrz     qgrnno_flip
    3875                    ;
    3876                    ;       move    *a8(NEW_FACING_DIR),a14
    3877                    ;       btst    MOVE_LEFT_BIT,a14
    3878                    ;       jrz     qgrnno_flip
    3879                    ;       xori    MOVE_LEFT|MOVE_RIGHT,a0
    3880                    ;qgrnno_flip
    3881                    ;
    3882                    ;       ;if we're still holding away, jump back to qgrnloop1
    3883                    ;       btst    MOVE_LEFT_BIT,a0
    3884                    ;       jrnz    qgrnloop1
    3885                    ;
    3886                    ;       ;no longer holding away...
    3887                    ;       move    *a13(qgrnCHARGE_TIME),a14
    3888                    ;
    3889                    ;;x seconds held stick is away
    3890                    ;
    3891                    ;       cmpi    15,a14
    3892                    ;       jrlt    qgrnstart_over
    3893                    ;
    3894                    ;       ;okay, they released after holding away for 2 seconds.  Give them
    3895                    ;       ;half a second to push forward + super_punch
    3896                    ;
    3897                    ;;      movi    TSEC/2,a14
    3898                    ;       movk    20,a14
    3899                    ;       move    a14,*a13(qgrnTIMEOUT)
    3900                    ;qgrnloop2
    3901                    ;       SLEEPK  1
    3902                    ;
    3903                    ;       move    *a8(BUT_VAL_DOWN),a0
    3904                    ;       jrnz    qgrnpress
    3905                    ;
    3906                    ;       move    *a13(qgrnTIMEOUT),a14
    3907                    ;       dec     a14
    3908                    ;       jrz     qgrnstart_over
    3909                    ;       move    a14,*a13(qgrnTIMEOUT)
    3910                    ;       jruc    qgrnloop2
    3911                    ;
    3912                    ;qgrnpress
    3913                    ;       ;we have a button press.  Is it super punch?
    3914                    ;       btst    PLAYER_PUNCH_BIT,a0
    3915                    ;       jrz     qgrnstart_over  ;wrong button.  No good.
    3916                    ;       
    3917                    ;       ;Check for a towards on the stick.
    3918                    ;       move    *a8(STICK_VAL_CUR),a0
    3919                    ;       jrz     qgrnstart_over  ;no stick at all.  No good.
    3920                    ;
    3921                    ;       move    *a8(NEW_FACING_DIR),a14
    3922                    ;       btst    MOVE_LEFT_BIT,a14
    3923                    ;       jrz     qgrnno_flip2
    3924                    ;       xori    MOVE_LEFT|MOVE_RIGHT,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   85

    3925                    ;qgrnno_flip2
    3926                    ;       btst    MOVE_RIGHT_BIT,a0
    3927                    ;       jrz     qgrnstart_over  ;pooched it
    3928                    ;
    3929                    ;;success!  Check for the UNINT bit, then queue it up.
    3930                    ;       move    *a8(ANIMODE),a14
    3931                    ;       btst    MODE_UNINT_BIT,a14
    3932                    ;       jrnz    qgrnstart_over
    3933                    ;
    3934                    ;       movi    dnk_4_hammer_anim,a14
    3935                    ;
    3936                    ;       move    *a13(PLYRMODE),a0
    3937                    ;       cmpi    MODE_ONTURNBKL,a0
    3938                    ;       jrz     qgrnstart_over
    3939                    ;
    3940                    ;;      move    *a13(PLYRMODE),a0
    3941                    ;;      cmpi    MODE_ONTURNBKL,a0
    3942                    ;;      jrnz    qgrndo
    3943                    ;;      movi    dnk_4_bhammer_anim,a14
    3944                    ;;qgrndo
    3945                    ;       move    a14,*a8(SPECIAL_MOVE_ADDR),L
    3946                    ;       jruc    qgrnstart_over
    3947                    ;
    3948                    ;;      .endif
    3949                    ;
    3950                    ;*
    3951                    ;
    3952                    ; SUBRP dnk_earslap_mv
    3953                    ;
    3954                    ;       STRUCTPD
    3955                    ;       WORD            qgrnCHARGE_TIME ;UDW
    3956                    ;       WORD            qgrnTIMEOUT     ;UDW
    3957                    ;
    3958                    ;
    3959                    ;;in:
    3960                    ;;a8 = wrestler process address
    3961                    ;
    3962                    ;;Ear slap opponent
    3963                    ;;Charge away for 30 ticks
    3964                    ;;Toward & Super punch
    3965                    ;
    3966                    ;qgrnstart_over
    3967                    ;       ;charge on stick away
    3968                    ;       clr     a14
    3969                    ;       move    a14,*a13(qgrnCHARGE_TIME),W
    3970                    ;qgrnloop1
    3971                    ;       SLEEPK  1
    3972                    ;
    3973                    ;;Disallow these type of moves if out of control
    3974                    ;       move    *a8(GETUP_TIME),a0
    3975                    ;       jrnz    qgrnloop1
    3976                    ;       calla   get_opp_plyrmode
    3977                    ;       cmpi    MODE_ONGROUND,a0
    3978                    ;       jrz     qgrnloop1
    3979                    ;       cmpi    MODE_DEAD,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   86

    3980                    ;       jrz     qgrnloop1
    3981                    ;
    3982                    ;       move    *a13(qgrnCHARGE_TIME),a14,W
    3983                    ;       inc     a14
    3984                    ;       move    a14,*a13(qgrnCHARGE_TIME),W
    3985                    ;
    3986                    ;       move    *a8(STICK_VAL_CUR),a0
    3987                    ;
    3988                    ;       ;arbitrarily define TOWARD to be RIGHT.  So if the opponent is to
    3989                    ;       ; our left, flip the L|R direction bits...
    3990                    ;
    3991                    ;       ;...however, if the stick isn't pointed left or right, don't do
    3992                    ;       ;anything.
    3993                    ;       move    a0,a14
    3994                    ;       andi    MOVE_LEFT|MOVE_RIGHT,a14
    3995                    ;       jrz     qgrnno_flip
    3996                    ;
    3997                    ;       move    *a8(NEW_FACING_DIR),a14
    3998                    ;       btst    MOVE_LEFT_BIT,a14
    3999                    ;       jrz     qgrnno_flip
    4000                    ;       xori    MOVE_LEFT|MOVE_RIGHT,a0
    4001                    ;qgrnno_flip
    4002                    ;
    4003                    ;       ;if we're still holding away, jump back to qgrnloop1
    4004                    ;       btst    MOVE_LEFT_BIT,a0
    4005                    ;       jrnz    qgrnloop1
    4006                    ;
    4007                    ;       ;no longer holding away...
    4008                    ;       move    *a13(qgrnCHARGE_TIME),a14
    4009                    ;
    4010                    ;;x seconds held stick is away
    4011                    ;
    4012                    ;       cmpi    20,a14
    4013                    ;       jrlt    qgrnstart_over
    4014                    ;
    4015                    ;       ;okay, they released after holding away for 2 seconds.  Give them
    4016                    ;       ;half a second to push forward + super_punch
    4017                    ;
    4018                    ;;      movi    TSEC/2,a14
    4019                    ;       movk    15,a14
    4020                    ;       move    a14,*a13(qgrnTIMEOUT)
    4021                    ;qgrnloop2
    4022                    ;       SLEEPK  1
    4023                    ;
    4024                    ;       move    *a8(BUT_VAL_DOWN),a0
    4025                    ;       jrnz    qgrnpress
    4026                    ;
    4027                    ;       move    *a13(qgrnTIMEOUT),a14
    4028                    ;       dec     a14
    4029                    ;       jrz     qgrnstart_over
    4030                    ;       move    a14,*a13(qgrnTIMEOUT)
    4031                    ;       jruc    qgrnloop2
    4032                    ;
    4033                    ;qgrnpress
    4034                    ;       ;we have a button press.  Is it super punch?
TMS340 COFF Macro Assembler Version 6.10     Wed Oct 25 00:57:44 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   87

    4035                    ;       btst    PLAYER_SPUNCH_BIT,a0
    4036                    ;;      jrz     qgrnstart_over  ;wrong button.  No good.
    4037                    ;       jrz     qgrnloop2
    4038                    ;       btst    PLAYER_PUNCH_BIT,a0
    4039                    ;       jrz     qgrnloop2
    4040                    ;       
    4041                    ;       ;Check for a towards on the stick.
    4042                    ;       move    *a8(STICK_VAL_CUR),a0
    4043                    ;;      jrz     qgrnstart_over  ;no stick at all.  No good.
    4044                    ;       jrz     qgrnloop2
    4045                    ;
    4046                    ;       move    *a8(NEW_FACING_DIR),a14
    4047                    ;       btst    MOVE_LEFT_BIT,a14
    4048                    ;       jrz     qgrnno_flip2
    4049                    ;       xori    MOVE_LEFT|MOVE_RIGHT,a0
    4050                    ;qgrnno_flip2
    4051                    ;       btst    MOVE_RIGHT_BIT,a0
    4052                    ;;      jrz     qgrnstart_over  ;pooched it
    4053                    ;       jrz     qgrnloop2
    4054                    ;
    4055                    ;;success!  Check for the UNINT bit, then queue it up.
    4056                    ;       move    *a8(ANIMODE),a14
    4057                    ;       btst    MODE_UNINT_BIT,a14
    4058                    ;       jrnz    qgrnstart_over
    4059                    ;
    4060                    ;       movi    dnk_4_earslap_anim,a14
    4061                    ;
    4062                    ;       move    *a13(PLYRMODE),a0
    4063                    ;       cmpi    MODE_ONTURNBKL,a0
    4064                    ;       jrz     qgrnstart_over
    4065                    ;
    4066                    ;       move    a14,*a8(SPECIAL_MOVE_ADDR),L
    4067                    ;       jruc    qgrnstart_over
    4068                    
    4069                    
    4070                    ******************************************************************************
    4071                    
    4072                            .end

 8 Errors,  No Warnings
