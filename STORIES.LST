TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    
       2                            .file   "stories.asm"
       4                            .width  132
       5                            .option b,d,l,t
       6                            .mnolist
       7                    
       8                    
       9                            .include        "macros.h"
      10                            .include        "mproc.equ"             ;Mproc equates
      11                            .include        "display.equ"           ;Display proc equates
      12                            .include        "gsp.equ"               ;Gsp asm equates
      13                            .include        "sys.equ"
      14                            .include        "wwfsec.equ"
      15                            .include        "game.equ"
      16                            .include        "audit.equ"
      17                            .include        "plyr.equ"
      18                            .include        "anim.equ"
      19                            .include        "sound.h"
      20                            .include        "ring.equ"
      21                            .include        "sound.equ"
      22                            .include        "damage.equ"
      23                    
      24                            .include        "imgtbl.glo"
      25                            .include        "fontsimg.glo"
      26                            .include        "bgndtbl.glo"
      27                            .include        "miscimg.glo"
      28                            .include        "logo.glo"
      29                    
      30                            .include        "bamst.h"
      31                            .include        "bretst.h"
      32                            .include        "doinkst.h"
      33                            .include        "yokost.h"
      34                            .include        "lexst.h"
      35                            .include        "razorst.h"
      36                            .include        "takerst.h"
      37                            .include        "shawnst.h"
      38                    
      39                            .ref    p1oldwinstreak,p2oldwinstreak,print_string,ogmd10_ascii
      40                            .ref    SGMD8GLD,setup_message,message_buffer
      41                            .ref    BAKMODS,decompress_string,BGND_UD1,WIPEOUT,dpageflip
      42                            .ref    wrestler_mugs,obj_del1c,mess_objid,scrn_rel_off,pal_clean
      43                            .ref    fade_down,get_but_val_cur,which_player,PSTATUS2,mess_cursy
      44                            .ref    osgmd8_ascii
      45                    
      46 0000ba10                   BSSX    wrestler_number,32
      47                    
      48 0000ba10           blank_line
      49 0000ba10       00          .byte   0
      50 0000ba20                   .even
      51                    
      52                            .globl  story_bgnd
      53 0000ba20           story_bgnd
      54 0000ba20 00000000!         .long   endstoryBMOD
      55 0000ba40     0000          .word   0,0
      56 0000ba60 00000000          .long   0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    2

      57                    
      58 0000ba80           dyfvwrestler_stories_table
      59 0000ba80 00002630'         .long   bret_stories            ; Bret Hart
      60 0000baa0 00008110'         .long   razor_stories           ; Razor Ramon
      61 0000bac0 00009d30'         .long   taker_stories           ; The Undertaker
      62 0000bae0 00005020'         .long   yoko_stories            ; Yokozuna
      63 0000bb00 0000b9f0'         .long   shawn_stories           ; Shawn Michaels
      64 0000bb20 000013e0'         .long   bam_stories             ; Bam Bam Bigelow
      65 0000bb40 00003ce0'         .long   doink_stories           ; Doink The Clown
      66 0000bb60 00003ce0'         .long   doink_stories           ; Doink The Clown
      67 0000bb80 000065c0'         .long   lex_stories             ; Lex Luger
      68                    
      69                    
      70                    
      71 0000bba0           dyfvstory_line1_setup
      72 0000bba0                   JAM_STR osgmd8_ascii,5,0,15,90,SGMD8GLD,print_string
      73 0000bc40                   .even
      74                    
      75                    
      76                    
      77 0000bc40            SUBR   print_story
      78 0000bc40                   PUSHP   a0,a1,a2,a3,a4
      79 0000bc60           dyfvdo_more_lines
      80 0000bc60     09c3          movi    90,a3
         0000bc70     005a  
      81 0000bc80           dyfvprint_story_loop
      82 0000bc80     9620          move    *a1+,a0,L                       ; Get pointer to text line
      83 0000bc90     ca46          jrz     dyfvprint_story_done            ; Last line ? br = yes
      84 0000bca0     0d5f          calla   decompress_string               ; Decompress string
         0000bcb0 00000000! 
      85 0000bcd0     09e2          movi    dyfvstory_line1_setup,a2
         0000bce0 0000bba0' 
      86 0000bd00     0d5f          calla   setup_message                   ; Set it up
         0000bd10 00000000! 
      87 0000bd30     0583          move    a3,@mess_cursy
         0000bd40 00000000! 
      88 0000bd60     09ce          movi    TYPWCCOUNT,a14
         0000bd70     0150  
      89 0000bd80     058e          move    a14,@mess_objid
         0000bd90 00000000! 
      90 0000bdb0                   PUSHP   a1,a3
      91 0000bdd0     0d5f          calla   print_string                    ; Print it
         0000bde0 00000000! 
      92 0000be00                   PULLP   a1,a3
      93 0000be20     0b03          addi    12,a3
         0000be30     000c  
      94 0000be40     0b43          cmpi    230,a3
         0000be50     ff19  
      95 0000be60     c4e1          jrlt    dyfvprint_story_loop
      96                    
      97 0000be70                   PUSHP   a0,a1
      98 0000be90                   SLEEP   TSEC*5                          ; Minimum time to display
      99                    
     100 0000bee0                   PUSHP   a9
     101 0000bef0     09c9          movi    TSEC*15,a9                      ; Allow up to 1 minute per pg
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    3

         0000bf00     031b  
     102 0000bf10           dyfvw_loop
     103 0000bf10                   SLEEPK  1
     104 0000bf50     5600          clr     a0
     105 0000bf60     0d5f          calla   get_but_val_cur
         0000bf70 00000000! 
     106 0000bf90     4c00          move    a0,a0
     107 0000bfa0     cb07          jrnz    dyfvwe_done
     108 0000bfb0     1820          movk    1,a0
     109 0000bfc0     0d5f          calla   get_but_val_cur
         0000bfd0 00000000! 
     110 0000bff0     4c00          move    a0,a0
     111 0000c000     cb01          jrnz    dyfvwe_done
     112 0000c010     3e29          dsjs    a9,dyfvw_loop
     113 0000c020           dyfvwe_done
     114 0000c020                   PULLP   a9
     115 0000c030                   PULLP   a0,a1
     116                    
     117 0000c050     8620          move    *a1,a0,L                        ; Are there more lines ?
     118 0000c060     ca09          jrz     dyfvprint_story_done            ; br = no - don't erase them
     119                    
     120 0000c070     09c0          movi    TYPWCCOUNT,a0
         0000c080     0150  
     121 0000c090                   PUSHP   a1
     122 0000c0a0     0d5f          calla   obj_del1c
         0000c0b0 00000000! 
     123 0000c0d0                   PULLP   a1
     124 0000c0e0     c0b7          jruc    dyfvdo_more_lines
     125                    
     126 0000c0f0     c0b8          jruc    dyfvprint_story_loop            ; Keep going
     127 0000c100           dyfvprint_story_done
     128 0000c100                   PULLP   a0,a1,a2,a3,a4
     129                    
     130 0000c120                   SLEEPK  TSEC/2                  ; A little delay before we leave
     131                    
     132 0000c160                   RETP
     133                    
     134                    
     135                    
     136                    
     137 0000c190           w_logos
     138 0000c190 00000000!         .long   HRT3
     139 0000c1b0 00000000!         .long   RZR3
     140 0000c1d0 00000000!         .long   UND3
     141 0000c1f0 00000000!         .long   YOK3
     142 0000c210 00000000!         .long   SHN3
     143 0000c230 00000000!         .long   BAM3
     144 0000c250 00000000!         .long   DNK3
     145 0000c270 00000000          .long   0
     146 0000c290 00000000!         .long   LEX3
     147                    
     148 0000c2b0            SUBR   show_wrestler_end_story
     149                    
     150 0000c2b0                   PUSHP   a0,a1,a2        ; Save reggies
     151                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    4

     152 0000c2d0     05ae          move    @PSTATUS2,a14   ; Get which player won
         0000c2e0 00000000! 
     153 0000c300     2fee          srl     1,a14           ; Index into table
     154 0000c310     248e          sll     4,a14
     155 0000c320     0b2e          addi    which_player,a14
         0000c330 00000000! 
     156 0000c350     85c8          move    *a14,a8         ; Get winning wrestler number
     157                    
     158 0000c360     0b48          cmpi    7,a8            ; Is this wrestler number 7 ?
         0000c370     fff8  
     159 0000c380     ca00          jrz     inval_wnum      ; br = yes (not a valid wrestler number)
         0000c390     00a0  
     160                    
     161 0000c3a0     0d5f          calla   pal_clean       ; Get rid of extra palettes
         0000c3b0 00000000! 
     162                    
     163 0000c3d0     574a          clr     a10             ; Fade down the lights
     164 0000c3e0     180b          movk    32,a11
     165 0000c3f0                   CREATE0 fade_down
     166 0000c460                   SLEEPK  30
     167                    
     168 0000c4a0     0d5f          calla   WIPEOUT
         0000c4b0 00000000! 
     169 0000c4d0     1820          movk    1,a0            ; Page flipping on
     170 0000c4e0     0580          move    a0,@dpageflip
         0000c4f0 00000000! 
     171                    
     172 0000c510     0d5f          calla   pal_clean       ; Get rid of extra palettes
         0000c520 00000000! 
     173                    
     174 0000c540     09e0          movi    story_bgnd,a0   ; Setup background
         0000c550 0000ba20' 
     175 0000c570     0780          move    a0,@BAKMODS,L
         0000c580 00000000! 
     176 0000c5a0     0d5f          calla   BGND_UD1
         0000c5b0 00000000! 
     177                    
     178 0000c5d0     4d0a          move    a8,a10          ; Restore the wrestler number
     179                    
     180                            ; Create the wrestlers mugshot
     181 0000c5e0     4d49          move    a10,a9          ; Get wrestler number
     182 0000c5f0     24a9          sll     5,a9            ; Index into table
     183 0000c600     0b29          addi    wrestler_mugs,a9
         0000c610 00000000! 
     184 0000c630     8729          move    *a9,a9,L        ; Get pointer to mugshot image pieces
     185 0000c640           dyfvmk_mug
     186 0000c640     9722          move    *a9+,a2,L       ; Get pointer to image piece
     187 0000c650     ca12          jrz     dyfvmug_done    ; Is that all of them ? - br = yes
     188 0000c660     09e0          movi    [017ah,0],a0    ; X position
         0000c670 017a0000  
     189 0000c690     09e1          movi    [0Afh,0],a1     ; Y position
         0000c6a0 00af0000  
     190 0000c6c0     5663          clr     a3              ; Z position
     191 0000c6d0     09e4          movi    DMAWNZ|M_FLIPH,a4
         0000c6e0 00008012  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    5

     192 0000c700     09c5          movi    CLSMK3,a5       ; Make it this class so's I kin delete it
         0000c710     6000  
     193 0000c720     56c6          clr     a6              ; No velocity
     194 0000c730     56e7          clr     a7
     195 0000c740     0d5f          calla   BEGINOBJ        ; Create the buger
         0000c750 00000000! 
     196 0000c770     c0ec          jruc    dyfvmk_mug              ; Get get next piece
     197 0000c780           dyfvmug_done
     198                    
     199                            ; And now his logo
     200 0000c780     4d42          move    a10,a2          ; Lookup the logo image fer this guy
     201 0000c790     24a2          sll     5,a2
     202 0000c7a0     0b22          addi    w_logos,a2
         0000c7b0 0000c190' 
     203 0000c7d0     8642          move    *a2,a2,L        ; Get the image pointer
     204 0000c7e0     b440          move    *a2(ISIZEX),a0  ; Get image width
         0000c7f0     0000  
     205 0000c800     2fe0          srl     1,a0            ; Divide it by 2
     206 0000c810     b441          move    *a2(ISIZEY),a1  ; Get the image height
         0000c820     0010  
     207 0000c830     2fe1          srl     1,a1            ; Divide it by 2
     208 0000c840     2600          sll     16,a0           ; Shift width up into integer portion
     209 0000c850     2601          sll     16,a1           ; Shift height up into integer portion
     210 0000c860     03a0          neg     a0              ; Negate the width
     211 0000c870     03a1          neg     a1              ; Negate the height
     212 0000c880     0b20          addi    [120,0],a0      ; Translate in X dir
         0000c890 00780000  
     213 0000c8b0     0b21          addi    [50,0],a1       ; Translate in Y dir
         0000c8c0 00320000  
     214 0000c8e0     5663          clr     a3              ; Z position
     215 0000c8f0     09e4          movi    DMAWNZ,a4       ; Blit method
         0000c900 00008002  
     216 0000c920     09c5          movi    CLSMK3,a5       ; Make it this class so's I kin delete it
         0000c930     6000  
     217 0000c940     56c6          clr     a6              ; No velocity
     218 0000c950     56e7          clr     a7
     219 0000c960     0d5f          calla   BEGINOBJ        ; Create it
         0000c970 00000000! 
     220                    
     221                            ; Put a WWF belt below the mugshot
     222 0000c990     09e0          movi    [316,0],a0      ; Center X point on plate below mugshot
         0000c9a0 013c0000  
     223 0000c9c0     09e1          movi    [198,0],a1      ; Center Y point on plate below mugshot
         0000c9d0 00c60000  
     224 0000c9f0     09e2          movi    SWWFBLT,a2      ; WWF Belt Image
         0000ca00 00000000! 
     225 0000ca20     5663          clr     a3              ; Z Position
     226 0000ca30     09e4          movi    DMAWNZ,a4       ; How to blit it
         0000ca40 00008002  
     227 0000ca60     09c5          movi    CLSMK3,a5       ; Make it this class so's I kin delete it
         0000ca70     6000  
     228 0000ca80     56c6          clr     a6              ; No velocity
     229 0000ca90     56e7          clr     a7
     230 0000caa0     0d5f          calla   BEGINOBJ        ; Create it
         0000cab0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    6

     231                    
     232 0000cad0     4d41          move    a10,a1
     233 0000cae0     24a1          sll     5,a1                            ; Get wrestler stories table ptr
     234 0000caf0     0b21          addi    dyfvwrestler_stories_table,a1
         0000cb00 0000ba80' 
     235 0000cb20     8621          move    *a1,a1,L                        ; Get pointer to wrestler stories
     236 0000cb30     8621          move    *a1,a1,L                        ; Get pointer to string table
     237 0000cb40                   JSRP    print_story
     238                    
     239 0000cbb0     09c9          movi    TSEC*15,a9                      ; Allow up to 1 minute per pg
         0000cbc0     031b  
     240 0000cbd0           dyfvbut_wait
     241 0000cbd0                   SLEEPK  1
     242 0000cc10     5600          clr     a0              ; Check the p1 buttons
     243 0000cc20     0d5f          calla   get_but_val_cur
         0000cc30 00000000! 
     244 0000cc50     4c00          move    a0,a0           ; Any get pressed ?
     245 0000cc60     cb07          jrnz    dyfvbut_hit     ; br = yes
     246 0000cc70     1820          movk    1,a0            ; Check the p2 buttons
     247 0000cc80     0d5f          calla   get_but_val_cur
         0000cc90 00000000! 
     248 0000ccb0     4c00          move    a0,a0           ; Any get pressed ?
     249 0000ccc0     cb01          jrnz    dyfvbut_hit     ; br = yes
     250 0000ccd0     3e29          dsjs    a9,dyfvbut_wait ; 3 seconds elapsed ? - br = no
     251 0000cce0           dyfvbut_hit
     252                    
     253 0000cce0     09c0          movi    CLSMK3,a0       ; Ok now delete all the object I created
         0000ccf0     6000  
     254 0000cd00     0d5f          calla   obj_del1c
         0000cd10 00000000! 
     255                    
     256 0000cd30     09c0          movi    TYPWCCOUNT,a0
         0000cd40     0150  
     257 0000cd50     0d5f          calla   obj_del1c
         0000cd60 00000000! 
     258                    
     259 0000cd80                   PULLP   a0,a1,a2        ; Restore the reggies
     260 0000cda0           inval_wnum
     261 0000cda0                   RETP                    ; I be done!!!
     262                    
     263                            
     264                            .end

 No Errors,  No Warnings
