**************************************************************
*
* Software:	Jason Skiles
* Initiated:	4 Oct 93
*
* COPYRIGHT (C) 1993 WILLIAMS ELECTRONICS GAMES, INC.
*
*.Last mod - 12/8/93 11:15
**************************************************************

	.file	"robo.asm"
	.title	"robotron game"
	.width	132
	.option	b,d,l,t
	.mnolist


	.include	"mproc.equ"		;Mproc equates
	.include	"display.equ"		;Display proc equates
	.include	"gsp.equ"		;Gsp asm equates
	.include	"sys.equ"
	.include	"game.equ"
	.include	"audit.equ"
	.include	"macros.h"
	.include	"link.equ"

;	.include	"roboimg.glo"
	.include	"roboimg.tbl"
	.include	"fontsimg.glo"

	;kludge
	.ref	robo_p

*****************************************************************************

	;from ADJUST.ASM
	.ref	BINBCD

	;from COLL2.ASM
	.ref	collisions,CCCCount

	;from DCSSOUND.ASM
	.ref	nosounds,SNDSND

	;from DISPLAY.ASM
	.ref	pal_getf,STOPOBJS,fg2bg

	;from MAIN.ASM
	.ref	dpageflip,IRQSKYE

	;from MPROC.ASM
	.ref	KIL1C

	;from STRING.ASM
	.ref	setup_message,print_string_R,mess_objid,copy_string
	.ref	dec_to_asc

	;from UTIL.ASM
	.ref	get_all_buttons_cur,get_stick_val_cur,RNDRNG0,get_start_cur
	.ref	WIPEOUT,CYCLE_TABLE,civani,civanic

	;from WRESTLE.ASM	
	.if DEBUG
	.ref	CPULEFT
	.endif
	.ref	HALT,PCNT

	;for WRESTLE.ASM
	.def	RE_DEADPLAYER,RE_WAVEDONE,RE_ABORT,RE_BACKUP

	.ref	_switch_addr,_switch2_addr,ADD_VOICE

*****************************************************************************

	BSSX	robo_end,	16	;reason for wave end
	BSSX	robotron_score,	32	;UHL score
	.bss	player_dead,	16
	.bss	starts_down,	16	;are both starts down?
	.bss	player_object,	32	;pointer to char1 obj
	.bss	gun_proc,	32	;gun process address
	.bss	robo_wave,	16	;which wave to perform?
	.bss	live_badguys,	16	;wave-preserving badguy count
	.bss	forward,	16	;skip wave
	.bss	backward,	16	;drop back a wave

*****************************************************************************

ROBO_DEBUG	equ	0
WAVE_CONTROL	equ	0
BOG_MONITOR	equ	0

ROBO_PAGE	equ	0*256

ROBJ_MOM	equ	1
ROBJ_DAD	equ	2
ROBJ_KID	equ	3

;termination causes
RE_DEADPLAYER	equ	1
RE_WAVEDONE	equ	2
RE_ABORT	equ	3
RE_BACKUP	equ	4


*****************************************************************************
******************************************************************************
******************************************************************************
	.ref	robo_icon_trigger
	.ref	p1icon_total
	.ref	p2icon_total


 SUBR	robo_check

	.if DEBUG
	jruc	hqsrobo_ok
	.endif
	jruc	hqsrobo_end

	move	@p1icon_total,a0,L
	move	@robo_icon_trigger,a14
	cmp	a0,a14
	jrle	hqsrobo_ok
	move	@p2icon_total,a0,L
	cmp	a0,a14
	jrgt	hqsrobo_end
hqsrobo_ok
	sll	1,a14
	move	a14,@robo_icon_trigger
	callr	reset_roboscore
	callr	robo_sound_init

;	movi	-1,a0
;	calla	ADD_VOICE

	clr	a0
hqsrobo_loop
	JSRP	robo_game
	move	@robo_end,a14
	cmpi	RE_DEADPLAYER,a14
	jreq	hqsplayer_died
	cmpi	RE_WAVEDONE,a14
	jreq	hqswave_successful
	cmpi	RE_ABORT,a14
	jreq	hqswave_aborted
	cmpi	RE_BACKUP,a14
	jreq	hqsback_up
	jruc	hqsrobo_end

hqsplayer_died
	jruc	hqsrobo_loop

hqswave_successful
	inc	a0
	cmpi	16,a0
	jrne	hqsrobo_loop
	jruc	hqsrobo_end

hqswave_aborted
	jruc	hqsrobo_end

hqsback_up
	dec	a0
	jrnn	hqsrobo_loop
	clr	a0
	jruc	hqsrobo_loop

hqsrobo_end
	RETP


*****************************************************************************
******************************************************************************
******************************************************************************

 SUBRP	reset_roboscore

	clr	a14
	move	a14,@robotron_score,L
	rets


*****************************************************************************
******************************************************************************
******************************************************************************

 SUBR	robo_game

	sla	4,a0
	move	a0,@robo_wave,W

	calla	display_blank
	calla	WIPEOUT			;CLEAN SYSTEM OUT

	clr	a0
	move	a0,@HALT
	move	a0,@dtype		;2d mode
	move	a0,@IRQSKYE
	move	a0,@CCCCount

	movk	1,a0			;page flipping on
	move	a0,@dpageflip

	SLEEPK	1

	movi	SCRNEND,a0		;[256,405]
	move	a0,@SCRNLR,L

	clr	a0
	move	a0,@WORLDTLX,L
	move	a0,@WORLDTLY,L

	SLEEPK	2

	calla	nosounds		;kill the select music

	;draw the frame
	move	@robo_wave,a0
	addi	zypborder_colors,a0
	move	*a0,a0,W
	callr	draw_frame

	movk	1,a0
	move	a0,@DISPLAYON

	SLEEPK	2

	clr	a14
	move	a14,@player_dead,W	;clear the done flag

	;initialize the robo palette color cycles
	callr	robo_pal_cycles

	;initialize the badguy count
	clr	a14
	move	a14,@live_badguys,W

	;place the wave count
	callr	wave_count

	;create the score monitor
	CREATE	ROBOSCORE_PID,score

	;set up the player object
	CREATE	ROBOMAN_PID,our_hero		;start the little guy up
	CREATE	PLYRGUN_PID,player_gun	;give him a weapon
	move	a0,@gun_proc,L		;save the address

	;set up some grunts
	move	@robo_wave,a0
	addi	zypwave_grunts,a0
	move	*a0,a0,W
	move	@robo_wave,a2
	addi	zypgrunt_speeds,a2
	move	*a2,a2,W
	callr	make_grunts

	;make some hulks
	move	@robo_wave,a0
	addi	zypwave_hulks,a0
	move	*a0,a0,W
	callr	make_hulks

	;sphereoids
	move	@robo_wave,a0
	addi	zypwave_sphereoids,a0
	move	*a0,a0,W
	callr	make_sphereoids

	;quarks
	move	@robo_wave,a0
	addi	zypwave_quarks,a0
	move	*a0,a0,W
	callr	make_quarks

	;make a few posts
	move	@robo_wave,a0
	addi	zypwave_posts,a0
	move	*a0,a0,W

	move	@robo_wave,a1
	addi	zyppost_types,a1
	move	*a1,a1,W

	move	@robo_wave,a2
	addi	zyppost_colors,a2
	move	*a2,a2,W

	callr	make_posts

	;and some people
	move	@robo_wave,a0
	move	a0,a1
	move	a0,a2
	addi	zypwave_moms,a0
	addi	zypwave_dads,a1	
	addi	zypwave_kids,a2
	move	*a0,a0,W
	move	*a1,a1,W
	move	*a2,a2,W
	callr	make_humans

	;start the collision checker
	CREATE	COLL_PID,collisions

	;create the both-start-btn watcher
	clr	a0
	move	a0,@starts_down,W
	move	a0,@forward,W
	move	a0,@backward,W
	CREATE	MISC_PID,watch_both_starts

	.if	WAVE_CONTROL
	CREATE	MISC_PID,wave_mover
	.endif

	.if DEBUG
	.if BOG_MONITOR
	CREATE	MISC_PID,bog_o_meter
	.endif
	.endif

	calla	display_unblank

zypnot_done
	SLEEPK	1
	move	@live_badguys,a14
	jrz	zypwave_done

	move	@player_dead,a14
	jrnz	zypdead_hero

	move	@starts_down,a14
	jrnz	zypwave_abort

	move	@forward,a14
	jrnz	zypwave_done

	move	@backward,a14
	jrnz	zypback_up
	jruc	zypnot_done


zypwave_done
	movi	RE_WAVEDONE,a14
	jruc	zypquit
zypdead_hero
	movi	RE_DEADPLAYER,a14
	jruc	zypquit
zypwave_abort
	movi	RE_ABORT,a14
	jruc	zypquit

zypback_up
	movi	RE_BACKUP,a14
	jruc	zypquit

zypquit
	move	a14,@robo_end,W

	;put the wave back in a0 just like we found it
	move	@robo_wave,a0,W
	sra	4,a0
	RETP


zypborder_colors
	.if	ROBO_DEBUG
	.word	1
	.endif
	.word	01,06,01,14,07,03,02,08
	.word	00,10,01,06,01,14,07,03

zypwave_grunts
	.if	ROBO_DEBUG
	.word	4
	.endif
;	.word	15,17,22,34,20,30,00,30
;	.word	30,25,30,00,30,27,25,30

	.word	15,17,22,34,20,32,00,35
	.word	60,25,35,00,35,27,25,35

zypgrunt_speeds
	.if	ROBO_DEBUG
	.word	1000
	.endif
	.word	20,15,15,15,15,15,15,15
	.word	15,15,14,14,14,14,14,13

zypwave_posts
	.if	ROBO_DEBUG
	.word	15
	.endif
	.word	05,15,25,25,20,25,00,25
	.word	00,20,25,00,25,05,20,25

zyppost_types
	.if	ROBO_DEBUG
	.word	0
	.endif
	.word	0,1,3,8,4,2,0,7
	.word	0,5,0,1,3,8,4,2

zyppost_colors
	.if	ROBO_DEBUG
	.word	0Fh
	.endif
	.word	15,14,11,13,14,15,14,11
	.word	14,10,15,14,11,13,14,15

zypwave_hulks
	.if	ROBO_DEBUG
	.word	0
	.endif
	.word	00,05,06,07,00,07,12,08
	.word	04,00,08,13,08,20,02,03

zypwave_sphereoids
	.if	ROBO_DEBUG
	.word	0
	.endif
	.word	00,01,03,04,01,04,00,05
	.word	05,01,05,00,05,02,01,05

zypwave_quarks
	.if	ROBO_DEBUG
	.word	0
	.endif
	.word	00,00,00,00,00,00,10,00
	.word	00,00,00,12,00,00,00,00

zypwave_moms
	.if	ROBO_DEBUG
	.word	2
	.endif
	.word	01,01,02,02,15,03,04,03
	.word	03,00,03,03,03,05,00,03

zypwave_dads
	.if	ROBO_DEBUG
	.word	2
	.endif
	.word	01,01,02,02,00,03,04,03
	.word	03,22,03,03,03,05,00,03

zypwave_kids
	.if	ROBO_DEBUG
	.word	2
	.endif
	.word	00,01,02,02,01,03,04,03
	.word	03,00,03,03,03,05,22,03


*****************************************************************************
******************************************************************************
******************************************************************************
*
*	PLAYER SECTION
*

	;reg use
	; a4  - current position in animation script
	; a5  - head of current animation script
	; a6  - tail of current animation script
	; a8  - player object
	; a9  - motion count accumulator
	; a10 - direction of motion

 SUBRP	our_hero

	;create the player object
	movi	[mzjstart_x,0],a0
	movi	[mzjstart_y,0],a1
	movi	man_d1,a2
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSPLYR|TYPPLYR,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;set the global pointer
	move	a8,@player_object,L

	; initiailize direction of motion
	clr	a10

mzjnot_done
	PUSHP	a4,a5,a6
	SLEEPK	1
	PULLP	a4,a5,a6

	; move him first
	callr	mzjmove_player

	; change his animation frame, if neccesary
	callr	mzjchange_frame

	jruc	mzjnot_done

mzjplayer_dead
	;kill the gun process
	move	@gun_proc,a0,L
	calla	KILL

	movi	BULLET_PID,a0
	calla	KIL1C

	movi	GRUNT_PID,a0
	calla	KIL1C

	movi	HULK_PID,a0
	calla	KIL1C

	movi	HUMAN_PID,a0
	calla	KIL1C

	movi	SPHEREOID_PID,a0
	calla	KIL1C

	movi	ENFORCER_PID,a0
	calla	KIL1C

	movi	SPARK_PID,a0
	calla	KIL1C

	movi	QUARK_PID,a0
	calla	KIL1C

	movi	TANK_PID,a0
	calla	KIL1C

	movi	SHELL_PID,a0
	calla	KIL1C

	calla	STOPOBJS

	;switch frames
	movi	robo_dead,a0,L
	calla	civanic

	;death sound
	movi	RS_DIE,a0
	calla	robo_sound

	SLEEP	120
	movk	1,a14
	move	a14,@player_dead,W

	DIE

******************************************************************************
*
*	player move routine
*

 SUBRP	mzjmove_player

	clr	a0
	calla	get_stick_val_cur
	btst	JOYDN,a0
	jrnz	mzjmove_down
	btst	JOYUP,a0
	jrnz	mzjmove_up
	btst	JOYRGT,a0
	jrnz	mzjmove_right
	btst	JOYLFT,a0
	jrnz	mzjmove_left
	jruc	mzjno_move

mzjmove_down
	btst	JOYRGT,a0
	jrnz	mzjmove_downright
	btst	JOYLFT,a0
	jrnz	mzjmove_downleft

	;increment Y
	move	*a8(OYPOS),a14,W
	inc	a14
	move	a14,*a8(OYPOS),W
	jruc	mzjmove_done

mzjmove_up
	btst	JOYRGT,a0
	jrnz	mzjmove_upright
	btst	JOYLFT,a0
	jrnz	mzjmove_upleft

	;decrement Y
	move	*a8(OYPOS),a14,W
	dec	a14
	move	a14,*a8(OYPOS),W
	jruc	mzjmove_done

mzjmove_right
	;increment X
	move	*a8(OXPOS),a14,W
	inc	a14
	move	a14,*a8(OXPOS),W
	jruc	mzjmove_done

mzjmove_left
	;decrement X
	move	*a8(OXPOS),a14,W
	dec	a14
	move	a14,*a8(OXPOS),W
	jruc	mzjmove_done

mzjmove_upright
	; decrement Y and increment X
	move	*a8(OYPOS),a14,W
	dec	a14
	move	a14,*a8(OYPOS),W
	move	*a8(OXPOS),a14,W
	inc	a14
	move	a14,*a8(OXPOS),W
	jruc	mzjmove_done

mzjmove_upleft
	; decrement Y and decrement X
	move	*a8(OYPOS),a14,W
	dec	a14
	move	a14,*a8(OYPOS),W
	move	*a8(OXPOS),a14,W
	dec	a14
	move	a14,*a8(OXPOS),W
	jruc	mzjmove_done

mzjmove_downright
	; increment Y and increment X
	move	*a8(OYPOS),a14,W
	inc	a14
	move	a14,*a8(OYPOS),W
	move	*a8(OXPOS),a14,W
	inc	a14
	move	a14,*a8(OXPOS),W
	jruc	mzjmove_done

mzjmove_downleft
	; increment Y and decrement X
	move	*a8(OYPOS),a14,W
	inc	a14
	move	a14,*a8(OYPOS),W
	move	*a8(OXPOS),a14,W
	dec	a14
	move	a14,*a8(OXPOS),W
	jruc	mzjmove_done

mzjmove_done
	; check bounds
	move	*a8(OXPOS),a14,W
	cmpi	mzjlow_x,a14,W
	jrgt	mzjnot_lowx
	; too low on x
	inc	a14
	move	a14,*a8(OXPOS),W

mzjnot_lowx
	cmpi	mzjhigh_x,a14,W
	jrle	mzjnot_highx
	; too high on x
	dec	a14
	move	a14,*a8(OXPOS),W

mzjnot_highx

	move	*a8(OYPOS),a14,W
	cmpi	mzjlow_y,a14,W
	jrgt	mzjnot_lowy
	; too low on y
	inc	a14
	move	a14,*a8(OYPOS),W

mzjnot_lowy
	cmpi	mzjhigh_y,a14,W
	jrle	mzjnot_highy
	; too high on y
	dec	a14
	move	a14,*a8(OYPOS),W

mzjnot_highy
mzjno_move

mzjdone_moving
	rets

******************************************************************************
*
*	player animation routine
*


 SUBRP	mzjchange_frame
	;reg use
	; a0  scratch
	; a1  sctatch
	; a3  new direction of motion
	; a10 old direction of motion - update

	clr	a0
	clr	a2
	calla	get_stick_val_cur
	move	a0,a3

	cmp	a0,a10
	jreq	mzjsame_direction
	jruc	mzjnew_direction

mzjnew_direction
	; start a new script.  first use the joystick bits to compute an
	; offset into the script table.
	X32	a0		;multiply by 32
	addi	mzjscript_map,a0	;add the address of the script table
	move	*a0,a0,L	;get the address of the script

	; get the tail and head of the image list for this script
	move	*a0+,a6,L
	move	a0,a5

	;a5 now points to the first image in the script.  change to it.
	move	*a5,a0,L
	calla	civanic

	;set the new direction thingie and script pointer
	move	a3,a10
	move	a5,a4

	;set the motion count
	movi	mzjmotion_count,a9
	jruc	mzjdone_changing

mzjsame_direction
	;check the motion count
	dec	a9
	jrnz	mzjdone_changing

	;reset the motion count
	movi	mzjmotion_count,a9

	;increment the pointer, wrap if neccesary
	addi	20h,a4
	cmp	a4,a6
	jrne	mzjno_wrap
	move	a5,a4

mzjno_wrap
	;a4 is the new image.  change to it.
	move	*a4,a0,L
	calla	civanic

	jruc	mzjdone_changing

mzjdone_changing
	rets


******************************************************************************
*
*	player collision routines
*

 SUBR	player_die
	PUSH	a1,a7

	;we hit some kind of bad guy and are dead
	movi	CLSDEAD,a14
	move	a14,*a8(OID),W
	move	*a8(OPLINK),a0,L
	movi	DEADPLAYER_PID,a1
	movi	mzjplayer_dead,a7
	calla	XFERPROC

	PULL	a1,a7
	rets


******************************************************************************
*
*	player configuration data
*

;start position
mzjstart_x	equ	197
mzjstart_y	equ	123

; motion boundaries
mzjlow_x		equ	53
mzjhigh_x		equ	347-7
mzjlow_y		equ	45
mzjhigh_y		equ	231-12

;motion count - controls animation speed
mzjmotion_count	equ	2	;there will be trouble if this is zero

; walking animation scripts
mzjani_holdstill
	.long	mzjani_holdstillx
	.long	man_d1
mzjani_holdstillx

mzjani_walkup
	.long	mzjani_walkupx
	.long	man_u1
	.long	man_u2
	.long	man_u1
	.long	man_u3
mzjani_walkupx

mzjani_walkdown
	.long	mzjani_walkdownx
	.long	man_d1
	.long	man_d2
	.long	man_d1
	.long	man_d3
mzjani_walkdownx

mzjani_walkright
	.long	mzjani_walkrightx
	.long	man_r1
	.long	man_r2
	.long	man_r1
	.long	man_r3
mzjani_walkrightx

mzjani_walkleft
	.long	mzjani_walkleftx
	.long	man_l1
	.long	man_l2
	.long	man_l1
	.long	man_l3
mzjani_walkleftx

mzjani_bad
	.long	mzjani_badx
	.long	robo_bad
mzjani_badx

; direction - script mappings: use AND combo of joy bits as index
mzjscript_map
	.long	mzjani_holdstill
	.long	mzjani_walkup
	.long	mzjani_walkdown
	.long	mzjani_bad
	.long	mzjani_walkleft
	.long	mzjani_walkleft
	.long	mzjani_walkleft
	.long	mzjani_bad
	.long	mzjani_walkright
	.long	mzjani_walkright
	.long	mzjani_walkright
	.long	mzjani_bad
	.long	mzjani_bad
	.long	mzjani_bad
	.long	mzjani_bad
	.long	mzjani_bad
mzjscript_mapx


*****************************************************************************
*
*	player gun process
*

	;reg use
	;a9  time till next shot is allowed

 SUBRP	player_gun

	clr	a9
	jruc	ujdsleep

ujdcheck_shot
	movk	1,a0
	calla	get_stick_val_cur
	jrz	ujdsleep			;no shot

	;fire in the indicated direction
	move	a0,a10
	CREATE	BULLET_PID,bullet
	movi	ujdrate_of_fire,a9

	;shoot sound
	movi	RS_SHOOT,a0
	callr	robo_sound

	jruc	ujdsleep
	
ujdtoo_soon
	dec	a9
	jruc	ujdsleep

ujdsleep
	SLEEPK	1
	move	a9,a9
	jrnz	ujdtoo_soon
	jruc	ujdcheck_shot

ujddone
	DIE

ujdrate_of_fire	equ	6	;min ticks between shots


*****************************************************************************
*
*	player bullet process
*

	;reg use
	; a4 velocity accumulator (used to pick the correct bullet)
	; a5 vert indicator
	; a8 bullet object
	;a10 (in) stick bits

 SUBRP	bullet

	;create a bullet object
	movi	[500,0],a0
	clr	a1
	movi	bullet_hrz,a2
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSPLYR|TYPBULLET,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;set the speed and start position
	move	@player_object,a9,L
	clr	a4
	clr	a5
	move	*a9(OXPOS),a0,W
	addk	ykjbstart_xoff,a0
	move	a0,*a8(OXPOS),W
	move	*a9(OYPOS),a0,W
	addk	ykjbstart_yoff,a0
	move	a0,*a8(OYPOS),W

	btst	JOYRGT,a10
	jrz	ykjnot_right
	move	*a8(OXPOS),a14,W	;pos
	addi	ykjbstart_radj,a14
	move	a14,*a8(OXPOS),W
	movi	ykjbullet_speed,a0	;speed
	move	a0,*a8(OXVEL),L
	inc	a4

ykjnot_right

	btst	JOYLFT,a10
	jrz	ykjnot_left
	move	*a8(OXPOS),a14,W	;pos
	addi	ykjbstart_ladj,a14
	move	a14,*a8(OXPOS),W
	movi	-ykjbullet_speed,a0	;speed
	move	a0,*a8(OXVEL),L
	dec	a4

ykjnot_left

	btst	JOYUP,a10
	jrz	ykjnot_up
	move	*a8(OYPOS),a14,W	;pos
	addi	ykjbstart_uadj,a14
	move	a14,*a8(OYPOS),W
	movi	-ykjbullet_speed,a0	;speed
	move	a0,*a8(OYVEL),L
	dec	a4
	inc	a5

ykjnot_up

	btst	JOYDN,a10
	jrz	ykjnot_down
	move	*a8(OYPOS),a14,W	;pos
	addi	ykjbstart_dadj,a14
	move	a14,*a8(OYPOS),W
	movi	ykjbullet_speed,a0	;speed
	move	a0,*a8(OYVEL),L
	inc	a4
	inc	a5

ykjnot_down

	;set the image
	movi	bullet_hrz,a0
	move	a5,a5
	jrz	ykjhoriz
	movi	bullet_vrt,a0
ykjhoriz

	;vert/horz is set.  check for diagonal instead
	cmpi	1,a4
	jreq	ykjimage_set
	cmpi	-1,a4
	jreq	ykjimage_set

	;it's a diagonal.  if a4 is 0, use frontslash
	move	a4,a4
	jrz	ykjfront_slash
	movi	bullet_bck,a0
	jruc	ykjimage_set

ykjfront_slash
	movi	bullet_fnt,a0

ykjimage_set
	calla	civanic

ykjloop
	callr	bounds_check
	move	a0,a0
	jrnz	ykjhit_wall
	SLEEPK	1
	jruc	ykjloop

ykjhit_wall
	;zoinks!  We've hit a wall. back up to be flush against it.
	; a2 holds the number of pixels we have to back up.

	;well, we can overlap on the wall a LITTLE.  say, 2 pixels.
	subk	2,a2

	move	*a8(OXVEL),a0,L
	jrz	ykjy_adjust
	jrn	ykjneg_xvel
	move	*a8(OXPOS),a0,W
	sub	a2,a0
	move	a0,*a8(OXPOS),W
	jruc	ykjy_adjust
ykjneg_xvel
	move	*a8(OXPOS),a0,W
	add	a2,a0
	move	a0,*a8(OXPOS),W

ykjy_adjust
	move	*a8(OYVEL),a0,L
	jrz	ykjkill_bullet
	jrn	ykjneg_yvel
	move	*a8(OYPOS),a0,W
	sub	a2,a0
	move	a0,*a8(OYPOS),W
	jruc	ykjkill_bullet
ykjneg_yvel
	move	*a8(OYPOS),a0,W
	add	a2,a0
	move	a0,*a8(OYPOS),W

ykjkill_bullet
	SLEEPK	1
	calla	DELOBJA8
	DIE


******************************************************************************
*
* player bullet collision routines
*

 SUBR	bullet_die
	PUSH	a1,a7,a9,a10,a11

	;we hit some kind of bad guy and are stopped.
	movi	CLSDEAD,a14
	move	a14,*A8(OID)
	move	*a8(OPLINK),a0,L
	movi	DEADBULLET_PID,a1
	movi	ykjkill_bullet,a7
	calla	XFERPROC

	PULL	a1,a7,a9,a10,a11
	rets


ykjbullet_speed	equ	00080000h	;pixels per frame

ykjlow_x		equ	53
ykjhigh_x		equ	346
ykjlow_y		equ	45
ykjhigh_y		equ	230

;hero anim point is top left.  bullet anim point is center.  use these to
; adjust the starting position of the bullet.
; No.  The bullet anim points are gone now.  Unk.
ykjbstart_xoff	equ	3
ykjbstart_yoff	equ	5

ykjbstart_radj	equ	7
ykjbstart_ladj	equ	-13
ykjbstart_uadj	equ	-14
ykjbstart_dadj	equ	8


*****************************************************************************
******************************************************************************
******************************************************************************
*
*	GRUNT SECTION
*

	;reg use
	; a0 (in) # of grunts
	; a1 scratch
	; a2 (in) initial speed

 SUBRP	make_grunts

	move	a0,a0
	jrz	tkadone

tkaanother_grunt
	PUSHP	a0

tkaget_pos
	movi	tkamax_x-tkamin_x,a0
	calla	RNDRNG0
	move	a0,a9
	movi	tkamax_y-tkamin_y,a0
	calla	RNDRNG0
	move	a0,a10

	addi	tkamin_x,a9
	addi	tkamin_y,a10

	cmpi	tkamid_x1,a9
	jrle	tkaplace_grunt
	cmpi	tkamid_x2,a9
	jrge	tkaplace_grunt
	cmpi	tkamid_y1,a10
	jrle	tkaplace_grunt
	cmpi	tkamid_y2,a10
	jrge	tkaplace_grunt
	jruc	tkaget_pos

tkaplace_grunt
	;assign a random starting position
	move	a2,a11
	CREATE	GRUNT_PID,grunt
	PULLP	a0
	dsj	a0,tkaanother_grunt

tkadone
	rets


tkamin_x	equ	53	;grunt start outer boundaries
tkamax_x	equ	347-9
tkamin_y	equ	45
tkamax_y	equ	231-13

tkamid_x1	equ	200-60	;grunt start inner boundaries
tkamid_x2	equ	200+60
tkamid_y1	equ	138-60
tkamid_y2	equ	138+60


*****************************************************************************
*
*	grunt process
*

	STRUCTPD
	WORD	ggrACCEL_TIMER	;UHW accelerator count
	LONG	ggrDEATH_SEQUENCE	;UHL anim to use when dying
				;    (set by coll routines)

	;reg use
	; a8 object handle
	; a9 (in)  starting x
	; a9 (use) ticks between moves
	;a10 (in)  starting y
	;a10 (use) ticks until next move
	;a11 (in)  initial speed
	;a11 (use) frame count

 SUBRP	grunt

	;increment the badguy count
	move	@live_badguys,a14,W
	inc	a14
	move	a14,@live_badguys,W

	;create a grunt object
	move	a9,a0
	sla	16,a0
	move	a10,a1
	sla	16,a1
	movi	grunt_1,a2
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSENMY|TYPGRUNT,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;initialize move timer
	move	a11,a9

	;initialize time till next move
	move	a9,a0
	calla	RNDRNG0
	add	a11,a0
	move	a0,a10

	;initialize accel counter
	movi	ggracceleration,a14
	move	a14,*a13(ggrACCEL_TIMER),W

	;initialize frame counter
	clr	a11

ggrloop
	move	*a13(ggrACCEL_TIMER),a14,W
	dec	a14
	jrnz	ggrno_accel

	movi	ggracceleration,a14
	cmpi	ggrtop_speed,a9
	jreq	ggrno_accel
	dec	a9

ggrno_accel
	move	a14,*a13(ggrACCEL_TIMER),W
	SLEEPK	1

	dsj	a10,ggrloop
	callr	ggrmove_grunt
	move	a9,a10
	jruc	ggrloop

ggrdie
	;we've croaked
	;decrement the badguy count
	move	@live_badguys,a14,W
	dec	a14
	move	a14,@live_badguys,W

	;set up the animation
	move	*a13(ggrDEATH_SEQUENCE),a9,L
	move	*a8(OCTRL),a0

ggrdieloop
	move	*a9+,a0,L
	jrz	ggrdead_n_buried
	calla	civanic
	sleepk	ggrdeath_speed
	jruc	ggrdieloop

ggrdead_n_buried
	calla	DELOBJA8

	DIE

******************************************************************************
*
*	grunt move routine
*

 SUBRP	ggrmove_grunt
	move	@player_object,a14,L

	;move in X
	move	*a14(OXPOS),a0,W
	move	*a8(OXPOS),a1,W
	sub	a1,a0
	jrz	ggrdone_movex
	jrn	ggrmove_left
	jruc	ggrmove_right

ggrmove_left
	move	*a8(OXPOS),a1,W
	addi	-ggrxmotion_inc,a1
	move	a1,*a8(OXPOS),W
	jruc	ggrdone_movex

ggrmove_right
	move	*a8(OXPOS),a1,W
	addi	ggrxmotion_inc,a1
	move	a1,*a8(OXPOS),W
	jruc	ggrdone_movex

ggrdone_movex

	move	*a14(OYPOS),a0,W
	move	*a8(OYPOS),a1,W
	sub	a1,a0
	jrz	ggrdone_movey
	jrn	ggrmove_up
	jruc	ggrmove_down

ggrmove_up
	move	*a8(OYPOS),a1,W
	addi	-ggrymotion_inc,a1
	move	a1,*a8(OYPOS),W
	jruc	ggrdone_movey

ggrmove_down
	move	*a8(OYPOS),a1,W
	addi	ggrymotion_inc,a1
	move	a1,*a8(OYPOS),W
	jruc	ggrdone_movey

ggrdone_movey

	;step through the animation
	inc	a11
	cmpi	4,a11
	jrne	ggrno_wrap
	clr	a11

ggrno_wrap
	move	a11,a14
	X32	a14
	addi	ggrwalk_script,a14
	move	*a14,a0,L
	calla	civanic

	;sound
	movi	RS_GRUNT,a0
	callr	robo_sound
	rets


******************************************************************************
*
*	grunt collision routines
*

 SUBR	grunt_shot
	;hit by player gunfire
	PUSH	a1,a7

	;jeepers.  we're dead.
	movi	CLSDEAD,a14
	move	a14,*a8(OID),W

	move	*a0(OXVEL),a14,L
	jrz	ggrvert_bullet
	move	*a0(OYVEL),a1,L
	jrz	ggrhorz_bullet

	add	a1,a14
	jrz	ggrdiag_13
	jruc	ggrdiag_24

ggrhorz_bullet
	movi	ggrdie_vert,a14
	jruc	ggrdeath_set
ggrvert_bullet
	movi	ggrdie_horz,a14
	jruc	ggrdeath_set
ggrdiag_13
	movi	ggrdie_diag24,a14
	jruc	ggrdeath_set
ggrdiag_24
	movi	ggrdie_diag13,a14
	jruc	ggrdeath_set

ggrdeath_set

	move	*a8(OPLINK),a0,L
	move	a14,*a0(ggrDEATH_SEQUENCE),L
	movi	DEADGRUNT_PID,a1
	movi	ggrdie,a7

	move	*a0(PA9),a9,L
	move	*a0(PA10),a10,L
	calla	XFERPROC

	movi	ggrgrunt_points,a0
	callr	score_points

	;die sound
	movi	RS_HIT,a0
	calla	robo_sound

	PULL	a1,a7
	rets


 SUBR	grunt_die
	;hit a mine or something

	PUSH	a1,a7

	movi	CLSDEAD,a14
	move	a14,*a8(OID),W
	move	*a8(OPLINK),a0,L
	movi	ggrdie_vert,a14
	move	a14,*a0(ggrDEATH_SEQUENCE),L
	movi	DEADGRUNT_PID,a1
	movi	ggrdie,a7
	move	*a0(PA9),a9,L
	move	*a0(PA10),a10,L
	calla	XFERPROC

	PULL	a1,a7
	rets


******************************************************************************
*
*	grunt configuration data
*


ggrwalk_script
	.long	grunt_1
	.long	grunt_2
	.long	grunt_1
	.long	grunt_3
ggrwalk_scriptx

ggrdie_vert
	.long	grunt_xv1
	.long	grunt_xv2
	.long	grunt_xv3
	.long	grunt_xv4
	.long	0
ggrdie_vertx

ggrdie_horz
	.long	grunt_xh1
	.long	grunt_xh2
	.long	grunt_xh3
	.long	grunt_xh4
	.long	0
ggrdie_horzx

ggrdie_diag13
	.long	grunt_xdf1
	.long	grunt_xdf2
	.long	grunt_xdf3
	.long	grunt_xdf4
	.long	0
ggrdie_diag13x

ggrdie_diag24
	.long	grunt_xdb1
	.long	grunt_xdb2
	.long	grunt_xdb3
	.long	grunt_xdb4
	.long	0
ggrdie_diag24x

ggrdeath_speed	equ	3		;death seq anim speed

ggracceleration	equ	100		;decrement motion clock every X cycles
ggrtop_speed	equ	3		;as fast as they get
ggrxmotion_inc	equ	0004h
ggrymotion_inc	equ	0004h

ggrgrunt_points	equ	100		;points for killing a grunt

*****************************************************************************
******************************************************************************
******************************************************************************
*
*	POST SECTION
*
	;reg use
	; a0 - (in) # of posts to create
	; a1 - (in) type (0-8)
	; a2 - (in) color (0-F)

 SUBRP	make_posts

	move	a0,a9		;move the inputs to safer spots
	jrz	phvdone

	move	a1,a10		;type

	move	a2,a11		;color
	sla	8,a11
	or	a2,a11

phvanother_post
phvget_pos
	movi	phvmax_y-phvmin_y,a0
	calla	RNDRNG0
	move	a0,a2			;hide a0
	movi	phvmax_x-phvmin_x,a0
	calla	RNDRNG0
	move	a2,a1			;put it back

	addi	phvmin_x,a0
	addi	phvmin_y,a1

	cmpi	phvmid_x1,a0
	jrle	phvplace_post
	cmpi	phvmid_x2,a0
	jrge	phvplace_post
	cmpi	phvmid_y1,a1
	jrle	phvplace_post
	cmpi	phvmid_y2,a1
	jrge	phvplace_post
	jruc	phvget_pos

phvplace_post
	sla	16,a0			;X pos
	sla	16,a1			;Y pos

	;create the post object
	move	a10,a14
	X32	a14
	addi	phvpost_types,a14
	move	*a14,a14,L
	move	*a14,a2,L		;DON'T advance

	clr	a3
	movi	DMACNZ,a4
	movi	CLSNEUT|TYPPOST,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	move	a10,*a8(OMISC),W	;stuff the type in the object

	move	a11,*a8(OCONST),W

	movi	robo_p,a0
	calla	pal_getf
	move	a0,*a8(OPAL),W

	dsj	a9,phvanother_post

phvdone
	rets


phvmin_x	equ	53	;post start outer boundaries
phvmax_x	equ	347-17
phvmin_y	equ	45
phvmax_y	equ	231-10

phvmid_x1	equ	200-50	;post start inner boundaries
phvmid_x2	equ	200+50
phvmid_y1	equ	138-50
phvmid_y2	equ	138+50


******************************************************************************
*
*	post collision routines
*

 SUBR	post_die

	movi	CLSDEAD,a14
	move	a14,*a8(OID),W
	CREATE	DEADPOST_PID,kill_post

	rets


	;reg use
	; a8 - * image
	; a9 - anim pointer

 SUBR	kill_post

	move	*a8(OMISC),a0,W
	X32	a0
	addi	phvpost_types,a0
	move	*a0,a9,L
	move	*a8(OCTRL),a14,W
	xori	DMACNZ,a14
	ori	DMAWNZ,a14
	move	a14,*a8(OCTRL),W
phvkploop
	move	*a9+,a0,L
	jrz	phvkpdone
	calla	civanic
	SLEEPK	phvdie_speed
	jruc	phvkploop

phvkpdone
	calla	DELOBJA8
	DIE


phvdie_speed	equ	3

phvpost_types
	.long	phvstar		;0
	.long	phvcrystal	;1
	.long	phvdiamond	;2
	.long	phvsquare		;3
	.long	phvrectangle	;4
	.long	phvR2084		;5
	.long	phvpcube		;6
	.long	phvspiral		;7
	.long	phvtriangle	;8
	.long	0
phvpost_typesx

phvstar
	.long	star_1,star_2,star_3,0

phvcrystal
	.long	crystal_1,crystal_2,crystal_3,0

phvdiamond
	.long	diamond_1,diamond_2,diamond_3,0

phvsquare
	.long	square_1,square_2,square_3,0

phvrectangle
	.long	rectangle_1,rectangle_2,rectangle_3,0

phvR2084
	.long	R2084_1,R2084_2,R2084_3,0

phvpcube
	.long	pcube_1,pcube_2,pcube_3,0

phvspiral
	.long	spiral_1,spiral_2,spiral_3,0

phvtriangle
	.long	triangle_1,triangle_2,triangle_3,0


*****************************************************************************
******************************************************************************
******************************************************************************
*
*	HUMAN SECTION
*

	.bss	humans_saved,	16

	;reg use
	; a0 # of moms
	; a1 # of dads
	; a2 # of kids 

 SUBRP	make_humans

	;initialize the savecount
	clr	a14
	move	a14,@humans_saved,W

	;first make the moms
	move	a0,a0
	jrz	zegskip_moms
zegmom_loop
	PUSHP	a0,a1,a2
	callr	zegrand_position
	movi	ROBJ_MOM,a9
	CREATE	HUMAN_PID,human
	PULLP	a0,a1,a2
	dsj	a0,zegmom_loop

zegskip_moms

	;dads
	move	a1,a1
	jrz	zegskip_dads
zegdad_loop
	PUSHP	a1,a2
	callr	zegrand_position
	movi	ROBJ_DAD,a9
	CREATE	HUMAN_PID,human
	PULLP	a1,a2
	dsj	a1,zegdad_loop

zegskip_dads

	;kids
	move	a2,a2
	jrz	zegskip_kids
zegkid_loop
	PUSHP	a2
	callr	zegrand_position
	movi	ROBJ_KID,a9
	CREATE	HUMAN_PID,human
	PULLP	a2
	dsj	a2,zegkid_loop

zegskip_kids
	rets


	;reg use
	; no input
	;a10 - (ret) an X val
	;a11 - (ret) a Y val

 SUBRP zegrand_position
	movi	zegmax_x-zegmin_x,a0
	calla	RNDRNG0
	move	a0,a10
	addi	zegmin_x,a10

	movi	zegmax_y-zegmin_y,a0
	calla	RNDRNG0
	move	a0,a11
	addi	zegmin_y,a11

	rets


******************************************************************************
*
*	human process
*
	STRUCTPD
	LONG	zegHITPOST	;UHL post we've hit

	;reg use
	; a8 - hObject
	; a9 - (in)  OID
	; a9 - (use) image table address (zegmom_table, zegdad_table...)
	;a10 - (in)  x
	;a10 - (use) direction of motion (1-8)
	;a11 - (in)  y
	;a11 - (use) frame index (0-3)


 SUBRP	human

	cmpi	ROBJ_MOM,a9
	jreq	zeginit_mom
	cmpi	ROBJ_DAD,a9
	jreq	zeginit_dad
	cmpi	ROBJ_KID,a9
	jreq	zeginit_kid

	LOCKUP	;bad objid

zeginit_mom
	movi	zegmom_table,a9
	jruc	zegmake_obj

zeginit_dad
	movi	zegdad_table,a9
	jruc	zegmake_obj

zeginit_kid
	movi	zegkid_table,a9
	jruc	zegmake_obj

zegmake_obj
	;cweate a widdle people object
	move	a10,a0
	sla	16,a0
	move	a11,a1
	sla	16,a1
	move	*a9(zegwalk_down),a2,L
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSNEUT|TYPHUMAN,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;choose a direction of motion
	movi	7,a0
	calla	RNDRNG0
	inc	a0
	move	a0,a10

	;set the frame index
	movi	3,a11
	callr	zegadvance_frame

zegmove_loop
	SLEEPK	zegsleep_time
	callr	zegrand_dirchange
	callr	zegmove_onestep
	move	a0,a0
	jrnz	zeghit_wall
	callr	zegadvance_frame
	jruc	zegmove_loop

zeghit_wall
	;sleep first because: If you move and bump into both a wall and a
	; post at the same time (could happen), and then you immediately
	; reverse direction, you'll then get flipped AGAIN when you hit
	; the post and get forwarded right through the wall.  yuck.  so
	; instead when you hit a wall, wait a frame and let the post
	; collisions sort themselves out, THEN change direction.
	SLEEPK	1
	callr	zegreverse_direction
	callr	zegadvance_frame
	jruc	zegmove_loop

zeghit_post
	callr	post_adjust
	callr	zegadvance_frame
	jruc	zegmove_loop

zegsaved
	;sound
	movi	RS_RESCUE,a0
	callr	robo_sound

	;increment the save count
	move	@humans_saved,a14,W
	inc	a14
	move	a14,@humans_saved,W

	cmpi	5,a14
	jrle	zegno_cap
	movi	5,a14
zegno_cap
	dec	a14

	PUSH	a14
	sla	4,a14
	addi	zegscore_table,a14
	move	*a14,a0,W
	callr	score_points
	PULL	a14

	X32	a14
	addi	zegsaved_table,a14
	move	*a14,a0,L
	calla	civanic

	SLEEP	120
	calla	DELOBJA8
	jruc	zegdone

zegkilled
	movi	skull,a0
	calla	civanic

	SLEEP	120
	calla	DELOBJA8
;	jruc	zegdone		;fall through

zegdone
	DIE


******************************************************************************
* Human has bounced into or started inside a post.  Make it better.
* Do this by reversing the direction of the human and moving it forward
* in the new direction until it's clear of the post.
*

	;reg use
	; a0 - X overlap
	; a1 - Y overlap

 SUBRP	post_adjust
	PUSH	a0,a1,a2,a3,a7

	move	*a13(zegHITPOST),a7,L

	callr	zegreverse_direction

	;calculate degree of X and Y overlap
	move	a10,a2
	X32	a2
	addi	zegwalk_increments,a2
	move	*a2+,a3,W	;y vel
	jrn	zegyvel_neg
	jrz	zegyvel_zero

zegyvel_pos
	move	*a7(OYPOS),a1
	move	*a7(OSIZEY),a14
	add	a14,a1
	move	*a8(OYPOS),a14
	sub	a14,a1
	jruc	zegdo_xvel
zegyvel_zero
	movi	100h,a1
	jruc	zegdo_xvel
zegyvel_neg
	move	*a8(OYPOS),a1
	move	*a8(OSIZEY),a14
	add	a14,a1
	move	*a7(OYPOS),a14
	sub	a14,a1
;	jruc	zegdo_xvel

zegdo_xvel
	move	*a2,a3,W	;x vel
	jrn	zegxvel_neg
	jrz	zegxvel_zero

zegxvel_pos
	move	*a7(OXPOS),a0
	move	*a7(OSIZEX),a14
	add	a14,a0
	move	*a8(OXPOS),a14
	sub	a14,a0
	jruc	zegovlap_done
zegxvel_zero
	movi	100h,a0
	jruc	zegovlap_done
zegxvel_neg
	move	*a8(OXPOS),a0
	move	*a8(OSIZEX),a14
	add	a14,a0
	move	*a7(OXPOS),a14
	sub	a14,a0
;	jruc	zegovlap_done

zegovlap_done
	;a0 and a1 are the X and Y overlaps, respectively.  We need only
	; worry about the smallest of the two and move that many steps.  Note
	; that if velocity in a given direction is zero, the overlap is
	; set to some outrageously large value so that the other direction
	; is all that counts.
	cmp	a1,a0
	jrle	zeglow_set
	move	a1,a0
zeglow_set
	;a0 is now the smallest.
	move	a0,a1
	move	a10,a2
	X32	a2
	addi	zegwalk_increments,a2
	move	*a2+,a3,W	;y vel
	mpys	a3,a1
	move	*a2,a3,W	;x vel
	mpys	a0,a3
	move	a3,a0

	;a0 and a1 now hold X and Y adjustments, respectively.
	move	*a8(OXPOS),a14
	add	a0,a14
	move	a14,*a8(OXPOS)
	move	*a8(OYPOS),a14
	add	a1,a14
	move	a14,*a8(OYPOS)
	
	PULL	a0,a1,a2,a3,a7
	rets


******************************************************************************
*
*	human movement/animation routine
*

	;reg use
	; a0 - scratch
	; a0 (out) - walls hit (0-2)
	; a1 - scratch
	; a8 - (in)  hObject
	; a9 - (in)  image table address (zegmom_table, zegdad_table...)
	;a10 - (in)  direction of motion (1-8)
	;a11 - (in)  frame index (0-3)

 SUBRP	zegmove_onestep

	;move the object
	move	a10,a1
	X32	a1
	addi	zegwalk_increments,a1
	move	*a1+,a14,W
	move	*a8(OYPOS),a0,W
	add	a14,a0
	move	a0,*a8(OYPOS),W
	move	*a1+,a14,W
	move	*a8(OXPOS),a0,W
	add	a14,a0
	move	a0,*a8(OXPOS),W

	clr	a1
	move	*a8(OXPOS),a0,W

	cmpi	zegmin_x,a0
	jrge	zegnot_lowx

	;low x
	inc	a1
	movi	zegmin_x,a0
	move	a0,*a8(OXPOS),W

zegnot_lowx
	cmpi	zegmax_x,a0
	jrle	zegnot_highx

	;high x
	inc	a1
	movi	zegmax_x,a0
	move	a0,*a8(OXPOS),W

zegnot_highx

	move	*a8(OYPOS),a0,W

	cmpi	zegmin_y,a0
	jrge	zegnot_lowy

	;low y
	inc	a1
	movi	zegmin_y,a0
	move	a0,*a8(OYPOS),W

zegnot_lowy
	cmpi	zegmax_y,a0
	jrle	zegnot_highy

	;high y
	inc	a1
	movi	zegmax_y,a0
	move	a0,*a8(OYPOS),W

zegnot_highy
	move	a1,a0
	rets


******************************************************************************
* Changes direction one time in zegdirchange_chance.
*

 SUBRP	zegrand_dirchange

	;1 chance in zegdirchange_chance of spontaneously switching direction
	movi	zegdirchange_chance,a0
	calla	RNDRNG0
	move	a0,a0
	jrnz	zegdirchange_done
	movi	7,a0
	calla	RNDRNG0
	inc	a0
	move	a0,a10

zegdirchange_done
	rets


******************************************************************************
* Reverses direction
*

 SUBRP	zegreverse_direction

	;reverse direction of motion
	subi	4,a10
	jrp	zegrd_done
	addi	8,a10
zegrd_done
	rets

******************************************************************************
* Advances the frame
*

 SUBRP	zegadvance_frame

	;advance the frame and set the new image
	inc	a11
	cmpi	4,a11
	jrne	zegno_wrap
	;wraparound.  reset to start
	clr	a11

zegno_wrap
	;calculate the next frame
	move	a9,a0
	move	a10,a1
	sla	4,a1		;mult by 10h
	addi	zegmotion_table,a1

	;a1 now points to one of the entries in zegmotion table
	move	*a1,a1,W
	add	a1,a0

	;a0 now points to an entry in zegxxx_table
	move	a11,a1
	X32	a1		;mult by 20h
	add	a1,a0
	move	*a0,a0,L

	calla	civanic

	rets


******************************************************************************
*
*	human collision routines
*

 SUBR	human_saved
	PUSH	a1,a7

	;change the obj id
	movi	CLSDEAD,a14
	move	a14,*a8(OID),W
	move	*a8(OPLINK),a0,L
	movi	SAVEDHUMAN_PID,a1
	movi	zegsaved,a7
	calla	XFERPROC

	PULL	a1,a7
	rets

 SUBR	human_killed
	PUSH	a1,a7

	movi	CLSDEAD,a14
	move	a14,*a8(OID),W
	move	*a8(OPLINK),a0,L
	movi	DEADHUMAN_PID,a1
	movi	zegkilled,a7
	calla	XFERPROC

	PULL	a1,a7
	rets


 SUBR	human_hitpost
	PUSH	a1,a7

	move	a0,a1
	move	*a8(OPLINK),a0,L
	move	a1,*a0(zegHITPOST),L
	move	*a0(PA8),a8,L
	move	*a0(PA9),a9,L
	move	*a0(PA10),a10,L
	move	*a0(PA11),a11,L
	movi	HUMAN_PID,a1
	movi	zeghit_post,a7
	calla	XFERPROC

	PULL	a1,a7
	rets

******************************************************************************
*
*	human configuration data
*


zegmin_x	equ	53	;human start/motion outer boundaries
zegmax_x	equ	347-11
zegmin_y	equ	45
zegmax_y	equ	231-13

zegsleep_time	equ	7
zegx_step		equ	1
zegy_step		equ	1

zegdirchange_chance	equ	40

zegwalk_increments
	.word	0,0			;because direction is 1-8, not 0-7
	.word	-zegy_step,0
	.word	-zegy_step,zegx_step
	.word	0,zegx_step
	.word	zegy_step,zegx_step
	.word	zegy_step,0
	.word	zegy_step,-zegx_step
	.word	0,-zegx_step
	.word	-zegy_step,-zegx_step
zegwalk_incrementsx

zegmotion_table
	.word	0			;because direction is 1-8, not 0-7
	.word	zegwalk_up
	.word	zegwalk_right
	.word	zegwalk_right
	.word	zegwalk_right
	.word	zegwalk_down
	.word	zegwalk_left
	.word	zegwalk_left
	.word	zegwalk_left
zegmotion_tablex

;image table direction offsets
zegwalk_left	equ	0000h
zegwalk_right	equ	zegwalk_left + (4 * 20h)
zegwalk_up	equ	zegwalk_right + (4 * 20h)
zegwalk_down	equ	zegwalk_up + (4 * 20h)

zegscore_table
	.word	1000,2000,3000,4000,5000
zegscore_tablex

;image tables
zegmom_table
	.long	mom_l1
	.long	mom_l2
	.long	mom_l1
	.long	mom_l3

	.long	mom_r1
	.long	mom_r2
	.long	mom_r1
	.long	mom_r3

	.long	mom_u1
	.long	mom_u2
	.long	mom_u1
	.long	mom_u3

	.long	mom_d1
	.long	mom_d2
	.long	mom_d1
	.long	mom_d3
zegmom_tablex

zegdad_table
	.long	dad_l1
	.long	dad_l2
	.long	dad_l1
	.long	dad_l3

	.long	dad_r1
	.long	dad_r2
	.long	dad_r1
	.long	dad_r3

	.long	dad_u1
	.long	dad_u2
	.long	dad_u1
	.long	dad_u3

	.long	dad_d1
	.long	dad_d2
	.long	dad_d1
	.long	dad_d3
zegdad_tablex

zegkid_table
	.long	kid_l1
	.long	kid_l2
	.long	kid_l1
	.long	kid_l3

	.long	kid_r1
	.long	kid_r2
	.long	kid_r1
	.long	kid_r3

	.long	kid_u1
	.long	kid_u2
	.long	kid_u1
	.long	kid_u3

	.long	kid_d1
	.long	kid_d2
	.long	kid_d1
	.long	kid_d3
zegkid_tablex

zegsaved_table
	.long	one_k
	.long	two_k
	.long	three_k
	.long	four_k
	.long	five_k
zegsaved_tablex


*****************************************************************************
******************************************************************************
******************************************************************************
*
*	HULK SECTION
*

	;reg use
	; a0 - (in) # of hulks

 SUBRP	make_hulks

	move	a0,a0
	jrz	alfdone

alfanother_hulk
	PUSHP	a0

alfget_pos
	movi	alfmax_x-alfmin_x,a0
	calla	RNDRNG0
	move	a0,a9
	movi	alfmax_y-alfmin_y,a0
	calla	RNDRNG0
	move	a0,a10

	addi	alfmin_x,a9
	addi	alfmin_y,a10

	cmpi	alfmid_x1,a9
	jrle	alfplace_hulk
	cmpi	alfmid_x2,a9
	jrge	alfplace_hulk
	cmpi	alfmid_y1,a10
	jrle	alfplace_hulk
	cmpi	alfmid_y2,a10
	jrge	alfplace_hulk
	jruc	alfget_pos

alfplace_hulk
	;assign a random starting position
	CREATE	HULK_PID,hulk
	PULLP	a0
	dsj	a0,alfanother_hulk

alfdone
	rets


alfmin_x	equ	53	;hulk start outer boundaries
alfmax_x	equ	347-13
alfmin_y	equ	45
alfmax_y	equ	231-16

alfmid_x1	equ	200-50	;hulk start inner boundaries
alfmid_x2	equ	200+50
alfmid_y1	equ	138-50
alfmid_y2	equ	138+50


*****************************************************************************
*
*	hulk process
*

	STRUCTPD
	LONG	xvzPD_SCRIPT	;UHL script head
	WORD	xvzPD_FRAME_NDX	;UHW frame index

	;reg use
	; a8 - object handle
	; a9 - (in)  starting x
	; a9 - (use) frame change count
	;a10 - (in)  starting y
	;a11 - direction of motion (0-3)

 SUBRP	hulk

	;choose a direction of motion
	movi	3,a0
	calla	RNDRNG0
	move	a0,a11

	X32	a0
	addi	xvzanim_list,a0
	move	*a0,a6,L
	move	a6,*a13(xvzPD_SCRIPT),L
	clr	a7
	move	a7,*a13(xvzPD_FRAME_NDX),W

	;create the hulk object
	move	a9,a0		;x pos
	sla	16,a0
	move	a10,a1		;y pos
	sla	16,a1

	move	a7,a14		;img
	X32	a14
	add	a6,a14
	move	*a14,a2,L

	clr	a3
	movi	DMAWNZ,a4
	movi	CLSENMY|TYPHULK,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;set the move counter
	movi	xvzmove_freq/2,a0
	calla	RNDRNG0
	addi	xvzmove_freq,a0
	move	a0,a9

xvzloop
	SLEEPK	1
	dsj	a9,xvzloop
	callr	xvzmove_hulk
	movi	xvzmove_freq,a9
	jruc	xvzloop


xvzbeen_shot	;we immediately wake up here if we've been hit and moved
		; by a player bullet.
	callr	xvzdo_bounds_check
	jruc	xvzloop

	DIE


******************************************************************************
*
*	hulk move routine
*

	;reg use
	; a0 scratch
	; a1 scratch
	; a8 object handle
	;a11 direction of motion (0-3)

 SUBRP	xvzmove_hulk
	;move him
	move	a11,a14
	X32	a14
	addi	xvzmove_table,a14
	move	*a14+,a0,W
	move	*a14,a1,W
	move	*a8(OXPOS),a14,W
	add	a0,a14
	move	a14,*a8(OXPOS),W
	move	*a8(OYPOS),a14,W
	add	a1,a14
	move	a14,*a8(OYPOS),W

	;
	;note the fall-through here
	;

	;bounds check
 SUBRP	xvzdo_bounds_check
	clr	a1

	clr	a0
	move	*a8(OXPOS),a0,W
	cmpi	xvzlow_x,a0
	jrlt	xvztoo_left
	cmpi	xvzhigh_x,a0
	jrgt	xvztoo_right
	jruc	xvzvert_check

xvztoo_left
	movi	xvzlow_x,a14
	move	a14,*A8(OXPOS),W
	ori	M_HIT_LEFT,a1
	jruc	xvzvert_check

xvztoo_right
	movi	xvzhigh_x,a14
	move	a14,*A8(OXPOS),W
	ori	M_HIT_RIGHT,a1
;	jruc	xvzvert_check

xvzvert_check
	clr	a0
	move	*a8(OYPOS),a0,W
	cmpi	xvzlow_y,a0
	jrlt	xvztoo_high
	cmpi	xvzhigh_y,a0
	jrgt	xvztoo_low
	jruc	xvzdone_boundcheck

xvztoo_high
	movi	xvzlow_y,a14
	move	a14,*A8(OYPOS),W
	ori	M_HIT_TOP,a1
	jruc	xvzdone_boundcheck

xvztoo_low
	movi	xvzhigh_y,a14
	move	a14,*A8(OYPOS),W
	ori	M_HIT_BOTTOM,a1
	jruc	xvzdone_boundcheck

xvzdone_boundcheck
	move	a1,a1
	jrnz	xvzchange_direction

xvzno_wallhit
	movi	xvzturn_prob,a0
	PUSH	a1
	calla	RNDRNG0
	PULL	a1
	move	a0,a0
	jrnz	xvzdone_moving

	;spontaneous direction change.  random for now
;	jruc	xvzchange_direction	;fall through

xvzchange_direction
	;turn 90 degrees by randomly incrementing or decrementing direction
	movi	1,a0
	PUSH	a1
	calla	RNDRNG0
	PULL	a1
	move	a0,a0
	jrz	xvzinc_direction
	dec	a11
	jruc	xvzdir_rangecheck
	
xvzinc_direction
	inc	a11

xvzdir_rangecheck
	cmpi	-1,a11
	jrne	xvzdir_notlow
	movi	3,a11

xvzdir_notlow
	cmpi	4,a11
	jrne	xvzdir_changed
	clr	a11

xvzdir_changed

	;verify that this is a good direction
	cmpi	0,a11
	jreq	xvzvalidate_up
	cmpi	1,a11
	jreq	xvzvalidate_right
	cmpi	2,a11
	jreq	xvzvalidate_down
	cmpi	3,a11
	jreq	xvzvalidate_left

xvzvalidate_up
	andi	M_HIT_TOP,a1
	jrnz	xvzchange_direction
	jruc	xvzvalid_dir
xvzvalidate_right
	andi	M_HIT_RIGHT,a1
	jrnz	xvzchange_direction
	jruc	xvzvalid_dir
xvzvalidate_down
	andi	M_HIT_BOTTOM,a1
	jrnz	xvzchange_direction
	jruc	xvzvalid_dir
xvzvalidate_left
	andi	M_HIT_LEFT,a1
	jrnz	xvzchange_direction
	jruc	xvzvalid_dir

xvzvalid_dir

	move	a11,a0
	X32	a0
	addi	xvzanim_list,a0
	move	*a0,a0,L
	move	a0,*a13(xvzPD_SCRIPT),L

xvzdone_moving
	
xvznew_frame
	move	*a13(xvzPD_FRAME_NDX),a14,W
	move	*a13(xvzPD_SCRIPT),a6,L
	inc	a14
	cmpi	4,a14
	jrne	xvzno_wrap
	clr	a14
xvzno_wrap
	move	a14,*a13(xvzPD_FRAME_NDX),W
	X32	a14
	add	a6,a14
	move	*a14,a0,L
	calla	civanic

	rets


******************************************************************************
*
*	hulk collision routines
*

 SUBR	hulk_pushback
	PUSH	a1,a7,a9,a10,a11,a13

	;immediately move the hulk in the direction of the bullet's motion
	move	*a0(OXVEL),a14,L
	sra	17,a14
	move	*a8(OXPOS),a1,W
	add	a14,a1
	move	a1,*a8(OXPOS),W

	move	*a0(OYVEL),a14,L
	sra	17,a14
	move	*a8(OYPOS),a1,W
	add	a14,a1
	move	a1,*a8(OYPOS),W

	;wake up at the collision check
	move	*a8(OPLINK),a0,L
	move	*a0(PA9),a9,L
	move	*a0(PA10),a10,L
	move	*a0(PA11),a11,L
	movi	HULK_PID,a1
	movi	xvzbeen_shot,a7
	calla	XFERPROC
	PULL	a1,a7,a9,a10,a11,a13

	rets


******************************************************************************
*
*	hulk configuration data
*

xvzstep_x		equ	4
xvzstep_y		equ	4

xvzlow_x		equ	53	;hulk move boundaries
xvzhigh_x		equ	347-13
xvzlow_y		equ	45
xvzhigh_y		equ	231-16

xvzmove_freq	equ	8	;frames between moves

xvzturn_prob	equ	30	;chance per frame of spontaneously changing
				;direction
xvzmove_table
	.word	0,-xvzstep_y
	.word	xvzstep_x,0
	.word	0,xvzstep_y
	.word	-xvzstep_x,0
xvzmove_tablex

xvzanim_list
	.long	xvzanim_vert
	.long	xvzanim_right
	.long	xvzanim_vert
	.long	xvzanim_left
xvzanim_listx

xvzanim_vert
	.long	hulk_ud1
	.long	hulk_ud2
	.long	hulk_ud1
	.long	hulk_ud3
xvzanim_vertx

xvzanim_left
	.long	hulk_l1
	.long	hulk_l2
	.long	hulk_l1
	.long	hulk_l3
xvzanim_leftx

xvzanim_right
	.long	hulk_r1
	.long	hulk_r2
	.long	hulk_r1
	.long	hulk_r3
xvzanim_rightx


*****************************************************************************
******************************************************************************
******************************************************************************
*
*	SPHEREOID SECTION
*

	;reg use
	; a0 - (in) # of sphereoids

 SUBRP	make_sphereoids

	move	a0,a0
	jrz	ejqdone

ejqanother_sphereoid
	PUSHP	a0

ejqget_pos
	movi	ejqmax_x-ejqmin_x,a0
	calla	RNDRNG0
	move	a0,a9
	movi	ejqmax_y-ejqmin_y,a0
	calla	RNDRNG0
	move	a0,a10

	addi	ejqmin_x,a9
	addi	ejqmin_y,a10

	cmpi	ejqmid_x1,a9
	jrle	ejqplace_sphereoid
	cmpi	ejqmid_x2,a9
	jrge	ejqplace_sphereoid
	cmpi	ejqmid_y1,a10
	jrle	ejqplace_sphereoid
	cmpi	ejqmid_y2,a10
	jrge	ejqplace_sphereoid
	jruc	ejqget_pos

ejqplace_sphereoid
	;assign a random starting position
	CREATE	SPHEREOID_PID,sphereoid
	PULLP	a0
	dsj	a0,ejqanother_sphereoid

ejqdone
	rets


ejqmid_x1	equ	200-80	;sphereoid start inner boundaries
ejqmid_x2	equ	200+80
ejqmid_y1	equ	138-80
ejqmid_y2	equ	138+80


*******************************************************************************
*
*	sphereoid process
*

	STRUCTPD
	LONG	ejqOXACC		;UHL x acceleration
	LONG	ejqOYACC		;UHL y acceleration
	WORD	ejqOCHILDREN	;UHW # of children left to spawn
	WORD	ejqOSTAGE		;UHW stage in life cycle

	;reg use
	; a7 (use) event timer (related to ejqOSTAGE)
	; a8 (use) * object
	; a9 (in)  x pos
	; a9 (use) anim counter
	;a10 (in)  y pos
	;a10 (use) frame pointer
	;a11 (use) time until next vel change

 SUBRP	sphereoid

	;increment the badguy count
	move	@live_badguys,a14,W
	inc	a14
	move	a14,@live_badguys,W

	;create the sphereoid object
	move	a9,a0		;x pos
	sll	16,a0
	move	a10,a1		;y pos
	sll	16,a1
	movi	ejqstandard_script,a10
	move	*a10+,a2,L	;img
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSENMY|TYPSPHEREOID,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;initialize anim counter
	movi	ejqanim_speed,a9

	;set initial velocities and accelerations
	callr	ejqset_va

	;initialize life cycle and event timer
	movi	ejqSTAGE_YOUTH,a14
	move	a14,*a13(ejqOSTAGE),W
	movi	ejqyouth_time/2,a0
	calla	RNDRNG0
	addi	ejqyouth_time*3/4,a0
	move	a0,a7

ejqloop
	PUSHP	a7
	SLEEPK	1
	PULLP	a7
	dec	a9
	jrnz	ejqno_anim

	;advance the frame
	move	*a10+,a0,L
	jrnz	ejqnewframe

	;reset script.  depends on the stage
	move	*a13(ejqOSTAGE),a14,W
	cmpi	ejqSTAGE_PARENT,a14
	jreq	ejqset_parent_script
	movi	ejqstandard_script,a10
	jruc	ejqscript_set
ejqset_parent_script
	movi	ejqparent_script,a10

ejqscript_set
	move	*a10+,a0,L

ejqnewframe
	calla	civanic

	;reset the counter
	movi	ejqanim_speed,a9

ejqno_anim
	;adjust velocities
	callr	ejqacc_add

	;bounds check
	callr	ejqin_bounds

	;adjust vel and acc if it's time
	dec	a11
	jrnz	ejqno_va_change
	callr	ejqset_va

ejqno_va_change

	;do event?
	dec	a7
	jrnz	ejqno_event

	;event.  depends on the stage in the life cycle
	move	*a13(ejqOSTAGE),a14,W
	cmpi	ejqSTAGE_YOUTH,a14
	jreq	ejqyouth_event
	cmpi	ejqSTAGE_PARENT,a14
	jreq	ejqparent_event
	;default
	jruc	ejqdotage_event

ejqyouth_event
	;switch to middle age
	movi	ejqSTAGE_PARENT,a14
	move	a14,*a13(ejqOSTAGE),W

	;set the number of kids to be spawned
	movi	ejqmax_kids-ejqmin_kids,a0
	calla	RNDRNG0
	addi	ejqmin_kids,a0
	move	a0,*a13(ejqOCHILDREN),W

	;set the spawn timer
	movi	ejqspawn_time/2,a0
	calla	RNDRNG0
	addi	ejqspawn_time*3/4,a0
	move	a0,a7
	jruc	ejqno_event

ejqparent_event
	;spawn a brat
	PUSHP	a10,a11
	move	*a8(OXVAL),a10,L
	move	*a8(OYVAL),a11,L
	CREATE	ENFORCER_PID,enforcer
	PULLP	a10,a11

	;decrement the kid count
	move	*a13(ejqOCHILDREN),a14,W
	dec	a14
	jrz	ejqbarren
	move	a14,*a13(ejqOCHILDREN),W
	movi	ejqspawn_time/2,a0
	calla	RNDRNG0
	addi	ejqspawn_time*3/4,a0
	move	a0,a7
	jruc	ejqno_event

ejqbarren
	;that was the last kid.  age
	movi	ejqSTAGE_DOTAGE,a14
	move	a14,*a13(ejqOSTAGE),W
	movi	ejqold_age_time,a7
	jruc	ejqno_event

ejqdotage_event
	;nothing fancy.  just die.
	jruc	ejqdie_peacefully
	
ejqno_event
	jruc	ejqloop

ejqbeen_shot
	;crud.  we've been shot.  score the points
	movi	ejqsphereoid_points,a0
	callr	score_points

	;decrement the badguy count
	move	@live_badguys,a14,W
	dec	a14
	move	a14,@live_badguys,W

	;clear the velocity
	clr	a14
	move	a14,*a8(OXVEL),L
	move	a14,*a8(OYVEL),L

	;go through the death routine
	movi	ejqparent_script,a10,L
	move	*a8(OCTRL),a14,W
	xori	DMAWNZ,a14
	ori	DMACNZ,a14
	move	a14,*a8(OCTRL),W
	movi	ejqdiecolor,a14
	move	a14,*a8(OCONST),W
	movi	robo_p,a0
	calla	pal_getf
	move	a0,*a8(OPAL),W

ejqdie_loop
	SLEEPK	ejqanim_speed
	move	*a10+,a0,L
	jrz	ejqscore_msg
	calla	civanic
	jruc	ejqdie_loop

ejqscore_msg
	movi	ejqscore_image,a0
	move	*a8(OCTRL),a1,W
	xori	DMACNZ,a1
	ori	DMAWNZ,a1
	calla	civani
	movi	ejqscore_xoff,a14
	move	a14,*a8(ODXOFF),W
	movi	ejqscore_yoff,a14	
	move	a14,*a8(ODYOFF),W
	SLEEP	ejqscore_time
	jruc	ejqexpire

ejqdie_peacefully
	;decrement the badguy count
	move	@live_badguys,a14,W
	dec	a14
	move	a14,@live_badguys,W

ejqexpire
	calla	DELOBJA8

	DIE


 SUBRP	ejqset_va

	movi	ejqhigh_v*2,a0
	calla	RNDRNG0
	subi	ejqhigh_v,a0
	move	a0,*a8(OXVEL),L

	movi	ejqhigh_v*2,a0
	calla	RNDRNG0
	subi	ejqhigh_v,a0
	move	a0,*a8(OYVEL),L

	movi	ejqhigh_a*2,a0
	calla	RNDRNG0
	subi	ejqhigh_a,a0
	move	a0,*a13(ejqOXACC),L

	movi	ejqhigh_a*2,a0
	calla	RNDRNG0
	subi	ejqhigh_a,a0
	move	a0,*a13(ejqOYACC),L

	movi	ejqva_change_time,a0
	calla	RNDRNG0
	inc	a0
	move	a0,a11

	rets


 SUBRP	ejqacc_add
	move	*a13(ejqOXACC),a14,L
	move	*a8(OXVEL),a0,L
	add	a14,a0
	move	a0,*a8(OXVEL),L

	move	*a13(ejqOYACC),a14,L
	move	*a8(OYVEL),a0,L
	add	a14,a0
	move	a0,*a8(OYVEL),L

	rets


 SUBRP	ejqin_bounds

	move	*a8(OXPOS),a14,W
	movi	ejqmin_x,a0
	cmp	a0,a14
	jrlt	ejqx_adjust

	movi	ejqmax_x,a0
	cmp	a0,a14
	jrgt	ejqx_adjust
	jruc	ejqy_check

ejqx_adjust
	move	a0,*a8(OXPOS),W
	clr	a0
	move	a0,*a8(OXVEL),L
	move	a0,*a13(ejqOXACC),L

ejqy_check
	move	*a8(OYPOS),a14,W
	movi	ejqmin_y,a0
	cmp	a0,a14
	jrlt	ejqy_adjust

	movi	ejqmax_y,a0
	cmp	a0,a14
	jrgt	ejqy_adjust
	jruc	ejqdone_check

ejqy_adjust
	move	a0,*a8(OYPOS),W
	clr	a0
	move	a0,*a8(OYVEL),L
	move	a0,*a13(ejqOYACC),L

ejqdone_check
	rets


******************************************************************************
*
*	sphereoid collision routines
*

 SUBR	sphereoid_die
	PUSH	a1,a7

	movi	CLSDEAD,a14
	move	a14,*a8(OID),W
	move	*a8(OPLINK),a0,L
	movi	DEADSPHERE_PID,a1
	movi	ejqbeen_shot,a7
	calla	XFERPROC

	PULL	a1,a7
	rets


******************************************************************************
*
*	sphereoid configuration data
*

ejqanim_speed	equ	3

ejqva_change_time	equ	180

ejqsphereoid_points	equ	1000

ejqyouth_time	equ	180	;time before we have kids
ejqspawn_time	equ	120	;time between kids
ejqold_age_time	equ	180	;time between last kid and natural death

ejqmin_kids	equ	3	;lower limit on spawned enforcers
ejqmax_kids	equ	7	;upper limit

ejqhigh_v		equ	00004000h
ejqhigh_a		equ	00000C00h

ejqmin_x	equ	53	;sphereoid move bounds
ejqmax_x	equ	347-15
ejqmin_y	equ	45
ejqmax_y	equ	231-15

ejqscore_image	equ	one_k	;image on being shot
ejqdiecolor	equ	0909h	;color on being shot
ejqscore_time	equ	60	;time to display score value
ejqscore_xoff	equ	-3	;shotimage offset
ejqscore_yoff	equ	-5

;life cycle stages
ejqSTAGE_YOUTH 	equ	0000h
ejqSTAGE_PARENT	equ	0001h
ejqSTAGE_DOTAGE	equ	0002h

ejqstandard_script
	.long	circle_1
	.long	circle_2
	.long	circle_3
	.long	circle_4
	.long	circle_5
	.long	0

ejqparent_script
	.long	circle_1
	.long	circle_2
	.long	circle_3
	.long	circle_4
	.long	circle_5
	.long	circle_6
	.long	circle_7
	.long	circle_8
	.long	0


*****************************************************************************
******************************************************************************
******************************************************************************
*
*	ENFORCER SECTION
*

	.bss	num_enforcers,		16	;active enforcers
	.bss	picket_duty,		32	;*img of picket enforcer

	;reg use
	;  a8 (use) *img
	;  a9 (use) next move timer (move/fire phase)
	;  a9 (use) frame pointer (death phase)
	; a10 (in)  initial X
	; a10 (use) frame pointer (grow phase)
	; a11 (in)  initial Y
	; a11 (use) next shot timer (move/fire phase)

 SUBRP	enforcer

	;increment the badguy count
	move	@live_badguys,a14,W
	inc	a14
	move	a14,@live_badguys,W
	move	@num_enforcers,a14,W
	inc	a14
	move	a14,@num_enforcers,W

	;create the enforcer object
	move	a10,a0
	move	a11,a1
	movi	nzigrow_script,a10
	move	*a10+,a2,L
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSENMY|TYPENFORCER,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;grow phase

nzigrow_loop
	SLEEPK	nzigrow_speed
	move	*a10+,a0,L
	jrz	nzimf_phase
	calla	civanic
	jruc	nzigrow_loop

nzimf_phase
	;begin move/fire phase.  set initial course
	callr	nzinew_course
	movi	nziturn_time,a9
	movi	nzifire_time/2,a0
	calla	RNDRNG0
	addi	nzifire_time*3/4,a0
	move	a0,a11

nzimain_loop
	SLEEPK	1
	dec	a9
	jrnz	nzino_turn


	;picket phase
	;two cases: we're on picket duty, or we're not.
	move	@picket_duty,a14,L
	cmp	a14,a8
	jreq	nzion_picket

	;we're not on picket duty
	;if we're the only enforcer, quit now.
	move	@num_enforcers,a14,W
	cmpi	1,a14
	jreq	nzipicket_done

	;there are multiple enforcers.   If there is no picket, see if we
	; take the job.  If there is, quit.
	move	@picket_duty,a14,L
	jrnz	nzipicket_done

	;there is no picket.
	movi	nzipicket_prob,a0
	calla	RNDRNG0
	move	a0,a0
	jrnz	nzipicket_done

	;we're going to take picket duty
	move	a8,@picket_duty,L
	jruc	nzipicket_done

nzion_picket
	;we are on picket duty
	;if we're the only enforcer, see if we leave picket mode.
	move	@num_enforcers,a14,W
	cmpi	1,a14
	jrne	nzimultiple_enforcers

	;we're the only enforcer
	movi	nzistand_down_prob,a0
	calla	RNDRNG0
	move	a0,a0
	jrnz	nzipicket_done

	;and we've decided to stand down.
;	clr	a0	;unneccesary.  it's already 0 from above.
	move	a0,@picket_duty,L
	jruc	nzipicket_done

nzimultiple_enforcers
	;we may abandon our post
	movi	nziabandon_post_prob,a0
	calla	RNDRNG0
	move	a0,a0
	jrnz	nzipicket_done

	;yep.  we quit.
;	clr	a0	;unneccesary.  it's already 0 from above.
	move	a0,@picket_duty,L
;	jruc	nzipicket_done

nzipicket_done

	;change course
	callr	nzinew_course
	movi	nziturn_time,a9

nzino_turn

	dec	a11
	jrnz	nzino_shot

	;fire a spark
	PUSHP	a10
	move	*a8(OXVAL),a10,L
	move	*a8(OYVAL),a11,L
	CREATE	SPARK_PID,spark
	PULLP	a10
	movi	nzifire_time/2,a0
	calla	RNDRNG0
	addi	nzifire_time*3/4,a0
	move	a0,a11

nzino_shot

	;bounds check
	callr	nziin_bounds

	jruc	nzimain_loop

nzidie
	;decrement the badguy count
	move	@live_badguys,a14,W
	dec	a14
	move	a14,@live_badguys,W
	move	@num_enforcers,a14,W
	dec	a14
	move	a14,@num_enforcers,W

	;zero our velocity
	clr	a14
	move	a14,*a8(OXVEL),L
	move	a14,*a8(OYVEL),L

	;set up the animation
nzidieloop
	move	*a9+,a0,L
	jrz	nzidead_n_buried
	calla	civanic
	sleepk	nzideath_speed
	jruc	nzidieloop

nzidead_n_buried
	calla	DELOBJA8

	DIE


 SUBRP	nzinew_course

	;two cases.  picket or !picket
	move	@picket_duty,a14,L
	cmp	a8,a14
	jrne	nzinc_notpicket

nzinc_picket
	;we're on picket duty.  if we're not against a wall, move toward the
	; nearest one.  if we are against a wall but not in a corner, move
	; toward the nearest corner.  if we're in a corner, sit tight.
;	jruc	nzinc_done

nzinc_notpicket
	;velocity is the distance between enforcer and player / 64 / 2
	move	@player_object,a0,L
	move	*a0(OXVAL),a14,L
	move	*a8(OXVAL),a1,L
	sub	a1,a14
	sra	7,a14
	
	move	a14,*a8(OXVEL),L

	move	*a0(OYVAL),a14,L
	move	*a8(OYVAL),a1,L
	sub	a1,a14
	sra	7,a14
	move	a14,*a8(OYVEL),L

nzinc_done
	rets

 SUBRP	nziin_bounds

	move	*a8(OXPOS),a14,W
	movi	nzimin_x,a0
	cmp	a0,a14
	jrlt	nzix_adjust

	movi	nzimax_x,a0
	cmp	a0,a14
	jrgt	nzix_adjust
	jruc	nziy_check

nzix_adjust
	move	a0,*a8(OXPOS),W
	clr	a0
	move	a0,*a8(OXVEL),L

nziy_check
	move	*a8(OYPOS),a14,W
	movi	nzimin_y,a0
	cmp	a0,a14
	jrlt	nziy_adjust

	movi	nzimax_y,a0
	cmp	a0,a14
	jrgt	nziy_adjust
	jruc	nzidone_check

nziy_adjust
	move	a0,*a8(OYPOS),W
	clr	a0
	move	a0,*a8(OYVEL),L

nzidone_check
	rets


******************************************************************************
*
*	enforcer collision routines
*

 SUBR	enforcer_die
	;hit by player gunfire
	PUSH	a1,a7

	;jeepers.  we're dead.
	movi	CLSDEAD,a14
	move	a14,*a8(OID),W

	move	*a0(OXVEL),a14,L
	jrz	nzivert_bullet
	move	*a0(OYVEL),a1,L
	jrz	nzihorz_bullet

	add	a1,a14
	jrz	nzidiag_13
	jruc	nzidiag_24

nzihorz_bullet
	movi	nzidie_vert,a9
	jruc	nzideath_set
nzivert_bullet
	movi	nzidie_horz,a9
	jruc	nzideath_set
nzidiag_13
	movi	nzidie_diag24,a9
	jruc	nzideath_set
nzidiag_24
	movi	nzidie_diag13,a9
	jruc	nzideath_set

nzideath_set
	move	*a8(OPLINK),a0,L
	movi	DEADNFORCER_PID,a1
	movi	nzidie,a7
	move	*a0(PA10),a10,L
	calla	XFERPROC

	movi	nzienforcer_points,a0
	callr	score_points

	PULL	a1,a7
	rets


******************************************************************************
*
*	enforcer configuration data
*

nzienforcer_points	equ	100

nzipicket_prob	equ	4	;one chance in X of becoming the picket if
				; there are multiple enforcers and none is
				; on the job already.

nzistand_down_prob equ	4	;one chance in X of leaving picket duty if
				; we're the only enforcer left.

nziabandon_post_prob equ	8	;one chance in X of leaving picket duty if
				; there are other enforcers around.

nziturn_time	equ	150
nzifire_time	equ	90

nzigrow_speed	equ	6

nzimin_x	equ	53	;enforcer move bounds
nzimax_x	equ	347-9
nzimin_y	equ	45
nzimax_y	equ	231-11

nzigrow_script
	.long	enf_g1
	.long	enf_g2
	.long	enf_g3
	.long	enf_g4
	.long	enf_g5
	.long	enf_1
	.long	0
nzigrow_scriptx

nzidie_vert
	.long	enf_xv1
	.long	enf_xv2
	.long	enf_xv3
	.long	enf_xv4
	.long	enf_xv5
	.long	0
nzidie_vertx

nzidie_horz
	.long	enf_xh1
	.long	enf_xh2
	.long	enf_xh3
	.long	enf_xh4
	.long	0
nzidie_horzx

nzidie_diag13
	.long	enf_xf1
	.long	enf_xf2
	.long	enf_xf3
	.long	enf_xf4
	.long	0
nzidie_diag13x

nzidie_diag24
	.long	enf_xb1
	.long	enf_xb2
	.long	enf_xb3
	.long	enf_xb4
	.long	0
nzidie_diag24x

nzideath_speed	equ	3		;death seq anim speed


*****************************************************************************
******************************************************************************
******************************************************************************
*
*	SPARK SECTION
*

	;reg use
	;  a6 (use) x acc
	;  a7 (use) y acc
	;  a8 (use) *image
	;  a9 (use) anim timer
	; a10 (in)  initial X
	; a10 (use) anim pointer
	; a11 (in)  initial Y
	; a11 (use) life timer

 SUBRP	spark

	;create a spark object
	move	a10,a0
	move	a11,a1

	movi	mxsscript,a10
	move	*a10+,a2,L
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSENMY|TYPSPARK,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;set the initial velocity.
	move	@player_object,a0,L
	move	*a0(OXVAL),a1,L
	move	*a8(OXVAL),a2,L
	sub	a2,a1
	sra	5,a1
	move	a1,*a8(OXVEL),L

	move	*a0(OYVAL),a1,L
	move	*a8(OYVAL),a2,L
	sub	a2,a1
	sra	5,a1
	move	a1,*a8(OYVEL),L

	;and then add a little 'spin' by giving them some acceleration
	movi	mxshigh_acc*2,a0
	calla	RNDRNG0
	subi	mxshigh_acc,a0
	move	a0,a6
	movi	mxshigh_acc*2,a0
	calla	RNDRNG0
	subi	mxshigh_acc,a0
	move	a0,a7

	movi	mxsanim_time,a9
	movi	mxslife_time,a11

mxsloop
	PUSHP	a6,a7
	SLEEPK	1
	PULLP	a6,a7

	;bounds check
	callr	mxsin_bounds

	;apply accelerations
	move	*a8(OXVEL),a14,L
	add	a6,a14
	move	a14,*a8(OXVEL),L

	move	*a8(OYVEL),a14,L
	add	a7,a14
	move	a14,*a8(OYVEL),L

	dec	a9
	jrnz	mxsno_anim

	move	*a10+,a0,L
	jrnz	mxsno_wrap
	movi	mxsscript,a10
	move	*a10+,a0,L
mxsno_wrap
	calla	civanic
	movi	mxsanim_time,a9

mxsno_anim
	dec	a11
	jrz	mxsexpire
	jruc	mxsloop

mxsexpire
	calla	DELOBJA8

	DIE


 SUBRP	mxsin_bounds

	move	*a8(OXPOS),a14,W
	movi	mxsmin_x,a0
	cmp	a0,a14
	jrlt	mxsx_adjust

	movi	mxsmax_x,a0
	cmp	a0,a14
	jrgt	mxsx_adjust
	jruc	mxsy_check

mxsx_adjust
	move	a0,*a8(OXPOS),W
	clr	a6
	move	a6,*a8(OXVEL),L

mxsy_check
	move	*a8(OYPOS),a14,W
	movi	mxsmin_y,a0
	cmp	a0,a14
	jrlt	mxsy_adjust

	movi	mxsmax_y,a0
	cmp	a0,a14
	jrgt	mxsy_adjust
	jruc	mxsdone_check

mxsy_adjust
	move	a0,*a8(OYPOS),W
	clr	a7
	move	a7,*a8(OYVEL),L

mxsdone_check
	rets


******************************************************************************
*
*	spark collision routines
*

 SUBR	spark_die
	PUSH	a1,a7

	movi	CLSDEAD,a14
	move	a14,*a8(OID),W
	move	*a8(OPLINK),a0,L
	movi	DEADSPARK_PID,a1
	movi	mxsexpire,a7
	calla	XFERPROC

	PULL	a1,a7
	rets


******************************************************************************
*
*	spark configuration data
*

mxslife_time	equ	180		;how long they last
mxsanim_time	equ	3		;frame rate

mxshigh_acc	equ	00000200h	;top acceleration

mxsmin_x	equ	53	;spark move bounds
mxsmax_x	equ	347-7
mxsmin_y	equ	45
mxsmax_y	equ	231-7

mxsscript
	.long	spark_1
	.long	spark_2
	.long	spark_3
	.long	spark_4
	.long	0


*****************************************************************************
******************************************************************************
******************************************************************************
*
*	QUARK SECTION
*

	;reg use
	; a0 - (in) # of quarks

 SUBRP	make_quarks

	move	a0,a0
	jrz	ntkdone

ntkanother_quark
	PUSHP	a0

ntkget_pos
	;assign a random starting position
	movi	ntkmax_x-ntkmin_x,a0
	calla	RNDRNG0
	move	a0,a9
	movi	ntkmax_y-ntkmin_y,a0
	calla	RNDRNG0
	move	a0,a10

	addi	ntkmin_x,a9
	addi	ntkmin_y,a10

	cmpi	ntkmid_x1,a9
	jrle	ntkplace_quark
	cmpi	ntkmid_x2,a9
	jrge	ntkplace_quark
	cmpi	ntkmid_y1,a10
	jrle	ntkplace_quark
	cmpi	ntkmid_y2,a10
	jrge	ntkplace_quark
	jruc	ntkget_pos

ntkplace_quark
	CREATE	QUARK_PID,quark
	PULLP	a0
	dsj	a0,ntkanother_quark

ntkdone
	rets


ntkmid_x1	equ	200-60	;quark start inner boundaries
ntkmid_x2	equ	200+60
ntkmid_y1	equ	138-60
ntkmid_y2	equ	138+60


*******************************************************************************
*
*	quark process
*

	STRUCTPD
	WORD	ntkOCHILDREN	;UHW # of children left to spawn
	WORD	ntkOSTAGE		;UHW stage in life cycle

	;reg use
	; a7 (use) event timer (related to ntkOSTAGE)
	; a8 (use) * object
	; a9 (in)  x pos
	; a9 (use) anim counter
	;a10 (in)  y pos
	;a10 (use) frame pointer
	;a11 (use) time until next vel change

 SUBRP	quark

	;increment the badguy count
	move	@live_badguys,a14,W
	inc	a14
	move	a14,@live_badguys,W

	;create the quark object
	move	a9,a0		;x pos
	sll	16,a0
	move	a10,a1		;y pos
	sll	16,a1
	movi	ntkstandard_script,a10
	move	*a10+,a2,L	;img
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSENMY|TYPQUARK,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;initialize anim counter
	movi	ntkanim_speed,a9

	;set initial velocities and accelerations
	callr	ntkset_v

	;initialize life cycle and event timer
	movi	ntkSTAGE_YOUTH,a14
	move	a14,*a13(ntkOSTAGE),W
	movi	ntkyouth_time,a7

ntkloop
	PUSHP	a7
	SLEEPK	1
	PULLP	a7
	dec	a9
	jrnz	ntkno_anim

	;advance the frame
	move	*a10+,a0,L
	jrnz	ntknewframe

	;reset script.  depends on the stage
	move	*a13(ntkOSTAGE),a14,W
	cmpi	ntkSTAGE_PARENT,a14
	jreq	ntkset_parent_script
	movi	ntkstandard_script,a10
	jruc	ntkscript_set
ntkset_parent_script
	movi	ntkparent_script,a10

ntkscript_set
	move	*a10+,a0,L

ntknewframe
	calla	civanic

	;reset the counter
	movi	ntkanim_speed,a9

ntkno_anim
	;bounds check
	callr	ntkin_bounds

	;adjust vel if it's time
	dec	a11
	jrnz	ntkno_v_change
	callr	ntkset_v

ntkno_v_change

	;do event?
	dec	a7
	jrnz	ntkno_event

	;event.  depends on the stage in the life cycle
	move	*a13(ntkOSTAGE),a14
	cmpi	ntkSTAGE_YOUTH,a14
	jreq	ntkyouth_event
	cmpi	ntkSTAGE_PARENT,a14
	jreq	ntkparent_event
	;default
	jruc	ntkdotage_event

ntkyouth_event
	;switch to middle age
	movi	ntkSTAGE_PARENT,a14
	move	a14,*a13(ntkOSTAGE),W

	;set the number of kids to be spawned
	movi	ntkmax_kids-ntkmin_kids,a0
	calla	RNDRNG0
	addi	ntkmin_kids,a0
	move	a0,*a13(ntkOCHILDREN),W

	;set the spawn timer
	movi	ntkspawn_time,a7
	jruc	ntkno_event

ntkparent_event
	;spawn a brat
	PUSHP	a10,a11
	move	*a8(OXVAL),a10,L
	move	*a8(OYVAL),a11,L
	CREATE	TANK_PID,tank
	PULLP	a10,a11

	;decrement the kid count
	move	*a13(ntkOCHILDREN),a14,W
	dec	a14
	jrz	ntkbarren
	move	a14,*a13(ntkOCHILDREN),W
	movi	ntkspawn_time,a7
	jruc	ntkno_event

ntkbarren
	;that was the last kid.  age
	movi	ntkSTAGE_DOTAGE,a14
	move	a14,*a13(ntkOSTAGE),W
	movi	ntkold_age_time,a7
	jruc	ntkno_event

ntkdotage_event
	;nothing fancy.  just die.
	jruc	ntkdie_peacefully
	
ntkno_event
	jruc	ntkloop


ntkbeen_shot
	;crud.  we've been shot

ntkdie_peacefully

	;decrement the badguy count
	move	@live_badguys,a14,W
	dec	a14
	move	a14,@live_badguys,W

	calla	DELOBJA8

	DIE


 SUBRP	ntkset_v

	movi	ntkhigh_v,a0
	calla	RNDRNG0
	cmpi	ntkhigh_v/2,a0
	jrgt	ntkpositive_x

	subi	ntkhigh_v,a0

ntkpositive_x
	move	a0,*a8(OXVEL),L

	movi	ntkhigh_v,a0
	calla	RNDRNG0
	cmpi	ntkhigh_v/2,a0
	jrgt	ntkpositive_y

	subi	ntkhigh_v,a0

ntkpositive_y
	move	a0,*a8(OYVEL),L

	movi	ntkv_change_time/2,a0
	calla	RNDRNG0
	addi	ntkv_change_time/2,a0
	move	a0,a11

	rets


 SUBRP	ntkin_bounds

	move	*a8(OXPOS),a1,W
	movi	ntkmin_x,a0
	move	*a8(ODXOFF),a14,W
	add	a14,a0
	cmp	a0,a1
	jrlt	ntkx_adjust

	move	*a8(OSIZEX),a0,W
	neg	a0
	move	*a8(ODXOFF),a14,W
	add	a14,a0
	addi	ntkmax_x,a0
	cmp	a0,a1
	jrgt	ntkx_adjust
	jruc	ntky_check

ntkx_adjust
	move	a0,*a8(OXPOS),W
	move	*a8(OXVEL),a0,L
	neg	a0
	move	a0,*a8(OXVEL),L

ntky_check
	move	*a8(OYPOS),a1,W
	movi	ntkmin_y,a0
	move	*a8(ODYOFF),a14,W
	add	a14,a0
	cmp	a0,a1
	jrlt	ntky_adjust

	move	*a8(OSIZEY),a0,W
	neg	a0
	move	*a8(ODYOFF),a14,W
	add	a14,a0
	addi	ntkmax_y,a0
	cmp	a0,a1
	jrgt	ntky_adjust
	jruc	ntkdone_check

ntky_adjust
	move	a0,*a8(OYPOS),W
	move	*a8(OYVEL),a0,L
	neg	a0
	move	a0,*a8(OYVEL),L

ntkdone_check
	rets


******************************************************************************
*
*	quark collision routines
*

 SUBR	quark_die
	PUSH	a1,a7

	movi	CLSDEAD,a14
	move	a14,*a8(OID),W
	move	*a8(OPLINK),a0,L
	movi	DEADQUARK_PID,a1
	movi	ntkbeen_shot,a7
	calla	XFERPROC

	PULL	a1,a7
	rets


******************************************************************************
*
*	quark configuration data
*

ntkanim_speed	equ	3

ntkv_change_time	equ	600	;time between random course changes

ntkyouth_time	equ	90	;time before we have kids
ntkspawn_time	equ	90	;time between kids
ntkold_age_time	equ	120	;time between last kid and natural death

ntkmin_kids	equ	3	;lower limit on spawned tanks
ntkmax_kids	equ	7	;upper limit

ntkhigh_v		equ	0001C000h

ntkmin_x	equ	53	;quark move bounds
ntkmax_x	equ	347-0
ntkmin_y	equ	45
ntkmax_y	equ	231-0

;life cycle stages
ntkSTAGE_YOUTH 	equ	0000h
ntkSTAGE_PARENT	equ	0001h
ntkSTAGE_DOTAGE	equ	0002h

ntkstandard_script
	.long	quark_1
	.long	quark_1
	.long	quark_2
	.long	quark_3
	.long	quark_4
	.long	0

ntkparent_script
	.long	quark_1
	.long	quark_2
	.long	quark_3
	.long	quark_4
	.long	quark_5
	.long	quark_6
	.long	quark_7
	.long	quark_8
	.long	0


*****************************************************************************
******************************************************************************
******************************************************************************
*
*	TANK SECTION
*

	STRUCTPD
	WORD	tadOSHOTS		;UHW shots left to be fired

	;reg use
	;  a7 (use) anim timer
	;  a8 (use) *img
	;  a9 (use) next move timer (move/fire phase)
	;  a9 (use) frame pointer (death phase)
	; a10 (in)  initial X
	; a10 (use) frame pointer (grow + move/fire phases)
	; a11 (in)  initial Y
	; a11 (use) next shot timer (move/fire phase)

 SUBRP	tank

	;increment the badguy count
	move	@live_badguys,a14,W
	inc	a14
	move	a14,@live_badguys,W

	;create the tank object
	move	a10,a0
	move	a11,a1
	movi	tadgrow_script,a10
	move	*a10+,a2,L
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSENMY|TYPTANK,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;grow phase

tadgrow_loop
	SLEEPK	tadgrow_speed
	move	*a10+,a0,L
	jrz	tadmf_phase
	calla	civanic
	jruc	tadgrow_loop

tadmf_phase
	;begin move/fire phase.  set initial course
	callr	tadset_v
	movi	tadanim_time,a7
	movi	tadright_script,a10
	movi	tadfire_time/2,a0
	calla	RNDRNG0
	addi	tadfire_time*3/4,a0
	move	a0,a11
	movi	tadnum_shots,a14
	move	a14,*a13(tadOSHOTS),W

tadmain_loop
	PUSHP	a7
	SLEEPK	1
	PULLP	a7
	dec	a9
	jrnz	tadno_turn

	;change course
	callr	tadset_v

tadno_turn

	dec	a11
	jrnz	tadno_shot

	move	*a13(tadOSHOTS),a14,W
	jrz	tadno_shot

	;fire a shell
	PUSHP	a7,a10,a11
	move	*a8(OXVAL),a10,L
	move	*a8(OYVAL),a11,L
	create	SHELL_PID,tank_shell
	PULLP	a7,a10,a11
	movi	tadfire_time/2,a0
	calla	RNDRNG0
	addi	tadfire_time*3/4,a0
	move	a0,a11

tadno_shot

	;bounds check
	callr	tadin_bounds

	;animate?
	dec	a7
	jrnz	tadno_anim
	move	*a10+,a0,L
	jrnz	tadno_wrap
	movi	tadright_script,a10
	move	*a10+,a0,L

tadno_wrap
	calla	civanic
	movi	tadanim_time,a7

tadno_anim
	jruc	tadmain_loop

taddie
	;decrement the badguy count
	move	@live_badguys,a14,W
	dec	a14
	move	a14,@live_badguys,W

	;zero our velocity
	clr	a14
	move	a14,*a8(OXVEL),L
	move	a14,*a8(OYVEL),L

	;set up the animation
taddieloop
	move	*a9+,a0,L
	jrz	taddead_n_buried
	calla	civanic
	sleepk	taddeath_speed
	jruc	taddieloop

taddead_n_buried
	calla	DELOBJA8

	DIE


 SUBRP	tadset_v

	movi	tadhigh_v,a0
	calla	RNDRNG0
	cmpi	tadhigh_v/2,a0
	jrgt	tadpositive_x

	subi	tadhigh_v,a0

tadpositive_x
	move	a0,*a8(OXVEL),L

	movi	tadhigh_v,a0
	calla	RNDRNG0
	cmpi	tadhigh_v/2,a0
	jrgt	tadpositive_y

	subi	tadhigh_v,a0

tadpositive_y
	move	a0,*a8(OYVEL),L

	movi	tadv_change_time/2,a0
	calla	RNDRNG0
	addi	tadv_change_time/2,a0
	move	a0,a9

	rets


 SUBRP	tadin_bounds

	move	*a8(OXPOS),a14,W
	movi	tadmin_x,a0
	cmp	a0,a14
	jrlt	tadx_adjust

	movi	tadmax_x,a0
	cmp	a0,a14
	jrgt	tadx_adjust
	jruc	tady_check

tadx_adjust
	move	a0,*a8(OXPOS),W
	move	*a8(OXVEL),a0,L
	neg	a0
	move	a0,*a8(OXVEL),L

tady_check
	move	*a8(OYPOS),a14,W
	movi	tadmin_y,a0
	cmp	a0,a14
	jrlt	tady_adjust

	movi	tadmax_y,a0
	cmp	a0,a14
	jrgt	tady_adjust
	jruc	taddone_check

tady_adjust
	move	a0,*a8(OYPOS),W
	move	*a8(OYVEL),a0,L
	neg	a0
	move	a0,*a8(OYVEL),L

taddone_check
	rets


******************************************************************************
*
*	tank collision routines
*

 SUBR	tank_die
	;hit by player gunfire
	PUSH	a1,a7

	;jeepers.  we're dead.
	movi	CLSDEAD,a14
	move	a14,*a8(OID),W

	move	*a0(OXVEL),a14,L
	jrz	tadvert_bullet
	move	*a0(OYVEL),a1,L
	jrz	tadhorz_bullet

	add	a1,a14
	jrz	taddiag_13
	jruc	taddiag_24

tadhorz_bullet
	movi	taddie_vert,a9
	jruc	taddeath_set
tadvert_bullet
	movi	taddie_horz,a9
	jruc	taddeath_set
taddiag_13
	movi	taddie_diag24,a9
	jruc	taddeath_set
taddiag_24
	movi	taddie_diag13,a9
	jruc	taddeath_set

taddeath_set
	move	*a8(OPLINK),a0,L
	movi	DEADTANK_PID,a1
	movi	taddie,a7
	move	*a0(PA10),a10,L
	calla	XFERPROC

	movi	tadtank_points,a0
	callr	score_points

	PULL	a1,a7
	rets


******************************************************************************
*
*	tank configuration data
*

tadtank_points	equ	200

tadnum_shots	equ	21

tadv_change_time	equ	250
tadfire_time	equ	90

tadhigh_v		equ	00010000h

tadgrow_speed	equ	6
tadanim_time	equ	2

tadmin_x	equ	53	;tank move bounds
tadmax_x	equ	347-13
tadmin_y	equ	45
tadmax_y	equ	231-16

tadgrow_script
	.long	tank_g1
	.long	tank_g2
	.long	tank_g3
	.long	tank_g4
	.long	tank_1
	.long	0

tadright_script
	.long	tank_1
	.long	tank_2
	.long	tank_3
	.long	tank_4
	.long	0

taddie_vert
	.long	enf_xv1
	.long	enf_xv2
	.long	enf_xv3
	.long	enf_xv4
	.long	enf_xv5
	.long	0

taddie_horz
	.long	enf_xh1
	.long	enf_xh2
	.long	enf_xh3
	.long	enf_xh4
	.long	0

taddie_diag13
	.long	enf_xf1
	.long	enf_xf2
	.long	enf_xf3
	.long	enf_xf4
	.long	0

taddie_diag24
	.long	enf_xb1
	.long	enf_xb2
	.long	enf_xb3
	.long	enf_xb4
	.long	0

taddeath_speed	equ	3		;death seq anim speed


*****************************************************************************
******************************************************************************
******************************************************************************
*
*	SHELL SECTION
*

	;reg use
	;  a8 (use) *image
	; a10 (in)  initial X
	; a11 (in)  initial Y
	; a11 (use) life timer

 SUBRP	tank_shell

	;create a shell object
	move	a10,a0
	move	a11,a1
	movi	shell,a2
	clr	a3
	movi	DMAWNZ,a4
	movi	CLSENMY|TYPSHELL,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	;set the initial velocity.
	move	@player_object,a0,L
	move	*a0(OXVAL),a1,L
	move	*a8(OXVAL),a2,L
	sub	a2,a1
	sra	5,a1
	move	a1,*a8(OXVEL),L

	move	*a0(OYVAL),a1,L
	move	*a8(OYVAL),a2,L
	sub	a2,a1
	sra	5,a1
	move	a1,*a8(OYVEL),L

	movi	ikvlife_time,a11

ikvloop
	PUSHP	a6,a7
	SLEEPK	1
	PULLP	a6,a7

	;bounds check
	callr	ikvin_bounds

	dsj	a11,ikvloop

ikvexpire
	calla	DELOBJA8

	DIE


 SUBRP	ikvin_bounds

	move	*a8(OXPOS),a14,W
	movi	ikvmin_x,a0
	cmp	a0,a14
	jrlt	ikvx_adjust

	movi	ikvmax_x,a0
	cmp	a0,a14
	jrgt	ikvx_adjust
	jruc	ikvy_check

ikvx_adjust
	move	a0,*a8(OXPOS),W
	move	*a8(OXVEL),a0,L
	neg	a0
	move	a0,*a8(OXVEL),L

ikvy_check
	move	*a8(OYPOS),a14
	movi	ikvmin_y,a0
	cmp	a0,a14
	jrlt	ikvy_adjust

	movi	ikvmax_y,a0
	cmp	a0,a14
	jrgt	ikvy_adjust
	jruc	ikvdone_check

ikvy_adjust
	move	a0,*a8(OYPOS),W
	move	*a8(OYVEL),a0,L
	neg	a0
	move	a0,*a8(OYVEL),L

ikvdone_check
	rets


******************************************************************************
*
*	shell collision routines
*

 SUBR	shell_die
	PUSH	a1,a7

	movi	CLSDEAD,a14
	move	a14,*a8(OID),W
	move	*a8(OPLINK),a0,L
	movi	DEADSHELL_PID,a1
	movi	ikvexpire,a7
	calla	XFERPROC

	PULL	a1,a7
	rets


******************************************************************************
*
*	shell configuration data
*

ikvlife_time	equ	240		;how long they last

ikvmin_x	equ	53	;shell move bounds
ikvmax_x	equ	347-7
ikvmin_y	equ	45
ikvmax_y	equ	231-7


*****************************************************************************
******************************************************************************
******************************************************************************
*
*	color cycling processes
*

 SUBRP	robo_pal_cycles

	;laser flash cycle
	movi	[0Ah,1],a8		;cycle color A
	movi	robo_p,a9		;pal name
	movi	COLTAB_LFLASH,a10	;use the LFLASH table
	movk	1,a11			;cycle speed
	CREATE	CYCPID,CYCLE_TABLE

	;rgb cycle
	movi	[0Bh,1],a8		;cycle color B
	movi	robo_p,a9		;pal name
	movi	COLTAB_RGB,a10		;use the RGB table
	movk	8,a11			;cycle speed
	CREATE	CYCPID,CYCLE_TABLE

	;decay cycle
	movi	[0Ch,1],a8		;cycle color C
	movi	robo_p,a9		;pal name
	movi	COLTAB_DECAY,a10	;use the DECAY table
	movk	2,a11			;cycle speed
	CREATE	CYCPID,CYCLE_TABLE

	;laser cycle
	movi	[0Dh,1],a8		;cycle color D
	movi	robo_p,a9		;pal name
	movi	COLTAB_LASER,a10	;use the LASER table
	movk	20,a11			;cycle speed
	CREATE	CYCPID,CYCLE_TABLE

	;blue-purple-red cycle
	movi	[0Eh,1],a8		;cycle color E
	movi	robo_p,a9		;pal name
	movi	COLTAB_BLUPURRED,a10	;use the BPR table
	movk	1,a11			;cycle speed
	CREATE	CYCPID,CYCLE_TABLE

	;red-gold cycle
	movi	[0Fh,1],a8		;cycle color F
	movi	robo_p,a9		;pal name
	movi	COLTAB_REDGOLD,a10	;use the RED-GOLD table
	movk	10,a11			;cycle speed
	CREATE	CYCPID,CYCLE_TABLE

	rets


COLTAB_LFLASH
	.WORD	0380H,1380H,2380H,3380H,4380H,5380H,6380H,7380H,7300H
	.WORD	7280H,7200H,7180H,7080H,7008H,7008H,7010H,7010H,701CH
	.WORD	701CH,601CH,501CH,409CH,309CH,209CH,219CH,029CH,039CH
	.WORD	139CH,239CH,339CH,539CH,739CH,7390H,7380H,6380H,4380H
	.word	-1

;	.word	7C00h,7FFFh,7FFFh,03E0h,7FFFh,7FFFh,001Fh,7FFFh,7FFFh

COLTAB_RGB
	.WORD	07C00H,001FH,77A0h,741Ah
	.word	-1

;	.word	7C00h,03E0h,001Fh

COLTAB_DECAY
	.WORD	001CH,001CH,011CH,021CH,031CH,039CH,239CH,2390H,2388H
	.WORD	2380H,4300H,5280H,7180H,6180H,7080H,7000H,6000H,5000H
	.WORD	4000H,3000H,2000H,1000H
	.word	-1

;	.word	7FFFh,6F7Bh,5EF7h,4E73h,3DEFh,2D6Bh,1CE7h,0C63h,0000h

COLTAB_LASER
	.word	7C1Fh,7FFFh,7F00h
	.word	-1

COLTAB_BLUPURRED
	.WORD	001CH,101CH,201CH,301CH,401CH,501CH,601CH,701CH,7010H
	.WORD	7010H,7008H,7008H,7000H,7000H,7008H,7008H,7010H,7010H
	.WORD	701CH,701CH,601CH,501CH,401CH,301CH,201CH,101CH
;	.word	001Fh,7C1Fh,7C00h
	.word	-1

COLTAB_REDGOLD
	.word	7C00h,7F00h
	.word	-1


*****************************************************************************
******************************************************************************
******************************************************************************
*
*	score stuff
*

	;reg use
	; a11 score

 SUBRP	score

	;initialize score
	move	@robotron_score,a11,L
	callr	dxhprint_score

dxhloop
	SLEEPK	1
	move	@robotron_score,a14,L
	cmp	a11,a14
	jrne	dxhscore_change
	jruc	dxhloop

dxhscore_change
	move	a14,a11
	callr	dxhzorch_score
	callr	dxhprint_score
	jruc	dxhloop

	DIE


 SUBRP	dxhzorch_score
	movi	TYPTEXT|SUBSCOR,a0
	calla	obj_del1c

	rets


 SUBRP	dxhprint_score

	movi	dxhscore_setup,a2
	calla	setup_message
	movi	TYPTEXT|SUBSCOR,a14
	move	a14,@mess_objid
	move	@robotron_score,a0,L
	movi	dxhmax_score,a1
	calla	dec_to_asc
	calla	copy_string
	calla	print_string_R

	rets


dxhscore_setup
	JAM_STR	robotron_ascii,3,1,dxhscore_xpos,dxhscore_ypos,robo_p,0
	.even

dxhmax_score	.equ	9999999		;that's all dec_to_asc can handle

******************************************************************************
* adds to score
* 0a0H amount to add

 SUBRP	score_points

	move	@robotron_score,a14,L
	add	a0,a14
	move	a14,@robotron_score,L
	rets


dxhscore_ypos	.equ	36
dxhscore_xpos	.equ	130

*****************************************************************************
******************************************************************************
******************************************************************************
*
*	miscellaneous functions / processes
*

******************************************************************************
* Draws the frame
* 0a0H=color value
*

 SUBRP	draw_frame


	move	a0,a9
	sla	8,a9
	or	a0,a9

	movi	robo_p,a0
	calla	pal_getf
	move	a0,a10

	movi	yzkframe_data,a11

yzkloop
	move	*a11+,a0,L
	jrz	yzkdone
	move	*a11+,a1,L
	movi	yzkframe_image,a2
	movi	100,a3				;z pos
	movi	DMACAL,a4			;DMA flags
	movi	CLSDEAD,a5			;object ID
	clr	a6				;x vel
	clr	a7				;y vel
	calla	BEGINOBJ

	move	a8,a0
	calla	fg2bg

	move	*a11+,a14,W
	move	a14,*a8(OSIZEX),W
	move	*a11+,a14,W
	move	a14,*a8(OSIZEY),W

	move	a9,*a8(OCONST),W
	move	a10,*a8(OPAL),W

	jruc	yzkloop
yzkdone
	rets


yzkframe_image	equ	man_d1

yzkframe_data
	.long	[53,0],[43,0]	;position X,Y
	.word	294,2		;size X,Y

	.long	[53,0],[231,0]	;position X,Y
	.word	294,2		;size X,Y

	.long	[50,0],[43,0]	;position X,Y
	.word	3,190		;size X,Y

	.long	[347,0],[43,0]	;position X,Y
	.word	3,190		;size X,Y

	.long	0

yzkframe_datax


*****************************************************************************
* Draws the wave indicator
*

 SUBRP	wave_count

	;wave text
	movi	[autwave_x,0],a0			;x pos
	movi	[autwave_y,0],a1			;y pos
	movi	wave_text,a2			;* image
	clr	a3				;z pos
	movi	DMAWNZ,a4			;DMA flags
	clr	a5				;object ID
	clr	a6				;x vel
	clr	a7				;y vel
	calla	BEGINOBJ

	;ones digit
;	move	@robo_wave,a2,W
;	addi	HEXTODEC+0010h,a2		;extra 10 cuz we count from 0
;	move	*a2,a2,W
;	andi	00FFh,a2
	move	@robo_wave,a0,W
	sra	4,a0
	inc	a0
	calla	BINBCD
	move	a0,a2
	andi	0Fh,a2
	X32	a2
	addi	autwave_font,a2

	movi	[autwave_onesx,0],a0		;x pos
	movi	[autwave_y,0],a1			;y pos
	move	*a2,a2,L			;* image
	clr	a3				;z pos
	movi	DMAWNZ,a4			;DMA flags
	clr	a5				;object ID
	clr	a6				;x vel
	clr	a7				;y vel
	calla	BEGINOBJ

	;tens digit
	move	@robo_wave,a0,W
	sra	4,a0
	inc	a0
	calla	BINBCD
	move	a0,a2
	srl	4,a2
	andi	0Fh,a2
	jrz	autdone
	X32	a2
	addi	autwave_font,a2
	movi	[autwave_tensx,0],a0		;x pos
	movi	[autwave_y,0],a1			;y pos
	move	*a2,a2,L			;* image
	clr	a3				;z pos
	movi	DMAWNZ,a4			;DMA flags
	clr	a5				;object ID
	clr	a6				;x vel
	clr	a7				;y vel
	calla	BEGINOBJ

autdone
	rets

autwave_y		.equ	234
autwave_x		.equ	198
autwave_tensx	.equ	184
autwave_onesx	.equ	188

autwave_font
	.long	rsmall_0
	.long	rsmall_1
	.long	rsmall_2
	.long	rsmall_3
	.long	rsmall_4
	.long	rsmall_5
	.long	rsmall_6
	.long	rsmall_7
	.long	rsmall_8
	.long	rsmall_9
autwave_fontx

*****************************************************************************
* Check to see if an object is completely on the playfield
* a8=OBJ
* 0a0H=walls hit (bit 0=top, 1=right, 2=bottom, 3=left)
* 0a2H=degree of overlap (in pixels)
* Trashes scratch

 SUBRP	bounds_check
	PUSH	a1,a3
	clr	a0
	clr	a2
	clr	a3

	;check for hit top
	move	*a8(OYPOS),a1
	move	*a8(ODYOFF),a14
	sub	a14,a1
	cmpi	tdqlow_y,a1
	jrgt	tdqnot_high
	movi	tdqlow_y,a2
	sub	a1,a2
	ori	M_HIT_TOP,a0
	jruc	tdqnot_low		;assume won't be both high and low

tdqnot_high
	;check for hit bottom
	move	*a8(ODYOFF),a14		;subtract the offset AGAIN because
	sub	a14,a1			; we assume the anim point is there
	move	*a8(OSIZEY),a14		; to center the object.
	add	a14,a1
	cmpi	tdqhigh_y,a1
	jrlt	tdqnot_low
	move	a1,a2
	subi	tdqhigh_y,a2
	ori	M_HIT_BOTTOM,a0

tdqnot_low
	;check for hit left
	move	*a8(OXPOS),a1
	move	*a8(ODXOFF),a14
	sub	a14,a1
	cmpi	tdqlow_x,a1
	jrgt	tdqnot_left
	movi	tdqlow_x,a3
	sub	a1,a3
	ori	M_HIT_LEFT,a0
	jruc	tdqdone			;assume won't be both right and left

tdqnot_left
	move	*a8(ODXOFF),a14
	sub	a14,a1
	move	*a8(OSIZEX),a14
	add	a14,a1
	cmpi	tdqhigh_x,a1
	jrlt	tdqdone
	move	a1,a3
	subi	tdqhigh_x,a3
	ori	M_HIT_RIGHT,a0

tdqdone
	;a2 is y overlap, a3 is x overlap.  a2 should be greatest of the two.
	cmp	a2,a3
	jrn	tdqretval_set
	move	a3,a2
tdqretval_set
	PULL	a1,a3
	rets


;boundaries
tdqlow_x	equ	53
tdqhigh_x	equ	346
tdqlow_y	equ	45
tdqhigh_y	equ	230

;ret values
B_HIT_TOP	equ	0
B_HIT_BOTTOM	equ	2
B_HIT_LEFT	equ	3
B_HIT_RIGHT	equ	1

M_HIT_TOP	equ	0001h
M_HIT_BOTTOM	equ	0004h
M_HIT_LEFT	equ	0008h
M_HIT_RIGHT	equ	0002h


*****************************************************************************
* If ever both start buttons are down, this proc sets the robo_done flag
* and dies.
*

 SUBRP	watch_both_starts

ykjloop
	SLEEPK	4		;no need to check EVERY frame
	clr	a0
	calla	get_start_cur
	jrz	ykjloop
	movk	1,a0
	calla	get_start_cur
	jrz	ykjloop

	;both starts are down.
	movk	1,a0
	move	a0,@starts_down

	DIE

*****************************************************************************
* Watches for wave advance/back up key combo.
*

 SUBRP	wave_mover

padloop
	SLEEPK	4
	calla	get_all_buttons_cur
	jrz	padloop

	cmpi	1,a0
	jreq	padback
	cmpi	2,a0
	jreq	padfwd
	jruc	padloop

padback
	move	a0,@backward
	jruc	paddone
padfwd
	move	a0,@forward

paddone
	DIE


	.if DEBUG

*****************************************************************************
* Makes bog meters
*

 SUBRP	bog_o_meter

	movi	robo_p,a0
	calla	pal_getf
	move	a0,a9

	;create the background
	movi	[360,0],a0
	movi	[192,0],a1
	movi	man_d1,a2
	clr	a3
	movi	DMACAL|M_FLIPV,a4
	movi	CLSDEAD,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	move	a9,*a8(OPAL)
	movi	0707h,a14
	move	a14,*a8(OCONST)

	movi	8,a0
	move	a0,*a8(OSIZEX)
	movi	128,a0
	move	a0,*a8(OSIZEY)
	move	a8,a10

	;create the foreground
	movi	[360,0],a0
	movi	[65,0],a1
	movi	man_d1,a2
	movi	1,a3
	movi	DMACAL,a4
	movi	CLSDEAD,a5
	clr	a6
	clr	a7
	calla	BEGINOBJW

	move	a9,*a8(OPAL)
	movi	0808h,a14
	move	a14,*a8(OCONST)
	
	movi	8,a0
	move	a0,*a8(OSIZEX)

	movi	pgoscale,a9

pgoloop
	SLEEPK	2
	move	@CPULEFT,a1
	jrnz	pgonobog

	;BOG!!
	nop
pgonobog
	mpyu	a9,a1
	srl	16,a1
	move	a1,*a8(OSIZEY)
	cmpi	10h,a1
	jrle	pgored

	movi	0707h,a0
	move	a0,*a10(OCONST)
	jruc	pgoloop
pgored
	movi	0101h,a0
	move	a0,*a10(OCONST)
	jruc	pgoloop

	DIE

pgoscale	equ	800000h/03DCh

	.endif

*****************************************************************************

robotron_ascii
 .long 0,0,0,0,0,0,0,0								;$00
 .long 0,0,0,0,0,0,0,0								;$08
 .long 0,0,0,0,0,0,0,0								;$10
 .long 0,0,0,0,0,0,0,0								;$18
 .long 0,rfont_exc,0,0,0,0,0,0								;$20	SP! " # $ % & '
 .long rfont_lparens,rfont_rparens,0,0,rfont_comma,0,rfont_period,rfont_fslash	;$28	( ) * + , - . /
 .long rfont_0,rfont_1,rfont_2,rfont_3,rfont_4,rfont_5,rfont_6,rfont_7		;$30	0 1 2 3 4 5 6 7
 .long rfont_8,rfont_9,0,0,0,0,0,0						;$38	8 9 : ; < - > ?
 .long 0,rfont_a,rfont_b,rfont_c,rfont_d,rfont_e,rfont_f,rfont_g		;$40	@ A B C D E F G
 .long rfont_h,rfont_i,rfont_j,rfont_k,rfont_l,rfont_m,rfont_n,rfont_o		;$48	H I J K L M N O
 .long rfont_p,rfont_q,rfont_r,rfont_s,rfont_t,rfont_u,rfont_v,rfont_w		;$50	P Q R S T U V W
 .long rfont_x,rfont_y,rfont_z,0,0,0,0,0					;$58	X Y Z [ \ ] ^ _
 .long 0,rfont_a,rfont_b,rfont_c,rfont_d,rfont_e,rfont_f,rfont_g		;$60	` a b c d e f g
 .long rfont_h,rfont_i,rfont_j,rfont_k,rfont_l,rfont_m,rfont_n,rfont_o		;$68	h i j k l m n o
 .long rfont_p,rfont_q,rfont_r,rfont_s,rfont_t,rfont_u,rfont_v,rfont_w		;$70	p q r s t u v w
 .long rfont_x,rfont_y,rfont_z,0,0,0,0,0					;$78	x y z { | } ~

*****************************************************************************
*
* Sound section
* 0a0H = snd call

RS_GRUNT	.equ	0
RS_DIE		.equ	1
RS_RESCUE	.equ	2
RS_SHOOT	.equ	3
RS_HIT		.equ	4

sp_grunt	.equ	1<<8
sp_shoot	.equ	2<<8
sp_hit		.equ	3<<8
sp_rescue	.equ	4<<8
sp_die		.equ	5<<8

robosnd_tbl
	;	duration, call#
	.word	sp_grunt|6,96		;0 = grunt footstep
	.word	sp_die|96,98		;1 = die
	.word	sp_rescue|39,99		;2 = rescue
	.word	sp_shoot|17,102		;3 = shoot
	.word	sp_hit|23,100		;4 = hit
robosnd_end

	.bss	rs_snd,16		;current sound call (0-3)
	.bss	rs_time,32		;timeout on current call (long)PCNT
	.bss	rs_pri,16		;priority on current call
	.bss	last_grunt_snd,32	;PCNT of last grunt footstep


 SUBRP	robo_sound_init

	clr	a14
	move	a14,@rs_snd
	move	a14,@rs_time,L
	move	a14,@last_grunt_snd,L
	rets


 SUBRP	robo_sound

	PUSH	a2,a3,a4

	;reggies:
	;a0 = call index
	;a1 = priority
	;a2 = duration
	;a3 = call #

	;decode table index
	move	a0,a14
	X32	a14
	addi	robosnd_tbl,a14
	move	*a14,a1,W
	srl	8,a1
	move	*a14+,a2,W
	andi	0FFh,a2
	move	*a14,a3,W

	;check old duration - if there's nothing going on, do the sound.
	move	@rs_time,a4
	move	@PCNT,a14,L
	cmp	a4,a14
	jrgt	inkdosnd

	;old sound still going.  check for an override
	TEST	a0
	jrnz	inkng
	move	@rs_snd,a14
	jrz	inkgrxgr		;special grunt-overriding-grunt case

inkng	move	@rs_pri,a14
	cmp	a14,a1
	jrge	inkdosnd
	jruc	inkdone

inkgrxgr	;do new call if old one has 3 or fewer ticks to live
	move	@rs_time,a14,L
	move	@PCNT,a4,L
	sub	a4,a14
	cmpi	3,a4
	jrle	inkdosnd
	jruc	inkdone

inkdosnd	calla	SNDSND
	move	a0,@rs_snd
	move	@PCNT,a14,L
	add	a2,a14
	move	a14,@rs_time,L
	move	a1,@rs_pri

inkdone	PULL	a2,a3,a4
	rets


******************************************************************************

	.end

