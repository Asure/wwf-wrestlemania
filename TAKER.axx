**************************************************************
*
* Software:		Jamie Rivett
* Initiated:		5/18/94
*
* COPYRIGHT (C) 1992 WILLIAMS ELECTRONICS GAMES, INC.
*
**************************************************************

	.file	"taker.asm"
	.title	"Undertaker specific game code"
	.width	132
	.option	b,d,l,t
	.mnolist


	.include	"macros.h"
	.include	"jjxm.h"
	.include	"mproc.equ"		;Mproc equates
	.include	"display.equ"		;Display proc equates
	.include	"gsp.equ"		;Gsp asm equates
	.include	"sys.equ"
	.include	"game.equ"
	.include	"plyr.equ"
	.include	"anim.equ"
	.include	"audit.equ"
	.include	"sound.h"
	.include 	"ring.equ"
	.include	"lifebar.h"
	.include	"damage.equ"


******************************************************************************
* EXTERNAL REFERENCES

	.ref	get_punch_dtime,ck_teammate_pin,raisearm_check
	.ref	process_ptrs,can_pin
	.ref	change_anim1,change_anim1a,set_raisearm_bit,hit_nearest
	.ref	change_anim2,change_anim2a,std_taunt,std_walk_fast
	.ref	keep_attached,master_keep_attached
	.ref	get_opp_plyrmode,mode_dead,get_opp_process
	.ref	check_secret_moves,round_award
	.ref	mode_inair2,mode_puppet
	.ref	execute_walk,do_taunt
	.ref	bounce_off_ropes
	.ref	climb_turnbuckle
	.ref	ck_ignore,PCNT
	.ref	CLIMB_ROPES,ADD_IF_SILENT,JUMP_ROPES
	.ref	CHECK_COMBO_GO,FIND_AND_KILL_ENDLESS

	.ref	BONUS_MESS,DO_REVERSAL,DO_REVERSAL_MESS
	.ref	BLOCK_WOOSH,drone_change_back
	.ref	blocking_off
	.ref	hyper_speed_on
	.ref	in_finish_move
	.ref	p1rounds,p2rounds
	.if NUM_TAKER_FINISHES
	.if NUM_TAKER_FINISHES > 1
	.ref	und_finish2_move
	.endif
	.endif
	.ref	finish_completed
	.ref	p1pins,p2pins
	.ref	und_coffin_up
	.ref	close_the_door
	.ref	wres_mv_done
	.ref	dead_wrestler
	.ref	und_2_raise_dead_anim
	.ref	guy_up,guy_in
	.ref	BGND_UD1
	.ref	KIL1C
	.ref	RNDRNG0

******************************************************************************
* ANIMATION SEQUENCES

	.ref	und_4_block_anim
	.ref	start_run_anim

	.ref	wres_slave_anim
	.ref	und_zip_anim

	.ref	und_stand2_anim,und_stand8_anim
	.ref	und_stand4_anim,und_stand6_anim
	.ref	und_torso2_anim,und_torso8_anim
	.ref	und_torso4_anim,und_torso6_anim

	.ref	und_2_to_4_turn_anim,und_8_to_6_turn_anim	;stand
	.ref	und_4_to_2_turn_anim,und_6_to_8_turn_anim
	.ref	und_4_to_6_turn_anim,und_6_to_4_turn_anim
	.ref	und_2_to_8_turn_anim,und_8_to_2_turn_anim
	.ref	und_4_to_8_turn_anim,und_6_to_2_turn_anim
	.ref	und_2_to_6_turn_anim,und_8_to_4_turn_anim

	.ref	und_2_to_4_turn2_anim,und_8_to_6_turn2_anim	;torso
	.ref	und_4_to_2_turn2_anim,und_6_to_8_turn2_anim
	.ref	und_4_to_6_turn2_anim,und_6_to_4_turn2_anim
	.ref	und_2_to_8_turn2_anim,und_8_to_2_turn2_anim
	.ref	und_4_to_8_turn2_anim,und_6_to_2_turn2_anim
	.ref	und_2_to_6_turn2_anim,und_8_to_4_turn2_anim

	.ref	und_walk1_f2_anim,und_walk2_f2_anim,und_walk4_f2_anim
	.ref	und_walk5_f2_anim,und_walk6_f2_anim,und_walk8_f2_anim

	.ref	und_walk1_f4_anim,und_walk2_f4_anim,und_walk4_f4_anim
	.ref	und_walk5_f4_anim,und_walk6_f4_anim,und_walk8_f4_anim

	.ref	und_run2_anim

	.ref	und_2_punch_anim,und_4_punch_anim
	.ref	und_2_kick_anim,und_4_kick_anim

	.ref	und_2_butt_anim,und_4_butt_anim
	.ref	und_2_butts_anim,und_4_butts_anim
	.ref	und_2_knee_anim,und_4_knee_anim
	.ref	und_4_bigboot_anim

	.ref	und_head_hit2_anim,und_head_hit_dizzy_anim
	.ref	und_2_stomp_anim,und_4_stomp_anim

	.ref	und_4_push_anim
	.ref	und_4_losebal_anim
	.ref	und_2_slap_anim,und_4_slap_anim

	.ref	und_2_grabfling_anim,und_4_grabfling_anim

	.ref	und_2_uppercut_anim,und_4_uppercut_anim
	.ref	und_2_hair_pickup_anim,und_4_hair_pickup_anim

	.ref	und_4_pin2_anim,und_2_raise_arm_anim
	.ref	und_4_raise_arm_anim
;	.ref	und_ocrun_anim
	.ref	und_fall_back_anim

;	.ref	und_summon_anim,und_summon2_anim
	.ref	und_getup_anim
;	.ref	und_4_graboh_anim
	.ref	und_heldoh_anim

	.ref	und_2_super_kick_anim,und_4_super_kick_anim
	.ref	und_4_knee_fall_anim
	.ref	und_flying_kick_anim

	.ref	und_2_lbowdrop_anim,und_4_lbowdrop_anim
	.ref	und_flying_butt_drop_anim,und_tbukl_butt_drop_anim

	.ref	und_sliding_choke_anim
	.ref	und_tombstone_smash_anim
	.ref	und_chokeslam_anim
	.ref	und_pile_anim
	.ref	und_neckbreaker_anim
	.ref	und_2_snapmirror_anim,und_4_snapmirror_anim
	.ref	und_2_snapmirror2_anim,und_4_snapmirror2_anim
	.ref	und_climb_down_anim,und_climb_up_anim
	.ref	und_spirit_push_anim,und_spirit_pull_anim
	.ref	und_combo_kick_anim,und_combo_punch_anim
	.ref	und_3_head_hold2_anim
	.ref	und_3_head_hold_anim
	.ref	und_neckbreaker2_anim,und_neckbreaker3_anim
	.ref	und_4_knee_butts_anim
	.ref	und_3_head_held_stand_anim
	.ref	und_2_uppercut_anim,und_4_uppercut_anim
	.ref	und_choke_face_slam_anim

******************************************************************************
* SYMBOLS DEFINED IN THIS FILE

******************************************************************************
* EQUATES FOR THIS FILE

*****************************************************************************

und_secret_moves

;These secret moves are triggered only after a move list seq has ended!  You
;can't hold on the last button press and have it trigger!

;Button held down moves need to be first entry
	.long	tslbutton_hold
	.long	tslgrab_fling
	.long	tslhip_toss
	.long	tslgrab_fling2
	.long	tslhip_toss2
	.long	tslneck_grab
	.long	tsltomb_smash
	.long	0

*****************************************************************************
*
* SPECIAL MOVE PROCESSES
*

 SUBR	und_smove_table

	.long	und_hdhold_neckbrk
	.long	und_hdhold_faceslam
	.long	und_hdhold_pile		;(tombstone)
	.long	und_spirit_pull
	.long	und_spirit_push
	.long	und_grab_toss_air
	.long	und_hdhold_combo1
	.long	und_hdhold_combo2
;	.long	und_hdhold_anti_combo
	.long	und_choke_slide
	.long	std_walk_fast
	.long	std_taunt

	.if NUM_TAKER_FINISHES
	.long	und_finish_move1
	.endif
	.if NUM_TAKER_FINISHES > 1
	.long	und_finish_move2
	.endif
	.long	0

*******************************************************************************

tsltomb_smash
	.word	B_SKICK,		J_ALL
	.word	J_TOWARD,		J_REAL_LR
	.word	J_TOWARD,		J_REAL_LR
	.word	8000h | 32 		;max
	.long	tslscrt_tomb

tslscrt_tomb
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	tslout

;	calla	get_opp_plyrmode
;	cmpi	MODE_DEAD,a0
;	jrz	tslout

	move	*a13(PLYRMODE),a0
	cmpi	MODE_ONTURNBKL,a0
	jrz	tslout

	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL

	CALLA	FIND_AND_KILL_ENDLESS
	movi	und_tombstone_smash_anim,a0
	calla	change_anim1a

	WRSND	W_TAKER,GRABHOLD_T1,GRABHOLD_T2

	rets

*******************************************************************************

tslhip_toss
;	.word	B_PUNCH | J_AWAY,	J_REAL_LR | J_UP | J_DOWN
;	.word	8000h | 10		;max
;	.long	tslscrt_hiptoss

	.word	B_PUNCH,		J_ALL
	.word	J_AWAY,		J_REAL_LR
	.word	J_AWAY,		J_REAL_LR
	.word	8000h | 32		;max
	.long	tslscrt_hiptoss

tslscrt_hiptoss
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	tslout

;Don't do it when he is on ground
	calla	get_opp_plyrmode
	cmpi	MODE_ONGROUND,a0
	jrz	tslout
	cmpi	MODE_DEAD,a0
	jrz	tslout
	cmpi	MODE_HEADHELD,a0
	jrz	tslck1
	cmpi	MODE_INAIR,a0
	jrz	tsldoit
	cmpi	MODE_INAIR2,a0
	jrz	tsldoit

	move	*a13(CLOSEST_DIST),a0
	cmpi	70h,a0
	jrgt	tslout

tsldoit
 	FACE24	und,snapmirror_anim
	calla	change_anim1a

	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL

	WRSND	W_TAKER,GRABFLING_T1,PUNCH_T2

	rets
tslck1
	move	*a13(CLOSEST_NUM),a0
	X32	a0
	addi	process_ptrs,a0
	move	*a0,a0,L
	move	*a0(ANIMODE),a0
	btst	MODE_NOGRAVITY_BIT,a0
	jrnz	tsldoit
	rets

*******************************************************************************

tslneck_grab
	.word	B_SPUNCH,		J_ALL
	.word	J_TOWARD,		J_REAL_LR
	.word	J_TOWARD,		J_REAL_LR
	.word	8000h | 30		;max
	.long	tslscrt_neck

tslscrt_neck
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	tslout

;Don't do it when he is on ground
	calla	get_opp_plyrmode
	cmpi	MODE_ONGROUND,a0
	jrz	tslout
	cmpi	MODE_DEAD,a0
	jrz	tslout
	cmpi	MODE_HEADHELD,a0
	jrz	tslout

	move	*a13(LAST_HEADHOLD),a14,L
	move	@PCNT,a0,L
	sub	a14,a0
	cmpi	2*60,a0
	jrge	tslok2

;This head grab is too close (in terms of time) to most recent grab
	.ref	und_3_fake_hold_anim
	movi	und_3_fake_hold_anim,a0
	calla	change_anim1a
	rets

tslok2
	move	*a13(CLOSEST_XDIST),a1
	cmpi	85,a1
	jrgt	tslstd_grab

	movi	und_3_head_hold2_anim,a0
	calla	change_anim1a
	rets

tslstd_grab
	movi	und_3_head_hold_anim,a0
	calla	change_anim1a
	rets

*******************************************************************************

tslbutton_hold

	move	*a13(BUT_VAL_UP),a0
	btst	PLAYER_PUNCH_BIT,a0
	jrz	tslno_punch

	move	*a13(PLYRNUM),a0
	calla	get_punch_dtime
	cmpi	110,a0			;> min?
	jrlt	tslno_punch

	callr	scrt_spirit
	setc
	rets

tslno_punch
	clrc
	rets

scrt_spirit
	move	*a13(PLYRMODE),a0
	cmpi	MODE_HEADHELD,a0
	jrz	tslout
	cmpi	MODE_HEADHOLD,a0
	jrz	tslout
;	cmpi	MODE_RUNNING,a0
;	jrz	tslout

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	tslout

;Don't do it when he is on ground
	calla	get_opp_plyrmode
	cmpi	MODE_ONGROUND,a0
	jrz	tslout
;	cmpi	MODE_DEAD,a0
;	jrz	tslout

	move	*a13(PLYRMODE),a0
	cmpi	MODE_RUNNING,a0
	jrz	tslleapbrk

	movi	und_neckbreaker2_anim,a0
	calla	change_anim1a

	WRSND	W_TAKER,GRABHOLD_T1,GRABHOLD_T2

	rets

tslleapbrk
;Sliding neck breaker
	movi	und_neckbreaker3_anim,a0
	calla	change_anim1a

	WRSND	W_TAKER,GRABHOLD_T1,GRABHOLD_T2

	rets


*******************************************************************************

tslgrab_fling2
	.word	B_SPUNCH | J_AWAY,	J_REAL_LR | J_UP | J_DOWN
	.word	8000h | 10		;max
	.long	tslscrt_grabfling2

tslhip_toss2
	.word	B_PUNCH | J_AWAY,	J_REAL_LR | J_UP | J_DOWN
	.word	8000h | 10		;max
	.long	tslscrt_grabfling2

tslscrt_grabfling2
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	tslout

;If opponent is running, do a hip toss
	calla	get_opp_plyrmode
	cmpi	MODE_BOUNCING,a0
	jrz	tslyes
	cmpi	MODE_RUNNING,a0
	jrz	tslyes
	rets

*******************************************************************************

tslgrab_fling
;	.word	B_SPUNCH | J_AWAY,	J_REAL_LR | J_UP | J_DOWN
;	.word	8000h | 10		;max
;	.long	tslscrt_grabfling

	.word	B_SPUNCH,		J_ALL
	.word	J_AWAY,		J_REAL_LR
	.word	J_AWAY,		J_REAL_LR
	.word	8000h | 32		;max
	.long	tslscrt_grabfling

tslscrt_grabfling
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	tslout

;If opponent is running, do a hip toss
	calla	get_opp_plyrmode
	cmpi	MODE_BOUNCING,a0
	jrz	tslyes
	cmpi	MODE_RUNNING,a0
	jrnz	tslnope
tslyes
	FACE24	und,snapmirror_anim
	calla	change_anim1a

	clr	a0
	move	a0,*a13(ATTACH_PROC),L
	SETMODE	NORMAL

	WRSND	W_TAKER,GRABFLING_T1,PUNCH_T2
	rets

tslnope
;Don't fling when he is on ground
	calla	get_opp_plyrmode
	cmpi	MODE_HEADHELD,a0
	jrz	tslck2
	cmpi	MODE_ONGROUND,a0
	jrz	tslout
	cmpi	MODE_DEAD,a0
	jrz	tslout
tsldoit0
	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL

;	move	*a13(LAST_FLING_ATTEMPT),a14,L
;	move	@PCNT,a0,L
;	sub	a14,a0
;	cmpi	3*60,a0
;	jrge	tslok2a
;
;;This head grab is too close (in terms of time) to most recent grab
;	FACE24	und,slap_anim
;	calla	change_anim1a
;
;	WRSND	W_TAKER,SPUNCH_T1,SPUNCH_T2
;	rets
;
;tslok2a
;	move	@PCNT,a14,L			;use 32-bit PCNT!
;	move	a14,*a13(LAST_FLING_ATTEMPT),L

	FACE24	und,grabfling_anim
	calla	change_anim1a

	WRSND	W_TAKER,GRABFLING_T1,PUNCH_T2
tslout
	rets
tslck2
	move	*a13(CLOSEST_NUM),a0
	X32	a0
	addi	process_ptrs,a0
	move	*a0,a0,L
	move	*a0(ANIMODE),a0
	btst	MODE_NOGRAVITY_BIT,a0
	jrnz	tsldoit0
	rets
	
	.if NUM_TAKER_FINISHES

******************************************************************************
*
* Shake world - shakes the world around for takers finish move
*
 SUBRP	shake_world
	move	@WORLDTLX,a8,L
	move	@WORLDTLY,a9,L
wnvsw_loop
	movk	4,a0
	calla	RNDRNG0
	movk	2,a11
	sub	a0,a11
	sll	16,a11
	move	a8,a10
	add	a11,a10
	move	a10,@WORLDTLX,L

	movk	4,a0
	calla	RNDRNG0
	movk	2,a11
	sub	a0,a11
	sll	16,a11
	move	a9,a10
	add	a11,a10
	move	a10,@WORLDTLY,L

	calla	BGND_UD1

	SLEEPK	3
	jruc	wnvsw_loop
	
	DIE

******************************************************************************
*
* Adjusts the view to midpoint between taker and the coffin
*
 SUBRP	adjust_view
	move	@WORLDTLX,a14,L

	; If we are positioned within 100 pixels to the left of the right
	; edge of the ring don't bother scrolling any further.
	move	a14,a0
	srl	16,a0
	cmpi	1322-100,a0
	jrge	qzvav_exit

	; Get the midpoint between taker and the right edge of ring
	move	*a8(OBJ_XPOS),a14,L
	addi	[1200,0],a14
	srl	1,a14

	; Get the difference between taker and the midpoint
	move	*a8(OBJ_XPOS),a0,L
	sub	a0,a14

	; Divide by 32
	sra	5,a14

	; Do the move
	movi	32,a9
qzvmv_loop
	move	@WORLDTLX,a0,L
	add	a14,a0
	move	a0,@WORLDTLX,L
	PUSHP	a14
	SLEEPK	1
	calla	BGND_UD1
	PULLP	a14
	dsjs	a9,qzvmv_loop

qzvav_exit
	; Now start the world shakin' around
	CREATE	FIREWRK_PID,shake_world

	RETP


******************************************************************************
 SUBRP	und_finish_move1

ayqTIMEOUT	.equ	TSEC

	; Set up the globals used to syncronize everythins
	clr		a14
	move		a14,@in_finish_move
	move		a14,@close_the_door
	move		a14,@guy_up
	move		a14,@guy_in

	; Now wait on the correct buttons -n- sticks
ayqreset
	clr		a11
	SLEEPK		1
	WAITSWITCH_DWN	J_UP,0,ayqreset
	movi		ayqTIMEOUT,a11
	WAITSWITCH_DWN	J_DOWN,0,ayqreset
	WAITSWITCH_DWN	B_PUNCH,J_ALL,ayqreset


	; Make sure the guy we are doin' this on is dead
	PUSH		a13
	move		a8,a13
	calla		get_opp_plyrmode
	PULL		a13
	cmpi		MODE_DEAD,a0
	jrnz		ayqreset

	; Check to make sure this is my 2nd pin attempt
	move		@p1pins,a0
	move		*a8(PLYR_SIDE),a14
	jrz		ayqis_p1
	move		@p2pins,a0
ayqis_p1
	cmpi		2,a0
	jrlt		ayqreset

	; Don't allow the move if I've been turned into a drone
	; by the autopin goop
	move		*a8(PLYR_TYPE),a14
	jrnz		ayqfi1_exit

	; Don't allow the move if I'm outside the ring
	move		*a8(RING_TIME),a14
	jrn		ayqfi1_exit

	; Don't allow the move if I've already pinned the guy
	move		*a8(STATUS_FLAGS),a14
	btst		B_DID_PIN,a14
	jrnz		ayqfi1_exit

	; Set up globals used for this animation
	move		*a8(WHOIHIT),a14,L
	move		a14,@dead_wrestler,L

	; Don't allow move if dead guy is to right of center ring + 100 pix
	move		*a14(OBJ_XPOSINT),a14
	cmpi		RING_X_CENTER+100,a14
	jrgt		ayqfi1_exit

	; Don't allow move if taker is to right of center ring + 100 pix
	move		*a8(OBJ_XPOSINT),a14
	cmpi		RING_X_CENTER+100,a14
	jrgt		ayqfi1_exit

	; OK - we made it - tell all who care we are going to
	; do a finishing move.  This also shuts down the scroller.
	movk		1,a14
	move		a14,@in_finish_move

	; clear victim's DO_BUCKOFF bit and set his NO_BUCKOFF bit
	move		@dead_wrestler,a0,L
	move		*a0(STATUS_FLAGS),a14,L
	andni		M_DO_BUCKOFF,a14
	ori		M_NO_BUCKOFF,a14
	move		a14,*a0(STATUS_FLAGS),L

	; Move the view to 1/2 way between taker and the coffin
	JSRP		adjust_view

	; Let the dust settle before we start our animation
	SLEEPK		15

	; Start the animation for the finish move
	movi		und_2_raise_dead_anim,a14
	move		a14,*a8(SPECIAL_MOVE_ADDR),L

	; Wait here until finish move is complete
ayqfdone_wait
	SLEEPK		5
	move		@finish_completed,a14
	jrz		ayqfdone_wait

	; Tell everbody that cares that the finish move is done
	clr		a14
	move		a14,@in_finish_move

	; Kill off shaker process
	movi		FIREWRK_PID,a0
	calla		KIL1C

ayqfi1_exit
	DIE
	.endif
	

	.if NUM_TAKER_FINISHES > 1
******************************************************************************
 SUBRP	und_finish_move2

nebTIMEOUT	.equ	TSEC

nebend_wait
	SLEEP		TSEC/4
	move		@p1rounds,a0			; Get player 1 rounds
	move		@p2rounds,a1			; Get player 2 rounds
	or		a1,a0				; Put em together
	cmpi		2,a0				; Anybody got 2?
	jrlt		nebend_wait			; br = no

nebreset
	clr		a11
	move		a11,@in_finish_move
	SLEEPK		1
	WAITSWITCH_DWN	J_UP,0,nebreset
	movi		nebTIMEOUT,a11
	move		a11,@in_finish_move
	WAITSWITCH_DWN	J_UP,0,nebreset
	WAITSWITCH_DWN	J_RIGHT,J_UP,nebreset
	WAITSWITCH_DWN	J_RIGHT,J_UP,nebreset
	WAITSWITCH_DWN	B_SPUNCH,J_ALL,nebreset

	movi		und_finish2_move,a0
	move		a0,*a8(SPECIAL_MOVE_ADDR),L
	DIE
	.endif

*******************************************************************************
*
und_hdhold_neckbrk

nebTIMEOUT	.equ	60

neblp0
	SLEEPK	1
neblp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	nebcont
	cmpi	MODE_HEADHELD,a0
	jrnz	neblp0
nebcont
	clr	a11

;	WAITSWITCH_DWN	J_AWAY,0,neblp
	WAITSWITCH_DWN	J_TOWARD,0,neblp

	movi	nebTIMEOUT,a11

	WAITSWITCH_DWN	J_TOWARD,0,neblp
	WAITSWITCH_DWN	B_SPUNCH,J_ALL,neblp

;	move	*a8(ANIBASE),a0,L
;	cmpi	und_sliding_choke_anim,a0
;	jrz	neblp0

	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	nebslam
	cmpi	MODE_HEADHELD,a0
	jrnz	neblp0
	move	*a8(I_WILL_DIE),A14
	jrnz	neblp0

	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	neblp0				;ignore

	CALLA	DO_REVERSAL
	CALLA	DO_REVERSAL_MESS

	;target WHOHITME -- don't hit anyone else
	SMRTTGT	a8,WHOHITME

	;immobilize WHOHITME
	move	*a8(WHOHITME),a0,L
	jruc	nebis_reversal

nebslam
	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	neblp0				;ignore

	movk	1,a10
	CREATE	MESSAGE_PID,BONUS_MESS

	;target WHOIHIT -- don't hit anyone else
	SMRTTGT	a8,WHOIHIT

	;immobilize WHOIHIT
	move	*a8(WHOIHIT),a0,L

nebis_reversal
	movk	15,a14
	move	a14,*a0(IMMOBILIZE_TIME)

	CALLA	FIND_AND_KILL_ENDLESS

	movi	und_neckbreaker_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

;Use this bam grunt
	WRSND	W_BAMBAM,GRABHOLD_T1,GRABHOLD_T2

	SLEEPK	20

	jruc	neblp

*******************************************************************************
*
und_hdhold_faceslam

nebTIMEOUT	.equ	60

neblp0
	SLEEPK	1
neblp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	nebcont
	cmpi	MODE_CHOKEHOLD,a0
	jrz	nebcont
	cmpi	MODE_HEADHELD,a0
	jrnz	neblp0
nebcont
	clr	a11

	WAITSWITCH_DWN	J_DOWN,0,neblp

	movi	nebTIMEOUT,a11

	WAITSWITCH_DWN	J_DOWN,0,neblp
	WAITSWITCH_DWN	B_KICK,J_ALL,neblp

	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	nebslam
	cmpi	MODE_CHOKEHOLD,a0
	jrz	nebslam
	cmpi	MODE_HEADHELD,a0
	jrnz	neblp0
	move	*a8(I_WILL_DIE),A14
	jrnz	neblp0

	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	neblp0				;ignore

	CALLA	DO_REVERSAL
	CALLA	DO_REVERSAL_MESS

	;target WHOHITME -- don't hit anyone else
	SMRTTGT	a8,WHOHITME

	;immobilize WHOHITME
	move	*a8(WHOHITME),a0,L
	jruc	nebis_reversal

nebslam
	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	neblp0				;ignore

	movk	1,a10
	CREATE	MESSAGE_PID,BONUS_MESS

	;target WHOIHIT -- don't hit anyone else
	SMRTTGT	a8,WHOIHIT

	;immobilize WHOIHIT
	move	*a8(WHOIHIT),a0,L

nebis_reversal
	movk	15,a14
	move	a14,*a0(IMMOBILIZE_TIME)

	CALLA	FIND_AND_KILL_ENDLESS

;	movi	und_neckbreaker_anim,a14
	movi	und_choke_face_slam_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

;Use this bam grunt
	WRSND	W_BAMBAM,GRABHOLD_T1,GRABHOLD_T2

	SLEEPK	20

	jruc	neblp

*******************************************************************************
*
und_hdhold_pile

nebTIMEOUT	.equ	60

neblp0
	SLEEPK	1
neblp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	nebcont
	cmpi	MODE_HEADHELD,a0
	jrnz	neblp0
nebcont
	clr	a11

;	WAITSWITCH_DWN	J_UP,0,neblp
	WAITSWITCH_DWN	J_DOWN,0,neblp

	movi	nebTIMEOUT,a11

	WAITSWITCH_DWN	J_DOWN,0,neblp
	WAITSWITCH_DWN	B_SKICK,J_ALL,neblp

;	move	*a8(ANIBASE),a0,L
;	cmpi	und_sliding_choke_anim,a0
;	jrz	neblp0

	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	nebslam
	cmpi	MODE_HEADHELD,a0
	jrnz	neblp0
	move	*a8(I_WILL_DIE),A14
	jrnz	neblp0

	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	neblp0				;ignore

	CALLA	DO_REVERSAL
	CALLA	DO_REVERSAL_MESS

	;target WHOHITME -- don't hit anyone else
	SMRTTGT	a8,WHOHITME

	;target WHOHITME
	move	*a8(WHOHITME),a0,L
	jruc	nebis_reversal

nebslam
	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	neblp0				;ignore

	movk	29,a10
	CREATE	MESSAGE_PID,BONUS_MESS

	;target WHOIHIT -- don't hit anyone else
	SMRTTGT	a8,WHOIHIT

	;target WHOIHIT
	move	*a8(WHOIHIT),a0,L

nebis_reversal
	movk	15,a14
	move	a14,*a0(IMMOBILIZE_TIME)

	CALLA	FIND_AND_KILL_ENDLESS
	movi	und_pile_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

;Use this bam grunt
	WRSND	W_BAMBAM,GRABHOLD_T1,GRABHOLD_T2

	SLEEPK	20

	jruc	neblp

*******************************************************************************
*
und_choke_slide

nebTIMEOUT	.equ	60

neblp0
	SLEEPK	1
neblp
	clr	a11

	WAITSWITCH_DWN	J_DOWN,0,neblp

	movi	nebTIMEOUT,a11

;	WAITSWITCH_DWN	J_DOWN_TOWARD,0,neblp

	WAITSWITCH_DWN	J_TOWARD,J_UP|J_DOWN,neblp
	WAITSWITCH_DWN	B_PUNCH,J_ALL,neblp

	move	*a8(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	neblp0

	move	*a8(PLYRMODE),a0
	cmpi	MODE_ONTURNBKL,a0
	jrz	neblp0
	cmpi	MODE_RUNNING,a0
	jrz	neblp0
	move	*a8(I_WILL_DIE),A14
	jrnz	neblp0

;Don't do it when he is on ground
	SWAP	a8,a13
	calla	get_opp_plyrmode
	SWAP	a8,a13
	cmpi	MODE_ONGROUND,a0
	jrz	neblp0
	cmpi	MODE_DEAD,a0
	jrz	neblp0
	cmpi	MODE_HEADHELD,a0
	jrz	neblp0
	cmpi	MODE_CHOKING,a0
	jrz	neblp0

	movi	und_sliding_choke_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	SLEEPK	20

	jruc	neblp

*******************************************************************************
*
und_spirit_push

nebTIMEOUT	.equ	60

neblp0
	SLEEPK	1
neblp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	neblp0
	cmpi	MODE_HEADHELD,a0
	jrz	neblp0

	clr	a11

	WAITSWITCH_DWN	J_DOWN,0,neblp

	movi	nebTIMEOUT,a11

	WAITSWITCH_DWN	J_TOWARD,J_UP|J_DOWN,neblp
	WAITSWITCH_DWN	B_KICK,J_ALL,neblp

	move	*a8(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	neblp0

	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	neblp0				;ignore
    
	SWAP	a8,a13
	calla	get_opp_plyrmode
	SWAP	a8,a13
;	cmpi	MODE_DEAD,a0
;	jrz	neblp
	cmpi	MODE_CHOKING,a0
	jrz	neblp
	cmpi	MODE_HEADHELD,a0
	jrz	neblp
;	cmpi	MODE_ONGROUND,a0
;	jrz	neblp

	movi	und_spirit_push_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	clr	a0
	move	a0,*a8(RUN_TIME)

	SETMODE	NORMAL

	SLEEP	3*60

	jruc	neblp


*******************************************************************************
*
und_spirit_pull

nebTIMEOUT	.equ	60

neblp0
	SLEEPK	1
neblp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	neblp0
	cmpi	MODE_HEADHELD,a0
	jrz	neblp0

	clr	a11

	WAITSWITCH_DWN	J_DOWN,0,neblp

	movi	nebTIMEOUT,a11

;	WAITSWITCH_DWN	J_DOWN_TOWARD,0,neblp

	WAITSWITCH_DWN	J_AWAY,J_UP|J_DOWN,neblp
	WAITSWITCH_DWN	B_KICK,J_ALL,neblp

	move	*a8(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	neblp0

	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	neblp0				;ignore

	SWAP	a8,a13
	calla	get_opp_plyrmode
	SWAP	a8,a13
;	cmpi	MODE_DEAD,a0
;	jrz	neblp
	cmpi	MODE_CHOKING,a0
	jrz	neblp
	cmpi	MODE_HEADHELD,a0
	jrz	neblp
;	cmpi	MODE_ONGROUND,a0
;	jrz	neblp

	movi	und_spirit_pull_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	clr	a0
	move	a0,*a8(RUN_TIME)

	SETMODE	NORMAL

	SLEEP	3*60

	jruc	neblp

*******************************************************************************
*
und_grab_toss_air

nebTIMEOUT	.equ	40

neblp0
	SLEEPK	1
neblp
	clr	a11

	WAITSWITCH_DWN	J_AWAY,0,neblp

	movi	nebTIMEOUT,a11

	WAITSWITCH_DWN	J_AWAY,0,neblp
	WAITSWITCH_DWN	B_PUNCH,J_ALL,neblp

	move	*a8(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	neblp

	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jreq	neblp0

;Don't do it when he is on ground
	SWAP	a8,a13
	calla	get_opp_plyrmode
	SWAP	a8,a13
;Don't do it when he is on ground
	cmpi	MODE_ONGROUND,a0
	jrz	neblp
	cmpi	MODE_DEAD,a0
	jrz	neblp
	cmpi	MODE_INAIR,a0
	jrz	nebdoit2
	cmpi	MODE_INAIR2,a0
	jrz	nebdoit2

	move	*a8(CLOSEST_NUM),a0
	X32	a0
	addi	process_ptrs,a0
	move	*a0,a0,L
	move	*a0(ATTACK_TYPE),a0
	cmpi	AT_LEAPING,a0
	jrz	nebdoit2

	move	*a8(CLOSEST_DIST),a0
	cmpi	68h,a0
	jrgt	neblp

	FACE24	und,snapmirror_anim
	jruc	nebcont

nebdoit2	FACE24	und,snapmirror2_anim
nebcont
	move	a0,*a8(SPECIAL_MOVE_ADDR),L

	WRSND	W_TAKER,HIPTOSS_T1,HIPTOSS_T2

	clr	a0
	move	a0,*a8(ATTACH_PROC),L

	SETMODE	NORMAL

	SLEEPK	20

	jruc	neblp

*******************************************************************************
*
und_hdhold_combo1

nebTIMEOUT	.equ	60

neblp0
	SLEEPK	1
neblp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrnz	neblp0
;	jrz	nebcont
;	cmpi	MODE_HEADHELD,a0
;	jrnz	neblp0
;nebcont
;In combo mode?
	calla	CHECK_COMBO_GO
	jrlt	neblp0


	clr	a11

	WAITSWITCH_DWN	J_TOWARD,0,neblp

	movi	nebTIMEOUT,a11

	WAITSWITCH_DWN	J_TOWARD,0,neblp
	WAITSWITCH_DWN	B_SKICK,J_ALL,neblp

	move	*a8(ANIBASE),a0,L
	cmpi	und_sliding_choke_anim,a0
	jrz	neblp0

	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	nebslam
	cmpi	MODE_HEADHELD,a0
	jrnz	neblp0


nebslam
	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	neblp0				;ignore

;Start combo rules here
;	move	*a8(ATTACH_PROC),a14,L
;	movk	15,a0
;	move	a0,*a14(IMMOBILIZE_TIME)

	;target WHOIHIT
	SMRTTGT	a8,WHOIHIT

	CALLA	FIND_AND_KILL_ENDLESS
	movi	und_combo_punch_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	SLEEPK	20

	jruc	neblp

*******************************************************************************
*
und_hdhold_combo2

nebTIMEOUT	.equ	60

neblp0
	SLEEPK	1
neblp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrnz	neblp0
;	jrz	nebcont
;	cmpi	MODE_HEADHELD,a0
;	jrnz	neblp0
;nebcont
;In combo mode?
	calla	CHECK_COMBO_GO
	jrlt	neblp0


	clr	a11

	WAITSWITCH_DWN	J_TOWARD,0,neblp

	movi	nebTIMEOUT,a11

	WAITSWITCH_DWN	J_TOWARD,0,neblp
	WAITSWITCH_DWN	B_KICK,J_ALL,neblp

	move	*a8(ANIBASE),a0,L
	cmpi	und_sliding_choke_anim,a0
	jrz	neblp0

	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	nebslam
	cmpi	MODE_HEADHELD,a0
	jrnz	neblp0


nebslam
	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	neblp0				;ignore

;Start combo rules here
;	move	*a8(ATTACH_PROC),a14,L
;	movk	15,a0
;	move	a0,*a14(IMMOBILIZE_TIME)

	;target WHOIHIT
	SMRTTGT	a8,WHOIHIT

	CALLA	FIND_AND_KILL_ENDLESS
	movi	und_combo_kick_anim,A14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	SLEEPK	20

	jruc	neblp

******************************************************************************
;und_hdhold_anti_combo
;
;mxhTIMEOUT	.equ	80
;
;mxhlp0
;	SLEEPK	1
;mxhlp
;;Is my opponent in combo mode?
;;	move	*a8(IMMOBILIZE_TIME),a14
;;	jrz	mxhlp0
;;	move	*a8(CLOSEST_NUM),a0
;;	X32	a0
;;	addi	process_ptrs,a0
;;	move	*a0,a0,L
;;	move	*a0(COMBO_COUNT),a0
;;	jrz	mxhlp0
;
;	clr	a11
;
;	WAITSWITCH_DWN	B_SPUNCH,J_ALL,mxhlp
;
;	movi	mxhTIMEOUT,a11
;
;	WAITSWITCH_DWN	B_SPUNCH,J_ALL,mxhlp
;	WAITSWITCH_DWN	B_SPUNCH,J_ALL,mxhlp
;
;;Is my opponent in combo mode?
;	move	*a8(CLOSEST_NUM),a0
;	X32	a0
;	addi	process_ptrs,a0
;	move	*a0,a0,L
;	move	*a0(COMBO_COUNT),a0
;	jrz	mxhlp0
;
;	move	*a8(ANTI_COMBO_TIME),a0		;Time stamp
;	move	@PCNT,a14
;	sub	a0,a14
;	abs	a14
;	cmpi	80,a14
;	jrge	mxhlp0
;	move	*a8(I_WILL_DIE),A14
;	jrnz	mxhlp0
;
;;Combo breaker message!
;	CALLA	DO_REVERSAL
;	CALLA	DO_REVERSAL_MESS
;
;	clr	a0
;	move	a0,*a8(IMMOBILIZE_TIME)
;
;	move	*a8(WHOHITME),a14,L
;	movk	15,a0
;	move	a0,*a14(IMMOBILIZE_TIME)
;
;	;target WHOHITME
;	SMRTTGT	a8,WHOHITME
;
;	CALLA	FIND_AND_KILL_ENDLESS
;	movi	und_pile_anim,a14
;	move	a14,*a8(SPECIAL_MOVE_ADDR),L
;
;	WRSND	W_BAMBAM,GRABHOLD_T1,GRABHOLD_T2
;
;	SLEEPK	20
;
;	jruc	mxhlp

*****************************************************************************

 SUBR	taker_ani_init

	clr	a0
	move	a0,*a13(ATTIMG_CUR_FRAME),L

	move	*a13(FACING_DIR),a0
	btst	PLAYER_RIGHT_BIT,a0
	jrnz	dpyp1
;Plyr 2
	movi	und_stand4_anim,a0
	calla	change_anim1a

	movi	und_torso4_anim,a0
	calla	change_anim2a

	PUSH	a10
	move	a13,a10
	CREATE	TAUNT_PID,do_taunt
	PULL	a10

	rets

dpyp1
	movi	und_stand2_anim,a0
	calla	change_anim1a

	movi	und_torso2_anim,a0
	calla	change_anim2a

	rets


*****************************************************************************
*
* UNDERTAKER CONTROL CODE
*
* a13 = * taker process

 SUBR	move_taker


;	movi	100h,a0			;temp fix!
;	move	a0,*a13(ANI_SPEED)

	movi	und_secret_moves,a11
	calla	check_secret_moves

	move	*a13(PLYRMODE),a0
	sll	5,a0			;x 32
	addi	ysnmode_table,a0
	move	*a0,a0,L
	call	a0
	rets

ysnmode_table
	.long	mode_normal		;0
	.long	mode_running		;1
	.long	mode_inair		;2
	.long	mode_attached		;3
	.long	mode_onground		;4
	.long	mode_bouncing		;5
	.long	mode_onturnbkl		;6
	.long	mode_block		;7
	.long	mode_dizzy		;8
	.long	mode_dead		;9
	.long	mode_oppoverhead	;10
	.long	mode_climbturnbkl	;11
	.long	mode_waitanim		;12
	.long	mode_grapple		;13
	.long	mode_master		;14
	.long	mode_slave		;15
	.long	mode_headhold		;16
	.long	mode_puppet2		;17
	.long	mode_normal	;18
	.long	mode_headheld		;19
	.long	mode_puppet		;20
	.long	mode_inair2		;21
	.long	mode_normal	;22
	.long	mode_normal	;23
	.long	mode_chokehold		;24
	.long	mode_choking		;25


*****************************************************************************

mode_normal

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	hnrno_interrupt

	move	*a13(I_WILL_DIE),a0
	jrz	hnrnope
	move	*a13(IMMOBILIZE_TIME),a0
	jrnz	hnrnope
;Player has died amidst a combo...
;Knock me down.
	movi	und_fall_back_anim,a0
	calla	change_anim1a

;Zero health bar
	movi	-10,a0
	move	*a13(PLYRNUM),a1
	calla	adjust_health

	SETMODE	DEAD

	clr	a0
	move	a0,*a13(I_WILL_DIE)

	rets

hnrnope
;Perhaps we need to interrupt any sequence when a wrstler has won?

	calla	get_opp_plyrmode
	cmpi	MODE_DEAD,a0
	jrne	hnropp_not_dead

	;if closest is a zombie, skip pin section.
	calla	get_opp_process
	move	*a0(STATUS_FLAGS),a14
	btst	B_ZOMBIE,a14
	jrnz	hnropp_not_dead
	
	;all opponents are dead.  Check for pins/raisearms

	;if we're attached to someone, don't interrupt it.
	move	*a13(ATTACH_PROC),a1,L
	jrz	hnrno_attch
	move	*a1(ATTACH_PROC),a2,L
	cmp	a2,a13
	jreq	hnrno_pin_yet
hnrno_attch

	;if a teammate has pinned, raise yer arm.
	calla	ck_teammate_pin	
	jrc	hnrraisearm

	;nobody has pinned.  if we're outside or all our opponents are
	; outside, do a raisearm.
	calla	raisearm_check
	jrc	hnrraisearm

	;we're inside with a pinnable opponent.  any button pins.
	move	*a13(BUT_VAL_CUR),a0
	jrz	hnrno_pin_yet

	;we have a press -- make sure opponent is on the ground
	calla	can_pin
	jrnc	hnropp_notgnd

	;opponent is on the ground and close enough for anyone else
	; to pin.  Taker is funny, tho, and if you're not real close
	; and BEHIND the guy in Z, he just does a raise arm instead.

	;But he STILL sets the 'I did a pin flag' anyway.
	move	*a13(STATUS_FLAGS),a14
	ori	M_DID_PIN,a14
	move	a14,*a13(STATUS_FLAGS)

	;And we also set all the PINNED/WHOIPINNED/WHOPINNED me stuff
	calla	hit_nearest

	move	*a13(NEW_FACING_DIR),a0
	btst	MOVE_DOWN_BIT,a0
	jrz	hnrraisearm

	move	*a13(CLOSEST_ZDIST),a0
	cmpi	40h,a0
	jrge	hnrraisearm
	
	move	*a13(CLOSEST_XDIST),a0
	cmpi	35,a0
	jrge	hnrraisearm

	movi	und_4_pin2_anim,a0
	calla	change_anim1a

	;if we're a temp drone for auto-pin purposes, turn back into
	; a normal player here.
	calla	drone_change_back

	rets

hnrraisearm
	FACE24	und,raise_arm_anim
	calla	change_anim1a
	calla	set_raisearm_bit

	;if we're a temp drone for auto-pin purposes, turn back into
	; a normal player here.
	calla	drone_change_back

	rets

hnrtoo_far_to_pin
hnropp_notgnd
hnropp_not_dead
hnrno_pin_yet

	move	*a13(IMMOBILIZE_TIME),a0
	jrnz	hnrimmobilized

	move	*a13(BUT_VAL_CUR),a0
	btst	PLAYER_BLOCK_BIT,a0	;maybe have to action tables?
	jrz	hnrnblk			;1 for down transitions
	callr	hnrblock			;& 1 for current buttons
	jrc	hnrnblk
	clr	a0
	move	a0,*a13(ATTACK_TYPE)
	rets
hnrnblk
	move	*a13(BUT_VAL_CUR),a0
	andi	011111b,a0
	cmpi	PLAYER_PUNCH_VAL|PLAYER_KICK_VAL,a0
	jrz	hnrpunchkick

	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	X32	a0
	addi	hnraction_table,a0
	move	*a0,a0,L
	call	a0

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	hnrno_interrupt


	move	*a13(STICK_VAL_CUR),a0
	move	a0,*a13(MOVE_DIR)
	calla	climb_turnbuckle
	jrnc	hnrno_climb
	move	*a13(WRESTLERNUM),A5
	MOVI	CLIMB_ROPES,A2
	MOVI	1000,A0
	CALLA	ADD_IF_SILENT
	rets

hnrimmobilized
	clr	a14
	move	a14,*a13(MOVE_DIR)
hnrno_climb
	calla	execute_walk

hnrno_interrupt
	rets

hnraction_table
	.long	hnrz,hnrpunch,hnrblock,hnrblock			;0-3
	.long	hnrsuper_punch,hnrsuper_punch,hnrblock,hnrblock	;4-7
	.long	hnrkick,hnrpunchkick,hnrblock,hnrblock		;8-11
	.long	hnrsuper_punch,hnrpunchkick,hnrblock,hnrblock	;12-15
	.long	hnrsuper_kick,hnrsuper_kick,hnrblock,hnrblock	;16-19
	.long	hnrgraboh,hnrgraboh,hnrblock,hnrblock		;20-23
	.long	hnrsuper_kick,hnrpunchkick,hnrblock,hnrblock	;24-27
	.long	hnrgraboh,hnrgraboh,hnrblock,hnrblock		;28-31


************
hnrz


	rets

************
hnrpunch		;1
*
* MODE		   DX  DZ	ACTION
* ----------------------------------------------------
* normal	<  50   92	headbutt
* dizzy			"		"
* normal	>		normal punch
* dizzy			"		"
*
* onground	< 120  120	elbow drop
* onground	>		normal punch
*
* running			hiptoss
* bouncing			nothing
*
* onturnbkl	<  60   96	yank down
* onturnbkl	>		normal punch
* climbturnbkl			normal punch
*
	JJXM_INIT
	JJXM	NORMAL,		 75, 45,hnrpunch_hdbutt,hnrpunch_punch
	JJXM	RUNNING,	 75, 45,hnrpunch_hdbutt,hnrpunch_punch
	JJXM	BLOCK,		 75, 45,hnrpunch_hdbutt,hnrpunch_punch
	JJXM	DIZZY,		 75, 45,hnrpunch_hdbutt,hnrpunch_punch
	JJXM	ONGROUND,	160,140,hnrpunch_lbowdrop,hnrpunch_punch
	JJXM	BOUNCING,	 75, 45,hnrpunch_hdbutt,hnrpunch_punch
	JJXM	ONTURNBKL,	 75, 45,hnrpunch_hdbutt,hnrpunch_punch
	JJXM	CLIMBTURNBKL,		hnrpunch_punch
	JJXM	INAIR,		 75, 45,hnrpunch_hdbutt,hnrpunch_punch
	JJXM	ATTACHED,	 75, 45,hnrpunch_hdbutt,hnrpunch_punch
	JJXM	DEAD,		160,140,hnrpunch_lbowdrop,hnrpunch_punch
	JJXM	OPPOVERHEAD,	 75, 45,hnrpunch_hdbutt,hnrpunch_punch
	JJXM	WAITANIM,	 75, 45,hnrpunch_hdbutt,hnrpunch_punch
	JJXM	GRAPPLE,	 75, 45,hnrpunch_hdbutt,hnrpunch_punch
	JJXM	MASTER,		 75, 45,hnrpunch_hdbutt,hnrpunch_punch
	JJXM	SLAVE,		 75, 45,hnrpunch_hdbutt,hnrpunch_punch
	JJXM	HEADHOLD,	 75, 45,hnrpunch_hdbutt,hnrpunch_punch
	JJXM	HEADHELD,	 75, 45,hnrpunch_hdbutt,hnrpunch_punch
	JJXM	CHOKEHOLD,	 75, 45,hnrpunch_hdbutt,hnrpunch_punch
	JJXM	PUPPET,		 75, 45,hnrpunch_hdbutt,hnrpunch_punch
	JJXM	PUPPET2,	 75, 45,hnrpunch_hdbutt,hnrpunch_punch
	JJXM	INAIR2,		 75, 45,hnrpunch_hdbutt,hnrpunch_punch
	JJXM_END

hnrpunch_rets
	rets

*****
hnrpunch_punch
std_punch

	FACE24	und,punch_anim
	calla	change_anim1a

	WRSND	W_TAKER,PUNCH_T1,PUNCH_T2

	rets

*****
hnrpunch_hdbutt

	FACE24	und,butt_anim
	calla	change_anim1a

	WRSND	W_TAKER,HDBUTT_T1,HDBUTT_T2

	rets

*****
hnrpunch_lbowdrop

	FACE24	und,lbowdrop_anim
	calla	change_anim1a

	WRSND	W_TAKER,LBOWDROP_T1,LBOWDROP_T2

	rets

*****
hnrpunch_hiptoss
;std_hiptoss

	rets


************
hnrblock		;2

std_block
	move	@blocking_off,a0
	jrnz	hnrno_blocking

	RND_AWARD	a13,BLOCKS_AWD

	movi	und_4_block_anim,a0
	calla	change_anim1

	calla	BLOCK_WOOSH

	clr	a0
	move	a0,*a13(BLOCK_TIME)
	clrc
	rets

hnrno_blocking
	setc
	rets
       	

************
hnrsuper_punch	;4
*
* MODE		   DX  DZ	ACTION
* ----------------------------------------------------
* normal	<  50   92	close in super move
* dizzy			"		"
* normal	>		jumping punch move
* dizzy			"		"
*
* onground	< 120  120	super elbow drop
* onground	>		normal punch
*
* running			hip toss
* bouncing			nothing
*
* onturnbkl	<  60   96	yank down
* onturnbkl	>		normal punch
* climbturnbkl			normal punch
*
	JJXM_INIT
	JJXM	NORMAL,		 95, 35,hnrspunch_special,hnrspunch_slap	;0
	JJXM	RUNNING,	 95, 35,hnrspunch_special,hnrspunch_slap	;1
	JJXM	INAIR,		 95, 35,hnrspunch_special,hnrspunch_slap	;2
	JJXM	ATTACHED,	 95, 35,hnrspunch_special,hnrspunch_slap	;3
	JJXM	ONGROUND,	160,140,hnrspunch_lbowdrop,std_punch	;4
	JJXM	BOUNCING,	 95, 35,hnrspunch_special,hnrspunch_slap	;1
	JJXM	ONTURNBKL,	 	hnrspunch_slap			;6
	JJXM	BLOCK,		 95, 35,hnrspunch_special,hnrspunch_slap	;7
	JJXM	DIZZY,		 95, 35,hnrspunch_special,hnrspunch_slap	;8
	JJXM	DEAD,		160,140,hnrspunch_lbowdrop,std_punch	;9
	JJXM	OPPOVERHEAD,	 95, 35,hnrspunch_special,hnrspunch_slap	;10
	JJXM	CLIMBTURNBKL,		std_punch			;11
	JJXM	WAITANIM,	 95, 35,hnrspunch_special,hnrspunch_slap	;12
	JJXM	GRAPPLE,	 95, 35,hnrspunch_special,hnrspunch_slap	;13
	JJXM	MASTER,		 95, 35,hnrspunch_special,hnrspunch_slap	;14
	JJXM	SLAVE, 		 95, 35,hnrspunch_special,hnrspunch_slap	;15
	JJXM	HEADHOLD,	 95, 35,hnrspunch_special,hnrspunch_slap	;16

	JJXM	HEADHELD,	 	do_pile
;PILE
	JJXM	CHOKEHOLD,	 95, 35,hnrspunch_special,hnrspunch_slap	;16
	JJXM	PUPPET,		 95, 35,hnrspunch_special,hnrspunch_slap	;20
	JJXM	PUPPET2,	 95, 35,hnrspunch_special,hnrspunch_slap	;20
	JJXM	INAIR2,		 95, 35,hnrspunch_special,hnrspunch_slap	;21
	JJXM_END

hnrspunch_rets
	rets

hnrgraboh		;8
hnrspunch_slap
;jumping punch attack
	FACE24	und,slap_anim
	calla	change_anim1a

	WRSND	W_TAKER,GRABHOLD_T1,GRABHOLD_T2

	rets

*****
hnrspunch_special
;If stick is toward opponent, then do quick head hold
	move	*a13(STICK_VAL_CUR),a0
	btst	MOVE_DOWN_BIT,a0
	jrnz	hnrck_up
;	move	*a13(NEW_FACING_DIR),a1
;	andi	0ch,a1
;	cmp	a0,a1
;	jrz	hnrcont

	move	*a13(CLOSEST_XDIST),a1
	cmpi	70,a1
	jrgt	hnrspunch_slap

;hnrcont
;	movi	und_3_head_hold2_anim,a0
;	calla	change_anim1a
;
;	WRSND	W_TAKER,GRABHOLD_T1,GRABHOLD_T2
;	rets
;hnrhdbutt

	FACE24	und,butts_anim
	calla	change_anim1

	WRSND	W_TAKER,HDBUTT_T1,HDBUTT_T2

	rets
hnrck_up
;Do uppercut
	FACE24	und,uppercut_anim
	calla	change_anim1

	WRSND	W_TAKER,HDBUTT_T1,HDBUTT_T2
	rets


*****
hnrspunch_lbowdrop
;If near opponents head, and facing down, do the hair grab!
;Allow hair grab from below!

;	move	*a13(FACING_DIR),a14
;	btst	MOVE_DOWN_BIT,a14
;	jrz	hnrno

	move	*a13(CLOSEST_NUM),a14
	X32	a14

	addi	process_ptrs,a14
	move	*a14,a14,L
	move	*a14(PLYRMODE),a2
	cmpi	MODE_DEAD,a2
	jrz	hnrno
	move	*a13(OBJ_XPOS),a1,L 
	move	*a14(OBJ_XPOS),a2,L
	sub	a2,a1
	abs	a1
	srl	16,a1
	cmpi	20h,a1	;28
 	jrlt	hnrno

;At head or feet!

	move	*a14(OBJ_CONTROL),a14
	andi	M_FLIPH,a14
	move	*a13(OBJ_CONTROL),a0
	andi	M_FLIPH,a0
	cmp	a0,a14
	jrz	hnrno

;At head!  Do hair pickup.

	FACE24	und,hair_pickup_anim
	calla	change_anim1
	WRSND	W_TAKER,LBOWDROP_T1,LBOWDROP_T2
	rets

hnrno	FACE24	und,lbowdrop_anim
	calla	change_anim1
	WRSND	W_TAKER,LBOWDROP_T1,LBOWDROP_T2
	rets


************
hnrkick		;8
*
* MODE		   DX  DZ	ACTION
* ----------------------------------------------------
* normal	<  50   92	knee
* dizzy			"		"
* normal	>		normal kick
* dizzy			"		"
*
* onground	< 120  120	stomp
* onground	>		normal kick
*
* running			normal kick
* bouncing			normal kick
*
* onturnbkl			normal kick
* climbturnbkl			normal kick
*
	JJXM_INIT
	JJXM	NORMAL,		 65, 92,hnrkick_knee,hnrkick_kick
	JJXM	RUNNING,	 65, 92,hnrkick_knee,hnrkick_kick
	JJXM	INAIR,		 65, 92,hnrkick_knee,hnrkick_kick
	JJXM	ATTACHED,	 65, 92,hnrkick_knee,hnrkick_kick
	JJXM	ONGROUND,	160,140,hnrkick_stomp,hnrkick_kick
	JJXM	BOUNCING,	 65, 92,hnrkick_knee,hnrkick_kick
	JJXM	ONTURNBKL,	 	hnrkick_kick
	JJXM	BLOCK,		 65, 92,hnrkick_knee,hnrkick_kick
	JJXM	DIZZY,		 65, 92,hnrkick_knee,hnrkick_kick
	JJXM	DEAD,		160,140,hnrkick_stomp,hnrkick_kick
	JJXM	OPPOVERHEAD,	 65, 92,hnrkick_knee,hnrkick_kick
	JJXM	CLIMBTURNBKL,	 	hnrkick_kick
	JJXM	WAITANIM,   	 65, 92,hnrkick_knee,hnrkick_kick
	JJXM	GRAPPLE,    	 65, 92,hnrkick_knee,hnrkick_kick
	JJXM	MASTER,		 65, 92,hnrkick_knee,hnrkick_kick
	JJXM	SLAVE,	    	 65, 92,hnrkick_knee,hnrkick_kick
	JJXM	HEADHOLD,	 65, 92,hnrkick_knee,hnrkick_kick
	JJXM	HEADHELD,	 65, 92,hnrkick_knee,hnrkick_kick
	JJXM	CHOKEHOLD,	 65, 92,hnrkick_knee,hnrkick_kick
	JJXM	PUPPET,		 65, 92,hnrkick_knee,hnrkick_kick
	JJXM	PUPPET2,	 65, 92,hnrkick_knee,hnrkick_kick
	JJXM	INAIR2,		 	hnrkick_TB
	JJXM_END

*****
hnrkick_TB

	.ref	und_kick_TB_anim
	movi	und_kick_TB_anim,a0
	calla	change_anim1a

	WRSND	W_TAKER,KICK_T1,KICK_T2

	rets

*****
hnrkick_kick
std_kick

	FACE24	und,kick_anim
	calla	change_anim1a

	WRSND	W_TAKER,KICK_T1,KICK_T2

	rets

*****
hnrkick_flyingkick

	movi	und_flying_kick_anim,a0
	calla	change_anim1a

	SETMODE	INAIR

	WRSND	W_TAKER,FLYKICK_T1,FLYKICK_T2

	rets

*****
hnrkick_knee
std_knee

	FACE24	und,knee_anim
	calla	change_anim1a

	WRSND	W_TAKER,KICK_T1,KICK_T2

	rets

*****
hnrkick_stomp
attack_stomp

	FACE24	und,stomp_anim
	calla	change_anim1a

	WRSND	W_TAKER,KICK_T1,KICK_T2

	rets


************
hnrpunchkick	;9

	movi	start_run_anim,a0
	calla	change_anim1a

	rets

************
hnrsuper_kick	;16
*
* MODE		   DX  DZ	ACTION
* ----------------------------------------------------
* normal	<  60   60	close in super move
* dizzy			"		"
* normal	>		jumping kick move
* dizzy			"		"
*
* onground	< 120  120	super stomp
* onground	>		normal kick
*
* running			big boot
* bouncing			big boot
*
* onturnbkl	<  60   96	jumping kick move
* climbturnbkl		"		"
* onturnbkl	>		normal kick
* climbturnbkl		"		"
*
	JJXM_INIT
	JJXM	NORMAL,		 60, 60,hnrskick_special,hnrskick_kick	;0
	JJXM	RUNNING,	 	hnrskick_bigboot			;1
	JJXM	INAIR,		 60, 60,hnrskick_special,hnrskick_kick	;2
	JJXM	ATTACHED,	 60, 60,hnrskick_special,hnrskick_kick	;3
	JJXM	ONGROUND,	160,140,hnrskick_stomp,std_kick		;4
	JJXM	BOUNCING,	 	hnrskick_bigboot			;5
	JJXM	ONTURNBKL,	 60, 96,hnrskick_kick,std_kick		;6
	JJXM	BLOCK,		 60, 60,hnrskick_special,hnrskick_kick	;7
	JJXM	DIZZY,		 60, 60,hnrskick_special,hnrskick_kick	;8
	JJXM	DEAD,		160,140,hnrskick_stomp,std_kick		;9
	JJXM	OPPOVERHEAD,	 60, 60,hnrskick_special,hnrskick_kick	;10
	JJXM	CLIMBTURNBKL,	 60, 96,hnrskick_kick,std_kick		;11
	JJXM	WAITANIM,	 60, 62,hnrskick_special,hnrskick_kick	;12
	JJXM	GRAPPLE,	 60, 62,hnrskick_special,hnrskick_kick	;13
	JJXM	MASTER,		 60, 62,hnrskick_special,hnrskick_kick	;14
	JJXM	SLAVE, 		 60, 62,hnrskick_special,hnrskick_kick	;15
	JJXM	HEADHOLD,	 60, 62,hnrskick_special,hnrskick_kick	;16
	JJXM	HEADHELD,	 	std_kick
	JJXM	CHOKEHOLD,	 60, 62,hnrskick_special,hnrskick_kick	;16
	JJXM	PUPPET,		 60, 62,hnrskick_special,hnrskick_kick	;20
	JJXM	PUPPET2,	 60, 62,hnrskick_special,hnrskick_kick	;20
	JJXM	INAIR2,		 	hnrkick_TB
	JJXM_END

*****
hnrskick_kick
	FACE24	und,super_kick_anim
	calla	change_anim1a

	WRSND	W_TAKER,FLYKICK_T1,FLYKICK_T2
	rets


*****
hnrskick_special
;If stick is toward opponent, then do quick punches
	move	*a13(STICK_VAL_CUR),a0
	move	*a13(NEW_FACING_DIR),a1
	andi	0ch,a1
	cmp	a0,a1
	jrz	hnrcont2

	FACE24	und,knee_anim
	calla	change_anim1a

	WRSND	W_TAKER,KICK_T1,KICK_T2

	rets

hnrcont2
	movi	und_4_knee_fall_anim,a0
	calla	change_anim1

	WRSND	W_TAKER,GRABHOLD_T1,GRABHOLD_T2
	rets

hnrskick_stomp

	FACE24	und,stomp_anim
	calla	change_anim1a

	WRSND	W_TAKER,KICK_T1,KICK_T2

	rets

*****
hnrskick_bigboot	;we can probably get away with just a hnr4 big boot

	movi	und_4_bigboot_anim,a0		;*****
	calla	change_anim1a

	WRSND	W_TAKER,FLYKICK_T1,FLYKICK_T2

	rets


*****************************************************************************
*
* RUNNING (if GETUP_TIME > 0 then player is out of control)
*

stcXRUN_VAL	equ	UND_XRUN
stcZDRIFT_VAL	equ	UND_ZDRIFT

mode_running

	move	*a13(RUN_TIME),a0		;Used for flying kick
	addk	1,a0
	move	a0,*a13(RUN_TIME)

	move	*a13(USR_VAR1),a0
	jrnz	stcno_vel

	calla	bounce_off_ropes

	movi	stcXRUN_VAL,a0
	move	*a13(MOVE_DIR),a14
	btst	PLAYER_RIGHT_BIT,a14
	jrnz	stcpos
	neg	a0
stcpos
	move	@hyper_speed_on,a14
	sll	a14,a0
	move	a0,*a13(OBJ_XVEL),L

stcno_vel

	move	*a13(GETUP_TIME),a0		;delay b4 gaining control
	jrnz	stcout_of_control

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	stcno_interrupt

	move	*a13(STICK_VAL_CUR),a0
	move	*a13(MOVE_DIR),a1
	or	a0,a1
	andi	MOVE_LEFT|MOVE_RIGHT,a1
	cmpi	MOVE_LEFT|MOVE_RIGHT,a1
	jrne	stccontinue_run

	;braking with stick.  abort run.

	SETMODE	NORMAL

stccontinue_run
stcno_interrupt

	move	*a13(STICK_VAL_CUR),a0
	clr	a1

	movi	-stcZDRIFT_VAL,a1
	btst	PLAYER_UP_BIT,a0
	jrnz	stcsetvel

	movi	stcZDRIFT_VAL,a1
	btst	PLAYER_DOWN_BIT,a0
	jrnz	stcsetvel

	clr	a1
stcsetvel
	move	a1,*a13(OBJ_ZVEL),L

;Delay reading buttons after just getting out of an out of control run
;so a mistaken move isn't fired off
	move	*a13(DELAY_BUTNS),a0
	jrnz	stcout_of_control


	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	X32	a0
	addi	stcaction_table,a0
	move	*a0,a0,L
	call	a0
stcout_of_control
	rets

stcaction_table
	.long	stcz,stcpunch,stcblock,stcblock			;0-3
	.long	stcsuper_punch,stcsuper_punch,stcblock,stcblock	;4-7
	.long	stckick,stcpunchkick,stcblock,stcblock		;8-11
	.long	stcsuper_punch,stcpunchkick,stcblock,stcblock	;12-15
	.long	stcsuper_kick,stcsuper_kick,stcblock,stcblock	;16-19
	.long	stcgraboh,stcgraboh,stcblock,stcblock		;20-23
	.long	stcsuper_kick,stcpunchkick,stcblock,stcblock	;24-27
	.long	stcgraboh,stcgraboh,stcblock,stcblock		;28-31


************
stcz
	rets

************
stcpunch		;1
stcsuper_punch	;4
stcpunchkick
stcgraboh
*
* MODE		   DX  DZ	ACTION
* ----------------------------------------------------
* normal			flying clothesline
* dizzy					"
*
* onground	< 176 176	butt-drop
* onground	>		nothing
*
* running			flying clothesline
* bouncing			flying clothesline
*
* onturnbkl			flying clothesline
* climbturnbkl			flying clothesline
*
	JJXM_INIT
	JJXM	NORMAL,			stcpunch_clothesline
	JJXM	BLOCK,			stcpunch_clothesline
	JJXM	DIZZY,			stcpunch_clothesline
	JJXM	ONGROUND,	176,176,stcpunch_bellyflop,stcpunch_rets
	JJXM	RUNNING,		stcpunch_clothesline
	JJXM	BOUNCING,		stcpunch_clothesline
	JJXM	ONTURNBKL,		stcpunch_clothesline
	JJXM	CLIMBTURNBKL,		stcpunch_clothesline
	JJXM	INAIR,			stcpunch_clothesline
	JJXM	ATTACHED,		stcpunch_clothesline
	JJXM	DEAD,			attack_bellyflop
	JJXM	OPPOVERHEAD,		stcpunch_clothesline
	JJXM	WAITANIM,		stcpunch_clothesline
	JJXM	GRAPPLE,		stcpunch_clothesline
	JJXM	MASTER,			stcpunch_clothesline
	JJXM	SLAVE,			stcpunch_clothesline
	JJXM	HEADHOLD,		stcpunch_clothesline
	JJXM	HEADHELD,		stcpunch_clothesline
	JJXM	CHOKEHOLD,		stcpunch_clothesline
	JJXM	PUPPET,			stcpunch_clothesline
	JJXM	PUPPET2,		stcpunch_clothesline
	JJXM	INAIR2,			stcpunch_clothesline
	JJXM_END

stcpunch_rets
	rets

*****
stcpunch_clothesline

	;don't do it if you're running away from your opponent.
	move	*a13(FACING_DIR),a0
	move	*a13(NEW_FACING_DIR),a1
	and	a0,a1
	andi	MOVE_LEFT|MOVE_RIGHT,a1
	jrz	stcz

	clr	a0
	move	a0,*a13(RUN_TIME)

	SETMODE	NORMAL

	move	*a13(CLOSEST_XDIST),a1
	cmpi	70,a1
	jrlt	stchdbutt

	.ref	und_2_run_slap_anim
	.ref	und_4_run_slap_anim
	FACE24	und,run_slap_anim
	calla	change_anim1a

	WRSND	W_TAKER,GRABHOLD_T1,GRABHOLD_T2

	rets

stchdbutt

	FACE24	und,butt_anim
	calla	change_anim1

	WRSND	W_TAKER,HDBUTT_T1,HDBUTT_T2

	rets

*****
stcpunch_bellyflop
attack_bellyflop

	movi	und_flying_butt_drop_anim,a0
	calla	change_anim1a

	WRSND	W_TAKER,FLYKICK_T1,FLYKICK_T2

	rets

************
stcblock		;2

	move	*a13(OBJ_XVEL),a0,L
	sra	1,a0
	move	a0,*a13(OBJ_XVEL),L
	SETMODE	NORMAL
	jruc	std_block

************
stckick		;8
stcsuper_kick	;16
*
* MODE		   DX  DZ	ACTION
* ----------------------------------------------------
* normal			flying kick
* dizzy					"
*
* onground	< 176 176	butt-drop
* onground	>		nothing
*
* running			flying kick
* bouncing			flying kick
*
* onturnbkl			flying kick
* climbturnbkl			flying kick
*
	JJXM_INIT
	JJXM	NORMAL,			stckick_flyingkick
	JJXM	BLOCK,			stckick_flyingkick
	JJXM	DIZZY,			stckick_flyingkick
	JJXM	ONGROUND,		attack_bellyflop
	JJXM	RUNNING,		stckick_flyingkick
	JJXM	BOUNCING,		stckick_flyingkick
	JJXM	ONTURNBKL,		stckick_flyingkick
	JJXM	CLIMBTURNBKL,		stckick_flyingkick
	JJXM	INAIR,			stckick_flyingkick
	JJXM	ATTACHED,		stckick_flyingkick
	JJXM	DEAD,			attack_bellyflop
	JJXM	OPPOVERHEAD,		stckick_flyingkick
	JJXM	WAITANIM,		stckick_flyingkick
	JJXM	GRAPPLE,		stckick_flyingkick
	JJXM	MASTER,			stckick_flyingkick
	JJXM	SLAVE,			stckick_flyingkick
	JJXM	HEADHOLD,		stckick_flyingkick
	JJXM	HEADHELD,		stckick_flyingkick
	JJXM	CHOKEHOLD,		stckick_flyingkick
	JJXM	PUPPET,			stckick_flyingkick
	JJXM	PUPPET2,		stckick_flyingkick
	JJXM	INAIR2,			stckick_flyingkick
	JJXM_END

stckick_rets
	rets

*****
stckick_flyingkick

	calla	ck_ignore
	jrc	stcz

	movi	und_flying_kick_anim,a0
	calla	change_anim1a

	SETMODE	INAIR

	WRSND	W_TAKER,FLYKICK_T1,FLYKICK_T2

	rets


*****************************************************************************
*

mode_inair	;2

	rets

*****************************************************************************
*

mode_attached	;3

	calla	keep_attached
	jrnz	tpistill_attached

	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL

	movi	MODE_NORMAL,a0
	move	a0,*a13(ANIMODE)

tpistill_attached

	rets

*****************************************************************************

mode_onground	;4

	rets


*****************************************************************************
*
* bouncing off ropes while running

mode_bouncing	;5

	clr	a0
	move	a0,*a13(OBJ_XVEL),L
	move	a0,*a13(OBJ_ZVEL),L

	move	*a13(ANIMODE),a0
	btst	MODE_END_BIT,a0
	jrz	zsfnot_ended

	move	*a13(MOVE_DIR),a0
	xori	MOVE_LEFT+MOVE_RIGHT,a0	;flip LEFT/RIGHT
	move	a0,*a13(MOVE_DIR)

	move	*a13(NEW_FACING_DIR),a1
	andi	MOVE_UP+MOVE_DOWN,a1
	or	a0,a1			;LEFT or RIGHT
	move	a1,*a13(FACING_DIR)	;face same dir as run

	movi	und_run2_anim,a0
	calla	change_anim1a

	SETMODE	RUNNING

;	clr	a0
;	move	a0,*a13(GETUP_TIME)	;in control

zsfnot_ended
	rets

*****************************************************************************
*
* STANDING ON TOP OF TURNBUCKLE

mode_onturnbkl	;6

;	;check unint
;	move	*a13(ANIMODE),a14
;	btst	MODE_UNINT_BIT,a14
;	jrnz	mszno_interrupt

	move	*a13(STICK_VAL_CUR),a0
	btst	PLAYER_DOWN_BIT,a0
	jrz	mszno_climbdown

	movi	und_climb_down_anim,a0
	calla	change_anim1a

	SETMODE	CLIMBTURNBKL

mszno_interrupt
	rets

mszno_climbdown
	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	jrz	mszz

	X32	a0
	addi	mszaction_table,a0
	move	*a0,a0,L
	call	a0

	move	*a13(PLYRNUM),a5
	movi	JUMP_ROPES,a2
	movi	1000,a0
	calla	ADD_IF_SILENT

	rets


;For standing on top of turnbuckles

mszaction_table
	.long	mszz,mszpunch,mszblock,mszblock			;0-3
	.long	mszsuper_punch,mszsuper_punch,mszblock,mszblock	;4-7
	.long	mszkick,mszpunchkick,mszblock,mszblock		;8-11
	.long	mszsuper_punch,mszpunchkick,mszblock,mszblock	;12-15
	.long	mszsuper_kick,mszsuper_kick,mszblock,mszblock	;16-19
	.long	mszgraboh,mszgraboh,mszblock,mszblock		;20-23
	.long	mszsuper_kick,mszpunchkick,mszblock,mszblock	;24-27
	.long	mszgraboh,mszgraboh,mszblock,mszblock		;28-31

************
mszz
	rets

************
mszpunch		;1
mszblock		;2
mszsuper_punch	;4
mszkick		;8
mszsuper_kick	;16
mszgraboh
mszpunchkick

	SETMODE	INAIR

	movi	und_tbukl_butt_drop_anim,a0
	calla	change_anim1a

	WRSND	W_TAKER,FLYKICK_T1,FLYKICK_T2

	rets

*****************************************************************************
* blocking

mode_block	;7

	move	*a13(BLOCK_TIME),a0
	inc	a0
	move	a0,*a13(BLOCK_TIME)
	cmpi	160,a0
	jrlt	tgino

	calla	get_opp_plyrmode
	cmpi	MODE_BLOCK,a0
	jrnz	tgino
	move	*a13(CLOSEST_XDIST),a0
	cmpi	61h,a0
	jrge	tgino
	cmpi	45,a0
	jrlt	tgino
	move	*a13(CLOSEST_ZDIST),a0
	cmpi	30,a0
	jrlt	tgipunchblock

tgino
	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	jrz	tgino_interrupt

	;press.  if block isn't down, let mode_normal handle it
	move	a0,a2			;save a0 from ...val_down
	move	*a13(BUT_VAL_CUR),a0
	btst	PLAYER_BLOCK_BIT,a0
	jrz	tgiset_mode_normal
	move	a2,a0			;restore a0 from ...val_down

	X32	a0
	addi	tgiaction_table,a0
	move	*a0,a0,L
	call	a0

tgino_interrupt
	rets

tgiset_mode_normal
	SETMODE	NORMAL
	jruc	mode_normal

tgiaction_table
	.long	tgiz,tgipunchblock,tgiz	;0-2
	.long	tgipunchblock		;3
	.long	tgiz,tgiz,tgiz,tgiz,tgiz,tgiz,tgiz	;4-10
	.long	tgiz,tgiz,tgiz,tgiz,tgiz,tgiz,tgiz	;11-17
	.long	tgiz,tgiz,tgiz,tgiz,tgiz,tgiz,tgiz	;18-24
	.long	tgiz,tgiz,tgiz,tgiz,tgiz,tgiz,tgiz	;25-31

************
tgiz
	rets

************
tgipunchblock	;3
*
* MODE		   DX  DZ	ACTION
* ----------------------------------------------------
* all				push
*

;This push has no collisions set!

	SETMODE	NORMAL

	movi	und_4_push_anim,a0
	calla	change_anim1a

	WRSND	W_TAKER,PUSH_T1,PUSH_T2

	rets


*****************************************************************************
* taker with zero health

mode_dizzy	;8

;	move	*a13(GETUP_TIME),a0
;	jrnz	vqpstill_going
;
;	calla	clear_damage_log
;
;	clr	a0
;	move	a0,*a13(STARS_FLAG)
;
;	SETMODE	NORMAL
;
;vqpstill_going
	rets

*****************************************************************************
* opponent held overhead

mode_oppoverhead ;10

	rets

*****************************************************************************
*
* CLIMBING UP OR DOWN THE TURNBUCKLE

mode_climbturnbkl	;11

	rets


*****************************************************************************

mode_waitanim	;12

	move	*a13(ANIMODE),a0
	btst	MODE_END_BIT,a0
	jrz	ilnnot_ended

	move	*a13(CODE_ADDR),a0,L
	call	a0

ilnnot_ended
	rets


*****************************************************************************

mode_grapple	;13

	rets

*****************************************************************************

mode_master	;14

	calla	master_keep_attached	;keep slave attached to me

	rets

*****************************************************************************

mode_slave	;15
	rets

*****************************************************************************

mode_headhold	;16
	move	*a13(ANIBASE),a0,L
	cmpi	und_sliding_choke_anim,a0
	jrnz	tvrnorm
	move	*a13(CUR_FRAME),a0,L
	.ref	U2LN2A
	movi	U2LN2A+FR6,a1
	move	*a1,a1,L
	cmp	a1,a0
	jrz	mode_chokehold
	rets
tvrnorm
;Bozo power move
	.ref	bozo_check
	calla	bozo_check
	jrnc	tvrfail

	WRSND	W_BAMBAM,GRABHOLD_T1,GRABHOLD_T2

	movi	und_neckbreaker_anim,a0
	move	@PCNT,a14
	btst	0,a14
	jrz	tvrtag
	movi	und_pile_anim,a0
tvrtag	calla	change_anim1a

	rets

tvrfail
	move	*a13(WHOIHIT),a0,L
	move	*a0(PLYRMODE),a0
	cmpi	MODE_HEADHELD,a0
	jrnz	tvrexit

;	move	*a13(ATTACH_PROC),a10,L
;	jrz	tvrexit

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	tvrno_interrupt

	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	X32	a0
	addi	tvraction_table,a0
	move	*a0,a0,L
	call	a0

tvrno_interrupt
	rets

tvrexit
	move	*a13(OBJ_ZPOS),a14,L
	subi	[6,0],a14
	move	a14,*a13(OBJ_ZPOS),L

	movk	MOVE_DOWN_RIGHT,a1
	move	*a13(OBJ_CONTROL),a0
	btst	B_FLIPH,a0
	jrz	tvrright
	movk	MOVE_DOWN_LEFT,a1
tvrright	move	a1,*a13(FACING_DIR)
	move	a1,*a13(NEW_FACING_DIR)

	SETMODE	NORMAL

	rets

tvraction_table
	.long	tvrz,tvrpunch,tvrblock,tvrblock			;0-3
	.long	tvrsuper_punch,tvrsuper_punch,tvrblock,tvrblock	;4-7
	.long	tvrkick,tvrpunchkick,tvrblock,tvrblock		;8-11
	.long	tvrsuper_punch,tvrpunchkick,tvrblock,tvrblock	;12-15
	.long	tvrsuper_kick,tvrsuper_kick,tvrblock,tvrblock	;16-19
	.long	tvrgraboh,tvrgraboh,tvrblock,tvrblock		;20-23
	.long	tvrsuper_kick,tvrpunchkick,tvrblock,tvrblock	;24-27
	.long	tvrgraboh,tvrgraboh,tvrblock,tvrblock		;28-31


************
tvrblock
tvrgraboh
tvrz		;0
	rets

************

tvrpunch		;1
;If stick is toward opponent, then do quick punches
	CALLA	FIND_AND_KILL_ENDLESS
	move	*a13(STICK_VAL_CUR),a0
	move	*a13(NEW_FACING_DIR),a1
	andi	0ch,a1
	cmp	a0,a1
	jrnz	tvrtag2
	movi	und_4_knee_butts_anim,a0
	calla	change_anim1a
	rets

tvrtag2
	.ref	und_4_knee2_anim
	movi	und_4_knee2_anim,a0
	calla	change_anim1a
	rets

************
tvrsuper_punch	;4
do_pile
;This flag is only set if taker has done repeated uppercuts!

	move	*a13(USR_VAR2),a0
	jrz	tvrupper

	CALLA	FIND_AND_KILL_ENDLESS

	move	*a13(STICK_VAL_CUR),a0
	btst	PLAYER_DOWN_BIT,a0
	jrz	tvrz

	movi	und_pile_anim,a0
	calla	change_anim1a
	rets

tvrupper
	move	*a13(STICK_VAL_CUR),a0
	btst	PLAYER_DOWN_BIT,a0
	jrz	tvrz

;	SPCDMG	D_UPRCUT/2,15

	CALLA	FIND_AND_KILL_ENDLESS
	FACE24	und,uppercut_anim
	calla	change_anim1a
	rets


tvrpunchkick
tvrkick
	CALLA	FIND_AND_KILL_ENDLESS
	move	*a13(STICK_VAL_CUR),a0
	btst	PLAYER_DOWN_BIT,a0
	jrz	tvrknee

	movi	und_4_knee2_anim,a0
	calla	change_anim1a
	rets

tvrknee
	movi	und_4_knee2_anim,a0
	calla	change_anim1a
	rets

tvrsuper_kick	;16
;If stick is toward opponent, then do quick knees
;	move	*a13(STICK_VAL_CUR),a0
;	move	*a13(NEW_FACING_DIR),a1
;	andi	0ch,a1
;	cmp	a0,a1
;	jrnz	tvrkick
;
;;Quick knees
;;	movi	dnk_3_knees_to_head_anim,a0
;	movi	und_4_knee_anim,a0
;	calla	change_anim1a

	rets

*****************************************************************************
mode_puppet2	;17

;	;check for the head-grab breaker
;	move	*a13(BUT_VAL_DOWN),a0
;	btst	PLAYER_KICK_BIT,a0
;	jrz	mjwout
;
;	;check the time - must do it within 20 ticks
;	move	*a13(HEAD_GRAB_TIME),a14
;	move	@PCNT,a0
;	sub	a14,a0
;	cmpi	KICK_OUT,a0
;	jrgt	mjwout
;
;	move	*a13(PLYR_TYPE),a14
;	cmpi	PTYPE_DRONE,a14
;	jrz	mjwout
;
;	;okay, waste 'im. - detach, setmode, immobilize, and launch the knee
;	move	*a13(ATTACH_PROC),a0,L
;	clr	a14
;	move	a14,*a13(ATTACH_PROC),L
;	move	a14,*a0(ATTACH_PROC),L
;	movi	15,a14
;	move	a14,*a0(IMMOBILIZE_TIME)
;	SETMODE	NORMAL
;	jruc	std_knee
;
;mjwout
	rets

*****************************************************************************
mode_headheld	;19
	move	*a13(ANIMODE),a0
	btst	MODE_NOGRAVITY_BIT,a0
	janz	mode_choking


;Bozo reversal
	calla	bozo_check
	jrnc	wwrfail

	PUSH	a8
	move	a13,a8
	CALLA	DO_REVERSAL
	CALLA	DO_REVERSAL_MESS
	PULL	a8

	WRSND	W_BAMBAM,GRABHOLD_T1,GRABHOLD_T2

	movi	und_neckbreaker_anim,a0
	move	@PCNT,a14
	btst	0,a14
	jrz	wwrtag
	movi	und_pile_anim,a0
wwrtag	calla	change_anim1a

	rets
wwrfail

;He may have let me go by hitting his block butn!
	move	*a13(ATTACH_PROC),a0,L
	jrnz	wwrno_luck

;Make sure this guy is on ground
	move	*a13(OBJ_YPOSINT),a0
	move	*a13(GROUND_Y),a1
	cmp	a1,a0			;a0-a1
	jrgt	wwrno_luck

;hit_gnd

	movi	und_3_head_held_stand_anim,a0
	calla	change_anim1a

wwrno_luck
	rets

*****************************************************************************
mode_chokehold	;24

	move	*a13(ATTACH_PROC),a0,L
	jrz	korlost_him
	move	*a0(ATTACH_PROC),a0,L
	cmp	a13,a0
	jrne	korlost_him

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	korno_interrupt

	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	jrz	korno_interrupt

	move	*a13(ATTACH_PROC),a1,L
	movk	30,a14
	move	a14,*a1(IMMOBILIZE_TIME)

	X32	a0
	addi	koraction_table,a0
	move	*a0,a0,L
	call	a0

korno_interrupt
	rets

koraction_table
	.long	korz,korpunch,korblock,korblock			;0-3
	.long	korsuper_punch,korsuper_punch,korblock,korblock	;4-7
	.long	korkick,korpunchkick,korblock,korblock		;8-11
	.long	korsuper_punch,korpunchkick,korblock,korblock	;12-15
	.long	korsuper_kick,korsuper_kick,korblock,korblock	;16-19
	.long	korgraboh,korgraboh,korblock,korblock		;20-23
	.long	korsuper_kick,korpunchkick,korblock,korblock	;24-27
	.long	korgraboh,korgraboh,korblock,korblock		;28-31

************
korz		;0
korblock		;2
	rets

************
korpunch		;1
korpunchkick

	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL

	move	*a13(STICK_VAL_CUR),a0
	btst	MOVE_UP_BIT,a0
	jrz	korreg

	CALLA	FIND_AND_KILL_ENDLESS

	SETMODE	HEADHOLD

	move	*a13(WHOIHIT),a0,L
	movi	MODE_HEADHELD,a14
	move	a14,*a0(PLYRMODE)

;Make sure victim knows he is not in chokehold anymore
	move	*a0(ANIMODE),a14
	andni	MODE_NOGRAVITY,a14
	move	a14,*a0(ANIMODE)

	movi	und_4_knee_butts_anim,a0
	calla	change_anim1a
	WRSND	W_TAKER,HDBUTT_T1,HDBUTT_T2

	rets
korreg
	CALLA	FIND_AND_KILL_ENDLESS
	movi	und_2_butt_anim,a0
	calla	change_anim1a
	WRSND	W_TAKER,HDBUTT_T1,HDBUTT_T2

	rets

************
korsuper_punch	;4
korgraboh

;Check for uppercut
	move	*a13(STICK_VAL_CUR),a0
	btst	MOVE_DOWN_BIT,a0
	jrz	korpunch

	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL

	CALLA	FIND_AND_KILL_ENDLESS
	FACE24	und,uppercut_anim
	calla	change_anim1

	WRSND	W_TAKER,HDBUTT_T1,HDBUTT_T2
	rets

korsuper_kick	;16
;If stick is toward opponent, then do quick punches
	move	*a13(STICK_VAL_CUR),a0
	btst	PLAYER_DOWN_BIT,a0
	jrnz	kortag
	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL

	CALLA	FIND_AND_KILL_ENDLESS
	movi	und_2_knee_anim,a0
	calla	change_anim1a
	rets

korkick		;8
;	move	*a13(STICK_VAL_CUR),a0
;	btst	PLAYER_DOWN_BIT,a0
;	jrnz	kortag0

	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL

	CALLA	FIND_AND_KILL_ENDLESS
	movi	und_2_knee_anim,a0
	calla	change_anim1a
	rets

;kortag0
;	SETMODE	NORMAL
;
;	CALLA	FIND_AND_KILL_ENDLESS
;
;	movi	und_choke_face_slam_anim,a0
;	calla	change_anim1a
;
;	WRSND	W_TAKER,KICK_T1,KICK_T2
;
;	rets
kortag
	SETMODE	NORMAL

	CALLA	FIND_AND_KILL_ENDLESS
	movi	und_chokeslam_anim,a0
	calla	change_anim1a

	WRSND	W_TAKER,KICK_T1,KICK_T2

	rets

************

korlost_him
	CALLA	FIND_AND_KILL_ENDLESS
	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL
	movi	MODE_NORMAL,a0
	move	a0,*a13(ANIMODE)

	rets


*****************************************************************************
 SUBR	mode_choking	;25

	move	*a13(ATTACH_PROC),a0,L
	jrz	qmbfall_out
	move	*a0(ATTACH_PROC),a0,L
	cmp	a13,a0
	jrne	qmbfall_out

;	move	*a13(GETUP_TIME),a0
;	jrz	qmbfall_out
	rets


qmbfall_out
	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	CALLA	FIND_AND_KILL_ENDLESS
	SETMODE	NORMAL
	movi	MODE_NORMAL,a0
	move	a0,*a13(ANIMODE)

	rets


*****************************************************************************

;zasVEL	equ	30000h		;38000h	;30000h
;zasDVEL	equ	21f0eh		;27978h	;21f0eh
;zasVEL	equ	38000h		;38000h	;30000h
;zasDVEL	equ	30000h		;27978h	;21f0eh
zasVEL	equ	3a000h		;38000h	;30000h
zasDVEL	equ	31000h		;27978h	;21f0eh


 SUBR und_velocity_table

;		X,	Z

	.long	0,	-zasVEL	;0 UP

	.long	zasDVEL,	-zasDVEL	;1 UP-RIGHT

	.long	zasVEL,	0	;2 RIGHT

	.long	zasDVEL,	zasDVEL	;3 DOWN-RIGHT

	.long	0,	zasVEL	;4 DOWN

	.long	-zasDVEL,	zasDVEL	;5 DOWN-LEFT

	.long	-zasVEL,	0	;6 LEFT

	.long	-zasDVEL,	-zasDVEL	;7 UP-LEFT


*****************************************************************************

 SUBR und_rotate_anims_table
; old = up right
	.long	und_stand2_anim		;new = up right
	.long	und_2_to_4_turn_anim	;    = down right
	.long	und_2_to_6_turn_anim	;    = down left
	.long	und_2_to_8_turn_anim	;    = up left

; old = down right
	.long	und_4_to_2_turn_anim	;new = up right
	.long	und_stand4_anim		;    = down right
	.long	und_4_to_6_turn_anim	;    = down left
	.long	und_4_to_8_turn_anim	;    = up left

; old = down left
	.long	und_6_to_2_turn_anim	;new = up right
	.long	und_6_to_4_turn_anim	;    = down right
	.long	und_stand6_anim		;    = down left
	.long	und_6_to_8_turn_anim	;    = up left

; old = up left
	.long	und_8_to_2_turn_anim	;new = up right
	.long	und_8_to_4_turn_anim	;    = down right
	.long	und_8_to_6_turn_anim	;    = down left
	.long	und_stand8_anim		;    = up left


 SUBR und_leg_anims_table
;  MOVE
;(nqu1 - UP)				FACING
	.long	und_walk1_f2_anim	;1 (UP)
	.long	und_walk1_f2_anim	;2 (UP_RIGHT)
	.long	und_walk1_f4_anim	;3 (RIGHT)
	.long	und_walk1_f4_anim	;4 (DOWN_RIGHT)
	.long	und_walk1_f4_anim	;5 (DOWN)
	.long	und_walk1_f4_anim	;6 (DOWN_LEFT)
	.long	und_walk1_f2_anim	;7 (LEFT)
	.long	und_walk1_f2_anim	;8 (UP-LEFT)

;(nqu2 - UP-RIGHT)
	.long	und_walk2_f2_anim	;1 (UP)
	.long	und_walk2_f2_anim	;2 (UP_RIGHT)
	.long	und_walk2_f2_anim	;3 (RIGHT)
	.long	und_walk2_f4_anim	;4 (DOWN_RIGHT)
	.long	und_walk8_f4_anim	;5 (DOWN)
	.long	und_walk8_f4_anim	;6 (DOWN_LEFT)
	.long	und_walk4_f2_anim	;7 (LEFT)
	.long	und_walk4_f2_anim	;8 (UP-LEFT)

;(nqu3 - RIGHT)
	.long	und_walk2_f2_anim	;1 (UP)
	.long	und_walk2_f2_anim	;2 (UP_RIGHT)
	.long	und_walk2_f2_anim	;3 (RIGHT)
	.long	und_walk4_f4_anim	;4 (DOWN_RIGHT)
	.long	und_walk4_f4_anim	;5 (DOWN)
	.long	und_walk8_f4_anim	;6 (DOWN_LEFT)
	.long	und_walk6_f2_anim	;7 (LEFT)
	.long	und_walk6_f2_anim	;8 (UP-LEFT)


;(nqu4 - DOWN-RIGHT)
	.long	und_walk2_f2_anim	;1 (UP)
	.long	und_walk8_f2_anim	;2 (UP_RIGHT)
	.long	und_walk4_f4_anim	;3 (RIGHT)
	.long	und_walk4_f4_anim	;4 (DOWN_RIGHT)
	.long	und_walk2_f4_anim	;5 (DOWN)
	.long	und_walk6_f4_anim	;6 (DOWN_LEFT)
	.long	und_walk2_f2_anim	;7 (LEFT)
	.long	und_walk6_f2_anim	;8 (UP-LEFT)

;(nqu5 - DOWN)
	.long	und_walk5_f2_anim	;1 (UP)
	.long	und_walk5_f2_anim	;2 (UP_RIGHT)
	.long	und_walk5_f4_anim	;3 (RIGHT)
	.long	und_walk5_f4_anim	;4 (DOWN_RIGHT)
	.long	und_walk5_f4_anim	;5 (DOWN)
	.long	und_walk5_f4_anim	;6 (DOWN_LEFT)
	.long	und_walk5_f2_anim	;7 (LEFT)
	.long	und_walk5_f2_anim	;8 (UP-LEFT)

;(nqu6 - DOWN-LEFT)
	.long	und_walk2_f2_anim	;1 (UP)
	.long	und_walk6_f2_anim	;2 (UP_RIGHT)
	.long	und_walk2_f2_anim	;3 (RIGHT)
	.long	und_walk6_f4_anim	;4 (DOWN_RIGHT)
	.long	und_walk2_f4_anim	;5 (DOWN)
	.long	und_walk4_f4_anim	;6 (DOWN_LEFT)
	.long	und_walk2_f2_anim	;7 (LEFT)
	.long	und_walk8_f2_anim	;8 (UP-LEFT)

;(nqu7 - LEFT)
	.long	und_walk2_f2_anim	;1 (UP)
	.long	und_walk6_f2_anim	;2 (UP_RIGHT)
	.long	und_walk6_f2_anim	;3 (RIGHT)
	.long	und_walk8_f4_anim	;4 (DOWN_RIGHT)
	.long	und_walk4_f4_anim	;5 (DOWN)
	.long	und_walk4_f4_anim	;6 (DOWN_LEFT)
	.long	und_walk2_f2_anim	;7 (LEFT)
	.long	und_walk2_f2_anim	;8 (UP-LEFT)

;(nqu8 - UP-LEFT)
	.long	und_walk2_f2_anim	;1 (UP)
	.long	und_walk4_f2_anim	;2 (UP_RIGHT)
	.long	und_walk6_f2_anim	;3 (RIGHT)
	.long	und_walk8_f4_anim	;4 (DOWN_RIGHT)
	.long	und_walk6_f4_anim	;5 (DOWN)
	.long	und_walk2_f4_anim	;6 (DOWN_LEFT)
	.long	und_walk2_f2_anim	;7 (LEFT)
	.long	und_walk2_f2_anim	;8 (UP-LEFT)


 SUBR und_torso_anims_table
; old = up right
	.long	und_torso2_anim		;new = up right
	.long	und_2_to_4_turn2_anim	;    = down right
	.long	und_2_to_6_turn2_anim	;    = down left
	.long	und_2_to_8_turn2_anim	;    = up left

; old = down right
	.long	und_4_to_2_turn2_anim	;new = up right
	.long	und_torso4_anim		;    = down right
	.long	und_4_to_6_turn2_anim	;    = down left
	.long	und_4_to_8_turn2_anim	;    = up left

; old = down left
	.long	und_6_to_2_turn2_anim	;new = up right
	.long	und_6_to_4_turn2_anim	;    = down right
	.long	und_torso6_anim		;    = down left
	.long	und_6_to_8_turn2_anim	;    = up left

; old = up left
	.long	und_8_to_2_turn2_anim	;new = up right
	.long	und_8_to_4_turn2_anim	;    = down right
	.long	und_8_to_6_turn2_anim	;    = down left
	.long	und_torso8_anim		;    = up left


******************************************************************************

	.end

