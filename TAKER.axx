
	.file	"taker.asm"
	.title	"Undertaker specific game code"
	.width	132
	.option	b,d,l,t
	.mnolist


	.include	"macros.h"
	.include	"jjxm.h"
	.include	"mproc.equ"		;Mproc equates
	.include	"display.equ"		;Display proc equates
	.include	"gsp.equ"		;Gsp asm equates
	.include	"sys.equ"
	.include	"game.equ"
	.include	"plyr.equ"
	.include	"anim.equ"
	.include	"audit.equ"
	.include	"sound.h"
	.include 	"ring.equ"
	.include	"lifebar.h"
	.include	"damage.equ"



	.ref	get_punch_dtime,ck_teammate_pin,raisearm_check
	.ref	process_ptrs,can_pin
	.ref	change_anim1,change_anim1a,set_raisearm_bit,hit_nearest
	.ref	change_anim2,change_anim2a,std_taunt,std_walk_fast
	.ref	keep_attached,master_keep_attached
	.ref	get_opp_plyrmode,mode_dead,get_opp_process
	.ref	check_secret_moves,round_award
	.ref	mode_inair2,mode_puppet
	.ref	execute_walk,do_taunt
	.ref	bounce_off_ropes
	.ref	climb_turnbuckle
	.ref	ck_ignore,PCNT
	.ref	CLIMB_ROPES,ADD_IF_SILENT,JUMP_ROPES
	.ref	CHECK_COMBO_GO,FIND_AND_KILL_ENDLESS

	.ref	BONUS_MESS,DO_REVERSAL,DO_REVERSAL_MESS
	.ref	BLOCK_WOOSH,drone_change_back
	.ref	blocking_off
	.ref	hyper_speed_on
	.ref	in_finish_move
	.ref	p1rounds,p2rounds
	.if NUM_TAKER_FINISHES
	.if NUM_TAKER_FINISHES > 1
	.ref	und_finish2_move
	.endif
	.endif
	.ref	finish_completed
	.ref	p1pins,p2pins
	.ref	und_coffin_up
	.ref	close_the_door
	.ref	wres_mv_done
	.ref	dead_wrestler
	.ref	und_2_raise_dead_anim
	.ref	guy_up,guy_in
	.ref	BGND_UD1
	.ref	KIL1C
	.ref	RNDRNG0


	.ref	und_4_block_anim
	.ref	start_run_anim

	.ref	wres_slave_anim
	.ref	und_zip_anim

	.ref	und_stand2_anim,und_stand8_anim
	.ref	und_stand4_anim,und_stand6_anim
	.ref	und_torso2_anim,und_torso8_anim
	.ref	und_torso4_anim,und_torso6_anim

	.ref	und_2_to_4_turn_anim,und_8_to_6_turn_anim	;stand
	.ref	und_4_to_2_turn_anim,und_6_to_8_turn_anim
	.ref	und_4_to_6_turn_anim,und_6_to_4_turn_anim
	.ref	und_2_to_8_turn_anim,und_8_to_2_turn_anim
	.ref	und_4_to_8_turn_anim,und_6_to_2_turn_anim
	.ref	und_2_to_6_turn_anim,und_8_to_4_turn_anim

	.ref	und_2_to_4_turn2_anim,und_8_to_6_turn2_anim	;torso
	.ref	und_4_to_2_turn2_anim,und_6_to_8_turn2_anim
	.ref	und_4_to_6_turn2_anim,und_6_to_4_turn2_anim
	.ref	und_2_to_8_turn2_anim,und_8_to_2_turn2_anim
	.ref	und_4_to_8_turn2_anim,und_6_to_2_turn2_anim
	.ref	und_2_to_6_turn2_anim,und_8_to_4_turn2_anim

	.ref	und_walk1_f2_anim,und_walk2_f2_anim,und_walk4_f2_anim
	.ref	und_walk5_f2_anim,und_walk6_f2_anim,und_walk8_f2_anim

	.ref	und_walk1_f4_anim,und_walk2_f4_anim,und_walk4_f4_anim
	.ref	und_walk5_f4_anim,und_walk6_f4_anim,und_walk8_f4_anim

	.ref	und_run2_anim

	.ref	und_2_punch_anim,und_4_punch_anim
	.ref	und_2_kick_anim,und_4_kick_anim

	.ref	und_2_butt_anim,und_4_butt_anim
	.ref	und_2_butts_anim,und_4_butts_anim
	.ref	und_2_knee_anim,und_4_knee_anim
	.ref	und_4_bigboot_anim

	.ref	und_head_hit2_anim,und_head_hit_dizzy_anim
	.ref	und_2_stomp_anim,und_4_stomp_anim

	.ref	und_4_push_anim
	.ref	und_4_losebal_anim
	.ref	und_2_slap_anim,und_4_slap_anim

	.ref	und_2_grabfling_anim,und_4_grabfling_anim

	.ref	und_2_uppercut_anim,und_4_uppercut_anim
	.ref	und_2_hair_pickup_anim,und_4_hair_pickup_anim

	.ref	und_4_pin2_anim,und_2_raise_arm_anim
	.ref	und_4_raise_arm_anim
	.ref	und_fall_back_anim

	.ref	und_getup_anim
	.ref	und_heldoh_anim

	.ref	und_2_super_kick_anim,und_4_super_kick_anim
	.ref	und_4_knee_fall_anim
	.ref	und_flying_kick_anim

	.ref	und_2_lbowdrop_anim,und_4_lbowdrop_anim
	.ref	und_flying_butt_drop_anim,und_tbukl_butt_drop_anim

	.ref	und_sliding_choke_anim
	.ref	und_tombstone_smash_anim
	.ref	und_chokeslam_anim
	.ref	und_pile_anim
	.ref	und_neckbreaker_anim
	.ref	und_2_snapmirror_anim,und_4_snapmirror_anim
	.ref	und_2_snapmirror2_anim,und_4_snapmirror2_anim
	.ref	und_climb_down_anim,und_climb_up_anim
	.ref	und_spirit_push_anim,und_spirit_pull_anim
	.ref	und_combo_kick_anim,und_combo_punch_anim
	.ref	und_3_head_hold2_anim
	.ref	und_3_head_hold_anim
	.ref	und_neckbreaker2_anim,und_neckbreaker3_anim
	.ref	und_4_knee_butts_anim
	.ref	und_3_head_held_stand_anim
	.ref	und_2_uppercut_anim,und_4_uppercut_anim
	.ref	und_choke_face_slam_anim




und_secret_moves


	.long	dfxobutton_hold
	.long	dfxograb_fling
	.long	dfxohip_toss
	.long	dfxograb_fling2
	.long	dfxohip_toss2
	.long	dfxoneck_grab
	.long	dfxotomb_smash
	.long	0


 SUBR	und_smove_table

	.long	und_hdhold_neckbrk
	.long	und_hdhold_faceslam
	.long	und_hdhold_pile		;(tombstone)
	.long	und_spirit_pull
	.long	und_spirit_push
	.long	und_grab_toss_air
	.long	und_hdhold_combo1
	.long	und_hdhold_combo2
	.long	und_choke_slide
	.long	std_walk_fast
	.long	std_taunt

	.if NUM_TAKER_FINISHES
	.long	und_finish_move1
	.endif
	.if NUM_TAKER_FINISHES > 1
	.long	und_finish_move2
	.endif
	.long	0


dfxotomb_smash
	.word	B_SKICK,		J_ALL
	.word	J_TOWARD,		J_REAL_LR
	.word	J_TOWARD,		J_REAL_LR
	.word	8000h | 32 		;max
	.long	dfxoscrt_tomb

dfxoscrt_tomb
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	dfxoout


	move	*a13(PLYRMODE),a0
	cmpi	MODE_ONTURNBKL,a0
	jrz	dfxoout

	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL

	CALLA	FIND_AND_KILL_ENDLESS
	movi	und_tombstone_smash_anim,a0
	calla	change_anim1a

	WRSND	W_TAKER,GRABHOLD_T1,GRABHOLD_T2

	rets


dfxohip_toss

	.word	B_PUNCH,		J_ALL
	.word	J_AWAY,		J_REAL_LR
	.word	J_AWAY,		J_REAL_LR
	.word	8000h | 32		;max
	.long	dfxoscrt_hiptoss

dfxoscrt_hiptoss
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	dfxoout

	calla	get_opp_plyrmode
	cmpi	MODE_ONGROUND,a0
	jrz	dfxoout
	cmpi	MODE_DEAD,a0
	jrz	dfxoout
	cmpi	MODE_HEADHELD,a0
	jrz	dfxock1
	cmpi	MODE_INAIR,a0
	jrz	dfxodoit
	cmpi	MODE_INAIR2,a0
	jrz	dfxodoit

	move	*a13(CLOSEST_DIST),a0
	cmpi	70h,a0
	jrgt	dfxoout

dfxodoit
 	FACE24	und,snapmirror_anim
	calla	change_anim1a

	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL

	WRSND	W_TAKER,GRABFLING_T1,PUNCH_T2

	rets
dfxock1
	move	*a13(CLOSEST_NUM),a0
	X32	a0
	addi	process_ptrs,a0
	move	*a0,a0,L
	move	*a0(ANIMODE),a0
	btst	MODE_NOGRAVITY_BIT,a0
	jrnz	dfxodoit
	rets


dfxoneck_grab
	.word	B_SPUNCH,		J_ALL
	.word	J_TOWARD,		J_REAL_LR
	.word	J_TOWARD,		J_REAL_LR
	.word	8000h | 30		;max
	.long	dfxoscrt_neck

dfxoscrt_neck
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	dfxoout

	calla	get_opp_plyrmode
	cmpi	MODE_ONGROUND,a0
	jrz	dfxoout
	cmpi	MODE_DEAD,a0
	jrz	dfxoout
	cmpi	MODE_HEADHELD,a0
	jrz	dfxoout

	move	*a13(LAST_HEADHOLD),a14,L
	move	@PCNT,a0,L
	sub	a14,a0
	cmpi	2*60,a0
	jrge	dfxook2

	.ref	und_3_fake_hold_anim
	movi	und_3_fake_hold_anim,a0
	calla	change_anim1a
	rets

dfxook2
	move	*a13(CLOSEST_XDIST),a1
	cmpi	85,a1
	jrgt	dfxostd_grab

	movi	und_3_head_hold2_anim,a0
	calla	change_anim1a
	rets

dfxostd_grab
	movi	und_3_head_hold_anim,a0
	calla	change_anim1a
	rets


dfxobutton_hold

	move	*a13(BUT_VAL_UP),a0
	btst	PLAYER_PUNCH_BIT,a0
	jrz	dfxono_punch

	move	*a13(PLYRNUM),a0
	calla	get_punch_dtime
	cmpi	110,a0			;> min?
	jrlt	dfxono_punch

	callr	scrt_spirit
	setc
	rets

dfxono_punch
	clrc
	rets

scrt_spirit
	move	*a13(PLYRMODE),a0
	cmpi	MODE_HEADHELD,a0
	jrz	dfxoout
	cmpi	MODE_HEADHOLD,a0
	jrz	dfxoout

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	dfxoout

	calla	get_opp_plyrmode
	cmpi	MODE_ONGROUND,a0
	jrz	dfxoout

	move	*a13(PLYRMODE),a0
	cmpi	MODE_RUNNING,a0
	jrz	dfxoleapbrk

	movi	und_neckbreaker2_anim,a0
	calla	change_anim1a

	WRSND	W_TAKER,GRABHOLD_T1,GRABHOLD_T2

	rets

dfxoleapbrk
	movi	und_neckbreaker3_anim,a0
	calla	change_anim1a

	WRSND	W_TAKER,GRABHOLD_T1,GRABHOLD_T2

	rets



dfxograb_fling2
	.word	B_SPUNCH | J_AWAY,	J_REAL_LR | J_UP | J_DOWN
	.word	8000h | 10		;max
	.long	dfxoscrt_grabfling2

dfxohip_toss2
	.word	B_PUNCH | J_AWAY,	J_REAL_LR | J_UP | J_DOWN
	.word	8000h | 10		;max
	.long	dfxoscrt_grabfling2

dfxoscrt_grabfling2
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	dfxoout

	calla	get_opp_plyrmode
	cmpi	MODE_BOUNCING,a0
	jrz	dfxoyes
	cmpi	MODE_RUNNING,a0
	jrz	dfxoyes
	rets


dfxograb_fling

	.word	B_SPUNCH,		J_ALL
	.word	J_AWAY,		J_REAL_LR
	.word	J_AWAY,		J_REAL_LR
	.word	8000h | 32		;max
	.long	dfxoscrt_grabfling

dfxoscrt_grabfling
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	dfxoout

	calla	get_opp_plyrmode
	cmpi	MODE_BOUNCING,a0
	jrz	dfxoyes
	cmpi	MODE_RUNNING,a0
	jrnz	dfxonope
dfxoyes
	FACE24	und,snapmirror_anim
	calla	change_anim1a

	clr	a0
	move	a0,*a13(ATTACH_PROC),L
	SETMODE	NORMAL

	WRSND	W_TAKER,GRABFLING_T1,PUNCH_T2
	rets

dfxonope
	calla	get_opp_plyrmode
	cmpi	MODE_HEADHELD,a0
	jrz	dfxock2
	cmpi	MODE_ONGROUND,a0
	jrz	dfxoout
	cmpi	MODE_DEAD,a0
	jrz	dfxoout
dfxodoit0
	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL


	FACE24	und,grabfling_anim
	calla	change_anim1a

	WRSND	W_TAKER,GRABFLING_T1,PUNCH_T2
dfxoout
	rets
dfxock2
	move	*a13(CLOSEST_NUM),a0
	X32	a0
	addi	process_ptrs,a0
	move	*a0,a0,L
	move	*a0(ANIMODE),a0
	btst	MODE_NOGRAVITY_BIT,a0
	jrnz	dfxodoit0
	rets
	
	.if NUM_TAKER_FINISHES

 SUBRP	shake_world
	move	@WORLDTLX,a8,L
	move	@WORLDTLY,a9,L
dcpwsw_loop
	movk	4,a0
	calla	RNDRNG0
	movk	2,a11
	sub	a0,a11
	sll	16,a11
	move	a8,a10
	add	a11,a10
	move	a10,@WORLDTLX,L

	movk	4,a0
	calla	RNDRNG0
	movk	2,a11
	sub	a0,a11
	sll	16,a11
	move	a9,a10
	add	a11,a10
	move	a10,@WORLDTLY,L

	calla	BGND_UD1

	SLEEPK	3
	jruc	dcpwsw_loop
	
	DIE

 SUBRP	adjust_view
	move	@WORLDTLX,a14,L

	; If we are positioned within 100 pixels to the left of the right
	; edge of the ring don't bother scrolling any further.
	move	a14,a0
	srl	16,a0
	cmpi	1322-100,a0
	jrge	clewav_exit

	; Get the midpoint between taker and the right edge of ring
	move	*a8(OBJ_XPOS),a14,L
	addi	[1200,0],a14
	srl	1,a14

	; Get the difference between taker and the midpoint
	move	*a8(OBJ_XPOS),a0,L
	sub	a0,a14

	; Divide by 32
	sra	5,a14

	; Do the move
	movi	32,a9
clewmv_loop
	move	@WORLDTLX,a0,L
	add	a14,a0
	move	a0,@WORLDTLX,L
	PUSHP	a14
	SLEEPK	1
	calla	BGND_UD1
	PULLP	a14
	dsjs	a9,clewmv_loop

clewav_exit
	; Now start the world shakin' around
	CREATE	FIREWRK_PID,shake_world

	RETP


 SUBRP	und_finish_move1

zrvtTIMEOUT	.equ	TSEC

	; Set up the globals used to syncronize everythins
	clr		a14
	move		a14,@in_finish_move
	move		a14,@close_the_door
	move		a14,@guy_up
	move		a14,@guy_in

	; Now wait on the correct buttons -n- sticks
zrvtreset
	clr		a11
	SLEEPK		1
	WAITSWITCH_DWN	J_UP,0,zrvtreset
	movi		zrvtTIMEOUT,a11
	WAITSWITCH_DWN	J_DOWN,0,zrvtreset
	WAITSWITCH_DWN	B_PUNCH,J_ALL,zrvtreset


	; Make sure the guy we are doin' this on is dead
	PUSH		a13
	move		a8,a13
	calla		get_opp_plyrmode
	PULL		a13
	cmpi		MODE_DEAD,a0
	jrnz		zrvtreset

	; Check to make sure this is my 2nd pin attempt
	move		@p1pins,a0
	move		*a8(PLYR_SIDE),a14
	jrz		zrvtis_p1
	move		@p2pins,a0
zrvtis_p1
	cmpi		2,a0
	jrlt		zrvtreset

	; Don't allow the move if I've been turned into a drone
	; by the autopin goop
	move		*a8(PLYR_TYPE),a14
	jrnz		zrvtfi1_exit

	; Don't allow the move if I'm outside the ring
	move		*a8(RING_TIME),a14
	jrn		zrvtfi1_exit

	; Don't allow the move if I've already pinned the guy
	move		*a8(STATUS_FLAGS),a14
	btst		B_DID_PIN,a14
	jrnz		zrvtfi1_exit

	; Set up globals used for this animation
	move		*a8(WHOIHIT),a14,L
	move		a14,@dead_wrestler,L

	; Don't allow move if dead guy is to right of center ring + 100 pix
	move		*a14(OBJ_XPOSINT),a14
	cmpi		RING_X_CENTER+100,a14
	jrgt		zrvtfi1_exit

	; Don't allow move if taker is to right of center ring + 100 pix
	move		*a8(OBJ_XPOSINT),a14
	cmpi		RING_X_CENTER+100,a14
	jrgt		zrvtfi1_exit

	; OK - we made it - tell all who care we are going to
	; do a finishing move.  This also shuts down the scroller.
	movk		1,a14
	move		a14,@in_finish_move

	; clear victim's DO_BUCKOFF bit and set his NO_BUCKOFF bit
	move		@dead_wrestler,a0,L
	move		*a0(STATUS_FLAGS),a14,L
	andni		M_DO_BUCKOFF,a14
	ori		M_NO_BUCKOFF,a14
	move		a14,*a0(STATUS_FLAGS),L

	; Move the view to 1/2 way between taker and the coffin
	JSRP		adjust_view

	; Let the dust settle before we start our animation
	SLEEPK		15

	; Start the animation for the finish move
	movi		und_2_raise_dead_anim,a14
	move		a14,*a8(SPECIAL_MOVE_ADDR),L

	; Wait here until finish move is complete
zrvtfdone_wait
	SLEEPK		5
	move		@finish_completed,a14
	jrz		zrvtfdone_wait

	; Tell everbody that cares that the finish move is done
	clr		a14
	move		a14,@in_finish_move

	; Kill off shaker process
	movi		FIREWRK_PID,a0
	calla		KIL1C

zrvtfi1_exit
	DIE
	.endif
	

	.if NUM_TAKER_FINISHES > 1
 SUBRP	und_finish_move2

bglzTIMEOUT	.equ	TSEC

bglzend_wait
	SLEEP		TSEC/4
	move		@p1rounds,a0			; Get player 1 rounds
	move		@p2rounds,a1			; Get player 2 rounds
	or		a1,a0				; Put em together
	cmpi		2,a0				; Anybody got 2?
	jrlt		bglzend_wait			; br = no

bglzreset
	clr		a11
	move		a11,@in_finish_move
	SLEEPK		1
	WAITSWITCH_DWN	J_UP,0,bglzreset
	movi		bglzTIMEOUT,a11
	move		a11,@in_finish_move
	WAITSWITCH_DWN	J_UP,0,bglzreset
	WAITSWITCH_DWN	J_RIGHT,J_UP,bglzreset
	WAITSWITCH_DWN	J_RIGHT,J_UP,bglzreset
	WAITSWITCH_DWN	B_SPUNCH,J_ALL,bglzreset

	movi		und_finish2_move,a0
	move		a0,*a8(SPECIAL_MOVE_ADDR),L
	DIE
	.endif

und_hdhold_neckbrk

pziiTIMEOUT	.equ	60

pziilp0
	SLEEPK	1
pziilp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	pziicont
	cmpi	MODE_HEADHELD,a0
	jrnz	pziilp0
pziicont
	clr	a11

	WAITSWITCH_DWN	J_TOWARD,0,pziilp

	movi	pziiTIMEOUT,a11

	WAITSWITCH_DWN	J_TOWARD,0,pziilp
	WAITSWITCH_DWN	B_SPUNCH,J_ALL,pziilp


	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	pziislam
	cmpi	MODE_HEADHELD,a0
	jrnz	pziilp0
	move	*a8(I_WILL_DIE),A14
	jrnz	pziilp0

	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	pziilp0				;ignore

	CALLA	DO_REVERSAL
	CALLA	DO_REVERSAL_MESS

	;target WHOHITME -- don't hit anyone else
	SMRTTGT	a8,WHOHITME

	;immobilize WHOHITME
	move	*a8(WHOHITME),a0,L
	jruc	pziiis_reversal

pziislam
	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	pziilp0				;ignore

	movk	1,a10
	CREATE	MESSAGE_PID,BONUS_MESS

	;target WHOIHIT -- don't hit anyone else
	SMRTTGT	a8,WHOIHIT

	;immobilize WHOIHIT
	move	*a8(WHOIHIT),a0,L

pziiis_reversal
	movk	15,a14
	move	a14,*a0(IMMOBILIZE_TIME)

	CALLA	FIND_AND_KILL_ENDLESS

	movi	und_neckbreaker_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	WRSND	W_BAMBAM,GRABHOLD_T1,GRABHOLD_T2

	SLEEPK	20

	jruc	pziilp

und_hdhold_faceslam

wpxkTIMEOUT	.equ	60

wpxklp0
	SLEEPK	1
wpxklp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	wpxkcont
	cmpi	MODE_CHOKEHOLD,a0
	jrz	wpxkcont
	cmpi	MODE_HEADHELD,a0
	jrnz	wpxklp0
wpxkcont
	clr	a11

	WAITSWITCH_DWN	J_DOWN,0,wpxklp

	movi	wpxkTIMEOUT,a11

	WAITSWITCH_DWN	J_DOWN,0,wpxklp
	WAITSWITCH_DWN	B_KICK,J_ALL,wpxklp

	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	wpxkslam
	cmpi	MODE_CHOKEHOLD,a0
	jrz	wpxkslam
	cmpi	MODE_HEADHELD,a0
	jrnz	wpxklp0
	move	*a8(I_WILL_DIE),A14
	jrnz	wpxklp0

	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	wpxklp0				;ignore

	CALLA	DO_REVERSAL
	CALLA	DO_REVERSAL_MESS

	;target WHOHITME -- don't hit anyone else
	SMRTTGT	a8,WHOHITME

	;immobilize WHOHITME
	move	*a8(WHOHITME),a0,L
	jruc	wpxkis_reversal

wpxkslam
	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	wpxklp0				;ignore

	movk	1,a10
	CREATE	MESSAGE_PID,BONUS_MESS

	;target WHOIHIT -- don't hit anyone else
	SMRTTGT	a8,WHOIHIT

	;immobilize WHOIHIT
	move	*a8(WHOIHIT),a0,L

wpxkis_reversal
	movk	15,a14
	move	a14,*a0(IMMOBILIZE_TIME)

	CALLA	FIND_AND_KILL_ENDLESS

	movi	und_choke_face_slam_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	WRSND	W_BAMBAM,GRABHOLD_T1,GRABHOLD_T2

	SLEEPK	20

	jruc	wpxklp

und_hdhold_pile

fogtTIMEOUT	.equ	60

fogtlp0
	SLEEPK	1
fogtlp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	fogtcont
	cmpi	MODE_HEADHELD,a0
	jrnz	fogtlp0
fogtcont
	clr	a11

	WAITSWITCH_DWN	J_DOWN,0,fogtlp

	movi	fogtTIMEOUT,a11

	WAITSWITCH_DWN	J_DOWN,0,fogtlp
	WAITSWITCH_DWN	B_SKICK,J_ALL,fogtlp


	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	fogtslam
	cmpi	MODE_HEADHELD,a0
	jrnz	fogtlp0
	move	*a8(I_WILL_DIE),A14
	jrnz	fogtlp0

	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	fogtlp0				;ignore

	CALLA	DO_REVERSAL
	CALLA	DO_REVERSAL_MESS

	;target WHOHITME -- don't hit anyone else
	SMRTTGT	a8,WHOHITME

	;target WHOHITME
	move	*a8(WHOHITME),a0,L
	jruc	fogtis_reversal

fogtslam
	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	fogtlp0				;ignore

	movk	29,a10
	CREATE	MESSAGE_PID,BONUS_MESS

	;target WHOIHIT -- don't hit anyone else
	SMRTTGT	a8,WHOIHIT

	;target WHOIHIT
	move	*a8(WHOIHIT),a0,L

fogtis_reversal
	movk	15,a14
	move	a14,*a0(IMMOBILIZE_TIME)

	CALLA	FIND_AND_KILL_ENDLESS
	movi	und_pile_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	WRSND	W_BAMBAM,GRABHOLD_T1,GRABHOLD_T2

	SLEEPK	20

	jruc	fogtlp

und_choke_slide

ozwpTIMEOUT	.equ	60

ozwplp0
	SLEEPK	1
ozwplp
	clr	a11

	WAITSWITCH_DWN	J_DOWN,0,ozwplp

	movi	ozwpTIMEOUT,a11


	WAITSWITCH_DWN	J_TOWARD,J_UP|J_DOWN,ozwplp
	WAITSWITCH_DWN	B_PUNCH,J_ALL,ozwplp

	move	*a8(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	ozwplp0

	move	*a8(PLYRMODE),a0
	cmpi	MODE_ONTURNBKL,a0
	jrz	ozwplp0
	cmpi	MODE_RUNNING,a0
	jrz	ozwplp0
	move	*a8(I_WILL_DIE),A14
	jrnz	ozwplp0

	SWAP	a8,a13
	calla	get_opp_plyrmode
	SWAP	a8,a13
	cmpi	MODE_ONGROUND,a0
	jrz	ozwplp0
	cmpi	MODE_DEAD,a0
	jrz	ozwplp0
	cmpi	MODE_HEADHELD,a0
	jrz	ozwplp0
	cmpi	MODE_CHOKING,a0
	jrz	ozwplp0

	movi	und_sliding_choke_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	SLEEPK	20

	jruc	ozwplp

und_spirit_push

fxtgTIMEOUT	.equ	60

fxtglp0
	SLEEPK	1
fxtglp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	fxtglp0
	cmpi	MODE_HEADHELD,a0
	jrz	fxtglp0

	clr	a11

	WAITSWITCH_DWN	J_DOWN,0,fxtglp

	movi	fxtgTIMEOUT,a11

	WAITSWITCH_DWN	J_TOWARD,J_UP|J_DOWN,fxtglp
	WAITSWITCH_DWN	B_KICK,J_ALL,fxtglp

	move	*a8(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	fxtglp0

	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	fxtglp0				;ignore
    
	SWAP	a8,a13
	calla	get_opp_plyrmode
	SWAP	a8,a13
	cmpi	MODE_CHOKING,a0
	jrz	fxtglp
	cmpi	MODE_HEADHELD,a0
	jrz	fxtglp

	movi	und_spirit_push_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	clr	a0
	move	a0,*a8(RUN_TIME)

	SETMODE	NORMAL

	SLEEP	3*60

	jruc	fxtglp


und_spirit_pull

mycxTIMEOUT	.equ	60

mycxlp0
	SLEEPK	1
mycxlp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	mycxlp0
	cmpi	MODE_HEADHELD,a0
	jrz	mycxlp0

	clr	a11

	WAITSWITCH_DWN	J_DOWN,0,mycxlp

	movi	mycxTIMEOUT,a11


	WAITSWITCH_DWN	J_AWAY,J_UP|J_DOWN,mycxlp
	WAITSWITCH_DWN	B_KICK,J_ALL,mycxlp

	move	*a8(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	mycxlp0

	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	mycxlp0				;ignore

	SWAP	a8,a13
	calla	get_opp_plyrmode
	SWAP	a8,a13
	cmpi	MODE_CHOKING,a0
	jrz	mycxlp
	cmpi	MODE_HEADHELD,a0
	jrz	mycxlp

	movi	und_spirit_pull_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	clr	a0
	move	a0,*a8(RUN_TIME)

	SETMODE	NORMAL

	SLEEP	3*60

	jruc	mycxlp

und_grab_toss_air

mldzTIMEOUT	.equ	40

mldzlp0
	SLEEPK	1
mldzlp
	clr	a11

	WAITSWITCH_DWN	J_AWAY,0,mldzlp

	movi	mldzTIMEOUT,a11

	WAITSWITCH_DWN	J_AWAY,0,mldzlp
	WAITSWITCH_DWN	B_PUNCH,J_ALL,mldzlp

	move	*a8(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	mldzlp

	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jreq	mldzlp0

	SWAP	a8,a13
	calla	get_opp_plyrmode
	SWAP	a8,a13
	cmpi	MODE_ONGROUND,a0
	jrz	mldzlp
	cmpi	MODE_DEAD,a0
	jrz	mldzlp
	cmpi	MODE_INAIR,a0
	jrz	mldzdoit2
	cmpi	MODE_INAIR2,a0
	jrz	mldzdoit2

	move	*a8(CLOSEST_NUM),a0
	X32	a0
	addi	process_ptrs,a0
	move	*a0,a0,L
	move	*a0(ATTACK_TYPE),a0
	cmpi	AT_LEAPING,a0
	jrz	mldzdoit2

	move	*a8(CLOSEST_DIST),a0
	cmpi	68h,a0
	jrgt	mldzlp

	FACE24	und,snapmirror_anim
	jruc	mldzcont

mldzdoit2	FACE24	und,snapmirror2_anim
mldzcont
	move	a0,*a8(SPECIAL_MOVE_ADDR),L

	WRSND	W_TAKER,HIPTOSS_T1,HIPTOSS_T2

	clr	a0
	move	a0,*a8(ATTACH_PROC),L

	SETMODE	NORMAL

	SLEEPK	20

	jruc	mldzlp

und_hdhold_combo1

vkgwTIMEOUT	.equ	60

vkgwlp0
	SLEEPK	1
vkgwlp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrnz	vkgwlp0
	calla	CHECK_COMBO_GO
	jrlt	vkgwlp0


	clr	a11

	WAITSWITCH_DWN	J_TOWARD,0,vkgwlp

	movi	vkgwTIMEOUT,a11

	WAITSWITCH_DWN	J_TOWARD,0,vkgwlp
	WAITSWITCH_DWN	B_SKICK,J_ALL,vkgwlp

	move	*a8(ANIBASE),a0,L
	cmpi	und_sliding_choke_anim,a0
	jrz	vkgwlp0

	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	vkgwslam
	cmpi	MODE_HEADHELD,a0
	jrnz	vkgwlp0


vkgwslam
	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	vkgwlp0				;ignore


	;target WHOIHIT
	SMRTTGT	a8,WHOIHIT

	CALLA	FIND_AND_KILL_ENDLESS
	movi	und_combo_punch_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	SLEEPK	20

	jruc	vkgwlp

und_hdhold_combo2

evlgTIMEOUT	.equ	60

evlglp0
	SLEEPK	1
evlglp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrnz	evlglp0
	calla	CHECK_COMBO_GO
	jrlt	evlglp0


	clr	a11

	WAITSWITCH_DWN	J_TOWARD,0,evlglp

	movi	evlgTIMEOUT,a11

	WAITSWITCH_DWN	J_TOWARD,0,evlglp
	WAITSWITCH_DWN	B_KICK,J_ALL,evlglp

	move	*a8(ANIBASE),a0,L
	cmpi	und_sliding_choke_anim,a0
	jrz	evlglp0

	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	evlgslam
	cmpi	MODE_HEADHELD,a0
	jrnz	evlglp0


evlgslam
	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	evlglp0				;ignore


	;target WHOIHIT
	SMRTTGT	a8,WHOIHIT

	CALLA	FIND_AND_KILL_ENDLESS
	movi	und_combo_kick_anim,A14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	SLEEPK	20

	jruc	evlglp



 SUBR	taker_ani_init

	clr	a0
	move	a0,*a13(ATTIMG_CUR_FRAME),L

	move	*a13(FACING_DIR),a0
	btst	PLAYER_RIGHT_BIT,a0
	jrnz	skvwp1
	movi	und_stand4_anim,a0
	calla	change_anim1a

	movi	und_torso4_anim,a0
	calla	change_anim2a

	PUSH	a10
	move	a13,a10
	CREATE	TAUNT_PID,do_taunt
	PULL	a10

	rets

skvwp1
	movi	und_stand2_anim,a0
	calla	change_anim1a

	movi	und_torso2_anim,a0
	calla	change_anim2a

	rets



 SUBR	move_taker



	movi	und_secret_moves,a11
	calla	check_secret_moves

	move	*a13(PLYRMODE),a0
	sll	5,a0			;x 32
	addi	qchgmode_table,a0
	move	*a0,a0,L
	call	a0
	rets

qchgmode_table
	.long	mode_normal		;0
	.long	mode_running		;1
	.long	mode_inair		;2
	.long	mode_attached		;3
	.long	mode_onground		;4
	.long	mode_bouncing		;5
	.long	mode_onturnbkl		;6
	.long	mode_block		;7
	.long	mode_dizzy		;8
	.long	mode_dead		;9
	.long	mode_oppoverhead	;10
	.long	mode_climbturnbkl	;11
	.long	mode_waitanim		;12
	.long	mode_grapple		;13
	.long	mode_master		;14
	.long	mode_slave		;15
	.long	mode_headhold		;16
	.long	mode_puppet2		;17
	.long	mode_normal	;18
	.long	mode_headheld		;19
	.long	mode_puppet		;20
	.long	mode_inair2		;21
	.long	mode_normal	;22
	.long	mode_normal	;23
	.long	mode_chokehold		;24
	.long	mode_choking		;25



mode_normal

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	zfkxno_interrupt

	move	*a13(I_WILL_DIE),a0
	jrz	zfkxnope
	move	*a13(IMMOBILIZE_TIME),a0
	jrnz	zfkxnope
	movi	und_fall_back_anim,a0
	calla	change_anim1a

	movi	-10,a0
	move	*a13(PLYRNUM),a1
	calla	adjust_health

	SETMODE	DEAD

	clr	a0
	move	a0,*a13(I_WILL_DIE)

	rets

zfkxnope

	calla	get_opp_plyrmode
	cmpi	MODE_DEAD,a0
	jrne	zfkxopp_not_dead

	;if closest is a zombie, skip pin section.
	calla	get_opp_process
	move	*a0(STATUS_FLAGS),a14
	btst	B_ZOMBIE,a14
	jrnz	zfkxopp_not_dead
	
	;all opponents are dead.  Check for pins/raisearms

	;if we're attached to someone, don't interrupt it.
	move	*a13(ATTACH_PROC),a1,L
	jrz	zfkxno_attch
	move	*a1(ATTACH_PROC),a2,L
	cmp	a2,a13
	jreq	zfkxno_pin_yet
zfkxno_attch

	;if a teammate has pinned, raise yer arm.
	calla	ck_teammate_pin	
	jrc	zfkxraisearm

	;nobody has pinned.  if we're outside or all our opponents are
	; outside, do a raisearm.
	calla	raisearm_check
	jrc	zfkxraisearm

	;we're inside with a pinnable opponent.  any button pins.
	move	*a13(BUT_VAL_CUR),a0
	jrz	zfkxno_pin_yet

	;we have a press -- make sure opponent is on the ground
	calla	can_pin
	jrnc	zfkxopp_notgnd

	;opponent is on the ground and close enough for anyone else
	; to pin.  Taker is funny, tho, and if you're not real close
	; and BEHIND the guy in Z, he just does a raise arm instead.

	;But he STILL sets the 'I did a pin flag' anyway.
	move	*a13(STATUS_FLAGS),a14
	ori	M_DID_PIN,a14
	move	a14,*a13(STATUS_FLAGS)

	;And we also set all the PINNED/WHOIPINNED/WHOPINNED me stuff
	calla	hit_nearest

	move	*a13(NEW_FACING_DIR),a0
	btst	MOVE_DOWN_BIT,a0
	jrz	zfkxraisearm

	move	*a13(CLOSEST_ZDIST),a0
	cmpi	40h,a0
	jrge	zfkxraisearm
	
	move	*a13(CLOSEST_XDIST),a0
	cmpi	35,a0
	jrge	zfkxraisearm

	movi	und_4_pin2_anim,a0
	calla	change_anim1a

	;if we're a temp drone for auto-pin purposes, turn back into
	; a normal player here.
	calla	drone_change_back

	rets

zfkxraisearm
	FACE24	und,raise_arm_anim
	calla	change_anim1a
	calla	set_raisearm_bit

	;if we're a temp drone for auto-pin purposes, turn back into
	; a normal player here.
	calla	drone_change_back

	rets

zfkxtoo_far_to_pin
zfkxopp_notgnd
zfkxopp_not_dead
zfkxno_pin_yet

	move	*a13(IMMOBILIZE_TIME),a0
	jrnz	zfkximmobilized

	move	*a13(BUT_VAL_CUR),a0
	btst	PLAYER_BLOCK_BIT,a0	;maybe have to action tables?
	jrz	zfkxnblk			;1 for down transitions
	callr	zfkxblock			;& 1 for current buttons
	jrc	zfkxnblk
	clr	a0
	move	a0,*a13(ATTACK_TYPE)
	rets
zfkxnblk
	move	*a13(BUT_VAL_CUR),a0
	andi	011111b,a0
	cmpi	PLAYER_PUNCH_VAL|PLAYER_KICK_VAL,a0
	jrz	zfkxpunchkick

	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	X32	a0
	addi	zfkxaction_table,a0
	move	*a0,a0,L
	call	a0

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	zfkxno_interrupt


	move	*a13(STICK_VAL_CUR),a0
	move	a0,*a13(MOVE_DIR)
	calla	climb_turnbuckle
	jrnc	zfkxno_climb
	move	*a13(WRESTLERNUM),A5
	MOVI	CLIMB_ROPES,A2
	MOVI	1000,A0
	CALLA	ADD_IF_SILENT
	rets

zfkximmobilized
	clr	a14
	move	a14,*a13(MOVE_DIR)
zfkxno_climb
	calla	execute_walk

zfkxno_interrupt
	rets

zfkxaction_table
	.long	zfkxz,zfkxpunch,zfkxblock,zfkxblock			;0-3
	.long	zfkxsuper_punch,zfkxsuper_punch,zfkxblock,zfkxblock	;4-7
	.long	zfkxkick,zfkxpunchkick,zfkxblock,zfkxblock		;8-11
	.long	zfkxsuper_punch,zfkxpunchkick,zfkxblock,zfkxblock	;12-15
	.long	zfkxsuper_kick,zfkxsuper_kick,zfkxblock,zfkxblock	;16-19
	.long	zfkxgraboh,zfkxgraboh,zfkxblock,zfkxblock		;20-23
	.long	zfkxsuper_kick,zfkxpunchkick,zfkxblock,zfkxblock	;24-27
	.long	zfkxgraboh,zfkxgraboh,zfkxblock,zfkxblock		;28-31


zfkxz


	rets

zfkxpunch		;1
	JJXM_INIT
	JJXM	NORMAL,		 75, 45,zfkxpunch_hdbutt,zfkxpunch_punch
	JJXM	RUNNING,	 75, 45,zfkxpunch_hdbutt,zfkxpunch_punch
	JJXM	BLOCK,		 75, 45,zfkxpunch_hdbutt,zfkxpunch_punch
	JJXM	DIZZY,		 75, 45,zfkxpunch_hdbutt,zfkxpunch_punch
	JJXM	ONGROUND,	160,140,zfkxpunch_lbowdrop,zfkxpunch_punch
	JJXM	BOUNCING,	 75, 45,zfkxpunch_hdbutt,zfkxpunch_punch
	JJXM	ONTURNBKL,	 75, 45,zfkxpunch_hdbutt,zfkxpunch_punch
	JJXM	CLIMBTURNBKL,		zfkxpunch_punch
	JJXM	INAIR,		 75, 45,zfkxpunch_hdbutt,zfkxpunch_punch
	JJXM	ATTACHED,	 75, 45,zfkxpunch_hdbutt,zfkxpunch_punch
	JJXM	DEAD,		160,140,zfkxpunch_lbowdrop,zfkxpunch_punch
	JJXM	OPPOVERHEAD,	 75, 45,zfkxpunch_hdbutt,zfkxpunch_punch
	JJXM	WAITANIM,	 75, 45,zfkxpunch_hdbutt,zfkxpunch_punch
	JJXM	GRAPPLE,	 75, 45,zfkxpunch_hdbutt,zfkxpunch_punch
	JJXM	MASTER,		 75, 45,zfkxpunch_hdbutt,zfkxpunch_punch
	JJXM	SLAVE,		 75, 45,zfkxpunch_hdbutt,zfkxpunch_punch
	JJXM	HEADHOLD,	 75, 45,zfkxpunch_hdbutt,zfkxpunch_punch
	JJXM	HEADHELD,	 75, 45,zfkxpunch_hdbutt,zfkxpunch_punch
	JJXM	CHOKEHOLD,	 75, 45,zfkxpunch_hdbutt,zfkxpunch_punch
	JJXM	PUPPET,		 75, 45,zfkxpunch_hdbutt,zfkxpunch_punch
	JJXM	PUPPET2,	 75, 45,zfkxpunch_hdbutt,zfkxpunch_punch
	JJXM	INAIR2,		 75, 45,zfkxpunch_hdbutt,zfkxpunch_punch
	JJXM_END

zfkxpunch_rets
	rets

zfkxpunch_punch
std_punch

	FACE24	und,punch_anim
	calla	change_anim1a

	WRSND	W_TAKER,PUNCH_T1,PUNCH_T2

	rets

zfkxpunch_hdbutt

	FACE24	und,butt_anim
	calla	change_anim1a

	WRSND	W_TAKER,HDBUTT_T1,HDBUTT_T2

	rets

zfkxpunch_lbowdrop

	FACE24	und,lbowdrop_anim
	calla	change_anim1a

	WRSND	W_TAKER,LBOWDROP_T1,LBOWDROP_T2

	rets

zfkxpunch_hiptoss

	rets


zfkxblock		;2

std_block
	move	@blocking_off,a0
	jrnz	zfkxno_blocking

	RND_AWARD	a13,BLOCKS_AWD

	movi	und_4_block_anim,a0
	calla	change_anim1

	calla	BLOCK_WOOSH

	clr	a0
	move	a0,*a13(BLOCK_TIME)
	clrc
	rets

zfkxno_blocking
	setc
	rets
       	

zfkxsuper_punch	;4
	JJXM_INIT
	JJXM	NORMAL,		 95, 35,zfkxspunch_special,zfkxspunch_slap	;0
	JJXM	RUNNING,	 95, 35,zfkxspunch_special,zfkxspunch_slap	;1
	JJXM	INAIR,		 95, 35,zfkxspunch_special,zfkxspunch_slap	;2
	JJXM	ATTACHED,	 95, 35,zfkxspunch_special,zfkxspunch_slap	;3
	JJXM	ONGROUND,	160,140,zfkxspunch_lbowdrop,std_punch	;4
	JJXM	BOUNCING,	 95, 35,zfkxspunch_special,zfkxspunch_slap	;1
	JJXM	ONTURNBKL,	 	zfkxspunch_slap			;6
	JJXM	BLOCK,		 95, 35,zfkxspunch_special,zfkxspunch_slap	;7
	JJXM	DIZZY,		 95, 35,zfkxspunch_special,zfkxspunch_slap	;8
	JJXM	DEAD,		160,140,zfkxspunch_lbowdrop,std_punch	;9
	JJXM	OPPOVERHEAD,	 95, 35,zfkxspunch_special,zfkxspunch_slap	;10
	JJXM	CLIMBTURNBKL,		std_punch			;11
	JJXM	WAITANIM,	 95, 35,zfkxspunch_special,zfkxspunch_slap	;12
	JJXM	GRAPPLE,	 95, 35,zfkxspunch_special,zfkxspunch_slap	;13
	JJXM	MASTER,		 95, 35,zfkxspunch_special,zfkxspunch_slap	;14
	JJXM	SLAVE, 		 95, 35,zfkxspunch_special,zfkxspunch_slap	;15
	JJXM	HEADHOLD,	 95, 35,zfkxspunch_special,zfkxspunch_slap	;16

	JJXM	HEADHELD,	 	do_pile
	JJXM	CHOKEHOLD,	 95, 35,zfkxspunch_special,zfkxspunch_slap	;16
	JJXM	PUPPET,		 95, 35,zfkxspunch_special,zfkxspunch_slap	;20
	JJXM	PUPPET2,	 95, 35,zfkxspunch_special,zfkxspunch_slap	;20
	JJXM	INAIR2,		 95, 35,zfkxspunch_special,zfkxspunch_slap	;21
	JJXM_END

zfkxspunch_rets
	rets

zfkxgraboh		;8
zfkxspunch_slap
	FACE24	und,slap_anim
	calla	change_anim1a

	WRSND	W_TAKER,GRABHOLD_T1,GRABHOLD_T2

	rets

zfkxspunch_special
	move	*a13(STICK_VAL_CUR),a0
	btst	MOVE_DOWN_BIT,a0
	jrnz	zfkxck_up

	move	*a13(CLOSEST_XDIST),a1
	cmpi	70,a1
	jrgt	zfkxspunch_slap


	FACE24	und,butts_anim
	calla	change_anim1

	WRSND	W_TAKER,HDBUTT_T1,HDBUTT_T2

	rets
zfkxck_up
	FACE24	und,uppercut_anim
	calla	change_anim1

	WRSND	W_TAKER,HDBUTT_T1,HDBUTT_T2
	rets


zfkxspunch_lbowdrop


	move	*a13(CLOSEST_NUM),a14
	X32	a14

	addi	process_ptrs,a14
	move	*a14,a14,L
	move	*a14(PLYRMODE),a2
	cmpi	MODE_DEAD,a2
	jrz	zfkxno
	move	*a13(OBJ_XPOS),a1,L 
	move	*a14(OBJ_XPOS),a2,L
	sub	a2,a1
	abs	a1
	srl	16,a1
	cmpi	20h,a1	;28
 	jrlt	zfkxno


	move	*a14(OBJ_CONTROL),a14
	andi	M_FLIPH,a14
	move	*a13(OBJ_CONTROL),a0
	andi	M_FLIPH,a0
	cmp	a0,a14
	jrz	zfkxno


	FACE24	und,hair_pickup_anim
	calla	change_anim1
	WRSND	W_TAKER,LBOWDROP_T1,LBOWDROP_T2
	rets

zfkxno	FACE24	und,lbowdrop_anim
	calla	change_anim1
	WRSND	W_TAKER,LBOWDROP_T1,LBOWDROP_T2
	rets


zfkxkick		;8
	JJXM_INIT
	JJXM	NORMAL,		 65, 92,zfkxkick_knee,zfkxkick_kick
	JJXM	RUNNING,	 65, 92,zfkxkick_knee,zfkxkick_kick
	JJXM	INAIR,		 65, 92,zfkxkick_knee,zfkxkick_kick
	JJXM	ATTACHED,	 65, 92,zfkxkick_knee,zfkxkick_kick
	JJXM	ONGROUND,	160,140,zfkxkick_stomp,zfkxkick_kick
	JJXM	BOUNCING,	 65, 92,zfkxkick_knee,zfkxkick_kick
	JJXM	ONTURNBKL,	 	zfkxkick_kick
	JJXM	BLOCK,		 65, 92,zfkxkick_knee,zfkxkick_kick
	JJXM	DIZZY,		 65, 92,zfkxkick_knee,zfkxkick_kick
	JJXM	DEAD,		160,140,zfkxkick_stomp,zfkxkick_kick
	JJXM	OPPOVERHEAD,	 65, 92,zfkxkick_knee,zfkxkick_kick
	JJXM	CLIMBTURNBKL,	 	zfkxkick_kick
	JJXM	WAITANIM,   	 65, 92,zfkxkick_knee,zfkxkick_kick
	JJXM	GRAPPLE,    	 65, 92,zfkxkick_knee,zfkxkick_kick
	JJXM	MASTER,		 65, 92,zfkxkick_knee,zfkxkick_kick
	JJXM	SLAVE,	    	 65, 92,zfkxkick_knee,zfkxkick_kick
	JJXM	HEADHOLD,	 65, 92,zfkxkick_knee,zfkxkick_kick
	JJXM	HEADHELD,	 65, 92,zfkxkick_knee,zfkxkick_kick
	JJXM	CHOKEHOLD,	 65, 92,zfkxkick_knee,zfkxkick_kick
	JJXM	PUPPET,		 65, 92,zfkxkick_knee,zfkxkick_kick
	JJXM	PUPPET2,	 65, 92,zfkxkick_knee,zfkxkick_kick
	JJXM	INAIR2,		 	zfkxkick_TB
	JJXM_END

zfkxkick_TB

	.ref	und_kick_TB_anim
	movi	und_kick_TB_anim,a0
	calla	change_anim1a

	WRSND	W_TAKER,KICK_T1,KICK_T2

	rets

zfkxkick_kick
std_kick

	FACE24	und,kick_anim
	calla	change_anim1a

	WRSND	W_TAKER,KICK_T1,KICK_T2

	rets

zfkxkick_flyingkick

	movi	und_flying_kick_anim,a0
	calla	change_anim1a

	SETMODE	INAIR

	WRSND	W_TAKER,FLYKICK_T1,FLYKICK_T2

	rets

zfkxkick_knee
std_knee

	FACE24	und,knee_anim
	calla	change_anim1a

	WRSND	W_TAKER,KICK_T1,KICK_T2

	rets

zfkxkick_stomp
attack_stomp

	FACE24	und,stomp_anim
	calla	change_anim1a

	WRSND	W_TAKER,KICK_T1,KICK_T2

	rets


zfkxpunchkick	;9

	movi	start_run_anim,a0
	calla	change_anim1a

	rets

zfkxsuper_kick	;16
	JJXM_INIT
	JJXM	NORMAL,		 60, 60,zfkxskick_special,zfkxskick_kick	;0
	JJXM	RUNNING,	 	zfkxskick_bigboot			;1
	JJXM	INAIR,		 60, 60,zfkxskick_special,zfkxskick_kick	;2
	JJXM	ATTACHED,	 60, 60,zfkxskick_special,zfkxskick_kick	;3
	JJXM	ONGROUND,	160,140,zfkxskick_stomp,std_kick		;4
	JJXM	BOUNCING,	 	zfkxskick_bigboot			;5
	JJXM	ONTURNBKL,	 60, 96,zfkxskick_kick,std_kick		;6
	JJXM	BLOCK,		 60, 60,zfkxskick_special,zfkxskick_kick	;7
	JJXM	DIZZY,		 60, 60,zfkxskick_special,zfkxskick_kick	;8
	JJXM	DEAD,		160,140,zfkxskick_stomp,std_kick		;9
	JJXM	OPPOVERHEAD,	 60, 60,zfkxskick_special,zfkxskick_kick	;10
	JJXM	CLIMBTURNBKL,	 60, 96,zfkxskick_kick,std_kick		;11
	JJXM	WAITANIM,	 60, 62,zfkxskick_special,zfkxskick_kick	;12
	JJXM	GRAPPLE,	 60, 62,zfkxskick_special,zfkxskick_kick	;13
	JJXM	MASTER,		 60, 62,zfkxskick_special,zfkxskick_kick	;14
	JJXM	SLAVE, 		 60, 62,zfkxskick_special,zfkxskick_kick	;15
	JJXM	HEADHOLD,	 60, 62,zfkxskick_special,zfkxskick_kick	;16
	JJXM	HEADHELD,	 	std_kick
	JJXM	CHOKEHOLD,	 60, 62,zfkxskick_special,zfkxskick_kick	;16
	JJXM	PUPPET,		 60, 62,zfkxskick_special,zfkxskick_kick	;20
	JJXM	PUPPET2,	 60, 62,zfkxskick_special,zfkxskick_kick	;20
	JJXM	INAIR2,		 	zfkxkick_TB
	JJXM_END

zfkxskick_kick
	FACE24	und,super_kick_anim
	calla	change_anim1a

	WRSND	W_TAKER,FLYKICK_T1,FLYKICK_T2
	rets


zfkxskick_special
	move	*a13(STICK_VAL_CUR),a0
	move	*a13(NEW_FACING_DIR),a1
	andi	0ch,a1
	cmp	a0,a1
	jrz	zfkxcont2

	FACE24	und,knee_anim
	calla	change_anim1a

	WRSND	W_TAKER,KICK_T1,KICK_T2

	rets

zfkxcont2
	movi	und_4_knee_fall_anim,a0
	calla	change_anim1

	WRSND	W_TAKER,GRABHOLD_T1,GRABHOLD_T2
	rets

zfkxskick_stomp

	FACE24	und,stomp_anim
	calla	change_anim1a

	WRSND	W_TAKER,KICK_T1,KICK_T2

	rets

zfkxskick_bigboot	;we can probably get away with just a zfkx4 big boot

	movi	und_4_bigboot_anim,a0		;*****
	calla	change_anim1a

	WRSND	W_TAKER,FLYKICK_T1,FLYKICK_T2

	rets



timlXRUN_VAL	equ	UND_XRUN
timlZDRIFT_VAL	equ	UND_ZDRIFT

mode_running

	move	*a13(RUN_TIME),a0		;Used for flying kick
	addk	1,a0
	move	a0,*a13(RUN_TIME)

	move	*a13(USR_VAR1),a0
	jrnz	timlno_vel

	calla	bounce_off_ropes

	movi	timlXRUN_VAL,a0
	move	*a13(MOVE_DIR),a14
	btst	PLAYER_RIGHT_BIT,a14
	jrnz	timlpos
	neg	a0
timlpos
	move	@hyper_speed_on,a14
	sll	a14,a0
	move	a0,*a13(OBJ_XVEL),L

timlno_vel

	move	*a13(GETUP_TIME),a0		;delay b4 gaining control
	jrnz	timlout_of_control

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	timlno_interrupt

	move	*a13(STICK_VAL_CUR),a0
	move	*a13(MOVE_DIR),a1
	or	a0,a1
	andi	MOVE_LEFT|MOVE_RIGHT,a1
	cmpi	MOVE_LEFT|MOVE_RIGHT,a1
	jrne	timlcontinue_run

	;braking with stick.  abort run.

	SETMODE	NORMAL

timlcontinue_run
timlno_interrupt

	move	*a13(STICK_VAL_CUR),a0
	clr	a1

	movi	-timlZDRIFT_VAL,a1
	btst	PLAYER_UP_BIT,a0
	jrnz	timlsetvel

	movi	timlZDRIFT_VAL,a1
	btst	PLAYER_DOWN_BIT,a0
	jrnz	timlsetvel

	clr	a1
timlsetvel
	move	a1,*a13(OBJ_ZVEL),L

	move	*a13(DELAY_BUTNS),a0
	jrnz	timlout_of_control


	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	X32	a0
	addi	timlaction_table,a0
	move	*a0,a0,L
	call	a0
timlout_of_control
	rets

timlaction_table
	.long	timlz,timlpunch,timlblock,timlblock			;0-3
	.long	timlsuper_punch,timlsuper_punch,timlblock,timlblock	;4-7
	.long	timlkick,timlpunchkick,timlblock,timlblock		;8-11
	.long	timlsuper_punch,timlpunchkick,timlblock,timlblock	;12-15
	.long	timlsuper_kick,timlsuper_kick,timlblock,timlblock	;16-19
	.long	timlgraboh,timlgraboh,timlblock,timlblock		;20-23
	.long	timlsuper_kick,timlpunchkick,timlblock,timlblock	;24-27
	.long	timlgraboh,timlgraboh,timlblock,timlblock		;28-31


timlz
	rets

timlpunch		;1
timlsuper_punch	;4
timlpunchkick
timlgraboh
	JJXM_INIT
	JJXM	NORMAL,			timlpunch_clothesline
	JJXM	BLOCK,			timlpunch_clothesline
	JJXM	DIZZY,			timlpunch_clothesline
	JJXM	ONGROUND,	176,176,timlpunch_bellyflop,timlpunch_rets
	JJXM	RUNNING,		timlpunch_clothesline
	JJXM	BOUNCING,		timlpunch_clothesline
	JJXM	ONTURNBKL,		timlpunch_clothesline
	JJXM	CLIMBTURNBKL,		timlpunch_clothesline
	JJXM	INAIR,			timlpunch_clothesline
	JJXM	ATTACHED,		timlpunch_clothesline
	JJXM	DEAD,			attack_bellyflop
	JJXM	OPPOVERHEAD,		timlpunch_clothesline
	JJXM	WAITANIM,		timlpunch_clothesline
	JJXM	GRAPPLE,		timlpunch_clothesline
	JJXM	MASTER,			timlpunch_clothesline
	JJXM	SLAVE,			timlpunch_clothesline
	JJXM	HEADHOLD,		timlpunch_clothesline
	JJXM	HEADHELD,		timlpunch_clothesline
	JJXM	CHOKEHOLD,		timlpunch_clothesline
	JJXM	PUPPET,			timlpunch_clothesline
	JJXM	PUPPET2,		timlpunch_clothesline
	JJXM	INAIR2,			timlpunch_clothesline
	JJXM_END

timlpunch_rets
	rets

timlpunch_clothesline

	;don't do it if you're running away from your opponent.
	move	*a13(FACING_DIR),a0
	move	*a13(NEW_FACING_DIR),a1
	and	a0,a1
	andi	MOVE_LEFT|MOVE_RIGHT,a1
	jrz	timlz

	clr	a0
	move	a0,*a13(RUN_TIME)

	SETMODE	NORMAL

	move	*a13(CLOSEST_XDIST),a1
	cmpi	70,a1
	jrlt	timlhdbutt

	.ref	und_2_run_slap_anim
	.ref	und_4_run_slap_anim
	FACE24	und,run_slap_anim
	calla	change_anim1a

	WRSND	W_TAKER,GRABHOLD_T1,GRABHOLD_T2

	rets

timlhdbutt

	FACE24	und,butt_anim
	calla	change_anim1

	WRSND	W_TAKER,HDBUTT_T1,HDBUTT_T2

	rets

timlpunch_bellyflop
attack_bellyflop

	movi	und_flying_butt_drop_anim,a0
	calla	change_anim1a

	WRSND	W_TAKER,FLYKICK_T1,FLYKICK_T2

	rets

timlblock		;2

	move	*a13(OBJ_XVEL),a0,L
	sra	1,a0
	move	a0,*a13(OBJ_XVEL),L
	SETMODE	NORMAL
	jruc	std_block

timlkick		;8
timlsuper_kick	;16
	JJXM_INIT
	JJXM	NORMAL,			timlkick_flyingkick
	JJXM	BLOCK,			timlkick_flyingkick
	JJXM	DIZZY,			timlkick_flyingkick
	JJXM	ONGROUND,		attack_bellyflop
	JJXM	RUNNING,		timlkick_flyingkick
	JJXM	BOUNCING,		timlkick_flyingkick
	JJXM	ONTURNBKL,		timlkick_flyingkick
	JJXM	CLIMBTURNBKL,		timlkick_flyingkick
	JJXM	INAIR,			timlkick_flyingkick
	JJXM	ATTACHED,		timlkick_flyingkick
	JJXM	DEAD,			attack_bellyflop
	JJXM	OPPOVERHEAD,		timlkick_flyingkick
	JJXM	WAITANIM,		timlkick_flyingkick
	JJXM	GRAPPLE,		timlkick_flyingkick
	JJXM	MASTER,			timlkick_flyingkick
	JJXM	SLAVE,			timlkick_flyingkick
	JJXM	HEADHOLD,		timlkick_flyingkick
	JJXM	HEADHELD,		timlkick_flyingkick
	JJXM	CHOKEHOLD,		timlkick_flyingkick
	JJXM	PUPPET,			timlkick_flyingkick
	JJXM	PUPPET2,		timlkick_flyingkick
	JJXM	INAIR2,			timlkick_flyingkick
	JJXM_END

timlkick_rets
	rets

timlkick_flyingkick

	calla	ck_ignore
	jrc	timlz

	movi	und_flying_kick_anim,a0
	calla	change_anim1a

	SETMODE	INAIR

	WRSND	W_TAKER,FLYKICK_T1,FLYKICK_T2

	rets



mode_inair	;2

	rets


mode_attached	;3

	calla	keep_attached
	jrnz	iktwstill_attached

	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL

	movi	MODE_NORMAL,a0
	move	a0,*a13(ANIMODE)

iktwstill_attached

	rets


mode_onground	;4

	rets



mode_bouncing	;5

	clr	a0
	move	a0,*a13(OBJ_XVEL),L
	move	a0,*a13(OBJ_ZVEL),L

	move	*a13(ANIMODE),a0
	btst	MODE_END_BIT,a0
	jrz	aroznot_ended

	move	*a13(MOVE_DIR),a0
	xori	MOVE_LEFT+MOVE_RIGHT,a0	;flip LEFT/RIGHT
	move	a0,*a13(MOVE_DIR)

	move	*a13(NEW_FACING_DIR),a1
	andi	MOVE_UP+MOVE_DOWN,a1
	or	a0,a1			;LEFT or RIGHT
	move	a1,*a13(FACING_DIR)	;face same dir as run

	movi	und_run2_anim,a0
	calla	change_anim1a

	SETMODE	RUNNING


aroznot_ended
	rets


mode_onturnbkl	;6


	move	*a13(STICK_VAL_CUR),a0
	btst	PLAYER_DOWN_BIT,a0
	jrz	tlpzno_climbdown

	movi	und_climb_down_anim,a0
	calla	change_anim1a

	SETMODE	CLIMBTURNBKL

tlpzno_interrupt
	rets

tlpzno_climbdown
	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	jrz	tlpzz

	X32	a0
	addi	tlpzaction_table,a0
	move	*a0,a0,L
	call	a0

	move	*a13(PLYRNUM),a5
	movi	JUMP_ROPES,a2
	movi	1000,a0
	calla	ADD_IF_SILENT

	rets



tlpzaction_table
	.long	tlpzz,tlpzpunch,tlpzblock,tlpzblock			;0-3
	.long	tlpzsuper_punch,tlpzsuper_punch,tlpzblock,tlpzblock	;4-7
	.long	tlpzkick,tlpzpunchkick,tlpzblock,tlpzblock		;8-11
	.long	tlpzsuper_punch,tlpzpunchkick,tlpzblock,tlpzblock	;12-15
	.long	tlpzsuper_kick,tlpzsuper_kick,tlpzblock,tlpzblock	;16-19
	.long	tlpzgraboh,tlpzgraboh,tlpzblock,tlpzblock		;20-23
	.long	tlpzsuper_kick,tlpzpunchkick,tlpzblock,tlpzblock	;24-27
	.long	tlpzgraboh,tlpzgraboh,tlpzblock,tlpzblock		;28-31

tlpzz
	rets

tlpzpunch		;1
tlpzblock		;2
tlpzsuper_punch	;4
tlpzkick		;8
tlpzsuper_kick	;16
tlpzgraboh
tlpzpunchkick

	SETMODE	INAIR

	movi	und_tbukl_butt_drop_anim,a0
	calla	change_anim1a

	WRSND	W_TAKER,FLYKICK_T1,FLYKICK_T2

	rets


mode_block	;7

	move	*a13(BLOCK_TIME),a0
	inc	a0
	move	a0,*a13(BLOCK_TIME)
	cmpi	160,a0
	jrlt	khnmno

	calla	get_opp_plyrmode
	cmpi	MODE_BLOCK,a0
	jrnz	khnmno
	move	*a13(CLOSEST_XDIST),a0
	cmpi	61h,a0
	jrge	khnmno
	cmpi	45,a0
	jrlt	khnmno
	move	*a13(CLOSEST_ZDIST),a0
	cmpi	30,a0
	jrlt	khnmpunchblock

khnmno
	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	jrz	khnmno_interrupt

	;press.  if block isn't down, let mode_normal handle it
	move	a0,a2			;save a0 from ...val_down
	move	*a13(BUT_VAL_CUR),a0
	btst	PLAYER_BLOCK_BIT,a0
	jrz	khnmset_mode_normal
	move	a2,a0			;restore a0 from ...val_down

	X32	a0
	addi	khnmaction_table,a0
	move	*a0,a0,L
	call	a0

khnmno_interrupt
	rets

khnmset_mode_normal
	SETMODE	NORMAL
	jruc	mode_normal

khnmaction_table
	.long	khnmz,khnmpunchblock,khnmz	;0-2
	.long	khnmpunchblock		;3
	.long	khnmz,khnmz,khnmz,khnmz,khnmz,khnmz,khnmz	;4-10
	.long	khnmz,khnmz,khnmz,khnmz,khnmz,khnmz,khnmz	;11-17
	.long	khnmz,khnmz,khnmz,khnmz,khnmz,khnmz,khnmz	;18-24
	.long	khnmz,khnmz,khnmz,khnmz,khnmz,khnmz,khnmz	;25-31

khnmz
	rets

khnmpunchblock	;3


	SETMODE	NORMAL

	movi	und_4_push_anim,a0
	calla	change_anim1a

	WRSND	W_TAKER,PUSH_T1,PUSH_T2

	rets



mode_dizzy	;8

	rets


mode_oppoverhead ;10

	rets


mode_climbturnbkl	;11

	rets



mode_waitanim	;12

	move	*a13(ANIMODE),a0
	btst	MODE_END_BIT,a0
	jrz	sndcnot_ended

	move	*a13(CODE_ADDR),a0,L
	call	a0

sndcnot_ended
	rets



mode_grapple	;13

	rets


mode_master	;14

	calla	master_keep_attached	;keep slave attached to me

	rets


mode_slave	;15
	rets


mode_headhold	;16
	move	*a13(ANIBASE),a0,L
	cmpi	und_sliding_choke_anim,a0
	jrnz	aqfonorm
	move	*a13(CUR_FRAME),a0,L
	.ref	U2LN2A
	movi	U2LN2A+FR6,a1
	move	*a1,a1,L
	cmp	a1,a0
	jrz	mode_chokehold
	rets
aqfonorm
	.ref	bozo_check
	calla	bozo_check
	jrnc	aqfofail

	WRSND	W_BAMBAM,GRABHOLD_T1,GRABHOLD_T2

	movi	und_neckbreaker_anim,a0
	move	@PCNT,a14
	btst	0,a14
	jrz	aqfotag
	movi	und_pile_anim,a0
aqfotag	calla	change_anim1a

	rets

aqfofail
	move	*a13(WHOIHIT),a0,L
	move	*a0(PLYRMODE),a0
	cmpi	MODE_HEADHELD,a0
	jrnz	aqfoexit


	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	aqfono_interrupt

	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	X32	a0
	addi	aqfoaction_table,a0
	move	*a0,a0,L
	call	a0

aqfono_interrupt
	rets

aqfoexit
	move	*a13(OBJ_ZPOS),a14,L
	subi	[6,0],a14
	move	a14,*a13(OBJ_ZPOS),L

	movk	MOVE_DOWN_RIGHT,a1
	move	*a13(OBJ_CONTROL),a0
	btst	B_FLIPH,a0
	jrz	aqforight
	movk	MOVE_DOWN_LEFT,a1
aqforight	move	a1,*a13(FACING_DIR)
	move	a1,*a13(NEW_FACING_DIR)

	SETMODE	NORMAL

	rets

aqfoaction_table
	.long	aqfoz,aqfopunch,aqfoblock,aqfoblock			;0-3
	.long	aqfosuper_punch,aqfosuper_punch,aqfoblock,aqfoblock	;4-7
	.long	aqfokick,aqfopunchkick,aqfoblock,aqfoblock		;8-11
	.long	aqfosuper_punch,aqfopunchkick,aqfoblock,aqfoblock	;12-15
	.long	aqfosuper_kick,aqfosuper_kick,aqfoblock,aqfoblock	;16-19
	.long	aqfograboh,aqfograboh,aqfoblock,aqfoblock		;20-23
	.long	aqfosuper_kick,aqfopunchkick,aqfoblock,aqfoblock	;24-27
	.long	aqfograboh,aqfograboh,aqfoblock,aqfoblock		;28-31


aqfoblock
aqfograboh
aqfoz		;0
	rets


aqfopunch		;1
	CALLA	FIND_AND_KILL_ENDLESS
	move	*a13(STICK_VAL_CUR),a0
	move	*a13(NEW_FACING_DIR),a1
	andi	0ch,a1
	cmp	a0,a1
	jrnz	aqfotag2
	movi	und_4_knee_butts_anim,a0
	calla	change_anim1a
	rets

aqfotag2
	.ref	und_4_knee2_anim
	movi	und_4_knee2_anim,a0
	calla	change_anim1a
	rets

aqfosuper_punch	;4
do_pile

	move	*a13(USR_VAR2),a0
	jrz	aqfoupper

	CALLA	FIND_AND_KILL_ENDLESS

	move	*a13(STICK_VAL_CUR),a0
	btst	PLAYER_DOWN_BIT,a0
	jrz	aqfoz

	movi	und_pile_anim,a0
	calla	change_anim1a
	rets

aqfoupper
	move	*a13(STICK_VAL_CUR),a0
	btst	PLAYER_DOWN_BIT,a0
	jrz	aqfoz


	CALLA	FIND_AND_KILL_ENDLESS
	FACE24	und,uppercut_anim
	calla	change_anim1a
	rets


aqfopunchkick
aqfokick
	CALLA	FIND_AND_KILL_ENDLESS
	move	*a13(STICK_VAL_CUR),a0
	btst	PLAYER_DOWN_BIT,a0
	jrz	aqfoknee

	movi	und_4_knee2_anim,a0
	calla	change_anim1a
	rets

aqfoknee
	movi	und_4_knee2_anim,a0
	calla	change_anim1a
	rets

aqfosuper_kick	;16

	rets

mode_puppet2	;17

	rets

mode_headheld	;19
	move	*a13(ANIMODE),a0
	btst	MODE_NOGRAVITY_BIT,a0
	janz	mode_choking


	calla	bozo_check
	jrnc	iyzhfail

	PUSH	a8
	move	a13,a8
	CALLA	DO_REVERSAL
	CALLA	DO_REVERSAL_MESS
	PULL	a8

	WRSND	W_BAMBAM,GRABHOLD_T1,GRABHOLD_T2

	movi	und_neckbreaker_anim,a0
	move	@PCNT,a14
	btst	0,a14
	jrz	iyzhtag
	movi	und_pile_anim,a0
iyzhtag	calla	change_anim1a

	rets
iyzhfail

	move	*a13(ATTACH_PROC),a0,L
	jrnz	iyzhno_luck

	move	*a13(OBJ_YPOSINT),a0
	move	*a13(GROUND_Y),a1
	cmp	a1,a0			;a0-a1
	jrgt	iyzhno_luck


	movi	und_3_head_held_stand_anim,a0
	calla	change_anim1a

iyzhno_luck
	rets

mode_chokehold	;24

	move	*a13(ATTACH_PROC),a0,L
	jrz	jukvlost_him
	move	*a0(ATTACH_PROC),a0,L
	cmp	a13,a0
	jrne	jukvlost_him

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	jukvno_interrupt

	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	jrz	jukvno_interrupt

	move	*a13(ATTACH_PROC),a1,L
	movk	30,a14
	move	a14,*a1(IMMOBILIZE_TIME)

	X32	a0
	addi	jukvaction_table,a0
	move	*a0,a0,L
	call	a0

jukvno_interrupt
	rets

jukvaction_table
	.long	jukvz,jukvpunch,jukvblock,jukvblock			;0-3
	.long	jukvsuper_punch,jukvsuper_punch,jukvblock,jukvblock	;4-7
	.long	jukvkick,jukvpunchkick,jukvblock,jukvblock		;8-11
	.long	jukvsuper_punch,jukvpunchkick,jukvblock,jukvblock	;12-15
	.long	jukvsuper_kick,jukvsuper_kick,jukvblock,jukvblock	;16-19
	.long	jukvgraboh,jukvgraboh,jukvblock,jukvblock		;20-23
	.long	jukvsuper_kick,jukvpunchkick,jukvblock,jukvblock	;24-27
	.long	jukvgraboh,jukvgraboh,jukvblock,jukvblock		;28-31

jukvz		;0
jukvblock		;2
	rets

jukvpunch		;1
jukvpunchkick

	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL

	move	*a13(STICK_VAL_CUR),a0
	btst	MOVE_UP_BIT,a0
	jrz	jukvreg

	CALLA	FIND_AND_KILL_ENDLESS

	SETMODE	HEADHOLD

	move	*a13(WHOIHIT),a0,L
	movi	MODE_HEADHELD,a14
	move	a14,*a0(PLYRMODE)

	move	*a0(ANIMODE),a14
	andni	MODE_NOGRAVITY,a14
	move	a14,*a0(ANIMODE)

	movi	und_4_knee_butts_anim,a0
	calla	change_anim1a
	WRSND	W_TAKER,HDBUTT_T1,HDBUTT_T2

	rets
jukvreg
	CALLA	FIND_AND_KILL_ENDLESS
	movi	und_2_butt_anim,a0
	calla	change_anim1a
	WRSND	W_TAKER,HDBUTT_T1,HDBUTT_T2

	rets

jukvsuper_punch	;4
jukvgraboh

	move	*a13(STICK_VAL_CUR),a0
	btst	MOVE_DOWN_BIT,a0
	jrz	jukvpunch

	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL

	CALLA	FIND_AND_KILL_ENDLESS
	FACE24	und,uppercut_anim
	calla	change_anim1

	WRSND	W_TAKER,HDBUTT_T1,HDBUTT_T2
	rets

jukvsuper_kick	;16
	move	*a13(STICK_VAL_CUR),a0
	btst	PLAYER_DOWN_BIT,a0
	jrnz	jukvtag
	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL

	CALLA	FIND_AND_KILL_ENDLESS
	movi	und_2_knee_anim,a0
	calla	change_anim1a
	rets

jukvkick		;8

	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL

	CALLA	FIND_AND_KILL_ENDLESS
	movi	und_2_knee_anim,a0
	calla	change_anim1a
	rets

jukvtag
	SETMODE	NORMAL

	CALLA	FIND_AND_KILL_ENDLESS
	movi	und_chokeslam_anim,a0
	calla	change_anim1a

	WRSND	W_TAKER,KICK_T1,KICK_T2

	rets


jukvlost_him
	CALLA	FIND_AND_KILL_ENDLESS
	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL
	movi	MODE_NORMAL,a0
	move	a0,*a13(ANIMODE)

	rets


 SUBR	mode_choking	;25

	move	*a13(ATTACH_PROC),a0,L
	jrz	wmtwfall_out
	move	*a0(ATTACH_PROC),a0,L
	cmp	a13,a0
	jrne	wmtwfall_out

	rets


wmtwfall_out
	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	CALLA	FIND_AND_KILL_ENDLESS
	SETMODE	NORMAL
	movi	MODE_NORMAL,a0
	move	a0,*a13(ANIMODE)

	rets



uocxVEL	equ	3a000h		;38000h	;30000h
uocxDVEL	equ	31000h		;27978h	;21f0eh


 SUBR und_velocity_table


	.long	0,	-uocxVEL	;0 UP

	.long	uocxDVEL,	-uocxDVEL	;1 UP-RIGHT

	.long	uocxVEL,	0	;2 RIGHT

	.long	uocxDVEL,	uocxDVEL	;3 DOWN-RIGHT

	.long	0,	uocxVEL	;4 DOWN

	.long	-uocxDVEL,	uocxDVEL	;5 DOWN-LEFT

	.long	-uocxVEL,	0	;6 LEFT

	.long	-uocxDVEL,	-uocxDVEL	;7 UP-LEFT



 SUBR und_rotate_anims_table
	.long	und_stand2_anim		;new = up right
	.long	und_2_to_4_turn_anim	;    = down right
	.long	und_2_to_6_turn_anim	;    = down left
	.long	und_2_to_8_turn_anim	;    = up left

	.long	und_4_to_2_turn_anim	;new = up right
	.long	und_stand4_anim		;    = down right
	.long	und_4_to_6_turn_anim	;    = down left
	.long	und_4_to_8_turn_anim	;    = up left

	.long	und_6_to_2_turn_anim	;new = up right
	.long	und_6_to_4_turn_anim	;    = down right
	.long	und_stand6_anim		;    = down left
	.long	und_6_to_8_turn_anim	;    = up left

	.long	und_8_to_2_turn_anim	;new = up right
	.long	und_8_to_4_turn_anim	;    = down right
	.long	und_8_to_6_turn_anim	;    = down left
	.long	und_stand8_anim		;    = up left


 SUBR und_leg_anims_table
	.long	und_walk1_f2_anim	;1 (UP)
	.long	und_walk1_f2_anim	;2 (UP_RIGHT)
	.long	und_walk1_f4_anim	;3 (RIGHT)
	.long	und_walk1_f4_anim	;4 (DOWN_RIGHT)
	.long	und_walk1_f4_anim	;5 (DOWN)
	.long	und_walk1_f4_anim	;6 (DOWN_LEFT)
	.long	und_walk1_f2_anim	;7 (LEFT)
	.long	und_walk1_f2_anim	;8 (UP-LEFT)

	.long	und_walk2_f2_anim	;1 (UP)
	.long	und_walk2_f2_anim	;2 (UP_RIGHT)
	.long	und_walk2_f2_anim	;3 (RIGHT)
	.long	und_walk2_f4_anim	;4 (DOWN_RIGHT)
	.long	und_walk8_f4_anim	;5 (DOWN)
	.long	und_walk8_f4_anim	;6 (DOWN_LEFT)
	.long	und_walk4_f2_anim	;7 (LEFT)
	.long	und_walk4_f2_anim	;8 (UP-LEFT)

	.long	und_walk2_f2_anim	;1 (UP)
	.long	und_walk2_f2_anim	;2 (UP_RIGHT)
	.long	und_walk2_f2_anim	;3 (RIGHT)
	.long	und_walk4_f4_anim	;4 (DOWN_RIGHT)
	.long	und_walk4_f4_anim	;5 (DOWN)
	.long	und_walk8_f4_anim	;6 (DOWN_LEFT)
	.long	und_walk6_f2_anim	;7 (LEFT)
	.long	und_walk6_f2_anim	;8 (UP-LEFT)


	.long	und_walk2_f2_anim	;1 (UP)
	.long	und_walk8_f2_anim	;2 (UP_RIGHT)
	.long	und_walk4_f4_anim	;3 (RIGHT)
	.long	und_walk4_f4_anim	;4 (DOWN_RIGHT)
	.long	und_walk2_f4_anim	;5 (DOWN)
	.long	und_walk6_f4_anim	;6 (DOWN_LEFT)
	.long	und_walk2_f2_anim	;7 (LEFT)
	.long	und_walk6_f2_anim	;8 (UP-LEFT)

	.long	und_walk5_f2_anim	;1 (UP)
	.long	und_walk5_f2_anim	;2 (UP_RIGHT)
	.long	und_walk5_f4_anim	;3 (RIGHT)
	.long	und_walk5_f4_anim	;4 (DOWN_RIGHT)
	.long	und_walk5_f4_anim	;5 (DOWN)
	.long	und_walk5_f4_anim	;6 (DOWN_LEFT)
	.long	und_walk5_f2_anim	;7 (LEFT)
	.long	und_walk5_f2_anim	;8 (UP-LEFT)

	.long	und_walk2_f2_anim	;1 (UP)
	.long	und_walk6_f2_anim	;2 (UP_RIGHT)
	.long	und_walk2_f2_anim	;3 (RIGHT)
	.long	und_walk6_f4_anim	;4 (DOWN_RIGHT)
	.long	und_walk2_f4_anim	;5 (DOWN)
	.long	und_walk4_f4_anim	;6 (DOWN_LEFT)
	.long	und_walk2_f2_anim	;7 (LEFT)
	.long	und_walk8_f2_anim	;8 (UP-LEFT)

	.long	und_walk2_f2_anim	;1 (UP)
	.long	und_walk6_f2_anim	;2 (UP_RIGHT)
	.long	und_walk6_f2_anim	;3 (RIGHT)
	.long	und_walk8_f4_anim	;4 (DOWN_RIGHT)
	.long	und_walk4_f4_anim	;5 (DOWN)
	.long	und_walk4_f4_anim	;6 (DOWN_LEFT)
	.long	und_walk2_f2_anim	;7 (LEFT)
	.long	und_walk2_f2_anim	;8 (UP-LEFT)

	.long	und_walk2_f2_anim	;1 (UP)
	.long	und_walk4_f2_anim	;2 (UP_RIGHT)
	.long	und_walk6_f2_anim	;3 (RIGHT)
	.long	und_walk8_f4_anim	;4 (DOWN_RIGHT)
	.long	und_walk6_f4_anim	;5 (DOWN)
	.long	und_walk2_f4_anim	;6 (DOWN_LEFT)
	.long	und_walk2_f2_anim	;7 (LEFT)
	.long	und_walk2_f2_anim	;8 (UP-LEFT)


 SUBR und_torso_anims_table
	.long	und_torso2_anim		;new = up right
	.long	und_2_to_4_turn2_anim	;    = down right
	.long	und_2_to_6_turn2_anim	;    = down left
	.long	und_2_to_8_turn2_anim	;    = up left

	.long	und_4_to_2_turn2_anim	;new = up right
	.long	und_torso4_anim		;    = down right
	.long	und_4_to_6_turn2_anim	;    = down left
	.long	und_4_to_8_turn2_anim	;    = up left

	.long	und_6_to_2_turn2_anim	;new = up right
	.long	und_6_to_4_turn2_anim	;    = down right
	.long	und_torso6_anim		;    = down left
	.long	und_6_to_8_turn2_anim	;    = up left

	.long	und_8_to_2_turn2_anim	;new = up right
	.long	und_8_to_4_turn2_anim	;    = down right
	.long	und_8_to_6_turn2_anim	;    = down left
	.long	und_torso8_anim		;    = up left



	.end

