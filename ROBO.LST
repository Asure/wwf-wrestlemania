TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    **************************************************************
       2                    *
       3                    * Software:     Jason Skiles
       4                    * Initiated:    4 Oct 93
       5                    *
       6                    * COPYRIGHT (C) 1993 WILLIAMS ELECTRONICS GAMES, INC.
       7                    *
       8                    *.Last mod - 12/8/93 11:15
       9                    **************************************************************
      10                    
      11                            .file   "robo.asm"
      13                            .width  132
      14                            .option b,d,l,t
      15                            .mnolist
      16                    
      17                    
      18                            .include        "mproc.equ"             ;Mproc equates
      19                            .include        "display.equ"           ;Display proc equates
      20                            .include        "gsp.equ"               ;Gsp asm equates
      21                            .include        "sys.equ"
      22                            .include        "game.equ"
      23                            .include        "audit.equ"
      24                            .include        "macros.h"
      25                            .include        "link.equ"
      26                    
      27                    ;       .include        "roboimg.glo"
      28                            .include        "roboimg.tbl"
      29                            .include        "fontsimg.glo"
      30                    
      31                            ;kludge
      32                            .ref    robo_p
      33                    
      34                    *****************************************************************************
      35                    
      36                            ;from ADJUST.ASM
      37                            .ref    BINBCD
      38                    
      39                            ;from COLL2.ASM
      40                            .ref    collisions,CCCCount
      41                    
      42                            ;from DCSSOUND.ASM
      43                            .ref    nosounds,SNDSND
      44                    
      45                            ;from DISPLAY.ASM
      46                            .ref    pal_getf,STOPOBJS,fg2bg
      47                    
      48                            ;from MAIN.ASM
      49                            .ref    dpageflip,IRQSKYE
      50                    
      51                            ;from MPROC.ASM
      52                            .ref    KIL1C
      53                    
      54                            ;from STRING.ASM
      55                            .ref    setup_message,print_string_R,mess_objid,copy_string
      56                            .ref    dec_to_asc
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE    2

      57                    
      58                            ;from UTIL.ASM
      59                            .ref    get_all_buttons_cur,get_stick_val_cur,RNDRNG0,get_start_cur
      60                            .ref    WIPEOUT,CYCLE_TABLE,civani,civanic
      61                    
      62                            ;from WRESTLE.ASM       
      63                            .if DEBUG
      64                            .ref    CPULEFT
      65                            .endif
      66                            .ref    HALT,PCNT
      67                    
      68                            ;for WRESTLE.ASM
      69                            .def    RE_DEADPLAYER,RE_WAVEDONE,RE_ABORT,RE_BACKUP
      70                    
      71                            .ref    _switch_addr,_switch2_addr,ADD_VOICE
      72                    
      73                    *****************************************************************************
      74                    
      75 00000000                   BSSX    robo_end,       16      ;reason for wave end
      76 00000000                   BSSX    robotron_score, 32      ;UHL score
      77 00000030                   .bss    player_dead,    16
      78 00000040                   .bss    starts_down,    16      ;are both starts down?
      79 00000050                   .bss    player_object,  32      ;pointer to char1 obj
      80 00000070                   .bss    gun_proc,       32      ;gun process address
      81 00000090                   .bss    robo_wave,      16      ;which wave to perform?
      82 000000a0                   .bss    live_badguys,   16      ;wave-preserving badguy count
      83 000000b0                   .bss    forward,        16      ;skip wave
      84 000000c0                   .bss    backward,       16      ;drop back a wave
      85                    
      86                    *****************************************************************************
      87                    
      88              0000  ROBO_DEBUG      equ     0
      89              0000  WAVE_CONTROL    equ     0
      90              0000  BOG_MONITOR     equ     0
      91                    
      92              0000  ROBO_PAGE       equ     0*256
      93                    
      94              0001  ROBJ_MOM        equ     1
      95              0002  ROBJ_DAD        equ     2
      96              0003  ROBJ_KID        equ     3
      97                    
      98                    ;termination causes
      99              0001  RE_DEADPLAYER   equ     1
     100              0002  RE_WAVEDONE     equ     2
     101              0003  RE_ABORT        equ     3
     102              0004  RE_BACKUP       equ     4
     103                    
     104                    
     105                    *****************************************************************************
     106                    ******************************************************************************
     107                    ******************************************************************************
     108                            .ref    robo_icon_trigger
     109                            .ref    p1icon_total
     110                            .ref    p2icon_total
     111                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE    3

     112                    
     113 00000000            SUBR   robo_check
     114                    
     115                            .if DEBUG
     116                            jruc    hqsrobo_ok
     117                            .endif
     118 00000000     c038          jruc    hqsrobo_end
     119                    
     120 00000010     07a0          move    @p1icon_total,a0,L
         00000020 00000000! 
     121 00000040     05ae          move    @robo_icon_trigger,a14
         00000050 00000000! 
     122 00000070     480e          cmp     a0,a14
     123 00000080     c605          jrle    hqsrobo_ok
     124 00000090     07a0          move    @p2icon_total,a0,L
         000000a0 00000000! 
     125 000000c0     480e          cmp     a0,a14
     126 000000d0     c72b          jrgt    hqsrobo_end
     127 000000e0           hqsrobo_ok
     128 000000e0     242e          sll     1,a14
     129 000000f0     058e          move    a14,@robo_icon_trigger
         00000100 00000000! 
     130 00000120     0d3f          callr   reset_roboscore
         00000130     0028  
     131 00000140     0d3f          callr   robo_sound_init
         00000150     14ce  
     132                    
     133                    ;       movi    -1,a0
     134                    ;       calla   ADD_VOICE
     135                    
     136 00000160     5600          clr     a0
     137 00000170           hqsrobo_loop
     138 00000170                   JSRP    robo_game
     139 000001e0     05ae          move    @robo_end,a14
         000001f0 00000000- 
     140 00000210     0b4e          cmpi    RE_DEADPLAYER,a14
         00000220     fffe  
     141 00000230     ca0a          jreq    hqsplayer_died
     142 00000240     0b4e          cmpi    RE_WAVEDONE,a14
         00000250     fffd  
     143 00000260     ca08          jreq    hqswave_successful
     144 00000270     0b4e          cmpi    RE_ABORT,a14
         00000280     fffc  
     145 00000290     ca0a          jreq    hqswave_aborted
     146 000002a0     0b4e          cmpi    RE_BACKUP,a14
         000002b0     fffb  
     147 000002c0     ca08          jreq    hqsback_up
     148 000002d0     c00b          jruc    hqsrobo_end
     149                    
     150 000002e0           hqsplayer_died
     151 000002e0     c0e8          jruc    hqsrobo_loop
     152                    
     153 000002f0           hqswave_successful
     154 000002f0     1020          inc     a0
     155 00000300     0b40          cmpi    16,a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE    4

         00000310     ffef  
     156 00000320     cbe4          jrne    hqsrobo_loop
     157 00000330     c005          jruc    hqsrobo_end
     158                    
     159 00000340           hqswave_aborted
     160 00000340     c004          jruc    hqsrobo_end
     161                    
     162 00000350           hqsback_up
     163 00000350     1420          dec     a0
     164 00000360     cfe0          jrnn    hqsrobo_loop
     165 00000370     5600          clr     a0
     166 00000380     c0de          jruc    hqsrobo_loop
     167                    
     168 00000390           hqsrobo_end
     169 00000390                   RETP
     170                    
     171                    
     172                    *****************************************************************************
     173                    ******************************************************************************
     174                    ******************************************************************************
     175                    
     176 000003c0            SUBRP  reset_roboscore
     177                    
     178 000003c0     57ce          clr     a14
     179 000003d0     078e          move    a14,@robotron_score,L
         000003e0 00000010- 
     180 00000400     0960          rets
     181                    
     182                    
     183                    *****************************************************************************
     184                    ******************************************************************************
     185                    ******************************************************************************
     186                    
     187 00000410            SUBR   robo_game
     188                    
     189 00000410     2080          sla     4,a0
     190 00000420     0580          move    a0,@robo_wave,W
         00000430 00000090- 
     191                    
     192 00000450     0d5f          calla   display_blank
         00000460 00000000! 
     193 00000480     0d5f          calla   WIPEOUT                 ;CLEAN SYSTEM OUT
         00000490 00000000! 
     194                    
     195 000004b0     5600          clr     a0
     196 000004c0     0580          move    a0,@HALT
         000004d0 00000000! 
     197 000004f0     0580          move    a0,@dtype               ;2d mode
         00000500 00000000! 
     198 00000520     0580          move    a0,@IRQSKYE
         00000530 00000000! 
     199 00000550     0580          move    a0,@CCCCount
         00000560 00000000! 
     200                    
     201 00000580     1820          movk    1,a0                    ;page flipping on
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE    5

     202 00000590     0580          move    a0,@dpageflip
         000005a0 00000000! 
     203                    
     204 000005c0                   SLEEPK  1
     205                    
     206 00000600     09e0          movi    SCRNEND,a0              ;[256,405]
         00000610 00fe01b0  
     207 00000630     0780          move    a0,@SCRNLR,L
         00000640 00000000! 
     208                    
     209 00000660     5600          clr     a0
     210 00000670     0780          move    a0,@WORLDTLX,L
         00000680 00000000! 
     211 000006a0     0780          move    a0,@WORLDTLY,L
         000006b0 00000000! 
     212                    
     213 000006d0                   SLEEPK  2
     214                    
     215 00000710     0d5f          calla   nosounds                ;kill the select music
         00000720 00000000! 
     216                    
     217                            ;draw the frame
     218 00000740     05a0          move    @robo_wave,a0
         00000750 00000090- 
     219 00000770     0b20          addi    zypborder_colors,a0
         00000780 000014d0' 
     220 000007a0     8400          move    *a0,a0,W
     221 000007b0     0d3f          callr   draw_frame
         000007c0     1229  
     222                    
     223 000007d0     1820          movk    1,a0
     224 000007e0     0580          move    a0,@DISPLAYON
         000007f0 00000000! 
     225                    
     226 00000810                   SLEEPK  2
     227                    
     228 00000850     57ce          clr     a14
     229 00000860     058e          move    a14,@player_dead,W      ;clear the done flag
         00000870 00000030- 
     230                    
     231                            ;initialize the robo palette color cycles
     232 00000890     0d3f          callr   robo_pal_cycles
         000008a0     1100  
     233                    
     234                            ;initialize the badguy count
     235 000008b0     57ce          clr     a14
     236 000008c0     058e          move    a14,@live_badguys,W
         000008d0 000000a0- 
     237                    
     238                            ;place the wave count
     239 000008f0     0d3f          callr   wave_count
         00000900     125e  
     240                    
     241                            ;create the score monitor
     242 00000910                   CREATE  ROBOSCORE_PID,score
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE    6

     243                    
     244                            ;set up the player object
     245 00000990                   CREATE  ROBOMAN_PID,our_hero            ;start the little guy up
     246 00000a10                   CREATE  PLYRGUN_PID,player_gun  ;give him a weapon
     247 00000a90     0780          move    a0,@gun_proc,L          ;save the address
         00000aa0 00000070- 
     248                    
     249                            ;set up some grunts
     250 00000ac0     05a0          move    @robo_wave,a0
         00000ad0 00000090- 
     251 00000af0     0b20          addi    zypwave_grunts,a0
         00000b00 000015d0' 
     252 00000b20     8400          move    *a0,a0,W
     253 00000b30     05a2          move    @robo_wave,a2
         00000b40 00000090- 
     254 00000b60     0b22          addi    zypgrunt_speeds,a2
         00000b70 000016d0' 
     255 00000b90     8442          move    *a2,a2,W
     256 00000ba0     0d3f          callr   make_grunts
         00000bb0     03af  
     257                    
     258                            ;make some hulks
     259 00000bc0     05a0          move    @robo_wave,a0
         00000bd0 00000090- 
     260 00000bf0     0b20          addi    zypwave_hulks,a0
         00000c00 00001ad0' 
     261 00000c20     8400          move    *a0,a0,W
     262 00000c30     0d3f          callr   make_hulks
         00000c40     0840  
     263                    
     264                            ;sphereoids
     265 00000c50     05a0          move    @robo_wave,a0
         00000c60 00000090- 
     266 00000c80     0b20          addi    zypwave_sphereoids,a0
         00000c90 00001bd0' 
     267 00000cb0     8400          move    *a0,a0,W
     268 00000cc0     0d3f          callr   make_sphereoids
         00000cd0     099f  
     269                    
     270                            ;quarks
     271 00000ce0     05a0          move    @robo_wave,a0
         00000cf0 00000090- 
     272 00000d10     0b20          addi    zypwave_quarks,a0
         00000d20 00001cd0' 
     273 00000d40     8400          move    *a0,a0,W
     274 00000d50     0d3f          callr   make_quarks
         00000d60     0d83  
     275                    
     276                            ;make a few posts
     277 00000d70     05a0          move    @robo_wave,a0
         00000d80 00000090- 
     278 00000da0     0b20          addi    zypwave_posts,a0
         00000db0 000017d0' 
     279 00000dd0     8400          move    *a0,a0,W
     280                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE    7

     281 00000de0     05a1          move    @robo_wave,a1
         00000df0 00000090- 
     282 00000e10     0b21          addi    zyppost_types,a1
         00000e20 000018d0' 
     283 00000e40     8421          move    *a1,a1,W
     284                    
     285 00000e50     05a2          move    @robo_wave,a2
         00000e60 00000090- 
     286 00000e80     0b22          addi    zyppost_colors,a2
         00000e90 000019d0' 
     287 00000eb0     8442          move    *a2,a2,W
     288                    
     289 00000ec0     0d3f          callr   make_posts
         00000ed0     04db  
     290                    
     291                            ;and some people
     292 00000ee0     05a0          move    @robo_wave,a0
         00000ef0 00000090- 
     293 00000f10     4c01          move    a0,a1
     294 00000f20     4c02          move    a0,a2
     295 00000f30     0b20          addi    zypwave_moms,a0
         00000f40 00001dd0' 
     296 00000f60     0b21          addi    zypwave_dads,a1 
         00000f70 00001ed0' 
     297 00000f90     0b22          addi    zypwave_kids,a2
         00000fa0 00001fd0' 
     298 00000fc0     8400          move    *a0,a0,W
     299 00000fd0     8421          move    *a1,a1,W
     300 00000fe0     8442          move    *a2,a2,W
     301 00000ff0     0d3f          callr   make_humans
         00001000     05a0  
     302                    
     303                            ;start the collision checker
     304 00001010                   CREATE  COLL_PID,collisions
     305                    
     306                            ;create the both-start-btn watcher
     307 00001090     5600          clr     a0
     308 000010a0     0580          move    a0,@starts_down,W
         000010b0 00000040- 
     309 000010d0     0580          move    a0,@forward,W
         000010e0 000000b0- 
     310 00001100     0580          move    a0,@backward,W
         00001110 000000c0- 
     311 00001130                   CREATE  MISC_PID,watch_both_starts
     312                    
     313                            .if     WAVE_CONTROL
     314                            CREATE  MISC_PID,wave_mover
     315                            .endif
     316                    
     317                            .if DEBUG
     318                            .if BOG_MONITOR
     319                            CREATE  MISC_PID,bog_o_meter
     320                            .endif
     321                            .endif
     322                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE    8

     323 000011b0     0d5f          calla   display_unblank
         000011c0 00000000! 
     324                    
     325 000011e0           zypnot_done
     326 000011e0                   SLEEPK  1
     327 00001220     05ae          move    @live_badguys,a14
         00001230 000000a0- 
     328 00001250     ca11          jrz     zypwave_done
     329                    
     330 00001260     05ae          move    @player_dead,a14
         00001270 00000030- 
     331 00001290     cb10          jrnz    zypdead_hero
     332                    
     333 000012a0     05ae          move    @starts_down,a14
         000012b0 00000040- 
     334 000012d0     cb0f          jrnz    zypwave_abort
     335                    
     336 000012e0     05ae          move    @forward,a14
         000012f0 000000b0- 
     337 00001310     cb05          jrnz    zypwave_done
     338                    
     339 00001320     05ae          move    @backward,a14
         00001330 000000c0- 
     340 00001350     cb0a          jrnz    zypback_up
     341 00001360     c0e7          jruc    zypnot_done
     342                    
     343                    
     344 00001370           zypwave_done
     345 00001370     09ce          movi    RE_WAVEDONE,a14
         00001380     0002  
     346 00001390     c009          jruc    zypquit
     347 000013a0           zypdead_hero
     348 000013a0     09ce          movi    RE_DEADPLAYER,a14
         000013b0     0001  
     349 000013c0     c006          jruc    zypquit
     350 000013d0           zypwave_abort
     351 000013d0     09ce          movi    RE_ABORT,a14
         000013e0     0003  
     352 000013f0     c003          jruc    zypquit
     353                    
     354 00001400           zypback_up
     355 00001400     09ce          movi    RE_BACKUP,a14
         00001410     0004  
     356 00001420     0300          jruc    zypquit
     357                    
     358 00001430           zypquit
     359 00001430     058e          move    a14,@robo_end,W
         00001440 00000000- 
     360                    
     361                            ;put the wave back in a0 just like we found it
     362 00001460     05a0          move    @robo_wave,a0,W
         00001470 00000090- 
     363 00001490     2b80          sra     4,a0
     364 000014a0                   RETP
     365                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE    9

     366                    
     367 000014d0           zypborder_colors
     368                            .if     ROBO_DEBUG
     369                            .word   1
     370                            .endif
     371 000014d0     0001          .word   01,06,01,14,07,03,02,08
     372 00001550     0000          .word   00,10,01,06,01,14,07,03
     373                    
     374 000015d0           zypwave_grunts
     375                            .if     ROBO_DEBUG
     376                            .word   4
     377                            .endif
     378                    ;       .word   15,17,22,34,20,30,00,30
     379                    ;       .word   30,25,30,00,30,27,25,30
     380                    
     381 000015d0     000f          .word   15,17,22,34,20,32,00,35
     382 00001650     003c          .word   60,25,35,00,35,27,25,35
     383                    
     384 000016d0           zypgrunt_speeds
     385                            .if     ROBO_DEBUG
     386                            .word   1000
     387                            .endif
     388 000016d0     0014          .word   20,15,15,15,15,15,15,15
     389 00001750     000f          .word   15,15,14,14,14,14,14,13
     390                    
     391 000017d0           zypwave_posts
     392                            .if     ROBO_DEBUG
     393                            .word   15
     394                            .endif
     395 000017d0     0005          .word   05,15,25,25,20,25,00,25
     396 00001850     0000          .word   00,20,25,00,25,05,20,25
     397                    
     398 000018d0           zyppost_types
     399                            .if     ROBO_DEBUG
     400                            .word   0
     401                            .endif
     402 000018d0     0000          .word   0,1,3,8,4,2,0,7
     403 00001950     0000          .word   0,5,0,1,3,8,4,2
     404                    
     405 000019d0           zyppost_colors
     406                            .if     ROBO_DEBUG
     407                            .word   0Fh
     408                            .endif
     409 000019d0     000f          .word   15,14,11,13,14,15,14,11
     410 00001a50     000e          .word   14,10,15,14,11,13,14,15
     411                    
     412 00001ad0           zypwave_hulks
     413                            .if     ROBO_DEBUG
     414                            .word   0
     415                            .endif
     416 00001ad0     0000          .word   00,05,06,07,00,07,12,08
     417 00001b50     0004          .word   04,00,08,13,08,20,02,03
     418                    
     419 00001bd0           zypwave_sphereoids
     420                            .if     ROBO_DEBUG
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   10

     421                            .word   0
     422                            .endif
     423 00001bd0     0000          .word   00,01,03,04,01,04,00,05
     424 00001c50     0005          .word   05,01,05,00,05,02,01,05
     425                    
     426 00001cd0           zypwave_quarks
     427                            .if     ROBO_DEBUG
     428                            .word   0
     429                            .endif
     430 00001cd0     0000          .word   00,00,00,00,00,00,10,00
     431 00001d50     0000          .word   00,00,00,12,00,00,00,00
     432                    
     433 00001dd0           zypwave_moms
     434                            .if     ROBO_DEBUG
     435                            .word   2
     436                            .endif
     437 00001dd0     0001          .word   01,01,02,02,15,03,04,03
     438 00001e50     0003          .word   03,00,03,03,03,05,00,03
     439                    
     440 00001ed0           zypwave_dads
     441                            .if     ROBO_DEBUG
     442                            .word   2
     443                            .endif
     444 00001ed0     0001          .word   01,01,02,02,00,03,04,03
     445 00001f50     0003          .word   03,22,03,03,03,05,00,03
     446                    
     447 00001fd0           zypwave_kids
     448                            .if     ROBO_DEBUG
     449                            .word   2
     450                            .endif
     451 00001fd0     0000          .word   00,01,02,02,01,03,04,03
     452 00002050     0003          .word   03,00,03,03,03,05,22,03
     453                    
     454                    
     455                    *****************************************************************************
     456                    ******************************************************************************
     457                    ******************************************************************************
     458                    *
     459                    *       PLAYER SECTION
     460                    *
     461                    
     462                            ;reg use
     463                            ; a4  - current position in animation script
     464                            ; a5  - head of current animation script
     465                            ; a6  - tail of current animation script
     466                            ; a8  - player object
     467                            ; a9  - motion count accumulator
     468                            ; a10 - direction of motion
     469                    
     470 000020d0            SUBRP  our_hero
     471                    
     472                            ;create the player object
     473 000020d0     09e0          movi    [mzjstart_x,0],a0
         000020e0 00c50000  
     474 00002100     09e1          movi    [mzjstart_y,0],a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   11

         00002110 007b0000  
     475 00002130     09e2          movi    man_d1,a2
         00002140 00000e10" 
     476 00002160     5663          clr     a3
     477 00002170     09e4          movi    DMAWNZ,a4
         00002180 00008002  
     478 000021a0     09c5          movi    CLSPLYR|TYPPLYR,a5
         000021b0     4100  
     479 000021c0     56c6          clr     a6
     480 000021d0     56e7          clr     a7
     481 000021e0     0d5f          calla   BEGINOBJW
         000021f0 00000000! 
     482                    
     483                            ;set the global pointer
     484 00002210     0788          move    a8,@player_object,L
         00002220 00000050- 
     485                    
     486                            ; initiailize direction of motion
     487 00002240     574a          clr     a10
     488                    
     489 00002250           mzjnot_done
     490 00002250                   PUSHP   a4,a5,a6
     491 00002270                   SLEEPK  1
     492 000022b0                   PULLP   a4,a5,a6
     493                    
     494                            ; move him first
     495 000022d0     0d3f          callr   mzjmove_player
         000022e0     0056  
     496                    
     497                            ; change his animation frame, if neccesary
     498 000022f0     0d3f          callr   mzjchange_frame
         00002300     00ca  
     499                    
     500 00002310     c0f3          jruc    mzjnot_done
     501                    
     502 00002320           mzjplayer_dead
     503                            ;kill the gun process
     504 00002320     07a0          move    @gun_proc,a0,L
         00002330 00000070- 
     505 00002350     0d5f          calla   KILL
         00002360 00000000! 
     506                    
     507 00002380     09c0          movi    BULLET_PID,a0
         00002390     0202  
     508 000023a0     0d5f          calla   KIL1C
         000023b0 00000000! 
     509                    
     510 000023d0     09c0          movi    GRUNT_PID,a0
         000023e0     0220  
     511 000023f0     0d5f          calla   KIL1C
         00002400 00000000! 
     512                    
     513 00002420     09c0          movi    HULK_PID,a0
         00002430     0221  
     514 00002440     0d5f          calla   KIL1C
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   12

         00002450 00000000! 
     515                    
     516 00002470     09c0          movi    HUMAN_PID,a0
         00002480     0210  
     517 00002490     0d5f          calla   KIL1C
         000024a0 00000000! 
     518                    
     519 000024c0     09c0          movi    SPHEREOID_PID,a0
         000024d0     0222  
     520 000024e0     0d5f          calla   KIL1C
         000024f0 00000000! 
     521                    
     522 00002510     09c0          movi    ENFORCER_PID,a0
         00002520     0223  
     523 00002530     0d5f          calla   KIL1C
         00002540 00000000! 
     524                    
     525 00002560     09c0          movi    SPARK_PID,a0
         00002570     0224  
     526 00002580     0d5f          calla   KIL1C
         00002590 00000000! 
     527                    
     528 000025b0     09c0          movi    QUARK_PID,a0
         000025c0     0225  
     529 000025d0     0d5f          calla   KIL1C
         000025e0 00000000! 
     530                    
     531 00002600     09c0          movi    TANK_PID,a0
         00002610     0226  
     532 00002620     0d5f          calla   KIL1C
         00002630 00000000! 
     533                    
     534 00002650     09c0          movi    SHELL_PID,a0
         00002660     0227  
     535 00002670     0d5f          calla   KIL1C
         00002680 00000000! 
     536                    
     537 000026a0     0d5f          calla   STOPOBJS
         000026b0 00000000! 
     538                    
     539                            ;switch frames
     540 000026d0     09e0          movi    robo_dead,a0,L
         000026e0 00000480" 
     541 00002700     0d5f          calla   civanic
         00002710 00000000! 
     542                    
     543                            ;death sound
     544 00002730     09e0          movi    RS_DIE,a0
         00002740 00000001  
     545 00002760     0d5f          calla   robo_sound
         00002770 00014ef0' 
     546                    
     547 00002790                   SLEEP   120
     548 000027e0     182e          movk    1,a14
     549 000027f0     058e          move    a14,@player_dead,W
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   13

         00002800 00000030- 
     550                    
     551 00002820                   DIE
     552                    
     553                    ******************************************************************************
     554                    *
     555                    *       player move routine
     556                    *
     557                    
     558 00002850            SUBRP  mzjmove_player
     559                    
     560 00002850     5600          clr     a0
     561 00002860     0d5f          calla   get_stick_val_cur
         00002870 00000000! 
     562 00002890     1fc0          btst    JOYDN,a0
     563 000028a0     cb07          jrnz    mzjmove_down
     564 000028b0     1fe0          btst    JOYUP,a0
     565 000028c0     cb0f          jrnz    mzjmove_up
     566 000028d0     1f80          btst    JOYRGT,a0
     567 000028e0     cb17          jrnz    mzjmove_right
     568 000028f0     1fa0          btst    JOYLFT,a0
     569 00002900     cb1b          jrnz    mzjmove_left
     570 00002910     c068          jruc    mzjno_move
     571                    
     572 00002920           mzjmove_down
     573 00002920     1f80          btst    JOYRGT,a0
     574 00002930     cb34          jrnz    mzjmove_downright
     575 00002940     1fa0          btst    JOYLFT,a0
     576 00002950     cb3d          jrnz    mzjmove_downleft
     577                    
     578                            ;increment Y
     579 00002960     b50e          move    *a8(OYPOS),a14,W
         00002970     00b0  
     580 00002980     102e          inc     a14
     581 00002990     b1c8          move    a14,*a8(OYPOS),W
         000029a0     00b0  
     582 000029b0     c042          jruc    mzjmove_done
     583                    
     584 000029c0           mzjmove_up
     585 000029c0     1f80          btst    JOYRGT,a0
     586 000029d0     cb14          jrnz    mzjmove_upright
     587 000029e0     1fa0          btst    JOYLFT,a0
     588 000029f0     cb1d          jrnz    mzjmove_upleft
     589                    
     590                            ;decrement Y
     591 00002a00     b50e          move    *a8(OYPOS),a14,W
         00002a10     00b0  
     592 00002a20     142e          dec     a14
     593 00002a30     b1c8          move    a14,*a8(OYPOS),W
         00002a40     00b0  
     594 00002a50     c038          jruc    mzjmove_done
     595                    
     596 00002a60           mzjmove_right
     597                            ;increment X
     598 00002a60     b50e          move    *a8(OXPOS),a14,W
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   14

         00002a70     0090  
     599 00002a80     102e          inc     a14
     600 00002a90     b1c8          move    a14,*a8(OXPOS),W
         00002aa0     0090  
     601 00002ab0     c032          jruc    mzjmove_done
     602                    
     603 00002ac0           mzjmove_left
     604                            ;decrement X
     605 00002ac0     b50e          move    *a8(OXPOS),a14,W
         00002ad0     0090  
     606 00002ae0     142e          dec     a14
     607 00002af0     b1c8          move    a14,*a8(OXPOS),W
         00002b00     0090  
     608 00002b10     c02c          jruc    mzjmove_done
     609                    
     610 00002b20           mzjmove_upright
     611                            ; decrement Y and increment X
     612 00002b20     b50e          move    *a8(OYPOS),a14,W
         00002b30     00b0  
     613 00002b40     142e          dec     a14
     614 00002b50     b1c8          move    a14,*a8(OYPOS),W
         00002b60     00b0  
     615 00002b70     b50e          move    *a8(OXPOS),a14,W
         00002b80     0090  
     616 00002b90     102e          inc     a14
     617 00002ba0     b1c8          move    a14,*a8(OXPOS),W
         00002bb0     0090  
     618 00002bc0     c021          jruc    mzjmove_done
     619                    
     620 00002bd0           mzjmove_upleft
     621                            ; decrement Y and decrement X
     622 00002bd0     b50e          move    *a8(OYPOS),a14,W
         00002be0     00b0  
     623 00002bf0     142e          dec     a14
     624 00002c00     b1c8          move    a14,*a8(OYPOS),W
         00002c10     00b0  
     625 00002c20     b50e          move    *a8(OXPOS),a14,W
         00002c30     0090  
     626 00002c40     142e          dec     a14
     627 00002c50     b1c8          move    a14,*a8(OXPOS),W
         00002c60     0090  
     628 00002c70     c016          jruc    mzjmove_done
     629                    
     630 00002c80           mzjmove_downright
     631                            ; increment Y and increment X
     632 00002c80     b50e          move    *a8(OYPOS),a14,W
         00002c90     00b0  
     633 00002ca0     102e          inc     a14
     634 00002cb0     b1c8          move    a14,*a8(OYPOS),W
         00002cc0     00b0  
     635 00002cd0     b50e          move    *a8(OXPOS),a14,W
         00002ce0     0090  
     636 00002cf0     102e          inc     a14
     637 00002d00     b1c8          move    a14,*a8(OXPOS),W
         00002d10     0090  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   15

     638 00002d20     c00b          jruc    mzjmove_done
     639                    
     640 00002d30           mzjmove_downleft
     641                            ; increment Y and decrement X
     642 00002d30     b50e          move    *a8(OYPOS),a14,W
         00002d40     00b0  
     643 00002d50     102e          inc     a14
     644 00002d60     b1c8          move    a14,*a8(OYPOS),W
         00002d70     00b0  
     645 00002d80     b50e          move    *a8(OXPOS),a14,W
         00002d90     0090  
     646 00002da0     142e          dec     a14
     647 00002db0     b1c8          move    a14,*a8(OXPOS),W
         00002dc0     0090  
     648 00002dd0     0300          jruc    mzjmove_done
     649                    
     650 00002de0           mzjmove_done
     651                            ; check bounds
     652 00002de0     b50e          move    *a8(OXPOS),a14,W
         00002df0     0090  
     653 00002e00     0b4e          cmpi    mzjlow_x,a14,W
         00002e10     ffca  
     654 00002e20     c703          jrgt    mzjnot_lowx
     655                            ; too low on x
     656 00002e30     102e          inc     a14
     657 00002e40     b1c8          move    a14,*a8(OXPOS),W
         00002e50     0090  
     658                    
     659 00002e60           mzjnot_lowx
     660 00002e60     0b4e          cmpi    mzjhigh_x,a14,W
         00002e70     feab  
     661 00002e80     c603          jrle    mzjnot_highx
     662                            ; too high on x
     663 00002e90     142e          dec     a14
     664 00002ea0     b1c8          move    a14,*a8(OXPOS),W
         00002eb0     0090  
     665                    
     666 00002ec0           mzjnot_highx
     667                    
     668 00002ec0     b50e          move    *a8(OYPOS),a14,W
         00002ed0     00b0  
     669 00002ee0     0b4e          cmpi    mzjlow_y,a14,W
         00002ef0     ffd2  
     670 00002f00     c703          jrgt    mzjnot_lowy
     671                            ; too low on y
     672 00002f10     102e          inc     a14
     673 00002f20     b1c8          move    a14,*a8(OYPOS),W
         00002f30     00b0  
     674                    
     675 00002f40           mzjnot_lowy
     676 00002f40     0b4e          cmpi    mzjhigh_y,a14,W
         00002f50     ff24  
     677 00002f60     c603          jrle    mzjnot_highy
     678                            ; too high on y
     679 00002f70     142e          dec     a14
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   16

     680 00002f80     b1c8          move    a14,*a8(OYPOS),W
         00002f90     00b0  
     681                    
     682 00002fa0           mzjnot_highy
     683 00002fa0           mzjno_move
     684                    
     685 00002fa0           mzjdone_moving
     686 00002fa0     0960          rets
     687                    
     688                    ******************************************************************************
     689                    *
     690                    *       player animation routine
     691                    *
     692                    
     693                    
     694 00002fb0            SUBRP  mzjchange_frame
     695                            ;reg use
     696                            ; a0  scratch
     697                            ; a1  sctatch
     698                            ; a3  new direction of motion
     699                            ; a10 old direction of motion - update
     700                    
     701 00002fb0     5600          clr     a0
     702 00002fc0     5642          clr     a2
     703 00002fd0     0d5f          calla   get_stick_val_cur
         00002fe0 00000000! 
     704 00003000     4c03          move    a0,a3
     705                    
     706 00003010     480a          cmp     a0,a10
     707 00003020     ca12          jreq    mzjsame_direction
     708 00003030     0300          jruc    mzjnew_direction
     709                    
     710 00003040           mzjnew_direction
     711                            ; start a new script.  first use the joystick bits to compute an
     712                            ; offset into the script table.
     713 00003040                   X32     a0              ;multiply by 32
     714 00003050     0b20          addi    mzjscript_map,a0        ;add the address of the script table
         00003060 00003680' 
     715 00003080     8600          move    *a0,a0,L        ;get the address of the script
     716                    
     717                            ; get the tail and head of the image list for this script
     718 00003090     9606          move    *a0+,a6,L
     719 000030a0     4c05          move    a0,a5
     720                    
     721                            ;a5 now points to the first image in the script.  change to it.
     722 000030b0     86a0          move    *a5,a0,L
     723 000030c0     0d5f          calla   civanic
         000030d0 00000000! 
     724                    
     725                            ;set the new direction thingie and script pointer
     726 000030f0     4c6a          move    a3,a10
     727 00003100     4ca4          move    a5,a4
     728                    
     729                            ;set the motion count
     730 00003110     09e9          movi    mzjmotion_count,a9
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   17

         00003120 00000002  
     731 00003140     c00f          jruc    mzjdone_changing
     732                    
     733 00003150           mzjsame_direction
     734                            ;check the motion count
     735 00003150     1429          dec     a9
     736 00003160     cb0d          jrnz    mzjdone_changing
     737                    
     738                            ;reset the motion count
     739 00003170     09e9          movi    mzjmotion_count,a9
         00003180 00000002  
     740                    
     741                            ;increment the pointer, wrap if neccesary
     742 000031a0     0b04          addi    20h,a4
         000031b0     0020  
     743 000031c0     4886          cmp     a4,a6
     744 000031d0     cb01          jrne    mzjno_wrap
     745 000031e0     4ca4          move    a5,a4
     746                    
     747 000031f0           mzjno_wrap
     748                            ;a4 is the new image.  change to it.
     749 000031f0     8680          move    *a4,a0,L
     750 00003200     0d5f          calla   civanic
         00003210 00000000! 
     751                    
     752 00003230     0300          jruc    mzjdone_changing
     753                    
     754 00003240           mzjdone_changing
     755 00003240     0960          rets
     756                    
     757                    
     758                    ******************************************************************************
     759                    *
     760                    *       player collision routines
     761                    *
     762                    
     763 00003250            SUBR   player_die
     764 00003250                   PUSH    a1,a7
     765                    
     766                            ;we hit some kind of bad guy and are dead
     767 00003270     09ce          movi    CLSDEAD,a14
         00003280     2000  
     768 00003290     b1c8          move    a14,*a8(OID),W
         000032a0     0190  
     769 000032b0     b700          move    *a8(OPLINK),a0,L
         000032c0     01a0  
     770 000032d0     09c1          movi    DEADPLAYER_PID,a1
         000032e0     0235  
     771 000032f0     09e7          movi    mzjplayer_dead,a7
         00003300 00002320' 
     772 00003320     0d5f          calla   XFERPROC
         00003330 00000000! 
     773                    
     774 00003350                   PULL    a1,a7
     775 00003370     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   18

     776                    
     777                    
     778                    ******************************************************************************
     779                    *
     780                    *       player configuration data
     781                    *
     782                    
     783                    ;start position
     784              00c5  mzjstart_x      equ     197
     785              007b  mzjstart_y      equ     123
     786                    
     787                    ; motion boundaries
     788              0035  mzjlow_x                equ     53
     789              0154  mzjhigh_x               equ     347-7
     790              002d  mzjlow_y                equ     45
     791              00db  mzjhigh_y               equ     231-12
     792                    
     793                    ;motion count - controls animation speed
     794              0002  mzjmotion_count equ     2       ;there will be trouble if this is zero
     795                    
     796                    ; walking animation scripts
     797 00003380           mzjani_holdstill
     798 00003380 000033c0'         .long   mzjani_holdstillx
     799 000033a0 00000e10"         .long   man_d1
     800 000033c0           mzjani_holdstillx
     801                    
     802 000033c0           mzjani_walkup
     803 000033c0 00003460'         .long   mzjani_walkupx
     804 000033e0 00000fc0"         .long   man_u1
     805 00003400 00001050"         .long   man_u2
     806 00003420 00000fc0"         .long   man_u1
     807 00003440 000010e0"         .long   man_u3
     808 00003460           mzjani_walkupx
     809                    
     810 00003460           mzjani_walkdown
     811 00003460 00003500'         .long   mzjani_walkdownx
     812 00003480 00000e10"         .long   man_d1
     813 000034a0 00000ea0"         .long   man_d2
     814 000034c0 00000e10"         .long   man_d1
     815 000034e0 00000f30"         .long   man_d3
     816 00003500           mzjani_walkdownx
     817                    
     818 00003500           mzjani_walkright
     819 00003500 000035a0'         .long   mzjani_walkrightx
     820 00003520 00000c60"         .long   man_r1
     821 00003540 00000cf0"         .long   man_r2
     822 00003560 00000c60"         .long   man_r1
     823 00003580 00000d80"         .long   man_r3
     824 000035a0           mzjani_walkrightx
     825                    
     826 000035a0           mzjani_walkleft
     827 000035a0 00003640'         .long   mzjani_walkleftx
     828 000035c0 00000ab0"         .long   man_l1
     829 000035e0 00000b40"         .long   man_l2
     830 00003600 00000ab0"         .long   man_l1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   19

     831 00003620 00000bd0"         .long   man_l3
     832 00003640           mzjani_walkleftx
     833                    
     834 00003640           mzjani_bad
     835 00003640 00003680'         .long   mzjani_badx
     836 00003660 00000000"         .long   robo_bad
     837 00003680           mzjani_badx
     838                    
     839                    ; direction - script mappings: use AND combo of joy bits as index
     840 00003680           mzjscript_map
     841 00003680 00003380'         .long   mzjani_holdstill
     842 000036a0 000033c0'         .long   mzjani_walkup
     843 000036c0 00003460'         .long   mzjani_walkdown
     844 000036e0 00003640'         .long   mzjani_bad
     845 00003700 000035a0'         .long   mzjani_walkleft
     846 00003720 000035a0'         .long   mzjani_walkleft
     847 00003740 000035a0'         .long   mzjani_walkleft
     848 00003760 00003640'         .long   mzjani_bad
     849 00003780 00003500'         .long   mzjani_walkright
     850 000037a0 00003500'         .long   mzjani_walkright
     851 000037c0 00003500'         .long   mzjani_walkright
     852 000037e0 00003640'         .long   mzjani_bad
     853 00003800 00003640'         .long   mzjani_bad
     854 00003820 00003640'         .long   mzjani_bad
     855 00003840 00003640'         .long   mzjani_bad
     856 00003860 00003640'         .long   mzjani_bad
     857 00003880           mzjscript_mapx
     858                    
     859                    
     860                    *****************************************************************************
     861                    *
     862                    *       player gun process
     863                    *
     864                    
     865                            ;reg use
     866                            ;a9  time till next shot is allowed
     867                    
     868 00003880            SUBRP  player_gun
     869                    
     870 00003880     5729          clr     a9
     871 00003890     c019          jruc    ujdsleep
     872                    
     873 000038a0           ujdcheck_shot
     874 000038a0     1820          movk    1,a0
     875 000038b0     0d5f          calla   get_stick_val_cur
         000038c0 00000000! 
     876 000038e0     ca14          jrz     ujdsleep                        ;no shot
     877                    
     878                            ;fire in the indicated direction
     879 000038f0     4c0a          move    a0,a10
     880 00003900                   CREATE  BULLET_PID,bullet
     881 00003980     09e9          movi    ujdrate_of_fire,a9
         00003990 00000006  
     882                    
     883                            ;shoot sound
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   20

     884 000039b0     09e0          movi    RS_SHOOT,a0
         000039c0 00000003  
     885 000039e0     0d3f          callr   robo_sound
         000039f0     114f  
     886                    
     887 00003a00     c002          jruc    ujdsleep
     888                            
     889 00003a10           ujdtoo_soon
     890 00003a10     1429          dec     a9
     891 00003a20     0300          jruc    ujdsleep
     892                    
     893 00003a30           ujdsleep
     894 00003a30                   SLEEPK  1
     895 00003a70     4d29          move    a9,a9
     896 00003a80     cbf8          jrnz    ujdtoo_soon
     897 00003a90     c0e0          jruc    ujdcheck_shot
     898                    
     899 00003aa0           ujddone
     900 00003aa0                   DIE
     901                    
     902              0006  ujdrate_of_fire equ     6       ;min ticks between shots
     903                    
     904                    
     905                    *****************************************************************************
     906                    *
     907                    *       player bullet process
     908                    *
     909                    
     910                            ;reg use
     911                            ; a4 velocity accumulator (used to pick the correct bullet)
     912                            ; a5 vert indicator
     913                            ; a8 bullet object
     914                            ;a10 (in) stick bits
     915                    
     916 00003ad0            SUBRP  bullet
     917                    
     918                            ;create a bullet object
     919 00003ad0     09e0          movi    [500,0],a0
         00003ae0 01f40000  
     920 00003b00     5621          clr     a1
     921 00003b10     09e2          movi    bullet_hrz,a2
         00003b20 00000090" 
     922 00003b40     5663          clr     a3
     923 00003b50     09e4          movi    DMAWNZ,a4
         00003b60 00008002  
     924 00003b80     09c5          movi    CLSPLYR|TYPBULLET,a5
         00003b90     4200  
     925 00003ba0     56c6          clr     a6
     926 00003bb0     56e7          clr     a7
     927 00003bc0     0d5f          calla   BEGINOBJW
         00003bd0 00000000! 
     928                    
     929                            ;set the speed and start position
     930 00003bf0     07a9          move    @player_object,a9,L
         00003c00 00000050- 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   21

     931 00003c20     5684          clr     a4
     932 00003c30     56a5          clr     a5
     933 00003c40     b520          move    *a9(OXPOS),a0,W
         00003c50     0090  
     934 00003c60     1060          addk    ykjbstart_xoff,a0
     935 00003c70     b008          move    a0,*a8(OXPOS),W
         00003c80     0090  
     936 00003c90     b520          move    *a9(OYPOS),a0,W
         00003ca0     00b0  
     937 00003cb0     10a0          addk    ykjbstart_yoff,a0
     938 00003cc0     b008          move    a0,*a8(OYPOS),W
         00003cd0     00b0  
     939                    
     940 00003ce0     1f8a          btst    JOYRGT,a10
     941 00003cf0     ca0d          jrz     ykjnot_right
     942 00003d00     b50e          move    *a8(OXPOS),a14,W        ;pos
         00003d10     0090  
     943 00003d20     0b2e          addi    ykjbstart_radj,a14
         00003d30 00000007  
     944 00003d50     b1c8          move    a14,*a8(OXPOS),W
         00003d60     0090  
     945 00003d70     09e0          movi    ykjbullet_speed,a0      ;speed
         00003d80 00080000  
     946 00003da0     b208          move    a0,*a8(OXVEL),L
         00003db0     0020  
     947 00003dc0     1024          inc     a4
     948                    
     949 00003dd0           ykjnot_right
     950                    
     951 00003dd0     1faa          btst    JOYLFT,a10
     952 00003de0     ca0d          jrz     ykjnot_left
     953 00003df0     b50e          move    *a8(OXPOS),a14,W        ;pos
         00003e00     0090  
     954 00003e10     0b2e          addi    ykjbstart_ladj,a14
         00003e20 fffffff3  
     955 00003e40     b1c8          move    a14,*a8(OXPOS),W
         00003e50     0090  
     956 00003e60     09e0          movi    -ykjbullet_speed,a0     ;speed
         00003e70 fff80000  
     957 00003e90     b208          move    a0,*a8(OXVEL),L
         00003ea0     0020  
     958 00003eb0     1424          dec     a4
     959                    
     960 00003ec0           ykjnot_left
     961                    
     962 00003ec0     1fea          btst    JOYUP,a10
     963 00003ed0     ca0e          jrz     ykjnot_up
     964 00003ee0     b50e          move    *a8(OYPOS),a14,W        ;pos
         00003ef0     00b0  
     965 00003f00     0b2e          addi    ykjbstart_uadj,a14
         00003f10 fffffff2  
     966 00003f30     b1c8          move    a14,*a8(OYPOS),W
         00003f40     00b0  
     967 00003f50     09e0          movi    -ykjbullet_speed,a0     ;speed
         00003f60 fff80000  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   22

     968 00003f80     b208          move    a0,*a8(OYVEL),L
         00003f90     0040  
     969 00003fa0     1424          dec     a4
     970 00003fb0     1025          inc     a5
     971                    
     972 00003fc0           ykjnot_up
     973                    
     974 00003fc0     1fca          btst    JOYDN,a10
     975 00003fd0     ca0e          jrz     ykjnot_down
     976 00003fe0     b50e          move    *a8(OYPOS),a14,W        ;pos
         00003ff0     00b0  
     977 00004000     0b2e          addi    ykjbstart_dadj,a14
         00004010 00000008  
     978 00004030     b1c8          move    a14,*a8(OYPOS),W
         00004040     00b0  
     979 00004050     09e0          movi    ykjbullet_speed,a0      ;speed
         00004060 00080000  
     980 00004080     b208          move    a0,*a8(OYVEL),L
         00004090     0040  
     981 000040a0     1024          inc     a4
     982 000040b0     1025          inc     a5
     983                    
     984 000040c0           ykjnot_down
     985                    
     986                            ;set the image
     987 000040c0     09e0          movi    bullet_hrz,a0
         000040d0 00000090" 
     988 000040f0     4ca5          move    a5,a5
     989 00004100     ca03          jrz     ykjhoriz
     990 00004110     09e0          movi    bullet_vrt,a0
         00004120 00000120" 
     991 00004140           ykjhoriz
     992                    
     993                            ;vert/horz is set.  check for diagonal instead
     994 00004140     0b44          cmpi    1,a4
         00004150     fffe  
     995 00004160     ca0c          jreq    ykjimage_set
     996 00004170     0b44          cmpi    -1,a4
         00004180     0000  
     997 00004190     ca09          jreq    ykjimage_set
     998                    
     999                            ;it's a diagonal.  if a4 is 0, use frontslash
    1000 000041a0     4c84          move    a4,a4
    1001 000041b0     ca04          jrz     ykjfront_slash
    1002 000041c0     09e0          movi    bullet_bck,a0
         000041d0 000001b0" 
    1003 000041f0     c003          jruc    ykjimage_set
    1004                    
    1005 00004200           ykjfront_slash
    1006 00004200     09e0          movi    bullet_fnt,a0
         00004210 00000240" 
    1007                    
    1008 00004230           ykjimage_set
    1009 00004230     0d5f          calla   civanic
         00004240 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   23

    1010                    
    1011 00004260           ykjloop
    1012 00004260     0d3f          callr   bounds_check
         00004270     0f33  
    1013 00004280     4c00          move    a0,a0
    1014 00004290     cb05          jrnz    ykjhit_wall
    1015 000042a0                   SLEEPK  1
    1016 000042e0     c0f7          jruc    ykjloop
    1017                    
    1018 000042f0           ykjhit_wall
    1019                            ;zoinks!  We've hit a wall. back up to be flush against it.
    1020                            ; a2 holds the number of pixels we have to back up.
    1021                    
    1022                            ;well, we can overlap on the wall a LITTLE.  say, 2 pixels.
    1023 000042f0     1442          subk    2,a2
    1024                    
    1025 00004300     b700          move    *a8(OXVEL),a0,L
         00004310     0020  
    1026 00004320     ca0c          jrz     ykjy_adjust
    1027 00004330     ce06          jrn     ykjneg_xvel
    1028 00004340     b500          move    *a8(OXPOS),a0,W
         00004350     0090  
    1029 00004360     4440          sub     a2,a0
    1030 00004370     b008          move    a0,*a8(OXPOS),W
         00004380     0090  
    1031 00004390     c005          jruc    ykjy_adjust
    1032 000043a0           ykjneg_xvel
    1033 000043a0     b500          move    *a8(OXPOS),a0,W
         000043b0     0090  
    1034 000043c0     4040          add     a2,a0
    1035 000043d0     b008          move    a0,*a8(OXPOS),W
         000043e0     0090  
    1036                    
    1037 000043f0           ykjy_adjust
    1038 000043f0     b700          move    *a8(OYVEL),a0,L
         00004400     0040  
    1039 00004410     ca0c          jrz     ykjkill_bullet
    1040 00004420     ce06          jrn     ykjneg_yvel
    1041 00004430     b500          move    *a8(OYPOS),a0,W
         00004440     00b0  
    1042 00004450     4440          sub     a2,a0
    1043 00004460     b008          move    a0,*a8(OYPOS),W
         00004470     00b0  
    1044 00004480     c005          jruc    ykjkill_bullet
    1045 00004490           ykjneg_yvel
    1046 00004490     b500          move    *a8(OYPOS),a0,W
         000044a0     00b0  
    1047 000044b0     4040          add     a2,a0
    1048 000044c0     b008          move    a0,*a8(OYPOS),W
         000044d0     00b0  
    1049                    
    1050 000044e0           ykjkill_bullet
    1051 000044e0                   SLEEPK  1
    1052 00004520     0d5f          calla   DELOBJA8
         00004530 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   24

    1053 00004550                   DIE
    1054                    
    1055                    
    1056                    ******************************************************************************
    1057                    *
    1058                    * player bullet collision routines
    1059                    *
    1060                    
    1061 00004580            SUBR   bullet_die
    1062 00004580                   PUSH    a1,a7,a9,a10,a11
    1063                    
    1064                            ;we hit some kind of bad guy and are stopped.
    1065 000045a0     09ce          movi    CLSDEAD,a14
         000045b0     2000  
    1066 000045c0     b1c8          move    a14,*A8(OID)
         000045d0     0190  
    1067 000045e0     b700          move    *a8(OPLINK),a0,L
         000045f0     01a0  
    1068 00004600     09c1          movi    DEADBULLET_PID,a1
         00004610     0231  
    1069 00004620     09e7          movi    ykjkill_bullet,a7
         00004630 000044e0' 
    1070 00004650     0d5f          calla   XFERPROC
         00004660 00000000! 
    1071                    
    1072 00004680                   PULL    a1,a7,a9,a10,a11
    1073 000046a0     0960          rets
    1074                    
    1075                    
    1076          00080000  ykjbullet_speed equ     00080000h       ;pixels per frame
    1077                    
    1078              0035  ykjlow_x                equ     53
    1079              015a  ykjhigh_x               equ     346
    1080              002d  ykjlow_y                equ     45
    1081              00e6  ykjhigh_y               equ     230
    1082                    
    1083                    ;hero anim point is top left.  bullet anim point is center.  use these to
    1084                    ; adjust the starting position of the bullet.
    1085                    ; No.  The bullet anim points are gone now.  Unk.
    1086              0003  ykjbstart_xoff  equ     3
    1087              0005  ykjbstart_yoff  equ     5
    1088                    
    1089              0007  ykjbstart_radj  equ     7
    1090              fff3  ykjbstart_ladj  equ     -13
    1091              fff2  ykjbstart_uadj  equ     -14
    1092              0008  ykjbstart_dadj  equ     8
    1093                    
    1094                    
    1095                    *****************************************************************************
    1096                    ******************************************************************************
    1097                    ******************************************************************************
    1098                    *
    1099                    *       GRUNT SECTION
    1100                    *
    1101                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   25

    1102                            ;reg use
    1103                            ; a0 (in) # of grunts
    1104                            ; a1 scratch
    1105                            ; a2 (in) initial speed
    1106                    
    1107 000046b0            SUBRP  make_grunts
    1108                    
    1109 000046b0     4c00          move    a0,a0
    1110 000046c0     ca32          jrz     tkadone
    1111                    
    1112 000046d0           tkaanother_grunt
    1113 000046d0                   PUSHP   a0
    1114                    
    1115 000046e0           tkaget_pos
    1116 000046e0     09e0          movi    tkamax_x-tkamin_x,a0
         000046f0 0000011d  
    1117 00004710     0d5f          calla   RNDRNG0
         00004720 00000000! 
    1118 00004740     4c09          move    a0,a9
    1119 00004750     09e0          movi    tkamax_y-tkamin_y,a0
         00004760 000000ad  
    1120 00004780     0d5f          calla   RNDRNG0
         00004790 00000000! 
    1121 000047b0     4c0a          move    a0,a10
    1122                    
    1123 000047c0     0b29          addi    tkamin_x,a9
         000047d0 00000035  
    1124 000047f0     0b2a          addi    tkamin_y,a10
         00004800 0000002d  
    1125                    
    1126 00004820     0b69          cmpi    tkamid_x1,a9
         00004830 ffffff73  
    1127 00004850     c60d          jrle    tkaplace_grunt
    1128 00004860     0b69          cmpi    tkamid_x2,a9
         00004870 fffffefb  
    1129 00004890     c509          jrge    tkaplace_grunt
    1130 000048a0     0b6a          cmpi    tkamid_y1,a10
         000048b0 ffffffb1  
    1131 000048d0     c605          jrle    tkaplace_grunt
    1132 000048e0     0b6a          cmpi    tkamid_y2,a10
         000048f0 ffffff39  
    1133 00004910     c501          jrge    tkaplace_grunt
    1134 00004920     c0db          jruc    tkaget_pos
    1135                    
    1136 00004930           tkaplace_grunt
    1137                            ;assign a random starting position
    1138 00004930     4c4b          move    a2,a11
    1139 00004940                   CREATE  GRUNT_PID,grunt
    1140 000049c0                   PULLP   a0
    1141 000049d0     0d80          dsj     a0,tkaanother_grunt
         000049e0     ffce  
    1142                    
    1143 000049f0           tkadone
    1144 000049f0     0960          rets
    1145                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   26

    1146                    
    1147              0035  tkamin_x        equ     53      ;grunt start outer boundaries
    1148              0152  tkamax_x        equ     347-9
    1149              002d  tkamin_y        equ     45
    1150              00da  tkamax_y        equ     231-13
    1151                    
    1152              008c  tkamid_x1       equ     200-60  ;grunt start inner boundaries
    1153              0104  tkamid_x2       equ     200+60
    1154              004e  tkamid_y1       equ     138-60
    1155              00c6  tkamid_y2       equ     138+60
    1156                    
    1157                    
    1158                    *****************************************************************************
    1159                    *
    1160                    *       grunt process
    1161                    *
    1162                    
    1163 00004a00                   STRUCTPD
    1164 00004a00                   WORD    ggrACCEL_TIMER  ;UHW accelerator count
    1165 00004a00                   LONG    ggrDEATH_SEQUENCE       ;UHL anim to use when dying
    1166                                                    ;    (set by coll routines)
    1167                    
    1168                            ;reg use
    1169                            ; a8 object handle
    1170                            ; a9 (in)  starting x
    1171                            ; a9 (use) ticks between moves
    1172                            ;a10 (in)  starting y
    1173                            ;a10 (use) ticks until next move
    1174                            ;a11 (in)  initial speed
    1175                            ;a11 (use) frame count
    1176                    
    1177 00004a00            SUBRP  grunt
    1178                    
    1179                            ;increment the badguy count
    1180 00004a00     05ae          move    @live_badguys,a14,W
         00004a10 000000a0- 
    1181 00004a30     102e          inc     a14
    1182 00004a40     058e          move    a14,@live_badguys,W
         00004a50 000000a0- 
    1183                    
    1184                            ;create a grunt object
    1185 00004a70     4d20          move    a9,a0
    1186 00004a80     2200          sla     16,a0
    1187 00004a90     4d41          move    a10,a1
    1188 00004aa0     2201          sla     16,a1
    1189 00004ab0     09e2          movi    grunt_1,a2
         00004ac0 000002d0" 
    1190 00004ae0     5663          clr     a3
    1191 00004af0     09e4          movi    DMAWNZ,a4
         00004b00 00008002  
    1192 00004b20     09e5          movi    CLSENMY|TYPGRUNT,a5
         00004b30 00008300  
    1193 00004b50     56c6          clr     a6
    1194 00004b60     56e7          clr     a7
    1195 00004b70     0d5f          calla   BEGINOBJW
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   27

         00004b80 00000000! 
    1196                    
    1197                            ;initialize move timer
    1198 00004ba0     4d69          move    a11,a9
    1199                    
    1200                            ;initialize time till next move
    1201 00004bb0     4d20          move    a9,a0
    1202 00004bc0     0d5f          calla   RNDRNG0
         00004bd0 00000000! 
    1203 00004bf0     4160          add     a11,a0
    1204 00004c00     4c0a          move    a0,a10
    1205                    
    1206                            ;initialize accel counter
    1207 00004c10     09ee          movi    ggracceleration,a14
         00004c20 00000064  
    1208 00004c40     b1cd          move    a14,*a13(ggrACCEL_TIMER),W
         00004c50     0100  
    1209                    
    1210                            ;initialize frame counter
    1211 00004c60     576b          clr     a11
    1212                    
    1213 00004c70           ggrloop
    1214 00004c70     b5ae          move    *a13(ggrACCEL_TIMER),a14,W
         00004c80     0100  
    1215 00004c90     142e          dec     a14
    1216 00004ca0     cb08          jrnz    ggrno_accel
    1217                    
    1218 00004cb0     09ee          movi    ggracceleration,a14
         00004cc0 00000064  
    1219 00004ce0     0b69          cmpi    ggrtop_speed,a9
         00004cf0 fffffffc  
    1220 00004d10     ca01          jreq    ggrno_accel
    1221 00004d20     1429          dec     a9
    1222                    
    1223 00004d30           ggrno_accel
    1224 00004d30     b1cd          move    a14,*a13(ggrACCEL_TIMER),W
         00004d40     0100  
    1225 00004d50                   SLEEPK  1
    1226                    
    1227 00004d90     3e6a          dsj     a10,ggrloop
    1228 00004da0     0d3f          callr   ggrmove_grunt
         00004db0     001d  
    1229 00004dc0     4d2a          move    a9,a10
    1230 00004dd0     c0e9          jruc    ggrloop
    1231                    
    1232 00004de0           ggrdie
    1233                            ;we've croaked
    1234                            ;decrement the badguy count
    1235 00004de0     05ae          move    @live_badguys,a14,W
         00004df0 000000a0- 
    1236 00004e10     142e          dec     a14
    1237 00004e20     058e          move    a14,@live_badguys,W
         00004e30 000000a0- 
    1238                    
    1239                            ;set up the animation
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   28

    1240 00004e50     b7a9          move    *a13(ggrDEATH_SEQUENCE),a9,L
         00004e60     0110  
    1241 00004e70     b500          move    *a8(OCTRL),a0
         00004e80     00f0  
    1242                    
    1243 00004e90           ggrdieloop
    1244 00004e90     9720          move    *a9+,a0,L
    1245 00004ea0     ca08          jrz     ggrdead_n_buried
    1246 00004eb0     0d5f          calla   civanic
         00004ec0 00000000! 
    1247 00004ee0                   sleepk  ggrdeath_speed
    1248 00004f20     c0f6          jruc    ggrdieloop
    1249                    
    1250 00004f30           ggrdead_n_buried
    1251 00004f30     0d5f          calla   DELOBJA8
         00004f40 00000000! 
    1252                    
    1253 00004f60                   DIE
    1254                    
    1255                    ******************************************************************************
    1256                    *
    1257                    *       grunt move routine
    1258                    *
    1259                    
    1260 00004f90            SUBRP  ggrmove_grunt
    1261 00004f90     07ae          move    @player_object,a14,L
         00004fa0 00000050- 
    1262                    
    1263                            ;move in X
    1264 00004fc0     b5c0          move    *a14(OXPOS),a0,W
         00004fd0     0090  
    1265 00004fe0     b501          move    *a8(OXPOS),a1,W
         00004ff0     0090  
    1266 00005000     4420          sub     a1,a0
    1267 00005010     ca12          jrz     ggrdone_movex
    1268 00005020     ce01          jrn     ggrmove_left
    1269 00005030     c008          jruc    ggrmove_right
    1270                    
    1271 00005040           ggrmove_left
    1272 00005040     b501          move    *a8(OXPOS),a1,W
         00005050     0090  
    1273 00005060     0b21          addi    -ggrxmotion_inc,a1
         00005070 fffffffc  
    1274 00005090     b028          move    a1,*a8(OXPOS),W
         000050a0     0090  
    1275 000050b0     c008          jruc    ggrdone_movex
    1276                    
    1277 000050c0           ggrmove_right
    1278 000050c0     b501          move    *a8(OXPOS),a1,W
         000050d0     0090  
    1279 000050e0     0b21          addi    ggrxmotion_inc,a1
         000050f0 00000004  
    1280 00005110     b028          move    a1,*a8(OXPOS),W
         00005120     0090  
    1281 00005130     0300          jruc    ggrdone_movex
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   29

    1282                    
    1283 00005140           ggrdone_movex
    1284                    
    1285 00005140     b5c0          move    *a14(OYPOS),a0,W
         00005150     00b0  
    1286 00005160     b501          move    *a8(OYPOS),a1,W
         00005170     00b0  
    1287 00005180     4420          sub     a1,a0
    1288 00005190     ca12          jrz     ggrdone_movey
    1289 000051a0     ce01          jrn     ggrmove_up
    1290 000051b0     c008          jruc    ggrmove_down
    1291                    
    1292 000051c0           ggrmove_up
    1293 000051c0     b501          move    *a8(OYPOS),a1,W
         000051d0     00b0  
    1294 000051e0     0b21          addi    -ggrymotion_inc,a1
         000051f0 fffffffc  
    1295 00005210     b028          move    a1,*a8(OYPOS),W
         00005220     00b0  
    1296 00005230     c008          jruc    ggrdone_movey
    1297                    
    1298 00005240           ggrmove_down
    1299 00005240     b501          move    *a8(OYPOS),a1,W
         00005250     00b0  
    1300 00005260     0b21          addi    ggrymotion_inc,a1
         00005270 00000004  
    1301 00005290     b028          move    a1,*a8(OYPOS),W
         000052a0     00b0  
    1302 000052b0     0300          jruc    ggrdone_movey
    1303                    
    1304 000052c0           ggrdone_movey
    1305                    
    1306                            ;step through the animation
    1307 000052c0     102b          inc     a11
    1308 000052d0     0b4b          cmpi    4,a11
         000052e0     fffb  
    1309 000052f0     cb01          jrne    ggrno_wrap
    1310 00005300     576b          clr     a11
    1311                    
    1312 00005310           ggrno_wrap
    1313 00005310     4d6e          move    a11,a14
    1314 00005320                   X32     a14
    1315 00005330     0b2e          addi    ggrwalk_script,a14
         00005340 00005990' 
    1316 00005360     87c0          move    *a14,a0,L
    1317 00005370     0d5f          calla   civanic
         00005380 00000000! 
    1318                    
    1319                            ;sound
    1320 000053a0     09e0          movi    RS_GRUNT,a0
         000053b0 00000000  
    1321 000053d0     0d3f          callr   robo_sound
         000053e0     0fb0  
    1322 000053f0     0960          rets
    1323                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   30

    1324                    
    1325                    ******************************************************************************
    1326                    *
    1327                    *       grunt collision routines
    1328                    *
    1329                    
    1330 00005400            SUBR   grunt_shot
    1331                            ;hit by player gunfire
    1332 00005400                   PUSH    a1,a7
    1333                    
    1334                            ;jeepers.  we're dead.
    1335 00005420     09ce          movi    CLSDEAD,a14
         00005430     2000  
    1336 00005440     b1c8          move    a14,*a8(OID),W
         00005450     0190  
    1337                    
    1338 00005460     b60e          move    *a0(OXVEL),a14,L
         00005470     0020  
    1339 00005480     ca0a          jrz     ggrvert_bullet
    1340 00005490     b601          move    *a0(OYVEL),a1,L
         000054a0     0040  
    1341 000054b0     ca03          jrz     ggrhorz_bullet
    1342                    
    1343 000054c0     402e          add     a1,a14
    1344 000054d0     ca09          jrz     ggrdiag_13
    1345 000054e0     c00c          jruc    ggrdiag_24
    1346                    
    1347 000054f0           ggrhorz_bullet
    1348 000054f0     09ee          movi    ggrdie_vert,a14
         00005500 00005a10' 
    1349 00005520     c00c          jruc    ggrdeath_set
    1350 00005530           ggrvert_bullet
    1351 00005530     09ee          movi    ggrdie_horz,a14
         00005540 00005ab0' 
    1352 00005560     c008          jruc    ggrdeath_set
    1353 00005570           ggrdiag_13
    1354 00005570     09ee          movi    ggrdie_diag24,a14
         00005580 00005bf0' 
    1355 000055a0     c004          jruc    ggrdeath_set
    1356 000055b0           ggrdiag_24
    1357 000055b0     09ee          movi    ggrdie_diag13,a14
         000055c0 00005b50' 
    1358 000055e0     0300          jruc    ggrdeath_set
    1359                    
    1360 000055f0           ggrdeath_set
    1361                    
    1362 000055f0     b700          move    *a8(OPLINK),a0,L
         00005600     01a0  
    1363 00005610     b3c0          move    a14,*a0(ggrDEATH_SEQUENCE),L
         00005620     0110  
    1364 00005630     09c1          movi    DEADGRUNT_PID,a1
         00005640     0230  
    1365 00005650     09e7          movi    ggrdie,a7
         00005660 00004de0' 
    1366                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   31

    1367 00005680     b609          move    *a0(PA9),a9,L
         00005690     00a0  
    1368 000056a0     b60a          move    *a0(PA10),a10,L
         000056b0     0080  
    1369 000056c0     0d5f          calla   XFERPROC
         000056d0 00000000! 
    1370                    
    1371 000056f0     09e0          movi    ggrgrunt_points,a0
         00005700 00000064  
    1372 00005720     0d3f          callr   score_points
         00005730     0d2a  
    1373                    
    1374                            ;die sound
    1375 00005740     09e0          movi    RS_HIT,a0
         00005750 00000004  
    1376 00005770     0d5f          calla   robo_sound
         00005780 00014ef0' 
    1377                    
    1378 000057a0                   PULL    a1,a7
    1379 000057c0     0960          rets
    1380                    
    1381                    
    1382 000057d0            SUBR   grunt_die
    1383                            ;hit a mine or something
    1384                    
    1385 000057d0                   PUSH    a1,a7
    1386                    
    1387 000057f0     09ce          movi    CLSDEAD,a14
         00005800     2000  
    1388 00005810     b1c8          move    a14,*a8(OID),W
         00005820     0190  
    1389 00005830     b700          move    *a8(OPLINK),a0,L
         00005840     01a0  
    1390 00005850     09ee          movi    ggrdie_vert,a14
         00005860 00005a10' 
    1391 00005880     b3c0          move    a14,*a0(ggrDEATH_SEQUENCE),L
         00005890     0110  
    1392 000058a0     09c1          movi    DEADGRUNT_PID,a1
         000058b0     0230  
    1393 000058c0     09e7          movi    ggrdie,a7
         000058d0 00004de0' 
    1394 000058f0     b609          move    *a0(PA9),a9,L
         00005900     00a0  
    1395 00005910     b60a          move    *a0(PA10),a10,L
         00005920     0080  
    1396 00005930     0d5f          calla   XFERPROC
         00005940 00000000! 
    1397                    
    1398 00005960                   PULL    a1,a7
    1399 00005980     0960          rets
    1400                    
    1401                    
    1402                    ******************************************************************************
    1403                    *
    1404                    *       grunt configuration data
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   32

    1405                    *
    1406                    
    1407                    
    1408 00005990           ggrwalk_script
    1409 00005990 000002d0"         .long   grunt_1
    1410 000059b0 00000360"         .long   grunt_2
    1411 000059d0 000002d0"         .long   grunt_1
    1412 000059f0 000003f0"         .long   grunt_3
    1413 00005a10           ggrwalk_scriptx
    1414                    
    1415 00005a10           ggrdie_vert
    1416 00005a10 00005070"         .long   grunt_xv1
    1417 00005a30 00005100"         .long   grunt_xv2
    1418 00005a50 00005190"         .long   grunt_xv3
    1419 00005a70 00005220"         .long   grunt_xv4
    1420 00005a90 00000000          .long   0
    1421 00005ab0           ggrdie_vertx
    1422                    
    1423 00005ab0           ggrdie_horz
    1424 00005ab0 000054f0"         .long   grunt_xh1
    1425 00005ad0 00005580"         .long   grunt_xh2
    1426 00005af0 00005610"         .long   grunt_xh3
    1427 00005b10 000056a0"         .long   grunt_xh4
    1428 00005b30 00000000          .long   0
    1429 00005b50           ggrdie_horzx
    1430                    
    1431 00005b50           ggrdie_diag13
    1432 00005b50 00005730"         .long   grunt_xdf1
    1433 00005b70 000057c0"         .long   grunt_xdf2
    1434 00005b90 00005850"         .long   grunt_xdf3
    1435 00005bb0 000058e0"         .long   grunt_xdf4
    1436 00005bd0 00000000          .long   0
    1437 00005bf0           ggrdie_diag13x
    1438                    
    1439 00005bf0           ggrdie_diag24
    1440 00005bf0 000052b0"         .long   grunt_xdb1
    1441 00005c10 00005340"         .long   grunt_xdb2
    1442 00005c30 000053d0"         .long   grunt_xdb3
    1443 00005c50 00005460"         .long   grunt_xdb4
    1444 00005c70 00000000          .long   0
    1445 00005c90           ggrdie_diag24x
    1446                    
    1447              0003  ggrdeath_speed  equ     3               ;death seq anim speed
    1448                    
    1449              0064  ggracceleration equ     100             ;decrement motion clock every X cycles
    1450              0003  ggrtop_speed    equ     3               ;as fast as they get
    1451              0004  ggrxmotion_inc  equ     0004h
    1452              0004  ggrymotion_inc  equ     0004h
    1453                    
    1454              0064  ggrgrunt_points equ     100             ;points for killing a grunt
    1455                    
    1456                    *****************************************************************************
    1457                    ******************************************************************************
    1458                    ******************************************************************************
    1459                    *
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   33

    1460                    *       POST SECTION
    1461                    *
    1462                            ;reg use
    1463                            ; a0 - (in) # of posts to create
    1464                            ; a1 - (in) type (0-8)
    1465                            ; a2 - (in) color (0-F)
    1466                    
    1467 00005c90            SUBRP  make_posts
    1468                    
    1469 00005c90     4c09          move    a0,a9           ;move the inputs to safer spots
    1470 00005ca0     ca4b          jrz     phvdone
    1471                    
    1472 00005cb0     4c2a          move    a1,a10          ;type
    1473                    
    1474 00005cc0     4c4b          move    a2,a11          ;color
    1475 00005cd0     210b          sla     8,a11
    1476 00005ce0     544b          or      a2,a11
    1477                    
    1478 00005cf0           phvanother_post
    1479 00005cf0           phvget_pos
    1480 00005cf0     09e0          movi    phvmax_y-phvmin_y,a0
         00005d00 000000b0  
    1481 00005d20     0d5f          calla   RNDRNG0
         00005d30 00000000! 
    1482 00005d50     4c02          move    a0,a2                   ;hide a0
    1483 00005d60     09e0          movi    phvmax_x-phvmin_x,a0
         00005d70 00000115  
    1484 00005d90     0d5f          calla   RNDRNG0
         00005da0 00000000! 
    1485 00005dc0     4c41          move    a2,a1                   ;put it back
    1486                    
    1487 00005dd0     0b20          addi    phvmin_x,a0
         00005de0 00000035  
    1488 00005e00     0b21          addi    phvmin_y,a1
         00005e10 0000002d  
    1489                    
    1490 00005e30     0b60          cmpi    phvmid_x1,a0
         00005e40 ffffff69  
    1491 00005e60     c60d          jrle    phvplace_post
    1492 00005e70     0b60          cmpi    phvmid_x2,a0
         00005e80 ffffff05  
    1493 00005ea0     c509          jrge    phvplace_post
    1494 00005eb0     0b61          cmpi    phvmid_y1,a1
         00005ec0 ffffffa7  
    1495 00005ee0     c605          jrle    phvplace_post
    1496 00005ef0     0b61          cmpi    phvmid_y2,a1
         00005f00 ffffff43  
    1497 00005f20     c501          jrge    phvplace_post
    1498 00005f30     c0db          jruc    phvget_pos
    1499                    
    1500 00005f40           phvplace_post
    1501 00005f40     2200          sla     16,a0                   ;X pos
    1502 00005f50     2201          sla     16,a1                   ;Y pos
    1503                    
    1504                            ;create the post object
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   34

    1505 00005f60     4d4e          move    a10,a14
    1506 00005f70                   X32     a14
    1507 00005f80     0b2e          addi    phvpost_types,a14
         00005f90 00006450' 
    1508 00005fb0     87ce          move    *a14,a14,L
    1509 00005fc0     87c2          move    *a14,a2,L               ;DON'T advance
    1510                    
    1511 00005fd0     5663          clr     a3
    1512 00005fe0     09e4          movi    DMACNZ,a4
         00005ff0 00008008  
    1513 00006010     09c5          movi    CLSNEUT|TYPPOST,a5
         00006020     0500  
    1514 00006030     56c6          clr     a6
    1515 00006040     56e7          clr     a7
    1516 00006050     0d5f          calla   BEGINOBJW
         00006060 00000000! 
    1517                    
    1518 00006080     b148          move    a10,*a8(OMISC),W        ;stuff the type in the object
         00006090     0210  
    1519                    
    1520 000060a0     b168          move    a11,*a8(OCONST),W
         000060b0     0160  
    1521                    
    1522 000060c0     09e0          movi    robo_p,a0
         000060d0 00000000! 
    1523 000060f0     0d5f          calla   pal_getf
         00006100 00000000! 
    1524 00006120     b008          move    a0,*a8(OPAL),W
         00006130     0150  
    1525                    
    1526 00006140     0d89          dsj     a9,phvanother_post
         00006150     ffb9  
    1527                    
    1528 00006160           phvdone
    1529 00006160     0960          rets
    1530                    
    1531                    
    1532              0035  phvmin_x        equ     53      ;post start outer boundaries
    1533              014a  phvmax_x        equ     347-17
    1534              002d  phvmin_y        equ     45
    1535              00dd  phvmax_y        equ     231-10
    1536                    
    1537              0096  phvmid_x1       equ     200-50  ;post start inner boundaries
    1538              00fa  phvmid_x2       equ     200+50
    1539              0058  phvmid_y1       equ     138-50
    1540              00bc  phvmid_y2       equ     138+50
    1541                    
    1542                    
    1543                    ******************************************************************************
    1544                    *
    1545                    *       post collision routines
    1546                    *
    1547                    
    1548 00006170            SUBR   post_die
    1549                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   35

    1550 00006170     09ce          movi    CLSDEAD,a14
         00006180     2000  
    1551 00006190     b1c8          move    a14,*a8(OID),W
         000061a0     0190  
    1552 000061b0                   CREATE  DEADPOST_PID,kill_post
    1553                    
    1554 00006230     0960          rets
    1555                    
    1556                    
    1557                            ;reg use
    1558                            ; a8 - * image
    1559                            ; a9 - anim pointer
    1560                    
    1561 00006240            SUBR   kill_post
    1562                    
    1563 00006240     b500          move    *a8(OMISC),a0,W
         00006250     0210  
    1564 00006260                   X32     a0
    1565 00006270     0b20          addi    phvpost_types,a0
         00006280 00006450' 
    1566 000062a0     8609          move    *a0,a9,L
    1567 000062b0     b50e          move    *a8(OCTRL),a14,W
         000062c0     00f0  
    1568 000062d0     0bce          xori    DMACNZ,a14
         000062e0 00008008  
    1569 00006300     0bae          ori     DMAWNZ,a14
         00006310 00008002  
    1570 00006330     b1c8          move    a14,*a8(OCTRL),W
         00006340     00f0  
    1571 00006350           phvkploop
    1572 00006350     9720          move    *a9+,a0,L
    1573 00006360     ca08          jrz     phvkpdone
    1574 00006370     0d5f          calla   civanic
         00006380 00000000! 
    1575 000063a0                   SLEEPK  phvdie_speed
    1576 000063e0     c0f6          jruc    phvkploop
    1577                    
    1578 000063f0           phvkpdone
    1579 000063f0     0d5f          calla   DELOBJA8
         00006400 00000000! 
    1580 00006420                   DIE
    1581                    
    1582                    
    1583              0003  phvdie_speed    equ     3
    1584                    
    1585 00006450           phvpost_types
    1586 00006450 00006590'         .long   phvstar         ;0
    1587 00006470 00006610'         .long   phvcrystal      ;1
    1588 00006490 00006690'         .long   phvdiamond      ;2
    1589 000064b0 00006710'         .long   phvsquare               ;3
    1590 000064d0 00006790'         .long   phvrectangle    ;4
    1591 000064f0 00006810'         .long   phvR2084                ;5
    1592 00006510 00006890'         .long   phvpcube                ;6
    1593 00006530 00006910'         .long   phvspiral               ;7
    1594 00006550 00006990'         .long   phvtriangle     ;8
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   36

    1595 00006570 00000000          .long   0
    1596 00006590           phvpost_typesx
    1597                    
    1598 00006590           phvstar
    1599 00006590 00005970"         .long   star_1,star_2,star_3,0
    1600                    
    1601 00006610           phvcrystal
    1602 00006610 00005b20"         .long   crystal_1,crystal_2,crystal_3,0
    1603                    
    1604 00006690           phvdiamond
    1605 00006690 00005cd0"         .long   diamond_1,diamond_2,diamond_3,0
    1606                    
    1607 00006710           phvsquare
    1608 00006710 00006390"         .long   square_1,square_2,square_3,0
    1609                    
    1610 00006790           phvrectangle
    1611 00006790 000066f0"         .long   rectangle_1,rectangle_2,rectangle_3,0
    1612                    
    1613 00006810           phvR2084
    1614 00006810 00005e80"         .long   R2084_1,R2084_2,R2084_3,0
    1615                    
    1616 00006890           phvpcube
    1617 00006890 00006030"         .long   pcube_1,pcube_2,pcube_3,0
    1618                    
    1619 00006910           phvspiral
    1620 00006910 000061e0"         .long   spiral_1,spiral_2,spiral_3,0
    1621                    
    1622 00006990           phvtriangle
    1623 00006990 00006540"         .long   triangle_1,triangle_2,triangle_3,0
    1624                    
    1625                    
    1626                    *****************************************************************************
    1627                    ******************************************************************************
    1628                    ******************************************************************************
    1629                    *
    1630                    *       HUMAN SECTION
    1631                    *
    1632                    
    1633 000000d0                   .bss    humans_saved,   16
    1634                    
    1635                            ;reg use
    1636                            ; a0 # of moms
    1637                            ; a1 # of dads
    1638                            ; a2 # of kids 
    1639                    
    1640 00006a10            SUBRP  make_humans
    1641                    
    1642                            ;initialize the savecount
    1643 00006a10     57ce          clr     a14
    1644 00006a20     058e          move    a14,@humans_saved,W
         00006a30 000000d0- 
    1645                    
    1646                            ;first make the moms
    1647 00006a50     4c00          move    a0,a0
    1648 00006a60     ca11          jrz     zegskip_moms
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   37

    1649 00006a70           zegmom_loop
    1650 00006a70                   PUSHP   a0,a1,a2
    1651 00006a90     0d3f          callr   zegrand_position
         00006aa0     0032  
    1652 00006ab0     09c9          movi    ROBJ_MOM,a9
         00006ac0     0001  
    1653 00006ad0                   CREATE  HUMAN_PID,human
    1654 00006b50                   PULLP   a0,a1,a2
    1655 00006b70     3e20          dsj     a0,zegmom_loop
    1656                    
    1657 00006b80           zegskip_moms
    1658                    
    1659                            ;dads
    1660 00006b80     4c21          move    a1,a1
    1661 00006b90     ca11          jrz     zegskip_dads
    1662 00006ba0           zegdad_loop
    1663 00006ba0                   PUSHP   a1,a2
    1664 00006bc0     0d3f          callr   zegrand_position
         00006bd0     001f  
    1665 00006be0     09c9          movi    ROBJ_DAD,a9
         00006bf0     0002  
    1666 00006c00                   CREATE  HUMAN_PID,human
    1667 00006c80                   PULLP   a1,a2
    1668 00006ca0     3e21          dsj     a1,zegdad_loop
    1669                    
    1670 00006cb0           zegskip_dads
    1671                    
    1672                            ;kids
    1673 00006cb0     4c42          move    a2,a2
    1674 00006cc0     ca0f          jrz     zegskip_kids
    1675 00006cd0           zegkid_loop
    1676 00006cd0                   PUSHP   a2
    1677 00006ce0     0d3f          callr   zegrand_position
         00006cf0     000d  
    1678 00006d00     09c9          movi    ROBJ_KID,a9
         00006d10     0003  
    1679 00006d20                   CREATE  HUMAN_PID,human
    1680 00006da0                   PULLP   a2
    1681 00006db0     3de2          dsj     a2,zegkid_loop
    1682                    
    1683 00006dc0           zegskip_kids
    1684 00006dc0     0960          rets
    1685                    
    1686                    
    1687                            ;reg use
    1688                            ; no input
    1689                            ;a10 - (ret) an X val
    1690                            ;a11 - (ret) a Y val
    1691                    
    1692 00006dd0            SUBRP zegrand_position
    1693 00006dd0     09e0          movi    zegmax_x-zegmin_x,a0
         00006de0 0000011b  
    1694 00006e00     0d5f          calla   RNDRNG0
         00006e10 00000000! 
    1695 00006e30     4c0a          move    a0,a10
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   38

    1696 00006e40     0b2a          addi    zegmin_x,a10
         00006e50 00000035  
    1697                    
    1698 00006e70     09e0          movi    zegmax_y-zegmin_y,a0
         00006e80 000000ad  
    1699 00006ea0     0d5f          calla   RNDRNG0
         00006eb0 00000000! 
    1700 00006ed0     4c0b          move    a0,a11
    1701 00006ee0     0b2b          addi    zegmin_y,a11
         00006ef0 0000002d  
    1702                    
    1703 00006f10     0960          rets
    1704                    
    1705                    
    1706                    ******************************************************************************
    1707                    *
    1708                    *       human process
    1709                    *
    1710 00006f20                   STRUCTPD
    1711 00006f20                   LONG    zegHITPOST      ;UHL post we've hit
    1712                    
    1713                            ;reg use
    1714                            ; a8 - hObject
    1715                            ; a9 - (in)  OID
    1716                            ; a9 - (use) image table address (zegmom_table, zegdad_table...)
    1717                            ;a10 - (in)  x
    1718                            ;a10 - (use) direction of motion (1-8)
    1719                            ;a11 - (in)  y
    1720                            ;a11 - (use) frame index (0-3)
    1721                    
    1722                    
    1723 00006f20            SUBRP  human
    1724                    
    1725 00006f20     0b49          cmpi    ROBJ_MOM,a9
         00006f30     fffe  
    1726 00006f40     ca07          jreq    zeginit_mom
    1727 00006f50     0b49          cmpi    ROBJ_DAD,a9
         00006f60     fffd  
    1728 00006f70     ca08          jreq    zeginit_dad
    1729 00006f80     0b49          cmpi    ROBJ_KID,a9
         00006f90     fffc  
    1730 00006fa0     ca09          jreq    zeginit_kid
    1731                    
    1732 00006fb0                   LOCKUP  ;bad objid
    1733                    
    1734 00006fc0           zeginit_mom
    1735 00006fc0     09e9          movi    zegmom_table,a9
         00006fd0 000089b0' 
    1736 00006ff0     c008          jruc    zegmake_obj
    1737                    
    1738 00007000           zeginit_dad
    1739 00007000     09e9          movi    zegdad_table,a9
         00007010 00008bb0' 
    1740 00007030     c004          jruc    zegmake_obj
    1741                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   39

    1742 00007040           zeginit_kid
    1743 00007040     09e9          movi    zegkid_table,a9
         00007050 00008db0' 
    1744 00007070     0300          jruc    zegmake_obj
    1745                    
    1746 00007080           zegmake_obj
    1747                            ;cweate a widdle people object
    1748 00007080     4d40          move    a10,a0
    1749 00007090     2200          sla     16,a0
    1750 000070a0     4d61          move    a11,a1
    1751 000070b0     2201          sla     16,a1
    1752 000070c0     b722          move    *a9(zegwalk_down),a2,L
         000070d0     0180  
    1753 000070e0     5663          clr     a3
    1754 000070f0     09e4          movi    DMAWNZ,a4
         00007100 00008002  
    1755 00007120     09c5          movi    CLSNEUT|TYPHUMAN,a5
         00007130     0400  
    1756 00007140     56c6          clr     a6
    1757 00007150     56e7          clr     a7
    1758 00007160     0d5f          calla   BEGINOBJW
         00007170 00000000! 
    1759                    
    1760                            ;choose a direction of motion
    1761 00007190     09c0          movi    7,a0
         000071a0     0007  
    1762 000071b0     0d5f          calla   RNDRNG0
         000071c0 00000000! 
    1763 000071e0     1020          inc     a0
    1764 000071f0     4c0a          move    a0,a10
    1765                    
    1766                            ;set the frame index
    1767 00007200     09cb          movi    3,a11
         00007210     0003  
    1768 00007220     0d3f          callr   zegadvance_frame
         00007230     0102  
    1769                    
    1770 00007240           zegmove_loop
    1771 00007240                   SLEEPK  zegsleep_time
    1772 00007280     0d3f          callr   zegrand_dirchange
         00007290     00e6  
    1773 000072a0     0d3f          callr   zegmove_onestep
         000072b0     00a4  
    1774 000072c0     4c00          move    a0,a0
    1775 000072d0     cb03          jrnz    zeghit_wall
    1776 000072e0     0d3f          callr   zegadvance_frame
         000072f0     00f6  
    1777 00007300     c0f3          jruc    zegmove_loop
    1778                    
    1779 00007310           zeghit_wall
    1780                            ;sleep first because: If you move and bump into both a wall and a
    1781                            ; post at the same time (could happen), and then you immediately
    1782                            ; reverse direction, you'll then get flipped AGAIN when you hit
    1783                            ; the post and get forwarded right through the wall.  yuck.  so
    1784                            ; instead when you hit a wall, wait a frame and let the post
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   40

    1785                            ; collisions sort themselves out, THEN change direction.
    1786 00007310                   SLEEPK  1
    1787 00007350     0d3f          callr   zegreverse_direction
         00007360     00e9  
    1788 00007370     0d3f          callr   zegadvance_frame
         00007380     00ed  
    1789 00007390     c0ea          jruc    zegmove_loop
    1790                    
    1791 000073a0           zeghit_post
    1792 000073a0     0d3f          callr   post_adjust
         000073b0     0040  
    1793 000073c0     0d3f          callr   zegadvance_frame
         000073d0     00e8  
    1794 000073e0     c0e5          jruc    zegmove_loop
    1795                    
    1796 000073f0           zegsaved
    1797                            ;sound
    1798 000073f0     09e0          movi    RS_RESCUE,a0
         00007400 00000002  
    1799 00007420     0d3f          callr   robo_sound
         00007430     0dab  
    1800                    
    1801                            ;increment the save count
    1802 00007440     05ae          move    @humans_saved,a14,W
         00007450 000000d0- 
    1803 00007470     102e          inc     a14
    1804 00007480     058e          move    a14,@humans_saved,W
         00007490 000000d0- 
    1805                    
    1806 000074b0     0b4e          cmpi    5,a14
         000074c0     fffa  
    1807 000074d0     c602          jrle    zegno_cap
    1808 000074e0     09ce          movi    5,a14
         000074f0     0005  
    1809 00007500           zegno_cap
    1810 00007500     142e          dec     a14
    1811                    
    1812 00007510                   PUSH    a14
    1813 00007520     208e          sla     4,a14
    1814 00007530     0b2e          addi    zegscore_table,a14
         00007540 00008960' 
    1815 00007560     85c0          move    *a14,a0,W
    1816 00007570     0d3f          callr   score_points
         00007580     0b45  
    1817 00007590                   PULL    a14
    1818                    
    1819 000075a0                   X32     a14
    1820 000075b0     0b2e          addi    zegsaved_table,a14
         000075c0 00008fb0' 
    1821 000075e0     87c0          move    *a14,a0,L
    1822 000075f0     0d5f          calla   civanic
         00007600 00000000! 
    1823                    
    1824 00007620                   SLEEP   120
    1825 00007670     0d5f          calla   DELOBJA8
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   41

         00007680 00000000! 
    1826 000076a0     c00e          jruc    zegdone
    1827                    
    1828 000076b0           zegkilled
    1829 000076b0     09e0          movi    skull,a0
         000076c0 00001170" 
    1830 000076e0     0d5f          calla   civanic
         000076f0 00000000! 
    1831                    
    1832 00007710                   SLEEP   120
    1833 00007760     0d5f          calla   DELOBJA8
         00007770 00000000! 
    1834                    ;       jruc    zegdone         ;fall through
    1835                    
    1836 00007790           zegdone
    1837 00007790                   DIE
    1838                    
    1839                    
    1840                    ******************************************************************************
    1841                    * Human has bounced into or started inside a post.  Make it better.
    1842                    * Do this by reversing the direction of the human and moving it forward
    1843                    * in the new direction until it's clear of the post.
    1844                    *
    1845                    
    1846                            ;reg use
    1847                            ; a0 - X overlap
    1848                            ; a1 - Y overlap
    1849                    
    1850 000077c0            SUBRP  post_adjust
    1851 000077c0                   PUSH    a0,a1,a2,a3,a7
    1852                    
    1853 000077e0     b7a7          move    *a13(zegHITPOST),a7,L
         000077f0     0100  
    1854                    
    1855 00007800     0d3f          callr   zegreverse_direction
         00007810     009e  
    1856                    
    1857                            ;calculate degree of X and Y overlap
    1858 00007820     4d42          move    a10,a2
    1859 00007830                   X32     a2
    1860 00007840     0b22          addi    zegwalk_increments,a2
         00007850 000087b0' 
    1861 00007870     9443          move    *a2+,a3,W       ;y vel
    1862 00007880     ce0d          jrn     zegyvel_neg
    1863 00007890     ca09          jrz     zegyvel_zero
    1864                    
    1865 000078a0           zegyvel_pos
    1866 000078a0     b4e1          move    *a7(OYPOS),a1
         000078b0     00b0  
    1867 000078c0     b4ee          move    *a7(OSIZEY),a14
         000078d0     0140  
    1868 000078e0     41c1          add     a14,a1
    1869 000078f0     b50e          move    *a8(OYPOS),a14
         00007900     00b0  
    1870 00007910     45c1          sub     a14,a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   42

    1871 00007920     c00b          jruc    zegdo_xvel
    1872 00007930           zegyvel_zero
    1873 00007930     09c1          movi    100h,a1
         00007940     0100  
    1874 00007950     c008          jruc    zegdo_xvel
    1875 00007960           zegyvel_neg
    1876 00007960     b501          move    *a8(OYPOS),a1
         00007970     00b0  
    1877 00007980     b50e          move    *a8(OSIZEY),a14
         00007990     0140  
    1878 000079a0     41c1          add     a14,a1
    1879 000079b0     b4ee          move    *a7(OYPOS),a14
         000079c0     00b0  
    1880 000079d0     45c1          sub     a14,a1
    1881                    ;       jruc    zegdo_xvel
    1882                    
    1883 000079e0           zegdo_xvel
    1884 000079e0     8443          move    *a2,a3,W        ;x vel
    1885 000079f0     ce0d          jrn     zegxvel_neg
    1886 00007a00     ca09          jrz     zegxvel_zero
    1887                    
    1888 00007a10           zegxvel_pos
    1889 00007a10     b4e0          move    *a7(OXPOS),a0
         00007a20     0090  
    1890 00007a30     b4ee          move    *a7(OSIZEX),a14
         00007a40     0130  
    1891 00007a50     41c0          add     a14,a0
    1892 00007a60     b50e          move    *a8(OXPOS),a14
         00007a70     0090  
    1893 00007a80     45c0          sub     a14,a0
    1894 00007a90     c00b          jruc    zegovlap_done
    1895 00007aa0           zegxvel_zero
    1896 00007aa0     09c0          movi    100h,a0
         00007ab0     0100  
    1897 00007ac0     c008          jruc    zegovlap_done
    1898 00007ad0           zegxvel_neg
    1899 00007ad0     b500          move    *a8(OXPOS),a0
         00007ae0     0090  
    1900 00007af0     b50e          move    *a8(OSIZEX),a14
         00007b00     0130  
    1901 00007b10     41c0          add     a14,a0
    1902 00007b20     b4ee          move    *a7(OXPOS),a14
         00007b30     0090  
    1903 00007b40     45c0          sub     a14,a0
    1904                    ;       jruc    zegovlap_done
    1905                    
    1906 00007b50           zegovlap_done
    1907                            ;a0 and a1 are the X and Y overlaps, respectively.  We need only
    1908                            ; worry about the smallest of the two and move that many steps.  Note
    1909                            ; that if velocity in a given direction is zero, the overlap is
    1910                            ; set to some outrageously large value so that the other direction
    1911                            ; is all that counts.
    1912 00007b50     4820          cmp     a1,a0
    1913 00007b60     c601          jrle    zeglow_set
    1914 00007b70     4c20          move    a1,a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   43

    1915 00007b80           zeglow_set
    1916                            ;a0 is now the smallest.
    1917 00007b80     4c01          move    a0,a1
    1918 00007b90     4d42          move    a10,a2
    1919 00007ba0                   X32     a2
    1920 00007bb0     0b22          addi    zegwalk_increments,a2
         00007bc0 000087b0' 
    1921 00007be0     9443          move    *a2+,a3,W       ;y vel
    1922 00007bf0     5c61          mpys    a3,a1
    1923 00007c00     8443          move    *a2,a3,W        ;x vel
    1924 00007c10     5c03          mpys    a0,a3
    1925 00007c20     4c60          move    a3,a0
    1926                    
    1927                            ;a0 and a1 now hold X and Y adjustments, respectively.
    1928 00007c30     b50e          move    *a8(OXPOS),a14
         00007c40     0090  
    1929 00007c50     400e          add     a0,a14
    1930 00007c60     b1c8          move    a14,*a8(OXPOS)
         00007c70     0090  
    1931 00007c80     b50e          move    *a8(OYPOS),a14
         00007c90     00b0  
    1932 00007ca0     402e          add     a1,a14
    1933 00007cb0     b1c8          move    a14,*a8(OYPOS)
         00007cc0     00b0  
    1934                            
    1935 00007cd0                   PULL    a0,a1,a2,a3,a7
    1936 00007cf0     0960          rets
    1937                    
    1938                    
    1939                    ******************************************************************************
    1940                    *
    1941                    *       human movement/animation routine
    1942                    *
    1943                    
    1944                            ;reg use
    1945                            ; a0 - scratch
    1946                            ; a0 (out) - walls hit (0-2)
    1947                            ; a1 - scratch
    1948                            ; a8 - (in)  hObject
    1949                            ; a9 - (in)  image table address (zegmom_table, zegdad_table...)
    1950                            ;a10 - (in)  direction of motion (1-8)
    1951                            ;a11 - (in)  frame index (0-3)
    1952                    
    1953 00007d00            SUBRP  zegmove_onestep
    1954                    
    1955                            ;move the object
    1956 00007d00     4d41          move    a10,a1
    1957 00007d10                   X32     a1
    1958 00007d20     0b21          addi    zegwalk_increments,a1
         00007d30 000087b0' 
    1959 00007d50     942e          move    *a1+,a14,W
    1960 00007d60     b500          move    *a8(OYPOS),a0,W
         00007d70     00b0  
    1961 00007d80     41c0          add     a14,a0
    1962 00007d90     b008          move    a0,*a8(OYPOS),W
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   44

         00007da0     00b0  
    1963 00007db0     942e          move    *a1+,a14,W
    1964 00007dc0     b500          move    *a8(OXPOS),a0,W
         00007dd0     0090  
    1965 00007de0     41c0          add     a14,a0
    1966 00007df0     b008          move    a0,*a8(OXPOS),W
         00007e00     0090  
    1967                    
    1968 00007e10     5621          clr     a1
    1969 00007e20     b500          move    *a8(OXPOS),a0,W
         00007e30     0090  
    1970                    
    1971 00007e40     0b60          cmpi    zegmin_x,a0
         00007e50 ffffffca  
    1972 00007e70     c506          jrge    zegnot_lowx
    1973                    
    1974                            ;low x
    1975 00007e80     1021          inc     a1
    1976 00007e90     09e0          movi    zegmin_x,a0
         00007ea0 00000035  
    1977 00007ec0     b008          move    a0,*a8(OXPOS),W
         00007ed0     0090  
    1978                    
    1979 00007ee0           zegnot_lowx
    1980 00007ee0     0b60          cmpi    zegmax_x,a0
         00007ef0 fffffeaf  
    1981 00007f10     c606          jrle    zegnot_highx
    1982                    
    1983                            ;high x
    1984 00007f20     1021          inc     a1
    1985 00007f30     09e0          movi    zegmax_x,a0
         00007f40 00000150  
    1986 00007f60     b008          move    a0,*a8(OXPOS),W
         00007f70     0090  
    1987                    
    1988 00007f80           zegnot_highx
    1989                    
    1990 00007f80     b500          move    *a8(OYPOS),a0,W
         00007f90     00b0  
    1991                    
    1992 00007fa0     0b60          cmpi    zegmin_y,a0
         00007fb0 ffffffd2  
    1993 00007fd0     c506          jrge    zegnot_lowy
    1994                    
    1995                            ;low y
    1996 00007fe0     1021          inc     a1
    1997 00007ff0     09e0          movi    zegmin_y,a0
         00008000 0000002d  
    1998 00008020     b008          move    a0,*a8(OYPOS),W
         00008030     00b0  
    1999                    
    2000 00008040           zegnot_lowy
    2001 00008040     0b60          cmpi    zegmax_y,a0
         00008050 ffffff25  
    2002 00008070     c606          jrle    zegnot_highy
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   45

    2003                    
    2004                            ;high y
    2005 00008080     1021          inc     a1
    2006 00008090     09e0          movi    zegmax_y,a0
         000080a0 000000da  
    2007 000080c0     b008          move    a0,*a8(OYPOS),W
         000080d0     00b0  
    2008                    
    2009 000080e0           zegnot_highy
    2010 000080e0     4c20          move    a1,a0
    2011 000080f0     0960          rets
    2012                    
    2013                    
    2014                    ******************************************************************************
    2015                    * Changes direction one time in zegdirchange_chance.
    2016                    *
    2017                    
    2018 00008100            SUBRP  zegrand_dirchange
    2019                    
    2020                            ;1 chance in zegdirchange_chance of spontaneously switching direction
    2021 00008100     09e0          movi    zegdirchange_chance,a0
         00008110 00000028  
    2022 00008130     0d5f          calla   RNDRNG0
         00008140 00000000! 
    2023 00008160     4c00          move    a0,a0
    2024 00008170     cb07          jrnz    zegdirchange_done
    2025 00008180     09c0          movi    7,a0
         00008190     0007  
    2026 000081a0     0d5f          calla   RNDRNG0
         000081b0 00000000! 
    2027 000081d0     1020          inc     a0
    2028 000081e0     4c0a          move    a0,a10
    2029                    
    2030 000081f0           zegdirchange_done
    2031 000081f0     0960          rets
    2032                    
    2033                    
    2034                    ******************************************************************************
    2035                    * Reverses direction
    2036                    *
    2037                    
    2038 00008200            SUBRP  zegreverse_direction
    2039                    
    2040                            ;reverse direction of motion
    2041 00008200     0bea          subi    4,a10
         00008210     fffb  
    2042 00008220     c102          jrp     zegrd_done
    2043 00008230     0b0a          addi    8,a10
         00008240     0008  
    2044 00008250           zegrd_done
    2045 00008250     0960          rets
    2046                    
    2047                    ******************************************************************************
    2048                    * Advances the frame
    2049                    *
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   46

    2050                    
    2051 00008260            SUBRP  zegadvance_frame
    2052                    
    2053                            ;advance the frame and set the new image
    2054 00008260     102b          inc     a11
    2055 00008270     0b4b          cmpi    4,a11
         00008280     fffb  
    2056 00008290     cb01          jrne    zegno_wrap
    2057                            ;wraparound.  reset to start
    2058 000082a0     576b          clr     a11
    2059                    
    2060 000082b0           zegno_wrap
    2061                            ;calculate the next frame
    2062 000082b0     4d20          move    a9,a0
    2063 000082c0     4d41          move    a10,a1
    2064 000082d0     2081          sla     4,a1            ;mult by 10h
    2065 000082e0     0b21          addi    zegmotion_table,a1
         000082f0 000088d0' 
    2066                    
    2067                            ;a1 now points to one of the entries in zegmotion table
    2068 00008310     8421          move    *a1,a1,W
    2069 00008320     4020          add     a1,a0
    2070                    
    2071                            ;a0 now points to an entry in zegxxx_table
    2072 00008330     4d61          move    a11,a1
    2073 00008340                   X32     a1              ;mult by 20h
    2074 00008350     4020          add     a1,a0
    2075 00008360     8600          move    *a0,a0,L
    2076                    
    2077 00008370     0d5f          calla   civanic
         00008380 00000000! 
    2078                    
    2079 000083a0     0960          rets
    2080                    
    2081                    
    2082                    ******************************************************************************
    2083                    *
    2084                    *       human collision routines
    2085                    *
    2086                    
    2087 000083b0            SUBR   human_saved
    2088 000083b0                   PUSH    a1,a7
    2089                    
    2090                            ;change the obj id
    2091 000083d0     09ce          movi    CLSDEAD,a14
         000083e0     2000  
    2092 000083f0     b1c8          move    a14,*a8(OID),W
         00008400     0190  
    2093 00008410     b700          move    *a8(OPLINK),a0,L
         00008420     01a0  
    2094 00008430     09c1          movi    SAVEDHUMAN_PID,a1
         00008440     0233  
    2095 00008450     09e7          movi    zegsaved,a7
         00008460 000073f0' 
    2096 00008480     0d5f          calla   XFERPROC
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   47

         00008490 00000000! 
    2097                    
    2098 000084b0                   PULL    a1,a7
    2099 000084d0     0960          rets
    2100                    
    2101 000084e0            SUBR   human_killed
    2102 000084e0                   PUSH    a1,a7
    2103                    
    2104 00008500     09ce          movi    CLSDEAD,a14
         00008510     2000  
    2105 00008520     b1c8          move    a14,*a8(OID),W
         00008530     0190  
    2106 00008540     b700          move    *a8(OPLINK),a0,L
         00008550     01a0  
    2107 00008560     09c1          movi    DEADHUMAN_PID,a1
         00008570     0234  
    2108 00008580     09e7          movi    zegkilled,a7
         00008590 000076b0' 
    2109 000085b0     0d5f          calla   XFERPROC
         000085c0 00000000! 
    2110                    
    2111 000085e0                   PULL    a1,a7
    2112 00008600     0960          rets
    2113                    
    2114                    
    2115 00008610            SUBR   human_hitpost
    2116 00008610                   PUSH    a1,a7
    2117                    
    2118 00008630     4c01          move    a0,a1
    2119 00008640     b700          move    *a8(OPLINK),a0,L
         00008650     01a0  
    2120 00008660     b220          move    a1,*a0(zegHITPOST),L
         00008670     0100  
    2121 00008680     b608          move    *a0(PA8),a8,L
         00008690     00c0  
    2122 000086a0     b609          move    *a0(PA9),a9,L
         000086b0     00a0  
    2123 000086c0     b60a          move    *a0(PA10),a10,L
         000086d0     0080  
    2124 000086e0     b60b          move    *a0(PA11),a11,L
         000086f0     0060  
    2125 00008700     09c1          movi    HUMAN_PID,a1
         00008710     0210  
    2126 00008720     09e7          movi    zeghit_post,a7
         00008730 000073a0' 
    2127 00008750     0d5f          calla   XFERPROC
         00008760 00000000! 
    2128                    
    2129 00008780                   PULL    a1,a7
    2130 000087a0     0960          rets
    2131                    
    2132                    ******************************************************************************
    2133                    *
    2134                    *       human configuration data
    2135                    *
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   48

    2136                    
    2137                    
    2138              0035  zegmin_x        equ     53      ;human start/motion outer boundaries
    2139              0150  zegmax_x        equ     347-11
    2140              002d  zegmin_y        equ     45
    2141              00da  zegmax_y        equ     231-13
    2142                    
    2143              0007  zegsleep_time   equ     7
    2144              0001  zegx_step               equ     1
    2145              0001  zegy_step               equ     1
    2146                    
    2147              0028  zegdirchange_chance     equ     40
    2148                    
    2149 000087b0           zegwalk_increments
    2150 000087b0     0000          .word   0,0                     ;because direction is 1-8, not 0-7
    2151 000087d0     ffff          .word   -zegy_step,0
    2152 000087f0     ffff          .word   -zegy_step,zegx_step
    2153 00008810     0000          .word   0,zegx_step
    2154 00008830     0001          .word   zegy_step,zegx_step
    2155 00008850     0001          .word   zegy_step,0
    2156 00008870     0001          .word   zegy_step,-zegx_step
    2157 00008890     0000          .word   0,-zegx_step
    2158 000088b0     ffff          .word   -zegy_step,-zegx_step
    2159 000088d0           zegwalk_incrementsx
    2160                    
    2161 000088d0           zegmotion_table
    2162 000088d0     0000          .word   0                       ;because direction is 1-8, not 0-7
    2163 000088e0     0100          .word   zegwalk_up
    2164 000088f0     0080          .word   zegwalk_right
    2165 00008900     0080          .word   zegwalk_right
    2166 00008910     0080          .word   zegwalk_right
    2167 00008920     0180          .word   zegwalk_down
    2168 00008930     0000          .word   zegwalk_left
    2169 00008940     0000          .word   zegwalk_left
    2170 00008950     0000          .word   zegwalk_left
    2171 00008960           zegmotion_tablex
    2172                    
    2173                    ;image table direction offsets
    2174              0000  zegwalk_left    equ     0000h
    2175              0080  zegwalk_right   equ     zegwalk_left + (4 * 20h)
    2176              0100  zegwalk_up      equ     zegwalk_right + (4 * 20h)
    2177              0180  zegwalk_down    equ     zegwalk_up + (4 * 20h)
    2178                    
    2179 00008960           zegscore_table
    2180 00008960     03e8          .word   1000,2000,3000,4000,5000
    2181 000089b0           zegscore_tablex
    2182                    
    2183                    ;image tables
    2184 000089b0           zegmom_table
    2185 000089b0 000014d0"         .long   mom_l1
    2186 000089d0 00001560"         .long   mom_l2
    2187 000089f0 000014d0"         .long   mom_l1
    2188 00008a10 000015f0"         .long   mom_l3
    2189                    
    2190 00008a30 00001680"         .long   mom_r1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   49

    2191 00008a50 00001710"         .long   mom_r2
    2192 00008a70 00001680"         .long   mom_r1
    2193 00008a90 000017a0"         .long   mom_r3
    2194                    
    2195 00008ab0 000019e0"         .long   mom_u1
    2196 00008ad0 00001a70"         .long   mom_u2
    2197 00008af0 000019e0"         .long   mom_u1
    2198 00008b10 00001b00"         .long   mom_u3
    2199                    
    2200 00008b30 00001830"         .long   mom_d1
    2201 00008b50 000018c0"         .long   mom_d2
    2202 00008b70 00001830"         .long   mom_d1
    2203 00008b90 00001950"         .long   mom_d3
    2204 00008bb0           zegmom_tablex
    2205                    
    2206 00008bb0           zegdad_table
    2207 00008bb0 00001b90"         .long   dad_l1
    2208 00008bd0 00001c20"         .long   dad_l2
    2209 00008bf0 00001b90"         .long   dad_l1
    2210 00008c10 00001cb0"         .long   dad_l3
    2211                    
    2212 00008c30 00001d40"         .long   dad_r1
    2213 00008c50 00001dd0"         .long   dad_r2
    2214 00008c70 00001d40"         .long   dad_r1
    2215 00008c90 00001e60"         .long   dad_r3
    2216                    
    2217 00008cb0 000020a0"         .long   dad_u1
    2218 00008cd0 00002130"         .long   dad_u2
    2219 00008cf0 000020a0"         .long   dad_u1
    2220 00008d10 000021c0"         .long   dad_u3
    2221                    
    2222 00008d30 00001ef0"         .long   dad_d1
    2223 00008d50 00001f80"         .long   dad_d2
    2224 00008d70 00001ef0"         .long   dad_d1
    2225 00008d90 00002010"         .long   dad_d3
    2226 00008db0           zegdad_tablex
    2227                    
    2228 00008db0           zegkid_table
    2229 00008db0 00002250"         .long   kid_l1
    2230 00008dd0 000022e0"         .long   kid_l2
    2231 00008df0 00002250"         .long   kid_l1
    2232 00008e10 00002370"         .long   kid_l3
    2233                    
    2234 00008e30 00002400"         .long   kid_r1
    2235 00008e50 00002490"         .long   kid_r2
    2236 00008e70 00002400"         .long   kid_r1
    2237 00008e90 00002520"         .long   kid_r3
    2238                    
    2239 00008eb0 00002760"         .long   kid_u1
    2240 00008ed0 000027f0"         .long   kid_u2
    2241 00008ef0 00002760"         .long   kid_u1
    2242 00008f10 00002880"         .long   kid_u3
    2243                    
    2244 00008f30 000025b0"         .long   kid_d1
    2245 00008f50 00002640"         .long   kid_d2
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   50

    2246 00008f70 000025b0"         .long   kid_d1
    2247 00008f90 000026d0"         .long   kid_d3
    2248 00008fb0           zegkid_tablex
    2249                    
    2250 00008fb0           zegsaved_table
    2251 00008fb0 00001200"         .long   one_k
    2252 00008fd0 00001290"         .long   two_k
    2253 00008ff0 00001320"         .long   three_k
    2254 00009010 000013b0"         .long   four_k
    2255 00009030 00001440"         .long   five_k
    2256 00009050           zegsaved_tablex
    2257                    
    2258                    
    2259                    *****************************************************************************
    2260                    ******************************************************************************
    2261                    ******************************************************************************
    2262                    *
    2263                    *       HULK SECTION
    2264                    *
    2265                    
    2266                            ;reg use
    2267                            ; a0 - (in) # of hulks
    2268                    
    2269 00009050            SUBRP  make_hulks
    2270                    
    2271 00009050     4c00          move    a0,a0
    2272 00009060     ca31          jrz     alfdone
    2273                    
    2274 00009070           alfanother_hulk
    2275 00009070                   PUSHP   a0
    2276                    
    2277 00009080           alfget_pos
    2278 00009080     09e0          movi    alfmax_x-alfmin_x,a0
         00009090 00000119  
    2279 000090b0     0d5f          calla   RNDRNG0
         000090c0 00000000! 
    2280 000090e0     4c09          move    a0,a9
    2281 000090f0     09e0          movi    alfmax_y-alfmin_y,a0
         00009100 000000aa  
    2282 00009120     0d5f          calla   RNDRNG0
         00009130 00000000! 
    2283 00009150     4c0a          move    a0,a10
    2284                    
    2285 00009160     0b29          addi    alfmin_x,a9
         00009170 00000035  
    2286 00009190     0b2a          addi    alfmin_y,a10
         000091a0 0000002d  
    2287                    
    2288 000091c0     0b69          cmpi    alfmid_x1,a9
         000091d0 ffffff69  
    2289 000091f0     c60d          jrle    alfplace_hulk
    2290 00009200     0b69          cmpi    alfmid_x2,a9
         00009210 ffffff05  
    2291 00009230     c509          jrge    alfplace_hulk
    2292 00009240     0b6a          cmpi    alfmid_y1,a10
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   51

         00009250 ffffffa7  
    2293 00009270     c605          jrle    alfplace_hulk
    2294 00009280     0b6a          cmpi    alfmid_y2,a10
         00009290 ffffff43  
    2295 000092b0     c501          jrge    alfplace_hulk
    2296 000092c0     c0db          jruc    alfget_pos
    2297                    
    2298 000092d0           alfplace_hulk
    2299                            ;assign a random starting position
    2300 000092d0                   CREATE  HULK_PID,hulk
    2301 00009350                   PULLP   a0
    2302 00009360     0d80          dsj     a0,alfanother_hulk
         00009370     ffcf  
    2303                    
    2304 00009380           alfdone
    2305 00009380     0960          rets
    2306                    
    2307                    
    2308              0035  alfmin_x        equ     53      ;hulk start outer boundaries
    2309              014e  alfmax_x        equ     347-13
    2310              002d  alfmin_y        equ     45
    2311              00d7  alfmax_y        equ     231-16
    2312                    
    2313              0096  alfmid_x1       equ     200-50  ;hulk start inner boundaries
    2314              00fa  alfmid_x2       equ     200+50
    2315              0058  alfmid_y1       equ     138-50
    2316              00bc  alfmid_y2       equ     138+50
    2317                    
    2318                    
    2319                    *****************************************************************************
    2320                    *
    2321                    *       hulk process
    2322                    *
    2323                    
    2324 00009390                   STRUCTPD
    2325 00009390                   LONG    xvzPD_SCRIPT    ;UHL script head
    2326 00009390                   WORD    xvzPD_FRAME_NDX ;UHW frame index
    2327                    
    2328                            ;reg use
    2329                            ; a8 - object handle
    2330                            ; a9 - (in)  starting x
    2331                            ; a9 - (use) frame change count
    2332                            ;a10 - (in)  starting y
    2333                            ;a11 - direction of motion (0-3)
    2334                    
    2335 00009390            SUBRP  hulk
    2336                    
    2337                            ;choose a direction of motion
    2338 00009390     09c0          movi    3,a0
         000093a0     0003  
    2339 000093b0     0d5f          calla   RNDRNG0
         000093c0 00000000! 
    2340 000093e0     4c0b          move    a0,a11
    2341                    
    2342 000093f0                   X32     a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   52

    2343 00009400     0b20          addi    xvzanim_list,a0
         00009410 0000a4d0' 
    2344 00009430     8606          move    *a0,a6,L
    2345 00009440     b2cd          move    a6,*a13(xvzPD_SCRIPT),L
         00009450     0100  
    2346 00009460     56e7          clr     a7
    2347 00009470     b0ed          move    a7,*a13(xvzPD_FRAME_NDX),W
         00009480     0120  
    2348                    
    2349                            ;create the hulk object
    2350 00009490     4d20          move    a9,a0           ;x pos
    2351 000094a0     2200          sla     16,a0
    2352 000094b0     4d41          move    a10,a1          ;y pos
    2353 000094c0     2201          sla     16,a1
    2354                    
    2355 000094d0     4cee          move    a7,a14          ;img
    2356 000094e0                   X32     a14
    2357 000094f0     40ce          add     a6,a14
    2358 00009500     87c2          move    *a14,a2,L
    2359                    
    2360 00009510     5663          clr     a3
    2361 00009520     09e4          movi    DMAWNZ,a4
         00009530 00008002  
    2362 00009550     09e5          movi    CLSENMY|TYPHULK,a5
         00009560 00008600  
    2363 00009580     56c6          clr     a6
    2364 00009590     56e7          clr     a7
    2365 000095a0     0d5f          calla   BEGINOBJW
         000095b0 00000000! 
    2366                    
    2367                            ;set the move counter
    2368 000095d0     09e0          movi    xvzmove_freq/2,a0
         000095e0 00000004  
    2369 00009600     0d5f          calla   RNDRNG0
         00009610 00000000! 
    2370 00009630     0b20          addi    xvzmove_freq,a0
         00009640 00000008  
    2371 00009660     4c09          move    a0,a9
    2372                    
    2373 00009670           xvzloop
    2374 00009670                   SLEEPK  1
    2375 000096b0     3ca9          dsj     a9,xvzloop
    2376 000096c0     0d3f          callr   xvzmove_hulk
         000096d0     000a  
    2377 000096e0     09e9          movi    xvzmove_freq,a9
         000096f0 00000008  
    2378 00009710     c0f5          jruc    xvzloop
    2379                    
    2380                    
    2381 00009720           xvzbeen_shot    ;we immediately wake up here if we've been hit and moved
    2382                                    ; by a player bullet.
    2383 00009720     0d3f          callr   xvzdo_bounds_check
         00009730     0015  
    2384 00009740     c0f2          jruc    xvzloop
    2385                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   53

    2386 00009750                   DIE
    2387                    
    2388                    
    2389                    ******************************************************************************
    2390                    *
    2391                    *       hulk move routine
    2392                    *
    2393                    
    2394                            ;reg use
    2395                            ; a0 scratch
    2396                            ; a1 scratch
    2397                            ; a8 object handle
    2398                            ;a11 direction of motion (0-3)
    2399                    
    2400 00009780            SUBRP  xvzmove_hulk
    2401                            ;move him
    2402 00009780     4d6e          move    a11,a14
    2403 00009790                   X32     a14
    2404 000097a0     0b2e          addi    xvzmove_table,a14
         000097b0 0000a450' 
    2405 000097d0     95c0          move    *a14+,a0,W
    2406 000097e0     85c1          move    *a14,a1,W
    2407 000097f0     b50e          move    *a8(OXPOS),a14,W
         00009800     0090  
    2408 00009810     400e          add     a0,a14
    2409 00009820     b1c8          move    a14,*a8(OXPOS),W
         00009830     0090  
    2410 00009840     b50e          move    *a8(OYPOS),a14,W
         00009850     00b0  
    2411 00009860     402e          add     a1,a14
    2412 00009870     b1c8          move    a14,*a8(OYPOS),W
         00009880     00b0  
    2413                    
    2414                            ;
    2415                            ;note the fall-through here
    2416                            ;
    2417                    
    2418                            ;bounds check
    2419 00009890            SUBRP  xvzdo_bounds_check
    2420 00009890     5621          clr     a1
    2421                    
    2422 000098a0     5600          clr     a0
    2423 000098b0     b500          move    *a8(OXPOS),a0,W
         000098c0     0090  
    2424 000098d0     0b60          cmpi    xvzlow_x,a0
         000098e0 ffffffca  
    2425 00009900     c405          jrlt    xvztoo_left
    2426 00009910     0b60          cmpi    xvzhigh_x,a0
         00009920 fffffeb1  
    2427 00009940     c70a          jrgt    xvztoo_right
    2428 00009950     c011          jruc    xvzvert_check
    2429                    
    2430 00009960           xvztoo_left
    2431 00009960     09ee          movi    xvzlow_x,a14
         00009970 00000035  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   54

    2432 00009990     b1c8          move    a14,*A8(OXPOS),W
         000099a0     0090  
    2433 000099b0     0ba1          ori     M_HIT_LEFT,a1
         000099c0 00000008  
    2434 000099e0     c008          jruc    xvzvert_check
    2435                    
    2436 000099f0           xvztoo_right
    2437 000099f0     09ee          movi    xvzhigh_x,a14
         00009a00 0000014e  
    2438 00009a20     b1c8          move    a14,*A8(OXPOS),W
         00009a30     0090  
    2439 00009a40     0ba1          ori     M_HIT_RIGHT,a1
         00009a50 00000002  
    2440                    ;       jruc    xvzvert_check
    2441                    
    2442 00009a70           xvzvert_check
    2443 00009a70     5600          clr     a0
    2444 00009a80     b500          move    *a8(OYPOS),a0,W
         00009a90     00b0  
    2445 00009aa0     0b60          cmpi    xvzlow_y,a0
         00009ab0 ffffffd2  
    2446 00009ad0     c405          jrlt    xvztoo_high
    2447 00009ae0     0b60          cmpi    xvzhigh_y,a0
         00009af0 ffffff28  
    2448 00009b10     c70a          jrgt    xvztoo_low
    2449 00009b20     c012          jruc    xvzdone_boundcheck
    2450                    
    2451 00009b30           xvztoo_high
    2452 00009b30     09ee          movi    xvzlow_y,a14
         00009b40 0000002d  
    2453 00009b60     b1c8          move    a14,*A8(OYPOS),W
         00009b70     00b0  
    2454 00009b80     0ba1          ori     M_HIT_TOP,a1
         00009b90 00000001  
    2455 00009bb0     c009          jruc    xvzdone_boundcheck
    2456                    
    2457 00009bc0           xvztoo_low
    2458 00009bc0     09ee          movi    xvzhigh_y,a14
         00009bd0 000000d7  
    2459 00009bf0     b1c8          move    a14,*A8(OYPOS),W
         00009c00     00b0  
    2460 00009c10     0ba1          ori     M_HIT_BOTTOM,a1
         00009c20 00000004  
    2461 00009c40     0300          jruc    xvzdone_boundcheck
    2462                    
    2463 00009c50           xvzdone_boundcheck
    2464 00009c50     4c21          move    a1,a1
    2465 00009c60     cb0a          jrnz    xvzchange_direction
    2466                    
    2467 00009c70           xvzno_wallhit
    2468 00009c70     09e0          movi    xvzturn_prob,a0
         00009c80 0000001e  
    2469 00009ca0                   PUSH    a1
    2470 00009cb0     0d5f          calla   RNDRNG0
         00009cc0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   55

    2471 00009ce0                   PULL    a1
    2472 00009cf0     4c00          move    a0,a0
    2473 00009d00     cb3d          jrnz    xvzdone_moving
    2474                    
    2475                            ;spontaneous direction change.  random for now
    2476                    ;       jruc    xvzchange_direction     ;fall through
    2477                    
    2478 00009d10           xvzchange_direction
    2479                            ;turn 90 degrees by randomly incrementing or decrementing direction
    2480 00009d10     09c0          movi    1,a0
         00009d20     0001  
    2481 00009d30                   PUSH    a1
    2482 00009d40     0d5f          calla   RNDRNG0
         00009d50 00000000! 
    2483 00009d70                   PULL    a1
    2484 00009d80     4c00          move    a0,a0
    2485 00009d90     ca02          jrz     xvzinc_direction
    2486 00009da0     142b          dec     a11
    2487 00009db0     c001          jruc    xvzdir_rangecheck
    2488                            
    2489 00009dc0           xvzinc_direction
    2490 00009dc0     102b          inc     a11
    2491                    
    2492 00009dd0           xvzdir_rangecheck
    2493 00009dd0     0b4b          cmpi    -1,a11
         00009de0     0000  
    2494 00009df0     cb02          jrne    xvzdir_notlow
    2495 00009e00     09cb          movi    3,a11
         00009e10     0003  
    2496                    
    2497 00009e20           xvzdir_notlow
    2498 00009e20     0b4b          cmpi    4,a11
         00009e30     fffb  
    2499 00009e40     cb01          jrne    xvzdir_changed
    2500 00009e50     576b          clr     a11
    2501                    
    2502 00009e60           xvzdir_changed
    2503                    
    2504                            ;verify that this is a good direction
    2505 00009e60     0b4b          cmpi    0,a11
         00009e70     ffff  
    2506 00009e80     ca09          jreq    xvzvalidate_up
    2507 00009e90     0b4b          cmpi    1,a11
         00009ea0     fffe  
    2508 00009eb0     ca0b          jreq    xvzvalidate_right
    2509 00009ec0     0b4b          cmpi    2,a11
         00009ed0     fffd  
    2510 00009ee0     ca0d          jreq    xvzvalidate_down
    2511 00009ef0     0b4b          cmpi    3,a11
         00009f00     fffc  
    2512 00009f10     ca0f          jreq    xvzvalidate_left
    2513                    
    2514 00009f20           xvzvalidate_up
    2515 00009f20     0b81          andi    M_HIT_TOP,a1
         00009f30 fffffffe  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   56

    2516 00009f50     cbdb          jrnz    xvzchange_direction
    2517 00009f60     c00f          jruc    xvzvalid_dir
    2518 00009f70           xvzvalidate_right
    2519 00009f70     0b81          andi    M_HIT_RIGHT,a1
         00009f80 fffffffd  
    2520 00009fa0     cbd6          jrnz    xvzchange_direction
    2521 00009fb0     c00a          jruc    xvzvalid_dir
    2522 00009fc0           xvzvalidate_down
    2523 00009fc0     0b81          andi    M_HIT_BOTTOM,a1
         00009fd0 fffffffb  
    2524 00009ff0     cbd1          jrnz    xvzchange_direction
    2525 0000a000     c005          jruc    xvzvalid_dir
    2526 0000a010           xvzvalidate_left
    2527 0000a010     0b81          andi    M_HIT_LEFT,a1
         0000a020 fffffff7  
    2528 0000a040     cbcc          jrnz    xvzchange_direction
    2529 0000a050     0300          jruc    xvzvalid_dir
    2530                    
    2531 0000a060           xvzvalid_dir
    2532                    
    2533 0000a060     4d60          move    a11,a0
    2534 0000a070                   X32     a0
    2535 0000a080     0b20          addi    xvzanim_list,a0
         0000a090 0000a4d0' 
    2536 0000a0b0     8600          move    *a0,a0,L
    2537 0000a0c0     b20d          move    a0,*a13(xvzPD_SCRIPT),L
         0000a0d0     0100  
    2538                    
    2539 0000a0e0           xvzdone_moving
    2540                            
    2541 0000a0e0           xvznew_frame
    2542 0000a0e0     b5ae          move    *a13(xvzPD_FRAME_NDX),a14,W
         0000a0f0     0120  
    2543 0000a100     b7a6          move    *a13(xvzPD_SCRIPT),a6,L
         0000a110     0100  
    2544 0000a120     102e          inc     a14
    2545 0000a130     0b4e          cmpi    4,a14
         0000a140     fffb  
    2546 0000a150     cb01          jrne    xvzno_wrap
    2547 0000a160     57ce          clr     a14
    2548 0000a170           xvzno_wrap
    2549 0000a170     b1cd          move    a14,*a13(xvzPD_FRAME_NDX),W
         0000a180     0120  
    2550 0000a190                   X32     a14
    2551 0000a1a0     40ce          add     a6,a14
    2552 0000a1b0     87c0          move    *a14,a0,L
    2553 0000a1c0     0d5f          calla   civanic
         0000a1d0 00000000! 
    2554                    
    2555 0000a1f0     0960          rets
    2556                    
    2557                    
    2558                    ******************************************************************************
    2559                    *
    2560                    *       hulk collision routines
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   57

    2561                    *
    2562                    
    2563 0000a200            SUBR   hulk_pushback
    2564 0000a200                   PUSH    a1,a7,a9,a10,a11,a13
    2565                    
    2566                            ;immediately move the hulk in the direction of the bullet's motion
    2567 0000a220     b60e          move    *a0(OXVEL),a14,L
         0000a230     0020  
    2568 0000a240     29ee          sra     17,a14
    2569 0000a250     b501          move    *a8(OXPOS),a1,W
         0000a260     0090  
    2570 0000a270     41c1          add     a14,a1
    2571 0000a280     b028          move    a1,*a8(OXPOS),W
         0000a290     0090  
    2572                    
    2573 0000a2a0     b60e          move    *a0(OYVEL),a14,L
         0000a2b0     0040  
    2574 0000a2c0     29ee          sra     17,a14
    2575 0000a2d0     b501          move    *a8(OYPOS),a1,W
         0000a2e0     00b0  
    2576 0000a2f0     41c1          add     a14,a1
    2577 0000a300     b028          move    a1,*a8(OYPOS),W
         0000a310     00b0  
    2578                    
    2579                            ;wake up at the collision check
    2580 0000a320     b700          move    *a8(OPLINK),a0,L
         0000a330     01a0  
    2581 0000a340     b609          move    *a0(PA9),a9,L
         0000a350     00a0  
    2582 0000a360     b60a          move    *a0(PA10),a10,L
         0000a370     0080  
    2583 0000a380     b60b          move    *a0(PA11),a11,L
         0000a390     0060  
    2584 0000a3a0     09c1          movi    HULK_PID,a1
         0000a3b0     0221  
    2585 0000a3c0     09e7          movi    xvzbeen_shot,a7
         0000a3d0 00009720' 
    2586 0000a3f0     0d5f          calla   XFERPROC
         0000a400 00000000! 
    2587 0000a420                   PULL    a1,a7,a9,a10,a11,a13
    2588                    
    2589 0000a440     0960          rets
    2590                    
    2591                    
    2592                    ******************************************************************************
    2593                    *
    2594                    *       hulk configuration data
    2595                    *
    2596                    
    2597              0004  xvzstep_x               equ     4
    2598              0004  xvzstep_y               equ     4
    2599                    
    2600              0035  xvzlow_x                equ     53      ;hulk move boundaries
    2601              014e  xvzhigh_x               equ     347-13
    2602              002d  xvzlow_y                equ     45
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   58

    2603              00d7  xvzhigh_y               equ     231-16
    2604                    
    2605              0008  xvzmove_freq    equ     8       ;frames between moves
    2606                    
    2607              001e  xvzturn_prob    equ     30      ;chance per frame of spontaneously changing
    2608                                                    ;direction
    2609 0000a450           xvzmove_table
    2610 0000a450     0000          .word   0,-xvzstep_y
    2611 0000a470     0004          .word   xvzstep_x,0
    2612 0000a490     0000          .word   0,xvzstep_y
    2613 0000a4b0     fffc          .word   -xvzstep_x,0
    2614 0000a4d0           xvzmove_tablex
    2615                    
    2616 0000a4d0           xvzanim_list
    2617 0000a4d0 0000a550'         .long   xvzanim_vert
    2618 0000a4f0 0000a650'         .long   xvzanim_right
    2619 0000a510 0000a550'         .long   xvzanim_vert
    2620 0000a530 0000a5d0'         .long   xvzanim_left
    2621 0000a550           xvzanim_listx
    2622                    
    2623 0000a550           xvzanim_vert
    2624 0000a550 00002ac0"         .long   hulk_ud1
    2625 0000a570 00002b50"         .long   hulk_ud2
    2626 0000a590 00002ac0"         .long   hulk_ud1
    2627 0000a5b0 00002be0"         .long   hulk_ud3
    2628 0000a5d0           xvzanim_vertx
    2629                    
    2630 0000a5d0           xvzanim_left
    2631 0000a5d0 00002910"         .long   hulk_l1
    2632 0000a5f0 000029a0"         .long   hulk_l2
    2633 0000a610 00002910"         .long   hulk_l1
    2634 0000a630 00002a30"         .long   hulk_l3
    2635 0000a650           xvzanim_leftx
    2636                    
    2637 0000a650           xvzanim_right
    2638 0000a650 00002c70"         .long   hulk_r1
    2639 0000a670 00002d00"         .long   hulk_r2
    2640 0000a690 00002c70"         .long   hulk_r1
    2641 0000a6b0 00002d90"         .long   hulk_r3
    2642 0000a6d0           xvzanim_rightx
    2643                    
    2644                    
    2645                    *****************************************************************************
    2646                    ******************************************************************************
    2647                    ******************************************************************************
    2648                    *
    2649                    *       SPHEREOID SECTION
    2650                    *
    2651                    
    2652                            ;reg use
    2653                            ; a0 - (in) # of sphereoids
    2654                    
    2655 0000a6d0            SUBRP  make_sphereoids
    2656                    
    2657 0000a6d0     4c00          move    a0,a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   59

    2658 0000a6e0     ca31          jrz     ejqdone
    2659                    
    2660 0000a6f0           ejqanother_sphereoid
    2661 0000a6f0                   PUSHP   a0
    2662                    
    2663 0000a700           ejqget_pos
    2664 0000a700     09e0          movi    ejqmax_x-ejqmin_x,a0
         0000a710 00000117  
    2665 0000a730     0d5f          calla   RNDRNG0
         0000a740 00000000! 
    2666 0000a760     4c09          move    a0,a9
    2667 0000a770     09e0          movi    ejqmax_y-ejqmin_y,a0
         0000a780 000000ab  
    2668 0000a7a0     0d5f          calla   RNDRNG0
         0000a7b0 00000000! 
    2669 0000a7d0     4c0a          move    a0,a10
    2670                    
    2671 0000a7e0     0b29          addi    ejqmin_x,a9
         0000a7f0 00000035  
    2672 0000a810     0b2a          addi    ejqmin_y,a10
         0000a820 0000002d  
    2673                    
    2674 0000a840     0b69          cmpi    ejqmid_x1,a9
         0000a850 ffffff87  
    2675 0000a870     c60d          jrle    ejqplace_sphereoid
    2676 0000a880     0b69          cmpi    ejqmid_x2,a9
         0000a890 fffffee7  
    2677 0000a8b0     c509          jrge    ejqplace_sphereoid
    2678 0000a8c0     0b6a          cmpi    ejqmid_y1,a10
         0000a8d0 ffffffc5  
    2679 0000a8f0     c605          jrle    ejqplace_sphereoid
    2680 0000a900     0b6a          cmpi    ejqmid_y2,a10
         0000a910 ffffff25  
    2681 0000a930     c501          jrge    ejqplace_sphereoid
    2682 0000a940     c0db          jruc    ejqget_pos
    2683                    
    2684 0000a950           ejqplace_sphereoid
    2685                            ;assign a random starting position
    2686 0000a950                   CREATE  SPHEREOID_PID,sphereoid
    2687 0000a9d0                   PULLP   a0
    2688 0000a9e0     0d80          dsj     a0,ejqanother_sphereoid
         0000a9f0     ffcf  
    2689                    
    2690 0000aa00           ejqdone
    2691 0000aa00     0960          rets
    2692                    
    2693                    
    2694              0078  ejqmid_x1       equ     200-80  ;sphereoid start inner boundaries
    2695              0118  ejqmid_x2       equ     200+80
    2696              003a  ejqmid_y1       equ     138-80
    2697              00da  ejqmid_y2       equ     138+80
    2698                    
    2699                    
    2700                    *******************************************************************************
    2701                    *
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   60

    2702                    *       sphereoid process
    2703                    *
    2704                    
    2705 0000aa10                   STRUCTPD
    2706 0000aa10                   LONG    ejqOXACC                ;UHL x acceleration
    2707 0000aa10                   LONG    ejqOYACC                ;UHL y acceleration
    2708 0000aa10                   WORD    ejqOCHILDREN    ;UHW # of children left to spawn
    2709 0000aa10                   WORD    ejqOSTAGE               ;UHW stage in life cycle
    2710                    
    2711                            ;reg use
    2712                            ; a7 (use) event timer (related to ejqOSTAGE)
    2713                            ; a8 (use) * object
    2714                            ; a9 (in)  x pos
    2715                            ; a9 (use) anim counter
    2716                            ;a10 (in)  y pos
    2717                            ;a10 (use) frame pointer
    2718                            ;a11 (use) time until next vel change
    2719                    
    2720 0000aa10            SUBRP  sphereoid
    2721                    
    2722                            ;increment the badguy count
    2723 0000aa10     05ae          move    @live_badguys,a14,W
         0000aa20 000000a0- 
    2724 0000aa40     102e          inc     a14
    2725 0000aa50     058e          move    a14,@live_badguys,W
         0000aa60 000000a0- 
    2726                    
    2727                            ;create the sphereoid object
    2728 0000aa80     4d20          move    a9,a0           ;x pos
    2729 0000aa90     2600          sll     16,a0
    2730 0000aaa0     4d41          move    a10,a1          ;y pos
    2731 0000aab0     2601          sll     16,a1
    2732 0000aac0     09ea          movi    ejqstandard_script,a10
         0000aad0 0000c2b0' 
    2733 0000aaf0     9742          move    *a10+,a2,L      ;img
    2734 0000ab00     5663          clr     a3
    2735 0000ab10     09e4          movi    DMAWNZ,a4
         0000ab20 00008002  
    2736 0000ab40     09e5          movi    CLSENMY|TYPSPHEREOID,a5
         0000ab50 00008800  
    2737 0000ab70     56c6          clr     a6
    2738 0000ab80     56e7          clr     a7
    2739 0000ab90     0d5f          calla   BEGINOBJW
         0000aba0 00000000! 
    2740                    
    2741                            ;initialize anim counter
    2742 0000abc0     09e9          movi    ejqanim_speed,a9
         0000abd0 00000003  
    2743                    
    2744                            ;set initial velocities and accelerations
    2745 0000abf0     0d3f          callr   ejqset_va
         0000ac00     00ea  
    2746                    
    2747                            ;initialize life cycle and event timer
    2748 0000ac10     09ee          movi    ejqSTAGE_YOUTH,a14
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   61

         0000ac20 00000000  
    2749 0000ac40     b1cd          move    a14,*a13(ejqOSTAGE),W
         0000ac50     0150  
    2750 0000ac60     09e0          movi    ejqyouth_time/2,a0
         0000ac70 0000005a  
    2751 0000ac90     0d5f          calla   RNDRNG0
         0000aca0 00000000! 
    2752 0000acc0     0b20          addi    ejqyouth_time*3/4,a0
         0000acd0 00000087  
    2753 0000acf0     4c07          move    a0,a7
    2754                    
    2755 0000ad00           ejqloop
    2756 0000ad00                   PUSHP   a7
    2757 0000ad10                   SLEEPK  1
    2758 0000ad50                   PULLP   a7
    2759 0000ad60     1429          dec     a9
    2760 0000ad70     cb16          jrnz    ejqno_anim
    2761                    
    2762                            ;advance the frame
    2763 0000ad80     9740          move    *a10+,a0,L
    2764 0000ad90     cb0e          jrnz    ejqnewframe
    2765                    
    2766                            ;reset script.  depends on the stage
    2767 0000ada0     b5ae          move    *a13(ejqOSTAGE),a14,W
         0000adb0     0150  
    2768 0000adc0     0b6e          cmpi    ejqSTAGE_PARENT,a14
         0000add0 fffffffe  
    2769 0000adf0     ca04          jreq    ejqset_parent_script
    2770 0000ae00     09ea          movi    ejqstandard_script,a10
         0000ae10 0000c2b0' 
    2771 0000ae30     c003          jruc    ejqscript_set
    2772 0000ae40           ejqset_parent_script
    2773 0000ae40     09ea          movi    ejqparent_script,a10
         0000ae50 0000c370' 
    2774                    
    2775 0000ae70           ejqscript_set
    2776 0000ae70     9740          move    *a10+,a0,L
    2777                    
    2778 0000ae80           ejqnewframe
    2779 0000ae80     0d5f          calla   civanic
         0000ae90 00000000! 
    2780                    
    2781                            ;reset the counter
    2782 0000aeb0     09e9          movi    ejqanim_speed,a9
         0000aec0 00000003  
    2783                    
    2784 0000aee0           ejqno_anim
    2785                            ;adjust velocities
    2786 0000aee0     0d3f          callr   ejqacc_add
         0000aef0     00f0  
    2787                    
    2788                            ;bounds check
    2789 0000af00     0d3f          callr   ejqin_bounds
         0000af10     00fd  
    2790                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   62

    2791                            ;adjust vel and acc if it's time
    2792 0000af20     142b          dec     a11
    2793 0000af30     cb02          jrnz    ejqno_va_change
    2794 0000af40     0d3f          callr   ejqset_va
         0000af50     00b5  
    2795                    
    2796 0000af60           ejqno_va_change
    2797                    
    2798                            ;do event?
    2799 0000af60     1427          dec     a7
    2800 0000af70     cb51          jrnz    ejqno_event
    2801                    
    2802                            ;event.  depends on the stage in the life cycle
    2803 0000af80     b5ae          move    *a13(ejqOSTAGE),a14,W
         0000af90     0150  
    2804 0000afa0     0b6e          cmpi    ejqSTAGE_YOUTH,a14
         0000afb0 ffffffff  
    2805 0000afd0     ca05          jreq    ejqyouth_event
    2806 0000afe0     0b6e          cmpi    ejqSTAGE_PARENT,a14
         0000aff0 fffffffe  
    2807 0000b010     ca1c          jreq    ejqparent_event
    2808                            ;default
    2809 0000b020     c045          jruc    ejqdotage_event
    2810                    
    2811 0000b030           ejqyouth_event
    2812                            ;switch to middle age
    2813 0000b030     09ee          movi    ejqSTAGE_PARENT,a14
         0000b040 00000001  
    2814 0000b060     b1cd          move    a14,*a13(ejqOSTAGE),W
         0000b070     0150  
    2815                    
    2816                            ;set the number of kids to be spawned
    2817 0000b080     09e0          movi    ejqmax_kids-ejqmin_kids,a0
         0000b090 00000004  
    2818 0000b0b0     0d5f          calla   RNDRNG0
         0000b0c0 00000000! 
    2819 0000b0e0     0b20          addi    ejqmin_kids,a0
         0000b0f0 00000003  
    2820 0000b110     b00d          move    a0,*a13(ejqOCHILDREN),W
         0000b120     0140  
    2821                    
    2822                            ;set the spawn timer
    2823 0000b130     09e0          movi    ejqspawn_time/2,a0
         0000b140 0000003c  
    2824 0000b160     0d5f          calla   RNDRNG0
         0000b170 00000000! 
    2825 0000b190     0b20          addi    ejqspawn_time*3/4,a0
         0000b1a0 0000005a  
    2826 0000b1c0     4c07          move    a0,a7
    2827 0000b1d0     c02b          jruc    ejqno_event
    2828                    
    2829 0000b1e0           ejqparent_event
    2830                            ;spawn a brat
    2831 0000b1e0                   PUSHP   a10,a11
    2832 0000b200     b70a          move    *a8(OXVAL),a10,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   63

         0000b210     0080  
    2833 0000b220     b70b          move    *a8(OYVAL),a11,L
         0000b230     00a0  
    2834 0000b240                   CREATE  ENFORCER_PID,enforcer
    2835 0000b2c0                   PULLP   a10,a11
    2836                    
    2837                            ;decrement the kid count
    2838 0000b2e0     b5ae          move    *a13(ejqOCHILDREN),a14,W
         0000b2f0     0140  
    2839 0000b300     142e          dec     a14
    2840 0000b310     ca0d          jrz     ejqbarren
    2841 0000b320     b1cd          move    a14,*a13(ejqOCHILDREN),W
         0000b330     0140  
    2842 0000b340     09e0          movi    ejqspawn_time/2,a0
         0000b350 0000003c  
    2843 0000b370     0d5f          calla   RNDRNG0
         0000b380 00000000! 
    2844 0000b3a0     0b20          addi    ejqspawn_time*3/4,a0
         0000b3b0 0000005a  
    2845 0000b3d0     4c07          move    a0,a7
    2846 0000b3e0     c00a          jruc    ejqno_event
    2847                    
    2848 0000b3f0           ejqbarren
    2849                            ;that was the last kid.  age
    2850 0000b3f0     09ee          movi    ejqSTAGE_DOTAGE,a14
         0000b400 00000002  
    2851 0000b420     b1cd          move    a14,*a13(ejqOSTAGE),W
         0000b430     0150  
    2852 0000b440     09e7          movi    ejqold_age_time,a7
         0000b450 000000b4  
    2853 0000b470     c001          jruc    ejqno_event
    2854                    
    2855 0000b480           ejqdotage_event
    2856                            ;nothing fancy.  just die.
    2857 0000b480     c055          jruc    ejqdie_peacefully
    2858                            
    2859 0000b490           ejqno_event
    2860 0000b490     c086          jruc    ejqloop
    2861                    
    2862 0000b4a0           ejqbeen_shot
    2863                            ;crud.  we've been shot.  score the points
    2864 0000b4a0     09e0          movi    ejqsphereoid_points,a0
         0000b4b0 000003e8  
    2865 0000b4d0     0d3f          callr   score_points
         0000b4e0     074f  
    2866                    
    2867                            ;decrement the badguy count
    2868 0000b4f0     05ae          move    @live_badguys,a14,W
         0000b500 000000a0- 
    2869 0000b520     142e          dec     a14
    2870 0000b530     058e          move    a14,@live_badguys,W
         0000b540 000000a0- 
    2871                    
    2872                            ;clear the velocity
    2873 0000b560     57ce          clr     a14
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   64

    2874 0000b570     b3c8          move    a14,*a8(OXVEL),L
         0000b580     0020  
    2875 0000b590     b3c8          move    a14,*a8(OYVEL),L
         0000b5a0     0040  
    2876                    
    2877                            ;go through the death routine
    2878 0000b5b0     09ea          movi    ejqparent_script,a10,L
         0000b5c0 0000c370' 
    2879 0000b5e0     b50e          move    *a8(OCTRL),a14,W
         0000b5f0     00f0  
    2880 0000b600     0bce          xori    DMAWNZ,a14
         0000b610 00008002  
    2881 0000b630     0bae          ori     DMACNZ,a14
         0000b640 00008008  
    2882 0000b660     b1c8          move    a14,*a8(OCTRL),W
         0000b670     00f0  
    2883 0000b680     09ee          movi    ejqdiecolor,a14
         0000b690 00000909  
    2884 0000b6b0     b1c8          move    a14,*a8(OCONST),W
         0000b6c0     0160  
    2885 0000b6d0     09e0          movi    robo_p,a0
         0000b6e0 00000000! 
    2886 0000b700     0d5f          calla   pal_getf
         0000b710 00000000! 
    2887 0000b730     b008          move    a0,*a8(OPAL),W
         0000b740     0150  
    2888                    
    2889 0000b750           ejqdie_loop
    2890 0000b750                   SLEEPK  ejqanim_speed
    2891 0000b790     9740          move    *a10+,a0,L
    2892 0000b7a0     ca04          jrz     ejqscore_msg
    2893 0000b7b0     0d5f          calla   civanic
         0000b7c0 00000000! 
    2894 0000b7e0     c0f6          jruc    ejqdie_loop
    2895                    
    2896 0000b7f0           ejqscore_msg
    2897 0000b7f0     09e0          movi    ejqscore_image,a0
         0000b800 00001200" 
    2898 0000b820     b501          move    *a8(OCTRL),a1,W
         0000b830     00f0  
    2899 0000b840     0bc1          xori    DMACNZ,a1
         0000b850 00008008  
    2900 0000b870     0ba1          ori     DMAWNZ,a1
         0000b880 00008002  
    2901 0000b8a0     0d5f          calla   civani
         0000b8b0 00000000! 
    2902 0000b8d0     09ee          movi    ejqscore_xoff,a14
         0000b8e0 fffffffd  
    2903 0000b900     b1c8          move    a14,*a8(ODXOFF),W
         0000b910     0220  
    2904 0000b920     09ee          movi    ejqscore_yoff,a14       
         0000b930 fffffffb  
    2905 0000b950     b1c8          move    a14,*a8(ODYOFF),W
         0000b960     0230  
    2906 0000b970                   SLEEP   ejqscore_time
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   65

    2907 0000b9d0     c007          jruc    ejqexpire
    2908                    
    2909 0000b9e0           ejqdie_peacefully
    2910                            ;decrement the badguy count
    2911 0000b9e0     05ae          move    @live_badguys,a14,W
         0000b9f0 000000a0- 
    2912 0000ba10     142e          dec     a14
    2913 0000ba20     058e          move    a14,@live_badguys,W
         0000ba30 000000a0- 
    2914                    
    2915 0000ba50           ejqexpire
    2916 0000ba50     0d5f          calla   DELOBJA8
         0000ba60 00000000! 
    2917                    
    2918 0000ba80                   DIE
    2919                    
    2920                    
    2921 0000bab0            SUBRP  ejqset_va
    2922                    
    2923 0000bab0     09e0          movi    ejqhigh_v*2,a0
         0000bac0 00008000  
    2924 0000bae0     0d5f          calla   RNDRNG0
         0000baf0 00000000! 
    2925 0000bb10     0d00          subi    ejqhigh_v,a0
         0000bb20 ffffbfff  
    2926 0000bb40     b208          move    a0,*a8(OXVEL),L
         0000bb50     0020  
    2927                    
    2928 0000bb60     09e0          movi    ejqhigh_v*2,a0
         0000bb70 00008000  
    2929 0000bb90     0d5f          calla   RNDRNG0
         0000bba0 00000000! 
    2930 0000bbc0     0d00          subi    ejqhigh_v,a0
         0000bbd0 ffffbfff  
    2931 0000bbf0     b208          move    a0,*a8(OYVEL),L
         0000bc00     0040  
    2932                    
    2933 0000bc10     09e0          movi    ejqhigh_a*2,a0
         0000bc20 00001800  
    2934 0000bc40     0d5f          calla   RNDRNG0
         0000bc50 00000000! 
    2935 0000bc70     0d00          subi    ejqhigh_a,a0
         0000bc80 fffff3ff  
    2936 0000bca0     b20d          move    a0,*a13(ejqOXACC),L
         0000bcb0     0100  
    2937                    
    2938 0000bcc0     09e0          movi    ejqhigh_a*2,a0
         0000bcd0 00001800  
    2939 0000bcf0     0d5f          calla   RNDRNG0
         0000bd00 00000000! 
    2940 0000bd20     0d00          subi    ejqhigh_a,a0
         0000bd30 fffff3ff  
    2941 0000bd50     b20d          move    a0,*a13(ejqOYACC),L
         0000bd60     0120  
    2942                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   66

    2943 0000bd70     09e0          movi    ejqva_change_time,a0
         0000bd80 000000b4  
    2944 0000bda0     0d5f          calla   RNDRNG0
         0000bdb0 00000000! 
    2945 0000bdd0     1020          inc     a0
    2946 0000bde0     4c0b          move    a0,a11
    2947                    
    2948 0000bdf0     0960          rets
    2949                    
    2950                    
    2951 0000be00            SUBRP  ejqacc_add
    2952 0000be00     b7ae          move    *a13(ejqOXACC),a14,L
         0000be10     0100  
    2953 0000be20     b700          move    *a8(OXVEL),a0,L
         0000be30     0020  
    2954 0000be40     41c0          add     a14,a0
    2955 0000be50     b208          move    a0,*a8(OXVEL),L
         0000be60     0020  
    2956                    
    2957 0000be70     b7ae          move    *a13(ejqOYACC),a14,L
         0000be80     0120  
    2958 0000be90     b700          move    *a8(OYVEL),a0,L
         0000bea0     0040  
    2959 0000beb0     41c0          add     a14,a0
    2960 0000bec0     b208          move    a0,*a8(OYVEL),L
         0000bed0     0040  
    2961                    
    2962 0000bee0     0960          rets
    2963                    
    2964                    
    2965 0000bef0            SUBRP  ejqin_bounds
    2966                    
    2967 0000bef0     b50e          move    *a8(OXPOS),a14,W
         0000bf00     0090  
    2968 0000bf10     09e0          movi    ejqmin_x,a0
         0000bf20 00000035  
    2969 0000bf40     480e          cmp     a0,a14
    2970 0000bf50     c406          jrlt    ejqx_adjust
    2971                    
    2972 0000bf60     09e0          movi    ejqmax_x,a0
         0000bf70 0000014c  
    2973 0000bf90     480e          cmp     a0,a14
    2974 0000bfa0     c701          jrgt    ejqx_adjust
    2975 0000bfb0     c007          jruc    ejqy_check
    2976                    
    2977 0000bfc0           ejqx_adjust
    2978 0000bfc0     b008          move    a0,*a8(OXPOS),W
         0000bfd0     0090  
    2979 0000bfe0     5600          clr     a0
    2980 0000bff0     b208          move    a0,*a8(OXVEL),L
         0000c000     0020  
    2981 0000c010     b20d          move    a0,*a13(ejqOXACC),L
         0000c020     0100  
    2982                    
    2983 0000c030           ejqy_check
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   67

    2984 0000c030     b50e          move    *a8(OYPOS),a14,W
         0000c040     00b0  
    2985 0000c050     09e0          movi    ejqmin_y,a0
         0000c060 0000002d  
    2986 0000c080     480e          cmp     a0,a14
    2987 0000c090     c406          jrlt    ejqy_adjust
    2988                    
    2989 0000c0a0     09e0          movi    ejqmax_y,a0
         0000c0b0 000000d8  
    2990 0000c0d0     480e          cmp     a0,a14
    2991 0000c0e0     c701          jrgt    ejqy_adjust
    2992 0000c0f0     c007          jruc    ejqdone_check
    2993                    
    2994 0000c100           ejqy_adjust
    2995 0000c100     b008          move    a0,*a8(OYPOS),W
         0000c110     00b0  
    2996 0000c120     5600          clr     a0
    2997 0000c130     b208          move    a0,*a8(OYVEL),L
         0000c140     0040  
    2998 0000c150     b20d          move    a0,*a13(ejqOYACC),L
         0000c160     0120  
    2999                    
    3000 0000c170           ejqdone_check
    3001 0000c170     0960          rets
    3002                    
    3003                    
    3004                    ******************************************************************************
    3005                    *
    3006                    *       sphereoid collision routines
    3007                    *
    3008                    
    3009 0000c180            SUBR   sphereoid_die
    3010 0000c180                   PUSH    a1,a7
    3011                    
    3012 0000c1a0     09ce          movi    CLSDEAD,a14
         0000c1b0     2000  
    3013 0000c1c0     b1c8          move    a14,*a8(OID),W
         0000c1d0     0190  
    3014 0000c1e0     b700          move    *a8(OPLINK),a0,L
         0000c1f0     01a0  
    3015 0000c200     09c1          movi    DEADSPHERE_PID,a1
         0000c210     0236  
    3016 0000c220     09e7          movi    ejqbeen_shot,a7
         0000c230 0000b4a0' 
    3017 0000c250     0d5f          calla   XFERPROC
         0000c260 00000000! 
    3018                    
    3019 0000c280                   PULL    a1,a7
    3020 0000c2a0     0960          rets
    3021                    
    3022                    
    3023                    ******************************************************************************
    3024                    *
    3025                    *       sphereoid configuration data
    3026                    *
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   68

    3027                    
    3028              0003  ejqanim_speed   equ     3
    3029                    
    3030              00b4  ejqva_change_time       equ     180
    3031                    
    3032              03e8  ejqsphereoid_points     equ     1000
    3033                    
    3034              00b4  ejqyouth_time   equ     180     ;time before we have kids
    3035              0078  ejqspawn_time   equ     120     ;time between kids
    3036              00b4  ejqold_age_time equ     180     ;time between last kid and natural death
    3037                    
    3038              0003  ejqmin_kids     equ     3       ;lower limit on spawned enforcers
    3039              0007  ejqmax_kids     equ     7       ;upper limit
    3040                    
    3041              4000  ejqhigh_v               equ     00004000h
    3042              0c00  ejqhigh_a               equ     00000C00h
    3043                    
    3044              0035  ejqmin_x        equ     53      ;sphereoid move bounds
    3045              014c  ejqmax_x        equ     347-15
    3046              002d  ejqmin_y        equ     45
    3047              00d8  ejqmax_y        equ     231-15
    3048                    
    3049              1200" ejqscore_image  equ     one_k   ;image on being shot
    3050              0909  ejqdiecolor     equ     0909h   ;color on being shot
    3051              003c  ejqscore_time   equ     60      ;time to display score value
    3052              fffd  ejqscore_xoff   equ     -3      ;shotimage offset
    3053              fffb  ejqscore_yoff   equ     -5
    3054                    
    3055                    ;life cycle stages
    3056              0000  ejqSTAGE_YOUTH  equ     0000h
    3057              0001  ejqSTAGE_PARENT equ     0001h
    3058              0002  ejqSTAGE_DOTAGE equ     0002h
    3059                    
    3060 0000c2b0           ejqstandard_script
    3061 0000c2b0 00004650"         .long   circle_1
    3062 0000c2d0 000046e0"         .long   circle_2
    3063 0000c2f0 00004770"         .long   circle_3
    3064 0000c310 00004800"         .long   circle_4
    3065 0000c330 00004890"         .long   circle_5
    3066 0000c350 00000000          .long   0
    3067                    
    3068 0000c370           ejqparent_script
    3069 0000c370 00004650"         .long   circle_1
    3070 0000c390 000046e0"         .long   circle_2
    3071 0000c3b0 00004770"         .long   circle_3
    3072 0000c3d0 00004800"         .long   circle_4
    3073 0000c3f0 00004890"         .long   circle_5
    3074 0000c410 00004920"         .long   circle_6
    3075 0000c430 000049b0"         .long   circle_7
    3076 0000c450 00004a40"         .long   circle_8
    3077 0000c470 00000000          .long   0
    3078                    
    3079                    
    3080                    *****************************************************************************
    3081                    ******************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   69

    3082                    ******************************************************************************
    3083                    *
    3084                    *       ENFORCER SECTION
    3085                    *
    3086                    
    3087 000000e0                   .bss    num_enforcers,          16      ;active enforcers
    3088 000000f0                   .bss    picket_duty,            32      ;*img of picket enforcer
    3089                    
    3090                            ;reg use
    3091                            ;  a8 (use) *img
    3092                            ;  a9 (use) next move timer (move/fire phase)
    3093                            ;  a9 (use) frame pointer (death phase)
    3094                            ; a10 (in)  initial X
    3095                            ; a10 (use) frame pointer (grow phase)
    3096                            ; a11 (in)  initial Y
    3097                            ; a11 (use) next shot timer (move/fire phase)
    3098                    
    3099 0000c490            SUBRP  enforcer
    3100                    
    3101                            ;increment the badguy count
    3102 0000c490     05ae          move    @live_badguys,a14,W
         0000c4a0 000000a0- 
    3103 0000c4c0     102e          inc     a14
    3104 0000c4d0     058e          move    a14,@live_badguys,W
         0000c4e0 000000a0- 
    3105 0000c500     05ae          move    @num_enforcers,a14,W
         0000c510 000000e0- 
    3106 0000c530     102e          inc     a14
    3107 0000c540     058e          move    a14,@num_enforcers,W
         0000c550 000000e0- 
    3108                    
    3109                            ;create the enforcer object
    3110 0000c570     4d40          move    a10,a0
    3111 0000c580     4d61          move    a11,a1
    3112 0000c590     09ea          movi    nzigrow_script,a10
         0000c5a0 0000d760' 
    3113 0000c5c0     9742          move    *a10+,a2,L
    3114 0000c5d0     5663          clr     a3
    3115 0000c5e0     09e4          movi    DMAWNZ,a4
         0000c5f0 00008002  
    3116 0000c610     09e5          movi    CLSENMY|TYPENFORCER,a5
         0000c620 00008900  
    3117 0000c640     56c6          clr     a6
    3118 0000c650     56e7          clr     a7
    3119 0000c660     0d5f          calla   BEGINOBJW
         0000c670 00000000! 
    3120                    
    3121                            ;grow phase
    3122                    
    3123 0000c690           nzigrow_loop
    3124 0000c690                   SLEEPK  nzigrow_speed
    3125 0000c6d0     9740          move    *a10+,a0,L
    3126 0000c6e0     ca04          jrz     nzimf_phase
    3127 0000c6f0     0d5f          calla   civanic
         0000c700 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   70

    3128 0000c720     c0f6          jruc    nzigrow_loop
    3129                    
    3130 0000c730           nzimf_phase
    3131                            ;begin move/fire phase.  set initial course
    3132 0000c730     0d3f          callr   nzinew_course
         0000c740     0090  
    3133 0000c750     09e9          movi    nziturn_time,a9
         0000c760 00000096  
    3134 0000c780     09e0          movi    nzifire_time/2,a0
         0000c790 0000002d  
    3135 0000c7b0     0d5f          calla   RNDRNG0
         0000c7c0 00000000! 
    3136 0000c7e0     0b20          addi    nzifire_time*3/4,a0
         0000c7f0 00000043  
    3137 0000c810     4c0b          move    a0,a11
    3138                    
    3139 0000c820           nzimain_loop
    3140 0000c820                   SLEEPK  1
    3141 0000c860     1429          dec     a9
    3142 0000c870     cb3d          jrnz    nzino_turn
    3143                    
    3144                    
    3145                            ;picket phase
    3146                            ;two cases: we're on picket duty, or we're not.
    3147 0000c880     07ae          move    @picket_duty,a14,L
         0000c890 000000f0- 
    3148 0000c8b0     49c8          cmp     a14,a8
    3149 0000c8c0     ca16          jreq    nzion_picket
    3150                    
    3151                            ;we're not on picket duty
    3152                            ;if we're the only enforcer, quit now.
    3153 0000c8d0     05ae          move    @num_enforcers,a14,W
         0000c8e0 000000e0- 
    3154 0000c900     0b4e          cmpi    1,a14
         0000c910     fffe  
    3155 0000c920     ca2d          jreq    nzipicket_done
    3156                    
    3157                            ;there are multiple enforcers.   If there is no picket, see if we
    3158                            ; take the job.  If there is, quit.
    3159 0000c930     07ae          move    @picket_duty,a14,L
         0000c940 000000f0- 
    3160 0000c960     cb29          jrnz    nzipicket_done
    3161                    
    3162                            ;there is no picket.
    3163 0000c970     09e0          movi    nzipicket_prob,a0
         0000c980 00000004  
    3164 0000c9a0     0d5f          calla   RNDRNG0
         0000c9b0 00000000! 
    3165 0000c9d0     4c00          move    a0,a0
    3166 0000c9e0     cb21          jrnz    nzipicket_done
    3167                    
    3168                            ;we're going to take picket duty
    3169 0000c9f0     0788          move    a8,@picket_duty,L
         0000ca00 000000f0- 
    3170 0000ca20     c01d          jruc    nzipicket_done
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   71

    3171                    
    3172 0000ca30           nzion_picket
    3173                            ;we are on picket duty
    3174                            ;if we're the only enforcer, see if we leave picket mode.
    3175 0000ca30     05ae          move    @num_enforcers,a14,W
         0000ca40 000000e0- 
    3176 0000ca60     0b4e          cmpi    1,a14
         0000ca70     fffe  
    3177 0000ca80     cb0c          jrne    nzimultiple_enforcers
    3178                    
    3179                            ;we're the only enforcer
    3180 0000ca90     09e0          movi    nzistand_down_prob,a0
         0000caa0 00000004  
    3181 0000cac0     0d5f          calla   RNDRNG0
         0000cad0 00000000! 
    3182 0000caf0     4c00          move    a0,a0
    3183 0000cb00     cb0f          jrnz    nzipicket_done
    3184                    
    3185                            ;and we've decided to stand down.
    3186                    ;       clr     a0      ;unneccesary.  it's already 0 from above.
    3187 0000cb10     0780          move    a0,@picket_duty,L
         0000cb20 000000f0- 
    3188 0000cb40     c00b          jruc    nzipicket_done
    3189                    
    3190 0000cb50           nzimultiple_enforcers
    3191                            ;we may abandon our post
    3192 0000cb50     09e0          movi    nziabandon_post_prob,a0
         0000cb60 00000008  
    3193 0000cb80     0d5f          calla   RNDRNG0
         0000cb90 00000000! 
    3194 0000cbb0     4c00          move    a0,a0
    3195 0000cbc0     cb03          jrnz    nzipicket_done
    3196                    
    3197                            ;yep.  we quit.
    3198                    ;       clr     a0      ;unneccesary.  it's already 0 from above.
    3199 0000cbd0     0780          move    a0,@picket_duty,L
         0000cbe0 000000f0- 
    3200                    ;       jruc    nzipicket_done
    3201                    
    3202 0000cc00           nzipicket_done
    3203                    
    3204                            ;change course
    3205 0000cc00     0d3f          callr   nzinew_course
         0000cc10     0043  
    3206 0000cc20     09e9          movi    nziturn_time,a9
         0000cc30 00000096  
    3207                    
    3208 0000cc50           nzino_turn
    3209                    
    3210 0000cc50     142b          dec     a11
    3211 0000cc60     cb18          jrnz    nzino_shot
    3212                    
    3213                            ;fire a spark
    3214 0000cc70                   PUSHP   a10
    3215 0000cc80     b70a          move    *a8(OXVAL),a10,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   72

         0000cc90     0080  
    3216 0000cca0     b70b          move    *a8(OYVAL),a11,L
         0000ccb0     00a0  
    3217 0000ccc0                   CREATE  SPARK_PID,spark
    3218 0000cd40                   PULLP   a10
    3219 0000cd50     09e0          movi    nzifire_time/2,a0
         0000cd60 0000002d  
    3220 0000cd80     0d5f          calla   RNDRNG0
         0000cd90 00000000! 
    3221 0000cdb0     0b20          addi    nzifire_time*3/4,a0
         0000cdc0 00000043  
    3222 0000cde0     4c0b          move    a0,a11
    3223                    
    3224 0000cdf0           nzino_shot
    3225                    
    3226                            ;bounds check
    3227 0000cdf0     0d3f          callr   nziin_bounds
         0000ce00     003d  
    3228                    
    3229 0000ce10     c0a0          jruc    nzimain_loop
    3230                    
    3231 0000ce20           nzidie
    3232                            ;decrement the badguy count
    3233 0000ce20     05ae          move    @live_badguys,a14,W
         0000ce30 000000a0- 
    3234 0000ce50     142e          dec     a14
    3235 0000ce60     058e          move    a14,@live_badguys,W
         0000ce70 000000a0- 
    3236 0000ce90     05ae          move    @num_enforcers,a14,W
         0000cea0 000000e0- 
    3237 0000cec0     142e          dec     a14
    3238 0000ced0     058e          move    a14,@num_enforcers,W
         0000cee0 000000e0- 
    3239                    
    3240                            ;zero our velocity
    3241 0000cf00     57ce          clr     a14
    3242 0000cf10     b3c8          move    a14,*a8(OXVEL),L
         0000cf20     0020  
    3243 0000cf30     b3c8          move    a14,*a8(OYVEL),L
         0000cf40     0040  
    3244                    
    3245                            ;set up the animation
    3246 0000cf50           nzidieloop
    3247 0000cf50     9720          move    *a9+,a0,L
    3248 0000cf60     ca08          jrz     nzidead_n_buried
    3249 0000cf70     0d5f          calla   civanic
         0000cf80 00000000! 
    3250 0000cfa0                   sleepk  nzideath_speed
    3251 0000cfe0     c0f6          jruc    nzidieloop
    3252                    
    3253 0000cff0           nzidead_n_buried
    3254 0000cff0     0d5f          calla   DELOBJA8
         0000d000 00000000! 
    3255                    
    3256 0000d020                   DIE
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   73

    3257                    
    3258                    
    3259 0000d050            SUBRP  nzinew_course
    3260                    
    3261                            ;two cases.  picket or !picket
    3262 0000d050     07ae          move    @picket_duty,a14,L
         0000d060 000000f0- 
    3263 0000d080     490e          cmp     a8,a14
    3264 0000d090     0300          jrne    nzinc_notpicket
    3265                    
    3266 0000d0a0           nzinc_picket
    3267                            ;we're on picket duty.  if we're not against a wall, move toward the
    3268                            ; nearest one.  if we are against a wall but not in a corner, move
    3269                            ; toward the nearest corner.  if we're in a corner, sit tight.
    3270                    ;       jruc    nzinc_done
    3271                    
    3272 0000d0a0           nzinc_notpicket
    3273                            ;velocity is the distance between enforcer and player / 64 / 2
    3274 0000d0a0     07a0          move    @player_object,a0,L
         0000d0b0 00000050- 
    3275 0000d0d0     b60e          move    *a0(OXVAL),a14,L
         0000d0e0     0080  
    3276 0000d0f0     b701          move    *a8(OXVAL),a1,L
         0000d100     0080  
    3277 0000d110     442e          sub     a1,a14
    3278 0000d120     2b2e          sra     7,a14
    3279                            
    3280 0000d130     b3c8          move    a14,*a8(OXVEL),L
         0000d140     0020  
    3281                    
    3282 0000d150     b60e          move    *a0(OYVAL),a14,L
         0000d160     00a0  
    3283 0000d170     b701          move    *a8(OYVAL),a1,L
         0000d180     00a0  
    3284 0000d190     442e          sub     a1,a14
    3285 0000d1a0     2b2e          sra     7,a14
    3286 0000d1b0     b3c8          move    a14,*a8(OYVEL),L
         0000d1c0     0040  
    3287                    
    3288 0000d1d0           nzinc_done
    3289 0000d1d0     0960          rets
    3290                    
    3291 0000d1e0            SUBRP  nziin_bounds
    3292                    
    3293 0000d1e0     b50e          move    *a8(OXPOS),a14,W
         0000d1f0     0090  
    3294 0000d200     09e0          movi    nzimin_x,a0
         0000d210 00000035  
    3295 0000d230     480e          cmp     a0,a14
    3296 0000d240     c406          jrlt    nzix_adjust
    3297                    
    3298 0000d250     09e0          movi    nzimax_x,a0
         0000d260 00000152  
    3299 0000d280     480e          cmp     a0,a14
    3300 0000d290     c701          jrgt    nzix_adjust
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   74

    3301 0000d2a0     c005          jruc    nziy_check
    3302                    
    3303 0000d2b0           nzix_adjust
    3304 0000d2b0     b008          move    a0,*a8(OXPOS),W
         0000d2c0     0090  
    3305 0000d2d0     5600          clr     a0
    3306 0000d2e0     b208          move    a0,*a8(OXVEL),L
         0000d2f0     0020  
    3307                    
    3308 0000d300           nziy_check
    3309 0000d300     b50e          move    *a8(OYPOS),a14,W
         0000d310     00b0  
    3310 0000d320     09e0          movi    nzimin_y,a0
         0000d330 0000002d  
    3311 0000d350     480e          cmp     a0,a14
    3312 0000d360     c406          jrlt    nziy_adjust
    3313                    
    3314 0000d370     09e0          movi    nzimax_y,a0
         0000d380 000000dc  
    3315 0000d3a0     480e          cmp     a0,a14
    3316 0000d3b0     c701          jrgt    nziy_adjust
    3317 0000d3c0     c005          jruc    nzidone_check
    3318                    
    3319 0000d3d0           nziy_adjust
    3320 0000d3d0     b008          move    a0,*a8(OYPOS),W
         0000d3e0     00b0  
    3321 0000d3f0     5600          clr     a0
    3322 0000d400     b208          move    a0,*a8(OYVEL),L
         0000d410     0040  
    3323                    
    3324 0000d420           nzidone_check
    3325 0000d420     0960          rets
    3326                    
    3327                    
    3328                    ******************************************************************************
    3329                    *
    3330                    *       enforcer collision routines
    3331                    *
    3332                    
    3333 0000d430            SUBR   enforcer_die
    3334                            ;hit by player gunfire
    3335 0000d430                   PUSH    a1,a7
    3336                    
    3337                            ;jeepers.  we're dead.
    3338 0000d450     09ce          movi    CLSDEAD,a14
         0000d460     2000  
    3339 0000d470     b1c8          move    a14,*a8(OID),W
         0000d480     0190  
    3340                    
    3341 0000d490     b60e          move    *a0(OXVEL),a14,L
         0000d4a0     0020  
    3342 0000d4b0     ca0a          jrz     nzivert_bullet
    3343 0000d4c0     b601          move    *a0(OYVEL),a1,L
         0000d4d0     0040  
    3344 0000d4e0     ca03          jrz     nzihorz_bullet
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   75

    3345                    
    3346 0000d4f0     402e          add     a1,a14
    3347 0000d500     ca09          jrz     nzidiag_13
    3348 0000d510     c00c          jruc    nzidiag_24
    3349                    
    3350 0000d520           nzihorz_bullet
    3351 0000d520     09e9          movi    nzidie_vert,a9
         0000d530 0000d840' 
    3352 0000d550     c00c          jruc    nzideath_set
    3353 0000d560           nzivert_bullet
    3354 0000d560     09e9          movi    nzidie_horz,a9
         0000d570 0000d900' 
    3355 0000d590     c008          jruc    nzideath_set
    3356 0000d5a0           nzidiag_13
    3357 0000d5a0     09e9          movi    nzidie_diag24,a9
         0000d5b0 0000da40' 
    3358 0000d5d0     c004          jruc    nzideath_set
    3359 0000d5e0           nzidiag_24
    3360 0000d5e0     09e9          movi    nzidie_diag13,a9
         0000d5f0 0000d9a0' 
    3361 0000d610     0300          jruc    nzideath_set
    3362                    
    3363 0000d620           nzideath_set
    3364 0000d620     b700          move    *a8(OPLINK),a0,L
         0000d630     01a0  
    3365 0000d640     09c1          movi    DEADNFORCER_PID,a1
         0000d650     0237  
    3366 0000d660     09e7          movi    nzidie,a7
         0000d670 0000ce20' 
    3367 0000d690     b60a          move    *a0(PA10),a10,L
         0000d6a0     0080  
    3368 0000d6b0     0d5f          calla   XFERPROC
         0000d6c0 00000000! 
    3369                    
    3370 0000d6e0     09e0          movi    nzienforcer_points,a0
         0000d6f0 00000064  
    3371 0000d710     0d3f          callr   score_points
         0000d720     052b  
    3372                    
    3373 0000d730                   PULL    a1,a7
    3374 0000d750     0960          rets
    3375                    
    3376                    
    3377                    ******************************************************************************
    3378                    *
    3379                    *       enforcer configuration data
    3380                    *
    3381                    
    3382              0064  nzienforcer_points      equ     100
    3383                    
    3384              0004  nzipicket_prob  equ     4       ;one chance in X of becoming the picket if
    3385                                                    ; there are multiple enforcers and none is
    3386                                                    ; on the job already.
    3387                    
    3388              0004  nzistand_down_prob equ  4       ;one chance in X of leaving picket duty if
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   76

    3389                                                    ; we're the only enforcer left.
    3390                    
    3391              0008  nziabandon_post_prob equ        8       ;one chance in X of leaving picket duty if
    3392                                                    ; there are other enforcers around.
    3393                    
    3394              0096  nziturn_time    equ     150
    3395              005a  nzifire_time    equ     90
    3396                    
    3397              0006  nzigrow_speed   equ     6
    3398                    
    3399              0035  nzimin_x        equ     53      ;enforcer move bounds
    3400              0152  nzimax_x        equ     347-9
    3401              002d  nzimin_y        equ     45
    3402              00dc  nzimax_y        equ     231-11
    3403                    
    3404 0000d760           nzigrow_script
    3405 0000d760 000005a0"         .long   enf_g1
    3406 0000d780 00000630"         .long   enf_g2
    3407 0000d7a0 000006c0"         .long   enf_g3
    3408 0000d7c0 00000750"         .long   enf_g4
    3409 0000d7e0 000007e0"         .long   enf_g5
    3410 0000d800 00000510"         .long   enf_1
    3411 0000d820 00000000          .long   0
    3412 0000d840           nzigrow_scriptx
    3413                    
    3414 0000d840           nzidie_vert
    3415 0000d840 000068a0"         .long   enf_xv1
    3416 0000d860 00006930"         .long   enf_xv2
    3417 0000d880 000069c0"         .long   enf_xv3
    3418 0000d8a0 00006a50"         .long   enf_xv4
    3419 0000d8c0 00006ae0"         .long   enf_xv5
    3420 0000d8e0 00000000          .long   0
    3421 0000d900           nzidie_vertx
    3422                    
    3423 0000d900           nzidie_horz
    3424 0000d900 00006db0"         .long   enf_xh1
    3425 0000d920 00006e40"         .long   enf_xh2
    3426 0000d940 00006ed0"         .long   enf_xh3
    3427 0000d960 00006f60"         .long   enf_xh4
    3428 0000d980 00000000          .long   0
    3429 0000d9a0           nzidie_horzx
    3430                    
    3431 0000d9a0           nzidie_diag13
    3432 0000d9a0 00006ff0"         .long   enf_xf1
    3433 0000d9c0 00007080"         .long   enf_xf2
    3434 0000d9e0 00007110"         .long   enf_xf3
    3435 0000da00 000071a0"         .long   enf_xf4
    3436 0000da20 00000000          .long   0
    3437 0000da40           nzidie_diag13x
    3438                    
    3439 0000da40           nzidie_diag24
    3440 0000da40 00006b70"         .long   enf_xb1
    3441 0000da60 00006c00"         .long   enf_xb2
    3442 0000da80 00006c90"         .long   enf_xb3
    3443 0000daa0 00006d20"         .long   enf_xb4
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   77

    3444 0000dac0 00000000          .long   0
    3445 0000dae0           nzidie_diag24x
    3446                    
    3447              0003  nzideath_speed  equ     3               ;death seq anim speed
    3448                    
    3449                    
    3450                    *****************************************************************************
    3451                    ******************************************************************************
    3452                    ******************************************************************************
    3453                    *
    3454                    *       SPARK SECTION
    3455                    *
    3456                    
    3457                            ;reg use
    3458                            ;  a6 (use) x acc
    3459                            ;  a7 (use) y acc
    3460                            ;  a8 (use) *image
    3461                            ;  a9 (use) anim timer
    3462                            ; a10 (in)  initial X
    3463                            ; a10 (use) anim pointer
    3464                            ; a11 (in)  initial Y
    3465                            ; a11 (use) life timer
    3466                    
    3467 0000dae0            SUBRP  spark
    3468                    
    3469                            ;create a spark object
    3470 0000dae0     4d40          move    a10,a0
    3471 0000daf0     4d61          move    a11,a1
    3472                    
    3473 0000db00     09ea          movi    mxsscript,a10
         0000db10 0000e500' 
    3474 0000db30     9742          move    *a10+,a2,L
    3475 0000db40     5663          clr     a3
    3476 0000db50     09e4          movi    DMAWNZ,a4
         0000db60 00008002  
    3477 0000db80     09e5          movi    CLSENMY|TYPSPARK,a5
         0000db90 00008a00  
    3478 0000dbb0     56c6          clr     a6
    3479 0000dbc0     56e7          clr     a7
    3480 0000dbd0     0d5f          calla   BEGINOBJW
         0000dbe0 00000000! 
    3481                    
    3482                            ;set the initial velocity.
    3483 0000dc00     07a0          move    @player_object,a0,L
         0000dc10 00000050- 
    3484 0000dc30     b601          move    *a0(OXVAL),a1,L
         0000dc40     0080  
    3485 0000dc50     b702          move    *a8(OXVAL),a2,L
         0000dc60     0080  
    3486 0000dc70     4441          sub     a2,a1
    3487 0000dc80     2b61          sra     5,a1
    3488 0000dc90     b228          move    a1,*a8(OXVEL),L
         0000dca0     0020  
    3489                    
    3490 0000dcb0     b601          move    *a0(OYVAL),a1,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   78

         0000dcc0     00a0  
    3491 0000dcd0     b702          move    *a8(OYVAL),a2,L
         0000dce0     00a0  
    3492 0000dcf0     4441          sub     a2,a1
    3493 0000dd00     2b61          sra     5,a1
    3494 0000dd10     b228          move    a1,*a8(OYVEL),L
         0000dd20     0040  
    3495                    
    3496                            ;and then add a little 'spin' by giving them some acceleration
    3497 0000dd30     09e0          movi    mxshigh_acc*2,a0
         0000dd40 00000400  
    3498 0000dd60     0d5f          calla   RNDRNG0
         0000dd70 00000000! 
    3499 0000dd90     0d00          subi    mxshigh_acc,a0
         0000dda0 fffffdff  
    3500 0000ddc0     4c06          move    a0,a6
    3501 0000ddd0     09e0          movi    mxshigh_acc*2,a0
         0000dde0 00000400  
    3502 0000de00     0d5f          calla   RNDRNG0
         0000de10 00000000! 
    3503 0000de30     0d00          subi    mxshigh_acc,a0
         0000de40 fffffdff  
    3504 0000de60     4c07          move    a0,a7
    3505                    
    3506 0000de70     09e9          movi    mxsanim_time,a9
         0000de80 00000003  
    3507 0000dea0     09eb          movi    mxslife_time,a11
         0000deb0 000000b4  
    3508                    
    3509 0000ded0           mxsloop
    3510 0000ded0                   PUSHP   a6,a7
    3511 0000def0                   SLEEPK  1
    3512 0000df30                   PULLP   a6,a7
    3513                    
    3514                            ;bounds check
    3515 0000df50     0d3f          callr   mxsin_bounds
         0000df60     0021  
    3516                    
    3517                            ;apply accelerations
    3518 0000df70     b70e          move    *a8(OXVEL),a14,L
         0000df80     0020  
    3519 0000df90     40ce          add     a6,a14
    3520 0000dfa0     b3c8          move    a14,*a8(OXVEL),L
         0000dfb0     0020  
    3521                    
    3522 0000dfc0     b70e          move    *a8(OYVEL),a14,L
         0000dfd0     0040  
    3523 0000dfe0     40ee          add     a7,a14
    3524 0000dff0     b3c8          move    a14,*a8(OYVEL),L
         0000e000     0040  
    3525                    
    3526 0000e010     1429          dec     a9
    3527 0000e020     cb0c          jrnz    mxsno_anim
    3528                    
    3529 0000e030     9740          move    *a10+,a0,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   79

    3530 0000e040     cb04          jrnz    mxsno_wrap
    3531 0000e050     09ea          movi    mxsscript,a10
         0000e060 0000e500' 
    3532 0000e080     9740          move    *a10+,a0,L
    3533 0000e090           mxsno_wrap
    3534 0000e090     0d5f          calla   civanic
         0000e0a0 00000000! 
    3535 0000e0c0     09e9          movi    mxsanim_time,a9
         0000e0d0 00000003  
    3536                    
    3537 0000e0f0           mxsno_anim
    3538 0000e0f0     142b          dec     a11
    3539 0000e100     ca01          jrz     mxsexpire
    3540 0000e110     c0db          jruc    mxsloop
    3541                    
    3542 0000e120           mxsexpire
    3543 0000e120     0d5f          calla   DELOBJA8
         0000e130 00000000! 
    3544                    
    3545 0000e150                   DIE
    3546                    
    3547                    
    3548 0000e180            SUBRP  mxsin_bounds
    3549                    
    3550 0000e180     b50e          move    *a8(OXPOS),a14,W
         0000e190     0090  
    3551 0000e1a0     09e0          movi    mxsmin_x,a0
         0000e1b0 00000035  
    3552 0000e1d0     480e          cmp     a0,a14
    3553 0000e1e0     c406          jrlt    mxsx_adjust
    3554                    
    3555 0000e1f0     09e0          movi    mxsmax_x,a0
         0000e200 00000154  
    3556 0000e220     480e          cmp     a0,a14
    3557 0000e230     c701          jrgt    mxsx_adjust
    3558 0000e240     c005          jruc    mxsy_check
    3559                    
    3560 0000e250           mxsx_adjust
    3561 0000e250     b008          move    a0,*a8(OXPOS),W
         0000e260     0090  
    3562 0000e270     56c6          clr     a6
    3563 0000e280     b2c8          move    a6,*a8(OXVEL),L
         0000e290     0020  
    3564                    
    3565 0000e2a0           mxsy_check
    3566 0000e2a0     b50e          move    *a8(OYPOS),a14,W
         0000e2b0     00b0  
    3567 0000e2c0     09e0          movi    mxsmin_y,a0
         0000e2d0 0000002d  
    3568 0000e2f0     480e          cmp     a0,a14
    3569 0000e300     c406          jrlt    mxsy_adjust
    3570                    
    3571 0000e310     09e0          movi    mxsmax_y,a0
         0000e320 000000e0  
    3572 0000e340     480e          cmp     a0,a14
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   80

    3573 0000e350     c701          jrgt    mxsy_adjust
    3574 0000e360     c005          jruc    mxsdone_check
    3575                    
    3576 0000e370           mxsy_adjust
    3577 0000e370     b008          move    a0,*a8(OYPOS),W
         0000e380     00b0  
    3578 0000e390     56e7          clr     a7
    3579 0000e3a0     b2e8          move    a7,*a8(OYVEL),L
         0000e3b0     0040  
    3580                    
    3581 0000e3c0           mxsdone_check
    3582 0000e3c0     0960          rets
    3583                    
    3584                    
    3585                    ******************************************************************************
    3586                    *
    3587                    *       spark collision routines
    3588                    *
    3589                    
    3590 0000e3d0            SUBR   spark_die
    3591 0000e3d0                   PUSH    a1,a7
    3592                    
    3593 0000e3f0     09ce          movi    CLSDEAD,a14
         0000e400     2000  
    3594 0000e410     b1c8          move    a14,*a8(OID),W
         0000e420     0190  
    3595 0000e430     b700          move    *a8(OPLINK),a0,L
         0000e440     01a0  
    3596 0000e450     09c1          movi    DEADSPARK_PID,a1
         0000e460     0238  
    3597 0000e470     09e7          movi    mxsexpire,a7
         0000e480 0000e120' 
    3598 0000e4a0     0d5f          calla   XFERPROC
         0000e4b0 00000000! 
    3599                    
    3600 0000e4d0                   PULL    a1,a7
    3601 0000e4f0     0960          rets
    3602                    
    3603                    
    3604                    ******************************************************************************
    3605                    *
    3606                    *       spark configuration data
    3607                    *
    3608                    
    3609              00b4  mxslife_time    equ     180             ;how long they last
    3610              0003  mxsanim_time    equ     3               ;frame rate
    3611                    
    3612              0200  mxshigh_acc     equ     00000200h       ;top acceleration
    3613                    
    3614              0035  mxsmin_x        equ     53      ;spark move bounds
    3615              0154  mxsmax_x        equ     347-7
    3616              002d  mxsmin_y        equ     45
    3617              00e0  mxsmax_y        equ     231-7
    3618                    
    3619 0000e500           mxsscript
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   81

    3620 0000e500 00000870"         .long   spark_1
    3621 0000e520 00000900"         .long   spark_2
    3622 0000e540 00000990"         .long   spark_3
    3623 0000e560 00000a20"         .long   spark_4
    3624 0000e580 00000000          .long   0
    3625                    
    3626                    
    3627                    *****************************************************************************
    3628                    ******************************************************************************
    3629                    ******************************************************************************
    3630                    *
    3631                    *       QUARK SECTION
    3632                    *
    3633                    
    3634                            ;reg use
    3635                            ; a0 - (in) # of quarks
    3636                    
    3637 0000e5a0            SUBRP  make_quarks
    3638                    
    3639 0000e5a0     4c00          move    a0,a0
    3640 0000e5b0     ca31          jrz     ntkdone
    3641                    
    3642 0000e5c0           ntkanother_quark
    3643 0000e5c0                   PUSHP   a0
    3644                    
    3645 0000e5d0           ntkget_pos
    3646                            ;assign a random starting position
    3647 0000e5d0     09e0          movi    ntkmax_x-ntkmin_x,a0
         0000e5e0 00000126  
    3648 0000e600     0d5f          calla   RNDRNG0
         0000e610 00000000! 
    3649 0000e630     4c09          move    a0,a9
    3650 0000e640     09e0          movi    ntkmax_y-ntkmin_y,a0
         0000e650 000000ba  
    3651 0000e670     0d5f          calla   RNDRNG0
         0000e680 00000000! 
    3652 0000e6a0     4c0a          move    a0,a10
    3653                    
    3654 0000e6b0     0b29          addi    ntkmin_x,a9
         0000e6c0 00000035  
    3655 0000e6e0     0b2a          addi    ntkmin_y,a10
         0000e6f0 0000002d  
    3656                    
    3657 0000e710     0b69          cmpi    ntkmid_x1,a9
         0000e720 ffffff73  
    3658 0000e740     c60d          jrle    ntkplace_quark
    3659 0000e750     0b69          cmpi    ntkmid_x2,a9
         0000e760 fffffefb  
    3660 0000e780     c509          jrge    ntkplace_quark
    3661 0000e790     0b6a          cmpi    ntkmid_y1,a10
         0000e7a0 ffffffb1  
    3662 0000e7c0     c605          jrle    ntkplace_quark
    3663 0000e7d0     0b6a          cmpi    ntkmid_y2,a10
         0000e7e0 ffffff39  
    3664 0000e800     c501          jrge    ntkplace_quark
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   82

    3665 0000e810     c0db          jruc    ntkget_pos
    3666                    
    3667 0000e820           ntkplace_quark
    3668 0000e820                   CREATE  QUARK_PID,quark
    3669 0000e8a0                   PULLP   a0
    3670 0000e8b0     0d80          dsj     a0,ntkanother_quark
         0000e8c0     ffcf  
    3671                    
    3672 0000e8d0           ntkdone
    3673 0000e8d0     0960          rets
    3674                    
    3675                    
    3676              008c  ntkmid_x1       equ     200-60  ;quark start inner boundaries
    3677              0104  ntkmid_x2       equ     200+60
    3678              004e  ntkmid_y1       equ     138-60
    3679              00c6  ntkmid_y2       equ     138+60
    3680                    
    3681                    
    3682                    *******************************************************************************
    3683                    *
    3684                    *       quark process
    3685                    *
    3686                    
    3687 0000e8e0                   STRUCTPD
    3688 0000e8e0                   WORD    ntkOCHILDREN    ;UHW # of children left to spawn
    3689 0000e8e0                   WORD    ntkOSTAGE               ;UHW stage in life cycle
    3690                    
    3691                            ;reg use
    3692                            ; a7 (use) event timer (related to ntkOSTAGE)
    3693                            ; a8 (use) * object
    3694                            ; a9 (in)  x pos
    3695                            ; a9 (use) anim counter
    3696                            ;a10 (in)  y pos
    3697                            ;a10 (use) frame pointer
    3698                            ;a11 (use) time until next vel change
    3699                    
    3700 0000e8e0            SUBRP  quark
    3701                    
    3702                            ;increment the badguy count
    3703 0000e8e0     05ae          move    @live_badguys,a14,W
         0000e8f0 000000a0- 
    3704 0000e910     102e          inc     a14
    3705 0000e920     058e          move    a14,@live_badguys,W
         0000e930 000000a0- 
    3706                    
    3707                            ;create the quark object
    3708 0000e950     4d20          move    a9,a0           ;x pos
    3709 0000e960     2600          sll     16,a0
    3710 0000e970     4d41          move    a10,a1          ;y pos
    3711 0000e980     2601          sll     16,a1
    3712 0000e990     09ea          movi    ntkstandard_script,a10
         0000e9a0 0000fa40' 
    3713 0000e9c0     9742          move    *a10+,a2,L      ;img
    3714 0000e9d0     5663          clr     a3
    3715 0000e9e0     09e4          movi    DMAWNZ,a4
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   83

         0000e9f0 00008002  
    3716 0000ea10     09e5          movi    CLSENMY|TYPQUARK,a5
         0000ea20 00008b00  
    3717 0000ea40     56c6          clr     a6
    3718 0000ea50     56e7          clr     a7
    3719 0000ea60     0d5f          calla   BEGINOBJW
         0000ea70 00000000! 
    3720                    
    3721                            ;initialize anim counter
    3722 0000ea90     09e9          movi    ntkanim_speed,a9
         0000eaa0 00000003  
    3723                    
    3724                            ;set initial velocities and accelerations
    3725 0000eac0     0d3f          callr   ntkset_v
         0000ead0     007f  
    3726                    
    3727                            ;initialize life cycle and event timer
    3728 0000eae0     09ee          movi    ntkSTAGE_YOUTH,a14
         0000eaf0 00000000  
    3729 0000eb10     b1cd          move    a14,*a13(ntkOSTAGE),W
         0000eb20     0110  
    3730 0000eb30     09e7          movi    ntkyouth_time,a7
         0000eb40 0000005a  
    3731                    
    3732 0000eb60           ntkloop
    3733 0000eb60                   PUSHP   a7
    3734 0000eb70                   SLEEPK  1
    3735 0000ebb0                   PULLP   a7
    3736 0000ebc0     1429          dec     a9
    3737 0000ebd0     cb16          jrnz    ntkno_anim
    3738                    
    3739                            ;advance the frame
    3740 0000ebe0     9740          move    *a10+,a0,L
    3741 0000ebf0     cb0e          jrnz    ntknewframe
    3742                    
    3743                            ;reset script.  depends on the stage
    3744 0000ec00     b5ae          move    *a13(ntkOSTAGE),a14,W
         0000ec10     0110  
    3745 0000ec20     0b6e          cmpi    ntkSTAGE_PARENT,a14
         0000ec30 fffffffe  
    3746 0000ec50     ca04          jreq    ntkset_parent_script
    3747 0000ec60     09ea          movi    ntkstandard_script,a10
         0000ec70 0000fa40' 
    3748 0000ec90     c003          jruc    ntkscript_set
    3749 0000eca0           ntkset_parent_script
    3750 0000eca0     09ea          movi    ntkparent_script,a10
         0000ecb0 0000fb00' 
    3751                    
    3752 0000ecd0           ntkscript_set
    3753 0000ecd0     9740          move    *a10+,a0,L
    3754                    
    3755 0000ece0           ntknewframe
    3756 0000ece0     0d5f          calla   civanic
         0000ecf0 00000000! 
    3757                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   84

    3758                            ;reset the counter
    3759 0000ed10     09e9          movi    ntkanim_speed,a9
         0000ed20 00000003  
    3760                    
    3761 0000ed40           ntkno_anim
    3762                            ;bounds check
    3763 0000ed40     0d3f          callr   ntkin_bounds
         0000ed50     0080  
    3764                    
    3765                            ;adjust vel if it's time
    3766 0000ed60     142b          dec     a11
    3767 0000ed70     cb02          jrnz    ntkno_v_change
    3768 0000ed80     0d3f          callr   ntkset_v
         0000ed90     0053  
    3769                    
    3770 0000eda0           ntkno_v_change
    3771                    
    3772                            ;do event?
    3773 0000eda0     1427          dec     a7
    3774 0000edb0     cb43          jrnz    ntkno_event
    3775                    
    3776                            ;event.  depends on the stage in the life cycle
    3777 0000edc0     b5ae          move    *a13(ntkOSTAGE),a14
         0000edd0     0110  
    3778 0000ede0     0b6e          cmpi    ntkSTAGE_YOUTH,a14
         0000edf0 ffffffff  
    3779 0000ee10     ca05          jreq    ntkyouth_event
    3780 0000ee20     0b6e          cmpi    ntkSTAGE_PARENT,a14
         0000ee30 fffffffe  
    3781 0000ee50     ca15          jreq    ntkparent_event
    3782                            ;default
    3783 0000ee60     c037          jruc    ntkdotage_event
    3784                    
    3785 0000ee70           ntkyouth_event
    3786                            ;switch to middle age
    3787 0000ee70     09ee          movi    ntkSTAGE_PARENT,a14
         0000ee80 00000001  
    3788 0000eea0     b1cd          move    a14,*a13(ntkOSTAGE),W
         0000eeb0     0110  
    3789                    
    3790                            ;set the number of kids to be spawned
    3791 0000eec0     09e0          movi    ntkmax_kids-ntkmin_kids,a0
         0000eed0 00000004  
    3792 0000eef0     0d5f          calla   RNDRNG0
         0000ef00 00000000! 
    3793 0000ef20     0b20          addi    ntkmin_kids,a0
         0000ef30 00000003  
    3794 0000ef50     b00d          move    a0,*a13(ntkOCHILDREN),W
         0000ef60     0100  
    3795                    
    3796                            ;set the spawn timer
    3797 0000ef70     09e7          movi    ntkspawn_time,a7
         0000ef80 0000005a  
    3798 0000efa0     c024          jruc    ntkno_event
    3799                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   85

    3800 0000efb0           ntkparent_event
    3801                            ;spawn a brat
    3802 0000efb0                   PUSHP   a10,a11
    3803 0000efd0     b70a          move    *a8(OXVAL),a10,L
         0000efe0     0080  
    3804 0000eff0     b70b          move    *a8(OYVAL),a11,L
         0000f000     00a0  
    3805 0000f010                   CREATE  TANK_PID,tank
    3806 0000f090                   PULLP   a10,a11
    3807                    
    3808                            ;decrement the kid count
    3809 0000f0b0     b5ae          move    *a13(ntkOCHILDREN),a14,W
         0000f0c0     0100  
    3810 0000f0d0     142e          dec     a14
    3811 0000f0e0     ca06          jrz     ntkbarren
    3812 0000f0f0     b1cd          move    a14,*a13(ntkOCHILDREN),W
         0000f100     0100  
    3813 0000f110     09e7          movi    ntkspawn_time,a7
         0000f120 0000005a  
    3814 0000f140     c00a          jruc    ntkno_event
    3815                    
    3816 0000f150           ntkbarren
    3817                            ;that was the last kid.  age
    3818 0000f150     09ee          movi    ntkSTAGE_DOTAGE,a14
         0000f160 00000002  
    3819 0000f180     b1cd          move    a14,*a13(ntkOSTAGE),W
         0000f190     0110  
    3820 0000f1a0     09e7          movi    ntkold_age_time,a7
         0000f1b0 00000078  
    3821 0000f1d0     c001          jruc    ntkno_event
    3822                    
    3823 0000f1e0           ntkdotage_event
    3824                            ;nothing fancy.  just die.
    3825 0000f1e0     c001          jruc    ntkdie_peacefully
    3826                            
    3827 0000f1f0           ntkno_event
    3828 0000f1f0     c096          jruc    ntkloop
    3829                    
    3830                    
    3831 0000f200           ntkbeen_shot
    3832                            ;crud.  we've been shot
    3833                    
    3834 0000f200           ntkdie_peacefully
    3835                    
    3836                            ;decrement the badguy count
    3837 0000f200     05ae          move    @live_badguys,a14,W
         0000f210 000000a0- 
    3838 0000f230     142e          dec     a14
    3839 0000f240     058e          move    a14,@live_badguys,W
         0000f250 000000a0- 
    3840                    
    3841 0000f270     0d5f          calla   DELOBJA8
         0000f280 00000000! 
    3842                    
    3843 0000f2a0                   DIE
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   86

    3844                    
    3845                    
    3846 0000f2d0            SUBRP  ntkset_v
    3847                    
    3848 0000f2d0     09e0          movi    ntkhigh_v,a0
         0000f2e0 0001c000  
    3849 0000f300     0d5f          calla   RNDRNG0
         0000f310 00000000! 
    3850 0000f330     0b60          cmpi    ntkhigh_v/2,a0
         0000f340 ffff1fff  
    3851 0000f360     c703          jrgt    ntkpositive_x
    3852                    
    3853 0000f370     0d00          subi    ntkhigh_v,a0
         0000f380 fffe3fff  
    3854                    
    3855 0000f3a0           ntkpositive_x
    3856 0000f3a0     b208          move    a0,*a8(OXVEL),L
         0000f3b0     0020  
    3857                    
    3858 0000f3c0     09e0          movi    ntkhigh_v,a0
         0000f3d0 0001c000  
    3859 0000f3f0     0d5f          calla   RNDRNG0
         0000f400 00000000! 
    3860 0000f420     0b60          cmpi    ntkhigh_v/2,a0
         0000f430 ffff1fff  
    3861 0000f450     c703          jrgt    ntkpositive_y
    3862                    
    3863 0000f460     0d00          subi    ntkhigh_v,a0
         0000f470 fffe3fff  
    3864                    
    3865 0000f490           ntkpositive_y
    3866 0000f490     b208          move    a0,*a8(OYVEL),L
         0000f4a0     0040  
    3867                    
    3868 0000f4b0     09e0          movi    ntkv_change_time/2,a0
         0000f4c0 0000012c  
    3869 0000f4e0     0d5f          calla   RNDRNG0
         0000f4f0 00000000! 
    3870 0000f510     0b20          addi    ntkv_change_time/2,a0
         0000f520 0000012c  
    3871 0000f540     4c0b          move    a0,a11
    3872                    
    3873 0000f550     0960          rets
    3874                    
    3875                    
    3876 0000f560            SUBRP  ntkin_bounds
    3877                    
    3878 0000f560     b501          move    *a8(OXPOS),a1,W
         0000f570     0090  
    3879 0000f580     09e0          movi    ntkmin_x,a0
         0000f590 00000035  
    3880 0000f5b0     b50e          move    *a8(ODXOFF),a14,W
         0000f5c0     0220  
    3881 0000f5d0     41c0          add     a14,a0
    3882 0000f5e0     4801          cmp     a0,a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   87

    3883 0000f5f0     c40c          jrlt    ntkx_adjust
    3884                    
    3885 0000f600     b500          move    *a8(OSIZEX),a0,W
         0000f610     0130  
    3886 0000f620     03a0          neg     a0
    3887 0000f630     b50e          move    *a8(ODXOFF),a14,W
         0000f640     0220  
    3888 0000f650     41c0          add     a14,a0
    3889 0000f660     0b20          addi    ntkmax_x,a0
         0000f670 0000015b  
    3890 0000f690     4801          cmp     a0,a1
    3891 0000f6a0     c701          jrgt    ntkx_adjust
    3892 0000f6b0     c007          jruc    ntky_check
    3893                    
    3894 0000f6c0           ntkx_adjust
    3895 0000f6c0     b008          move    a0,*a8(OXPOS),W
         0000f6d0     0090  
    3896 0000f6e0     b700          move    *a8(OXVEL),a0,L
         0000f6f0     0020  
    3897 0000f700     03a0          neg     a0
    3898 0000f710     b208          move    a0,*a8(OXVEL),L
         0000f720     0020  
    3899                    
    3900 0000f730           ntky_check
    3901 0000f730     b501          move    *a8(OYPOS),a1,W
         0000f740     00b0  
    3902 0000f750     09e0          movi    ntkmin_y,a0
         0000f760 0000002d  
    3903 0000f780     b50e          move    *a8(ODYOFF),a14,W
         0000f790     0230  
    3904 0000f7a0     41c0          add     a14,a0
    3905 0000f7b0     4801          cmp     a0,a1
    3906 0000f7c0     c40c          jrlt    ntky_adjust
    3907                    
    3908 0000f7d0     b500          move    *a8(OSIZEY),a0,W
         0000f7e0     0140  
    3909 0000f7f0     03a0          neg     a0
    3910 0000f800     b50e          move    *a8(ODYOFF),a14,W
         0000f810     0230  
    3911 0000f820     41c0          add     a14,a0
    3912 0000f830     0b20          addi    ntkmax_y,a0
         0000f840 000000e7  
    3913 0000f860     4801          cmp     a0,a1
    3914 0000f870     c701          jrgt    ntky_adjust
    3915 0000f880     c007          jruc    ntkdone_check
    3916                    
    3917 0000f890           ntky_adjust
    3918 0000f890     b008          move    a0,*a8(OYPOS),W
         0000f8a0     00b0  
    3919 0000f8b0     b700          move    *a8(OYVEL),a0,L
         0000f8c0     0040  
    3920 0000f8d0     03a0          neg     a0
    3921 0000f8e0     b208          move    a0,*a8(OYVEL),L
         0000f8f0     0040  
    3922                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   88

    3923 0000f900           ntkdone_check
    3924 0000f900     0960          rets
    3925                    
    3926                    
    3927                    ******************************************************************************
    3928                    *
    3929                    *       quark collision routines
    3930                    *
    3931                    
    3932 0000f910            SUBR   quark_die
    3933 0000f910                   PUSH    a1,a7
    3934                    
    3935 0000f930     09ce          movi    CLSDEAD,a14
         0000f940     2000  
    3936 0000f950     b1c8          move    a14,*a8(OID),W
         0000f960     0190  
    3937 0000f970     b700          move    *a8(OPLINK),a0,L
         0000f980     01a0  
    3938 0000f990     09c1          movi    DEADQUARK_PID,a1
         0000f9a0     0239  
    3939 0000f9b0     09e7          movi    ntkbeen_shot,a7
         0000f9c0 0000f200' 
    3940 0000f9e0     0d5f          calla   XFERPROC
         0000f9f0 00000000! 
    3941                    
    3942 0000fa10                   PULL    a1,a7
    3943 0000fa30     0960          rets
    3944                    
    3945                    
    3946                    ******************************************************************************
    3947                    *
    3948                    *       quark configuration data
    3949                    *
    3950                    
    3951              0003  ntkanim_speed   equ     3
    3952                    
    3953              0258  ntkv_change_time        equ     600     ;time between random course changes
    3954                    
    3955              005a  ntkyouth_time   equ     90      ;time before we have kids
    3956              005a  ntkspawn_time   equ     90      ;time between kids
    3957              0078  ntkold_age_time equ     120     ;time between last kid and natural death
    3958                    
    3959              0003  ntkmin_kids     equ     3       ;lower limit on spawned tanks
    3960              0007  ntkmax_kids     equ     7       ;upper limit
    3961                    
    3962          0001c000  ntkhigh_v               equ     0001C000h
    3963                    
    3964              0035  ntkmin_x        equ     53      ;quark move bounds
    3965              015b  ntkmax_x        equ     347-0
    3966              002d  ntkmin_y        equ     45
    3967              00e7  ntkmax_y        equ     231-0
    3968                    
    3969                    ;life cycle stages
    3970              0000  ntkSTAGE_YOUTH  equ     0000h
    3971              0001  ntkSTAGE_PARENT equ     0001h
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   89

    3972              0002  ntkSTAGE_DOTAGE equ     0002h
    3973                    
    3974 0000fa40           ntkstandard_script
    3975 0000fa40 00007470"         .long   quark_1
    3976 0000fa60 00007470"         .long   quark_1
    3977 0000fa80 00007500"         .long   quark_2
    3978 0000faa0 00007590"         .long   quark_3
    3979 0000fac0 00007620"         .long   quark_4
    3980 0000fae0 00000000          .long   0
    3981                    
    3982 0000fb00           ntkparent_script
    3983 0000fb00 00007470"         .long   quark_1
    3984 0000fb20 00007500"         .long   quark_2
    3985 0000fb40 00007590"         .long   quark_3
    3986 0000fb60 00007620"         .long   quark_4
    3987 0000fb80 000076b0"         .long   quark_5
    3988 0000fba0 00007740"         .long   quark_6
    3989 0000fbc0 000077d0"         .long   quark_7
    3990 0000fbe0 00007860"         .long   quark_8
    3991 0000fc00 00000000          .long   0
    3992                    
    3993                    
    3994                    *****************************************************************************
    3995                    ******************************************************************************
    3996                    ******************************************************************************
    3997                    *
    3998                    *       TANK SECTION
    3999                    *
    4000                    
    4001 0000fc20                   STRUCTPD
    4002 0000fc20                   WORD    tadOSHOTS               ;UHW shots left to be fired
    4003                    
    4004                            ;reg use
    4005                            ;  a7 (use) anim timer
    4006                            ;  a8 (use) *img
    4007                            ;  a9 (use) next move timer (move/fire phase)
    4008                            ;  a9 (use) frame pointer (death phase)
    4009                            ; a10 (in)  initial X
    4010                            ; a10 (use) frame pointer (grow + move/fire phases)
    4011                            ; a11 (in)  initial Y
    4012                            ; a11 (use) next shot timer (move/fire phase)
    4013                    
    4014 0000fc20            SUBRP  tank
    4015                    
    4016                            ;increment the badguy count
    4017 0000fc20     05ae          move    @live_badguys,a14,W
         0000fc30 000000a0- 
    4018 0000fc50     102e          inc     a14
    4019 0000fc60     058e          move    a14,@live_badguys,W
         0000fc70 000000a0- 
    4020                    
    4021                            ;create the tank object
    4022 0000fc90     4d40          move    a10,a0
    4023 0000fca0     4d61          move    a11,a1
    4024 0000fcb0     09ea          movi    tadgrow_script,a10
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   90

         0000fcc0 00010d70' 
    4025 0000fce0     9742          move    *a10+,a2,L
    4026 0000fcf0     5663          clr     a3
    4027 0000fd00     09e4          movi    DMAWNZ,a4
         0000fd10 00008002  
    4028 0000fd30     09e5          movi    CLSENMY|TYPTANK,a5
         0000fd40 00008c00  
    4029 0000fd60     56c6          clr     a6
    4030 0000fd70     56e7          clr     a7
    4031 0000fd80     0d5f          calla   BEGINOBJW
         0000fd90 00000000! 
    4032                    
    4033                            ;grow phase
    4034                    
    4035 0000fdb0           tadgrow_loop
    4036 0000fdb0                   SLEEPK  tadgrow_speed
    4037 0000fdf0     9740          move    *a10+,a0,L
    4038 0000fe00     ca04          jrz     tadmf_phase
    4039 0000fe10     0d5f          calla   civanic
         0000fe20 00000000! 
    4040 0000fe40     c0f6          jruc    tadgrow_loop
    4041                    
    4042 0000fe50           tadmf_phase
    4043                            ;begin move/fire phase.  set initial course
    4044 0000fe50     0d3f          callr   tadset_v
         0000fe60     006b  
    4045 0000fe70     09e7          movi    tadanim_time,a7
         0000fe80 00000002  
    4046 0000fea0     09ea          movi    tadright_script,a10
         0000feb0 00010e30' 
    4047 0000fed0     09e0          movi    tadfire_time/2,a0
         0000fee0 0000002d  
    4048 0000ff00     0d5f          calla   RNDRNG0
         0000ff10 00000000! 
    4049 0000ff30     0b20          addi    tadfire_time*3/4,a0
         0000ff40 00000043  
    4050 0000ff60     4c0b          move    a0,a11
    4051 0000ff70     09ee          movi    tadnum_shots,a14
         0000ff80 00000015  
    4052 0000ffa0     b1cd          move    a14,*a13(tadOSHOTS),W
         0000ffb0     0100  
    4053                    
    4054 0000ffc0           tadmain_loop
    4055 0000ffc0                   PUSHP   a7
    4056 0000ffd0                   SLEEPK  1
    4057 00010010                   PULLP   a7
    4058 00010020     1429          dec     a9
    4059 00010030     cb02          jrnz    tadno_turn
    4060                    
    4061                            ;change course
    4062 00010040     0d3f          callr   tadset_v
         00010050     004c  
    4063                    
    4064 00010060           tadno_turn
    4065                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   91

    4066 00010060     142b          dec     a11
    4067 00010070     cb1d          jrnz    tadno_shot
    4068                    
    4069 00010080     b5ae          move    *a13(tadOSHOTS),a14,W
         00010090     0100  
    4070 000100a0     ca1a          jrz     tadno_shot
    4071                    
    4072                            ;fire a shell
    4073 000100b0                   PUSHP   a7,a10,a11
    4074 000100d0     b70a          move    *a8(OXVAL),a10,L
         000100e0     0080  
    4075 000100f0     b70b          move    *a8(OYVAL),a11,L
         00010100     00a0  
    4076 00010110                   create  SHELL_PID,tank_shell
    4077 00010190                   PULLP   a7,a10,a11
    4078 000101b0     09e0          movi    tadfire_time/2,a0
         000101c0 0000002d  
    4079 000101e0     0d5f          calla   RNDRNG0
         000101f0 00000000! 
    4080 00010210     0b20          addi    tadfire_time*3/4,a0
         00010220 00000043  
    4081 00010240     4c0b          move    a0,a11
    4082                    
    4083 00010250           tadno_shot
    4084                    
    4085                            ;bounds check
    4086 00010250     0d3f          callr   tadin_bounds
         00010260     0054  
    4087                    
    4088                            ;animate?
    4089 00010270     1427          dec     a7
    4090 00010280     cb0c          jrnz    tadno_anim
    4091 00010290     9740          move    *a10+,a0,L
    4092 000102a0     cb04          jrnz    tadno_wrap
    4093 000102b0     09ea          movi    tadright_script,a10
         000102c0 00010e30' 
    4094 000102e0     9740          move    *a10+,a0,L
    4095                    
    4096 000102f0           tadno_wrap
    4097 000102f0     0d5f          calla   civanic
         00010300 00000000! 
    4098 00010320     09e7          movi    tadanim_time,a7
         00010330 00000002  
    4099                    
    4100 00010350           tadno_anim
    4101 00010350     c0c6          jruc    tadmain_loop
    4102                    
    4103 00010360           taddie
    4104                            ;decrement the badguy count
    4105 00010360     05ae          move    @live_badguys,a14,W
         00010370 000000a0- 
    4106 00010390     142e          dec     a14
    4107 000103a0     058e          move    a14,@live_badguys,W
         000103b0 000000a0- 
    4108                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   92

    4109                            ;zero our velocity
    4110 000103d0     57ce          clr     a14
    4111 000103e0     b3c8          move    a14,*a8(OXVEL),L
         000103f0     0020  
    4112 00010400     b3c8          move    a14,*a8(OYVEL),L
         00010410     0040  
    4113                    
    4114                            ;set up the animation
    4115 00010420           taddieloop
    4116 00010420     9720          move    *a9+,a0,L
    4117 00010430     ca08          jrz     taddead_n_buried
    4118 00010440     0d5f          calla   civanic
         00010450 00000000! 
    4119 00010470                   sleepk  taddeath_speed
    4120 000104b0     c0f6          jruc    taddieloop
    4121                    
    4122 000104c0           taddead_n_buried
    4123 000104c0     0d5f          calla   DELOBJA8
         000104d0 00000000! 
    4124                    
    4125 000104f0                   DIE
    4126                    
    4127                    
    4128 00010520            SUBRP  tadset_v
    4129                    
    4130 00010520     09e0          movi    tadhigh_v,a0
         00010530 00010000  
    4131 00010550     0d5f          calla   RNDRNG0
         00010560 00000000! 
    4132 00010580     0b60          cmpi    tadhigh_v/2,a0
         00010590 ffff7fff  
    4133 000105b0     c703          jrgt    tadpositive_x
    4134                    
    4135 000105c0     0d00          subi    tadhigh_v,a0
         000105d0 fffeffff  
    4136                    
    4137 000105f0           tadpositive_x
    4138 000105f0     b208          move    a0,*a8(OXVEL),L
         00010600     0020  
    4139                    
    4140 00010610     09e0          movi    tadhigh_v,a0
         00010620 00010000  
    4141 00010640     0d5f          calla   RNDRNG0
         00010650 00000000! 
    4142 00010670     0b60          cmpi    tadhigh_v/2,a0
         00010680 ffff7fff  
    4143 000106a0     c703          jrgt    tadpositive_y
    4144                    
    4145 000106b0     0d00          subi    tadhigh_v,a0
         000106c0 fffeffff  
    4146                    
    4147 000106e0           tadpositive_y
    4148 000106e0     b208          move    a0,*a8(OYVEL),L
         000106f0     0040  
    4149                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   93

    4150 00010700     09e0          movi    tadv_change_time/2,a0
         00010710 0000007d  
    4151 00010730     0d5f          calla   RNDRNG0
         00010740 00000000! 
    4152 00010760     0b20          addi    tadv_change_time/2,a0
         00010770 0000007d  
    4153 00010790     4c09          move    a0,a9
    4154                    
    4155 000107a0     0960          rets
    4156                    
    4157                    
    4158 000107b0            SUBRP  tadin_bounds
    4159                    
    4160 000107b0     b50e          move    *a8(OXPOS),a14,W
         000107c0     0090  
    4161 000107d0     09e0          movi    tadmin_x,a0
         000107e0 00000035  
    4162 00010800     480e          cmp     a0,a14
    4163 00010810     c406          jrlt    tadx_adjust
    4164                    
    4165 00010820     09e0          movi    tadmax_x,a0
         00010830 0000014e  
    4166 00010850     480e          cmp     a0,a14
    4167 00010860     c701          jrgt    tadx_adjust
    4168 00010870     c007          jruc    tady_check
    4169                    
    4170 00010880           tadx_adjust
    4171 00010880     b008          move    a0,*a8(OXPOS),W
         00010890     0090  
    4172 000108a0     b700          move    *a8(OXVEL),a0,L
         000108b0     0020  
    4173 000108c0     03a0          neg     a0
    4174 000108d0     b208          move    a0,*a8(OXVEL),L
         000108e0     0020  
    4175                    
    4176 000108f0           tady_check
    4177 000108f0     b50e          move    *a8(OYPOS),a14,W
         00010900     00b0  
    4178 00010910     09e0          movi    tadmin_y,a0
         00010920 0000002d  
    4179 00010940     480e          cmp     a0,a14
    4180 00010950     c406          jrlt    tady_adjust
    4181                    
    4182 00010960     09e0          movi    tadmax_y,a0
         00010970 000000d7  
    4183 00010990     480e          cmp     a0,a14
    4184 000109a0     c701          jrgt    tady_adjust
    4185 000109b0     c007          jruc    taddone_check
    4186                    
    4187 000109c0           tady_adjust
    4188 000109c0     b008          move    a0,*a8(OYPOS),W
         000109d0     00b0  
    4189 000109e0     b700          move    *a8(OYVEL),a0,L
         000109f0     0040  
    4190 00010a00     03a0          neg     a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   94

    4191 00010a10     b208          move    a0,*a8(OYVEL),L
         00010a20     0040  
    4192                    
    4193 00010a30           taddone_check
    4194 00010a30     0960          rets
    4195                    
    4196                    
    4197                    ******************************************************************************
    4198                    *
    4199                    *       tank collision routines
    4200                    *
    4201                    
    4202 00010a40            SUBR   tank_die
    4203                            ;hit by player gunfire
    4204 00010a40                   PUSH    a1,a7
    4205                    
    4206                            ;jeepers.  we're dead.
    4207 00010a60     09ce          movi    CLSDEAD,a14
         00010a70     2000  
    4208 00010a80     b1c8          move    a14,*a8(OID),W
         00010a90     0190  
    4209                    
    4210 00010aa0     b60e          move    *a0(OXVEL),a14,L
         00010ab0     0020  
    4211 00010ac0     ca0a          jrz     tadvert_bullet
    4212 00010ad0     b601          move    *a0(OYVEL),a1,L
         00010ae0     0040  
    4213 00010af0     ca03          jrz     tadhorz_bullet
    4214                    
    4215 00010b00     402e          add     a1,a14
    4216 00010b10     ca09          jrz     taddiag_13
    4217 00010b20     c00c          jruc    taddiag_24
    4218                    
    4219 00010b30           tadhorz_bullet
    4220 00010b30     09e9          movi    taddie_vert,a9
         00010b40 00010ed0' 
    4221 00010b60     c00c          jruc    taddeath_set
    4222 00010b70           tadvert_bullet
    4223 00010b70     09e9          movi    taddie_horz,a9
         00010b80 00010f90' 
    4224 00010ba0     c008          jruc    taddeath_set
    4225 00010bb0           taddiag_13
    4226 00010bb0     09e9          movi    taddie_diag24,a9
         00010bc0 000110d0' 
    4227 00010be0     c004          jruc    taddeath_set
    4228 00010bf0           taddiag_24
    4229 00010bf0     09e9          movi    taddie_diag13,a9
         00010c00 00011030' 
    4230 00010c20     0300          jruc    taddeath_set
    4231                    
    4232 00010c30           taddeath_set
    4233 00010c30     b700          move    *a8(OPLINK),a0,L
         00010c40     01a0  
    4234 00010c50     09c1          movi    DEADTANK_PID,a1
         00010c60     023a  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   95

    4235 00010c70     09e7          movi    taddie,a7
         00010c80 00010360' 
    4236 00010ca0     b60a          move    *a0(PA10),a10,L
         00010cb0     0080  
    4237 00010cc0     0d5f          calla   XFERPROC
         00010cd0 00000000! 
    4238                    
    4239 00010cf0     09e0          movi    tadtank_points,a0
         00010d00 000000c8  
    4240 00010d20     0d3f          callr   score_points
         00010d30     01ca  
    4241                    
    4242 00010d40                   PULL    a1,a7
    4243 00010d60     0960          rets
    4244                    
    4245                    
    4246                    ******************************************************************************
    4247                    *
    4248                    *       tank configuration data
    4249                    *
    4250                    
    4251              00c8  tadtank_points  equ     200
    4252                    
    4253              0015  tadnum_shots    equ     21
    4254                    
    4255              00fa  tadv_change_time        equ     250
    4256              005a  tadfire_time    equ     90
    4257                    
    4258          00010000  tadhigh_v               equ     00010000h
    4259                    
    4260              0006  tadgrow_speed   equ     6
    4261              0002  tadanim_time    equ     2
    4262                    
    4263              0035  tadmin_x        equ     53      ;tank move bounds
    4264              014e  tadmax_x        equ     347-13
    4265              002d  tadmin_y        equ     45
    4266              00d7  tadmax_y        equ     231-16
    4267                    
    4268 00010d70           tadgrow_script
    4269 00010d70 00007230"         .long   tank_g1
    4270 00010d90 000072c0"         .long   tank_g2
    4271 00010db0 00007350"         .long   tank_g3
    4272 00010dd0 000073e0"         .long   tank_g4
    4273 00010df0 000078f0"         .long   tank_1
    4274 00010e10 00000000          .long   0
    4275                    
    4276 00010e30           tadright_script
    4277 00010e30 000078f0"         .long   tank_1
    4278 00010e50 00007980"         .long   tank_2
    4279 00010e70 00007a10"         .long   tank_3
    4280 00010e90 00007aa0"         .long   tank_4
    4281 00010eb0 00000000          .long   0
    4282                    
    4283 00010ed0           taddie_vert
    4284 00010ed0 000068a0"         .long   enf_xv1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   96

    4285 00010ef0 00006930"         .long   enf_xv2
    4286 00010f10 000069c0"         .long   enf_xv3
    4287 00010f30 00006a50"         .long   enf_xv4
    4288 00010f50 00006ae0"         .long   enf_xv5
    4289 00010f70 00000000          .long   0
    4290                    
    4291 00010f90           taddie_horz
    4292 00010f90 00006db0"         .long   enf_xh1
    4293 00010fb0 00006e40"         .long   enf_xh2
    4294 00010fd0 00006ed0"         .long   enf_xh3
    4295 00010ff0 00006f60"         .long   enf_xh4
    4296 00011010 00000000          .long   0
    4297                    
    4298 00011030           taddie_diag13
    4299 00011030 00006ff0"         .long   enf_xf1
    4300 00011050 00007080"         .long   enf_xf2
    4301 00011070 00007110"         .long   enf_xf3
    4302 00011090 000071a0"         .long   enf_xf4
    4303 000110b0 00000000          .long   0
    4304                    
    4305 000110d0           taddie_diag24
    4306 000110d0 00006b70"         .long   enf_xb1
    4307 000110f0 00006c00"         .long   enf_xb2
    4308 00011110 00006c90"         .long   enf_xb3
    4309 00011130 00006d20"         .long   enf_xb4
    4310 00011150 00000000          .long   0
    4311                    
    4312              0003  taddeath_speed  equ     3               ;death seq anim speed
    4313                    
    4314                    
    4315                    *****************************************************************************
    4316                    ******************************************************************************
    4317                    ******************************************************************************
    4318                    *
    4319                    *       SHELL SECTION
    4320                    *
    4321                    
    4322                            ;reg use
    4323                            ;  a8 (use) *image
    4324                            ; a10 (in)  initial X
    4325                            ; a11 (in)  initial Y
    4326                            ; a11 (use) life timer
    4327                    
    4328 00011170            SUBRP  tank_shell
    4329                    
    4330                            ;create a shell object
    4331 00011170     4d40          move    a10,a0
    4332 00011180     4d61          move    a11,a1
    4333 00011190     09e2          movi    shell,a2
         000111a0 00007b30" 
    4334 000111c0     5663          clr     a3
    4335 000111d0     09e4          movi    DMAWNZ,a4
         000111e0 00008002  
    4336 00011200     09e5          movi    CLSENMY|TYPSHELL,a5
         00011210 00008d00  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   97

    4337 00011230     56c6          clr     a6
    4338 00011240     56e7          clr     a7
    4339 00011250     0d5f          calla   BEGINOBJW
         00011260 00000000! 
    4340                    
    4341                            ;set the initial velocity.
    4342 00011280     07a0          move    @player_object,a0,L
         00011290 00000050- 
    4343 000112b0     b601          move    *a0(OXVAL),a1,L
         000112c0     0080  
    4344 000112d0     b702          move    *a8(OXVAL),a2,L
         000112e0     0080  
    4345 000112f0     4441          sub     a2,a1
    4346 00011300     2b61          sra     5,a1
    4347 00011310     b228          move    a1,*a8(OXVEL),L
         00011320     0020  
    4348                    
    4349 00011330     b601          move    *a0(OYVAL),a1,L
         00011340     00a0  
    4350 00011350     b702          move    *a8(OYVAL),a2,L
         00011360     00a0  
    4351 00011370     4441          sub     a2,a1
    4352 00011380     2b61          sra     5,a1
    4353 00011390     b228          move    a1,*a8(OYVEL),L
         000113a0     0040  
    4354                    
    4355 000113b0     09eb          movi    ikvlife_time,a11
         000113c0 000000f0  
    4356                    
    4357 000113e0           ikvloop
    4358 000113e0                   PUSHP   a6,a7
    4359 00011400                   SLEEPK  1
    4360 00011440                   PULLP   a6,a7
    4361                    
    4362                            ;bounds check
    4363 00011460     0d3f          callr   ikvin_bounds
         00011470     0007  
    4364                    
    4365 00011480     3d6b          dsj     a11,ikvloop
    4366                    
    4367 00011490           ikvexpire
    4368 00011490     0d5f          calla   DELOBJA8
         000114a0 00000000! 
    4369                    
    4370 000114c0                   DIE
    4371                    
    4372                    
    4373 000114f0            SUBRP  ikvin_bounds
    4374                    
    4375 000114f0     b50e          move    *a8(OXPOS),a14,W
         00011500     0090  
    4376 00011510     09e0          movi    ikvmin_x,a0
         00011520 00000035  
    4377 00011540     480e          cmp     a0,a14
    4378 00011550     c406          jrlt    ikvx_adjust
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   98

    4379                    
    4380 00011560     09e0          movi    ikvmax_x,a0
         00011570 00000154  
    4381 00011590     480e          cmp     a0,a14
    4382 000115a0     c701          jrgt    ikvx_adjust
    4383 000115b0     c007          jruc    ikvy_check
    4384                    
    4385 000115c0           ikvx_adjust
    4386 000115c0     b008          move    a0,*a8(OXPOS),W
         000115d0     0090  
    4387 000115e0     b700          move    *a8(OXVEL),a0,L
         000115f0     0020  
    4388 00011600     03a0          neg     a0
    4389 00011610     b208          move    a0,*a8(OXVEL),L
         00011620     0020  
    4390                    
    4391 00011630           ikvy_check
    4392 00011630     b50e          move    *a8(OYPOS),a14
         00011640     00b0  
    4393 00011650     09e0          movi    ikvmin_y,a0
         00011660 0000002d  
    4394 00011680     480e          cmp     a0,a14
    4395 00011690     c406          jrlt    ikvy_adjust
    4396                    
    4397 000116a0     09e0          movi    ikvmax_y,a0
         000116b0 000000e0  
    4398 000116d0     480e          cmp     a0,a14
    4399 000116e0     c701          jrgt    ikvy_adjust
    4400 000116f0     c007          jruc    ikvdone_check
    4401                    
    4402 00011700           ikvy_adjust
    4403 00011700     b008          move    a0,*a8(OYPOS),W
         00011710     00b0  
    4404 00011720     b700          move    *a8(OYVEL),a0,L
         00011730     0040  
    4405 00011740     03a0          neg     a0
    4406 00011750     b208          move    a0,*a8(OYVEL),L
         00011760     0040  
    4407                    
    4408 00011770           ikvdone_check
    4409 00011770     0960          rets
    4410                    
    4411                    
    4412                    ******************************************************************************
    4413                    *
    4414                    *       shell collision routines
    4415                    *
    4416                    
    4417 00011780            SUBR   shell_die
    4418 00011780                   PUSH    a1,a7
    4419                    
    4420 000117a0     09ce          movi    CLSDEAD,a14
         000117b0     2000  
    4421 000117c0     b1c8          move    a14,*a8(OID),W
         000117d0     0190  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE   99

    4422 000117e0     b700          move    *a8(OPLINK),a0,L
         000117f0     01a0  
    4423 00011800     09c1          movi    DEADSHELL_PID,a1
         00011810     023b  
    4424 00011820     09e7          movi    ikvexpire,a7
         00011830 00011490' 
    4425 00011850     0d5f          calla   XFERPROC
         00011860 00000000! 
    4426                    
    4427 00011880                   PULL    a1,a7
    4428 000118a0     0960          rets
    4429                    
    4430                    
    4431                    ******************************************************************************
    4432                    *
    4433                    *       shell configuration data
    4434                    *
    4435                    
    4436              00f0  ikvlife_time    equ     240             ;how long they last
    4437                    
    4438              0035  ikvmin_x        equ     53      ;shell move bounds
    4439              0154  ikvmax_x        equ     347-7
    4440              002d  ikvmin_y        equ     45
    4441              00e0  ikvmax_y        equ     231-7
    4442                    
    4443                    
    4444                    *****************************************************************************
    4445                    ******************************************************************************
    4446                    ******************************************************************************
    4447                    *
    4448                    *       color cycling processes
    4449                    *
    4450                    
    4451 000118b0            SUBRP  robo_pal_cycles
    4452                    
    4453                            ;laser flash cycle
    4454 000118b0     09e8          movi    [0Ah,1],a8              ;cycle color A
         000118c0 000a0001  
    4455 000118e0     09e9          movi    robo_p,a9               ;pal name
         000118f0 00000000! 
    4456 00011910     09ea          movi    COLTAB_LFLASH,a10       ;use the LFLASH table
         00011920 00011f80' 
    4457 00011940     182b          movk    1,a11                   ;cycle speed
    4458 00011950                   CREATE  CYCPID,CYCLE_TABLE
    4459                    
    4460                            ;rgb cycle
    4461 000119d0     09e8          movi    [0Bh,1],a8              ;cycle color B
         000119e0 000b0001  
    4462 00011a00     09e9          movi    robo_p,a9               ;pal name
         00011a10 00000000! 
    4463 00011a30     09ea          movi    COLTAB_RGB,a10          ;use the RGB table
         00011a40 000121d0' 
    4464 00011a60     190b          movk    8,a11                   ;cycle speed
    4465 00011a70                   CREATE  CYCPID,CYCLE_TABLE
    4466                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE  100

    4467                            ;decay cycle
    4468 00011af0     09e8          movi    [0Ch,1],a8              ;cycle color C
         00011b00 000c0001  
    4469 00011b20     09e9          movi    robo_p,a9               ;pal name
         00011b30 00000000! 
    4470 00011b50     09ea          movi    COLTAB_DECAY,a10        ;use the DECAY table
         00011b60 00012220' 
    4471 00011b80     184b          movk    2,a11                   ;cycle speed
    4472 00011b90                   CREATE  CYCPID,CYCLE_TABLE
    4473                    
    4474                            ;laser cycle
    4475 00011c10     09e8          movi    [0Dh,1],a8              ;cycle color D
         00011c20 000d0001  
    4476 00011c40     09e9          movi    robo_p,a9               ;pal name
         00011c50 00000000! 
    4477 00011c70     09ea          movi    COLTAB_LASER,a10        ;use the LASER table
         00011c80 00012390' 
    4478 00011ca0     1a8b          movk    20,a11                  ;cycle speed
    4479 00011cb0                   CREATE  CYCPID,CYCLE_TABLE
    4480                    
    4481                            ;blue-purple-red cycle
    4482 00011d30     09e8          movi    [0Eh,1],a8              ;cycle color E
         00011d40 000e0001  
    4483 00011d60     09e9          movi    robo_p,a9               ;pal name
         00011d70 00000000! 
    4484 00011d90     09ea          movi    COLTAB_BLUPURRED,a10    ;use the BPR table
         00011da0 000123d0' 
    4485 00011dc0     182b          movk    1,a11                   ;cycle speed
    4486 00011dd0                   CREATE  CYCPID,CYCLE_TABLE
    4487                    
    4488                            ;red-gold cycle
    4489 00011e50     09e8          movi    [0Fh,1],a8              ;cycle color F
         00011e60 000f0001  
    4490 00011e80     09e9          movi    robo_p,a9               ;pal name
         00011e90 00000000! 
    4491 00011eb0     09ea          movi    COLTAB_REDGOLD,a10      ;use the RED-GOLD table
         00011ec0 00012580' 
    4492 00011ee0     194b          movk    10,a11                  ;cycle speed
    4493 00011ef0                   CREATE  CYCPID,CYCLE_TABLE
    4494                    
    4495 00011f70     0960          rets
    4496                    
    4497                    
    4498 00011f80           COLTAB_LFLASH
    4499 00011f80     0380          .WORD   0380H,1380H,2380H,3380H,4380H,5380H,6380H,7380H,7300H
    4500 00012010     7280          .WORD   7280H,7200H,7180H,7080H,7008H,7008H,7010H,7010H,701CH
    4501 000120a0     701c          .WORD   701CH,601CH,501CH,409CH,309CH,209CH,219CH,029CH,039CH
    4502 00012130     139c          .WORD   139CH,239CH,339CH,539CH,739CH,7390H,7380H,6380H,4380H
    4503 000121c0     ffff          .word   -1
    4504                    
    4505                    ;       .word   7C00h,7FFFh,7FFFh,03E0h,7FFFh,7FFFh,001Fh,7FFFh,7FFFh
    4506                    
    4507 000121d0           COLTAB_RGB
    4508 000121d0     7c00          .WORD   07C00H,001FH,77A0h,741Ah
    4509 00012210     ffff          .word   -1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE  101

    4510                    
    4511                    ;       .word   7C00h,03E0h,001Fh
    4512                    
    4513 00012220           COLTAB_DECAY
    4514 00012220     001c          .WORD   001CH,001CH,011CH,021CH,031CH,039CH,239CH,2390H,2388H
    4515 000122b0     2380          .WORD   2380H,4300H,5280H,7180H,6180H,7080H,7000H,6000H,5000H
    4516 00012340     4000          .WORD   4000H,3000H,2000H,1000H
    4517 00012380     ffff          .word   -1
    4518                    
    4519                    ;       .word   7FFFh,6F7Bh,5EF7h,4E73h,3DEFh,2D6Bh,1CE7h,0C63h,0000h
    4520                    
    4521 00012390           COLTAB_LASER
    4522 00012390     7c1f          .word   7C1Fh,7FFFh,7F00h
    4523 000123c0     ffff          .word   -1
    4524                    
    4525 000123d0           COLTAB_BLUPURRED
    4526 000123d0     001c          .WORD   001CH,101CH,201CH,301CH,401CH,501CH,601CH,701CH,7010H
    4527 00012460     7010          .WORD   7010H,7008H,7008H,7000H,7000H,7008H,7008H,7010H,7010H
    4528 000124f0     701c          .WORD   701CH,701CH,601CH,501CH,401CH,301CH,201CH,101CH
    4529                    ;       .word   001Fh,7C1Fh,7C00h
    4530 00012570     ffff          .word   -1
    4531                    
    4532 00012580           COLTAB_REDGOLD
    4533 00012580     7c00          .word   7C00h,7F00h
    4534 000125a0     ffff          .word   -1
    4535                    
    4536                    
    4537                    *****************************************************************************
    4538                    ******************************************************************************
    4539                    ******************************************************************************
    4540                    *
    4541                    *       score stuff
    4542                    *
    4543                    
    4544                            ;reg use
    4545                            ; a11 score
    4546                    
    4547 000125b0            SUBRP  score
    4548                    
    4549                            ;initialize score
    4550 000125b0     07ab          move    @robotron_score,a11,L
         000125c0 00000010- 
    4551 000125e0     0d3f          callr   dxhprint_score
         000125f0     0019  
    4552                    
    4553 00012600           dxhloop
    4554 00012600                   SLEEPK  1
    4555 00012640     07ae          move    @robotron_score,a14,L
         00012650 00000010- 
    4556 00012670     496e          cmp     a11,a14
    4557 00012680     cb01          jrne    dxhscore_change
    4558 00012690     c0f6          jruc    dxhloop
    4559                    
    4560 000126a0           dxhscore_change
    4561 000126a0     4dcb          move    a14,a11
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE  102

    4562 000126b0     0d3f          callr   dxhzorch_score
         000126c0     0006  
    4563 000126d0     0d3f          callr   dxhprint_score
         000126e0     000a  
    4564 000126f0     c0f0          jruc    dxhloop
    4565                    
    4566 00012700                   DIE
    4567                    
    4568                    
    4569 00012730            SUBRP  dxhzorch_score
    4570 00012730     09c0          movi    TYPTEXT|SUBSCOR,a0
         00012740     0705  
    4571 00012750     0d5f          calla   obj_del1c
         00012760 00000000! 
    4572                    
    4573 00012780     0960          rets
    4574                    
    4575                    
    4576 00012790            SUBRP  dxhprint_score
    4577                    
    4578 00012790     09e2          movi    dxhscore_setup,a2
         000127a0 00012940' 
    4579 000127c0     0d5f          calla   setup_message
         000127d0 00000000! 
    4580 000127f0     09ce          movi    TYPTEXT|SUBSCOR,a14
         00012800     0705  
    4581 00012810     058e          move    a14,@mess_objid
         00012820 00000000! 
    4582 00012840     07a0          move    @robotron_score,a0,L
         00012850 00000010- 
    4583 00012870     09e1          movi    dxhmax_score,a1
         00012880 0098967f  
    4584 000128a0     0d5f          calla   dec_to_asc
         000128b0 00000000! 
    4585 000128d0     0d5f          calla   copy_string
         000128e0 00000000! 
    4586 00012900     0d5f          calla   print_string_R
         00012910 00000000! 
    4587                    
    4588 00012930     0960          rets
    4589                    
    4590                    
    4591 00012940           dxhscore_setup
    4592 00012940                   JAM_STR robotron_ascii,3,1,dxhscore_xpos,dxhscore_ypos,robo_p,0
    4593 000129e0                   .even
    4594                    
    4595          0098967f  dxhmax_score    .equ    9999999         ;that's all dec_to_asc can handle
    4596                    
    4597                    ******************************************************************************
    4598                    * adds to score
    4599                    * 0a0H amount to add
    4600                    
    4601 000129e0            SUBRP  score_points
    4602                    
    4603 000129e0     07ae          move    @robotron_score,a14,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE  103

         000129f0 00000010- 
    4604 00012a10     400e          add     a0,a14
    4605 00012a20     078e          move    a14,@robotron_score,L
         00012a30 00000010- 
    4606 00012a50     0960          rets
    4607                    
    4608                    
    4609              0024  dxhscore_ypos   .equ    36
    4610              0082  dxhscore_xpos   .equ    130
    4611                    
    4612                    *****************************************************************************
    4613                    ******************************************************************************
    4614                    ******************************************************************************
    4615                    *
    4616                    *       miscellaneous functions / processes
    4617                    *
    4618                    
    4619                    ******************************************************************************
    4620                    * Draws the frame
    4621                    * 0a0H=color value
    4622                    *
    4623                    
    4624 00012a60            SUBRP  draw_frame
    4625                    
    4626                    
    4627 00012a60     4c09          move    a0,a9
    4628 00012a70     2109          sla     8,a9
    4629 00012a80     5409          or      a0,a9
    4630                    
    4631 00012a90     09e0          movi    robo_p,a0
         00012aa0 00000000! 
    4632 00012ac0     0d5f          calla   pal_getf
         00012ad0 00000000! 
    4633 00012af0     4c0a          move    a0,a10
    4634                    
    4635 00012b00     09eb          movi    yzkframe_data,a11
         00012b10 00012d50' 
    4636                    
    4637 00012b30           yzkloop
    4638 00012b30     9760          move    *a11+,a0,L
    4639 00012b40     ca1f          jrz     yzkdone
    4640 00012b50     9761          move    *a11+,a1,L
    4641 00012b60     09e2          movi    yzkframe_image,a2
         00012b70 00000e10" 
    4642 00012b90     09c3          movi    100,a3                          ;z pos
         00012ba0     0064  
    4643 00012bb0     09e4          movi    DMACAL,a4                       ;DMA flags
         00012bc0 0000800c  
    4644 00012be0     09c5          movi    CLSDEAD,a5                      ;object ID
         00012bf0     2000  
    4645 00012c00     56c6          clr     a6                              ;x vel
    4646 00012c10     56e7          clr     a7                              ;y vel
    4647 00012c20     0d5f          calla   BEGINOBJ
         00012c30 00000000! 
    4648                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE  104

    4649 00012c50     4d00          move    a8,a0
    4650 00012c60     0d5f          calla   fg2bg
         00012c70 00000000! 
    4651                    
    4652 00012c90     956e          move    *a11+,a14,W
    4653 00012ca0     b1c8          move    a14,*a8(OSIZEX),W
         00012cb0     0130  
    4654 00012cc0     956e          move    *a11+,a14,W
    4655 00012cd0     b1c8          move    a14,*a8(OSIZEY),W
         00012ce0     0140  
    4656                    
    4657 00012cf0     b128          move    a9,*a8(OCONST),W
         00012d00     0160  
    4658 00012d10     b148          move    a10,*a8(OPAL),W
         00012d20     0150  
    4659                    
    4660 00012d30     c0df          jruc    yzkloop
    4661 00012d40           yzkdone
    4662 00012d40     0960          rets
    4663                    
    4664                    
    4665              0e10" yzkframe_image  equ     man_d1
    4666                    
    4667 00012d50           yzkframe_data
    4668 00012d50 00350000          .long   [53,0],[43,0]   ;position X,Y
    4669 00012d90     0126          .word   294,2           ;size X,Y
    4670                    
    4671 00012db0 00350000          .long   [53,0],[231,0]  ;position X,Y
    4672 00012df0     0126          .word   294,2           ;size X,Y
    4673                    
    4674 00012e10 00320000          .long   [50,0],[43,0]   ;position X,Y
    4675 00012e50     0003          .word   3,190           ;size X,Y
    4676                    
    4677 00012e70 015b0000          .long   [347,0],[43,0]  ;position X,Y
    4678 00012eb0     0003          .word   3,190           ;size X,Y
    4679                    
    4680 00012ed0 00000000          .long   0
    4681                    
    4682 00012ef0           yzkframe_datax
    4683                    
    4684                    
    4685                    *****************************************************************************
    4686                    * Draws the wave indicator
    4687                    *
    4688                    
    4689 00012ef0            SUBRP  wave_count
    4690                    
    4691                            ;wave text
    4692 00012ef0     09e0          movi    [autwave_x,0],a0                        ;x pos
         00012f00 00c60000  
    4693 00012f20     09e1          movi    [autwave_y,0],a1                        ;y pos
         00012f30 00ea0000  
    4694 00012f50     09e2          movi    wave_text,a2                    ;* image
         00012f60 000045c0" 
    4695 00012f80     5663          clr     a3                              ;z pos
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE  105

    4696 00012f90     09e4          movi    DMAWNZ,a4                       ;DMA flags
         00012fa0 00008002  
    4697 00012fc0     56a5          clr     a5                              ;object ID
    4698 00012fd0     56c6          clr     a6                              ;x vel
    4699 00012fe0     56e7          clr     a7                              ;y vel
    4700 00012ff0     0d5f          calla   BEGINOBJ
         00013000 00000000! 
    4701                    
    4702                            ;ones digit
    4703                    ;       move    @robo_wave,a2,W
    4704                    ;       addi    HEXTODEC+0010h,a2               ;extra 10 cuz we count from 0
    4705                    ;       move    *a2,a2,W
    4706                    ;       andi    00FFh,a2
    4707 00013020     05a0          move    @robo_wave,a0,W
         00013030 00000090- 
    4708 00013050     2b80          sra     4,a0
    4709 00013060     1020          inc     a0
    4710 00013070     0d5f          calla   BINBCD
         00013080 00000000! 
    4711 000130a0     4c02          move    a0,a2
    4712 000130b0     0b82          andi    0Fh,a2
         000130c0 fffffff0  
    4713 000130e0                   X32     a2
    4714 000130f0     0b22          addi    autwave_font,a2
         00013100 00013470' 
    4715                    
    4716 00013120     09e0          movi    [autwave_onesx,0],a0            ;x pos
         00013130 00bc0000  
    4717 00013150     09e1          movi    [autwave_y,0],a1                        ;y pos
         00013160 00ea0000  
    4718 00013180     8642          move    *a2,a2,L                        ;* image
    4719 00013190     5663          clr     a3                              ;z pos
    4720 000131a0     09e4          movi    DMAWNZ,a4                       ;DMA flags
         000131b0 00008002  
    4721 000131d0     56a5          clr     a5                              ;object ID
    4722 000131e0     56c6          clr     a6                              ;x vel
    4723 000131f0     56e7          clr     a7                              ;y vel
    4724 00013200     0d5f          calla   BEGINOBJ
         00013210 00000000! 
    4725                    
    4726                            ;tens digit
    4727 00013230     05a0          move    @robo_wave,a0,W
         00013240 00000090- 
    4728 00013260     2b80          sra     4,a0
    4729 00013270     1020          inc     a0
    4730 00013280     0d5f          calla   BINBCD
         00013290 00000000! 
    4731 000132b0     4c02          move    a0,a2
    4732 000132c0     2f82          srl     4,a2
    4733 000132d0     0b82          andi    0Fh,a2
         000132e0 fffffff0  
    4734 00013300     ca15          jrz     autdone
    4735 00013310                   X32     a2
    4736 00013320     0b22          addi    autwave_font,a2
         00013330 00013470' 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE  106

    4737 00013350     09e0          movi    [autwave_tensx,0],a0            ;x pos
         00013360 00b80000  
    4738 00013380     09e1          movi    [autwave_y,0],a1                        ;y pos
         00013390 00ea0000  
    4739 000133b0     8642          move    *a2,a2,L                        ;* image
    4740 000133c0     5663          clr     a3                              ;z pos
    4741 000133d0     09e4          movi    DMAWNZ,a4                       ;DMA flags
         000133e0 00008002  
    4742 00013400     56a5          clr     a5                              ;object ID
    4743 00013410     56c6          clr     a6                              ;x vel
    4744 00013420     56e7          clr     a7                              ;y vel
    4745 00013430     0d5f          calla   BEGINOBJ
         00013440 00000000! 
    4746                    
    4747 00013460           autdone
    4748 00013460     0960          rets
    4749                    
    4750              00ea  autwave_y               .equ    234
    4751              00c6  autwave_x               .equ    198
    4752              00b8  autwave_tensx   .equ    184
    4753              00bc  autwave_onesx   .equ    188
    4754                    
    4755 00013470           autwave_font
    4756 00013470 00004ad0"         .long   rsmall_0
    4757 00013490 00004b60"         .long   rsmall_1
    4758 000134b0 00004bf0"         .long   rsmall_2
    4759 000134d0 00004c80"         .long   rsmall_3
    4760 000134f0 00004d10"         .long   rsmall_4
    4761 00013510 00004da0"         .long   rsmall_5
    4762 00013530 00004e30"         .long   rsmall_6
    4763 00013550 00004ec0"         .long   rsmall_7
    4764 00013570 00004f50"         .long   rsmall_8
    4765 00013590 00004fe0"         .long   rsmall_9
    4766 000135b0           autwave_fontx
    4767                    
    4768                    *****************************************************************************
    4769                    * Check to see if an object is completely on the playfield
    4770                    * a8=OBJ
    4771                    * 0a0H=walls hit (bit 0=top, 1=right, 2=bottom, 3=left)
    4772                    * 0a2H=degree of overlap (in pixels)
    4773                    * Trashes scratch
    4774                    
    4775 000135b0            SUBRP  bounds_check
    4776 000135b0                   PUSH    a1,a3
    4777 000135d0     5600          clr     a0
    4778 000135e0     5642          clr     a2
    4779 000135f0     5663          clr     a3
    4780                    
    4781                            ;check for hit top
    4782 00013600     b501          move    *a8(OYPOS),a1
         00013610     00b0  
    4783 00013620     b50e          move    *a8(ODYOFF),a14
         00013630     0230  
    4784 00013640     45c1          sub     a14,a1
    4785 00013650     0b61          cmpi    tdqlow_y,a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE  107

         00013660 ffffffd2  
    4786 00013680     c708          jrgt    tdqnot_high
    4787 00013690     09e2          movi    tdqlow_y,a2
         000136a0 0000002d  
    4788 000136c0     4422          sub     a1,a2
    4789 000136d0     0ba0          ori     M_HIT_TOP,a0
         000136e0 00000001  
    4790 00013700     c011          jruc    tdqnot_low              ;assume won't be both high and low
    4791                    
    4792 00013710           tdqnot_high
    4793                            ;check for hit bottom
    4794 00013710     b50e          move    *a8(ODYOFF),a14         ;subtract the offset AGAIN because
         00013720     0230  
    4795 00013730     45c1          sub     a14,a1                  ; we assume the anim point is there
    4796 00013740     b50e          move    *a8(OSIZEY),a14         ; to center the object.
         00013750     0140  
    4797 00013760     41c1          add     a14,a1
    4798 00013770     0b61          cmpi    tdqhigh_y,a1
         00013780 ffffff19  
    4799 000137a0     c407          jrlt    tdqnot_low
    4800 000137b0     4c22          move    a1,a2
    4801 000137c0     0d02          subi    tdqhigh_y,a2
         000137d0 ffffff19  
    4802 000137f0     0ba0          ori     M_HIT_BOTTOM,a0
         00013800 00000004  
    4803                    
    4804 00013820           tdqnot_low
    4805                            ;check for hit left
    4806 00013820     b501          move    *a8(OXPOS),a1
         00013830     0090  
    4807 00013840     b50e          move    *a8(ODXOFF),a14
         00013850     0220  
    4808 00013860     45c1          sub     a14,a1
    4809 00013870     0b61          cmpi    tdqlow_x,a1
         00013880 ffffffca  
    4810 000138a0     c708          jrgt    tdqnot_left
    4811 000138b0     09e3          movi    tdqlow_x,a3
         000138c0 00000035  
    4812 000138e0     4423          sub     a1,a3
    4813 000138f0     0ba0          ori     M_HIT_LEFT,a0
         00013900 00000008  
    4814 00013920     c011          jruc    tdqdone                 ;assume won't be both right and left
    4815                    
    4816 00013930           tdqnot_left
    4817 00013930     b50e          move    *a8(ODXOFF),a14
         00013940     0220  
    4818 00013950     45c1          sub     a14,a1
    4819 00013960     b50e          move    *a8(OSIZEX),a14
         00013970     0130  
    4820 00013980     41c1          add     a14,a1
    4821 00013990     0b61          cmpi    tdqhigh_x,a1
         000139a0 fffffea5  
    4822 000139c0     c407          jrlt    tdqdone
    4823 000139d0     4c23          move    a1,a3
    4824 000139e0     0d03          subi    tdqhigh_x,a3
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE  108

         000139f0 fffffea5  
    4825 00013a10     0ba0          ori     M_HIT_RIGHT,a0
         00013a20 00000002  
    4826                    
    4827 00013a40           tdqdone
    4828                            ;a2 is y overlap, a3 is x overlap.  a2 should be greatest of the two.
    4829 00013a40     4843          cmp     a2,a3
    4830 00013a50     ce01          jrn     tdqretval_set
    4831 00013a60     4c62          move    a3,a2
    4832 00013a70           tdqretval_set
    4833 00013a70                   PULL    a1,a3
    4834 00013a90     0960          rets
    4835                    
    4836                    
    4837                    ;boundaries
    4838              0035  tdqlow_x        equ     53
    4839              015a  tdqhigh_x       equ     346
    4840              002d  tdqlow_y        equ     45
    4841              00e6  tdqhigh_y       equ     230
    4842                    
    4843                    ;ret values
    4844              0000  B_HIT_TOP       equ     0
    4845              0002  B_HIT_BOTTOM    equ     2
    4846              0003  B_HIT_LEFT      equ     3
    4847              0001  B_HIT_RIGHT     equ     1
    4848                    
    4849              0001  M_HIT_TOP       equ     0001h
    4850              0004  M_HIT_BOTTOM    equ     0004h
    4851              0008  M_HIT_LEFT      equ     0008h
    4852              0002  M_HIT_RIGHT     equ     0002h
    4853                    
    4854                    
    4855                    *****************************************************************************
    4856                    * If ever both start buttons are down, this proc sets the robo_done flag
    4857                    * and dies.
    4858                    *
    4859                    
    4860 00013aa0            SUBRP  watch_both_starts
    4861                    
    4862 00013aa0           ykjloop
 *********  DUPLICATE DEFINITION
    4863 00013aa0                   SLEEPK  4               ;no need to check EVERY frame
    4864 00013ae0     5600          clr     a0
    4865 00013af0     0d5f          calla   get_start_cur
         00013b00 00000000! 
    4866 00013b20     ca00          jrz     ykjloop
         00013b30     f072  
    4867 00013b40     1820          movk    1,a0
    4868 00013b50     0d5f          calla   get_start_cur
         00013b60 00000000! 
    4869 00013b80     ca00          jrz     ykjloop
         00013b90     f06c  
    4870                    
    4871                            ;both starts are down.
    4872 00013ba0     1820          movk    1,a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE  109

    4873 00013bb0     0580          move    a0,@starts_down
         00013bc0 00000040- 
    4874                    
    4875 00013be0                   DIE
    4876                    
    4877                    *****************************************************************************
    4878                    * Watches for wave advance/back up key combo.
    4879                    *
    4880                    
    4881 00013c10            SUBRP  wave_mover
    4882                    
    4883 00013c10           padloop
    4884 00013c10                   SLEEPK  4
    4885 00013c50     0d5f          calla   get_all_buttons_cur
         00013c60 00000000! 
    4886 00013c80     caf8          jrz     padloop
    4887                    
    4888 00013c90     0b40          cmpi    1,a0
         00013ca0     fffe  
    4889 00013cb0     ca04          jreq    padback
    4890 00013cc0     0b40          cmpi    2,a0
         00013cd0     fffd  
    4891 00013ce0     ca05          jreq    padfwd
    4892 00013cf0     c0f1          jruc    padloop
    4893                    
    4894 00013d00           padback
    4895 00013d00     0580          move    a0,@backward
         00013d10 000000c0- 
    4896 00013d30     c003          jruc    paddone
    4897 00013d40           padfwd
    4898 00013d40     0580          move    a0,@forward
         00013d50 000000b0- 
    4899                    
    4900 00013d70           paddone
    4901 00013d70                   DIE
    4902                    
    4903                    
    4904                            .if DEBUG
    4905                    
    4906                    *****************************************************************************
    4907                    * Makes bog meters
    4908                    *
    4909                    
    4910                     SUBRP  bog_o_meter
    4911                    
    4912                            movi    robo_p,a0
    4913                            calla   pal_getf
    4914                            move    a0,a9
    4915                    
    4916                            ;create the background
    4917                            movi    [360,0],a0
    4918                            movi    [192,0],a1
    4919                            movi    man_d1,a2
    4920                            clr     a3
    4921                            movi    DMACAL|M_FLIPV,a4
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE  110

    4922                            movi    CLSDEAD,a5
    4923                            clr     a6
    4924                            clr     a7
    4925                            calla   BEGINOBJW
    4926                    
    4927                            move    a9,*a8(OPAL)
    4928                            movi    0707h,a14
    4929                            move    a14,*a8(OCONST)
    4930                    
    4931                            movi    8,a0
    4932                            move    a0,*a8(OSIZEX)
    4933                            movi    128,a0
    4934                            move    a0,*a8(OSIZEY)
    4935                            move    a8,a10
    4936                    
    4937                            ;create the foreground
    4938                            movi    [360,0],a0
    4939                            movi    [65,0],a1
    4940                            movi    man_d1,a2
    4941                            movi    1,a3
    4942                            movi    DMACAL,a4
    4943                            movi    CLSDEAD,a5
    4944                            clr     a6
    4945                            clr     a7
    4946                            calla   BEGINOBJW
    4947                    
    4948                            move    a9,*a8(OPAL)
    4949                            movi    0808h,a14
    4950                            move    a14,*a8(OCONST)
    4951                            
    4952                            movi    8,a0
    4953                            move    a0,*a8(OSIZEX)
    4954                    
    4955                            movi    pgoscale,a9
    4956                    
    4957                    pgoloop
    4958                            SLEEPK  2
    4959                            move    @CPULEFT,a1
    4960                            jrnz    pgonobog
    4961                    
    4962                            ;BOG!!
    4963                            nop
    4964                    pgonobog
    4965                            mpyu    a9,a1
    4966                            srl     16,a1
    4967                            move    a1,*a8(OSIZEY)
    4968                            cmpi    10h,a1
    4969                            jrle    pgored
    4970                    
    4971                            movi    0707h,a0
    4972                            move    a0,*a10(OCONST)
    4973                            jruc    pgoloop
    4974                    pgored
    4975                            movi    0101h,a0
    4976                            move    a0,*a10(OCONST)
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE  111

    4977                            jruc    pgoloop
    4978                    
    4979                            DIE
    4980                    
    4981                    pgoscale        equ     800000h/03DCh
    4982                    
    4983                            .endif
    4984                    
    4985                    *****************************************************************************
    4986                    
    4987 00013da0           robotron_ascii
    4988 00013da0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$00
    4989 00013ea0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$08
    4990 00013fa0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$10
    4991 000140a0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$18
    4992 000141a0 00000000   .long 0,rfont_exc,0,0,0,0,0,0                                                          ;$20    SP! " # 
    4993 000142a0 00004410"  .long rfont_lparens,rfont_rparens,0,0,rfont_comma,0,rfont_period,rfont_fslash  ;$28    ( ) * + , - . /
    4994 000143a0 00002e20"  .long rfont_0,rfont_1,rfont_2,rfont_3,rfont_4,rfont_5,rfont_6,rfont_7          ;$30    0 1 2 3 4 5 6 7
    4995 000144a0 000032a0"  .long rfont_8,rfont_9,0,0,0,0,0,0                                              ;$38    8 9 : ; < - > ?
    4996 000145a0 00000000   .long 0,rfont_a,rfont_b,rfont_c,rfont_d,rfont_e,rfont_f,rfont_g                ;$40    @ A B C D E F G
    4997 000146a0 00003960"  .long rfont_h,rfont_i,rfont_j,rfont_k,rfont_l,rfont_m,rfont_n,rfont_o          ;$48    H I J K L M N O
    4998 000147a0 00003de0"  .long rfont_p,rfont_q,rfont_r,rfont_s,rfont_t,rfont_u,rfont_v,rfont_w          ;$50    P Q R S T U V W
    4999 000148a0 00004260"  .long rfont_x,rfont_y,rfont_z,0,0,0,0,0                                        ;$58    X Y Z [ \ ] ^ _
    5000 000149a0 00000000   .long 0,rfont_a,rfont_b,rfont_c,rfont_d,rfont_e,rfont_f,rfont_g                ;$60    ` a b c d e f g
    5001 00014aa0 00003960"  .long rfont_h,rfont_i,rfont_j,rfont_k,rfont_l,rfont_m,rfont_n,rfont_o          ;$68    h i j k l m n o
    5002 00014ba0 00003de0"  .long rfont_p,rfont_q,rfont_r,rfont_s,rfont_t,rfont_u,rfont_v,rfont_w          ;$70    p q r s t u v w
    5003 00014ca0 00004260"  .long rfont_x,rfont_y,rfont_z,0,0,0,0,0                                        ;$78    x y z { | } ~
    5004                    
    5005                    *****************************************************************************
    5006                    *
    5007                    * Sound section
    5008                    * 0a0H = snd call
    5009                    
    5010              0000  RS_GRUNT        .equ    0
    5011              0001  RS_DIE          .equ    1
    5012              0002  RS_RESCUE       .equ    2
    5013              0003  RS_SHOOT        .equ    3
    5014              0004  RS_HIT          .equ    4
    5015                    
    5016              0100  sp_grunt        .equ    1<<8
    5017              0200  sp_shoot        .equ    2<<8
    5018              0300  sp_hit          .equ    3<<8
    5019              0400  sp_rescue       .equ    4<<8
    5020              0500  sp_die          .equ    5<<8
    5021                    
    5022 00014da0           robosnd_tbl
    5023                            ;       duration, call#
    5024 00014da0     0106          .word   sp_grunt|6,96           ;0 = grunt footstep
    5025 00014dc0     0560          .word   sp_die|96,98            ;1 = die
    5026 00014de0     0427          .word   sp_rescue|39,99         ;2 = rescue
    5027 00014e00     0211          .word   sp_shoot|17,102         ;3 = shoot
    5028 00014e20     0317          .word   sp_hit|23,100           ;4 = hit
    5029 00014e40           robosnd_end
    5030                    
    5031 00000110                   .bss    rs_snd,16               ;current sound call (0-3)
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE  112

    5032 00000120                   .bss    rs_time,32              ;timeout on current call (long)PCNT
    5033 00000140                   .bss    rs_pri,16               ;priority on current call
    5034 00000150                   .bss    last_grunt_snd,32       ;PCNT of last grunt footstep
    5035                    
    5036                    
    5037 00014e40            SUBRP  robo_sound_init
    5038                    
    5039 00014e40     57ce          clr     a14
    5040 00014e50     058e          move    a14,@rs_snd
         00014e60 00000110- 
    5041 00014e80     078e          move    a14,@rs_time,L
         00014e90 00000120- 
    5042 00014eb0     078e          move    a14,@last_grunt_snd,L
         00014ec0 00000150- 
    5043 00014ee0     0960          rets
    5044                    
    5045                    
    5046 00014ef0            SUBRP  robo_sound
    5047                    
    5048 00014ef0                   PUSH    a2,a3,a4
    5049                    
    5050                            ;reggies:
    5051                            ;a0 = call index
    5052                            ;a1 = priority
    5053                            ;a2 = duration
    5054                            ;a3 = call #
    5055                    
    5056                            ;decode table index
    5057 00014f10     4c0e          move    a0,a14
    5058 00014f20                   X32     a14
    5059 00014f30     0b2e          addi    robosnd_tbl,a14
         00014f40 00014da0' 
    5060 00014f60     85c1          move    *a14,a1,W
    5061 00014f70     2f01          srl     8,a1
    5062 00014f80     95c2          move    *a14+,a2,W
    5063 00014f90     0b82          andi    0FFh,a2
         00014fa0 ffffff00  
    5064 00014fc0     85c3          move    *a14,a3,W
    5065                    
    5066                            ;check old duration - if there's nothing going on, do the sound.
    5067 00014fd0     05a4          move    @rs_time,a4
         00014fe0 00000120- 
    5068 00015000     07ae          move    @PCNT,a14,L
         00015010 00000000! 
    5069 00015030     488e          cmp     a4,a14
    5070 00015040     c717          jrgt    inkdosnd
    5071                    
    5072                            ;old sound still going.  check for an override
    5073 00015050                   TEST    a0
    5074 00015060     cb04          jrnz    inkng
    5075 00015070     05ae          move    @rs_snd,a14
         00015080 00000110- 
    5076 000150a0     ca06          jrz     inkgrxgr                ;special grunt-overriding-grunt case
    5077                    
    5078 000150b0     05ae  inkng   move    @rs_pri,a14
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:19:18 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robotron game                                                        PAGE  113

         000150c0 00000140- 
    5079 000150e0     49c1          cmp     a14,a1
    5080 000150f0     c50c          jrge    inkdosnd
    5081 00015100     c01b          jruc    inkdone
    5082                    
    5083 00015110           inkgrxgr        ;do new call if old one has 3 or fewer ticks to live
    5084 00015110     07ae          move    @rs_time,a14,L
         00015120 00000120- 
    5085 00015140     07a4          move    @PCNT,a4,L
         00015150 00000000! 
    5086 00015170     448e          sub     a4,a14
    5087 00015180     0b44          cmpi    3,a4
         00015190     fffc  
    5088 000151a0     c601          jrle    inkdosnd
    5089 000151b0     c010          jruc    inkdone
    5090                    
    5091 000151c0     0d5f  inkdosnd        calla   SNDSND
         000151d0 00000000! 
    5092 000151f0     0580          move    a0,@rs_snd
         00015200 00000110- 
    5093 00015220     07ae          move    @PCNT,a14,L
         00015230 00000000! 
    5094 00015250     404e          add     a2,a14
    5095 00015260     078e          move    a14,@rs_time,L
         00015270 00000120- 
    5096 00015290     0581          move    a1,@rs_pri
         000152a0 00000140- 
    5097                    
    5098 000152c0           inkdone PULL    a2,a3,a4
    5099 000152e0     0960          rets
    5100                    
    5101                    
    5102                    ******************************************************************************
    5103                    
    5104                            .end

 1 Error,  No Warnings
