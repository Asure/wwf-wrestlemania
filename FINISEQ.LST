TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    
       2                            .file   "finiseq.asm"
       4                            .width  132
       5                            .option b,d,l,t
       6                            .mnolist
       7                    
       8                    
       9                            .include        "macros.h"
      10                            .include        "mproc.equ"             ;Mproc equates
      11                            .include        "sys.equ"
      12                            .include        "game.equ"
      13                            .include        "plyr.equ"
      14                            .include        "anim.equ"
      15                            .include        "sound.h"
      16                            .include        "ring.equ"
      17                            .include        "display.equ"
      18                            .include        "ring.equ"
      19                    
      20                            .include        "takerimg.h"
      21                            .include        "bretimg.h"
      22                            .include        "doinkimg.h"
      23                            .include        "yokoimg.h"
      24                            .include        "razorimg.h"
      25                            .include        "leximg.h"
      26                            .include        "shawnimg.h"
      27                            .include        "bamimg.h"
      28                    
      29                            .include        "damage.equ"
      30                            .include        "miscimg.glo"
      31                            .INCLUDE        "SWEAT.EQU"
      32                    
      33 00000000                   BSSX    close_the_door,16
      34 00000000                   BSSX    close_the_floor,16
      35 00000000                   BSSX    dead_wrestler,32
      36 00000000                   BSSX    finish_completed,16
      37 00000000                   BSSX    wres_mv_done,16
      38 00000000                   BSSX    guy_in,16
      39 00000000                   BSSX    guy_up,16
      40                    
      41 00000080                   .bss    pal_test,16*64
      42                    
      43                            .ref    KILL
      44                            .ref    triple_sound
      45                            .ref    change_anim1a
      46                            .ref    DO_CROWD_CHEER
      47                            .ref    UNDNEG_P
      48                            .ref    RNDRNG0
      49                            .ref    do_roll
      50                    
      51                    
      52                    
      53                    
      54                    
      55                    
      56                            .if NUM_BRET_FINISHES
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE    2

      57                    
      58                     SUBR   hrt_finish1_move
      59                            .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP  ;uninterruptable
      60                            .word   ANI_ZEROVELS
      61                            .word   ANI_SETSPEED,100h
      62                    
      63                            .word   ANI_SETFACING           ;ANI_XFLIP <- not primary anim
      64                            .word   ANI_SET_WRESTLER_XFLIP
      65                    
      66                            .word   ANI_SETMODE,MODE_NORMAL
      67                            .word   ANI_END
      68                    
      69                            .endif
      70                    
      71                            .if NUM_BRET_FINISHES > 1
      72                    
      73                     SUBR   hrt_finish2_move
      74                            .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP  ;uninterruptable
      75                            .word   ANI_ZEROVELS
      76                            .word   ANI_SETSPEED,100h
      77                    
      78                            .word   ANI_SETFACING           ;ANI_XFLIP <- not primary anim
      79                            .word   ANI_SET_WRESTLER_XFLIP
      80                    
      81                            .word   ANI_SETMODE,MODE_NORMAL
      82                            .word   ANI_END
      83                    
      84                            .endif
      85                    
      86                    
      87                    
      88                    
      89                    
      90                    
      91                            .if NUM_BAM_FINISHES
      92                    
      93                     SUBR   bam_finish1_move
      94                            .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP  ;uninterruptable
      95                            .word   ANI_ZEROVELS
      96                            .word   ANI_SETSPEED,100h
      97                    
      98                            .word   ANI_SETFACING           ;ANI_XFLIP <- not primary anim
      99                            .word   ANI_SET_WRESTLER_XFLIP
     100                    
     101                            .word   ANI_SETMODE,MODE_NORMAL
     102                            .word   ANI_END
     103                    
     104                            .endif
     105                    
     106                            .if NUM_BAM_FINISHES > 1
     107                    
     108                     SUBR   bam_finish2_move
     109                            .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP  ;uninterruptable
     110                            .word   ANI_ZEROVELS
     111                            .word   ANI_SETSPEED,100h
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE    3

     112                    
     113                            .word   ANI_SETFACING           ;ANI_XFLIP <- not primary anim
     114                            .word   ANI_SET_WRESTLER_XFLIP
     115                    
     116                            .word   ANI_SETMODE,MODE_NORMAL
     117                            .word   ANI_END
     118                    
     119                            .endif
     120                    
     121                    
     122                    
     123                    
     124                    
     125                    
     126                            .if NUM_YOKO_FINISHES
     127                    
     128                     SUBR   yok_finish1_move
     129                            .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP  ;uninterruptable
     130                            .word   ANI_ZEROVELS
     131                            .word   ANI_SETSPEED,100h
     132                    
     133                            .word   ANI_SETFACING           ;ANI_XFLIP <- not primary anim
     134                            .word   ANI_SET_WRESTLER_XFLIP
     135                    
     136                            .word   ANI_SETMODE,MODE_NORMAL
     137                            .word   ANI_END
     138                    
     139                            .endif
     140                    
     141                            .if NUM_YOKO_FINISHES > 1
     142                    
     143                     SUBR   yok_finish2_move
     144                            .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP  ;uninterruptable
     145                            .word   ANI_ZEROVELS
     146                            .word   ANI_SETSPEED,100h
     147                    
     148                            .word   ANI_SETFACING           ;ANI_XFLIP <- not primary anim
     149                            .word   ANI_SET_WRESTLER_XFLIP
     150                    
     151                            .word   ANI_SETMODE,MODE_NORMAL
     152                            .word   ANI_END
     153                    
     154                            .endif
     155                    
     156                    
     157                    
     158                    
     159                    
     160                    
     161                            .if NUM_DOINK_FINISHES
     162                    
     163                     SUBR   dnk_finish1_move
     164                            .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP  ;uninterruptable
     165                            .word   ANI_ZEROVELS
     166                            .word   ANI_SETSPEED,100h
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE    4

     167                    
     168                            .word   ANI_SETFACING           ;ANI_XFLIP <- not primary anim
     169                            .word   ANI_SET_WRESTLER_XFLIP
     170                    
     171                            .word   ANI_SETMODE,MODE_NORMAL
     172                            .word   ANI_END
     173                    
     174                            .endif
     175                    
     176                            .if NUM_DOINK_FINISHES > 1
     177                    
     178                     SUBR   dnk_finish2_move
     179                            .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP  ;uninterruptable
     180                            .word   ANI_ZEROVELS
     181                            .word   ANI_SETSPEED,100h
     182                    
     183                            .word   ANI_SETFACING           ;ANI_XFLIP <- not primary anim
     184                            .word   ANI_SET_WRESTLER_XFLIP
     185                    
     186                            .word   ANI_SETMODE,MODE_NORMAL
     187                            .word   ANI_END
     188                    
     189                            .endif
     190                    
     191                    
     192                    
     193                    
     194                    
     195                    
     196                    
     197                            .if NUM_RAZOR_FINISHES
     198                    
     199                     SUBR   rzr_finish1_move
     200                            .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP  ;uninterruptable
     201                            .word   ANI_ZEROVELS
     202                            .word   ANI_SETSPEED,100h
     203                    
     204                            .word   ANI_SETFACING           ;ANI_XFLIP <- not primary anim
     205                            .word   ANI_SET_WRESTLER_XFLIP
     206                    
     207                            .word   ANI_SETMODE,MODE_NORMAL
     208                            .word   ANI_END
     209                    
     210                            .endif
     211                    
     212                            .if NUM_RAZOR_FINISHES > 1
     213                    
     214                     SUBR   rzr_finish2_move
     215                            .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP  ;uninterruptable
     216                            .word   ANI_ZEROVELS
     217                            .word   ANI_SETSPEED,100h
     218                    
     219                            .word   ANI_SETFACING           ;ANI_XFLIP <- not primary anim
     220                            .word   ANI_SET_WRESTLER_XFLIP
     221                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE    5

     222                            .word   ANI_SETMODE,MODE_NORMAL
     223                            .word   ANI_END
     224                    
     225                            .endif
     226                    
     227                    
     228                    
     229                    
     230                    
     231                    
     232                    
     233                            .if NUM_LEX_FINISHES
     234                    
     235                     SUBR   lex_finish1_move
     236                            .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP  ;uninterruptable
     237                            .word   ANI_ZEROVELS
     238                            .word   ANI_SETSPEED,100h
     239                    
     240                            .word   ANI_SETFACING           ;ANI_XFLIP <- not primary anim
     241                            .word   ANI_SET_WRESTLER_XFLIP
     242                    
     243                            .word   ANI_SETMODE,MODE_NORMAL
     244                            .word   ANI_END
     245                    
     246                            .endif
     247                    
     248                            .if NUM_LEX_FINISHES > 1
     249                    
     250                     SUBR   lex_finish2_move
     251                            .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP  ;uninterruptable
     252                            .word   ANI_ZEROVELS
     253                            .word   ANI_SETSPEED,100h
     254                    
     255                            .word   ANI_SETFACING           ;ANI_XFLIP <- not primary anim
     256                            .word   ANI_SET_WRESTLER_XFLIP
     257                    
     258                            .word   ANI_SETMODE,MODE_NORMAL
     259                            .word   ANI_END
     260                    
     261                            .endif
     262                    
     263                    
     264                    
     265                    
     266                    
     267                    
     268                    
     269                            .if NUM_TAKER_FINISHES
     270                            .endif
     271                            .if NUM_TAKER_FINISHES > 1
     272                    
     273                     SUBR   und_finish2_move
     274                            .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP  ;uninterruptable
     275                            .word   ANI_ZEROVELS
     276                            .word   ANI_SETSPEED,100h
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE    6

     277                    
     278                            .word   ANI_SETFACING           ;ANI_XFLIP <- not primary anim
     279                            .word   ANI_SET_WRESTLER_XFLIP
     280                    
     281                            .word   ANI_SETMODE,MODE_NORMAL
     282                            .word   ANI_END
     283                    
     284                            .endif
     285                    
     286                    
     287                    
     288                    
     289                    
     290                    
     291                    
     292                            .if NUM_SHAWN_FINISHES
     293                    
     294                     SUBR   shn_finish1_move
     295                            .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP  ;uninterruptable
     296                            .word   ANI_ZEROVELS
     297                            .word   ANI_SETSPEED,100h
     298                    
     299                            .word   ANI_SETFACING           ;ANI_XFLIP <- not primary anim
     300                            .word   ANI_SET_WRESTLER_XFLIP
     301                    
     302                            .word   ANI_SETMODE,MODE_NORMAL
     303                            .word   ANI_END
     304                    
     305                            .endif
     306                    
     307                            .if NUM_SHAWN_FINISHES > 1
     308                    
     309                     SUBR   shn_finish2_move
     310                            .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP  ;uninterruptable
     311                            .word   ANI_ZEROVELS
     312                            .word   ANI_SETSPEED,100h
     313                    
     314                            .word   ANI_SETFACING           ;ANI_XFLIP <- not primary anim
     315                            .word   ANI_SET_WRESTLER_XFLIP
     316                    
     317                            .word   ANI_SETMODE,MODE_NORMAL
     318                            .word   ANI_END
     319                    
     320                            .endif
     321                    
     322                    
     323                    
     324                    
     325              04e2  HOLE_XPOS       .equ    1250
     326              00c5  HOLE_YPOS       .equ    197
     327                    
     328              14b4  MAT_BACK_Z      .equ    ((RING_Z_CENTER+20)|1000h)
     329              14b4  TMBSTN_Z        .equ    MAT_BACK_Z
     330              14cf  MAT_FRONT_Z     .equ    MAT_BACK_Z+27
     331              14d0  COF_BACK_Z      .equ    MAT_BACK_Z+28
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE    7

     332              14d2  COF_FRONT_Z     .equ    COF_BACK_Z+2
     333              14d4  DOOR_CLOSE_Z    .equ    COF_FRONT_Z+2
     334              04d0  WRES_Z          .equ    ((COF_BACK_Z)&0fffh)
     335              14d0  EXP_Z           .equ    MAT_FRONT_Z+1
     336                    
     337              0004  COFFIN_VEL      .equ    4
     338              0019  NUM_PUFFS       .equ    25
     339                    
     340                    
     341 00000000            SUBRP  pancexp1_anim
     342 00000000 00000000!         .long   SMOKE01
     343 00000020 00000000!         .long   SMOKE02
     344 00000040 00000000!         .long   SMOKE03
     345 00000060 00000000!         .long   SMOKE04
     346 00000080 00000000!         .long   SMOKE05
     347 000000a0 00000000!         .long   SMOKE06
     348 000000c0 00000000!         .long   SMOKE07
     349 000000e0 00000000!         .long   SMOKE08
     350 00000100 00000000!         .long   SMOKE09
     351 00000120 00000000!         .long   SMOKE10
     352 00000140 00000000          .long   0
     353                    
     354 00000160            SUBRP  pancexp2_anim
     355 00000160 00000000!         .long   SMOKEB01
     356 00000180 00000000!         .long   SMOKEB02
     357 000001a0 00000000!         .long   SMOKEB03
     358 000001c0 00000000!         .long   SMOKEB04
     359 000001e0 00000000!         .long   SMOKEB05
     360 00000200 00000000!         .long   SMOKEB06
     361 00000220 00000000!         .long   SMOKEB07
     362 00000240 00000000!         .long   SMOKEB08
     363 00000260 00000000!         .long   SMOKEB09
     364 00000280 00000000!         .long   SMOKEB10
     365 000002a0 00000000          .long   0
     366                    
     367 000002c0            SUBRP  pancltl_puff
     368 000002c0 00000000'         .long   pancexp1_anim
     369 000002e0 00000160'         .long   pancexp2_anim
     370                    
     371                    
     372                    
     373 00000300            SUBRP  ltl_exp
     374                    
     375 00000300     1940          movk    10,a0           ; Sleep a random amount of time before
     376 00000310     0d5f          calla   RNDRNG0         ; we start the little puff of smoke
         00000320 00000000! 
     377 00000340     1020          addk    1,a0
     378 00000350     0d5f          calla   PRCSLP
         00000360 00000000! 
     379                    
     380 00000380     09c0          movi    80,a0           ; Get a random X position above the hole
         00000390     0050  
     381 000003a0     0d5f          calla   RNDRNG0         ; To fire off the puff of smoke
         000003b0 00000000! 
     382 000003d0     0be0          subi    40,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE    8

         000003e0     ffd7  
     383 000003f0     09ce          movi    HOLE_XPOS,a14
         00000400     04e2  
     384 00000410     41c0          add     a14,a0          ; Translate to hole position
     385 00000420     b00d          move    a0,*a13(256)
         00000430     0100  
     386                    
     387 00000440     09c0          movi    30,a0           ; Get a random Y position above the hole
         00000450     001e  
     388 00000460     0d5f          calla   RNDRNG0         ; To fire off the puff of smoke
         00000470 00000000! 
     389 00000490     0be0          subi    25,a0
         000004a0     ffe6  
     390 000004b0     0b00          addi    HOLE_YPOS,a0    ; Translate to hole position
         000004c0     00c5  
     391 000004d0     b00d          move    a0,*a13(256+16) 
         000004e0     0110  
     392                    
     393 000004f0     09c0          movi    10,a0           ; Get a random Z position
         00000500     000a  
     394 00000510     0d5f          calla   RNDRNG0
         00000520 00000000! 
     395 00000540     0b00          addi    EXP_Z,a0        ; Translate to hole Z position (in front of coffin)
         00000550     14d0  
     396 00000560     b00d          move    a0,*a13(256+32)
         00000570     0120  
     397                    
     398 00000580     09c0          movi    7,a0            ; Get a random velocity to use
         00000590     0007  
     399 000005a0     0d5f          calla   RNDRNG0
         000005b0 00000000! 
     400 000005d0     1040          addk    2,a0
     401 000005e0     b00d          move    a0,*a13(256+48)
         000005f0     0130  
     402                    
     403 00000600     1820          movk    1,a0            ; Get a random smoke puff to use
     404 00000610     0d5f          calla   RNDRNG0
         00000620 00000000! 
     405 00000640     24a0          sll     5,a0
     406 00000650     09e9          movi    pancltl_puff,a9
         00000660 000002c0' 
     407 00000680     4009          add     a0,a9
     408 00000690     8729          move    *a9,a9,L        ; Pointer to puff animation
     409                    
     410 000006a0     b5a0          move    *a13(256),a0    ; Get X position
         000006b0     0100  
     411 000006c0     2600          sll     16,a0
     412 000006d0     b5a1          move    *a13(256+16),a1 ; Get Y position
         000006e0     0110  
     413 000006f0     2601          sll     16,a1
     414 00000700     b5a3          move    *a13(256+32),a3 ; Get Z position
         00000710     0120  
     415 00000720     9722          move    *a9+,a2,L       ; Get first image
     416 00000730     09e4          movi    DMAWNZ|M_3D,a4  ; Flags
         00000740 00008102  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE    9

     417 00000760     09c5          movi    CLSFRWK,a5      ; This is the class
         00000770     7000  
     418 00000780     56c6          clr     a6              ; No velocities
     419 00000790     56e7          clr     a7
     420                    
     421 000007a0     0d5f          calla   BEGINOBJ        ; Make the first one
         000007b0 00000000! 
     422                    
     423 000007d0     09c3          movi    1252,a3
         000007e0     04e4  
     424 000007f0     0d5f          calla   SNDSND
         00000800 00000000! 
     425                    
     426 00000820           pancpuff_lp
     427 00000820                   SLEEPK  3               ; Let us see it
     428 00000860     9720          move    *a9+,a0,L       ; Get next image
     429 00000870     ca0d          jrz     pancpuff_done   ; br = no more images
     430 00000880     b501          move    *a8(OCTRL),a1   ; Change the image
         00000890     00f0  
     431 000008a0     0d5f          calla   obj_aniq
         000008b0 00000000! 
     432 000008d0     b50e          move    *a8(OYPOS),a14  ; Get current Y Position
         000008e0     00b0  
     433 000008f0     b5a1          move    *a13(256+48),a1 ; Get the velocity
         00000900     0130  
     434 00000910     442e          sub     a1,a14          ; Add it
     435 00000920     b1c8          move    a14,*a8(OYPOS)  ; Write it back
         00000930     00b0  
     436 00000940     c0ed          jruc    pancpuff_lp     ; Go do next image in sequence
     437                    
     438 00000950           pancpuff_done
     439 00000950     0d5f          calla   DELOBJA8        ; Kill off the object
         00000960 00000000! 
     440                    
     441 00000980                   DIE
     442                    
     443                    
     444                    
     445 000009b0            SUBRP  ktflmat_anim
     446 000009b0 00000000!         .long   MATCOF01
     447 000009d0 00000000!         .long   MATCOF02
     448 000009f0 00000000!         .long   MATCOF03
     449 00000a10 00000000!         .long   MATCOF04
     450 00000a30            SUBRP  ktflmat_anim2
     451 00000a30 00000000          .long   0
     452                    
     453 00000a50            SUBRP  ktflcof_anim1
     454 00000a50 00000000!         .long   COFFIN02
     455 00000a70 00000000!         .long   COFFIN03
     456 00000a90 00000000!         .long   COFFIN04
     457 00000ab0 00000000!         .long   COFFIN05
     458 00000ad0            SUBRP  ktflcof_anim2
     459 00000ad0 00000000          .long   0
     460                    
     461 00000af0            SUBRP  ktfltstone_anim
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   10

     462 00000af0 00000000!         .long   TMBSTN01
     463 00000b10            SUBRP  ktfltstone_test
     464 00000b10 00000000!         .long   TMBSTN02
     465 00000b30 00000000!         .long   TMBSTN03
     466 00000b50 00000000!         .long   TMBSTN04
     467 00000b70 00000000!         .long   TMBSTN05
     468 00000b90 00000000!         .long   TMBSTN06
     469 00000bb0 00000000!         .long   TMBSTN07
     470 00000bd0 00000000!         .long   TMBSTN08
     471 00000bf0 00000000          .long   0
     472                    
     473 00000c10            SUBR   und_coffin_up
     474                    
     475 00000c10     57ce          clr     a14                     ; Set up the state machine
     476 00000c20     058e          move    a14,@close_the_door
         00000c30 00000000- 
     477 00000c50     058e          move    a14,@close_the_floor
         00000c60 00000010- 
     478                    
     479 00000c80                   SLEEP   TSEC*2
     480                    
     481 00000cd0     09e9          movi    ktflmat_anim,a9         ; Start up the mat animation
         00000ce0 000009b0' 
     482                    
     483 00000d00     09e0          movi    [HOLE_XPOS,0],a0
         00000d10 04e20000  
     484 00000d30     09e4          movi    DMAWNZ|M_3D,a4
         00000d40 00008102  
     485 00000d60     09e1          movi    [HOLE_YPOS,0],a1
         00000d70 00c50000  
     486 00000d90     9722          move    *a9+,a2,L
     487 00000da0     09c3          movi    MAT_BACK_Z,a3
         00000db0     14b4  
     488 00000dc0     09c5          movi    CLSFRWK,a5
         00000dd0     7000  
     489 00000de0     56c6          clr     a6
     490 00000df0     56e7          clr     a7
     491 00000e00     0d5f          calla   BEGINOBJ
         00000e10 00000000! 
     492                    
     493 00000e30           ktflman_loop
     494 00000e30                   SLEEPK  3                       ; Display the frame
     495 00000e70     9720          move    *a9+,a0,L               ; Are we done ?
     496 00000e80     ca06          jrz     ktfldo_open_mat         ; br = yes
     497 00000e90     b501          move    *a8(OCTRL),a1           ; Change to next frame
         00000ea0     00f0  
     498 00000eb0     0d5f          calla   obj_aniq
         00000ec0 00000000! 
     499 00000ee0     c0f4          jruc    ktflman_loop
     500                    
     501 00000ef0           ktfldo_open_mat
     502 00000ef0     4d0b          move    a8,a11                  ; Save the the object pointer
     503 00000f00     b501          move    *a8(OCTRL),a1           ; Change the image to the front piece
         00000f10     00f0  
     504 00000f20     09e0          movi    MATCOF05B,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   11

         00000f30 00000000! 
     505 00000f50     0d5f          calla   obj_aniq
         00000f60 00000000! 
     506                            
     507 00000f80     09e0          movi    [HOLE_XPOS,0],a0        ; Create the front piece
         00000f90 04e20000  
     508 00000fb0     09e4          movi    DMAWNZ|M_3D,a4
         00000fc0 00008102  
     509 00000fe0     09e1          movi    [HOLE_YPOS,0],a1
         00000ff0 00c50000  
     510 00001010     09e2          movi    MATCOF05A,a2,L
         00001020 00000000! 
     511 00001040     09c3          movi    MAT_FRONT_Z,a3
         00001050     14cf  
     512 00001060     09c5          movi    CLSFRWK,a5
         00001070     7000  
     513 00001080     56c6          clr     a6
     514 00001090     56e7          clr     a7
     515                    
     516 000010a0     0d5f          calla   BEGINOBJ
         000010b0 00000000! 
     517 000010d0                   SLEEPK  2
     518                    
     519 00001110     09c9          movi    NUM_PUFFS,a9            ; Make 25 little puffs of smoke
         00001120     0019  
     520 00001130           ktflexp_clp
     521 00001130                   CREATE0 ltl_exp
     522 000011a0     3d09          dsjs    a9,ktflexp_clp
     523                    
     524                    
     525 000011b0                   CREATE0 do_up_coffin            ; Make the coffin come up through
     526                                                            ; the floor
     527                    
     528 00001220           ktflwait_fclose
     529 00001220                   SLEEPK  1                       ; Wait to be told to close the floor
     530 00001260     05ae          move    @close_the_floor,a14
         00001270 00000010- 
     531 00001290     caf8          jrz     ktflwait_fclose
     532                    
     533 000012a0                   SLEEPK  15
     534                    
     535 000012e0     0d5f          calla   DELOBJA8                ; Delete the back piece
         000012f0 00000000! 
     536 00001310     09e9          movi    ktflmat_anim2,a9                ; Set up for close animation
         00001320 00000a30' 
     537 00001340     4d68          move    a11,a8                  ; Get saved object pointer
     538 00001350           ktflfc_loop
     539 00001350     a720          move    *-a9,a0,L               ; Change the image
     540 00001360     b501          move    *a8(OCTRL),a1
         00001370     00f0  
     541 00001380     0d5f          calla   obj_aniq
         00001390 00000000! 
     542 000013b0                   SLEEPK  3
     543 000013f0     0b69          cmpi    ktflmat_anim,a9         ; Are we done ?
         00001400 fffff64f' 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   12

     544 00001420     cbf2          jrnz    ktflfc_loop             ; br = no
     545 00001430     0d5f          calla   DELOBJA8                ; Get rid of this mat piece
         00001440 00000000! 
     546                    
     547 00001460                   SLEEPK  3
     548                    
     549 000014a0     184e          movk    2,a14
     550 000014b0     058e          move    a14,@close_the_floor    ; Let whoever know floor is closed
         000014c0 00000010- 
     551                    
     552                    
     553                    
     554 000014e0     09c0          movi    0fh,a0
         000014f0     000f  
     555 00001500     0d5f          calla   triple_sound
         00001510 00000000! 
     556                    
     557 00001530     09e9          movi    ktfltstone_test,a9              ; Set up to bring up the tombstone
         00001540 00000b10' 
     558                    
     559 00001560     09e0          movi    [HOLE_XPOS,0],a0        ; And create the first object
         00001570 04e20000  
     560 00001590     09e4          movi    DMAWNZ|M_3D,a4
         000015a0 00008102  
     561 000015c0     09e1          movi    [HOLE_YPOS-18,0],a1
         000015d0 00b30000  
     562 000015f0     9722          move    *a9+,a2,L
     563 00001600     09c3          movi    TMBSTN_Z,a3
         00001610     14b4  
     564 00001620     09c5          movi    CLSFRWK,a5
         00001630     7000  
     565 00001640     56c6          clr     a6
     566 00001650     56e7          clr     a7
     567                    
     568 00001660                   push    a9
     569 00001670     0d5f          calla   BEGINOBJ
         00001680 00000000! 
     570 000016a0                   pull    a9
     571 000016b0                   SLEEPK  4                       ; Let's see it
     572                    
     573 000016f0           ktflstn_up
     574 000016f0     9720          move    *a9+,a0,L               ; Get the next image
     575 00001700     ca0a          jrz     ktflstn_done            ; br = no more images
     576 00001710     b501          move    *a8(OCTRL),a1
         00001720     00f0  
     577 00001730     0d5f          calla   obj_aniq                ; Change the image
         00001740 00000000! 
     578 00001760                   SLEEPK  4                       ; Let's see it
     579 000017a0     c0f4          jruc    ktflstn_up                      ; Do next image
     580                    
     581 000017b0           ktflstn_done
     582 000017b0     186e          movk    3,a14
     583 000017c0     058e          move    a14,@close_the_floor    ; Let whoever know tombstone is up
         000017d0 00000010- 
     584 000017f0     058e          move    a14,@finish_completed
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   13

         00001800 00000040- 
     585                    
     586 00001820                   DIE
     587                    
     588                    
     589                    
     590 00001850            SUBRP  do_up_coffin
     591                    
     592 00001850     09e9          movi    ktflcof_anim1,a9
         00001860 00000a50' 
     593                    
     594 00001880     09e0          movi    [HOLE_XPOS+7,0],a0      ; Create the Coffin
         00001890 04e90000  
     595 000018b0     09e4          movi    DMAWNZ|M_3D,a4          
         000018c0 00008102  
     596 000018e0     09e1          movi    [HOLE_YPOS+108,0],a1
         000018f0 01310000  
     597 00001910     4c2a          move    a1,a10
     598 00001920     09e2          movi    COFFIN01,a2
         00001930 00000000! 
     599 00001950     09c3          movi    COF_BACK_Z,a3           ; Make it in front of mat pieces
         00001960     14d0  
     600 00001970     09c5          movi    CLSFRWK,a5
         00001980     7000  
     601 00001990     56c6          clr     a6
     602 000019a0     56e7          clr     a7
     603                    
     604 000019b0     0d5f          calla   BEGINOBJ
         000019c0 00000000! 
     605                    
     606 000019e0     b30d          move    a8,*a13(256),L          ; Save the object pointer
         000019f0     0100  
     607                    
     608 00001a00     09c0          movi    014h,a0
         00001a10     0014  
     609 00001a20     0d5f          calla   triple_sound
         00001a30 00000000! 
     610                    
     611 00001a50     188e          movk    COFFIN_VEL,a14          ; Start it 4 pixels high
     612 00001a60     b1c8          move    a14,*a8(OSIZEY)
         00001a70     0140  
     613                    
     614 00001a80           ktflmv_up_lp
     615 00001a80                   SLEEPK  1
     616 00001ac0     b50e          move    *a8(OSIZEY),a14         ; Get the size of the object
         00001ad0     0140  
     617 00001ae0     0b4e          cmpi    136,a14                 ; Are we at full size yet ?
         00001af0     ff77  
     618 00001b00     ca09          jrz     ktflopen_lp             ; br = yes
     619 00001b10     108e          addk    COFFIN_VEL,a14          ; Make it 4 pixels larger
     620 00001b20     b1c8          move    a14,*a8(OSIZEY)
         00001b30     0140  
     621 00001b40     b50e          move    *a8(OYPOS),a14          ; Get its current position
         00001b50     00b0  
     622 00001b60     148e          subk    COFFIN_VEL,a14          ; Move it up 4 pixels
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   14

     623 00001b70     b1c8          move    a14,*a8(OYPOS)          ; Write it back
         00001b80     00b0  
     624 00001b90     c0ee          jruc    ktflmv_up_lp            ; Go display it
     625                    
     626 00001ba0           ktflopen_lp
     627 00001ba0     9720          move    *a9+,a0,L               ; Now open the coffin door
     628 00001bb0     0b60          cmpi    COFFIN05,a0             ; Is the door open ?
         00001bc0 ffffffff! 
     629 00001be0     ca0a          jrz     ktflopen_done           ; br = yes
     630 00001bf0     b501          move    *a8(OCTRL),a1
         00001c00     00f0  
     631 00001c10     0d5f          calla   obj_aniq
         00001c20 00000000! 
     632 00001c40                   SLEEPK  3
     633 00001c80     c0f1          jruc    ktflopen_lp
     634                    
     635 00001c90           ktflopen_done
     636 00001c90     182e          movk    1,a14
     637 00001ca0     058e          move    a14,@close_the_door
         00001cb0 00000000- 
     638                    
     639 00001cd0     b501          move    *a8(OCTRL),a1           ; Keep the last piece
         00001ce0     00f0  
     640 00001cf0     0d5f          calla   obj_aniq
         00001d00 00000000! 
     641 00001d20     b50e          move    *a8(OYPOS),a14          ; Get the current position
         00001d30     00b0  
     642 00001d40     09e4          movi    DMAWNZ|M_3D,a4
         00001d50 00008102  
     643 00001d70     09e0          movi    [HOLE_XPOS+7,0],a0      ; And create the front piece
         00001d80 04e90000  
     644 00001da0     4dc1          move    a14,a1
     645 00001db0     2601          sll     16,a1
     646 00001dc0     09e2          movi    COFFIN6A,a2
         00001dd0 00000000! 
     647 00001df0     09c3          movi    COF_FRONT_Z,a3          ; Make sure its in front of back piece
         00001e00     14d2  
     648 00001e10     09c5          movi    CLSFRWK,a5
         00001e20     7000  
     649 00001e30     56c6          clr     a6
     650 00001e40     56e7          clr     a7
     651                    
     652 00001e50     0d5f          calla   BEGINOBJ
         00001e60 00000000! 
     653                    
     654 00001e80     b30d          move    a8,*a13(256+32),L       ; Save away it's object pointer
         00001e90     0120  
     655                    
     656 00001ea0     b7a9          move    *a13(256),a9,L          ; Back piece object pointer
         00001eb0     0100  
     657 00001ec0     09ce          movi    HOLE_XPOS+7,a14
         00001ed0     04e9  
     658 00001ee0     b1cd          move    a14,*a13(256+64)
         00001ef0     0140  
     659 00001f00     b92d          move    *a9(OYPOS),*a13(256+80) ; Save the Y position
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   15

         00001f10     00b0  
         00001f20     0150  
     660 00001f30     b7aa          move    *a13(256+32),a10,L      ; Front piece object pointer
         00001f40     0120  
     661 00001f50                   CREATE0 hover_coffin
     662 00001fc0     b20d          move    a0,*a13(256+96),L       ; Save the process pointer
         00001fd0     0160  
     663                    
     664 00001fe0           ktflwait_to_close
     665 00001fe0                   SLEEPK  3                       ; Now wait until told to close the
     666 00002020     05ae          move    @close_the_door,a14     ; coffin door
         00002030 00000000- 
     667 00002050     0b4e          cmpi    2,a14
         00002060     fffd  
     668 00002070     c4f6          jrlt    ktflwait_to_close
     669                    
     670 00002080     b7a0          move    *a13(256+96),a0,L       ; Get the hover craft process pointer
         00002090     0160  
     671 000020a0     0d5f          calla   KILL                    ; And kill him off
         000020b0 00000000! 
     672                    
     673 000020d0     b7a8          move    *a13(256),a8,L          ; Get the back piece object pointer
         000020e0     0100  
     674 000020f0     09e9          movi    ktflcof_anim2,a9                ; Now close the door
         00002100 00000ad0' 
     675 00002120           ktflclose_loop
     676 00002120     a720          move    *-a9,a0,L               ; Pointer to image header
     677 00002130     0b60          cmpi    COFFIN02,a0             ; Are we at this image
         00002140 ffffffff! 
     678 00002160     cb0d          jrnz    ktflno_z_adj            ; br = no
     679 00002170     b7a8          move    *a13(256+32),a8,L       ; Get front piece object pointer
         00002180     0120  
     680 00002190                   push    a0
     681 000021a0     0d5f          calla   DELOBJA8                ; Get rid of front piece
         000021b0 00000000! 
     682 000021d0                   pull    a0
     683 000021e0     b7a8          move    *a13(256),a8,L          ; Get back piece object pointer
         000021f0     0100  
     684 00002200     09ce          movi    DOOR_CLOSE_Z,a14        ; Change its Z to in front of wrestler
         00002210     14d4  
     685 00002220     b1c8          move    a14,*a8(OZPOS)
         00002230     00d0  
     686 00002240           ktflno_z_adj
     687 00002240     b501          move    *a8(OCTRL),a1           ; Change the image
         00002250     00f0  
     688 00002260     0d5f          calla   obj_aniq
         00002270 00000000! 
     689 00002290                   SLEEPK  1                       ; Lets see it
     690 000022d0     0b69          cmpi    ktflcof_anim1,a9                ; Are we done closing the door ?
         000022e0 fffff5af' 
     691 00002300     cbe1          jrne    ktflclose_loop          ; br = no
     692                    
     693 00002310     09e0          movi    COFFIN01,a0             ; Change the image to the closed
         00002320 00000000! 
     694 00002340     b501          move    *a8(OCTRL),a1           ; coffin image
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   16

         00002350     00f0  
     695 00002360     0d5f          calla   obj_aniq
         00002370 00000000! 
     696                    
     697 00002390     186e          movk    3,a14
     698 000023a0     058e          move    a14,@close_the_door
         000023b0 00000000- 
     699                    
     700 000023d0     09c0          movi    03dh,a0
         000023e0     003d  
     701 000023f0     0d5f          calla   triple_sound
         00002400 00000000! 
     702                    
     703 00002420     1a09          movk    16,a9                   ; Number of shakes
     704 00002430           ktflshk_lp
     705 00002430     1880          movk    4,a0
     706 00002440     0d5f          calla   RNDRNG0
         00002450 00000000! 
     707 00002470     1440          subk    2,a0
     708 00002480     b5ae          move    *a13(256+64),a14
         00002490     0140  
     709 000024a0     400e          add     a0,a14
     710 000024b0     b1c8          move    a14,*a8(OXPOS)
         000024c0     0090  
     711 000024d0     1840          movk    2,a0
     712 000024e0     0d5f          calla   RNDRNG0
         000024f0 00000000! 
     713 00002510     1440          subk    2,a0
     714 00002520     b5ae          move    *a13(256+80),a14
         00002530     0150  
     715 00002540     400e          add     a0,a14
     716 00002550     b1c8          move    a14,*a8(OYPOS)
         00002560     00b0  
     717 00002570                   SLEEPK  1
     718 000025b0     3f29          dsjs    a9,ktflshk_lp
     719                    
     720 000025c0     b9a8          move    *a13(256+64),*a8(OXPOS)
         000025d0     0140  
         000025e0     0090  
     721 000025f0     b9a8          move    *a13(256+80),*a8(OYPOS)
         00002600     0150  
         00002610     00b0  
     722                    
     723 00002620     09c9          movi    NUM_PUFFS,a9            ; Make 25 little puffs of smoke
         00002630     0019  
     724 00002640           exp_clp
     725 00002640                   CREATE0 ltl_exp
     726 000026b0     3d09          dsjs    a9,exp_clp
     727                    
     728 000026c0     09c0          movi    011h,a0
         000026d0     0011  
     729 000026e0     0d5f          calla   triple_sound
         000026f0 00000000! 
     730                    
     731 00002710     09ce          movi    136,a14                 ; Set starting size of image
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   17

         00002720     0088  
     732 00002730     b1c8          move    a14,*a8(OSIZEY)
         00002740     0140  
     733 00002750           ktflmv_dn_lp
     734                    
     735 00002750                   CREATE0 ltl_exp
     736 000027c0                   SLEEPK  1                       ; Lets see it
     737 00002800     b50e          move    *a8(OSIZEY),a14         ; Get current size
         00002810     0140  
     738 00002820     0b4e          cmpi    1,a14                   ; Are we at <= 1 pixel
         00002830     fffe  
     739 00002840     c609          jrle    ktflmv_dn_done          ; br = yes
     740 00002850     148e          subk    COFFIN_VEL,a14          
     741 00002860     b1c8          move    a14,*a8(OSIZEY)
         00002870     0140  
     742 00002880     b50e          move    *a8(OYPOS),a14          ; Get the current position
         00002890     00b0  
     743 000028a0     108e          addk    COFFIN_VEL,a14
     744 000028b0     b1c8          move    a14,*a8(OYPOS)          ; And write it back
         000028c0     00b0  
     745 000028d0     c0e7          jruc    ktflmv_dn_lp
     746 000028e0           ktflmv_dn_done
     747 000028e0     0d5f          calla   DELOBJA8                ; Get rid of the coffin
         000028f0 00000000! 
     748 00002910     182e          movk    1,a14                   ; Tell the floor to close up
     749 00002920     058e          move    a14,@close_the_floor
         00002930 00000010- 
     750                    
     751 00002950                   DIE                             ; We done
     752                    
     753                    
     754                    
     755 00002980            SUBRP  hover_coffin
     756 00002980     b54b          move    *a10(OYPOS),a11         ; Get start Y position
         00002990     00b0  
     757 000029a0           tsjrreset_a8
     758 000029a0     1828          movk    1,a8                    ; Start with move down
     759 000029b0           tsjrdo_agin
     760 000029b0                   SLEEPK  7
     761 000029f0     b52e          move    *a9(OYPOS),a14          ; Get current Y position
         00002a00     00b0  
     762 00002a10     410e          add     a8,a14                  ; Add in delta
     763 00002a20     b1c9          move    a14,*a9(OYPOS)          ; Write it back
         00002a30     00b0  
     764 00002a40     b54e          move    *a10(OYPOS),a14         ; Get current Y position
         00002a50     00b0  
     765 00002a60     410e          add     a8,a14                  ; Add it delta
     766 00002a70     b1ca          move    a14,*a10(OYPOS)         ; Write it back
         00002a80     00b0  
     767 00002a90     456e          sub     a11,a14                 ; Subtract current from start
     768 00002aa0     038e          abs     a14                     ; Make sure its positive
     769 00002ab0     0b4e          cmpi    2,a14                   ; <= 3
         00002ac0     fffd  
     770 00002ad0     c6ed          jrle    tsjrdo_agin             ; br = yes
     771 00002ae0     4d08          move    a8,a8                   ; a8 negative ?
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   18

     772 00002af0     ceea          jrn     tsjrreset_a8            ; br = yes
     773 00002b00     1828          movk    1,a8                    ; set to -1
     774 00002b10     03e8          not     a8
     775 00002b20                   CREATE0 ltl_exp
     776 00002b90                   CREATE0 ltl_exp
     777 00002c00                   CREATE0 ltl_exp
     778 00002c70                   CREATE0 ltl_exp
     779 00002ce0                   CREATE0 ltl_exp
     780 00002d50                   CREATE0 ltl_exp
     781 00002dc0                   CREATE0 ltl_exp
     782 00002e30                   CREATE0 ltl_exp
     783 00002ea0     c0b0          jruc    tsjrdo_agin             ; keep a bouncin
     784                    
     785 00002eb0                   DIE
     786                    
     787 00002ee0            SUBRP  close_door
     788 00002ee0     184e          movk    2,a14
     789 00002ef0     058e          move    a14,@close_the_door
         00002f00 00000000- 
     790 00002f20     0960          rets
     791                    
     792 00002f30            SUBRP  is_door_open
     793 00002f30     b5a1          move    *a13(ANIMODE),a1
         00002f40     0660  
     794 00002f50     0b81          andni   MODE_STATUS2,a1
         00002f60 00000200  
     795                    
     796 00002f80     05ae          move    @close_the_door,a14
         00002f90 00000000- 
     797 00002fb0     ca03          jrz     iqeqdoor_not_open
     798                    
     799 00002fc0     0ba1          ori     MODE_STATUS2,a1
         00002fd0 00000200  
     800 00002ff0           iqeqdoor_not_open
     801 00002ff0     b02d          move    a1,*a13(ANIMODE)
         00003000     0660  
     802 00003010     0960          rets
     803                            
     804 00003020            SUBRP  is_guy_up
     805 00003020     b5a1          move    *a13(ANIMODE),a1
         00003030     0660  
     806 00003040     0b81          andni   MODE_STATUS2,a1
         00003050 00000200  
     807                    
     808 00003070     05ae          move    @guy_up,a14
         00003080 00000070- 
     809 000030a0     ca03          jrz     lqesguy_not_up
     810                    
     811 000030b0     0ba1          ori     MODE_STATUS2,a1
         000030c0 00000200  
     812 000030e0           lqesguy_not_up
     813 000030e0     b02d          move    a1,*a13(ANIMODE)
         000030f0     0660  
     814 00003100     0960          rets
     815                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   19

     816 00003110            SUBRP  is_he_in
     817 00003110     b5a1          move    *a13(ANIMODE),a1
         00003120     0660  
     818 00003130     0b81          andni   MODE_STATUS2,a1
         00003140 00000200  
     819                    
     820 00003160     05ae          move    @guy_in,a14
         00003170 00000060- 
     821 00003190     ca03          jrz     dmjaguy_not_in
     822                    
     823 000031a0     0ba1          ori     MODE_STATUS2,a1
         000031b0 00000200  
     824 000031d0           dmjaguy_not_in
     825 000031d0     b02d          move    a1,*a13(ANIMODE)
         000031e0     0660  
     826 000031f0     0960          rets
     827                    
     828 00003200            SUBRP  disappear_wrestler
     829 00003200     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY|MODE_NOSHADOW|MODE_INVISIBLE
     830 00003220     8003          .word   ANI_ZEROVELS
     831 00003230     8026          .word   ANI_SETSPEED,100h
     832 00003250     8004          .word   ANI_SETPLYRMODE,MODE_DEAD
     833 00003270     807e          .word   ANI_ROT
     834                    
     835                    
     836 00003280            SUBRP  make_wres_disappear
     837 00003280     b5a1          move    *a13(ANIMODE),a1
         00003290     0660  
     838 000032a0     0b81          andni   MODE_STATUS2,a1
         000032b0 00000200  
     839                    
     840 000032d0     05ae          move    @close_the_door,a14
         000032e0 00000000- 
     841 00003300     0b4e          cmpi    3,a14
         00003310     fffc  
     842 00003320     cb10          jrnz    cfsdnot_time
     843                    
     844 00003330                   PUSH    a1,a13
     845 00003350     07ad          move    @dead_wrestler,a13,L
         00003360 00000020- 
     846 00003380     09e0          movi    disappear_wrestler,a0
         00003390 00003200' 
     847 000033b0     0d5f          calla   change_anim1a
         000033c0 00000000! 
     848 000033e0                   PULL    a1,a13
     849                    
     850 00003400     0ba1          ori     MODE_STATUS2,a1
         00003410 00000200  
     851 00003430           cfsdnot_time
     852 00003430     b02d          move    a1,*a13(ANIMODE)
         00003440     0660  
     853 00003450     0960          rets
     854                    
     855                    
     856 00003460            SUBRP  guy_is_up
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   20

     857 00003460     182e          movk    1,a14
     858 00003470     058e          move    a14,@guy_up
         00003480 00000070- 
     859 000034a0     0960          rets
     860                    
     861 000034b0            SUBRP  adjust_facing
     862 000034b0     b5ae          move    *a13(FACING_DIR),a14
         000034c0     04c0  
     863 000034d0     0bae          ori     (MOVE_LEFT|MOVE_DOWN),a14
         000034e0 00000006  
     864 00003500     0b8e          andni   (MOVE_RIGHT|MOVE_UP),a14
         00003510 00000009  
     865 00003530     b1cd          move    a14,*a13(FACING_DIR)
         00003540     04c0  
     866 00003550     b5ae          move    *a13(OBJ_CONTROL),a14
         00003560     0780  
     867 00003570     0bae          ori     M_FLIPH,a14
         00003580 00000010  
     868 000035a0     b1cd          move    a14,*a13(OBJ_CONTROL)
         000035b0     0780  
     869 000035c0     0960          rets
     870                    
     871 000035d0            SUBRP  adjust_taker_facing
     872 000035d0     b5ae          move    *a13(FACING_DIR),a14
         000035e0     04c0  
     873 000035f0     0b8e          andni   (MOVE_LEFT|MOVE_DOWN),a14
         00003600 00000006  
     874 00003620     0bae          ori     (MOVE_RIGHT|MOVE_UP),a14
         00003630 00000009  
     875 00003650     b1cd          move    a14,*a13(FACING_DIR)
         00003660     04c0  
     876 00003670     b5ae          move    *a13(OBJ_CONTROL),a14
         00003680     0780  
     877 00003690     0b8e          andni   M_FLIPH,a14
         000036a0 00000010  
     878 000036c0     b1cd          move    a14,*a13(OBJ_CONTROL)
         000036d0     0780  
     879 000036e0     0960          rets
     880                    
     881 000036f0            SUBRP  check_roll
     882 000036f0     b5a0          move    *a13(ANIMODE),a0
         00003700     0660  
     883 00003710     0b80          andni   MODE_STATUS2,a0
         00003720 00000200  
     884 00003740     b5a1          move    *a13(OBJ_ZPOSINT),a1
         00003750     0150  
     885 00003760     0b41          cmpi    (RING_Z_CENTER+20),a1
         00003770     fb4b  
     886 00003780     c70f          jrgt    axqmroll_done
     887 00003790     b5a1          move    *a13(STICK_VAL_CUR),a1
         000037a0     0bc0  
     888 000037b0     0ba1          ori     MOVE_DOWN,a1
         000037c0 00000002  
     889 000037e0     b02d          move    a1,*a13(STICK_VAL_CUR)
         000037f0     0bc0  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   21

     890 00003800                   PUSH    a0
     891 00003810     0d5f          calla   do_roll
         00003820 00000000! 
     892 00003840                   PULL    a0
     893 00003850     0ba0          ori     MODE_STATUS2,a0
         00003860 00000200  
     894 00003880           axqmroll_done
     895 00003880     b00d          move    a0,*a13(ANIMODE)
         00003890     0660  
     896 000038a0     0960          rets
     897                    
     898 000038b0            SUBRP  rzr_stand_anim
     899 000038b0     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP
     900 000038d0     8003          .word   ANI_ZEROVELS
     901 000038e0     8026          .word   ANI_SETSPEED,100h
     902                    
     903                            ; First roll the guy down to the bottom of the ring if need be
     904 00003900           kvtqrl_loop
     905 00003900     801c          .word   ANI_PAUSE,1
     906 00003920                   WL      ANI_CODE,check_roll
     907 00003950                   WL      ANI_IFSTATUS2,kvtqrl_loop
     908                    
     909                            ; Now Stand the bugger up
     910 00003980                   WL      3,R3GU2A+FR1
     911 000039b0                   WL      3,R3GU2A+FR2
     912 000039e0                   WL      3,R3GU4A+FR3
     913 00003a10                   WL      3,R3GU4A+FR4
     914 00003a40                   WL      3,R3GU4A+FR5
     915 00003a70                   WL      3,R3GU4A+FR6
     916 00003aa0                   WL      3,R3GU4A+FR7
     917 00003ad0                   WL      3,R3GU4A+FR8
     918 00003b00                   WL      3,R3GU4A+FR9
     919 00003b30                   WL      3,R3GU4A+FR10
     920                    
     921                    
     922                            ; Tell all he's up there
     923 00003b60                   WL      ANI_CODE,guy_is_up
     924                    
     925                            ; Face him the right direction
     926 00003b90                   WL      ANI_CODE,adjust_facing
     927                    
     928                            ; And finally make him dizzy
     929 00003bc0            SUBRP  rzr_fdizzy_anim
     930 00003bc0     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOGRAVITY
     931 00003be0     8003          .word   ANI_ZEROVELS
     932 00003bf0     8026          .word   ANI_SETSPEED,100h
     933 00003c10           kvtqloop
     934 00003c10                   WL      8,R4WP5C+FR1
     935 00003c40                   WL      8,R4WP5C+FR2
     936 00003c70                   WL      8,R4WP5C+FR3
     937 00003ca0                   WL      8,R4WP5C+FR4
     938 00003cd0                   WL      8,R4WP5C+FR5
     939 00003d00                   WL      8,R4WP5C+FR6
     940 00003d30                   WL      8,R4WP5C+FR7
     941 00003d60                   WL      8,R4WP5C+FR8
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   22

     942 00003d90                   WL      8,R4WP5C+FR7
     943 00003dc0                   WL      8,R4WP5C+FR6
     944 00003df0                   WL      8,R4WP5C+FR5
     945 00003e20                   WL      8,R4WP5C+FR4
     946 00003e50                   WL      8,R4WP5C+FR3
     947 00003e80                   WL      8,R4WP5C+FR2
     948 00003eb0                   WL      ANI_GOTO,kvtqloop
     949                    
     950                    
     951 00003ee0            SUBRP  hrt_stand_anim
     952 00003ee0     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY
     953 00003f00     8003          .word   ANI_ZEROVELS
     954 00003f10     8026          .word   ANI_SETSPEED,100h
     955                    
     956                            ; First roll the guy down to the bottom of the ring if need be
     957 00003f30           gfvprl_loop
     958 00003f30     801c          .word   ANI_PAUSE,1
     959 00003f50                   WL      ANI_CODE,check_roll
     960 00003f80                   WL      ANI_IFSTATUS2,gfvprl_loop
     961                    
     962 00003fb0                   WL      7,H3GU4A+FR1
     963 00003fe0                   WL      7,H3GU4A+FR2
     964 00004010                   WL      7,H3GU4A+FR3
     965 00004040                   WL      7,H3GU4A+FR4
     966 00004070                   WL      7,H3GU4A+FR5
     967 000040a0                   WL      7,H3GU4A+FR6
     968 000040d0                   WL      7,H3GU4A+FR7
     969 00004100                   WL      7,H3GU4A+FR8
     970 00004130                   WL      7,H3GU4A+FR9
     971 00004160                   WL      7,H3GU4A+FR10
     972                    
     973                            ; Tell all he's up there
     974 00004190                   WL      ANI_CODE,guy_is_up
     975                    
     976                            ; Face him the right direction
     977 000041c0                   WL      ANI_CODE,adjust_facing
     978                    
     979                            ; And finally make him dizzy
     980 000041f0            SUBRP  hrt_fdizzy_anim
     981 000041f0     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOGRAVITY
     982 00004210     8003          .word   ANI_ZEROVELS
     983 00004220     8026          .word   ANI_SETSPEED,100h
     984 00004240           gfvploop
     985 00004240                   WL      5,H4TI4B+FR1
     986 00004270                   WL      5,H4TI4B+FR2
     987 000042a0                   WL      5,H4TI4B+FR3
     988 000042d0                   WL      5,H4TI4B+FR4
     989 00004300                   WL      5,H4TI4B+FR5
     990 00004330                   WL      5,H4TI4B+FR6
     991 00004360                   WL      5,H4TI4B+FR7
     992 00004390                   WL      5,H4TI4B+FR8
     993 000043c0                   WL      5,H4TI4B+FR7
     994 000043f0                   WL      5,H4TI4B+FR6
     995 00004420                   WL      5,H4TI4B+FR5
     996 00004450                   WL      5,H4TI4B+FR4
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   23

     997 00004480                   WL      5,H4TI4B+FR3
     998 000044b0                   WL      5,H4TI4B+FR2
     999 000044e0                   WL      ANI_GOTO,gfvploop
    1000                    
    1001                    
    1002 00004510            SUBRP  und_stand_anim
    1003 00004510     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY
    1004 00004530     8003          .word   ANI_ZEROVELS
    1005 00004540     8026          .word   ANI_SETSPEED,100h
    1006                    
    1007                            ; First roll the guy down to the bottom of the ring if need be
    1008 00004560           bgtyrl_loop
    1009 00004560     801c          .word   ANI_PAUSE,1
    1010 00004580                   WL      ANI_CODE,check_roll
    1011 000045b0                   WL      ANI_IFSTATUS2,bgtyrl_loop
    1012                    
    1013 000045e0                   WL      7,U3SU4A+FR1
    1014 00004610                   WL      7,U3SU4A+FR2
    1015 00004640                   WL      7,U3SU4A+FR3
    1016 00004670                   WL      7,U3SU4A+FR4
    1017 000046a0                   WL      7,U3SU4A+FR5
    1018 000046d0                   WL      7,U3SU4A+FR6
    1019 00004700                   WL      7,U3SU4A+FR7
    1020 00004730                   WL      7,U3SU4A+FR8
    1021                    
    1022                            ; Tell all he's up there
    1023 00004760                   WL      ANI_CODE,guy_is_up
    1024                    
    1025                            ; Face him the right direction
    1026 00004790                   WL      ANI_CODE,adjust_facing
    1027                    
    1028                            ; And finally make him dizzy
    1029 000047c0            SUBRP  und_fdizzy_anim
    1030 000047c0     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOGRAVITY
    1031 000047e0     8003          .word   ANI_ZEROVELS
    1032 000047f0     8026          .word   ANI_SETSPEED,100h
    1033 00004810           bgtyloop
    1034 00004810                   WL      10,U4TI4C+FR1
    1035 00004840                   WL      10,U4TI4C+FR3
    1036 00004870                   WL      10,U4TI4C+FR5
    1037 000048a0                   WL      10,U4TI4C+FR7
    1038 000048d0                   WL      10,U4TI4C+FR5
    1039 00004900                   WL      10,U4TI4C+FR3
    1040 00004930                   WL      ANI_GOTO,bgtyloop
    1041                    
    1042                    
    1043 00004960            SUBRP  yok_stand_anim
    1044 00004960     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY
    1045 00004980     8003          .word   ANI_ZEROVELS
    1046 00004990     8026          .word   ANI_SETSPEED,100h
    1047                    
    1048                            ; First roll the guy down to the bottom of the ring if need be
    1049 000049b0           jnumrl_loop
    1050 000049b0     801c          .word   ANI_PAUSE,1
    1051 000049d0                   WL      ANI_CODE,check_roll
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   24

    1052 00004a00                   WL      ANI_IFSTATUS2,jnumrl_loop
    1053                    
    1054 00004a30                   WL      7,Y3GU2A+FR1
    1055 00004a60                   WL      7,Y3GU2A+FR2
    1056 00004a90                   WL      7,Y3GU2A+FR3
    1057 00004ac0                   WL      7,Y3GU2A+FR4
    1058 00004af0                   WL      7,Y3GU2A+FR6
    1059 00004b20                   WL      7,Y3GU2A+FR7
    1060 00004b50                   WL      7,Y3GU2A+FR8
    1061 00004b80                   WL      7,Y3GU2A+FR10
    1062 00004bb0                   WL      7,Y3GU2A+FR11
    1063 00004be0                   WL      7,Y3GU2A+FR12
    1064 00004c10                   WL      7,Y3GU4A+FR13
    1065 00004c40                   WL      7,Y3GU4A+FR14
    1066                    
    1067                            ; Tell all he's up there
    1068 00004c70                   WL      ANI_CODE,guy_is_up
    1069                    
    1070                            ; Face him the right direction
    1071 00004ca0                   WL      ANI_CODE,adjust_facing
    1072                    
    1073                            ; And finally make him dizzy
    1074 00004cd0            SUBRP  yok_fdizzy_anim
    1075 00004cd0     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOGRAVITY
    1076 00004cf0     8003          .word   ANI_ZEROVELS
    1077 00004d00     8026          .word   ANI_SETSPEED,100h
    1078 00004d20           jnumloop
    1079 00004d20                   WL      10,Y4TI4C+FR4
    1080 00004d50                   WL      10,Y4TI4C+FR5
    1081 00004d80                   WL      10,Y4TI4C+FR6
    1082 00004db0                   WL      10,Y4TI4C+FR7
    1083 00004de0                   WL      10,Y4TI4C+FR8
    1084 00004e10                   WL      10,Y4TI4C+FR7
    1085 00004e40                   WL      10,Y4TI4C+FR6
    1086 00004e70                   WL      10,Y4TI4C+FR5
    1087 00004ea0                   WL      ANI_GOTO,jnumloop
    1088                    
    1089                    
    1090                    
    1091 00004ed0            SUBRP  shn_stand_anim
    1092 00004ed0     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY
    1093 00004ef0     8003          .word   ANI_ZEROVELS
    1094 00004f00     8026          .word   ANI_SETSPEED,100h
    1095                    
    1096                            ; First roll the guy down to the bottom of the ring if need be
    1097 00004f20           cobwrl_loop
    1098 00004f20     801c          .word   ANI_PAUSE,1
    1099 00004f40                   WL      ANI_CODE,check_roll
    1100 00004f70                   WL      ANI_IFSTATUS2,cobwrl_loop
    1101                    
    1102 00004fa0                   WL      7,S3GU2A+FR1
    1103 00004fd0                   WL      7,S3GU2A+FR2
    1104 00005000                   WL      7,S3GU4A+FR3
    1105 00005030                   WL      7,S3GU4A+FR4
    1106 00005060                   WL      7,S3GU4A+FR5
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   25

    1107 00005090                   WL      7,S3GU4A+FR6
    1108 000050c0                   WL      7,S3GU4A+FR7
    1109 000050f0                   WL      7,S3GU4A+FR8
    1110 00005120                   WL      7,S3GU4A+FR9
    1111                    
    1112                            ; Tell all he's up there
    1113 00005150                   WL      ANI_CODE,guy_is_up
    1114                    
    1115                            ; Face him the right direction
    1116 00005180                   WL      ANI_CODE,adjust_facing
    1117                    
    1118                            ; And finally make him dizzy
    1119 000051b0            SUBRP  shn_fdizzy_anim
    1120 000051b0     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOGRAVITY
    1121 000051d0     8003          .word   ANI_ZEROVELS
    1122 000051e0     8026          .word   ANI_SETSPEED,100h
    1123 00005200           cobwloop
    1124 00005200                   WL      9,S4TI4B+FR1
    1125 00005230                   WL      9,S4TI4B+FR2
    1126 00005260                   WL      9,S4TI4B+FR3
    1127 00005290                   WL      9,S4TI4B+FR4
    1128 000052c0                   WL      9,S4TI4B+FR3
    1129 000052f0                   WL      9,S4TI4B+FR2
    1130 00005320                   WL      ANI_GOTO,cobwloop
    1131                    
    1132                    
    1133 00005350            SUBRP  bam_stand_anim
    1134 00005350     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY
    1135 00005370     8003          .word   ANI_ZEROVELS
    1136 00005380     8026          .word   ANI_SETSPEED,100h
    1137                    
    1138                            ; First roll the guy down to the bottom of the ring if need be
    1139 000053a0           hadxrl_loop
    1140 000053a0     801c          .word   ANI_PAUSE,1
    1141 000053c0                   WL      ANI_CODE,check_roll
    1142 000053f0                   WL      ANI_IFSTATUS2,hadxrl_loop
    1143                    
    1144 00005420                   WL      7,B3GU4A+FR1
    1145 00005450                   WL      7,B3GU4A+FR2
    1146 00005480                   WL      7,B3GU4A+FR3
    1147 000054b0                   WL      7,B3GU4A+FR4
    1148 000054e0                   WL      7,B3GU4A+FR5
    1149 00005510                   WL      7,B3GU4A+FR6
    1150 00005540                   WL      7,B3GU4A+FR7
    1151 00005570                   WL      7,B3GU4A+FR8
    1152 000055a0                   WL      7,B3GU4A+FR9
    1153 000055d0                   WL      7,B3GU4A+FR10
    1154 00005600                   WL      7,B3GU4A+FR11
    1155 00005630                   WL      7,B3GU4A+FR12
    1156                    
    1157                            ; Tell all he's up there
    1158 00005660                   WL      ANI_CODE,guy_is_up
    1159                    
    1160                            ; Face him the right direction
    1161 00005690                   WL      ANI_CODE,adjust_facing
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   26

    1162                    
    1163                            ; And finally make him dizzy
    1164 000056c0            SUBRP  bam_fdizzy_anim
    1165 000056c0     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOGRAVITY
    1166 000056e0     8003          .word   ANI_ZEROVELS
    1167 000056f0     8026          .word   ANI_SETSPEED,100h
    1168 00005710           hadxloop
    1169 00005710                   WL      8,B4TI4A+FR1
    1170 00005740                   WL      8,B4TI4A+FR2
    1171 00005770                   WL      8,B4TI4A+FR3
    1172 000057a0                   WL      8,B4TI4A+FR4
    1173 000057d0                   WL      8,B4TI4A+FR5
    1174 00005800                   WL      8,B4TI4A+FR6
    1175 00005830                   WL      8,B4TI4A+FR7
    1176 00005860                   WL      8,B4TI4A+FR6
    1177 00005890                   WL      8,B4TI4A+FR5
    1178 000058c0                   WL      8,B4TI4A+FR4
    1179 000058f0                   WL      8,B4TI4A+FR3
    1180 00005920                   WL      8,B4TI4A+FR2
    1181 00005950                   WL      ANI_GOTO,hadxloop
    1182                    
    1183                    
    1184 00005980            SUBRP  dnk_stand_anim
    1185 00005980     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY
    1186 000059a0     8003          .word   ANI_ZEROVELS
    1187 000059b0     8026          .word   ANI_SETSPEED,100h
    1188                    
    1189                            ; First roll the guy down to the bottom of the ring if need be
    1190 000059d0           proprl_loop
    1191 000059d0     801c          .word   ANI_PAUSE,1
    1192 000059f0                   WL      ANI_CODE,check_roll
    1193 00005a20                   WL      ANI_IFSTATUS2,proprl_loop
    1194                    
    1195 00005a50                   WL      7,D3GU4A+FR1
    1196 00005a80                   WL      7,D3GU4A+FR2
    1197 00005ab0                   WL      7,D3GU4A+FR3
    1198 00005ae0                   WL      7,D3GU4A+FR4
    1199 00005b10                   WL      7,D3GU4A+FR5
    1200 00005b40                   WL      7,D3GU4A+FR6
    1201 00005b70                   WL      7,D3GU4A+FR7
    1202 00005ba0                   WL      7,D3GU4A+FR8
    1203 00005bd0                   WL      7,D3GU4A+FR9
    1204                    
    1205                            ; Tell all he's up there
    1206 00005c00                   WL      ANI_CODE,guy_is_up
    1207                    
    1208                            ; Face him the right direction
    1209 00005c30                   WL      ANI_CODE,adjust_facing
    1210                    
    1211                            ; And finally make him dizzy
    1212 00005c60            SUBRP  dnk_fdizzy_anim
    1213 00005c60     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOGRAVITY
    1214 00005c80     8003          .word   ANI_ZEROVELS
    1215 00005c90     8026          .word   ANI_SETSPEED,100h
    1216 00005cb0           proploop
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   27

    1217 00005cb0                   WL      6,D4SW4C+FR1
    1218 00005ce0                   WL      6,D4SW4C+FR2
    1219 00005d10                   WL      6,D4SW4C+FR3
    1220 00005d40                   WL      6,D4SW4C+FR4
    1221 00005d70                   WL      6,D4SW4C+FR5
    1222 00005da0                   WL      6,D4SW4C+FR6
    1223 00005dd0                   WL      6,D4SW4C+FR5
    1224 00005e00                   WL      6,D4SW4C+FR4
    1225 00005e30                   WL      6,D4SW4C+FR3
    1226 00005e60                   WL      6,D4SW4C+FR2
    1227 00005e90                   WL      ANI_GOTO,proploop
    1228                    
    1229                    
    1230                    
    1231 00005ec0            SUBRP  lex_stand_anim
    1232 00005ec0     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY
    1233 00005ee0     8003          .word   ANI_ZEROVELS
    1234 00005ef0     8026          .word   ANI_SETSPEED,100h
    1235                    
    1236                            ; First roll the guy down to the bottom of the ring if need be
    1237 00005f10           esqyrl_loop
    1238 00005f10     801c          .word   ANI_PAUSE,1
    1239 00005f30                   WL      ANI_CODE,check_roll
    1240 00005f60                   WL      ANI_IFSTATUS2,esqyrl_loop
    1241                    
    1242 00005f90                   WL      7,L3GU4A+FR1
    1243 00005fc0                   WL      7,L3GU4A+FR2
    1244 00005ff0                   WL      7,L3GU4A+FR3
    1245 00006020                   WL      7,L3GU4A+FR4
    1246 00006050                   WL      7,L3GU4A+FR5
    1247 00006080                   WL      7,L3GU4A+FR6
    1248 000060b0                   WL      7,L3GU4A+FR7
    1249 000060e0                   WL      7,L3GU4A+FR8
    1250 00006110                   WL      7,L3GU4A+FR9
    1251 00006140                   WL      7,L3GU4A+FR10
    1252                    
    1253                            ; Tell all he's up there
    1254 00006170                   WL      ANI_CODE,guy_is_up
    1255                    
    1256                            ; Face him the right direction
    1257 000061a0                   WL      ANI_CODE,adjust_facing
    1258                    
    1259                            ; And finally make him dizzy
    1260 000061d0            SUBRP  lex_fdizzy_anim
    1261 000061d0     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOGRAVITY
    1262 000061f0     8003          .word   ANI_ZEROVELS
    1263 00006200     8026          .word   ANI_SETSPEED,100h
    1264 00006220           esqyloop
    1265 00006220                   WL      8,L4TI4B+FR5
    1266 00006250                   WL      8,L4TI4B+FR6
    1267 00006280                   WL      8,L4TI4B+FR7
    1268 000062b0                   WL      8,L4TI4B+FR8
    1269 000062e0                   WL      8,L4TI4B+FR9
    1270 00006310                   WL      8,L4TI4B+FR8
    1271 00006340                   WL      8,L4TI4B+FR7
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   28

    1272 00006370                   WL      8,L4TI4B+FR6
    1273 000063a0                   WL      ANI_GOTO,esqyloop
    1274                    
    1275                    
    1276                    
    1277                    
    1278 000063d0            SUBRP  stand_table
    1279 000063d0 00003ee0'         .long   hrt_stand_anim  ;0 Bret Hart
    1280 000063f0 000038b0'         .long   rzr_stand_anim  ;1 Razor Ramon
    1281 00006410 00004510'         .long   und_stand_anim  ;2 Undertaker
    1282 00006430 00004960'         .long   yok_stand_anim  ;3 Yokozuna
    1283 00006450 00004ed0'         .long   shn_stand_anim  ;4 Shawn Michaels
    1284 00006470 00005350'         .long   bam_stand_anim  ;5 Bam Bam
    1285 00006490 00005980'         .long   dnk_stand_anim  ;6 Doink
    1286 000064b0 00000000          .long   0               ;7 spare
    1287 000064d0 00005ec0'         .long   lex_stand_anim  ;8 Lex Luger
    1288                    
    1289                    
    1290 000064f0            SUBRP  stand_wrestler
    1291 000064f0                   FACETBL stand_table
    1292 00006560     0d5f          calla   change_anim1a
         00006570 00000000! 
    1293 00006590     0960          rets
    1294                    
    1295 000065a0            SUBRP  dizzy_table
    1296 000065a0 000041f0'         .long   hrt_fdizzy_anim ;0 Bret Hart
    1297 000065c0 00003bc0'         .long   rzr_fdizzy_anim ;1 Razor Ramon
    1298 000065e0 000047c0'         .long   und_fdizzy_anim ;2 Undertaker
    1299 00006600 00004cd0'         .long   yok_fdizzy_anim ;3 Yokozuna
    1300 00006620 000051b0'         .long   shn_fdizzy_anim ;4 Shawn Michaels
    1301 00006640 000056c0'         .long   bam_fdizzy_anim ;5 Bam Bam
    1302 00006660 00005c60'         .long   dnk_fdizzy_anim ;6 Doink
    1303 00006680 00000000          .long   0               ;7 spare
    1304 000066a0 000061d0'         .long   lex_fdizzy_anim ;8 Lex Luger
    1305                    
    1306                    
    1307 000066c0            SUBRP  dizzy_wrestler
    1308 000066c0                   FACETBL dizzy_table
    1309 00006730     0d5f          calla   change_anim1a
         00006740 00000000! 
    1310 00006760     0960          rets
    1311                    
    1312                    
    1313                    
    1314 00006770            SUBRP  raise_dead_anim
    1315                    
    1316                            ; Uninterruptable, no autoflip, no gravity
    1317 00006770     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY
    1318 00006790     8003          .word   ANI_ZEROVELS
    1319 000067a0     8026          .word   ANI_SETSPEED,100h
    1320                    
    1321 000067c0     801c          .word   ANI_PAUSE,(TSEC/2)
    1322                    
    1323                            ; Now make him stand up
    1324 000067e0                   WL      ANI_CODE,stand_wrestler
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   29

    1325                    
    1326                    
    1327                    
    1328 00006810            SUBRP  raise_dead
    1329 00006810                   SLEEP   TSEC/2          ; Give him a bit before standing up
    1330 00006860                   PUSH    a13
    1331 00006870     07ad          move    @dead_wrestler,a13,L
         00006880 00000020- 
    1332 000068a0     09e0          movi    raise_dead_anim,a0
         000068b0 00006770' 
    1333 000068d0     0d5f          calla   change_anim1a
         000068e0 00000000! 
    1334 00006900                   PULL    a13
    1335 00006910                   DIE
    1336                    
    1337              0010  TIME_FOR_MOVE   .equ    16
    1338                    
    1339 00006940            SUBRP  guy_is_in
    1340 00006940     182e          movk    1,a14
    1341 00006950     058e          move    a14,@guy_in
         00006960 00000060- 
    1342 00006980     0960          rets
    1343                    
    1344 00006990            SUBRP  set_speeds
    1345 00006990     b5a2          move    *a13(OBJ_XPOSINT),a2
         000069a0     0110  
    1346 000069b0     09c1          movi    HOLE_XPOS+7,a1
         000069c0     04e9  
    1347 000069d0     4441          sub     a2,a1
    1348 000069e0     09c2          movi    TIME_FOR_MOVE,a2
         000069f0     0010  
    1349 00006a00     2601          sll     16,a1
    1350 00006a10     5841          divs    a2,a1
    1351 00006a20     b22d          move    a1,*a13(OBJ_XVEL),L
         00006a30     02d0  
    1352                    
    1353 00006a40     b5a2          move    *a13(OBJ_ZPOSINT),a2
         00006a50     0150  
    1354 00006a60     0b42          cmpi    WRES_Z,a2
         00006a70     fb2f  
    1355 00006a80     c504          jrge    tahkis_in_front
    1356 00006a90     09c2          movi    WRES_Z,a2
         00006aa0     04d0  
    1357 00006ab0     b04d          move    a2,*a13(OBJ_ZPOSINT)
         00006ac0     0150  
    1358 00006ad0           tahkis_in_front
    1359 00006ad0     09c1          movi    WRES_Z,a1
         00006ae0     04d0  
    1360 00006af0     4441          sub     a2,a1
    1361 00006b00     09c2          movi    TIME_FOR_MOVE,a2
         00006b10     0010  
    1362 00006b20     2601          sll     16,a1
    1363 00006b30     5841          divs    a2,a1
    1364 00006b40     b22d          move    a1,*a13(OBJ_ZVEL),L
         00006b50     0310  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   30

    1365                    
    1366 00006b60     0960          rets
    1367                    
    1368 00006b70            SUBRP  push_in_anim
    1369 00006b70     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY|MODE_NOSHADOW
    1370 00006b90     8003          .word   ANI_ZEROVELS
    1371 00006ba0     8026          .word   ANI_SETSPEED,100h
    1372                    
    1373                            ; Set the X,Y,and Z velocities
    1374 00006bc0                   WL      ANI_CODE,set_speeds
    1375                    
    1376                            ; Make a woosh sound while he's moving to coffin
    1377 00006bf0     801a          .word   ANI_SOUND,014h
    1378                    
    1379                            ; Wait for him to get there
    1380 00006c10     801c          .word   ANI_PAUSE,TIME_FOR_MOVE
    1381                    
    1382                            ; Stop him from moving anymore
    1383 00006c30     8003          .word   ANI_ZEROVELS
    1384                    
    1385                            ; Make a crash sound when he's in
    1386 00006c40     801a          .word   ANI_SOUND,0bh
    1387                    
    1388                            ; Glitch him up 27 pixels
    1389 00006c60                   WL      ANI_SET_YVEL,1b0000h
    1390 00006c90     801c          .word   ANI_PAUSE,1
    1391                    
    1392                            ; Stop him from moving
    1393 00006cb0     8003          .word   ANI_ZEROVELS
    1394                    
    1395                            ; Tell everyone who is interested that he's made it
    1396 00006cc0                   WL      ANI_CODE,guy_is_in
    1397                    
    1398                            ; Make him be dizzy
    1399 00006cf0                   WL      ANI_CODE,dizzy_wrestler
    1400                    
    1401                    
    1402 00006d20            SUBRP  push_to_coffin
    1403 00006d20                   PUSH    a13
    1404 00006d30     07ad          move    @dead_wrestler,a13,L
         00006d40 00000020- 
    1405 00006d60     09e0          movi    push_in_anim,a0
         00006d70 00006b70' 
    1406 00006d90     0d5f          calla   change_anim1a
         00006da0 00000000! 
    1407 00006dc0                   PULL    a13
    1408 00006dd0     0960          rets
    1409                    
    1410                    
    1411                    
    1412 00006de0            SUBR   und_2_raise_dead_anim
    1413                    
    1414 00006de0     8002          .word   ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP  ;uninterruptable
    1415 00006e00     8003          .word   ANI_ZEROVELS
    1416 00006e10     8026          .word   ANI_SETSPEED,100h
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   31

    1417                    
    1418 00006e30                   WL      ANI_CODE,adjust_taker_facing
    1419                    
    1420                            ; This rises the dead guy up off of the floor to a standing dizzy
    1421                            ; position.
    1422 00006e60                   WLWWWW  ANI_CREATEPROC,raise_dead,0,0,0,0
    1423                    
    1424                            ; Start the coffin rising up
    1425 00006ed0                   WLWWWW  ANI_CREATEPROC,und_coffin_up,0,0,0,0
    1426                    
    1427 00006f40                   WLWW    ANI_SHADOWTRAIL,UNDNEG_P,5,15   ;pal,rate,lifespan
    1428                    
    1429                            ; This is what taker does to raise the dead guy
    1430 00006f90                   WL      4,U5RV5A+FR1
    1431 00006fc0                   WL      4,U5RV5A+FR2
    1432 00006ff0                   WL      4,U5RV5A+FR3
    1433 00007020           cpdxloopa
    1434 00007020                   WL      5,U5RV5A+FR4
    1435 00007050                   WL      5,U5RV5A+FR5
    1436 00007080                   WL      15,U5RV5A+FR6
    1437 000070b0                   WL      5,U5RV5A+FR5
    1438 000070e0                   WL      ANI_CODE,DO_CROWD_CHEER
    1439 00007110                   WL      ANI_CODE,is_guy_up
    1440 00007140                   WL      ANI_IFNOTSTATUS2,cpdxloopa
    1441                    
    1442                            ; Let the dead guy stand there being dizzy fer a bit
    1443 00007170           cpdxloop
    1444 00007170                   WL      5,U5RV5A+FR4
    1445 000071a0                   WL      5,U5RV5A+FR5
    1446 000071d0                   WL      15,U5RV5A+FR6
    1447 00007200                   WL      5,U5RV5A+FR5
    1448                    
    1449 00007230                   WL      ANI_CODE,DO_CROWD_CHEER
    1450 00007260                   WL      ANI_CODE,is_door_open
    1451 00007290                   WL      ANI_IFNOTSTATUS2,cpdxloop
    1452 000072c0                   WL      5,U5RV5A+FR4
    1453 000072f0                   WL      4,U5RV5A+FR3
    1454 00007320                   WL      4,U5RV5A+FR2
    1455 00007350                   WL      4,U5RV5A+FR1
    1456                    
    1457                            ; This is what taker does to push the guy into the coffin
    1458 00007380                   WLWW    ANI_SHADOWTRAIL,UNDNEG_P,2,8    ;pal,rate,lifespan
    1459 000073d0                   WL      7,U4PS3A+FR1
    1460 00007400                   WL      7,U4PS3A+FR2
    1461 00007430                   WL      7,U4PS3A+FR3
    1462                    
    1463                            ; This pushes the dead guy into the coffin and lets him stand in it
    1464                            ; being dizzy for a bit
    1465                            ; Make a grunt sound when push start
    1466 00007460     801a          .word   ANI_SOUND,02dh
    1467                    
    1468 00007480                   WL      ANI_CODE,push_to_coffin
    1469 000074b0     8062          .word   ANI_SET_RPTCOUNT,(TSEC*3)/(7*6)
    1470 000074d0           cpdxloop1
    1471 000074d0                   WL      7,U4PS3A+FR5
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:08 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Finish moves sequences                                               PAGE   32

    1472 00007500                   WL      7,U4PS3A+FR6
    1473 00007530                   WL      7,U4PS3A+FR7
    1474 00007560                   WL      7,U4PS3A+FR8
    1475 00007590                   WL      7,U4PS3A+FR7
    1476 000075c0                   WL      7,U4PS3A+FR6
    1477                    
    1478 000075f0                   WL      ANI_CODE,DO_CROWD_CHEER
    1479 00007620                   WL      ANI_CODE,is_he_in
    1480 00007650                   WL      ANI_IFNOTSTATUS2,cpdxloop1
    1481 00007680     8063          .word   ANI_DEC_RPTCOUNT
    1482 00007690                   WL      ANI_IF_RPTCOUNT,cpdxloop1
    1483                    
    1484                            ; Now close the door
    1485 000076c0     801a          .word   ANI_SOUND,2dh           ; Push door shut effort grunt
    1486 000076e0                   WL      ANI_CODE,close_door
    1487                    
    1488 00007710           cpdxd_loop
    1489 00007710     801c          .word   ANI_PAUSE,5
    1490 00007730                   WL      ANI_CODE,make_wres_disappear
    1491 00007760                   WL      ANI_IFNOTSTATUS2,cpdxd_loop
    1492                    
    1493 00007790                   WL      7,U4PS3A+FR5
    1494 000077c0                   WL      7,U4PS3A+FR3
    1495 000077f0                   WL      7,U4PS3A+FR2
    1496 00007820                   WL      7,U4PS3A+FR1
    1497                    
    1498                            ; And last but not least raise arm and leave crowd cheering
    1499 00007850     8064          .word   ANI_SHADOWTRAIL,0       ;off
    1500 00007870                   WL      4,U5RV5A+FR1
    1501 000078a0                   WL      4,U5RV5A+FR2
    1502 000078d0                   WL      4,U5RV5A+FR3
    1503 00007900                   WL      4,U5RV5A+FR4
    1504 00007930                   WL      4,U5RV5A+FR5
    1505 00007960           cpdxloop3
    1506 00007960                   WL      ANI_CODE,DO_CROWD_CHEER
    1507 00007990                   WL      50,U5RV5A+FR6
    1508 000079c0                   WL      ANI_GOTO,cpdxloop3
    1509                    
    1510                    
    1511                            .end

 No Errors,  No Warnings
