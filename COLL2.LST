TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    **************************************************************
       2                    * START
       3                    * Software:             George Petro, Todd Allen
       4                    * Initiated:            1989?
       5                    *
       6                    * Modified:             Mark Turmell, 7/17/90   -Total Carnage
       7                    *                       Shawn Liptak, 7/?/91    -Speed improvements
       8                    *                       Shawn Liptak, 7/?/91    -SL type stuff
       9                    *                       Shawn Liptak, 8/30/91   -New collision loop
      10                    *                       Shawn Liptak, 9/18/91   -Pixscan improvements
      11                    *                       Shawn Liptak, 2/11/92   -Started basketball
      12                    *                       Jason Skiles, 10/13/93  -Started WWF Robotron
      13                    *
      14                    * COPYRIGHT (C) 1992 WILLIAMS ELECTRONICS GAMES, INC.
      15                    *
      16                    *.Last mod - 10/13/93 15:19
      17                    **************************************************************
      18                            .file   "coll2.asm"
      20                            .width  132
      21                            .option b,d,l,t
      22                            .mnolist
      23                    
      24                    
      25                            .include        "mproc.equ"
      26                            .include        "display.equ"
      27                            .include        "sys.equ"
      28                            .include        "gsp.equ"
      29                            .include        "game.equ"
      30                            .include        "imgtbl.glo"
      31                            .include        "macros.h"
      32                    
      33                    ;sounds
      34                    
      35                    
      36                    
      37                    ;refs
      38                    ;       .ref    ball_hit
      39                    
      40                            ;from ROBO.ASM
      41                            .ref    player_die
      42                            .ref    bullet_die
      43                            .ref    grunt_shot,grunt_die
      44                            .ref    post_die
      45                            .ref    human_saved,human_killed,human_hitpost
      46                            .ref    hulk_pushback
      47                            .ref    sphereoid_die,enforcer_die,spark_die
      48                            .ref    quark_die,tank_die,shell_die
      49                    
      50                    ;defs
      51                    
      52                    ;ram
      53                    
      54 00000000                   BSSX    coll_stop       ,16             ;!0=Stop scan on current obj
      55 00000010                   .bss    PList           ,32*(30+1)      ;List of objs of class player
      56 000003f0                   .bss    NList           ,32*(30+1)      ;List of objs of class neutral
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE    2

      57 000007d0                   .bss    EList           ,32*(100+1)     ;List of objs of class enemy
      58 00001470                   .bss    HList           ,32*(40+1)      ;List of humans
      59 00001990                   .bss    KList           ,32*(20+1)      ;List of hulks
      60 00000000                   BSSX    CCCCount        ,16             ;Col Check Cycle Counter.
      61                    
      62                    ;NOBJ=# objects to display
      63                    
      64                    
      65                    
      66                    ****************************************************************************
      67                    * When writing collision routines which are to be called from the collision
      68                    * scanner in this file, the following things should be taken into
      69                    * consideration:
      70                    *   The collision routines are called, not created.
      71                    *   The collision routine receives a ptr to the victims OBJ in A8
      72                    *   The collision routine receives a ptr to the killers OBJ in A0
      73                    *   The collision routine can destroy A0,A8,A14,B0,B1.
      74                    *   Other registers must be preserved!
      75                    *
      76                    *   When OBJ1,OBJ2 collide, two routines are called, one with
      77                    *    OBJ1 in A8 and the other with OBJ2 in A8.  A collision routine
      78                    *    should only affect the victim, and not the killer.
      79                    *   If a victim object is deleted, it will not be scanned futher.
      80                    *   If any other object is deleted, the collision scan will be aborted.
      81                    *   To prevent multiple simultaneous collisions of the same victim
      82                    *   object, the object ID of the victim object should be modified
      83                    *   by the collision routine, if the victims nature is changed.
      84                    
      85                    
      86                    
      87                    ****************************************************************************
      88                    * Collision loop (New version)
      89                    
      90 00000000            SUBR   collisions
      91                    
      92 00000000                   SLEEPK  1
      93                    
      94 00000040     05a0          move    @CCCCount,a0
         00000050 00001c30- 
      95 00000070     1020          inc     a0
      96 00000080     0580          move    a0,@CCCCount
         00000090 00001c30- 
      97                    
      98 000000b0     05a6          move    @WORLDTLX+16,a6         ;A6=Xmin
         000000c0 00000010! 
      99 000000e0     4cc7          move    a6,a7
     100 000000f0     0b07          addi    100,a7                  ;A7=Xmax
         00000100     0064  
     101 00000110     4ee3          move    a7,b3
     102 00000120     0d3f          callr   collx
         00000130     0015  
     103                    
     104 00000140     4e76          move    b3,a6
     105 00000150     4cc7          move    a6,a7
     106 00000160     0b07          addi    100,a7
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE    3

         00000170     0064  
     107 00000180     4ee3          move    a7,b3
     108 00000190     0d3f          callr   collx
         000001a0     000e  
     109                    
     110 000001b0     4e76          move    b3,a6
     111 000001c0     4cc7          move    a6,a7
     112 000001d0     0b07          addi    100,a7
         000001e0     0064  
     113 000001f0     4ee3          move    a7,b3
     114 00000200     0d3f          callr   collx
         00000210     0007  
     115                    
     116 00000220     4e76          move    b3,a6
     117 00000230     4cc7          move    a6,a7
     118 00000240     0b07          addi    100,a7
         00000250     0064  
     119 00000260     0d3f          callr   collx
         00000270     0001  
     120                    
     121 00000280     c0d7          jruc    collisions
     122                    
     123                    ********************************
     124                    * Build lists and collide based on X
     125                    * A6=XMin
     126                    * A7=XMax (+1)
     127                    
     128 00000290           collx
     129 00000290     09e0          movi    OBJLST,a0               ;Object list to check
         000002a0 00000000! 
     130                    
     131 000002c0     09e8          movi    HList,a8
         000002d0 00001470- 
     132 000002f0     09f8          movi    KList,b8
         00000300 00001990- 
     133 00000320     09e9          movi    PList,a9                ;Build collision lists
         00000330 00000010- 
     134 00000350     4f24          move    a9,b4                   ;Set A5/B4 for 1st collision call
     135 00000360     09ea          movi    EList,a10
         00000370 000007d0- 
     136 00000390     4d45          move    a10,a5
     137 000003a0     09eb          movi    NList,a11
         000003b0 000003f0- 
     138 000003d0     c001          jruc    mklists
     139                    
     140 000003e0     920a  csr20   move    a0,*a10+,L              ;Insert on enemy list
     141 000003f0     8600  mklists move    *a0,a0,L                ;Get next obj
     142 00000400     ca21          jrz     gotlists
     143                    
     144 00000410     ae02          movb    *a0(OFLAGS+B_NOCOLL-7),a2
         00000420     00e4  
     145 00000430     cefb          jrn     mklists                 ;Not collideable?
     146                    
     147 00000440     b401          move    *a0(OXPOS),a1           ;Obj can lie on max/min boundary
         00000450     0090  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE    4

     148 00000460     48e1          cmp     a7,a1
     149 00000470     c5f7          jrge    mklists                 ;Out of range?
     150                    
     151 00000480     b402          move    *a0(OSIZEX),a2
         00000490     0130  
     152 000004a0     4041          add     a2,a1
     153 000004b0     48c1          cmp     a6,a1
     154 000004c0     c6f2          jrle    mklists                 ;Out of range?
     155                    
     156 000004d0     b402          move    *a0(OID),a2             ;Check Class
         000004e0     0190  
     157 000004f0     0b42          cmpi    0FFFF8600h,a2
         00000500     79ff  
     158 00000510     ca0b          jreq    csrHULK
     159 00000520     4c42          move    a2,a2
     160 00000530     ceea          jrn     csr20                   ;Enemy?
     161 00000540     1e22          btst    14,a2
     162 00000550     cb0a          jrnz    csr40                   ;Player?
     163                    
     164 00000560     0b42          cmpi    CLSNEUT|TYPHUMAN,a2
         00000570     fbff  
     165 00000580     ca02          jreq    csrHU                   ;Human?
     166                    
     167 00000590     920b          move    a0,*a11+,L              ;Insert on neutral list
     168 000005a0     c0e4          jruc    mklists
     169                    
     170 000005b0     9208  csrHU   move    a0,*a8+,L               ;Insert on human list
     171 000005c0     c0e2          jruc    mklists
     172                    
     173 000005d0           csrHULK
     174 000005d0     4e0e          move    a0,b14
     175 000005e0     93d8          move    b14,*b8+,L              ;Insert on hulk list
     176 000005f0     c0df          jruc    mklists
     177                    
     178 00000600     9209  csr40   move    a0,*a9+,L               ;Insert on player list
     179 00000610     c0dd          jruc    mklists
     180                    
     181 00000620           gotlists
     182 00000620     8208          move    a0,*a8,L                ;Null terminate each list
     183 00000630     8209          move    a0,*a9,L
     184 00000640     820a          move    a0,*a10,L
     185 00000650     820b          move    a0,*a11,L
     186                    
     187 00000660     0d3f          callr   ColLists                ;Collide enemy to player
         00000670     0050  
     188                    
     189 00000680     09e5          movi    NList,a5
         00000690 000003f0- 
     190 000006b0     09f4          movi    PList,b4
         000006c0 00000010- 
     191 000006e0     0d3f          callr   ColLists                ;Collide neutral to player
         000006f0     0048  
     192                    
     193 00000700     05a0          move    @CCCCount,a0
         00000710 00001c30- 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE    5

     194 00000730     1fe0          btst    0,a0
     195 00000740     cb08          jrnz    qucqskip_NE
     196 00000750     09e5          movi    NList,a5
         00000760 000003f0- 
     197 00000780     09f4          movi    EList,b4
         00000790 000007d0- 
     198 000007b0     0d3f          callr   ColLists                ;Collide neutral to enemy
         000007c0     003b  
     199 000007d0           qucqskip_NE                             ; every third (2nd, really) cycle
     200                    
     201 000007d0     05a0          move    @CCCCount,a0
         000007e0 00001c30- 
     202 00000800     0b80          andi    07h,a0
         00000810 fffffff8  
     203 00000830     cb08          jrnz    qucqskip_HK
     204 00000840     09e5          movi    HList,a5
         00000850 00001470- 
     205 00000870     09f4          movi    KList,b4
         00000880 00001990- 
     206 000008a0     0d3f          callr   ColLists                ;Collide human to hulk
         000008b0     002c  
     207 000008c0           qucqskip_HK                             ; every eighth cycle
     208                    
     209 000008c0     09e5          movi    HList,a5
         000008d0 00001470- 
     210 000008f0     09f4          movi    PList,b4
         00000900 00000010- 
     211 00000920     0d3f          callr   ColLists                ;Collide human to player
         00000930     0024  
     212                    
     213 00000940     05a0          move    @CCCCount,a0
         00000950 00001c30- 
     214 00000970     0b80          andi    03h,a0
         00000980 fffffffc  
     215 000009a0     cb08          jrnz    qucqskip_HN
     216 000009b0     09e5          movi    HList,a5
         000009c0 00001470- 
     217 000009e0     09f4          movi    NList,b4
         000009f0 000003f0- 
     218 00000a10     0d3f          callr   ColLists                ;Collide human to neutral
         00000a20     0015  
     219 00000a30           qucqskip_HN                             ; every fourth frame
     220                    
     221 00000a30     05a0          move    @CCCCount,a0
         00000a40 00001c30- 
     222 00000a60     0b80          andi    07h,a0
         00000a70 fffffff8  
     223 00000a90     cb08          jrnz    qucqskip_KN
     224 00000aa0     09e5          movi    KList,a5
         00000ab0 00001990- 
     225 00000ad0     09f4          movi    NList,b4
         00000ae0 000003f0- 
     226 00000b00     0d3f          callr   ColLists                ;Collide hulk to neutral
         00000b10     0006  
     227 00000b20           qucqskip_KN                             ; every eighth frame only
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE    6

     228                    
     229 00000b20     09e5          movi    KList,a5
         00000b30 00001990- 
     230 00000b50     09f4          movi    PList,b4
         00000b60 00000010- 
     231                    ;       callr   ColLists                ;Collide hulk to player
     232                    
     233                    ********************************
     234                    * Collide objects on list A5 with those on LIST B4
     235                    * A5,B4=ptrs to null terminated tables of object ptrs
     236                    
     237 00000b80           ColLists
     238 00000b80           CLstsLp0
     239 00000b80     96a1          move    *a5+,a1,L
     240 00000b90     ca57          jrz     scndone
     241                                                            ;Load up coors of obj from first list
     242 00000ba0     b429          move    *a1(OXPOS),a9           ;A9=OBJ1 Xmin
         00000bb0     0090  
     243 00000bc0     cafb          jrz     CLstsLp0                ;Deleted?
     244 00000bd0     b42a          move    *a1(OSIZEX),a10         ;A10=OBJ1 Xmax (+1)
         00000be0     0130  
     245 00000bf0     412a          add     a9,a10
     246 00000c00     b427          move    *a1(OYPOS),a7           ;A7=OBJ1 Ymin
         00000c10     00b0  
     247 00000c20     b42b          move    *a1(OSIZEY),a11         ;A11=OBJ1 Ymax (+1)
         00000c30     0140  
     248 00000c40     40eb          add     a7,a11
     249 00000c50     b42e          move    *a1(ODXOFF),a14,W
         00000c60     0220  
     250 00000c70     45ca          sub     a14,a10
     251 00000c80     b42e          move    *a1(ODYOFF),a14,W
         00000c90     0230  
     252 00000ca0     45cb          sub     a14,a11
     253 00000cb0     4e96          move    b4,a6                   ;Load head of second list
     254                    
     255 00000cc0     96c2  PScnLp1 move    *a6+,a2,L
     256 00000cd0     caea          jrz     CLstsLp0
     257                    
     258                    ;       movb    *a2(OFLAGS+B_3D-7),a0
     259                    ;       jrn     xyar3d                  ;3D mode? (Maybe all????)
     260                    
     261 00000ce0     b440          move    *a2(OYPOS),a0           ;Check objs A1,A2 for intersection
         00000cf0     00b0  
     262 00000d00     4960          cmp     a11,a0
     263                    ;       jrge    PScnLp1                 ;Y2Min >= Y1Max?
     264 00000d10     c5e6          jrge    CLstsLp0                ;Y2Min >= Y1Max?
     265 00000d20     b44e          move    *a2(OSIZEY),a14
         00000d30     0140  
     266 00000d40     41c0          add     a14,a0
     267 00000d50     b44e          move    *a2(ODYOFF),a14
         00000d60     0230  
     268 00000d70     45c0          sub     a14,a0
     269 00000d80     48e0          cmp     a7,a0
     270 00000d90     c6f2          jrle    PScnLp1                 ;Y2Max <= Y1Min?
     271                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE    7

     272 00000da0     b440  xyar3d  move    *a2(OXPOS),a0           ;Signed compares because objs may lie on 0
         00000db0     0090  
     273 00000dc0     caef          jrz     PScnLp1                 ;Deleted?
     274 00000dd0     4940          cmp     a10,a0
     275 00000de0     c5ed          jrge    PScnLp1                 ;X2Min >= X1Max?
     276 00000df0     b44e          move    *a2(OSIZEX),a14
         00000e00     0130  
     277 00000e10     41c0          add     a14,a0
     278 00000e20     b44e          move    *a2(ODXOFF),a14
         00000e30     0220  
     279 00000e40     45c0          sub     a14,a0
     280 00000e50     4920          cmp     a9,a0
     281 00000e60     c6e5          jrle    PScnLp1                 ;X2Max <= X1Min?
     282                    
     283 00000e70     0d3f          callr   ColFunc                 ;0CaHll colfunc for obj A1 and A2
         00000e80     0029  
     284 00000e90     4c11          move    b0,b1                   ;B1=*Collision routine for obj A1
     285 00000ea0                   SWAP    a1,a2
     286 00000ed0     0d3f          callr   ColFunc
         00000ee0     0023  
     287 00000ef0                   SWAP    a1,a2
     288 00000f20     4c12          move    b0,b2                   ;B2=*Collision routine for obj A2
     289 00000f30     5430          or      b1,b0                   ;Set z flag if both are zero
     290 00000f40     cad7          jrz     PScnLp1
     291                    
     292 00000f50     ae2e          movb    *a1(OFLAGS+B_PIXSCAN-7),a14 ;Is PIXSCAN ON
         00000f60     00e3  
     293 00000f70     ce03          jrn     DoPScn0
     294 00000f80     ae4e          movb    *a2(OFLAGS+B_PIXSCAN-7),a14 ;Is PIXSCAN ON
         00000f90     00e3  
     295 00000fa0     cf03          jrnn    SkPxScn0
     296 00000fb0     0d3f  DoPScn0 callr   PIXSCAN
         00000fc0     0861  
     297 00000fd0     c9ce          jrnc    PScnLp1                 ;BR=THIS WASN'T REALLY A COLLISION
     298 00000fe0           SkPxScn0
     299                    
     300 00000fe0     5600          clr     a0
     301 00000ff0     0580          move    a0,@coll_stop           ;Clr flag
         00001000 00000000- 
     302                    
     303 00001020     4c31          move    b1,b1
     304 00001030     ca03          jrz     PObj2Col
     305 00001040     4c28          move    a1,a8
     306 00001050     4c40          move    a2,a0
     307 00001060     0931          call    b1                      ;Call collision for A1
     308                    
     309 00001070           PObj2Col
     310 00001070     4c52          move    b2,b2
     311 00001080     ca03          jrz     PCkFree
     312 00001090     4c48          move    a2,a8
     313 000010a0     4c20          move    a1,a0
     314 000010b0     0932          call    b2                      ;Call collision for A2
     315                    
     316 000010c0     05a0  PCkFree move    @coll_stop,a0
         000010d0 00000000- 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE    8

     317 000010f0     cabc          jrz     PScnLp1                 ;Continue scan?
     318 00001100     c0a7          jruc    CLstsLp0
     319                    
     320 00001110     0960  scndone rets
     321                    
     322                    
     323                    ****************************************************************************
     324                    * Return in B0 routine for obj A1 struck by obj A2
     325                    * Trashes A3-A4
     326                    
     327 00001120           ColFunc
     328 00001120     ae23          movb    *a1(OID+8),a3
         00001130     0198  
     329 00001140     ae44          movb    *a2(OID+8),a4
         00001150     0198  
     330 00001160     2763          sll     32-5,a3
     331 00001170     2de3          srl     17,a3           ;32 Long Word Align
     332 00001180     2764          sll     32-5,a4
     333 00001190     2d44          srl     22,a4           ;Long Align
     334 000011a0     4083          add     a4,a3
     335 000011b0     0b23          addi    TypeTbl,a3
         000011c0 00001200' 
     336                    
     337 000011e0     8663          move    *a3,a3,L
     338 000011f0     0163          jump    a3              ;Routine can trash A0/A3/A4/A8/A14
     339                    
     340                    
     341                    ****************************************************************************
     342                    * These are the COLLISION FUNCTIONS
     343                    * A collision function is selected by the routine ColFunc
     344                    * which uses the TYPE field of the victims OID to select a subtable
     345                    * and indexes the subtable with the TYPE field of the killer.
     346                    * This gives a ptr to a COLLISION FUNCTION which returns
     347                    * the COLLISION ROUTINE to be called for the victim in B0.
     348                    * The COLLISION FUNCS can destroy registers A0,A3,A4,A8
     349                    ****************************************************************************
     350                    
     351 00001200           TypeTbl
     352                    ;0000
     353                    ;NULL
     354 00001200 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     355 00001300 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     356 00001400 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     357 00001500 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     358                    ;100
     359                    ;Player (PL)
     360 00001600 00009200'         .LONG   NULL, NULL, NULL, PLGR, NULL, PLPO, PLHL, NULL
     361 00001700 00009220'         .LONG   PLSP, PLEN, PLSK, PLQU, PLTA, PLSH, NULL, NULL
     362 00001800 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     363 00001900 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     364                    ;200
     365                    ;Bullet (from player) (BL)
     366 00001a00 00009200'         .LONG   NULL, NULL, NULL, BLGR, NULL, BLPO, BLHL, NULL
     367 00001b00 00009260'         .LONG   BLSP, BLEN, BLSK, BLQU, BLTA, BLSH, NULL, NULL
     368 00001c00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE    9

     369 00001d00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     370                    ;300
     371                    ;GRUNT (GR)
     372 00001e00 00009200'         .LONG   NULL, NULL, GRBL, NULL, NULL, GRPO, NULL, NULL
     373 00001f00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     374 00002000 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     375 00002100 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     376                    ;400
     377                    ;Human (HU)
     378 00002200 00009200'         .LONG   NULL, HUPL, NULL, NULL, NULL, HUPO, HUHL, NULL
     379 00002300 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     380 00002400 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     381 00002500 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     382                    ;500
     383                    ;Post (PO)
     384 00002600 00009200'         .LONG   NULL, NULL, POBL, POGR, NULL, NULL, POHL, NULL
     385 00002700 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     386 00002800 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     387 00002900 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     388                    ;600
     389                    ;Hulk (HL)
     390 00002a00 00009200'         .LONG   NULL, NULL, HLBL, NULL, NULL, NULL, NULL, NULL
     391 00002b00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     392 00002c00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     393 00002d00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     394                    ;700
     395                    ;Text
     396 00002e00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     397 00002f00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     398 00003000 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     399 00003100 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     400                    ;800
     401                    ;Sphereoid (SP)
     402 00003200 00009200'         .LONG   NULL, NULL, SPBL, NULL, NULL, NULL, NULL, NULL
     403 00003300 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     404 00003400 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     405 00003500 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     406                    ;900
     407                    ;Enforcer (EN)
     408 00003600 00009200'         .LONG   NULL, NULL, ENBL, NULL, NULL, NULL, NULL, NULL
     409 00003700 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     410 00003800 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     411 00003900 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     412                    ;a00
     413                    ;Spark (SK)
     414 00003a00 00009200'         .LONG   NULL, NULL, SKBL, NULL, NULL, NULL, NULL, NULL
     415 00003b00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     416 00003c00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     417 00003d00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     418                    ;b00
     419                    ;Quark (QU)
     420 00003e00 00009200'         .LONG   NULL, NULL, QUBL, NULL, NULL, NULL, NULL, NULL
     421 00003f00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     422 00004000 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     423 00004100 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   10

     424                    ;c00
     425                    ;Tank (TA)
     426 00004200 00009200'         .LONG   NULL, NULL, TABL, NULL, NULL, NULL, NULL, NULL
     427 00004300 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     428 00004400 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     429 00004500 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     430                    ;d00
     431                    ;SHELL (SH)
     432 00004600 00009200'         .LONG   NULL, NULL, SHBL, NULL, NULL, NULL, NULL, NULL
     433 00004700 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     434 00004800 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     435 00004900 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     436                    ;e00
     437                    ;Free
     438 00004a00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     439 00004b00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     440 00004c00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     441 00004d00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     442                    ;f00
     443                    ;Free
     444 00004e00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     445 00004f00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     446 00005000 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     447 00005100 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     448                    ;1000
     449                    ;Free
     450 00005200 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     451 00005300 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     452 00005400 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     453 00005500 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     454                    ;1100
     455                    ;Free
     456 00005600 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     457 00005700 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     458 00005800 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     459 00005900 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     460                    ;1200
     461                    ;Free
     462 00005a00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     463 00005b00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     464 00005c00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     465 00005d00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     466                    ;1300
     467                    ;Free
     468 00005e00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     469 00005f00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     470 00006000 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     471 00006100 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     472                    ;1400
     473                    ;Free
     474 00006200 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     475 00006300 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     476 00006400 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     477 00006500 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     478                    ;1500
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   11

     479                    ;Free
     480 00006600 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     481 00006700 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     482 00006800 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     483 00006900 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     484                    ;1600
     485                    ;Free
     486 00006a00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     487 00006b00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     488 00006c00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     489 00006d00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     490                    ;1700
     491                    ;Free
     492 00006e00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     493 00006f00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     494 00007000 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     495 00007100 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     496                    ;1800
     497                    ;Free
     498 00007200 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     499 00007300 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     500 00007400 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     501 00007500 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     502                    ;1900
     503                    ;Free
     504 00007600 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     505 00007700 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     506 00007800 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     507 00007900 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     508                    ;1a00
     509                    ;Free
     510 00007a00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     511 00007b00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     512 00007c00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     513 00007d00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     514                    ;1b00
     515                    ;Free
     516 00007e00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     517 00007f00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     518 00008000 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     519 00008100 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     520                    ;1c00
     521                    ;Free
     522 00008200 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     523 00008300 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     524 00008400 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     525 00008500 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     526                    ;1d00
     527                    ;Free
     528 00008600 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     529 00008700 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     530 00008800 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     531 00008900 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     532                    ;1e00
     533                    ;Free
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   12

     534 00008a00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     535 00008b00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     536 00008c00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     537 00008d00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     538                    ;1f00
     539                    ;Free
     540 00008e00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     541 00008f00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     542 00009000 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     543 00009100 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     544                    
     545 00009200     5610  NULL    clr     b0
     546 00009210     0960          rets
     547                    
     548                    ;Jason's Robotron Collision
     549                    
     550 00009220           PLGR    ;player hits grunt
     551 00009220           PLPO    ;player hits post
     552 00009220           PLHL    ;player hits hulk
     553 00009220           PLSP    ;player hits sphereoid
     554 00009220           PLEN    ;player hits enforcer
     555 00009220           PLSK    ;player hits spark
     556 00009220           PLQU    ;player hits quark
     557 00009220           PLTA    ;player hits tank
     558 00009220           PLSH    ;player hits shell
     559 00009220     09f0          movi    player_die,b0
         00009230 00000000! 
     560 00009250     0960          rets
     561                    
     562 00009260           BLGR    ;bullet hits grunt
     563 00009260           BLPO    ;bullet hits post
     564 00009260           BLHL    ;bullet hits hulk
     565 00009260           BLSP    ;bullet hits sphereoid
     566 00009260           BLEN    ;bullet hits enforcer
     567 00009260           BLSK    ;bullet hits spark
     568 00009260           BLQU    ;bullet hits quark
     569 00009260           BLTA    ;bullet hits tank
     570 00009260           BLSH    ;bullet hits shell
     571 00009260     09f0          movi    bullet_die,b0
         00009270 00000000! 
     572 00009290     0960          rets
     573                    
     574 000092a0           GRBL    ;GRUNT hits bullet
     575 000092a0     09f0          movi    grunt_shot,b0
         000092b0 00000000! 
     576 000092d0     0960          rets
     577                    
     578 000092e0           GRPO    ;GRUNT hits post
     579 000092e0     09f0          movi    grunt_die,b0
         000092f0 00000000! 
     580 00009310     0960          rets
     581                    
     582 00009320           HUPL    ;human hits player
     583 00009320     09f0          movi    human_saved,b0
         00009330 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   13

     584 00009350     0960          rets
     585                    
     586 00009360           HUHL    ;human hits hulk
     587 00009360     09f0          movi    human_killed,b0
         00009370 00000000! 
     588 00009390     0960          rets
     589                    
     590 000093a0           HUPO    ;human hits post
     591 000093a0     09f0          movi    human_hitpost,b0
         000093b0 00000000! 
     592 000093d0     0960          rets
     593                    
     594 000093e0           POBL    ;post hits bullet
     595 000093e0           POGR    ;post hits grunt
     596 000093e0           POHL    ;post hits hulk
     597 000093e0     09f0          movi    post_die,b0
         000093f0 00000000! 
     598 00009410     0960          rets
     599                    
     600 00009420           HLBL    ;hulk hits bullet
     601 00009420     09f0          movi    hulk_pushback,b0
         00009430 00000000! 
     602 00009450     0960          rets
     603                    
     604 00009460           SPBL    ;sphereoid hits bullet
     605 00009460     09f0          movi    sphereoid_die,b0
         00009470 00000000! 
     606 00009490     0960          rets
     607                    
     608 000094a0           ENBL    ;enforcer hits bullet
     609 000094a0     09f0          movi    enforcer_die,b0
         000094b0 00000000! 
     610 000094d0     0960          rets
     611                    
     612 000094e0           SKBL    ;spark hits bullet
     613 000094e0     09f0          movi    spark_die,b0
         000094f0 00000000! 
     614 00009510     0960          rets
     615                    
     616 00009520           QUBL    ;quark hits bullet
     617 00009520     09f0          movi    quark_die,b0
         00009530 00000000! 
     618 00009550     0960          rets
     619                    
     620 00009560           TABL    ;tank hits bullet
     621 00009560     09f0          movi    tank_die,b0
         00009570 00000000! 
     622 00009590     0960          rets
     623                    
     624 000095a0           SHBL    ;shell hits bullet
     625 000095a0     09f0          movi    shell_die,b0
         000095b0 00000000! 
     626 000095d0     0960          rets
     627                    
     628                    ****************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   14

     629                    *COLLISION ROUTINE
     630                    *A1=OBJECT ONE
     631                    *A2=OBJECT TWO
     632                    *RETURNS: CS= COLLISION, CC= NO COLLISION
     633                    *
     634                    * CLOBBERS A14
     635                    *CREATE TIME SLICE WHILE LOCKING OUT INTERRUPTS
     636                    
     637 000095e0           PIXSCAN
     638 000095e0     098f          mmtm    sp,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13
         000095f0     fffc  
     639 00009600     099f          mmtm    sp,b0,b1
         00009610     c000  
     640                    
     641 00009620     4c2a          move    a1,a10                  ;A10=*Obj0
     642 00009630     4c48          move    a2,a8                   ;A8=*Obj1
     643 00009640     0360          dint
     644 00009650     b543          move    *a10(OXPOS),a3          ;Set up object box TLX,TLY
         00009660     0090  
     645 00009670     b74e          move    *a10(OYVAL),a14,L
         00009680     00a0  
     646 00009690     efc3          movy    a14,a3                  ;A3=Obj0 Y:X
     647                    
     648 000096a0     b504          move    *a8(OXPOS),a4
         000096b0     0090  
     649 000096c0     b70e          move    *a8(OYVAL),a14,L
         000096d0     00a0  
     650 000096e0     efc4          movy    a14,a4                  ;A4=Obj1 Y:X
     651                    
     652 000096f0     b546          move    *a10(OCTRL),a6
         00009700     00f0  
     653 00009710     4ec0          move    a6,b0                   ;B0=flags object 0
     654 00009720     b506          move    *a8(OCTRL),a6
         00009730     00f0  
     655 00009740     4ec1          move    a6,b1                   ;B1=flags object 1
     656                    
     657 00009750     b749          move    *a10(OIMG),a9,L         ;A9=*Image 0
         00009760     0170  
     658 00009770     b707          move    *a8(OIMG),a7,L          ;A7=*Image 1
         00009780     0170  
     659 00009790     0d60          eint
     660                    
     661 000097a0     8725          move    *a9,a5,L                ;ISIZE
     662 000097b0     86e6          move    *a7,a6,L                ;ISIZE
     663 000097c0     e065          addxy   a3,a5                   ;A5=Obj0 lower rgt Y:X
     664 000097d0     e086          addxy   a4,a6                   ;A6=Obj1 lower rgt Y:X
     665 000097e0     e4c3          cmpxy   a6,a3                   ;compare (lrx1,lry1) to (tlx0,tly0)
     666 000097f0                   JRXGE   CSFAIL
     667 00009810                   JRYGE   CSFAIL
     668 00009830     e485          cmpxy   a4,a5                   ;compare (tlx1,tly1) to (lrx0,lry0)
     669 00009840     c400          JRXLE   CSFAIL
         00009850     00c5  
     670 00009860     c200          JRYLE   CSFAIL
         00009870     00c3  
     671                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   15

     672                    
     673                    *A11=XOFF0
     674                    *A12=XOFF1
     675 00009880     4c62          move    a3,a2           ;0CaHlc XOFF0,XOFF1,XSCAN
     676 00009890     e282          subxy   a4,a2
     677 000098a0     0502          sext    a2
     678 000098b0     cf05          jrnn    clx1    
     679 000098c0     03a2          neg     a2
     680 000098d0     4c4b          move    a2,a11          ;object 1 to the right
     681 000098e0     578c          clr     a12
     682 000098f0     4c8d          move    a4,a13          ;rightmost top left
     683 00009900     c003          jruc    clx2
     684                    
     685 00009910     4c4c  clx1    move    a2,a12          ;object 0 to the right
     686 00009920     576b          clr     a11
     687 00009930     4c6d          move    a3,a13          ;rightmost top left
     688 00009940     e4a6  clx2    cmpxy   a5,a6           ;find leftmost lower right
     689 00009950     cc02          jrxn    clx3
     690 00009960     e2ad          subxy   a5,a13
     691 00009970     c001          jruc    clx4
     692                    
     693 00009980     e2cd  clx3    subxy   a6,a13
     694 00009990     050d  clx4    sext    a13
     695 000099a0     03ad          neg     a13             ;A13=XSCAN
     696                    
     697                                                    ;0CaHlc YOFF0,YOFF1,YSCAN
     698 000099b0     2a03          sra     16,a3           ;Kill X half
     699 000099c0     2a04          sra     16,a4
     700 000099d0     2a05          sra     16,a5
     701 000099e0     2a06          sra     16,a6
     702 000099f0     4c62          move    a3,a2           ;A3=YOFF1
     703 00009a00     4482          sub     a4,a2           ;A2=YOFF0
     704 00009a10     cf04          jrnn    cly1    
     705 00009a20     03a2          neg     a2
     706 00009a30     5663          clr     a3              ;object 1 to the right
     707 00009a40     4c8e          move    a4,a14          ;rightmost top left
     708 00009a50     c003          jruc    cly2
     709                    
     710 00009a60     4c6e  cly1    move    a3,a14          ;object 0 to the right
     711 00009a70     4c43          move    a2,a3
     712 00009a80     5642          clr     a2
     713 00009a90     48a6  cly2    cmp     a5,a6           ;find leftmost lower right
     714 00009aa0     ce02          jrn     cly3
     715 00009ab0     44ae          sub     a5,a14
     716 00009ac0     c001          jruc    cly4
     717 00009ad0     44ce  cly3    sub     a6,a14
     718 00009ae0     03ae  cly4    neg     a14             ;A14=YSCAN
     719                    
     720                    *A2=YOFF0
     721                    *A3=YOFF1
     722                    *A4=IMAGE SOURCE ADDRESS TEMP
     723                    *A5=WIDTH TEMP
     724                    *A7=IMAGE 1 DATA HEADER POINTER
     725                    *A8=IMAGE 1 OBJECT POINTER
     726                    *A9=IMAGE 0 DATA HEADER POINTER
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   16

     727                    *A10=IMAGE 0 OBJECT POINTER
     728                    *A11=XOFF0
     729                    *A12=XOFF1
     730                    *A13=XSCAN
     731                    *A14=YSCAN
     732                    
     733                    *CALCULATE OBJECT 0 STARTAD, HINC0, VINC0
     734                    
     735 00009af0     b724          move    *a9(ISAG),a4,L  ;Get image source address
         00009b00     0040  
     736 00009b10     8525          move    *a9,a5          ;Get ISIZEX
     737 00009b20     1065          addk    3,a5            ;correct erroneous width (thanx, warren)
     738 00009b30     2fc5          srl     2,A5
     739 00009b40     2445          sll     2,A5
     740                            
     741                    *CHECK OBJECT 0 FLIPS
     742                    
     743 00009b50     1f70          btst    B_FLIPH,b0
     744 00009b60     cb0b          jrnz    CL0HF           ;HORIZONTAL FLIP
     745 00009b70     1f50          btst    B_FLIPV,b0
     746 00009b80     cb17          jrnz    CL0VF           ;VERTICAL FLIP
     747                            
     748                                                    ;NO FLIP CASE
     749 00009b90     4ca1          move    a5,a1           ;Get width
     750 00009ba0     5e41          mpyu    a2,a1           ;Mult width x yoff
     751 00009bb0     4161          add     a11,a1          ;Add in x offset
     752 00009bc0     2461          sll     3,a1            ;Correct for byte addressing
     753 00009bd0     4024          add     a1,a4           ;A4=STARTAD0=IMAGEAD0+(YOFF0 X W0) + XOFF
     754 00009be0     45a5          sub     a13,a5          ;A5=VINC0=W0-XScan
     755 00009bf0     2465          sll     3,a5            ;Correct for pixel addressing
     756 00009c00     1902          movk    8,a2            ;A2=HINC0
     757 00009c10     c02a          jruc    CLOBJ1
     758                    
     759                    
     760 00009c20     1f50  CL0HF   BTST    B_FLIPV,B0      ;VERT FLIP TOO?
     761 00009c30     cb19          JRNE    CL0HVF          ;HORIZ AND VERT FLIP
     762                                                    ;HORIZONTAL FLIP
     763 00009c40     4ca1          MOVE    A5,A1           ;GET WIDTH
     764 00009c50     5e41          MPYU    A2,A1           ;MULT WIDTH X Y OFFSET
     765 00009c60     40a1          ADD     A5,A1           ;ADD IN WIDTH
     766 00009c70     4561          SUB     A11,A1          ;SUBTRACT X OFFSET
     767 00009c80     1421          DEC     A1              ;-1 MORE
     768 00009c90     2461          SLL     3,A1            ;CORRECT FOR BYTE ADDRESSING
     769 00009ca0     4024          ADD     A1,A4           ;A4=STARTAD0=IMAGEAD0+(YOFF0*W0)+W0-XOFF0-1
     770 00009cb0     09c2          MOVI    -8,A2           ;A2=HINC0
         00009cc0     fff8  
     771 00009cd0     41a5          ADD     A13,A5          ;A5=VINC0=W0+XSCAN
     772 00009ce0     2465          SLL     3,A5            ;CORRECT FOR PIXEL ADDRESSING
     773 00009cf0     c01c          JRUC    CLOBJ1
     774                    
     775                                                    ;VERTICAL FLIP
     776 00009d00     b521  CL0VF   MOVE    *A9(ISIZEY),A1  ;GET HEIGHT
         00009d10     0010  
     777 00009d20     4441          SUB     A2,A1           ;SUBTRACT YOFF0
     778 00009d30     1421          DEC     A1
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   17

     779 00009d40     5ea1          MPYU    A5,A1           ;MULTIPLY BY WIDTH
     780 00009d50     4161          ADD     A11,A1          ;ADD IN X OFFSET
     781 00009d60     2461          SLL     3,A1            ;CORRECT FOR PIXEL ADDRESSING
     782 00009d70     4024          ADD     A1,A4           ;A4=STARTAD0=IMAGEAD0+(H0-YOFF0-1)W0+XOFF0
     783 00009d80     03a5          NEG     A5              ;-W0
     784 00009d90     45a5          SUB     A13,A5          ;-XSCAN
     785 00009da0     2465          SLL     3,A5            ;A5=VINC0=-W0-XSCAN
     786 00009db0     1902          MOVK    8,A2            ;A2=HINC0
     787 00009dc0     c00f          JRUC    CLOBJ1
     788                    
     789                                                    ;VERTICAL AND HORIZONTAL FLIP
     790 00009dd0     b521  CL0HVF  MOVE    *A9(ISIZEY),A1  ;GET HEIGHT
         00009de0     0010  
     791 00009df0     4441          SUB     A2,A1           ;SUBTRACT YOFF0
     792 00009e00     1421          DEC     A1
     793 00009e10     5ea1          MPYU    A5,A1           ;MULTIPLY BY WIDTH
     794 00009e20     40a1          ADD     A5,A1           ;ADD IN WIDTH (W0)
     795 00009e30     4561          SUB     A11,A1          ;SUBTRACT XOFF0
     796 00009e40     1421          DEC     A1
     797 00009e50     2461          SLL     3,A1            ;CORRECT FOR PIXEL ADDRESSING
     798 00009e60     4024          ADD     A1,A4           ;A4=STARTAD0=(H0-YOFF0-1)W0+W0-XOFF0-1
     799 00009e70     03a5          NEG     A5              ;-W0
     800 00009e80     41a5          ADD     A13,A5          ;+XSCAN
     801 00009e90     2465          SLL     3,A5            ;A5=VINC0=-W0-XSCAN
     802 00009ea0     09c2          MOVI    -8,A2           ;A2=HINC0
         00009eb0     fff8  
     803                    
     804                    
     805                    *CALCULATE OBJECT 1 STARTAD, HJUMP, VJUMP               
     806                    
     807                    *A2=HINC0
     808                    *A3=YOFF1, HINC1
     809                    *A4=STARTAD0
     810                    *A5=VINC0
     811                    *A6=STARTAD1
     812                    *A7=IMAGE 1 DATA HEADER POINTER
     813                    *A8=IMAGE 1 OBJECT POINTER
     814                    *A9=IMAGE 0 DATA HEADER POINTER
     815                    *A10=IMAGE 0 OBJECT POINTER
     816                    *A11=W1, VINC1
     817                    *A12=XOFF1
     818                    *A13=XSCAN
     819                    *A14=YSCAN
     820                    
     821 00009ec0     b6e6  CLOBJ1  move    *a7(ISAG),a6,L  ;Get image source address
         00009ed0     0040  
     822 00009ee0     84eb          move    *a7,a11         ;Get ISIZEX
     823 00009ef0     106b          addk    3,a11           ;correct erroneous width (thanx, warren)
     824 00009f00     2fcb          srl     2,A11
     825 00009f10     244b          sll     2,A11
     826                            
     827 00009f20     1f71          BTST    B_FLIPH,B1      ;CHECK OBJECT 1 FLIPS
     828 00009f30     cb0b          JRNE    CL1HF           ;HORIZONTAL FLIP
     829 00009f40     1f51          BTST    B_FLIPV,B1
     830 00009f50     cb17          JRNE    CL1VF           ;VERTICAL FLIP
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   18

     831                            
     832                    *NO FLIP CASE
     833                    *A3=HINC1=8 (BYTE AT A TIME)
     834                    *A11=VINC1=W1-XSCAN
     835                    *A6=STARTAD1=IMAGEAD1+(YOFF1 X W1) + XOFF1
     836                    
     837 00009f60     4d61          MOVE    A11,A1          ;GET WIDTH
     838 00009f70     5e61          MPYU    A3,A1           ;MULT WIDTH X YOFF
     839 00009f80     4181          ADD     A12,A1          ;ADD IN X OFFSET
     840 00009f90     2461          SLL     3,A1            ;CORRECT FOR BYTE ADDRESSING
     841 00009fa0     4026          ADD     A1,A6           ;ADD TO SOURCE ADDRESS
     842 00009fb0     1903          MOVK    8,A3            ;HINC1
     843 00009fc0     45ab          SUB     A13,A11         ;VINC1=W1-XSCAN
     844 00009fd0     246b          SLL     3,A11           ;CORRECT FOR PIXEL ADDRESSING
     845 00009fe0     c02a          JRUC    CSH
     846                    
     847                    ************************
     848                    *HORIZONTAL FLIP
     849                    *A3=HINC1=-8
     850                    *A11=VINC1=W1+XSCAN
     851                    *A6=STARTAD1=IMAGEAD1+(YOFF1 X W1) + W1-XOFF1-1
     852 00009ff0     1f51  CL1HF   BTST    B_FLIPV,B1      ;VERT FLIP TOO?
     853 0000a000     cb19          JRNE    CL1HVF          ;HORIZ AND VERT FLIP
     854 0000a010     4d61          MOVE    A11,A1          ;GET WIDTH
     855 0000a020     5e61          MPYU    A3,A1           ;MULT WIDTH X Y OFFSET
     856 0000a030     4161          ADD     A11,A1          ;ADD IN WIDTH
     857 0000a040     4581          SUB     A12,A1          ;SUBTRACT X OFFSET
     858 0000a050     1421          DEC     A1              ;-1 MORE
     859 0000a060     2461          SLL     3,A1            ;CORRECT FOR BYTE ADDRESSING
     860 0000a070     4026          ADD     A1,A6
     861 0000a080     09c3          MOVI    -8,A3           ;HINC1
         0000a090     fff8  
     862 0000a0a0     41ab          ADD     A13,A11         ;VINC1=W1+XSCAN
     863 0000a0b0     246b          SLL     3,A11           ;CORRECT FOR PIXEL ADDRESSING
     864 0000a0c0     c01c          JRUC    CSH
     865                    
     866                    ********************
     867                    *VERTICAL FLIP
     868                    *A3=HINC1=8
     869                    *A11=VINC1=-W1-XSCAN
     870                    *A6=STARTAD1=IMAGEAD1+(H1-YOFF1-1)W1+XOFF1
     871 0000a0d0     b4e1  CL1VF   MOVE    *A7(ISIZEY),A1  ;GET HEIGHT
         0000a0e0     0010  
     872 0000a0f0     4461          SUB     A3,A1           ;SUBTRACT YOFF1
     873 0000a100     1421          DEC     A1
     874 0000a110     5f61          MPYU    A11,A1          ;MULTIPLY BY WIDTH
     875 0000a120     4181          ADD     A12,A1          ;ADD IN X OFFSET
     876 0000a130     2461          SLL     3,A1            ;CORRECT FOR PIXEL ADDRESSING
     877 0000a140     4026          ADD     A1,A6           ;ADD TO SOURCE ADDRESS
     878 0000a150     03ab          NEG     A11             ;-W1
     879 0000a160     45ab          SUB     A13,A11         ;-XSCAN
     880 0000a170     246b          SLL     3,A11           ;CORRECT FOR PIXEL ADDRESSING
     881 0000a180     1903          MOVK    8,A3            ;HINC1
     882 0000a190     c00f          JRUC    CSH
     883                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   19

     884                    *VERTICAL AND HORIZONTAL FLIP
     885                    *A3=HINC1=-8
     886                    *A11=VINC1=-W1-XSCAN
     887                    *A6=STARTAD1=(H1-YOFF1-1)W1+W1-XOFF1-1
     888 0000a1a0     b4e1  CL1HVF  MOVE    *A7(ISIZEY),A1  ;GET HEIGHT
         0000a1b0     0010  
     889 0000a1c0     4461          SUB     A3,A1           ;SUBTRACT YOFF1
     890 0000a1d0     1421          DEC     A1
     891 0000a1e0     5f61          MPYU    A11,A1          ;MULTIPLY BY WIDTH
     892 0000a1f0     4161          ADD     A11,A1          ;ADD IN WIDTH (W1)
     893 0000a200     4581          SUB     A12,A1          ;SUBTRACT XOFF1
     894 0000a210     1421          DEC     A1
     895 0000a220     2461          SLL     3,A1            ;CORRECT FOR PIXEL ADDRESSING
     896 0000a230     4026          ADD     A1,A6           ;ADD TO SOURCE ADDRESS
     897 0000a240     03ab          NEG     A11             ;-W1
     898 0000a250     41ab          ADD     A13,A11         ;+XSCAN
     899 0000a260     246b          SLL     3,A11           ;CORRECT FOR PIXEL ADDRESSING
     900 0000a270     09c3          MOVI    -8,A3           ;HINC1
         0000a280     fff8  
     901                    
     902                    *A1= WIDTH COUNTER XSCAN
     903                    *A2=H INCREMENT IMAGE 0
     904                    *A3=H INCREMENT IMAGE 1
     905                    *A4=INDEX TO IMAGE 0
     906                    *A5=V INCREMENT IMAGE 0
     907                    *A6=INDEX TO IMAGE 1
     908                    *A7=IMAGE 1 DATA HEADER POINTER
     909                    *A8=IMAGE 1 OBJECT POINTER
     910                    *A9=IMAGE 0 DATA HEADER POINTER
     911                    *A10=IMAGE 0 OBJECT POINTER
     912                    *A11=V INCREMENT IMAGE 1
     913                    *A13=WIDTH COUNT XSCAN
     914                    *A14=HEIGHT COUNT YSCAN
     915                    
     916 0000a290     0b4e  CSH     cmpi    080H,a14                ;no scan if xscan, yscan values out of range
         0000a2a0     ff7f  
     917 0000a2b0     c91f          jrhs    CSFAIL
     918 0000a2c0     0b4d          cmpi    080H,a13
         0000a2d0     ff7f  
     919 0000a2e0     c91c          jrhs    CSFAIL
     920                    
     921 0000a2f0     0360          dint
     922 0000a300     05a0          move    @INTENB,a0
         0000a310 c0000110  
     923 0000a330     0b80          andni   X1E,a0
         0000a340 00000002  
     924 0000a360     0580          move    a0,@INTENB
         0000a370 c0000110  
     925 0000a390     0d60          eint
     926                    
     927 0000a3a0     05a0  csh0    move    @DMACTRL,a0
         0000a3b0 01a00010  
     928 0000a3d0     cefc          jrn     csh0            ;DMA busy?
     929                    
     930                            .if     YUNIT
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   20

     931 0000a3e0     0546          setf    6,0,0           ;6 bit field
     932                            .else
     933                            setf    8,0,0           ;8 bit field
     934                            .endif
     935                    
     936 0000a3f0     4da1  csh1    move    a13,a1          ;load line countdown horiz counter
     937                    
     938 0000a400     8480  cshl    move    *a4,a0          ;Check image 0 corresponding non zeroes
     939 0000a410     ca02          jrz     csnxh           ;No hit?
     940                    
     941 0000a420     84c0          move    *a6,a0          ;check image 1
     942 0000a430     cb16          jrnz    pshit           ;Hit?
     943                    
     944 0000a440     4044  csnxh   add     a2,a4           ;Add horiz increments
     945 0000a450     4066          add     a3,a6
     946 0000a460     3ce1          dsjs    a1,cshl         ;Loop horizontal
     947                    
     948 0000a470     40a4          add     a5,a4           ;Add vert increments
     949 0000a480     4166          add     a11,a6
     950 0000a490     3d6e          dsjs    a14,csh1        ;Loop vert
     951                    
     952 0000a4a0     0570          setf    16,1,0          ;Normal field
     953                    
     954 0000a4b0     4dbd  CSFAIL  move    b13,b13
     955 0000a4c0     ca0b          jrz     psnodma         ;Skip DMA restart?
     956 0000a4d0     0360          dint
     957 0000a4e0     05a0          move    @INTENB,a0
         0000a4f0 c0000110  
     958 0000a510     0ba0          ori     X1E,a0
         0000a520 00000002  
     959 0000a540     0580          move    a0,@INTENB
         0000a550 c0000110  
     960 0000a570     0d60          eint
     961 0000a580     0320  psnodma clrc                    ;No hit
     962 0000a590     c00f          jruc    psx             ;Exit
     963                    
     964                    
     965 0000a5a0     0570  pshit   setf    16,1,0          ;Normal field
     966 0000a5b0     4dbd          move    b13,b13
     967 0000a5c0     ca0b          jrz     csflags         ;Skip DMA restart?
     968 0000a5d0     0360          dint
     969 0000a5e0     05a0          move    @INTENB,a0
         0000a5f0 c0000110  
     970 0000a610     0ba0          ori     X1E,a0
         0000a620 00000002  
     971 0000a640     0580          move    a0,@INTENB
         0000a650 c0000110  
     972 0000a670     0d60          eint
     973 0000a680     0de0  csflags setc                    ;Hit
     974                    
     975 0000a690     09bf  psx     mmfm    sp,b0,b1
         0000a6a0     0003  
     976 0000a6b0     09af          mmfm    sp,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13
         0000a6c0     3fff  
     977 0000a6d0     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   21

     978                    
     979                    
     980                    
     981                    ********************************
     982                    *PLAYER HAS BEEN COLLIDED WITH
     983                    *TELL THIS COLLISION CHECK THAT PLAYER IS REALLY SHORTER THAN HE IS
     984                    *THEN RETURN CARRY SET IF STILL A HIT, CARRY CLEAR IF THIS SHOULD NOT BE
     985                    *A COLLISION.
     986                    *A0=OBJECT THAT HIT PLAYER
     987                    *A8=PLAYER LEGS IMAGE PTR
     988                    
     989                    ;SHORT_PLYR
     990                    ;       MOVE    *A8(OYPOS),A7           ;A7 - OBJ1 Ymin
     991                    ;       ADDK    3,A7                    ;ADDI 0
     992                    ;       MOVE    *A0(OID),A11
     993                    ;       zext    a11
     994                    ;;      CMPI    CLSENMY|TYPORB,A11
     995                    ;;      JRNE    SP0
     996                    ;;      SUBK    5,A7
     997                    ;;      MOVE    *A8(OSIZEY),A11,W       ;A11 - OBJ1 Ymax
     998                    ;;      SUBK    8,A11                   ;MAKE LEGS SHORTER IN LENGTH!
     999                    ;;      JRUC    SP2
    1000                    ;;SP0
    1001                    ;       CMPI    CLSNEUT|TYPMINE,A11
    1002                    ;       JRNE    SP1
    1003                    ;       ADDK    12,A7                   ;15
    1004                    ;       MOVE    *A8(OSIZEY),A11         ;A11 - OBJ1 Ymax
    1005                    ;       SUBK    19,A11                  ;MAKE LEGS SHORTER IN LENGTH! ;21
    1006                    ;       JRUC    SP2
    1007                    ;SP1
    1008                    ;       move    *A8(OSIZEY),A11         ;A11 - OBJ1 Ymax
    1009                    ;       SUBK    20,A11   ;19            ;SUBI 13 16 ;MAKE LEGS SHORTER IN LENGTH!
    1010                    ;SP2    add     A7,A11
    1011                    ;       move    *A0(OYPOS),A6           ;CHECK OBJS A0,A8 for intersection
    1012                    ;       cmp     A11,A6
    1013                    ;       jrgt    CLRCR                   ;Y2Min > Y1Max
    1014                    ;       move    *A0(OSIZEY),A11
    1015                    ;       add     A11,A6
    1016                    ;       cmp     A7,A6
    1017                    ;       jrlt    CLRCR                   ;Y2Max < Y1Min
    1018                    ;
    1019                    ;;NOW X CHECK
    1020                    ;
    1021                    ;       move    *A8(OXPOS),A7           ;A9 - OBJ1 Xmin
    1022                    ;       addk    6,a7
    1023                    ;       move    *A8(OSIZEX),A11         ;A10 - OBJ1 Xmax
    1024                    ;       subk    6,a11
    1025                    ;       add     A7,A11
    1026                    ;       move    *A0(OXPOS),A6           ;USE SIGNED COMPARES BECAUSE OBJS MAY LIE ON ZERO
    1027                    ;       cmp     A11,A6
    1028                    ;       jrgt    CLRCR                   ;X2Min > X1Max
    1029                    ;       move    *A0(OSIZEX),A11
    1030                    ;       add     A11,A6
    1031                    ;       cmp     A7,A6
    1032                    ;       jrlt    CLRCR                   ;X2Max < X1Min
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:53:45 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   22

    1033                    ;
    1034                    ;       move    @PCNT,a6
    1035                    ;       btst    0,a6
    1036                    ;       JRZ     CLRCR
    1037                    ;       SETC                            ;GOT A BOX INTERSECTION
    1038                    ;       RETS
    1039                    ;CLRCR  CLRC
    1040                    ;       RETS
    1041                    
    1042                    
    1043                    ******************************************************************************
    1044                    
    1045                            .end

 No Errors,  No Warnings
