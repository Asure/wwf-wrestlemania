TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .file   "coll2.asm"
       3                            .width  132
       4                            .option b,d,l,t
       5                            .mnolist
       6                    
       7                    
       8                            .include        "mproc.equ"
       9                            .include        "display.equ"
      10                            .include        "sys.equ"
      11                            .include        "gsp.equ"
      12                            .include        "game.equ"
      13                            .include        "imgtbl.glo"
      14                            .include        "macros.h"
      15                    
      16                    
      17                    
      18                    
      19                    
      20                            ;from ROBO.ASM
      21                            .ref    player_die
      22                            .ref    bullet_die
      23                            .ref    grunt_shot,grunt_die
      24                            .ref    post_die
      25                            .ref    human_saved,human_killed,human_hitpost
      26                            .ref    hulk_pushback
      27                            .ref    sphereoid_die,enforcer_die,spark_die
      28                            .ref    quark_die,tank_die,shell_die
      29                    
      30                    
      31                    
      32 00000000                   BSSX    coll_stop       ,16             ;!0=Stop scan on current obj
      33 00000010                   .bss    PList           ,32*(30+1)      ;List of objs of class player
      34 000003f0                   .bss    NList           ,32*(30+1)      ;List of objs of class neutral
      35 000007d0                   .bss    EList           ,32*(100+1)     ;List of objs of class enemy
      36 00001470                   .bss    HList           ,32*(40+1)      ;List of humans
      37 00001990                   .bss    KList           ,32*(20+1)      ;List of hulks
      38 00000000                   BSSX    CCCCount        ,16             ;Col Check Cycle Counter.
      39                    
      40                    
      41                    
      42                    
      43                    
      44                    
      45                    
      46                    
      47 00000000            SUBR   collisions
      48                    
      49 00000000                   SLEEPK  1
      50                    
      51 00000040     05a0          move    @CCCCount,a0
         00000050 00001c30- 
      52 00000070     1020          inc     a0
      53 00000080     0580          move    a0,@CCCCount
         00000090 00001c30- 
      54                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE    2

      55 000000b0     05a6          move    @WORLDTLX+16,a6         ;A6=Xmin
         000000c0 00000010! 
      56 000000e0     4cc7          move    a6,a7
      57 000000f0     0b07          addi    100,a7                  ;A7=Xmax
         00000100     0064  
      58 00000110     4ee3          move    a7,b3
      59 00000120     0d3f          callr   collx
         00000130     0015  
      60                    
      61 00000140     4e76          move    b3,a6
      62 00000150     4cc7          move    a6,a7
      63 00000160     0b07          addi    100,a7
         00000170     0064  
      64 00000180     4ee3          move    a7,b3
      65 00000190     0d3f          callr   collx
         000001a0     000e  
      66                    
      67 000001b0     4e76          move    b3,a6
      68 000001c0     4cc7          move    a6,a7
      69 000001d0     0b07          addi    100,a7
         000001e0     0064  
      70 000001f0     4ee3          move    a7,b3
      71 00000200     0d3f          callr   collx
         00000210     0007  
      72                    
      73 00000220     4e76          move    b3,a6
      74 00000230     4cc7          move    a6,a7
      75 00000240     0b07          addi    100,a7
         00000250     0064  
      76 00000260     0d3f          callr   collx
         00000270     0001  
      77                    
      78 00000280     c0d7          jruc    collisions
      79                    
      80                    
      81 00000290           collx
      82 00000290     09e0          movi    OBJLST,a0               ;Object list to check
         000002a0 00000000! 
      83                    
      84 000002c0     09e8          movi    HList,a8
         000002d0 00001470- 
      85 000002f0     09f8          movi    KList,b8
         00000300 00001990- 
      86 00000320     09e9          movi    PList,a9                ;Build collision lists
         00000330 00000010- 
      87 00000350     4f24          move    a9,b4                   ;Set A5/B4 for 1st collision call
      88 00000360     09ea          movi    EList,a10
         00000370 000007d0- 
      89 00000390     4d45          move    a10,a5
      90 000003a0     09eb          movi    NList,a11
         000003b0 000003f0- 
      91 000003d0     c001          jruc    mklists
      92                    
      93 000003e0     920a  csr20   move    a0,*a10+,L              ;Insert on enemy list
      94 000003f0     8600  mklists move    *a0,a0,L                ;Get next obj
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE    3

      95 00000400     ca21          jrz     gotlists
      96                    
      97 00000410     ae02          movb    *a0(OFLAGS+B_NOCOLL-7),a2
         00000420     00e4  
      98 00000430     cefb          jrn     mklists                 ;Not collideable?
      99                    
     100 00000440     b401          move    *a0(OXPOS),a1           ;Obj can lie on max/min boundary
         00000450     0090  
     101 00000460     48e1          cmp     a7,a1
     102 00000470     c5f7          jrge    mklists                 ;Out of range?
     103                    
     104 00000480     b402          move    *a0(OSIZEX),a2
         00000490     0130  
     105 000004a0     4041          add     a2,a1
     106 000004b0     48c1          cmp     a6,a1
     107 000004c0     c6f2          jrle    mklists                 ;Out of range?
     108                    
     109 000004d0     b402          move    *a0(OID),a2             ;Check Class
         000004e0     0190  
     110 000004f0     0b42          cmpi    0FFFF8600h,a2
         00000500     79ff  
     111 00000510     ca0b          jreq    csrHULK
     112 00000520     4c42          move    a2,a2
     113 00000530     ceea          jrn     csr20                   ;Enemy?
     114 00000540     1e22          btst    14,a2
     115 00000550     cb0a          jrnz    csr40                   ;Player?
     116                    
     117 00000560     0b42          cmpi    CLSNEUT|TYPHUMAN,a2
         00000570     fbff  
     118 00000580     ca02          jreq    csrHU                   ;Human?
     119                    
     120 00000590     920b          move    a0,*a11+,L              ;Insert on neutral list
     121 000005a0     c0e4          jruc    mklists
     122                    
     123 000005b0     9208  csrHU   move    a0,*a8+,L               ;Insert on human list
     124 000005c0     c0e2          jruc    mklists
     125                    
     126 000005d0           csrHULK
     127 000005d0     4e0e          move    a0,b14
     128 000005e0     93d8          move    b14,*b8+,L              ;Insert on hulk list
     129 000005f0     c0df          jruc    mklists
     130                    
     131 00000600     9209  csr40   move    a0,*a9+,L               ;Insert on player list
     132 00000610     c0dd          jruc    mklists
     133                    
     134 00000620           gotlists
     135 00000620     8208          move    a0,*a8,L                ;Null terminate each list
     136 00000630     8209          move    a0,*a9,L
     137 00000640     820a          move    a0,*a10,L
     138 00000650     820b          move    a0,*a11,L
     139                    
     140 00000660     0d3f          callr   ColLists                ;Collide enemy to player
         00000670     0050  
     141                    
     142 00000680     09e5          movi    NList,a5
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE    4

         00000690 000003f0- 
     143 000006b0     09f4          movi    PList,b4
         000006c0 00000010- 
     144 000006e0     0d3f          callr   ColLists                ;Collide neutral to player
         000006f0     0048  
     145                    
     146 00000700     05a0          move    @CCCCount,a0
         00000710 00001c30- 
     147 00000730     1fe0          btst    0,a0
     148 00000740     cb08          jrnz    dknxskip_NE
     149 00000750     09e5          movi    NList,a5
         00000760 000003f0- 
     150 00000780     09f4          movi    EList,b4
         00000790 000007d0- 
     151 000007b0     0d3f          callr   ColLists                ;Collide neutral to enemy
         000007c0     003b  
     152 000007d0           dknxskip_NE                             ; every third (2nd, really) cycle
     153                    
     154 000007d0     05a0          move    @CCCCount,a0
         000007e0 00001c30- 
     155 00000800     0b80          andi    07h,a0
         00000810 fffffff8  
     156 00000830     cb08          jrnz    dknxskip_HK
     157 00000840     09e5          movi    HList,a5
         00000850 00001470- 
     158 00000870     09f4          movi    KList,b4
         00000880 00001990- 
     159 000008a0     0d3f          callr   ColLists                ;Collide human to hulk
         000008b0     002c  
     160 000008c0           dknxskip_HK                             ; every eighth cycle
     161                    
     162 000008c0     09e5          movi    HList,a5
         000008d0 00001470- 
     163 000008f0     09f4          movi    PList,b4
         00000900 00000010- 
     164 00000920     0d3f          callr   ColLists                ;Collide human to player
         00000930     0024  
     165                    
     166 00000940     05a0          move    @CCCCount,a0
         00000950 00001c30- 
     167 00000970     0b80          andi    03h,a0
         00000980 fffffffc  
     168 000009a0     cb08          jrnz    dknxskip_HN
     169 000009b0     09e5          movi    HList,a5
         000009c0 00001470- 
     170 000009e0     09f4          movi    NList,b4
         000009f0 000003f0- 
     171 00000a10     0d3f          callr   ColLists                ;Collide human to neutral
         00000a20     0015  
     172 00000a30           dknxskip_HN                             ; every fourth frame
     173                    
     174 00000a30     05a0          move    @CCCCount,a0
         00000a40 00001c30- 
     175 00000a60     0b80          andi    07h,a0
         00000a70 fffffff8  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE    5

     176 00000a90     cb08          jrnz    dknxskip_KN
     177 00000aa0     09e5          movi    KList,a5
         00000ab0 00001990- 
     178 00000ad0     09f4          movi    NList,b4
         00000ae0 000003f0- 
     179 00000b00     0d3f          callr   ColLists                ;Collide hulk to neutral
         00000b10     0006  
     180 00000b20           dknxskip_KN                             ; every eighth frame only
     181                    
     182 00000b20     09e5          movi    KList,a5
         00000b30 00001990- 
     183 00000b50     09f4          movi    PList,b4
         00000b60 00000010- 
     184                    
     185                    
     186 00000b80           ColLists
     187 00000b80           CLstsLp0
     188 00000b80     96a1          move    *a5+,a1,L
     189 00000b90     ca57          jrz     scndone
     190                                                            ;Load up coors of obj from first list
     191 00000ba0     b429          move    *a1(OXPOS),a9           ;A9=OBJ1 Xmin
         00000bb0     0090  
     192 00000bc0     cafb          jrz     CLstsLp0                ;Deleted?
     193 00000bd0     b42a          move    *a1(OSIZEX),a10         ;A10=OBJ1 Xmax (+1)
         00000be0     0130  
     194 00000bf0     412a          add     a9,a10
     195 00000c00     b427          move    *a1(OYPOS),a7           ;A7=OBJ1 Ymin
         00000c10     00b0  
     196 00000c20     b42b          move    *a1(OSIZEY),a11         ;A11=OBJ1 Ymax (+1)
         00000c30     0140  
     197 00000c40     40eb          add     a7,a11
     198 00000c50     b42e          move    *a1(ODXOFF),a14,W
         00000c60     0220  
     199 00000c70     45ca          sub     a14,a10
     200 00000c80     b42e          move    *a1(ODYOFF),a14,W
         00000c90     0230  
     201 00000ca0     45cb          sub     a14,a11
     202 00000cb0     4e96          move    b4,a6                   ;Load head of second list
     203                    
     204 00000cc0     96c2  PScnLp1 move    *a6+,a2,L
     205 00000cd0     caea          jrz     CLstsLp0
     206                    
     207                    
     208 00000ce0     b440          move    *a2(OYPOS),a0           ;Check objs A1,A2 for intersection
         00000cf0     00b0  
     209 00000d00     4960          cmp     a11,a0
     210 00000d10     c5e6          jrge    CLstsLp0                ;Y2Min >= Y1Max?
     211 00000d20     b44e          move    *a2(OSIZEY),a14
         00000d30     0140  
     212 00000d40     41c0          add     a14,a0
     213 00000d50     b44e          move    *a2(ODYOFF),a14
         00000d60     0230  
     214 00000d70     45c0          sub     a14,a0
     215 00000d80     48e0          cmp     a7,a0
     216 00000d90     c6f2          jrle    PScnLp1                 ;Y2Max <= Y1Min?
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE    6

     217                    
     218 00000da0     b440  jxer3d  move    *a2(OXPOS),a0           ;Signed compares because objs may lie on 0
         00000db0     0090  
     219 00000dc0     caef          jrz     PScnLp1                 ;Deleted?
     220 00000dd0     4940          cmp     a10,a0
     221 00000de0     c5ed          jrge    PScnLp1                 ;X2Min >= X1Max?
     222 00000df0     b44e          move    *a2(OSIZEX),a14
         00000e00     0130  
     223 00000e10     41c0          add     a14,a0
     224 00000e20     b44e          move    *a2(ODXOFF),a14
         00000e30     0220  
     225 00000e40     45c0          sub     a14,a0
     226 00000e50     4920          cmp     a9,a0
     227 00000e60     c6e5          jrle    PScnLp1                 ;X2Max <= X1Min?
     228                    
     229 00000e70     0d3f          callr   ColFunc                 ;0CaHll colfunc for obj A1 and A2
         00000e80     0029  
     230 00000e90     4c11          move    b0,b1                   ;B1=*Collision routine for obj A1
     231 00000ea0                   SWAP    a1,a2
     232 00000ed0     0d3f          callr   ColFunc
         00000ee0     0023  
     233 00000ef0                   SWAP    a1,a2
     234 00000f20     4c12          move    b0,b2                   ;B2=*Collision routine for obj A2
     235 00000f30     5430          or      b1,b0                   ;Set z flag if both are zero
     236 00000f40     cad7          jrz     PScnLp1
     237                    
     238 00000f50     ae2e          movb    *a1(OFLAGS+B_PIXSCAN-7),a14 ;Is PIXSCAN ON
         00000f60     00e3  
     239 00000f70     ce03          jrn     DoPScn0
     240 00000f80     ae4e          movb    *a2(OFLAGS+B_PIXSCAN-7),a14 ;Is PIXSCAN ON
         00000f90     00e3  
     241 00000fa0     cf03          jrnn    SkPxScn0
     242 00000fb0     0d3f  DoPScn0 callr   PIXSCAN
         00000fc0     0861  
     243 00000fd0     c9ce          jrnc    PScnLp1                 ;BR=THIS WASN'T REALLY A COLLISION
     244 00000fe0           SkPxScn0
     245                    
     246 00000fe0     5600          clr     a0
     247 00000ff0     0580          move    a0,@coll_stop           ;Clr flag
         00001000 00000000- 
     248                    
     249 00001020     4c31          move    b1,b1
     250 00001030     ca03          jrz     PObj2Col
     251 00001040     4c28          move    a1,a8
     252 00001050     4c40          move    a2,a0
     253 00001060     0931          call    b1                      ;Call collision for A1
     254                    
     255 00001070           PObj2Col
     256 00001070     4c52          move    b2,b2
     257 00001080     ca03          jrz     PCkFree
     258 00001090     4c48          move    a2,a8
     259 000010a0     4c20          move    a1,a0
     260 000010b0     0932          call    b2                      ;Call collision for A2
     261                    
     262 000010c0     05a0  PCkFree move    @coll_stop,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE    7

         000010d0 00000000- 
     263 000010f0     cabc          jrz     PScnLp1                 ;Continue scan?
     264 00001100     c0a7          jruc    CLstsLp0
     265                    
     266 00001110     0960  scndone rets
     267                    
     268                    
     269                    
     270 00001120           ColFunc
     271 00001120     ae23          movb    *a1(OID+8),a3
         00001130     0198  
     272 00001140     ae44          movb    *a2(OID+8),a4
         00001150     0198  
     273 00001160     2763          sll     32-5,a3
     274 00001170     2de3          srl     17,a3           ;32 Long Word Align
     275 00001180     2764          sll     32-5,a4
     276 00001190     2d44          srl     22,a4           ;Long Align
     277 000011a0     4083          add     a4,a3
     278 000011b0     0b23          addi    TypeTbl,a3
         000011c0 00001200' 
     279                    
     280 000011e0     8663          move    *a3,a3,L
     281 000011f0     0163          jump    a3              ;Routine can trash A0/A3/A4/A8/A14
     282                    
     283                    
     284                    
     285 00001200           TypeTbl
     286 00001200 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     287 00001300 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     288 00001400 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     289 00001500 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     290 00001600 00009200'         .LONG   NULL, NULL, NULL, PLGR, NULL, PLPO, PLHL, NULL
     291 00001700 00009220'         .LONG   PLSP, PLEN, PLSK, PLQU, PLTA, PLSH, NULL, NULL
     292 00001800 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     293 00001900 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     294 00001a00 00009200'         .LONG   NULL, NULL, NULL, BLGR, NULL, BLPO, BLHL, NULL
     295 00001b00 00009260'         .LONG   BLSP, BLEN, BLSK, BLQU, BLTA, BLSH, NULL, NULL
     296 00001c00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     297 00001d00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     298 00001e00 00009200'         .LONG   NULL, NULL, GRBL, NULL, NULL, GRPO, NULL, NULL
     299 00001f00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     300 00002000 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     301 00002100 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     302 00002200 00009200'         .LONG   NULL, HUPL, NULL, NULL, NULL, HUPO, HUHL, NULL
     303 00002300 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     304 00002400 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     305 00002500 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     306 00002600 00009200'         .LONG   NULL, NULL, POBL, POGR, NULL, NULL, POHL, NULL
     307 00002700 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     308 00002800 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     309 00002900 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     310 00002a00 00009200'         .LONG   NULL, NULL, HLBL, NULL, NULL, NULL, NULL, NULL
     311 00002b00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     312 00002c00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     313 00002d00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE    8

     314 00002e00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     315 00002f00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     316 00003000 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     317 00003100 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     318 00003200 00009200'         .LONG   NULL, NULL, SPBL, NULL, NULL, NULL, NULL, NULL
     319 00003300 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     320 00003400 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     321 00003500 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     322 00003600 00009200'         .LONG   NULL, NULL, ENBL, NULL, NULL, NULL, NULL, NULL
     323 00003700 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     324 00003800 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     325 00003900 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     326 00003a00 00009200'         .LONG   NULL, NULL, SKBL, NULL, NULL, NULL, NULL, NULL
     327 00003b00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     328 00003c00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     329 00003d00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     330 00003e00 00009200'         .LONG   NULL, NULL, QUBL, NULL, NULL, NULL, NULL, NULL
     331 00003f00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     332 00004000 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     333 00004100 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     334 00004200 00009200'         .LONG   NULL, NULL, TABL, NULL, NULL, NULL, NULL, NULL
     335 00004300 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     336 00004400 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     337 00004500 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     338 00004600 00009200'         .LONG   NULL, NULL, SHBL, NULL, NULL, NULL, NULL, NULL
     339 00004700 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     340 00004800 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     341 00004900 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     342 00004a00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     343 00004b00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     344 00004c00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     345 00004d00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     346 00004e00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     347 00004f00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     348 00005000 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     349 00005100 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     350 00005200 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     351 00005300 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     352 00005400 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     353 00005500 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     354 00005600 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     355 00005700 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     356 00005800 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     357 00005900 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     358 00005a00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     359 00005b00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     360 00005c00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     361 00005d00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     362 00005e00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     363 00005f00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     364 00006000 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     365 00006100 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     366 00006200 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     367 00006300 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     368 00006400 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE    9

     369 00006500 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     370 00006600 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     371 00006700 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     372 00006800 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     373 00006900 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     374 00006a00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     375 00006b00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     376 00006c00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     377 00006d00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     378 00006e00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     379 00006f00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     380 00007000 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     381 00007100 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     382 00007200 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     383 00007300 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     384 00007400 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     385 00007500 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     386 00007600 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     387 00007700 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     388 00007800 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     389 00007900 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     390 00007a00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     391 00007b00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     392 00007c00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     393 00007d00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     394 00007e00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     395 00007f00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     396 00008000 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     397 00008100 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     398 00008200 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     399 00008300 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     400 00008400 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     401 00008500 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     402 00008600 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     403 00008700 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     404 00008800 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     405 00008900 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     406 00008a00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     407 00008b00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     408 00008c00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     409 00008d00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     410 00008e00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     411 00008f00 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     412 00009000 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     413 00009100 00009200'         .LONG   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
     414                    
     415 00009200     5610  NULL    clr     b0
     416 00009210     0960          rets
     417                    
     418                    
     419 00009220           PLGR    ;player hits grunt
     420 00009220           PLPO    ;player hits post
     421 00009220           PLHL    ;player hits hulk
     422 00009220           PLSP    ;player hits sphereoid
     423 00009220           PLEN    ;player hits enforcer
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   10

     424 00009220           PLSK    ;player hits spark
     425 00009220           PLQU    ;player hits quark
     426 00009220           PLTA    ;player hits tank
     427 00009220           PLSH    ;player hits shell
     428 00009220     09f0          movi    player_die,b0
         00009230 00000000! 
     429 00009250     0960          rets
     430                    
     431 00009260           BLGR    ;bullet hits grunt
     432 00009260           BLPO    ;bullet hits post
     433 00009260           BLHL    ;bullet hits hulk
     434 00009260           BLSP    ;bullet hits sphereoid
     435 00009260           BLEN    ;bullet hits enforcer
     436 00009260           BLSK    ;bullet hits spark
     437 00009260           BLQU    ;bullet hits quark
     438 00009260           BLTA    ;bullet hits tank
     439 00009260           BLSH    ;bullet hits shell
     440 00009260     09f0          movi    bullet_die,b0
         00009270 00000000! 
     441 00009290     0960          rets
     442                    
     443 000092a0           GRBL    ;GRUNT hits bullet
     444 000092a0     09f0          movi    grunt_shot,b0
         000092b0 00000000! 
     445 000092d0     0960          rets
     446                    
     447 000092e0           GRPO    ;GRUNT hits post
     448 000092e0     09f0          movi    grunt_die,b0
         000092f0 00000000! 
     449 00009310     0960          rets
     450                    
     451 00009320           HUPL    ;human hits player
     452 00009320     09f0          movi    human_saved,b0
         00009330 00000000! 
     453 00009350     0960          rets
     454                    
     455 00009360           HUHL    ;human hits hulk
     456 00009360     09f0          movi    human_killed,b0
         00009370 00000000! 
     457 00009390     0960          rets
     458                    
     459 000093a0           HUPO    ;human hits post
     460 000093a0     09f0          movi    human_hitpost,b0
         000093b0 00000000! 
     461 000093d0     0960          rets
     462                    
     463 000093e0           POBL    ;post hits bullet
     464 000093e0           POGR    ;post hits grunt
     465 000093e0           POHL    ;post hits hulk
     466 000093e0     09f0          movi    post_die,b0
         000093f0 00000000! 
     467 00009410     0960          rets
     468                    
     469 00009420           HLBL    ;hulk hits bullet
     470 00009420     09f0          movi    hulk_pushback,b0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   11

         00009430 00000000! 
     471 00009450     0960          rets
     472                    
     473 00009460           SPBL    ;sphereoid hits bullet
     474 00009460     09f0          movi    sphereoid_die,b0
         00009470 00000000! 
     475 00009490     0960          rets
     476                    
     477 000094a0           ENBL    ;enforcer hits bullet
     478 000094a0     09f0          movi    enforcer_die,b0
         000094b0 00000000! 
     479 000094d0     0960          rets
     480                    
     481 000094e0           SKBL    ;spark hits bullet
     482 000094e0     09f0          movi    spark_die,b0
         000094f0 00000000! 
     483 00009510     0960          rets
     484                    
     485 00009520           QUBL    ;quark hits bullet
     486 00009520     09f0          movi    quark_die,b0
         00009530 00000000! 
     487 00009550     0960          rets
     488                    
     489 00009560           TABL    ;tank hits bullet
     490 00009560     09f0          movi    tank_die,b0
         00009570 00000000! 
     491 00009590     0960          rets
     492                    
     493 000095a0           SHBL    ;shell hits bullet
     494 000095a0     09f0          movi    shell_die,b0
         000095b0 00000000! 
     495 000095d0     0960          rets
     496                    
     497                    
     498 000095e0           PIXSCAN
     499 000095e0     098f          mmtm    sp,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13
         000095f0     fffc  
     500 00009600     099f          mmtm    sp,b0,b1
         00009610     c000  
     501                    
     502 00009620     4c2a          move    a1,a10                  ;A10=*Obj0
     503 00009630     4c48          move    a2,a8                   ;A8=*Obj1
     504 00009640     0360          dint
     505 00009650     b543          move    *a10(OXPOS),a3          ;Set up object box TLX,TLY
         00009660     0090  
     506 00009670     b74e          move    *a10(OYVAL),a14,L
         00009680     00a0  
     507 00009690     efc3          movy    a14,a3                  ;A3=Obj0 Y:X
     508                    
     509 000096a0     b504          move    *a8(OXPOS),a4
         000096b0     0090  
     510 000096c0     b70e          move    *a8(OYVAL),a14,L
         000096d0     00a0  
     511 000096e0     efc4          movy    a14,a4                  ;A4=Obj1 Y:X
     512                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   12

     513 000096f0     b546          move    *a10(OCTRL),a6
         00009700     00f0  
     514 00009710     4ec0          move    a6,b0                   ;B0=flags object 0
     515 00009720     b506          move    *a8(OCTRL),a6
         00009730     00f0  
     516 00009740     4ec1          move    a6,b1                   ;B1=flags object 1
     517                    
     518 00009750     b749          move    *a10(OIMG),a9,L         ;A9=*Image 0
         00009760     0170  
     519 00009770     b707          move    *a8(OIMG),a7,L          ;A7=*Image 1
         00009780     0170  
     520 00009790     0d60          eint
     521                    
     522 000097a0     8725          move    *a9,a5,L                ;ISIZE
     523 000097b0     86e6          move    *a7,a6,L                ;ISIZE
     524 000097c0     e065          addxy   a3,a5                   ;A5=Obj0 lower rgt Y:X
     525 000097d0     e086          addxy   a4,a6                   ;A6=Obj1 lower rgt Y:X
     526 000097e0     e4c3          cmpxy   a6,a3                   ;compare (lrx1,lry1) to (tlx0,tly0)
     527 000097f0                   JRXGE   CSFAIL
     528 00009810                   JRYGE   CSFAIL
     529 00009830     e485          cmpxy   a4,a5                   ;compare (tlx1,tly1) to (lrx0,lry0)
     530 00009840     c400          JRXLE   CSFAIL
         00009850     00c5  
     531 00009860     c200          JRYLE   CSFAIL
         00009870     00c3  
     532                    
     533                    
     534 00009880     4c62          move    a3,a2           ;0CaHlc XOFF0,XOFF1,XSCAN
     535 00009890     e282          subxy   a4,a2
     536 000098a0     0502          sext    a2
     537 000098b0     cf05          jrnn    clx1    
     538 000098c0     03a2          neg     a2
     539 000098d0     4c4b          move    a2,a11          ;object 1 to the right
     540 000098e0     578c          clr     a12
     541 000098f0     4c8d          move    a4,a13          ;rightmost top left
     542 00009900     c003          jruc    clx2
     543                    
     544 00009910     4c4c  clx1    move    a2,a12          ;object 0 to the right
     545 00009920     576b          clr     a11
     546 00009930     4c6d          move    a3,a13          ;rightmost top left
     547 00009940     e4a6  clx2    cmpxy   a5,a6           ;find leftmost lower right
     548 00009950     cc02          jrxn    clx3
     549 00009960     e2ad          subxy   a5,a13
     550 00009970     c001          jruc    clx4
     551                    
     552 00009980     e2cd  clx3    subxy   a6,a13
     553 00009990     050d  clx4    sext    a13
     554 000099a0     03ad          neg     a13             ;A13=XSCAN
     555                    
     556                                                    ;0CaHlc YOFF0,YOFF1,YSCAN
     557 000099b0     2a03          sra     16,a3           ;Kill X half
     558 000099c0     2a04          sra     16,a4
     559 000099d0     2a05          sra     16,a5
     560 000099e0     2a06          sra     16,a6
     561 000099f0     4c62          move    a3,a2           ;A3=YOFF1
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   13

     562 00009a00     4482          sub     a4,a2           ;A2=YOFF0
     563 00009a10     cf04          jrnn    cly1    
     564 00009a20     03a2          neg     a2
     565 00009a30     5663          clr     a3              ;object 1 to the right
     566 00009a40     4c8e          move    a4,a14          ;rightmost top left
     567 00009a50     c003          jruc    cly2
     568                    
     569 00009a60     4c6e  cly1    move    a3,a14          ;object 0 to the right
     570 00009a70     4c43          move    a2,a3
     571 00009a80     5642          clr     a2
     572 00009a90     48a6  cly2    cmp     a5,a6           ;find leftmost lower right
     573 00009aa0     ce02          jrn     cly3
     574 00009ab0     44ae          sub     a5,a14
     575 00009ac0     c001          jruc    cly4
     576 00009ad0     44ce  cly3    sub     a6,a14
     577 00009ae0     03ae  cly4    neg     a14             ;A14=YSCAN
     578                    
     579                    
     580                    
     581 00009af0     b724          move    *a9(ISAG),a4,L  ;Get image source address
         00009b00     0040  
     582 00009b10     8525          move    *a9,a5          ;Get ISIZEX
     583 00009b20     1065          addk    3,a5            ;correct erroneous width (thanx, warren)
     584 00009b30     2fc5          srl     2,A5
     585 00009b40     2445          sll     2,A5
     586                            
     587                    
     588 00009b50     1f70          btst    B_FLIPH,b0
     589 00009b60     cb0b          jrnz    CL0HF           ;HORIZONTAL FLIP
     590 00009b70     1f50          btst    B_FLIPV,b0
     591 00009b80     cb17          jrnz    CL0VF           ;VERTICAL FLIP
     592                            
     593                                                    ;NO FLIP CASE
     594 00009b90     4ca1          move    a5,a1           ;Get width
     595 00009ba0     5e41          mpyu    a2,a1           ;Mult width x yoff
     596 00009bb0     4161          add     a11,a1          ;Add in x offset
     597 00009bc0     2461          sll     3,a1            ;Correct for byte addressing
     598 00009bd0     4024          add     a1,a4           ;A4=STARTAD0=IMAGEAD0+(YOFF0 X W0) + XOFF
     599 00009be0     45a5          sub     a13,a5          ;A5=VINC0=W0-XScan
     600 00009bf0     2465          sll     3,a5            ;Correct for pixel addressing
     601 00009c00     1902          movk    8,a2            ;A2=HINC0
     602 00009c10     c02a          jruc    CLOBJ1
     603                    
     604                    
     605 00009c20     1f50  CL0HF   BTST    B_FLIPV,B0      ;VERT FLIP TOO?
     606 00009c30     cb19          JRNE    CL0HVF          ;HORIZ AND VERT FLIP
     607                                                    ;HORIZONTAL FLIP
     608 00009c40     4ca1          MOVE    A5,A1           ;GET WIDTH
     609 00009c50     5e41          MPYU    A2,A1           ;MULT WIDTH X Y OFFSET
     610 00009c60     40a1          ADD     A5,A1           ;ADD IN WIDTH
     611 00009c70     4561          SUB     A11,A1          ;SUBTRACT X OFFSET
     612 00009c80     1421          DEC     A1              ;-1 MORE
     613 00009c90     2461          SLL     3,A1            ;CORRECT FOR BYTE ADDRESSING
     614 00009ca0     4024          ADD     A1,A4           ;A4=STARTAD0=IMAGEAD0+(YOFF0*W0)+W0-XOFF0-1
     615 00009cb0     09c2          MOVI    -8,A2           ;A2=HINC0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   14

         00009cc0     fff8  
     616 00009cd0     41a5          ADD     A13,A5          ;A5=VINC0=W0+XSCAN
     617 00009ce0     2465          SLL     3,A5            ;CORRECT FOR PIXEL ADDRESSING
     618 00009cf0     c01c          JRUC    CLOBJ1
     619                    
     620                                                    ;VERTICAL FLIP
     621 00009d00     b521  CL0VF   MOVE    *A9(ISIZEY),A1  ;GET HEIGHT
         00009d10     0010  
     622 00009d20     4441          SUB     A2,A1           ;SUBTRACT YOFF0
     623 00009d30     1421          DEC     A1
     624 00009d40     5ea1          MPYU    A5,A1           ;MULTIPLY BY WIDTH
     625 00009d50     4161          ADD     A11,A1          ;ADD IN X OFFSET
     626 00009d60     2461          SLL     3,A1            ;CORRECT FOR PIXEL ADDRESSING
     627 00009d70     4024          ADD     A1,A4           ;A4=STARTAD0=IMAGEAD0+(H0-YOFF0-1)W0+XOFF0
     628 00009d80     03a5          NEG     A5              ;-W0
     629 00009d90     45a5          SUB     A13,A5          ;-XSCAN
     630 00009da0     2465          SLL     3,A5            ;A5=VINC0=-W0-XSCAN
     631 00009db0     1902          MOVK    8,A2            ;A2=HINC0
     632 00009dc0     c00f          JRUC    CLOBJ1
     633                    
     634                                                    ;VERTICAL AND HORIZONTAL FLIP
     635 00009dd0     b521  CL0HVF  MOVE    *A9(ISIZEY),A1  ;GET HEIGHT
         00009de0     0010  
     636 00009df0     4441          SUB     A2,A1           ;SUBTRACT YOFF0
     637 00009e00     1421          DEC     A1
     638 00009e10     5ea1          MPYU    A5,A1           ;MULTIPLY BY WIDTH
     639 00009e20     40a1          ADD     A5,A1           ;ADD IN WIDTH (W0)
     640 00009e30     4561          SUB     A11,A1          ;SUBTRACT XOFF0
     641 00009e40     1421          DEC     A1
     642 00009e50     2461          SLL     3,A1            ;CORRECT FOR PIXEL ADDRESSING
     643 00009e60     4024          ADD     A1,A4           ;A4=STARTAD0=(H0-YOFF0-1)W0+W0-XOFF0-1
     644 00009e70     03a5          NEG     A5              ;-W0
     645 00009e80     41a5          ADD     A13,A5          ;+XSCAN
     646 00009e90     2465          SLL     3,A5            ;A5=VINC0=-W0-XSCAN
     647 00009ea0     09c2          MOVI    -8,A2           ;A2=HINC0
         00009eb0     fff8  
     648                    
     649                    
     650                    
     651                    
     652 00009ec0     b6e6  CLOBJ1  move    *a7(ISAG),a6,L  ;Get image source address
         00009ed0     0040  
     653 00009ee0     84eb          move    *a7,a11         ;Get ISIZEX
     654 00009ef0     106b          addk    3,a11           ;correct erroneous width (thanx, warren)
     655 00009f00     2fcb          srl     2,A11
     656 00009f10     244b          sll     2,A11
     657                            
     658 00009f20     1f71          BTST    B_FLIPH,B1      ;CHECK OBJECT 1 FLIPS
     659 00009f30     cb0b          JRNE    CL1HF           ;HORIZONTAL FLIP
     660 00009f40     1f51          BTST    B_FLIPV,B1
     661 00009f50     cb17          JRNE    CL1VF           ;VERTICAL FLIP
     662                            
     663                    
     664 00009f60     4d61          MOVE    A11,A1          ;GET WIDTH
     665 00009f70     5e61          MPYU    A3,A1           ;MULT WIDTH X YOFF
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   15

     666 00009f80     4181          ADD     A12,A1          ;ADD IN X OFFSET
     667 00009f90     2461          SLL     3,A1            ;CORRECT FOR BYTE ADDRESSING
     668 00009fa0     4026          ADD     A1,A6           ;ADD TO SOURCE ADDRESS
     669 00009fb0     1903          MOVK    8,A3            ;HINC1
     670 00009fc0     45ab          SUB     A13,A11         ;VINC1=W1-XSCAN
     671 00009fd0     246b          SLL     3,A11           ;CORRECT FOR PIXEL ADDRESSING
     672 00009fe0     c02a          JRUC    CSH
     673                    
     674 00009ff0     1f51  CL1HF   BTST    B_FLIPV,B1      ;VERT FLIP TOO?
     675 0000a000     cb19          JRNE    CL1HVF          ;HORIZ AND VERT FLIP
     676 0000a010     4d61          MOVE    A11,A1          ;GET WIDTH
     677 0000a020     5e61          MPYU    A3,A1           ;MULT WIDTH X Y OFFSET
     678 0000a030     4161          ADD     A11,A1          ;ADD IN WIDTH
     679 0000a040     4581          SUB     A12,A1          ;SUBTRACT X OFFSET
     680 0000a050     1421          DEC     A1              ;-1 MORE
     681 0000a060     2461          SLL     3,A1            ;CORRECT FOR BYTE ADDRESSING
     682 0000a070     4026          ADD     A1,A6
     683 0000a080     09c3          MOVI    -8,A3           ;HINC1
         0000a090     fff8  
     684 0000a0a0     41ab          ADD     A13,A11         ;VINC1=W1+XSCAN
     685 0000a0b0     246b          SLL     3,A11           ;CORRECT FOR PIXEL ADDRESSING
     686 0000a0c0     c01c          JRUC    CSH
     687                    
     688 0000a0d0     b4e1  CL1VF   MOVE    *A7(ISIZEY),A1  ;GET HEIGHT
         0000a0e0     0010  
     689 0000a0f0     4461          SUB     A3,A1           ;SUBTRACT YOFF1
     690 0000a100     1421          DEC     A1
     691 0000a110     5f61          MPYU    A11,A1          ;MULTIPLY BY WIDTH
     692 0000a120     4181          ADD     A12,A1          ;ADD IN X OFFSET
     693 0000a130     2461          SLL     3,A1            ;CORRECT FOR PIXEL ADDRESSING
     694 0000a140     4026          ADD     A1,A6           ;ADD TO SOURCE ADDRESS
     695 0000a150     03ab          NEG     A11             ;-W1
     696 0000a160     45ab          SUB     A13,A11         ;-XSCAN
     697 0000a170     246b          SLL     3,A11           ;CORRECT FOR PIXEL ADDRESSING
     698 0000a180     1903          MOVK    8,A3            ;HINC1
     699 0000a190     c00f          JRUC    CSH
     700                    
     701 0000a1a0     b4e1  CL1HVF  MOVE    *A7(ISIZEY),A1  ;GET HEIGHT
         0000a1b0     0010  
     702 0000a1c0     4461          SUB     A3,A1           ;SUBTRACT YOFF1
     703 0000a1d0     1421          DEC     A1
     704 0000a1e0     5f61          MPYU    A11,A1          ;MULTIPLY BY WIDTH
     705 0000a1f0     4161          ADD     A11,A1          ;ADD IN WIDTH (W1)
     706 0000a200     4581          SUB     A12,A1          ;SUBTRACT XOFF1
     707 0000a210     1421          DEC     A1
     708 0000a220     2461          SLL     3,A1            ;CORRECT FOR PIXEL ADDRESSING
     709 0000a230     4026          ADD     A1,A6           ;ADD TO SOURCE ADDRESS
     710 0000a240     03ab          NEG     A11             ;-W1
     711 0000a250     41ab          ADD     A13,A11         ;+XSCAN
     712 0000a260     246b          SLL     3,A11           ;CORRECT FOR PIXEL ADDRESSING
     713 0000a270     09c3          MOVI    -8,A3           ;HINC1
         0000a280     fff8  
     714                    
     715                    
     716 0000a290     0b4e  CSH     cmpi    080H,a14                ;no scan if xscan, yscan values out of range
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   16

         0000a2a0     ff7f  
     717 0000a2b0     c91f          jrhs    CSFAIL
     718 0000a2c0     0b4d          cmpi    080H,a13
         0000a2d0     ff7f  
     719 0000a2e0     c91c          jrhs    CSFAIL
     720                    
     721 0000a2f0     0360          dint
     722 0000a300     05a0          move    @INTENB,a0
         0000a310 c0000110  
     723 0000a330     0b80          andni   X1E,a0
         0000a340 00000002  
     724 0000a360     0580          move    a0,@INTENB
         0000a370 c0000110  
     725 0000a390     0d60          eint
     726                    
     727 0000a3a0     05a0  csh0    move    @DMACTRL,a0
         0000a3b0 01a00010  
     728 0000a3d0     cefc          jrn     csh0            ;DMA busy?
     729                    
     730                            .if     YUNIT
     731 0000a3e0     0546          setf    6,0,0           ;6 bit field
     732                            .else
     733                            setf    8,0,0           ;8 bit field
     734                            .endif
     735                    
     736 0000a3f0     4da1  csh1    move    a13,a1          ;load line countdown horiz counter
     737                    
     738 0000a400     8480  cshl    move    *a4,a0          ;Check image 0 corresponding non zeroes
     739 0000a410     ca02          jrz     csnxh           ;No hit?
     740                    
     741 0000a420     84c0          move    *a6,a0          ;check image 1
     742 0000a430     cb16          jrnz    pshit           ;Hit?
     743                    
     744 0000a440     4044  csnxh   add     a2,a4           ;Add horiz increments
     745 0000a450     4066          add     a3,a6
     746 0000a460     3ce1          dsjs    a1,cshl         ;Loop horizontal
     747                    
     748 0000a470     40a4          add     a5,a4           ;Add vert increments
     749 0000a480     4166          add     a11,a6
     750 0000a490     3d6e          dsjs    a14,csh1        ;Loop vert
     751                    
     752 0000a4a0     0570          setf    16,1,0          ;Normal field
     753                    
     754 0000a4b0     4dbd  CSFAIL  move    b13,b13
     755 0000a4c0     ca0b          jrz     psnodma         ;Skip DMA restart?
     756 0000a4d0     0360          dint
     757 0000a4e0     05a0          move    @INTENB,a0
         0000a4f0 c0000110  
     758 0000a510     0ba0          ori     X1E,a0
         0000a520 00000002  
     759 0000a540     0580          move    a0,@INTENB
         0000a550 c0000110  
     760 0000a570     0d60          eint
     761 0000a580     0320  psnodma clrc                    ;No hit
     762 0000a590     c00f          jruc    psx             ;Exit
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

collision routines                                                   PAGE   17

     763                    
     764                    
     765 0000a5a0     0570  pshit   setf    16,1,0          ;Normal field
     766 0000a5b0     4dbd          move    b13,b13
     767 0000a5c0     ca0b          jrz     csflags         ;Skip DMA restart?
     768 0000a5d0     0360          dint
     769 0000a5e0     05a0          move    @INTENB,a0
         0000a5f0 c0000110  
     770 0000a610     0ba0          ori     X1E,a0
         0000a620 00000002  
     771 0000a640     0580          move    a0,@INTENB
         0000a650 c0000110  
     772 0000a670     0d60          eint
     773 0000a680     0de0  csflags setc                    ;Hit
     774                    
     775 0000a690     09bf  psx     mmfm    sp,b0,b1
         0000a6a0     0003  
     776 0000a6b0     09af          mmfm    sp,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13
         0000a6c0     3fff  
     777 0000a6d0     0960          rets
     778                    
     779                    
     780                    
     781                    
     782                    
     783                    
     784                    
     785                            .end

 No Errors,  No Warnings
