
	.file	"doink.asm"
	.title	"doink specific game code"
	.width	132
	.option	b,d,l,t
	.mnolist


	.include	"macros.h"
	.include	"jjxm.h"
	.include	"mproc.equ"		;Mproc equates
	.include	"display.equ"		;Display proc equates
	.include	"gsp.equ"		;Gsp asm equates
	.include	"sys.equ"
	.include	"game.equ"
	.include	"plyr.equ"
	.include	"anim.equ"
	.include	"audit.equ"
	.include	"sound.h"
	.include 	"ring.equ"
	.include	"lifebar.h"
	.include	"damage.equ"

	;temp! - 314
	.include	"tmpdebug.h"




	.ref	BLOCK_WOOSH,get_opp_process,calc_line_x,can_pin
	.ref	PSTATUS2,is_final_match,FINAL_PTR
	.ref	DO_REVERSAL,DO_REVERSAL_MESS,FIND_AND_KILL_ENDLESS
	.ref	ADD_IF_SILENT,JUMP_ROPES,CLIMB_ROPES
	.ref	get_powerk_dtime

	.ref	set_getup_time,set_raisearm_bit
	.ref	get_punch_dtime
	.ref	get_rope_x,ck_teammate_pin,raisearm_check
	.ref	inc_getup_time

	.ref	change_anim1,change_anim1a
	.ref	change_anim2,change_anim2a
	.ref	process_ptrs
	.ref	keep_attached
	.ref	get_opp_plyrmode
	.ref	wres_collis_off
	.ref	convert_facing
	.ref	check_secret_moves
	.ref	change_walk_anim
	.ref	set_rotate_anim
	.ref	execute_walk
	.ref	bounce_off_ropes
	.ref	climb_turnbuckle
	.ref	ADD_VOICE,round_award
	.ref	HALT,clear_combo_meter
	.ref	mode_choking
	.ref	master_keep_attached
	.ref	PCNT,init_reduce_bog
	.ref	RNDPER,is_8_on_1
	.ref	current_round,change_wrestler
	.ref	p1rounds,p2rounds,hitonground_tbl,arw_bwait

	;from DCSSOUND.ASM
	.ref	triple_sound

	;from WRESTLE.ASM
	.ref	drone_change_back
	.ref	read_switches
	.ref	BONUS_MESS
	.ref	blocking_off
	.ref	hyper_speed_on
	.ref	in_finish_move,royal_rumble
	.ref	p1rounds,p2rounds
	.if NUM_DOINK_FINISHES
	.ref	dnk_finish1_move
	.if NUM_DOINK_FINISHES > 1
	.ref	dnk_finish2_move
	.endif
	.endif
	.ref	in_finish_move,finish_completed


	.ref	dnk_3_pile_driver_anim
	.ref	start_run_anim

	.ref	dnk_4_earslap_anim
	.ref	dnk_2_earslap_anim
	.ref	dnk_4_slap_anim
	.ref	dnk_2_slap_anim
	.ref	dnk_head_hit_dizzy_anim
	.ref	dnk_knockdwn_anim
	.ref	dnk_4_hammer_anim

	.ref	wres_slave_anim
	.ref	dnk_zip_anim

	.ref	dnk_2_raise_arm_anim,dnk_4_raise_arm_anim
	.ref	dnk_stand2_anim,dnk_stand8_anim
	.ref	dnk_stand4_anim,dnk_stand6_anim
	.ref	dnk_torso2_anim,dnk_torso8_anim
	.ref	dnk_torso4_anim,dnk_torso6_anim

	.ref	dnk_2_to_4_turn_anim,dnk_8_to_6_turn_anim	;stand
	.ref	dnk_4_to_2_turn_anim,dnk_6_to_8_turn_anim
	.ref	dnk_4_to_6_turn_anim,dnk_6_to_4_turn_anim
	.ref	dnk_2_to_8_turn_anim,dnk_8_to_2_turn_anim
	.ref	dnk_4_to_8_turn_anim,dnk_6_to_2_turn_anim
	.ref	dnk_2_to_6_turn_anim,dnk_8_to_4_turn_anim

	.ref	dnk_2_to_4_turn2_anim,dnk_8_to_6_turn2_anim	;torso
	.ref	dnk_4_to_2_turn2_anim,dnk_6_to_8_turn2_anim
	.ref	dnk_4_to_6_turn2_anim,dnk_6_to_4_turn2_anim
	.ref	dnk_2_to_8_turn2_anim,dnk_8_to_2_turn2_anim
	.ref	dnk_4_to_8_turn2_anim,dnk_6_to_2_turn2_anim
	.ref	dnk_2_to_6_turn2_anim,dnk_8_to_4_turn2_anim

	.ref	dnk_walk1_f2_anim,dnk_walk2_f2_anim,dnk_walk4_f2_anim
	.ref	dnk_walk5_f2_anim,dnk_walk6_f2_anim,dnk_walk8_f2_anim

	.ref	dnk_walk1_f4_anim,dnk_walk2_f4_anim,dnk_walk4_f4_anim
	.ref	dnk_walk5_f4_anim,dnk_walk6_f4_anim,dnk_walk8_f4_anim

	.ref	dnk_2_punch_anim,dnk_4_punch_anim
	.ref	dnk_2_buzz_anim,dnk_4_buzz_anim
	.ref	dnk_2_buzz2_anim,dnk_4_buzz2_anim
	.ref	dnk_2_butt_anim,dnk_4_butt_anim
	.REF	dnk_combo_uppercut_to_head_anim
	.ref	dnk_4_combo_kick_anim
	.REF	CHECK_COMBO_GO

	.ref	dnk_2_kick_anim,dnk_4_kick_anim
	.ref	dnk_2_spin_kick_anim,dnk_4_spin_kick_anim
	.ref	dnk_2_knee_anim,dnk_4_knee_anim

	.ref	dnk_2_box_anim,dnk_4_box_anim

	.ref	dnk_run_anim,dnk_run2_anim

	.ref	dnk_4_blbowdrop_anim

	.ref	dnk_2_hair_pickup_anim,dnk_4_hair_pickup_anim

 	.ref	dnk_2_lbowdrop_anim,dnk_4_lbowdrop_anim
	.ref	dnk_2_grabfling_anim
	.ref	dnk_4_grabfling_anim

	.ref	dnk_heldoh_anim

	.ref	dnk_diveofftb_anim

	.ref	dnk_fly_cline_anim
	.ref	dnk_flying_kick_anim

	.ref	dnk_4_head_hit_anim,dnk_head_hit3_anim
	.ref	dnk_2_head_hit_anim,dnk_head_hit2_anim
	.ref	dnk_fall_back_anim
	.ref	dnk_4_losebal_dizzy_anim

	.ref	dnk_hitonground_anim
	.ref	dnk_4_stomp_anim,dnk_2_stomp_anim
	.ref	dnk_4_bstomp_anim

	.ref	dnk_climb_up_anim,dnk_climb_down_anim
	.ref	dnk_4_block_anim
	.ref	dnk_2_hiptoss_anim,dnk_4_hiptoss_anim
	.ref	dnk_2_hiptoss2_anim,dnk_4_hiptoss2_anim
	.ref	dnk_4_push_anim
	.ref	dnk_4_bigboot_anim,dnk_2_bigboot_anim
	.ref	dnk_4_losebal_anim
	.ref	dnk_dizzy_anim
	.ref	dnk_2_pin_anim
	.ref	dnk_4_pin_anim

	.ref	dnk_belly_anim
	.ref	ck_ignore  		;Ignore button press?


	.ref	dnk_3_knee_to_head_anim
	.ref	dnk_3_knees_to_head_anim
	.ref	dnk_uppercut_to_head_anim
	.ref	dnk_uppercuts_to_head_anim
	.ref	dnk_get_buzz_anim

	.ref	dnk_3_head_hold2_anim
	.ref	dnk_3_head_hold_anim

	.ref	dnk_2_butts_anim,dnk_4_butts_anim
	.ref	dnk_3_head_held_stand_anim
	.ref	dnk_3_head_slam_anim
	.ref	dnk_4_knee_fall_anim




doink_secret_moves


	.long	mziccharge_buzz
	.long	mzicgrab_fling
	.long	mzichip_toss
	.long	mzicgrab_fling2
	.long	mzichip_toss2
	.long	mzicearslap
	.long	mzichammer
	.long	mzicneck_grab
	.long	mzicboxing_pnch
	.long	0



 SUBR	dnk_smove_table
	.long	dnk_charge_flykick
	.long	dnk_hdhold_slam
	.long	dnk_hdhold_combo1
	.long	dnk_hdhold_pile
	.long	dnk_hdhold_combo2
	.long	dnk_hdhold_buzz
	.long	dnk_grab_toss_air
	.long	std_walk_fast
	.long	std_taunt
	.if NUM_DOINK_FINISHES
	.long	dnk_finish_move1
	.endif
	.if NUM_DOINK_FINISHES > 1
	.long	dnk_finish_move2
	.endif
	.long	0


mziccharge_buzz
	move	*a13(BUT_VAL_UP),a0
	btst	PLAYER_PUNCH_BIT,a0
	jrz	mzicno_punch



	move	*a13(PLYRNUM),a0
	calla	get_punch_dtime
	cmpi	100,a0			;> min?
	jrlt	mzicno_punch

	callr	mzicscrt_buzz
	setc
	rets

mzicno_punch
	clrc
	rets


mzicscrt_buzz

	move	*a13(PLYRMODE),a0
	cmpi	MODE_HEADHELD,a0
	jrz	mzicout
	cmpi	MODE_HEADHOLD,a0
	jrz	mzicout

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	mzicout

	calla	get_opp_plyrmode
	cmpi	MODE_DEAD,a0
	jrz	mzicout

	move	*a13(PLYRMODE),a0
	cmpi	MODE_RUNNING,a0
	jrz	mzicleapbuzz

	move	*a13(STICK_VAL_CUR),a0
	move	*a13(NEW_FACING_DIR),a1
	andi	0ch,a1
	cmp	a0,a1
	jrnz	mzicnorm

mzicleapbuzz
	WRSND	W_DOINK,HDBUTT_T1
	FACE24	dnk,buzz2_anim
	calla	change_anim1a
	rets
mzicnorm
	WRSND	W_DOINK,HDBUTT_T1
	FACE24	dnk,buzz_anim
	calla	change_anim1a
	rets

mzicboxing_pnch
	.word	B_PUNCH,		J_ALL
	.word	B_PUNCH,		J_ALL
	.word	B_PUNCH,		J_ALL
	.word	B_PUNCH,		J_ALL
	.word	B_PUNCH,		J_ALL
	.word	B_PUNCH,		J_ALL
	.word	B_PUNCH,		J_ALL
	.word	8000h | 60		;max
	.long	scrt_glove

scrt_glove
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	mzicout

	calla	get_opp_plyrmode
	cmpi	MODE_ONGROUND,a0
	jrz	mzicout
	cmpi	MODE_DEAD,a0
	jrz	mzicout
	cmpi	MODE_HEADHELD,a0
	jrz	mzicout

	MOVE	*A13(COMBO_COUNT),A0
	JRNZ	mzicout

	FACE24	dnk,box_anim
	calla	change_anim1a
	WRSND	W_DOINK,SPUNCH_T1,SPUNCH_T2

	rets

mzichammer
	.word	B_SKICK,			J_ALL
	.word	J_TOWARD,		J_REAL_LR
	.word	J_TOWARD,		J_REAL_LR
	.word	8000h | 32 		;max
	.long	scrt_hammer

scrt_hammer
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	mzicout

	move	*a13(PLYRMODE),a0
	cmpi	MODE_ONTURNBKL,a0
	jrz	mzicout

	movi	dnk_4_hammer_anim,a0
	calla	change_anim1a

	WRSND	W_DOINK,HDBUTT_T2

	rets


mzicearslap
	.word	B_PUNCH,		J_ALL
	.word	J_TOWARD,		J_REAL_LR
	.word	J_DOWN_TOWARD,		J_REAL_LR
	.word	J_DOWN,			J_REAL_LR
	.word	8000h | 50 		;max
	.long	mzicscrt_earslap

mzicscrt_earslap
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	mzicout

	move	*a13(PLYRMODE),a0
	cmpi	MODE_ONTURNBKL,a0
	jrz	mzicout

	calla	get_opp_plyrmode
	cmpi	MODE_DEAD,a0
	jrz	mzicout
	cmpi	MODE_HEADHELD,a0
	jrz	mzicout

	movi	dnk_4_earslap_anim,a0
	calla	change_anim1a

	WRSND	W_DOINK,FLYKICK_T1,FLYKICK_T2

	rets


mzicneck_grab
	.word	B_SPUNCH,		J_ALL
	.word	J_TOWARD,		J_REAL_LR
	.word	J_TOWARD,		J_REAL_LR
	.word	8000h | 32		;max
	.long	mzicscrt_neck

mzicscrt_neck
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	mzicout

	calla	get_opp_plyrmode
	cmpi	MODE_ONGROUND,a0
	jrz	mzicout
	cmpi	MODE_DEAD,a0
	jrz	mzicout
	cmpi	MODE_HEADHELD,a0
	jrz	mzicout

	move	*a13(LAST_HEADHOLD),a14,L
	move	@PCNT,a0,L
	sub	a14,a0
	cmpi	2*60,a0
	jrge	mzicok2

	.ref	dnk_3_fake_hold_anim
	movi	dnk_3_fake_hold_anim,a0
	calla	change_anim1a
	rets

mzicok2
	WRSND	W_DOINK,GRABFLING_T1,PUNCH_T2

	move	*a13(CLOSEST_XDIST),a1
	cmpi	90,a1
	jrgt	mzicstd_grab

	movi	dnk_3_head_hold2_anim,a0
	calla	change_anim1a
	rets

mzicstd_grab
	movi	dnk_3_head_hold_anim,a0
	calla	change_anim1a
	rets


mzicgrab_fling2
	.word	B_SPUNCH | J_AWAY,	J_REAL_LR | J_UP | J_DOWN
	.word	8000h | 10		;max
	.long	mzicscrt_grabfling2

mzichip_toss2
	.word	B_PUNCH | J_AWAY,	J_REAL_LR | J_UP | J_DOWN
	.word	8000h | 10		;max
	.long	mzicscrt_grabfling2

mzicscrt_grabfling2
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	mzicout

	calla	get_opp_plyrmode
	cmpi	MODE_BOUNCING,a0
	jrz	mzicyes
	cmpi	MODE_RUNNING,a0
	jrz	mzicyes
	cmpi	MODE_HEADHELD,a0
	jrz	mzicck2
	rets


mzicgrab_fling

	.word	B_SPUNCH,		J_ALL
	.word	J_AWAY,		J_REAL_LR
	.word	J_AWAY,		J_REAL_LR
	.word	8000h | 32		;max
	.long	mzicscrt_grabfling

mzicscrt_grabfling


	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	mzicout

	calla	get_opp_plyrmode
	cmpi	MODE_BOUNCING,a0
	jrz	mzicyes
	cmpi	MODE_RUNNING,a0
	jrnz	mzicnope
mzicyes
	FACE24	dnk,hiptoss_anim
	calla	change_anim1a

	WRSND	W_DOINK,HIPTOSS_T1,PUNCH_T2
	rets

mzicnope
	calla	get_opp_plyrmode
	cmpi	MODE_HEADHELD,a0
	jrz	mzicout
	cmpi	MODE_ONGROUND,a0
	jrz	mzicout
	cmpi	MODE_DEAD,a0
	jrz	mzicout


	FACE24	dnk,grabfling_anim
	calla	change_anim1a

	WRSND	W_DOINK,GRABFLING_T1,PUNCH_T2
	rets


mzichip_toss

	.word	B_PUNCH,		J_ALL
	.word	J_AWAY,		J_REAL_LR
	.word	J_AWAY,		J_REAL_LR
	.word	8000h | 32		;max
	.long	mzicscrt_hiptoss

mzicscrt_hiptoss
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	mzicout

	calla	get_opp_plyrmode
	cmpi	MODE_ONGROUND,a0
	jrz	mzicout
	cmpi	MODE_DEAD,a0
	jrz	mzicout
	cmpi	MODE_HEADHELD,a0
	jrz	mzicck2
	cmpi	MODE_INAIR,a0
	jrz	mzicdoit
	cmpi	MODE_INAIR2,a0
	jrz	mzicdoit

	move	*a13(CLOSEST_DIST),a0
	cmpi	70h,a0
	jrgt	mzicout

mzicdoit
	FACE24	dnk,hiptoss_anim
	calla	change_anim1a

	WRSND	W_DOINK,HIPTOSS_T1,PUNCH_T2

mzicout	rets

mzicck2
	move	*a13(USR_VAR2),a0
	jrnz	mzicdoit
	rets	

	.if NUM_DOINK_FINISHES
 SUBRP	dnk_finish_move1

wctbTIMEOUT	.equ	TSEC

wctbend_wait
	SLEEP		TSEC/4
	move		@p1rounds,a0			; Get player 1 rounds
	move		@p2rounds,a1			; Get player 2 rounds
	or		a1,a0				; Put em together
	cmpi		2,a0				; Anybody got 2?
	jrlt		wctbend_wait			; br = no

wctbreset
	clr		a11
	move		a11,@in_finish_move
	SLEEPK		1
	WAITSWITCH_DWN	J_UP,0,wctbreset
	movi		wctbTIMEOUT,a11
	move		a11,@in_finish_move
	WAITSWITCH_DWN	J_DOWN,0,wctbreset
	WAITSWITCH_DWN	J_TOWARD,J_DOWN|J_UP,wctbreset
	WAITSWITCH_DWN	J_TOWARD,J_DOWN|J_UP,wctbreset
	WAITSWITCH_DWN	B_PUNCH,J_ALL,wctbreset

	movi		dnk_finish1_move,a0
	move		a0,*a8(SPECIAL_MOVE_ADDR),L
	DIE
	.endif
	

	.if NUM_DOINK_FINISHES > 1
 SUBRP	dnk_finish_move2

ytfbTIMEOUT	.equ	TSEC

ytfbend_wait
	SLEEP		TSEC/4
	move		@p1rounds,a0			; Get player 1 rounds
	move		@p2rounds,a1			; Get player 2 rounds
	or		a1,a0				; Put em together
	cmpi		2,a0				; Anybody got 2?
	jrlt		ytfbend_wait			; br = no

ytfbreset
	clr		a11
	move		a11,@in_finish_move
	SLEEPK		1
	WAITSWITCH_DWN	J_UP,0,ytfbreset
	movi		ytfbTIMEOUT,a11
	move		a11,@in_finish_move
	WAITSWITCH_DWN	J_UP,0,ytfbreset
	WAITSWITCH_DWN	J_RIGHT,J_UP,ytfbreset
	WAITSWITCH_DWN	J_RIGHT,J_UP,ytfbreset
	WAITSWITCH_DWN	B_SPUNCH,J_ALL,ytfbreset

	movi		dnk_finish2_move,a0
	move		a0,*a8(SPECIAL_MOVE_ADDR),L
	DIE
	.endif


dnk_hdhold_slam

wyjvTIMEOUT	.equ	60

wyjvlp0
	SLEEPK	1
wyjvlp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	wyjvcont
	cmpi	MODE_HEADHELD,a0
	jrnz	wyjvlp0

wyjvcont
	clr	a11


	WAITSWITCH_DWN	J_DOWN,0,wyjvlp

	movi	wyjvTIMEOUT,a11

	WAITSWITCH_DWN	J_DOWN,0,wyjvlp
	WAITSWITCH_DWN	B_SKICK,J_ALL,wyjvlp
wyjvcontz
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	wyjvslam
	cmpi	MODE_HEADHELD,a0
	jrnz	wyjvlp0
	move	*a8(I_WILL_DIE),A14
	jrnz	wyjvlp0


	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	wyjvlp0				;ignore

	CALLA	DO_REVERSAL
	CALLA	DO_REVERSAL_MESS

	;target WHOHITME -- don't hit anyone else
	SMRTTGT	a8,WHOHITME

	;immobilize WHOHITME
	move	*a8(WHOHITME),a0,L
	jruc	wyjvis_reversal

wyjvslam
	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	wyjvlp0				;ignore

	movk	1,a10
	CREATE	MESSAGE_PID,BONUS_MESS

	;target WHOIHIT -- don't hit anyone else
	SMRTTGT	a8,WHOIHIT

	;immobilize WHOIHIT
	move	*a8(WHOIHIT),a0,L

wyjvis_reversal
	movk	15,a14
	move	a14,*a0(IMMOBILIZE_TIME)

	CALLA	FIND_AND_KILL_ENDLESS
	WRSND	W_DOINK,FLYKICK_T1,FLYKICK_T2

	movi	dnk_3_head_slam_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	SLEEPK	20

	jruc	wyjvlp

dnk_hdhold_pile

wzvqTIMEOUT	.equ	60

wzvqlp0
	SLEEPK	1
wzvqlp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	wzvqcont
	cmpi	MODE_HEADHELD,a0
	jrnz	wzvqlp0

wzvqcont
	clr	a11

	WAITSWITCH_DWN	J_TOWARD,0,wzvqlp

	movi	wzvqTIMEOUT,a11

	WAITSWITCH_DWN	J_TOWARD,0,wzvqlp
	WAITSWITCH_DWN	B_SPUNCH,J_ALL,wzvqlp
wzvqcontz	
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	wzvqslam
	cmpi	MODE_HEADHELD,a0
	jrnz	wzvqlp0
	move	*a8(I_WILL_DIE),A14
	jrnz	wzvqlp0

	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	wzvqlp0				;ignore

	CALLA	DO_REVERSAL
	CALLA	DO_REVERSAL_MESS

	;target WHOHITME -- don't hit anyone else
	SMRTTGT	a8,WHOHITME

	;immobilize WHOHITME
	move	*a8(WHOHITME),a0,L
	jruc	wzvqis_reversal

wzvqslam
	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	wzvqlp0				;ignore

	movk	7,A10			;Pile driver
	CREATE	MESSAGE_PID,BONUS_MESS

	;target WHOIHIT -- don't hit anyone else
	SMRTTGT	a8,WHOIHIT

	;immobilize WHOIHIT
	move	*a8(WHOIHIT),a0,L

wzvqis_reversal
	movk	15,a14
	move	a14,*a0(IMMOBILIZE_TIME)

	CALLA	FIND_AND_KILL_ENDLESS
	WRSND	W_DOINK,FLYKICK_T1,FLYKICK_T2
	movi	dnk_3_pile_driver_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	SLEEPK	20

	jruc	wzvqlp


dnk_hdhold_combo1

jgjbTIMEOUT	.equ	60

jgjblp0
	SLEEPK	1
jgjblp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrnz	jgjblp0
	calla	CHECK_COMBO_GO
	jrlt	jgjblp0

	clr	a11

	WAITSWITCH_DWN	J_TOWARD,0,jgjblp

	movi	jgjbTIMEOUT,a11

	WAITSWITCH_DWN	J_TOWARD,0,jgjblp
	WAITSWITCH_DWN	B_SPUNCH,J_ALL,jgjblp

	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	jgjbslam
	cmpi	MODE_HEADHELD,a0
	jrnz	jgjblp0


jgjbslam
	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	jgjblp0				;ignore


	;target WHOIHIT
	SMRTTGT	a8,WHOIHIT

	CALLA	FIND_AND_KILL_ENDLESS

	movi	dnk_combo_uppercut_to_head_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	SLEEPK	20

	jruc	jgjblp


dnk_hdhold_combo2

rlucTIMEOUT	.equ	60

rluclp0
	SLEEPK	1
rluclp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrnz	rluclp0
	calla	CHECK_COMBO_GO
	jrlt	rluclp0


	clr	a11

	WAITSWITCH_DWN	J_TOWARD,0,rluclp

	movi	rlucTIMEOUT,a11

	WAITSWITCH_DWN	J_TOWARD,0,rluclp
	WAITSWITCH_DWN	B_SKICK,J_ALL,rluclp

	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	rlucslam
	cmpi	MODE_HEADHELD,a0
	jrnz	rluclp0


rlucslam
	move	*a8(IMMOBILIZE_TIME),a14
	jrnz	rluclp0				;ignore

	CALLA	FIND_AND_KILL_ENDLESS

	;target WHOIHIT
	SMRTTGT	a8,WHOIHIT

	movi	dnk_4_combo_kick_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	SLEEPK	20

	jruc	rluclp


dnk_grab_toss_air

yifpTIMEOUT	.equ	40

yifplp0
	SLEEPK	1
yifplp
	clr	a11

	WAITSWITCH_DWN	J_AWAY,0,yifplp

	movi	yifpTIMEOUT,a11

	WAITSWITCH_DWN	J_AWAY,0,yifplp
	WAITSWITCH_DWN	B_PUNCH,J_ALL,yifplp

	move	*a8(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	yifplp

	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jreq	yifplp0

	SWAP	a8,a13
	calla	get_opp_plyrmode
	SWAP	a8,a13
	cmpi	MODE_ONGROUND,a0
	jrz	yifplp
	cmpi	MODE_DEAD,a0
	jrz	yifplp
	cmpi	MODE_INAIR,a0
	jrz	yifpdoit2
	cmpi	MODE_INAIR2,a0
	jrz	yifpdoit2

	move	*a8(CLOSEST_NUM),a0
	X32	a0
	addi	process_ptrs,a0
	move	*a0,a0,L
	move	*a0(ATTACK_TYPE),a0
	cmpi	AT_LEAPING,a0
	jrz	yifpdoit2

	move	*a8(CLOSEST_DIST),a0
	cmpi	6ch,a0
	jrgt	yifplp

	FACE24	dnk,hiptoss_anim
	move	a0,*a8(SPECIAL_MOVE_ADDR),L

	WRSND	W_DOINK,GRABFLING_T1,PUNCH_T2

	SLEEPK	20
	jruc	yifplp

yifpdoit2	FACE24	dnk,hiptoss2_anim
	move	a0,*a8(SPECIAL_MOVE_ADDR),L

	WRSND	W_DOINK,GRABFLING_T1,PUNCH_T2

	SLEEPK	20

	jruc	yifplp


 SUBR	std_walk_fast

ojvpTIMEOUT	.equ	61

ojvplp0
	SLEEPK	1
ojvplp
	move	*a8(WALK_FAST),a0
	jrnz	ojvplp0
	move	*a8(PLYRMODE),a0
	cmpi	MODE_NORMAL,a0
	jrnz	ojvplp0

	clr	a11

	WAITSWITCH_DWN	J_AWAY,0,ojvplp

	movi	ojvpTIMEOUT,a11

	WAITSWITCH_DWN	J_DOWN_AWAY,0,ojvplp
	WAITSWITCH_DWN	J_DOWN,0,ojvplp
	WAITSWITCH_DWN	J_DOWN_TOWARD,0,ojvplp
	WAITSWITCH_DWN	J_TOWARD,0,ojvplp
	WAITSWITCH_DWN	J_UP_TOWARD,0,ojvplp
	WAITSWITCH_DWN	J_UP,0,ojvplp
	WAITSWITCH_DWN	J_UP_AWAY,0,ojvplp


	move	*a8(PLYRMODE),a0
	cmpi	MODE_NORMAL,a0
	jrnz	ojvplp0

	movi	15*60,a0
	move	a0,*a8(WALK_FAST)

	move	*a8(WRESTLERNUM),a0
	subk	6,a0
	jrnz	ojvpnot_dnk
	movi	30000h,a0
	move	a0,*a8(OBJ_YVEL),L

	movi	211h,a0
	jruc	ojvpgo

ojvpnot_dnk
	movi	17eh,a0
ojvpgo	calla	ADD_VOICE

	movi	0101h,a14
	move	a14,*a8(OBJ_CONST)
	move	*a8(OBJ_CONTROL),a14
	andni	01111b,a14
	ori	M_CONNON,a14
	move	a14,*a8(OBJ_CONTROL)

	SLEEPK	3
 
	move	*a8(OBJ_CONTROL),a14
	andni	01111b,a14
	ori	DMAWNZ,a14
	move	a14,*a8(OBJ_CONTROL)

	SLEEPK	3

	movi	0101h,a14
	move	a14,*a8(OBJ_CONST)
	move	*a8(OBJ_CONTROL),a14
	andni	01111b,a14
	ori	M_CONNON,a14
	move	a14,*a8(OBJ_CONTROL)

	SLEEPK	3

	move	*a8(OBJ_CONTROL),a14
	andni	01111b,a14
	ori	DMAWNZ,a14
	move	a14,*a8(OBJ_CONTROL)

	SLEEP	30

	move	*a8(WRESTLERNUM),a0
	subk	6,a0
	jrnz	ojvptag

	movi	0b2h,a0			;Honk
	calla	triple_sound

	SLEEPK	18

	movi	0b2h,a0			;Honk
	calla	triple_sound

	SLEEPK	18

	movi	0b2h,a0			;Honk
	calla	triple_sound

ojvptag	SLEEPK	5
	move	*a8(WALK_FAST),a0
	jrnz	ojvptag

	movi	0101h,a14
	move	a14,*a8(OBJ_CONST)
	move	*a8(OBJ_CONTROL),a14
	andni	01111b,a14
	ori	M_CONNON,a14
	move	a14,*a8(OBJ_CONTROL)

	SLEEPK	3

	move	*a8(OBJ_CONTROL),a14
	andni	01111b,a14
	ori	DMAWNZ,a14
	move	a14,*a8(OBJ_CONTROL)

	DIE

 SUBR	std_taunt

	move	*a8(PLYR_TYPE),a14
	janz	SUCIDE

zehjTIMEOUT	.equ	61

zehjlp0
	SLEEPK	1
zehjlp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_BLOCK,a0
	jrnz	zehjlp0

	clr	a11

	WAITSWITCH_DWN	J_UP,B_BLOCK,zehjlp

	move	*a8(BUT_VAL_CUR),a14
	btst	PLAYER_BLOCK_BIT,a14
	jrz	zehjlp0

	movi	zehjTIMEOUT,a11

	WAITSWITCH_DWN	J_UP_TOWARD,B_BLOCK,zehjlp
	WAITSWITCH_DWN	J_TOWARD,B_BLOCK,zehjlp
	WAITSWITCH_DWN	J_DOWN_TOWARD,B_BLOCK,zehjlp
	WAITSWITCH_DWN	J_DOWN,B_BLOCK,zehjlp
	WAITSWITCH_DWN	J_DOWN_AWAY,B_BLOCK,zehjlp
	WAITSWITCH_DWN	J_AWAY,B_BLOCK,zehjlp
	WAITSWITCH_DWN	J_UP_AWAY,B_BLOCK,zehjlp

	move	*a8(BUT_VAL_CUR),a14
	btst	PLAYER_BLOCK_BIT,a14
	jrz	zehjlp0

	move	*a8(PLYRMODE),a0
	cmpi	MODE_BLOCK,a0
	jrne	zehjlp0

	;no taunts if all opponents are dead.
	SWAP	a8,a13
	calla	get_opp_plyrmode
	SWAP	a8,a13
	cmpi	MODE_DEAD,a0
	jreq	zehjlp0

	SWAP	a8,a13
	FACETBL	zehjtaunt_tbl
	calla	change_anim1a
	SWAP	a8,a13

	movi	8000h+12*60,a0
	move	a0,*a8(RISK)

	DIE


zehjtaunt_tbl
	REFLONG	hrt_4_taunt_anim	;0 Bret Hart
	REFLONG	rzr_4_taunt_anim	;1 Razor Ramon
	REFLONG	und_4_taunt_anim	;2 Undertaker
	REFLONG	yok_4_taunt_anim	;3 Yokozuna
	REFLONG	shn_4_taunt_anim	;4 Shawn Michaels
	REFLONG	bam_4_taunt_anim	;5 Bam Bam
	REFLONG	dnk_4_taunt_anim	;6 Doink
	.long	0		   	;7 spare
	REFLONG	lex_4_taunt_anim	;8 Lex Luger


omixCHARGE_TIME	.equ	SM_USRW1	;

dnk_charge_flykick

omixstart_over
	clr	a14
	move	a14,*a13(omixCHARGE_TIME),W
omixloop1
	SLEEPK	1

	move	*a13(omixCHARGE_TIME),a14,W
	inc	a14
	move	a14,*a13(omixCHARGE_TIME),W

	move	*a8(BUT_VAL_CUR),a0
	btst	PLAYER_SKICK_BIT,a0
	jrz	omixp1

	jruc	omixloop1

omixp1

	move	*a13(omixCHARGE_TIME),a14
	cmpi	100,a14
	jrlt	omixstart_over

	move	*a8(GETUP_TIME),a0
	jrnz	omixstart_over
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHELD,a0
	jrz	omixstart_over
	cmpi	MODE_HEADHOLD,a0
	jrz	omixstart_over
	cmpi	MODE_ONGROUND,a0
	jrz	omixstart_over
	cmpi	MODE_DEAD,a0
	jrz	omixstart_over

	move	*a8(CLOSEST_NUM),a0
	X32	a0
	addi	process_ptrs,a0
	move	*a0,a0,L
	move	*a0(PLYRMODE),a0
	cmpi	MODE_ONGROUND,a0
	jrz	omixstart_over
	cmpi	MODE_DEAD,a0
	jrz	omixstart_over

	move	*a8(ANIMODE),a14
	btst	MODE_UNINT_BIT,a14
	jrnz	omixstart_over

	.ref	ck_ignore_a8
	calla	ck_ignore_a8
	jrc	omixstart_over

	movi	dnk_flying_kick_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L
	WRSND	W_DOINK,FLYKICK_T1,FLYKICK_T2

	SETMODE	INAIR

	jruc	omixstart_over
	


dnk_hdhold_buzz

isgbTIMEOUT	.equ	60

isgblp0
	SLEEPK	1
isgblp
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrz	isgbcont
	cmpi	MODE_HEADHELD,a0
	jrnz	isgblp0
isgbcont
	clr	a11

	WAITSWITCH_DWN	J_DOWN,0,isgblp

	movi	isgbTIMEOUT,a11

	WAITSWITCH_DWN	J_TOWARD,J_DOWN|J_UP,isgblp
	WAITSWITCH_DWN	B_PUNCH,J_ALL,isgblp
	
	move	*a8(PLYRMODE),a0
	cmpi	MODE_HEADHOLD,a0
	jrnz	isgblp0

	CALLA	FIND_AND_KILL_ENDLESS
	movi	dnk_4_buzz_anim,a14
	move	a14,*a8(SPECIAL_MOVE_ADDR),L

	WRSND	W_DOINK,HDBUTT_T1

	SLEEP	120

	jruc	isgblp


 SUBR	doink_ani_init

	move	*a13(FACING_DIR),a0
	btst	PLAYER_RIGHT_BIT,a0
	jrnz	hlcqp1
	movi	dnk_stand4_anim,a0
	calla	change_anim1a

	movi	dnk_torso4_anim,a0
	calla	change_anim2a

	PUSH	a10
	move	a13,a10
	CREATE	TAUNT_PID,do_taunt
	PULL	a10

	rets

hlcqp1
	movi	dnk_stand2_anim,a0
	calla	change_anim1a

	movi	dnk_torso2_anim,a0
	calla	change_anim2a

	rets

 SUBR	do_taunt

	move	@HALT,a0
	jaz	SUCIDE

	PUSH	a10
	calla	read_switches
	PULL	a10

	move	*a13(PLYR_TYPE),a0
	jrnz	hlcqdrone
	move	*a10(STICK_VAL_CUR),a0
	btst	MOVE_UP_BIT,a0
	jaz	SUCIDE
	move	*a10(BUT_VAL_CUR),a0
	btst	PLAYER_BLOCK_BIT,a0
	jaz	SUCIDE

hlcqdo_taunt
	PUSH	a13
	move	a10,a13
	move	*a13(WRESTLERNUM),a0
	X32	a0
	addi	hlcqtaunt_t,a0
	move	*a0,a0,L

	calla	change_anim1a
	PULL	a13

	DIE

hlcqdrone
	movi	250,a0
	calla	RNDPER
	jrhi	hlcqdo_taunt

      	DIE

hlcqtaunt_t
	REFLONG	hrt_4_taunt_anim			;0 Bret Hart
	REFLONG	rzr_4_taunt_anim			;1 Razor Ramon
	REFLONG	und_4_taunt_anim			;2 Undertaker
	REFLONG	yok_4_taunt_anim			;3 Yokozuna
	REFLONG	shn_4_taunt_anim			;4 Shawn Michaels
	REFLONG	bam_4_taunt_anim			;5 Bam Bam
	REFLONG	dnk_4_taunt_anim			;6 Doink
	.long	0		  			;7 spare
	REFLONG	lex_4_taunt_anim			;8 Lex Luger
	.long	0		  			;9 Referee


 SUBR	move_doink


	movi	doink_secret_moves,a11
	calla	check_secret_moves

	move	*a13(PLYRMODE),a0
	sll	5,a0			;x 32
	addi	iazlmode_table,a0
	move	*a0,a0,L
	call	a0
	rets

iazlmode_table
	.long	mode_normal		;0
	.long	mode_running		;1
	.long	mode_inair		;2
	.long	mode_attached		;3
	.long	mode_onground		;4
	.long	mode_bouncing		;5
	.long	mode_onturnbkl		;6
	.long	mode_block		;7
	.long	mode_dizzy		;8
	.long	mode_dead		;9
	.long	mode_oppoverhead	;10
	.long	mode_climbturnbkl	;11
	.long	mode_waitanim		;12
	.long	mode_grapple		;13
	.long	mode_master		;14
	.long	mode_slave		;15
	.long	mode_headhold		;16
	.long	mode_puppet2
	.long	mode_normal	;18
	.long	mode_headheld		;19
	.long	mode_puppet		;20
	.long	mode_inair2		;21
	.long	mode_normal	;22
	.long	mode_normal	;23
	.long	mode_chokehold		;24
	.long	mode_choking		;25


mode_normal

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	tabvno_interrupt

	move	*a13(I_WILL_DIE),a0
	jrz	tabvnope
	move	*a13(IMMOBILIZE_TIME),a0
	jrnz	tabvnope
	movi	dnk_fall_back_anim,a0
	calla	change_anim1a

	movi	-10,a0
	move	*a13(PLYRNUM),a1
	calla	adjust_health

	SETMODE	DEAD

	clr	a0
	move	a0,*a13(I_WILL_DIE)

	rets

tabvnope
	calla	get_opp_plyrmode
	cmpi	MODE_DEAD,a0
	jrne	tabvopp_not_dead

	;if closest is a zombie, skip pin section.
	calla	get_opp_process
	move	*a0(STATUS_FLAGS),a14
	btst	B_ZOMBIE,a14
	jrnz	tabvopp_not_dead

	;all opponents are dead.  Check for pins/raisearms

	;if we're attached to someone, don't interrupt it.
	move	*a13(ATTACH_PROC),a1,L
	jrz	tabvno_attch
	move	*a1(ATTACH_PROC),a2,L
	cmp	a2,a13
	jreq	tabvno_pin_yet
tabvno_attch

	;if a teammate has pinned, raise yer arm.
	calla	ck_teammate_pin	
	jrc	tabvraisearm

	;nobody has pinned.  if we're outside or all our opponents are
	; outside, do a raisearm.
	calla	raisearm_check
	jrc	tabvraisearm

	;we're inside with a pinnable opponent.  any button pins.
	move	*a13(BUT_VAL_CUR),a0
	jrz	tabvno_pin_yet

	;we have a press -- make sure opponent is on the ground

	calla	can_pin
	jrnc	tabvopp_notgnd

	;opponent is on the ground.  pin him.
	FACE24	dnk,pin_anim
	calla	change_anim1a

	;set the 'I did a pin' flag.
	move	*a13(STATUS_FLAGS),a14
	ori	M_DID_PIN,a14
	move	a14,*a13(STATUS_FLAGS)

	;if we're a temp drone for auto-pin purposes, turn back into
	; a normal player here.
	calla	drone_change_back

	rets

tabvraisearm
	FACE24	dnk,raise_arm_anim
	calla	change_anim1a
	calla	set_raisearm_bit

	;if we're a temp drone for auto-pin purposes, turn back into
	; a normal player here.
	calla	drone_change_back

	rets

tabvtoo_far_to_pin
tabvopp_notgnd
tabvopp_not_dead
tabvno_pin_yet

	move	*a13(IMMOBILIZE_TIME),a0
	jrnz	tabvimmobilized

	move	*a13(BUT_VAL_CUR),a0
	btst	PLAYER_BLOCK_BIT,a0	;maybe have to action tables?
	jrz	tabvnblk			;1 for down transitions
	callr	tabvblock			;& 1 for current buttons
	jrc	tabvnblk
	clr	a0
	move	a0,*a13(ATTACK_TYPE)
	rets
tabvnblk
	move	*a13(BUT_VAL_CUR),a0
	andi	011111b,a0
	cmpi	PLAYER_PUNCH_VAL|PLAYER_KICK_VAL,a0
	jrz	tabvpunchkick

	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	X32	a0
	addi	tabvaction_table,a0
	move	*a0,a0,L
	call	a0

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	tabvno_interrupt


	move	*a13(STICK_VAL_CUR),a0
	move	a0,*a13(MOVE_DIR)
	calla	climb_turnbuckle
	jrnc	tabvno_climb
	move	*a13(WRESTLERNUM),A5
	MOVI	CLIMB_ROPES,A2
	MOVI	1000,A0
	CALLA	ADD_IF_SILENT
	rets

tabvimmobilized
	clr	a14
	move	a14,*a13(MOVE_DIR)
tabvno_climb
	calla	execute_walk

tabvno_interrupt
	rets

tabvaction_table
	.long	tabvz,tabvpunch,tabvblock,tabvblock			;0-3
	.long	tabvsuper_punch,tabvsuper_punch,tabvblock,tabvblock	;4-7
	.long	tabvkick,tabvpunchkick,tabvblock,tabvblock		;8-11
	.long	tabvsuper_punch,tabvpunchkick,tabvblock,tabvblock	;12-15
	.long	tabvsuper_kick,tabvsuper_kick,tabvblock,tabvblock	;16-19
	.long	tabvgraboh,tabvgraboh,tabvblock,tabvblock		;20-23
	.long	tabvsuper_kick,tabvpunchkick,tabvblock,tabvblock	;24-27
	.long	tabvgraboh,tabvgraboh,tabvblock,tabvblock		;28-31

tabvz		;0

	rets


tabvpunch		;1
	JJXM_INIT
	JJXM	NORMAL,		 50, 45,tabvpunch_hdbutt,tabvpunch_punch	;0
	JJXM	RUNNING,	 50, 45,tabvpunch_hdbutt,tabvpunch_punch	;1
	JJXM	INAIR,		 50, 45,tabvpunch_hdbutt,tabvpunch_punch	;2
	JJXM	ATTACHED,	 50, 45,tabvpunch_hdbutt,tabvpunch_punch	;3
	JJXM	ONGROUND,	160,140,tabvpunch_lbowdrop,tabvpunch_punch	;4
	JJXM	BOUNCING,	 50, 45,tabvpunch_hdbutt,tabvpunch_punch	;1
	JJXM	ONTURNBKL,	 50, 45,tabvpunch_hdbutt,tabvpunch_punch	;6
	JJXM	BLOCK,		 50, 45,tabvpunch_hdbutt,tabvpunch_punch	;7
	JJXM	DIZZY,		 50, 45,tabvpunch_hdbutt,tabvpunch_punch	;8
	JJXM	DEAD,		160,140,tabvpunch_lbowdrop,tabvpunch_punch	;9
	JJXM	OPPOVERHEAD,	 50, 45,tabvpunch_hdbutt,tabvpunch_punch	;10
	JJXM	CLIMBTURNBKL,		tabvpunch_punch			;11
	JJXM	WAITANIM,	 50, 45,tabvpunch_hdbutt,tabvpunch_punch	;12
	JJXM	GRAPPLE,	 50, 45,tabvpunch_hdbutt,tabvpunch_punch	;13
	JJXM	MASTER,		 50, 45,tabvpunch_hdbutt,tabvpunch_punch	;14
	JJXM	SLAVE, 		 50, 45,tabvpunch_hdbutt,tabvpunch_punch	;15
	JJXM	HEADHOLD,	 50, 45,tabvpunch_hdbutt,tabvpunch_punch	;16
	JJXM	HEADHELD,	 50, 45,tabvpunch_hdbutt,tabvpunch_punch	;19
	JJXM	CHOKEHOLD,	 50, 45,tabvpunch_hdbutt,tabvpunch_punch	;16
	JJXM	PUPPET,		 50, 45,tabvpunch_hdbutt,tabvpunch_punch	;20
	JJXM	PUPPET2,	 50, 45,tabvpunch_hdbutt,tabvpunch_punch	;20
	JJXM	INAIR2,		 50, 45,tabvpunch_hdbutt,tabvpunch_punch	;21
	JJXM_END

tabvpunch_rets
	rets

tabvpunch_punch
std_punch

	FACE24	dnk,punch_anim
	calla	change_anim1a

	WRSND	W_DOINK,PUNCH_T1,PUNCH_T2

	rets

tabvpunch_hdbutt

	FACE24	dnk,butt_anim
	calla	change_anim1a

	WRSND	W_DOINK,HDBUTT_T1,HDBUTT_T2

	rets

tabvpunch_lbowdrop

	FACE24	dnk,lbowdrop_anim
	calla	change_anim1a

	WRSND	W_DOINK,LBOWDROP_T1,LBOWDROP_T2

	rets

tabvblock		;2
std_block
	move	@blocking_off,a0
	jrnz	tabvno_blocking

	RND_AWARD	a13,BLOCKS_AWD

	movi	dnk_4_block_anim,a0
	calla	change_anim1

	calla	BLOCK_WOOSH

	clr	a0
	move	a0,*a13(BLOCK_TIME)
	clrc
	rets

tabvno_blocking
	setc
	rets


tabvsuper_punch	;4
	JJXM_INIT
	JJXM	NORMAL,		 85, 55,tabvspunch_special,tabvspunch_slap	;0
	JJXM	RUNNING,	 85, 55,tabvspunch_special,tabvspunch_slap	;1
	JJXM	INAIR,		 85, 55,tabvspunch_special,tabvspunch_slap	;2
	JJXM	ATTACHED,	 85, 55,tabvspunch_special,tabvspunch_slap	;3
	JJXM	ONGROUND,	160,140,tabvspunch_lbowdrop,std_punch	;4
	JJXM	BOUNCING,	 85, 55,tabvspunch_special,tabvspunch_slap	;1
	JJXM	ONTURNBKL,	 	tabvspunch_slap			;6
	JJXM	BLOCK,		 85, 55,tabvspunch_special,tabvspunch_slap	;7
	JJXM	DIZZY,		 85, 55,tabvspunch_special,tabvspunch_slap	;8
	JJXM	DEAD,		160,140,tabvspunch_lbowdrop,std_punch	;9
	JJXM	OPPOVERHEAD,	 85, 55,tabvspunch_special,tabvspunch_slap	;10
	JJXM	CLIMBTURNBKL,		std_punch			;11
	JJXM	WAITANIM,	 85, 55,tabvspunch_special,tabvspunch_slap	;12
	JJXM	GRAPPLE,	 85, 55,tabvspunch_special,tabvspunch_slap	;13
	JJXM	MASTER,		 85, 55,tabvspunch_special,tabvspunch_slap	;14
	JJXM	SLAVE, 		 85, 55,tabvspunch_special,tabvspunch_slap	;15
	JJXM	HEADHOLD,	 85, 55,tabvspunch_special,tabvspunch_slap	;16
	JJXM	HEADHELD,		do_pile				;19
	JJXM	CHOKEHOLD,	 85, 55,tabvspunch_special,tabvspunch_slap	;16
	JJXM	PUPPET,		 85, 55,tabvspunch_special,tabvspunch_slap	;20
	JJXM	PUPPET2,	 85, 55,tabvspunch_special,tabvspunch_slap	;20
	JJXM	INAIR2,		 85, 55,tabvspunch_special,tabvspunch_slap	;21
	JJXM_END

tabvspunch_rets
	rets

tabvspunch_slap
	FACE24	dnk,slap_anim
	calla	change_anim1a

	WRSND	W_DOINK,SPUNCH_T1,SPUNCH_T2

	rets

tabvspunch_special

	move	*a13(STICK_VAL_CUR),a0
	btst	MOVE_DOWN_BIT,a0
	jrnz	tabvck_up



	move	*a13(CLOSEST_XDIST),a1
	cmpi	60,a1
	jrgt	std_punch


	FACE24	dnk,butts_anim
	calla	change_anim1

	WRSND	W_DOINK,HDBUTT_T1,HDBUTT_T2

	rets

tabvck_up
	.ref	dnk_4_uppercut_anim
	movi	dnk_4_uppercut_anim,a0
	calla	change_anim1

	WRSND	W_DOINK,SPUNCH_T1,SPUNCH_T2
	rets

tabvspunch_lbowdrop


	move	*a13(CLOSEST_NUM),a14
	X32	a14
	addi	process_ptrs,a14
	move	*a14,a14,L
	move	*a14(PLYRMODE),a2
	cmpi	MODE_DEAD,a2
	jrz	tabvno
	move	*a13(OBJ_XPOS),a1,L 
	move	*a14(OBJ_XPOS),a2,L
	sub	a2,a1
	abs	a1
	srl	16,a1
	cmpi	20h,a1	;28
 	jrlt	tabvno


	move	*a14(OBJ_CONTROL),a14
	andi	M_FLIPH,a14
	move	*a13(OBJ_CONTROL),a0
	andi	M_FLIPH,a0
	cmp	a0,a14
	jrz	tabvno


	FACE24	dnk,hair_pickup_anim
	calla	change_anim1
	WRSND	W_DOINK,LBOWDROP_T1,LBOWDROP_T2
	rets

tabvno	FACE24	dnk,lbowdrop_anim
	calla	change_anim1
	WRSND	W_DOINK,LBOWDROP_T1,LBOWDROP_T2
	rets


tabvkick		;8
	JJXM_INIT
	JJXM	NORMAL,		 50, 92,tabvkick_knee,tabvkick_kick		;0
	JJXM	RUNNING,		 50, 92,tabvkick_knee,tabvkick_kick		;0
	JJXM	INAIR,		 50, 92,tabvkick_knee,tabvkick_kick		;2
	JJXM	ATTACHED,	 50, 92,tabvkick_knee,tabvkick_kick		;3
	JJXM	ONGROUND,	160,140,tabvkick_stomp,tabvkick_kick		;4
	JJXM	BOUNCING,	 50, 92,tabvkick_knee,tabvkick_kick		;0
	JJXM	ONTURNBKL,	 	tabvkick_kick			;6
	JJXM	BLOCK,		 50, 92,tabvkick_knee,tabvkick_kick		;7
	JJXM	DIZZY,		 50, 92,tabvkick_knee,tabvkick_kick		;8
	JJXM	DEAD,		160,140,tabvkick_stomp,tabvkick_kick		;9
	JJXM	OPPOVERHEAD,	 50, 92,tabvkick_knee,tabvkick_kick		;10
	JJXM	CLIMBTURNBKL,	 	tabvkick_kick			;11
	JJXM	WAITANIM,	 50, 92,tabvkick_knee,tabvkick_kick		;12
	JJXM	GRAPPLE,	 50, 92,tabvkick_knee,tabvkick_kick		;13
	JJXM	MASTER,		 50, 92,tabvkick_knee,tabvkick_kick		;14
	JJXM	SLAVE, 		 50, 92,tabvkick_knee,tabvkick_kick		;15
	JJXM	HEADHOLD,	 50, 92,tabvkick_knee,tabvkick_kick		;16
	JJXM	HEADHELD,	 50, 92,tabvkick_knee,tabvkick_kick		;19
	JJXM	CHOKEHOLD,	 50, 92,tabvkick_knee,tabvkick_kick		;16
	JJXM	PUPPET,		 50, 92,tabvkick_knee,tabvkick_kick		;20
	JJXM	PUPPET2,	 50, 92,tabvkick_knee,tabvkick_kick		;20
	JJXM	INAIR2,		 	tabvskick_TB			;21
	JJXM_END


tabvkick_kick
std_kick

	FACE24	dnk,kick_anim
	calla	change_anim1a

	WRSND	W_DOINK,KICK_T1,KICK_T2

	rets

tabvkick_knee
std_knee
	FACE24	dnk,knee_anim
	calla	change_anim1a

	WRSND	W_DOINK,KICK_T1,KICK_T2

	rets

tabvkick_stomp

	FACE24	dnk,stomp_anim
	calla	change_anim1a

	WRSND	W_DOINK,KICK_T1,KICK_T2

	rets


tabvpunchkick	;9

	movi	start_run_anim,a0
	calla	change_anim1a

	rets

tabvsuper_kick	;16
	JJXM_INIT
	JJXM	NORMAL,		 60, 60,tabvskick_special,tabvskick_kick	;0
	JJXM	RUNNING,	 	tabvskick_bigboot			;1
	JJXM	INAIR,		 60, 60,tabvskick_special,tabvskick_kick	;2
	JJXM	ATTACHED,	 60, 60,tabvskick_special,tabvskick_kick	;3
	JJXM	ONGROUND,	160,140,tabvskick_stomp,std_kick		;4
	JJXM	BOUNCING,	 	tabvskick_bigboot			;5
	JJXM	ONTURNBKL,	 60, 96,tabvskick_kick,std_kick		;6
	JJXM	BLOCK,		 60, 60,tabvskick_special,tabvskick_kick	;7
	JJXM	DIZZY,		 60, 60,tabvskick_special,tabvskick_kick	;8
	JJXM	DEAD,		160,140,tabvskick_stomp,std_kick		;9
	JJXM	OPPOVERHEAD,	 60, 60,tabvskick_special,tabvskick_kick	;10
	JJXM	CLIMBTURNBKL,	 60, 96,tabvskick_kick,std_kick		;11
	JJXM	WAITANIM,	 60, 62,tabvskick_special,tabvskick_kick	;12
	JJXM	GRAPPLE,	 60, 62,tabvskick_special,tabvskick_kick	;13
	JJXM	MASTER,		 60, 62,tabvskick_special,tabvskick_kick	;14
	JJXM	SLAVE, 		 60, 62,tabvskick_special,tabvskick_kick	;15
	JJXM	HEADHOLD,	 60, 62,tabvskick_special,tabvskick_kick	;16
	JJXM	HEADHELD,	 	std_kick
	JJXM	CHOKEHOLD,	 60, 62,tabvskick_special,tabvskick_kick	;16
	JJXM	PUPPET,		 60, 62,tabvskick_special,tabvskick_kick	;20
	JJXM	PUPPET2,	 60, 62,tabvskick_special,tabvskick_kick	;20
	JJXM	INAIR2,		 	tabvskick_TB			;21
	JJXM_END

tabvskick_TB
	.ref	dnk_2_spin_kick_TB_anim
	.ref	dnk_4_spin_kick_TB_anim
	FACE24	dnk,spin_kick_TB_anim
	calla	change_anim1a

	WRSND	W_DOINK,FLYKICK_T1,FLYKICK_T2
	rets

tabvskick_kick
tabvgraboh

	FACE24	dnk,spin_kick_anim
	calla	change_anim1a

	WRSND	W_DOINK,FLYKICK_T1,FLYKICK_T2
	rets

tabvskick_special
	move	*a13(STICK_VAL_CUR),a0
	move	*a13(NEW_FACING_DIR),a1
	andi	0ch,a1
	cmp	a0,a1
	jrz	tabvcont2

	FACE24	dnk,knee_anim
	calla	change_anim1

	WRSND	W_DOINK,FLYKICK_T1,FLYKICK_T2
	rets

tabvcont2
	movi	dnk_4_knee_fall_anim,a0
	calla	change_anim1

	WRSND	W_DOINK,GRABHOLD_T1,GRABHOLD_T2
	rets


tabvskick_stomp

	FACE24	dnk,stomp_anim
	calla	change_anim1a

	WRSND	W_DOINK,KICK_T1,KICK_T2

	rets

tabvskick_bigboot	;we can probably get away with just a tabv4 big boot

	FACE24	dnk,bigboot_anim
	calla	change_anim1a

	WRSND	W_DOINK,FLYKICK_T1,FLYKICK_T2

	rets


hnbaXRUN_VAL	equ	DNK_XRUN
hnbaXRUN2_VAL	equ	DNK_XRUN2
hnbaZDRIFT_VAL	equ	DNK_ZDRIFT

mode_running

	move	*a13(RUN_TIME),a0		;Used for flying kick
	addk	1,a0
	move	a0,*a13(RUN_TIME)

	move	*a13(USR_VAR1),a0
	jrnz	hnbano_vel

	calla	bounce_off_ropes

	movi	hnbaXRUN_VAL,a0

	move	*a13(WALK_FAST),a14
	jrz	hnbano
	movi	hnbaXRUN2_VAL,a0
hnbano
	move	@hyper_speed_on,a14
	sll	a14,a0

	move	*a13(MOVE_DIR),a14
	btst	PLAYER_RIGHT_BIT,a14
	jrnz	hnbapos
	neg	a0
hnbapos
	move	a0,*a13(OBJ_XVEL),L

hnbano_vel

	move	*a13(GETUP_TIME),a0		;delay b4 gaining control
	jrnz	hnbaout_of_control

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	hnbano_interrupt

	move	*a13(STICK_VAL_CUR),a0
	move	*a13(MOVE_DIR),a1
	or	a0,a1
	andi	MOVE_LEFT|MOVE_RIGHT,a1
	cmpi	MOVE_LEFT|MOVE_RIGHT,a1
	jrne	hnbacontinue_run

	;braking with stick.  abort run.

	SETMODE	NORMAL

hnbacontinue_run
hnbano_interrupt

	move	*a13(STICK_VAL_CUR),a0
	clr	a1

	movi	-hnbaZDRIFT_VAL,a1
	btst	PLAYER_UP_BIT,a0
	jrnz	hnbasetvel

	movi	hnbaZDRIFT_VAL,a1
	btst	PLAYER_DOWN_BIT,a0
	jrnz	hnbasetvel

	clr	a1
hnbasetvel
	move	a1,*a13(OBJ_ZVEL),L


	move	*a13(DELAY_BUTNS),a0
	jrnz	hnbaout_of_control


	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	X32	a0
	addi	hnbaaction_table,a0
	move	*a0,a0,L
	call	a0
hnbaout_of_control
	rets

hnbaaction_table
	.long	hnbaz,hnbapunch,hnbablock,hnbablock			;0-3
	.long	hnbasuper_punch,hnbasuper_punch,hnbablock,hnbablock	;4-7
	.long	hnbakick,hnbapunchkick,hnbablock,hnbablock		;8-11
	.long	hnbasuper_punch,hnbapunchkick,hnbablock,hnbablock	;12-15
	.long	hnbasuper_kick,hnbasuper_kick,hnbablock,hnbablock	;16-19
	.long	hnbagraboh,hnbagraboh,hnbablock,hnbablock		;20-23
	.long	hnbasuper_kick,hnbapunchkick,hnbablock,hnbablock	;24-27
	.long	hnbagraboh,hnbagraboh,hnbablock,hnbablock		;28-31

hnbaz
	rets


hnbapunch		;1
hnbasuper_punch	;4
hnbapunchkick
hnbagraboh
	JJXM_INIT
	JJXM	NORMAL,			hnbapunch_clothesline		;0
	JJXM	RUNNING,		hnbapunch_clothesline		;1
	JJXM	INAIR,			hnbapunch_clothesline		;2
	JJXM	ATTACHED,		hnbapunch_clothesline		;3
	JJXM	ONGROUND,	176,176,hnbapunch_bellyflop,hnbapunch_lbowdrop ;4
	JJXM	BOUNCING,		hnbapunch_clothesline		;5	
	JJXM	ONTURNBKL,		hnbapunch_clothesline		;6
	JJXM	BLOCK,			hnbapunch_clothesline		;7
	JJXM	DIZZY,			hnbapunch_clothesline		;8
	JJXM	DEAD,		176,176,hnbapunch_bellyflop,hnbapunch_lbowdrop ;9
	JJXM	OPPOVERHEAD,		hnbapunch_clothesline		;10
	JJXM	CLIMBTURNBKL,		hnbapunch_clothesline		;11
	JJXM	WAITANIM,	 	hnbapunch_clothesline		;12
	JJXM	GRAPPLE,	 	hnbapunch_clothesline		;13
	JJXM	MASTER,		 	hnbapunch_clothesline		;14
	JJXM	SLAVE, 		 	hnbapunch_clothesline		;15
	JJXM	HEADHOLD,	 	hnbapunch_clothesline		;16
	JJXM	HEADHELD,	 	hnbapunch_clothesline		;19
	JJXM	CHOKEHOLD,	 	hnbapunch_clothesline		;16
	JJXM	PUPPET,		 	hnbapunch_clothesline		;20
	JJXM	PUPPET2,	 	hnbapunch_clothesline		;20
	JJXM	INAIR2,			hnbapunch_clothesline		;21
	JJXM_END


hnbapunch_clothesline

	move	*a13(MOVE_DIR),a1
	btst	MOVE_LEFT_BIT,a1
	jrnz	hnbalft
	
	move	*a13(OBJ_XPOSINT),a0
	cmpi	RING_X_MID+70h,a0
	jrlt	hnbaok


	rets

hnbalft

	move	*a13(OBJ_XPOSINT),a0
	cmpi	RING_X_MID-70h,a0
	jrgt	hnbaok


	rets
hnbaok
	move	*a13(MOVE_DIR),a1
	move	*a13(NEW_FACING_DIR),a0	;Current facing dir (9,10,6,5 only)
	sll	5,a0
	addi	hnbamv_tbl,a0
	move	*a0,a0,L
	btst	a0,a1
	jrz	hnbayes


	rets
hnbayes

	movi	dnk_fly_cline_anim,a0
	calla	change_anim1a

	SETMODE	INAIR

	clr	a0
	move	a0,*a13(RUN_TIME)

	WRSND	W_DOINK,FLYKICK_T1,FLYKICK_T2

	rets

hnbamv_tbl	.long	0,0,0,0,0,MOVE_RIGHT_BIT,MOVE_RIGHT_BIT
	.long	0,0,MOVE_LEFT_BIT,MOVE_LEFT_BIT

hnbapunch_lbowdrop
hnbapunch_bellyflop

	movi	dnk_belly_anim,a0
	calla	change_anim1a

	SETMODE	INAIR

	clr	a0
	move	a0,*a13(RUN_TIME)

	WRSND	W_DOINK,FLYKICK_T1,FLYKICK_T2

	rets


hnbablock		;2
	move	*a13(OBJ_XVEL),a0,L
	sra	1,a0
	move	a0,*a13(OBJ_XVEL),L
	SETMODE	NORMAL
	jruc	std_block

hnbakick		;8
hnbasuper_kick	;16
	JJXM_INIT
	JJXM	NORMAL,			hnbakick_flyingkick		;0
	JJXM	RUNNING,		hnbakick_flyingkick		;1
	JJXM	INAIR,			hnbakick_flyingkick		;2
	JJXM	ATTACHED,		hnbakick_flyingkick		;3
	JJXM	ONGROUND,	176,176,hnbakick_runstomp,hnbakick_runstomp	;4
	JJXM	BOUNCING,		hnbakick_flyingkick		;5
	JJXM	ONTURNBKL,		hnbakick_flyingkick		;6
	JJXM	BLOCK,			hnbakick_flyingkick		;7
	JJXM	DIZZY,			hnbakick_flyingkick		;8
	JJXM	DEAD,		176,176,hnbakick_runstomp,hnbakick_runstomp	;9
	JJXM	OPPOVERHEAD,		hnbakick_flyingkick		;10
	JJXM	CLIMBTURNBKL,		hnbakick_flyingkick		;11
	JJXM	WAITANIM,	 	hnbakick_flyingkick		;12
	JJXM	GRAPPLE,	 	hnbakick_flyingkick		;13
	JJXM	MASTER,		 	hnbakick_flyingkick		;14
	JJXM	SLAVE, 		 	hnbakick_flyingkick		;15
	JJXM	HEADHOLD,	 	hnbakick_flyingkick		;16
	JJXM	HEADHELD,	 	hnbakick_flyingkick		;19
	JJXM	CHOKEHOLD,	 	hnbakick_flyingkick		;16
	JJXM	PUPPET,		 	hnbakick_flyingkick		;20
	JJXM	PUPPET2,	 	hnbakick_flyingkick		;20
	JJXM	INAIR2,			hnbakick_flyingkick		;21
	JJXM_END

hnbakick_flyingkick

	calla	ck_ignore
	jrc	hnbaz


	movi	dnk_flying_kick_anim,a0
	calla	change_anim1a

	SETMODE	INAIR

	WRSND	W_DOINK,FLYKICK_T1,FLYKICK_T2

	rets

hnbakick_runstomp
	movi	dnk_belly_anim,a0
	calla	change_anim1a

	SETMODE	INAIR

	clr	a0
	move	a0,*a13(RUN_TIME)

	WRSND	W_DOINK,FLYKICK_T1,FLYKICK_T2

	rets



mode_inair	;2

	rets


mode_attached	;3

	calla	keep_attached
	jrnz	tnlastill_attached

	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL

	movi	MODE_NORMAL,a0
	move	a0,*a13(ANIMODE)

tnlastill_attached

	rets


mode_onground	;4

	rets



mode_bouncing	;5

	clr	a0
	move	a0,*a13(OBJ_XVEL),L
	move	a0,*a13(OBJ_ZVEL),L

	move	*a13(ANIMODE),a0
	btst	MODE_END_BIT,a0
	jrz	wstjnot_ended

	move	*a13(MOVE_DIR),a0
	xori	MOVE_LEFT+MOVE_RIGHT,a0	;flip LEFT/RIGHT
	move	a0,*a13(MOVE_DIR)

	move	*a13(NEW_FACING_DIR),a1
	andi	MOVE_UP+MOVE_DOWN,a1
	or	a0,a1			;LEFT or RIGHT
	move	a1,*a13(FACING_DIR)	;face same dir as run

	movi	dnk_run2_anim,a0
	calla	change_anim1a

	SETMODE	RUNNING


wstjnot_ended
	rets


mode_onturnbkl	;6


	move	*a13(STICK_VAL_CUR),a0
	btst	PLAYER_DOWN_BIT,a0
	jrz	ooctno_climbdown

	movi	dnk_climb_down_anim,a0
	calla	change_anim1a

	SETMODE	CLIMBTURNBKL

ooctno_interrupt
	rets

ooctno_climbdown
	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	jrz	ooctz

	X32	a0
	addi	ooctaction_table,a0
	move	*a0,a0,L
	call	a0

	move	*a13(PLYRNUM),a5
	movi	JUMP_ROPES,a2
	movi	1000,a0
	calla	ADD_IF_SILENT

	rets



ooctaction_table
	.long	ooctz,ooctpunch,ooctblock,ooctblock			;0-3
	.long	ooctsuper_punch,ooctsuper_punch,ooctblock,ooctblock	;4-7
	.long	ooctkick,ooctpunchkick,ooctblock,ooctblock		;8-11
	.long	ooctsuper_punch,ooctpunchkick,ooctblock,ooctblock	;12-15
	.long	ooctsuper_kick,ooctsuper_kick,ooctblock,ooctblock	;16-19
	.long	ooctgraboh,ooctgraboh,ooctblock,ooctblock		;20-23
	.long	ooctsuper_kick,ooctpunchkick,ooctblock,ooctblock	;24-27
	.long	ooctgraboh,ooctgraboh,ooctblock,ooctblock		;28-31

ooctz
	rets

ooctpunch		;1
ooctpunchkick	;1
ooctblock		;2

	SETMODE	INAIR
	WRSND	W_DOINK,GRABFLING_T1,GRABFLING_T2

	movi	dnk_4_blbowdrop_anim,a0		;Buckle
	calla	change_anim1a
	rets



ooctsuper_punch	;4


ooctgraboh		;1

	SETMODE	INAIR
	WRSND	W_DOINK,GRABFLING_T1,GRABFLING_T2

     	movi	dnk_diveofftb_anim,a0
	calla	change_anim1a
	rets

ooctkick		;8
ooctsuper_kick	;16

	SETMODE	INAIR
	WRSND	W_DOINK,GRABFLING_T1,GRABFLING_T2

	movi	dnk_4_bstomp_anim,a0		;Buckle
	calla	change_anim1a
	rets


mode_block	;7

	clr	a0
	move	a0,*a13(CONSECUTIVE_HITS)

	move	*a13(BLOCK_TIME),a0
	inc	a0
	move	a0,*a13(BLOCK_TIME)
	cmpi	160,a0
	jrlt	ypamno

	calla	get_opp_plyrmode
	cmpi	MODE_BLOCK,a0
	jrnz	ypamno
	move	*a13(CLOSEST_XDIST),a0
	cmpi	61h,a0
	jrge	ypamno
	cmpi	45,a0
	jrlt	ypamno
	move	*a13(CLOSEST_ZDIST),a0
	cmpi	30,a0
	jrlt	ypampunchblock

ypamno
	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	jrz	ypamno_interrupt

	;press.  if block isn't down, let mode_normal handle it
	move	a0,a2			;save a0 from ...val_down
	move	*a13(BUT_VAL_CUR),a0
	btst	PLAYER_BLOCK_BIT,a0
	jrz	ypamset_mode_normal
	move	a2,a0			;restore a0 from ...val_down

	X32	a0
	addi	ypamaction_table,a0
	move	*a0,a0,L
	call	a0

ypamno_interrupt
	rets

ypamset_mode_normal
	SETMODE	NORMAL
	jruc	mode_normal

ypamaction_table
	.long	ypamz,ypampunchblock,ypamz	;0-2
	.long	ypampunchblock		;3
	.long	ypamz,ypamz,ypamz,ypamz,ypamz,ypamz,ypamz	;4-10
	.long	ypamz,ypamz,ypamz,ypamz,ypamz,ypamz,ypamz	;11-17
	.long	ypamz,ypamz,ypamz,ypamz,ypamz,ypamz,ypamz	;18-24
	.long	ypamz,ypamz,ypamz,ypamz,ypamz,ypamz,ypamz	;25-31

ypamz
	rets

ypampunchblock	;3


	SETMODE	NORMAL

	movi	dnk_4_push_anim,a0
	calla	change_anim1a

	WRSND	W_DOINK,PUSH_T1,PUSH_T2

	rets


mode_dizzy	;8

	rets


 SUBR	mode_dead	;9

	;if our zombie bit is set, move
	move	*a13(STATUS_FLAGS),a14
	btst	B_ZOMBIE,a14		;are we already a zombie?
	jrnz	xkiqzmb

	btst	B_DID_BUCKOFF,a14
	jrnz	xkiqdone			;have we already done one this match?

	btst	B_NO_BUCKOFF,a14
	jrnz	xkiqdone			;have we already checked this round?

	btst	B_DO_BUCKOFF,a14
	jrnz	xkiqcount_btns		;are we already counting?

	move	@royal_rumble,a14
	jrnz	xkiqdone			;are we in royal rumble mode?

	;We may have to fire up a come back to life process:
	; IF this is the second round we've lost,
	; AND IF our combo meter is flashing,
	; AND IF the hit that killed us was wimpy and our WEAK_HIT bit is set,
	; AND IF we haven't already done a buckoff this match,
	; AND IF we're inside the ring,
	; THEN start counting button presses.

	;Is this the second round we've lost?
	;(skip this test if we're in the 8-on-1 match)
	calla	is_8_on_1
	jrc	xkiqck81
	move	@p1rounds,a0
	move	*a13(PLYR_SIDE),a14
	jrnz	xkiqrndok
	move	@p2rounds,a0
xkiqrndok	TEST	a0
	jrz	xkiqnobuck
	jruc	xkiqtcombo

xkiqck81	;it's 8-on-1.  only the player is allowed to buckoff.
	move	*a13(PLYRNUM),a14
	cmpi	2,a14
	jrge	xkiqnobuck

xkiqtcombo	;is our combo meter lit?
	move	a13,a8
	calla	CHECK_COMBO_GO
	jrlt	xkiqnobuck

	;are we inside the ring?
	move	*a13(INRING),a14
	jrnz	xkiqnobuck

	;Buckoff is NOT allowed if undertaker started his finish move or
	;has completed his finish move!!!!
	move	@in_finish_move,a14
	jrnz	xkiqnobuck
	move	@finish_completed,a14
	jrnz	xkiqnobuck

	;temp! - 314
	.if DEBUG
	DBEVENT	BDE_MAYBE_BUCK,a13,L,*a13(WRESTLERNUM),W,*a13(PLYRNUM),W
	.endif

	;possible buckoff.  Zero BUCKOFF_COUNT and set DO_BUCKOFF bit
	clr	a14
	move	a14,*a13(BUCKOFF_COUNT)
	move	*a13(STATUS_FLAGS),a14
	ori	M_DO_BUCKOFF,a14
	move	a14,*a13(STATUS_FLAGS)
	jruc	xkiqcount_btns

xkiqnobuck	;no buckoff.  set NO_BUCKOFF bit
	move	*a13(STATUS_FLAGS),a14
	ori	M_NO_BUCKOFF,a14
	move	a14,*a13(STATUS_FLAGS)
	jruc	xkiqdone

xkiqzmb	;we're a zombie.  WAITROLL is going to automatically roll us up
	; until we can't roll anymore, and then our anim should make us
	; stand up.  (There should always be a getup after a waitroll.)
	; So all we do is wait for the MODE_END bit to get set, which tells
	; us that we're standing up, outside, with a clear lane to either
	; side.  At that point we begin running toward whichever side of
	; the arena is farther from the camera.  We don't want to be seen
	; vanishing when we hit the edge.

	;Update ZOMBIE_TIME.  If we've been a zombie for ten seconds,
	; something has probably gone wrong with our trip to the side
	; of the arena, so we'll just transform now.
	move	*a13(ZOMBIE_TIME),a14
	inc	a14
	move	a14,*a13(ZOMBIE_TIME)
	cmpi	TSEC*10,a14
	jrlt	xkiqzmb_ok

xkiqchange	;timeout!
	calla	change_wrestler
	jruc	xkiqdone
xkiqzmb_ok

	move	*a13(ANIMODE),a14
	btst	MODE_END_BIT,a14
	jrz	xkiqdone

xkiqrun	;begin running left if WORLDTLX > RING_X_CENTER-200, right otherwise.

	;set CAN_XFORM bit so we can transform
	move	*a13(STATUS_FLAGS),a14
	ori	M_CAN_XFORM,a14
	move	a14,*a13(STATUS_FLAGS)

	move	@WORLDTLX,a14,L
	sra	16,a14
	cmpi	RING_X_CENTER-200,a14
	jrge	xkiqrun_left

xkiqrun_right
	movk	MOVE_RIGHT,a14
	move	a14,*a13(STICK_VAL_CUR)
	movi	start_run_anim,a0
	calla	change_anim1a

	move	*a13(WRESTLERNUM),a14
	X32	a14
	addi	xkiqrun_speeds,a14
	move	*a14,a14,L
	move	a14,*a13(OBJ_XVEL),L
	jruc	xkiqdone

xkiqrun_left
	movk	MOVE_LEFT,a14
	move	a14,*a13(STICK_VAL_CUR)
	movi	start_run_anim,a0
	calla	change_anim1a

	move	*a13(WRESTLERNUM),a14
	X32	a14
	addi	xkiqrun_speeds,a14
	move	*a14,a14,L
	neg	a14
	move	a14,*a13(OBJ_XVEL),L


xkiqdone	rets

xkiqcount_btns
	;count new presses this tick and add to BUCKOFF_COUNT
	move	*a13(BUT_VAL_DOWN),a0
	clr	a1
xkiqlp0	lmo	a0,a14
	jrz	xkiqend0
	rl	a14,a0
	sla	1,a0
	inc	a1
	jruc	xkiqlp0
xkiqend0	move	*a13(BUCKOFF_COUNT),a0

	add	a1,a0
	move	a0,*a13(BUCKOFF_COUNT)

	cmpi	50,a0
	jrge	xkiqdobuck

	.ref	obj_del1c,dec_to_asc,concat_rom_string,mess_spacing
	.ref	ogmd10_ascii,message_ascii,mess_cursx,mess_cursy
	.ref	message_palette,print_string,BINBCD,SGMD8GLD,mess_objid
	.ref	copy_string

	rets

xkiqdobuck	;SUCCESS!  Do the buckoff.

	;temp! - 314
	.if DEBUG
	DBEVENT	BDE_DONE_BUCK,a13,L,*a13(WRESTLERNUM),W,*a13(PLYRNUM),W
	.endif

	;clear my combo meter
	calla	clear_combo_meter


	;If any opponent has pinned, send him to his buckoff anim.
	movi	NUM_WRES,a0
	movi	process_ptrs,a1
xkiqlp2	move	*a1+,a2,L
	jrz	xkiqnxt2
	move	*a2(STATUS_FLAGS),a14,L
	btst	B_DID_PIN,a14
	jrz	xkiqnxt2
	move	a2,a0
	jruc	xkiqdone2
xkiqnxt2	dsj	a0,xkiqlp2
xkiqdone2

	;clear his pinned bit
	move	*a0(STATUS_FLAGS),a14
	andni	M_DID_PIN,a14
	move	a14,*a0(STATUS_FLAGS)

	;if his DID_RAISEARM bit is set, then it was probably taker and he's
	; no longer on top of us, so skip the buckoff and just let him get
	; his raisearm anim shut off along with the other drones.
	move	*a0(STATUS_FLAGS),a14
	btst	B_DID_RAISEARM,a14
	jrnz	xkiqme_not_pinned

	;do his bucked off anim (stick it into special_move_addr?)
	move	a0,a8
	FACETBL	xkiqbuckoff_tbl,a8
	move	a0,*a8(SPECIAL_MOVE_ADDR),L

xkiqme_not_pinned
	;back to life...
	movi	MODE_ONGROUND,a14
	move	a14,*a13(PLYRMODE)

	;get two pixels back
	movk	2,a0
	move	*a13(PLYRNUM),a1
	calla	adjust_health

	;no getup meter
	clr	a14
	move	a14,*a13(GETUP_TIME)
	move	a14,*a13(DELAY_METER)

	clr	a0
	move	a0,*a13(I_WILL_DIE)

	;reset my pal, just in case.
	move	*a13(MY_PAL),*a13(OBJ_PAL)

	move	a13,a8
	movi	41,a10
	.ref	MOVE_NAME_ANNC
	CREATE	MESSAGE_PID,MOVE_NAME_ANNC

	;clear DO_BUCKOFF|PINABLE|PINNED, and set DID_BUCKOFF|NEW_BUCKOFF
	move	*a13(STATUS_FLAGS),a14,L
	ori	M_DID_BUCKOFF|M_NEW_BUCKOFF,a14
	andni	M_DO_BUCKOFF|M_PINNED|M_PINABLE,a14
	move	a14,*a13(STATUS_FLAGS),L

	;convulse
	FACETBL	hitonground_tbl
	calla	change_anim1a

	;set nocollis bit
	move	*a13(ANIMODE),a14
	ori	MODE_NOCOLLIS,a14
	move	a14,*a13(ANIMODE)

	;if anyone has done a raisearm, put 'em back in a stand.
	movi	process_ptrs,a0
	movi	NUM_WRES,a1
xkiqlp1	move	*a0+,a2,L
	jrz	xkiqnxt1
	move	*a2(STATUS_FLAGS),a14,L
	btst	B_DID_RAISEARM,a14
	jrz	xkiqnxt1

	;just clear the DID_RAISEARM bit.  Anim scripts will do the rest.
	andni	M_DID_RAISEARM,a14
	move	a14,*a2(STATUS_FLAGS),L


xkiqnxt1	dsj	a1,xkiqlp1

	;If anyone has turned into a drone, turn 'em back.
	clr	a14
	move	@process_ptrs,a0,L
	jrz	xkiqadc1
	move	a14,*a0(PLYR_TYPE)
xkiqadc1	move	@process_ptrs+20h,a0,L
	jrz	xkiqadc2
	move	a14,*a0(PLYR_TYPE)
xkiqadc2

	;call init_reduce_bog, because match_timer clears it when it
	; sees one team dead.
	calla	init_reduce_bog

	;if there's an ANNOUNCE_RND_WINNER process waiting,
	; wake it up so it'll see us alive and die.
	movi	ANNC_PID,a0
	clr	a1
	not	a1
	calla	EXISTP
	jrz	xkiqrets

	move	*a0(PWAKE),a14,L
	cmpi	arw_bwait,a14
	jrne	xkiquh_oh

	movk	1,a14
	move	a14,*a0(PTIME)
	jruc	xkiqrets

xkiquh_oh
	.if DEBUG	
	LOCKUP	;announce_rnd_winner ISN'T at arw_bwait!
	.endif
xkiqrets	rets


xkiqbuckoff_tbl
	REFLONG	hrt_buckoff_anim	;Bret
	REFLONG	rzr_buckoff_anim	;Razor
	REFLONG	und_buckoff_anim	;Taker
	REFLONG	yok_buckoff_anim	;Yoko
	REFLONG	shn_buckoff_anim	;Shawn
	REFLONG	bam_buckoff_anim	;Bam Bam
	REFLONG	dnk_buckoff_anim	;Doink
	.long	0
	REFLONG	lex_buckoff_anim	;Lex


xkiqrun_speeds
	.long	HRT_XRUN
	.long	RZR_XRUN
	.long	UND_XRUN
	.long	YOK_XRUN
	.long	SHN_XRUN
	.long	BAM_XRUN
	.long	DNK_XRUN
	.long	0
	.long	LEX_XRUN


 SUBRP	ani_end_anim
	.word	ANI_SETPLYRMODE,MODE_NORMAL
	.word	ANI_SETMODE,MODE_NORMAL
	.word	ANI_END	


mode_oppoverhead ;10

	rets


mode_climbturnbkl	;11

	rets



mode_waitanim	;12

	move	*a13(ANIMODE),a0
	btst	MODE_END_BIT,a0
	jrz	ovibnot_ended

	move	*a13(CODE_ADDR),a0,L
	call	a0

ovibnot_ended
	rets



mode_grapple	;13

	rets


mode_master	;14

	calla	master_keep_attached	;keep slave attached to me

	rets


mode_slave	;15
	rets



 SUBR	bozo_check

	move	*a13(SPUNCHB_COUNT),a0
	move	*a13(SKICKB_COUNT),a1
	move	*a13(BLOCKB_COUNT),a2
	add	a0,a1
	add	a1,a2
	cmpi	18,a2
	jrlt	hugyno_bozo

	move	*a13(IMMOBILIZE_TIME),a14
	jrnz	hugyno_bozo				;ignore

	;target WHOHITME -- don't hit anyone else
	SMRTTGT	a13,WHOHITME

	;immobilize WHOHITME
	move	*a13(WHOHITME),a0,L
	movk	32,a14
	move	a14,*a0(IMMOBILIZE_TIME)

	CALLA	FIND_AND_KILL_ENDLESS
	
	setc
	rets

hugyno_bozo
	clrc
	rets


mode_headhold	;16

	callr	bozo_check
	jrnc	hiyufail

	WRSND	W_DOINK,FLYKICK_T1,FLYKICK_T2

	movi	dnk_3_head_slam_anim,a0
	move	@PCNT,a14
	btst	0,a14
	jrz	hiyutag
	movi	dnk_3_pile_driver_anim,a0
hiyutag	calla	change_anim1a

	rets

hiyufail
	move	*a13(WHOIHIT),a0,L
	move	*a0(PLYRMODE),a0
	cmpi	MODE_HEADHELD,a0
	jrnz	hiyuexit


	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	hiyuno_interrupt

	move	*a13(BUT_VAL_DOWN),a0
	andi	011111b,a0
	X32	a0
	addi	hiyuaction_table,a0
	move	*a0,a0,L
	call	a0

hiyuno_interrupt
	rets

hiyuexit
	move	*a13(OBJ_ZPOS),a14,L
	subi	[6,0],a14
	move	a14,*a13(OBJ_ZPOS),L

	movk	MOVE_DOWN_RIGHT,a1
	move	*a13(OBJ_CONTROL),a0
	btst	B_FLIPH,a0
	jrz	hiyuright
	movk	MOVE_DOWN_LEFT,a1
hiyuright	move	a1,*a13(FACING_DIR)
	move	a1,*a13(NEW_FACING_DIR)

	SETMODE	NORMAL

	rets

hiyuaction_table
	.long	hiyuz,hiyupunch,hiyublock,hiyublock			;0-3
	.long	hiyusuper_punch,hiyusuper_punch,hiyublock,hiyublock	;4-7
	.long	hiyukick,hiyupunchkick,hiyublock,hiyublock		;8-11
	.long	hiyusuper_punch,hiyupunchkick,hiyublock,hiyublock	;12-15
	.long	hiyusuper_kick,hiyusuper_kick,hiyublock,hiyublock	;16-19
	.long	hiyugraboh,hiyugraboh,hiyublock,hiyublock		;20-23
	.long	hiyusuper_kick,hiyupunchkick,hiyublock,hiyublock	;24-27
	.long	hiyugraboh,hiyugraboh,hiyublock,hiyublock		;28-31


hiyublock
hiyugraboh
hiyuz		;0
	rets


hiyupunch		;1
	CALLA	FIND_AND_KILL_ENDLESS
	move	*a13(STICK_VAL_CUR),a0
	move	*a13(NEW_FACING_DIR),a1
	andi	0ch,a1
	cmp	a0,a1
	jrnz	hiyutag2

	WRSND	W_DOINK,UPRCUT_T1,UPRCUT_T2
	movi	dnk_uppercuts_to_head_anim,a0
	calla	change_anim1a
	rets

hiyutag2	movi	dnk_uppercut_to_head_anim,a0
	calla	change_anim1a
	WRSND	W_DOINK,UPRCUT_T1,UPRCUT_T2
	rets

hiyusuper_punch	;4

do_pile
	move	*a13(USR_VAR2),a0
	jrz	hiyuz

	CALLA	FIND_AND_KILL_ENDLESS
	move	*a13(STICK_VAL_CUR),a0
	btst	PLAYER_DOWN_BIT,a0
	jrz	hiyupunch

	WRSND	W_DOINK,UPRCUT_T1,UPRCUT_T2
	movi	dnk_3_pile_driver_anim,a0
	calla	change_anim1a
	rets

hiyukick
hiyupunchkick
	CALLA	FIND_AND_KILL_ENDLESS
	WRSND	W_DOINK,KICK_T1,KICK_T2

	movi	dnk_3_knee_to_head_anim,a0
	calla	change_anim1a
	rets

hiyusuper_kick	;16
	move	*a13(STICK_VAL_CUR),a0
	move	*a13(NEW_FACING_DIR),a1
	andi	0ch,a1
	cmp	a0,a1
	jrnz	hiyuz

	CALLA	FIND_AND_KILL_ENDLESS
	WRSND	W_DOINK,KICK_T1,KICK_T2
	movi	dnk_3_knees_to_head_anim,a0
	calla	change_anim1a
	rets


mode_puppet2	;17

	.if DEBUG
	LOCKUP		;should never be in this mode anymore.
	.endif

	rets


mode_headheld	;19
	move	*a13(ANIMODE),a0
	btst	MODE_NOGRAVITY_BIT,a0
	janz	mode_choking

	callr	bozo_check
	jrnc	scghfail

	PUSH	a8
	move	a13,a8
	CALLA	DO_REVERSAL
	CALLA	DO_REVERSAL_MESS
	PULL	a8

	WRSND	W_DOINK,FLYKICK_T1,FLYKICK_T2

	movi	dnk_3_head_slam_anim,a0
	move	@PCNT,a14
	btst	0,a14
	jrz	scghtag
	movi	dnk_3_pile_driver_anim,a0
scghtag	calla	change_anim1a

	rets

scghfail

	move	*a13(ATTACH_PROC),a0,L
	jrnz	scghno_luck

	move	*a13(OBJ_YPOSINT),a0
	move	*a13(GROUND_Y),a1
	cmp	a1,a0			;a0-a1
	jrgt	scghno_luck


	WRSND	W_DOINK,PUSH_T2
	movi	dnk_3_head_held_stand_anim,a0
	calla	change_anim1a

scghno_luck
	rets

 SUBR	mode_puppet	;20	(used by everyone)

evkxtimeout_val	.equ	TSEC*2

	;if we're attached, don't check anything.
	move	*a13(ATTACH_PROC),a0,L
	jrz	evkxcheck
	move	*a0(ATTACH_PROC),a1,L
	cmp	a1,a13
	jreq	evkxdone

evkxcheck	;figure out if we're newly in mode_puppet or if we've been
	; here awhile.
	move	*a13(PUPPET_TIME),a14	;last time we were in mode_puppet
	move	@PCNT,a0		;this tick
	move	a0,*a13(PUPPET_TIME)	;in either case, update PUPPET_TIME

	sub	a14,a0
	cmpi	1,a0
	jrne	evkxnew_arrival

	;been here awhile
	move	*a13(PUPPET_TICKS),a0
	inc	a0
	move	a0,*a13(PUPPET_TICKS)

	cmpi	evkxtimeout_val,a0
	jrlt	evkxdone

	;bark!  Been here too long.  glitch to a stand or something.
	.if DEBUG
	LOCKUP
	.endif
	SETMODE	NORMAL
	FACE24TBL evkxstand_tbl
	calla	change_anim1a
	jruc	evkxdone

evkxnew_arrival
	movk	1,a14
	move	a14,*a13(PUPPET_TICKS)

evkxdone	rets

evkxstand_tbl
	REFLONG	hrt_stand2_anim,hrt_stand4_anim		;0 Bret Hart
	REFLONG	rzr_stand2_anim,rzr_stand4_anim		;1 Razor Ramon
	REFLONG	und_stand2_anim,und_stand4_anim		;2 Undertaker
	REFLONG	yok_stand2_anim,yok_stand4_anim		;3 Yokozuna
	REFLONG	shn_stand2_anim,shn_stand4_anim		;4 Shawn Michaels
	REFLONG	bam_stand2_anim,bam_stand4_anim		;5 Bam Bam
	REFLONG	dnk_stand2_anim,dnk_stand4_anim		;6 Doink
	.long	0,0					;7 spare
	REFLONG	lex_stand2_anim,lex_stand4_anim		;8 Lex Luger

mode_chokehold	;24
	rets

 SUBR	mode_inair2	;21



jqfnZDRIFT2_VAL	equ	58000h
jqfnXDRIFT_VAL	equ	30000h

	move	*a13(STICK_VAL_CUR),a0
	clr	a1

	movi	-jqfnZDRIFT2_VAL,a1
	btst	PLAYER_UP_BIT,a0
	jrnz	jqfnsetvel

	movi	jqfnZDRIFT2_VAL,a1
	btst	PLAYER_DOWN_BIT,a0
	jrnz	jqfnsetvel

	clr	a1
jqfnsetvel

	move	*a13(OBJ_ZPOS),a14,L
	add	a1,a14
	move	a14,*a13(OBJ_ZPOS),L


	clr	a1

	movi	-jqfnXDRIFT_VAL,a1
	btst	PLAYER_LEFT_BIT,a0
	jrnz	jqfnsetvel2

	movi	jqfnXDRIFT_VAL,a1
	btst	PLAYER_RIGHT_BIT,a0
	jrnz	jqfnsetvel2

	clr	a1
jqfnsetvel2

	move	*a13(OBJ_XPOS),a14,L
	add	a1,a14
	move	a14,*a13(OBJ_XPOS),L

	rets



mjziVEL	equ	3a000h		;38000h	;30000h
mjziDVEL	equ	31000h		;27978h	;21f0eh


 SUBR dnk_velocity_table


	.long	0,	-mjziVEL	;0 UP

	.long	mjziDVEL,	-mjziDVEL	;1 UP-RIGHT

	.long	mjziVEL,	0	;2 RIGHT

	.long	mjziDVEL,	mjziDVEL	;3 DOWN-RIGHT

	.long	0,	mjziVEL	;4 DOWN

	.long	-mjziDVEL,	mjziDVEL	;5 DOWN-LEFT

	.long	-mjziVEL,	0	;6 LEFT

	.long	-mjziDVEL,	-mjziDVEL	;7 UP-LEFT



 SUBR dnk_rotate_anims_table
	.long	dnk_stand2_anim		;new = up right
	.long	dnk_2_to_4_turn_anim	;    = down right
	.long	dnk_2_to_6_turn_anim	;    = down left ***
	.long	dnk_2_to_8_turn_anim	;    = up left

	.long	dnk_4_to_2_turn_anim	;new = up right
	.long	dnk_stand4_anim		;    = down right
	.long	dnk_4_to_6_turn_anim	;    = down left
	.long	dnk_4_to_8_turn_anim	;    = up left ***

	.long	dnk_6_to_2_turn_anim	;new = up right ***
	.long	dnk_6_to_4_turn_anim	;    = down right
	.long	dnk_stand6_anim		;    = down left
	.long	dnk_6_to_8_turn_anim	;    = up left

	.long	dnk_8_to_2_turn_anim	;new = up right
	.long	dnk_8_to_4_turn_anim	;    = down right ***
	.long	dnk_8_to_6_turn_anim	;    = down left
	.long	dnk_stand8_anim		;    = up left


 SUBR dnk_leg_anims_table
	.long	dnk_walk1_f2_anim	;1 (UP)
	.long	dnk_walk1_f2_anim	;2 (UP_RIGHT)
	.long	dnk_walk1_f4_anim	;3 (RIGHT)
	.long	dnk_walk1_f4_anim	;4 (DOWN_RIGHT)
	.long	dnk_walk1_f4_anim	;5 (DOWN)
	.long	dnk_walk1_f4_anim	;6 (DOWN_LEFT)
	.long	dnk_walk1_f2_anim	;7 (LEFT)
	.long	dnk_walk1_f2_anim	;8 (UP-LEFT)

	.long	dnk_walk2_f2_anim	;1 (UP)
	.long	dnk_walk2_f2_anim	;2 (UP_RIGHT)
	.long	dnk_walk2_f2_anim	;3 (RIGHT)
	.long	dnk_walk2_f4_anim	;4 (DOWN_RIGHT)
	.long	dnk_walk8_f4_anim	;5 (DOWN)
	.long	dnk_walk8_f4_anim	;6 (DOWN_LEFT)
	.long	dnk_walk4_f2_anim	;7 (LEFT)
	.long	dnk_walk4_f2_anim	;8 (UP-LEFT)

	.long	dnk_walk2_f2_anim	;1 (UP)
	.long	dnk_walk2_f2_anim	;2 (UP_RIGHT)
	.long	dnk_walk2_f2_anim	;3 (RIGHT)
	.long	dnk_walk4_f4_anim	;4 (DOWN_RIGHT)
	.long	dnk_walk4_f4_anim	;5 (DOWN)
	.long	dnk_walk8_f4_anim	;6 (DOWN_LEFT)
	.long	dnk_walk6_f2_anim	;7 (LEFT)
	.long	dnk_walk6_f2_anim	;8 (UP-LEFT)


	.long	dnk_walk2_f2_anim	;1 (UP)
	.long	dnk_walk8_f2_anim	;2 (UP_RIGHT)
	.long	dnk_walk4_f4_anim	;3 (RIGHT)
	.long	dnk_walk4_f4_anim	;4 (DOWN_RIGHT)
	.long	dnk_walk2_f4_anim	;5 (DOWN)
	.long	dnk_walk6_f4_anim	;6 (DOWN_LEFT)
	.long	dnk_walk2_f2_anim	;7 (LEFT)
	.long	dnk_walk6_f2_anim	;8 (UP-LEFT)

	.long	dnk_walk5_f2_anim	;1 (UP)
	.long	dnk_walk5_f2_anim	;2 (UP_RIGHT)
	.long	dnk_walk5_f4_anim	;3 (RIGHT)
	.long	dnk_walk5_f4_anim	;4 (DOWN_RIGHT)
	.long	dnk_walk5_f4_anim	;5 (DOWN)
	.long	dnk_walk5_f4_anim	;6 (DOWN_LEFT)
	.long	dnk_walk5_f2_anim	;7 (LEFT)
	.long	dnk_walk5_f2_anim	;8 (UP-LEFT)

	.long	dnk_walk2_f2_anim	;1 (UP)
	.long	dnk_walk6_f2_anim	;2 (UP_RIGHT)
	.long	dnk_walk2_f2_anim	;3 (RIGHT)
	.long	dnk_walk6_f4_anim	;4 (DOWN_RIGHT)
	.long	dnk_walk2_f4_anim	;5 (DOWN)
	.long	dnk_walk4_f4_anim	;6 (DOWN_LEFT)
	.long	dnk_walk2_f2_anim	;7 (LEFT)
	.long	dnk_walk8_f2_anim	;8 (UP-LEFT)

	.long	dnk_walk2_f2_anim	;1 (UP)
	.long	dnk_walk6_f2_anim	;2 (UP_RIGHT)
	.long	dnk_walk6_f2_anim	;3 (RIGHT)
	.long	dnk_walk8_f4_anim	;4 (DOWN_RIGHT)
	.long	dnk_walk4_f4_anim	;5 (DOWN)
	.long	dnk_walk4_f4_anim	;6 (DOWN_LEFT)
	.long	dnk_walk2_f2_anim	;7 (LEFT)
	.long	dnk_walk2_f2_anim	;8 (UP-LEFT)

	.long	dnk_walk2_f2_anim	;1 (UP)
	.long	dnk_walk4_f2_anim	;2 (UP_RIGHT)
	.long	dnk_walk6_f2_anim	;3 (RIGHT)
	.long	dnk_walk8_f4_anim	;4 (DOWN_RIGHT)
	.long	dnk_walk6_f4_anim	;5 (DOWN)
	.long	dnk_walk2_f4_anim	;6 (DOWN_LEFT)
	.long	dnk_walk2_f2_anim	;7 (LEFT)
	.long	dnk_walk2_f2_anim	;8 (UP-LEFT)


 SUBR dnk_torso_anims_table
	.long	dnk_torso2_anim		;new = up right
	.long	dnk_2_to_4_turn2_anim	;    = down right
	.long	dnk_2_to_6_turn2_anim	;    = down left ***
	.long	dnk_2_to_8_turn2_anim	;    = up left

	.long	dnk_4_to_2_turn2_anim	;new = up right
	.long	dnk_torso4_anim		;    = down right
	.long	dnk_4_to_6_turn2_anim	;    = down left
	.long	dnk_4_to_8_turn2_anim	;    = up left ***

	.long	dnk_6_to_2_turn2_anim	;new = up right ***
	.long	dnk_6_to_4_turn2_anim	;    = down right
	.long	dnk_torso6_anim		;    = down left
	.long	dnk_6_to_8_turn2_anim	;    = up left

	.long	dnk_8_to_2_turn2_anim	;new = up right
	.long	dnk_8_to_4_turn2_anim	;    = down right ***
	.long	dnk_8_to_6_turn2_anim	;    = down left
	.long	dnk_torso8_anim		;    = up left





	.end

