	.file	"adjust.asm"
	.width	132
	.option	b,d,l,t
	.mnolist

	.include	"mproc.equ"
	.include	"display.equ"
	.include	"sys.equ"
	.include	"game.equ"
	.include	"link.equ"
	.include	"menu.equ"
	.include	"dip.equ"
	.include	"macros.h"
	.include	"sound.h"

	.include	"fontsimg.glo"

	.text


	.DEF GO_ADJ
	.DEF DO_ADJH
	.DEF BCDBIN
	.DEF BINBCD
	.DEF SET_COIN_ADJ, MEN_ADJ, CKDIP, TAMPEREDP

	.globl	CLR_MAIN
	.globl	ADJ_INST
	.globl	CADJ_BOX
	.globl	CLR_CUR
	.globl	DO_BIG_LINE

	.ref	_switch_map_mode	


	.ref	ST_STICK
	.ref	L_MESS
	.ref	MESS_MM
	.ref	GET_ADJ
	.ref	GET_CSPT
	.ref	NO_CREDS
	.ref	GET_FAC
	.ref	MENU_TOP
	.ref	HTOHXASC
	.ref	STRCNRM
	.ref	ANY_BUT
	.ref	PUT_ADJ
	.ref	CS_ENTS
	.ref	STD_BORD
	.ref	CMOS_VAL
	.ref	LM_FINIS
	.ref	INIT_HSR
	.ref	LM_SETUP
	.ref	CRED_P
	.ref	B_MENU
	.ref	BLNKAREA
	.ref	GETSTICK
	.ref	P_FORK
	.ref	LD_CTAB
	.ref	STRLNRM
	.ref	RD7FONT
	.ref	READ_DIP
	.ref	HEXTOASC
	.ref	F_ADC_S
	.ref	BLNKHELP
	.ref	COL_INST
	.ref	H_SLAVE
	.ref	STRRNRM
	.ref	CLR_SCRN





GO_ADJ
	MOVI	MEN_ADJ,A8

GEN_ADJUST
	MOVE	A8,-*A12,L		;PUSH MENU ON STACK

	CALLA	CMOS_VAL		;CHECK OUT THE REGION
	JRZ	SET_OK			;ITS OK.....CONTINUE....

	JSRP	GET_FAC 		;BRING TO FACTORY SETTINGS OR QUIT.
	JSRP	ANY_BUT

	CALLA	CMOS_VAL		;CAN'T GO IF WE'RE NOT OK NOW
	JRNZ	GO_ADQ			;ITS NOT VALID....NO ADJUSTING!

SET_OK
	MOVK	1,A0
	MOVE	A0,-*A12,W		;LIKE GEN_MENU...KEEP NUMBER ON STACK

ADJ_LOOP
	CALLA	CLR_SCRN		;CLEAR THE SCREEN!

	MOVI	ADJ_ADV,A8
	JSRP	L_MESS			;PRINT THE NEW INSTRUCTIONS

	MOVE	*A12(WORD_SIZE),A8,L ;GET THE MENU
	JSRP	MENU_TOP	     ;PRINT OUT THE TOP.
	MOVI	COLOR_RED,A9
	CALLA	COL_INST	     ;PUT UP A DIFFERENT INSTR. BOX

	MOVE	*A12,A9,W	     ;GET INDEX TO USE.
	JSRP	B_MENU		     ;FETCH THE ENTRY TO ADJUST.


	MOVE	A9,A9		     ;0 IS RETURN TO MAIN MENU
	JRZ	GO_ADJX


	MOVE	A8,*A12,W	     ;PUT IT SAFELY ON OUR STACK.

	MOVE	*A9(AD_ROUT),A0,L    ;GET THE ROUTINE TO CALL FOR ACTIVATION
	MOVI	ADJ_LOOP,A7
	MOVE	A7,-*A12,L	     ;PUSH RETURN ADDRESS
	JUMP	A0		     ;"CALL THE ROUTINE (PASSING STRUCT IN A9)

GO_ADJX
	addk	WORD_SIZE,a12	     ;"pop" the position indicator
GO_ADQ
	addk	LONG_SIZE,a12	     ;Pop menu
	RETP			     ;OK...RETURN!

PRICE_ADJ
	MOVI	MEN_CUST,A8	      ;HANDLE JUST LIKE MAIN ADJ. MENU
	JAUC	GEN_ADJUST

MULT_ADJ
	MOVI	MEN_MULT,A8	      ;HANDLE JUST LIKE MAIN ADJ. MENU
	JAUC	GEN_ADJUST

GEN_ADJ:
	movk	2,a0			;Adjusting switch mapping mode
	move	a0,@_switch_map_mode,L
	MOVE	A9,*A13(PDATA),L     ;SAVE THE STRUCTURE POINTER

	MOVE	A9,A8		     ;GET TO GENERAL POINTING REGISTER
	JSRP	DO_IN_WHITE	     ;GO FROM LF TO WHITE RIGHT AWAY.

	MOVE	A0,A0
	JRNZ	ADJ_CAN 	     ;CANCELLED
	CALLR	CLR_MAIN	     ;CLEAR OUT THE MAIN MENU REGION
	CALLR	ADJ_INST	     ;PUT INSTRUCTIONS AT BOTTOM.
	JSRP	ST_STICK	     ;LOCKOUT STUCK SWITCHES

	SLEEPK	2		     ;STOP RACE ON INSTRUCTIONS
ADJ_CHNG
	SLEEPK	1		     ;NOW LOOP ON STICK...EXIT

	MOVI	31000H,A5		 ;TYPOMATIC....BOT HALF SAYS DON'T TIME OUT
	JSRP	GETSTICK		 ;ASK THE STICK HANDLER.......
	MOVE	*A13(PDATA),A8,L	 ;GET OUR POINTER
	MOVE	A0,A1			 ;KEEP GETSTICK VALUE
	JRZ	ADJ_CHNG		 ;ITS ZERO....NO MORE WORK NEEDED

	MOVE	*A8(AD_CMOS),A0,W	 ;GET ADJ NUMBER
	MOVE	A0,A2			 ;COPY FOR LATER

	CALLR	GET_EADJ		  ;READ IT OUT (FIXING ZERO IF NEC)
	MOVE	A0,A3			  ;SAVE "OLD" VALUE
	CMPI	3,A1			 ;BUTTON......BACK TO ADJ MENU!
	JRZ	ADJ_BUTT		 ;YEP....WE'RE OUT OF HERE.

	CMPI	2,A1
	JRZ	ADJ_DOWN		 ;ITS DOWN....
	CALLR	INC_ADJ 		  ;INCREMENT IT
	JRUC	ADJ_JOIN

ADJ_DOWN:
	CALLR	DEC_ADJ 		  ;DECREMENT IT
ADJ_JOIN:
	MOVE	A2,A0			  ;ADJUSTMENT NUMBER
	CALLR	GET_EADJ		  ;READ IT OUT (FIXING ZERO IF NEC)
	CMP	A0,A3			  ;DID IT NOT CHANGE?
	JRZ	ADJ_CHNG		  ;NOPE....NO ACTION!
	movi	beep1_snd,a3
	calla	SNDSND
	JSRP	DO_IN_WHITE	       ;AND UPDATE THE ADJUSTMENT

	JRUC	ADJ_CHNG	       ;AND LOOP!

DO_IN_WHITE
	CALLR	CLR_CUR 	       ;CLEAR OUT CURRENT SETTING
	MOVI	COLOR_WHITE,A11	      ;THEY'RE STARING....NO HEADACHES
	JAUC	AD_CRVAL	       ;PRINT THE NEW VALUE

ADJ_BUTT:
	movi	beep2_snd,a3
	calla	SNDSND
ADJ_CAN:
	movk	1,a0
	move	a0,@_switch_map_mode,L
	RETP

DEC_ADJ:
	MMTM	SP,A0,A1,A2,A3
	MOVE	A0,A3			       ;COPY ORIGINAL VALUE
	MOVE	*A8(AD_DELTA),A1,L	       ;GET UNITS BETWEEN VALUES
	CALLR	MAKE_BIN_IF_NEC 	       ;CHANGE RADIX FOR MATH IF NECESSARY
	SUB	A1,A0			       ;REMOVE THIS FROM READ VALUE
	JRUC	FINISH_CHANGE		       ;GO TO COMMON ROUTINE TO WRAP IT UP

INC_ADJ:
	MMTM	SP,A0,A1,A2,A3
	MOVE	A0,A3			       ;COPY ORIGINAL VALUE
	MOVE	*A8(AD_DELTA),A1,L	       ;GET UNITS BETWEEN VALUES
	CALLR	MAKE_BIN_IF_NEC
	ADD	 A1,A0			       ;REMOVE THIS FROM READ VALUE

FINISH_CHANGE:
	CALLR	BCD_IF_NEC		       ;BACK TO BCD AFTER THE MATH
	CALLR	PUT_IN_RANGE		       ;ADJUST TO ACCOUNT FOR WRAP AND LIMITS
	MOVE	*A8(AD_ZEQU),A1,L	       ;This number becomes zero
	CMP	A0,A1			       ;is this the number?
	JRNZ	FC_NZ			       ;NOPE...STORE IT!
	CLR	A0			       ;USE ZERO IN PLACE OF THIS NUMBER!

FC_NZ:	
	MOVE	A0,A1			       ;WRITING REG
	MOVE	A2,A0			       ;ADJUSTMENT NUMBER
	CALLA	PUT_ADJ 		       ;WRITE IT BACK
	CMP	A1,A3			       ;DID THE NUMBER CHANGE?
	JRZ	NOT_COIN		       ;NOPE...DON'T LOAD IT UP!
	CALLR	DIRTY_IF_NEC		;IF ITS A COIN VALUE TAKE NOTE!

	CMPI	ADJPRICE,A0		;IS IT?
	JRNZ	NOT_COIN		;NOT COIN

	CALLA	LD_CTAB			;BATCH WRITE THE VALUES IN!
	CALLA	NO_CREDS		;REMOVE CREDITS AND FRACTIONS WHEN
	CALLA	CRED_P			;LINK-OUT!

NOT_COIN:
	CALLA	F_ADC_S			;MAKE CHECKSUM VALID!
	MMFM	SP,A0,A1,A2,A3
	RETS

DIRTY_IF_NEC
	
	MMTM	SP,A0,A1,A2
	MOVE	*A8(AD_FLAGS),A2,W	  ;FETCH THE FLAGS

	BTST	VIRG_BIT,A2		  ;DOES CHANGING THIS SAY SET VIRG BIT.
	JRZ	NOT_1ST_8		  ;NOPE

	movk	ADJVIRGIN,a0
	CLR	A1
	CALLA	PUT_ADJ

NOT_1ST_8
	BTST	SIX_BIT,A2		  ;1ST 6?
	JRZ	NOT_1ST_6

	movk	ADJ1ST6,a0
	CLR	A1
	CALLA	PUT_ADJ
NOT_1ST_6
	BTST	HSR_BIT,A2		  ;HIGH SCORE RESET NUM?
	JRZ	NOT_HSR 		  ;NOPE

	CALLA	INIT_HSR		  ;IT WAS CHANGED....STUFF THE VALUE!

NOT_HSR
	MMFM	SP,A0,A1,A2
	RETS

MAKE_BIN_IF_NEC:
	MMTM	SP,A2
	MOVE	*A8(AD_FLAGS),A2,W	       ;GET THE FLAGS
	BTST	BCD_BIT,A2		       ;BCD?
	JRZ	MBINX			       ;NOPE

	CALLA	BCDBIN			       ;CONVERT A0 TO BINARY
	MOVE	A0,A2			       ;SAVE
	MOVE	A1,A0			       ;NOW A1
	CALLA	BCDBIN
	MOVE	A0,A1
	MOVE	A2,A0			       ;NOW PUT A0 BACK
MBINX:	
	MMFM	SP,A2
	RETS

BCD_IF_NEC:
	MMTM	SP,A2
	MOVE	*A8(AD_FLAGS),A2,W	       ;GET THE FLAGS
	BTST	BCD_BIT,A2		       ;BCD?
	JRZ	BINX			       ;NOPE

	CALLA	BINBCD			       ;BACK TO BCD

BINX:	
	MMFM	SP,A2
	RETS

ADJ_CASH
	.WORD	0F7A5H-10H,8,08085H,0		;CASH REGISTER SOUND
ADJ_LBEEP
ADJ_BEEP	.WORD	0F3F7H-10H,020H,08081H,0		;BEEP TONE

CLR_CUR:
	MMTM	SP,A3,A4
	MOVI	AM_HX,A3	     ;THIS IS LEFT MARGIN OF HELP AREA

	MOVI	CUR_LRX,A4	     ;RIGHT X
	SUB	A3,A4		     ;A4 HAS X DISTANCE

	ADDI	ADJ_ULY*10000H,A3    ;UPPER LEFT Y
	ADDI	(256-ADJ_ULY)*10000H,A4  ;Y GOES TO BOTTOM OF SCREEN
	CALLA	BLNKAREA		 ;ITS BLANK NOW!
	MMFM	SP,A3,A4
	RETS

CLR_MAIN
	MMTM	SP,A3,A4
	MOVI	TIT_ULX,A3	     ;LEFT EDGE
	MOVI	AM_HX,A4	 ;UP TO THIS EDGE
	SUB	A3,A4		     ;X'S ARE SET.
	ADDI	INST_ULY*10000H,A3   ;TOP Y
	ADDI	(400-INST_ULY)*10000H,A4  ;Y DISTANCE
	CALLA	BLNKAREA
	MMFM	SP,A3,A4
	RETS








ADJ_INST:
	MOVE	*A13(PDATA),A8,L     ;PASS THE ADJUSTMENT POINTER
	MOVI	ADJ_INST_P,A7
	CALLA	P_FORK		     ;START IT UP!
	RETS


ADJ_INST_P:
	JSRP   ADJUSTING	;PUT UP "ADJUSTING DIFFICULTY" MESSAGE

	MOVE	A10,A3		;STASH # OF ARROWS WHERE IT WILL BE SAFE
	CALLR	ADINBOX 	;PUT THE BOX OUT

	MOVI	INST_TO_ADJ,A8
	JSRP	L_MESS		;PRINT OUT INSTRUCTIONS

	MOVI	ADJ_ARROW,A8
	JSRP	L_MESS

	JAUC	SUCIDE

INBOX_HEIGHT	 EQU	 7BH

ADINBOX:
	MMTM	SP,A10
	MOVI	CUR_ULY-2,A10	
	SLL	16,A10
	MOVI	TIT_ULX,A4	     ;UPPER RIGHT X
	MOVY	A10,A4		     ;UPPER RIGHT

	MOVI	AM_RX,A5
	MOVY	A10,A5		     ;START WITH BASE Y
	ADDI	INBOX_HEIGHT*10000H,A5

	CALLR	WH_BORD
	MMFM	SP,A10
	RETS

ADJUSTING:
	MOVE	A8,A2		     ;PUT ADJUSTMENT BLOCK PTR WHERE ITS SAFE
	MOVI	(CUR_ULY-31H)*10000H,A4        ;FOR DO_BORDER
	ADDI	TIT_ULX,A4		       ;A4 IS REASONABLY EASY

	MOVI	((CUR_ULY-2)+MB_YWID)*10000H,A5    ;OVERLAP THE ONE BELOW IT
	ADDI	AM_RX,A5		       ;THIS IS RIGHT EDGE

	CALLR	WH_BORD 		       ;DO A WHITE BORDER

	MOVI	MES_ADNAME,A8		       ;PUT THE ADJUSTMENT NAME UP
	CALLA	LM_SETUP
	MOVE	*A2(AD_MAIN),A8,L	       ;GET THE MAIN MENU MESSAGE
	JSRP	LM_FINIS

	MOVI	MES_ADJUSTING,A8
	JSRP	L_MESS
	RETP

MULT_VAL
	CLR	A4
	movk	6,a1			  ;Setup a box for our 3 lines
	CALLR	PADJ_BOX 		  ;(a10 is set as y for the 3 lines)

	MOVI	M_MULTVAL,A8
	MOVI	COLOR_DECAY,A11
	JSRP	PRINT_SMALL_LINE	;HEADER FOR COIN SLOT VALUE

	MOVI	COLOR_WHITE,A11		;DON'T GLOW INSIDE BOX IF THAT'S THE MODE
	ADDK	15,A10
	MOVI	M_MULTVAL1,A8
	MOVI	ADJLTOTMULT,A0
	JSRP	ADJ_LEFT_RIGHT

	ADDK	11,A10
	MOVI	M_MULTVAL2,A8
	MOVI	ADJRTOTMULT,A0
	JSRP	ADJ_LEFT_RIGHT

	ADDK	11,A10
	MOVI	M_MULTVAL3,A8
	MOVI	ADJCTOTMULT,A0
	JSRP	ADJ_LEFT_RIGHT

	ADDK	11,A10
	MOVI	M_MULTVAL4,A8
	MOVI	ADJXTOTMULT,A0
	JSRP	ADJ_LEFT_RIGHT

	ADDK	11,A10
	MOVI	M_MULTVAL5,A8
	MOVI	ADJBTOTMULT,A0
	JSRP	ADJ_LEFT_RIGHT

	RETP


PDY	 EQU	 HELP_DY
PMARG	 EQU	 6

PARAM_VAL
	movk	5,a1			  ;Setup a box for our 3 lines
	CALLR	ADJ_BOX 		  ;(a10 is set as y for the 3 lines)


	CALLR	GET_COIN_TITLE		  ;COIN MODE
	MOVI	MESS_GP,A8
	JSRP	SMALL_LEFT_RIGHT	  ;PRINT THE LINES

	ADDI	PDY,A10 		;PUSH TO NEXT LINE

	MOVI	M_NO,A2 		  ;ASSUME "NO"
	movk	ADJFREPL,a0
	CALLA	GET_ADJ 		  ;GET THE FREE PLAY ADJUSTMENT
	JRZ	NOT_FREE
	MOVI	M_YES,A2

NOT_FREE
	MOVI	MESS_FP,A8
	JSRP	SMALL_LEFT_RIGHT	  ;PRINT THE LINES

	ADDI	PDY,A10 		;PUSH TO NEXT LINE
	
	movk	ADJMAXC,a0
	MOVI	MESS_MAX,A8
	JSRP	ADJ_LEFT_RIGHT		;A0 = ADJUST  A8 = MESSAGE
	ADDI	PDY,A10 		;PUSH TO NEXT LINE
	movk	ADJCSTRT,a0		;Get credits required to start
	MOVI	M_CTS_PL,A8					
	JSRP	ADJ_LEFT_RIGHT		;A0 = ADJUST  A8 = MESSAGE
	ADDI	PDY,A10 		;PUSH TO NEXT LINE
	movk	ADJCCONT,a0		;Get credits required to continu
	MOVI	M_CTC_PL,A8					
	JSRP	ADJ_LEFT_RIGHT	     ;A0 = ADJUST  A8 = MESSAGE

	RETP

ADJ_LEFT_RIGHT
	MOVE	A8,A3		     ;STASH MESSAGE

	CALLA	GET_ADJ
	MOVE	A0,A8
	CALLA	HEXTOASC	     ;A8 POINTS TO NUMBER STRING

	MOVE	A8,A2
	MOVE	A3,A8		     ;GET MESSAGE IN A8

	JRUC	SMALL_LEFT_RIGHT

SMALL_LEFT_RIGHT
	MMTM	A12,A11,A6,A10,A9,A3

	MOVI	COLOR_WHITE,A6	    ;SOLID WHITE FOR THESE MULTI-LINERS
	MOVI	RD7FONT,A11	     ;USE BABY FONT

	MOVI	AM_HX+PMARG,A9	  ;LEFT X IS INSIDE LEFT LINE

	MOVE	A10,A3			;SAVE Y IN A3
	SLL	16,A3
	MOVY	A3,A9		     ;POINTER SET!

	MOVI	SPACING07,A10

	CLR	A0

	JSRP	STRLNRM 	     ;DO IT!

	MOVE	A2,A8		     ;GET RIGHT JUSTIFIED STRING
	MOVI	TIT_LRX-PMARG,A9  ;INSIDE RIGHT MARGIN
	MOVY	A3,A9		     ;AT OUR Y
	JSRP	STRRNRM 	     ;PRINT IT!

	MMFM	A12,A11,A6,A10,A9,A3
	RETP

COIN_SET
	CALLR	TAMPEREDP	;HAS THE 1ST 6 COIN VALUE BEEN TAMPERED WITH?
	JRZ	SBO		;YEP....SMALL BOX ONLY!


	CALLR	CLR_CUR
	MOVI	6,A1			;BIG BOX FOR OUTSIDE
	MOVK	5,A4			; GROSS KLUDGE TO OFFSET BOX
	CALLR	CADJ_BOX
SBO	MOVI	1,A1			;DRAW A BOX TO HOLD 1 LINE
	CLR	A4
	CALLR	CADJ_BOX		  ;DRAW THE BOX....PASS BACK 1ST PLOT LINE

	MOVI	[ADJ_CULY+5,AM_HX+5],A3
	MOVI	[21,185],A4
	CALLA	BLNKAREA
	MOVI	[ADJ_CULY+31,AM_HX+5],A3
	MOVI	[58,185],A4
	CALLA	BLNKAREA

	SUBK	5,A10
	MOVE	A10,A4		     ;KEEP THE Y HANDY.


	CALLR	GET_COIN_TITLE	     ;GET TITLE FOR BIG BOX IN A2.


COIN_TIT
	JSRP	DO_BIG_LINE		;PRINT THIS LINE!

	MOVI	COLOR_WHITE,A11		;DON'T GLOW INSIDE BOX IF THAT'S THE MODE

	CALLR	TAMPEREDP		;HAS THE 1ST 6 COIN VALUE BEEN TAMPERED WITH?
	JRZ	NO_INFO 		;YEP....JUST GIVE THE STARTS AND CONTINUES

	ADDK	11,A10
	SLL	16,A10
	PUSHP	A10			;SAVE Y POSITION

	CALLA	GET_CSPT		;A6 POINTS AT THE CSELECT BLOCK
	MOVE	*A6(CS_LIST),A2,L	;FETCH POINTER TO MESSAGE LIST
	JRZ	NO_HEADERS		;NO LIST!

	MOVI	COIN_HEAD_Y,A10 	;AT THIS HEIGHT

NEXT_HEADER
	MOVE	*A2+,A8,L	
	JRZ	NO_HEADERS		;HEADERS ARE OUT...CONTINUE

	JSRP	PRINT_SMALL_LINE	;PRINT THE LINE
	addk	12,a10			;Push to next line
	JRUC	NEXT_HEADER

NO_HEADERS
	MOVI	M_SLOTVAL,A8
	MOVI	MESS_CTS,A10		;SET Y FOR COIN SLOT LINE.
	movi	01212H,a11		;Med blue
	JSRP	PRINT_SMALL_LINE	;HEADER FOR COIN SLOT VALUE

	CALLA	GET_CSPT		;A6 POINTS AT THE CSELECT BLOCK
	MOVE	*A6(CS_SLOTS),A8,L	;PRINT COIN SLOT INFO
	addk	12,a10			;Push y up for a gap
	JSRP	PRINT_SMALL_LINE 	;PRINT THE LINE

	MOVI	TOST_MESS,A8
	CALLA	LM_SETUP
	PUSH	A0
	MOVE	*A12,A0,L
	MOVY	A0,A9
	MOVI	ADJCSTRT,A0		; CREDITS TO START
	CALLA	GET_ADJ	
	MOVE	A0,A8
	PULL	A0
	CALLA	HEXTOASC
	JSRP	LM_FINIS
	
	MOVI	TOCONT_MESS,A8
	CALLA	LM_SETUP
	PUSH	A0
	MOVE	*A12,A0,L
	MOVY	A0,A9
	MOVI	ADJCCONT,A0		; CREDITS TO START
	CALLA	GET_ADJ	
	MOVE	A0,A8
	PULL	A0
	CALLA	HEXTOASC
	JSRP	LM_FINIS

	MOVI	TOSTOC_MESS,A8
	CALLA	LM_SETUP
	PULLP	A3
	MOVY	A3,A9
	JSRP	LM_FINIS


NO_INFO
	RETP				;DONE FOR NOW

TOSTOC_MESS
         MESS_MAC  RD7FONT,SPACING07,AM_HX+116,0,COLOR_WHITE,STRCNRM,0
	.STRING	"TO START.    TO CONTINUE.",0
	.EVEN

TOST_MESS
         MESS_MAC  RD7FONT,SPACING07,AM_HX+27,0,COLOR_WHITE,STRRNRM,0

TOCONT_MESS
         MESS_MAC  RD7FONT,SPACING07,AM_HX+110,0,COLOR_WHITE,STRRNRM,0

GET_COIN_TITLE
	PUSH	a6

	CALLA	GET_CSPT		;A6 POINTS AT THE CSELECT BLOCK
	MOVI	MESS_DIP,A2
	CALLR	CKDIP
	JRZ	gctx

	MOVI	MESS_TAMPERED,A2
	movk	ADJ1ST6,a0		;Non-standard title if 1st 6 modified
	CALLA	GET_ADJ
	jrz	gctx			;Changed?
	MOVE	*A6(CS_TITLE),A2,L	;GET THE CSELECT TITLE FOR ITS VALUES

gctx	PULL	a6
	RETS

TAMPEREDP
	PUSH	a0
	movk	ADJ1ST6,a0	;Just check the 1st 6
	CALLA	GET_ADJ 	;HAS IT BEEN TAMPERED WITH (0 MEANS YES)
	MMFM	SP,A0
	RETS

CKDIP
	CALLA	READ_DIP
	ANDI	DPUSECMOS,A0
	MOVE	A0,A0
	RETS


SET_COIN_ADJ:
	MMTM	SP,A0,A1,A6,A7
	MOVI	ADJLMULT,A0
	MOVE	*A6+,A1,W
	CALLA	PUT_ADJ
	MOVI	ADJCMULT,A0
	MOVE	*A6+,A1,W
	CALLA	PUT_ADJ
	MOVI	ADJRMULT,A0
	MOVE	*A6+,A1,W
	CALLA	PUT_ADJ
	MOVI	ADJXMULT,A0		; NEW ADDITION, FOLKS!
	MOVE	*A6+,A1,W
	CALLA	PUT_ADJ
	MOVI	ADJDBVMULT,A0		; NEW ADDITION, FOLKS!
	MOVE	*A6+,A1,W
	CALLA	PUT_ADJ
	MOVI	ADJCUNIT,A0
	MOVE	*A6+,A1,W
	CALLA	PUT_ADJ
	MOVI	ADJBUNIT,A0
	MOVE	*A6+,A1,W
	CALLA	PUT_ADJ
	MOVI	ADJMUNIT,A0
	MOVE	*A6+,A1,W
	CALLA	PUT_ADJ
	MOVI	ADJCSTRT,A0
	MOVE	*A6+,A1,W
	CALLA	PUT_ADJ
	MOVI	ADJCCONT,A0
	MOVE	*A6+,A1,W
	CALLA	PUT_ADJ
	MOVI	ADJCDIV,A0
	MOVE	*A6+,A1,W
	CALLA	PUT_ADJ
	MOVI	ADJFRAC,A0
	MOVE	*A6+,A1,W
	CALLA	PUT_ADJ
	PUSH	A6
	MOVI	ADJLTOTMULT,A0
	MOVE	*A6+,A1,W
	CALLA	PUT_ADJ
	MOVI	ADJCTOTMULT,A0
	MOVE	*A6+,A1,W
	CALLA	PUT_ADJ
	MOVI	ADJRTOTMULT,A0
	MOVE	*A6+,A1,W
	CALLA	PUT_ADJ
	MOVI	ADJXTOTMULT,A0
	MOVE	*A6+,A1,W
	CALLA	PUT_ADJ
	MOVI	ADJBTOTMULT,A0
	MOVE	*A6+,A1,W
	CALLA	PUT_ADJ
	PULL	A6

	movk	ADJVIRGIN,a0		;THIS SAYS 1ST 8 UNTOUCHED.
	movk	1,a1
	calla	PUT_ADJ

	movk	ADJ1ST6,a0		;THIS SAYS 1ST 6 UNTOUCHED.
	movk	1,a1
	calla	PUT_ADJ 		;DONE!

	CALLA	F_ADC_S			; KEEP THE WORLD A HAPPY PLACE

	MMFM	SP,A0,A1,A6,A7
	RETS

PRINT_SMALL_LINE
	MMTM	A12,A11,A6,A10,A9

	MOVE	A11,A6		     ;COLOR SET
	MOVI	RD7FONT,A11	     ;USE BABY FONT

	MOVI	AM_HX,A9,W	     ;GET LEFT X
	CALLR	LEFT_TO_CENTER	     ;CONVERT IT

	MOVE	A10,A0
	SLL	16,A0
	MOVY	A0,A9		     ;POINTER SET!

	MOVI	SPACING07,A10

	CLR	A0

	JSRP	STRCNRM 	     ;DO IT!

	MMFM	A12,A11,A6,A10,A9
	RETP


DO_ADJH
	CALLA	BLNKHELP	     ;BLANK OUT THE AREA WE'RE PLOTTING!
	MOVE	A1,A8		     ;PASS THE STRUCTURE POINTER TO NEW PROCESS!
	MOVI	AD_SLAVE,A7
	CALLA	P_FORK		     ;THIS CREATES IT!
	RETS			     ;NOW RETURN TO MENU HANDLER!

ADS_STRUCT	 EQU	 PDATA			;LONG-POINTER TO ADJUSTMENT STRUCTURE
ADS_LX		 EQU	 ADS_STRUCT+LONG_SIZE	;WORD-LEFT X TO WORK FROM
ADS_CX		 EQU	 ADS_LX+WORD_SIZE	;WORD-CENTER X FOR WORK

AD_SLAVE:
	MOVE	*A8(MENU_ROUTINE),A11,L   ;NOW WE HAVE OUR SPECIAL STRUCTURE!
	MOVE	A11,*A13(ADS_STRUCT),L	  ;STASH IT...WE'LL NEED IT
	MOVE	A9,*A13(ADS_LX),W	  ;ALSO THE X.....

	MOVE	A9,A4			  ;COPY LEFT FOR BORDER ROUT
	CALLR	LEFT_TO_CENTER

	MOVE	A9,*A13(ADS_CX),W	  ;STASH THE CENTER
	ADDI	INST_ULY*10000H,A4	     ;ADD IN THE Y
	MOVI	(INST_LRY*10000H)+TIT_LRX,A5 ;THIS IS OTHER EDGE.
	MOVI	COLOR_WHITE,A9
	CALLA	STD_BORD		       ;ADJUSTMENT BORDER IS UP.

	MOVI	ADJT_SETUP,A8
	CALLA	LM_SETUP		       ;SETUP TO PRINT TITLE

	MOVE	*A13(ADS_CX),A2,W	       ;GET THE X
	MOVX	A2,A9			       ;SUBSTITUTE OUR X IN.

	MOVE	*A13(ADS_STRUCT),A2,L	       ;GET STRUCTURE POINTER
	MOVE	*A2(AD_TITLE),A8,L	       ;GET MESSAGE POINTER

	JSRP	LM_FINIS		       ;BOX AND TITLE ARE UP.

	MOVE	*A2(AD_HELP),A8,L	       ;HELP STRUCTURE
	CALLR	CKDIP
	JRNZ	ADSSKIP
	CMPI	HELP_PRICE,A8		; PRICING HELP
	JRZ	ADSDIP
	CMPI	HELP_PARAM,A8		; PARAMETER HELP
	JRZ	ADSDIP
	CMPI	HELP_FREE,A8		; FREEPLAY HELP
	JRNZ	ADSSKIP
ADSDIP
	MOVI	HELP_DIP,A8
ADSSKIP

	MOVE	*A13(ADS_LX),A9,W	       ;LEFT X FOR HELP BOX
	MOVI	INST_LRY+BOX_YGAP,A10	       ;THIS IS HELP BOX POSITION
	ADDI	10000H,A10		       ;FLAG THAT THIS IS TOP..NOT CENTER!

	MOVI	H_SLAVE,A7	     ;FORK OFF SO IT CAN USE PDATA!
	CALLA	P_FORK		     ;START UP ANOTHER W/ SAME ID
	MOVE	*A13(ADS_STRUCT),A8,L	;GET THE ADJUSTMENT STRUCTURE
	MOVI	COLOR_LF,A11	      ;INDICATE STANDARD COLOR.
	JSRP	AD_CRVAL		;PRINT SCREEN SHOWING THE CURRENT VALUE

	JAUC	SUCIDE		     ;OUR JOB IS DONE!...EXIT

LEFT_TO_CENTER:
	ADDI	TIT_LRX,A9		  ;FIND BOX CENTER
	SRL	1,A9			  ;NOW WE HAVE THE CENTER
	ADDI	C_KLUDGE,A9		  ;MAKE IT CENTER CORRECTLY
	RETS


AD_CRVAL:
	MOVE	*A8(AD_NAMEIT),A0,L	  ;FETCH THE "NAME-IT" ROUTINE
	JUMP	A0			  ;AND "JSRP" THAT ROUTINE

HEX_OR_MESS
	PUSH	a8

	CALLR	ADJ_STUFF		  ;GET THE REGGIES FIXED UP.


	MOVE	*A8(AD_MIN),A1,L	  ;GET MINIMUM VALUE
	CMP	A0,A1			  ;ARE WE AT MINIMUM?
	JRNZ	NOT_MIN 		  ;NOPE

AT_MIN	MOVE	*A8(AD_NAMPTR),A8,L	  ;GET THE MESSAGE POINTER
	JRUC	PRT_MIN

NOT_MIN	MOVE	A0,A8
	MOVK	1,A3			  ;INDICATE COMMAS ARE DESIRED
	CALLA	HTOHXASC		  ;CONVERT A8 TO THIS NUMBER

PRT_MIN	MOVE	A8,A2
	PULL	a8

	JSRP	DO_BIG_LINE		  ;NOW PRINT IT OUT
	RETP				  ;AND RETURN

BIN_OR_MESS:
	MMTM	SP,A8			  ;PRESERVE A8 PLEASE

	CALLR	ADJ_STUFF		  ;GET THE REGGIES FIXED UP.
	MOVE	*A8(AD_MIN),A1,L	  ;GET MINIMUM VALUE
	CMP	A0,A1			  ;ARE WE AT MINIMUM?
	JRZ	AT_MIN			  ;YEP.....PRINT "OFF"

	CALLA	BINBCD			  ;TURN TO BCD PLEASE
	JRUC	NOT_MIN 		  ;AND NOW PRINT WITH COMMAS.

JUST_BIN:
	MMTM	SP,A8			  ;PRESERVE A8 PLEASE

	CALLR	ADJ_STUFF		  ;GET THE REGGIES FIXED UP.
	CALLA	BINBCD			  ;TURN IT TO BCD!
	JRUC	NOT_MIN

LIST_1LINE
	CALLR	ADJ_STUFF		  ;GET THE REGGIES FIXED UP.

	MOVE	*A8(AD_MAX),A1,L	  ;IS IT TOO HIGH?
	CMP	A1,A0			  ;COMPARE TO ADJUSTMENT
	JRLS	L1L1			  ;IN RANGE.....
	MOVI	M_NULL,A2		  ;USE NULL POINTER
	JRUC	L1L2

L1L1	
	MOVE	*A8(AD_MIN),A1,L	  ;GET THE LOWEST VALUE
	SUB	A1,A0			  ;THIS IS OFFSET
	MOVK	LONG_SIZE,A1		  ;THIS MANY LONG WORDS
	MPYU	A0,A1			  ;THIS IS OFFSET INTO TABLE
	MOVE	*A8(AD_NAMPTR),A0,L	  ;THIS IS TABLE BASE

	CMPI	DO_FREE,A8		; IS IT A FREEPLAY ITEM
	JRNZ	LIGO
	PUSH	A0
	CALLA	CKDIP			; CHECK FOR DIP SWITCH SETTING
	MMFM	SP,A0
	JRNZ	LIGO
	MOVI	LIST_DIPNOYES,A0
LIGO

	ADD	A1,A0			  ;A0 HAS THE TEXT OF THE SINGLE LINE
	MOVE	*A0,A2,L		  ;GET THE VECTOR
L1L2
	JSRP	DO_BIG_LINE		  ;PRINT OUT THIS LINE
	RETP				  ;NOW RETURN

ADJ_STUFF
	movk	1,a1			  ;Indicate 2 puny lines (for our big one)
	CALLR	ADJ_BOX 		  ;DRAW THE BOX....PASS BACK 1ST PLOT LINE
	MOVE	*A8(AD_CMOS),A0,W	  ;GET ADJUSTMENT NUMBER
	CALLR	GET_EADJ		  ;FETCH THE CURRENT VALUE.

	jruc	PUT_IN_RANGE		  ;IF ITS OUT OF RANGE, FIX IT!

DO_BIG_LINE
	MMTM	A12,A10,A11,A8	     ;SAVE STUFF FOR CALLER
	MOVE	A11,A6
	MOVI	AM_HX,A9,W	     ;GET LEFT X
	CALLR	LEFT_TO_CENTER	     ;CONVERT IT
	SLL	16,A10		     ;SHIFT Y DOWN
	MOVY	A10,A9		     ;X,Y SET
	MOVE	A2,A8		     ;TEXT POINTER
	CLR	A0		     ;NO SLEEP
	MOVI	SPACING20,A10
	MOVI	RD7FONT,A11
	JSRP	STRCNRM 	     ;DO IT!
	MMFM	A12,A10,A11,A8	     ;POP THE STUFF.
	RETP

GET_EADJ
	MMTM	SP,A1
	CALLA	GET_ADJ 	     ;FETCH THE ADJUSTMENT
	JRNZ	GET_EA1 	     ;ITS NOT ZERO....RETURN
	MOVE	*A8(AD_ZEQU),A1,L    ;IS THERE A SUB VALUE?
	JRZ	GET_EA1 	     ;NOPE...RETURN THE ZERO (AND FLAG)

	MOVE	A1,A0		     ;RETURN THE SUBSTITUTE VALUE
GET_EA1
	MMFM	SP,A1
	RETS

PUT_IN_RANGE:
	MMTM	SP,A1,A2,A3
	MOVE	*A8(AD_MIN),A1,L	  ;GET MINIMUM
	MOVE	*A8(AD_MAX),A2,L	  ;GET MAXIMUM
	MOVE	*A8(AD_FLAGS),A3,W	  ;ARE WE WRAPPING AROUND
	BTST	WRAP_BIT,A3		  ;WELL?
	JRNZ	CK_WRAP 		  ;YEP....USE A FANCY HANDLER.

	CMP	A1,A0			  ;ARE WE TOO LOW?
	JRHS	NOT_LO
USE_LO: 
	MOVE	A1,A0

NOT_LO: 
	CMPI	090000000H,A0		
	JRHI	USE_LO			  ;USE THE LOW VALUE!

	CMP	A2,A0
	JRLS	PIRX

USE_HI: 
	MOVE	A2,A0
	JRUC	PIRX
CK_WRAP:
	CMPI	090000000H,A0		  ;IN THIS RANGE, WE MUST HAVE WRAPPED DOWN
	JRHI	USE_HI			  ;SO USE HIGH VALUE

	CMP	A1,A0			  ;IS IT LOWER THAN LO?
	JRLO	USE_HI			  ;IT IS ....USE THE HIGH ONE.

	CMP	A2,A0			  ;IS IT TOO HIGH?
	JRHI	USE_LO			  ;IT IS....USE THE LOW ONE.

PIRX:	
	MMFM	SP,A1,A2,A3
	RETS

CADJ_BOX
	MMTM	SP,A4,A5,A0,A9
	MOVI	ADJ_CULY,A10
	JRUC	ADJ_ENT

PADJ_BOX
	MMTM	SP,A4,A5,A0,A9
	MOVI	ADJ_PULY,A10
	JRUC	ADJ_ENT
ADJ_BOX	MMTM	SP,A4,A5,A0,A9
	MOVI	ADJ_ULY,A10		 ;THIS IS TOP OF BOX
	CLR	A4

ADJ_ENT
	CMPI	2,A1
	JRNZ	ADJ_ENT_NORMAL
	MOVK	8,A5			; 1 LINER KLUDGE
	JRUC	ADJ_ENT_GO
ADJ_ENT_NORMAL
	MOVI	HELP_DY,A5		;DISTANCE PER ENTRY
	MPYU	A1,A5		    ;DISTANCE FOR ALL ENTRIES
ADJ_ENT_GO
	ADD	A4,A5			; FIX IT UP A LITTLE
	ADDI	HELP_Y_MARGIN+(MB_YWID*2)+HELP_YLO_MARGIN,A5


	MOVE	A10,A4			  ;MOVE Y OVER
	SLL	16,A4			  ;MAKE ROOM FOR X
	ADDI	AM_HX,A4		     ;PUT IN THE X...THIS IS UPPER LEFT!

	ADD	A10,A5			  ;ADD BASE TO OFFSET
	SLL	16,A5			  ;PUT IN Y POSITION
	ADDI	TIT_LRX,A5		  ;ADD IN THE X FOR THE CORNER
	ADDI	MB_YWID+HELP_Y_MARGIN,A10  ;Y OF 1ST ENTRY
	MOVI	COLOR_YELLOW,A9		  ;MAKE THESE BOXES YELLOW

	CALLA	STD_BORD
	MMFM	SP,A4,A5,A0,A9
	RETS

WH_BORD
	MMTM	SP,A9
	MOVI	COLOR_WHITE,A9
	CALLA	STD_BORD
	MMFM	SP,A9
	RETS
BINBCD	 MMTM	 SP,A1,A2,A3,A4,A5
	 CMPI	 99999999,A0		   ;ARE WE TOO BIG?
	 JRLS	 BBIR			   ;IN RANGE
	 MOVI	 99999999H,A0		   ;RETURN THE LARGEST NUMBER WE HAVE!
	 JRUC	 BB_RET

BBIR	 MOVK	 10,A1			   ;ALWAYS DIVIDE BY A0
	 CLR	 A5			   ;ACCUMULATE RESULT IN A5
	 CLR	 A4			   ;A4 HAS CURRENT SHIFT COUNT
	 MOVE	 A0,A3			   ;<A2><A3> HAS NUMERATOR
DO_BCD_AGAIN
	 CLR	 A2
	 DIVU	 A1,A2			   ;A2 HAS LEFTOVER...A3 HAS CURRENT DIGIT
	 SLL	 A4,A3			   ;SHIFT IT CORRECT NUMBER OF TIMES
	 ADD	 A3,A5			   ;ADD IT INTO RESULT REG
	 ADDK	 4,A4			   ;ADD 4 TO SHIFT COUNT
	 MOVE	 A2,A3			   ;REFRESH NUMERATOR
	 JRNZ	 DO_BCD_AGAIN

	 MOVE	 A5,A0			   ;PUT OUT RESULT
BB_RET	MMFM	SP,A1,A2,A3,A4,A5
	RETS

BCDBIN	MMTM	SP,A1,A2,A3,A4,A5	;WORK REGGIES.
	CLR	A2			;ACCUMULATE IN A2
	movk	1,a3			;Current factor is 1.
	movk	10,a4			;Save some movi insts later
	movk	16,a5			;Divide it down by 16 at a time
BCBLOOP MOVE	A0,A1			;DIVIDEND IN <A0><A1>
	JRZ	BCBDONE			;ALL UNITS EXHAUSTED!
	CLR	A0
	DIVU	A5,A0			;DIVIDE BY 10H...(REMAINDER IN A1)
	MPYU	A3,A1			;TIMES POSITION FACTOR
	ADD	A1,A2			;INTO ACCUMULATION REGISTER
	MPYU	A4,A3			;NEXT DIGIT IS WORTH 10 TIMES THIS ONE
	JRUC	BCBLOOP

BCBDONE MOVE	A2,A0			;RETURN RESULT IN A0
	MMFM	SP,A1,A2,A3,A4,A5	;WORK REGGIES.
	RETS



	.DATA
DO_PRICE
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	MESS_PRICE	     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_PRICE	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJPRICE	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	1		     ;MINIMUM VALUE
	.LONG	CS_ENTS 	     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	COIN_SET	     ;MESSAGE LIST USED FOR VALUES.
	.WORD	WRAP_VAL	     ;WRAP AROUND ON COIN MODES
	.LONG	0		     ;LIST OF MESSAGES FOR THIS ADJ.
	.LONG	MESS_PRICE	     ;POINTER TO HEADER MESSAGE

DO_MULT
	.LONG	MULT_ADJ 	     ;ROUTINE TO RUN
	.LONG	MESS_MULT
	.LONG	HELP_MULT
	.WORD	ADJPRICE	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	1		     ;MINIMUM VALUE
	.LONG	CS_ENTS 	     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	MULT_VAL	     ;Routine for showing current value
	.WORD	WRAP_VAL	     ;WRAP AROUND ON COIN MODES
	.LONG	0		     ;LIST OF MESSAGES FOR THIS ADJ.
	.LONG	MESS_MULT 

DO_PARAM
	.LONG	PRICE_ADJ	     ;ROUTINE TO RUN
	.LONG	MESS_PARAM	     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_PARAM	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJPRICE	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	1		     ;MINIMUM VALUE
	.LONG	CS_ENTS 	     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	PARAM_VAL	     ;Routine for showing current value
	.WORD	WRAP_VAL	     ;WRAP AROUND ON COIN MODES
	.LONG	0		     ;LIST OF MESSAGES FOR THIS ADJ.
	.LONG	MESS_PARAM	     ;POINTER TO HEADER MESSAGE


DO_CNTR
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	MESS_CNTR	     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_CNTR	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJCNTR 	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	1		     ;MINIMUM VALUE
	.LONG	3		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	LIST_1LINE	     ;MESSAGE LIST USED FOR VALUES.
	.WORD	0		     ;DON'T WRAP AROUND
	.LONG	LIST_CNTR	     ;JUST SHOW THE NUMBER
	.LONG	MESS_CNTR	     ;POINTER TO HEADER MESSAGE


DO_DIFF:
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	MESS_DIFF	     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_DIFF	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJDIFF 	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	1		     ;MINIMUM VALUE
	.LONG	10		      ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	LIST_1LINE	     ;MESSAGE LIST USED FOR VALUES.
	.WORD	0		     ;DON'T WRAP AROUND
	.LONG	LIST_DIFF	     ;LIST OF MESSAGES FOR THIS ADJ.
	.LONG	MESS_DIFF	     ;POINTER TO HEADER MESSAGE

DO_SPEEDS:
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	MESS_SPEEDS	     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_SPEEDS	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJSPEED 	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	1		     ;MINIMUM VALUE
	.LONG	5		      ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	LIST_1LINE	     ;MESSAGE LIST USED FOR VALUES.
	.WORD	0		     ;DON'T WRAP AROUND
	.LONG	LIST_SPEEDS	     ;LIST OF MESSAGES FOR THIS ADJ.
	.LONG	MESS_SPEEDS	     ;POINTER TO HEADER MESSAGE








DO_AMODE:
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	MESS_AMOD2	     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_AMODE	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJMUSIC	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	0		     ;MINIMUM VALUE
	.LONG	1		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	LIST_1LINE	     ;MESSAGE LIST USED FOR VALUES.
	.WORD	WRAP_VAL	     ;WRAP AROUND
	.LONG	LIST_AMODE	     ;LIST OF MESSAGES FOR THIS ADJ.
	.LONG	MESS_AMODE	     ;POINTER TO HEADER MESSAGE

DO_AHSRES:
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	MESS_HSR2	     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_AHSRES	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJHSRES	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	0		     ;MINIMUM VALUE
	.LONG	25000		     ;MAXIMUM VALUE
	.LONG	250		     ;MOVE UP AND DOWN BY 250'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	BIN_OR_MESS	     ;MESSAGE LIST USED FOR VALUES.
	.WORD	WRAP_VAL^HSR_VAL     ;WRAP AROUND AND RESET HSC IF TOUCHED
	.LONG	MESS_OFF	     ;LIST OF MESSAGES FOR THIS ADJ.
	.LONG	MESS_AHSRES	     ;POINTER TO HEADER MESSAGE

COINBITS:	EQU	WRAP_VAL+VIRG_VAL+SIX_VAL

DO_LCOIN:
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	M_LCU		     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_LCU	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJLMULT	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	0		     ;MINIMUM VALUE
	.LONG	99		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	JUST_BIN	     ;JUST SHOW THE NUMBER
	.WORD	COINBITS	     ;WRAP AROUND
	.LONG	0		     ;NO EXTRA INFO NEEDED
	.LONG	M_LCU		     ;POINTER TO HEADER MESSAGE

DO_CCOIN:
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	M_CCU		    ;POINTER TO HEADER MESSAGE
	.LONG	HELP_CCU	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJCMULT	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	0		     ;MINIMUM VALUE
	.LONG	99		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	JUST_BIN	     ;JUST SHOW THE NUMBER
	.WORD	COINBITS	     ;WRAP AROUND
	.LONG	0		     ;NO EXTRA INFO NEEDED
	.LONG	M_CCU		     ;POINTER TO HEADER MESSAGE

DO_RCOIN:
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	M_RCU		     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_RCU	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJRMULT	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	0		     ;MINIMUM VALUE
	.LONG	99		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	JUST_BIN	     ;JUST SHOW THE NUMBER
	.WORD	COINBITS	     ;WRAP AROUND
	.LONG	0		     ;NO EXTRA INFO NEEDED
	.LONG	M_RCU		     ;POINTER TO HEADER MESSAGE
DO_XCOIN:
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	M_XCU		     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_XCU	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJXMULT	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	0		     ;MINIMUM VALUE
	.LONG	99		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	JUST_BIN	     ;JUST SHOW THE NUMBER
	.WORD	COINBITS	     ;WRAP AROUND
	.LONG	0		     ;NO EXTRA INFO NEEDED
	.LONG	M_XCU		     ;POINTER TO HEADER MESSAGE

DO_TOTALIZER
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	M_TOTALIZER		     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_TOTALIZER	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJTOTALIZER	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	0		     ;MINIMUM VALUE
	.LONG	1		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	LIST_1LINE	     ;JUST SHOW THE NUMBER
	.WORD	WRAP_VAL	     ;WRAP AROUND
	.LONG	LIST_NOYES		     ;NO EXTRA INFO NEEDED
	.LONG	M_TOTALIZER		     ;POINTER TO HEADER MESSAGE

DO_LMULT
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	M_LMULT		     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_LMULT	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJLTOTMULT	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	0		     ;MINIMUM VALUE
	.LONG	99		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	JUST_BIN	     ;JUST SHOW THE NUMBER
	.WORD	COINBITS	     ;WRAP AROUND
	.LONG	0		     ;NO EXTRA INFO NEEDED
	.LONG	M_LMULT		     ;POINTER TO HEADER MESSAGE
DO_RMULT
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	M_RMULT		     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_RMULT	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJRTOTMULT	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	0		     ;MINIMUM VALUE
	.LONG	99		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	JUST_BIN	     ;JUST SHOW THE NUMBER
	.WORD	COINBITS	     ;WRAP AROUND
	.LONG	0		     ;NO EXTRA INFO NEEDED
	.LONG	M_RMULT		     ;POINTER TO HEADER MESSAGE
DO_CMULT
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	M_CMULT		     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_CMULT	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJCTOTMULT	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	0		     ;MINIMUM VALUE
	.LONG	99		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	JUST_BIN	     ;JUST SHOW THE NUMBER
	.WORD	COINBITS	     ;WRAP AROUND
	.LONG	0		     ;NO EXTRA INFO NEEDED
	.LONG	M_CMULT		     ;POINTER TO HEADER MESSAGE
DO_XMULT
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	M_XMULT		     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_XMULT	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJXTOTMULT	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	0		     ;MINIMUM VALUE
	.LONG	99		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	JUST_BIN	     ;JUST SHOW THE NUMBER
	.WORD	COINBITS	     ;WRAP AROUND
	.LONG	0		     ;NO EXTRA INFO NEEDED
	.LONG	M_XMULT		     ;POINTER TO HEADER MESSAGE

DO_DBVMULT
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	M_DBVMULT		     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_BMULT	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJBTOTMULT	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	0		     ;MINIMUM VALUE
	.LONG	99		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	JUST_BIN	     ;JUST SHOW THE NUMBER
	.WORD	COINBITS	     ;WRAP AROUND
	.LONG	0		     ;NO EXTRA INFO NEEDED
	.LONG	M_DBVMULT		     ;POINTER TO HEADER MESSAGE

DO_DBV:
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	M_DBV		     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_DBV	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJDBVMULT	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	0		     ;MINIMUM VALUE
	.LONG	99		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	JUST_BIN	     ;JUST SHOW THE NUMBER
	.WORD	COINBITS	     ;WRAP AROUND
	.LONG	0		     ;NO EXTRA INFO NEEDED
	.LONG	M_DBV		     ;POINTER TO HEADER MESSAGE

DO_UC:	
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	M_UC		     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_UC 	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJCUNIT	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	1		     ;MINIMUM VALUE
	.LONG	99		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	JUST_BIN	     ;JUST SHOW THE NUMBER
	.WORD	COINBITS	     ;WRAP AROUND
	.LONG	0		     ;NO EXTRA INFO NEEDED
	.LONG	M_UC		     ;POINTER TO HEADER MESSAGE

DO_UB:	
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	M_UB		     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_UB 	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJBUNIT	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	0		     ;MINIMUM VALUE
	.LONG	99		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	BIN_OR_MESS	     ;JUST SHOW THE NUMBER
	.WORD	COINBITS	     ;WRAP AROUND
	.LONG	M_NOBONUS	     ;NO EXTRA INFO NEEDED
	.LONG	M_UB		     ;POINTER TO HEADER MESSAGE

DO_UM:	
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	M_UM2		     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_UM 	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJMUNIT	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	0		     ;MINIMUM VALUE
	.LONG	99		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	BIN_OR_MESS	     ;JUST SHOW THE NUMBER
	.WORD	COINBITS	     ;WRAP AROUND
	.LONG	M_NOMIN 	     ;NO EXTRA INFO NEEDED
	.LONG	M_UM		     ;POINTER TO HEADER MESSAGE

CREDBITS:	EQU	VIRG_VAL

DO_CST: 
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	M_CST		     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_CS 	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJCSTRT	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	1		     ;MINIMUM VALUE
	.LONG	4		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	JUST_BIN	    ;JUST SHOW THE NUMBER
	.WORD	COINBITS	     ;WRAP AROUND
	.LONG	0		     ;NO EXTRA INFO NEEDED
	.LONG	M_CST		     ;POINTER TO HEADER MESSAGE

DO_CONT:
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	M_CONT2 	      ;POINTER TO HEADER MESSAGE
	.LONG	HELP_CC 	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJCCONT	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	1		     ;MINIMUM VALUE
	.LONG	4		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	JUST_BIN	     ;JUST SHOW THE NUMBER
	.WORD	COINBITS	     ;WRAP AROUND
	.LONG	0		     ;NO EXTRA INFO NEEDED
	.LONG	M_CONT		     ;POINTER TO HEADER MESSAGE

DO_CRFR:
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	M_CRFR2 	     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_CRFR	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJFRAC 	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	0		     ;MINIMUM VALUE
	.LONG	1		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	LIST_1LINE	     ;MESSAGE LIST USED FOR VALUES.
	.WORD	WRAP_VAL	     ;WRAP AROUND
	.LONG	LIST_NOYES	     ;LIST OF MESSAGES FOR THIS ADJ.
	.LONG	M_CRFR		     ;POINTER TO HEADER MESSAGE

DO_CPD: 
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	M_CPD		     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_CPD	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJCDIV 	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	0		     ;MINIMUM VALUE
	.LONG	20		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	BIN_OR_MESS		;JUST SHOW THE NUMBER
	.WORD	0		     ;NO WRAP AROUND
	.LONG	M_NO_COL	     ;NO EXTRA INFO NEEDED
	.LONG	M_CPD		     ;POINTER TO HEADER MESSAGE

DO_MAX: 
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	M_MAX		     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_MAX	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJMAXC 	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	5		     ;MINIMUM VALUE
	.LONG	99		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	JUST_BIN	     ;JUST SHOW THE NUMBER
	.WORD	WRAP_VAL	     ;WRAP AROUND
	.LONG	0		     ;NO EXTRA INFO NEEDED
	.LONG	M_MAX		     ;POINTER TO HEADER MESSAGE

DO_FREE:
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	MESS_FREE	     ;POINTER TO HEADER MESSAGE
	.LONG	HELP_FREE	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJFREPL	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	0		     ;MINIMUM VALUE
	.LONG	1		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 250'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	LIST_1LINE	     ;MESSAGE LIST USED FOR VALUES.
	.WORD	WRAP_VAL	     ;WRAP AROUND
	.LONG	LIST_NOYES	     ;LIST OF MESSAGES FOR THIS ADJ.
	.LONG	MESS_FREE	     ;POINTER TO HEADER MESSAGE

DO_CTIT:
	.LONG	GEN_ADJ 	     ;ROUTINE TO RUN
	.LONG	MESS_CTIT	     ;POINTER TO HEADER MESSAGE
	.LONG	CTIT_HELP	     ;POINTER TO HELP MESSAGES FOR RIGHT SIDE
	.WORD	ADJNOCPAG	     ;CMOS ADJUSTMENT WE'RE SETTING
	.LONG	0		     ;MINIMUM VALUE
	.LONG	1		     ;MAXIMUM VALUE
	.LONG	1		     ;MOVE UP AND DOWN BY 1'S
	.LONG	0		     ;DON'T SUB ZERO FOR ANY
	.LONG	LIST_1LINE	     ;MESSAGE LIST USED FOR VALUES.
	.WORD	WRAP_VAL	     ;WRAP AROUND
	.LONG	LIST_YESNO	     ;LIST OF MESSAGES FOR THIS ADJ.
	.LONG	MESS_CTIT	     ;POINTER TO HEADER MESSAGE

AM_BDY	EQU	-2
AM_WID	EQU	0A7H
AM_X	EQU	TIT_ULX+GAP+MB_XWID+(AM_WID/2)+C_KLUDGE
AM_Y	EQU	INST_LRY+BOX_YGAP+MB_YWID+GAP-AM_BDY
AM_RX	EQU	TIT_ULX+(2*GAP)+AM_WID+(2*MB_XWID)
AM_HX	EQU	AM_RX+BOX_XGAP

MEN_ADJ:
	.LONG	RD7FONT 	;FONT
	.LONG	STRCNRM 	;CENTER PLEASE
	.LONG	M_GADJ		;TITLE
	.WORD	COLOR_WHITE    ;COLOR OF TITLE
	.WORD	AM_X		;UL X
	.WORD	AM_Y		;UL Y
	.WORD	12
	.WORD	COLOR_WHITE     ;COLOR WHEN NOT SELECTED
	.WORD	12		;HEIGHT OF SELECTION BAR
	.WORD	AM_BDY		;DISTANCE OF BAR FROM TOP OF TEXT (NEGATIVE)
	.WORD	BAR_DX		;EXTRA X ON EACH SIDE.
	.WORD	AM_WID		;WIDTH OF BAR!
	.WORD	COLOR_DECAY     ;TEXT COLOR OF SELECTED ITEM
	.LONG	MESS_MM,0,BLNK_HELP	   ;RETURN TO MAIN MENU
	.LONG	MESS_PRICE,DO_PRICE,ADJ_HELP
	.LONG	MESS_MULT,DO_MULT,ADJ_HELP
	.LONG	MESS_PARAM,DO_PARAM,ADJ_HELP
	.LONG	MESS_FREE,DO_FREE,ADJ_HELP	;FREE PLAY
	.LONG	MESS_DIFF,DO_DIFF,ADJ_HELP
	.LONG	MESS_SPEEDS,DO_SPEEDS,ADJ_HELP
	.LONG	MESS_AMODE,DO_AMODE,ADJ_HELP
	.LONG	MESS_MM,0,BLNK_HELP	   ;RETURN TO MAIN MENU
	.LONG	0		;END

MEN_CUST:
	.LONG	RD7FONT 		;FONT
	.LONG	STRCNRM 		;CENTER PLEASE
	.LONG	M_CUSPRI		;TITLE
	.WORD	COLOR_BLUE		;COLOR OF TITLE
	.WORD	AM_X			;UL X
	.WORD	AM_Y			;UL Y
	.WORD	11			;VERTICAL SPACING
	.WORD	COLOR_BLUE		;COLOR WHEN NOT SELECTED
	.WORD	12			;HEIGHT OF SELECTION BAR
	.WORD	AM_BDY			;DISTANCE OF BAR FROM TOP OF TEXT (NEGATIVE)
	.WORD	BAR_DX			;EXTRA X ON EACH SIDE.
	.WORD	AM_WID			;WIDTH OF BAR!
	.WORD	COLOR_DECAY		;TEXT COLOR OF SELECTED ITEM
	.LONG	MESS_AM,0,BLNK_HELP	;RETURN TO MAIN MENU
	.LONG	M_LCU,DO_LCOIN,ADJ_HELP	;LEFT SLOT UNITS
	.LONG	M_RCU,DO_RCOIN,ADJ_HELP	;RIGHT SLOT UNITS
	.LONG	M_CCU,DO_CCOIN,ADJ_HELP	;CENTER SLOT UNITS
	.LONG	M_XCU,DO_XCOIN,ADJ_HELP	;RIGHT SLOT UNITS
	.LONG	M_DBV,DO_DBV,ADJ_HELP	;DOLLAR BILL VALIDATOR
	.LONG	M_UC,DO_UC,ADJ_HELP	;UNITS FOR CREDIT
	.LONG	M_UB,DO_UB,ADJ_HELP	;UNITS FOR BONUS
	.LONG	M_UM,DO_UM,ADJ_HELP	;MINIMUM UNITS
	.LONG	M_CST,DO_CST,ADJ_HELP	;CREDITS REQUIRED TO START
	.LONG	M_CONT,DO_CONT,ADJ_HELP		;CREDITS REQUIRED TO CONTINUE
	.LONG	MESS_CTIT,DO_CTIT,ADJ_HELP	;COIN PAGE HELP LINE
	.LONG	M_CRFR,DO_CRFR,ADJ_HELP		;SHOW CREDIT FRACTIONS
	.LONG	M_CPD,DO_CPD,ADJ_HELP		;COINS PER DOLLAR
	.LONG	M_MAX,DO_MAX,ADJ_HELP		;MAXIMUM CREDITS
	.LONG	0

MEN_MULT:
	.LONG	RD7FONT 		;FONT
	.LONG	STRCNRM 		;CENTER PLEASE
	.LONG	M_MULT  		;TITLE
	.WORD	COLOR_BLUE		;COLOR OF TITLE
	.WORD	AM_X			;UL X
	.WORD	AM_Y			;UL Y
	.WORD	11			;VERTICAL SPACING
	.WORD	COLOR_BLUE		;COLOR WHEN NOT SELECTED
	.WORD	12			;HEIGHT OF SELECTION BAR
	.WORD	AM_BDY			;DISTANCE OF BAR FROM TOP OF TEXT (NEGATIVE)
	.WORD	BAR_DX			;EXTRA X ON EACH SIDE.
	.WORD	AM_WID			;WIDTH OF BAR!
	.WORD	COLOR_DECAY		;TEXT COLOR OF SELECTED ITEM
	.LONG	MESS_AM,0,BLNK_HELP	;RETURN TO MAIN MENU
	.LONG	M_TOTALIZER,DO_TOTALIZER,ADJ_HELP
	.LONG	M_LMULT,DO_LMULT,ADJ_HELP	;LEFT SLOT UNITS
	.LONG	M_RMULT,DO_RMULT,ADJ_HELP	;LEFT SLOT UNITS
	.LONG	M_CMULT,DO_CMULT,ADJ_HELP	;LEFT SLOT UNITS
	.LONG	M_XMULT,DO_XMULT,ADJ_HELP	;LEFT SLOT UNITS
	.LONG	M_DBVMULT,DO_DBVMULT,ADJ_HELP	;LEFT SLOT UNITS
	.LONG	0
M_MULT
	.STRING 	"CUSTOM MULTIPLIERS"
	.BYTE	  0
	.EVEN

M_GADJ	
	.STRING 	"GAME ADJUSTMENT"
	.BYTE	  0
	.EVEN

M_CUSPRI:
	.STRING 	"CUSTOM PRICING"
	.BYTE	  0
	.EVEN

MESS_FREE:	
	.STRING "FREE PLAY"
	.BYTE 0
	.EVEN

MESS_PRICE:
	.STRING "STANDARD PRICING"
	.BYTE 0
	.EVEN
MESS_MULT:
	.STRING "CUSTOM MULTIPLIERS"
	.BYTE 0
	.EVEN
MESS_PARAM:
	.STRING "CUSTOM PRICING"
	.BYTE 0
	.EVEN
MESS_DIFF:
	.STRING "GAME DIFFICULTY"
	.BYTE 0
	.EVEN
MESS_SPEEDS:
	.string	"AVERAGE GAME TIME",0
	.even

MESS_CNTR:
	.STRING "COIN COUNTER MODE"
	.BYTE 0
	.EVEN
MESS_CTIT:
	.STRING "COIN PAGE HELP"
	.BYTE 0
	.EVEN
MESS_AMODE:	
	.STRING "ATTRACT-MODE SOUND"   ;FOR MENU
	.BYTE 0
	.EVEN
MESS_AMOD2:	
	.STRING "A-MODE SOUND"	      ;FOR TITLE BOX (SHORTER VER.)
	.BYTE 0
	.EVEN
MESS_AHSRES:	
	.STRING "AUTO HIGH SCORE RESET"    ;FOR MENU
	.BYTE 0
	.EVEN
MESS_HSR2:
	.STRING "AUTO H.S. RESET"
	.BYTE 0
	.EVEN


M_LCU:	
	.STRING "LEFT CHUTE (1) UNITS"
	.BYTE 0
	.EVEN
M_CCU:	
	.STRING "CHUTE (3) UNITS"
	.BYTE 0
	.EVEN
M_RCU:	
	.STRING "RIGHT CHUTE (2) UNITS"
	.BYTE 0
	.EVEN
M_XCU:	
	.STRING "CHUTE (4) UNITS"
	.BYTE 0
	.EVEN
M_TOTALIZER
	.STRING "TOTALIZER MODE"
	.BYTE 0
	.EVEN
M_LMULT
	.STRING "CHUTE 1 TOTALIZER"
	.BYTE 0
	.EVEN
M_RMULT
	.STRING "CHUTE 2 TOTALIZER"
	.BYTE 0
	.EVEN
M_CMULT
	.STRING "CHUTE 3 TOTALIZER"
	.BYTE 0
	.EVEN
M_XMULT
	.STRING "CHUTE 4 TOTALIZER"
	.BYTE 0
	.EVEN
M_DBVMULT
	.STRING "DBV TOTALIZER"
	.BYTE 0
	.EVEN
M_DBV:	
	.STRING "DBV UNITS"
	.BYTE 0
	.EVEN
M_UC:	
	.STRING "UNITS / CREDIT"
	.BYTE 0
	.EVEN
M_UB:	
	.STRING "UNITS / BONUS"
	.BYTE 0
	.EVEN
M_UM:	
	.STRING "MIN. UNITS REQUIRED"
	.BYTE 0
	.EVEN
M_UM2:	
	.STRING  "MINIMUM UNITS"
	.BYTE 0
	.EVEN
M_CST:	
	.STRING "CREDITS TO START"
	.BYTE 0
	.EVEN
M_CONT: 
	.STRING "CREDITS TO CONTINUE"
	.BYTE 0
	.EVEN
M_CONT2:
	.STRING "CRED. TO CONTINUE"
	.BYTE 0
	.EVEN
M_CRFR: 
	.STRING "SHOW CREDIT FRACTIONS"
	.BYTE 0
	.EVEN
M_CRFR2:
	.STRING "CREDIT FRACTIONS"
	.BYTE 0
	.EVEN
M_CPD:	
	.STRING "COINS PER BILL"
	.BYTE 0
	.EVEN
M_MAX:	
	.STRING "MAXIMUM CREDITS"
	.BYTE 0
	.EVEN
MESS_AM:
	.STRING "RETURN TO ADJ. MENU"
	.BYTE 0
	.EVEN
ADJT_Y	EQU	INST_ULY+9		  ;CENTER IN THE BOX
ADJT_SETUP:
	MESS_MAC  RD7FONT,SPACING20,200,ADJT_Y,COLOR_LF,STRCNRM,0

CSET_Y	EQU	CUR_ULY+7
	.EVEN

MOC_Y1	 EQU	 CSET_Y+20
MOC_Y2	 EQU	 MOC_Y1+10
MOC_Y3	 EQU	 MOC_Y2+10

MESS_OPEN_OR_CANCEL
	 MESS_MAC  RD7FONT,SPACING20,AM_X,MOC_Y1,COLOR_LF,STRCNRM,0
	 .STRING   "OPEN COIN DOOR, OR"
	 .BYTE	 0,1
	 .EVEN
	 MESS_MAC  RD7FONT,SPACING20,AM_X,MOC_Y2,COLOR_LF,STRCNRM,0
	 .STRING   "PRESS ANY BUTTON"
	 .BYTE	 0,1
	 .EVEN
	 MESS_MAC  RD7FONT,SPACING20,AM_X,MOC_Y3,COLOR_LF,STRCNRM,0
	 .STRING   "TO CANCEL"
	 .BYTE	 0,0
	 .EVEN

IN_Y1	 EQU	 CUR_ULY+32
IN_Y2	 EQU	 IN_Y1+12
IN_Y3	 EQU	 IN_Y2+39
IN_Y4	 EQU	 IN_Y3+12

INST_TO_ADJ
	  MESS_MAC  RD7FONT,SPACING07,AM_X,IN_Y1,COLOR_WHITE,STRCNRM,0
	 .STRING   "MODIFY VALUE WITH"
	 .BYTE	 0,1
	 .EVEN
	  MESS_MAC  RD7FONT,SPACING07,AM_X,IN_Y2,COLOR_WHITE,STRCNRM,0
	 .STRING   "ANY STICK"
	 .BYTE	 0,1
	 .EVEN
	 MESS_MAC  RD7FONT,SPACING07,AM_X,IN_Y3,COLOR_WHITE,STRCNRM,0
	 .STRING   "PRESS ANY BUTTON"
	 .BYTE	 0,1
	 .EVEN
	 MESS_MAC  RD7FONT,SPACING07,AM_X,IN_Y4,COLOR_WHITE,STRCNRM,0
	 .STRING   "WHEN VALUE IS CORRECT."
	 .BYTE	 0,0
	 .EVEN
ADNOW_Y1 EQU	 CUR_ULY-35
ADNOW_Y2 EQU	 ADNOW_Y1+12

MES_ADJUSTING
	 MESS_MAC  RD7FONT,SPACING07,AM_X,ADNOW_Y1,COLOR_LF,STRCNRM,0
	 .STRING   "ADJUSTING"
	 .BYTE	 0,0
	 .EVEN

MES_ADNAME
	 MESS_MAC  RD7FONT,SPACING07,AM_X,ADNOW_Y2,COLOR_LF,STRCNRM,0

INSTR_Y  EQU	 INST_ULY+5
INSTR_2Y EQU	 INSTR_Y+10

ADJ_ADV
	  MESS_MAC  RD7FONT,SPACING07,AM_X,INSTR_Y,COLOR_BPR,STRCNRM,0
	 .STRING   "SELECT WITH ANY STICK"
	 .BYTE	 0,1
	 .EVEN
	 MESS_MAC  RD7FONT,SPACING07,AM_X,INSTR_2Y,COLOR_BPR,STRCNRM,0
	 .STRING   "PRESS A BUTTON TO MODIFY"
	 .BYTE	 0,0
	 .EVEN

AAY	 EQU	 IN_Y1+19H

ADJ_ARROW
	 MESS_MAC  RD7FONT,0FFFDH,AM_X,AAY,COLOR_LF,STRCNRM,0
	 .STRING   "----->    ----->    ----->    ----->    ----->"
	 .BYTE	 0,0
	 .EVEN


MESS_TAMPERED
	 .STRING "CUSTOM"
	 .BYTE	 0
	 .EVEN

MESS_DIP
	.STRING	"DIPSWITCH",0
	.EVEN

M_MULTVAL
	 .STRING "MULTIPLIER VALUES"
	 .BYTE	 0
	 .EVEN
M_MULTVAL1
	 .STRING "CHUTE 1 MULTIPLIER : "
	 .BYTE	 0
	 .EVEN
M_MULTVAL2
	 .STRING "CHUTE 2 MULTIPLIER : "
	 .BYTE	 0
	 .EVEN
M_MULTVAL3
	 .STRING "CHUTE 3 MULTIPLIER : "
	 .BYTE	 0
	 .EVEN
M_MULTVAL4
	 .STRING "CHUTE 4 MULTIPLIER : "
	 .BYTE	 0
	 .EVEN
M_MULTVAL5
	 .STRING "VALIDATOR MULTIPLIER : "
	 .BYTE	 0
	 .EVEN


M_SLOTVAL
	 .STRING "S1     S2     S3     S4     DBV"
	 .BYTE	 0
	 .EVEN

MESS_GP  .STRING "GAME PRICING:"
	 .BYTE	 0
	 .EVEN
MESS_FP  .STRING "FREE PLAY:"
	 .BYTE	 0
	 .EVEN
MESS_MAX .STRING "MAXIMUM CREDITS:"
	 .BYTE	 0
	 .EVEN

M_CTS_PL	 .STRING "CREDITS TO START:"
	 .BYTE 0
	 .EVEN
M_CTC_PL	 .STRING "CREDITS TO CONTINUE:"
	 .BYTE 0
	 .EVEN

HELP_DIFF
	 .WORD	 1		 ;CENTER JUSTIFY
	 .WORD	 COLOR_BLUE	;COLOR
	 .WORD	 6		 ;6 ENTRIES
	 .LONG	 DH_0
	 .LONG	 DH_1
	 .LONG	 M_NULL
	 .LONG	 DH_3
	 .LONG	 DH_4
	 .LONG	 DH_5
HELP_SPEEDS
	 .WORD	 1		 ;CENTER JUSTIFY
	 .WORD	 COLOR_BLUE	;COLOR
	 .WORD	 6		 ;6 ENTRIES
	 .LONG	 SH_0
	 .LONG	 SH_1
	 .LONG	 M_NULL
	 .LONG	 SH_3
	 .LONG	 SH_4
	 .LONG	 SH_5

HELP_CNTR
	 .WORD	 1		 ;CENTER JUSTIFY
	 .WORD	 COLOR_BLUE	;COLOR
	 .WORD	 6		 ;6 ENTRIES
	 .LONG	 CNTRH_0
	 .LONG	 CNTRH_1
	 .LONG	 M_NULL
	 .LONG	 CNTRH_3
	 .LONG	 CNTRH_4
	 .LONG	 CNTRH_5

HELP_PRICE
	 .WORD	 0		 ;CENTER JUSTIFY
	 .WORD	 COLOR_BLUE	;COLOR
	 .WORD	 4		 ;5 ENTRIES
	 .LONG	 PH_0
	 .LONG	 PH_1
	 .LONG	 PH_2
	 .LONG	 PH_3

HELP_MULT
	 .WORD	 0		 ;CENTER JUSTIFY
	 .WORD	 COLOR_BLUE	;COLOR
	 .WORD	 3		 ;5 ENTRIES
	 .LONG	 MH_0
	 .LONG	 MH_1
	 .LONG	 MH_2

HELP_DIP
	.WORD	0	      ;CENTER JUSTIFY
	.WORD	COLOR_RED	;COLOR
	.WORD	3
	.LONG	DIH_0
	.LONG	DIH_1
	.LONG	DIH_2

HELP_PARAM
	 .WORD	 0		 ;CENTER JUSTIFY
	 .WORD	 COLOR_BLUE	;COLOR
	 .WORD	 6		 ;5 ENTRIES
	 .LONG	 PP_0
	 .LONG	 PP_1
	 .LONG	 PP_2
	 .LONG	 PP_3
	 .LONG	 PP_4
	 .LONG	 PP_5






HELP_AMODE
	 .WORD	 0		 ;CENTER JUSTIFY
	 .WORD	 COLOR_BLUE	;COLOR
	 .WORD	 5		 ;6 ENTRIES
	 .LONG	 HAM_1
	 .LONG	 HAM_2
	 .LONG	 HAM_3
	 .LONG	 M_NULL
	 .LONG	 HAM_4

HELP_AHSRES
	 .WORD	 0		 ;CENTER JUSTIFY
	 .WORD	 COLOR_BLUE	;COLOR
	 .WORD	 6		 ;6 ENTRIES
	 .LONG	 HAH_1
	 .LONG	 HAH_2
	 .LONG	 HAH_3
	 .LONG	 HAH_4
	 .LONG	 M_NULL
	 .LONG	 HAH_5

HELP_FREE
	 .WORD	 0
	 .WORD	 COLOR_BLUE
	 .WORD	 6
	 .LONG	 FP_M1
	 .LONG	 FP_M2
	 .LONG	 FP_M3
	 .LONG	 FP_M4
	 .LONG	 M_NULL
	 .LONG	 FP_M5

CTIT_HELP
	 .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 5
	 .LONG	 CT_M1
	 .LONG	 CT_M2
	 .LONG	 CT_M3
	 .LONG	 CT_M4
	 .LONG	 CT_M5

HELP_LCU
	 .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 6
	 .LONG	 LC_M1
	 .LONG	 LC_M2
	 .LONG	 LC_M3
	 .LONG	 LC_M4
	 .LONG	 LC_M5
	 .LONG	 LC_M6

HELP_CCU
	 .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 6
	 .LONG	 LC_M1
	 .LONG	 LC_M2
	 .LONG	 LC_M3
	 .LONG	 LC_M4
	 .LONG	 CC_M5
	 .LONG	 LC_M6

HELP_RCU
	 .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 6
	 .LONG	 LC_M1
	 .LONG	 LC_M2
	 .LONG	 LC_M3
	 .LONG	 LC_M4
	 .LONG	 RC_M5
	 .LONG	 LC_M6
HELP_XCU
	 .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 6
	 .LONG	 LC_M1
	 .LONG	 LC_M2
	 .LONG	 LC_M3
	 .LONG	 LC_M4
	 .LONG	 XC_M5
	 .LONG	 LC_M6

HELP_LMULT
	 .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 3
	 .LONG	 MZ_M1
	 .LONG	 MZ_M2
	 .LONG	 MZ_C1

HELP_RMULT
	 .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 3
	 .LONG	 MZ_M1
	 .LONG	 MZ_M2
	 .LONG	 MZ_C2

HELP_CMULT
	 .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 3
	 .LONG	 MZ_M1
	 .LONG	 MZ_M2
	 .LONG	 MZ_C3

HELP_XMULT
	 .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 3
	 .LONG	 MZ_M1
	 .LONG	 MZ_M2
	 .LONG	 MZ_C4

HELP_BMULT
	 .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 3
	 .LONG	 MZ_M1
	 .LONG	 MZ_M2
	 .LONG	 MZ_DB

HELP_TOTALIZER
	 .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 3
	 .LONG	 MR_M1
	 .LONG	 MR_M2
	 .LONG	 MR_M3
HELP_DBV
	 .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 6
	 .LONG	 LC_M1
	 .LONG	 LC_M2
	 .LONG	 LC_M3
	 .LONG	 LC_M4
	 .LONG	 DBV_M5
	 .LONG	 LC_M6

HELP_UC  .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 3
	 .LONG	 UC_M1
	 .LONG	 UC_M2
	 .LONG	 UC_M3

HELP_UB  .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 3
	 .LONG	 UB_M1
	 .LONG	 UB_M2
	 .LONG	 UB_M3

HELP_UM  .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 3
	 .LONG	 UM_M1
	 .LONG	 UM_M2
	 .LONG	 UM_M3


HELP_CS  .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 3
	 .LONG	 CS_M1
	 .LONG	 CS_M2
	 .LONG	 CS_M3

HELP_CC  .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 3
	 .LONG	 CS_M1
	 .LONG	 CS_M2
	 .LONG	 CC_M3

HELP_CRFR
	 .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 6
	 .LONG	 FR_M1
	 .LONG	 FR_M2
	 .LONG	 FR_M3
	 .LONG	 M_NULL
	 .LONG	 FR_M4
	 .LONG	 FR_M5

HELP_CPD .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 6
	 .LONG	 CPD_M1
	 .LONG	 CPD_M2
	 .LONG	 CPD_M3
	 .LONG	 CPD_M4
	 .LONG	 CPD_M5
	 .LONG	 CPD_M6

HELP_MAX .WORD	 0
	 .WORD	 COLOR_WHITE
	 .WORD	 6
	 .LONG	 MC_M1
	 .LONG	 MC_M2
	 .LONG	 MC_M3
	 .LONG	 MC_M4
	 .LONG	 M_NULL
	 .LONG	 MC_M5


CNTRH_0     .STRING "THIS CONTROLS MECHANICAL"
	 .BYTE 0
	 .EVEN
CNTRH_1     .STRING "COIN COUNTER MODE"
	   .BYTE 0
	 .EVEN
CNTRH_3     .STRING "CNTR1 = MULT OF LOW COIN: 1"
	 .BYTE 0
	 .EVEN
CNTRH_4     .STRING "CNTR1 = 1 COUNT/COIN:     2"
	 .BYTE 0		
	 .EVEN
CNTRH_5     .STRING "CNTR1=LCOIN, CNTR2=RCOIN: 3"
	 .BYTE 0
	 .EVEN


DH_0	 .STRING "THIS CONTROLS THE OVERALL"
	 .BYTE 0
	 .EVEN
DH_1	 .STRING "DIFFICULTY OF GAME PLAY."
M_NULL	 .BYTE 0
	 .EVEN
DH_3	 .STRING "EASIEST  SETTING: 1"
	 .BYTE 0
	 .EVEN
DH_4	 .STRING "HARDEST SETTING: 10"
	 .BYTE 0
	 .EVEN
DH_5	 .STRING "FACTORY SETTING: 5"
	 .BYTE 0
	 .EVEN


SH_0	 .STRING "THIS CONTROLS SPEED OF CLOCK"
	 .BYTE 0
	 .EVEN
SH_1	 .STRING "AND ADJUSTS DAMAGE PER HIT."
	 .BYTE 0
	 .EVEN
SH_3	 .STRING "SLOWEST SETTING: 1"
	 .BYTE 0
	 .EVEN
SH_4	 .STRING "FASTEST SETTING: 5"
	 .BYTE 0
	 .EVEN
SH_5	 .STRING "FACTORY SETTING: 3"
	 .BYTE 0
	 .EVEN






MH_0	 .STRING "CUSTOMISE THE INTERNAL"
	 .BYTE 0
	 .EVEN
MH_1	 .STRING "COIN CHUTE MULTIPLIERS"
	 .BYTE 0
	 .EVEN
MH_2	 .STRING "FOR EACH CHUTE."
	 .BYTE 0
	 .EVEN

PH_0	 .STRING "SELECT BUILT-IN PRICING"
	 .BYTE 0
	 .EVEN
PH_1	 .STRING "MODE, SELECTING COINS"
	 .BYTE 0
	 .EVEN
PH_2	 .STRING "PER CREDIT, AND"
	 .BYTE 0
	 .EVEN
PH_3	 .STRING "COIN SLOT VALUE."
	 .BYTE 0
	 .EVEN

DIH_0	.STRING	"THIS OPTION IS BEING",0
	.EVEN
DIH_1	.STRING	"ADJUSTED FROM DIPSWITCH",0
	.EVEN
DIH_2	.STRING	"SETTINGS.",0
	.EVEN






HAM_1	 .STRING "THIS DETERMINES WHETHER"
	 .BYTE 0
	 .EVEN
HAM_2	 .STRING "THE GAME WILL MAKE SOUNDS"
	 .BYTE 0
	 .EVEN
HAM_3	 .STRING "IN THE ATTRACT MODE."
	 .BYTE 0
	 .EVEN
HAM_4	 .STRING "FACTORY SETTING: OFF"
	 .BYTE 0
	 .EVEN
HAH_1	 .STRING "THE ALL TIME HIGH SCORE"
	 .BYTE 0
	 .EVEN
HAH_2	 .STRING "TABLE WILL BE RESET TO"
	 .BYTE 0
	 .EVEN
HAH_3	 .STRING "FACTORY VALUES EACH TIME"
	 .BYTE 0
	 .EVEN
HAH_4	 .STRING "THIS MANY PLAYS OCCURS."
	 .BYTE 0
	 .EVEN
HAH_5	 .STRING "FACTORY SETTING: 5000"
	 .BYTE 0
	 .EVEN


FP_M1	 .STRING "SETTING FREE PLAY TO"
	 .BYTE 0
	 .EVEN
FP_M2	 .BYTE	 ASCII_DQ
	 .STRING "YES"
	 .BYTE	 ASCII_DQ
	 .STRING " ALLOWS UNLIMITED"
	 .BYTE 0
	 .EVEN
FP_M3	 .STRING "PLAY WITHOUT INSERTING"
	 .BYTE 0
	 .EVEN
FP_M4	 .STRING "ANY COINS."
	 .BYTE 0
	 .EVEN
FP_M5	 .STRING "FACTORY SETTING: NO"
	 .BYTE 0
	 .EVEN
CT_M1	 .STRING "WHENEVER STANDARD PRICING"
	 .BYTE 0
	 .EVEN
CT_M2	 .STRING "IS USED, A CORRESPONDING"
	 .BYTE 0
	 .EVEN
CT_M3	 .STRING "MESSAGE IS DISPLAYED ON THE"
	 .BYTE 0
	 .EVEN
CT_M4	 .STRING "CREDITS SCREEN.  SETTING THIS"
	 .BYTE 0
	 .EVEN
CT_M5	 .STRING "TO "
	 .BYTE ASCII_DQ
	 .STRING "NO"
	 .BYTE ASCII_DQ
	 .STRING " DISABLES THE MESSAGE."
	 .BYTE 0
	 .EVEN

PP_0	 .STRING "THIS ALLOWS ADJUSTMENT"
	 .BYTE 0
	 .EVEN
PP_1	 .STRING "OF PRICING PARAMETERS"
	 .BYTE 0
	 .EVEN
PP_2	 .STRING "(FOR NON-STANDARD MODES),"
	 .BYTE 0
	 .EVEN
PP_3	 .STRING "FREE PLAY, MAXIMUM CREDITS,"
	 .BYTE 0
	 .EVEN
PP_4	 .STRING "CREDITS REQUIRED TO START"
	 .BYTE 0
	 .EVEN
PP_5	 .STRING "AND CREDITS TO CONTINUE."
	 .BYTE 0
	 .EVEN


LC_M1	 .STRING "EACH COIN INSERTED ADDS TO"
	 .BYTE 0
	 .EVEN
LC_M2	 .STRING "COIN UNITS.  THIS ADJUSTMENT"
	 .BYTE 0
	 .EVEN
LC_M3	 .STRING "SPECIFIES THE NUMBER OF COIN"
	 .BYTE 0
	 .EVEN
LC_M4	 .STRING "UNITS GIVEN FOR EACH"
	 .BYTE 0
	 .EVEN
LC_M5	 .STRING "COIN IN LEFT COIN CHUTE."
	 .BYTE 0
	 .EVEN
LC_M6	 .STRING "(SEE "
	 .BYTE ASCII_DQ
	 .STRING "UNITS / CREDIT"
	 .BYTE ASCII_DQ
	 .STRING ")"
	 .BYTE 0
	 .EVEN
CC_M5	 .STRING "COIN IN THIRD COIN CHUTE."
	 .BYTE 0
	 .EVEN
RC_M5	 .STRING "COIN IN RIGHT COIN CHUTE."
	 .BYTE 0
	 .EVEN
XC_M5	 .STRING "COIN IN FOURTH COIN CHUTE."
	 .BYTE 0
	 .EVEN
MZ_M1	 .STRING "MODIFIY TOTALIZING"
	 .BYTE 0
	 .EVEN
MZ_M2	 .STRING "MULTIPLER VALUE FOR"
	 .BYTE 0
	 .EVEN
MZ_C1	 .STRING "CHUTE 1."
	 .BYTE 0
	 .EVEN
MZ_C2	 .STRING "CHUTE 2."
	 .BYTE 0
	 .EVEN
MZ_C3	 .STRING "CHUTE 3."
	 .BYTE 0
	 .EVEN
MZ_C4	 .STRING "CHUTE 4."
	 .BYTE 0
	 .EVEN

MR_M1	 .STRING "TOTALIZER MODE, EITHER."
	 .BYTE 0
	 .EVEN

MR_M2	 .STRING "STANDARD TOTALIZER MODE (NO)"
	 .BYTE 0
	 .EVEN

MR_M3	 .STRING "CUSTOM TOTALIZER MODE (YES)."
	 .BYTE 0
	 .EVEN

MZ_DB
DBV_M5	 .STRING "BILL VALIDATOR."
	 .BYTE 0
	 .EVEN
UC_M1	 .STRING "THIS IS THE NUMBER OF COIN"
	 .BYTE 0
	 .EVEN
UC_M2	 .STRING "UNITS REQUIRED TO BUY ONE"
	 .BYTE 0
	 .EVEN
UC_M3	 .STRING "CREDIT."
	 .BYTE 0
	 .EVEN
UB_M1	 .STRING "1 BONUS CREDIT IS AWARDED"
	 .BYTE 0
	 .EVEN
UB_M2	 .STRING "AFTER THIS MANY COIN UNITS"
	 .BYTE 0
	 .EVEN
UB_M3	 .STRING "HAVE ACCUMULATED."
	 .BYTE 0
	 .EVEN

UM_M1	 .STRING "NO CREDITS WILL BE AWARDED"
	 .BYTE 0
	 .EVEN
UM_M2	 .STRING "UNTIL THIS MANY COIN"
	 .BYTE 0
	 .EVEN
UM_M3	 .STRING "UNITS HAVE ACCUMULATED."
	 .BYTE 0
	 .EVEN

CS_M1	 .STRING "EACH PLAYER NEEDS THIS"
	 .BYTE 0
	 .EVEN
CS_M2	 .STRING "MANY CREDITS TO"
	 .BYTE 0
	 .EVEN
CS_M3	 .STRING "BEGIN PLAY."
	 .BYTE 0
	 .EVEN

CC_M3	 .STRING "CONTINUE A GAME."
	 .BYTE 0
	 .EVEN

FR_M1	 .STRING "WHEN SET TO YES,"
	 .BYTE 0
	 .EVEN
FR_M2	 .STRING "FRACTIONAL CREDITS WILL BE"
	 .BYTE 0
	 .EVEN
FR_M3	 .STRING "SEEN ON THE CREDITS SCREEN."
	 .BYTE 0
	 .EVEN
FR_M4	 .STRING "FRACTION SHOWN IS:"
	 .BYTE 0
	 .EVEN
FR_M5	 .STRING "(COIN UNITS / "
	 .BYTE ASCII_DQ
	 .STRING "UNITS/CREDIT"
	 .BYTE ASCII_DQ
	 .STRING ")"
	 .BYTE 0
	 .EVEN

CPD_M1	 .STRING "THE DETAILED BOOKKEEPING"
	 .BYTE 0
	 .EVEN
CPD_M2	 .STRING "SCREEN SHOWS TOTAL"
	 .BYTE 0
	 .EVEN
CPD_M3	 .STRING "COLLECTIONS BASED ON THIS"
	 .BYTE 0
	 .EVEN
CPD_M4	 .STRING "MANY COINS PER BILL."
	 .BYTE 0
	 .EVEN
CPD_M5	 .STRING "(SET TO ZERO TO DISABLE THE"
	 .BYTE 0
	 .EVEN
CPD_M6	 .STRING "DISPLAY OF MONEY TOTALS.)"
	 .BYTE 0
	 .EVEN

MC_M1	 .STRING "THIS IS THE LIMIT FOR"
	 .BYTE 0
	 .EVEN
MC_M2	 .STRING "THE CREDITS COUNTER."
	 .BYTE 0
	 .EVEN
MC_M3	 .STRING "ADDITIONAL COINS INSERTED"
	 .BYTE 0
	 .EVEN
MC_M4	 .STRING "WILL BE LOST."
	 .BYTE 0
	 .EVEN
MC_M5	 .STRING "FACTORY SETTING: 50"
	 .BYTE 0
	 .EVEN

LIST_CNTR	
	 .LONG	 CNTR_1,CNTR_2,CNTR_3
LIST_DIFF	
	 .LONG	 DIFF_1,DIFF_2,DIFF_3,DIFF_4,DIFF_5
	 .LONG	 DIFF_6,DIFF_7,DIFF_8,DIFF_9,DIFF_10

LIST_SPEEDS
	.long	SPEED_1,SPEED_2,SPEED_3
	.long	SPEED_4,SPEED_5




LIST_AMODE
	 .LONG	 M_AMS,M_NOAMS

LIST_NOYES
	 .LONG	 M_NO,M_YES

LIST_YESNO
	 .LONG	 M_YES,M_NO

LIST_DIPNOYES
	.LONG	M_DNO, M_DYES

M_NO	 .STRING "NO"
	 .BYTE	 0
	 .EVEN

M_YES	 .STRING "YES"
	 .BYTE	 0
	 .EVEN

M_DYES	.STRING	"DIPSWITCH - YES",0
	.EVEN

M_DNO	.STRING	"DIPSWITCH - NO",0
	.EVEN

CNTR_1	 .STRING "1 (PROPORTIONAL)"
	 .BYTE	 0
	 .EVEN
CNTR_2	 .STRING "2 (1 COUNT/COIN)"
	 .BYTE	 0
	 .EVEN
CNTR_3	 .STRING "3 (2 COUNTERS)"
	 .BYTE	 0
	 .EVEN

SPEED_1	.string	"1 (APPROX. 3:00)",0
	.even
SPEED_2	.string	"2 (APPROX. 2:00)",0
	.even
SPEED_3	.string	"3 (APPROX. 1:45)",0
	.even
SPEED_4	.string	"4 (APPROX. 1:30)",0
	.even
SPEED_5	.string	"5 (APPROX. 1:15)",0
	.even

N_4	.string	"4",0
N_5	.string	"5",0
N_6	.string	"6",0
N_7	.string	"7",0
N_8	.string	"8 (DEFAULT)",0
N_9	.string	"9",0
N_10	.string	"10",0
N_11	.string	"11",0
N_12	.string	"12",0
N_13	.string	"13",0
N_14	.string	"14",0
N_15	.string	"15",0
N_16	.string	"16",0
	.even


DIFF_1	 .STRING "1 (SUPER EASY)"
	 .BYTE	 0
	 .EVEN
DIFF_2	 .STRING "2 (EXTRA EASY)"
	 .BYTE	 0
	 .EVEN
DIFF_3	 .STRING "3 (VERY EASY)"
	 .BYTE	 0
	 .EVEN
DIFF_4	 .STRING "4 (EASY)"
	 .BYTE	 0
	 .EVEN
DIFF_5	 .STRING "5 (NORMAL)"
	 .BYTE	 0
	 .EVEN
DIFF_6	 .STRING "6 (HARD)"
	 .BYTE	 0
	 .EVEN
DIFF_7	 .STRING "7 (VERY HARD)"
	 .BYTE	 0
	 .EVEN
DIFF_8	 .STRING "8 (EXTRA HARD)"
	 .BYTE	 0
	 .EVEN
DIFF_9	 .STRING "9 (SUPER HARD)"
	 .BYTE	 0
	 .EVEN
DIFF_10	 .STRING "10 (IMPOSSIBLE)"
	 .BYTE	 0
	 .EVEN




M_AMS	 .STRING "ON"
	 .BYTE 0
	 .EVEN
M_NOAMS  .STRING "OFF"
	 .BYTE 0
	 .EVEN
MESS_OFF .STRING "OFF"
	 .BYTE 0
	 .EVEN

M_NOBONUS  .STRING "NO BONUS CREDIT"
	 .BYTE 0
	 .EVEN

M_NOMIN  .STRING "NO MINIMUM"
	 .BYTE 0
	 .EVEN

M_NO_COL .STRING "NO MONEY TOTALS"
	 .BYTE 0
	 .EVEN


	.end

