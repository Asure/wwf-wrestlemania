TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .file   "util.asm"
       3                            .width  132
       4                            .option b,d,l,t
       5                            .mnolist
       6                    
       7                            .include        "mproc.equ"
       8                            .include        "display.equ"
       9                            .include        "gsp.equ"
      10                            .include        "sys.equ"
      11                            .include        "game.equ"
      12                            .include        "audit.equ"
      13                            .include        "macros.h"
      14                    
      15                    
      16                    
      17                            .def    SCRCLR
      18                            .def    OBJOFF,OBJON
      19                            .def    STRLNRM,STRCNRM,STRCNRMO,STRLNRMO,STRCNRMO_1,CYCLE_TABLE
      20                            .def    STRCNRMO_2
      21                            .def    BLNKAREA
      22                            .def    FRANIM,FRANIMQ
      23                            .def    STRNGLEN
      24                            .def    STRRNRM,FILLAREA
      25                    
      26                            .DEF    SPECIAL_WIPEOUT
      27                    
      28                    
      29                            .ref    IGNORE_CHAR_WIDTH,debris_count,are_we_waiting_f
      30                            .ref    SPECIAL_DISPLAY_INIT,switches_cur,dirqtimer,pal_set
      31                            .ref    SYSCOPY,GET_ADJ,display_init,GAMSTATE,pal_find
      32                            .ref    pal_getf,dpageflip,SOUNDSUP,IRQSKYE,PSTATUS2,PALRAM
      33                            .ref    switches_down,gndstat,pal_init,BAKBITS,WFLG,WSPEED
      34                            .ref    COLRTEMP,ENDLESS_SOUND,get_but_val_cur,get_but_val_down
      35                            .ref    get_stick_val_cur,get_stick_val_down
      36                    
      37                    
      38                    
      39                            .def    STRNGRAM,HEXTOASC,GETANIX,WRLD
      40                            .def    COLCYC,CYCLE_TABLE,FLASHME
      41                    
      42                    
      43                    
      44 00000000                   BSSX    RAND            ,32             ;Last random #
      45 00000020                   .bss    STRNGRAM        ,20*16
      46 00000160                   .bss    WRLD            ,16
      47 00000000                   BSSX    LOWZ            ,16
      48                    
      49                    
      50 00000000                   .text
      51                    
      52                    
      53                    
      54                    
      55                    
      56 00000000            SUBR   ZERO_BITS
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE    2

      57                    
      58 00000000     5600          CLR     A0
      59 00000010     09c2          MOVI    10000/16,A2     ;SIZE OF BAKBITS IN WORDS
         00000020     0271  
      60 00000030     09e1          MOVI    BAKBITS,A1
         00000040 00000000! 
      61 00000060           KILUP
      62 00000060     9001          MOVE    A0,*A1+,W
      63 00000070     3c42          DSJS    A2,KILUP
      64 00000080     0960          RETS
      65                    
      66 00000090            SUBR   SPECIAL_WIPEOUT
      67 00000090     0d3f          CALLR   WIPEOUT2
         000000a0     000e  
      68 000000b0     c080          JAUC    SPECIAL_DISPLAY_INIT
         000000c0 00000000! 
      69                    
      70                    
      71 000000e0            SUBR   WIPEOUT
      72                    
      73 000000e0     0d3f          callr   dirq_wait
         000000f0     02fc  
      74                    
      75 00000100     0d5f          calla   display_init
         00000110 00000000! 
      76                    
      77 00000130     01e0          pushst
      78 00000140     0360          dint
      79 00000150     0d5f          calla   pal_init
         00000160 00000000! 
      80 00000180     01c0          POPST
      81                    
      82                    
      83 00000190            SUBR   WIPEOUT2
      84                    
      85                    
      86 00000190     5600          clr     a0
      87                    
      88 000001a0     0580          move    a0,@gndstat
         000001b0 00000000! 
      89 000001d0     0580          move    a0,@dtype
         000001e0 00000000! 
      90                    
      91 00000200     0580          move    a0,@are_we_waiting_f
         00000210 00000000! 
      92 00000230     0580          move    a0,@IGNORE_CHAR_WIDTH
         00000240 00000000! 
      93 00000260     0580          MOVE    A0,@ENDLESS_SOUND
         00000270 00000000! 
      94 00000290     0580          move    a0,@debris_count
         000002a0 00000000! 
      95                    
      96 000002c0     0580          move    a0,@WFLG
         000002d0 00000000! 
      97 000002f0     1a41          movk    OWSPD,a1
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE    3

      98 00000300     0581          move    a1,@WSPEED
         00000310 00000000! 
      99                    
     100 00000330     4c01          move    a0,a1
     101 00000340     0d5f          calla   KILALL                  ;Kill all processes
         00000350 00000000! 
     102                    
     103 00000370     0d3f          callr   ZERO_BITS
         00000380     ffc7  
     104 00000390     0d3f          callr   dpageflip_off
         000003a0     02f2  
     105 000003b0     5600          clr     a0
     106 000003c0     0580          move    a0,@SOUNDSUP            ;Allow sounds
         000003d0 00000000! 
     107 000003f0     0580          move    a0,@IRQSKYE
         00000400 00000000! 
     108                    
     109 00000420     01e0          pushst
     110 00000430     0360          dint
     111                    
     112 00000440     05a0          move    @SYSCOPY,a0             ;>Init sysctrl
         00000450 00000000! 
     113                    
     114                            .if     WWFUNIT
     115 00000470     09e1          movi    SYSCINIT,a1
         00000480 0000987f  
     116                            .else
     117                            srl     8,a0
     118                            sll     8,a0
     119                            movi    SYSCINIT&0ffH,a1                ;Don't touch 7seg LED
     120                            .endif
     121                    
     122 000004a0     5420          or      a1,a0
     123 000004b0     0580          move    a0,@SYSCOPY
         000004c0 00000000! 
     124 000004e0     0580          move    a0,@SYSCTRL
         000004f0 01b00000  
     125                    
     126 00000510     01c0          popst
     127                    
     128 00000520     0d3f          callr   dirq_wait               ;Now wait for vblank to zap color map
         00000530     02b8  
     129                    
     130                    
     131 00000540     0960          rets
     132                    
     133                    
     134 00000180                   .bss    sysstate_t      ,16*50          ;Mem for state save
     135 000004a0                   .bss    svproc_p        ,32             ;*Saved proc list
     136 000004c0                   .bss    pal_t           ,32*NMFPAL      ;Mem for pal save
     137                    
     138                    SSS     .macro  a
     139                            move    @:a:,*a1+
     140                            .endm
     141                    SSSL    .macro  a
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE    4

     142                            move    @:a:,*a1+,L
     143                            .endm
     144                    
     145 00000550            SUBR   system_savegame
     146                    
     147 00000550     09e1          movi    sysstate_t,a1
         00000560 00000180- 
     148                    
     149 00000580                   SSSL    OBJLST
     150 000005b0                   SSSL    BAKLST
     151 000005e0                   SSSL    WORLDTLX
     152 00000610                   SSSL    WORLDTLY
     153                    
     154 00000640                   SSS     IRQSKYE
     155 00000670                   SSSL    COLRTEMP
     156 000006a0                   SSS     dtype
     157 000006d0                   SSS     dpageflip
     158 00000700                   SSS     gndstat
     159                    
     160 00000730                   SSS     GAMSTATE
     161                    
     162                    
     163                    
     164 00000760     09e2          movi    ACTIVE,a2
         00000770 00000000! 
     165 00000790     09e4          movi    svproc_p,a4
         000007a0 000004a0- 
     166 000007c0     c009          jruc    apxhprnxt
     167                    
     168 000007d0     49a2  apxhprlp        cmp     a13,a2
     169 000007e0     ca07          jreq    apxhprnxt                       ;Me?
     170                    
     171 000007f0     b44e          move    *a2(PROCID),a14
         00000800     0020  
     172 00000810     ce04          jrn     apxhprnxt                       ;Indestructible?
     173                    
     174 00000820     8a43          move    *a2,*a3,L               ;Unlink
     175 00000830     8244          move    a2,*a4,L                ;Add it to save list
     176 00000840     4c44          move    a2,a4
     177 00000850     4c62          move    a3,a2
     178 00000860           apxhprnxt
     179 00000860     4c43          move    a2,a3
     180 00000870     8642          move    *a2,a2,L
     181 00000880     cbf4          jrnz    apxhprlp
     182                    
     183 00000890     5600          clr     a0
     184 000008a0     8203          move    a0,*a3,L
     185 000008b0     8204          move    a0,*a4,L
     186                    
     187 000008c0     0780          move    a0,@OBJLST,L            ;Null lists
         000008d0 00000000! 
     188 000008f0     0780          move    a0,@BAKLST,L
         00000900 00000000! 
     189 00000920     0580          move    a0,@gndstat
         00000930 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE    5

     190                    
     191 00000950     0d3f          callr   ZERO_BITS
         00000960     ff69  
     192                    
     193                    
     194 00000970     09e0          movi    PALRAM,a0               ;>Save pal ptrs
         00000980 00000000! 
     195 000009a0     09e1          movi    pal_t,a1
         000009b0 000004c0- 
     196 000009d0     09d0          movi    NMFPAL,b0
         000009e0     0050  
     197 000009f0     9a01  apxhplp move    *a0+,*a1+,L
     198 00000a00     3c50          dsj     b0,apxhplp
     199                    
     200 00000a10     0d5f          calla   pal_init
         00000a20 00000000! 
     201                    
     202 00000a40     0960          rets
     203                    
     204                    
     205                    
     206                    
     207                    
     208                    
     209                    
     210 00000a50                   BSSX    animscnt        ,16     ;# anim scripts running
     211                    
     212 00000a50                   STRUCTPD
     213 00000a50                   APTR    animslobj_p             ;*Last obj created
     214 00000a50                   LONG    animsv                  ;Temp value
     215 00000a50                   WORD    animsbx                 ;Base X
     216 00000a50                   WORD    animsby                 ;Base Y
     217 00000a50                   WORD    animsfnum               ;# FRANIMs running
     218 00000a50                   APTR    animslp_p               ;*Loop point table pos
     219 00000a50                   APTR    animslp_t               ;(*Loop point, Loop cnt)*5
     220                    
     221                            .if 0
     222                     SUBR   anim_script             ;A8=*Script
     223                    
     224                            clr     a9
     225                    
     226                     SUBRP  anim_script2            ;A8=*Script, A9=Base Y:X
     227                    
     228                            move    a9,*a13(animsbx),L      ;Save XY
     229                    
     230                            move    *a13(PROCID),a11
     231                            subi    ANIMPID,a11
     232                            srl     8,a11
     233                            sll     8,a11                   ;A11=ID offset (0-0300H)
     234                    
     235                            clr     a1
     236                            move    a1,*a13(animsfnum)
     237                            move    a13,a1
     238                            addi    animslp_t,a1
     239                            move    a1,*a13(animslp_p),L
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE    6

     240                    
     241                    anslp   move    *a8+,a1                 ;Get command
     242                    
     243                            addi    anims_t,a1
     244                            move    *a1,a1,L
     245                            jump    a1
     246                    
     247                            .long   asEND
     248                    anims_t .long   asNEW,asDEL,asDELM,asFRA
     249                            .long   asANI,asHIDE,asSHOW,asPAL
     250                            .long   asXY,asXYRNG,asYA,asXYV
     251                            .long   asXYVA,asXYV0,asZ,asBXY
     252                            .long   asSLP,asSLP1,asSLPR
     253                            .long   asWAIT,asTXT
     254                            .long   asTXTR,asTXTK,asLAB,asLABR
     255                            .long   asDSJ,asDSJS1,asJMP,asJMPR,asJMPEQ
     256                            .long   asJMPNE,asRUN,asRUNI,asCRE
     257                            .long   asKIL,asASM,asSND,asSNDD
     258                            .long   asADDW
     259                            .long   asADDWO,asADDLO,asADLVO,asSVRL
     260                            .long   asSVRLT,asSVL
     261                    
     262                    
     263                    asNEW                                   ;>New objects
     264                            move    *a8+,a9,L               ;Get data
     265                            PUSH    a8
     266                    ans100  move    *a9+,a2,L               ;*Image
     267                            move    *a9+,a0,L               ;Get XY
     268                            move    *a13(animsbx),a3,L
     269                            addxy   a3,a0                   ;Add base
     270                            clr     a1
     271                            movy    a0,a1
     272                            sll     16,a0
     273                            move    *a9+,a3                 ;Z
     274                            move    *a9+,a4                 ;Flags
     275                            addi    M_NOCOLL,a4
     276                            move    *a9+,a5                 ;ID
     277                            addi    CLSANIM,a5
     278                            add     a11,a5                  ;+offset
     279                            clr     a6
     280                            clr     a7
     281                            calla   BEGINOBJW
     282                            move    *a9,a0
     283                            cmpi    -1000,a0
     284                            jrne    ans100                  ;End?
     285                            move    a8,*a13(animslobj_p),L  ;Save * to last one
     286                            PULL    a8
     287                            jruc    anslp
     288                    
     289                    asFRA                                   ;0FHRANIM
     290                            move    a11,a6                  ;Save a11
     291                            move    *a8+,a9,L               ;Get data
     292                            move    *a13(PROCID),a1         ;Inherit same ID+1
     293                            addk    1,a1
     294                            move    *a8+,a10                ;OID
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE    7

     295                            jrn     ans250                  ;No ID?
     296                            addi    CLSANIM,a10
     297                            add     a11,a10                 ;+offset
     298                            move    *a8+,a11                ;apxhloops
     299                            jrn     ans220
     300                            move    *a13(animsfnum),a2      ;+1 FRANIM cnt
     301                            addk    1,a2
     302                            move    a2,*a13(animsfnum)
     303                    ans220  movi    anims_franim,a7
     304                            calla   GETPRC
     305                            move    a13,*a0(anfc_p),L
     306                            move    a6,a11
     307                            jruc    anslp
     308                    
     309                    ans250  addk    16,a8                   ;Skip apxhloops
     310                            move    a8,a10
     311                            move    *a13(animslobj_p),a8,L  ;Get * to last one
     312                            movi    FRQDELDIE,a7
     313                            calla   GETPRC
     314                            move    a10,a8
     315                            jruc    anslp
     316                    
     317                    
     318                    asSLP                                   ;>SLEEP
     319                            move    *a8+,a0                 ;Get time
     320                            calla   PRCSLP
     321                            jruc    anslp
     322                    
     323                    asSLP1                                  ;>SLEEP 1
     324                            movk    1,a0
     325                            calla   PRCSLP
     326                            jruc    anslp
     327                    
     328                    asSLPR                                  ;>Sleep random
     329                            move    *a8+,a0                 ;Get time
     330                            move    *a8+,a1
     331                            callr   RNDRNG
     332                            calla   PRCSLP
     333                            jruc    anslp
     334                    
     335                    asWAIT                                  ;>Wait on FRANIMs
     336                            SLEEPK  2
     337                            move    *a13(animsfnum),a1
     338                            jrnz    asWAIT
     339                            jruc    anslp
     340                    
     341                    asXY                                    ;>New XY rel to current pos
     342                            move    *a8+,a1                 ;Get ID
     343                            move    *a8+,a2
     344                            move    *a8+,a4
     345                            move    *a8+,a5
     346                    asxyhs                                  ;Entry for HIDE/SHOW
     347                    asxyr   addi    CLSANIM,a1
     348                            add     a11,a1                  ;+offset
     349                            move    @OBJLST,a0,L
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE    8

     350                    ans720  callr   obj_find
     351                            jrz     anslp
     352                            move    *a0(OXPOS),a6           ;New X
     353                            add     a4,a6
     354                            move    a6,*a0(OXPOS)
     355                            move    *a0(OYPOS),a6           ;New Y
     356                            add     a5,a6
     357                            move    a6,*a0(OYPOS)
     358                            move    *a0,a0,L
     359                            jrnz    ans720
     360                            jruc    anslp
     361                    
     362                    asXYRNG                                 ;>New XY rel to current pos in rndrng
     363                            move    *a8+,a0
     364                            move    *a8+,a1
     365                            callr   RNDRNG
     366                            move    a0,a4
     367                            move    *a8+,a0
     368                            move    *a8+,a1
     369                            callr   RNDRNG
     370                            move    a0,a5
     371                            move    *a8+,a1
     372                            jrn     asxyr5                  ;No ID?
     373                            move    *a8+,a2
     374                            jruc    asxyr
     375                    
     376                    asxyr5  addk    16,a8                   ;Skip mask
     377                            move    *a13(animslobj_p),a0,L  ;Get * to last one
     378                            move    *a0(OXPOS),a6           ;New X
     379                            add     a4,a6
     380                            move    a6,*a0(OXPOS)
     381                            move    *a0(OYPOS),a6           ;New Y
     382                            add     a5,a6
     383                            move    a6,*a0(OYPOS)
     384                            jruc    anslp
     385                    
     386                    asYA                                    ;>Set Y ani pt world relative
     387                            move    *a8+,a1
     388                            move    *a8+,a2                 ;Mask
     389                            move    *a8+,a5                 ;
     390                            sll     16,a5
     391                            move    @WORLDTLY,a0,L
     392                            add     a0,a5
     393                            addi    CLSANIM,a1
     394                            add     a11,a1                  ;+offset
     395                            move    @OBJLST,a0,L
     396                    asya10  callr   obj_find
     397                            jrz     asya90
     398                    
     399                            PUSH    a1,a2
     400                            move    *a0(OIMG),a1,L
     401                            move    *a0(OSIZE),a2,L
     402                            move    *a0(OCTRL),a4
     403                            calla   GANIOF
     404                            move    *a0(OXVAL),a3,L
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE    9

     405                            add     a6,a3                   ;Old X
     406                            move    a5,a2                   ;New Y
     407                            calla   GANISAG
     408                            PULL    a1,a2
     409                    
     410                            move    *a0,a0,L
     411                            jrnz    asya10
     412                    asya90  jruc    anslp
     413                    
     414                    asXYV                                   ;>Set XYVel
     415                            move    *a8+,a4,L
     416                            move    *a8+,a5,L
     417                            move    *a8+,a1
     418                            move    *a8+,a2
     419                            addi    CLSANIM,a1
     420                            add     a11,a1                  ;+offset
     421                            move    @OBJLST,a0,L
     422                    ans920  callr   obj_find
     423                            jrz     anslp
     424                            move    *a0(OXVEL),a6,L
     425                            add     a4,a6
     426                            move    a6,*a0(OXVEL),L
     427                            move    *a0(OYVEL),a6,L
     428                            add     a5,a6
     429                            move    a6,*a0(OYVEL),L
     430                            move    *a0,a0,L
     431                            jrnz    ans920
     432                            jruc    anslp
     433                    
     434                    asXYVA                                  ;>Set XYVel absolute
     435                            move    *a8+,a4,L
     436                            move    *a8+,a5,L
     437                            move    *a8+,a1
     438                            move    *a8+,a2
     439                            addi    CLSANIM,a1
     440                            add     a11,a1                  ;+offset
     441                            move    @OBJLST,a0,L
     442                    ans1020 callr   obj_find
     443                            jrz     anslp
     444                            move    a4,*a0(OXVEL),L
     445                            move    a5,*a0(OYVEL),L
     446                            move    *a0,a0,L
     447                            jrnz    ans1020
     448                            jruc    anslp
     449                    
     450                    asXYV0                                  ;>XYVel = 0
     451                            move    *a13(animslobj_p),a0,L  ;Get * to last one
     452                            clr     a1
     453                            move    a1,*a0(OXVEL),L
     454                            move    a1,*a0(OYVEL),L
     455                            jruc    anslp
     456                    
     457                    asZ                                     ;>Set Z pos
     458                            move    *a8+,a1
     459                            move    *a8+,a2
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   10

     460                            move    *a8+,a4
     461                            addi    CLSANIM,a1
     462                            add     a11,a1                  ;+offset
     463                            move    @OBJLST,a0,L
     464                    ans1120 callr   obj_find
     465                            jrz     anslp
     466                            move    a4,*a0(OZPOS)
     467                            move    *a0,a0,L
     468                            jrnz    ans1120
     469                            jruc    anslp
     470                    
     471                    asLAB                                   ;>Set label
     472                            move    *a8+,a0
     473                    anslab  move    *a13(animslp_p),a2,L
     474                            move    a8,*a2+,L               ;Save *
     475                            move    a0,*a2+
     476                            move    a2,*a13(animslp_p)
     477                            jruc    anslp
     478                    
     479                    asLABR                                  ;>Set label randomly
     480                            move    *a8+,a0
     481                            move    *a8+,a1
     482                            callr   RNDRNG
     483                            jruc    anslab
     484                    
     485                    asDSJS1                                 ;>Sleep 1, dec and loop to label
     486                            SLEEPK  1
     487                    
     488                    asDSJ                                   ;0DecHrement and loop to label
     489                            move    *a13(animslp_p),a1,L
     490                            move    -*a1,a2
     491                            subk    1,a2
     492                            move    a2,*a1
     493                            jrz     ans1330
     494                            move    -*a1,a8,L               ;Get *Loop
     495                            jruc    anslp
     496                    ans1330 subk    32,a1                   ;Del loop entry
     497                            move    a1,*a13(animslp_p),L
     498                            jruc    anslp
     499                    
     500                    asPAL                                   ;>Set palette
     501                            move    *a13(animsv),a0,L       ;Get *Pal
     502                            calla   pal_getf
     503                            move    a0,a4
     504                            move    *a8+,a1
     505                            jrn     ans1450
     506                            addi    CLSANIM,a1
     507                            add     a11,a1                  ;+offset
     508                            move    @OBJLST,a0,L
     509                            clr     a2                      ;No mask
     510                    ans1420 callr   obj_find
     511                            jrz     anslp
     512                            move    a4,*a0(OPAL)
     513                            move    *a0,a0,L
     514                            jrnz    ans1420                 ;More?
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   11

     515                            jruc    anslp
     516                    
     517                    ans1450 move    *a13(animslobj_p),a0,L  ;Get * to last obj
     518                            move    a4,*a0(OPAL)
     519                            jruc    anslp
     520                    
     521                    asANI                                   ;0DHo ANI on OID
     522                            move    *a8+,a5,L
     523                            move    *a8+,a1                 ;OID
     524                            addi    CLSANIM,a1
     525                            add     a11,a1                  ;+offset
     526                            move    @OBJLST,a0,L
     527                            clr     a2                      ;No mask
     528                    ans1620 callr   obj_find
     529                            jrz     anslp
     530                            move    a8,a9
     531                            move    a1,a3
     532                            move    a5,a1                   ;*Img
     533                            move    a0,a8                   ;*Obj
     534                            move    *a8(OCTRL),a4           ;Same flags
     535                            calla   ANI
     536                            move    a3,a1
     537                            move    a8,a0
     538                            move    a9,a8
     539                            move    *a0,a0,L
     540                            jrnz    ans1620                 ;More?
     541                            jruc    anslp
     542                    
     543                    asDEL                                   ;0DeHlete obj
     544                            move    *a8+,a0
     545                            clr     a1
     546                    asdel5  addi    CLSANIM,a0
     547                            add     a11,a0                  ;+offset
     548                            calla   obj_delc
     549                            jruc    anslp
     550                    
     551                    asDELM                                  ;0DeHlete obj with mask
     552                            move    *a8+,a0
     553                            move    *a8+,a1
     554                            jruc    asdel5
     555                    
     556                    asRUN                                   ;>Run a new anim script
     557                            move    *a8+,a0,L
     558                            move    *a13(PROCID),a1         ;Inherit same ID
     559                    asrun5  move    a8,a10
     560                            move    a0,a8                   ;*Script
     561                            move    *a13(animsbx),a9,L      ;Get base XY
     562                            movi    anim_script2,a7
     563                            calla   GETPRC
     564                            move    a10,a8
     565                            jruc    anslp
     566                    
     567                    asRUNI                                  ;>Run a new anim script with ID
     568                            move    *a8+,a0,L
     569                            move    *a8+,a1
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   12

     570                            addi    ANIMPID,a1
     571                            add     a11,a1                  ;+offset
     572                            jruc    asrun5
     573                    
     574                    asCRE                                   ;0CHreate a process
     575                            move    *a8+,a7,L
     576                            move    *a8+,a9,L               ;Pass A9 to process
     577                            movi    ANIMPID+0ffH,a1
     578                            add     a11,a1                  ;+offset
     579                            calla   GETPRC
     580                            jruc    anslp
     581                    
     582                    asKIL                                   ;>Kill processes with mask
     583                            move    *a8+,a0
     584                            addi    ANIMPID,a0
     585                            add     a11,a0                  ;+offset
     586                            move    *a8+,a1
     587                            calla   KILALLN
     588                            jruc    anslp
     589                    
     590                    asJMP                                   ;>Jump to new location
     591                            move    *a8+,a8,L
     592                            jruc    anslp
     593                    
     594                    asJMPR                                  ;>Jump to new location if RND<#
     595                            move    *a8+,a4,L
     596                            movi    999,a0                  ;.1 % resolution
     597                            callr   RNDRNG0
     598                            move    *a8+,a1
     599                            cmp     a1,a0
     600                            jrhs    anslp
     601                            move    a4,a8                   ;Do jmp
     602                            jruc    anslp
     603                    
     604                    asJMPEQ                                 ;>Jump to new location if = to mem
     605                            move    *a8+,a0,L
     606                            move    *a0,a0                  ;Get value
     607                            move    *a8+,a2,L
     608                            move    *a8+,a1
     609                            cmp     a1,a0
     610                            jrne    anslp                   ;Not same?
     611                            move    a2,a8                   ;Do jmp
     612                            jruc    anslp
     613                    
     614                    asJMPNE                                 ;>Jump to new location if != to mem
     615                            move    *a8+,a0,L
     616                            move    *a0,a0                  ;Get value
     617                            move    *a8+,a2,L
     618                            move    *a8+,a1
     619                            cmp     a1,a0
     620                            jreq    anslp                   ;Same?
     621                            move    a2,a8                   ;Do jmp
     622                            jruc    anslp
     623                    
     624                    asSNDD                                  ;0DHo a snd call in demo
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   13

     625                            movk    ADJMUSIC,a0             ;Get demo music ON/OFF
     626                            calla   GET_ADJ
     627                            jrz     asSND                   ;Do sounds?
     628                            addk    32,a8
     629                            jruc    anslp
     630                    asSND                                   ;0DHo a snd call
     631                            move    *a8+,a0,L
     632                            calla   snd_play1
     633                            jruc    anslp
     634                    
     635                    asASM                                   ;>Inline code
     636                            exgpc   a8
     637                            jruc    anslp
     638                    
     639                    asHIDE                                  ;>Hide an OID (X+5000)
     640                            movi    5000,a4
     641                    ashide2 move    *a8+,a1
     642                            clr     a2
     643                            clr     a5
     644                            jruc    asxyhs
     645                    
     646                    asSHOW                                  ;>Show an OID (X-5000)
     647                            movi    -5000,a4
     648                            jruc    ashide2
     649                    
     650                    asADDW                                  ;0AddH WORD to mem
     651                            move    *a8+,a0,L
     652                            move    *a8+,a1
     653                            move    *a0,a2
     654                            add     a1,a2
     655                            move    a2,*a0
     656                            jruc    anslp
     657                    
     658                    asADDWO                                 ;0AddH WORD to last obj+offset
     659                            move    *a8+,a0
     660                            move    *a13(animslobj_p),a1,L  ;Get * to last one
     661                            move    *a8+,a2                 ;Offset
     662                            add     a2,a1
     663                            move    *a1,a2
     664                            add     a0,a2
     665                            move    a2,*a1
     666                            jruc    anslp
     667                    
     668                    asADDLO                                 ;0AddH LONG # to last obj+offset
     669                            move    *a8+,a0,L
     670                            move    *a13(animslobj_p),a1,L  ;Get * to last one
     671                            move    *a8+,a2                 ;Offset
     672                            add     a2,a1
     673                            move    *a1,a2,L
     674                            add     a0,a2
     675                            move    a2,*a1,L
     676                            jruc    anslp
     677                    
     678                    asADLVO                                 ;0AddH LONG value to last obj+offset
     679                            move    *a8+,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   14

     680                            move    *a13(animslobj_p),a1,L  ;Get * to last one
     681                            add     a0,a1                   ;+Offset
     682                            move    *a13(animsv),a0,L       ;Get value
     683                            move    *a1,a2,L
     684                            add     a0,a2
     685                            move    a2,*a1,L
     686                            jruc    anslp
     687                    
     688                    asSVRL                                  ;>Set value to rnd long
     689                            move    *a8+,a0,L
     690                            move    *a8+,a1,L
     691                            callr   RNDRNG
     692                            move    a0,*a13(animsv),L
     693                            jruc    anslp
     694                    
     695                    asSVRLT                                 ;>Set value to rnd long from a table
     696                            move    *a8+,a4,L
     697                            move    *a4+,a0                 ;apxhTable entries
     698                            subk    1,a0
     699                            callr   RNDRNG0
     700                            sll     5,a0                    ;*32
     701                            add     a0,a4
     702                            move    *a4,a0,L
     703                            move    a0,*a13(animsv),L
     704                            jruc    anslp
     705                    
     706                    asSVL                                   ;>Set value to long
     707                            move    *a8+,a0,L
     708                            move    a0,*a13(animsv),L
     709                            jruc    anslp
     710                    
     711                    asBXY                                   ;0AddH # to BaseXY
     712                            move    *a8+,a0,L
     713                            move    *a13(animsbx),a1,L
     714                            addxy   a0,a1
     715                            move    a1,*a13(animsbx),L
     716                            jruc    anslp
     717                    
     718                    asTXTR                                  ;>Print rnd text from table
     719                            move    *a8+,a4,L
     720                            move    *a4+,a0                 ;apxhTable entries
     721                            subk    1,a0
     722                            callr   RNDRNG0
     723                            sll     5,a0                    ;*32
     724                            add     a0,a4
     725                            move    *a4,a0,L
     726                            jruc    astxt5
     727                    
     728                    asTXT                                   ;>Print text
     729                            move    *a8+,a0,L
     730                    astxt5
     731                            jruc    anslp
     732                    
     733                    
     734                    asTXTK                                  ;>Kill text
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   15

     735                            PUSHP   a8
     736                            callr   ERASE_TXT
     737                            PULLP   a8
     738                            jruc    anslp
     739                    
     740                    
     741                    asEND   SLEEPK  1                       ;>Wait on FRANIMs before exit
     742                            move    *a13(animsfnum),a1
     743                            jrnz    asEND
     744                            DIE
     745                    
     746                            .endif
     747                    
     748                    
     749                    
     750 00000a50                   STRUCTPD
     751 00000a50                   APTR    anfc_p          ;*AnimScrpt process that made me, set by AS
     752 00000a50                   APTR    anfl            ;*Franim list
     753                    
     754                    
     755 00000a50            SUBRP  anims_franim            ;A9=*FRAN list, A10=OID, A11=# Loops
     756                    
     757 00000a50     07a8          move    @OBJLST,a8,L            ;0FHind object
         00000a60 00000000! 
     758 00000a80     b500  anf100  move    *a8(OID),a0
         00000a90     0190  
     759 00000aa0     4940          cmp     a10,a0
     760 00000ab0     ca03          jreq    anf300
     761 00000ac0     8708          move    *a8,a8,L
     762 00000ad0     cbfa          jrnz    anf100
     763 00000ae0     c00e          jruc    anf700                  ;No match!
     764                    
     765 00000af0     b32d  anf300  move    a9,*a13(anfl),L
         00000b00     0120  
     766 00000b10           anf340  JSRP    FRANIMQ
     767 00000b80     b7a9          move    *a13(anfl),a9,L         ;Go to 1st
         00000b90     0120  
     768 00000ba0     4d6b          move    a11,a11
     769 00000bb0     cef5          jrn     anf340                  ;-=Infinite
     770 00000bc0     3d8b          dsj     a11,anf340
     771                    
     772 00000bd0     4d6b  anf700  move    a11,a11
     773 00000be0     ce07          jrn     anf800
     774 00000bf0     b7a0          move    *a13(anfc_p),a0,L       ;Get *Creator
         00000c00     0100  
     775 00000c10     b402          move    *a0(animsfnum),a2       ;apxhFrans-1
         00000c20     0160  
     776 00000c30     1422          subk    1,a2
     777 00000c40     b040          move    a2,*a0(animsfnum)
         00000c50     0160  
     778 00000c60           anf800  DIE
     779                    
     780                    
     781                    
     782                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   16

     783 00000c90            SUBR   anim_wait
     784                    
     785 00000c90           anw10   SLEEPK  3
     786 00000cd0     05a1          move    @animscnt,a1
         00000ce0 00000ec0- 
     787 00000d00     c7f8          jrgt    anw10
     788 00000d10                   RETP
     789                    
     790                            .if 0
     791                    
     792                    
     793                     SUBR   anim_kilslp
     794                    
     795                            SLEEP   50
     796                            callr   anim_killall
     797                            DIE
     798                    
     799                    
     800                     SUBR   anim_killall
     801                    
     802                            clr     a0
     803                            move    a0,@animscnt
     804                    
     805                            movi    ANIMPID,a0      ;>Kill processes
     806                            movi    03ffH,a1
     807                            calla   KILALLN
     808                    
     809                            movi    CLSANIM,a0      ;0DeHlete objs
     810                            movi    03ffH,a1
     811                            jauc    obj_delc
     812                    
     813                            .endif
     814                    
     815                    
     816                    
     817 00000d40            SUBRP  obj_find
     818                    
     819 00000d40     5241          andn    a2,a1
     820 00000d50     b403  of20    move    *a0(OID),a3
         00000d60     0190  
     821 00000d70     5243          andn    a2,a3           ;Remove bits
     822 00000d80     4823          cmp     a1,a3
     823 00000d90     ca02          jreq    of50
     824 00000da0     8600          move    *a0,a0,L
     825 00000db0     cbf9          jrnz    of20
     826 00000dc0     4c00  of50    move    a0,a0           ;A0=*Obj or 0
     827 00000dd0     0960          rets                    ;Pass CC
     828                    
     829                    
     830                    
     831                    
     832                    
     833                    
     834                    
     835 00000de0            SUBR   autoerase_set
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   17

     836                    
     837 00000de0     01e0          pushst
     838 00000df0     0360          dint
     839 00000e00     0d3f          callr   dma_wait                ;Wait on dma
         00000e10     0233  
     840                    
     841 00000e20     5600          clr     a0
     842 00000e30     0580          move    a0,@DMACMAP
         00000e40 01a00080  
     843 00000e60     09c0          movi    ERASECOL,a0             ;Color pair
         00000e70     0000  
     844 00000e80     09e1          movi    510*512*8,a1            ;Store to last 2 lines of bitmap
         00000e90 001fe000  
     845 00000eb0     09d0          movi    512*8*2/16,b0
         00000ec0     0200  
     846 00000ed0     9001  ivxllp  move    a0,*a1+
     847 00000ee0     3c50          dsj     b0,ivxllp
     848                    
     849 00000ef0     01c0          popst
     850                    
     851 00000f00     0960          rets
     852                    
     853                    
     854                    
     855 00000f10           FLASHME
     856                    
     857 00000f10     b500          move    *a8(OCONST),a0
         00000f20     0160  
     858 00000f30     cb13          jrnz    rkoux                   ;Flashing?
     859                    
     860 00000f40     b128          move    a9,*a8(OCONST)
         00000f50     0160  
     861 00000f60     0544          setf    4,0,0
     862 00000f70     1900          movk    M_CONNON,a0             ;Replace non-zero data with constant
     863 00000f80     b008          move    a0,*a8(OCTRL)           ;Write 4 low bits
         00000f90     00f0  
     864 00000fa0     0570          setf    16,1,0
     865                    
     866 00000fb0                   SLEEPK  2
     867                    
     868 00000ff0     5600          clr     a0
     869 00001000     b008          move    a0,*a8(OCONST)          ;Clr color
         00001010     0160  
     870                    
     871 00001020     0544          setf    4,0,0
     872 00001030     1840          movk    M_WRNONZ,a0
     873 00001040     b008          move    a0,*a8(OCTRL)           ;Write 4 low bits
         00001050     00f0  
     874 00001060     0570          setf    16,1,0
     875                    
     876 00001070           rkoux   DIE
     877                    
     878                     .if 0
     879                    
     880                    FLASHME
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   18

     881                            move    *a8(OCONST),a10
     882                            jrnz    gsvcx                   ;Flashing?
     883                            srl     16,a9
     884                            move    a9,*a8(OCONST)          ;Set color
     885                            move    *a8(OCTRL),a0
     886                            movk    8,a1
     887                            or      a1,a0                   ;Set constant
     888                            move    a0,*a8(OCTRL)
     889                            SLEEPK  2
     890                            clr     a0
     891                            move    a0,*a8(OCONST)          ;Clr color
     892                            move    *a8(OCTRL),a0
     893                            andi    0fff5H,a0               ;Clr constant & nonzero
     894                            addk    2,a0                    ;Set nonzero
     895                            move    a0,*a8(OCTRL)
     896                    gsvcx   DIE
     897                     .endif
     898                    
     899                    
     900 000010a0           COLCYC  
     901 000010a0                   SLEEPK  4
     902 000010e0     4d00          MOVE    A8,A0
     903 000010f0     0d5f          calla   pal_find
         00001100 00000000! 
     904 00001120     caf7          JRZ     COLCYC          ;WAIT TILL IT SHOWS UP FOLKS...
     905                    
     906 00001130     5621          CLR     A1              ;GET THE COLORS INTO RAM
     907 00001140     ed41          MOVX    A10,A1          ;GET END COLOR
     908 00001150     2e0a          SRL     16,A10          ;ADJUST START COLOR
     909 00001160     4541          SUB     A10,A1          ;GET COUNT
     910 00001170     b02d          MOVE    A1,*A13(PDATA)  ;SAVE COUNT
         00001180     0100  
     911 00001190     4c24          MOVE    A1,A4
     912 000011a0     2481          SLL     4,A1            ;COUNT IN WORDS
     913 000011b0     4d45          MOVE    A10,A5
     914 000011c0     2485          SLL     4,A5            ;OFFSET INTO PALETTE
     915 000011d0     4105          ADD     A8,A5
     916 000011e0     1205          ADDK    16,A5           ;SKIP PALETTE WORD COUNT
     917 000011f0     4d23          MOVE    A9,A3
     918 00001200     4d26          MOVE    A9,A6
     919 00001210     4026          ADD     A1,A6
     920 00001220     4cc8          MOVE    A6,A8
     921                    
     922 00001230     94a7  COLCYC1 MOVE    *A5+,A7         ;TRANSFER IT TWICE
     923 00001240     90e3          MOVE    A7,*A3+
     924 00001250     90e6          MOVE    A7,*A6+
     925 00001260     3c84          DSJS    A4,COLCYC1
     926                    
     927 00001270     2f00          SRL     8,A0
     928 00001280     2500          SLL     8,A0
     929 00001290     400a          ADD     A0,A10                  ;COLRAM DESTINATION
     930                    
     931 000012a0           COLCYCB
     932 000012a0     b30d          MOVE    A8,*A13(PDATA+020H),L   ;SAVE RAM ADDRESS
         000012b0     0120  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   19

     933 000012c0           COLCYCBL
     934 000012c0     4d00          MOVE    A8,A0                   ;GET SOURCE ADDRESS
     935 000012d0     4d41          MOVE    A10,A1                  ;GET DESTINATION CONSTANT
     936 000012e0     b5a2          MOVE    *A13(PDATA),A2,W        ;GET COUNT
         000012f0     0100  
     937 00001300     0d5f          calla   pal_set
         00001310 00000000! 
     938 00001330     1608          SUBK    16,A8
     939 00001340     4909          CMP     A8,A9
     940 00001350     c802          JRLO    CCYCBSLP
     941 00001360     b7a8          MOVE    *A13(PDATA+020H),A8,L   ;GET SOURCE TABLE START
         00001370     0120  
     942 00001380           CCYCBSLP
     943 00001380     4d60          MOVE    A11,A0          ;GET SLEEP TIME
     944 00001390     0d5f          CALLA   PRCSLP
         000013a0 00000000! 
     945 000013c0     c0ef          JRUC    COLCYCBL
     946                    
     947                    
     948                    
     949 000013d0           CYC0    SLEEP   60
     950                    
     951 00001420           CYCLE_TABLE
     952 00001420     4d20          MOVE    A9,A0                   ;PAL NAME TO CYCLE
     953 00001430     0d5f          calla   pal_find
         00001440 00000000! 
     954 00001460     caf6          jrz     CYC0
     955                    
     956 00001470     0bee          SUBI    32,A14
         00001480     ffdf  
     957 00001490     87c1          MOVE    *A14,A1,L
     958 000014a0                   PUSHP   A14,A1
     959                    
     960 000014c0     2f00          SRL     8,A0
     961 000014d0     2500          SLL     8,A0
     962 000014e0     ef01          MOVY    A8,A1
     963 000014f0     2e01          SRL     16,A1                   ;A1=COLOR # TO START WITH
     964 00001500     b10d          MOVE    A8,*A13(PDATA)          ;PDATA WILL HAVE # TO CYCLE (CNT)
         00001510     0100  
     965 00001520     8542          MOVE    *A10,A2,W
     966 00001530     b04d          MOVE    A2,*A13(PDATA+16)       ;VALUE IN TABLE TO STOP AT
         00001540     0110  
     967 00001550     4c08          MOVE    A0,A8                   ;A8=[PAL #,0]
     968 00001560     4028          ADD     A1,A8                   ;A8=[PAL #,COLOR TO START AT]
     969 00001570     4d49          MOVE    A10,A9                  ;A10=ROM TABLE TO CYCLE WITH
     970 00001580           wamlloop        
     971 00001580                   PULLP   A1,A14
     972 000015a0                   PUSHP   A1,A14
     973 000015c0     8620          MOVE    *A1,A0,L
     974 000015d0     480e          CMP     A0,A14
     975 000015e0     cb14          JRNE    KILL_US
     976 000015f0     4d01          move    a8,a1
     977 00001600     4d20          MOVE    A9,A0                   ;A0=TABLE POSITION
     978 00001610     b5a2          MOVE    *A13(PDATA),A2          ;A2=COLOR COUNT
         00001620     0100  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   20

     979 00001630     0d5f          calla   pal_set                 ;do the transfer
         00001640 00000000! 
     980 00001660     4d60          MOVE    A11,A0
     981 00001670     0d5f          CALLA   PRCSLP
         00001680 00000000! 
     982 000016a0     1209          ADDK    010H,A9
     983 000016b0     8520          MOVE    *A9,A0
     984 000016c0     ce04          JRN     RESTUFF
     985 000016d0     b5a1          MOVE    *A13(PDATA+16),A1       ;PDATA+16=ENTRY WE STOP AT
         000016e0     0110  
     986 000016f0     4801          CMP     A0,A1
     987 00001700     cbe7          jrne    wamlloop
     988 00001710     4d49  RESTUFF MOVE    A10,A9                  ;REACHED END OF TABLE, RESTUFF
     989 00001720     c0e5          jruc    wamlloop
     990 00001730           KILL_US
     991 00001730                   DIE
     992                    
     993                    
     994                    
     995 00001760           HEXTOASC
     996 00001760                   PUSH    a1,a2,a9
     997 00001780     5621          clr     a1
     998 00001790     a02f          move    a1,-*sp                 ;Push the null terminator
     999 000017a0     1941          movk    10,a1                   ;Divisor for decimal
    1000 000017b0     4d09          move    a8,a9
    1001 000017c0     1862  hexta1  movk    3,a2                    ;Comma count
    1002 000017d0     5708  hexta2  clr     a8
    1003 000017e0     5a28          divu    a1,a8
    1004 000017f0     0b09          addi    '0',a9                  ;Make the remainder ascii
         00001800     0030  
    1005 00001810     a12f          move    a9,-*sp                 ;Save here
    1006 00001820     4d09          move    a8,a9
    1007 00001830     ca05          jrz     hexta3                  ;Done?
    1008 00001840     3d02          dsj     a2,hexta2
    1009 00001850     09c2          movi    ',',a2
         00001860     002c  
    1010 00001870     a04f          move    a2,-*sp                 ;Stuff a comma
    1011 00001880     c0f3          jruc    hexta1
    1012                    
    1013 00001890     09e1  hexta3  movi    STRNGRAM,a1             ;Store here for blow out
         000018a0 00000020- 
    1014 000018c0     4c28          move    a1,a8
    1015 000018d0     95e9  hexta4  move    *sp+,a9
    1016 000018e0     8d21          movb    a9,*a1
    1017 000018f0     1101          addk    8,a1
    1018 00001900     4d29          move    a9,a9
    1019 00001910     cbfb          jrnz    hexta4
    1020                    
    1021 00001920                   PULL    a1,a2,a9
    1022 00001940     0960          rets
    1023                    
    1024                    
    1025                    
    1026 00001950            SUBR   ERASE_TXT
    1027                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   21

    1028 00001950     09c0          movi    CLSNEUT|TYPTEXT|SUBTXT,a0
         00001960     0701  
    1029 00001970     c080          jauc    obj_del1c
         00001980 00000000! 
    1030                    
    1031                    
    1032                    
    1033 000019a0           STRLNRM
    1034 000019a0     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         000019b0     7a02  
    1035 000019c0     09e4          movi    DMACNZ|M_NOCOLL,a4
         000019d0 00008808  
    1036 000019f0     57ce          clr     a14
    1037 00001a00     c048          jruc    stringr1
    1038                    
    1039 00001a10           STRCNRM
    1040 00001a10     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         00001a20     7a02  
    1041 00001a30     09e4          movi    DMACNZ|M_NOCOLL,a4
         00001a40 00008808  
    1042 00001a60     182e          movk    1,a14
    1043 00001a70     c041          jruc    stringr1
    1044 00001a80            SUBR   STRCNRM_1
    1045 00001a80     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         00001a90     7a02  
    1046 00001aa0     09e4          movi    DMAWNZ|M_NOCOLL,a4
         00001ab0 00008802  
    1047 00001ad0     182e          movk    1,a14
    1048 00001ae0     4cc5          move    a6,a5
    1049 00001af0     c03b          jruc    stringr1_1
    1050                    
    1051 00001b00           STRRNRM
    1052 00001b00     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         00001b10     7a02  
    1053 00001b20     09e4          movi    DMACNZ|M_NOCOLL,a4
         00001b30 00008808  
    1054 00001b50     184e          movk    2,a14
    1055 00001b60     c032          jruc    stringr1
    1056                    
    1057                    
    1058                    
    1059 00001b70           STRLNRMO
    1060 00001b70     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         00001b80     7a02  
    1061 00001b90     09e4          movi    DMACNZ|M_NOCOLL,a4
         00001ba0 00008808  
    1062 00001bc0     09ee          movi    010000H,a14
         00001bd0 00010000  
    1063 00001bf0     c029          jruc    stringr1
    1064                    
    1065 00001c00           STRCNRMO
    1066 00001c00     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         00001c10     7a02  
    1067 00001c20     09e4          movi    DMACNZ|M_NOCOLL,a4
         00001c30 00008808  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   22

    1068 00001c50     09ee          movi    010001H,a14
         00001c60 00010001  
    1069 00001c80     c020          jruc    stringr1
    1070                    
    1071 00001c90           STRCNRMO_1
    1072 00001c90     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         00001ca0     7a02  
    1073 00001cb0     09e4          movi    DMAWNZ|M_NOCOLL,a4
         00001cc0 00008802  
    1074 00001ce0     09ee          movi    010001H,a14
         00001cf0 00010001  
    1075 00001d10     4cc5          move    a6,a5
    1076 00001d20     c018          jruc    stringr1_1
    1077                    
    1078 00001d30           STRCNRMO_2
    1079 00001d30     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         00001d40     7a02  
    1080 00001d50     09e4          movi    DMACNZ|M_NOCOLL,a4
         00001d60 00008808  
    1081 00001d80     09ee          movi    010001H,a14
         00001d90 00010001  
    1082 00001db0     4cc5          move    a6,a5
    1083 00001dc0     c00e          jruc    stringr1_1
    1084                    
    1085 00001dd0            SUBR   STRLNRMO_1
    1086 00001dd0     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         00001de0     7a02  
    1087 00001df0     09e4          movi    DMAWNZ|M_NOCOLL,a4
         00001e00 00008802  
    1088 00001e20     09ee          movi    010000H,a14
         00001e30 00010000  
    1089 00001e50     4cc5          move    a6,a5
    1090 00001e60     c004          jruc    stringr1_1
    1091                    
    1092 00001e70           STRINGER
    1093 00001e70     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         00001e80     7a02  
    1094 00001e90           stringr1
    1095 00001e90     4cc5          move    a6,a5
    1096 00001ea0     2605          sll     16,a5                   ;Setup constant color in fixed palette
    1097 00001eb0           stringr1_1
    1098                    
    1099 00001eb0     56e7          clr     a7
    1100 00001ec0     edc7          movx    a14,a7
    1101 00001ed0     1427          subk    1,a7
    1102 00001ee0     ce0b          jrn     strr10                  ;Normal left justify
    1103 00001ef0     ca03          jrz     strrc
    1104                    
    1105 00001f00     0d3f          callr   STRNGLEN                ;Right justify
         00001f10     0087  
    1106 00001f20     c003          jruc    strra
    1107                    
    1108 00001f30     0d3f  strrc   callr   STRNGLEN                ;Center justify
         00001f40     0084  
    1109 00001f50     2fe7          srl     1,a7                    ;STRNGLEN/2
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   23

    1110                    
    1111 00001f60     e2e9  strra   subxy   a7,a9                   ;Adjust string starting position
    1112 00001f70     c002          jruc    strr10                  ;Start loop
    1113                    
    1114                    
    1115 00001f80     10a9  strr1   addk    5,a9                    ;Add a space
    1116 00001f90     e149  strr5   addxy   a10,a9                  ;Add spacing
    1117                    
    1118 00001fa0     8f01  strr10  movb    *a8,a1                  ;Get a character
    1119 00001fb0     c673          jrle    strrx                   ;Done?
    1120 00001fc0     1108          addk    8,a8                    ;Next byte
    1121                    
    1122 00001fd0     1401          subk    32,a1
    1123 00001fe0     c6f9          jrle    strr1                   ;Space?
    1124                    
    1125                                                            ;Save sleep time
    1126 00001ff0           strr20  PUSH    a0
    1127                    
    1128 00002000     1421          subk    1,a1                    ;0CaHlc table offset
    1129 00002010     24a1          sll     5,a1                    ;*32
    1130 00002020     4161          add     a11,a1
    1131 00002030     8621          move    *a1,a1,L                ;Get * image header
    1132 00002040     b423          move    *a1(ICTRL),a3
         00002050     0060  
    1133                    
    1134 00002060                   PUSH    a1,a14
    1135                            
    1136 00002080     1dee          btst    16,a14
    1137 00002090     ca3f          jrz     strrdma                 ;Only do DMA?
    1138                    
    1139 000020a0     4c22          move    a1,a2
    1140                    
    1141 000020b0     0d5f          calla   GETOBJ                  ;Create the character as an object
         000020c0 00000000! 
    1142 000020e0     ca52          jrz     strrdun                 ;No object?
    1143                    
    1144 000020f0     b240          move    a2,*a0(OIMG),L
         00002100     0170  
    1145 00002110     ba40          move    *a2(ISAG),*a0(OSAG),L
         00002120     0040  
         00002130     0110  
    1146 00002140     b080          move    a4,*a0(OFLAGS)          ;FIX!!!!!
         00002150     00e0  
    1147 00002160     b2a0          move    a5,*a0(OPAL),L          ;&CONST
         00002170     0150  
    1148 00002180     09e1          movi    01000100h,a1
         00002190 01000100  
    1149 000021b0     b220          move    a1,*a0(OSCALE),L
         000021c0     0240  
    1150                    
    1151                    
    1152 000021d0     4c81          move    a4,a1
    1153 000021e0     0b81          andi    0803fH,a1               ;Kill mode bits
         000021f0 ffff7fc0  
    1154 00002210     5423          or      a1,a3
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   24

    1155 00002220     b260          move    a3,*a0(OCTRL),L         ;&OFSET
         00002230     00f0  
    1156                    
    1157 00002240     09ce          movi    CLSNEUT|TYPTEXT|SUBTXT,a14
         00002250     0701  
    1158 00002260     b1c0          move    a14,*a0(OID)
         00002270     0190  
    1159                    
    1160 00002280     05ae          move    @LOWZ,a14
         00002290 00000170- 
    1161 000022b0     0b0e          addi    20000,a14
         000022c0     4e20  
    1162 000022d0     b1c0          move    a14,*a0(OZPOS)
         000022e0     00d0  
    1163                    
    1164 000022f0     5642          clr     a2
    1165 00002300     b240          move    a2,*a0(OXVEL),L
         00002310     0020  
    1166 00002320     b240          move    a2,*a0(OYVEL),L
         00002330     0040  
    1167 00002340     b240          move    a2,*a0(OZVEL),L
         00002350     0060  
    1168 00002360     b240          move    a2,*a0(ODOFF),L
         00002370     0220  
    1169                    
    1170 00002380     ef22          movy    a9,a2                   ;Y
    1171 00002390     4d23          move    a9,a3
    1172 000023a0     2603          sll     16,a3                   ;X
    1173 000023b0     0d5f          calla   GANISAG
         000023c0 00000000! 
    1174                    
    1175 000023e0     05a2          move    @WRLD,a2
         000023f0 00000160- 
    1176 00002410     cb03          jrnz    strr100
    1177 00002420     0d5f          calla   obj_addworldxy          ;Put us in the world
         00002430 00000000! 
    1178                    
    1179 00002450     0d5f  strr100 calla   INSOBJ
         00002460 00000000! 
    1180 00002480     c018          jruc    strrdun
    1181                    
    1182                    
    1183 00002490           strrdma PUSH    a3                      ;>Simple DMA
    1184 000024a0     8622          move    *a1,a2,L                ;ISIZE
    1185 000024b0     b623          move    *a1(ISAG),a3,L          ;Get top left sag
         000024c0     0040  
    1186 000024d0     0d5f          calla   GANIOF
         000024e0 00000000! 
    1187 00002500     4ca1          move    a5,a1                   ;Constant:Palette
    1188 00002510                   PULL    a5
    1189 00002520                   PUSH    a4
    1190 00002530     0b84          andi    0803fH,a4
         00002540 ffff7fc0  
    1191 00002560     5485          or      a4,a5                   ;Offset:Control
    1192 00002570     4c64          move    a3,a4                   ;SAG
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   25

    1193                    
    1194 00002580     4d23          move    a9,a3                   ;A3=Y:X
    1195 00002590     2e06          srl     16,a6
    1196 000025a0     ecc7          movx    a6,a7
    1197 000025b0     e2e3          subxy   a7,a3                   ;Sub anioffset
    1198                    
    1199 000025c0     0d5f          calla   QDMAN
         000025d0 00000000! 
    1200 000025f0                   PULL    a4
    1201 00002600     4c25          move    a1,a5
    1202                    
    1203 00002610           strrdun PULL    a1,a14
    1204                    
    1205 00002630     8421          move    *a1,a1                  ;Get ISIZEX
    1206 00002640     e029          addxy   a1,a9                   ;Add X size
    1207 00002650     97e0          move    *sp+,a0,L
    1208 00002660     ca92          jrz     strr5                   ;No sleep?
    1209                    
    1210 00002670     098c          mmtm    a12,a0,a4,a5,a14
         00002680     8c02  
    1211 00002690     0d5f          calla   PRCSLP
         000026a0 00000000! 
    1212 000026c0     09ac          mmfm    a12,a0,a4,a5,a14
         000026d0     4031  
    1213 000026e0     c08a          jruc    strr5
    1214                    
    1215 000026f0     5621  strrx   clr     a1
    1216 00002700     0581          move    a1,@LOWZ
         00002710 00000170- 
    1217 00002730     1108          addk    8,a8                    ;Next byte
    1218 00002740     09ac          mmfm    a12,a1,a2,a3,a4,a6,a14
         00002750     405e  
    1219 00002760                   RETP
    1220                    
    1221                    
    1222 00002790           STRNGLEN
    1223 00002790                   PUSH    a8,a14
    1224 000027b0     56e7          clr     a7              ;A7=Length
    1225 000027c0     c00c          jruc    stl60
    1226                    
    1227 000027d0     1108  stl10   addk    8,a8            ;Point to next
    1228 000027e0     140e          subk    32,a14
    1229 000027f0     c702          jrgt    stl20           ;Good char?
    1230 00002800     10a7          addk    5,a7            ;Hard code a space
    1231 00002810     c006          jruc    stl40
    1232                    
    1233 00002820     142e  stl20   subk    1,a14
    1234 00002830     24ae          sll     5,a14           ;*32
    1235 00002840     416e          add     a11,a14         ;A14=*Correct character header
    1236 00002850     87ce          move    *a14,a14,L
    1237 00002860     85ce          move    *a14,a14        ;Get ISIZEX
    1238                    
    1239 00002870     e1c7          addxy   a14,a7          ;Add char length
    1240 00002880     e147  stl40   addxy   a10,a7          ;Add space length
    1241 00002890     8f0e  stl60   movb    *a8,a14
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   26

    1242 000028a0     c7f2          jrgt    stl10           ;Next character?
    1243                    
    1244 000028b0                   PULL    a8,a14
    1245 000028d0     0527          zext    a7
    1246 000028e0     0960          rets
    1247                    
    1248                    
    1249                    
    1250 000028f0           OBJOFF
    1251 000028f0                   PUSH    A4
    1252 00002900     b404          MOVE    *A0(OCTRL),A4
         00002910     00f0  
    1253 00002920     2f84          SRL     4,A4
    1254 00002930     2484          SLL     4,A4
    1255 00002940     b080          MOVE    A4,*A0(OCTRL)
         00002950     00f0  
    1256 00002960     97e4          move    *sp+,a4,L
    1257 00002970     0960          RETS
    1258                    
    1259 00002980           OBJON
    1260 00002980                   PUSH    A4
    1261 00002990     b404          MOVE    *A0(OCTRL),A4
         000029a0     00f0  
    1262 000029b0     2f84          SRL     4,A4
    1263 000029c0     2484          SLL     4,A4
    1264 000029d0     1044          ADDK    2,A4
    1265 000029e0     b080          MOVE    A4,*A0(OCTRL)
         000029f0     00f0  
    1266 00002a00     97e4          move    *sp+,a4,L
    1267 00002a10     0960          RETS
    1268                    
    1269                            
    1270                    
    1271                    
    1272                    
    1273                    
    1274 00002a20            SUBR   GETCPNT
    1275                    
    1276 00002a20     b701          move    *a8(OYVAL),a1,L
         00002a30     00a0  
    1277 00002a40     b500          move    *a8(OXPOS),a0
         00002a50     0090  
    1278 00002a60     ec01          movx    a0,a1
    1279 00002a70     b700          move    *a8(OSIZE),a0,L
         00002a80     0130  
    1280 00002a90     2fe0          srl     1,a0                    ;/2
    1281 00002aa0     0b80          andi    07fff7fffH,a0           ;Clr bit 15
         00002ab0 80008000  
    1282 00002ad0     e020          addxy   a1,a0
    1283 00002ae0     0960          rets
    1284                    
    1285                    
    1286                    
    1287 00002af0           GETANIX
    1288 00002af0     098f          MMTM    SP,A1,A2
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   27

         00002b00     6000  
    1289 00002b10     b701          MOVE    *A8(OIMG),A1,L
         00002b20     0170  
    1290 00002b30     b422          MOVE    *A1(IANIOFF),A2
         00002b40     0020  
    1291 00002b50     b500          MOVE    *A8(OCTRL),A0
         00002b60     00f0  
    1292 00002b70     1f60          BTST    B_FLIPH,A0
    1293 00002b80     ca04          JRZ     GETAX1
    1294 00002b90     8420          MOVE    *A1,A0          ;ISIZEX
    1295 00002ba0     4440          SUB     A2,A0
    1296 00002bb0     1420          DEC     A0
    1297 00002bc0     4c02          MOVE    A0,A2
    1298 00002bd0     b500  GETAX1  MOVE    *A8(OXPOS),A0
         00002be0     0090  
    1299 00002bf0     4040          ADD     A2,A0
    1300 00002c00     09af          MMFM    SP,A1,A2
         00002c10     0006  
    1301 00002c20     0960          RETS
    1302                    
    1303                    
    1304                    
    1305                    
    1306 00002c30            SUBR   RNDRNGS
    1307                    
    1308 00002c30     4c01          move    a0,a1
    1309 00002c40     03a0          neg     a0
    1310                    
    1311                    
    1312                    
    1313 00002c50            SUBR   RNDRNG
    1314                    
    1315 00002c50     4401          sub     a0,a1           ;Normalize the range
    1316 00002c60     1021          addk    1,a1
    1317 00002c70     4e00          move    a0,b0
    1318                    
    1319 00002c80     07a0          move    @RAND,a0,L
         00002c90 00000000- 
    1320 00002cb0     6800          rl      a0,a0
    1321 00002cc0     05ae          move    @HCOUNT,a14
         00002cd0 c00001c0  
    1322 00002cf0     69c0          rl      a14,a0
    1323 00002d00     41e0          add     sp,a0
    1324 00002d10     0780          move    a0,@RAND,L
         00002d20 00000000- 
    1325                    
    1326 00002d40     5e20          mpyu    a1,a0
    1327 00002d50     4e11          move    b0,a1
    1328 00002d60     4020          add     a1,a0
    1329 00002d70     0960          rets
    1330                    
    1331                    
    1332                    
    1333 00002d80            SUBR   RNDRNG0
    1334                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   28

    1335 00002d80     07a1          move    @RAND,a1,L
         00002d90 00000000- 
    1336 00002db0     6821          rl      a1,a1
    1337 00002dc0     05ae          move    @HCOUNT,a14
         00002dd0 c00001c0  
    1338 00002df0     69c1          rl      a14,a1
    1339 00002e00     41e1          add     sp,a1
    1340 00002e10     0781          move    a1,@RAND,L
         00002e20 00000000- 
    1341                    
    1342 00002e40     1020          addk    1,a0
    1343 00002e50     5e20          mpyu    a1,a0           ;Condition codes not valid!
    1344                    
    1345 00002e60     0960          rets
    1346                    
    1347                    
    1348                    
    1349 00002e70            SUBR   RNDPER
    1350                    
    1351 00002e70     07a1          move    @RAND,a1,L
         00002e80 00000000- 
    1352 00002ea0     6821          rl      a1,a1
    1353 00002eb0     05ae          move    @HCOUNT,a14
         00002ec0 c00001c0  
    1354 00002ee0     69c1          rl      a14,a1
    1355 00002ef0     41e1          add     sp,a1
    1356 00002f00     0781          move    a1,@RAND,L
         00002f10 00000000- 
    1357                    
    1358 00002f30     4c0e          move    a0,a14
    1359 00002f40     09c0          movi    1000,a0
         00002f50     03e8  
    1360 00002f60     5e20          mpyu    a1,a0           ;0-999
    1361 00002f70     480e          cmp     a0,a14
    1362 00002f80     0960          rets
    1363                    
    1364                    
    1365 00002f90           FILLAREA
    1366 00002f90                   PUSH    a0,a1,a2,a4,a5,a14
    1367 00002fb0     c003          jruc    areacon
    1368 00002fc0           BLNKAREA
    1369 00002fc0                   PUSH    a0,a1,a2,a4,a5,a14
    1370 00002fe0     5621          clr     a1                      ;constant 0:palette 0
    1371 00002ff0           areacon
    1372 00002ff0     4c82          move    a4,a2
    1373 00003000     09e4          movi    IROM,a4                 ;Somewhere in image rom
         00003010 02000000  
    1374 00003030     09e5          movi    DMACAL,a5
         00003040 0000800c  
    1375 00003060     0d5f          calla   QDMAN
         00003070 00000000! 
    1376 00003090                   PULL    a0,a1,a2,a4,a5,a14
    1377 000030b0     0960          rets
    1378                    
    1379                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   29

    1380                    
    1381 000030c0            SUBR   dirq_wait
    1382                    
    1383 000030c0     05a0          move    @dirqtimer,a0
         000030d0 00000000! 
    1384 000030f0     05a1  dirqwlp move    @dirqtimer,a1
         00003100 00000000! 
    1385 00003120     4801          cmp     a0,a1
    1386 00003130     cafb          jreq    dirqwlp
    1387 00003140     0960          rets
    1388                    
    1389                    
    1390                    
    1391 00003150            SUBRP  dma_wait
    1392                    
    1393 00003150     05b0  dwlp    move    @DMACTRL,b0
         00003160 01a00010  
    1394 00003180     cefc          jrn     dwlp            ;Busy?
    1395 00003190     0960          rets
    1396                    
    1397                    
    1398                    
    1399 000031a0            SUBR   dmaq_wait
    1400                    
    1401 000031a0     05a1          move    @DISPLAYON,a1
         000031b0 00000000! 
    1402 000031d0     5600          clr     a0
    1403 000031e0     0580          move    a0,@DISPLAYON           ;Display off
         000031f0 00000000! 
    1404                    
    1405 00003210     05b0          move    @DMACTRL,b0
         00003220 01a00010  
    1406 00003240     cf02          jrnn    dqw20
    1407 00003250     4dbd  dqw10   move    b13,b13
    1408 00003260     c5fe          jrge    dqw10
    1409 00003270     0d3f  dqw20   callr   dma_wait
         00003280     ffec  
    1410 00003290     0581          move    a1,@DISPLAYON
         000032a0 00000000! 
    1411                    
    1412 000032c0     0960          rets
    1413                    
    1414                    
    1415                    
    1416 000032d0            SUBR   dpageflip_off
    1417                    
    1418 000032d0     5600          clr     a0
    1419 000032e0     0580          move    a0,@dpageflip
         000032f0 00000000! 
    1420 00003310     03e0          not     a0
    1421 00003320     0580          move    a0,@dpage
         00003330 00000000! 
    1422 00003350     09c0          movi    -4,a0                   ;Page0
         00003360     fffc  
    1423 00003370     0580          move    a0,@DPYSTRT
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   30

         00003380 c0000090  
    1424                    
    1425 000033a0     0960          rets
    1426                    
    1427                    
    1428 000033b0            SUBRP  display_blank
    1429 000033b0     0360          dint
    1430 000033c0     05a0  dzavlp  move    @VCOUNT,a0
         000033d0 c00001d0  
    1431 000033f0     0b40          cmpi    EOSINT,a0
         00003400     feed  
    1432 00003410     c4fa          jrlt    dzavlp
    1433 00003420     05a0          move    @HSBLNK,a0      ;Blank screen
         00003430 c0000020  
    1434 00003450     0580          move    a0,@HEBLNK
         00003460 c0000010  
    1435 00003480     0d60          eint
    1436                    
    1437 00003490     0960          rets
    1438                    
    1439                    
    1440 000034a0            SUBRP  display_unblank
    1441                    
    1442 000034a0     0360          dint
    1443 000034b0     05a0  mzqylp  move    @VCOUNT,a0
         000034c0 c00001d0  
    1444 000034e0     0b40          cmpi    EOSINT,a0
         000034f0     feed  
    1445 00003500     c4fa          jrlt    mzqylp
    1446 00003510     09c0          movi    HEBLNKINIT,a0
         00003520     0065  
    1447 00003530     0580          move    a0,@HEBLNK
         00003540 c0000010  
    1448 00003560     0d60          eint
    1449                    
    1450 00003570     0960          rets
    1451                    
    1452                    
    1453 00003580           CRINIT
    1454 00003580     098f          MMTM    SP,A0,A1,A2,A6
         00003590     e200  
    1455 000035a0     09e1          MOVI    COLRAM,A1
         000035b0 01880000  
    1456 000035d0     5600          CLR     A0
    1457 000035e0     09e6          MOVI    10000H,A6,L
         000035f0 00010000  
    1458 00003610           CRINIT1
    1459 00003610     9201          MOVE    A0,*A1+,L       ;STUFF TWO WORDS AT A TIME
    1460 00003620     3c46          DSJS    A6,CRINIT1
    1461                    
    1462 00003630     09af          MMFM    SP,A0,A1,A2,A6
         00003640     0047  
    1463 00003650     0960          RETS
    1464                    
    1465 00003660           CRLOAD
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   31

    1466 00003660     098f          MMTM    SP,A0,A1,A2
         00003670     e000  
    1467 00003680           CRLOAD1
    1468 00003680     9420          MOVE    *A1+,A0,W       ;GRAB FIRST COLOR FROM THIS TABLE
    1469 00003690     ce05          JRN     CRLOAD4         ;BR = NULL PALETTE
    1470 000036a0           CRLOAD3
    1471 000036a0     8002          MOVE    A0,*A2,W        ;STUFF COLOR
    1472 000036b0     9420          MOVE    *A1+,A0,W       ;GRAB NEXT COLOR FROM THIS TABLE
    1473 000036c0     ce02          JRN     CRLOAD4         ;BR = NEXT PALETTE
    1474 000036d0     1202          ADDK    16,A2           ;INC THIS WAY SO WE DON'T OVERRUN PALETTES
    1475 000036e0     c0fb          JRUC    CRLOAD3
    1476                    
    1477 000036f0           CRLOAD4
    1478 000036f0     0b02          ADDI    1000H,A2        ;NEXT PALETTE
         00003700     1000  
    1479 00003710     2e82          SRL     12,A2
    1480 00003720     2582          SLL     12,A2           ;MASK OFF LOW BULLSHIT
    1481 00003730     3d86          DSJ     A6,CRLOAD1
    1482                    
    1483 00003740     09af          MMFM    SP,A0,A1,A2
         00003750     0007  
    1484 00003760     0960          RETS
    1485                    
    1486                    
    1487                    
    1488 00003770     5600  SCRCLR  CLR     A0
    1489                    
    1490 00003780     098f          MMTM    SP,A1,A2
         00003790     6000  
    1491 000037a0     5621          CLR     A1
    1492 000037b0     0581          MOVE    A1,@CMAPSEL                     ;SELECT COLOR MAP 0
         000037c0 01a80080  
    1493 000037e0     09c1          MOVI    SCREEN,A1
         000037f0     0000  
    1494 00003800     09e2          MOVI    (SCRNE-SCREEN)/32,A2
         00003810 00010000  
    1495 00003830     9201  SCRLP   MOVE    A0,*A1+,L
    1496 00003840     3c42          DSJS    A2,SCRLP
    1497                    
    1498 00003850     09af          MMFM    SP,A1,A2
         00003860     0006  
    1499 00003870     0960          RETS
    1500                    
    1501                    
    1502                    
    1503                    
    1504 00003880            SUBR   CLR_SCRN
    1505                    
    1506 00003880     098f          mmtm    sp,a1,a2,a3
         00003890     7000  
    1507 000038a0     05a3          move    @DISPLAYON,a3
         000038b0 00000000! 
    1508 000038d0     0d3f          callr   dmaq_wait                       ;wait on dma
         000038e0     ff8b  
    1509 000038f0     5600          clr     a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   32

    1510 00003900     0580          move    a0,@CMAPSEL                     ;Select color map 0
         00003910 01a80080  
    1511 00003930     09e1          movi    SCREEN,a1,L
         00003940 00000000  
    1512 00003960     09e2          movi    ((SCRNE-2000H)-SCREEN)/32,a2,L
         00003970 0000ff00  
    1513 00003990     9201  clrlp   move    a0,*a1+,L
    1514 000039a0     3c42          dsjs    a2,clrlp
    1515 000039b0     0583          move    a3,@DISPLAYON
         000039c0 00000000! 
    1516 000039e0     09af          mmfm    sp,a1,a2,a3
         000039f0     000e  
    1517 00003a00     0960          rets
    1518                    
    1519                    
    1520                    
    1521                    
    1522 00003a10           FRANIM
    1523 00003a10                   PUSHP   a3,a4
    1524                    
    1525 00003a30     0b69          cmpi    ROM,a9                  ;Check for bogus script pointer
         00003a40 f87fffff  
    1526 00003a60     c839          jrlo    franerr
    1527                    
    1528 00003a70     4c23          move    a1,a3                   ;A3=Mode
    1529                    
    1530 00003a80     9721  franl   move    *a9+,a1,L
    1531 00003a90     ca30          jrz     frannd                  ;End?
    1532                    
    1533 00003aa0     b504          move    *a8(OCTRL),a4           ;Current flags
         00003ab0     00f0  
    1534 00003ac0     9520          move    *a9+,a0                 ;Sleep time
    1535 00003ad0     0b40          cmpi    0100H,a0
         00003ae0     feff  
    1536 00003af0     c818          jrlo    fran2                   ;Just sleep?
    1537                            
    1538 00003b00                   PUSH    a1,a2,a7
    1539                    
    1540 00003b20     1e20          btst    BFLIPBIT,a0
    1541 00003b30     ca05          jrz     frannobi                ;No flip?
    1542 00003b40     9522          move    *a9+,a2                 ;Get the new flip flags
    1543 00003b50     0b84          andni   (M_FLIPV|M_FLIPH),a4    ;Clear the current flip status
         00003b60 00000030  
    1544 00003b80     5444          or      a2,a4                   ;Set flag bits
    1545                    
    1546 00003b90           frannobi
    1547 00003b90     1e40          btst    BNEWPAL,a0
    1548 00003ba0     ca09          jrz     frannopa                ;No pal?
    1549                    
    1550 00003bb0     4c07          move    a0,a7
    1551 00003bc0     9720          move    *a9+,a0,L               ;Get *pal
    1552 00003bd0     0d5f          calla   pal_getf
         00003be0 00000000! 
    1553 00003c00     ca02          jrz     fran10                  ;No palette available?
    1554 00003c10     b008          move    a0,*a8(OPAL)            ;Store new palette
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   33

         00003c20     0150  
    1555 00003c30           fran10
    1556 00003c30     4ce0          move    a7,a0
    1557 00003c40           frannopa
    1558 00003c40                   PULL    a1,a2,a7
    1559 00003c60     2700          sll     32-8,a0                 ;Kill special bits
    1560 00003c70     2d00          srl     32-8,a0
    1561                    
    1562 00003c80           fran2
    1563 00003c80     0d5f          calla   ANI                     ;Setup new animation
         00003c90 00000000! 
    1564                    
    1565 00003cb0     0b43          cmpi    4,a3
         00003cc0     fffb  
    1566 00003cd0     ca06          jreq    fran3                   ;One frame, no sleep?
    1567                    
    1568 00003ce0     a06c          move    a3,-*a12
    1569 00003cf0     0d5f          calla   PRCSLP                  ;Sleep
         00003d00 00000000! 
    1570 00003d20     9583          move    *a12+,a3
    1571 00003d30     cbd4          jrnz    franl                   ;Loop til end of list?
    1572                    
    1573 00003d40           fran3
    1574 00003d40                   PULLP   a3,a4
    1575 00003d60     0320          clrc                            ;Clear end flag
    1576 00003d70                   RETP
    1577                    
    1578 00003da0           frannd
    1579 00003da0                   PULLP   a3,a4
    1580 00003dc0     0de0          setc                            ;Return with end flag set
    1581 00003dd0                   RETP
    1582                    
    1583                    
    1584 00003e00           franerr
    1585                            .if     DEBUG
    1586                            LOCKUP
    1587                            eint
    1588                            .else
    1589 00003e00                   CALLERR 8,0                     ;Bad franim list
    1590                            .endif
    1591 00003eb0     c0ee          jruc    frannd
    1592                    
    1593                    
    1594                    
    1595                    
    1596 00003ec0           FRANIMQ
    1597                    
    1598 00003ec0     0b69          cmpi    ROM,a9
         00003ed0 f87fffff  
    1599 00003ef0     c936          jrhs    frq80                   ;Franim list OK?
    1600                    
    1601                            .if     DEBUG
    1602                            LOCKUP
    1603                            eint
    1604                            .else
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   34

    1605 00003f00                   CALLERR 8,0                     ;Bad franim list
    1606                            .endif
    1607 00003fb0     c02c          jruc    tjwex
    1608                    
    1609                    
    1610 00003fc0     b504  tjwelp  move    *a8(OCTRL),a4           ;Current flags
         00003fd0     00f0  
    1611 00003fe0     9520          move    *a9+,a0                 ;Sleep time
    1612 00003ff0     0b40          cmpi    0100H,a0
         00004000     feff  
    1613 00004010     c81e          jrlo    frq70                   ;No special bits?
    1614                            
    1615 00004020     1e20          btst    BFLIPBIT,a0             ;New flip?
    1616 00004030     ca05          jrz     frq40
    1617 00004040     9522          move    *a9+,a2                 ;Get the new flip flags
    1618 00004050     0b84          andni   (M_FLIPV|M_FLIPH),a4    ;Clear the current flip status
         00004060 00000030  
    1619 00004080     5444          or      a2,a4                   ;Set desired bits
    1620                    
    1621 00004090     1e40  frq40   btst    BNEWPAL,a0              ;New palette ?
    1622 000040a0     ca0b          jrz     frq60
    1623                    
    1624 000040b0     4c02          move    a0,a2
    1625 000040c0     4c23          move    a1,a3
    1626 000040d0     9720          move    *a9+,a0,L               ;Get the palette address
    1627 000040e0     0d5f          calla   pal_getf                ;Get a color map assignment
         000040f0 00000000! 
    1628 00004110     ca02          jrz     frq50                   ;No palette available?
    1629 00004120     b008          move    a0,*a8(OPAL)            ;Set new palette
         00004130     0150  
    1630 00004140     4c40  frq50   move    a2,a0
    1631 00004150     4c61          move    a3,a1
    1632                    
    1633 00004160     1e80  frq60   btst    BDELTAY,a0
    1634 00004170     ca06          jrz     frq65
    1635 00004180     9522          move    *a9+,a2                 ;Get DY
    1636 00004190     b503          move    *a8(OYPOS),a3
         000041a0     00b0  
    1637 000041b0     4043          add     a2,a3
    1638 000041c0     b068          move    a3,*a8(OYPOS)
         000041d0     00b0  
    1639                    
    1640 000041e0     2700  frq65   sll     32-8,a0                 ;Kill special bits
    1641 000041f0     2d00          srl     32-8,a0
    1642                    
    1643 00004200     0d5f  frq70   calla   ANI
         00004210 00000000! 
    1644 00004230     0d5f          calla   PRCSLP                  ;Sleep
         00004240 00000000! 
    1645                    
    1646 00004260     9721  frq80   move    *a9+,a1,L               ;Get frame
    1647 00004270     cbd4          jrnz    tjwelp
    1648                    
    1649 00004280           tjwex   RETP
    1650                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   35

    1651                    
    1652                    
    1653                    
    1654              7db0  OFF     .equ    07db0H
    1655          01b0c280  SEC     .equ    01b14030H-OFF
    1656          ff507d80  FAKEO   .equ    -0b00030H+OFF
    1657                    
    1658 000042b0            SUBR   security_chk
    1659                    
    1660 000042b0                   PUSH    a2,a3,a4
    1661 000042d0     5600          clr     a0
    1662 000042e0     09c3          movi    63,a3
         000042f0     003f  
    1663 00004300     4c6e  hsmclp  move    a3,a14
    1664 00004310     0d3f          callr   hsmcsc
         00004320     0006  
    1665 00004330     5440          or      a2,a0
    1666 00004340     1423          subk    1,a3
    1667 00004350     c5fa          jrge    hsmclp
    1668 00004360                   PULL    a2,a3,a4
    1669 00004380     0960          rets
    1670                    
    1671 00004390           hsmcsc
    1672 00004390     09e1          movi    SEC+FAKEO,a1
         000043a0 01014000  
    1673 000043c0     254e          sll     15-5,a14
    1674 000043d0     41c1          add     a14,a1          ;Add a bogus offset
    1675 000043e0     0d01          subi    FAKEO,a1
         000043f0 00af827f  
    1676 00004410     b1c1          move    a14,*a1(OFF)    ;Write 1 of 64 to sec
         00004420     7db0  
    1677 00004430     45c1          sub     a14,a1          ;Sub offset so we read a different address
    1678 00004440     b422          move    *a1(OFF),a2     ;Read 1st sec value
         00004450     7db0  
    1679 00004460     2622          sll     32-15,a2
    1680 00004470     2cc2          srl     32-6,a2
    1681 00004480     2522          sll     9,a2            ;Move to bits 9-14
    1682 00004490     57c2          xor     a14,a2
    1683 000044a0     2622          sll     32-15,a2        ;Remove top bits
    1684 000044b0     cb22          jrnz    hsmcx           ;Bad value?
    1685                    
    1686 000044c0     41c1          add     a14,a1
    1687 000044d0     2f6e          srl     2+3,a14
    1688 000044e0     41c1          add     a14,a1
    1689 000044f0     01e0          pushst
    1690 00004500     0546          setf    6,0,0
    1691 00004510     b422          move    *a1(OFF+9),a2   ;Read 2nd sec value
         00004520     7db9  
    1692 00004530     4e41          move    a2,b1
    1693 00004540     2711          sll     24,b1
    1694 00004550     0144          getpc   a4
    1695 00004560     0b04          addi    hsmcsec_t-$,a4,W
         00004570     0190  
    1696 00004580     408e          add     a4,a14
    1697 00004590     b422          move    *a1(OFF+019H),a2        ;Read 3rd sec value
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   36

         000045a0     7dc9  
    1698 000045b0     4e40          move    a2,b0
    1699 000045c0     2610          sll     16,b0
    1700 000045d0     5411          or      b0,b1
    1701 000045e0     b422          move    *a1(OFF+029H),a2        ;Read 4th sec value
         000045f0     7dd9  
    1702 00004600     4e40          move    a2,b0
    1703 00004610     2510          sll     8,b0
    1704 00004620     5411          or      b0,b1
    1705 00004630     b422          move    *a1(OFF+039H),a2        ;Read 5th sec value
         00004640     7de9  
    1706 00004650     4e40          move    a2,b0
    1707 00004660     5411          or      b0,b1
    1708 00004670     01c0          popst
    1709 00004680     97c2          move    *a14+,a2,L
    1710 00004690     4e31          move    b1,a1
    1711 000046a0     0b81          andi    03f3f3f3fH,a1
         000046b0 c0c0c0c0  
    1712 000046d0     5622          xor     a1,a2           ;A2=0 if OK
    1713                    
    1714 000046e0     0960  hsmcx   rets
    1715                    
    1716                    
    1717 000046f0 21283b3b  hsmcsec_t       .long   021283b3bH      ;0
    1718 00004710 2439383b          .long   02439383bH
    1719 00004730 31283b3b          .long   031283b3bH
    1720 00004750 302b3938          .long   0302b3938H
    1721 00004770 31283b3b          .long   031283b3bH
    1722 00004790 302b3938          .long   0302b3938H
    1723 000047b0 232f2f2f          .long   0232f2f2fH
    1724 000047d0 26383b3b          .long   026383b3bH
    1725 000047f0 21283b3b          .long   021283b3bH      ;20
    1726 00004810 2439383b          .long   02439383bH
    1727 00004830 312a1224          .long   0312a1224H
    1728 00004850 302b1120          .long   0302b1120H
    1729 00004870 312a1224          .long   0312a1224H
    1730 00004890 302b1120          .long   0302b1120H
    1731 000048b0 232d283b          .long   0232d283bH
    1732 000048d0 26383b3b          .long   026383b3bH
    1733 000048f0 2b3b3b3b          .long   02b3b3b3bH      ;40
    1734 00004910 2e2e2e2e          .long   02e2e2e2eH
    1735 00004930 39383b1b          .long   039383b1bH
    1736 00004950 383b3b1b          .long   0383b3b1bH
    1737 00004970 3b3b3b1b          .long   03b3b3b1bH
    1738 00004990 3a3a3a1a          .long   03a3a3a1aH
    1739 000049b0 2b3b3b3b          .long   02b3b3b3bH
    1740 000049d0 2e2e2e2e          .long   02e2e2e2eH
    1741 000049f0 2b39383b          .long   02b39383bH      ;60
    1742 00004a10 2e2e2e2e          .long   02e2e2e2eH
    1743 00004a30 393a1a18          .long   0393a1a18H
    1744 00004a50 383b1b1b          .long   0383b1b1bH
    1745 00004a70 3b3b1b1b          .long   03b3b1b1bH
    1746 00004a90 3a3a1a18          .long   03a3a1a18H
    1747 00004ab0 2b39383b          .long   02b39383bH
    1748 00004ad0 2e2e2e2e          .long   02e2e2e2eH
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   37

    1749 00004af0 01202b3b          .long   001202b3bH      ;80
    1750 00004b10 0431283b          .long   00431283bH
    1751 00004b30 11202b3b          .long   011202b3bH
    1752 00004b50 1021283b          .long   01021283bH
    1753 00004b70 11202b3b          .long   011202b3bH
    1754 00004b90 1021283b          .long   01021283bH
    1755 00004bb0 03273b3b          .long   003273b3bH
    1756 00004bd0 06302b39          .long   006302b39H
    1757 00004bf0 09302b39          .long   009302b39H      ;A0
    1758 00004c10 0c232f2f          .long   00c232f2fH
    1759 00004c30 19322e06          .long   019322e06H
    1760 00004c50 18312a12          .long   018312a12H
    1761 00004c70 19322e06          .long   019322e06H
    1762 00004c90 18312a12          .long   018312a12H
    1763 00004cb0 0b31283b          .long   00b31283bH
    1764 00004cd0 0e26383b          .long   00e26383bH
    1765 00004cf0 03273b3b          .long   003273b3bH      ;C0
    1766 00004d10 06302b39          .long   006302b39H
    1767 00004d30 11202b3b          .long   011202b3bH
    1768 00004d50 1021283b          .long   01021283bH
    1769 00004d70 13273938          .long   013273938H
    1770 00004d90 12243938          .long   012243938H
    1771 00004db0 03273b3b          .long   003273b3bH
    1772 00004dd0 06302b39          .long   006302b39H
    1773 00004df0 0b31283b          .long   00b31283bH      ;E0
    1774 00004e10 0e26383b          .long   00e26383bH
    1775 00004e30 19322e06          .long   019322e06H
    1776 00004e50 18312a12          .long   018312a12H
    1777 00004e70 1b332f05          .long   01b332f05H
    1778 00004e90 1a302b11          .long   01a302b11H
    1779 00004eb0 0b31283b          .long   00b31283bH
    1780 00004ed0 0e26383b          .long   00e26383bH
    1781                            .def    secend
    1782 00004ef0           secend
    1783                    
    1784                    
    1785                    
    1786 00004ef0                   BSSX    znvhSHK_ON,16           ;is a shake in progress?
    1787 00004ef0                   BSSX    znvhX_ADJ,32            ;current deviation from rest
    1788                    
    1789 00004ef0            SUBR   HORZ_SHAKER2
    1790                    
    1791                            ;check for a valid a10
    1792 00004ef0     4d4a          move    a10,a10
    1793 00004f00     ce20          jrn     znvhdone
    1794 00004f10     ca1f          jrz     znvhdone
    1795                    
    1796 00004f20     05a0          move    @znvhSHK_ON,a0
         00004f30 00000ed0- 
    1797 00004f50     ca0f          jrz     znvhno_shake
    1798                    
    1799                            ;abort shake currently in progress
    1800 00004f60     09c0          movi    HZSHAKE_PID,a0
         00004f70     0156  
    1801 00004f80     0d5f          calla   KIL1C
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   38

         00004f90 00000000! 
    1802 00004fb0     05ae          move    @znvhX_ADJ,a14
         00004fc0 00000ee0- 
    1803 00004fe0     07a0          move    @WORLDTLX,a0,L
         00004ff0 00000000! 
    1804 00005010     45c0          sub     a14,a0
    1805 00005020     0780          move    a0,@WORLDTLX,L
         00005030 00000000! 
    1806                    
    1807 00005050           znvhno_shake
    1808                            ;set the 'in progress' flag
    1809 00005050     182e          movk    1,a14
    1810 00005060     058e          move    a14,@znvhSHK_ON
         00005070 00000ed0- 
    1811                    
    1812                            ;create the shaker process
    1813 00005090                   CREATE  HZSHAKE_PID,znvhshaker
    1814                    
    1815 00005110           znvhdone
    1816 00005110     0960          rets
    1817                    
    1818 00005120           znvhshaker
    1819                            ;a9  = index into sine table
    1820                            ;a10 = time left
    1821                            ;a11 = original time left
    1822                    
    1823                            ;initialize
    1824 00005120     09e9          movi    znvhlast_entry,a9
         00005130 00000009  
    1825 00005150     4d4b          move    a10,a11
    1826                    
    1827 00005160           znvhloop
    1828                            ;calculate the new offset
    1829                    
    1830                            ;get the cosine
    1831 00005160     4d2e          move    a9,a14
    1832 00005170                   X16     a14
    1833 00005180     0b2e          addi    znvhsine_table,a14
         00005190 00005520' 
    1834 000051b0     85c0          move    *a14,a0,W
    1835                    
    1836                            ;get the exp (index is 64 - (64 * a10 / a11)
    1837 000051c0     4d41          move    a10,a1
    1838 000051d0                   X64     a1
    1839 000051e0     5b61          divu    a11,a1
    1840 000051f0     03a1          neg     a1
    1841 00005200     0b01          addi    64,a1
         00005210     0040  
    1842 00005220                   X16     a1
    1843 00005230     0b21          addi    znvhexp_table,a1
         00005240 000055c0' 
    1844 00005260     8421          move    *a1,a1,W
    1845                    
    1846                            ;multiply
    1847 00005270     5c01          mpys    a0,a1
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   39

    1848                    
    1849                            ;scale
    1850 00005280     2b61          sra     5,a1
    1851 00005290     5f61          mpyu    a11,a1
    1852                    
    1853 000052a0     0781          move    a1,@znvhX_ADJ,L
         000052b0 00000ee0- 
    1854                    
    1855                            ;update the table pointer
    1856 000052d0     3869          dsj     a9,znvhtable_ok
    1857 000052e0     09e9          movi    znvhlast_entry,a9
         000052f0 00000009  
    1858 00005310           znvhtable_ok
    1859                    
    1860                            ;apply it
    1861 00005310     07ae          move    @WORLDTLX,a14,L
         00005320 00000000! 
    1862 00005340     41c1          add     a14,a1
    1863 00005350     0781          move    a1,@WORLDTLX,L
         00005360 00000000! 
    1864                    
    1865                            ;nap
    1866 00005380                   SLEEPK  1
    1867                    
    1868                            ;undo it
    1869 000053c0     07ae          move    @znvhX_ADJ,a14,L
         000053d0 00000ee0- 
    1870 000053f0     07a1          move    @WORLDTLX,a1,L
         00005400 00000000! 
    1871 00005420     45c1          sub     a14,a1
    1872 00005430     0781          move    a1,@WORLDTLX,L
         00005440 00000000! 
    1873                    
    1874                            ;loop
    1875 00005460     0d8a          dsj     a10,znvhloop
         00005470     ffce  
    1876                    
    1877                            ;all done
    1878 00005480     57ce          clr     a14
    1879 00005490     058e          move    a14,@znvhSHK_ON
         000054a0 00000ed0- 
    1880 000054c0     058e          move    a14,@znvhX_ADJ
         000054d0 00000ee0- 
    1881 000054f0                   DIE
    1882                    
    1883 00005520           znvhsine_table                  ;deg
    1884 00005520     fda7          .word   -601            ;324
    1885 00005530     fc33          .word   -973            ;288
    1886 00005540     fc33          .word   -973            ;252
    1887 00005550     fda7          .word   -601            ;216
    1888 00005560     0000          .word   0               ;180
    1889 00005570     025a          .word   602             ;144
    1890 00005580     03ce          .word   974             ;108
    1891 00005590     03ce          .word   974             ;72
    1892 000055a0     025a          .word   602             ;36
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   40

    1893 000055b0     0000          .word   0               ;0
    1894              0009  znvhlast_entry  equ     9
    1895                    
    1896                            ;values of e^(-x) for values from 0 to 7, in 64 divisions
    1897                            ; e.g. e^-1.5 is the 32nd entry
    1898                            ; all values are multiplied by 1024
    1899 000055c0           znvhexp_table           ;damps at speed 5
    1900 000055c0     0400          .word 1024,945,873,807,745,688,636,587
    1901 00005640     021e          .word 542,501,463,427,395,364,337,311
    1902 000056c0     011f          .word 287,265,245,226,209,193,178,165
    1903 00005740     0098          .word 152,140,130,120,110,102,94,87
    1904 000057c0     0050          .word 80,74,68,63,58,54,50,46
    1905 00005840     002a          .word 42,39,36,33,31,28,26,24
    1906 000058c0     0016          .word 22,20,19,17,16,15,14,13
    1907 00005940     000c          .word 12,11,10,9,8,8,7,6
    1908                    
    1909                    
    1910 000059c0                   BSSX    wcoxSHK_ON,16           ;is a shake in progress?
    1911 000059c0                   BSSX    wcoxY_ADJ,32            ;current deviation from rest
    1912                    
    1913 000059c0            SUBR   SHAKER2
    1914                    
    1915                            ;check for a valid a10
    1916 000059c0     4d4a          move    a10,a10
    1917 000059d0     ce20          jrn     wcoxdone
    1918 000059e0     ca1f          jrz     wcoxdone
    1919                    
    1920 000059f0     05a0          move    @wcoxSHK_ON,a0
         00005a00 00000f00- 
    1921 00005a20     ca0f          jrz     wcoxno_shake
    1922                    
    1923                            ;abort shake currently in progress
    1924 00005a30     09c0          movi    SHAKE_PID,a0
         00005a40     013b  
    1925 00005a50     0d5f          calla   KIL1C
         00005a60 00000000! 
    1926 00005a80     05ae          move    @wcoxY_ADJ,a14
         00005a90 00000f10- 
    1927 00005ab0     07a0          move    @WORLDTLY,a0,L
         00005ac0 00000000! 
    1928 00005ae0     45c0          sub     a14,a0
    1929 00005af0     0780          move    a0,@WORLDTLY,L
         00005b00 00000000! 
    1930                    
    1931 00005b20           wcoxno_shake
    1932                            ;set the 'in progress' flag
    1933 00005b20     182e          movk    1,a14
    1934 00005b30     058e          move    a14,@wcoxSHK_ON
         00005b40 00000f00- 
    1935                    
    1936                            ;create the shaker process
    1937 00005b60                   CREATE  SHAKE_PID,wcoxshaker
    1938                    
    1939 00005be0           wcoxdone
    1940 00005be0     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   41

    1941                    
    1942 00005bf0           wcoxshaker
    1943                            ;a9  = index into sine table
    1944                            ;a10 = time left
    1945                            ;a11 = original time left
    1946                    
    1947                            ;initialize
    1948 00005bf0     09e9          movi    wcoxlast_entry,a9
         00005c00 00000009  
    1949 00005c20     4d4b          move    a10,a11
    1950                    
    1951 00005c30           wcoxloop
    1952                            ;calculate the new offset
    1953                    
    1954                            ;get the cosine
    1955 00005c30     4d2e          move    a9,a14
    1956 00005c40                   X16     a14
    1957 00005c50     0b2e          addi    wcoxsine_table,a14
         00005c60 00006090' 
    1958 00005c80     85c0          move    *a14,a0,W
    1959                    
    1960                            ;get the exp (index is 64 - (64 * a10 / a11)
    1961 00005c90     4d41          move    a10,a1
    1962 00005ca0                   X64     a1
    1963 00005cb0     5b61          divu    a11,a1
    1964 00005cc0     03a1          neg     a1
    1965 00005cd0     0b01          addi    64,a1
         00005ce0     0040  
    1966 00005cf0                   X16     a1
    1967 00005d00     0b21          addi    wcoxexp_table,a1
         00005d10 00006130' 
    1968 00005d30     8421          move    *a1,a1,W
    1969                    
    1970                            ;multiply
    1971 00005d40     5c01          mpys    a0,a1
    1972                    
    1973                            ;scale
    1974 00005d50     2b61          sra     5,a1
    1975 00005d60     5f61          mpyu    a11,a1
    1976                    
    1977 00005d70     0781          move    a1,@wcoxY_ADJ,L
         00005d80 00000f10- 
    1978                    
    1979                            ;update the table pointer
    1980 00005da0     3869          dsj     a9,wcoxtable_ok
    1981 00005db0     09e9          movi    wcoxlast_entry,a9
         00005dc0 00000009  
    1982 00005de0           wcoxtable_ok
    1983                    
    1984                            ;apply it
    1985 00005de0     07ae          move    @WORLDTLY,a14,L
         00005df0 00000000! 
    1986 00005e10     41c1          add     a14,a1
    1987 00005e20     0781          move    a1,@WORLDTLY,L
         00005e30 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   42

    1988                    
    1989                            ;nap
    1990 00005e50                   SLEEPK  1
    1991                    
    1992                            ;undo it
    1993 00005e90     07ae          move    @wcoxY_ADJ,a14,L
         00005ea0 00000f10- 
    1994 00005ec0     07a1          move    @WORLDTLY,a1,L
         00005ed0 00000000! 
    1995 00005ef0     45c1          sub     a14,a1
    1996 00005f00     0781          move    a1,@WORLDTLY,L
         00005f10 00000000! 
    1997                    
    1998                            ;loop
    1999 00005f30     0d8a          dsj     a10,wcoxloop
         00005f40     ffce  
    2000                    
    2001                            ;all done
    2002 00005f50     57ce          clr     a14
    2003 00005f60     058e          move    a14,@wcoxSHK_ON
         00005f70 00000f00- 
    2004 00005f90     058e          move    a14,@wcoxY_ADJ
         00005fa0 00000f10- 
    2005 00005fc0                   DIE
    2006                    
    2007                            ;45-degree increments
    2008                    
    2009                            ;36-degree increments
    2010 00005ff0           wcoxcosine_table                        ;deg
    2011 00005ff0     033c          .word   828             ;324
    2012 00006000     013c          .word   316             ;288
    2013 00006010     fec5          .word   -315            ;252
    2014 00006020     fcc5          .word   -827            ;216
    2015 00006030     ff9a          .word   -102            ;180
    2016 00006040     fcc5          .word   -827            ;144
    2017 00006050     fec5          .word   -315            ;108
    2018 00006060     013c          .word   316             ;72
    2019 00006070     033c          .word   828             ;36
    2020 00006080     0400          .word   1024            ;0
    2021                            
    2022 00006090           wcoxsine_table                  ;deg
    2023 00006090     fda7          .word   -601            ;324
    2024 000060a0     fc33          .word   -973            ;288
    2025 000060b0     fc33          .word   -973            ;252
    2026 000060c0     fda7          .word   -601            ;216
    2027 000060d0     0000          .word   0               ;180
    2028 000060e0     025a          .word   602             ;144
    2029 000060f0     03ce          .word   974             ;108
    2030 00006100     03ce          .word   974             ;72
    2031 00006110     025a          .word   602             ;36
    2032 00006120     0000          .word   0               ;0
    2033              0009  wcoxlast_entry  equ     9
    2034                    
    2035                            ;30-degree increments
    2036                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   43

    2037                            ;values of e^(-x) for values from 0 to 7, in 64 divisions
    2038                            ; e.g. e^-1.5 is the 32nd entry
    2039                            ; all values are multiplied by 1024
    2040                    
    2041                    
    2042 00006130           wcoxexp_table           ;damps at speed 5
    2043 00006130     0400          .word 1024,945,873,807,745,688,636,587
    2044 000061b0     021e          .word 542,501,463,427,395,364,337,311
    2045 00006230     011f          .word 287,265,245,226,209,193,178,165
    2046 000062b0     0098          .word 152,140,130,120,110,102,94,87
    2047 00006330     0050          .word 80,74,68,63,58,54,50,46
    2048 000063b0     002a          .word 42,39,36,33,31,28,26,24
    2049 00006430     0016          .word 22,20,19,17,16,15,14,13
    2050 000064b0     000c          .word 12,11,10,9,8,8,7,6
    2051                    
    2052                    
    2053                    
    2054                    
    2055 00000f30                   .BSS    AMP,16
    2056 00000f40                   .BSS    AMPCNT,16
    2057 00000f50                   .BSS    XSET,16
    2058 00000f60                   .BSS    YSET,16
    2059 00000f70                   .BSS    SHK_ON,16
    2060                    
    2061 00006530            SUBR   SHAKER
    2062                    
    2063 00006530     05a0          move    @SHK_ON,a0
         00006540 00000f70- 
    2064 00006560     cb14          jrnz    wcoxx
    2065 00006570     4d4b          move    a10,a11
    2066 00006580     1840          movk    2,a0
    2067 00006590     0580          move    a0,@SHK_ON
         000065a0 00000f70- 
    2068 000065c0     580b          divs    a0,a11
    2069 000065d0     18c0          movk    6,a0
    2070 000065e0     0580          move    a0,@AMP
         000065f0 00000f30- 
    2071 00006610     058b          move    a11,@AMPCNT
         00006620 00000f40- 
    2072                            
    2073 00006640                   CREATE0 shakelp
    2074 000066b0     0960  wcoxx   RETS
    2075                            
    2076                    
    2077 000066c0           shakelp
    2078                     .if 0
    2079                            move    @AMP,a0
    2080                            calla   RNDRNG0
    2081                            move    a0,@XSET
    2082                            move    @AMP,a0
    2083                            calla   RNDRNG0
    2084                            move    a0,@YSET
    2085                            move    @HCOUNT,a14
    2086                            btst    0,a14
    2087                            jrz     wcoxshakey
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   44

    2088                    
    2089                            move    @XSET,a1
    2090                            move    @WORLDTLX,a0,L
    2091                            sll     16,a1
    2092                            add     a1,a0
    2093                            move    a0,@WORLDTLX,L
    2094                            SLEEPK  1
    2095                            move    @XSET,a1
    2096                            move    @WORLDTLX,a0,L
    2097                            sll     16,a1
    2098                            sub     a1,a0
    2099                            move    a0,@WORLDTLX,L
    2100                            jruc    shakelp
    2101                     .endif
    2102                    
    2103 000066c0           wcoxshakey
    2104 000066c0     05a0          move    @AMP,a0
         000066d0 00000f30- 
    2105 000066f0     0d5f          calla   RNDRNG0
         00006700 00002d80' 
    2106 00006720     0580          move    a0,@YSET
         00006730 00000f60- 
    2107                    
    2108 00006750     05a1          move    @YSET,a1
         00006760 00000f60- 
    2109 00006780     07a0          move    @WORLDTLY,a0,L
         00006790 00000000! 
    2110 000067b0     2601          sll     16,a1
    2111 000067c0     4020          add     a1,a0
    2112 000067d0     0780          move    a0,@WORLDTLY,L
         000067e0 00000000! 
    2113 00006800                   SLEEPK  1
    2114 00006840     05a1          move    @YSET,a1
         00006850 00000f60- 
    2115 00006870     07a0          move    @WORLDTLY,a0,L
         00006880 00000000! 
    2116 000068a0     2601          sll     16,a1
    2117 000068b0     4420          sub     a1,a0
    2118 000068c0     0780          move    a0,@WORLDTLY,L
         000068d0 00000000! 
    2119 000068f0     05a2          move    @AMPCNT,a2
         00006900 00000f40- 
    2120 00006920     1422          dec     a2
    2121 00006930     0582          move    a2,@AMPCNT
         00006940 00000f40- 
    2122 00006960     cb0d          jrnz    wcoxampok
    2123 00006970     058b          move    a11,@AMPCNT
         00006980 00000f40- 
    2124 000069a0     05a0          move    @AMP,a0
         000069b0 00000f30- 
    2125 000069d0     0b40          cmpi    1,a0
         000069e0     fffe  
    2126 000069f0     ca04          jrz     wcoxampok
    2127 00006a00     1420          dec     a0
    2128 00006a10     0580          move    a0,@AMP
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   45

         00006a20 00000f30- 
    2129 00006a40           wcoxampok
    2130 00006a40     0d8a          dsj     a10,shakelp
         00006a50     ffc6  
    2131 00006a60     058a          move    a10,@SHK_ON
         00006a70 00000f70- 
    2132                    
    2133 00006a90                   DIE
    2134                    
    2135                    
    2136 00006ac0            SUBR   get_all_starts_cur
    2137                    
    2138 00006ac0     5621          clr     a1
    2139                    
    2140 00006ad0     05a2          move    @PSTATUS2,a2
         00006ae0 00000000! 
    2141                    
    2142 00006b00     1fe2          btst    0,a2
    2143 00006b10     ca05          jrz     muibno_player1
    2144 00006b20     5600          clr     a0                      ;player 1
    2145 00006b30     0d5f          calla   get_start_cur
         00006b40 00006d40' 
    2146 00006b60     5401          or      a0,a1
    2147 00006b70           muibno_player1
    2148                    
    2149 00006b70     1fc2          btst    1,a2
    2150 00006b80     ca05          jrz     muibno_player2
    2151 00006b90     1820          movk    1,a0                    ;player 2
    2152 00006ba0     0d5f          calla   get_start_cur
         00006bb0 00006d40' 
    2153 00006bd0     5401          or      a0,a1
    2154 00006be0           muibno_player2
    2155                    
    2156 00006be0     4c20          move    a1,a0
    2157 00006bf0     0960          rets
    2158                    
    2159                    
    2160 00006c00            SUBR   get_all_starts_down
    2161                    
    2162 00006c00     5621          clr     a1
    2163                    
    2164 00006c10     05a2          move    @PSTATUS2,a2
         00006c20 00000000! 
    2165                    
    2166 00006c40     1fe2          btst    0,a2
    2167 00006c50     ca05          jrz     zeojno_player1
    2168 00006c60     5600          clr     a0                      ;player 1
    2169 00006c70     0d5f          calla   get_start_down
         00006c80 00006e10' 
    2170 00006ca0     5401          or      a0,a1
    2171 00006cb0           zeojno_player1
    2172                    
    2173 00006cb0     1fc2          btst    1,a2
    2174 00006cc0     ca05          jrz     zeojno_player2
    2175 00006cd0     1820          movk    1,a0                    ;player 2
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   46

    2176 00006ce0     0d5f          calla   get_start_down
         00006cf0 00006e10' 
    2177 00006d10     5401          or      a0,a1
    2178 00006d20           zeojno_player2
    2179                    
    2180 00006d20     4c20          move    a1,a0
    2181 00006d30     0960          rets
    2182                    
    2183                    
    2184 00006d40            SUBR   get_start_cur
    2185                    
    2186 00006d40     2480          sll     4,a0                    ;x 16 bits
    2187 00006d50     0b20          addi    start_offs,a0
         00006d60 00006ee0' 
    2188 00006d80     8400          move    *a0,a0
    2189 00006d90     0b20          addi    switches_cur,a0
         00006da0 00000000! 
    2190 00006dc0     8400          move    *a0,a0
    2191 00006dd0     0b80          andi    1,a0
         00006de0 fffffffe  
    2192 00006e00     0960          rets
    2193                    
    2194                    
    2195 00006e10            SUBR   get_start_down
    2196                    
    2197 00006e10     2480          sll     4,a0                    ;x 16 bits
    2198 00006e20     0b20          addi    start_offs,a0
         00006e30 00006ee0' 
    2199 00006e50     8400          move    *a0,a0
    2200 00006e60     0b20          addi    switches_down,a0
         00006e70 00000000! 
    2201 00006e90     8400          move    *a0,a0
    2202 00006ea0     0b80          andi    1,a0
         00006eb0 fffffffe  
    2203 00006ed0     0960          rets
    2204                    
    2205                    
    2206 00006ee0     0012  start_offs      .word   12h,15h
    2207                    
    2208                    
    2209 00006f00             SUBR  get_all_sticks_cur
    2210                    
    2211 00006f00     5621          clr     a1
    2212                    
    2213 00006f10     05a2          move    @PSTATUS2,a2
         00006f20 00000000! 
    2214                    
    2215 00006f40     1fe2          btst    0,a2
    2216 00006f50     ca05          jrz     cmgyno_player1
    2217 00006f60     5600          clr     a0                      ;player 1
    2218 00006f70     0d5f          calla   get_stick_val_cur
         00006f80 00000000! 
    2219 00006fa0     5401          or      a0,a1
    2220 00006fb0           cmgyno_player1
    2221                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   47

    2222 00006fb0     1fc2          btst    1,a2
    2223 00006fc0     ca05          jrz     cmgyno_player2
    2224 00006fd0     1820          movk    1,a0                    ;player 2
    2225 00006fe0     0d5f          calla   get_stick_val_cur
         00006ff0 00000000! 
    2226 00007010     5401          or      a0,a1
    2227 00007020           cmgyno_player2
    2228                    
    2229 00007020     4c20          move    a1,a0
    2230 00007030     0960          rets
    2231                    
    2232                    
    2233                    
    2234 00007040             SUBR  get_all_sticks_cur2
    2235                    
    2236 00007040     5621          clr     a1
    2237                    
    2238 00007050     5600          clr     a0                      ;player 1
    2239 00007060     0d5f          calla   get_stick_val_cur
         00007070 00000000! 
    2240 00007090     5401          or      a0,a1
    2241                    
    2242 000070a0     1820          movk    1,a0                    ;player 2
    2243 000070b0     0d5f          calla   get_stick_val_cur
         000070c0 00000000! 
    2244 000070e0     5401          or      a0,a1
    2245                    
    2246 000070f0     4c20          move    a1,a0
    2247 00007100     0960          rets
    2248                    
    2249                    
    2250                    
    2251 00007110             SUBR  get_all_sticks_down
    2252                    
    2253 00007110     5621          clr     a1
    2254                    
    2255 00007120     05a2          move    @PSTATUS2,a2
         00007130 00000000! 
    2256                    
    2257 00007150     1fe2          btst    0,a2
    2258 00007160     ca05          jrz     xuknno_player1
    2259 00007170     5600          clr     a0                      ;player 1
    2260 00007180     0d5f          calla   get_stick_val_down
         00007190 00000000! 
    2261 000071b0     5401          or      a0,a1
    2262 000071c0           xuknno_player1
    2263                    
    2264 000071c0     1fc2          btst    1,a2
    2265 000071d0     ca05          jrz     xuknno_player2
    2266 000071e0     1820          movk    1,a0                    ;player 2
    2267 000071f0     0d5f          calla   get_stick_val_down
         00007200 00000000! 
    2268 00007220     5401          or      a0,a1
    2269 00007230           xuknno_player2
    2270                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   48

    2271 00007230     4c20          move    a1,a0
    2272 00007240     0960          rets
    2273                    
    2274                    
    2275                    
    2276 00007250             SUBR  get_all_sticks_down2
    2277                    
    2278 00007250     5621          clr     a1
    2279                    
    2280 00007260     5600          clr     a0                      ;player 1
    2281 00007270     0d5f          calla   get_stick_val_down
         00007280 00000000! 
    2282 000072a0     5401          or      a0,a1
    2283                    
    2284 000072b0     1820          movk    1,a0
    2285 000072c0     0d5f          calla   get_stick_val_down      ;player 2
         000072d0 00000000! 
    2286 000072f0     5401          or      a0,a1
    2287                    
    2288 00007300     4c20          move    a1,a0
    2289                    
    2290 00007310     0960          rets
    2291                    
    2292                    
    2293                    
    2294 00007320             SUBR  get_all_buttons_cur
    2295                    
    2296 00007320     5621          clr     a1
    2297                    
    2298 00007330     05a2          move    @PSTATUS2,a2
         00007340 00000000! 
    2299                    
    2300 00007360     1fe2          btst    0,a2
    2301 00007370     ca05          jrz     ayreno_player1
    2302 00007380     5600          clr     a0                      ;player 1
    2303 00007390     0d5f          calla   get_but_val_cur
         000073a0 00000000! 
    2304 000073c0     5401          or      a0,a1
    2305 000073d0           ayreno_player1
    2306                    
    2307 000073d0     1fc2          btst    1,a2
    2308 000073e0     ca05          jrz     ayreno_player2
    2309 000073f0     1820          movk    1,a0                    ;player 2
    2310 00007400     0d5f          calla   get_but_val_cur
         00007410 00000000! 
    2311 00007430     5401          or      a0,a1
    2312 00007440           ayreno_player2
    2313                    
    2314 00007440     4c20          move    a1,a0
    2315 00007450     0960          rets
    2316                    
    2317                    
    2318                    
    2319 00007460             SUBR  get_all_buttons_cur2
    2320                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   49

    2321 00007460     5621          clr     a1
    2322 00007470     5600          clr     a0                      ;player 1
    2323 00007480     0d5f          calla   get_but_val_cur
         00007490 00000000! 
    2324 000074b0     5401          or      a0,a1
    2325 000074c0     1820          movk    1,a0                    ;player 2
    2326 000074d0     0d5f          calla   get_but_val_cur
         000074e0 00000000! 
    2327 00007500     5401          or      a0,a1
    2328 00007510     4c20          move    a1,a0
    2329 00007520     0960          rets
    2330                    
    2331                    
    2332                    
    2333 00007530            SUBR   get_all_buttons_down
    2334                    
    2335 00007530     5621          clr     a1
    2336                    
    2337 00007540     05a2          move    @PSTATUS2,a2
         00007550 00000000! 
    2338                    
    2339 00007570     1fe2          btst    0,a2
    2340 00007580     ca05          jrz     eaxsno_player1
    2341 00007590     5600          clr     a0                      ;player 1
    2342 000075a0     0d5f          calla   get_but_val_down
         000075b0 00000000! 
    2343 000075d0     5401          or      a0,a1
    2344 000075e0           eaxsno_player1
    2345                    
    2346 000075e0     1fc2          btst    1,a2
    2347 000075f0     ca05          jrz     eaxsno_player2
    2348 00007600     1820          movk    1,a0                    ;player 2
    2349 00007610     0d5f          calla   get_but_val_down
         00007620 00000000! 
    2350 00007640     5401          or      a0,a1
    2351 00007650           eaxsno_player2
    2352                    
    2353 00007650     4c20          move    a1,a0
    2354 00007660     0960          rets
    2355                    
    2356                    
    2357                    
    2358 00007670            SUBR   get_all_buttons_down2
    2359                    
    2360 00007670     5621          clr     a1
    2361 00007680     5600          clr     a0                      ;player 1
    2362 00007690     0d5f          calla   get_but_val_down
         000076a0 00000000! 
    2363 000076c0     5401          or      a0,a1
    2364 000076d0     1820          movk    1,a0                    ;player 2
    2365 000076e0     0d5f          calla   get_but_val_down
         000076f0 00000000! 
    2366 00007710     5401          or      a0,a1
    2367 00007720     4c20          move    a1,a0
    2368 00007730     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   50

    2369                    
    2370                    
    2371 00007740            SUBRP  rnd
    2372                    
    2373 00007740     07a1          move    @RAND,a1,L
         00007750 00000000- 
    2374 00007770     6821          rl      a1,a1
    2375 00007780     05ae          move    @HCOUNT,a14
         00007790 c00001c0  
    2376 000077b0     69c1          rl      a14,a1
    2377 000077c0     41e1          add     sp,a1
    2378 000077d0     0781          move    a1,@RAND,L
         000077e0 00000000- 
    2379                    
    2380 00007800     5020          and     a1,a0
    2381 00007810     0960          rets
    2382                    
    2383                    
    2384                    
    2385 00007820            SUBR   rndrng0
    2386                    
    2387 00007820     07a1          move    @RAND,a1,L
         00007830 00000000- 
    2388 00007850     6821          rl      a1,a1
    2389 00007860     05ae          move    @HCOUNT,a14
         00007870 c00001c0  
    2390 00007890     69c1          rl      a14,a1
    2391 000078a0     41e1          add     sp,a1
    2392 000078b0     0781          move    a1,@RAND,L
         000078c0 00000000- 
    2393                    
    2394 000078e0     1020          addk    1,a0
    2395 000078f0     5e20          mpyu    a1,a0           ;Condition codes not valid!
    2396                    
    2397 00007900     0960          rets
    2398                    
    2399                    
    2400                            .if     DEBUG
    2401                            
    2402                    
    2403                     SUBR   tint_on
    2404                    
    2405                            PUSH    a0,a1
    2406                            movi    07fffh,a0       ;all bits on (5 bits RGB (white))
    2407                            movi    COLRAM,a1       ;base address of colour ram
    2408                            move    a0,*a1          ;restore colour
    2409                            PULL    a0,a1
    2410                            rets
    2411                    
    2412                    
    2413                     SUBR   tint_off
    2414                    
    2415                            PUSH    a0,a1
    2416                            clr     a0              ;all bits off (black)
    2417                            movi    8<<10+8<<5+8,a0 ;grey
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   51

    2418                            movi    COLRAM,a1       ;base address of colour ram
    2419                            move    a0,*a1          ;restore colour
    2420                            PULL    a0,a1
    2421                            rets
    2422                    
    2423                            .endif
    2424                    
    2425                    
    2426                    
    2427 00007910            SUBR   civanic
    2428                    
    2429 00007910     b501          move    *a8(OCTRL),a1,W
         00007920     00f0  
    2430                    
    2431 00007930            SUBR   civani
    2432                    
    2433 00007930     0b60          cmpi    ROM,a0
         00007940 f87fffff  
    2434 00007960     c817          jrlo    ukrtanierr
    2435                    
    2436                            ;set new anim points
    2437 00007970     b808          move    *a0(IANIOFFX),*a8(ODXOFF),W
         00007980     0020  
         00007990     0220  
    2438 000079a0     b808          move    *a0(IANIOFFY),*a8(ODYOFF),W
         000079b0     0030  
         000079c0     0230  
    2439                    
    2440 000079d0     b208          move    a0,*a8(OIMG),L
         000079e0     0170  
    2441 000079f0     ba08          move    *a0(0),*a8(OSIZE),L
         00007a00     0000  
         00007a10     0130  
    2442 00007a20     ba08          move    *a0(ISAG),*a8(OSAG),L
         00007a30     0040  
         00007a40     0110  
    2443                    
    2444 00007a50     0545          setf    5,0,0
    2445 00007a60     b808          move    *a0(ICTRL+7),*a8(OCTRL+7) ;Write 5 z comp bits
         00007a70     0067  
         00007a80     00f7  
    2446 00007a90     0546          setf    6,0,0
    2447 00007aa0     b028          move    a1,*a8(OCTRL)           ;Write 6 low bits
         00007ab0     00f0  
    2448 00007ac0     0570          setf    16,1,0
    2449                    
    2450 00007ad0     0960  ukrtx   rets
    2451                    
    2452 00007ae0           ukrtanierr 
    2453                            .if     DEBUG
    2454                            LOCKUP
    2455                            eint
    2456                            .else
    2457 00007ae0                   CALLERR 2,2
    2458                            .endif
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   52

    2459 00007b90     c0f3          jruc    ukrtx
    2460                    
    2461                    
    2462                    
    2463                            .end

 No Errors,  No Warnings
