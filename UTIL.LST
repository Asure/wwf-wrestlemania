TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    **************************************************************
       2                    *
       3                    * Software:     ? and Shawn Liptak
       4                    * Initiated:    ?
       5                    *
       6                    * Modified:     Shawn Liptak, 7/?/91    -Improved FLASHME, added FRANIMQ
       7                    *               Shawn Liptak, 7/?/91    -New and improved random stuff
       8                    *               Shawn Liptak, 9/13/91   -Fixed various junk (STRINGER)
       9                    *               Shawn Liptak, 10/5/91   -Added DELTAY to FRANIMQ
      10                    *               Shawn Liptak, 10/20/91  -Improved GETCPNT
      11                    *               Shawn Liptak, 1/4/92    -QDMAN mods
      12                    *               Shawn Liptak, 2/11/92   -Started basketball (cleanup)
      13                    *               Shawn Liptak, 12/10/92  -Added security code
      14                    *               Shawn Liptak, 3/16/93   -Fixed coin misses from wipeout
      15                    *
      16                    * COPYRIGHT (C) 1992 WILLIAMS ELECTRONICS GAMES, INC.
      17                    *
      18                    *.Last mod - 3/22/93 16:25
      19                    **************************************************************
      20                            .file   "util.asm"
      22                            .width  132
      23                            .option b,d,l,t
      24                            .mnolist
      25                    
      26                            .include        "mproc.equ"
      27                            .include        "display.equ"
      28                            .include        "gsp.equ"
      29                            .include        "sys.equ"
      30                            .include        "game.equ"
      31                            .include        "audit.equ"
      32                            .include        "macros.h"
      33                    
      34                    
      35                    ;utility subroutine equates
      36                    
      37                            .def    SCRCLR
      38                            .def    OBJOFF,OBJON
      39                            .def    STRLNRM,STRCNRM,STRCNRMO,STRLNRMO,STRCNRMO_1,CYCLE_TABLE
      40                            .def    STRCNRMO_2
      41                            .def    BLNKAREA
      42                            .def    FRANIM,FRANIMQ
      43                            .def    STRNGLEN
      44                            .def    STRRNRM,FILLAREA
      45                    
      46                            .DEF    SPECIAL_WIPEOUT
      47                    
      48                    ******************************************************************************
      49                    * EXTERNAL REFERENCES
      50                    
      51                            .ref    IGNORE_CHAR_WIDTH,debris_count,are_we_waiting_f
      52                            .ref    SPECIAL_DISPLAY_INIT,switches_cur,dirqtimer,pal_set
      53                            .ref    SYSCOPY,GET_ADJ,display_init,GAMSTATE,pal_find
      54                            .ref    pal_getf,dpageflip,SOUNDSUP,IRQSKYE,PSTATUS2,PALRAM
      55                            .ref    switches_down,gndstat,pal_init,BAKBITS,WFLG,WSPEED
      56                            .ref    COLRTEMP,ENDLESS_SOUND,get_but_val_cur,get_but_val_down
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE    2

      57                            .ref    get_stick_val_cur,get_stick_val_down
      58                    
      59                    ******************************************************************************
      60                    
      61                    
      62                            .def    STRNGRAM,HEXTOASC,GETANIX,WRLD
      63                            .def    COLCYC,CYCLE_TABLE,FLASHME
      64                    
      65                    
      66                    
      67 00000000                   BSSX    RAND            ,32             ;Last random #
      68 00000020                   .bss    STRNGRAM        ,20*16
      69 00000160                   .bss    WRLD            ,16
      70 00000000                   BSSX    LOWZ            ,16
      71                    
      72                    
      73 00000000                   .text
      74                    
      75                    
      76                    ********************************
      77                    * Kill all background objects
      78                    
      79                    ; SUBR  KILBGND
      80                    ;
      81                    ;       MMTM    SP,A0,A2,A3,A4,A5
      82                    ;       MOVI    BAKLST,A2,L     ;ACTIVE BACKGROUND OBJECTS LIST
      83                    ;       MOVE    *A2,A0,L
      84                    ;       JREQ    KILOBX          ;BR=NO MORE OBJECTS ON LIST
      85                    ;FREEB
      86                    ;       MOVE    A2,A3           ;SAVE PREVIOUS
      87                    ;       MOVE    *A2,A2,L        ;GET NEXT BLOCK
      88                    ;       JREQ    KILOBX          ;BR=ALL DONE
      89                    ;       MOVE    *A2,*A3,L       ;LINK AROUND IN ACTIVE LIST     
      90                    ;       MOVE    @OFREE,A5,L     ;LINK INTO FREE LIST AT START
      91                    ;       MOVE    A5,*A2,L
      92                    ;       MOVE    A2,@OFREE,L     ;UPDATE FREE LIST POINTER
      93                    ;       MOVE    A3,A2
      94                    ;       JRUC    FREEB           ;KILL ALL OBJECTS ON BACKGROUND LIST
      95                    ;KILOBX
      96                    ;       CALLR   ZERO_BITS
      97                    ;       MOVE    A0,@BAKLST,L
      98                    ;       MMFM    SP,A0,A2,A3,A4,A5
      99                    ;       RETS
     100                    
     101                    ********************************
     102                    
     103 00000000            SUBR   ZERO_BITS
     104                    
     105 00000000     5600          CLR     A0
     106 00000010     09c2          MOVI    10000/16,A2     ;SIZE OF BAKBITS IN WORDS
         00000020     0271  
     107 00000030     09e1          MOVI    BAKBITS,A1
         00000040 00000000! 
     108 00000060           KILUP
     109 00000060     9001          MOVE    A0,*A1+,W
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE    3

     110 00000070     3c42          DSJS    A2,KILUP
     111 00000080     0960          RETS
     112                    
     113 00000090            SUBR   SPECIAL_WIPEOUT
     114 00000090     0d3f          CALLR   WIPEOUT2
         000000a0     000e  
     115 000000b0     c080          JAUC    SPECIAL_DISPLAY_INIT
         000000c0 00000000! 
     116                    
     117                    **************************************************************************
     118                    * Wipes the system clear of all other processes, objects
     119                    * and coordinates. It returns with display processor disabled
     120                    * color ram cleared, and the bit map wiped clean.
     121                    
     122 000000e0            SUBR   WIPEOUT
     123                    
     124 000000e0     0d3f          callr   dirq_wait
         000000f0     02fc  
     125                    
     126 00000100     0d5f          calla   display_init
         00000110 00000000! 
     127                    
     128 00000130     01e0          pushst
     129 00000140     0360          dint
     130 00000150     0d5f          calla   pal_init
         00000160 00000000! 
     131 00000180     01c0          POPST
     132                    
     133                    
     134 00000190            SUBR   WIPEOUT2
     135                    
     136                    ;       callr   security_chk            ;Rets: A0=0 if OK!
     137                    
     138 00000190     5600          clr     a0
     139                    
     140 000001a0     0580          move    a0,@gndstat
         000001b0 00000000! 
     141 000001d0     0580          move    a0,@dtype
         000001e0 00000000! 
     142                    
     143 00000200     0580          move    a0,@are_we_waiting_f
         00000210 00000000! 
     144 00000230     0580          move    a0,@IGNORE_CHAR_WIDTH
         00000240 00000000! 
     145 00000260     0580          MOVE    A0,@ENDLESS_SOUND
         00000270 00000000! 
     146 00000290     0580          move    a0,@debris_count
         000002a0 00000000! 
     147                    
     148 000002c0     0580          move    a0,@WFLG
         000002d0 00000000! 
     149 000002f0     1a41          movk    OWSPD,a1
     150 00000300     0581          move    a1,@WSPEED
         00000310 00000000! 
     151                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE    4

     152 00000330     4c01          move    a0,a1
     153 00000340     0d5f          calla   KILALL                  ;Kill all processes
         00000350 00000000! 
     154                    
     155 00000370     0d3f          callr   ZERO_BITS
         00000380     ffc7  
     156 00000390     0d3f          callr   dpageflip_off
         000003a0     02f2  
     157 000003b0     5600          clr     a0
     158 000003c0     0580          move    a0,@SOUNDSUP            ;Allow sounds
         000003d0 00000000! 
     159 000003f0     0580          move    a0,@IRQSKYE
         00000400 00000000! 
     160                    ;       move    a0,@DISPLAYON           ;TURN THE DISPLAY PROCESSOR OFF
     161                    
     162 00000420     01e0          pushst
     163 00000430     0360          dint
     164                    
     165 00000440     05a0          move    @SYSCOPY,a0             ;>Init sysctrl
         00000450 00000000! 
     166                    
     167                            .if     WWFUNIT
     168 00000470     09e1          movi    SYSCINIT,a1
         00000480 0000987f  
     169                            .else
     170                            srl     8,a0
     171                            sll     8,a0
     172                            movi    SYSCINIT&0ffH,a1                ;Don't touch 7seg LED
     173                            .endif
     174                    
     175 000004a0     5420          or      a1,a0
     176 000004b0     0580          move    a0,@SYSCOPY
         000004c0 00000000! 
     177 000004e0     0580          move    a0,@SYSCTRL
         000004f0 01b00000  
     178                    
     179 00000510     01c0          popst
     180                    
     181 00000520     0d3f          callr   dirq_wait               ;Now wait for vblank to zap color map
         00000530     02b8  
     182                    
     183                    
     184 00000540     0960          rets
     185                    
     186                    *******************************
     187                    * Save display/process lists and variables of active game
     188                    * A13=*Process that stays running
     189                    * Trashes scratch, A2-A7
     190                    
     191 00000180                   .bss    sysstate_t      ,16*50          ;Mem for state save
     192 000004a0                   .bss    svproc_p        ,32             ;*Saved proc list
     193 000004c0                   .bss    pal_t           ,32*NMFPAL      ;Mem for pal save
     194                    
     195                    SSS     .macro  a
     196                            move    @:a:,*a1+
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE    5

     197                            .endm
     198                    SSSL    .macro  a
     199                            move    @:a:,*a1+,L
     200                            .endm
     201                    
     202 00000550            SUBR   system_savegame
     203                    
     204 00000550     09e1          movi    sysstate_t,a1
         00000560 00000180- 
     205                    
     206 00000580                   SSSL    OBJLST
     207 000005b0                   SSSL    BAKLST
     208 000005e0                   SSSL    WORLDTLX
     209 00000610                   SSSL    WORLDTLY
     210                    
     211 00000640                   SSS     IRQSKYE
     212 00000670                   SSSL    COLRTEMP
     213 000006a0                   SSS     dtype
     214 000006d0                   SSS     dpageflip
     215 00000700                   SSS     gndstat
     216                    
     217 00000730                   SSS     GAMSTATE
     218                    
     219                    ;       movi    plyrproc_t,a2
     220                    ;       movi    plyrobj_t,a3
     221                    ;       movi    P1CTRL,a4
     222                    ;       movk    4,b0
     223                    ;gyilp  move    *a2+,*a1+,L
     224                    ;       move    *a3+,*a1+,L
     225                    ;       move    *a4+,*a1+
     226                    ;       dsj     b0,gyilp
     227                    
     228                    
     229 00000760     09e2          movi    ACTIVE,a2
         00000770 00000000! 
     230 00000790     09e4          movi    svproc_p,a4
         000007a0 000004a0- 
     231 000007c0     c009          jruc    gyiprnxt
     232                    
     233 000007d0     49a2  gyiprlp cmp     a13,a2
     234 000007e0     ca07          jreq    gyiprnxt                        ;Me?
     235                    
     236 000007f0     b44e          move    *a2(PROCID),a14
         00000800     0020  
     237 00000810     ce04          jrn     gyiprnxt                        ;Indestructible?
     238                    
     239 00000820     8a43          move    *a2,*a3,L               ;Unlink
     240 00000830     8244          move    a2,*a4,L                ;Add it to save list
     241 00000840     4c44          move    a2,a4
     242 00000850     4c62          move    a3,a2
     243 00000860           gyiprnxt
     244 00000860     4c43          move    a2,a3
     245 00000870     8642          move    *a2,a2,L
     246 00000880     cbf4          jrnz    gyiprlp
     247                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE    6

     248 00000890     5600          clr     a0
     249 000008a0     8203          move    a0,*a3,L
     250 000008b0     8204          move    a0,*a4,L
     251                    
     252 000008c0     0780          move    a0,@OBJLST,L            ;Null lists
         000008d0 00000000! 
     253 000008f0     0780          move    a0,@BAKLST,L
         00000900 00000000! 
     254 00000920     0580          move    a0,@gndstat
         00000930 00000000! 
     255                    
     256 00000950     0d3f          callr   ZERO_BITS
         00000960     ff69  
     257                    
     258                    
     259 00000970     09e0          movi    PALRAM,a0               ;>Save pal ptrs
         00000980 00000000! 
     260 000009a0     09e1          movi    pal_t,a1
         000009b0 000004c0- 
     261 000009d0     09d0          movi    NMFPAL,b0
         000009e0     0050  
     262 000009f0     9a01  gyiplp  move    *a0+,*a1+,L
     263 00000a00     3c50          dsj     b0,gyiplp
     264                    
     265 00000a10     0d5f          calla   pal_init
         00000a20 00000000! 
     266                    
     267 00000a40     0960          rets
     268                    
     269                    
     270                    ;*******************************
     271                    ;* Restore state of system_savegame
     272                    ;* A13=*Process
     273                    ;* Trashes scratch, A2-A8
     274                    ;
     275                    ;SRS    .macro  a
     276                    ;       move    *a1+,a0
     277                    ;       move    a0,@:a:
     278                    ;       .endm
     279                    ;SRSL   .macro  a
     280                    ;       move    *a1+,a0,L
     281                    ;       move    a0,@:a:,L
     282                    ;       .endm
     283                    ;
     284                    ; SUBR  system_restoregame
     285                    ;
     286                    ;       clr     a0
     287                    ;       move    a0,@DISPLAYON
     288                    ;
     289                    ;       clr     a1
     290                    ;       calla   KILALL                  ;Kill all processes
     291                    ;       calla   KILBGND                 ;Kill old background
     292                    ;       movi    -1,a1
     293                    ;       calla   obj_delc                ;Kill all objs
     294                    ;
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE    7

     295                    ;       calla   pal_init
     296                    ;
     297                    ;       movi    pal_t,a3                ;>Restore pal ptrs
     298                    ;       movi    PALRAM,a4
     299                    ;       clr     a5
     300                    ;       movi    NMFPAL,a7
     301                    ;gyiplp
     302                    ;       move    *a3+,a0,L               ;Get * pal
     303                    ;       move    a0,*a4+,L
     304                    ;       jrz     gyinxtp
     305                    ;       move    a5,a1
     306                    ;       sll     8,a1                    ;Pal offset
     307                    ;       move    *a0+,a2                 ;Get # colors in pal
     308                    ;       calla   pal_set                 ;Setup pal transfer
     309                    ;gyinxtp        addk    1,a5
     310                    ;       cmpi    NMFPAL/2,a7
     311                    ;       jrne    gyiskipslp
     312                    ;       PUSHP   a3,a4,a5,a7
     313                    ;       PULL    a8                      ;Get our rets addr so we can sleep
     314                    ;       SLEEPK  1                       ;Split the transfer
     315                    ;       PUSH    a8
     316                    ;       PULLP   a3,a4,a5,a7
     317                    ;gyiskipslp
     318                    ;       dsj     a7,gyiplp
     319                    ;
     320                    ;
     321                    ;       movi    sysstate_t,a1
     322                    ;
     323                    ;       SRSL    OBJLST
     324                    ;       SRSL    BAKLST
     325                    ;       SRSL    WORLDTLX
     326                    ;       SRSL    WORLDTLY
     327                    ;
     328                    ;       SRS     IRQSKYE
     329                    ;       SRSL    COLRTEMP
     330                    ;       SRS     dtype
     331                    ;       SRS     dpageflip
     332                    ;       SRS     gndstat
     333                    ;
     334                    ;       SRS     GAMSTATE
     335                    ;
     336                    ;;      movi    plyrproc_t,a2
     337                    ;;      movi    plyrobj_t,a3
     338                    ;;      movi    P1CTRL,a4
     339                    ;;      movk    4,b0
     340                    ;;gyilp move    *a1+,*a2+,L
     341                    ;;      move    *a1+,*a3+,L
     342                    ;;      move    *a1+,*a4+
     343                    ;;      dsj     b0,gyilp
     344                    ;
     345                    ;
     346                    ;       movi    ACTIVE,a2               ;0FHind end of list
     347                    ;gyiprlp
     348                    ;       move    a2,a3
     349                    ;       move    *a2,a2,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE    8

     350                    ;       jrnz    gyiprlp
     351                    ;
     352                    ;       move    @svproc_p,*a3+,L        ;Link
     353                    ;
     354                    ;
     355                    ;       movk    1,a0
     356                    ;       move    a0,@DISPLAYON
     357                    ;
     358                    ;       rets
     359                    ;
     360                    ;
     361                    ;
     362                    ;********************************
     363                    ;* Clear all world coordinates and scroll velocities
     364                    ;
     365                    ;; SUBRP        world_clr
     366                    ;;
     367                    ;;      clr     a0
     368                    ;;      move    a0,@SCROLLX,L           ;X SCROLL VALUE
     369                    ;;      move    a0,@SCROLLY,L           ;Y SCROLL VALUE
     370                    ;;      move    a0,@WORLDTLX,L          ;TOP LEFT X SCREEN COORD (WORLD)
     371                    ;;      move    a0,@WORLDTLY,L          ;TOP LEFT Y SCREEN COORD (WORLD)
     372                    ;;      move    a0,@WORLDTL,L
     373                    ;       movi    SCRNST,a0
     374                    ;       move    a0,@SCRNTL,L
     375                    ;       movi    SCRNEND,a0
     376                    ;       move    a0,@SCRNLR,L
     377                    ;       rets
     378                    
     379                    
     380                    ****************************************************************
     381                    *
     382                    * Animation script code by SL
     383                    *
     384                    ****************************************************************
     385                    
     386                    ********************************
     387                    * Run an animation script (Process)
     388                    
     389                    
     390 00000a50                   BSSX    animscnt        ,16     ;# anim scripts running
     391                    
     392 00000a50                   STRUCTPD
     393 00000a50                   APTR    animslobj_p             ;*Last obj created
     394 00000a50                   LONG    animsv                  ;Temp value
     395 00000a50                   WORD    animsbx                 ;Base X
     396 00000a50                   WORD    animsby                 ;Base Y
     397 00000a50                   WORD    animsfnum               ;# FRANIMs running
     398 00000a50                   APTR    animslp_p               ;*Loop point table pos
     399                    ;Careful!
     400 00000a50                   APTR    animslp_t               ;(*Loop point, Loop cnt)*5
     401                    
     402                            .if 0
     403                     SUBR   anim_script             ;A8=*Script
     404                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE    9

     405                            clr     a9
     406                    
     407                     SUBRP  anim_script2            ;A8=*Script, A9=Base Y:X
     408                    
     409                            move    a9,*a13(animsbx),L      ;Save XY
     410                    
     411                            move    *a13(PROCID),a11
     412                            subi    ANIMPID,a11
     413                            srl     8,a11
     414                            sll     8,a11                   ;A11=ID offset (0-0300H)
     415                    
     416                            clr     a1
     417                            move    a1,*a13(animsfnum)
     418                            move    a13,a1
     419                            addi    animslp_t,a1
     420                            move    a1,*a13(animslp_p),L
     421                    
     422                    anslp   move    *a8+,a1                 ;Get command
     423                    
     424                            addi    anims_t,a1
     425                            move    *a1,a1,L
     426                            jump    a1
     427                    
     428                            .long   asEND
     429                    anims_t .long   asNEW,asDEL,asDELM,asFRA
     430                            .long   asANI,asHIDE,asSHOW,asPAL
     431                            .long   asXY,asXYRNG,asYA,asXYV
     432                            .long   asXYVA,asXYV0,asZ,asBXY
     433                            .long   asSLP,asSLP1,asSLPR
     434                            .long   asWAIT,asTXT
     435                            .long   asTXTR,asTXTK,asLAB,asLABR
     436                            .long   asDSJ,asDSJS1,asJMP,asJMPR,asJMPEQ
     437                            .long   asJMPNE,asRUN,asRUNI,asCRE
     438                            .long   asKIL,asASM,asSND,asSNDD
     439                            .long   asADDW
     440                            .long   asADDWO,asADDLO,asADLVO,asSVRL
     441                            .long   asSVRLT,asSVL
     442                    
     443                    
     444                    asNEW                                   ;>New objects
     445                            move    *a8+,a9,L               ;Get data
     446                            PUSH    a8
     447                    ans100  move    *a9+,a2,L               ;*Image
     448                            move    *a9+,a0,L               ;Get XY
     449                            move    *a13(animsbx),a3,L
     450                            addxy   a3,a0                   ;Add base
     451                            clr     a1
     452                            movy    a0,a1
     453                            sll     16,a0
     454                            move    *a9+,a3                 ;Z
     455                            move    *a9+,a4                 ;Flags
     456                            addi    M_NOCOLL,a4
     457                            move    *a9+,a5                 ;ID
     458                            addi    CLSANIM,a5
     459                            add     a11,a5                  ;+offset
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   10

     460                            clr     a6
     461                            clr     a7
     462                            calla   BEGINOBJW
     463                            move    *a9,a0
     464                            cmpi    -1000,a0
     465                            jrne    ans100                  ;End?
     466                            move    a8,*a13(animslobj_p),L  ;Save * to last one
     467                            PULL    a8
     468                            jruc    anslp
     469                    
     470                    asFRA                                   ;0FHRANIM
     471                            move    a11,a6                  ;Save a11
     472                            move    *a8+,a9,L               ;Get data
     473                            move    *a13(PROCID),a1         ;Inherit same ID+1
     474                            addk    1,a1
     475                            move    *a8+,a10                ;OID
     476                            jrn     ans250                  ;No ID?
     477                            addi    CLSANIM,a10
     478                            add     a11,a10                 ;+offset
     479                            move    *a8+,a11                ;gyiloops
     480                            jrn     ans220
     481                            move    *a13(animsfnum),a2      ;+1 FRANIM cnt
     482                            addk    1,a2
     483                            move    a2,*a13(animsfnum)
     484                    ans220  movi    anims_franim,a7
     485                            calla   GETPRC
     486                            move    a13,*a0(anfc_p),L
     487                            move    a6,a11
     488                            jruc    anslp
     489                    
     490                    ans250  addk    16,a8                   ;Skip gyiloops
     491                            move    a8,a10
     492                            move    *a13(animslobj_p),a8,L  ;Get * to last one
     493                            movi    FRQDELDIE,a7
     494                            calla   GETPRC
     495                            move    a10,a8
     496                            jruc    anslp
     497                    
     498                    
     499                    asSLP                                   ;>SLEEP
     500                            move    *a8+,a0                 ;Get time
     501                            calla   PRCSLP
     502                            jruc    anslp
     503                    
     504                    asSLP1                                  ;>SLEEP 1
     505                            movk    1,a0
     506                            calla   PRCSLP
     507                            jruc    anslp
     508                    
     509                    asSLPR                                  ;>Sleep random
     510                            move    *a8+,a0                 ;Get time
     511                            move    *a8+,a1
     512                            callr   RNDRNG
     513                            calla   PRCSLP
     514                            jruc    anslp
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   11

     515                    
     516                    asWAIT                                  ;>Wait on FRANIMs
     517                            SLEEPK  2
     518                            move    *a13(animsfnum),a1
     519                            jrnz    asWAIT
     520                            jruc    anslp
     521                    
     522                    asXY                                    ;>New XY rel to current pos
     523                            move    *a8+,a1                 ;Get ID
     524                            move    *a8+,a2
     525                            move    *a8+,a4
     526                            move    *a8+,a5
     527                    asxyhs                                  ;Entry for HIDE/SHOW
     528                    asxyr   addi    CLSANIM,a1
     529                            add     a11,a1                  ;+offset
     530                            move    @OBJLST,a0,L
     531                    ans720  callr   obj_find
     532                            jrz     anslp
     533                            move    *a0(OXPOS),a6           ;New X
     534                            add     a4,a6
     535                            move    a6,*a0(OXPOS)
     536                            move    *a0(OYPOS),a6           ;New Y
     537                            add     a5,a6
     538                            move    a6,*a0(OYPOS)
     539                            move    *a0,a0,L
     540                            jrnz    ans720
     541                            jruc    anslp
     542                    
     543                    asXYRNG                                 ;>New XY rel to current pos in rndrng
     544                            move    *a8+,a0
     545                            move    *a8+,a1
     546                            callr   RNDRNG
     547                            move    a0,a4
     548                            move    *a8+,a0
     549                            move    *a8+,a1
     550                            callr   RNDRNG
     551                            move    a0,a5
     552                            move    *a8+,a1
     553                            jrn     asxyr5                  ;No ID?
     554                            move    *a8+,a2
     555                            jruc    asxyr
     556                    
     557                    asxyr5  addk    16,a8                   ;Skip mask
     558                            move    *a13(animslobj_p),a0,L  ;Get * to last one
     559                            move    *a0(OXPOS),a6           ;New X
     560                            add     a4,a6
     561                            move    a6,*a0(OXPOS)
     562                            move    *a0(OYPOS),a6           ;New Y
     563                            add     a5,a6
     564                            move    a6,*a0(OYPOS)
     565                            jruc    anslp
     566                    
     567                    asYA                                    ;>Set Y ani pt world relative
     568                            move    *a8+,a1
     569                            move    *a8+,a2                 ;Mask
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   12

     570                            move    *a8+,a5                 ;
     571                            sll     16,a5
     572                            move    @WORLDTLY,a0,L
     573                            add     a0,a5
     574                            addi    CLSANIM,a1
     575                            add     a11,a1                  ;+offset
     576                            move    @OBJLST,a0,L
     577                    asya10  callr   obj_find
     578                            jrz     asya90
     579                    
     580                            PUSH    a1,a2
     581                            move    *a0(OIMG),a1,L
     582                            move    *a0(OSIZE),a2,L
     583                            move    *a0(OCTRL),a4
     584                            calla   GANIOF
     585                            move    *a0(OXVAL),a3,L
     586                            add     a6,a3                   ;Old X
     587                            move    a5,a2                   ;New Y
     588                            calla   GANISAG
     589                            PULL    a1,a2
     590                    
     591                            move    *a0,a0,L
     592                            jrnz    asya10
     593                    asya90  jruc    anslp
     594                    
     595                    asXYV                                   ;>Set XYVel
     596                            move    *a8+,a4,L
     597                            move    *a8+,a5,L
     598                            move    *a8+,a1
     599                            move    *a8+,a2
     600                            addi    CLSANIM,a1
     601                            add     a11,a1                  ;+offset
     602                            move    @OBJLST,a0,L
     603                    ans920  callr   obj_find
     604                            jrz     anslp
     605                            move    *a0(OXVEL),a6,L
     606                            add     a4,a6
     607                            move    a6,*a0(OXVEL),L
     608                            move    *a0(OYVEL),a6,L
     609                            add     a5,a6
     610                            move    a6,*a0(OYVEL),L
     611                            move    *a0,a0,L
     612                            jrnz    ans920
     613                            jruc    anslp
     614                    
     615                    asXYVA                                  ;>Set XYVel absolute
     616                            move    *a8+,a4,L
     617                            move    *a8+,a5,L
     618                            move    *a8+,a1
     619                            move    *a8+,a2
     620                            addi    CLSANIM,a1
     621                            add     a11,a1                  ;+offset
     622                            move    @OBJLST,a0,L
     623                    ans1020 callr   obj_find
     624                            jrz     anslp
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   13

     625                            move    a4,*a0(OXVEL),L
     626                            move    a5,*a0(OYVEL),L
     627                            move    *a0,a0,L
     628                            jrnz    ans1020
     629                            jruc    anslp
     630                    
     631                    asXYV0                                  ;>XYVel = 0
     632                            move    *a13(animslobj_p),a0,L  ;Get * to last one
     633                            clr     a1
     634                            move    a1,*a0(OXVEL),L
     635                            move    a1,*a0(OYVEL),L
     636                            jruc    anslp
     637                    
     638                    asZ                                     ;>Set Z pos
     639                            move    *a8+,a1
     640                            move    *a8+,a2
     641                            move    *a8+,a4
     642                            addi    CLSANIM,a1
     643                            add     a11,a1                  ;+offset
     644                            move    @OBJLST,a0,L
     645                    ans1120 callr   obj_find
     646                            jrz     anslp
     647                            move    a4,*a0(OZPOS)
     648                            move    *a0,a0,L
     649                            jrnz    ans1120
     650                            jruc    anslp
     651                    
     652                    asLAB                                   ;>Set label
     653                            move    *a8+,a0
     654                    anslab  move    *a13(animslp_p),a2,L
     655                            move    a8,*a2+,L               ;Save *
     656                            move    a0,*a2+
     657                            move    a2,*a13(animslp_p)
     658                            jruc    anslp
     659                    
     660                    asLABR                                  ;>Set label randomly
     661                            move    *a8+,a0
     662                            move    *a8+,a1
     663                            callr   RNDRNG
     664                            jruc    anslab
     665                    
     666                    asDSJS1                                 ;>Sleep 1, dec and loop to label
     667                            SLEEPK  1
     668                    
     669                    asDSJ                                   ;0DecHrement and loop to label
     670                            move    *a13(animslp_p),a1,L
     671                            move    -*a1,a2
     672                            subk    1,a2
     673                            move    a2,*a1
     674                            jrz     ans1330
     675                            move    -*a1,a8,L               ;Get *Loop
     676                            jruc    anslp
     677                    ans1330 subk    32,a1                   ;Del loop entry
     678                            move    a1,*a13(animslp_p),L
     679                            jruc    anslp
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   14

     680                    
     681                    asPAL                                   ;>Set palette
     682                            move    *a13(animsv),a0,L       ;Get *Pal
     683                            calla   pal_getf
     684                            move    a0,a4
     685                            move    *a8+,a1
     686                            jrn     ans1450
     687                            addi    CLSANIM,a1
     688                            add     a11,a1                  ;+offset
     689                            move    @OBJLST,a0,L
     690                            clr     a2                      ;No mask
     691                    ans1420 callr   obj_find
     692                            jrz     anslp
     693                            move    a4,*a0(OPAL)
     694                            move    *a0,a0,L
     695                            jrnz    ans1420                 ;More?
     696                            jruc    anslp
     697                    
     698                    ans1450 move    *a13(animslobj_p),a0,L  ;Get * to last obj
     699                            move    a4,*a0(OPAL)
     700                            jruc    anslp
     701                    
     702                    asANI                                   ;0DHo ANI on OID
     703                            move    *a8+,a5,L
     704                            move    *a8+,a1                 ;OID
     705                            addi    CLSANIM,a1
     706                            add     a11,a1                  ;+offset
     707                            move    @OBJLST,a0,L
     708                            clr     a2                      ;No mask
     709                    ans1620 callr   obj_find
     710                            jrz     anslp
     711                            move    a8,a9
     712                            move    a1,a3
     713                            move    a5,a1                   ;*Img
     714                            move    a0,a8                   ;*Obj
     715                            move    *a8(OCTRL),a4           ;Same flags
     716                            calla   ANI
     717                            move    a3,a1
     718                            move    a8,a0
     719                            move    a9,a8
     720                            move    *a0,a0,L
     721                            jrnz    ans1620                 ;More?
     722                            jruc    anslp
     723                    
     724                    asDEL                                   ;0DeHlete obj
     725                            move    *a8+,a0
     726                            clr     a1
     727                    asdel5  addi    CLSANIM,a0
     728                            add     a11,a0                  ;+offset
     729                            calla   obj_delc
     730                            jruc    anslp
     731                    
     732                    asDELM                                  ;0DeHlete obj with mask
     733                            move    *a8+,a0
     734                            move    *a8+,a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   15

     735                            jruc    asdel5
     736                    
     737                    asRUN                                   ;>Run a new anim script
     738                            move    *a8+,a0,L
     739                            move    *a13(PROCID),a1         ;Inherit same ID
     740                    asrun5  move    a8,a10
     741                            move    a0,a8                   ;*Script
     742                            move    *a13(animsbx),a9,L      ;Get base XY
     743                            movi    anim_script2,a7
     744                            calla   GETPRC
     745                            move    a10,a8
     746                            jruc    anslp
     747                    
     748                    asRUNI                                  ;>Run a new anim script with ID
     749                            move    *a8+,a0,L
     750                            move    *a8+,a1
     751                            addi    ANIMPID,a1
     752                            add     a11,a1                  ;+offset
     753                            jruc    asrun5
     754                    
     755                    asCRE                                   ;0CHreate a process
     756                            move    *a8+,a7,L
     757                            move    *a8+,a9,L               ;Pass A9 to process
     758                            movi    ANIMPID+0ffH,a1
     759                            add     a11,a1                  ;+offset
     760                            calla   GETPRC
     761                            jruc    anslp
     762                    
     763                    asKIL                                   ;>Kill processes with mask
     764                            move    *a8+,a0
     765                            addi    ANIMPID,a0
     766                            add     a11,a0                  ;+offset
     767                            move    *a8+,a1
     768                            calla   KILALLN
     769                            jruc    anslp
     770                    
     771                    asJMP                                   ;>Jump to new location
     772                            move    *a8+,a8,L
     773                            jruc    anslp
     774                    
     775                    asJMPR                                  ;>Jump to new location if RND<#
     776                            move    *a8+,a4,L
     777                            movi    999,a0                  ;.1 % resolution
     778                            callr   RNDRNG0
     779                            move    *a8+,a1
     780                            cmp     a1,a0
     781                            jrhs    anslp
     782                            move    a4,a8                   ;Do jmp
     783                            jruc    anslp
     784                    
     785                    asJMPEQ                                 ;>Jump to new location if = to mem
     786                            move    *a8+,a0,L
     787                            move    *a0,a0                  ;Get value
     788                            move    *a8+,a2,L
     789                            move    *a8+,a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   16

     790                            cmp     a1,a0
     791                            jrne    anslp                   ;Not same?
     792                            move    a2,a8                   ;Do jmp
     793                            jruc    anslp
     794                    
     795                    asJMPNE                                 ;>Jump to new location if != to mem
     796                            move    *a8+,a0,L
     797                            move    *a0,a0                  ;Get value
     798                            move    *a8+,a2,L
     799                            move    *a8+,a1
     800                            cmp     a1,a0
     801                            jreq    anslp                   ;Same?
     802                            move    a2,a8                   ;Do jmp
     803                            jruc    anslp
     804                    
     805                    asSNDD                                  ;0DHo a snd call in demo
     806                            movk    ADJMUSIC,a0             ;Get demo music ON/OFF
     807                            calla   GET_ADJ
     808                            jrz     asSND                   ;Do sounds?
     809                            addk    32,a8
     810                            jruc    anslp
     811                    asSND                                   ;0DHo a snd call
     812                            move    *a8+,a0,L
     813                            calla   snd_play1
     814                            jruc    anslp
     815                    
     816                    asASM                                   ;>Inline code
     817                            exgpc   a8
     818                            jruc    anslp
     819                    
     820                    asHIDE                                  ;>Hide an OID (X+5000)
     821                            movi    5000,a4
     822                    ashide2 move    *a8+,a1
     823                            clr     a2
     824                            clr     a5
     825                            jruc    asxyhs
     826                    
     827                    asSHOW                                  ;>Show an OID (X-5000)
     828                            movi    -5000,a4
     829                            jruc    ashide2
     830                    
     831                    asADDW                                  ;0AddH WORD to mem
     832                            move    *a8+,a0,L
     833                            move    *a8+,a1
     834                            move    *a0,a2
     835                            add     a1,a2
     836                            move    a2,*a0
     837                            jruc    anslp
     838                    
     839                    asADDWO                                 ;0AddH WORD to last obj+offset
     840                            move    *a8+,a0
     841                            move    *a13(animslobj_p),a1,L  ;Get * to last one
     842                            move    *a8+,a2                 ;Offset
     843                            add     a2,a1
     844                            move    *a1,a2
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   17

     845                            add     a0,a2
     846                            move    a2,*a1
     847                            jruc    anslp
     848                    
     849                    asADDLO                                 ;0AddH LONG # to last obj+offset
     850                            move    *a8+,a0,L
     851                            move    *a13(animslobj_p),a1,L  ;Get * to last one
     852                            move    *a8+,a2                 ;Offset
     853                            add     a2,a1
     854                            move    *a1,a2,L
     855                            add     a0,a2
     856                            move    a2,*a1,L
     857                            jruc    anslp
     858                    
     859                    asADLVO                                 ;0AddH LONG value to last obj+offset
     860                            move    *a8+,a0
     861                            move    *a13(animslobj_p),a1,L  ;Get * to last one
     862                            add     a0,a1                   ;+Offset
     863                            move    *a13(animsv),a0,L       ;Get value
     864                            move    *a1,a2,L
     865                            add     a0,a2
     866                            move    a2,*a1,L
     867                            jruc    anslp
     868                    
     869                    asSVRL                                  ;>Set value to rnd long
     870                            move    *a8+,a0,L
     871                            move    *a8+,a1,L
     872                            callr   RNDRNG
     873                            move    a0,*a13(animsv),L
     874                            jruc    anslp
     875                    
     876                    asSVRLT                                 ;>Set value to rnd long from a table
     877                            move    *a8+,a4,L
     878                            move    *a4+,a0                 ;gyiTable entries
     879                            subk    1,a0
     880                            callr   RNDRNG0
     881                            sll     5,a0                    ;*32
     882                            add     a0,a4
     883                            move    *a4,a0,L
     884                            move    a0,*a13(animsv),L
     885                            jruc    anslp
     886                    
     887                    asSVL                                   ;>Set value to long
     888                            move    *a8+,a0,L
     889                            move    a0,*a13(animsv),L
     890                            jruc    anslp
     891                    
     892                    asBXY                                   ;0AddH # to BaseXY
     893                            move    *a8+,a0,L
     894                            move    *a13(animsbx),a1,L
     895                            addxy   a0,a1
     896                            move    a1,*a13(animsbx),L
     897                            jruc    anslp
     898                    
     899                    asTXTR                                  ;>Print rnd text from table
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   18

     900                            move    *a8+,a4,L
     901                            move    *a4+,a0                 ;gyiTable entries
     902                            subk    1,a0
     903                            callr   RNDRNG0
     904                            sll     5,a0                    ;*32
     905                            add     a0,a4
     906                            move    *a4,a0,L
     907                            jruc    astxt5
     908                    
     909                    asTXT                                   ;>Print text
     910                            move    *a8+,a0,L
     911                    astxt5
     912                    ;       calla   prt0_xy
     913                            jruc    anslp
     914                    
     915                    
     916                    asTXTK                                  ;>Kill text
     917                            PUSHP   a8
     918                            callr   ERASE_TXT
     919                    ;       movk    4,a11                   ;Save A11!
     920                    ;       JSRP    text_shrink             ;Sleeps
     921                            PULLP   a8
     922                            jruc    anslp
     923                    
     924                    
     925                    asEND   SLEEPK  1                       ;>Wait on FRANIMs before exit
     926                            move    *a13(animsfnum),a1
     927                            jrnz    asEND
     928                            DIE
     929                    
     930                            .endif
     931                    
     932                    
     933                    ********************************
     934                    * Animation of a part (Process)
     935                    
     936 00000a50                   STRUCTPD
     937 00000a50                   APTR    anfc_p          ;*AnimScrpt process that made me, set by AS
     938 00000a50                   APTR    anfl            ;*Franim list
     939                    
     940                    
     941 00000a50            SUBRP  anims_franim            ;A9=*FRAN list, A10=OID, A11=# Loops
     942                    
     943 00000a50     07a8          move    @OBJLST,a8,L            ;0FHind object
         00000a60 00000000! 
     944 00000a80     b500  anf100  move    *a8(OID),a0
         00000a90     0190  
     945 00000aa0     4940          cmp     a10,a0
     946 00000ab0     ca03          jreq    anf300
     947 00000ac0     8708          move    *a8,a8,L
     948 00000ad0     cbfa          jrnz    anf100
     949 00000ae0     c00e          jruc    anf700                  ;No match!
     950                    
     951 00000af0     b32d  anf300  move    a9,*a13(anfl),L
         00000b00     0120  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   19

     952 00000b10           anf340  JSRP    FRANIMQ
     953 00000b80     b7a9          move    *a13(anfl),a9,L         ;Go to 1st
         00000b90     0120  
     954 00000ba0     4d6b          move    a11,a11
     955 00000bb0     cef5          jrn     anf340                  ;-=Infinite
     956 00000bc0     3d8b          dsj     a11,anf340
     957                    
     958 00000bd0     4d6b  anf700  move    a11,a11
     959 00000be0     ce07          jrn     anf800
     960 00000bf0     b7a0          move    *a13(anfc_p),a0,L       ;Get *Creator
         00000c00     0100  
     961 00000c10     b402          move    *a0(animsfnum),a2       ;gyiFrans-1
         00000c20     0160  
     962 00000c30     1422          subk    1,a2
     963 00000c40     b040          move    a2,*a0(animsfnum)
         00000c50     0160  
     964 00000c60           anf800  DIE
     965                    
     966                    
     967                    
     968                    ********************************
     969                    * Wait for animation processes to finish
     970                    
     971 00000c90            SUBR   anim_wait
     972                    
     973 00000c90           anw10   SLEEPK  3
     974 00000cd0     05a1          move    @animscnt,a1
         00000ce0 00000ec0- 
     975 00000d00     c7f8          jrgt    anw10
     976 00000d10                   RETP
     977                    
     978                            .if 0
     979                    
     980                    ********************************
     981                    * Wait 50 and kill anim stuff (Process)
     982                    
     983                     SUBR   anim_kilslp
     984                    
     985                            SLEEP   50
     986                            callr   anim_killall
     987                            DIE
     988                    
     989                    ********************************
     990                    * Kill all animation processes and objects
     991                    
     992                     SUBR   anim_killall
     993                    
     994                            clr     a0
     995                            move    a0,@animscnt
     996                    
     997                            movi    ANIMPID,a0      ;>Kill processes
     998                            movi    03ffH,a1
     999                            calla   KILALLN
    1000                    
    1001                            movi    CLSANIM,a0      ;0DeHlete objs
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   20

    1002                            movi    03ffH,a1
    1003                            jauc    obj_delc
    1004                    
    1005                            .endif
    1006                    
    1007                    
    1008                    ********************************
    1009                    * Find an object by OID
    1010                    * A0=*1st obj
    1011                    * A1=OID
    1012                    * A2=!Mask
    1013                    * 0A0H=*Obj or 0 (Z)
    1014                    * Trashes A1,A3
    1015                    
    1016 00000d40            SUBRP  obj_find
    1017                    
    1018 00000d40     5241          andn    a2,a1
    1019 00000d50     b403  of20    move    *a0(OID),a3
         00000d60     0190  
    1020 00000d70     5243          andn    a2,a3           ;Remove bits
    1021 00000d80     4823          cmp     a1,a3
    1022 00000d90     ca02          jreq    of50
    1023 00000da0     8600          move    *a0,a0,L
    1024 00000db0     cbf9          jrnz    of20
    1025 00000dc0     4c00  of50    move    a0,a0           ;A0=*Obj or 0
    1026 00000dd0     0960          rets                    ;Pass CC
    1027                    
    1028                    
    1029                    
    1030                    
    1031                    
    1032                    
    1033                    ***************************************************************
    1034                    * Reset autoerase color for fixing scrn glitches
    1035                    * Trashes scratch
    1036                    
    1037 00000de0            SUBR   autoerase_set
    1038                    
    1039 00000de0     01e0          pushst
    1040 00000df0     0360          dint
    1041 00000e00     0d3f          callr   dma_wait                ;Wait on dma
         00000e10     0233  
    1042                    
    1043 00000e20     5600          clr     a0
    1044 00000e30     0580          move    a0,@DMACMAP
         00000e40 01a00080  
    1045 00000e60     09c0          movi    ERASECOL,a0             ;Color pair
         00000e70     0000  
    1046 00000e80     09e1          movi    510*512*8,a1            ;Store to last 2 lines of bitmap
         00000e90 001fe000  
    1047 00000eb0     09d0          movi    512*8*2/16,b0
         00000ec0     0200  
    1048 00000ed0     9001  rpmlp   move    a0,*a1+
    1049 00000ee0     3c50          dsj     b0,rpmlp
    1050                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   21

    1051 00000ef0     01c0          popst
    1052                    
    1053 00000f00     0960          rets
    1054                    
    1055                    
    1056                    *******************************
    1057                    * Flash an image by making a constant color
    1058                    * A8=*Image to flash
    1059                    * A9=Color to flash with (Ex. 0202h,a9)
    1060                    
    1061 00000f10           FLASHME
    1062                    
    1063 00000f10     b500          move    *a8(OCONST),a0
         00000f20     0160  
    1064 00000f30     cb13          jrnz    nwhx                    ;Flashing?
    1065                    
    1066 00000f40     b128          move    a9,*a8(OCONST)
         00000f50     0160  
    1067 00000f60     0544          setf    4,0,0
    1068 00000f70     1900          movk    M_CONNON,a0             ;Replace non-zero data with constant
    1069 00000f80     b008          move    a0,*a8(OCTRL)           ;Write 4 low bits
         00000f90     00f0  
    1070 00000fa0     0570          setf    16,1,0
    1071                    
    1072 00000fb0                   SLEEPK  2
    1073                    
    1074 00000ff0     5600          clr     a0
    1075 00001000     b008          move    a0,*a8(OCONST)          ;Clr color
         00001010     0160  
    1076                    
    1077 00001020     0544          setf    4,0,0
    1078 00001030     1840          movk    M_WRNONZ,a0
    1079 00001040     b008          move    a0,*a8(OCTRL)           ;Write 4 low bits
         00001050     00f0  
    1080 00001060     0570          setf    16,1,0
    1081                    
    1082 00001070           nwhx    DIE
    1083                    
    1084                     .if 0
    1085                    *******************************
    1086                    * Flash an image by making a constant color
    1087                    * A8=*Image to flash
    1088                    * A9=Color to flash with *64K
    1089                    
    1090                    FLASHME
    1091                            move    *a8(OCONST),a10
    1092                            jrnz    gckx                    ;Flashing?
    1093                            srl     16,a9
    1094                            move    a9,*a8(OCONST)          ;Set color
    1095                            move    *a8(OCTRL),a0
    1096                            movk    8,a1
    1097                            or      a1,a0                   ;Set constant
    1098                            move    a0,*a8(OCTRL)
    1099                            SLEEPK  2
    1100                            clr     a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   22

    1101                            move    a0,*a8(OCONST)          ;Clr color
    1102                            move    *a8(OCTRL),a0
    1103                            andi    0fff5H,a0               ;Clr constant & nonzero
    1104                            addk    2,a0                    ;Set nonzero
    1105                            move    a0,*a8(OCTRL)
    1106                    gckx    DIE
    1107                     .endif
    1108                    
    1109                    ********************************
    1110                    *CHEAP COLOR CYCLER
    1111                    *CYCLES ANY NUMBER OF COLORS
    1112                    *A8=PALETTE NAME
    1113                    *A9=RAM STORAGE AREA
    1114                    *A10=MSW START COLOR, LSW END COLOR
    1115                    *A11=SPEED, A11=NEGATIVE FOR REVERSE CYCLER
    1116                    
    1117 000010a0           COLCYC  
    1118 000010a0                   SLEEPK  4
    1119 000010e0     4d00          MOVE    A8,A0
    1120 000010f0     0d5f          calla   pal_find
         00001100 00000000! 
    1121 00001120     caf7          JRZ     COLCYC          ;WAIT TILL IT SHOWS UP FOLKS...
    1122                    
    1123 00001130     5621          CLR     A1              ;GET THE COLORS INTO RAM
    1124 00001140     ed41          MOVX    A10,A1          ;GET END COLOR
    1125 00001150     2e0a          SRL     16,A10          ;ADJUST START COLOR
    1126 00001160     4541          SUB     A10,A1          ;GET COUNT
    1127 00001170     b02d          MOVE    A1,*A13(PDATA)  ;SAVE COUNT
         00001180     0100  
    1128 00001190     4c24          MOVE    A1,A4
    1129 000011a0     2481          SLL     4,A1            ;COUNT IN WORDS
    1130 000011b0     4d45          MOVE    A10,A5
    1131 000011c0     2485          SLL     4,A5            ;OFFSET INTO PALETTE
    1132 000011d0     4105          ADD     A8,A5
    1133 000011e0     1205          ADDK    16,A5           ;SKIP PALETTE WORD COUNT
    1134 000011f0     4d23          MOVE    A9,A3
    1135 00001200     4d26          MOVE    A9,A6
    1136 00001210     4026          ADD     A1,A6
    1137 00001220     4cc8          MOVE    A6,A8
    1138                    
    1139 00001230     94a7  COLCYC1 MOVE    *A5+,A7         ;TRANSFER IT TWICE
    1140 00001240     90e3          MOVE    A7,*A3+
    1141 00001250     90e6          MOVE    A7,*A6+
    1142 00001260     3c84          DSJS    A4,COLCYC1
    1143                    
    1144 00001270     2f00          SRL     8,A0
    1145 00001280     2500          SLL     8,A0
    1146 00001290     400a          ADD     A0,A10                  ;COLRAM DESTINATION
    1147                    
    1148 000012a0           COLCYCB
    1149 000012a0     b30d          MOVE    A8,*A13(PDATA+020H),L   ;SAVE RAM ADDRESS
         000012b0     0120  
    1150 000012c0           COLCYCBL
    1151 000012c0     4d00          MOVE    A8,A0                   ;GET SOURCE ADDRESS
    1152 000012d0     4d41          MOVE    A10,A1                  ;GET DESTINATION CONSTANT
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   23

    1153 000012e0     b5a2          MOVE    *A13(PDATA),A2,W        ;GET COUNT
         000012f0     0100  
    1154 00001300     0d5f          calla   pal_set
         00001310 00000000! 
    1155 00001330     1608          SUBK    16,A8
    1156 00001340     4909          CMP     A8,A9
    1157 00001350     c802          JRLO    CCYCBSLP
    1158 00001360     b7a8          MOVE    *A13(PDATA+020H),A8,L   ;GET SOURCE TABLE START
         00001370     0120  
    1159 00001380           CCYCBSLP
    1160 00001380     4d60          MOVE    A11,A0          ;GET SLEEP TIME
    1161 00001390     0d5f          CALLA   PRCSLP
         000013a0 00000000! 
    1162 000013c0     c0ef          JRUC    COLCYCBL
    1163                    
    1164                    
    1165                    *******************************
    1166                    * CYCLE A PAL WITH A FIXED ROM COLOR TABLE
    1167                    * A8= [COLOR # TO START AT,# TO CYCLE]
    1168                    * A9= PAL NAME TO CYCLE
    1169                    * A10=TABLE TO CYCLE IT WITH
    1170                    * A11=RATE OF CYCLE IN TICKS
    1171                    
    1172 000013d0           CYC0    SLEEP   60
    1173                    
    1174 00001420           CYCLE_TABLE
    1175 00001420     4d20          MOVE    A9,A0                   ;PAL NAME TO CYCLE
    1176 00001430     0d5f          calla   pal_find
         00001440 00000000! 
    1177 00001460     caf6          jrz     CYC0
    1178                    
    1179 00001470     0bee          SUBI    32,A14
         00001480     ffdf  
    1180 00001490     87c1          MOVE    *A14,A1,L
    1181 000014a0                   PUSHP   A14,A1
    1182                    
    1183 000014c0     2f00          SRL     8,A0
    1184 000014d0     2500          SLL     8,A0
    1185 000014e0     ef01          MOVY    A8,A1
    1186 000014f0     2e01          SRL     16,A1                   ;A1=COLOR # TO START WITH
    1187 00001500     b10d          MOVE    A8,*A13(PDATA)          ;PDATA WILL HAVE # TO CYCLE (CNT)
         00001510     0100  
    1188 00001520     8542          MOVE    *A10,A2,W
    1189 00001530     b04d          MOVE    A2,*A13(PDATA+16)       ;VALUE IN TABLE TO STOP AT
         00001540     0110  
    1190 00001550     4c08          MOVE    A0,A8                   ;A8=[PAL #,0]
    1191 00001560     4028          ADD     A1,A8                   ;A8=[PAL #,COLOR TO START AT]
    1192 00001570     4d49          MOVE    A10,A9                  ;A10=ROM TABLE TO CYCLE WITH
    1193 00001580           tvvloop 
    1194 00001580                   PULLP   A1,A14
    1195 000015a0                   PUSHP   A1,A14
    1196 000015c0     8620          MOVE    *A1,A0,L
    1197 000015d0     480e          CMP     A0,A14
    1198 000015e0     cb14          JRNE    KILL_US
    1199 000015f0     4d01          move    a8,a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   24

    1200 00001600     4d20          MOVE    A9,A0                   ;A0=TABLE POSITION
    1201 00001610     b5a2          MOVE    *A13(PDATA),A2          ;A2=COLOR COUNT
         00001620     0100  
    1202 00001630     0d5f          calla   pal_set                 ;do the transfer
         00001640 00000000! 
    1203 00001660     4d60          MOVE    A11,A0
    1204 00001670     0d5f          CALLA   PRCSLP
         00001680 00000000! 
    1205 000016a0     1209          ADDK    010H,A9
    1206 000016b0     8520          MOVE    *A9,A0
    1207 000016c0     ce04          JRN     RESTUFF
    1208 000016d0     b5a1          MOVE    *A13(PDATA+16),A1       ;PDATA+16=ENTRY WE STOP AT
         000016e0     0110  
    1209 000016f0     4801          CMP     A0,A1
    1210 00001700     cbe7          jrne    tvvloop
    1211 00001710     4d49  RESTUFF MOVE    A10,A9                  ;REACHED END OF TABLE, RESTUFF
    1212 00001720     c0e5          jruc    tvvloop
    1213 00001730           KILL_US
    1214 00001730                   DIE
    1215                    
    1216                    
    1217                    ****************************************************************
    1218                    * Converts a 32 bit hex # to a null terminated ascii string
    1219                    * A8=#
    1220                    * 0A8H=*String
    1221                    
    1222 00001760           HEXTOASC
    1223 00001760                   PUSH    a1,a2,a9
    1224 00001780     5621          clr     a1
    1225 00001790     a02f          move    a1,-*sp                 ;Push the null terminator
    1226 000017a0     1941          movk    10,a1                   ;Divisor for decimal
    1227 000017b0     4d09          move    a8,a9
    1228 000017c0     1862  hexta1  movk    3,a2                    ;Comma count
    1229 000017d0     5708  hexta2  clr     a8
    1230 000017e0     5a28          divu    a1,a8
    1231 000017f0     0b09          addi    '0',a9                  ;Make the remainder ascii
         00001800     0030  
    1232 00001810     a12f          move    a9,-*sp                 ;Save here
    1233 00001820     4d09          move    a8,a9
    1234 00001830     ca05          jrz     hexta3                  ;Done?
    1235 00001840     3d02          dsj     a2,hexta2
    1236 00001850     09c2          movi    ',',a2
         00001860     002c  
    1237 00001870     a04f          move    a2,-*sp                 ;Stuff a comma
    1238 00001880     c0f3          jruc    hexta1
    1239                    
    1240 00001890     09e1  hexta3  movi    STRNGRAM,a1             ;Store here for blow out
         000018a0 00000020- 
    1241 000018c0     4c28          move    a1,a8
    1242 000018d0     95e9  hexta4  move    *sp+,a9
    1243 000018e0     8d21          movb    a9,*a1
    1244 000018f0     1101          addk    8,a1
    1245 00001900     4d29          move    a9,a9
    1246 00001910     cbfb          jrnz    hexta4
    1247                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   25

    1248 00001920                   PULL    a1,a2,a9
    1249 00001940     0960          rets
    1250                    
    1251                    
    1252                    ********************************
    1253                    * Erase all text objects
    1254                    
    1255 00001950            SUBR   ERASE_TXT
    1256                    
    1257 00001950     09c0          movi    CLSNEUT|TYPTEXT|SUBTXT,a0
         00001960     0701  
    1258 00001970     c080          jauc    obj_del1c
         00001980 00000000! 
    1259                    
    1260                    
    1261                    **************************************************************************
    1262                    *
    1263                    * STRINGER - OUTPUT A TEXT STRING, THIS IS A PROCESS!
    1264                    * A0  = SLEEP TIME BETWEEN CHARACTERS
    1265                    * A4  = DMA CONTROL
    1266                    * A6  = COLOR (16 BITS)
    1267                    * A8  = PTR TO STRING
    1268                    * A9  = [Y,X] SCREEN ADDRESS OF STRING
    1269                    * A10 = [Y,X] SPACING
    1270                    * A11 = POINTER TO FONT TABLE
    1271                    * A14 = FLAGS:JUSTIFY
    1272                    *       BIT 16 = 1 INSERT ON OBJECT LIST, 0 JUST QUEUE THE DMA
    1273                    *       JUSTIFY = 0 LEFT JUSTIFY
    1274                    *                 1 CENTER JUSTIFY
    1275                    *                 2 RIGHT JUSTIFY
    1276                    * WRLD = ADJUST FOR WORLD COORDINATES
    1277                    * LOWZ+20000=ZPOS
    1278                    *
    1279                    * RETURNS:
    1280                    * A8 = POINTS TO NEXT BYTE AFTER STRING TERMINATOR
    1281                    * A9 = NEXT CURSOR POSITION AFTER THE STRING
    1282                    * NOTE: CALL WITH JSRP
    1283                    *
    1284                    **************************************************************************
    1285                    
    1286                    ;LEFT JUSTIFY, NORMAL, NOT PUT ON THE OBJECT LIST
    1287 000019a0           STRLNRM
    1288 000019a0     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         000019b0     7a02  
    1289 000019c0     09e4          movi    DMACNZ|M_NOCOLL,a4
         000019d0 00008808  
    1290 000019f0     57ce          clr     a14
    1291 00001a00     c048          jruc    stringr1
    1292                    
    1293                    ;CENTER JUSTIFY, NORMAL, NOT ON THE OBJECT LIST
    1294 00001a10           STRCNRM
    1295 00001a10     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         00001a20     7a02  
    1296 00001a30     09e4          movi    DMACNZ|M_NOCOLL,a4
         00001a40 00008808  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   26

    1297 00001a60     182e          movk    1,a14
    1298 00001a70     c041          jruc    stringr1
    1299                    ;CENTER JUSTIFY, NORMAL, DMA, MULTIPLE COLORS
    1300 00001a80            SUBR   STRCNRM_1
    1301 00001a80     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         00001a90     7a02  
    1302 00001aa0     09e4          movi    DMAWNZ|M_NOCOLL,a4
         00001ab0 00008802  
    1303 00001ad0     182e          movk    1,a14
    1304 00001ae0     4cc5          move    a6,a5
    1305 00001af0     c03b          jruc    stringr1_1
    1306                    
    1307                    ;RIGHT JUSTIFY, NORMAL, NOT PUT ON THE OBJECT LIST
    1308 00001b00           STRRNRM
    1309 00001b00     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         00001b10     7a02  
    1310 00001b20     09e4          movi    DMACNZ|M_NOCOLL,a4
         00001b30 00008808  
    1311 00001b50     184e          movk    2,a14
    1312 00001b60     c032          jruc    stringr1
    1313                    
    1314                    ;LEFT JUSTIFY, INVERTED, NOT ON THE OBJECT LIST
    1315                    ;STRLINV
    1316                    ;       mmtm    a12,a1,a2,a3,a4,a6,a14
    1317                    ;       MOVI    DMACZ,A4
    1318                    ;       clr     a14
    1319                    ;       jruc    stringr1
    1320                    
    1321                    ;CENTER JUSTIFY, INVERTED, NOT ON THE OBJECT LIST
    1322                    ;STRCINV
    1323                    ;       mmtm    a12,a1,a2,a3,a4,a6,a14
    1324                    ;       MOVI    DMACZ,A4
    1325                    ;       movk    1,a14
    1326                    ;       jruc    stringr1
    1327                    ;
    1328                    
    1329                    ;LEFT JUSTIFY, NORMAL, OBJECT LIST
    1330 00001b70           STRLNRMO
    1331 00001b70     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         00001b80     7a02  
    1332 00001b90     09e4          movi    DMACNZ|M_NOCOLL,a4
         00001ba0 00008808  
    1333 00001bc0     09ee          movi    010000H,a14
         00001bd0 00010000  
    1334 00001bf0     c029          jruc    stringr1
    1335                    
    1336                    ;CENTER JUSTIFY, NORMAL, OBJECT LIST
    1337 00001c00           STRCNRMO
    1338 00001c00     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         00001c10     7a02  
    1339 00001c20     09e4          movi    DMACNZ|M_NOCOLL,a4
         00001c30 00008808  
    1340 00001c50     09ee          movi    010001H,a14
         00001c60 00010001  
    1341 00001c80     c020          jruc    stringr1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   27

    1342                    
    1343                    ;CENTER JUSTIFY, NORMAL, OBJECT LIST, MULTIPLE COLORS!
    1344 00001c90           STRCNRMO_1
    1345 00001c90     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         00001ca0     7a02  
    1346 00001cb0     09e4          movi    DMAWNZ|M_NOCOLL,a4
         00001cc0 00008802  
    1347 00001ce0     09ee          movi    010001H,a14
         00001cf0 00010001  
    1348 00001d10     4cc5          move    a6,a5
    1349 00001d20     c018          jruc    stringr1_1
    1350                    
    1351                    ;CENTER JUSTIFY, NORMAL, OBJECT LIST, CONSTANT NON-ZERO
    1352 00001d30           STRCNRMO_2
    1353 00001d30     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         00001d40     7a02  
    1354 00001d50     09e4          movi    DMACNZ|M_NOCOLL,a4
         00001d60 00008808  
    1355 00001d80     09ee          movi    010001H,a14
         00001d90 00010001  
    1356 00001db0     4cc5          move    a6,a5
    1357 00001dc0     c00e          jruc    stringr1_1
    1358                    
    1359                    ;LEFT JUSTIFY, NORMAL, OBJECT LIST, MULTIPLE COLORS!
    1360 00001dd0            SUBR   STRLNRMO_1
    1361 00001dd0     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         00001de0     7a02  
    1362 00001df0     09e4          movi    DMAWNZ|M_NOCOLL,a4
         00001e00 00008802  
    1363 00001e20     09ee          movi    010000H,a14
         00001e30 00010000  
    1364 00001e50     4cc5          move    a6,a5
    1365 00001e60     c004          jruc    stringr1_1
    1366                    
    1367 00001e70           STRINGER
    1368 00001e70     098c          mmtm    a12,a1,a2,a3,a4,a6,a14
         00001e80     7a02  
    1369 00001e90           stringr1
    1370 00001e90     4cc5          move    a6,a5
    1371 00001ea0     2605          sll     16,a5                   ;Setup constant color in fixed palette
    1372 00001eb0           stringr1_1
    1373                    
    1374 00001eb0     56e7          clr     a7
    1375 00001ec0     edc7          movx    a14,a7
    1376 00001ed0     1427          subk    1,a7
    1377 00001ee0     ce0b          jrn     strr10                  ;Normal left justify
    1378 00001ef0     ca03          jrz     strrc
    1379                    
    1380 00001f00     0d3f          callr   STRNGLEN                ;Right justify
         00001f10     0087  
    1381 00001f20     c003          jruc    strra
    1382                    
    1383 00001f30     0d3f  strrc   callr   STRNGLEN                ;Center justify
         00001f40     0084  
    1384 00001f50     2fe7          srl     1,a7                    ;STRNGLEN/2
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   28

    1385                    
    1386 00001f60     e2e9  strra   subxy   a7,a9                   ;Adjust string starting position
    1387 00001f70     c002          jruc    strr10                  ;Start loop
    1388                    
    1389                    
    1390 00001f80     10a9  strr1   addk    5,a9                    ;Add a space
    1391 00001f90     e149  strr5   addxy   a10,a9                  ;Add spacing
    1392                    
    1393 00001fa0     8f01  strr10  movb    *a8,a1                  ;Get a character
    1394 00001fb0     c673          jrle    strrx                   ;Done?
    1395 00001fc0     1108          addk    8,a8                    ;Next byte
    1396                    
    1397 00001fd0     1401          subk    32,a1
    1398 00001fe0     c6f9          jrle    strr1                   ;Space?
    1399                    
    1400                                                            ;Save sleep time
    1401 00001ff0           strr20  PUSH    a0
    1402                    
    1403 00002000     1421          subk    1,a1                    ;0CaHlc table offset
    1404 00002010     24a1          sll     5,a1                    ;*32
    1405 00002020     4161          add     a11,a1
    1406 00002030     8621          move    *a1,a1,L                ;Get * image header
    1407 00002040     b423          move    *a1(ICTRL),a3
         00002050     0060  
    1408                    
    1409 00002060                   PUSH    a1,a14
    1410                            
    1411 00002080     1dee          btst    16,a14
    1412 00002090     ca3f          jrz     strrdma                 ;Only do DMA?
    1413                    
    1414 000020a0     4c22          move    a1,a2
    1415                    
    1416 000020b0     0d5f          calla   GETOBJ                  ;Create the character as an object
         000020c0 00000000! 
    1417 000020e0     ca52          jrz     strrdun                 ;No object?
    1418                    
    1419 000020f0     b240          move    a2,*a0(OIMG),L
         00002100     0170  
    1420 00002110     ba40          move    *a2(ISAG),*a0(OSAG),L
         00002120     0040  
         00002130     0110  
    1421 00002140     b080          move    a4,*a0(OFLAGS)          ;FIX!!!!!
         00002150     00e0  
    1422 00002160     b2a0          move    a5,*a0(OPAL),L          ;&CONST
         00002170     0150  
    1423 00002180     09e1          movi    01000100h,a1
         00002190 01000100  
    1424 000021b0     b220          move    a1,*a0(OSCALE),L
         000021c0     0240  
    1425                    
    1426                    
    1427 000021d0     4c81          move    a4,a1
    1428 000021e0     0b81          andi    0803fH,a1               ;Kill mode bits
         000021f0 ffff7fc0  
    1429 00002210     5423          or      a1,a3
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   29

    1430 00002220     b260          move    a3,*a0(OCTRL),L         ;&OFSET
         00002230     00f0  
    1431                    
    1432 00002240     09ce          movi    CLSNEUT|TYPTEXT|SUBTXT,a14
         00002250     0701  
    1433 00002260     b1c0          move    a14,*a0(OID)
         00002270     0190  
    1434                    
    1435 00002280     05ae          move    @LOWZ,a14
         00002290 00000170- 
    1436 000022b0     0b0e          addi    20000,a14
         000022c0     4e20  
    1437 000022d0     b1c0          move    a14,*a0(OZPOS)
         000022e0     00d0  
    1438                    
    1439 000022f0     5642          clr     a2
    1440 00002300     b240          move    a2,*a0(OXVEL),L
         00002310     0020  
    1441 00002320     b240          move    a2,*a0(OYVEL),L
         00002330     0040  
    1442 00002340     b240          move    a2,*a0(OZVEL),L
         00002350     0060  
    1443 00002360     b240          move    a2,*a0(ODOFF),L
         00002370     0220  
    1444                    
    1445 00002380     ef22          movy    a9,a2                   ;Y
    1446 00002390     4d23          move    a9,a3
    1447 000023a0     2603          sll     16,a3                   ;X
    1448 000023b0     0d5f          calla   GANISAG
         000023c0 00000000! 
    1449                    
    1450 000023e0     05a2          move    @WRLD,a2
         000023f0 00000160- 
    1451 00002410     cb03          jrnz    strr100
    1452 00002420     0d5f          calla   obj_addworldxy          ;Put us in the world
         00002430 00000000! 
    1453                    
    1454 00002450     0d5f  strr100 calla   INSOBJ
         00002460 00000000! 
    1455 00002480     c018          jruc    strrdun
    1456                    
    1457                    
    1458 00002490           strrdma PUSH    a3                      ;>Simple DMA
    1459 000024a0     8622          move    *a1,a2,L                ;ISIZE
    1460 000024b0     b623          move    *a1(ISAG),a3,L          ;Get top left sag
         000024c0     0040  
    1461 000024d0     0d5f          calla   GANIOF
         000024e0 00000000! 
    1462 00002500     4ca1          move    a5,a1                   ;Constant:Palette
    1463 00002510                   PULL    a5
    1464 00002520                   PUSH    a4
    1465 00002530     0b84          andi    0803fH,a4
         00002540 ffff7fc0  
    1466 00002560     5485          or      a4,a5                   ;Offset:Control
    1467 00002570     4c64          move    a3,a4                   ;SAG
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   30

    1468                    
    1469 00002580     4d23          move    a9,a3                   ;A3=Y:X
    1470 00002590     2e06          srl     16,a6
    1471 000025a0     ecc7          movx    a6,a7
    1472 000025b0     e2e3          subxy   a7,a3                   ;Sub anioffset
    1473                    
    1474 000025c0     0d5f          calla   QDMAN
         000025d0 00000000! 
    1475 000025f0                   PULL    a4
    1476 00002600     4c25          move    a1,a5
    1477                    
    1478 00002610           strrdun PULL    a1,a14
    1479                    
    1480 00002630     8421          move    *a1,a1                  ;Get ISIZEX
    1481 00002640     e029          addxy   a1,a9                   ;Add X size
    1482 00002650     97e0          move    *sp+,a0,L
    1483 00002660     ca92          jrz     strr5                   ;No sleep?
    1484                    
    1485 00002670     098c          mmtm    a12,a0,a4,a5,a14
         00002680     8c02  
    1486 00002690     0d5f          calla   PRCSLP
         000026a0 00000000! 
    1487 000026c0     09ac          mmfm    a12,a0,a4,a5,a14
         000026d0     4031  
    1488 000026e0     c08a          jruc    strr5
    1489                    
    1490 000026f0     5621  strrx   clr     a1
    1491 00002700     0581          move    a1,@LOWZ
         00002710 00000170- 
    1492 00002730     1108          addk    8,a8                    ;Next byte
    1493 00002740     09ac          mmfm    a12,a1,a2,a3,a4,a6,a14
         00002750     405e  
    1494 00002760                   RETP
    1495                    
    1496                    
    1497                    **************************************************************************
    1498                    * STRNGLEN - RETURNS THE LENGTH, IN PIXELS, OF A GIVEN STRING
    1499                    * A8 = PTR TO STRING
    1500                    * A10 = [Y,X] SPACING OF STRING
    1501                    * A11 = PTR TO FONT TABLE
    1502                    * RETURNS:
    1503                    * A7 = LENGTH OF STRING
    1504                    * Z BIT SET IF LENGTH IS ZERO
    1505                    **************************************************************************
    1506 00002790           STRNGLEN
    1507 00002790                   PUSH    a8,a14
    1508 000027b0     56e7          clr     a7              ;A7=Length
    1509 000027c0     c00c          jruc    stl60
    1510                    
    1511 000027d0     1108  stl10   addk    8,a8            ;Point to next
    1512 000027e0     140e          subk    32,a14
    1513 000027f0     c702          jrgt    stl20           ;Good char?
    1514 00002800     10a7          addk    5,a7            ;Hard code a space
    1515 00002810     c006          jruc    stl40
    1516                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   31

    1517 00002820     142e  stl20   subk    1,a14
    1518 00002830     24ae          sll     5,a14           ;*32
    1519 00002840     416e          add     a11,a14         ;A14=*Correct character header
    1520 00002850     87ce          move    *a14,a14,L
    1521 00002860     85ce          move    *a14,a14        ;Get ISIZEX
    1522                    
    1523 00002870     e1c7          addxy   a14,a7          ;Add char length
    1524 00002880     e147  stl40   addxy   a10,a7          ;Add space length
    1525 00002890     8f0e  stl60   movb    *a8,a14
    1526 000028a0     c7f2          jrgt    stl10           ;Next character?
    1527                    
    1528 000028b0                   PULL    a8,a14
    1529 000028d0     0527          zext    a7
    1530 000028e0     0960          rets
    1531                    
    1532                    
    1533                    
    1534                    **************************************************************************
    1535                    *                                                                        *
    1536                    * OBJOFF - TURN AN OBJECT "OFF" I.E. SET DMA OUTPUT TO 0                 *
    1537                    * A0 = PTR TO OBJECT BLOCK                                               *
    1538                    *                                                                        *
    1539                    **************************************************************************
    1540 000028f0           OBJOFF
    1541 000028f0                   PUSH    A4
    1542 00002900     b404          MOVE    *A0(OCTRL),A4
         00002910     00f0  
    1543 00002920     2f84          SRL     4,A4
    1544 00002930     2484          SLL     4,A4
    1545 00002940     b080          MOVE    A4,*A0(OCTRL)
         00002950     00f0  
    1546 00002960     97e4          move    *sp+,a4,L
    1547 00002970     0960          RETS
    1548                    
    1549                    **************************************************************************
    1550                    *                                                                        *
    1551                    * OBJON - TURN AN OBJECT "ON" I.E. SET DMA OUTPUT TO WRITE <> 0          *
    1552                    * A0 = PTR TO OBJECT BLOCK                                               *
    1553                    *                                                                        *
    1554                    **************************************************************************
    1555 00002980           OBJON
    1556 00002980                   PUSH    A4
    1557 00002990     b404          MOVE    *A0(OCTRL),A4
         000029a0     00f0  
    1558 000029b0     2f84          SRL     4,A4
    1559 000029c0     2484          SLL     4,A4
    1560 000029d0     1044          ADDK    2,A4
    1561 000029e0     b080          MOVE    A4,*A0(OCTRL)
         000029f0     00f0  
    1562 00002a00     97e4          move    *sp+,a4,L
    1563 00002a10     0960          RETS
    1564                    
    1565                            
    1566                    **************************************************************************
    1567                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   32

    1568                    * CLRPDATA - CLEAR THE PDATA AREA OF A PROCESS BLOCK                     *
    1569                    * A13 = PTR TO PROCESS BLOCK                                             *
    1570                    *                                                                        *
    1571                    **************************************************************************
    1572                    ;CLRPDATA
    1573                    ;       MMTM    SP,A1,A6,A14
    1574                    ;       MOVE    A13,A14
    1575                    ;       CLR     A1
    1576                    ;       ADDI    PDATA,A14
    1577                    ;       MOVI    (PSDATA-PDATA)/16,A6
    1578                    ;CLRSHL
    1579                    ;       SRL     1,A6
    1580                    ;       JRNC    CLRPDL
    1581                    ;       MOVE    A1,*A14+,W      ;STUFF THE ODD WORD     
    1582                    ;CLRPDL
    1583                    ;       MOVE    A1,*A14+,L              
    1584                    ;       DSJS    A6,CLRPDL
    1585                    ;       MMFM    SP,A1,A6,A14
    1586                    ;       RETS
    1587                    **************************************************************************
    1588                    *                                                                        *
    1589                    * DFRMGRND - RETURNS THE DISTANCE FROM THE BOTTOM OF                     *
    1590                    *                  AN OBJECT TO THE "GROUND."                            *
    1591                    * A8 = OBJECT BLOCK                                                      *
    1592                    * RETURN(S)                                                              *
    1593                    * A1 = DISTANCE FROM GROUND (16 BITS)                                    *
    1594                    * STATUS BITS SET ACCORDING TO THE SIGN OF A1                            *
    1595                    * NOTE: MAX ACCEPTABLE Y = +32K, MIN ACCEPTABLE Y = -32K                 *
    1596                    *                                                                        *
    1597                    **************************************************************************
    1598                    ;ZORIGIN        EQU     200             ;Y COORDINATE OF THE Z ORIGIN
    1599                    ;DFRMGRND
    1600                    ;       PUSH    A2
    1601                    ;       MOVE    *A8(OYPOS),A1,W
    1602                    ;       MOVE    *A8(OSIZEY),A2,W
    1603                    ;       ADD     A1,A2                   ;A2 = BOTTOM Y
    1604                    ;       MOVE    *A8(OZPOS),A1,W
    1605                    ;       SUB     A2,A1
    1606                    ;       ADDI    ZORIGIN,A1
    1607                    ;       MMFM    SP,A2
    1608                    ;       RETS
    1609                    
    1610                    **************************************************************************
    1611                    *                                                                        *
    1612                    * GET BOTTOM Y OF AN OBJECT                                              *
    1613                    * A8 = OBJECT BLOCK PTR                                                  *
    1614                    * RETURN(S)                                                              *
    1615                    * A1 = 16 BIT BOTTOM Y IN LSW                                            *
    1616                    * STATUS SET ACCORDING TO THE BOTTOM Y                                   *
    1617                    *NOTE: MAKE SURE OBLOCK IS INIT'D WITH GSAGOF BEFORE CALLING             *
    1618                    *                                                                        *
    1619                    **************************************************************************
    1620                    ;GETBOTY
    1621                    ;       PUSH    A2
    1622                    ;       MOVE    *A8(OYPOS),A1,W         ;GET Y POSITION
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   33

    1623                    ;       MOVE    *A8(OSIZEY),A2,W        ;GET THE CURRENT SIZE
    1624                    ;       ADD     A2,A1                   ;A1 = BOTTOM Y
    1625                    ;       MMFM    SP,A2
    1626                    ;       RETS
    1627                    
    1628                    
    1629                    ********************************
    1630                    * GETCPNT - Get the center xy position of an object
    1631                    * A8=*Object
    1632                    * 0A0H=Center Y:Center X
    1633                    
    1634 00002a20            SUBR   GETCPNT
    1635                    
    1636 00002a20     b701          move    *a8(OYVAL),a1,L
         00002a30     00a0  
    1637 00002a40     b500          move    *a8(OXPOS),a0
         00002a50     0090  
    1638 00002a60     ec01          movx    a0,a1
    1639 00002a70     b700          move    *a8(OSIZE),a0,L
         00002a80     0130  
    1640 00002a90     2fe0          srl     1,a0                    ;/2
    1641 00002aa0     0b80          andi    07fff7fffH,a0           ;Clr bit 15
         00002ab0 80008000  
    1642 00002ad0     e020          addxy   a1,a0
    1643 00002ae0     0960          rets
    1644                    
    1645                    
    1646                    ********************************
    1647                    *GETANIX - GET ANIMATION POINT X COORD
    1648                    *CALLING PARMS: A8=OBJECT
    1649                    *RETURNS A0=16 BIT WORLD COORD OF UPPER LEFT
    1650                    
    1651 00002af0           GETANIX
    1652 00002af0     098f          MMTM    SP,A1,A2
         00002b00     6000  
    1653 00002b10     b701          MOVE    *A8(OIMG),A1,L
         00002b20     0170  
    1654 00002b30     b422          MOVE    *A1(IANIOFF),A2
         00002b40     0020  
    1655 00002b50     b500          MOVE    *A8(OCTRL),A0
         00002b60     00f0  
    1656 00002b70     1f60          BTST    B_FLIPH,A0
    1657 00002b80     ca04          JRZ     GETAX1
    1658 00002b90     8420          MOVE    *A1,A0          ;ISIZEX
    1659 00002ba0     4440          SUB     A2,A0
    1660 00002bb0     1420          DEC     A0
    1661 00002bc0     4c02          MOVE    A0,A2
    1662 00002bd0     b500  GETAX1  MOVE    *A8(OXPOS),A0
         00002be0     0090  
    1663 00002bf0     4040          ADD     A2,A0
    1664 00002c00     09af          MMFM    SP,A1,A2
         00002c10     0006  
    1665 00002c20     0960          RETS
    1666                    
    1667                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   34

    1668                    
    1669                    ****************************************************************
    1670                    * Quickly produce a random # in range -X to +X
    1671                    * A0=+X
    1672                    * 0A0H=Random # (-A0 to +A0) (CC)
    1673                    * Trashes scratch
    1674                    
    1675 00002c30            SUBR   RNDRNGS
    1676                    
    1677 00002c30     4c01          move    a0,a1
    1678 00002c40     03a0          neg     a0
    1679                    
    1680                    
    1681                    ********************************
    1682                    * Quickly produce a random # in a given range
    1683                    * A0=Lower bound
    1684                    * A1=Upper bound
    1685                    * 0A0H=Random # (A0 to A1) (CC)
    1686                    * Trashes scratch
    1687                    
    1688 00002c50            SUBR   RNDRNG
    1689                    
    1690 00002c50     4401          sub     a0,a1           ;Normalize the range
    1691 00002c60     1021          addk    1,a1
    1692 00002c70     4e00          move    a0,b0
    1693                    
    1694 00002c80     07a0          move    @RAND,a0,L
         00002c90 00000000- 
    1695 00002cb0     6800          rl      a0,a0
    1696 00002cc0     05ae          move    @HCOUNT,a14
         00002cd0 c00001c0  
    1697 00002cf0     69c0          rl      a14,a0
    1698 00002d00     41e0          add     sp,a0
    1699 00002d10     0780          move    a0,@RAND,L
         00002d20 00000000- 
    1700                    
    1701 00002d40     5e20          mpyu    a1,a0
    1702 00002d50     4e11          move    b0,a1
    1703 00002d60     4020          add     a1,a0
    1704 00002d70     0960          rets
    1705                    
    1706                    
    1707                    ********************************
    1708                    * Quickly produce a random # in range 0-X
    1709                    * A0=X
    1710                    * 0A0H=Random # (0 to A0) (No CC)
    1711                    * Trashes scratch
    1712                    
    1713 00002d80            SUBR   RNDRNG0
    1714                    
    1715 00002d80     07a1          move    @RAND,a1,L
         00002d90 00000000- 
    1716 00002db0     6821          rl      a1,a1
    1717 00002dc0     05ae          move    @HCOUNT,a14
         00002dd0 c00001c0  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   35

    1718 00002df0     69c1          rl      a14,a1
    1719 00002e00     41e1          add     sp,a1
    1720 00002e10     0781          move    a1,@RAND,L
         00002e20 00000000- 
    1721                    
    1722 00002e40     1020          addk    1,a0
    1723 00002e50     5e20          mpyu    a1,a0           ;Condition codes not valid!
    1724                    
    1725 00002e60     0960          rets
    1726                    
    1727                    
    1728                    ********************************
    1729                    * Random % routine
    1730                    * A0=Probability of event (0-1000) (0=0%, 1000=100%)
    1731                    * 0A0H=0-999 (CC) (jrls nope, jrhi happened)
    1732                    * Trashes scratch
    1733                    
    1734 00002e70            SUBR   RNDPER
    1735                    
    1736 00002e70     07a1          move    @RAND,a1,L
         00002e80 00000000- 
    1737 00002ea0     6821          rl      a1,a1
    1738 00002eb0     05ae          move    @HCOUNT,a14
         00002ec0 c00001c0  
    1739 00002ee0     69c1          rl      a14,a1
    1740 00002ef0     41e1          add     sp,a1
    1741 00002f00     0781          move    a1,@RAND,L
         00002f10 00000000- 
    1742                    
    1743 00002f30     4c0e          move    a0,a14
    1744 00002f40     09c0          movi    1000,a0
         00002f50     03e8  
    1745 00002f60     5e20          mpyu    a1,a0           ;0-999
    1746 00002f70     480e          cmp     a0,a14
    1747 00002f80     0960          rets
    1748                    
    1749                    
    1750                    **************************************************************************
    1751                    *                                                                        *
    1752                    * FILLAREA - FILL A GIVEN SQUARE AREA ON THE SCREEN WITH A COLOR         *
    1753                    * A1 = [COLOR,PALETTE]                                                   *
    1754                    * A3 = DAG OF AREA [YPOS,XPOS]                                           *
    1755                    * A4 = [Y,X] SIZE OF AREA                                                *
    1756                    *                                                                        *
    1757                    **************************************************************************
    1758 00002f90           FILLAREA
    1759 00002f90                   PUSH    a0,a1,a2,a4,a5,a14
    1760 00002fb0     c003          jruc    areacon
    1761                    **************************************************************************
    1762                    *                                                                        *
    1763                    * BLNKAREA - BLANK A GIVEN SQUARE AREA ON THE SCREEN                     *
    1764                    * A3 = DAG OF AREA [YPOS,XPOS]                                           *
    1765                    * A4 = [Y,X] SIZE OF AREA                                                *
    1766                    *                                                                        *
    1767                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   36

    1768 00002fc0           BLNKAREA
    1769 00002fc0                   PUSH    a0,a1,a2,a4,a5,a14
    1770 00002fe0     5621          clr     a1                      ;constant 0:palette 0
    1771 00002ff0           areacon
    1772 00002ff0     4c82          move    a4,a2
    1773 00003000     09e4          movi    IROM,a4                 ;Somewhere in image rom
         00003010 02000000  
    1774 00003030     09e5          movi    DMACAL,a5
         00003040 0000800c  
    1775 00003060     0d5f          calla   QDMAN
         00003070 00000000! 
    1776 00003090                   PULL    a0,a1,a2,a4,a5,a14
    1777 000030b0     0960          rets
    1778                    
    1779                    
    1780                    ********************************
    1781                    * Wait till DIRQ
    1782                    * Trashes A0-A1
    1783                    
    1784 000030c0            SUBR   dirq_wait
    1785                    
    1786 000030c0     05a0          move    @dirqtimer,a0
         000030d0 00000000! 
    1787 000030f0     05a1  dirqwlp move    @dirqtimer,a1
         00003100 00000000! 
    1788 00003120     4801          cmp     a0,a1
    1789 00003130     cafb          jreq    dirqwlp
    1790 00003140     0960          rets
    1791                    
    1792                    
    1793                    ********************************
    1794                    * Wait on the DMA busy bit to clear
    1795                    * Preserves A1
    1796                    
    1797 00003150            SUBRP  dma_wait
    1798                    
    1799 00003150     05b0  dwlp    move    @DMACTRL,b0
         00003160 01a00010  
    1800 00003180     cefc          jrn     dwlp            ;Busy?
    1801 00003190     0960          rets
    1802                    
    1803                    
    1804                    ********************************
    1805                    * Wait for dma queue to empty, then wait for dma to finish
    1806                    * the last one. Turn displayon off.
    1807                    
    1808 000031a0            SUBR   dmaq_wait
    1809                    
    1810 000031a0     05a1          move    @DISPLAYON,a1
         000031b0 00000000! 
    1811 000031d0     5600          clr     a0
    1812 000031e0     0580          move    a0,@DISPLAYON           ;Display off
         000031f0 00000000! 
    1813                    
    1814 00003210     05b0          move    @DMACTRL,b0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   37

         00003220 01a00010  
    1815 00003240     cf02          jrnn    dqw20
    1816 00003250     4dbd  dqw10   move    b13,b13
    1817 00003260     c5fe          jrge    dqw10
    1818 00003270     0d3f  dqw20   callr   dma_wait
         00003280     ffec  
    1819 00003290     0581          move    a1,@DISPLAYON
         000032a0 00000000! 
    1820                    
    1821 000032c0     0960          rets
    1822                    
    1823                    
    1824                    ********************************
    1825                    * Turn page flipping and erasure off. Setup for page0
    1826                    * Trashes scratch
    1827                    
    1828 000032d0            SUBR   dpageflip_off
    1829                    
    1830 000032d0     5600          clr     a0
    1831 000032e0     0580          move    a0,@dpageflip
         000032f0 00000000! 
    1832 00003310     03e0          not     a0
    1833 00003320     0580          move    a0,@dpage
         00003330 00000000! 
    1834 00003350     09c0          movi    -4,a0                   ;Page0
         00003360     fffc  
    1835 00003370     0580          move    a0,@DPYSTRT
         00003380 c0000090  
    1836                    
    1837 000033a0     0960          rets
    1838                    
    1839                    *******************************
    1840                    * Blank display by using HEBLNK
    1841                    * Trashes scratch
    1842                    
    1843 000033b0            SUBRP  display_blank
    1844 000033b0     0360          dint
    1845 000033c0     05a0  tchlp   move    @VCOUNT,a0
         000033d0 c00001d0  
    1846 000033f0     0b40          cmpi    EOSINT,a0
         00003400     feed  
    1847 00003410     c4fa          jrlt    tchlp
    1848 00003420     05a0          move    @HSBLNK,a0      ;Blank screen
         00003430 c0000020  
    1849 00003450     0580          move    a0,@HEBLNK
         00003460 c0000010  
    1850 00003480     0d60          eint
    1851                    
    1852 00003490     0960          rets
    1853                    
    1854                    *******************************
    1855                    * Unblank display by resetting HEBLNK
    1856                    * Trashes scratch
    1857                    
    1858 000034a0            SUBRP  display_unblank
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   38

    1859                    
    1860 000034a0     0360          dint
    1861 000034b0     05a0  cxvlp   move    @VCOUNT,a0
         000034c0 c00001d0  
    1862 000034e0     0b40          cmpi    EOSINT,a0
         000034f0     feed  
    1863 00003500     c4fa          jrlt    cxvlp
    1864 00003510     09c0          movi    HEBLNKINIT,a0
         00003520     0065  
    1865 00003530     0580          move    a0,@HEBLNK
         00003540 c0000010  
    1866 00003560     0d60          eint
    1867                    
    1868 00003570     0960          rets
    1869                    
    1870                    
    1871                    **************************************************************************
    1872                    *                                                                        *
    1873                    * CRINIT - COLOR RAM INITIALIZATION, FIRST CLEAR ALL COLOR RAM, THEN     *
    1874                    *        FILL WITH PALETTES.                                             *
    1875                    *                                                                        *
    1876                    **************************************************************************
    1877 00003580           CRINIT
    1878 00003580     098f          MMTM    SP,A0,A1,A2,A6
         00003590     e200  
    1879 000035a0     09e1          MOVI    COLRAM,A1
         000035b0 01880000  
    1880 000035d0     5600          CLR     A0
    1881 000035e0     09e6          MOVI    10000H,A6,L
         000035f0 00010000  
    1882                    *CLEAR ALL COLOR PALETTES
    1883 00003610           CRINIT1
    1884 00003610     9201          MOVE    A0,*A1+,L       ;STUFF TWO WORDS AT A TIME
    1885 00003620     3c46          DSJS    A6,CRINIT1
    1886                    
    1887 00003630     09af          MMFM    SP,A0,A1,A2,A6
         00003640     0047  
    1888 00003650     0960          RETS
    1889                    
    1890                    **************************************************************************
    1891                    *                                                                        *
    1892                    * CRLOAD - LOAD COLOR RAM FROM A ROM TABLE                               *
    1893                    * A1 = START OF ROM TABLE                                                *
    1894                    * A2 = COLOR RAM START ADDRESS                                           *
    1895                    * A6 = PALETTE COUNT                                                     *
    1896                    *                                                                        *
    1897                    **************************************************************************
    1898 00003660           CRLOAD
    1899 00003660     098f          MMTM    SP,A0,A1,A2
         00003670     e000  
    1900 00003680           CRLOAD1
    1901 00003680     9420          MOVE    *A1+,A0,W       ;GRAB FIRST COLOR FROM THIS TABLE
    1902 00003690     ce05          JRN     CRLOAD4         ;BR = NULL PALETTE
    1903 000036a0           CRLOAD3
    1904 000036a0     8002          MOVE    A0,*A2,W        ;STUFF COLOR
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   39

    1905 000036b0     9420          MOVE    *A1+,A0,W       ;GRAB NEXT COLOR FROM THIS TABLE
    1906 000036c0     ce02          JRN     CRLOAD4         ;BR = NEXT PALETTE
    1907 000036d0     1202          ADDK    16,A2           ;INC THIS WAY SO WE DON'T OVERRUN PALETTES
    1908 000036e0     c0fb          JRUC    CRLOAD3
    1909                    
    1910 000036f0           CRLOAD4
    1911 000036f0     0b02          ADDI    1000H,A2        ;NEXT PALETTE
         00003700     1000  
    1912 00003710     2e82          SRL     12,A2
    1913 00003720     2582          SLL     12,A2           ;MASK OFF LOW BULLSHIT
    1914 00003730     3d86          DSJ     A6,CRLOAD1
    1915                    
    1916 00003740     09af          MMFM    SP,A0,A1,A2
         00003750     0007  
    1917 00003760     0960          RETS
    1918                    
    1919                    
    1920                    ********************************
    1921                    * CLEAR THE SCREEN (Kill this, only used by diagnostics)
    1922                    * only call with interrupts disabled and the dma shut down, otherwise
    1923                    * use clr_scrn
    1924                    
    1925 00003770     5600  SCRCLR  CLR     A0
    1926                    
    1927 00003780     098f          MMTM    SP,A1,A2
         00003790     6000  
    1928 000037a0     5621          CLR     A1
    1929 000037b0     0581          MOVE    A1,@CMAPSEL                     ;SELECT COLOR MAP 0
         000037c0 01a80080  
    1930 000037e0     09c1          MOVI    SCREEN,A1
         000037f0     0000  
    1931 00003800     09e2          MOVI    (SCRNE-SCREEN)/32,A2
         00003810 00010000  
    1932 00003830     9201  SCRLP   MOVE    A0,*A1+,L
    1933 00003840     3c42          DSJS    A2,SCRLP
    1934                    
    1935 00003850     09af          MMFM    SP,A1,A2
         00003860     0006  
    1936 00003870     0960          RETS
    1937                    
    1938                    
    1939                    
    1940                    ********************************
    1941                    * Clear screen routine
    1942                    
    1943 00003880            SUBR   CLR_SCRN
    1944                    
    1945 00003880     098f          mmtm    sp,a1,a2,a3
         00003890     7000  
    1946 000038a0     05a3          move    @DISPLAYON,a3
         000038b0 00000000! 
    1947                    ;       clr     a1
    1948                    ;       move    a1,@DISPLAYON
    1949 000038d0     0d3f          callr   dmaq_wait                       ;wait on dma
         000038e0     ff8b  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   40

    1950 000038f0     5600          clr     a0
    1951 00003900     0580          move    a0,@CMAPSEL                     ;Select color map 0
         00003910 01a80080  
    1952 00003930     09e1          movi    SCREEN,a1,L
         00003940 00000000  
    1953 00003960     09e2          movi    ((SCRNE-2000H)-SCREEN)/32,a2,L
         00003970 0000ff00  
    1954 00003990     9201  clrlp   move    a0,*a1+,L
    1955 000039a0     3c42          dsjs    a2,clrlp
    1956 000039b0     0583          move    a3,@DISPLAYON
         000039c0 00000000! 
    1957 000039e0     09af          mmfm    sp,a1,a2,a3
         000039f0     000e  
    1958 00003a00     0960          rets
    1959                    
    1960                    
    1961                    ********************************
    1962                    * Animation list processor (JSRP)
    1963                    * A1=Mode:      0=Process current frame
    1964                    *               1=Process to end of list
    1965                    *               4=Process current frame, no sleep (time retrn'd in a0)
    1966                    * A8=*Object
    1967                    * A9=*Ani list
    1968                    * Rets:
    1969                    * C set if end of animation list was hit
    1970                    * A9=* to next frame or end of list
    1971                    * Trashes scratch
    1972                    *
    1973                    * Animation script format
    1974                    *       .long   *Image header or 0 if end
    1975                    *       .word   Sleep time  <-- BITS 0 - 7 ARE THE SLEEP TIME
    1976                    *                           <-- BITS 8 -15 ARE THE FLAGS:
    1977                    *                               Bit #   Flag
    1978                    *                               -----   ----
    1979                    *                               8-12    Unused
    1980                    *BNEWPAL  equ   13              13      New palette address is specified
    1981                    *BFLIPBIT equ   14              14      New flip bits are specified
    1982                    *                       Flag hierarchy: 15-8
    1983                    *                        Options should follow in this order
    1984                    
    1985                    
    1986 00003a10           FRANIM
    1987 00003a10                   PUSHP   a3,a4
    1988                    
    1989 00003a30     0b69          cmpi    ROM,a9                  ;Check for bogus script pointer
         00003a40 f87fffff  
    1990 00003a60     c839          jrlo    franerr
    1991                    
    1992 00003a70     4c23          move    a1,a3                   ;A3=Mode
    1993                    
    1994 00003a80     9721  franl   move    *a9+,a1,L
    1995 00003a90     ca30          jrz     frannd                  ;End?
    1996                    
    1997 00003aa0     b504          move    *a8(OCTRL),a4           ;Current flags
         00003ab0     00f0  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   41

    1998 00003ac0     9520          move    *a9+,a0                 ;Sleep time
    1999 00003ad0     0b40          cmpi    0100H,a0
         00003ae0     feff  
    2000 00003af0     c818          jrlo    fran2                   ;Just sleep?
    2001                            
    2002 00003b00                   PUSH    a1,a2,a7
    2003                    
    2004 00003b20     1e20          btst    BFLIPBIT,a0
    2005 00003b30     ca05          jrz     frannobi                ;No flip?
    2006 00003b40     9522          move    *a9+,a2                 ;Get the new flip flags
    2007 00003b50     0b84          andni   (M_FLIPV|M_FLIPH),a4    ;Clear the current flip status
         00003b60 00000030  
    2008 00003b80     5444          or      a2,a4                   ;Set flag bits
    2009                    
    2010 00003b90           frannobi
    2011 00003b90     1e40          btst    BNEWPAL,a0
    2012 00003ba0     ca09          jrz     frannopa                ;No pal?
    2013                    
    2014 00003bb0     4c07          move    a0,a7
    2015 00003bc0     9720          move    *a9+,a0,L               ;Get *pal
    2016 00003bd0     0d5f          calla   pal_getf
         00003be0 00000000! 
    2017 00003c00     ca02          jrz     fran10                  ;No palette available?
    2018 00003c10     b008          move    a0,*a8(OPAL)            ;Store new palette
         00003c20     0150  
    2019 00003c30           fran10
    2020 00003c30     4ce0          move    a7,a0
    2021 00003c40           frannopa
    2022 00003c40                   PULL    a1,a2,a7
    2023 00003c60     2700          sll     32-8,a0                 ;Kill special bits
    2024 00003c70     2d00          srl     32-8,a0
    2025                    
    2026 00003c80           fran2
    2027 00003c80     0d5f          calla   ANI                     ;Setup new animation
         00003c90 00000000! 
    2028                    
    2029 00003cb0     0b43          cmpi    4,a3
         00003cc0     fffb  
    2030 00003cd0     ca06          jreq    fran3                   ;One frame, no sleep?
    2031                    
    2032 00003ce0     a06c          move    a3,-*a12
    2033 00003cf0     0d5f          calla   PRCSLP                  ;Sleep
         00003d00 00000000! 
    2034 00003d20     9583          move    *a12+,a3
    2035 00003d30     cbd4          jrnz    franl                   ;Loop til end of list?
    2036                    
    2037 00003d40           fran3
    2038 00003d40                   PULLP   a3,a4
    2039 00003d60     0320          clrc                            ;Clear end flag
    2040 00003d70                   RETP
    2041                    
    2042 00003da0           frannd
    2043 00003da0                   PULLP   a3,a4
    2044 00003dc0     0de0          setc                            ;Return with end flag set
    2045 00003dd0                   RETP
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   42

    2046                    
    2047                    
    2048 00003e00           franerr
    2049                            .if     DEBUG
    2050                            LOCKUP
    2051                            eint
    2052                            .else
    2053 00003e00                   CALLERR 8,0                     ;Bad franim list
    2054                            .endif
    2055 00003eb0     c0ee          jruc    frannd
    2056                    
    2057                    
    2058                    ***************************************************************
    2059                    * Animation list processor (Quick list version) (JSRP)
    2060                    * A8=*Object
    2061                    * A9=*FRANIM List
    2062                    * Trashes A0-A4,A14,B0-B1
    2063                    *
    2064                    * Script format
    2065                    *       .long   *Image hdr or 0 if end
    2066                    *       .word   Sleep time  <-- BITS 0 - 7 ARE THE SLEEP TIME
    2067                    *                           <-- BITS 8 -15 ARE THE FLAGS:
    2068                    *                       BIT #           FLAG
    2069                    *                       -----           ----
    2070                    *                       8-10,12         UNUSED
    2071                    *BDELTAY        equ     11      Word is added into YPOS
    2072                    *BNEWPAL        equ     13      New palette address is specified
    2073                    *BFLIPBIT       equ     14      New flip bits are specified
    2074                    *       Flag hierarchy: 15-8    Options should follow in this order
    2075                    
    2076                    
    2077 00003ec0           FRANIMQ
    2078                    
    2079 00003ec0     0b69          cmpi    ROM,a9
         00003ed0 f87fffff  
    2080 00003ef0     c936          jrhs    frq80                   ;Franim list OK?
    2081                    
    2082                            .if     DEBUG
    2083                            LOCKUP
    2084                            eint
    2085                            .else
    2086 00003f00                   CALLERR 8,0                     ;Bad franim list
    2087                            .endif
    2088 00003fb0     c02c          jruc    ikxx
    2089                    
    2090                    
    2091 00003fc0     b504  ikxlp   move    *a8(OCTRL),a4           ;Current flags
         00003fd0     00f0  
    2092 00003fe0     9520          move    *a9+,a0                 ;Sleep time
    2093 00003ff0     0b40          cmpi    0100H,a0
         00004000     feff  
    2094 00004010     c81e          jrlo    frq70                   ;No special bits?
    2095                            
    2096 00004020     1e20          btst    BFLIPBIT,a0             ;New flip?
    2097 00004030     ca05          jrz     frq40
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   43

    2098 00004040     9522          move    *a9+,a2                 ;Get the new flip flags
    2099 00004050     0b84          andni   (M_FLIPV|M_FLIPH),a4    ;Clear the current flip status
         00004060 00000030  
    2100 00004080     5444          or      a2,a4                   ;Set desired bits
    2101                    
    2102 00004090     1e40  frq40   btst    BNEWPAL,a0              ;New palette ?
    2103 000040a0     ca0b          jrz     frq60
    2104                    
    2105 000040b0     4c02          move    a0,a2
    2106 000040c0     4c23          move    a1,a3
    2107 000040d0     9720          move    *a9+,a0,L               ;Get the palette address
    2108 000040e0     0d5f          calla   pal_getf                ;Get a color map assignment
         000040f0 00000000! 
    2109 00004110     ca02          jrz     frq50                   ;No palette available?
    2110 00004120     b008          move    a0,*a8(OPAL)            ;Set new palette
         00004130     0150  
    2111 00004140     4c40  frq50   move    a2,a0
    2112 00004150     4c61          move    a3,a1
    2113                    
    2114 00004160     1e80  frq60   btst    BDELTAY,a0
    2115 00004170     ca06          jrz     frq65
    2116 00004180     9522          move    *a9+,a2                 ;Get DY
    2117 00004190     b503          move    *a8(OYPOS),a3
         000041a0     00b0  
    2118 000041b0     4043          add     a2,a3
    2119 000041c0     b068          move    a3,*a8(OYPOS)
         000041d0     00b0  
    2120                    
    2121 000041e0     2700  frq65   sll     32-8,a0                 ;Kill special bits
    2122 000041f0     2d00          srl     32-8,a0
    2123                    
    2124 00004200     0d5f  frq70   calla   ANI
         00004210 00000000! 
    2125 00004230     0d5f          calla   PRCSLP                  ;Sleep
         00004240 00000000! 
    2126                    
    2127 00004260     9721  frq80   move    *a9+,a1,L               ;Get frame
    2128 00004270     cbd4          jrnz    ikxlp
    2129                    
    2130 00004280           ikxx    RETP
    2131                    
    2132                    
    2133                    
    2134                    *****************************************************************************
    2135                    * Hardware security check code
    2136                    * 0A0H=0 if OK
    2137                    * Trashes scratch
    2138                    
    2139              7db0  OFF     .equ    07db0H
    2140          01b0c280  SEC     .equ    01b14030H-OFF
    2141          ff507d80  FAKEO   .equ    -0b00030H+OFF
    2142                    
    2143 000042b0            SUBR   security_chk
    2144                    
    2145 000042b0                   PUSH    a2,a3,a4
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   44

    2146 000042d0     5600          clr     a0
    2147 000042e0     09c3          movi    63,a3
         000042f0     003f  
    2148 00004300     4c6e  dexlp   move    a3,a14
    2149 00004310     0d3f          callr   dexsc
         00004320     0006  
    2150 00004330     5440          or      a2,a0
    2151 00004340     1423          subk    1,a3
    2152 00004350     c5fa          jrge    dexlp
    2153 00004360                   PULL    a2,a3,a4
    2154 00004380     0960          rets
    2155                    
    2156 00004390           dexsc
    2157 00004390     09e1          movi    SEC+FAKEO,a1
         000043a0 01014000  
    2158 000043c0     254e          sll     15-5,a14
    2159 000043d0     41c1          add     a14,a1          ;Add a bogus offset
    2160 000043e0     0d01          subi    FAKEO,a1
         000043f0 00af827f  
    2161 00004410     b1c1          move    a14,*a1(OFF)    ;Write 1 of 64 to sec
         00004420     7db0  
    2162 00004430     45c1          sub     a14,a1          ;Sub offset so we read a different address
    2163 00004440     b422          move    *a1(OFF),a2     ;Read 1st sec value
         00004450     7db0  
    2164 00004460     2622          sll     32-15,a2
    2165 00004470     2cc2          srl     32-6,a2
    2166 00004480     2522          sll     9,a2            ;Move to bits 9-14
    2167 00004490     57c2          xor     a14,a2
    2168 000044a0     2622          sll     32-15,a2        ;Remove top bits
    2169 000044b0     cb22          jrnz    dexx            ;Bad value?
    2170                    
    2171 000044c0     41c1          add     a14,a1
    2172 000044d0     2f6e          srl     2+3,a14
    2173 000044e0     41c1          add     a14,a1
    2174 000044f0     01e0          pushst
    2175 00004500     0546          setf    6,0,0
    2176 00004510     b422          move    *a1(OFF+9),a2   ;Read 2nd sec value
         00004520     7db9  
    2177 00004530     4e41          move    a2,b1
    2178 00004540     2711          sll     24,b1
    2179 00004550     0144          getpc   a4
    2180 00004560     0b04          addi    dexsec_t-$,a4,W
         00004570     0190  
    2181 00004580     408e          add     a4,a14
    2182 00004590     b422          move    *a1(OFF+019H),a2        ;Read 3rd sec value
         000045a0     7dc9  
    2183 000045b0     4e40          move    a2,b0
    2184 000045c0     2610          sll     16,b0
    2185 000045d0     5411          or      b0,b1
    2186 000045e0     b422          move    *a1(OFF+029H),a2        ;Read 4th sec value
         000045f0     7dd9  
    2187 00004600     4e40          move    a2,b0
    2188 00004610     2510          sll     8,b0
    2189 00004620     5411          or      b0,b1
    2190 00004630     b422          move    *a1(OFF+039H),a2        ;Read 5th sec value
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   45

         00004640     7de9  
    2191 00004650     4e40          move    a2,b0
    2192 00004660     5411          or      b0,b1
    2193 00004670     01c0          popst
    2194 00004680     97c2          move    *a14+,a2,L
    2195 00004690     4e31          move    b1,a1
    2196 000046a0     0b81          andi    03f3f3f3fH,a1
         000046b0 c0c0c0c0  
    2197 000046d0     5622          xor     a1,a2           ;A2=0 if OK
    2198                    
    2199 000046e0     0960  dexx    rets
    2200                    
    2201                    
    2202 000046f0 21283b3b  dexsec_t        .long   021283b3bH      ;0
    2203 00004710 2439383b          .long   02439383bH
    2204 00004730 31283b3b          .long   031283b3bH
    2205 00004750 302b3938          .long   0302b3938H
    2206 00004770 31283b3b          .long   031283b3bH
    2207 00004790 302b3938          .long   0302b3938H
    2208 000047b0 232f2f2f          .long   0232f2f2fH
    2209 000047d0 26383b3b          .long   026383b3bH
    2210 000047f0 21283b3b          .long   021283b3bH      ;20
    2211 00004810 2439383b          .long   02439383bH
    2212 00004830 312a1224          .long   0312a1224H
    2213 00004850 302b1120          .long   0302b1120H
    2214 00004870 312a1224          .long   0312a1224H
    2215 00004890 302b1120          .long   0302b1120H
    2216 000048b0 232d283b          .long   0232d283bH
    2217 000048d0 26383b3b          .long   026383b3bH
    2218 000048f0 2b3b3b3b          .long   02b3b3b3bH      ;40
    2219 00004910 2e2e2e2e          .long   02e2e2e2eH
    2220 00004930 39383b1b          .long   039383b1bH
    2221 00004950 383b3b1b          .long   0383b3b1bH
    2222 00004970 3b3b3b1b          .long   03b3b3b1bH
    2223 00004990 3a3a3a1a          .long   03a3a3a1aH
    2224 000049b0 2b3b3b3b          .long   02b3b3b3bH
    2225 000049d0 2e2e2e2e          .long   02e2e2e2eH
    2226 000049f0 2b39383b          .long   02b39383bH      ;60
    2227 00004a10 2e2e2e2e          .long   02e2e2e2eH
    2228 00004a30 393a1a18          .long   0393a1a18H
    2229 00004a50 383b1b1b          .long   0383b1b1bH
    2230 00004a70 3b3b1b1b          .long   03b3b1b1bH
    2231 00004a90 3a3a1a18          .long   03a3a1a18H
    2232 00004ab0 2b39383b          .long   02b39383bH
    2233 00004ad0 2e2e2e2e          .long   02e2e2e2eH
    2234 00004af0 01202b3b          .long   001202b3bH      ;80
    2235 00004b10 0431283b          .long   00431283bH
    2236 00004b30 11202b3b          .long   011202b3bH
    2237 00004b50 1021283b          .long   01021283bH
    2238 00004b70 11202b3b          .long   011202b3bH
    2239 00004b90 1021283b          .long   01021283bH
    2240 00004bb0 03273b3b          .long   003273b3bH
    2241 00004bd0 06302b39          .long   006302b39H
    2242 00004bf0 09302b39          .long   009302b39H      ;A0
    2243 00004c10 0c232f2f          .long   00c232f2fH
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   46

    2244 00004c30 19322e06          .long   019322e06H
    2245 00004c50 18312a12          .long   018312a12H
    2246 00004c70 19322e06          .long   019322e06H
    2247 00004c90 18312a12          .long   018312a12H
    2248 00004cb0 0b31283b          .long   00b31283bH
    2249 00004cd0 0e26383b          .long   00e26383bH
    2250 00004cf0 03273b3b          .long   003273b3bH      ;C0
    2251 00004d10 06302b39          .long   006302b39H
    2252 00004d30 11202b3b          .long   011202b3bH
    2253 00004d50 1021283b          .long   01021283bH
    2254 00004d70 13273938          .long   013273938H
    2255 00004d90 12243938          .long   012243938H
    2256 00004db0 03273b3b          .long   003273b3bH
    2257 00004dd0 06302b39          .long   006302b39H
    2258 00004df0 0b31283b          .long   00b31283bH      ;E0
    2259 00004e10 0e26383b          .long   00e26383bH
    2260 00004e30 19322e06          .long   019322e06H
    2261 00004e50 18312a12          .long   018312a12H
    2262 00004e70 1b332f05          .long   01b332f05H
    2263 00004e90 1a302b11          .long   01a302b11H
    2264 00004eb0 0b31283b          .long   00b31283bH
    2265 00004ed0 0e26383b          .long   00e26383bH
    2266                            .def    secend
    2267 00004ef0           secend
    2268                    
    2269                    
    2270                    ***************************************************************
    2271                    * Shake screen as if an earthquake is in effect (horizontally)
    2272                    * A10 = # ticks to shake and power of shake
    2273                    * Note: time to shake must be more than 6 ticks
    2274                    
    2275 00004ef0                   BSSX    kvxSHK_ON,16            ;is a shake in progress?
    2276 00004ef0                   BSSX    kvxX_ADJ,32             ;current deviation from rest
    2277                    
    2278 00004ef0            SUBR   HORZ_SHAKER2
    2279                    
    2280                            ;check for a valid a10
    2281 00004ef0     4d4a          move    a10,a10
    2282 00004f00     ce20          jrn     kvxdone
    2283 00004f10     ca1f          jrz     kvxdone
    2284                    
    2285 00004f20     05a0          move    @kvxSHK_ON,a0
         00004f30 00000ed0- 
    2286 00004f50     ca0f          jrz     kvxno_shake
    2287                    
    2288                            ;abort shake currently in progress
    2289 00004f60     09c0          movi    HZSHAKE_PID,a0
         00004f70     0156  
    2290 00004f80     0d5f          calla   KIL1C
         00004f90 00000000! 
    2291 00004fb0     05ae          move    @kvxX_ADJ,a14
         00004fc0 00000ee0- 
    2292 00004fe0     07a0          move    @WORLDTLX,a0,L
         00004ff0 00000000! 
    2293 00005010     45c0          sub     a14,a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   47

    2294 00005020     0780          move    a0,@WORLDTLX,L
         00005030 00000000! 
    2295                    
    2296 00005050           kvxno_shake
    2297                            ;set the 'in progress' flag
    2298 00005050     182e          movk    1,a14
    2299 00005060     058e          move    a14,@kvxSHK_ON
         00005070 00000ed0- 
    2300                    
    2301                            ;create the shaker process
    2302 00005090                   CREATE  HZSHAKE_PID,kvxshaker
    2303                    
    2304 00005110           kvxdone
    2305 00005110     0960          rets
    2306                    
    2307 00005120           kvxshaker
    2308                            ;a9  = index into sine table
    2309                            ;a10 = time left
    2310                            ;a11 = original time left
    2311                    
    2312                            ;initialize
    2313 00005120     09e9          movi    kvxlast_entry,a9
         00005130 00000009  
    2314 00005150     4d4b          move    a10,a11
    2315                    
    2316 00005160           kvxloop
    2317                            ;calculate the new offset
    2318                    
    2319                            ;get the cosine
    2320 00005160     4d2e          move    a9,a14
    2321 00005170                   X16     a14
    2322 00005180     0b2e          addi    kvxsine_table,a14
         00005190 00005520' 
    2323 000051b0     85c0          move    *a14,a0,W
    2324                    
    2325                            ;get the exp (index is 64 - (64 * a10 / a11)
    2326 000051c0     4d41          move    a10,a1
    2327 000051d0                   X64     a1
    2328 000051e0     5b61          divu    a11,a1
    2329 000051f0     03a1          neg     a1
    2330 00005200     0b01          addi    64,a1
         00005210     0040  
    2331 00005220                   X16     a1
    2332 00005230     0b21          addi    kvxexp_table,a1
         00005240 000055c0' 
    2333 00005260     8421          move    *a1,a1,W
    2334                    
    2335                            ;multiply
    2336 00005270     5c01          mpys    a0,a1
    2337                    
    2338                            ;scale
    2339 00005280     2b61          sra     5,a1
    2340 00005290     5f61          mpyu    a11,a1
    2341                    
    2342 000052a0     0781          move    a1,@kvxX_ADJ,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   48

         000052b0 00000ee0- 
    2343                    
    2344                            ;update the table pointer
    2345 000052d0     3869          dsj     a9,kvxtable_ok
    2346 000052e0     09e9          movi    kvxlast_entry,a9
         000052f0 00000009  
    2347 00005310           kvxtable_ok
    2348                    
    2349                            ;apply it
    2350 00005310     07ae          move    @WORLDTLX,a14,L
         00005320 00000000! 
    2351 00005340     41c1          add     a14,a1
    2352 00005350     0781          move    a1,@WORLDTLX,L
         00005360 00000000! 
    2353                    
    2354                            ;nap
    2355 00005380                   SLEEPK  1
    2356                    
    2357                            ;undo it
    2358 000053c0     07ae          move    @kvxX_ADJ,a14,L
         000053d0 00000ee0- 
    2359 000053f0     07a1          move    @WORLDTLX,a1,L
         00005400 00000000! 
    2360 00005420     45c1          sub     a14,a1
    2361 00005430     0781          move    a1,@WORLDTLX,L
         00005440 00000000! 
    2362                    
    2363                            ;loop
    2364 00005460     0d8a          dsj     a10,kvxloop
         00005470     ffce  
    2365                    
    2366                            ;all done
    2367 00005480     57ce          clr     a14
    2368 00005490     058e          move    a14,@kvxSHK_ON
         000054a0 00000ed0- 
    2369 000054c0     058e          move    a14,@kvxX_ADJ
         000054d0 00000ee0- 
    2370 000054f0                   DIE
    2371                    
    2372 00005520           kvxsine_table                   ;deg
    2373 00005520     fda7          .word   -601            ;324
    2374 00005530     fc33          .word   -973            ;288
    2375 00005540     fc33          .word   -973            ;252
    2376 00005550     fda7          .word   -601            ;216
    2377 00005560     0000          .word   0               ;180
    2378 00005570     025a          .word   602             ;144
    2379 00005580     03ce          .word   974             ;108
    2380 00005590     03ce          .word   974             ;72
    2381 000055a0     025a          .word   602             ;36
    2382 000055b0     0000          .word   0               ;0
    2383              0009  kvxlast_entry   equ     9
    2384                    
    2385                            ;values of e^(-x) for values from 0 to 7, in 64 divisions
    2386                            ; e.g. e^-1.5 is the 32nd entry
    2387                            ; all values are multiplied by 1024
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   49

    2388 000055c0           kvxexp_table            ;damps at speed 5
    2389 000055c0     0400          .word 1024,945,873,807,745,688,636,587
    2390 00005640     021e          .word 542,501,463,427,395,364,337,311
    2391 000056c0     011f          .word 287,265,245,226,209,193,178,165
    2392 00005740     0098          .word 152,140,130,120,110,102,94,87
    2393 000057c0     0050          .word 80,74,68,63,58,54,50,46
    2394 00005840     002a          .word 42,39,36,33,31,28,26,24
    2395 000058c0     0016          .word 22,20,19,17,16,15,14,13
    2396 00005940     000c          .word 12,11,10,9,8,8,7,6
    2397                    
    2398                    ***************************************************************
    2399                    * Shake screen as if an earthquake is in effect
    2400                    * A10 = # ticks to shake and power of shake
    2401                    * Note: time to shake must be more than 6 ticks
    2402                    
    2403 000059c0                   BSSX    hmqSHK_ON,16            ;is a shake in progress?
    2404 000059c0                   BSSX    hmqY_ADJ,32             ;current deviation from rest
    2405                    
    2406 000059c0            SUBR   SHAKER2
    2407                    
    2408                            ;check for a valid a10
    2409 000059c0     4d4a          move    a10,a10
    2410 000059d0     ce20          jrn     hmqdone
    2411 000059e0     ca1f          jrz     hmqdone
    2412                    
    2413 000059f0     05a0          move    @hmqSHK_ON,a0
         00005a00 00000f00- 
    2414 00005a20     ca0f          jrz     hmqno_shake
    2415                    
    2416                            ;abort shake currently in progress
    2417 00005a30     09c0          movi    SHAKE_PID,a0
         00005a40     013b  
    2418 00005a50     0d5f          calla   KIL1C
         00005a60 00000000! 
    2419 00005a80     05ae          move    @hmqY_ADJ,a14
         00005a90 00000f10- 
    2420 00005ab0     07a0          move    @WORLDTLY,a0,L
         00005ac0 00000000! 
    2421 00005ae0     45c0          sub     a14,a0
    2422 00005af0     0780          move    a0,@WORLDTLY,L
         00005b00 00000000! 
    2423                    
    2424 00005b20           hmqno_shake
    2425                            ;set the 'in progress' flag
    2426 00005b20     182e          movk    1,a14
    2427 00005b30     058e          move    a14,@hmqSHK_ON
         00005b40 00000f00- 
    2428                    
    2429                            ;create the shaker process
    2430 00005b60                   CREATE  SHAKE_PID,hmqshaker
    2431                    
    2432 00005be0           hmqdone
    2433 00005be0     0960          rets
    2434                    
    2435 00005bf0           hmqshaker
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   50

    2436                            ;a9  = index into sine table
    2437                            ;a10 = time left
    2438                            ;a11 = original time left
    2439                    
    2440                            ;initialize
    2441 00005bf0     09e9          movi    hmqlast_entry,a9
         00005c00 00000009  
    2442 00005c20     4d4b          move    a10,a11
    2443                    
    2444 00005c30           hmqloop
    2445                            ;calculate the new offset
    2446                    
    2447                            ;get the cosine
    2448 00005c30     4d2e          move    a9,a14
    2449 00005c40                   X16     a14
    2450                    ;       addi    hmqcosine_table,a14
    2451 00005c50     0b2e          addi    hmqsine_table,a14
         00005c60 00006090' 
    2452 00005c80     85c0          move    *a14,a0,W
    2453                    
    2454                            ;get the exp (index is 64 - (64 * a10 / a11)
    2455 00005c90     4d41          move    a10,a1
    2456 00005ca0                   X64     a1
    2457 00005cb0     5b61          divu    a11,a1
    2458 00005cc0     03a1          neg     a1
    2459 00005cd0     0b01          addi    64,a1
         00005ce0     0040  
    2460 00005cf0                   X16     a1
    2461 00005d00     0b21          addi    hmqexp_table,a1
         00005d10 00006130' 
    2462 00005d30     8421          move    *a1,a1,W
    2463                    
    2464                            ;multiply
    2465 00005d40     5c01          mpys    a0,a1
    2466                    
    2467                            ;scale
    2468 00005d50     2b61          sra     5,a1
    2469 00005d60     5f61          mpyu    a11,a1
    2470                    
    2471 00005d70     0781          move    a1,@hmqY_ADJ,L
         00005d80 00000f10- 
    2472                    
    2473                            ;update the table pointer
    2474 00005da0     3869          dsj     a9,hmqtable_ok
    2475 00005db0     09e9          movi    hmqlast_entry,a9
         00005dc0 00000009  
    2476 00005de0           hmqtable_ok
    2477                    
    2478                            ;apply it
    2479 00005de0     07ae          move    @WORLDTLY,a14,L
         00005df0 00000000! 
    2480 00005e10     41c1          add     a14,a1
    2481 00005e20     0781          move    a1,@WORLDTLY,L
         00005e30 00000000! 
    2482                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   51

    2483                            ;nap
    2484 00005e50                   SLEEPK  1
    2485                    
    2486                            ;undo it
    2487 00005e90     07ae          move    @hmqY_ADJ,a14,L
         00005ea0 00000f10- 
    2488 00005ec0     07a1          move    @WORLDTLY,a1,L
         00005ed0 00000000! 
    2489 00005ef0     45c1          sub     a14,a1
    2490 00005f00     0781          move    a1,@WORLDTLY,L
         00005f10 00000000! 
    2491                    
    2492                            ;loop
    2493 00005f30     0d8a          dsj     a10,hmqloop
         00005f40     ffce  
    2494                    
    2495                            ;all done
    2496 00005f50     57ce          clr     a14
    2497 00005f60     058e          move    a14,@hmqSHK_ON
         00005f70 00000f00- 
    2498 00005f90     058e          move    a14,@hmqY_ADJ
         00005fa0 00000f10- 
    2499 00005fc0                   DIE
    2500                    
    2501                            ;45-degree increments
    2502                    ;hmqcosine_table                        ;deg
    2503                    ;       .word   724             ;315
    2504                    ;       .word   0               ;270
    2505                    ;hmqsine_table                          ;deg
    2506                    ;       .word   -723            ;225    ;315
    2507                    ;       .word   -1023           ;180    ;270
    2508                    ;       .word   -723            ;135    ;225
    2509                    ;       .word   0               ;90     ;180
    2510                    ;       .word   724             ;45     ;135
    2511                    ;       .word   1024            ;0      ;90
    2512                    ;       .word   724                     ;45
    2513                    ;       .word   0                       ;0
    2514                    ;hmqlast_entry  equ     7
    2515                    
    2516                            ;36-degree increments
    2517 00005ff0           hmqcosine_table                 ;deg
    2518 00005ff0     033c          .word   828             ;324
    2519 00006000     013c          .word   316             ;288
    2520 00006010     fec5          .word   -315            ;252
    2521 00006020     fcc5          .word   -827            ;216
    2522 00006030     ff9a          .word   -102            ;180
    2523 00006040     fcc5          .word   -827            ;144
    2524 00006050     fec5          .word   -315            ;108
    2525 00006060     013c          .word   316             ;72
    2526 00006070     033c          .word   828             ;36
    2527 00006080     0400          .word   1024            ;0
    2528                            
    2529 00006090           hmqsine_table                   ;deg
    2530 00006090     fda7          .word   -601            ;324
    2531 000060a0     fc33          .word   -973            ;288
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   52

    2532 000060b0     fc33          .word   -973            ;252
    2533 000060c0     fda7          .word   -601            ;216
    2534 000060d0     0000          .word   0               ;180
    2535 000060e0     025a          .word   602             ;144
    2536 000060f0     03ce          .word   974             ;108
    2537 00006100     03ce          .word   974             ;72
    2538 00006110     025a          .word   602             ;36
    2539 00006120     0000          .word   0               ;0
    2540              0009  hmqlast_entry   equ     9
    2541                    
    2542                            ;30-degree increments
    2543                    ;hmqcosine_table                        ;deg
    2544                    ;       .word   887             ;330
    2545                    ;       .word   512             ;300
    2546                    ;       .word   0               ;270
    2547                    ;hmqsine_table                          ;deg
    2548                    ;       .word   -511            ;240    ;330
    2549                    ;       .word   -886            ;210    ;300
    2550                    ;       .word   -1023           ;180    ;270
    2551                    ;       .word   -886            ;150    ;240
    2552                    ;       .word   -511            ;120    ;210
    2553                    ;       .word   0               ;90     ;180
    2554                    ;       .word   512             ;60     ;150
    2555                    ;       .word   887             ;30     ;120
    2556                    ;       .word   1024            ;0      ;90
    2557                    ;       .word   887                     ;60
    2558                    ;       .word   512                     ;30
    2559                    ;       .word   0                       ;0
    2560                    ;hmqlast_entry  equ     11
    2561                    
    2562                            ;values of e^(-x) for values from 0 to 7, in 64 divisions
    2563                            ; e.g. e^-1.5 is the 32nd entry
    2564                            ; all values are multiplied by 1024
    2565                    ;hmqexp_table           ;damps at speed 7
    2566                    ;       .word 1024,916,819,733,656,587,525,470
    2567                    ;       .word 420,376,337,301,269,241,216,193
    2568                    ;       .word 173,154,138,124,110,99,88,79
    2569                    ;       .word 71,63,56,50,45,40,36,32
    2570                    ;       .word 29,26,23,20,18,16,15,13
    2571                    ;       .word 12,10,9,8,7,6,6,5
    2572                    ;       .word 4,4,3,3,3,2,2,2
    2573                    ;       .word 2,1,1,1,1,1,1,0
    2574                    
    2575                    ;hmqexp_table           ;damps at speed 6
    2576                    ;       .word 1024,930,846,769,699,636,578,525
    2577                    ;       .word 477,434,395,359,326,296,269,245
    2578                    ;       .word 223,202,184,167,152,138,125,114
    2579                    ;       .word 104,94,86,78,71,64,58,53
    2580                    ;       .word 48,44,40,36,33,30,27,24
    2581                    ;       .word 22,20,18,17,15,14,12,11
    2582                    ;       .word 10,9,8,7,7,6,5,5
    2583                    ;       .word 4,4,4,3,3,3,2,2
    2584                    
    2585 00006130           hmqexp_table            ;damps at speed 5
    2586 00006130     0400          .word 1024,945,873,807,745,688,636,587
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   53

    2587 000061b0     021e          .word 542,501,463,427,395,364,337,311
    2588 00006230     011f          .word 287,265,245,226,209,193,178,165
    2589 000062b0     0098          .word 152,140,130,120,110,102,94,87
    2590 00006330     0050          .word 80,74,68,63,58,54,50,46
    2591 000063b0     002a          .word 42,39,36,33,31,28,26,24
    2592 00006430     0016          .word 22,20,19,17,16,15,14,13
    2593 000064b0     000c          .word 12,11,10,9,8,8,7,6
    2594                    
    2595                    ;hmqexp_table           ;damps at speed 2
    2596                    ;       .word 1024,992,961,930,901,873,846,819
    2597                    ;       .word 794,769,745,722,699,677,656,636
    2598                    ;       .word 616,596,578,560,542,525,509,493
    2599                    ;       .word 477,463,448,434,420,407,395,382
    2600                    ;       .word 370,359,347,337,326,316,306,296
    2601                    ;       .word 287,278,269,261,253,245,237,230
    2602                    ;       .word 223,216,209,202,196,190,184,178
    2603                    ;       .word 173,167,162,157,152,147,143,138
    2604                    
    2605                    
    2606                    ;original Shawn shaker
    2607                    
    2608 00000f30                   .BSS    AMP,16
    2609 00000f40                   .BSS    AMPCNT,16
    2610 00000f50                   .BSS    XSET,16
    2611 00000f60                   .BSS    YSET,16
    2612 00000f70                   .BSS    SHK_ON,16
    2613                    
    2614 00006530            SUBR   SHAKER
    2615                    
    2616 00006530     05a0          move    @SHK_ON,a0
         00006540 00000f70- 
    2617 00006560     cb14          jrnz    hmqx
    2618 00006570     4d4b          move    a10,a11
    2619 00006580     1840          movk    2,a0
    2620 00006590     0580          move    a0,@SHK_ON
         000065a0 00000f70- 
    2621 000065c0     580b          divs    a0,a11
    2622 000065d0     18c0          movk    6,a0
    2623 000065e0     0580          move    a0,@AMP
         000065f0 00000f30- 
    2624 00006610     058b          move    a11,@AMPCNT
         00006620 00000f40- 
    2625                            
    2626 00006640                   CREATE0 shakelp
    2627 000066b0     0960  hmqx    RETS
    2628                            
    2629                    ;only shake vertically
    2630                    
    2631 000066c0           shakelp
    2632                     .if 0
    2633                            move    @AMP,a0
    2634                            calla   RNDRNG0
    2635                            move    a0,@XSET
    2636                            move    @AMP,a0
    2637                            calla   RNDRNG0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   54

    2638                            move    a0,@YSET
    2639                            move    @HCOUNT,a14
    2640                            btst    0,a14
    2641                            jrz     hmqshakey
    2642                    
    2643                            move    @XSET,a1
    2644                            move    @WORLDTLX,a0,L
    2645                            sll     16,a1
    2646                            add     a1,a0
    2647                            move    a0,@WORLDTLX,L
    2648                            SLEEPK  1
    2649                            move    @XSET,a1
    2650                            move    @WORLDTLX,a0,L
    2651                            sll     16,a1
    2652                            sub     a1,a0
    2653                            move    a0,@WORLDTLX,L
    2654                            jruc    shakelp
    2655                     .endif
    2656                    
    2657 000066c0           hmqshakey
    2658 000066c0     05a0          move    @AMP,a0
         000066d0 00000f30- 
    2659 000066f0     0d5f          calla   RNDRNG0
         00006700 00002d80' 
    2660 00006720     0580          move    a0,@YSET
         00006730 00000f60- 
    2661                    
    2662 00006750     05a1          move    @YSET,a1
         00006760 00000f60- 
    2663 00006780     07a0          move    @WORLDTLY,a0,L
         00006790 00000000! 
    2664 000067b0     2601          sll     16,a1
    2665 000067c0     4020          add     a1,a0
    2666 000067d0     0780          move    a0,@WORLDTLY,L
         000067e0 00000000! 
    2667 00006800                   SLEEPK  1
    2668 00006840     05a1          move    @YSET,a1
         00006850 00000f60- 
    2669 00006870     07a0          move    @WORLDTLY,a0,L
         00006880 00000000! 
    2670 000068a0     2601          sll     16,a1
    2671 000068b0     4420          sub     a1,a0
    2672 000068c0     0780          move    a0,@WORLDTLY,L
         000068d0 00000000! 
    2673 000068f0     05a2          move    @AMPCNT,a2
         00006900 00000f40- 
    2674 00006920     1422          dec     a2
    2675 00006930     0582          move    a2,@AMPCNT
         00006940 00000f40- 
    2676 00006960     cb0d          jrnz    hmqampok
    2677 00006970     058b          move    a11,@AMPCNT
         00006980 00000f40- 
    2678 000069a0     05a0          move    @AMP,a0
         000069b0 00000f30- 
    2679 000069d0     0b40          cmpi    1,a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   55

         000069e0     fffe  
    2680 000069f0     ca04          jrz     hmqampok
    2681 00006a00     1420          dec     a0
    2682 00006a10     0580          move    a0,@AMP
         00006a20 00000f30- 
    2683 00006a40           hmqampok
    2684 00006a40     0d8a          dsj     a10,shakelp
         00006a50     ffc6  
    2685 00006a60     058a          move    a10,@SHK_ON
         00006a70 00000f70- 
    2686                    
    2687 00006a90                   DIE
    2688                    
    2689                    *****************************************************************************
    2690                    *
    2691                    * RETURN:       a0 = start button bits
    2692                    *-----------------------------------------------------------------------------
    2693                    
    2694 00006ac0            SUBR   get_all_starts_cur
    2695                    
    2696 00006ac0     5621          clr     a1
    2697                    
    2698 00006ad0     05a2          move    @PSTATUS2,a2
         00006ae0 00000000! 
    2699                    
    2700 00006b00     1fe2          btst    0,a2
    2701 00006b10     ca05          jrz     vpzno_player1
    2702 00006b20     5600          clr     a0                      ;player 1
    2703 00006b30     0d5f          calla   get_start_cur
         00006b40 00006d40' 
    2704 00006b60     5401          or      a0,a1
    2705 00006b70           vpzno_player1
    2706                    
    2707 00006b70     1fc2          btst    1,a2
    2708 00006b80     ca05          jrz     vpzno_player2
    2709 00006b90     1820          movk    1,a0                    ;player 2
    2710 00006ba0     0d5f          calla   get_start_cur
         00006bb0 00006d40' 
    2711 00006bd0     5401          or      a0,a1
    2712 00006be0           vpzno_player2
    2713                    
    2714 00006be0     4c20          move    a1,a0
    2715 00006bf0     0960          rets
    2716                    
    2717                    *****************************************************************************
    2718                    *
    2719                    * RETURN:       a0 = start button bits
    2720                    *-----------------------------------------------------------------------------
    2721                    
    2722 00006c00            SUBR   get_all_starts_down
    2723                    
    2724 00006c00     5621          clr     a1
    2725                    
    2726 00006c10     05a2          move    @PSTATUS2,a2
         00006c20 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   56

    2727                    
    2728 00006c40     1fe2          btst    0,a2
    2729 00006c50     ca05          jrz     gopno_player1
    2730 00006c60     5600          clr     a0                      ;player 1
    2731 00006c70     0d5f          calla   get_start_down
         00006c80 00006e10' 
    2732 00006ca0     5401          or      a0,a1
    2733 00006cb0           gopno_player1
    2734                    
    2735 00006cb0     1fc2          btst    1,a2
    2736 00006cc0     ca05          jrz     gopno_player2
    2737 00006cd0     1820          movk    1,a0                    ;player 2
    2738 00006ce0     0d5f          calla   get_start_down
         00006cf0 00006e10' 
    2739 00006d10     5401          or      a0,a1
    2740 00006d20           gopno_player2
    2741                    
    2742 00006d20     4c20          move    a1,a0
    2743 00006d30     0960          rets
    2744                    
    2745                    *****************************************************************************
    2746                    *
    2747                    * RETURN:       a0 = start bit
    2748                    *-----------------------------------------------------------------------------
    2749                    
    2750 00006d40            SUBR   get_start_cur
    2751                    
    2752 00006d40     2480          sll     4,a0                    ;x 16 bits
    2753 00006d50     0b20          addi    start_offs,a0
         00006d60 00006ee0' 
    2754 00006d80     8400          move    *a0,a0
    2755 00006d90     0b20          addi    switches_cur,a0
         00006da0 00000000! 
    2756 00006dc0     8400          move    *a0,a0
    2757 00006dd0     0b80          andi    1,a0
         00006de0 fffffffe  
    2758 00006e00     0960          rets
    2759                    
    2760                    *****************************************************************************
    2761                    *
    2762                    * RETURN:       a0 = start bit
    2763                    *-----------------------------------------------------------------------------
    2764                    
    2765 00006e10            SUBR   get_start_down
    2766                    
    2767 00006e10     2480          sll     4,a0                    ;x 16 bits
    2768 00006e20     0b20          addi    start_offs,a0
         00006e30 00006ee0' 
    2769 00006e50     8400          move    *a0,a0
    2770 00006e60     0b20          addi    switches_down,a0
         00006e70 00000000! 
    2771 00006e90     8400          move    *a0,a0
    2772 00006ea0     0b80          andi    1,a0
         00006eb0 fffffffe  
    2773 00006ed0     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   57

    2774                    
    2775                    
    2776 00006ee0     0012  start_offs      .word   12h,15h
    2777                    
    2778                    *****************************************************************************
    2779                    *
    2780                    * RETURN:       a0 = joy switch bits
    2781                    *-----------------------------------------------------------------------------
    2782                    
    2783 00006f00             SUBR  get_all_sticks_cur
    2784                    
    2785 00006f00     5621          clr     a1
    2786                    
    2787 00006f10     05a2          move    @PSTATUS2,a2
         00006f20 00000000! 
    2788                    
    2789 00006f40     1fe2          btst    0,a2
    2790 00006f50     ca05          jrz     pglno_player1
    2791 00006f60     5600          clr     a0                      ;player 1
    2792 00006f70     0d5f          calla   get_stick_val_cur
         00006f80 00000000! 
    2793 00006fa0     5401          or      a0,a1
    2794 00006fb0           pglno_player1
    2795                    
    2796 00006fb0     1fc2          btst    1,a2
    2797 00006fc0     ca05          jrz     pglno_player2
    2798 00006fd0     1820          movk    1,a0                    ;player 2
    2799 00006fe0     0d5f          calla   get_stick_val_cur
         00006ff0 00000000! 
    2800 00007010     5401          or      a0,a1
    2801 00007020           pglno_player2
    2802                    
    2803 00007020     4c20          move    a1,a0
    2804 00007030     0960          rets
    2805                    
    2806                    
    2807                    *****************************************************************************
    2808                    *
    2809                    * RETURN:       a0 = joy switch bits
    2810                    *-----------------------------------------------------------------------------
    2811                    
    2812 00007040             SUBR  get_all_sticks_cur2
    2813                    
    2814 00007040     5621          clr     a1
    2815                    
    2816 00007050     5600          clr     a0                      ;player 1
    2817 00007060     0d5f          calla   get_stick_val_cur
         00007070 00000000! 
    2818 00007090     5401          or      a0,a1
    2819                    
    2820 000070a0     1820          movk    1,a0                    ;player 2
    2821 000070b0     0d5f          calla   get_stick_val_cur
         000070c0 00000000! 
    2822 000070e0     5401          or      a0,a1
    2823                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   58

    2824 000070f0     4c20          move    a1,a0
    2825 00007100     0960          rets
    2826                    
    2827                    
    2828                    *****************************************************************************
    2829                    *
    2830                    * RETURN:       a0 = joy switch bits
    2831                    *-----------------------------------------------------------------------------
    2832                    
    2833 00007110             SUBR  get_all_sticks_down
    2834                    
    2835 00007110     5621          clr     a1
    2836                    
    2837 00007120     05a2          move    @PSTATUS2,a2
         00007130 00000000! 
    2838                    
    2839 00007150     1fe2          btst    0,a2
    2840 00007160     ca05          jrz     ifmno_player1
    2841 00007170     5600          clr     a0                      ;player 1
    2842 00007180     0d5f          calla   get_stick_val_down
         00007190 00000000! 
    2843 000071b0     5401          or      a0,a1
    2844 000071c0           ifmno_player1
    2845                    
    2846 000071c0     1fc2          btst    1,a2
    2847 000071d0     ca05          jrz     ifmno_player2
    2848 000071e0     1820          movk    1,a0                    ;player 2
    2849 000071f0     0d5f          calla   get_stick_val_down
         00007200 00000000! 
    2850 00007220     5401          or      a0,a1
    2851 00007230           ifmno_player2
    2852                    
    2853 00007230     4c20          move    a1,a0
    2854 00007240     0960          rets
    2855                    
    2856                    
    2857                    *****************************************************************************
    2858                    *
    2859                    * RETURN:       a0 = joy switch bits
    2860                    *-----------------------------------------------------------------------------
    2861                    
    2862 00007250             SUBR  get_all_sticks_down2
    2863                    
    2864 00007250     5621          clr     a1
    2865                    
    2866 00007260     5600          clr     a0                      ;player 1
    2867 00007270     0d5f          calla   get_stick_val_down
         00007280 00000000! 
    2868 000072a0     5401          or      a0,a1
    2869                    
    2870 000072b0     1820          movk    1,a0
    2871 000072c0     0d5f          calla   get_stick_val_down      ;player 2
         000072d0 00000000! 
    2872 000072f0     5401          or      a0,a1
    2873                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   59

    2874 00007300     4c20          move    a1,a0
    2875                    
    2876 00007310     0960          rets
    2877                    
    2878                    
    2879                    *****************************************************************************
    2880                    *
    2881                    * RETURN:       a0 = joy switch bits
    2882                    *-----------------------------------------------------------------------------
    2883                    
    2884 00007320             SUBR  get_all_buttons_cur
    2885                    
    2886 00007320     5621          clr     a1
    2887                    
    2888 00007330     05a2          move    @PSTATUS2,a2
         00007340 00000000! 
    2889                    
    2890 00007360     1fe2          btst    0,a2
    2891 00007370     ca05          jrz     yoqno_player1
    2892 00007380     5600          clr     a0                      ;player 1
    2893 00007390     0d5f          calla   get_but_val_cur
         000073a0 00000000! 
    2894 000073c0     5401          or      a0,a1
    2895 000073d0           yoqno_player1
    2896                    
    2897 000073d0     1fc2          btst    1,a2
    2898 000073e0     ca05          jrz     yoqno_player2
    2899 000073f0     1820          movk    1,a0                    ;player 2
    2900 00007400     0d5f          calla   get_but_val_cur
         00007410 00000000! 
    2901 00007430     5401          or      a0,a1
    2902 00007440           yoqno_player2
    2903                    
    2904 00007440     4c20          move    a1,a0
    2905 00007450     0960          rets
    2906                    
    2907                    
    2908                    *****************************************************************************
    2909                    *
    2910                    * RETURN:       a0 = joy switch bits
    2911                    *-----------------------------------------------------------------------------
    2912                    
    2913 00007460             SUBR  get_all_buttons_cur2
    2914                    
    2915 00007460     5621          clr     a1
    2916 00007470     5600          clr     a0                      ;player 1
    2917 00007480     0d5f          calla   get_but_val_cur
         00007490 00000000! 
    2918 000074b0     5401          or      a0,a1
    2919 000074c0     1820          movk    1,a0                    ;player 2
    2920 000074d0     0d5f          calla   get_but_val_cur
         000074e0 00000000! 
    2921 00007500     5401          or      a0,a1
    2922 00007510     4c20          move    a1,a0
    2923 00007520     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   60

    2924                    
    2925                    
    2926                    *****************************************************************************
    2927                    *
    2928                    * RETURN:       a0 = joy switch bits
    2929                    *-----------------------------------------------------------------------------
    2930                    
    2931 00007530            SUBR   get_all_buttons_down
    2932                    
    2933 00007530     5621          clr     a1
    2934                    
    2935 00007540     05a2          move    @PSTATUS2,a2
         00007550 00000000! 
    2936                    
    2937 00007570     1fe2          btst    0,a2
    2938 00007580     ca05          jrz     uxjno_player1
    2939 00007590     5600          clr     a0                      ;player 1
    2940 000075a0     0d5f          calla   get_but_val_down
         000075b0 00000000! 
    2941 000075d0     5401          or      a0,a1
    2942 000075e0           uxjno_player1
    2943                    
    2944 000075e0     1fc2          btst    1,a2
    2945 000075f0     ca05          jrz     uxjno_player2
    2946 00007600     1820          movk    1,a0                    ;player 2
    2947 00007610     0d5f          calla   get_but_val_down
         00007620 00000000! 
    2948 00007640     5401          or      a0,a1
    2949 00007650           uxjno_player2
    2950                    
    2951 00007650     4c20          move    a1,a0
    2952 00007660     0960          rets
    2953                    
    2954                    
    2955                    *****************************************************************************
    2956                    *
    2957                    * RETURN:       a0 = joy switch bits
    2958                    *-----------------------------------------------------------------------------
    2959                    
    2960 00007670            SUBR   get_all_buttons_down2
    2961                    
    2962 00007670     5621          clr     a1
    2963 00007680     5600          clr     a0                      ;player 1
    2964 00007690     0d5f          calla   get_but_val_down
         000076a0 00000000! 
    2965 000076c0     5401          or      a0,a1
    2966 000076d0     1820          movk    1,a0                    ;player 2
    2967 000076e0     0d5f          calla   get_but_val_down
         000076f0 00000000! 
    2968 00007710     5401          or      a0,a1
    2969 00007720     4c20          move    a1,a0
    2970 00007730     0960          rets
    2971                    
    2972                    *****************************************************************************
    2973                    * Get random # with mask
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   61

    2974                    * A0=Mask
    2975                    * 0A0H=Rnd # (Pass CC)
    2976                    * Trashes scratch
    2977                    
    2978 00007740            SUBRP  rnd
    2979                    
    2980 00007740     07a1          move    @RAND,a1,L
         00007750 00000000- 
    2981 00007770     6821          rl      a1,a1
    2982 00007780     05ae          move    @HCOUNT,a14
         00007790 c00001c0  
    2983 000077b0     69c1          rl      a14,a1
    2984 000077c0     41e1          add     sp,a1
    2985 000077d0     0781          move    a1,@RAND,L
         000077e0 00000000- 
    2986                    
    2987 00007800     5020          and     a1,a0
    2988 00007810     0960          rets
    2989                    
    2990                    
    2991                    *****************************************************************************
    2992                    * Quickly produce a random # in range 0-X
    2993                    * A0=X
    2994                    * 0A0H=Random # (0 to A0) (No CC)
    2995                    * Trashes scratch
    2996                    
    2997 00007820            SUBR   rndrng0
    2998                    
    2999 00007820     07a1          move    @RAND,a1,L
         00007830 00000000- 
    3000 00007850     6821          rl      a1,a1
    3001 00007860     05ae          move    @HCOUNT,a14
         00007870 c00001c0  
    3002 00007890     69c1          rl      a14,a1
    3003 000078a0     41e1          add     sp,a1
    3004 000078b0     0781          move    a1,@RAND,L
         000078c0 00000000- 
    3005                    
    3006 000078e0     1020          addk    1,a0
    3007 000078f0     5e20          mpyu    a1,a0           ;Condition codes not valid!
    3008                    
    3009 00007900     0960          rets
    3010                    
    3011                    
    3012                            .if     DEBUG
    3013                            
    3014                    *****************************************************************************
    3015                    
    3016                     SUBR   tint_on
    3017                    
    3018                            PUSH    a0,a1
    3019                            movi    07fffh,a0       ;all bits on (5 bits RGB (white))
    3020                            movi    COLRAM,a1       ;base address of colour ram
    3021                            move    a0,*a1          ;restore colour
    3022                            PULL    a0,a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   62

    3023                            rets
    3024                    
    3025                    *****************************************************************************
    3026                    
    3027                     SUBR   tint_off
    3028                    
    3029                            PUSH    a0,a1
    3030                            clr     a0              ;all bits off (black)
    3031                            movi    8<<10+8<<5+8,a0 ;grey
    3032                            movi    COLRAM,a1       ;base address of colour ram
    3033                            move    a0,*a1          ;restore colour
    3034                            PULL    a0,a1
    3035                            rets
    3036                    
    3037                            .endif
    3038                    
    3039                    
    3040                    *****************************************************************************
    3041                    * Change an objects image (Doesn't check VFLIP)
    3042                    * A0=*New image
    3043                    * A1=New flip flags & const
    3044                    * A8=*Obj
    3045                    * Trashes scratch
    3046                    
    3047 00007910            SUBR   civanic
    3048                    
    3049 00007910     b501          move    *a8(OCTRL),a1,W
         00007920     00f0  
    3050                    
    3051 00007930            SUBR   civani
    3052                    
    3053 00007930     0b60          cmpi    ROM,a0
         00007940 f87fffff  
    3054 00007960     c817          jrlo    payanierr
    3055                    
    3056                            ;set new anim points
    3057 00007970     b808          move    *a0(IANIOFFX),*a8(ODXOFF),W
         00007980     0020  
         00007990     0220  
    3058 000079a0     b808          move    *a0(IANIOFFY),*a8(ODYOFF),W
         000079b0     0030  
         000079c0     0230  
    3059                    
    3060 000079d0     b208          move    a0,*a8(OIMG),L
         000079e0     0170  
    3061 000079f0     ba08          move    *a0(0),*a8(OSIZE),L
         00007a00     0000  
         00007a10     0130  
    3062 00007a20     ba08          move    *a0(ISAG),*a8(OSAG),L
         00007a30     0040  
         00007a40     0110  
    3063                    
    3064 00007a50     0545          setf    5,0,0
    3065 00007a60     b808          move    *a0(ICTRL+7),*a8(OCTRL+7) ;Write 5 z comp bits
         00007a70     0067  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 12:08:38 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

utility subroutines                                                  PAGE   63

         00007a80     00f7  
    3066 00007a90     0546          setf    6,0,0
    3067 00007aa0     b028          move    a1,*a8(OCTRL)           ;Write 6 low bits
         00007ab0     00f0  
    3068 00007ac0     0570          setf    16,1,0
    3069                    
    3070 00007ad0     0960  payx    rets
    3071                    
    3072 00007ae0           payanierr 
    3073                            .if     DEBUG
    3074                            LOCKUP
    3075                            eint
    3076                            .else
    3077 00007ae0                   CALLERR 2,2
    3078                            .endif
    3079 00007b90     c0f3          jruc    payx
    3080                    
    3081                    
    3082                    ******************************************************************************
    3083                    
    3084                            .end

 No Errors,  No Warnings
