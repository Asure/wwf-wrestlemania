**************************************************************
*
* Software:		Michael J. Lynch
* Initiated:		5/02/95
*
* COPYRIGHT (C) 1992 WILLIAMS ELECTRONICS GAMES, INC.
*
**************************************************************

	.file	"finiseq.asm"
	.title	"Finish moves sequences"
	.width	132
	.option	b,d,l,t
	.mnolist


	.include	"macros.h"
	.include	"mproc.equ"		;Mproc equates
	.include	"sys.equ"
	.include	"game.equ"
	.include	"plyr.equ"
	.include	"anim.equ"
	.include	"sound.h"
	.include	"ring.equ"
	.include	"display.equ"
	.include	"ring.equ"

	.include	"takerimg.h"
	.include	"bretimg.h"
	.include	"doinkimg.h"
	.include	"yokoimg.h"
	.include	"razorimg.h"
	.include	"leximg.h"
	.include	"shawnimg.h"
	.include	"bamimg.h"

	.include	"special.equ"
	.include	"damage.equ"
	.include	"miscimg.glo"
	.INCLUDE	"SWEAT.EQU"

	.include	"finiseq.tbl"
	.include	"finiseq.glo"

	BSSX	close_the_door,16
	BSSX	close_the_floor,16
	BSSX	dead_wrestler,32
	BSSX	finish_completed,16
	BSSX	wres_mv_done,16
	BSSX	guy_in,16
	BSSX	guy_up,16

	.bss	pal_test,16*64

	.ref	KILL
	.ref	triple_sound
	.ref	change_anim1a
	.ref	DO_CROWD_CHEER
	.ref	UNDNEG_P
	.ref	RNDRNG0
	.ref	do_roll

	.ref	RNDRNGS



******************************************************************************
*                                                                            *
* Bret Hart Finish Move Sequences                                            *
*                                                                            *
******************************************************************************

	.if NUM_BRET_FINISHES
******************************************************************
*
* Bret Hart finish move dcbe1

 SUBR	hrt_finish1_move
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP	;uninterruptable
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	.word	ANI_SETFACING		;ANI_XFLIP <- not primary anim
	.word	ANI_SET_WRESTLER_XFLIP

	.word	ANI_SETMODE,MODE_NORMAL
	.word	ANI_END

	.endif

	.if NUM_BRET_FINISHES > 1
******************************************************************
*
* Bret Hart finish move ovig2

 SUBR	hrt_finish2_move
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP	;uninterruptable
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	.word	ANI_SETFACING		;ANI_XFLIP <- not primary anim
	.word	ANI_SET_WRESTLER_XFLIP

	.word	ANI_SETMODE,MODE_NORMAL
	.word	ANI_END

	.endif





******************************************************************************
*                                                                            *
* Bam Bam Bigelow Finish Move Sequences                                      *
*                                                                            *
******************************************************************************

	.if NUM_BAM_FINISHES
******************************************************************
*
* Bam Bam finish move nryh1

 SUBR	bam_finish1_move
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP	;uninterruptable
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	.word	ANI_SETFACING		;ANI_XFLIP <- not primary anim
	.word	ANI_SET_WRESTLER_XFLIP

	.word	ANI_SETMODE,MODE_NORMAL
	.word	ANI_END

	.endif

	.if NUM_BAM_FINISHES > 1
******************************************************************
*
* Bam Bam finish move dcmt2

 SUBR	bam_finish2_move
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP	;uninterruptable
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	.word	ANI_SETFACING		;ANI_XFLIP <- not primary anim
	.word	ANI_SET_WRESTLER_XFLIP

	.word	ANI_SETMODE,MODE_NORMAL
	.word	ANI_END

	.endif





******************************************************************************
*                                                                            *
* Yokozuna Finish Move Sequences                                             *
*                                                                            *
******************************************************************************

	.if NUM_YOKO_FINISHES
******************************************************************
*
* Yokozuna finish move naak1

 SUBR	yok_finish1_move
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP	;uninterruptable
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	;let's see if this works then. 
*	WLWWWW  ANI_CREATEPROC,yok_falling_light,0,0,0,0    	;ANI_CREATEPROC wants a SUBRP which does stuff and then dies?
	WLWWWW  ANI_CREATEPROC,yok_falling_cab,0,0,0,0    	;ANI_CREATEPROC wants a SUBRP which does stuff and then dies?

	WL	3,Y1TT5Z+FR2		;victory pose
	WL	3,Y1TT5Z+FR3

	WL	7,Y5RV5A+FR1
	WL	7,Y5RV5A+FR2
	WL	7,Y5RV5A+FR3
	WL	7,Y5RV5A+FR4
	WL	7,Y5RV5A+FR5
	WL	7,Y5RV5A+FR6
	WL	7,Y5RV5A+FR7
	WL	7,Y5RV5A+FR8
	WL	40,Y5RV5A+FR9
	WL	7,Y5RV5A+FR10
	WL	7,Y5RV5A+FR11


	.word	ANI_SET_RPTCOUNT,-4	;set count to rnd from 0 to 4
brgmlp0	
	WL	ANI_CODE,DO_CROWD_CHEER
	WL	55,Y5RV5A+FR12
	.word	ANI_DEC_RPTCOUNT
	WL	ANI_IF_RPTCOUNT,brgmlp0


	.endif

	.if NUM_YOKO_FINISHES > 1
******************************************************************
*
* Yokozuna finish move ahuv2

 SUBR	yok_finish2_move
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP	;uninterruptable
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	.word	ANI_SETFACING		;ANI_XFLIP <- not primary anim
	.word	ANI_SET_WRESTLER_XFLIP

	.word	ANI_SETMODE,MODE_NORMAL
	.word	ANI_END

	.endif





******************************************************************************
*                                                                            *
* Doink The Clown Finish Move Sequences                                      *
*                                                                            *
******************************************************************************

	.if NUM_DOINK_FINISHES
******************************************************************
*
* Doink finish move qcgc1

 SUBR	dnk_finish1_move
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP	;uninterruptable
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	.word	ANI_SETFACING		;ANI_XFLIP <- not primary anim
	.word	ANI_SET_WRESTLER_XFLIP

	.word	ANI_SETMODE,MODE_NORMAL
	.word	ANI_END

	.endif

	.if NUM_DOINK_FINISHES > 1
******************************************************************
*
* Doink finish move obps2

 SUBR	dnk_finish2_move
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP	;uninterruptable
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	.word	ANI_SETFACING		;ANI_XFLIP <- not primary anim
	.word	ANI_SET_WRESTLER_XFLIP

	.word	ANI_SETMODE,MODE_NORMAL
	.word	ANI_END

	.endif






******************************************************************************
*                                                                            *
* Razor Ramon Finish Move Sequences                                          *
*                                                                            *
******************************************************************************

	.if NUM_RAZOR_FINISHES
******************************************************************
*
* Razor Ramon finish move srmn1

 SUBR	rzr_finish1_move
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP	;uninterruptable
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	.word	ANI_SETFACING		;ANI_XFLIP <- not primary anim
	.word	ANI_SET_WRESTLER_XFLIP

	.word	ANI_SETMODE,MODE_NORMAL
	.word	ANI_END

	.endif

	.if NUM_RAZOR_FINISHES > 1
******************************************************************
*
* Razor Ramon finish move qddc2

 SUBR	rzr_finish2_move
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP	;uninterruptable
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	.word	ANI_SETFACING		;ANI_XFLIP <- not primary anim
	.word	ANI_SET_WRESTLER_XFLIP

	.word	ANI_SETMODE,MODE_NORMAL
	.word	ANI_END

	.endif






******************************************************************************
*                                                                            *
* Lex Lugar Finish Move Sequences                                            *
*                                                                            *
******************************************************************************

	.if NUM_LEX_FINISHES
******************************************************************
*
* Lex Lugar finish move xlws1

 SUBR	lex_finish1_move
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP	;uninterruptable
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	.word	ANI_SETFACING		;ANI_XFLIP <- not primary anim
	.word	ANI_SET_WRESTLER_XFLIP

	.word	ANI_SETMODE,MODE_NORMAL
	.word	ANI_END

	.endif

	.if NUM_LEX_FINISHES > 1
******************************************************************
*
* Lex Lugar finish move jbhe2

 SUBR	lex_finish2_move
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP	;uninterruptable
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	.word	ANI_SETFACING		;ANI_XFLIP <- not primary anim
	.word	ANI_SET_WRESTLER_XFLIP

	.word	ANI_SETMODE,MODE_NORMAL
	.word	ANI_END

	.endif






******************************************************************************
*                                                                            *
* Undertaker Finish Move Sequences                                           *
*                                                                            *
******************************************************************************

	.if NUM_TAKER_FINISHES
	.endif
	.if NUM_TAKER_FINISHES > 1
******************************************************************
*
* Undertaker finish move naya2

 SUBR	und_finish2_move
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP	;uninterruptable
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	.word	ANI_SETFACING		;ANI_XFLIP <- not primary anim
	.word	ANI_SET_WRESTLER_XFLIP

	.word	ANI_SETMODE,MODE_NORMAL
	.word	ANI_END

	.endif






******************************************************************************
*                                                                            *
* Shawn Michaels Finish Move Sequences                                       *
*                                                                            *
******************************************************************************

	.if NUM_SHAWN_FINISHES
******************************************************************
*
* Shawn Michaels finish move rwcw1

 SUBR	shn_finish1_move
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP	;uninterruptable
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	.word	ANI_SETFACING		;ANI_XFLIP <- not primary anim
	.word	ANI_SET_WRESTLER_XFLIP

	.word	ANI_SETMODE,MODE_NORMAL
	.word	ANI_END

	.endif

	.if NUM_SHAWN_FINISHES > 1
******************************************************************
*
* Shawn Michaels finish move kavl2

 SUBR	shn_finish2_move
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP	;uninterruptable
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	.word	ANI_SETFACING		;ANI_XFLIP <- not primary anim
	.word	ANI_SET_WRESTLER_XFLIP

	.word	ANI_SETMODE,MODE_NORMAL
	.word	ANI_END

	.endif

******************************************************************************


;
; The wrestler being knocked into the coffin MUST start at a Z of
; greater than 1430h and end up at a Z of 1428h when in the coffin.
;

HOLE_XPOS	.equ	1250
HOLE_YPOS	.equ	197

;MAT_BACK_Z	.equ	((RING_TOP+20)|1000h)
MAT_BACK_Z	.equ	((RING_Z_CENTER+20)|1000h)
TMBSTN_Z	.equ	MAT_BACK_Z
MAT_FRONT_Z	.equ	MAT_BACK_Z+27
COF_BACK_Z	.equ	MAT_BACK_Z+28
COF_FRONT_Z	.equ	COF_BACK_Z+2
DOOR_CLOSE_Z	.equ	COF_FRONT_Z+2
WRES_Z		.equ	((COF_BACK_Z)&0fffh)
EXP_Z		.equ	MAT_FRONT_Z+1

COFFIN_VEL	.equ	4
NUM_PUFFS	.equ	25

********************************************************************
*
* Do little explosions and puffs of smoke above hole in ring
*

 SUBRP	lxskexp1_anim
	.long	SMOKE01
	.long	SMOKE02
	.long	SMOKE03
	.long	SMOKE04
	.long	SMOKE05
	.long	SMOKE06
	.long	SMOKE07
	.long	SMOKE08
	.long	SMOKE09
	.long	SMOKE10
	.long	0

 SUBRP	lxskexp2_anim
	.long	SMOKEB01
	.long	SMOKEB02
	.long	SMOKEB03
	.long	SMOKEB04
	.long	SMOKEB05
	.long	SMOKEB06
	.long	SMOKEB07
	.long	SMOKEB08
	.long	SMOKEB09
	.long	SMOKEB10
	.long	0

 SUBRP	lxskltl_puff
	.long	lxskexp1_anim
	.long	lxskexp2_anim



 SUBRP	ltl_exp

	movk	10,a0		; Sleep a random amount of time before
	calla	RNDRNG0		; we start the little puff of smoke
	addk	1,a0
	calla	PRCSLP

	movi	80,a0		; Get a random X position above the hole
	calla	RNDRNG0		; To fire off the puff of smoke
	subi	40,a0
	movi	HOLE_XPOS,a14
	add	a14,a0		; Translate to hole position
	move	a0,*a13(256)

	movi	30,a0		; Get a random Y position above the hole
	calla	RNDRNG0		; To fire off the puff of smoke
	subi	25,a0
	addi	HOLE_YPOS,a0	; Translate to hole position
	move	a0,*a13(256+16)	

	movi	10,a0		; Get a random Z position
	calla	RNDRNG0
	addi	EXP_Z,a0	; Translate to hole Z position (in front of coffin)
	move	a0,*a13(256+32)

	movi	7,a0		; Get a random velocity to use
	calla	RNDRNG0
	addk	2,a0
	move	a0,*a13(256+48)

	movk	1,a0		; Get a random smoke puff to use
	calla	RNDRNG0
	sll	5,a0
	movi	lxskltl_puff,a9
	add	a0,a9
	move	*a9,a9,L	; Pointer to puff animation

	move	*a13(256),a0	; Get X position
	sll	16,a0
	move	*a13(256+16),a1	; Get Y position
	sll	16,a1
	move	*a13(256+32),a3	; Get Z position
	move	*a9+,a2,L	; Get first image
	movi	DMAWNZ|M_3D,a4	; Flags
	movi	CLSFRWK,a5	; This is the class
	clr	a6		; No velocities
	clr	a7

	calla	BEGINOBJ	; Make the first one

; Now make an explosion sound
	movi	1252,a3
	calla	SNDSND

lxskpuff_lp
	SLEEPK	3		; Let us see it
	move	*a9+,a0,L	; Get next image
	jrz	lxskpuff_done	; br = no more images
	move	*a8(OCTRL),a1	; Change the image
	calla	obj_aniq
	move	*a8(OYPOS),a14	; Get current Y Position
	move	*a13(256+48),a1	; Get the velocity
	sub	a1,a14		; Add it
	move	a14,*a8(OYPOS)	; Write it back
	jruc	lxskpuff_lp	; Go do next image in sequence

lxskpuff_done
	calla	DELOBJA8	; Kill off the object

	DIE


********************************************************************
*
* Do Undertakers Coffin rising from below
*

 SUBRP	aqtqmat_anim
	.long	MATCOF01
	.long	MATCOF02
	.long	MATCOF03
	.long	MATCOF04
 SUBRP	aqtqmat_anim2
	.long	0

 SUBRP	aqtqcof_anim1
	.long	COFFIN02
	.long	COFFIN03
	.long	COFFIN04
	.long	COFFIN05
 SUBRP	aqtqcof_anim2
	.long	0

 SUBRP	aqtqtstone_anim
	.long	TMBSTN01
 SUBRP	aqtqtstone_test
	.long	TMBSTN02
	.long	TMBSTN03
	.long	TMBSTN04
	.long	TMBSTN05
	.long	TMBSTN06
	.long	TMBSTN07
	.long	TMBSTN08
	.long	0

 SUBR	und_coffin_up

	clr	a14			; Set up the state machine
	move	a14,@close_the_door
	move	a14,@close_the_floor

	SLEEP	TSEC*2

	movi	aqtqmat_anim,a9		; Start up the mat animation

	movi	[HOLE_XPOS,0],a0
	movi	DMAWNZ|M_3D,a4
	movi	[HOLE_YPOS,0],a1
	move	*a9+,a2,L
	movi	MAT_BACK_Z,a3
	movi	CLSFRWK,a5
	clr	a6
	clr	a7
	calla	BEGINOBJ

aqtqman_loop
	SLEEPK	3			; Display the frame
	move	*a9+,a0,L		; Are we done ?
	jrz	aqtqdo_open_mat		; br = yes
	move	*a8(OCTRL),a1		; Change to next frame
	calla	obj_aniq
	jruc	aqtqman_loop

aqtqdo_open_mat
	move	a8,a11			; Save the the object pointer
	move	*a8(OCTRL),a1		; Change the image to the front piece
	movi	MATCOF05B,a0
	calla	obj_aniq
	
	movi	[HOLE_XPOS,0],a0	; Create the front piece
	movi	DMAWNZ|M_3D,a4
	movi	[HOLE_YPOS,0],a1
	movi	MATCOF05A,a2,L
	movi	MAT_FRONT_Z,a3
	movi	CLSFRWK,a5
	clr	a6
	clr	a7

	calla	BEGINOBJ
	SLEEPK	2

; Now make some little explosions above the hole
	movi	NUM_PUFFS,a9   		; Make 25 little puffs of smoke
aqtqexp_clp
	CREATE0	ltl_exp
	dsjs	a9,aqtqexp_clp


; Now start the coffin rising up
	CREATE0	do_up_coffin		; Make the coffin come up through
					; the floor

aqtqwait_fclose
	SLEEPK	1			; Wait to be told to close the floor
	move	@close_the_floor,a14
	jrz	aqtqwait_fclose

	SLEEPK	15

	calla	DELOBJA8		; Delete the back piece
	movi	aqtqmat_anim2,a9		; Set up for close animation
	move	a11,a8			; Get saved object pointer
aqtqfc_loop
	move	*-a9,a0,L		; Change the image
	move	*a8(OCTRL),a1
	calla	obj_aniq
	SLEEPK	3
	cmpi	aqtqmat_anim,a9		; Are we done ?
	jrnz	aqtqfc_loop		; br = no
	calla	DELOBJA8		; Get rid of this mat piece

	SLEEPK	3

	movk	2,a14
	move	a14,@close_the_floor	; Let whoever know floor is closed


; Now Bring up the tombstone

	movi	0fh,a0
	calla	triple_sound

;	movi	aqtqtstone_anim,a9		; Set up to bring up the tombstone
	movi	aqtqtstone_test,a9		; Set up to bring up the tombstone

	movi	[HOLE_XPOS,0],a0	; And create the first object
	movi	DMAWNZ|M_3D,a4
	movi	[HOLE_YPOS-18,0],a1
	move	*a9+,a2,L
	movi	TMBSTN_Z,a3
	movi	CLSFRWK,a5
	clr	a6
	clr	a7

	push	a9
	calla	BEGINOBJ
	pull	a9
	SLEEPK	4			; Let's see it

aqtqstn_up
	move	*a9+,a0,L		; Get the next image
	jrz	aqtqstn_done		; br = no more images
	move	*a8(OCTRL),a1
	calla	obj_aniq		; Change the image
	SLEEPK	4			; Let's see it
	jruc	aqtqstn_up			; Do next image

aqtqstn_done
	movk	3,a14
	move	a14,@close_the_floor	; Let whoever know tombstone is up
	move	a14,@finish_completed

	DIE



 SUBRP	do_up_coffin

	movi	aqtqcof_anim1,a9

	movi	[HOLE_XPOS+7,0],a0	; Create the Coffin
	movi	DMAWNZ|M_3D,a4		
	movi	[HOLE_YPOS+108,0],a1
	move	a1,a10
	movi	COFFIN01,a2
	movi	COF_BACK_Z,a3		; Make it in front of mat pieces
	movi	CLSFRWK,a5
	clr	a6
	clr	a7

	calla	BEGINOBJ

	move	a8,*a13(256),L		; Save the object pointer

; Make some sound while moving up
	movi	014h,a0
	calla	triple_sound

	movk	COFFIN_VEL,a14		; Start it 4 pixels high
	move	a14,*a8(OSIZEY)

aqtqmv_up_lp
	SLEEPK	1
	move	*a8(OSIZEY),a14		; Get the size of the object
	cmpi	136,a14			; Are we at full size yet ?
	jrz	aqtqopen_lp		; br = yes
	addk	COFFIN_VEL,a14 		; Make it 4 pixels larger
	move	a14,*a8(OSIZEY)
	move	*a8(OYPOS),a14		; Get its current position
	subk	COFFIN_VEL,a14		; Move it up 4 pixels
	move	a14,*a8(OYPOS)		; Write it back
	jruc	aqtqmv_up_lp		; Go display it

aqtqopen_lp
	move	*a9+,a0,L		; Now open the coffin door
	cmpi	COFFIN05,a0		; Is the door open ?
	jrz	aqtqopen_done		; br = yes
	move	*a8(OCTRL),a1
	calla	obj_aniq
	SLEEPK	3
	jruc	aqtqopen_lp

aqtqopen_done
	movk	1,a14
	move	a14,@close_the_door

	move	*a8(OCTRL),a1		; Keep the last piece
	calla	obj_aniq
	move	*a8(OYPOS),a14		; Get the current position
	movi	DMAWNZ|M_3D,a4
	movi	[HOLE_XPOS+7,0],a0	; And create the front piece
	move	a14,a1
	sll	16,a1
	movi	COFFIN6A,a2
	movi	COF_FRONT_Z,a3		; Make sure its in front of back piece
	movi	CLSFRWK,a5
	clr	a6
	clr	a7

	calla	BEGINOBJ

	move	a8,*a13(256+32),L	; Save away it's object pointer

	move	*a13(256),a9,L		; Back piece object pointer
	movi	HOLE_XPOS+7,a14
	move	a14,*a13(256+64)
	move	*a9(OYPOS),*a13(256+80)	; Save the Y position
	move	*a13(256+32),a10,L	; Front piece object pointer
	CREATE0	hover_coffin
	move	a0,*a13(256+96),L	; Save the process pointer

aqtqwait_to_close
	SLEEPK	3			; Now wait until told to close the
	move	@close_the_door,a14	; coffin door
	cmpi	2,a14
	jrlt	aqtqwait_to_close

	move	*a13(256+96),a0,L	; Get the hover craft process pointer
	calla	KILL			; And kill him off

	move	*a13(256),a8,L		; Get the back piece object pointer
	movi	aqtqcof_anim2,a9		; Now close the door
aqtqclose_loop
	move	*-a9,a0,L		; Pointer to image header
	cmpi	COFFIN02,a0		; Are we at this image
	jrnz	aqtqno_z_adj		; br = no
	move	*a13(256+32),a8,L	; Get front piece object pointer
	push	a0
	calla	DELOBJA8		; Get rid of front piece
	pull	a0
	move	*a13(256),a8,L		; Get back piece object pointer
	movi	DOOR_CLOSE_Z,a14	; Change its Z to in front of wrestler
	move	a14,*a8(OZPOS)
aqtqno_z_adj
	move	*a8(OCTRL),a1		; Change the image
	calla	obj_aniq
	SLEEPK	1			; Lets see it
	cmpi	aqtqcof_anim1,a9		; Are we done closing the door ?
	jrne	aqtqclose_loop		; br = no

	movi	COFFIN01,a0		; Change the image to the closed
	move	*a8(OCTRL),a1		; coffin image
	calla	obj_aniq

	movk	3,a14
	move	a14,@close_the_door

; Make a slamming door sound
	movi	03dh,a0
	calla	triple_sound

; Shake the coffin around when the door slams shut
	movk	16,a9			; Number of shakes
aqtqshk_lp
	movk	4,a0
	calla	RNDRNG0
	subk	2,a0
	move	*a13(256+64),a14
	add	a0,a14
	move	a14,*a8(OXPOS)
	movk	2,a0
	calla	RNDRNG0
	subk	2,a0
	move	*a13(256+80),a14
	add	a0,a14
	move	a14,*a8(OYPOS)
	SLEEPK	1
	dsjs	a9,aqtqshk_lp

	move	*a13(256+64),*a8(OXPOS)
	move	*a13(256+80),*a8(OYPOS)

; Now make some little explosions above the hole
	movi	NUM_PUFFS,a9   		; Make 25 little puffs of smoke
exp_clp
	CREATE0	ltl_exp
	dsjs	a9,exp_clp

; Make some sound while moving down
	movi	011h,a0
	calla	triple_sound

	movi	136,a14			; Set starting size of image
	move	a14,*a8(OSIZEY)
aqtqmv_dn_lp

	CREATE0	ltl_exp
	SLEEPK	1			; Lets see it
	move	*a8(OSIZEY),a14		; Get current size
	cmpi	1,a14			; Are we at <= 1 pixel
	jrle	aqtqmv_dn_done		; br = yes
	subk	COFFIN_VEL,a14		
	move	a14,*a8(OSIZEY)
	move	*a8(OYPOS),a14		; Get the current position
	addk	COFFIN_VEL,a14
	move	a14,*a8(OYPOS)		; And write it back
	jruc	aqtqmv_dn_lp
aqtqmv_dn_done
	calla	DELOBJA8		; Get rid of the coffin
	movk	1,a14			; Tell the floor to close up
	move	a14,@close_the_floor

	DIE				; We done


*************************************************************
*
* Hover coffin - makes the coffin look like it's hovering
* This guy runs until killed by process that creates it
*
* a9 =  *object 1
* a10 = *object 2

 SUBRP	hover_coffin
	move	*a10(OYPOS),a11		; Get start Y position
nauireset_a8
	movk	1,a8			; Start with move down
nauido_agin
	SLEEPK	7
	move	*a9(OYPOS),a14		; Get current Y position
	add	a8,a14			; Add in delta
	move	a14,*a9(OYPOS)		; Write it back
	move	*a10(OYPOS),a14		; Get current Y position
	add	a8,a14			; Add it delta
	move	a14,*a10(OYPOS)		; Write it back
	sub	a11,a14			; Subtract current from start
	abs	a14			; Make sure its positive
	cmpi	2,a14			; <= 3
	jrle	nauido_agin		; br = yes
	move	a8,a8			; a8 negative ?
	jrn	nauireset_a8		; br = yes
	movk	1,a8			; set to -1
	not	a8
	CREATE0	ltl_exp
	CREATE0	ltl_exp
	CREATE0	ltl_exp
	CREATE0	ltl_exp
	CREATE0	ltl_exp
	CREATE0	ltl_exp
	CREATE0	ltl_exp
	CREATE0	ltl_exp
	jruc	nauido_agin		; keep a bouncin

	DIE

*****************************************************************************
*
* Closes the coffin door
*
 SUBRP	close_door
	movk	2,a14
	move	a14,@close_the_door
	rets

****************************************************************************
*
* Checks to see if coffin door is open
*
 SUBRP	is_door_open
	move	*a13(ANIMODE),a1
	andni	MODE_STATUS,a1

	move	@close_the_door,a14
	jrz	dwufdoor_not_open

	ori	MODE_STATUS,a1
dwufdoor_not_open
	move	a1,*a13(ANIMODE)
	rets
	
****************************************************************************
*
* Checks to see if the dead guy is ready to be stuffed into the coffin
*
 SUBRP	is_guy_up
	move	*a13(ANIMODE),a1
	andni	MODE_STATUS,a1

	move	@guy_up,a14
	jrz	pshwguy_not_up

	ori	MODE_STATUS,a1
pshwguy_not_up
	move	a1,*a13(ANIMODE)
	rets

****************************************************************************
*
* Checks to see if the dead guy is in the coffin
*
 SUBRP	is_he_in
	move	*a13(ANIMODE),a1
	andni	MODE_STATUS,a1

	move	@guy_in,a14
	jrz	pwfsguy_not_in

	ori	MODE_STATUS,a1
pwfsguy_not_in
	move	a1,*a13(ANIMODE)
	rets

****************************************************************************
*
* Makes a wrestler disappear after being shut into the coffin
*
 SUBRP	disappear_wrestler
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY|MODE_NOSHADOW|MODE_INVISIBLE
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h
	.word	ANI_SETPLYRMODE,MODE_DEAD
	.word	ANI_ROT


****************************************************************************
*
* Make wrestler disappear - Monitors the state of the coffin door and makes
* the dead wrestler invisible when the door is closed.
*
 SUBRP	make_wres_disappear
	move	*a13(ANIMODE),a1
	andni	MODE_STATUS,a1

	move	@close_the_door,a14
	cmpi	3,a14
	jrnz	uccfnot_time

	PUSH	a1,a13
	move	@dead_wrestler,a13,L
	movi	disappear_wrestler,a0
	calla	change_anim1a
	PULL	a1,a13

	ori	MODE_STATUS,a1
uccfnot_time
	move	a1,*a13(ANIMODE)
	rets


*****************************************************************************
*
* Set the flag to tell that the guy is ready to be knocked into the coffin
*
 SUBRP	guy_is_up
	movk	1,a14
	move	a14,@guy_up
	rets

*****************************************************************************
*
* Adjust facing checks the wrestlers facing direction.
*
 SUBRP	adjust_facing
	move	*a13(FACING_DIR),a14
	ori	(MOVE_LEFT|MOVE_DOWN),a14
	andni	(MOVE_RIGHT|MOVE_UP),a14
	move	a14,*a13(FACING_DIR)
	move	*a13(OBJ_CONTROL),a14
	ori	M_FLIPH,a14
	move	a14,*a13(OBJ_CONTROL)
	rets

*****************************************************************************
*
* Adjust taker facing checks takers facing direction.
*
 SUBRP	adjust_taker_facing
	move	*a13(FACING_DIR),a14
	andni	(MOVE_LEFT|MOVE_DOWN),a14
	ori	(MOVE_RIGHT|MOVE_UP),a14
	move	a14,*a13(FACING_DIR)
	move	*a13(OBJ_CONTROL),a14
	andni	M_FLIPH,a14
	move	a14,*a13(OBJ_CONTROL)
	rets

*****************************************************************************
*
* Check roll checks to see if the dead guy nees to be rolled down and does it
* if need be.
*
 SUBRP	check_roll
	move	*a13(ANIMODE),a0
	andni	MODE_STATUS,a0
	move	*a13(OBJ_ZPOSINT),a1
	cmpi	(RING_Z_CENTER+20),a1
	jrgt	jihcroll_done
	move	*a13(STICK_VAL_CUR),a1
	ori	MOVE_DOWN,a1
	move	a1,*a13(STICK_VAL_CUR)
	PUSH	a0
	calla	do_roll
	PULL	a0
	ori	MODE_STATUS,a0
jihcroll_done
	move	a0,*a13(ANIMODE)
	rets

*****************************************************************************
*
* Stand wrestler changes the dead wrestlers animation to a standing position
*
 SUBRP	rzr_stand_anim
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	; First roll the guy down to the bottom of the ring if need be
drqqrl_loop
	.word	ANI_PAUSE,1
	WL	ANI_CODE,check_roll
	WL	ANI_IFSTATUS,drqqrl_loop

	; Now Stand the bugger up
	WL	3,R3GU2A+FR1
	WL	3,R3GU2A+FR2
	WL	3,R3GU4A+FR3
	WL	3,R3GU4A+FR4
	WL	3,R3GU4A+FR5
	WL	3,R3GU4A+FR6
	WL	3,R3GU4A+FR7
	WL	3,R3GU4A+FR8
	WL	3,R3GU4A+FR9
	WL	3,R3GU4A+FR10


	; Tell all he's up there
	WL	ANI_CODE,guy_is_up

	; Face him the right direction
	WL	ANI_CODE,adjust_facing

	; And finally make him dizzy
 SUBRP	rzr_fdizzy_anim
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOGRAVITY
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h
drqqloop
	WL	8,R4WP5C+FR1
	WL	8,R4WP5C+FR2
	WL	8,R4WP5C+FR3
	WL	8,R4WP5C+FR4
	WL	8,R4WP5C+FR5
	WL	8,R4WP5C+FR6
	WL	8,R4WP5C+FR7
	WL	8,R4WP5C+FR8
	WL	8,R4WP5C+FR7
	WL	8,R4WP5C+FR6
	WL	8,R4WP5C+FR5
	WL	8,R4WP5C+FR4
	WL	8,R4WP5C+FR3
	WL	8,R4WP5C+FR2
	WL	ANI_GOTO,drqqloop


*****************************************************************************
*
* Stand wrestler changes the dead wrestlers animation to a standing position
*
 SUBRP	hrt_stand_anim
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	; First roll the guy down to the bottom of the ring if need be
jcqsrl_loop
	.word	ANI_PAUSE,1
	WL	ANI_CODE,check_roll
	WL	ANI_IFSTATUS,jcqsrl_loop

	WL	7,H3GU4A+FR1
	WL	7,H3GU4A+FR2
	WL	7,H3GU4A+FR3
	WL	7,H3GU4A+FR4
	WL	7,H3GU4A+FR5
	WL	7,H3GU4A+FR6
	WL	7,H3GU4A+FR7
	WL	7,H3GU4A+FR8
	WL	7,H3GU4A+FR9
	WL	7,H3GU4A+FR10

	; Tell all he's up there
	WL	ANI_CODE,guy_is_up

	; Face him the right direction
	WL	ANI_CODE,adjust_facing

	; And finally make him dizzy
 SUBRP	hrt_fdizzy_anim
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOGRAVITY
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h
jcqsloop
	WL	5,H4TI4B+FR1
	WL	5,H4TI4B+FR2
	WL	5,H4TI4B+FR3
	WL	5,H4TI4B+FR4
	WL	5,H4TI4B+FR5
	WL	5,H4TI4B+FR6
	WL	5,H4TI4B+FR7
	WL	5,H4TI4B+FR8
	WL	5,H4TI4B+FR7
	WL	5,H4TI4B+FR6
	WL	5,H4TI4B+FR5
	WL	5,H4TI4B+FR4
	WL	5,H4TI4B+FR3
	WL	5,H4TI4B+FR2
	WL	ANI_GOTO,jcqsloop


*****************************************************************************
*
* Stand wrestler changes the dead wrestlers animation to a standing position
*
 SUBRP	und_stand_anim
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	; First roll the guy down to the bottom of the ring if need be
uslhrl_loop
	.word	ANI_PAUSE,1
	WL	ANI_CODE,check_roll
	WL	ANI_IFSTATUS,uslhrl_loop

	WL	7,U3SU4A+FR1
	WL	7,U3SU4A+FR2
	WL	7,U3SU4A+FR3
	WL	7,U3SU4A+FR4
	WL	7,U3SU4A+FR5
	WL	7,U3SU4A+FR6
	WL	7,U3SU4A+FR7
	WL	7,U3SU4A+FR8

	; Tell all he's up there
	WL	ANI_CODE,guy_is_up

	; Face him the right direction
	WL	ANI_CODE,adjust_facing

	; And finally make him dizzy
 SUBRP	und_fdizzy_anim
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOGRAVITY
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h
uslhloop
	WL	10,U4TI4C+FR1
	WL	10,U4TI4C+FR3
	WL	10,U4TI4C+FR5
	WL	10,U4TI4C+FR7
	WL	10,U4TI4C+FR5
	WL	10,U4TI4C+FR3
	WL	ANI_GOTO,uslhloop


*****************************************************************************
*
* Stand wrestler changes the dead wrestlers animation to a standing position
*
 SUBRP	yok_stand_anim
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	; First roll the guy down to the bottom of the ring if need be
yuhurl_loop
	.word	ANI_PAUSE,1
	WL	ANI_CODE,check_roll
	WL	ANI_IFSTATUS,yuhurl_loop

	WL	7,Y3GU2A+FR1
	WL	7,Y3GU2A+FR2
	WL	7,Y3GU2A+FR3
	WL	7,Y3GU2A+FR4
	WL	7,Y3GU2A+FR6
	WL	7,Y3GU2A+FR7
	WL	7,Y3GU2A+FR8
	WL	7,Y3GU2A+FR10
	WL	7,Y3GU2A+FR11
	WL	7,Y3GU2A+FR12
	WL	7,Y3GU4A+FR13
	WL	7,Y3GU4A+FR14

	; Tell all he's up there
	WL	ANI_CODE,guy_is_up

	; Face him the right direction
	WL	ANI_CODE,adjust_facing

	; And finally make him dizzy
 SUBRP	yok_fdizzy_anim
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOGRAVITY
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h
yuhuloop
	WL	10,Y4TI4C+FR4
	WL	10,Y4TI4C+FR5
	WL	10,Y4TI4C+FR6
	WL	10,Y4TI4C+FR7
	WL	10,Y4TI4C+FR8
	WL	10,Y4TI4C+FR7
	WL	10,Y4TI4C+FR6
	WL	10,Y4TI4C+FR5
	WL	ANI_GOTO,yuhuloop



*****************************************************************************
*
* Stand wrestler changes the dead wrestlers animation to a standing position
*
 SUBRP	shn_stand_anim
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	; First roll the guy down to the bottom of the ring if need be
aywzrl_loop
	.word	ANI_PAUSE,1
	WL	ANI_CODE,check_roll
	WL	ANI_IFSTATUS,aywzrl_loop

	WL	7,S3GU2A+FR1
	WL	7,S3GU2A+FR2
	WL	7,S3GU4A+FR3
	WL	7,S3GU4A+FR4
	WL	7,S3GU4A+FR5
	WL	7,S3GU4A+FR6
	WL	7,S3GU4A+FR7
	WL	7,S3GU4A+FR8
	WL	7,S3GU4A+FR9

	; Tell all he's up there
	WL	ANI_CODE,guy_is_up

	; Face him the right direction
	WL	ANI_CODE,adjust_facing

	; And finally make him dizzy
 SUBRP	shn_fdizzy_anim
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOGRAVITY
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h
aywzloop
	WL	9,S4TI4B+FR1
	WL	9,S4TI4B+FR2
	WL	9,S4TI4B+FR3
	WL	9,S4TI4B+FR4
	WL	9,S4TI4B+FR3
	WL	9,S4TI4B+FR2
	WL	ANI_GOTO,aywzloop


*****************************************************************************
*
* Stand wrestler changes the dead wrestlers animation to a standing position
*
 SUBRP	bam_stand_anim
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	; First roll the guy down to the bottom of the ring if need be
miphrl_loop
	.word	ANI_PAUSE,1
	WL	ANI_CODE,check_roll
	WL	ANI_IFSTATUS,miphrl_loop

	WL	7,B3GU4A+FR1
	WL	7,B3GU4A+FR2
	WL	7,B3GU4A+FR3
	WL	7,B3GU4A+FR4
	WL	7,B3GU4A+FR5
	WL	7,B3GU4A+FR6
	WL	7,B3GU4A+FR7
	WL	7,B3GU4A+FR8
	WL	7,B3GU4A+FR9
	WL	7,B3GU4A+FR10
	WL	7,B3GU4A+FR11
	WL	7,B3GU4A+FR12

	; Tell all he's up there
	WL	ANI_CODE,guy_is_up

	; Face him the right direction
	WL	ANI_CODE,adjust_facing

	; And finally make him dizzy
 SUBRP	bam_fdizzy_anim
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOGRAVITY
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h
miphloop
	WL	8,B4TI4A+FR1
	WL	8,B4TI4A+FR2
	WL	8,B4TI4A+FR3
	WL	8,B4TI4A+FR4
	WL	8,B4TI4A+FR5
	WL	8,B4TI4A+FR6
	WL	8,B4TI4A+FR7
	WL	8,B4TI4A+FR6
	WL	8,B4TI4A+FR5
	WL	8,B4TI4A+FR4
	WL	8,B4TI4A+FR3
	WL	8,B4TI4A+FR2
	WL	ANI_GOTO,miphloop


*****************************************************************************
*
* Stand wrestler changes the dead wrestlers animation to a standing position
*
 SUBRP	dnk_stand_anim
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	; First roll the guy down to the bottom of the ring if need be
jssprl_loop
	.word	ANI_PAUSE,1
	WL	ANI_CODE,check_roll
	WL	ANI_IFSTATUS,jssprl_loop

	WL	7,D3GU4A+FR1
	WL	7,D3GU4A+FR2
	WL	7,D3GU4A+FR3
	WL	7,D3GU4A+FR4
	WL	7,D3GU4A+FR5
	WL	7,D3GU4A+FR6
	WL	7,D3GU4A+FR7
	WL	7,D3GU4A+FR8
	WL	7,D3GU4A+FR9

	; Tell all he's up there
	WL	ANI_CODE,guy_is_up

	; Face him the right direction
	WL	ANI_CODE,adjust_facing

	; And finally make him dizzy
 SUBRP	dnk_fdizzy_anim
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOGRAVITY
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h
jssploop
	WL	6,D4SW4C+FR1
	WL	6,D4SW4C+FR2
	WL	6,D4SW4C+FR3
	WL	6,D4SW4C+FR4
	WL	6,D4SW4C+FR5
	WL	6,D4SW4C+FR6
	WL	6,D4SW4C+FR5
	WL	6,D4SW4C+FR4
	WL	6,D4SW4C+FR3
	WL	6,D4SW4C+FR2
	WL	ANI_GOTO,jssploop



*****************************************************************************
*
* Stand wrestler changes the dead wrestlers animation to a standing position
*
 SUBRP	lex_stand_anim
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	; First roll the guy down to the bottom of the ring if need be
tihurl_loop
	.word	ANI_PAUSE,1
	WL	ANI_CODE,check_roll
	WL	ANI_IFSTATUS,tihurl_loop

	WL	7,L3GU4A+FR1
	WL	7,L3GU4A+FR2
	WL	7,L3GU4A+FR3
	WL	7,L3GU4A+FR4
	WL	7,L3GU4A+FR5
	WL	7,L3GU4A+FR6
	WL	7,L3GU4A+FR7
	WL	7,L3GU4A+FR8
	WL	7,L3GU4A+FR9
	WL	7,L3GU4A+FR10

	; Tell all he's up there
	WL	ANI_CODE,guy_is_up

	; Face him the right direction
	WL	ANI_CODE,adjust_facing

	; And finally make him dizzy
 SUBRP	lex_fdizzy_anim
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOGRAVITY
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h
tihuloop
	WL	8,L4TI4B+FR5
	WL	8,L4TI4B+FR6
	WL	8,L4TI4B+FR7
	WL	8,L4TI4B+FR8
	WL	8,L4TI4B+FR9
	WL	8,L4TI4B+FR8
	WL	8,L4TI4B+FR7
	WL	8,L4TI4B+FR6
	WL	ANI_GOTO,tihuloop




 SUBRP	stand_table
	.long	hrt_stand_anim	;0 Bret Hart
	.long	rzr_stand_anim	;1 Razor Ramon
	.long	und_stand_anim	;2 Undertaker
	.long	yok_stand_anim	;3 Yokozuna
	.long	shn_stand_anim	;4 Shawn Michaels
	.long	bam_stand_anim	;5 Bam Bam
	.long	dnk_stand_anim	;6 Doink
	.long	0		;7 spare
	.long	lex_stand_anim	;8 Lex Luger


 SUBRP	stand_wrestler
	FACETBL	stand_table
	calla	change_anim1a
	rets

 SUBRP	dizzy_table
	.long	hrt_fdizzy_anim	;0 Bret Hart
	.long	rzr_fdizzy_anim	;1 Razor Ramon
	.long	und_fdizzy_anim	;2 Undertaker
	.long	yok_fdizzy_anim	;3 Yokozuna
	.long	shn_fdizzy_anim	;4 Shawn Michaels
	.long	bam_fdizzy_anim	;5 Bam Bam
	.long	dnk_fdizzy_anim	;6 Doink
	.long	0		;7 spare
	.long	lex_fdizzy_anim	;8 Lex Luger


 SUBRP	dizzy_wrestler
	FACETBL	dizzy_table
	calla	change_anim1a
	rets



*****************************************************************************
*
* Raise dead anim
*
 SUBRP	raise_dead_anim

	; Uninterruptable, no autoflip, no gravity
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	.word	ANI_PAUSE,(TSEC/2)

	; Now make him stand up
	WL	ANI_CODE,stand_wrestler



*****************************************************************************
*
* Raises the dead guy off the floor and starts a standing dizzy animation
* for the dead guy.
*
 SUBRP	raise_dead
	SLEEP	TSEC/2		; Give him a bit before standing up
	PUSH	a13
	move	@dead_wrestler,a13,L
	movi	raise_dead_anim,a0
	calla	change_anim1a
	PULL	a13
	DIE

TIME_FOR_MOVE	.equ	16

*****************************************************************************
*
* This sets the guy is in the coffin flag
*
 SUBRP	guy_is_in
	movk	1,a14
	move	a14,@guy_in
	rets

*****************************************************************************
*
* Sets the X, Y, and Z velocities of the dead wrestler being pushed into the
* coffin.
*
 SUBRP	set_speeds
	move	*a13(OBJ_XPOSINT),a2
	movi	HOLE_XPOS+7,a1
	sub	a2,a1
	movi	TIME_FOR_MOVE,a2
	sll	16,a1
	divs	a2,a1
	move	a1,*a13(OBJ_XVEL),L

	move	*a13(OBJ_ZPOSINT),a2
	cmpi	WRES_Z,a2
	jrge	bgdtis_in_front
	movi	WRES_Z,a2
	move	a2,*a13(OBJ_ZPOSINT)
bgdtis_in_front
	movi	WRES_Z,a1
	sub	a2,a1
	movi	TIME_FOR_MOVE,a2
	sll	16,a1
	divs	a2,a1
	move	a1,*a13(OBJ_ZVEL),L

	rets

*****************************************************************************
*
* Push in animation - pushes the dead wrestler into the coffin
*
 SUBRP	push_in_anim
	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP|MODE_NOGRAVITY|MODE_NOSHADOW
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	; Set the X,Y,and Z velocities
	WL	ANI_CODE,set_speeds

	; Make a woosh sound while he's moving to coffin
	.word	ANI_SOUND,014h

	; Wait for him to get there
	.word	ANI_PAUSE,TIME_FOR_MOVE

	; Stop him from moving anymore
	.word	ANI_ZEROVELS

	; Make a crash sound when he's in
	.word	ANI_SOUND,0bh

	; Glitch him up 27 pixels
	WL	ANI_SET_YVEL,1b0000h
	.word	ANI_PAUSE,1

	; Stop him from moving
	.word	ANI_ZEROVELS

	; Tell everyone who is interested that he's made it
	WL	ANI_CODE,guy_is_in

	; Make him be dizzy
	WL	ANI_CODE,dizzy_wrestler


*****************************************************************************
*
* Pushes the dead guy into the coffin
*
 SUBRP	push_to_coffin
	PUSH	a13
	move	@dead_wrestler,a13,L
	movi	push_in_anim,a0
	calla	change_anim1a
	PULL	a13
	rets


*****************************************************************************
*
* lyak2 Undertaker raise the dead animation
*

 SUBR	und_2_raise_dead_anim

	.word	ANI_SETMODE,MODE_UNINT|MODE_NOAUTOFLIP	;uninterruptable
	.word	ANI_ZEROVELS
	.word	ANI_SETSPEED,100h

	WL	ANI_CODE,adjust_taker_facing

	; This rises the dead guy up off of the floor to a standing dizzy
	; position.
	WLWWWW	ANI_CREATEPROC,raise_dead,0,0,0,0

	; Start the coffin rising up
	WLWWWW	ANI_CREATEPROC,und_coffin_up,0,0,0,0

	WLWW	ANI_SHADOWTRAIL,UNDNEG_P,5,15	;pal,rate,lifespan

	; This is what taker does to raise the dead guy
	WL	4,U5RV5A+FR1
	WL	4,U5RV5A+FR2
	WL	4,U5RV5A+FR3
lyakloopa
	WL	5,U5RV5A+FR4
	WL	5,U5RV5A+FR5
	WL	15,U5RV5A+FR6
	WL	5,U5RV5A+FR5
	WL	ANI_CODE,DO_CROWD_CHEER
	WL	ANI_CODE,is_guy_up
	WL	ANI_IFNOTSTATUS,lyakloopa

	; Let the dead guy stand there being dizzy fer a bit
lyakloop
	WL	5,U5RV5A+FR4
	WL	5,U5RV5A+FR5
	WL	15,U5RV5A+FR6
	WL	5,U5RV5A+FR5

	WL	ANI_CODE,DO_CROWD_CHEER
	WL	ANI_CODE,is_door_open
	WL	ANI_IFNOTSTATUS,lyakloop
	WL	5,U5RV5A+FR4
	WL	4,U5RV5A+FR3
	WL	4,U5RV5A+FR2
	WL	4,U5RV5A+FR1

	; This is what taker does to push the guy into the coffin
	WLWW	ANI_SHADOWTRAIL,UNDNEG_P,2,8	;pal,rate,lifespan
	WL	7,U4PS3A+FR1
	WL	7,U4PS3A+FR2
	WL	7,U4PS3A+FR3

	; This pushes the dead guy into the coffin and lets him stand in it
	; being dizzy for a bit
	; Make a grunt sound when push start
	.word	ANI_SOUND,02dh

	WL	ANI_CODE,push_to_coffin
	.word	ANI_SET_RPTCOUNT,(TSEC*3)/(7*6)
lyakloop1
	WL	7,U4PS3A+FR5
	WL	7,U4PS3A+FR6
	WL	7,U4PS3A+FR7
	WL	7,U4PS3A+FR8
	WL	7,U4PS3A+FR7
	WL	7,U4PS3A+FR6

	WL	ANI_CODE,DO_CROWD_CHEER
	WL	ANI_CODE,is_he_in
	WL	ANI_IFNOTSTATUS,lyakloop1
	.word	ANI_DEC_RPTCOUNT
	WL	ANI_IF_RPTCOUNT,lyakloop1

	; Now close the door
	.word	ANI_SOUND,2dh		; Push door shut effort grunt
	WL	ANI_CODE,close_door

lyakd_loop
	.word	ANI_PAUSE,5
	WL	ANI_CODE,make_wres_disappear
	WL	ANI_IFNOTSTATUS,lyakd_loop

	WL	7,U4PS3A+FR5
	WL	7,U4PS3A+FR3
	WL	7,U4PS3A+FR2
	WL	7,U4PS3A+FR1

	; And last but not least raise arm and leave crowd cheering
	.word	ANI_SHADOWTRAIL,0	;off
	WL	4,U5RV5A+FR1
	WL	4,U5RV5A+FR2
	WL	4,U5RV5A+FR3
	WL	4,U5RV5A+FR4
	WL	4,U5RV5A+FR5
lyakloop3
	WL	ANI_CODE,DO_CROWD_CHEER
	WL	50,U5RV5A+FR6
	WL	ANI_GOTO,lyakloop3

*****************************************************************
* THERE ARE FOUR LIGHTS!
* a0 = number of lights

 SUBR	yok_falling_light
	PUSHP	a9,a10			; free up a9 and a10 for us to use.
	movi	100,a9
	movi	1,a0  ; let's do 4. There are 5. Not 4. ;(need 1 light so we can see how it looks.)
	move	a0,a10
wbivcreate_lts
	CREATE0	yok_falling_lights
	SLEEPK	5
	addk	20,a9
	dsjs	a10,wbivcreate_lts

	SLEEP	TSEC*20

	PULLP	a9,a10                  ; restore a9 and a10.
	RETP
*	rets

*****************************************************************
* Randomly drop a MK1 or MK2 cab
* a0 = number of arcade cabs to drop

 SUBR	yok_falling_cab
	PUSHP	a9,a10			; free up a9 and a10 for us to use.
	movi	100,a9
	movi	1,a0  ; let's do 4. There are 5. Not 4. ;(need 1 cab so we can see how it looks.)
	move	a0,a10
wbixcreate_cab
	CREATE0	yok_falling_cabs
	SLEEPK	5
	addk	25,a9
	dsjs	a10,wbixcreate_cab

	SLEEP	TSEC*20

	PULLP	a9,a10                  ; restore a9 and a10.
	RETP

*****************************************************************
*
 SUBRP	yok_falling_cabs

	move	a9,a0				; Set up horizontal position
	clr	a10				; Save off current y
	sll	16,a0				; Set up vertical position
	clr	a1
	movi	MK2GAME,a2			; This is a cab		;these are from mk3.. MKGAMES.IMG
;	movi	MK1GAME,a2			; This is a cab		;these are from mk3.. MKGAMES.IMG
	movi	1000h|RING_Z_CENTER,a3		; Z position
	movi	DMAWNZ|M_3D|M_SCRNREL,a4	; Control goop
	cmpi	200,a9				; more'n half way on Z-axis?
	jrlt	rdrbno_flip			; br = nope
	ori	M_FLIPH,a4			; flip
rdrbno_flip
	movi	CLSFINI,a5			; object id
	clr	a6				; velocity
	clr	a7				; velocity

	calla	BEGINOBJ			; make it an active object. (it's outside visible range btw.)

rdrbfall_loop					; Make the cab fall (move from outside viewport, to bottom of mat.)
	SLEEPK	1
	cmpi	(100-MAT_Y),a10			; Check if this cab hit bottom.
	jrgt	rdrbfall_done			; it did? Nice. Let's go to done.
	addk	15,a10                          ; increase Y pos of current OBJ (OYPOS)
	move	a10,*a8(OYPOS)			; put a10 into OYPOS.
	jruc	rdrbfall_loop			; Loop untill the cab fell completely.


rdrbfall_done					; A cab hit the mat.
	movi	1252,a3				; Set up sound to make.
	calla	SNDSND				; Make the sound.
	SLEEP	TSEC*5

	movi	CLSFINI,a0

	DIE

******************************************************************************
* Yoko debugging
* let's make a light fall.
* maybe use RNDRNG0 to make a MK cab fall?


;a9 - starting x position
 SUBRP	yok_falling_lights

	move	a9,a0				; Set up horizontal position
	clr	a10				; Save off current y
	sll	16,a0				; Set up vertical position
	clr	a1
	movi	YKLIGHT01,a2			; This is a light		;these are all in TONY.IMG too.
	movi	1000h|RING_Z_CENTER,a3		; Z position
	movi	DMAWNZ|M_3D|M_SCRNREL,a4	; Control goop
	cmpi	200,a9				; light more'n half way?
	jrlt	rdrano_flip			; br = nope
	ori	M_FLIPH,a4			; flip
rdrano_flip
	movi	CLSFINI,a5			; Light object id
	clr	a6				; velocity
	clr	a7				; velocity

	calla	BEGINOBJ			; make it an active object. (it's outside visible range btw.)

rdrafall_loop					; Make the light fall (move from outside viewport, to bottom of mat.)
	SLEEPK	1
	cmpi	(255-MAT_Y),a10			; Check if this light hit bottom.
	jrgt	rdrafall_done			; it did? Nice. Let's go to done.
	addk	15,a10                          ; increase Y pos of current OBJ (OYPOS)
	move	a10,*a8(OYPOS)			; put a10 into it.
	jruc	rdrafall_loop			; Loop untill the light fell completely.


rdrafall_done					; A light hit the mat.
	movi	1252,a3				; Set up sound to make.
	calla	SNDSND				; Make the sound.

; Let's delete the falling light OBJ as we will replace it with the embedded one.

	move	a8,a0				; a8 is the that just fell object pointer?
	calla	DELOBJ                          ; delete the complete light that fell (a0=obj, see display.asm)

; Show the damaged mat.

	move	a9,a0                           ; a9 is the end pos of the light that fell. a0 = X position(hori)
	addi	08h,a0				; adjust this image position a bit to the right.
	sll	16,a0                           ; 
	move	a10,a1				; a1 = Y position (verti)
	sll	16,a1				l 
        movi	LIGHTDENT,a2			; This is the dent in the mat.
	movi	(1000h|RING_Z_CENTER)+10h,a3	; The +10h is the prio?
	movi	DMAWNZ|M_3D|M_SCRNREL,a4
;	ori	M_FLIPH,a4			; not flipping this image.
	movi	CLSFINI,a5			; no idea for now
	clr	a6
	clr	a7
	calla	BEGINOBJ			; this starts to show the actual OBJ on screen.
                                                
; Embed light in the mat.

	move	a9,a0                           ; a9 is the end pos of the light that fell. a0 = X position(hori)
	sll	16,a0                           ; 
	move	a10,a1				; a1 = Y position (verti)
	sll	16,a1				l 
	movi	YKLIGHT02A,a2			; This is an embedded light
*	movi	COFFIN05,a2			; This is an embedded light
	movi	(1000h|RING_Z_CENTER)+10h,a3
	movi	DMAWNZ|M_3D|M_SCRNREL,a4
	cmpi	200,a9
	jrlt	rdrano_lt2a_flip
	ori	M_FLIPH,a4
rdrano_lt2a_flip
	movi	CLSFINI,a5
	clr	a6
	clr	a7
	calla	BEGINOBJ			; this starts to show the actual OBJ on screen.

; at this point we have the fallen light on the screen, but no lens.
; we should just spawn the lens and make it bounce?

	move 	a8,a0
	move	a9,a0
;	addi	-20h,a0					;adjust the lens position left a bit.
	sll	16,a0
	move	a10,a1
;	addi	-30h,a1					;adjust the lens position up a bit.
	sll	16,a1
	movi	YKLIGHT02B,a2			; This is an embedded light lens
	movi	(1000h|RING_Z_CENTER)+20h,a3	; a3: the +20h is the Z (depth) or layer this item appears on.
	movi	DMAWNZ|M_3D|M_SCRNREL,a4	; DMA Flags
	cmpi	200,a9				; If the light is to the left/right flip its image. otherwise no.
	jrlt	rdrano_lt2b_flip
	ori	M_FLIPH,a4
rdrano_lt2b_flip
	movi	CLSFINI,a5			; What is CLSFINI, and what is a5?
	clr	a6
	clr	a7
	calla	BEGINOBJ			; this should at least put the lens on screen now.
	
	CREATE0	buzz_wire			; Make the wire buzz around  (SUBRP, DIE)
;	CREATE0	shatter_lens			; Shatter the lens (SUBRP, DIE) (Not implemented)

**;	We should do something with the light on top of the player?
**;	.ref react_bloodnguts_gen
**;	CREATE0 react_bloodnguts_gen

	move	a13,a11
	SLEEPK	5				; Wait 5 seconds?

	movk	15,a0
rdramore_smoke
	movi	lt_smk_tbl,a11			; Make it smoke (adjust position on this one..)
rdrasmoke_loop
	move	*a11+,a2,L
	jrz	rdrasmoke_done
	move	a9,a0					;a0 = XPOS?
	addi	-20h,a0					;Move the smoke left a bit.
	sll	16,a0
	move	a10,a1					;a1 = YPOS
	addi	-30h,a1					;Move the smoke up a bit.
	sll	16,a1
	movi	(1000h|RING_Z_CENTER)+30h,a3		;a3 = ZPOS?
	movi	DMAWNZ|M_3D|M_SCRNREL,a4		;dma flags.

	cmpi	200,a9
	jrlt	rdrano_smk_flip
	ori	M_FLIPH,a4
rdrano_smk_flip
	movi	CLSFINI,a5
	clr	a6
	clr	a7

	calla	BEGINOBJ

	PUSHP	a0
	SLEEPK	5
	PULLP	a0

	move	a8,a0
	calla	DELOBJ

	jruc	rdrasmoke_loop
rdrasmoke_done
	dsj	a0,rdramore_smoke

******************************************************************************
* wire dancing around

 SUBRP buzz_wire
	movk	15,a0
rdramore_wire
	movi	lt_wire_tbl,a11			; Moving wire
rdrawire_loop
	move	*a11+,a2,L
	jrz	rdrawire_done
	move	a9,a0				; a0 = X, a1 =Y a3 =Z
	addi	-05h,a0
	sll	16,a0				 
	move	a10,a1
	addi	-04fh,a1			; adjust the y pos of the cable.
	sll	16,a1				; a1 = Y?  

;	move	a9,a0				; a0 = X, a1 =Y a3 =Z
;	sll	16,a0				 
;	move	a10,a1
;	sll	16,a1				; a1 = Y?  (was 16)
	movi	(1000h|RING_Z_CENTER)+40h,a3	;Z-POS
	movi	DMAWNZ|M_3D|M_SCRNREL,a4
	cmpi	200,a9
	jrlt	rdrano_wir_flip
	ori	M_FLIPH,a4
rdrano_wir_flip
	movi	CLSFINI,a5
	clr	a6
	clr	a7

	calla	BEGINOBJ

	PUSHP	a0
	SLEEPK	5
	PULLP	a0

	move	a8,a0
	calla	DELOBJ

	jruc	rdrawire_loop
rdrawire_done
	dsj	a0,rdramore_wire


	SLEEP	TSEC*5

	movi	CLSFINI,a0
	calla	obj_del1c

	DIE

******************************************************************************
* Yoko pals
	.DATA
	.even
LITSMKEP:
	.word	 14
	.word	01CACH,04A52H,031AEH,056B5H,04631H,06318H,06B5AH,05ED6H
	.word	077BDH,06AF6H,04232H,05AD6H,056B5H,04E73H

LITSETP:
	.word	 64
	.word	01CACH,0422H,0442H,014C6H,0400H,02949H,0842H,0821H
	.word	018A4H,018C5H,014A4H,01083H,0841H,0C83H,01063H,02507H
	.word	0441H,024E6H,018C6H,014C5H,0C84H,0C64H,024C5H,0354AH
	.word	024A4H,01C62H,01041H,02CE6H,06B39H,03528H,039ADH,045CDH
	.word	05AB5H,04A31H,02883H,02462H,02CC5H,02CA4H,04A0FH,05651H
	.word	02D8DH,04149H,05693H,01841H,01020H,0398BH,0560FH,03928H
	.word	030C5H,07FDEH,06F5DH,02D8BH,0469H,06A8FH,07AF1H,02862H
	.word	02C83H,030A4H,034C5H,038E6H,04107H,04528H,04949H,04D6AH

MATDNT:
	.word	 59
	.word	00H,02D89H,02969H,02506H,020E6H,07FBBH,07FBAH,07BBAH
	.word	07F99H,07B9AH,07B99H,07B78H,07B79H,07779H,07778H,07379H
	.word	07758H,07757H,07359H,07358H,07737H,07337H,07336H,06F37H
	.word	06F36H,06F16H,06F15H,06B17H,06B16H,06B15H,066F5H,066F4H
	.word	066D4H,062D3H,062B3H,05EB2H,05E91H,05A92H,05A91H,05A71H
	.word	05670H,05650H,05250H,04E2FH,04E0EH,0442H,024E6H,0C83H
	.word	045CCH,041ABH,0398AH,03549H,02D28H,02907H,024E5H,01CC4H
	.word	018A3H,00H,0420H

MK1GAME_P:
	.word	 63
	.word	01FH,0843H,0422H,00H,0C64H,01CC8H,0C42H,02CC6H
	.word	04C64H,044C6H,02822H,04843H,03822H,0844H,02463H,030A3H
	.word	05844H,018A7H,05673H,04612H,05AD6H,048E2H,03505H,0410AH
	.word	04D44H,03DAFH,0466H,058E2H,045ACH,0294DH,0250AH,05D42H
	.word	0416CH,05926H,055AAH,059EFH,065CAH,059CDH,065A3H,061C6H
	.word	0552AH,02D6EH,06962H,0624CH,0314CH,01CE9H,06671H,071E4H
	.word	072ADH,07226H,06A6BH,062D7H,06AF2H,07666H,06D4DH,0650AH
	.word	069CFH,0598CH,071D0H,0190AH,046AH,06F5AH,06319H

MK2GAME_P:
	.word	 64
	.word	01FH,0843H,0422H,03C23H,00H,05064H,01443H,0C64H
	.word	06B38H,056D6H,04A53H,04A31H,06B5AH,06319H,039F0H,0252AH
	.word	01CE7H,05272H,01486H,0358BH,0423H,0445H,014EAH,06064H
	.word	0488H,02990H,04254H,04CAH,050DH,066D1H,03A34H,046F9H
	.word	05F5AH,0570H,0214EH,015D2H,0154EH,0739CH,03885H,01E35H
	.word	02A97H,036D8H,055A5H,064A6H,072AAH,04187H,06228H,03904H
	.word	0730EH,0628EH,058E5H,03908H,05D09H,06D2AH,06D6BH,059AAH
	.word	06904H,07245H,06DA4H,07A31H,071CEH,010FH,07FFFH,01BH
	.TEXT
******************************************************************************
* Yoko tables

 SUBRP	lt_smk_tbl
	.long	YKLTSMK01  ; these are kept in TONY.IMG
	.long	YKLTSMK02
	.long	YKLTSMK03
	.long	YKLTSMK04
	.long	YKLTSMK05
	.long	YKLTSMK06
	.long	YKLTSMK07
	.long	0

 SUBRP	lt_wire_tbl
	.long	YKLTWIRE01 ; this is the dancin wire.
	.long	YKLTWIRE02
	.long	0

 SUBRP 	lt_glass_tbl
	.long	YKLTGLAS01
	.long	YKLTGLAS02
	.long	0

	.end
