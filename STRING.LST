TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    ****************************************************************
       2                    *
       3                    * Software:     Jamie Rivett
       4                    * Initiated:    
       5                    *
       6                    * Modified:
       7                    *
       8                    * COPYRIGHT (C) 1992 WILLIAMS ELECTRONICS GAMES, INC.
       9                    *
      10                    *.Last mod - 10/9/92 23:07
      11                    ****************************************************************
      12                            .file   "string.asm"
      14                            .width  132
      15                            .option b,d,l,t
      16                            .mnolist
      17                    
      18                    
      19                            .include        "mproc.equ"
      20                            .include        "display.equ"
      21                            .include        "sys.equ"
      22                            .include        "gsp.equ"
      23                            .include        "macros.h"
      24                            .include        "game.equ"
      25                            .include        "audit.equ"
      26                            .include        "imgtbl.glo"
      27                    
      28                            .include        "fontsimg.glo"
      29                            .include        "bgndtbl.glo"
      30                    
      31                            .include        "miscimg.glo"
      32                            .include        "fonts2.tbl"
      33                            .include        "fontsimg.tbl"
      34                    
      35                    
      36                    ******************************************************************************
      37                    * EXTERNAL REFERENCES
      38                    
      39                            .ref    BINBCD
      40                    
      41                    ******************************************************************************
      42                    
      43                    ;symbols defined in this file
      44                    
      45                            .def    message_palette
      46                            .def    mess_space_width
      47                            .def    print_string,print_string2,print_string_C,print_string_C2
      48                            .def    print_string_R,print_string_R2
      49                            .def    message_ascii
      50                            .def    mess_spacing
      51                            .def    mess_objid
      52                            .def    mess_cursx
      53                            .def    mess_cursy
      54                            .def    osgemd_ascii,osgmd8_ascii
      55                            .def    wgsf24_ascii,ogmd10_ascii
      56                            .def    font9_ascii
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

string printing stuff                                                PAGE    2

      57                            .def    font9A_ascii,font18_ascii
      58                            .def    wsf14_ascii,wsf10_ascii
      59                            .def    print_string_with_z,mess_z
      60                    
      61                            .def    win_ascii
      62                            .def    message_buffer
      63                            .def    message_buffer2
      64                            .def    dec_to_asc,dec_to_pct
      65                            .def    copy_string,copy_rom_string
      66                            .def    concat_string,concat_rom_string
      67                    
      68                            .def    print_message,setup_message
      69                            .def    mess_line_spacing
      70                            .def    get_string_len2
      71                            .def    dec_to_asc_new_entry
      72                    
      73              0028  MBUFF_SIZE      equ     40
      74                    
      75                    ;ram
      76 00000000                   .bss    message_ascii,  32      ;* ascii lookup table
      77 00000020                   .bss    message_palette,32      ;* palette
      78 00000040                   .bss    message_buffer, 16*MBUFF_SIZE ;null terminated string
      79 000002c0                   .bss    message_buffer2, 16*MBUFF_SIZE
      80 00000540                   .bss    mess_cursx,     16      ;message cursor pos X original
      81 00000000                   BSSX    mess_cursx2,    16      ;message cursor pos X temp
      82 00000560                   .bss    mess_cursy,     16      ;message cursor pos Y
      83 00000570                   .bss    mess_space_width, 16    ;width in pixels of space char
      84 00000580                   .bss    mess_spacing,16         ;spacing between chars
      85 00000590                   .bss    mess_line_spacing,16    ;spacing between lines
      86 000005a0                   .bss    mess_objid,16           ;OBJECT ID for string
      87 000005b0                   .bss    mess_justify,32         ;justification method
      88 000005d0                   .bss    ptr_player_data,32      ;start address of player data
      89 000005f0                   .bss    mess_z,32
      90 00000000                   BSSX    IGNORE_CHAR_WIDTH,16
      91 00000000                   .text
      92                    
      93                    *****************************************************************************
      94                    
      95 00000000            SUBRP  clear_buffers
      96                    
      97 00000000     0d3f          callr   clear_buffer
         00000010     0003  
      98 00000020     0d3f          callr   clear_buffer2
         00000030     000a  
      99 00000040     0960          rets
     100                    
     101 00000050           clear_buffer
     102 00000050     09c2          movi    MBUFF_SIZE,a2
         00000060     0028  
     103 00000070     5600          clr     a0
     104 00000080     09e1          movi    message_buffer,a1
         00000090 00000040- 
     105 000000b0           tlwgclear_loop1
     106 000000b0     9001          move    a0,*a1+
     107 000000c0     3c42          dsj     a2,tlwgclear_loop1
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

string printing stuff                                                PAGE    3

     108 000000d0     0960          rets
     109                    
     110 000000e0           clear_buffer2
     111 000000e0     09c2          movi    MBUFF_SIZE,a2
         000000f0     0028  
     112 00000100     5600          clr     a0
     113 00000110     09e1          movi    message_buffer2,a1
         00000120 000002c0- 
     114 00000140           tlwgclear_loop2
     115 00000140     9001          move    a0,*a1+
     116 00000150     3c42          dsj     a2,tlwgclear_loop2
     117 00000160     0960          rets
     118                    
     119                    
     120                    *****************************************************************************
     121                    *
     122                    * INPUT:        a0 = number to convert
     123                    *               a1 = max value
     124                    * converts value in A0 to an decimal ASCII string in message_buffer2
     125                    * - removes leading spaces
     126                    *
     127                    *-----------------------------------------------------------------------------
     128                    
     129 00000170            SUBRP  dec_to_asc
     130                    
     131 00000170     4801          cmp     a0,a1                   ;a1-a0
     132 00000180     c301          jrhi    urtjnot_max
     133 00000190     4c20          move    a1,a0                   ;set num to max
     134 000001a0           urtjnot_max
     135                    
     136 000001a0     0d5f          calla   BINBCD                  ;dec number in A0
         000001b0 00000000! 
     137 000001d0     4c01          move    a0,a1
     138 000001e0     09e2          movi    message_buffer2,a2
         000001f0 000002c0- 
     139                    
     140 00000210           dec_to_asc_new_entry
     141                    
     142 00000210     5663          clr     a3                      ;leading zero flag
     143                    
     144 00000220     0b80          andi    0f000000h,a0
         00000230 f0ffffff  
     145 00000250     2d00          srl     6*4,a0
     146 00000260     cb02          jrnz    urtjno_zero_n3
     147 00000270     4c63          move    a3,a3                   ;leading zero
     148 00000280     ca05          jrz     urtjskip_zero_n3
     149 00000290           urtjno_zero_n3
     150 00000290     1023          inc     a3
     151 000002a0     0b00          addi    '0',a0
         000002b0     0030  
     152 000002c0     8c02          movb    a0,*a2
     153 000002d0     1102          addk    8,a2
     154 000002e0           urtjskip_zero_n3
     155                    
     156 000002e0     4c20          move    a1,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

string printing stuff                                                PAGE    4

     157 000002f0     0b80          andi    0f00000h,a0
         00000300 ff0fffff  
     158 00000320     2d80          srl     5*4,a0
     159 00000330     cb02          jrnz    urtjno_zero_n2
     160 00000340     4c63          move    a3,a3                   ;leading zero
     161 00000350     ca05          jrz     urtjskip_zero_n2
     162 00000360           urtjno_zero_n2
     163 00000360     1023          inc     a3
     164 00000370     0b00          addi    '0',a0
         00000380     0030  
     165 00000390     8c02          movb    a0,*a2
     166 000003a0     1102          addk    8,a2
     167 000003b0           urtjskip_zero_n2
     168                    
     169 000003b0     4c20          move    a1,a0
     170 000003c0     0b80          andi    0f0000h,a0
         000003d0 fff0ffff  
     171 000003f0     2e00          srl     4*4,a0
     172 00000400     cb02          jrnz    urtjno_zero_n1
     173 00000410     4c63          move    a3,a3                   ;leading zero
     174 00000420     ca05          jrz     urtjskip_zero_n1
     175 00000430           urtjno_zero_n1
     176 00000430     1023          inc     a3
     177 00000440     0b00          addi    '0',a0
         00000450     0030  
     178 00000460     8c02          movb    a0,*a2
     179 00000470     1102          addk    8,a2
     180 00000480           urtjskip_zero_n1
     181                    
     182 00000480     4c20          move    a1,a0
     183                    
     184                    
     185 00000490     0b80          andi    0f000h,a0
         000004a0 ffff0fff  
     186 000004c0     2e80          srl     3*4,a0
     187 000004d0     cb02          jrnz    urtjno_zero0
     188 000004e0     4c63          move    a3,a3                   ;leading zero
     189 000004f0     ca05          jrz     urtjskip_zero0
     190 00000500           urtjno_zero0
     191 00000500     1023          inc     a3
     192 00000510     0b00          addi    '0',a0
         00000520     0030  
     193 00000530     8c02          movb    a0,*a2
     194 00000540     1102          addk    8,a2
     195 00000550           urtjskip_zero0
     196                    
     197 00000550     4c20          move    a1,a0
     198 00000560     0b80          andi    0f00h,a0
         00000570 fffff0ff  
     199 00000590     2f00          srl     2*4,a0
     200 000005a0     cb02          jrnz    urtjno_zero1
     201 000005b0     4c63          move    a3,a3                   ;leading zero
     202 000005c0     ca05          jrz     urtjskip_zero1
     203 000005d0           urtjno_zero1
     204 000005d0     1023          inc     a3
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

string printing stuff                                                PAGE    5

     205 000005e0     0b00          addi    '0',a0
         000005f0     0030  
     206 00000600     8c02          movb    a0,*a2
     207 00000610     1102          addk    8,a2
     208 00000620           urtjskip_zero1
     209                    
     210 00000620     4c20          move    a1,a0
     211 00000630     0b80          andi    0f0h,a0
         00000640 ffffff0f  
     212 00000660     2f80          srl     1*4,a0
     213 00000670     cb02          jrnz    urtjno_zero2
     214 00000680     4c63          move    a3,a3                   ;leading zero
     215 00000690     ca05          jrz     urtjskip_zero2
     216 000006a0           urtjno_zero2
     217 000006a0     1023          inc     a3
     218 000006b0     0b00          addi    '0',a0
         000006c0     0030  
     219 000006d0     8c02          movb    a0,*a2
     220 000006e0     1102          addk    8,a2
     221 000006f0           urtjskip_zero2
     222                    
     223 000006f0     4c20          move    a1,a0
     224 00000700     0b80          andi    0fh,a0
         00000710 fffffff0  
     225 00000730     0b00          addi    '0',a0
         00000740     0030  
     226 00000750     8c02          movb    a0,*a2
     227 00000760     1102          addk    8,a2
     228 00000770     5600          clr     a0
     229 00000780     8c02          movb    a0,*a2                  ;null terminate string
     230                    
     231 00000790     0960          rets
     232                    
     233                    
     234                    *****************************************************************************
     235                    *
     236                    * INPUT:        a0 = number to convert
     237                    * converts value in A0 to an decimal ASCII % string in message_buffer2
     238                    * range 000-999
     239                    *
     240                    *-----------------------------------------------------------------------------
     241                    
     242 000007a0            SUBRP  dec_to_pct
     243                    
     244 000007a0     0d5f          calla   BINBCD                  ;dec number in A0
         000007b0 00000000! 
     245 000007d0     4c01          move    a0,a1
     246 000007e0     09e2          movi    message_buffer2,a2
         000007f0 000002c0- 
     247                    
     248 00000810     0b80          andi    0f00h,a0
         00000820 fffff0ff  
     249 00000840     2f00          srl     2*4,a0
     250 00000850     0b00          addi    '0',a0
         00000860     0030  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

string printing stuff                                                PAGE    6

     251 00000870     8c02          movb    a0,*a2
     252 00000880     1102          addk    8,a2
     253                    
     254 00000890     4c20          move    a1,a0
     255 000008a0     0b80          andi    0f0h,a0
         000008b0 ffffff0f  
     256 000008d0     2f80          srl     1*4,a0
     257 000008e0     0b00          addi    '0',a0
         000008f0     0030  
     258 00000900     8c02          movb    a0,*a2
     259 00000910     1102          addk    8,a2
     260                    
     261 00000920     4c20          move    a1,a0
     262 00000930     0b80          andi    0fh,a0
         00000940 fffffff0  
     263 00000960     0b00          addi    '0',a0
         00000970     0030  
     264 00000980     8c02          movb    a0,*a2
     265 00000990     1102          addk    8,a2
     266 000009a0     5600          clr     a0
     267 000009b0     8c02          movb    a0,*a2                  ;null terminate string
     268                    
     269 000009c0     0960          rets
     270                    
     271                    
     272                    *****************************************************************************
     273                    *
     274                    * copies string in message_buffer2 to message_buffer
     275                    *
     276                    *-----------------------------------------------------------------------------
     277                    
     278 000009d0            SUBRP  copy_string
     279                    
     280 000009d0     09e2          movi    message_buffer-8,a2
         000009e0 00000038- 
     281 00000a00     09e3          movi    message_buffer2-8,a3
         00000a10 000002b8- 
     282                    
     283 00000a30           tqednext_char
     284 00000a30     1102          addk    8,a2
     285 00000a40     1103          addk    8,a3
     286 00000a50     9c62          movb    *a3,*a2
     287 00000a60     8e60          movb    *a3,a0                          ;NULL?
     288 00000a70     cbfb          jrnz    tqednext_char
     289                    
     290 00000a80     0960          rets
     291                    
     292                    *****************************************************************************
     293                    *
     294                    * concatenates string in message_buffer2 to string in message_buffer
     295                    *
     296                    *-----------------------------------------------------------------------------
     297                    
     298 00000a90            SUBRP  concat_string
     299                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

string printing stuff                                                PAGE    7

     300 00000a90     09e2          movi    message_buffer-8,a2
         00000aa0 00000038- 
     301 00000ac0     09e3          movi    message_buffer2-8,a3
         00000ad0 000002b8- 
     302 00000af0           wnsgnext_char
     303 00000af0     1102          addk    8,a2
     304 00000b00     8e40          movb    *a2,a0
     305 00000b10     cbfd          jrnz    wnsgnext_char
     306 00000b20     1502          subk    8,a2
     307                    
     308 00000b30           wnsgnext_char2
     309 00000b30     1102          addk    8,a2
     310 00000b40     1103          addk    8,a3
     311 00000b50     9c62          movb    *a3,*a2
     312 00000b60     8e60          movb    *a3,a0                          ;NULL?
     313 00000b70     cbfb          jrnz    wnsgnext_char2
     314                    
     315 00000b80     0960          rets
     316                    
     317                    *****************************************************************************
     318                    *
     319                    * INPUT:        a4 = * null terminated rom string
     320                    *
     321                    * copies string in rom to message_buffer
     322                    *
     323                    *-----------------------------------------------------------------------------
     324                    
     325 00000b90            SUBRP  copy_rom_string
     326                    
     327 00000b90     09e1          movi    message_buffer-8,a1
         00000ba0 00000038- 
     328                    
     329 00000bc0     1504          subk    8,a4
     330                    
     331 00000bd0           skrwnext_char
     332 00000bd0     1101          addk    8,a1
     333 00000be0     1104          addk    8,a4
     334 00000bf0     9c81          movb    *a4,*a1
     335 00000c00     8e80          movb    *a4,a0                          ;NULL ?
     336 00000c10     cbfb          jrnz    skrwnext_char
     337                    
     338 00000c20     0960          rets
     339                    
     340                    *****************************************************************************
     341                    *
     342                    * INPUT:        a4 = * null terminated rom string
     343                    *
     344                    * concatenates string in rom to string in message_buffer
     345                    *
     346                    *-----------------------------------------------------------------------------
     347                    
     348 00000c30            SUBRP  concat_rom_string
     349                    
     350 00000c30     09e1          movi    message_buffer-8,a1
         00000c40 00000038- 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

string printing stuff                                                PAGE    8

     351 00000c60           bwfknext_char
     352 00000c60     1101          addk    8,a1
     353 00000c70     8e20          movb    *a1,a0
     354 00000c80     cbfd          jrnz    bwfknext_char
     355                    
     356 00000c90     1501          subk    8,a1
     357 00000ca0     1504          subk    8,a4
     358                    
     359 00000cb0           bwfknext_char2
     360 00000cb0     1101          addk    8,a1
     361 00000cc0     1104          addk    8,a4
     362 00000cd0     9c81          movb    *a4,*a1
     363 00000ce0     8e80          movb    *a4,a0                          ;NULL ?
     364 00000cf0     cbfb          jrnz    bwfknext_char2
     365                    
     366 00000d00     0960          rets
     367                    
     368                    *****************************************************************************
     369                    *
     370                    * INPUT:        a4 = * NULL terminated ASCII string (print_string2)
     371                    *
     372                    * RETURN:       a2 = width of string in pixels
     373                    *
     374                    *-----------------------------------------------------------------------------
     375                    
     376 00000d10            SUBRP  get_string_len
     377                    
     378 00000d10     09e4          movi    message_buffer,a4
         00000d20 00000040- 
     379 00000d40           get_string_len2
     380 00000d40     5642          clr     a2
     381 00000d50     1504          subk    8,a4
     382 00000d60           xwkonext_char
     383 00000d60     1104          addk    8,a4
     384 00000d70     8e80          movb    *a4,a0
     385 00000d80     0b80          andi    0ffh,a0
         00000d90 ffffff00  
     386 00000db0     ca1d          jrz     xwkodone
     387 00000dc0     0b40          cmpi    1,a0
         00000dd0     fffe  
     388 00000de0     ca1a          jreq    xwkodone
     389 00000df0     0b40          cmpi    32,a0
         00000e00     ffdf  
     390 00000e10     cb05          jrne    xwkono_space
     391 00000e20     05a0          move    @mess_space_width,a0
         00000e30 00000570- 
     392 00000e50     4002          add     a0,a2
     393 00000e60     c0ef          jruc    xwkonext_char
     394 00000e70           xwkono_space
     395 00000e70     24a0          sll     5,a0                    ;x 32 bits
     396 00000e80     07a1          move    @message_ascii,a1,L
         00000e90 00000000- 
     397 00000eb0     4020          add     a1,a0
     398 00000ec0     8601          move    *a0,a1,L                ;* image
     399 00000ed0     cae8          jrz     xwkonext_char
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

string printing stuff                                                PAGE    9

     400 00000ee0     05a0          MOVE    @IGNORE_CHAR_WIDTH,A0
         00000ef0 00000610- 
     401 00000f10     cb02          JRNZ    xwkoIGNORE_IT
     402 00000f20     8420          move    *a1,a0                  ;image width
     403 00000f30     4002          add     a0,a2
     404 00000f40           xwkoIGNORE_IT
     405 00000f40     05a0          move    @mess_spacing,a0
         00000f50 00000580- 
     406 00000f70     4002          add     a0,a2
     407 00000f80     c0dd          jruc    xwkonext_char
     408                    
     409 00000f90           xwkodone
     410 00000f90     05a0          move    @mess_spacing,a0
         00000fa0 00000580- 
     411 00000fc0     4402          sub     a0,a2
     412 00000fd0     0960          rets
     413                    
     414                    *****************************************************************************
     415                    *
     416                    * INPUT:        a4 = * NULL terminated ASCII string (print_string_C2)
     417                    *               centers & prints a text string
     418                    *
     419                    *-----------------------------------------------------------------------------
     420                    
     421 00000fe0            SUBRP  print_string_C
     422                    
     423 00000fe0     09e4          movi    message_buffer,a4
         00000ff0 00000040- 
     424 00001010     09e0          movi    frbpcenter_justify,a0
         00001020 00001250' 
     425 00001040     0780          move    a0,@mess_justify,L      ;justification method
         00001050 000005b0- 
     426 00001070     0d3f          callr   frbpcenter_justify
         00001080     001c  
     427 00001090     0d3f          callr   print_string2b
         000010a0     0066  
     428 000010b0     0960          rets
     429                    
     430 000010c0           print_string_C2
     431 000010c0     09e0          movi    frbpcenter_justify,a0
         000010d0 00001250' 
     432 000010f0     0780          move    a0,@mess_justify,L      ;justification method
         00001100 000005b0- 
     433 00001120     0d3f          callr   frbpcenter_justify
         00001130     0011  
     434 00001140     0d3f          callr   print_string2b
         00001150     005b  
     435 00001160     0960          rets
     436                    
     437 00001170            SUBR    print_string_Z2
     438 00001170     09e4          movi    message_buffer,a4
         00001180 00000040- 
     439 000011a0     09e0          movi    frbpcenter_justify,a0
         000011b0 00001250' 
     440 000011d0     0780          move    a0,@mess_justify,L      ;justification method
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

string printing stuff                                                PAGE   10

         000011e0 000005b0- 
     441 00001200     0d3f          callr   frbpcenter_justify
         00001210     0003  
     442 00001220     0d3f          callr   print_string_with_zb
         00001230     00c4  
     443 00001240     0960          rets
     444                    
     445 00001250           frbpcenter_justify
     446 00001250                   PUSH    a2,a4
     447 00001270     0d3f          callr   get_string_len2
         00001280     ffab  
     448 00001290     2fe2          srl     1,a2                    ;/2
     449 000012a0     05a0          move    @mess_cursx,a0
         000012b0 00000540- 
     450 000012d0     4440          sub     a2,a0                   ;- string_width/2
     451 000012e0     0580          move    a0,@mess_cursx2         ;message cursor pos X
         000012f0 00000550- 
     452 00001310                   PULL    a2,a4
     453 00001330     0960          rets
     454                    
     455                    *****************************************************************************
     456                    *
     457                    * INPUT:        a4 = * NULL terminated ASCII string (print_string_C2)
     458                    *               right justifies & prints a text string
     459                    *
     460                    *-----------------------------------------------------------------------------
     461                    
     462 00001340            SUBRP  print_string_R
     463                    
     464 00001340     09e4          movi    message_buffer,a4
         00001350 00000040- 
     465 00001370     09e0          movi    awvdright_justify,a0
         00001380 000014d0' 
     466 000013a0     0780          move    a0,@mess_justify,L      ;justification method
         000013b0 000005b0- 
     467 000013d0     0d3f          callr   awvdright_justify
         000013e0     000e  
     468 000013f0     0d3f          callr   print_string2b
         00001400     0030  
     469 00001410     0960          rets
     470                    
     471 00001420           print_string_R2
     472 00001420     09e0          movi    awvdright_justify,a0
         00001430 000014d0' 
     473 00001450     0780          move    a0,@mess_justify,L      ;justification method
         00001460 000005b0- 
     474 00001480     0d3f          callr   awvdright_justify
         00001490     0003  
     475 000014a0     0d3f          callr   print_string2b
         000014b0     0025  
     476 000014c0     0960          rets
     477                    
     478 000014d0           awvdright_justify
     479 000014d0                   PUSH    a2,a4
     480 000014f0     0d3f          callr   get_string_len2
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

string printing stuff                                                PAGE   11

         00001500     ff83  
     481 00001510     05a0          move    @mess_cursx,a0
         00001520 00000540- 
     482 00001540     4440          sub     a2,a0                   ;- string_width/2
     483 00001550     0580          move    a0,@mess_cursx2         ;message cursor pos X
         00001560 00000550- 
     484 00001580                   PULL    a2,a4
     485 000015a0     0960          rets
     486                    
     487                    *****************************************************************************
     488                    *
     489                    * INPUT:        a4 = * NULL terminated ASCII string (print_string2)
     490                    *
     491                    *-----------------------------------------------------------------------------
     492                    
     493 000015b0           zujcleft_justify
     494 000015b0     05a0          move    @mess_cursx,a0
         000015c0 00000540- 
     495 000015e0     0580          move    a0,@mess_cursx2
         000015f0 00000550- 
     496 00001610     0960          rets
     497                    
     498 00001620            SUBRP  print_string
     499                    
     500 00001620     09e4          movi    message_buffer,a4
         00001630 00000040- 
     501                    
     502 00001650           print_string2
     503 00001650     09e0          movi    zujcleft_justify,a0
         00001660 000015b0' 
     504 00001680     0780          move    a0,@mess_justify,L      ;justification method
         00001690 000005b0- 
     505 000016b0     05a0          move    @mess_cursx,a0
         000016c0 00000540- 
     506 000016e0     0580          move    a0,@mess_cursx2
         000016f0 00000550- 
     507 00001710           print_string2b
     508                    
     509 00001710     1504          subk    8,a4
     510 00001720           zujcnext_char
     511 00001720     1104          addk    8,a4
     512 00001730     8e80          movb    *a4,a0
     513 00001740     0b80          andi    0ffh,a0
         00001750 ffffff00  
     514 00001770     ca59          jrz     zujcdone
     515 00001780     0b40          cmpi    1,a0
         00001790     fffe  
     516 000017a0     cb13          jrne    zujcno_newline
     517                    ;newline
     518 000017b0     05a0          move    @mess_line_spacing,a0
         000017c0 00000590- 
     519 000017e0     05a1          move    @mess_cursy,a1
         000017f0 00000560- 
     520 00001810     4001          add     a0,a1
     521 00001820     0581          move    a1,@mess_cursy
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

string printing stuff                                                PAGE   12

         00001830 00000560- 
     522                    
     523 00001850     07a0          move    @mess_justify,a0,L      ;justification method
         00001860 000005b0- 
     524 00001880     0b04          addi    8,a4                    ;skip newline char
         00001890     0008  
     525 000018a0     0920          call    a0
     526 000018b0     0be4          subi    8,a4
         000018c0     fff7  
     527 000018d0     c0e4          jruc    zujcnext_char
     528 000018e0           zujcno_newline
     529 000018e0     0b40          cmpi    32,a0
         000018f0     ffdf  
     530 00001900     cb0b          jrne    zujcno_space
     531                    ;space
     532 00001910     05a0          move    @mess_space_width,a0
         00001920 00000570- 
     533 00001940     05a1          move    @mess_cursx2,a1
         00001950 00000550- 
     534 00001970     4001          add     a0,a1
     535 00001980     0581          move    a1,@mess_cursx2
         00001990 00000550- 
     536 000019b0     c0d6          jruc    zujcnext_char
     537 000019c0           zujcno_space
     538 000019c0     24a0          sll     5,a0                    ;x 32 bits
     539 000019d0     07a1          move    @message_ascii,a1,L
         000019e0 00000000- 
     540 00001a00     4020          add     a1,a0
     541 00001a10     8602          move    *a0,a2,L                ;* image
     542 00001a20     cacf          jrz     zujcnext_char
     543                    
     544 00001a30                   PUSH    a4,a8
     545 00001a50     07b0          move    @message_palette,b0,L   ;* palette
         00001a60 00000020- 
     546 00001a80     05a0          move    @mess_cursx2,a0
         00001a90 00000550- 
     547 00001ab0     2600          sll     16,a0                   ;x val
     548 00001ac0     05a1          move    @mess_cursy,a1
         00001ad0 00000560- 
     549 00001af0     2601          sll     16,a1                   ;y val
     550                    ;       movi    120,a3                  ;z pos
     551 00001b00     09c3          movi    20000,a3                ;Z
         00001b10     4e20  
     552 00001b20     09e4          movi    DMAWNZ|M_SCRNREL,a4     ;DMA flags
         00001b30 0000a002  
     553 00001b50     05a5          move    @mess_objid,a5          ;object ID
         00001b60 000005a0- 
     554 00001b80     56c6          clr     a6                      ;x vel
     555 00001b90     56e7          clr     a7                      ;y vel
     556 00001ba0     0d5f          calla   BEGINOBJP
         00001bb0 00000000! 
     557 00001bd0     05a1          move    @mess_cursx2,a1
         00001be0 00000550- 
     558 00001c00     05a0          MOVE    @IGNORE_CHAR_WIDTH,A0
         00001c10 00000610- 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

string printing stuff                                                PAGE   13

     559 00001c30     cb03          JRNZ    zujcIGNORE_IT
     560 00001c40     b500          move    *a8(OSIZEX),a0
         00001c50     0130  
     561 00001c60     4001          add     a0,a1
     562 00001c70           zujcIGNORE_IT
     563 00001c70     05a0          move    @mess_spacing,a0
         00001c80 00000580- 
     564 00001ca0     4001          add     a0,a1
     565 00001cb0     0581          move    a1,@mess_cursx2
         00001cc0 00000550- 
     566 00001ce0                   PULL    a4,a8
     567 00001d00     c0a1          jruc    zujcnext_char
     568                    
     569 00001d10           zujcdone
     570 00001d10     0960          rets
     571                    ****
     572                    * do something
     573 00001d20           pvhaleft_justify
     574 00001d20     05a0          move    @mess_cursx,a0
         00001d30 00000540- 
     575 00001d50     0580          move    a0,@mess_cursx2
         00001d60 00000550- 
     576 00001d80     0960          rets
     577                    
     578 00001d90            SUBRP  print_string_with_z
     579                    
     580 00001d90     09e4          movi    message_buffer,a4
         00001da0 00000040- 
     581                    
     582 00001dc0     09e0          movi    pvhaleft_justify,a0
         00001dd0 00001d20' 
     583 00001df0     0780          move    a0,@mess_justify,L      ;justification method
         00001e00 000005b0- 
     584 00001e20     05a0          move    @mess_cursx,a0
         00001e30 00000540- 
     585 00001e50     0580          move    a0,@mess_cursx2
         00001e60 00000550- 
     586 00001e80            SUBRP  print_string_with_zb
     587                    
     588 00001e80     1504          subk    8,a4
     589 00001e90           pvhanext_char
     590 00001e90     1104          addk    8,a4
     591 00001ea0     8e80          movb    *a4,a0
     592 00001eb0     0b80          andi    0ffh,a0
         00001ec0 ffffff00  
     593 00001ee0     ca5a          jrz     pvhadone
     594 00001ef0     0b40          cmpi    1,a0
         00001f00     fffe  
     595 00001f10     cb13          jrne    pvhano_newline
     596                    ;newline
     597 00001f20     05a0          move    @mess_line_spacing,a0
         00001f30 00000590- 
     598 00001f50     05a1          move    @mess_cursy,a1
         00001f60 00000560- 
     599 00001f80     4001          add     a0,a1
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

string printing stuff                                                PAGE   14

     600 00001f90     0581          move    a1,@mess_cursy
         00001fa0 00000560- 
     601                    
     602 00001fc0     07a0          move    @mess_justify,a0,L      ;justification method
         00001fd0 000005b0- 
     603 00001ff0     0b04          addi    8,a4                    ;skip newline char
         00002000     0008  
     604 00002010     0920          call    a0
     605 00002020     0be4          subi    8,a4
         00002030     fff7  
     606 00002040     c0e4          jruc    pvhanext_char
     607 00002050           pvhano_newline
     608 00002050     0b40          cmpi    32,a0
         00002060     ffdf  
     609 00002070     cb0b          jrne    pvhano_space
     610                    ;space
     611 00002080     05a0          move    @mess_space_width,a0
         00002090 00000570- 
     612 000020b0     05a1          move    @mess_cursx2,a1
         000020c0 00000550- 
     613 000020e0     4001          add     a0,a1
     614 000020f0     0581          move    a1,@mess_cursx2
         00002100 00000550- 
     615 00002120     c0d6          jruc    pvhanext_char
     616 00002130           pvhano_space
     617 00002130     24a0          sll     5,a0                    ;x 32 bits
     618 00002140     07a1          move    @message_ascii,a1,L
         00002150 00000000- 
     619 00002170     4020          add     a1,a0
     620 00002180     8602          move    *a0,a2,L                ;* image
     621 00002190     cacf          jrz     pvhanext_char
     622                    
     623 000021a0                   PUSH    a4,a8
     624 000021c0     07b0          move    @message_palette,b0,L   ;* palette
         000021d0 00000020- 
     625 000021f0     05a0          move    @mess_cursx2,a0
         00002200 00000550- 
     626 00002220     2600          sll     16,a0                   ;x val
     627 00002230     05a1          move    @mess_cursy,a1
         00002240 00000560- 
     628 00002260     2601          sll     16,a1                   ;y val
     629                    ;       movi    120,a3                  ;z pos
     630                    ;       movi    20000,a3                ;Z
     631 00002270     07a3          move    @mess_z,a3,L
         00002280 000005f0- 
     632 000022a0     09e4          movi    DMAWNZ|M_SCRNREL,a4     ;DMA flags
         000022b0 0000a002  
     633 000022d0     05a5          move    @mess_objid,a5          ;object ID
         000022e0 000005a0- 
     634 00002300     56c6          clr     a6                      ;x vel
     635 00002310     56e7          clr     a7                      ;y vel
     636 00002320     0d5f          calla   BEGINOBJP
         00002330 00000000! 
     637 00002350     05a1          move    @mess_cursx2,a1
         00002360 00000550- 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

string printing stuff                                                PAGE   15

     638 00002380     05a0          MOVE    @IGNORE_CHAR_WIDTH,A0
         00002390 00000610- 
     639 000023b0     cb03          JRNZ    pvhaIGNORE_IT
     640 000023c0     b500          move    *a8(OSIZEX),a0
         000023d0     0130  
     641 000023e0     4001          add     a0,a1
     642 000023f0           pvhaIGNORE_IT
     643 000023f0     05a0          move    @mess_spacing,a0
         00002400 00000580- 
     644 00002420     4001          add     a0,a1
     645 00002430     0581          move    a1,@mess_cursx2
         00002440 00000550- 
     646 00002460                   PULL    a4,a8
     647 00002480     c0a0          jruc    pvhanext_char
     648                    
     649 00002490           pvhadone
     650 00002490     0960          rets
     651                    
     652                    *****************************************************************************
     653                    * end2
     654                    * INPUT :       a2 = * to message
     655                    *
     656                    *-----------------------------------------------------------------------------
     657                    
     658 000024a0            SUBRP  setup_message
     659                    
     660 000024a0     09c0          movi    TYPTEXT,a0
         000024b0     0700  
     661 000024c0     0580          move    a0,@mess_objid          ;OBJ ID's for text
         000024d0 000005a0- 
     662                    
     663 000024f0     9640          move    *a2+,a0,L               ;* ascii lookup table
     664 00002500     0780          move    a0,@message_ascii,L     ;
         00002510 00000000- 
     665 00002530     9440          move    *a2+,a0                 ;space char width
     666 00002540     0580          move    a0,@mess_space_width    ;
         00002550 00000570- 
     667 00002570     9440          move    *a2+,a0                 ;spacing between chars
     668 00002580     0580          move    a0,@mess_spacing        ;
         00002590 00000580- 
     669 000025b0     9440          move    *a2+,a0                 ;message cursor pos X
     670 000025c0     0580          move    a0,@mess_cursx          ;
         000025d0 00000540- 
     671 000025f0     9440          move    *a2+,a0                 ;message cursor pos Y
     672 00002600     0580          move    a0,@mess_cursy          ;
         00002610 00000560- 
     673 00002630     9640          move    *a2+,a0,L
     674 00002640     0780          move    a0,@message_palette,L
         00002650 00000020- 
     675 00002670     09e0          movi    pwxbrets,a0
         00002680 000026d0' 
     676 000026a0     0780          move    a0,@mess_justify,L      ;justification method
         000026b0 000005b0- 
     677 000026d0           pwxbrets
     678 000026d0     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

string printing stuff                                                PAGE   16

     679                    
     680                    ********************************************************************************
     681                    * END3
     682                    * INPUT :       a2 = * to message
     683                    
     684 000026e0            SUBRP  print_message
     685                    
     686                    
     687 000026e0                   PUSH    a4,a5,a6,a7,a8,a9,a10,a11
     688                    
     689 00002700     09c0          movi    TYPTEXT,a0
         00002710     0700  
     690 00002720     0580          move    a0,@mess_objid          ;OBJ ID's for text
         00002730 000005a0- 
     691                    
     692 00002750     9640          move    *a2+,a0,L               ;* ascii lookup table
     693 00002760     0780          move    a0,@message_ascii,L     ;
         00002770 00000000- 
     694 00002790     9440          move    *a2+,a0                 ;space char width
     695 000027a0     0580          move    a0,@mess_space_width    ;
         000027b0 00000570- 
     696 000027d0     9440          move    *a2+,a0                 ;spacing between chars
     697 000027e0     0580          move    a0,@mess_spacing        ;
         000027f0 00000580- 
     698 00002810     9440          move    *a2+,a0                 ;message cursor pos X
     699 00002820     0580          move    a0,@mess_cursx          ;
         00002830 00000540- 
     700 00002850     9440          move    *a2+,a0                 ;message cursor pos Y
     701 00002860     0580          move    a0,@mess_cursy          ;
         00002870 00000560- 
     702 00002890     9640          move    *a2+,a0,L
     703 000028a0     0780          move    a0,@message_palette,L
         000028b0 00000020- 
     704 000028d0     9640          move    *a2+,a0,L               ;print method
     705                    
     706 000028e0     4c44          move    a2,a4                   ;* text string
     707 000028f0     0920          call    a0
     708                    
     709 00002900                   PULL    a4,a5,a6,a7,a8,a9,a10,a11
     710 00002920     0960          rets
     711                    
     712                    
     713                    *****************************************************************************
     714                    * end4
     715 00002930           init_convert_table
     716 00002930     0041          .word   'A','B','C','D','E','F','G','H'
     717 000029b0     0049          .word   'I','J','K','L','M','N','O','P'
     718 00002a30     0051          .word   'Q','R','S','T','U','V','W','X'
     719 00002ab0     0059          .word   'Y','Z',' '
     720                    
     721                    *****************************************************************************
     722                    *****
     723 00002ae0           font9_ascii
     724 00002ae0 00000000   .long 0,0,0,0,0,0,0,0                                                  ;$00
     725 00002be0 00000000   .long 0,0,0,0,0,0,0,0                                                  ;$08
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

string printing stuff                                                PAGE   17

     726 00002ce0 00007420"  .long FNT9_SPC,FNT9_DEL,FNT9_END,0,0,0,0,0                     ;$10    SPC,BAK,END
     727 00002de0 00000000   .long 0,0,0,0,0,0,0,0                                                  ;$18
     728 00002ee0 00000000   .long 0,FNT9_EXP,0,0,0,0,0,FNT9_APO                                            ;$20    SP! " # $ % & '
     729 00002fe0 00000000   .long 0,0,0,0,0,0,FNT9_PER,0                                                   ;$28    ( ) * + , - . /
     730 000030e0 00007960"  .long FNT9_0,FNT9_1,FNT9_2,FNT9_3,FNT9_4,FNT9_5,FNT9_6,FNT9_7          ;$30    0 1 2 3 4 5 6 7
     731 000031e0 00007880"  .long FNT9_8,FNT9_9,FNT9_COL,0,0,0,0,0                                 ;$38    8 9 : ; < - > ?
     732 000032e0 00000000   .long 0,FNT9_A,FNT9_B,FNT9_C,FNT9_D,FNT9_E,FNT9_F,FNT9_G               ;$40    @ A B C D E F G
     733 000033e0 000069f0"  .long FNT9_H,FNT9_I,FNT9_J,FNT9_K,FNT9_L,FNT9_M,FNT9_N,FNT9_O          ;$48    H I J K L M N O
     734 000034e0 00006d70"  .long FNT9_P,FNT9_Q,FNT9_R,FNT9_S,FNT9_T,FNT9_U,FNT9_V,FNT9_W          ;$50    P Q R S T U V W
     735 000035e0 000070f0"  .long FNT9_X,FNT9_Y,FNT9_Z,0,0,0,0,0                                   ;$58    X Y Z [ \ ] ^ _
     736 000036e0 00000000   .long 0,FNT9_A,FNT9_B,FNT9_C,FNT9_D,FNT9_E,FNT9_F,FNT9_G               ;$60    ` a b c d e f g
     737 000037e0 000069f0"  .long FNT9_H,FNT9_I,FNT9_J,FNT9_K,FNT9_L,FNT9_M,FNT9_N,FNT9_O          ;$68    h i j k l m n o
     738 000038e0 00006d70"  .long FNT9_P,FNT9_Q,FNT9_R,FNT9_S,FNT9_T,FNT9_U,FNT9_V,FNT9_W          ;$70    p q r s t u v w
     739 000039e0 000070f0"  .long FNT9_X,FNT9_Y,FNT9_Z,0,0,0,0,0                                   ;$78    x y z { | } ~
     740                    
     741 00003ae0           font9A_ascii
     742 00003ae0 00000000   .long 0,0,0,0,0,0,0,0                                                  ;$00
     743 00003be0 00000000   .long 0,0,0,0,0,0,0,0                                                  ;$08
     744 00003ce0 00007420"  .long FNT9_SPC,FNT9_DEL,FNT9_END,0,0,0,0,0                     ;$10    SPC,BAK,END
     745 00003de0 00000000   .long 0,0,0,0,0,0,0,0                                                  ;$18
     746 00003ee0 00000000   .long 0,FNT9_EXP,0,0,0,0,0,FNT9_APO                                            ;$20    SP! " # $ % & '
     747 00003fe0 00000000   .long 0,0,0,0,0,0,FNT9_PER,0                                                   ;$28    ( ) * + , - . /
     748 000040e0 00007dc0"  .long FNT9_0A,FNT9_1A,FNT9_2A,FNT9_3A,FNT9_4A,FNT9_5A,FNT9_6A,FNT9_7A          ;$30    0 1 2 3 4 5 6 7
     749 000041e0 00007ce0"  .long FNT9_8A,FNT9_9A,FNT9_COL,0,0,0,0,0                                       ;$38    8 9 : ; < - > ?
     750 000042e0 00000000   .long 0,FNT9_A,FNT9_B,FNT9_C,FNT9_D,FNT9_E,FNT9_F,FNT9_G               ;$40    @ A B C D E F G
     751 000043e0 000069f0"  .long FNT9_H,FNT9_I,FNT9_J,FNT9_K,FNT9_L,FNT9_M,FNT9_N,FNT9_O          ;$48    H I J K L M N O
     752 000044e0 00006d70"  .long FNT9_P,FNT9_Q,FNT9_R,FNT9_S,FNT9_T,FNT9_U,FNT9_V,FNT9_W          ;$50    P Q R S T U V W
     753 000045e0 000070f0"  .long FNT9_X,FNT9_Y,FNT9_Z,0,0,0,0,0                                   ;$58    X Y Z [ \ ] ^ _
     754 000046e0 00000000   .long 0,FNT9_A,FNT9_B,FNT9_C,FNT9_D,FNT9_E,FNT9_F,FNT9_G               ;$60    ` a b c d e f g
     755 000047e0 000069f0"  .long FNT9_H,FNT9_I,FNT9_J,FNT9_K,FNT9_L,FNT9_M,FNT9_N,FNT9_O          ;$68    h i j k l m n o
     756 000048e0 00006d70"  .long FNT9_P,FNT9_Q,FNT9_R,FNT9_S,FNT9_T,FNT9_U,FNT9_V,FNT9_W          ;$70    p q r s t u v w
     757 000049e0 000070f0"  .long FNT9_X,FNT9_Y,FNT9_Z,0,0,0,0,0                                   ;$78    x y z { | } ~
     758                    
     759 00004ae0           font18_ascii
     760 00004ae0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$00
     761 00004be0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$08
     762 00004ce0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$10
     763 00004de0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$18
     764 00004ee0 00000000   .long 0,WGSF18EXC,0,0,0,0,0,0                                          ;$20    SP! " # $ % & '
     765 00004fe0 00000000   .long 0,0,0,0,WGSF18COM,0,WGSF18PER,0                                                  ;$28    ( ) * + 
     766 000050e0 00000c00"  .long WGSF18_0,WGSF18_1,WGSF18_2,WGSF18_3,WGSF18_4,WGSF18_5,WGSF18_6,WGSF18_7                  ;$30    
     767 000051e0 00000f80"  .long WGSF18_8,WGSF18_9,0,0,0,0,0,0                                            ;$38    8 9 : ; < - > ?
     768 000052e0 00000000   .long 0,WGSF18_A,WGSF18_B,WGSF18_C,WGSF18_D,WGSF18_E,WGSF18_F,WGSF18_G                 ;$40    @ A B C 
     769 000053e0 000003b0"  .long WGSF18_H,WGSF18_I,WGSF18_J,WGSF18_K,WGSF18_L,WGSF18_M,WGSF18_N,WGSF18_O                  ;$48    
     770 000054e0 00000730"  .long WGSF18_P,WGSF18_Q,WGSF18_R,WGSF18_S,WGSF18_T,WGSF18_U,WGSF18_V,WGSF18_W                  ;$50    
     771 000055e0 00000ab0"  .long WGSF18_X,WGSF18_Y,WGSF18_Z,0,0,0,0,0                                             ;$58    X Y Z [ 
     772 000056e0 00000000   .long 0,WGSF18_A,WGSF18_B,WGSF18_C,WGSF18_D,WGSF18_E,WGSF18_F,WGSF18_G                 ;$60    ` a b c 
     773 000057e0 000003b0"  .long WGSF18_H,WGSF18_I,WGSF18_J,WGSF18_K,WGSF18_L,WGSF18_M,WGSF18_N,WGSF18_O                  ;$68    
     774 000058e0 00000730"  .long WGSF18_P,WGSF18_Q,WGSF18_R,WGSF18_S,WGSF18_T,WGSF18_U,WGSF18_V,WGSF18_W                  ;$70    
     775 000059e0 00000ab0"  .long WGSF18_X,WGSF18_Y,WGSF18_Z,0,0,0,0,0                                             ;$78    x y z { 
     776                    
     777                    
     778 00005ae0           osgemd_ascii
     779 00005ae0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$00
     780 00005be0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$08
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

string printing stuff                                                PAGE   18

     781 00005ce0 000057c0"  .long OSGEMD_SPC,OSGEMD_DEL,OSGEMD_END,0,0,0,0,0                               ;$10    SPC,BAK,END
     782 00005de0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$18
     783                    ; .long 0,OSGEMD_EXP,0,OSGEMD_NUM,OSGEMD_DOL,0,OSGEMD_AND,OSGEMD_APO            ;$20    SP! " # $ % & '
     784 00005ee0 00000000   .long 0,OSGEMD_EXP,0,OSGEMD_NUM,OSGEMD_DOL,OSGEMD_PCT,OSGEMD_AND,OSGEMD_APO            ;$20    SP! " # 
     785 00005fe0 00005970"  .long OSGEMD_OBR,OSGEMD_CBR,0,0,0,OSGEMD_DAS,OSGEMD_DOT,OSGEMD_SLS             ;$28    ( ) * + , - . /
     786 000060e0 00005b20"  .long OSGEMD_0,OSGEMD_1,OSGEMD_2,OSGEMD_3,OSGEMD_4,OSGEMD_5,OSGEMD_6,OSGEMD_7  ;$30    0 1 2 3 4 5 6 7
     787 000061e0 00005fa0"  .long OSGEMD_8,OSGEMD_9,OSGEMD_COL,0,0,0,0,OSGEMD_QUE                          ;$38    8 9 : ; < - > ?
     788 000062e0 00000000   .long 0,OSGEMD_A,OSGEMD_B,OSGEMD_C,OSGEMD_D,OSGEMD_E,OSGEMD_F,OSGEMD_G         ;$40    @ A B C D E F G
     789 000063e0 00004800"  .long OSGEMD_H,OSGEMD_I,OSGEMD_J,OSGEMD_K,OSGEMD_L,OSGEMD_M,OSGEMD_N,OSGEMD_O  ;$48    H I J K L M N O
     790 000064e0 00004c80"  .long OSGEMD_P,OSGEMD_Q,OSGEMD_R,OSGEMD_S,OSGEMD_T,OSGEMD_U,OSGEMD_V,OSGEMD_W  ;$50    P Q R S T U V W
     791 000065e0 00005100"  .long OSGEMD_X,OSGEMD_Y,OSGEMD_Z,0,0,0,0,0                                     ;$58    X Y Z [ \ ] ^ _
     792 000066e0 00000000   .long 0,OSGEMD_A,OSGEMD_B,OSGEMD_C,OSGEMD_D,OSGEMD_E,OSGEMD_F,OSGEMD_G         ;$60    ` a b c d e f g
     793 000067e0 00004800"  .long OSGEMD_H,OSGEMD_I,OSGEMD_J,OSGEMD_K,OSGEMD_L,OSGEMD_M,OSGEMD_N,OSGEMD_O  ;$68    h i j k l m n o
     794 000068e0 00004c80"  .long OSGEMD_P,OSGEMD_Q,OSGEMD_R,OSGEMD_S,OSGEMD_T,OSGEMD_U,OSGEMD_V,OSGEMD_W  ;$70    p q r s t u v w
     795 000069e0 00005100"  .long OSGEMD_X,OSGEMD_Y,OSGEMD_Z,0,0,0,0,0                                     ;$78    x y z { | } ~
     796                    
     797                    ;sgmd8_ascii
     798                    ; .long 0,0,0,0,0,0,0,0                                                         ;$00
     799                    ; .long 0,0,0,0,0,0,0,0                                                         ;$08
     800                    ; .long 0,0,0,0,0,0,0,0                                                         ;$10
     801                    ; .long 0,0,0,0,0,0,0,0                                                         ;$18
     802                    ; .long 0,SGMD8_EXP,0,SGMD8_NUM,0,SGMD8_PCT,SGMD8_AND,SGMD8_APO                 ;$20    SP! " # $ % & '
     803                    ; .long SGMD8_OBR,SGMD8_CBR,0,0,SGMD8_COM,SGMD8_DAS,SGMD8_DOT,SGMD8_SLS         ;$28    ( ) * + , - . /
     804                    ; .long SGMD8_0,SGMD8_1,SGMD8_2,SGMD8_3,SGMD8_4,SGMD8_5,SGMD8_6,SGMD8_7         ;$30    0 1 2 3 4 5 6 7
     805                    ; .long SGMD8_8,SGMD8_9,SGMD8_COL,0,0,0,0,0                                     ;$38    8 9 : ; < - > ?
     806                    ; .long 0,SGMD8_A,SGMD8_B,SGMD8_C,SGMD8_D,SGMD8_E,SGMD8_F,SGMD8_G               ;$40    @ A B C D E F G
     807                    ; .long SGMD8_H,SGMD8_I,SGMD8_J,SGMD8_K,SGMD8_L,SGMD8_M,SGMD8_N,SGMD8_O         ;$48    H I J K L M N O
     808                    ; .long SGMD8_P,SGMD8_Q,SGMD8_R,SGMD8_S,SGMD8_T,SGMD8_U,SGMD8_V,SGMD8_W         ;$50    P Q R S T U V W
     809                    ; .long SGMD8_X,SGMD8_Y,SGMD8_Z,0,0,0,0,0                                       ;$58    X Y Z [ \ ] ^ _
     810                    ; .long 0,SGMD8_A,SGMD8_B,SGMD8_C,SGMD8_D,SGMD8_E,SGMD8_F,SGMD8_G               ;$60    ` a b c d e f g
     811                    ; .long SGMD8_H,SGMD8_I,SGMD8_J,SGMD8_K,SGMD8_L,SGMD8_M,SGMD8_N,SGMD8_O         ;$68    h i j k l m n o
     812                    ; .long SGMD8_P,SGMD8_Q,SGMD8_R,SGMD8_S,SGMD8_T,SGMD8_U,SGMD8_V,SGMD8_W         ;$70    p q r s t u v w
     813                    ; .long SGMD8_X,SGMD8_Y,SGMD8_Z,0,0,0,0,0                                       ;$78    x y z { | } ~
     814                    
     815 00006ae0           osgmd8_ascii
     816 00006ae0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$00
     817 00006be0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$08
     818 00006ce0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$10
     819 00006de0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$18
     820 00006ee0 00000000   .long 0,osgmd8_EXP,0,osgmd8_NUM,0,osgmd8_PCT,osgmd8_AND,osgmd8_APO             ;$20    SP! " # $ % & '
     821 00006fe0 00002970"  .long osgmd8_OBR,osgmd8_CBR,0,0,osgmd8_COM,osgmd8_DAS,osgmd8_DOT,osgmd8_SLS    ;$28    ( ) * + , - . /
     822 000070e0 000022e0"  .long osgmd8_0,osgmd8_1,osgmd8_2,osgmd8_3,osgmd8_4,osgmd8_5,osgmd8_6,osgmd8_7  ;$30    0 1 2 3 4 5 6 7
     823 000071e0 00002660"  .long osgmd8_8,osgmd8_9,osgmd8_COL,0,osgmd8_OPQ,0,osgmd8_CLQ,0                 ;$38    8 9 : ; < - > ?
     824 000072e0 00000000   .long 0,osgmd8_A,osgmd8_B,osgmd8_C,osgmd8_D,osgmd8_E,osgmd8_F,osgmd8_G         ;$40    @ A B C D E F G
     825 000073e0 00001a90"  .long osgmd8_H,osgmd8_I,osgmd8_J,osgmd8_K,osgmd8_L,osgmd8_M,osgmd8_N,osgmd8_O  ;$48    H I J K L M N O
     826 000074e0 00001e10"  .long osgmd8_P,osgmd8_Q,osgmd8_R,osgmd8_S,osgmd8_T,osgmd8_U,osgmd8_V,osgmd8_W  ;$50    P Q R S T U V W
     827 000075e0 00002190"  .long osgmd8_X,osgmd8_Y,osgmd8_Z,0,0,0,0,0                                     ;$58    X Y Z [ \ ] ^ _
     828 000076e0 00000000   .long 0,osgmd8_A,osgmd8_B,osgmd8_C,osgmd8_D,osgmd8_E,osgmd8_F,osgmd8_G         ;$60    ` a b c d e f g
     829 000077e0 00001a90"  .long osgmd8_H,osgmd8_I,osgmd8_J,osgmd8_K,osgmd8_L,osgmd8_M,osgmd8_N,osgmd8_O  ;$68    h i j k l m n o
     830 000078e0 00001e10"  .long osgmd8_P,osgmd8_Q,osgmd8_R,osgmd8_S,osgmd8_T,osgmd8_U,osgmd8_V,osgmd8_W  ;$70    p q r s t u v w
     831 000079e0 00002190"  .long osgmd8_X,osgmd8_Y,osgmd8_Z,osgmd8_OPQ,0,osgmd8_CLQ,0,0                   ;$78    x y z { | } ~
     832                    
     833 00007ae0           wgsf24_ascii
     834 00007ae0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$00
     835 00007be0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$08
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

string printing stuff                                                PAGE   19

     836 00007ce0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$10
     837 00007de0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$18
     838 00007ee0 00000000   .long 0,WGSF24EXC,0,0,0,0,0,0                                                  ;$20    SP! " # $ % & '
     839 00007fe0 00000000   .long 0,0,0,0,WGSF24COM,0,WGSF24PER,0                                          ;$28    ( ) * + , - . /
     840 000080e0 00000000!  .long WGSF24_0,WGSF24_1,WGSF24_2,WGSF24_3,WGSF24_4,WGSF24_5,WGSF24_6,WGSF24_7  ;$30    0 1 2 3 4 5 6 7
     841 000081e0 00000000!  .long WGSF24_8,WGSF24_9,0,0,0,0,0,0                                            ;$38    8 9 : ; < - > ?
     842 000082e0 00000000   .long 0,WGSF24_A,WGSF24_B,WGSF24_C,WGSF24_D,WGSF24_E,WGSF24_F,WGSF24_G         ;$40    @ A B C D E F G
     843 000083e0 00000000!  .long WGSF24_H,WGSF24_I,WGSF24_J,WGSF24_K,WGSF24_L,WGSF24_M,WGSF24_N,WGSF24_O  ;$48    H I J K L M N O
     844 000084e0 00000000!  .long WGSF24_P,WGSF24_Q,WGSF24_R,WGSF24_S,WGSF24_T,WGSF24_U,WGSF24_V,WGSF24_W  ;$50    P Q R S T U V W
     845 000085e0 00000000!  .long WGSF24_X,WGSF24_Y,WGSF24_Z,0,0,0,0,0                                     ;$58    X Y Z [ \ ] ^ _
     846 000086e0 00000000   .long 0,WGSF24_A,WGSF24_B,WGSF24_C,WGSF24_D,WGSF24_E,WGSF24_F,WGSF24_G         ;$60    ` a b c d e f g
     847 000087e0 00000000!  .long WGSF24_H,WGSF24_I,WGSF24_J,WGSF24_K,WGSF24_L,WGSF24_M,WGSF24_N,WGSF24_O  ;$68    h i j k l m n o
     848 000088e0 00000000!  .long WGSF24_P,WGSF24_Q,WGSF24_R,WGSF24_S,WGSF24_T,WGSF24_U,WGSF24_V,WGSF24_W  ;$70    p q r s t u v w
     849 000089e0 00000000!  .long WGSF24_X,WGSF24_Y,WGSF24_Z,0,0,0,0,0                                     ;$78    x y z { | } ~
     850                    
     851 00008ae0           wsf10_ascii
     852 00008ae0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$00
     853 00008be0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$08
     854 00008ce0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$10
     855 00008de0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$18
     856 00008ee0 00000000   .long 0,WSF10EXC,0,WSF10NUM,0,0,0,WSF10APO                                     ;$20    SP! " # $ % & '
     857 00008fe0 00000000   .long 0,0,0,0,WSF10COM,0,WSF10PER,0                                            ;$28    ( ) * + , - . /
     858 000090e0 00009f30"  .long WSF10_0,WSF10_1,WSF10_2,WSF10_3,WSF10_4,WSF10_5,WSF10_6,WSF10_7          ;$30    0 1 2 3 4 5 6 7
     859 000091e0 0000a2b0"  .long WSF10_8,WSF10_9,0,0,0,0,0,0                                              ;$38    8 9 : ; < - > ?
     860 000092e0 00000000   .long 0,WSF10_A,WSF10_B,WSF10_C,WSF10_D,WSF10_E,WSF10_F,WSF10_G                ;$40    @ A B C D E F G
     861 000093e0 000096e0"  .long WSF10_H,WSF10_I,WSF10_J,WSF10_K,WSF10_L,WSF10_M,WSF10_N,WSF10_O          ;$48    H I J K L M N O
     862 000094e0 00009a60"  .long WSF10_P,WSF10_Q,WSF10_R,WSF10_S,WSF10_T,WSF10_U,WSF10_V,WSF10_W          ;$50    P Q R S T U V W
     863 000095e0 00009de0"  .long WSF10_X,WSF10_Y,WSF10_Z,0,0,0,0,0                                        ;$58    X Y Z [ \ ] ^ _
     864 000096e0 00000000   .long 0,WSF10_A,WSF10_B,WSF10_C,WSF10_D,WSF10_E,WSF10_F,WSF10_G                ;$60    ` a b c d e f g
     865 000097e0 000096e0"  .long WSF10_H,WSF10_I,WSF10_J,WSF10_K,WSF10_L,WSF10_M,WSF10_N,WSF10_O          ;$68    h i j k l m n o
     866 000098e0 00009a60"  .long WSF10_P,WSF10_Q,WSF10_R,WSF10_S,WSF10_T,WSF10_U,WSF10_V,WSF10_W          ;$70    p q r s t u v w
     867 000099e0 00009de0"  .long WSF10_X,WSF10_Y,WSF10_Z,0,0,0,0,0                                        ;$78    x y z { | } ~
     868                    
     869 00009ae0           wsf14_ascii
     870 00009ae0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$00
     871 00009be0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$08
     872 00009ce0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$10
     873 00009de0 00000000   .long 0,0,0,0,0,0,0,0                                                          ;$18
     874 00009ee0 00000000   .long 0,WSF14EXC,0,WSF14NUM,0,0,0,WSF14APO                                     ;$20    SP! " # $ % & '
     875 00009fe0 00000000   .long 0,0,0,0,WSF14COM,0,WSF14PER,0                                            ;$28    ( ) * + , - . /
     876 0000a0e0 00008b20"  .long WSF14_0,WSF14_1,WSF14_2,WSF14_3,WSF14_4,WSF14_5,WSF14_6,WSF14_7          ;$30    0 1 2 3 4 5 6 7
     877 0000a1e0 00008dc0"  .long WSF14_8,WSF14_9,WSF14COL,0,0,0,0,0                                       ;$38    8 9 : ; < - > ?
     878 0000a2e0 00000000   .long 0,WSF14_A,WSF14_B,WSF14_C,WSF14_D,WSF14_E,WSF14_F,WSF14_G                ;$40    @ A B C D E F G
     879 0000a3e0 000082d0"  .long WSF14_H,WSF14_I,WSF14_J,WSF14_K,WSF14_L,WSF14_M,WSF14_N,WSF14_O          ;$48    H I J K L M N O
     880 0000a4e0 00008650"  .long WSF14_P,WSF14_Q,WSF14_R,WSF14_S,WSF14_T,WSF14_U,WSF14_V,WSF14_W          ;$50    P Q R S T U V W
     881 0000a5e0 000089d0"  .long WSF14_X,WSF14_Y,WSF14_Z,0,0,0,0,0                                        ;$58    X Y Z [ \ ] ^ _
     882 0000a6e0 00000000   .long 0,WSF14_A,WSF14_B,WSF14_C,WSF14_D,WSF14_E,WSF14_F,WSF14_G                ;$60    ` a b c d e f g
     883 0000a7e0 000082d0"  .long WSF14_H,WSF14_I,WSF14_J,WSF14_K,WSF14_L,WSF14_M,WSF14_N,WSF14_O          ;$68    h i j k l m n o
     884 0000a8e0 00008650"  .long WSF14_P,WSF14_Q,WSF14_R,WSF14_S,WSF14_T,WSF14_U,WSF14_V,WSF14_W          ;$70    p q r s t u v w
     885 0000a9e0 000089d0"  .long WSF14_X,WSF14_Y,WSF14_Z,0,0,0,0,0                                        ;$78    x y z { | } ~
     886                    
     887 0000aae0           ogmd10_ascii
     888 0000aae0 00000000   .long 0,0,0,0,0,0,0,0                                                                  ;$00
     889 0000abe0 00000000   .long 0,0,0,0,0,0,0,0                                                                  ;$08
     890 0000ace0 00000000   .long 0,0,0,0,0,0,0,0                                                                  ;$10
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:21 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

string printing stuff                                                PAGE   20

     891 0000ade0 00000000   .long 0,0,0,0,0,0,0,0                                                                  ;$18
     892 0000aee0 00000000   .long 0,osgmd10_EXP,0,osgmd10_NUM,osgmd10_DOL,osgmd10_PCT,osgmd10_AND,osgmd10_APO      ;$20    SP! " # 
     893 0000afe0 00003e20"  .long osgmd10_OBR,osgmd10_CBR,0,0,osgmd10_COM,osgmd10_DAS,osgmd10_DOT,osgmd10_SLS      ;$28    ( ) * + 
     894 0000b0e0 000038e0"  .long osgmd10_0,osgmd10_1,osgmd10_2,osgmd10_3,osgmd10_4,osgmd10_5,osgmd10_6,osgmd10_7  ;$30    0 1 2 3 
     895 0000b1e0 00003c60"  .long osgmd10_8,osgmd10_9,osgmd10_COL,0,0,0,0,0                                        ;$38    8 9 : ; 
     896 0000b2e0 00000000   .long 0,osgmd10_A,osgmd10_B,osgmd10_C,osgmd10_D,osgmd10_E,osgmd10_F,osgmd10_G          ;$40    @ A B C 
     897 0000b3e0 00003090"  .long osgmd10_H,osgmd10_I,osgmd10_J,osgmd10_K,osgmd10_L,osgmd10_M,osgmd10_N,osgmd10_O  ;$48    H I J K 
     898 0000b4e0 00003410"  .long osgmd10_P,osgmd10_Q,osgmd10_R,osgmd10_S,osgmd10_T,osgmd10_U,osgmd10_V,osgmd10_W  ;$50    P Q R S 
     899 0000b5e0 00003790"  .long osgmd10_X,osgmd10_Y,osgmd10_Z,0,0,0,0,0                                          ;$58    X Y Z [ 
     900 0000b6e0 00000000   .long 0,osgmd10_A,osgmd10_B,osgmd10_C,osgmd10_D,osgmd10_E,osgmd10_F,osgmd10_G          ;$60    ` a b c 
     901 0000b7e0 00003090"  .long osgmd10_H,osgmd10_I,osgmd10_J,osgmd10_K,osgmd10_L,osgmd10_M,osgmd10_N,osgmd10_O  ;$68    h i j k 
     902 0000b8e0 00003410"  .long osgmd10_P,osgmd10_Q,osgmd10_R,osgmd10_S,osgmd10_T,osgmd10_U,osgmd10_V,osgmd10_W  ;$70    p q r s 
     903 0000b9e0 00003790"  .long osgmd10_X,osgmd10_Y,osgmd10_Z,0,0,0,0,0                                          ;$78    x y z { 
     904                    
     905 0000bae0           win_ascii
     906 0000bae0 00000000   .long 0,0,0,0,0,0,0,0                                                                  ;$00
     907 0000bbe0 00000000   .long 0,0,0,0,0,0,0,0                                                                  ;$08
     908 0000bce0 00000000   .long 0,0,0,0,0,0,0,0                                                                  ;$10
     909 0000bde0 00000000   .long 0,0,0,0,0,0,0,0                                                                  ;$18
     910 0000bee0 00000000   .long 0,osgmd10_EXP,0,osgmd10_NUM,osgmd10_DOL,osgmd10_PCT,osgmd10_AND,osgmd10_APO      ;$20    SP! " # 
     911 0000bfe0 00003e20"  .long osgmd10_OBR,osgmd10_CBR,0,0,osgmd10_COM,osgmd10_DAS,osgmd10_DOT,osgmd10_SLS      ;$28    ( ) * + 
     912 0000c0e0 000060c0"  .long WFONT_0,WFONT_1,WFONT_2,WFONT_3,WFONT_4,WFONT_5,WFONT_6,WFONT_7                  ;$30    0 1 2 3 
     913 0000c1e0 00006540"  .long WFONT_8,WFONT_9,osgmd10_COL,0,0,0,0,0                                            ;$38    8 9 : ; 
     914 0000c2e0 00000000   .long 0,osgmd10_A,osgmd10_B,osgmd10_C,osgmd10_D,osgmd10_E,osgmd10_F,osgmd10_G          ;$40    @ A B C 
     915 0000c3e0 00003090"  .long osgmd10_H,osgmd10_I,osgmd10_J,osgmd10_K,osgmd10_L,osgmd10_M,osgmd10_N,osgmd10_O  ;$48    H I J K 
     916 0000c4e0 00003410"  .long osgmd10_P,osgmd10_Q,osgmd10_R,osgmd10_S,osgmd10_T,osgmd10_U,osgmd10_V,osgmd10_W  ;$50    P Q R S 
     917 0000c5e0 00003790"  .long osgmd10_X,osgmd10_Y,osgmd10_Z,0,0,0,0,0                                          ;$58    X Y Z [ 
     918 0000c6e0 00000000   .long 0,osgmd10_A,osgmd10_B,osgmd10_C,osgmd10_D,osgmd10_E,osgmd10_F,osgmd10_G          ;$60    ` a b c 
     919 0000c7e0 00003090"  .long osgmd10_H,osgmd10_I,osgmd10_J,osgmd10_K,osgmd10_L,osgmd10_M,osgmd10_N,osgmd10_O  ;$68    h i j k 
     920 0000c8e0 00003410"  .long osgmd10_P,osgmd10_Q,osgmd10_R,osgmd10_S,osgmd10_T,osgmd10_U,osgmd10_V,osgmd10_W  ;$70    p q r s 
     921 0000c9e0 00003790"  .long osgmd10_X,osgmd10_Y,osgmd10_Z,0,0,0,0,0                                          ;$78    x y z { 
     922                    
     923                    
     924                    ******************************************************************************
     925                    * end
     926                            .end

 No Errors,  No Warnings
