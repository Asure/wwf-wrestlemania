TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    ***************************************************************
       2                    *
       3                    * Software:     LARRY DeMAR, EUGENE JARVIS
       4                    * Modified:     Shawn Liptak 8/6/91     - Multi color fonts
       5                    *               Jason Skiles 12/14/93   - Use STRING.ASM calls
       6                    *               Jason Skiles 1/17/94    - Hold most recent index in CMOS
       7                    *
       8                    * COPYRIGHT (C) 1991 WILLIAMS ELECTRONICS GAMES, INC.
       9                    *
      10                    *.Last mod - 1/17/94 11:59
      11                    ****************************************************************
      12                    
      13                            .file   "hstd.asm"
      15                            .width  132
      16                            .option b,d,l,t
      17                            .mnolist
      18                    
      19                            .include        "audit.equ"
      20                            .include        "mproc.equ"
      21                            .include        "display.equ"
      22                            .include        "sys.equ"
      23                            .include        "game.equ"
      24                            .include        "link.equ"
      25                            .include        "macros.h"
      26                            .include        "plyr.equ"
      27                            .include        "gsp.equ"
      28                    
      29                            .include        "crowdimg.glo"
      30                            .include        "fontsimg.glo"
      31                            .include        "bgndtbl.glo"
      32                            .include        "miscimg.glo"
      33                            .include        "ropeimg.glo"
      34                            .include        "sound.h"
      35                    
      36 00000000                   .TEXT
      37                    
      38                    ; - confine cursor to end and del once all inits are in
      39                    
      40                    *       IN THIS MODULE
      41                     
      42                    
      43                            .DEF    GET_HSCR
      44                            .DEF    RC_BYTEI
      45                            .DEF    RC_BYTE
      46                            .DEF    RC_WORD
      47                            .DEF    RC_LONG
      48                            .DEF    RC_LONGI
      49                            .DEF    WC_BYTE
      50                            .DEF    WC_BYTEI
      51                            .DEF    WC_WORD
      52                            .DEF    WC_WORDI
      53                            .DEF    WC_LONG
      54                            .DEF    WC_LONGI
      55                            .DEF    PT_ENTRY
      56                            .DEF    INIT_TB
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    2

      57                            .DEF    INIT_TAB        ;GEORGES POWER UP ENTRY
      58                            .DEF    P_FORK
      59                            .DEF    VAL_TAB
      60                            .DEF    ROM_PTRS
      61                            .DEF    BEATEN_TAB_ENTRIES
      62                            .DEF    INTER_TAB_ENTRIES
      63                            .DEF    TAG_TAB_ENTRIES
      64                    
      65                            .DEF    INTER_TAB
      66                            .DEF    TAG_TAB
      67                    
      68                            .DEF    STREAK_TAB
      69                            .DEF    BEATEN_TAB
      70                            .DEF    DO_BEATEN_GAME
      71                    ;       .DEF    ISHSTD,GETINIT,GETINIT1,GETINIT2,INITTIM
      72                            .DEF    SET_PAGE
      73                    ;       .DEF    A2_CHECK
      74                            .DEF    DEC_HSR,INIT_HSR,GET_HSC
      75                            .def    not_blank
      76                    
      77                    ******************************************************************************
      78                    * EXTERNAL REFERENCES
      79                    
      80                            .ref    ADD_VOICE,message_palette,get_but_val_down,dec_to_asc
      81                            .ref    dec_to_asc_new_entry,MATCH_TIMERS,civanic,GET_ADJ
      82                            .ref    which_player,mess_z,ANIM_CROWD,DEF_PAGE,print_message
      83                            .ref    message_buffer,howard_wins,GET_AUD,RNDRNG0,mess_line_spacing
      84                            .ref    pal_getf,AUD,BEGINOBJ_TBL,print_string_C2,SHADOW01
      85                            .ref    SHADOW02,mess_space_width,SPEAR,mess_objid,print_string_R
      86                            .ref    BINBCD,message_ascii,get_stick_val_cur,p1oldwinstreak
      87                            .ref    mess_spacing,mess_cursx,print_string,mess_cursy
      88                            .ref    print_string_with_z,setup_message,KILL_AUD,osgemd_ascii
      89                            .ref    get_stick_val_down,setup_back_anim,font9_ascii,CYCLE_TABLE
      90                            .ref    BCDBIN,copy_string,IGNORE_CHAR_WIDTH,message_buffer2
      91                            .ref    triple_sound,change_image,digits_tbl,wsf14_ascii
      92                            .ref    p2oldwinstreak,print_string2,current_round
      93                            .ref    mess_cursx2,font9A_ascii
      94                            .ref    font18_ascii
      95                            .ref    print_string_C,belt_type
      96                            .if 0
      97                            .ref    prog_specials,are_special_inits
      98                            .endif
      99                    
     100                    
     101                    ******************************************************************************
     102                    
     103 00000000                    .TEXT
     104                    
     105                    ;Sound headers
     106                    
     107 00000000     f3fe  BEEPSND  .WORD  0F3FEH,010H,080A2H,0            ;LOW BEEP
     108                    
     109                    
     110 00000040                   BSSX    starting_num,16
     111 00000040                   BSSX    entered_inits,          (8*6)*2
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    3

     112                    ;       .bss    entered_message,        (16*4)*2
     113 00000070                   .bss    last_hscore_ndx,        16
     114 00000080                   .bss    last_streak_ndx,        16
     115 00000090                   .bss    not_blank,16
     116 00000040                   BSSX    auto_init,16
     117                    
     118                    **************************************************************************
     119                    *
     120                    *       HIGH SCORE TABLE DEFINITIONS
     121                    *
     122                    **************************************************************************
     123                    
     124              0012  STREAK_TABLE_VISIBLE    equ     18
     125              0009  PIN_SPEED_TAB_VISIBLE   equ     9
     126              001e  BEATEN_TAB_VISIBLE      equ     30
     127              001e  INTER_TAB_VISIBLE       equ     30
     128              0012  TAG_TAB_VISIBLE         EQU     18
     129                    
     130 00000040           STREAK_TAB
     131 00000040 01408200          .LONG   STREAK_TABLE_ORIGIN     ;LOCATION OF TABLE
     132 00000060     0012          .WORD   STREAK_TABLE_ENTRIES-1  ;NUMBER IN THE TABLE (DON'T COUNT ZERO FILLER)
     133 00000070     0012          .WORD   STREAK_TABLE_VISIBLE    ;unused?
     134 00000080     0001          .WORD   STREAK_TABLE_SELECT     ;BITS TO SELECT IT
     135 00000090 000136f0'         .LONG   STREAK_ROM_TABLE        ;ROM IMAGE OF TABLE
     136 000000b0     0003          .WORD   STREAK_TABLE_ENTRIES/5  ;RESET TABLE IF 1/5 OR MORE BAD
     137                    
     138 000000c0            SUBR   PIN_SPEED_TAB
     139 000000c0 01409080          .LONG   PIN_SPEED_TAB_ORIGIN    ;LOCATION OF TABLE
     140 000000e0     0009          .WORD   PIN_SPEED_TAB_ENTRIES-1 ;NUMBER IN THE TABLE (DON'T COUNT ZERO FILLER)
     141 000000f0     0009          .WORD   PIN_SPEED_TAB_VISIBLE   ;unused ?
     142 00000100     0002          .WORD   PIN_SPEED_TAB_SELECT    ;BITS TO SELECT IT
     143 00000110 00013ce0'         .LONG   PIN_SPEED_TAB_ROM_TABLE ;ROM IMAGE OF TABLE
     144 00000130     0002          .WORD   PIN_SPEED_TAB_ENTRIES/5 ;RESET TABLE IF 1/5 OR MORE BAD
     145                    
     146                    
     147 00000140           BEATEN_TAB
     148 00000140 014098c0          .LONG   BEATEN_TAB_ORIGIN       ;LOCATION OF TABLE
     149 00000160     001e          .WORD   BEATEN_TAB_ENTRIES-1    ;NUMBER IN THE TABLE (DON'T COUNT ZERO FILLER)
     150 00000170     001e          .WORD   BEATEN_TAB_VISIBLE      ;unused?
     151 00000180     0003          .WORD   BEATEN_TAB_SELECT       ;BITS TO SELECT IT
     152 00000190 00014000'         .LONG   BEATEN_ROM_TABLE        ;ROM IMAGE OF TABLE
     153 000001b0     0006          .WORD   BEATEN_TAB_ENTRIES/5    ;RESET TABLE IF 1/5 OR MORE BAD
     154                    
     155 000001c0           INTER_TAB
     156 000001c0 0140aec0          .LONG   INTER_TAB_ORIGIN        ;LOCATION OF TABLE
     157 000001e0     001e          .WORD   INTER_TAB_ENTRIES-1     ;NUMBER IN THE TABLE (DON'T COUNT ZERO FILLER)
     158 000001f0     001e          .WORD   INTER_TAB_VISIBLE       ;unused?
     159 00000200     0003          .WORD   INTER_TAB_SELECT        ;BITS TO SELECT IT
     160 00000210 000149b0'         .LONG   INTER_ROM_TABLE ;ROM IMAGE OF TABLE
     161 00000230     0006          .WORD   INTER_TAB_ENTRIES/5     ;RESET TABLE IF 1/5 OR MORE BAD
     162                    
     163 00000240           TAG_TAB
     164 00000240 0140c4c0          .LONG   TAG_TAB_ORIGIN  ;LOCATION OF TABLE
     165 00000260     0012          .WORD   TAG_TAB_ENTRIES-1       ;NUMBER IN THE TABLE (DON'T COUNT ZERO FILLER)
     166 00000270     0012          .WORD   TAG_TAB_VISIBLE ;unused?
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    4

     167 00000280     0003          .WORD   TAG_TAB_SELECT  ;BITS TO SELECT IT
     168 00000290 00015360'         .LONG   TAG_ROM_TABLE   ;ROM IMAGE OF TABLE
     169 000002b0     0003          .WORD   TAG_TAB_ENTRIES/5       ;RESET TABLE IF 1/5 OR MORE BAD
     170                    
     171                    
     172 000002c0           P_FORK
     173 000002c0     098f          MMTM    SP,A1
         000002d0     4000  
     174 000002e0     b5a1          MOVE    *A13(PROCID),A1         ;PASS OUR ID TO FORKED PROCESS
         000002f0     0020  
     175 00000300     0d5f          CALLA   GETPRC                  ;MAKE THE PROCESS
         00000310 00000000! 
     176 00000330     09af          MMFM    SP,A1
         00000340     0002  
     177 00000350     0960          RETS
     178                    
     179                    **************************************************************************
     180                    *
     181                    *       AUTO HIGH SCORE TABLE RESET HANDLING
     182                    *
     183                    **************************************************************************
     184                    *
     185                    *       DEC_HSR
     186                    *
     187                    *       THIS IS CALLED WITH EACH START OR CONTINUE FOR
     188                    *       A PLAYER.  IT REMOVES 1 FROM THE HSTD COUNTER UNLESS
     189                    *       ITS ALREADY SITTING AT ZERO.
     190                    *
     191                    **************************************************************************
     192 00000360           DEC_HSR
     193 00000360     098f          MMTM    SP,A0
         00000370     8000  
     194 00000380     0d3f          CALLR   GET_HSC         ;THIS IS EASY...GET THE COUNTER
         00000390     0033  
     195 000003a0     ca03          JRZ     DECHX           ;ITS ZERO....NO ACTION.
     196 000003b0     1420          DEC     A0              ;REMOVE A TICK
     197 000003c0     0d3f          CALLR   PUT_HSC         ;PUT IT BACK JAK
         000003d0     001d  
     198 000003e0     09af  DECHX   MMFM    SP,A0
         000003f0     0001  
     199 00000400     0960          RETS
     200                    
     201                    **************************************************************************
     202                    *
     203                    *       DELAY_HSRESET
     204                    *
     205                    *       THIS IS CALLED WHEN A NEW ENTRY IS MADE IN THE ALL TIME
     206                    *       HIGH SCORE TABLE. IF WE'RE CLOSE TO A HIGH SCORE
     207                    *       RESET, WE PUT IT OFF AWHILE SO HE CAN SHOW HIS FRIENDS
     208                    *       FOR A FEW DAYS.
     209                    *
     210                    **************************************************************************
     211              02ee  HS_MIN   EQU     750             ;ALWAYS 750 PLAYS BEFORE REMOVING A FRESH
     212                    *                                ;NAME.
     213 00000410           DELAY_HSRESET:
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    5

     214 00000410     098f          MMTM    SP,A0
         00000420     8000  
     215 00000430     0d3f          CALLR   GET_HSC         ;THIS IS EASY...GET THE COUNTER
         00000440     0028  
     216 00000450     0b40          CMPI    HS_MIN,A0       ;IS IT TOO LOW
         00000460     fd11  
     217 00000470     c904          JRHS    DHX             ;NOPE...NO ACTION
     218                    
     219 00000480     09c0          MOVI    HS_MIN,A0       ;STOP THE RESET!
         00000490     02ee  
     220 000004a0     0d3f          CALLR   PUT_HSC         ;THIS MANY PLAYS TILL RESET!
         000004b0     000f  
     221 000004c0           DHX:    
     222 000004c0     09af          MMFM    SP,A0
         000004d0     0001  
     223 000004e0     0960          RETS
     224                            
     225                    **************************************************************************
     226                    *
     227                    *       INIT_HSR
     228                    *
     229                    *       THIS IS CALLED TO INITIALIZE THE HIGH SCORE RESET
     230                    *       COUNTER TO ITS ADJUSTED VALUE.
     231                    *
     232                    **************************************************************************
     233 000004f0           INIT_HSR
     234 000004f0     098f          MMTM    SP,A0
         00000500     8000  
     235 00000510     09c0          MOVI    ADJHSRES,A0
         00000520     000f  
     236 00000530     0d5f          CALLA   GET_ADJ         ;GET THE ADJUSTED VALUE
         00000540 00000000! 
     237 00000560     0d3f          CALLR   PUT_HSC         ;SET IT TO THIS VALUE
         00000570     0003  
     238 00000580     09af          MMFM    SP,A0
         00000590     0001  
     239 000005a0     0960          RETS
     240                    
     241                    **************************************************************************
     242                    *
     243                    *       PUT_HSC
     244                    *
     245                    *       THIS IS CALLED TO SET THE HIGH SCORE RESET COUNTER
     246                    *       TO THE VALUE IN A0.
     247                    *
     248                    **************************************************************************
     249 000005b0           PUT_HSC
     250 000005b0     098f          MMTM    SP,A7,A0
         000005c0     8100  
     251 000005d0     0d3f          CALLR   HSR_PAGE                ;HIGH SCORE PAGE
         000005e0     002b  
     252                    
     253 000005f0     09e7          MOVI    HRESET_COUNTER,A7       ;POINT AT
         00000600 01402a00  
     254 00000620     0d3f          CALLR   WC_LONGI                ;WRITE OUR PARAMETER
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    6

         00000630     1306  
     255 00000640     03e0          NOT     A0                      ;NEGATE IT.
     256 00000650     0d3f          CALLR   WC_LONG                 ;AND WRITE IN SUBSEQUENT SPOT.
         00000660     12f7  
     257 00000670     0d5f          CALLA   DEF_PAGE                ;FLIP PAGE
         00000680 00000000! 
     258 000006a0     09af          MMFM    SP,A7,A0                ;AND RETURN
         000006b0     0081  
     259 000006c0     0960          RETS
     260                    
     261                    **************************************************************************
     262                    *
     263                    *       GET_HSC
     264                    *
     265                    *       THIS IS CALLED TO FETCH THE HIGH SCORE COUNTER IN A0.
     266                    *       IF IT IS INVALID, IT WILL IMMEDIATELY BE RESET TO THE
     267                    *       ADJUSTED VALUE AND THIS IS WHAT WILL BE RETURNED
     268                    *       IN A0. Z set if 0
     269                    *
     270                    **************************************************************************
     271 000006d0           GET_HSC
     272 000006d0     098f          MMTM    SP,A7,A1
         000006e0     4100  
     273 000006f0     0d3f          CALLR   HSR_PAGE                ;POINT PAGE AT HSR
         00000700     0019  
     274                    
     275 00000710     09e7          MOVI    HRESET_COUNTER,A7       ;POINT AT
         00000720 01402a00  
     276 00000740     0d3f          CALLR   RC_LONGI                ;READ THE VALUE
         00000750     12cc  
     277 00000760     4c01          MOVE    A0,A1                   ;STASH IT
     278 00000770     0d3f          CALLR   RC_LONG                 ;READ VERIFIER
         00000780     12b7  
     279 00000790     03e0          NOT     A0                      ;SEE IF ITS VALID
     280 000007a0     4801          CMP     A0,A1
     281 000007b0     ca07          JRZ     GET_HSCX                ;IT IS....RETURN IT.
     282                    
     283 000007c0     0d3f          CALLR   INIT_HSR                ;REFRESH IT WITH FACTORY VALUE
         000007d0     ffd1  
     284                    *
     285                    *       NOW RETURN THE FACTORY VALUE IN CASE IT DIDN'T TAKE
     286                    *
     287 000007e0     09c0          MOVI    ADJHSRES,A0
         000007f0     000f  
     288 00000800     0d5f          CALLA   GET_ADJ                 ;GET THE ADJUSTED VALUE
         00000810 00000000! 
     289                    
     290 00000830           GET_HSCX
     291 00000830     0d5f          CALLA   DEF_PAGE                ;FLIP PAGE AWAY FROM US
         00000840 00000000! 
     292 00000860     4c00          MOVE    A0,A0                   ;SET Z FLAG BASED ON COUNTER
     293 00000870     09af          MMFM    SP,A7,A1
         00000880     0082  
     294 00000890     0960          RETS
     295                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    7

     296 000008a0           HSR_PAGE
     297 000008a0     098f          MMTM    SP,A1
         000008b0     4000  
     298 000008c0     09c1          MOVI    HSR_SELECT,A1
         000008d0     0000  
     299 000008e0     0d3f          CALLR   SET_PAGE
         000008f0     119c  
     300 00000900     09af          MMFM    SP,A1
         00000910     0002  
     301 00000920     0960          RETS
     302                    
     303                    *********************************************************************
     304                    * Check validity of high score and win streak tables.
     305                    *
     306                    
     307 00000930            SUBR   table_cmos_check
     308                    
     309 00000930     09e8          movi    PIN_SPEED_TAB,a8
         00000940 000000c0' 
     310 00000960     0d3f          callr   VAL_TAB
         00000970     11dd  
     311 00000980     09e8          movi    STREAK_TAB,a8
         00000990 00000040' 
     312 000009b0     0d3f          callr   VAL_TAB
         000009c0     11d8  
     313                    
     314 000009d0     09e8          movi    BEATEN_TAB,a8
         000009e0 00000140' 
     315 00000a00     0d3f          callr   VAL_TAB
         00000a10     11d3  
     316                    
     317 00000a20     09e8          movi    INTER_TAB,a8
         00000a30 000001c0' 
     318 00000a50     0d3f          callr   VAL_TAB
         00000a60     11ce  
     319                    
     320 00000a70     09e8          movi    TAG_TAB,a8
         00000a80 00000240' 
     321 00000aa0     0d3f          callr   VAL_TAB
         00000ab0     11c9  
     322 00000ac0     0960          rets
     323                    
     324                    *********************************************************************
     325                    * Display high score table
     326                    *
     327                    
     328 00000ad0            SUBR   print_inter
     329                    
     330 00000ad0                   push    a5
     331 00000ae0     09e2          movi    ntwahscore_mes2,a2
         00000af0 000012f0' 
     332 00000b10     0d5f          calla   print_message
         00000b20 00000000! 
     333                    
     334 00000b40     09e0          MOVI    [10,0],A0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    8

         00000b50 000a0000  
     335 00000b70     09e1          MOVI    [21,0],A1
         00000b80 00150000  
     336                    
     337 00000ba0     09e2          movi    MVEBAR_R,a2
         00000bb0 00000000! 
     338 00000bd0     09c3          movi    1799H,a3
         00000be0     1799  
     339 00000bf0     09e4          movi    DMAWNZ,a4
         00000c00 00008002  
     340 00000c20     09c5          movi    CLSNEUT,a5
         00000c30     0000  
     341 00000c40     56c6          CLR     A6
     342 00000c50     56e7          CLR     A7
     343 00000c60     0d5f          calla   BEGINOBJ
         00000c70 00000000! 
     344                    
     345 00000c90     09e0          MOVI    [13,0],A0
         00000ca0 000d0000  
     346 00000cc0     09e1          MOVI    [21+9,0],A1
         00000cd0 001e0000  
     347                    
     348 00000cf0     09e2          movi    SHADOW01,a2
         00000d00 00000000! 
     349 00000d20     09c3          movi    1799H,a3
         00000d30     1799  
     350 00000d40     09e4          movi    DMAWNZ,a4
         00000d50 00008002  
     351 00000d70     09c5          movi    CLSNEUT,a5
         00000d80     0000  
     352 00000d90     56c6          CLR     A6
     353 00000da0     56e7          CLR     A7
     354 00000db0     0d5f          calla   BEGINOBJ
         00000dc0 00000000! 
     355 00000de0                   CREATE  FLASH_PID,JUDDER_SHADOW
     356                    
     357 00000e60                   pull    a9
     358 00000e70     0589          move    a9,@starting_num
         00000e80 00000000- 
     359 00000ea0     09c7          movi    HS_SIZE,a7
         00000eb0     00a0  
     360 00000ec0     5ee9          mpyu    a7,a9
     361 00000ed0     0b29          addi    INTER_TAB_ORIGIN,a9
         00000ee0 0140aec0  
     362 00000f00     4d28          move    a9,a8
     363                    
     364 00000f10     09c7          movi    3,a7                    ;draw 3
         00000f20     0003  
     365                    
     366 00000f30     09e9          movi    [51-9,8],a9
         00000f40 002a0008  
     367 00000f60     09ea          movi    [58+5,10],a10
         00000f70 003f000a  
     368                    
     369 00000f90           ntwaloop
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    9

     370 00000f90     09eb          movi    GOLD,a11
         00000fa0 00000000! 
     371 00000fc0     09c0          movi    AUD_INTER,A0
         00000fd0     005a  
     372 00000fe0     0d5f          calla   GET_AUD
         00000ff0 00000000! 
     373 00001010     05a5          MOVE    @starting_num,A5
         00001020 00000000- 
     374 00001040     4825          cmp     a1,a5
     375 00001050     cb03          jrne    ntwagold
     376 00001060     09eb          movi    BLUE,a11
         00001070 00000000! 
     377 00001090           ntwagold
     378 00001090                   PUSH    a3,a7,a8,a9,a10,a11
     379 000010b0     09c1          movi    INTER_TAB_SELECT,a1     ;set the read page
         000010c0     0003  
     380 000010d0     0d3f          callr   SET_PAGE
         000010e0     111d  
     381 000010f0     09e5          movi    special_copy,a5
         00001100 00003ed0' 
     382 00001120     0d3f          callr   draw_beaten_table_entry
         00001130     072a  
     383 00001140                   PULL    a3,a7,a8,a9,a10,a11
     384                    
     385 00001160     05a5          move    @starting_num,a5
         00001170 00000000- 
     386 00001190     1025          inc     a5
     387 000011a0     0585          move    a5,@starting_num
         000011b0 00000000- 
     388                    
     389 000011d0     1427          dec     a7
     390 000011e0     ca09          jrz     ntwadone
     391                    
     392 000011f0     0b08          addi    HS_SIZE,a8
         00001200     00a0  
     393 00001210     0b29          addi    [46h,0],a9
         00001220 00460000  
     394 00001240     0b2a          addi    [46h,0],a10
         00001250 00460000  
     395 00001270     c0d1          jruc    ntwaloop
     396 00001280           ntwadone
     397 00001280     0d3f          callr   hscore_colcyc
         00001290     0826  
     398 000012a0     0d3f          callr   hscore_colcyc2
         000012b0     0885  
     399 000012c0                   RETP
     400                    
     401 000012f0           ntwahscore_mes2
     402 000012f0                   JAM_STR osgemd_ascii,10,0,200,10,BLUE,print_string_C2
     403 00001390       49          .byte   "INTERCONTINENTAL CHAMPS",0,0
     404 00001460                   .even
     405                    
     406                    
     407                    **********************
     408                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   10

     409 00001460            SUBR   print_beaten
     410                    
     411 00001460                   push    a5
     412 00001470     09e2          movi    krpthscore_mes,a2
         00001480 00001dd0' 
     413 000014a0     0d5f          calla   print_message
         000014b0 00000000! 
     414                    
     415 000014d0     09e0          MOVI    [10,0],A0
         000014e0 000a0000  
     416 00001500     09e1          MOVI    [21,0],A1
         00001510 00150000  
     417                    
     418 00001530     09e2          movi    MVEBAR_R,a2
         00001540 00000000! 
     419 00001560     09c3          movi    1799H,a3
         00001570     1799  
     420 00001580     09e4          movi    DMAWNZ,a4
         00001590 00008002  
     421 000015b0     09c5          movi    CLSNEUT,a5
         000015c0     0000  
     422 000015d0     56c6          CLR     A6
     423 000015e0     56e7          CLR     A7
     424 000015f0     0d5f          calla   BEGINOBJ
         00001600 00000000! 
     425                    
     426 00001620     09e0          MOVI    [13,0],A0
         00001630 000d0000  
     427 00001650     09e1          MOVI    [21+9,0],A1
         00001660 001e0000  
     428                    
     429 00001680     09e2          movi    SHADOW01,a2
         00001690 00000000! 
     430 000016b0     09c3          movi    1799H,a3
         000016c0     1799  
     431 000016d0     09e4          movi    DMAWNZ,a4
         000016e0 00008002  
     432 00001700     09c5          movi    CLSNEUT,a5
         00001710     0000  
     433 00001720     56c6          CLR     A6
     434 00001730     56e7          CLR     A7
     435 00001740     0d5f          calla   BEGINOBJ
         00001750 00000000! 
     436 00001770                   CREATE  FLASH_PID,JUDDER_SHADOW
     437                    
     438 000017f0                   pull    a9
     439 00001800     0589          move    a9,@starting_num
         00001810 00000000- 
     440 00001830     09c7          movi    HS_SIZE,a7
         00001840     00a0  
     441 00001850     5ee9          mpyu    a7,a9
     442 00001860     0b29          addi    BEATEN_TAB_ORIGIN,a9
         00001870 014098c0  
     443 00001890     4d28          move    a9,a8
     444                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   11

     445 000018a0     09c7          movi    3,a7                    ;draw 3
         000018b0     0003  
     446                    
     447 000018c0     09e9          movi    [51-9,8],a9
         000018d0 002a0008  
     448 000018f0     09ea          movi    [58+5,10],a10
         00001900 003f000a  
     449                    
     450 00001920           krptloop
     451 00001920     09eb          movi    GOLD,a11
         00001930 00000000! 
     452 00001950     09c0          movi    AUD_BEATEN,A0
         00001960     0059  
     453 00001970     0d5f          calla   GET_AUD
         00001980 00000000! 
     454 000019a0     05a5          MOVE    @starting_num,A5
         000019b0 00000000- 
     455 000019d0     4825          cmp     a1,a5
     456 000019e0     cb03          jrne    krptgold
     457 000019f0     09eb          movi    BLUE,a11
         00001a00 00000000! 
     458 00001a20           krptgold
     459 00001a20                   PUSH    a3,a7,a8,a9,a10,a11
     460 00001a40     09c1          movi    BEATEN_TAB_SELECT,a1    ;set the read page
         00001a50     0003  
     461 00001a60     0d3f          callr   SET_PAGE
         00001a70     1084  
     462 00001a80     09e5          movi    special_copy,a5
         00001a90 00003ed0' 
     463 00001ab0     0d3f          callr   draw_beaten_table_entry
         00001ac0     0691  
     464 00001ad0                   PULL    a3,a7,a8,a9,a10,a11
     465                    
     466 00001af0     05a5          move    @starting_num,a5
         00001b00 00000000- 
     467 00001b20     1025          inc     a5
     468 00001b30     0585          move    a5,@starting_num
         00001b40 00000000- 
     469                    
     470 00001b60     1427          dec     a7
     471 00001b70     ca09          jrz     krptdone
     472                    
     473 00001b80     0b08          addi    HS_SIZE,a8
         00001b90     00a0  
     474 00001ba0     0b29          addi    [46h,0],a9
         00001bb0 00460000  
     475 00001bd0     0b2a          addi    [46h,0],a10
         00001be0 00460000  
     476 00001c00     c0d1          jruc    krptloop
     477 00001c10           krptdone
     478                    ;       callr   hscore_colcyc
     479                    ;       callr   hscore_colcyc2
     480 00001c10                   RETP
     481                    
     482 00001c40            SUBR   JUDDER_SHADOW
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   12

     483 00001c40     09e1          MOVI    SHADOW_ANIM,A1
         00001c50 00001d40' 
     484 00001c70     0d5f          calla   setup_back_anim
         00001c80 00000000! 
     485 00001ca0                   JSRP    ANIM_CROWD
     486 00001d10                   DIE
     487                    
     488              8000  CANI_GOTO       equ     0 + 8000h
     489                    
     490 00001d40           SHADOW_ANIM
     491 00001d40                   WL      1,SHADOW02
     492 00001d70                   WL      1,SHADOW01
     493 00001da0                   WL      CANI_GOTO,SHADOW_ANIM
     494                    
     495 00001dd0           krpthscore_mes
     496 00001dd0                   JAM_STR osgemd_ascii,10,0,200,10,BLUE,print_string_C2
     497 00001e70       57          .byte   "WORLD CHAMPIONS",0,0
     498 00001f00                   .even
     499                    
     500                    
     501 00001f00            SUBR   STOP_ALL_OBJS
     502 00001f00     09e8          MOVI    OBJLST,A8
         00001f10 00000000! 
     503 00001f30     5621          CLR     A1
     504 00001f40     c002          JRUC    DO_EACH_OBJ_STOP
     505 00001f50           STOP_THIS_OBJ
     506 00001f50     b228          MOVE    A1,*A8(OYVEL),L
         00001f60     0040  
     507 00001f70           DO_EACH_OBJ_STOP
     508 00001f70     8708          MOVE    *A8,A8,L
     509 00001f80     cbfc          JRNZ    STOP_THIS_OBJ
     510 00001f90     0960          RETS
     511                    
     512 00001fa0            SUBR   MOVE_ALL_OBJS_UP
     513 00001fa0     09e8          MOVI    OBJLST,A8
         00001fb0 00000000! 
     514 00001fd0     09e0          MOVI    RUBYPAL,A0
         00001fe0 00000000! 
     515 00002000     0d5f          CALLA   pal_getf
         00002010 00000000! 
     516 00002030     09e1          MOVI    [-2,0],A1
         00002040 fffe0000  
     517 00002060     c00b          JRUC    DO_EACH_OBJ
     518 00002070           MOVE_THIS_OBJ_UP
     519 00002070     b502          MOVE    *A8(OPAL),A2
         00002080     0150  
     520 00002090     4840          CMP     A2,A0
     521 000020a0     ca07          JREQ    DO_EACH_OBJ
     522 000020b0     b502          MOVE    *A8(OZPOS),A2
         000020c0     00d0  
     523 000020d0     0b42          CMPI    1798H,A2
         000020e0     e867  
     524 000020f0     c702          JRGT    DO_EACH_OBJ
     525 00002100     b228          MOVE    A1,*A8(OYVEL),L
         00002110     0040  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   13

     526 00002120           DO_EACH_OBJ
     527 00002120     8708          MOVE    *A8,A8,L
     528 00002130     cbf3          JRNZ    MOVE_THIS_OBJ_UP
     529 00002140     0960          RETS
     530                    
     531 00002150            SUBR   DELETE_ANY_OFF_TOP
     532 00002150     09e8          MOVI    OBJLST,A8
         00002160 00000000! 
     533 00002180     09e3          MOVI    [-30,0],A3
         00002190 ffe20000  
     534 000021b0     c00b          JRUC    DO_EACH_OBJ_NEXT
     535 000021c0           DELETE_OR_NOT
     536 000021c0     b702          MOVE    *A8(OYVAL),A2,L
         000021d0     00a0  
     537 000021e0     4862          CMP     A3,A2
     538 000021f0     c707          JRGT    DO_EACH_OBJ_NEXT
     539 00002200     8709          MOVE    *A8,A9,L
     540 00002210     0d5f          CALLA   DELOBJA8
         00002220 00000000! 
     541 00002240     4d28          MOVE    A9,A8
     542 00002250     cbf6          JRNZ    DELETE_OR_NOT
     543 00002260     0960          RETS
     544 00002270           DO_EACH_OBJ_NEXT
     545 00002270     8708          MOVE    *A8,A8,L
     546 00002280     cbf3          JRNZ    DELETE_OR_NOT
     547 00002290     0960          RETS
     548                    
     549                    
     550                    *********************************************************************
     551                    * Display high score table
     552                    *
     553                    
     554 000022a0            SUBR   print_tag
     555                    
     556 000022a0     09e2          movi    tag_mes,a2
         000022b0 00002a80' 
     557 000022d0     0d5f          calla   print_message
         000022e0 00000000! 
     558                    
     559 00002300     09e0          MOVI    [10,0],A0
         00002310 000a0000  
     560 00002330     09e1          MOVI    [21,0],A1
         00002340 00150000  
     561                    
     562 00002360     09e2          movi    MVEBAR_R,a2
         00002370 00000000! 
     563 00002390     09c3          movi    1799H,a3
         000023a0     1799  
     564 000023b0     09e4          movi    DMAWNZ,a4
         000023c0 00008002  
     565 000023e0     09c5          movi    CLSNEUT,a5
         000023f0     0000  
     566 00002400     56c6          CLR     A6
     567 00002410     56e7          CLR     A7
     568 00002420     0d5f          calla   BEGINOBJ
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   14

         00002430 00000000! 
     569                    
     570 00002450     09e0          MOVI    [13,0],A0
         00002460 000d0000  
     571 00002480     09e1          MOVI    [21+9,0],A1
         00002490 001e0000  
     572                    
     573 000024b0     09e2          movi    SHADOW01,a2
         000024c0 00000000! 
     574 000024e0     09c3          movi    1799H,a3
         000024f0     1799  
     575 00002500     09e4          movi    DMAWNZ,a4
         00002510 00008002  
     576 00002530     09c5          movi    CLSNEUT,a5
         00002540     0000  
     577 00002550     56c6          CLR     A6
     578 00002560     56e7          CLR     A7
     579 00002570     0d5f          calla   BEGINOBJ
         00002580 00000000! 
     580                    
     581 000025a0     09c0          movi    FLASH_PID,A0
         000025b0     0139  
     582 000025c0     5621          CLR     A1
     583 000025d0     03e1          NOT     A1
     584 000025e0     0d5f          CALLA   KILALL
         000025f0 00000000! 
     585                    
     586 00002610                   CREATE  FLASH_PID,JUDDER_SHADOW
     587                    
     588 00002690     09c7          movi    9,a7                    ;draw 9
         000026a0     0009  
     589 000026b0     1823          movk    1,a3
     590                    
     591 000026c0     09e8          movi    TAG_TAB_ORIGIN+HS_SIZE,a8
         000026d0 0140c560  
     592 000026f0     09e9          movi    [40,8],a9
         00002700 00280008  
     593 00002720     09ea          movi    [38,64+8],a10
         00002730 00260048  
     594                    
     595 00002750           qlhdloop
     596 00002750     09eb          movi    GOLD,a11
         00002760 00000000! 
     597 00002780     09c0          movi    AUD_TAG,A0
         00002790     0062  
     598 000027a0     0d5f          calla   GET_AUD
         000027b0 00000000! 
     599 000027d0     1021          addk    1,a1
     600 000027e0     2fe1          srl     1,a1
     601 000027f0     4823          CMP     a1,A3
     602 00002800     cb03          jrne    qlhdnotblue
     603 00002810     09eb          movi    BLUE,a11
         00002820 00000000! 
     604 00002840           qlhdnotblue
     605 00002840                   PUSH    A3,a7,a8,a9,a10,a11
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   15

     606 00002860     09c1          movi    TAG_TAB_SELECT,a1       ;set the read page
         00002870     0003  
     607 00002880     0d3f          callr   SET_PAGE
         00002890     0fa2  
     608 000028a0     09e5          movi    special_copy,a5
         000028b0 00003ed0' 
     609 000028d0     09e2          movi    SEC,a2
         000028e0 00000000! 
     610 00002900     09e1          MOVI    [118H,0],a1
         00002910 01180000  
     611 00002930     09c6          MOVI    0110H,A6
         00002940     0110  
     612 00002950     0d3f          callr   draw_tag_table_entry
         00002960     01ab  
     613 00002970                   PULL    A3,a7,a8,a9,a10,a11
     614                    
     615 00002990     1023          INC     A3
     616 000029a0     1427          dec     a7
     617 000029b0     ca09          jrz     qlhddone
     618                    
     619 000029c0     0b08          addi    HS_SIZE*2,a8
         000029d0     0140  
     620 000029e0     0b29          addi    [23,0],a9
         000029f0 00170000  
     621 00002a10     0b2a          addi    [23,0],a10
         00002a20 00170000  
     622 00002a40     c0d0          jruc    qlhdloop
     623                    
     624 00002a50           qlhddone
     625 00002a50                   RETP
     626                    
     627 00002a80           tag_mes
     628 00002a80                   JAM_STR osgemd_ascii,10,0,200,10,BLUE,print_string_C2
     629 00002b20       54          .byte   "TAG TEAM CHAMPIONS",0,0
     630 00002bc0                   .even
     631                    
     632                    *********************************************************************
     633                    * Display high score table
     634                    *
     635                    
     636 00002bc0            SUBR   print_hscores
     637                    
     638 00002bc0     09e2          movi    mtqdhscore_mes,a2
         00002bd0 00003380' 
     639 00002bf0     0d5f          calla   print_message
         00002c00 00000000! 
     640                    
     641                    
     642 00002c20     09e0          MOVI    [10,0],A0
         00002c30 000a0000  
     643 00002c50     09e1          MOVI    [21,0],A1
         00002c60 00150000  
     644                    
     645 00002c80     09e2          movi    MVEBAR_R,a2
         00002c90 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   16

     646 00002cb0     09c3          movi    1799H,a3
         00002cc0     1799  
     647 00002cd0     09e4          movi    DMAWNZ,a4
         00002ce0 00008002  
     648 00002d00     09c5          movi    CLSNEUT,a5
         00002d10     0000  
     649 00002d20     56c6          CLR     A6
     650 00002d30     56e7          CLR     A7
     651 00002d40     0d5f          calla   BEGINOBJ
         00002d50 00000000! 
     652                    
     653 00002d70     09e0          MOVI    [13,0],A0
         00002d80 000d0000  
     654 00002da0     09e1          MOVI    [21+9,0],A1
         00002db0 001e0000  
     655                    
     656 00002dd0     09e2          movi    SHADOW01,a2
         00002de0 00000000! 
     657 00002e00     09c3          movi    1799H,a3
         00002e10     1799  
     658 00002e20     09e4          movi    DMAWNZ,a4
         00002e30 00008002  
     659 00002e50     09c5          movi    CLSNEUT,a5
         00002e60     0000  
     660 00002e70     56c6          CLR     A6
     661 00002e80     56e7          CLR     A7
     662 00002e90     0d5f          calla   BEGINOBJ
         00002ea0 00000000! 
     663                    
     664 00002ec0     09c0          movi    FLASH_PID,A0
         00002ed0     0139  
     665 00002ee0     5621          CLR     A1
     666 00002ef0     03e1          NOT     A1
     667 00002f00     0d5f          CALLA   KILALL
         00002f10 00000000! 
     668                    
     669 00002f30                   CREATE  FLASH_PID,JUDDER_SHADOW
     670                    
     671                    
     672 00002fb0     09c7          movi    9,a7                    ;draw 9
         00002fc0     0009  
     673 00002fd0     1823          movk    1,a3
     674                    
     675 00002fe0     09e8          movi    PIN_SPEED_TAB_ORIGIN+HS_SIZE,a8
         00002ff0 01409120  
     676 00003010     09e9          movi    [40,8],a9
         00003020 00280008  
     677 00003040     09ea          movi    [38,64+8],a10
         00003050 00260048  
     678                    
     679 00003070           mtqdloop
     680 00003070     09eb          movi    GOLD,a11
         00003080 00000000! 
     681 000030a0     09c0          movi    AUD_PINSPEED,A0
         000030b0     0058  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   17

     682 000030c0     0d5f          calla   GET_AUD
         000030d0 00000000! 
     683 000030f0     4823          CMP     a1,A3
     684 00003100     cb03          jrne    mtqdnotblue
     685 00003110     09eb          movi    BLUE,a11
         00003120 00000000! 
     686 00003140           mtqdnotblue
     687 00003140                   PUSH    A3,a7,a8,a9,a10,a11
     688 00003160     09c1          movi    PIN_SPEED_TAB_SELECT,a1 ;set the read page
         00003170     0002  
     689 00003180     0d3f          callr   SET_PAGE
         00003190     0f12  
     690 000031a0     09e5          movi    special_copy,a5
         000031b0 00003ed0' 
     691 000031d0     09e2          movi    SEC,a2
         000031e0 00000000! 
     692 00003200     09e1          MOVI    [82H,0],a1
         00003210 00820000  
     693 00003230     09c6          MOVI    120,A6
         00003240     0078  
     694 00003250     0d3f          callr   draw_pinspeed_table_entry
         00003260     0299  
     695 00003270                   PULL    A3,a7,a8,a9,a10,a11
     696                    
     697 00003290     1023          INC     A3
     698 000032a0     1427          dec     a7
     699 000032b0     ca09          jrz     mtqddone
     700                    
     701 000032c0     0b08          addi    HS_SIZE,a8
         000032d0     00a0  
     702 000032e0     0b29          addi    [23,0],a9
         000032f0 00170000  
     703 00003310     0b2a          addi    [23,0],a10
         00003320 00170000  
     704 00003340     c0d2          jruc    mtqdloop
     705                    
     706 00003350           mtqddone
     707 00003350                   RETP
     708                    
     709 00003380           mtqdhscore_mes
     710 00003380                   JAM_STR osgemd_ascii,10,0,200,10,BLUE,print_string_C2
     711 00003420       46          .byte   "FASTEST PINDOWN TIMES",0,0
     712 000034e0                   .even
     713                    
     714                    
     715                    *********************************************************************
     716                    * Display win streaks table
     717                    *
     718                    
     719 000034e0            SUBR   print_winstreaks
     720                    
     721 000034e0     09e2          movi    rerlstreak_mes,a2
         000034f0 00003d60' 
     722 00003510     0d5f          calla   print_message
         00003520 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   18

     723                    
     724 00003540     09e0          MOVI    [10,0],A0
         00003550 000a0000  
     725 00003570     09e1          MOVI    [21,0],A1
         00003580 00150000  
     726                    
     727 000035a0     09e2          movi    MVEBAR_R,a2
         000035b0 00000000! 
     728 000035d0     09c3          movi    1799H,a3
         000035e0     1799  
     729 000035f0     09e4          movi    DMAWNZ,a4
         00003600 00008002  
     730 00003620     09c5          movi    CLSNEUT,a5
         00003630     0000  
     731 00003640     56c6          CLR     A6
     732 00003650     56e7          CLR     A7
     733 00003660     0d5f          calla   BEGINOBJ
         00003670 00000000! 
     734                    
     735 00003690     09e0          MOVI    [13,0],A0
         000036a0 000d0000  
     736 000036c0     09e1          MOVI    [21+9,0],A1
         000036d0 001e0000  
     737                    
     738 000036f0     09e2          movi    SHADOW01,a2
         00003700 00000000! 
     739 00003720     09c3          movi    1799H,a3
         00003730     1799  
     740 00003740     09e4          movi    DMAWNZ,a4
         00003750 00008002  
     741 00003770     09c5          movi    CLSNEUT,a5
         00003780     0000  
     742 00003790     56c6          CLR     A6
     743 000037a0     56e7          CLR     A7
     744 000037b0     0d5f          calla   BEGINOBJ
         000037c0 00000000! 
     745                    
     746 000037e0     09c0          movi    FLASH_PID,A0
         000037f0     0139  
     747 00003800     5621          CLR     A1
     748 00003810     03e1          NOT     A1
     749 00003820     0d5f          CALLA   KILALL
         00003830 00000000! 
     750                    
     751 00003850                   CREATE  FLASH_PID,JUDDER_SHADOW
     752                    
     753 000038d0     09c7          movi    18,a7                   ;draw 18
         000038e0     0012  
     754 000038f0     1823          MOVK    1,A3
     755                    ;       clr     a3
     756                    
     757 00003900     09e8          movi    STREAK_TABLE_ORIGIN+HS_SIZE,a8
         00003910 014082a0  
     758 00003930     09e9          movi    [40,8],a9
         00003940 00280008  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   19

     759 00003960     09ea          movi    [38,44],a10
         00003970 0026002c  
     760                    
     761 00003990           rerlloop
     762 00003990     09eb          movi    GOLD,a11
         000039a0 00000000! 
     763 000039c0     09c0          movi    AUD_WINSTREAK,A0
         000039d0     0057  
     764 000039e0     0d5f          calla   GET_AUD
         000039f0 00000000! 
     765 00003a10     4823          cmp     a1,a3
     766 00003a20     cb03          jrne    rerlgold
     767 00003a30     09eb          movi    BLUE,a11
         00003a40 00000000! 
     768 00003a60           rerlgold
     769 00003a60                   PUSH    A3,a7,a8,a9,a10,a11
     770 00003a80     09c1          movi    STREAK_TABLE_SELECT,a1
         00003a90     0001  
     771 00003aa0     0d3f          callr   SET_PAGE
         00003ab0     0e80  
     772 00003ac0     09e5          movi    copy_string,a5
         00003ad0 00000000! 
     773 00003af0     09e1          MOVI    [6aH,0],a1
         00003b00 006a0000  
     774 00003b20     09e2          movi    WINS,a2
         00003b30 00000000! 
     775 00003b50     09c6          MOVI    80,A6
         00003b60     0050  
     776 00003b70     0d3f          callr   draw_winstreak_table_entry
         00003b80     031e  
     777 00003b90                   PULL    A3,a7,a8,a9,a10,a11
     778 00003bb0     1023          INC     A3
     779 00003bc0     1427          dec     a7
     780 00003bd0     ca15          jrz     rerldone
     781 00003be0     0b47          cmpi    9,a7
         00003bf0     fff6  
     782 00003c00     ca09          jreq    reset_position
     783                    
     784 00003c10     0b08          addi    HS_SIZE,a8
         00003c20     00a0  
     785 00003c30     0b29          addi    [23,0],a9
         00003c40 00170000  
     786 00003c60     0b2a          addi    [23,0],a10
         00003c70 00170000  
     787 00003c90     c0cf          jruc    rerlloop
     788                    
     789 00003ca0           reset_position
     790 00003ca0     0b08          addi    HS_SIZE,a8
         00003cb0     00a0  
     791 00003cc0     09e9          movi    [40,208+5],a9
         00003cd0 002800d5  
     792 00003cf0     09ea          movi    [38,244+5],a10
         00003d00 002600f9  
     793 00003d20     c0c6          jruc    rerlloop
     794                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   20

     795 00003d30           rerldone
     796 00003d30                   RETP
     797                    
     798                    
     799 00003d60           rerlstreak_mes
     800 00003d60                   JAM_STR osgemd_ascii,10,0,200,10,BLUE,print_string_C2
     801 00003e00       4c          .byte   "LONGEST WINNING STREAKS",0,0
     802 00003ed0                   .even
     803                    
     804 00003ed0           special_copy
     805 00003ed0     09e2          movi    message_buffer,a2
         00003ee0 00000000! 
     806 00003f00     09e3          movi    message_buffer2,a3
         00003f10 00000000! 
     807 00003f30     9862          move    *a3+,*a2+
     808 00003f40     09c1          movi    ".",a1
         00003f50     002e  
     809 00003f60     8c22          movb    a1,*a2
     810 00003f70     0b02          addi    8,a2
         00003f80     0008  
     811 00003f90     9c62          movb    *a3,*a2
     812 00003fa0     0b02          addi    8,a2
         00003fb0     0008  
     813 00003fc0     0b03          addi    16,a3
         00003fd0     0010  
     814 00003fe0     5621          clr     a1
     815 00003ff0     8c22          movb    a1,*a2
     816 00004000     19e0          MOVK    15,A0
     817 00004010     0580          move    a0,@mess_spacing
         00004020 00000000! 
     818 00004040     1820          MOVK    1,A0
     819 00004050     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         00004060 00000000! 
     820 00004080     0960          rets
     821                    
     822 000000b0                   .bss    work_buffer,8*10
     823                    
     824                    *********************************************
     825                    *
     826 00004090            SUBRP  strip_white
     827 00004090                   PUSH    a0,a1,a2
     828 000040b0     09e0          movi    work_buffer,a0          ; Pointer to work buffer
         000040c0 000000b0- 
     829 000040e0     1423          subk    1,a3
     830 000040f0     2463          sll     3,a3                    ; Set pointer to end of buffer
     831 00004100     4c61          move    a3,a1
     832 00004110     0b21          addi    work_buffer,a1
         00004120 000000b0- 
     833 00004140           gnraff_loop
     834 00004140     8e02          movb    *a0,a2                  ; Get char
     835 00004150     0b42          cmpi    20h,a2                  ; Is it a space ?
         00004160     ffdf  
     836 00004170     cb04          jrnz    gnrafirst_found         ; br = no
     837 00004180     4c42          move    a2,a2                   ; Is it 0 ?
     838 00004190     ca02          jrz     gnrafirst_found         ; br = yes
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   21

     839 000041a0     1100          addk    8,a0                    ; Increment front pointer
     840 000041b0     c0f8          jruc    gnraff_loop             ; Go check next char
     841                    
     842 000041c0           gnrafirst_found
     843 000041c0           gnrafl_loop
     844 000041c0     8e22          movb    *a1,a2                  ; Get char
     845 000041d0     4c42          move    a2,a2                   ; Is it 0 ?
     846 000041e0     ca03          jrz     gnraget_prev
     847 000041f0     0b42          cmpi    20h,a2                  ; Is it a space ?
         00004200     ffdf  
     848 00004210     cb06          jrnz    gnralast_found          ; br = yes
     849 00004220           gnraget_prev
     850 00004220     0b61          cmpi    work_buffer,a1          ; Are we at beginning ?
         00004230 ffffff4f- 
     851 00004250     ca02          jrz     gnralast_found          ; br = yes
     852 00004260     1501          subk    8,a1                    ; Decrement pointer
     853 00004270     c0f4          jruc    gnrafl_loop             ; Go check previous char
     854                    
     855 00004280           gnralast_found
     856 00004280     1101          addk    8,a1
     857 00004290     09e2          movi    message_buffer,a2       ; Where we are gonna put it
         000042a0 00000000! 
     858 000042c0     4801          cmp     a0,a1                   ; back pointer > front pointer ?
     859 000042d0     c707          jrgt    gnracopy_loop           ; br = yes
     860 000042e0     09e0          movi    work_buffer,a0          ; reset front pointer
         000042f0 000000b0- 
     861 00004310     4c61          move    a3,a1
     862 00004320     0b21          addi    work_buffer,a1
         00004330 000000b0- 
     863 00004350           gnracopy_loop
     864 00004350     8e0e          movb    *a0,a14                 ; Get char
     865 00004360     8dc2          movb    a14,*a2                 ; Write to message buffer
     866 00004370     1100          addk    8,a0                    ; Increment front pointer
     867 00004380     4801          cmp     a0,a1                   ; front = back ?
     868 00004390     ca02          jrz     gnracopy_done           ; br = yes
     869 000043a0     1102          addk    8,a2                    ; Increment dest pointer
     870 000043b0     c0f9          jruc    gnracopy_loop           ; Go do next char
     871                    
     872 000043c0           gnracopy_done
     873 000043c0     1102          addk    8,a2                    ; Increment dest pointer
     874 000043d0     5621          clr     a1                      ; NULL terminate the string
     875 000043e0     8022          move    a1,*a2
     876                    
     877 000043f0                   PULL    a0,a1,a2
     878 00004410     0960          rets
     879                    
     880                    *******************************
     881                    * Display a table entry (initials and score)
     882                    * 0a8H=*entry, a9=[Y,Xleft] of initials, a10=[Y,Xright] of score, a11=pal
     883                    * 0a0H=draw high score message? (0|1)
     884                    
     885 00004420            SUBRP   draw_tag_table_entry
     886 00004420                   PUSH    A7
     887                    
     888 00004430                   push    a8
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   22

     889 00004440                   PUSH    A5
     890 00004450                   PUSH    A6
     891 00004460     4d40          move    a10,a0
     892 00004470     2600          sll     16,a0
     893 00004480     4020          ADD     A1,A0
     894 00004490     4d41          move    a10,a1
     895 000044a0     2e01          srl     16,a1
     896 000044b0     2601          sll     16,a1
     897 000044c0     0b21          addi    [4,0],a1
         000044d0 00040000  
     898 000044f0     09c3          movi    1000H,a3
         00004500     1000  
     899 00004510     09e4          movi    DMAWNZ,a4
         00004520 00008002  
     900 00004540     09c5          movi    CLSNEUT,a5
         00004550     0000  
     901 00004560     56c6          clr     a6
     902 00004570     56e7          clr     a7
     903 00004580     0d5f          calla   BEGINOBJW
         00004590 00000000! 
     904 000045b0                   PULL    A6
     905 000045c0                   PULL    A5
     906 000045d0                   pull    a8
     907                    
     908 000045e0     4d07          move    a8,a7
     909 000045f0     0d3f          callr   RC_LONG                 ;read the score
         00004600     0ecf  
     910 00004610     0d5f          calla   BCDBIN
         00004620 00000000! 
     911 00004640     0d3f          callr   val_to_dec_tenths_asc
         00004650     0126  
     912                    
     913 00004660     1840          movk    2,a0
     914 00004670     0580          move    a0,@mess_spacing
         00004680 00000000! 
     915 000046a0     5600          CLR     A0
     916 000046b0     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         000046c0 00000000! 
     917 000046e0     09e0          movi    font18_ascii,a0
         000046f0 00000000! 
     918 00004710     0780          move    a0,@message_ascii,L
         00004720 00000000! 
     919 00004740     09c0          movi    10,a0
         00004750     000a  
     920 00004760     0580          move    a0,@mess_space_width
         00004770 00000000! 
     921 00004790     4d40          move    a10,a0
     922 000047a0     2600          sll     16,a0
     923 000047b0     2e00          srl     16,a0
     924 000047c0     40c0          add     A6,a0
     925 000047d0     0580          move    a0,@mess_cursx
         000047e0 00000000! 
     926 00004800     4d40          move    a10,a0
     927 00004810     2e00          srl     16,a0
     928 00004820     0580          move    a0,@mess_cursy
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   23

         00004830 00000000! 
     929 00004850     09e0          movi    WGSF_W_P1,a0
         00004860 00000000! 
     930 00004880     0780          move    a0,@message_palette,L
         00004890 00000000! 
     931 000048b0     0d5f          calla   print_string_R
         000048c0 00000000! 
     932                    
     933                            ;initials
     934 000048e0     09e1          movi    work_buffer,a1
         000048f0 000000b0- 
     935 00004910     4d07          move    a8,a7
     936 00004920     0b07          addi    HS_INITS,a7
         00004930     0040  
     937 00004940     09c2          movi    5,a2
         00004950     0005  
     938                    
     939 00004960           cpyxinitloop
     940 00004960     0d3f          callr   RC_BYTEI
         00004970     0e7a  
     941 00004980     8c01          movb    a0,*a1
     942 00004990     1101          addk    8,a1
     943 000049a0     3ca2          dsj     a2,cpyxinitloop
     944                    
     945 000049b0     18a3          movk    5,a3
     946 000049c0     0d3f          callr   strip_white
         000049d0     ff6b  
     947                    
     948 000049e0     5600          clr     a0                      ;null-terminate it
     949 000049f0     8c01          movb    a0,*a1
     950                    
     951 00004a00     09e0          movi    osgemd_ascii,a0
         00004a10 00000000! 
     952 00004a30     0780          move    a0,@message_ascii,L
         00004a40 00000000! 
     953 00004a60     09c0          movi    10,a0
         00004a70     000a  
     954 00004a80     0580          move    a0,@mess_space_width
         00004a90 00000000! 
     955 00004ab0     5600          clr     a0
     956 00004ac0     0580          move    a0,@mess_spacing
         00004ad0 00000000! 
     957 00004af0     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         00004b00 00000000! 
     958 00004b20     4d40          move    a10,a0
     959 00004b30     2600          sll     16,a0
     960 00004b40     2e00          srl     16,a0
     961 00004b50     13c0          addk    30,a0
     962 00004b60     0580          move    a0,@mess_cursx
         00004b70 00000000! 
     963 00004b90     4d40          move    a10,a0
     964 00004ba0     2e00          srl     16,a0
     965 00004bb0     0580          move    a0,@mess_cursy
         00004bc0 00000000! 
     966 00004be0     078b          move    a11,@message_palette,L
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   24

         00004bf0 00000000! 
     967 00004c10     0d5f          calla   print_string_C
         00004c20 00000000! 
     968                    
     969                    
     970 00004c40                   push    a8
     971 00004c50     4d40          move    a10,a0
     972 00004c60     2600          sll     16,a0
     973 00004c70     0b20          addi    [52h,0],a0
         00004c80 00520000  
     974                    
     975 00004ca0     4d41          move    a10,a1
     976 00004cb0     2e01          srl     16,a1
     977 00004cc0     2601          sll     16,a1
     978                    
     979 00004cd0     4f60          move    a11,b0
     980 00004ce0     09e2          movi    OSGEMD_AND,a2
         00004cf0 00000000! 
     981 00004d10     09c3          movi    1799H,a3
         00004d20     1799  
     982 00004d30     09e4          movi    DMAWNZ,a4
         00004d40 00008002  
     983 00004d60     09c5          movi    CLSNEUT,a5
         00004d70     0000  
     984 00004d80     56c6          CLR     A6
     985 00004d90     56e7          CLR     A7
     986 00004da0     0d5f          calla   BEGINOBJP
         00004db0 00000000! 
     987 00004dd0                   pull    a8
     988                    
     989                            ;initials second set
     990 00004de0     09e1          movi    work_buffer,a1
         00004df0 000000b0- 
     991 00004e10     4d07          move    a8,a7
     992 00004e20     0b07          addi    HS_INITS+HS_SIZE,a7
         00004e30     00e0  
     993 00004e40     09c2          movi    5,a2
         00004e50     0005  
     994                    
     995 00004e60           cpyxinitloop2
     996 00004e60     0d3f          callr   RC_BYTEI
         00004e70     0e2a  
     997 00004e80     8c01          movb    a0,*a1
     998 00004e90     1101          addk    8,a1
     999 00004ea0     3ca2          dsj     a2,cpyxinitloop2
    1000                    
    1001 00004eb0     18a3          movk    5,a3
    1002 00004ec0     0d3f          callr   strip_white
         00004ed0     ff1b  
    1003                    
    1004 00004ee0     5600          clr     a0                      ;null-terminate it
    1005 00004ef0     8c01          movb    a0,*a1
    1006                    
    1007 00004f00     09e0          movi    osgemd_ascii,a0
         00004f10 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   25

    1008 00004f30     0780          move    a0,@message_ascii,L
         00004f40 00000000! 
    1009 00004f60     09c0          movi    10,a0
         00004f70     000a  
    1010 00004f80     0580          move    a0,@mess_space_width
         00004f90 00000000! 
    1011 00004fb0     5600          clr     a0
    1012 00004fc0     0580          move    a0,@mess_spacing
         00004fd0 00000000! 
    1013 00004ff0     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         00005000 00000000! 
    1014 00005020     4d40          move    a10,a0
    1015 00005030     2600          sll     16,a0
    1016 00005040     2e00          srl     16,a0
    1017 00005050     0b00          addi    155,a0
         00005060     009b  
    1018 00005070     0580          move    a0,@mess_cursx
         00005080 00000000! 
    1019 000050a0     4d40          move    a10,a0
    1020 000050b0     2e00          srl     16,a0
    1021 000050c0     0580          move    a0,@mess_cursy
         000050d0 00000000! 
    1022 000050f0     078b          move    a11,@message_palette,L
         00005100 00000000! 
    1023 00005120     0d5f          calla   print_string_C
         00005130 00000000! 
    1024                    
    1025 00005150     4d20          move    a9,a0
    1026 00005160     2600          sll     16,a0
    1027 00005170     0d00          subi    [8,0],a0
         00005180 fff7ffff  
    1028 000051a0     4d21          move    a9,a1
    1029 000051b0     2e01          srl     16,a1
    1030 000051c0     2601          sll     16,a1
    1031 000051d0     0b21          addi    [2,0],a1
         000051e0 00020000  
    1032 00005200     09e2          movi    SPEAR,a2
         00005210 00000000! 
    1033 00005230     09c3          movi    1000H,a3
         00005240     1000  
    1034 00005250     09e4          movi    DMAWNZ,a4
         00005260 00008002  
    1035 00005280     09c5          movi    CLSNEUT,a5
         00005290     0000  
    1036 000052a0     56c6          clr     a6
    1037 000052b0     56e7          clr     a7
    1038 000052c0     0d5f          calla   BEGINOBJW
         000052d0 00000000! 
    1039                    
    1040 000052f0     4d20          move    a9,a0
    1041 00005300     2600          sll     16,a0
    1042 00005310     0b20          addi    [13,0],a0
         00005320 000d0000  
    1043 00005340     4d21          move    a9,a1
    1044 00005350     2e01          srl     16,a1
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   26

    1045 00005360     2601          sll     16,a1
    1046 00005370     0b21          addi    [2,0],a1
         00005380 00020000  
    1047 000053a0     09e2          movi    SPEAR,a2
         000053b0 00000000! 
    1048 000053d0     09c3          movi    1001H,a3
         000053e0     1001  
    1049 000053f0     09e4          movi    DMAWNZ,a4
         00005400 00008002  
    1050 00005420     09c5          movi    CLSNEUT,a5
         00005430     0000  
    1051 00005440     56c6          clr     a6
    1052 00005450     56e7          clr     a7
    1053 00005460     0d5f          calla   BEGINOBJW
         00005470 00000000! 
    1054                    
    1055 00005490                   PULL    A7
    1056                    
    1057 000054a0     09c0          movi    "#",a0
         000054b0     0023  
    1058 000054c0     05e0          movb    a0,@message_buffer
         000054d0 00000000! 
    1059 000054f0     1101          addk    8,a1
    1060                    
    1061 00005500     1940          MOVK    10,A0
    1062 00005510     44e0          SUB     A7,A0
    1063 00005520     0d5f          calla   BINBCD                  ;dec number in A0
         00005530 00000000! 
    1064 00005550     4c01          move    a0,a1
    1065 00005560     09e2          movi    message_buffer+8,a2
         00005570 00000008! 
    1066 00005590     0d5f          calla   dec_to_asc_new_entry
         000055a0 00000000! 
    1067                    
    1068 000055c0     5600          clr     a0
    1069 000055d0     9002          move    a0,*a2+
    1070                    
    1071 000055e0     09e0          movi    wsf14_ascii,a0
         000055f0 00000000! 
    1072 00005610     0780          move    a0,@message_ascii,L
         00005620 00000000! 
    1073 00005640     09c0          movi    7,a0
         00005650     0007  
    1074 00005660     0580          move    a0,@mess_space_width
         00005670 00000000! 
    1075 00005690     5600          clr     a0
    1076 000056a0     0580          move    a0,@mess_spacing
         000056b0 00000000! 
    1077 000056d0     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         000056e0 00000000! 
    1078 00005700     4d20          move    a9,a0
    1079 00005710     2600          sll     16,a0
    1080 00005720     2e00          srl     16,a0
    1081 00005730     0580          move    a0,@mess_cursx
         00005740 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   27

    1082 00005760     4d20          move    a9,a0
    1083 00005770     2e00          srl     16,a0
    1084 00005780     0580          move    a0,@mess_cursy
         00005790 00000000! 
    1085 000057b0     09e0          movi    WSF_W_P,a0
         000057c0 00000000! 
    1086 000057e0     0780          move    a0,@message_palette,L
         000057f0 00000000! 
    1087 00005810     09c0          movi    1003h,a0
         00005820     1003  
    1088 00005830     0780          move    a0,@mess_z,L
         00005840 00000000! 
    1089 00005860     0d5f          calla   print_string_with_z
         00005870 00000000! 
    1090                    
    1091 00005890     0960          rets
    1092                    
    1093                    
    1094 000058a0           dot
    1095 000058a0       2e          .string ".",0
    1096 000058b0                   .even
    1097 000058b0           zero
    1098 000058b0       30          .string "0",0
    1099 000058c0                   .even
    1100                    
    1101                    ; A0 = binary value
    1102                            .ref    concat_string
    1103                            .ref    concat_rom_string
    1104                    
    1105 000058c0            SUBRP  val_to_dec_tenths_asc
    1106 000058c0                   PUSH    a1,a2,a3,a4,a5,a6
    1107                    
    1108 000058e0     09c3          movi    10,a3
         000058f0     000a  
    1109 00005900     4c01          move    a0,a1
    1110 00005910     5a61          divu    a3,a1
    1111 00005920     4c20          move    a1,a0
    1112                    
    1113 00005930     09c3          movi    10,a3
         00005940     000a  
    1114 00005950     4c01          move    a0,a1
    1115 00005960     5a61          divu    a3,a1
    1116                    
    1117 00005970     09c2          movi    10,a2
         00005980     000a  
    1118 00005990     4c03          move    a0,a3
    1119 000059a0     6e43          modu    a2,a3
    1120                            
    1121 000059b0                   PUSH    a3
    1122 000059c0     4c20          move    a1,a0
    1123 000059d0     09c1          movi    1000,a1
         000059e0     03e8  
    1124 000059f0     0d5f          calla   dec_to_asc
         00005a00 00000000! 
    1125 00005a20     0d5f          calla   copy_string
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   28

         00005a30 00000000! 
    1126 00005a50     09e4          movi    dot,a4
         00005a60 000058a0' 
    1127 00005a80     0d5f          calla   concat_rom_string
         00005a90 00000000! 
    1128 00005ab0                   PULL    a3
    1129 00005ac0     4c60          move    a3,a0
    1130 00005ad0     ca09          jrz     cpyxis_zero
    1131 00005ae0     09c1          movi    10,a1
         00005af0     000a  
    1132 00005b00     0d5f          calla   dec_to_asc
         00005b10 00000000! 
    1133 00005b30     0d5f          calla   concat_string
         00005b40 00000000! 
    1134 00005b60     c006          jruc    cpyxconv_done
    1135 00005b70           cpyxis_zero
    1136 00005b70     09e4          movi    zero,a4
         00005b80 000058b0' 
    1137 00005ba0     0d5f          calla   concat_rom_string
         00005bb0 00000000! 
    1138 00005bd0           cpyxconv_done
    1139                    
    1140 00005bd0                   PULL    a1,a2,a3,a4,a5,a6
    1141 00005bf0     0960          rets
    1142                    
    1143                    
    1144                    *******************************
    1145                    * Display a table entry (initials and score)
    1146                    * 0a8H=*entry, a9=[Y,Xleft] of initials, a10=[Y,Xright] of score, a11=pal
    1147                    * 0a0H=draw high score message? (0|1)
    1148                    
    1149 00005c00            SUBRP   draw_pinspeed_table_entry
    1150                    
    1151 00005c00                   PUSH    A7
    1152                    
    1153 00005c10                   push    a8
    1154 00005c20                   PUSH    A5
    1155 00005c30                   PUSH    A6
    1156 00005c40     4d40          move    a10,a0
    1157 00005c50     2600          sll     16,a0
    1158 00005c60     4020          ADD     A1,A0
    1159 00005c70     4d41          move    a10,a1
    1160 00005c80     2e01          srl     16,a1
    1161 00005c90     2601          sll     16,a1
    1162 00005ca0     0b21          addi    [4,0],a1
         00005cb0 00040000  
    1163 00005cd0     09c3          movi    1000H,a3
         00005ce0     1000  
    1164 00005cf0     09e4          movi    DMAWNZ,a4
         00005d00 00008002  
    1165 00005d20     09c5          movi    CLSNEUT,a5
         00005d30     0000  
    1166 00005d40     56c6          clr     a6
    1167 00005d50     56e7          clr     a7
    1168 00005d60     0d5f          calla   BEGINOBJW
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   29

         00005d70 00000000! 
    1169 00005d90                   PULL    A6
    1170 00005da0                   PULL    A5
    1171 00005db0                   pull    a8
    1172                    
    1173 00005dc0     4d07          move    a8,a7
    1174 00005dd0     0d3f          callr   RC_LONG                 ;read the score
         00005de0     0d51  
    1175 00005df0     0d5f          calla   BCDBIN
         00005e00 00000000! 
    1176 00005e20     0d3f          callr   val_to_dec_tenths_asc
         00005e30     ffa8  
    1177                    
    1178 00005e40     1840          movk    2,a0
    1179 00005e50     0580          move    a0,@mess_spacing
         00005e60 00000000! 
    1180 00005e80     5600          CLR     A0
    1181 00005e90     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         00005ea0 00000000! 
    1182 00005ec0     09e0          movi    font18_ascii,a0
         00005ed0 00000000! 
    1183 00005ef0     0780          move    a0,@message_ascii,L
         00005f00 00000000! 
    1184 00005f20     09c0          movi    10,a0
         00005f30     000a  
    1185 00005f40     0580          move    a0,@mess_space_width
         00005f50 00000000! 
    1186 00005f70     4d40          move    a10,a0
    1187 00005f80     2600          sll     16,a0
    1188 00005f90     2e00          srl     16,a0
    1189 00005fa0     40c0          add     A6,a0
    1190 00005fb0     0580          move    a0,@mess_cursx
         00005fc0 00000000! 
    1191 00005fe0     4d40          move    a10,a0
    1192 00005ff0     2e00          srl     16,a0
    1193 00006000     0580          move    a0,@mess_cursy
         00006010 00000000! 
    1194 00006030     09e0          movi    WGSF_W_P1,a0
         00006040 00000000! 
    1195 00006060     0780          move    a0,@message_palette,L
         00006070 00000000! 
    1196 00006090     0d5f          calla   print_string_R
         000060a0 00000000! 
    1197                    
    1198                            ;initials
    1199 000060c0     09e1          movi    message_buffer,a1
         000060d0 00000000! 
    1200 000060f0     4d07          move    a8,a7
    1201 00006100     0b07          addi    HS_INITS,a7
         00006110     0040  
    1202 00006120     09c2          movi    3,a2
         00006130     0003  
    1203                    
    1204 00006140           dtwzinitloop
    1205 00006140     0d3f          callr   RC_BYTEI
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   30

         00006150     0cfc  
    1206 00006160     8c01          movb    a0,*a1
    1207 00006170     1101          addk    8,a1
    1208 00006180     3ca2          dsj     a2,dtwzinitloop
    1209                    
    1210 00006190     0d3f          callr   RC_BYTEI
         000061a0     0cf7  
    1211 000061b0                   push    a0
    1212                    
    1213 000061c0     5600          clr     a0                      ;null-terminate it
    1214 000061d0     8c01          movb    a0,*a1
    1215                    
    1216 000061e0     09e0          movi    osgemd_ascii,a0
         000061f0 00000000! 
    1217 00006210     0780          move    a0,@message_ascii,L
         00006220 00000000! 
    1218 00006240     09c0          movi    10,a0
         00006250     000a  
    1219 00006260     0580          move    a0,@mess_space_width
         00006270 00000000! 
    1220 00006290     5600          clr     a0
    1221 000062a0     0580          move    a0,@mess_spacing
         000062b0 00000000! 
    1222 000062d0     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         000062e0 00000000! 
    1223 00006300     4d40          move    a10,a0
    1224 00006310     2600          sll     16,a0
    1225 00006320     2e00          srl     16,a0
    1226 00006330     0b00          addi    17h,a0
         00006340     0017  
    1227 00006350     0580          move    a0,@mess_cursx
         00006360 00000000! 
    1228 00006380     4d40          move    a10,a0
    1229 00006390     2e00          srl     16,a0
    1230 000063a0     0580          move    a0,@mess_cursy
         000063b0 00000000! 
    1231 000063d0     078b          move    a11,@message_palette,L
         000063e0 00000000! 
    1232 00006400     0d5f          calla   print_string_C
         00006410 00000000! 
    1233                    
    1234 00006430     4d20          move    a9,a0
    1235 00006440     2600          sll     16,a0
    1236 00006450     0d00          subi    [8,0],a0
         00006460 fff7ffff  
    1237 00006480     4d21          move    a9,a1
    1238 00006490     2e01          srl     16,a1
    1239 000064a0     2601          sll     16,a1
    1240 000064b0     0b21          addi    [2,0],a1
         000064c0 00020000  
    1241 000064e0     09e2          movi    SPEAR,a2
         000064f0 00000000! 
    1242 00006510     09c3          movi    1000H,a3
         00006520     1000  
    1243 00006530     09e4          movi    DMAWNZ,a4
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   31

         00006540 00008002  
    1244 00006560     09c5          movi    CLSNEUT,a5
         00006570     0000  
    1245 00006580     56c6          clr     a6
    1246 00006590     56e7          clr     a7
    1247 000065a0     0d5f          calla   BEGINOBJW
         000065b0 00000000! 
    1248                    
    1249 000065d0     4d20          move    a9,a0
    1250 000065e0     2600          sll     16,a0
    1251 000065f0     0b20          addi    [13,0],a0
         00006600 000d0000  
    1252 00006620     4d21          move    a9,a1
    1253 00006630     2e01          srl     16,a1
    1254 00006640     2601          sll     16,a1
    1255 00006650     0b21          addi    [2,0],a1
         00006660 00020000  
    1256 00006680     09e2          movi    SPEAR,a2
         00006690 00000000! 
    1257 000066b0     09c3          movi    1001H,a3
         000066c0     1001  
    1258 000066d0     09e4          movi    DMAWNZ,a4
         000066e0 00008002  
    1259 00006700     09c5          movi    CLSNEUT,a5
         00006710     0000  
    1260 00006720     56c6          clr     a6
    1261 00006730     56e7          clr     a7
    1262 00006740     0d5f          calla   BEGINOBJW
         00006750 00000000! 
    1263                    
    1264 00006770                   pull    a0
    1265                    
    1266 00006780     0be0          SUBI    "A",a0
         00006790     ffbe  
    1267 000067a0     24a0          sll     5,a0
    1268 000067b0     0b20          addi    WHICH_NAMES,A0
         000067c0 00007d30' 
    1269 000067e0     8602          MOVE    *A0,A2,L
    1270                    
    1271 000067f0     4d20          move    a9,a0
    1272 00006800     2600          sll     16,a0
    1273 00006810     0b20          addi    [302,0],a0
         00006820 012e0000  
    1274 00006840     4d21          move    a9,a1
    1275 00006850     2e01          srl     16,a1
    1276 00006860     2601          sll     16,a1
    1277 00006870     0b21          addi    [7,0],a1
         00006880 00070000  
    1278 000068a0     09c3          movi    1001H,a3
         000068b0     1001  
    1279 000068c0     09e4          movi    DMAWNZ,a4
         000068d0 00008002  
    1280 000068f0     09c5          movi    CLSNEUT,a5
         00006900     0000  
    1281 00006910     56c6          clr     a6
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   32

    1282 00006920     56e7          clr     a7
    1283 00006930     0d5f          calla   BEGINOBJW
         00006940 00000000! 
    1284                    
    1285 00006960                   PULL    A7
    1286                    
    1287 00006970     09c0          movi    "#",a0
         00006980     0023  
    1288 00006990     05e0          movb    a0,@message_buffer
         000069a0 00000000! 
    1289 000069c0     1101          addk    8,a1
    1290                    
    1291 000069d0     1940          MOVK    10,A0
    1292 000069e0     44e0          SUB     A7,A0
    1293 000069f0     0d5f          calla   BINBCD                  ;dec number in A0
         00006a00 00000000! 
    1294 00006a20     4c01          move    a0,a1
    1295 00006a30     09e2          movi    message_buffer+8,a2
         00006a40 00000008! 
    1296 00006a60     0d5f          calla   dec_to_asc_new_entry
         00006a70 00000000! 
    1297                    
    1298 00006a90     5600          clr     a0
    1299 00006aa0     9002          move    a0,*a2+
    1300                    
    1301 00006ab0     09e0          movi    wsf14_ascii,a0
         00006ac0 00000000! 
    1302 00006ae0     0780          move    a0,@message_ascii,L
         00006af0 00000000! 
    1303 00006b10     09c0          movi    7,a0
         00006b20     0007  
    1304 00006b30     0580          move    a0,@mess_space_width
         00006b40 00000000! 
    1305 00006b60     5600          clr     a0
    1306 00006b70     0580          move    a0,@mess_spacing
         00006b80 00000000! 
    1307 00006ba0     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         00006bb0 00000000! 
    1308 00006bd0     4d20          move    a9,a0
    1309 00006be0     2600          sll     16,a0
    1310 00006bf0     2e00          srl     16,a0
    1311 00006c00     0580          move    a0,@mess_cursx
         00006c10 00000000! 
    1312 00006c30     4d20          move    a9,a0
    1313 00006c40     2e00          srl     16,a0
    1314 00006c50     0580          move    a0,@mess_cursy
         00006c60 00000000! 
    1315 00006c80     09e0          movi    WSF_W_P,a0
         00006c90 00000000! 
    1316 00006cb0     0780          move    a0,@message_palette,L
         00006cc0 00000000! 
    1317 00006ce0     09c0          movi    1003h,a0
         00006cf0     1003  
    1318 00006d00     0780          move    a0,@mess_z,L
         00006d10 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   33

    1319 00006d30     0d5f          calla   print_string_with_z
         00006d40 00000000! 
    1320                    
    1321 00006d60     0960          rets
    1322                    
    1323                    *******************************
    1324 00006d70            SUBRP  draw_winstreak_table_entry
    1325                    
    1326 00006d70                   PUSH    A7
    1327                    
    1328 00006d80                   push    a8
    1329 00006d90                   PUSH    A5
    1330 00006da0                   PUSH    A6
    1331 00006db0     4d40          move    a10,a0
    1332 00006dc0     2600          sll     16,a0
    1333 00006dd0     4020          ADD     A1,A0
    1334 00006de0     4d41          move    a10,a1
    1335 00006df0     2e01          srl     16,a1
    1336 00006e00     2601          sll     16,a1
    1337 00006e10     0b21          addi    [4,0],a1
         00006e20 00040000  
    1338 00006e40     09c3          movi    1000H,a3
         00006e50     1000  
    1339 00006e60     09e4          movi    DMAWNZ,a4
         00006e70 00008002  
    1340 00006e90     09c5          movi    CLSNEUT,a5
         00006ea0     0000  
    1341 00006eb0     56c6          clr     a6
    1342 00006ec0     56e7          clr     a7
    1343 00006ed0     0d5f          calla   BEGINOBJW
         00006ee0 00000000! 
    1344 00006f00                   PULL    A6
    1345 00006f10                   PULL    A5
    1346 00006f20                   pull    a8
    1347                    
    1348 00006f30     4d07          move    a8,a7
    1349 00006f40     0d3f          callr   RC_LONG                 ;read the score
         00006f50     0c3a  
    1350 00006f60     0d5f          calla   BCDBIN
         00006f70 00000000! 
    1351 00006f90     09e1          movi    9999999,a1
         00006fa0 0098967f  
    1352 00006fc0     0d5f          calla   dec_to_asc              ;convert to ASCII
         00006fd0 00000000! 
    1353 00006ff0     5600          CLR     A0
    1354 00007000     0580          move    a0,@mess_spacing
         00007010 00000000! 
    1355 00007030     0925          call    a5
    1356                    
    1357 00007040     5600          clr     a0
    1358 00007050     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         00007060 00000000! 
    1359 00007080     09e0          movi    font18_ascii,a0
         00007090 00000000! 
    1360 000070b0     0780          move    a0,@message_ascii,L
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   34

         000070c0 00000000! 
    1361 000070e0     09c0          movi    10,a0
         000070f0     000a  
    1362 00007100     0580          move    a0,@mess_space_width
         00007110 00000000! 
    1363 00007130     4d40          move    a10,a0
    1364 00007140     2600          sll     16,a0
    1365 00007150     2e00          srl     16,a0
    1366 00007160     40c0          add     A6,a0
    1367 00007170     0580          move    a0,@mess_cursx
         00007180 00000000! 
    1368 000071a0     4d40          move    a10,a0
    1369 000071b0     2e00          srl     16,a0
    1370 000071c0     0580          move    a0,@mess_cursy
         000071d0 00000000! 
    1371 000071f0     09e0          movi    WGSF_W_P1,a0
         00007200 00000000! 
    1372 00007220     0780          move    a0,@message_palette,L
         00007230 00000000! 
    1373 00007250     0d5f          calla   print_string_C
         00007260 00000000! 
    1374                    
    1375                            ;initials
    1376                    ;       movi    message_buffer,a1
    1377 00007280     09e1          movi    work_buffer,a1
         00007290 000000b0- 
    1378 000072b0     4d07          move    a8,a7
    1379 000072c0     0b07          addi    HS_INITS,a7
         000072d0     0040  
    1380 000072e0     09c2          movi    3,a2
         000072f0     0003  
    1381                    
    1382 00007300           zmusinitloop
    1383 00007300     0d3f          callr   RC_BYTEI
         00007310     0be0  
    1384 00007320     8c01          movb    a0,*a1
    1385 00007330     1101          addk    8,a1
    1386 00007340     3ca2          dsj     a2,zmusinitloop
    1387                    
    1388 00007350     1863          movk    3,a3
    1389 00007360     0d3f          callr   strip_white
         00007370     fcd1  
    1390                    
    1391 00007380     5600          clr     a0                      ;null-terminate it
    1392 00007390     8c01          movb    a0,*a1
    1393                    
    1394 000073a0     09e0          movi    osgemd_ascii,a0
         000073b0 00000000! 
    1395 000073d0     0780          move    a0,@message_ascii,L
         000073e0 00000000! 
    1396 00007400     09c0          movi    10,a0
         00007410     000a  
    1397 00007420     0580          move    a0,@mess_space_width
         00007430 00000000! 
    1398 00007450     5600          clr     a0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   35

    1399 00007460     0580          move    a0,@mess_spacing
         00007470 00000000! 
    1400 00007490     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         000074a0 00000000! 
    1401 000074c0     4d40          move    a10,a0
    1402 000074d0     2600          sll     16,a0
    1403 000074e0     2e00          srl     16,a0
    1404 000074f0     0b00          addi    17h,a0
         00007500     0017  
    1405 00007510     0580          move    a0,@mess_cursx
         00007520 00000000! 
    1406 00007540     4d40          move    a10,a0
    1407 00007550     2e00          srl     16,a0
    1408 00007560     0580          move    a0,@mess_cursy
         00007570 00000000! 
    1409 00007590     078b          move    a11,@message_palette,L
         000075a0 00000000! 
    1410 000075c0     0d5f          calla   print_string_C
         000075d0 00000000! 
    1411                    
    1412 000075f0     4d20          move    a9,a0
    1413 00007600     2600          sll     16,a0
    1414 00007610     0d00          subi    [8,0],a0
         00007620 fff7ffff  
    1415 00007640     4d21          move    a9,a1
    1416 00007650     2e01          srl     16,a1
    1417 00007660     2601          sll     16,a1
    1418 00007670     0b21          addi    [2,0],a1
         00007680 00020000  
    1419 000076a0     09e2          movi    SPEAR,a2
         000076b0 00000000! 
    1420 000076d0     09c3          movi    1000H,a3
         000076e0     1000  
    1421 000076f0     09e4          movi    DMAWNZ,a4
         00007700 00008002  
    1422 00007720     09c5          movi    CLSNEUT,a5
         00007730     0000  
    1423 00007740     56c6          clr     a6
    1424 00007750     56e7          clr     a7
    1425 00007760     0d5f          calla   BEGINOBJW
         00007770 00000000! 
    1426                    
    1427 00007790     4d20          move    a9,a0
    1428 000077a0     2600          sll     16,a0
    1429 000077b0     0d00          SUBi    [10,0],a0
         000077c0 fff5ffff  
    1430 000077e0     4d21          move    a9,a1
    1431 000077f0     2e01          srl     16,a1
    1432 00007800     2601          sll     16,a1
    1433 00007810     0b21          addi    [2,0],a1
         00007820 00020000  
    1434 00007840     09e2          movi    BARBUTT,a2
         00007850 00000000! 
    1435 00007870     09c3          movi    1001H,a3
         00007880     1001  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   36

    1436 00007890     09e4          movi    DMAWNZ,a4
         000078a0 00008002  
    1437 000078c0     09c5          movi    CLSNEUT,a5
         000078d0     0000  
    1438 000078e0     56c6          clr     a6
    1439 000078f0     56e7          clr     a7
    1440 00007900     09f0          MOVI    DPLT_R_P,B0
         00007910 00000000! 
    1441 00007930     0d5f          calla   BEGINOBJWP
         00007940 00000000! 
    1442 00007960                   PULL    A7
    1443                    
    1444                    ;       movi    "#",a0
    1445                    ;       movb    a0,@message_buffer
    1446                    ;       addk    8,a1
    1447                    
    1448 00007970     1a60          MOVK    19,A0
    1449 00007980     44e0          SUB     A7,A0
    1450 00007990     0d5f          calla   BINBCD                  ;dec number in A0
         000079a0 00000000! 
    1451 000079c0     4c01          move    a0,a1
    1452                    ;       movi    message_buffer+8,a2
    1453 000079d0     09e2          movi    message_buffer,a2
         000079e0 00000000! 
    1454 00007a00     0d5f          calla   dec_to_asc_new_entry
         00007a10 00000000! 
    1455                    
    1456 00007a30     5600          clr     a0
    1457 00007a40     9002          move    a0,*a2+
    1458                    
    1459 00007a50     09e0          movi    wsf14_ascii,a0
         00007a60 00000000! 
    1460 00007a80     0780          move    a0,@message_ascii,L
         00007a90 00000000! 
    1461 00007ab0     09c0          movi    7,a0
         00007ac0     0007  
    1462 00007ad0     0580          move    a0,@mess_space_width
         00007ae0 00000000! 
    1463 00007b00     5600          clr     a0
    1464 00007b10     0580          move    a0,@mess_spacing
         00007b20 00000000! 
    1465 00007b40     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         00007b50 00000000! 
    1466 00007b70     4d20          move    a9,a0
    1467 00007b80     2600          sll     16,a0
    1468 00007b90     2e00          srl     16,a0
    1469 00007ba0     0be0          subi    4,a0
         00007bb0     fffb  
    1470 00007bc0     0580          move    a0,@mess_cursx
         00007bd0 00000000! 
    1471 00007bf0     4d20          move    a9,a0
    1472 00007c00     2e00          srl     16,a0
    1473 00007c10     0580          move    a0,@mess_cursy
         00007c20 00000000! 
    1474 00007c40     09e0          movi    WSF_W_P,a0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   37

         00007c50 00000000! 
    1475 00007c70     0780          move    a0,@message_palette,L
         00007c80 00000000! 
    1476 00007ca0     09c0          movi    1003h,a0
         00007cb0     1003  
    1477 00007cc0     0780          move    a0,@mess_z,L
         00007cd0 00000000! 
    1478 00007cf0     0d5f          calla   print_string_with_z
         00007d00 00000000! 
    1479                    
    1480 00007d20     0960          rets
    1481                    
    1482 00007d30           WHICH_NAMES
    1483 00007d30 00000000!         .LONG   HART
    1484 00007d50 00000000!         .LONG   RAZOR
    1485 00007d70 00000000!         .LONG   UNDER
    1486 00007d90 00000000!         .LONG   YOKO
    1487 00007db0 00000000!         .LONG   SHAWN
    1488 00007dd0 00000000!         .LONG   BAMBAM
    1489 00007df0 00000000!         .LONG   DOINK
    1490 00007e10 00000000          .LONG   0
    1491 00007e30 00000000!         .LONG   LEX
    1492                    
    1493 00007e50           which_crouton
    1494 00007e50 00000000!         .long   CRUT_BH
    1495 00007e70 00000000!         .long   CRUT_RR
    1496 00007e90 00000000!         .long   CRUT_UN
    1497 00007eb0 00000000!         .long   CRUT_YK
    1498 00007ed0 00000000!         .long   CRUT_SM
    1499 00007ef0 00000000!         .long   CRUT_BM
    1500 00007f10 00000000!         .long   CRUT_DK
    1501 00007f30 00000000!         .long   CRUT_LX
    1502                    
    1503 00007f50            SUBR   draw_each_inter_table_entry
    1504                    
    1505 00007f50     09c7          movi    HS_SIZE,a7
         00007f60     00a0  
    1506 00007f70     5ee9          mpyu    a7,a9
    1507 00007f80     0b29          addi    INTER_TAB_ORIGIN,a9
         00007f90 0140aec0  
    1508 00007fb0     4d28          move    a9,a8
    1509                    
    1510 00007fc0     09e9          movi    [126H,8],a9
         00007fd0 01260008  
    1511 00007ff0     09ea          movi    [13BH,10],a10
         00008000 013b000a  
    1512                    
    1513 00008020     09eb          movi    GOLD,a11
         00008030 00000000! 
    1514 00008050     09c0          movi    AUD_INTER,A0
         00008060     005a  
    1515 00008070     0d5f          calla   GET_AUD
         00008080 00000000! 
    1516 000080a0     05a5          MOVE    @starting_num,A5
         000080b0 00000000- 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   38

    1517 000080d0     4825          cmp     a1,a5
    1518 000080e0     cb03          jrne    zmusgold2
    1519 000080f0     09eb          movi    BLUE,a11
         00008100 00000000! 
    1520 00008120           zmusgold2
    1521 00008120     09c1          movi    INTER_TAB_SELECT,a1     ;set the read page
         00008130     0003  
    1522 00008140     0d3f          callr   SET_PAGE
         00008150     0a16  
    1523 00008160     09e5          movi    special_copy,a5
         00008170 00003ed0' 
    1524 00008190     c024          JRUC    draw_beaten_table_entry
    1525                    
    1526 000081a0            SUBR   draw_each_beaten_table_entry
    1527                    
    1528 000081a0     09c7          movi    HS_SIZE,a7
         000081b0     00a0  
    1529 000081c0     5ee9          mpyu    a7,a9
    1530 000081d0     0b29          addi    BEATEN_TAB_ORIGIN,a9
         000081e0 014098c0  
    1531 00008200     4d28          move    a9,a8
    1532                    
    1533 00008210     09e9          movi    [126H,8],a9
         00008220 01260008  
    1534 00008240     09ea          movi    [13BH,10],a10
         00008250 013b000a  
    1535                    
    1536 00008270     09eb          movi    GOLD,a11
         00008280 00000000! 
    1537 000082a0     09c0          movi    AUD_BEATEN,A0
         000082b0     0059  
    1538 000082c0     0d5f          calla   GET_AUD
         000082d0 00000000! 
    1539 000082f0     05a5          MOVE    @starting_num,A5
         00008300 00000000- 
    1540 00008320     4825          cmp     a1,a5
    1541 00008330     cb03          jrne    zmusgold
    1542 00008340     09eb          movi    BLUE,a11
         00008350 00000000! 
    1543 00008370           zmusgold
    1544 00008370     09c1          movi    BEATEN_TAB_SELECT,a1    ;set the read page
         00008380     0003  
    1545 00008390     0d3f          callr   SET_PAGE
         000083a0     09f1  
    1546 000083b0     09e5          movi    special_copy,a5
         000083c0 00003ed0' 
    1547                    
    1548                    *******************************
    1549                    * Display a table entry (initials and score)
    1550                    * 0a8H=*entry, a9=[Y,Xleft] of initials, a10=[Y,Xright] of score, a11=pal
    1551                    * 0a0H=draw high score message? (0|1)
    1552                    
    1553 000083e0            SUBR   draw_beaten_table_entry
    1554                    
    1555 000083e0                   push    a7
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   39

    1556 000083f0                   push    a9,a10
    1557 00008410     4d07          move    a8,a7
    1558 00008420     0d3f          callr   RC_LONG                 ;read the score
         00008430     0aec  
    1559 00008440     4c09          move    a0,a9
    1560                    
    1561 00008450     cb04          jrnz    no_reset_blank
    1562 00008460     1820          movk    1,a0
    1563 00008470     0580          move    a0,@not_blank
         00008480 00000090- 
    1564 000084a0           no_reset_blank
    1565                    
    1566 000084a0     190a          movk    8,a10
    1567 000084b0     5663          clr     a3
    1568 000084c0                   pull    a1
    1569 000084d0                   push    a1
    1570 000084e0     4c20          move    a1,a0
    1571 000084f0     2600          sll     16,a0
    1572 00008500     5694          clr     b4
    1573 00008510     0b21          addi    [2,0],a1
         00008520 00020000  
    1574 00008540           next_icon
    1575 00008540     2fe9          srl     1,a9
    1576 00008550     c91f          jrnc    no_icon
    1577 00008560     098f          mmtm    sp,a0,a1,a3,a8,a11
         00008570     d090  
    1578 00008580     4c64          move    a3,a4
    1579 00008590     24a4          sll     5,a4
    1580 000085a0     0b24          addi    which_crouton,a4
         000085b0 00007e50' 
    1581 000085d0     8682          move    *a4,a2,L
    1582 000085e0     09c3          movi    1000H,a3
         000085f0     1000  
    1583 00008600     09e4          movi    DMAWNZ,a4
         00008610 00008002  
    1584 00008630     09c5          movi    CLSNEUT,a5
         00008640     0000  
    1585 00008650     56c6          clr     a6
    1586 00008660     56e7          clr     a7
    1587 00008670     0d5f          calla   BEGINOBJW
         00008680 00000000! 
    1588 000086a0     09e3          movi    01000100h,a3
         000086b0 01000100  
    1589 000086d0     b268          move    a3,*a8(OSCALE),L
         000086e0     0240  
    1590 000086f0     09af          mmfm    sp,a0,a1,a3,a8,a11
         00008700     090b  
    1591 00008710     0b20          addi    [30h,0],a0
         00008720 00300000  
    1592 00008740     1034          inc     b4
    1593 00008750           no_icon
    1594 00008750     2fa9          srl     3,a9
    1595 00008760     1023          inc     a3
    1596 00008770     142a          dec     a10
    1597 00008780     cbdb          jrnz    next_icon
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   40

    1598                    
    1599 00008790     098f          mmtm    sp,a0,a1,a3,a8,a11
         000087a0     d090  
    1600 000087b0     09d5          movi    8,b5
         000087c0     0008  
    1601 000087d0     4495          sub     b4,b5
    1602                    ;loop will attempt to create 2^32 number of dots!!!!!
    1603                    ;Soooooo - don't do it!!!!
    1604 000087e0     ca1c          jrz     tokhno_dots
    1605 000087f0     4eba          move    b5,a10
    1606 00008800     0b20          addi    [10,0],a0
         00008810 000a0000  
    1607 00008830           next_dot
    1608                    ;       movi    CRUTPLT_G,a2
    1609 00008830     09e2          movi    OSGEMD_DOT,a2
         00008840 00000000! 
    1610 00008860     09c3          movi    1000H,a3
         00008870     1000  
    1611 00008880     09e4          movi    DMAWNZ,a4
         00008890 00008002  
    1612 000088b0     09c5          movi    CLSNEUT,a5
         000088c0     0000  
    1613 000088d0     56c6          clr     a6
    1614 000088e0     56e7          clr     a7
    1615 000088f0                   push    a0,a1
    1616 00008910     0d5f          calla   BEGINOBJW
         00008920 00000000! 
    1617 00008940                   pull    a0,a1
    1618 00008960     0b20          addi    [30h,0],a0
         00008970 00300000  
    1619 00008990     142a          dec     a10
    1620 000089a0     cbe8          jrnz    next_dot
    1621 000089b0           tokhno_dots
    1622 000089b0     09af          mmfm    sp,a0,a1,a3,a8,a11
         000089c0     090b  
    1623                    
    1624 000089d0                   pull    a9,a10
    1625                    
    1626                            ;initials
    1627 000089f0           do_just_init
    1628 000089f0     09e1          movi    message_buffer,a1
         00008a00 00000000! 
    1629 00008a20     4d07          move    a8,a7
    1630 00008a30     0b07          addi    HS_INITS,a7
         00008a40     0040  
    1631 00008a50     09c2          movi    5,a2
         00008a60     0005  
    1632                    
    1633 00008a70           tokhinitloop
    1634 00008a70     0d3f          callr   RC_BYTEI
         00008a80     0a69  
    1635 00008a90     8c01          movb    a0,*a1
    1636 00008aa0     1101          addk    8,a1
    1637 00008ab0     3ca2          dsj     a2,tokhinitloop
    1638                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   41

    1639 00008ac0     5600          clr     a0                      ;null-terminate it
    1640 00008ad0     8c01          movb    a0,*a1
    1641                    
    1642 00008ae0     09e0          movi    osgemd_ascii,a0
         00008af0 00000000! 
    1643 00008b10     0780          move    a0,@message_ascii,L
         00008b20 00000000! 
    1644 00008b40     09c0          movi    10,a0
         00008b50     000a  
    1645 00008b60     0580          move    a0,@mess_space_width
         00008b70 00000000! 
    1646 00008b90     5600          clr     a0
    1647 00008ba0     0580          move    a0,@mess_spacing
         00008bb0 00000000! 
    1648 00008bd0     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         00008be0 00000000! 
    1649 00008c00     4d20          move    a9,a0
    1650 00008c10     2600          sll     16,a0
    1651 00008c20     2e00          srl     16,a0
    1652 00008c30     0b00          addi    50,a0
         00008c40     0032  
    1653 00008c50     0580          move    a0,@mess_cursx
         00008c60 00000000! 
    1654 00008c80     4d20          move    a9,a0
    1655 00008c90     2e00          srl     16,a0
    1656 00008ca0     0580          move    a0,@mess_cursy
         00008cb0 00000000! 
    1657 00008cd0     078b          move    a11,@message_palette,L
         00008ce0 00000000! 
    1658 00008d00     09c0          movi    1003h,a0
         00008d10     1003  
    1659 00008d20     0780          move    a0,@mess_z,L
         00008d30 00000000! 
    1660 00008d50     0d5f          calla   print_string_with_z
         00008d60 00000000! 
    1661                    
    1662 00008d80                   push    a1
    1663 00008d90     4d20          move    a9,a0
    1664 00008da0     2600          sll     16,a0
    1665 00008db0     0d00          subi    [8,0],a0
         00008dc0 fff7ffff  
    1666 00008de0     4d21          move    a9,a1
    1667 00008df0     2e01          srl     16,a1
    1668 00008e00     2601          sll     16,a1
    1669 00008e10     0b21          addi    [2,0],a1
         00008e20 00020000  
    1670 00008e40     09e2          movi    SPEAR,a2
         00008e50 00000000! 
    1671 00008e70     09c3          movi    1000H,a3
         00008e80     1000  
    1672 00008e90     09e4          movi    DMAWNZ,a4
         00008ea0 00008002  
    1673 00008ec0     09c5          movi    CLSNEUT,a5
         00008ed0     0000  
    1674 00008ee0     56c6          clr     a6
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   42

    1675 00008ef0     56e7          clr     a7
    1676 00008f00     0d5f          calla   BEGINOBJW
         00008f10 00000000! 
    1677                    
    1678 00008f30     4d20          move    a9,a0
    1679 00008f40     2600          sll     16,a0
    1680 00008f50     0b20          addi    [13,0],a0
         00008f60 000d0000  
    1681 00008f80     4d21          move    a9,a1
    1682 00008f90     2e01          srl     16,a1
    1683 00008fa0     2601          sll     16,a1
    1684 00008fb0     0b21          addi    [2,0],a1
         00008fc0 00020000  
    1685 00008fe0     09e2          movi    SPEAR,a2
         00008ff0 00000000! 
    1686 00009010     09c3          movi    1001H,a3
         00009020     1001  
    1687 00009030     09e4          movi    DMAWNZ,a4
         00009040 00008002  
    1688 00009060     09c5          movi    CLSNEUT,a5
         00009070     0000  
    1689 00009080     56c6          clr     a6
    1690 00009090     56e7          clr     a7
    1691 000090a0     0d5f          calla   BEGINOBJW
         000090b0 00000000! 
    1692 000090d0                   pull    a1
    1693                    
    1694 000090e0                   pull    a7
    1695                    
    1696 000090f0     09c0          movi    "#",a0
         00009100     0023  
    1697 00009110     05e0          movb    a0,@message_buffer
         00009120 00000000! 
    1698 00009140     1101          addk    8,a1
    1699 00009150     05a0          move    @starting_num,a0
         00009160 00000000- 
    1700                    
    1701 00009180     0d5f          calla   BINBCD                  ;dec number in A0
         00009190 00000000! 
    1702 000091b0     4c01          move    a0,a1
    1703 000091c0     09e2          movi    message_buffer+8,a2
         000091d0 00000008! 
    1704 000091f0     0d5f          calla   dec_to_asc_new_entry
         00009200 00000000! 
    1705                    
    1706 00009220     5600          clr     a0
    1707 00009230     9002          move    a0,*a2+
    1708                    
    1709 00009240     09e0          movi    wsf14_ascii,a0
         00009250 00000000! 
    1710 00009270     0780          move    a0,@message_ascii,L
         00009280 00000000! 
    1711 000092a0     09c0          movi    7,a0
         000092b0     0007  
    1712 000092c0     0580          move    a0,@mess_space_width
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   43

         000092d0 00000000! 
    1713 000092f0     5600          clr     a0
    1714 00009300     0580          move    a0,@mess_spacing
         00009310 00000000! 
    1715 00009330     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         00009340 00000000! 
    1716 00009360     4d20          move    a9,a0
    1717 00009370     2600          sll     16,a0
    1718 00009380     2e00          srl     16,a0
    1719 00009390     0580          move    a0,@mess_cursx
         000093a0 00000000! 
    1720 000093c0     4d20          move    a9,a0
    1721 000093d0     2e00          srl     16,a0
    1722 000093e0     0580          move    a0,@mess_cursy
         000093f0 00000000! 
    1723 00009410     09e0          movi    WSF_W_P,a0
         00009420 00000000! 
    1724 00009440     0780          move    a0,@message_palette,L
         00009450 00000000! 
    1725 00009470     09c0          movi    1003h,a0
         00009480     1003  
    1726 00009490     0780          move    a0,@mess_z,L
         000094a0 00000000! 
    1727 000094c0     0d5f          calla   print_string_with_z
         000094d0 00000000! 
    1728                    
    1729 000094f0     0960          rets
    1730                    
    1731                    
    1732                    *******************************
    1733                    * high score page color cyclers
    1734                    *
    1735                    
    1736 00009500            SUBR   hscore_colcyc
    1737                    
    1738 00009500     09e8          movi    [10,7],a8               ;START AT COLOR 10, CYCLE 7 COLORS
         00009510 000a0007  
    1739 00009530     09e9          movi    BLUE,a9                 ;PAL NAME
         00009540 00000000! 
    1740 00009560     09ea          movi    COLTAB2,a10             ;TABLE TO CYCLE WITH
         00009570 00009630' 
    1741 00009590     186b          movk    3,a11                   ;RATE OF CYCLE IN TICKS
    1742 000095a0                   CREATE  CYCPID,CYCLE_TABLE      ;START PROCESS TO DO CYCLE
    1743                    
    1744 00009620     0960          rets
    1745                    
    1746 00009630           COLTAB2
    1747 00009630     033e     .word   0033eh,0135fh,02b7fh,03f9fh,053bfh,06bdfh,07fffh
    1748 000096a0     6bdf     .word   06bdfh,053bfh,03f9fh,0277fh,0135fh,00f3fh,00b1fh,002ffh
    1749 00009720     02df     .word   002dfh,002ffh,002ffh,0031fh,0031fh,0033fh,002fdh,002dch
    1750 000097a0     029a     .word   0029ah,00259h,00237h,00258h,00259h,0027ah,0029bh,002bch
    1751 00009820     025a     .word   0025ah,001f7h,001b5h,00172h,00194h,001d6h,00218h,0065ah
    1752 000098a0     069c     .word   0069ch,00ebch,01addh,022fdh,02f1eh,0375eh,0437fh,04f9fh
    1753 00009920     3b7f     .word   03b7fh,0275fh,0133fh,0033fh,002feh,002ddh,002bch,0029bh
    1754 000099a0     025a     .word   0025ah,00239h,00218h,00259h,0027bh,002bch,002feh,0033fh
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   44

    1755                    
    1756 00009a20     033e     .word   0033eh,0135fh,02b7fh,03f9fh,053bfh,06bdfh,07fffh
    1757 00009a90     6bdf     .word   06bdfh,053bfh,03f9fh,0277fh,0135fh,00f3fh,00b1fh,002ffh
    1758                    
    1759 00009b10            SUBR   hscore_colcyc2
    1760                    
    1761 00009b10     09e8          movi    [10,7],a8               ;START AT COLOR 10, CYCLE 7 COLORS
         00009b20 000a0007  
    1762 00009b40     09e9          movi    RUBYPAL,a9                      ;PAL NAME
         00009b50 00000000! 
    1763 00009b70     09ea          movi    COLTAB3,a10             ;TABLE TO CYCLE WITH
         00009b80 00009c40' 
    1764 00009ba0     186b          movk    3,a11                   ;RATE OF CYCLE IN TICKS
    1765 00009bb0                   CREATE  CYCPID,CYCLE_TABLE      ;START PROCESS TO DO CYCLE
    1766                    
    1767 00009c30     0960          rets
    1768                    
    1769 00009c40           COLTAB3
    1770                    
    1771 00009c40     7c01     .word   07c01h,07c63h,07d08h,07d8ch,07e10h,07eb5h,07f39h
    1772 00009cb0     7e94     .word   07e94h,07e10h,07d6bh,07ce7h,07c42h,07421h,06c00h,06400h
    1773 00009d30     5c00     .word   05c00h,06400h,06800h,07000h,07400h,07c00h,07400h,06c00h
    1774 00009db0     6000     .word   06000h,05800h,05c00h,06000h,06400h,06800h,06c00h,07000h
    1775 00009e30     6400     .word   06400h,05c00h,05000h,04800h,05000h,05800h,06000h,06c00h
    1776 00009eb0     6c21     .word   06c21h,07063h,070c6h,07508h,0754ah,079adh,079efh,07e52h
    1777 00009f30     7def     .word   07defh,07dadh,0794ah,078e7h,07884h,07842h,07800h,07000h
    1778 00009fb0     6c00     .word   06c00h,06400h,06000h,06400h,06c00h,07000h,07800h,07c00h
    1779                    
    1780 0000a030     7c01     .word   07c01h,07c63h,07d08h,07d8ch,07e10h,07eb5h,07f39h
    1781 0000a0a0     7e94     .word   07e94h,07e10h,07d6bh,07ce7h,07c42h,07421h,06c00h,06400h
    1782                    
    1783                    
    1784                    *****************************************************************************
    1785                    * Checks to see if the expired player made the table, and takes care of all
    1786                    * the details if he did.
    1787                    *
    1788                    
    1789 0000a120                   STRUCTPD
    1790 0000a120                   LONG    vqzkcursorimg           ;UHL cursor *img
    1791 0000a120                   LONG    vqzkhiliteimg           ;UHL hilite letter *img
    1792 0000a120                   WORD    vqzkstick                       ;UHW stick to read
    1793 0000a120                   LONG    vqzkwhich_tab
    1794 0000a120                   LONG    vqzkwhich_entry
    1795 0000a120                   LONG    vqzkwhich_level
    1796 0000a120                   WORD    vqzkwhich_aud
    1797                    
    1798                    
    1799                    
    1800 0000a120           WHICH_TO_OR
    1801 0000a120 00000001          .LONG   1H
    1802 0000a140 00000010          .LONG   10H
    1803 0000a160 00000100          .LONG   100H
    1804 0000a180 00001000          .LONG   1000H
    1805 0000a1a0 00010000          .LONG   10000H
    1806 0000a1c0 00100000          .LONG   100000H
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   45

    1807 0000a1e0 01000000          .LONG   1000000H
    1808 0000a200 10000000          .LONG   10000000H
    1809                    
    1810 0000a220           DO_BEATEN_GAME
    1811 0000a220     4d41          move    a10,a1
    1812 0000a230     2481          sll     4,a1
    1813 0000a240     0b21          addi    which_player,a1
         0000a250 00000000! 
    1814 0000a270     8429          move    *a1,a9
    1815 0000a280     0b49          CMPI    8,A9
         0000a290     fff7  
    1816 0000a2a0     cb01          JRNE    AVOID_NUMBER_8
    1817 0000a2b0     1429          DEC     A9
    1818 0000a2c0           AVOID_NUMBER_8
    1819 0000a2c0     24a9          SLL     5,A9
    1820 0000a2d0     0b29          ADDI    WHICH_TO_OR,A9
         0000a2e0 0000a120' 
    1821 0000a300     8729          MOVE    *A9,A9,L
    1822                    
    1823 0000a310     4d41          move    a10,a1          ;clear out intials for end game table
    1824 0000a320     4c22          MOVE    a1,a2
    1825 0000a330     24a1          sll     5,a1
    1826 0000a340     2482          sll     4,a2
    1827 0000a350     4041          add     a2,a1
    1828 0000a360     0b21          addi    entered_inits,a1
         0000a370 00000010- 
    1829 0000a390     576b          clr     a11
    1830 0000a3a0     9361          move    a11,*a1+,L
    1831 0000a3b0     8d61          movb    a11,*a1
    1832                    
    1833 0000a3c0     09eb          movi    FIND_LOW_TABLE_LEVEL,a11
         0000a3d0 00011c00' 
    1834 0000a3f0     09e5          movi    BEATEN_TAB,a5
         0000a400 00000140' 
    1835 0000a420     09c3          movi    AUD_BEATEN,A3
         0000a430     0059  
    1836 0000a440     05a1          MOVE    @belt_type,a1
         0000a450 00000000! 
    1837 0000a470     cb05          jrnz    found_right_table
    1838 0000a480     09e5          movi    INTER_TAB,A5
         0000a490 000001c0' 
    1839 0000a4b0     09c3          movi    AUD_INTER,A3
         0000a4c0     005a  
    1840 0000a4d0           found_right_table
    1841 0000a4d0     09ea          movi    enter_initials_beaten,a10
         0000a4e0 0000b5e0' 
    1842 0000a500     09e7          movi    SPECIAL_ENTRY,a7
         0000a510 0000af20' 
    1843 0000a530     c04d          jruc    create_initial_input
    1844                    
    1845 0000a540            SUBR   DO_TAG_GAME
    1846                    
    1847 0000a540     4d41          move    a10,a1          ;clear out intials for end game table
    1848 0000a550     4c22          MOVE    a1,a2
    1849 0000a560     24a1          sll     5,a1
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   46

    1850 0000a570     2482          sll     4,a2
    1851 0000a580     4041          add     a2,a1
    1852 0000a590     0b21          addi    entered_inits,a1
         0000a5a0 00000010- 
    1853 0000a5c0     576b          clr     a11
    1854 0000a5d0     9361          move    a11,*a1+,L
    1855 0000a5e0     8d61          movb    a11,*a1
    1856                    
    1857 0000a5f0     09eb          movi    FIND_LOW_TABLE_LEVEL,a11
         0000a600 00011c00' 
    1858 0000a620     09e5          movi    TAG_TAB,a5
         0000a630 00000240' 
    1859 0000a650     09c3          movi    AUD_TAG,A3
         0000a660     0062  
    1860 0000a670     09ea          movi    enter_initials_beaten,a10
         0000a680 0000b5e0' 
    1861 0000a6a0     09e7          movi    do_entry_time,a7
         0000a6b0 0000ae20' 
    1862 0000a6d0     c033          jruc    create_initial_input
    1863                    
    1864                    
    1865 0000a6e0            SUBR   pin_speed_check
    1866                    
    1867                            ;skip this check if I'm a drone.
    1868 0000a6e0     4d00          move    a8,A0
    1869 0000a6f0     0b40          CMPI    2,A0
         0000a700     fffd  
    1870 0000a710     c53f          JRGE    vqzkretp
    1871                    
    1872                            ;skip this check if the match took three rounds
    1873 0000a720     05ae          move    @current_round,a14
         0000a730 00000000! 
    1874 0000a750     0b4e          cmpi    3,a14
         0000a760     fffc  
    1875 0000a770     ca39          jreq    vqzkretp
    1876                    
    1877 0000a780     24a0          SLL     5,A0
    1878 0000a790     0b20          ADDI    MATCH_TIMERS,A0
         0000a7a0 00000000! 
    1879 0000a7c0     8609          MOVE    *A0,A9,L
    1880 0000a7d0     c633          jrle    vqzkretp
    1881                    
    1882 0000a7e0     09eb          movi    FIND_LOW_TABLE_LEVEL,a11
         0000a7f0 00011c00' 
    1883 0000a810     09e5          movi    PIN_SPEED_TAB,a5
         0000a820 000000c0' 
    1884 0000a840     09ea          movi    enter_initials_top_20,a10
         0000a850 0000c020' 
    1885 0000a870     09e7          movi    do_entry_time,a7
         0000a880 0000ae20' 
    1886 0000a8a0     09c3          movi    AUD_PINSPEED,a3
         0000a8b0     0058  
    1887 0000a8c0     c014          jruc    create_initial_input
    1888                    
    1889 0000a8d0            SUBR   winstreak_check
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   47

    1890                    
    1891 0000a8d0     4d09          move    a8,a9
    1892 0000a8e0     2489          sll     4,a9
    1893 0000a8f0     0b29          addi    p1oldwinstreak,a9
         0000a900 00000000! 
    1894 0000a920     8529          move    *a9,a9
    1895 0000a930     09eb          movi    FIND_HIGH_TABLE_LEVEL,a11
         0000a940 00011ab0' 
    1896 0000a960     09e5          movi    STREAK_TAB,a5
         0000a970 00000040' 
    1897 0000a990     09ea          movi    enter_initials_streak,a10
         0000a9a0 0000b930' 
    1898 0000a9c0     09e7          movi    do_entry,a7
         0000a9d0 0000add0' 
    1899 0000a9f0     09c3          movi    AUD_WINSTREAK,a3
         0000aa00     0057  
    1900                    
    1901 0000aa10           create_initial_input
    1902 0000aa10     4d01          move    a8,a1
    1903 0000aa20     0b01          addi    HI_INPUT_PID,a1
         0000aa30     0137  
    1904 0000aa40     0d5f          calla   GETPRC
         0000aa50 00000000! 
    1905 0000aa70     b2a0          move    a5,*a0(vqzkwhich_tab),L
         0000aa80     0150  
    1906 0000aa90     b100          move    a8,*a0(vqzkstick)
         0000aaa0     0140  
    1907 0000aab0     b340          move    a10,*a0(vqzkwhich_entry),L
         0000aac0     0170  
    1908 0000aad0     b360          move    a11,*a0(vqzkwhich_level),L
         0000aae0     0190  
    1909 0000aaf0     b060          move    a3,*a0(vqzkwhich_aud)
         0000ab00     01b0  
    1910                    
    1911 0000ab10           vqzkretp        RETP
    1912                    
    1913 0000ab40            SUBR   do_that_cycle
    1914 0000ab40     09e8          movi    [02h,1],a8              ;cycle color A
         0000ab50 00020001  
    1915 0000ab70     09e9          movi    FNT9RED_P,a9            ;pal name
         0000ab80 00000000! 
    1916 0000aba0     09ea          movi    fnt9_red_white,a10      ;use the LFLASH table
         0000abb0 0000b5b0' 
    1917 0000abd0     18cb          movk    6,a11                   ;cycle speed
    1918 0000abe0                   CREATE  CYCPID,CYCLE_TABLE
    1919                    
    1920 0000ac60     09e8          movi    [02h,1],a8              ;cycle color A
         0000ac70 00020001  
    1921 0000ac90     09e9          movi    FNT9WHT2P,a9            ;pal name
         0000aca0 00000000! 
    1922 0000acc0     09ea          movi    fnt9_blue_white,a10     ;use the LFLASH table
         0000acd0 0000b580' 
    1923 0000acf0     18cb          movk    6,a11                   ;cycle speed
    1924 0000ad00                   CREATE  CYCPID,CYCLE_TABLE
    1925 0000ad80     0d3f          callr   hscore_colcyc
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   48

         0000ad90     fe76  
    1926 0000ada0     0d3f          callr   hscore_colcyc2
         0000adb0     fed5  
    1927 0000adc0     0960          rets
    1928                    
    1929 0000add0           do_entry
    1930                            ;convert score and wins to BCD
    1931 0000add0     4d20          move    a9,a0
    1932 0000ade0     0d5f          calla   BINBCD
         0000adf0 00000000! 
    1933 0000ae10     4c09          move    a0,a9
    1934 0000ae20           do_entry_time
    1935 0000ae20     4d20          move    a9,a0
    1936                    
    1937 0000ae30     5663          clr     a3
    1938 0000ae40     b7a8          move    *a13(vqzkwhich_tab),a8,L
         0000ae50     0150  
    1939 0000ae60     0d3f          callr   CHECK_SCORE
         0000ae70     05df  
    1940                    
    1941 0000ae80     ca5d          jrz     vqzkdone_jake_hack
    1942                    
    1943 0000ae90           no_we_can_come_back
    1944                            ;they made one of the tables.  first update AUD_LSCORE
    1945 0000ae90     4c01          move    a0,a1
    1946 0000aea0     b5a0          move    *a13(vqzkwhich_aud),a0
         0000aeb0     01b0  
    1947 0000aec0     0d5f          calla   KILL_AUD
         0000aed0 00000000! 
    1948 0000aef0     0d5f          calla   AUD
         0000af00 00000000! 
    1949                    
    1950 0000af20           SPECIAL_ENTRY
    1951 0000af20     182e          movk    1,a14
    1952 0000af30     058e          move    a14,@auto_init
         0000af40 000000a0- 
    1953 0000af60     b5a1          MOVE    *A13(vqzkstick),a1
         0000af70     0140  
    1954 0000af80     4c22          MOVE    a1,a2
    1955 0000af90     24a1          sll     5,a1
    1956 0000afa0     2482          sll     4,a2
    1957 0000afb0     4041          add     a2,a1
    1958 0000afc0     0b21          addi    entered_inits,a1
         0000afd0 00000010- 
    1959 0000aff0     8620          move    *a1,a0,L
    1960 0000b000     cb22          JRNZ    NO_NEED_TO_ENTER
    1961                    
    1962 0000b010     57ce          clr     a14
    1963 0000b020     058e          move    a14,@auto_init
         0000b030 000000a0- 
    1964                    
    1965 0000b050                   CREATE0 howard_wins
    1966                    
    1967 0000b0c0                   PUSHP   a9
    1968                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   49

    1969 0000b0d0     b7a1          MOVE    *A13(vqzkwhich_entry),A1,L
         0000b0e0     0170  
    1970 0000b0f0     0147          GETPC   A7
    1971 0000b100     0b07          ADDI    040h,A7
         0000b110     0040  
    1972 0000b120     a2ec          MOVE    A7,-*A12,L      ;PUSH RET ADDR
    1973 0000b130     0161          JUMP    A1
    1974                    
    1975 0000b140                   PULLP   a9
    1976                    
    1977 0000b150     09c0          MOVI    0B8H,A0
         0000b160     00b8  
    1978 0000b170     0d5f          CALLA   triple_sound
         0000b180 00000000! 
    1979                    
    1980 0000b1a0     b5a1          MOVE    *A13(vqzkstick),a1
         0000b1b0     0140  
    1981 0000b1c0     4c22          MOVE    a1,a2
    1982 0000b1d0     24a1          sll     5,a1
    1983 0000b1e0     2482          sll     4,a2
    1984 0000b1f0     4041          add     a2,a1
    1985 0000b200     0b21          addi    entered_inits,a1
         0000b210 00000010- 
    1986 0000b230           NO_NEED_TO_ENTER
    1987 0000b230     4d20          move    a9,a0
    1988 0000b240     b7a8          move    *a13(vqzkwhich_tab),a8,L
         0000b250     0150  
    1989 0000b260     0b68          cmpi    BEATEN_TAB,a8
         0000b270 fffffebf' 
    1990 0000b290     ca0b          JREQ    SPECIAL_ADDITION
    1991 0000b2a0     0b68          CMPI    INTER_TAB,A8
         0000b2b0 fffffe3f' 
    1992 0000b2d0     ca07          JREQ    SPECIAL_ADDITION
    1993 0000b2e0     0b68          CMPI    TAG_TAB,A8
         0000b2f0 fffffdbf' 
    1994 0000b310     cb08          JRNE    normal_addition
    1995 0000b320     0d3f          CALLR   TAG_ENTRY
         0000b330     063a  
    1996 0000b340     c007          jruc    vqzkdone
    1997 0000b350           SPECIAL_ADDITION
    1998 0000b350     0d3f          callr   SPECIAL_ADD_ENTRY
         0000b360     061d  
    1999 0000b370     0d3f          CALLR   SORT_BEATEN_TABLE
         0000b380     059e  
    2000 0000b390     c002          jruc    vqzkdone
    2001                    
    2002 0000b3a0           normal_addition
    2003 0000b3a0     0d3f          callr   ADD_ENTRY
         0000b3b0     0641  
    2004 0000b3c0           vqzkdone
    2005                    
    2006 0000b3c0     09c0          movi    CYCPID,a0
         0000b3d0     0110  
    2007 0000b3e0     09c1          movi    -1,a1
         0000b3f0     ffff  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   50

    2008 0000b400     0d5f          calla   KILALL
         0000b410 00000000! 
    2009 0000b430                   DIE
    2010                    
    2011 0000b460           vqzkdone_jake_hack
    2012 0000b460     09c0          movi    17,a0
         0000b470     0011  
    2013 0000b480     b7a8          move    *a13(vqzkwhich_tab),a8,L
         0000b490     0150  
    2014 0000b4a0     0b68          cmpi    TAG_TAB,a8
         0000b4b0 fffffdbf' 
    2015 0000b4d0     ca9b          jreq    no_we_can_come_back     
    2016                    
    2017 0000b4e0     09c0          movi    CYCPID,a0
         0000b4f0     0110  
    2018 0000b500     09c1          movi    -1,a1
         0000b510     ffff  
    2019 0000b520     0d5f          calla   KILALL
         0000b530 00000000! 
    2020 0000b550                   DIE
    2021                    
    2022 0000b580           fnt9_blue_white
    2023 0000b580     001f          .word   0001fH,07FFFH
    2024 0000b5a0     ffff          .word   -1
    2025                    
    2026 0000b5b0           fnt9_red_white
    2027 0000b5b0     7c00          .word   07C00H,07FFFH
    2028 0000b5d0     ffff          .word   -1
    2029                    
    2030                    *****************************************************************************
    2031                    * proc pointer + vqzkstick = stick (0:1)
    2032                    
    2033                    ; SUBR  enter_message
    2034                    ;       clr     a0
    2035                    ;       movb    a0,@entered_message
    2036                    ;       movb    a0,@entered_message+40h
    2037                    ;       movi    entered_message,a4
    2038                    ;       move    a4,a5
    2039                    ;       movi    entered_message+(15*8),a6
    2040                    ;       PUSHP   a4,a5,a6
    2041                    ;
    2042                    ;       movi    vqzkentermess_mes,a2
    2043                    ;       PUSHP   a2
    2044                    ;       jruc    vqzkgo
    2045                    
    2046 0000b5e0            SUBR   enter_initials_beaten
    2047                    
    2048 0000b5e0     09e4          movi    entered_inits,a4
         0000b5f0 00000010- 
    2049 0000b610     4c85          move    a4,a5
    2050 0000b620     09e6          movi    entered_inits+(5*8),a6
         0000b630 00000038- 
    2051 0000b650     09e3          movi    vqzkenterinita_mess,a3
         0000b660 0000fae0' 
    2052 0000b680     09e2          movi    vqzkenterinit5_mes,a2
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   51

         0000b690 00010160' 
    2053 0000b6b0     b5a0          move    *a13(vqzkstick),a0
         0000b6c0     0140  
    2054 0000b6d0     4c00          move    a0,a0
    2055 0000b6e0     ca0d          jrz     vqzkenter_mess_set_3
    2056 0000b6f0     09e4          movi    entered_inits+030h,a4
         0000b700 00000040- 
    2057 0000b720     4c85          move    a4,a5
    2058 0000b730     09e6          movi    entered_inits+(5*8)+030h,a6
         0000b740 00000068- 
    2059 0000b760     09e3          movi    vqzkenterinitb_mess,a3
         0000b770 0000fc00' 
    2060 0000b790     09e2          movi    vqzkenterinit6_mes,a2
         0000b7a0 00010270' 
    2061 0000b7c0           vqzkenter_mess_set_3
    2062 0000b7c0     57ce          clr     a14
    2063 0000b7d0     83c4          move    a14,*a4,L       ;clear out initials
    2064 0000b7e0     b1c4          move    a14,*a4(018h)   ;clear out initials
         0000b7f0     0018  
    2065 0000b800                   PUSHP   a4,a5,a6
    2066 0000b820                   PUSHP   a2
    2067 0000b830     4c62          move    a3,a2
    2068 0000b840     0d5f          calla   setup_message
         0000b850 00000000! 
    2069                    
    2070 0000b870     b5a0          move    *a13(vqzkstick),a0
         0000b880     0140  
    2071 0000b890     0b00          addi    CLSNEUT|TYPTEXT|00A3h,a0
         0000b8a0     07a3  
    2072 0000b8b0     0580          move    a0,@mess_objid
         0000b8c0 00000000! 
    2073                    
    2074 0000b8e0     9640          move    *a2+,a0,L               ;print method
    2075 0000b8f0     4c44          move    a2,a4                   ;* text string
    2076 0000b900     0920          call    a0
    2077 0000b910     c000          jruc    vqzkgo
         0000b920     00e8  
    2078                    
    2079 0000b930            SUBR   enter_initials_streak
    2080                    
    2081 0000b930     5642          CLR     A2
    2082 0000b940     0582          MOVE    A2,@IGNORE_CHAR_WIDTH
         0000b950 00000000! 
    2083                    
    2084 0000b970     09e2          movi    vqzkenterinit7_mes,a2
         0000b980 00010380' 
    2085 0000b9a0     b5a0          move    *a13(vqzkstick),a0
         0000b9b0     0140  
    2086 0000b9c0     ca03          jrz     just_add_to_id
    2087 0000b9d0     09e2          movi    vqzkenterinit8_mes,a2
         0000b9e0 00010470' 
    2088 0000ba00           just_add_to_id
    2089 0000ba00                   PUSH    A0
    2090 0000ba10     0d5f          calla   setup_message
         0000ba20 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   52

    2091 0000ba40                   PULL    A0
    2092 0000ba50     0b00          addi    CLSNEUT|TYPTEXT|00A3h,a0
         0000ba60     07a3  
    2093 0000ba70     0580          move    a0,@mess_objid
         0000ba80 00000000! 
    2094                    
    2095 0000baa0     9640          move    *a2+,a0,L               ;print method
    2096 0000bab0     4c44          move    a2,a4                   ;* text string
    2097 0000bac0     0920          call    a0
    2098                    
    2099 0000bad0     05a0          move    @mess_cursx2,a0
         0000bae0 00000000! 
    2100 0000bb00     0b00          addi    8,a0
         0000bb10     0008  
    2101 0000bb20     0580          move    a0,@mess_cursx
         0000bb30 00000000! 
    2102                    
    2103 0000bb50     1840          movk    2,a0
    2104 0000bb60     0580          move    a0,@mess_spacing
         0000bb70 00000000! 
    2105                    
    2106 0000bb90     05a0          move    @p1oldwinstreak,a0
         0000bba0 00000000! 
    2107 0000bbc0     b5a2          move    *a13(vqzkstick),a2
         0000bbd0     0140  
    2108 0000bbe0     ca03          jrz     got_right_streak
    2109 0000bbf0     05a0          move    @p2oldwinstreak,a0
         0000bc00 00000000! 
    2110 0000bc20           got_right_streak
    2111 0000bc20     09e1          movi    9999999,a1
         0000bc30 0098967f  
    2112 0000bc50     0d5f          calla   dec_to_asc              ;convert to ASCII
         0000bc60 00000000! 
    2113 0000bc80     0d5f          CALLA   copy_string
         0000bc90 00000000! 
    2114 0000bcb0     0d5f          calla   print_string
         0000bcc0 00000000! 
    2115                    
    2116 0000bce0     09e4          movi    entered_inits,a4
         0000bcf0 00000010- 
    2117 0000bd10     4c85          move    a4,a5
    2118 0000bd20     09e6          movi    entered_inits+(3*8),a6
         0000bd30 00000028- 
    2119 0000bd50     09e3          movi    vqzkenterinita_mess,a3
         0000bd60 0000fae0' 
    2120 0000bd80     09e2          movi    vqzkenterinit1_mes,a2
         0000bd90 0000fd20' 
    2121 0000bdb0     b5a0          move    *a13(vqzkstick),a0
         0000bdc0     0140  
    2122 0000bdd0     4c00          move    a0,a0
    2123 0000bde0     ca0d          jrz     vqzkenter_mess_set_1
    2124 0000bdf0     09e4          movi    entered_inits+030h,a4
         0000be00 00000040- 
    2125 0000be20     4c85          move    a4,a5
    2126 0000be30     09e6          movi    entered_inits+(3*8)+030h,a6
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   53

         0000be40 00000058- 
    2127 0000be60     09e3          movi    vqzkenterinitb_mess,a3
         0000be70 0000fc00' 
    2128 0000be90     09e2          movi    vqzkenterinit2_mes,a2
         0000bea0 0000fe30' 
    2129 0000bec0           vqzkenter_mess_set_1
    2130 0000bec0     57ce          clr     a14
    2131 0000bed0     83c4          move    a14,*a4,L       ;clear out initials
    2132 0000bee0     b1c4          move    a14,*a4(018h)   ;clear out initials
         0000bef0     0018  
    2133 0000bf00                   PUSHP   a4,a5,a6
    2134 0000bf20                   PUSHP   a2
    2135 0000bf30     4c62          move    a3,a2
    2136 0000bf40     0d5f          calla   setup_message
         0000bf50 00000000! 
    2137                    
    2138 0000bf70     b5a0          move    *a13(vqzkstick),a0
         0000bf80     0140  
    2139 0000bf90     0b00          addi    CLSNEUT|TYPTEXT|00A3h,a0
         0000bfa0     07a3  
    2140 0000bfb0     0580          move    a0,@mess_objid
         0000bfc0 00000000! 
    2141                    
    2142 0000bfe0     9640          move    *a2+,a0,L               ;print method
    2143 0000bff0     4c44          move    a2,a4                   ;* text string
    2144 0000c000     0920          call    a0
    2145 0000c010     c079          jruc    vqzkgo
    2146                    
    2147                    *********************************
    2148 0000c020            SUBR   enter_initials_top_20
    2149                    
    2150 0000c020     09e0          movi    font9A_ascii,a0
         0000c030 00000000! 
    2151 0000c050     0780          move    a0,@message_ascii,L
         0000c060 00000000! 
    2152                    
    2153 0000c080     07a0          move    @MATCH_TIMERS,a0,L
         0000c090 00000000! 
    2154 0000c0b0     09c3          movi    35,a3
         0000c0c0     0023  
    2155 0000c0d0     09eb          movi    FNT9WHT2P,a11
         0000c0e0 00000000! 
    2156 0000c100     b5a2          move    *a13(vqzkstick),a2
         0000c110     0140  
    2157 0000c120     ca08          jrz     got_right_time
    2158 0000c130     07a0          move    @MATCH_TIMERS+32,a0,L
         0000c140 00000020! 
    2159 0000c160     09eb          movi    FNT9RED_P,a11
         0000c170 00000000! 
    2160 0000c190     09c3          movi    270,a3
         0000c1a0     010e  
    2161 0000c1b0           got_right_time
    2162 0000c1b0     0b02          addi    CLSNEUT|TYPTEXT|00A3h,a2
         0000c1c0     07a3  
    2163 0000c1d0     0582          move    a2,@mess_objid
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   54

         0000c1e0 00000000! 
    2164 0000c200     078b          move    a11,@message_palette,L
         0000c210 00000000! 
    2165 0000c230     09c2          movi    16,a2
         0000c240     0010  
    2166 0000c250     0582          move    a2,@mess_cursy
         0000c260 00000000! 
    2167 0000c280     0583          move    a3,@mess_cursx
         0000c290 00000000! 
    2168 0000c2b0     0d5f          calla   BCDBIN
         0000c2c0 00000000! 
    2169 0000c2e0     0d3f          callr   val_to_dec_tenths_asc
         0000c2f0     f95c  
    2170 0000c300     5600          clr     a0
    2171 0000c310     0580          move    A0,@IGNORE_CHAR_WIDTH
         0000c320 00000000! 
    2172 0000c340     0580          move    a0,@mess_spacing
         0000c350 00000000! 
    2173 0000c370     0d5f          calla   print_string
         0000c380 00000000! 
    2174                    
    2175 0000c3a0     05a0          move    @mess_cursx2,a0
         0000c3b0 00000000! 
    2176 0000c3d0     0b00          addi    6,a0
         0000c3e0     0006  
    2177 0000c3f0     0580          move    a0,@mess_cursx
         0000c400 00000000! 
    2178                    
    2179 0000c420     09e4          movi    vqzkenterinit9_mes,a4
         0000c430 00010560' 
    2180 0000c450     0d5f          calla   print_string2
         0000c460 00000000! 
    2181                    
    2182 0000c480     09e4          movi    entered_inits,a4
         0000c490 00000010- 
    2183 0000c4b0     4c85          move    a4,a5
    2184 0000c4c0     09e6          movi    entered_inits+(3*8),a6
         0000c4d0 00000028- 
    2185 0000c4f0     09e3          movi    vqzkenterinita_mess,a3
         0000c500 0000fae0' 
    2186 0000c520     09e2          movi    vqzkenterinit3_mes,a2
         0000c530 0000ff40' 
    2187 0000c550     b5a0          move    *a13(vqzkstick),a0
         0000c560     0140  
    2188 0000c570     4c00          move    a0,a0
    2189 0000c580     ca0d          jrz     vqzkenter_mess_set
    2190 0000c590     09e4          movi    entered_inits+030h,a4
         0000c5a0 00000040- 
    2191 0000c5c0     4c85          move    a4,a5
    2192 0000c5d0     09e6          movi    entered_inits+(3*8)+030h,a6
         0000c5e0 00000058- 
    2193 0000c600     09e3          movi    vqzkenterinitb_mess,a3
         0000c610 0000fc00' 
    2194 0000c630     09e2          movi    vqzkenterinit4_mes,a2
         0000c640 00010050' 
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   55

    2195 0000c660           vqzkenter_mess_set
    2196 0000c660     57ce          clr     a14
    2197 0000c670     83c4          move    a14,*a4,L       ;clear out initials
    2198 0000c680     b1c4          move    a14,*a4(018h)   ;clear out initials
         0000c690     0018  
    2199 0000c6a0                   PUSHP   a4,a5,a6
    2200 0000c6c0                   PUSHP   a2
    2201 0000c6d0     4c62          move    a3,a2
    2202                    
    2203 0000c6e0     0d5f          calla   setup_message
         0000c6f0 00000000! 
    2204                    
    2205 0000c710     b5a0          move    *a13(vqzkstick),a0
         0000c720     0140  
    2206 0000c730     0b00          addi    CLSNEUT|TYPTEXT|00A3h,a0
         0000c740     07a3  
    2207 0000c750     0580          move    a0,@mess_objid
         0000c760 00000000! 
    2208                    
    2209 0000c780     9640          move    *a2+,a0,L               ;print method
    2210 0000c790     4c44          move    a2,a4                   ;* text string
    2211 0000c7a0     0920          call    a0
    2212 0000c7b0           vqzkgo
    2213                    
    2214 0000c7b0                   PULLP   a2
    2215 0000c7c0     19a0          movk    13,a0
    2216 0000c7d0     0580          move    a0,@mess_line_spacing
         0000c7e0 00000000! 
    2217                    
    2218 0000c800     0d5f          calla   setup_message
         0000c810 00000000! 
    2219                    
    2220 0000c830     b5a0          move    *a13(vqzkstick),a0
         0000c840     0140  
    2221 0000c850     0b00          addi    CLSNEUT|TYPTEXT|00A3h,a0
         0000c860     07a3  
    2222 0000c870     0580          move    a0,@mess_objid
         0000c880 00000000! 
    2223                    
    2224 0000c8a0     9640          move    *a2+,a0,L               ;print method
    2225 0000c8b0     4c44          move    a2,a4                   ;* text string
    2226 0000c8c0     0920          call    a0
    2227                    
    2228 0000c8d0     0d3f          callr   draw_letter_grid        ;draw the letter grid
         0000c8e0     0283  
    2229                    
    2230 0000c8f0     b5a1          move    *a13(vqzkstick),a1
         0000c900     0140  
    2231 0000c910     cb07          jrnz    vqzkright_type
    2232 0000c920                   TBL_OBJ vqzkcursor                      ;create cursor
    2233 0000c980     c006          jruc    vqzkcursor_type_set
    2234 0000c990           vqzkright_type
    2235 0000c990                   TBL_OBJ vqzkcursor2                     ;create cursor
    2236 0000c9f0           vqzkcursor_type_set
    2237 0000c9f0     5600          clr     a0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   56

    2238 0000ca00     b208          move    a0,*a8(ODOFF),L
         0000ca10     0220  
    2239 0000ca20     09c0          movi    0101h,a0
         0000ca30     0101  
    2240 0000ca40     b008          move    a0,*a8(OCONST)
         0000ca50     0160  
    2241 0000ca60     09e0          movi    vqzkblock_size,a0
         0000ca70 00000012  
    2242 0000ca90     b008          move    a0,*a8(OSIZEX)
         0000caa0     0130  
    2243 0000cab0     b008          move    a0,*a8(OSIZEY)
         0000cac0     0140  
    2244 0000cad0     b30d          move    a8,*a13(vqzkcursorimg),L
         0000cae0     0100  
    2245                    
    2246 0000caf0     b5a1          move    *a13(vqzkstick),a1
         0000cb00     0140  
    2247 0000cb10     cb07          jrnz    vqzkright_hilite
    2248 0000cb20                   TBL_OBJ vqzkhilite1                     ;create hilite letter
    2249 0000cb80     c006          jruc    vqzkhilite_set
    2250 0000cb90           vqzkright_hilite
    2251 0000cb90                   TBL_OBJ vqzkhilite2                     ;create hilite letter
    2252 0000cbf0           vqzkhilite_set
    2253                    
    2254 0000cbf0     b30d          move    a8,*a13(vqzkhiliteimg),L
         0000cc00     0120  
    2255                    
    2256 0000cc10     5729          clr     a9
    2257 0000cc20     0d3f          callr   new_cursor_pos          ;place them & set char img/pal
         0000cc30     01cf  
    2258                    
    2259                    
    2260                            ;reg use (loop)
    2261                            ; a4 *first initial ram
    2262                            ; a5 *next initial ram
    2263                            ; a6 *last initial ram
    2264                            ; a8 scratch
    2265                            ; a9 cursor position (0-29)
    2266                            ;a10 hold count for repeat motion
    2267                            ;a11 debounce timer
    2268                    
    2269 0000cc40                   PULLP   a4,a5,a6
    2270                    
    2271 0000cc60     09cb          movi    65,a11
         0000cc70     0041  
    2272 0000cc80     8164          move    a11,*a4
    2273                    
    2274 0000cc90     0d3f          callr   print_init_string
         0000cca0     021f  
    2275                    
    2276 0000ccb0     576b          clr     a11
    2277 0000ccc0     09d5          MOVI    700H,B5
         0000ccd0     0700  
    2278 0000cce0     5673          clr     b3
    2279                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   57

    2280 0000ccf0           vqzkloop
    2281                    ;this timer is done the hard way cos its 1:30 in the morning and I dont
    2282                    ;have the energy to be clever
    2283 0000ccf0     1831          movk    1,b1
    2284 0000cd00     0b55          cmpi    150*5,b5
         0000cd10     fd11  
    2285 0000cd20     c74d          jrgt    no_need_for_timer
    2286 0000cd30     098f          mmtm    sp,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10
         0000cd40     ffe0  
    2287 0000cd50     4cb7          move    b5,b7
    2288 0000cd60     09d1          movi    150,b1
         0000cd70     0096  
    2289 0000cd80     5837          divs    b1,b7
    2290 0000cd90     4c73          move    b3,b3
    2291 0000cda0     cb2a          jrnz    we_already_have_it
    2292 0000cdb0     09e0          movi    [83+40,0],a0
         0000cdc0 007b0000  
    2293 0000cde0     b5a1          move    *a13(vqzkstick),a1
         0000cdf0     0140  
    2294 0000ce00     ca03          jrz     which_edge_set
    2295 0000ce10     09e0          movi    [322+40,0],a0
         0000ce20 016a0000  
    2296 0000ce40           which_edge_set
    2297 0000ce40     09e1          movi    [16,0],a1                       ;y pos
         0000ce50 00100000  
    2298 0000ce70     09e2          movi    FNT9_5,a2
         0000ce80 00000000! 
    2299 0000cea0     09c3          movi    104+200,a3                      ;z pos
         0000ceb0     0130  
    2300 0000cec0     09e4          movi    DMAWNZ|M_SCRNREL,a4             ;DMA flags
         0000ced0 0000a002  
    2301 0000cef0     b5a5          move    *a13(vqzkstick),a5
         0000cf00     0140  
    2302 0000cf10     0b05          addi    CLSNEUT|TYPTEXT|00A3h,a5        ;object ID
         0000cf20     07a3  
    2303 0000cf30     56c6          clr     a6                              ;x vel
    2304 0000cf40     56e7          clr     a7                              ;y vel
    2305 0000cf50     09f0          movi    FNT9WHT_P,b0
         0000cf60 00000000! 
    2306 0000cf80     0d5f          calla   BEGINOBJWP
         0000cf90 00000000! 
    2307 0000cfb0     4f03          move    a8,b3
    2308                    
    2309 0000cfc0                   push    b3,b5
    2310                    ;       CREATE0 do_next_tick
    2311                    ;       movi    0B7H,a0
    2312 0000cfe0     09c0          MOVI    0AH,A0
         0000cff0     000a  
    2313 0000d000     0d5f          calla   triple_sound
         0000d010 00000000! 
    2314 0000d030                   pull    b3,b5
    2315 0000d050           we_already_have_it
    2316 0000d050     4e78          move    b3,a8
    2317 0000d060     4ef0          move    b7,a0
    2318 0000d070     24a0          sll     5,a0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   58

    2319 0000d080     0b20          addi    digits_tbl,a0
         0000d090 00000000! 
    2320 0000d0b0     8600          move    *a0,a0,L                ;* image
    2321 0000d0c0     b701          move    *a8(OIMG),a1,L
         0000d0d0     0170  
    2322 0000d0e0     4801          cmp     a0,a1
    2323 0000d0f0     ca0e          jreq    no_change
    2324 0000d100     b501          move    *a8(OCTRL),a1
         0000d110     00f0  
    2325 0000d120     0d5f          calla   change_image
         0000d130 00000000! 
    2326 0000d150                   push    b3,b5
    2327                    ;       create0 do_next_tick
    2328                    ;       movi    0B7H,a0
    2329 0000d170     09c0          MOVI    0AH,A0
         0000d180     000a  
    2330 0000d190     0d5f          calla   triple_sound
         0000d1a0 00000000! 
    2331 0000d1c0                   pull    b3,b5
    2332 0000d1e0           no_change
    2333                    
    2334 0000d1e0     09af          mmfm    sp,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10
         0000d1f0     07ff  
    2335 0000d200           no_need_for_timer
    2336                    
    2337 0000d200     1435          DEC     B5              ;have a limit we'll wait
    2338 0000d210     ca00          JRZ     vqzkdone2
         0000d220     00a6  
    2339 0000d230     4e72          move    b3,a2
    2340 0000d240     4eb0          MOVE    B5,A0
    2341 0000d250                   PUSHP   A0,a2,a4,a5,a6
    2342 0000d270                   SLEEPK  1
    2343 0000d2b0                   PULLP   A0,a2,a4,a5,a6
    2344 0000d2d0     4e05          MOVE    A0,B5
    2345 0000d2e0     4e43          move    a2,b3
    2346                    
    2347                            ;button check
    2348 0000d2f0     b5a0          move    *a13(vqzkstick),a0
         0000d300     0140  
    2349 0000d310     0d5f          calla   get_but_val_down
         0000d320 00000000! 
    2350 0000d340     4c00          move    a0,a0
    2351 0000d350     ca2c          jrz     vqzkstick_check
    2352                    
    2353                            ;new press.  add a letter.
    2354 0000d360     4d20          move    a9,a0
    2355 0000d370     0b40          cmpi    28,a0
         0000d380     ffe3  
    2356 0000d390     ca0f          jreq    vqzkdeletechar          ;backspace?
    2357                    
    2358 0000d3a0     0b40          cmpi    29,a0
         0000d3b0     ffe2  
    2359 0000d3c0     ca00          jreq    vqzkdone2                       ;EOL?
         0000d3d0     008b  
    2360                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   59

    2361 0000d3e0     48a6          cmp     a5,a6
    2362 0000d3f0     ca22          jreq    vqzkstick_check         ;room for another char?
    2363                    
    2364 0000d400     2060          sla     3,a0                    ;x8
    2365 0000d410     0b20          addi    vqzkinit_table2,a0
         0000d420 0000f830' 
    2366 0000d440     9c05          movb    *a0,*a5
    2367 0000d450     1105          addk    8,a5
    2368 0000d460     5600          clr     a0
    2369 0000d470     8c05          movb    a0,*a5                  ;always keep a terminator in there.
    2370 0000d480     c008          jruc    vqzkadded
    2371                    
    2372 0000d490           vqzkdeletechar
    2373 0000d490     4885          cmp     a4,a5
    2374 0000d4a0     ca17          jreq    vqzkstick_check         ;no chars to delete!
    2375 0000d4b0     1505          subk    8,a5
    2376 0000d4c0     5600          clr     a0
    2377 0000d4d0     8c05          movb    a0,*a5
    2378 0000d4e0     0d3f          callr   print_init_string
         0000d4f0     019a  
    2379 0000d500     c011          jruc    vqzkstick_check
    2380                    
    2381 0000d510           vqzkadded
    2382 0000d510     09c0          movi    0b1h,a0
         0000d520     00b1  
    2383 0000d530                   push    b3,b5
    2384 0000d550     0d5f          calla   triple_sound
         0000d560 00000000! 
    2385 0000d580                   pull    b3,b5
    2386                    
    2387                            ;character added.
    2388 0000d5a0     0d3f          callr   print_init_string
         0000d5b0     018e  
    2389                    
    2390                            ;if that was the last character, move the cursor to the END char.
    2391 0000d5c0     48a6          cmp     a5,a6
    2392 0000d5d0     cb04          jrne    vqzkstick_check
    2393                    
    2394 0000d5e0     09c9          movi    29,a9
         0000d5f0     001d  
    2395 0000d600     0d3f          callr   new_cursor_pos
         0000d610     0131  
    2396                    
    2397 0000d620           vqzkstick_check
    2398 0000d620     142b          dec     a11                     ;debounce check
    2399 0000d630     c100          jrp     vqzkloop                        ;too soon?
         0000d640     ff6a  
    2400                    
    2401 0000d650     b5a0          move    *a13(vqzkstick),a0
         0000d660     0140  
    2402 0000d670     0d5f          calla   get_stick_val_down
         0000d680 00000000! 
    2403 0000d6a0     4c00          move    a0,a0
    2404 0000d6b0     ca07          jrz     vqzkno_new_stick
    2405                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   60

    2406 0000d6c0     09ea          movi    vqzktstatic-vqzkdebounce_time,a10
         0000d6d0 00000016  
    2407 0000d6f0     09eb          movi    vqzkdebounce_time,a11
         0000d700 00000008  
    2408 0000d720     c00b          jruc    vqzkadjust
    2409                    
    2410 0000d730           vqzkno_new_stick
    2411 0000d730     142a          dec     a10
    2412 0000d740     cb00          jrnz    vqzkloop                        ;holding and waiting
         0000d750     ff59  
    2413                    
    2414                            ;whee!  time to repeat-move
    2415 0000d760     b5a0          move    *a13(vqzkstick),a0
         0000d770     0140  
    2416 0000d780     0d5f          calla   get_stick_val_cur
         0000d790 00000000! 
    2417 0000d7b0     09ea          movi    vqzktmoving,a10
         0000d7c0 0000000a  
    2418 0000d7e0           vqzkadjust
    2419 0000d7e0                   X16     a0
    2420 0000d7f0     0b20          addi    vqzkjoytab,a0
         0000d800 00010a70' 
    2421 0000d820     8400          move    *a0,a0
    2422                    
    2423 0000d830     4009          add     a0,a9
    2424 0000d840     ce04          jrn     vqzktoo_low
    2425 0000d850     0b49          cmpi    30,a9
         0000d860     ffe1  
    2426 0000d870     c504          jrge    vqzktoo_high
    2427 0000d880     c006          jruc    vqzkjust_right
    2428                    
    2429 0000d890           vqzktoo_low
    2430 0000d890     0b09          addi    30,a9
         0000d8a0     001e  
    2431 0000d8b0     c003          jruc    vqzkjust_right
    2432 0000d8c0           vqzktoo_high
    2433 0000d8c0     0be9          subi    30,a9
         0000d8d0     ffe1  
    2434 0000d8e0     0300          jruc    vqzkjust_right
    2435                    
    2436 0000d8f0           vqzkjust_right
    2437                            ;adjust cursor and character position
    2438 0000d8f0     4c00          move    a0,a0
    2439 0000d900     ca0d          jrz     no_motion_sound
    2440 0000d910     09c0          movi    0c7h,a0
         0000d920     00c7  
    2441 0000d930     b5a1          move    *a13(vqzkstick),a1
         0000d940     0140  
    2442 0000d950     ca01          jrz     motion_sound_set
    2443 0000d960     1020          inc     a0
    2444 0000d970           motion_sound_set
    2445 0000d970                   push    b3,b5
    2446 0000d990     0d5f          calla   triple_sound
         0000d9a0 00000000! 
    2447 0000d9c0                   pull    b3,b5
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   61

    2448 0000d9e0           no_motion_sound
    2449 0000d9e0     0d3f          callr   new_cursor_pos
         0000d9f0     00f3  
    2450 0000da00     4d20          move    a9,a0
    2451                    
    2452 0000da10     0b40          cmpi    28,a0
         0000da20     ffe3  
    2453 0000da30     ca1f          jreq    vqzkspace_it
    2454                    
    2455 0000da40     0b40          cmpi    29,a0
         0000da50     ffe2  
    2456 0000da60     ca1c          jreq    vqzkspace_it
    2457                    
    2458 0000da70     48c5          cmp     a6,a5
    2459 0000da80     ca00          jreq    vqzkloop
         0000da90     ff25  
    2460                    
    2461 0000daa0     2060          sla     3,a0 
    2462 0000dab0     0b20          addi    vqzkinit_table2,a0
         0000dac0 0000f830' 
    2463 0000dae0     9c05          movb    *a0,*a5
    2464 0000daf0     5600          clr     a0
    2465 0000db00     ac05          movb    a0,*a5(8)                       ;always keep a terminator in there.
         0000db10     0008  
    2466 0000db20     0d3f          callr   print_init_string
         0000db30     0136  
    2467 0000db40     c000          jruc    vqzkloop
         0000db50     ff19  
    2468                    
    2469 0000db60           vqzkbackspace_it
    2470 0000db60     2060          sla     3,a0 
    2471 0000db70     0b20          addi    vqzkinit_table2,a0
         0000db80 0000f830' 
    2472 0000dba0     1505          subk    8,a5
    2473 0000dbb0     9c05          movb    *a0,*a5
    2474 0000dbc0     1105          addk    8,a5
    2475                    
    2476 0000dbd0     5600          clr     a0
    2477 0000dbe0     8c05          movb    a0,*a5                          ;always keep a terminator in there.
    2478 0000dbf0     0d3f          callr   print_init_string
         0000dc00     0129  
    2479 0000dc10     c000          jruc    vqzkloop
         0000dc20     ff0c  
    2480                    
    2481 0000dc30           vqzkspace_it
    2482 0000dc30     5600          clr     a0
    2483 0000dc40     8c05          movb    a0,*a5                          ;always keep a terminator in there.
    2484 0000dc50     0d3f          callr   print_init_string
         0000dc60     0123  
    2485 0000dc70     c000          jruc    vqzkloop
         0000dc80     ff06  
    2486                    
    2487 0000dc90           vqzkdone2
    2488 0000dc90     0d3f          callr   are_inits_dirty
         0000dca0     0094  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   62

    2489 0000dcb0     cb18          jrnz    replace_dirty_inits
    2490                    ;       jrz     vqzknot_dirty
    2491                    ;       move    a4,a5
    2492                    ;       clr     a0
    2493                    ;       movb    a0,*a5
    2494                    ;       callr   print_init_string
    2495                    ;       movi    28,a9
    2496                    ;       callr   new_cursor_pos
    2497                    ;       jruc    vqzkstick_check
    2498                    ;vqzknot_dirty
    2499                            .if 0
    2500                            calla   are_special_inits
    2501                            jrnz    vqzknot_special_inits
    2502                            JSRP    prog_specials
    2503                    vqzknot_special_inits
    2504                            .endif
    2505                    
    2506 0000dcc0     09c0          MOVI    0cbh,A0
         0000dcd0     00cb  
    2507 0000dce0     b5a1          MOVE    *A13(vqzkstick),a1
         0000dcf0     0140  
    2508 0000dd00     ca01          jrz     select_set
    2509 0000dd10     1020          inc     a0
    2510 0000dd20           select_set
    2511 0000dd20                   push    b3,b5
    2512 0000dd40     0d5f          CALLA   triple_sound
         0000dd50 00000000! 
    2513 0000dd70                   pull    b3,b5
    2514                    
    2515 0000dd90                   pushp   a4
    2516 0000dda0                   PUSHP   A6
    2517 0000ddb0                   sleep   30
    2518 0000de00                   PULLP   A6
    2519 0000de10                   pullp   a4
    2520                    
    2521                    ;;      move    *a13(vqzkstick),a0
    2522                    ;       addi    CLSNEUT|TYPTEXT|00A5h,a0
    2523                    ;       calla   obj_del1c
    2524                    ;
    2525                    ;       move    *a13(vqzkstick),a0
    2526                    ;       addi    CLSNEUT|TYPTEXT|00A3h,a0
    2527                    ;       calla   obj_del1c
    2528                    
    2529 0000de20     8680          move    *a4,a0,L
    2530 0000de30     cb0d          jrnz    vqzkinitials_have_content
    2531 0000de40           replace_dirty_inits
    2532 0000de40     18c0          movk    6,a0
    2533 0000de50     0d5f          calla   RNDRNG0
         0000de60 00000000! 
    2534 0000de80     24a0          sll     5,a0
    2535 0000de90     0b20          addi    vqzkrandom_initials,a0
         0000dea0 0000e310' 
    2536 0000dec0     8600          move    *a0,A0,L
    2537 0000ded0     8204          move    a0,*a4,L
    2538 0000dee0     5621          CLR     A1
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   63

    2539 0000def0     ac24          MOVB    A1,*A4(020H)
         0000df00     0020  
    2540                    
    2541 0000df10           vqzkinitials_have_content
    2542 0000df10                   PUSH    a0
    2543 0000df20     b5a0          move    *a13(vqzkstick),a0
         0000df30     0140  
    2544 0000df40     0b00          addi    CLSNEUT|TYPTEXT|00A5h,a0
         0000df50     07a5  
    2545 0000df60     0d5f          calla   obj_del1c
         0000df70 00000000! 
    2546                    
    2547 0000df90     b5a0          move    *a13(vqzkstick),a0
         0000dfa0     0140  
    2548 0000dfb0     0b00          addi    CLSNEUT|TYPTEXT|00A3h,a0
         0000dfc0     07a3  
    2549 0000dfd0     0d5f          calla   obj_del1c
         0000dfe0 00000000! 
    2550 0000e000                   PULL    a0
    2551                    
    2552 0000e010     0b60          CMPI    "TJM",a0
         0000e020 ffabb5b2  
    2553 0000e040     cb0d          jrne    no_worry_about_disaster
    2554                    
    2555 0000e050                   push    a0
    2556 0000e060     09c0          movi    129h,a0
         0000e070     0129  
    2557 0000e080     05a1          move    @HCOUNT,a1
         0000e090 c00001c0  
    2558 0000e0b0     2fe1          srl     1,a1
    2559 0000e0c0     c901          jrnc    we_now_which
    2560 0000e0d0     1020          inc     a0
    2561 0000e0e0           we_now_which
    2562 0000e0e0     0d5f          CALLA   ADD_VOICE
         0000e0f0 00000000! 
    2563 0000e110                   pull    a0
    2564 0000e120           no_worry_about_disaster
    2565                    
    2566 0000e120     0b60          CMPI    "SMJ",a0
         0000e130 ffacb2b5  
    2567 0000e150     cb07          jrne    no_worry_about_yes_indeedly
    2568 0000e160                   push    a0
    2569 0000e170     09c0          movi    214h,a0
         0000e180     0214  
    2570 0000e190     0d5f          CALLA   ADD_VOICE
         0000e1a0 00000000! 
    2571 0000e1c0                   pull    a0
    2572                    
    2573 0000e1d0           no_worry_about_yes_indeedly
    2574 0000e1d0                   PUSH    A6
    2575 0000e1e0     4486          SUB     A4,A6
    2576 0000e1f0     0b46          CMPI    18H,A6
         0000e200     ffe7  
    2577 0000e210     cb0b          JRNE    A_FIVE_INITIALER
    2578                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   64

    2579 0000e220     b5a1          MOVE    *A13(vqzkstick),a1
         0000e230     0140  
    2580 0000e240     2481          sll     4,a1
    2581 0000e250     0b21          addi    which_player,a1
         0000e260 00000000! 
    2582 0000e280     8429          move    *a1,a9
    2583 0000e290     0b09          ADDI    "A",A9
         0000e2a0     0041  
    2584 0000e2b0     ad24          MOVB    A9,*A4(18H)
         0000e2c0     0018  
    2585                    
    2586 0000e2d0           A_FIVE_INITIALER
    2587 0000e2d0                   PULL    A6
    2588                    
    2589 0000e2e0                   RETP
    2590                    
    2591                    ;do_next_tick
    2592                    ;       SLEEP   12
    2593                    ;       MOVI    0B8H,A0
    2594                    ;       CALLA   triple_sound
    2595                    ;       DIE
    2596                    
    2597 0000e310           vqzkrandom_initials
    2598 0000e310       4d          .byte   "MJT",0
    2599 0000e330       4a          .byte   "JYT",0
    2600 0000e350       53          .byte   "SAL",0
    2601 0000e370       4a          .byte   "JMS",0
    2602 0000e390       4a          .byte   "JAZ",0
    2603 0000e3b0       52          .byte   "RJR",0
    2604 0000e3d0       4d          .byte   "MJL",0
    2605                    
    2606 0000e3f0           vqzkdw_table
    2607 0000e3f0 00001ab1          .long   00001ab1h               ; FUQ
    2608 0000e410 00001aa3          .long   00001aa3h               ; FUC
    2609 0000e430 00001aab          .long   00001aabh               ; FUK
    2610 0000e450 000822b1          .long   000822b1h               ; PHUQ
    2611 0000e470 000822ab          .long   000822abh               ; PHUK
    2612 0000e490 000822a3          .long   000822a3h               ; PHUC
    2613 0000e4b0 010ace79          .long   010ace79h               ; PUSSY
    2614 0000e4d0 0102b933          .long   0102b933h               ; PENIS
    2615 0000e4f0 0024d068          .long   0024d068h               ; BITCH
    2616 0000e510 0009b2b4          .long   0009b2b4h               ; SLUT
    2617 0000e530 0009a134          .long   0009a134h               ; SHIT
    2618 0000e550 0001d5d4          .long   0001d5d4h               ; CUNT
    2619 0000e570 0001b134          .long   0001b134h               ; CLIT
    2620 0000e590 0001bc6b          .long   0001bc6bh               ; COCK
    2621 0000e5b0 000994e1          .long   000994e1h               ; SEGA
    2622 0000e5d0 00000000          .long   0
    2623                    
    2624                    ; A4 = *beginning of string
    2625                    ; A0 = character to add
    2626                    ;
    2627                    ; Returns
    2628                    ;   Z  - Not dirty word
    2629                    ;   NZ - Dirty word
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   65

    2630                    ;
    2631 0000e5f0            SUBR   are_inits_dirty
    2632 0000e5f0                   PUSH    a0,a1,a2,a4,a5,a6
    2633 0000e610     4c86          move    a4,a6
    2634 0000e620     1506          subk    8,a6
    2635 0000e630           vqzkrecheck
    2636 0000e630     1106          addk    8,a6
    2637 0000e640     4cc4          move    a6,a4
    2638 0000e650     8ec2          movb    *a6,a2
    2639 0000e660     ca27          jrz     vqzknot_dirty_word
    2640 0000e670     5621          clr     a1
    2641 0000e680           vqzkget_inits_loop
    2642 0000e680     8e82          movb    *a4,a2
    2643                    ;       jrz     vqzkgi_done
    2644 0000e690     caf9          jrz     vqzkrecheck
    2645 0000e6a0     0b42          cmpi    20h,a2
         0000e6b0     ffdf  
    2646 0000e6c0     ca0f          jrz     vqzknot_alpha
    2647 0000e6d0     0b42          cmpi    21h,a2
         0000e6e0     ffde  
    2648 0000e6f0     ca0c          jrz     vqzknot_alpha
    2649 0000e700     0b42          cmpi    19h,a2
         0000e710     ffe6  
    2650 0000e720     ca09          jrz     vqzknot_alpha
    2651 0000e730     24a1          sll     5,a1
    2652 0000e740     0be2          subi    40h,a2
         0000e750     ffbf  
    2653 0000e760     0b82          andi    1fh,a2
         0000e770 ffffffe0  
    2654 0000e790     5441          or      a2,a1
    2655 0000e7a0     0d3f          callr   vqzkcheck_it
         0000e7b0     0002  
    2656 0000e7c0           vqzknot_alpha
    2657 0000e7c0     1104          addk    8,a4
    2658 0000e7d0     c0ea          jruc    vqzkget_inits_loop
    2659 0000e7e0           vqzkgi_done
    2660                    
    2661 0000e7e0           vqzkcheck_it
    2662 0000e7e0                   PUSH    a4
    2663 0000e7f0     09e4          movi    vqzkdw_table,a4
         0000e800 0000e3f0' 
    2664 0000e820     5600          clr     a0
    2665 0000e830           vqzkcheck_dw_loop
    2666 0000e830     9685          move    *a4+,a5,L
    2667                    ;       jrz     vqzknot_dirty_word
    2668 0000e840     ca03          jrz     vqzkcheck_done
    2669 0000e850     4825          cmp     a1,a5
    2670 0000e860     ca03          jrz     vqzkis_dirty
    2671 0000e870     c0fb          jruc    vqzkcheck_dw_loop
    2672 0000e880           vqzkcheck_done
    2673 0000e880                   PULL    a4
    2674 0000e890     0960          rets
    2675                    
    2676 0000e8a0           vqzkis_dirty
    2677 0000e8a0                   PULL    a4,a14                  ; This sucks don't change this
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   66

    2678 0000e8c0     1820          movk    1,a0                    ; or it will break
    2679 0000e8d0     c001          jruc    vqzkaid_exit
    2680 0000e8e0           vqzknot_dirty_word
    2681 0000e8e0     5600          clr     a0
    2682 0000e8f0           vqzkaid_exit
    2683 0000e8f0     4c00          move    a0,a0
    2684 0000e900                   PULL    a0,a1,a2,a4,a5,a6
    2685 0000e920     0960          rets
    2686                    
    2687                    
    2688                    
    2689                    ****************************************
    2690                    * moves the cursor and hilite char to their new positions.
    2691                    
    2692 0000e930            SUBRP  new_cursor_pos
    2693                    
    2694                            ;x pos = vqzkgrid_x + vqzkblock_size * (index mod 6)
    2695 0000e930     4d21          move    a9,a1
    2696 0000e940     18a0          movk    5,a0
    2697 0000e950     6e01          modu    a0,a1
    2698 0000e960     09e0          movi    vqzkblock_size,a0
         0000e970 00000012  
    2699 0000e990     5e01          mpyu    a0,a1
    2700 0000e9a0     b5a3          move    *a13(vqzkstick),a3
         0000e9b0     0140  
    2701 0000e9c0     24c3          SLL     6,A3
    2702 0000e9d0     0b23          ADDI    WHERE_BLOCK,A3
         0000e9e0 0000f6c0' 
    2703 0000ea00     b46e          MOVE    *A3(010h),A14
         0000ea10     0010  
    2704 0000ea20     41c1          add     a14,a1
    2705 0000ea30     b7a8          move    *a13(vqzkcursorimg),a8,L
         0000ea40     0100  
    2706 0000ea50     b028          move    a1,*a8(OXPOS)
         0000ea60     0090  
    2707 0000ea70     b7a8          move    *a13(vqzkhiliteimg),a8,L
         0000ea80     0120  
    2708 0000ea90     b028          move    a1,*a8(OXPOS)
         0000eaa0     0090  
    2709                    
    2710                            ;y pos = vqzkgrid_y + vqzkblock_size * (index / 6)
    2711 0000eab0     4d21          move    a9,a1
    2712 0000eac0     18a2          movk    5,a2
    2713 0000ead0     5a41          divu    a2,a1
    2714 0000eae0     09e0          movi    vqzkblock_size,a0
         0000eaf0 00000012  
    2715 0000eb10     5e01          mpyu    a0,a1
    2716 0000eb20     b46e          move    *a3(030h),a14
         0000eb30     0030  
    2717 0000eb40     41c1          add     a14,a1
    2718 0000eb50     b7a8          move    *a13(vqzkcursorimg),a8,L
         0000eb60     0100  
    2719 0000eb70     b028          move    a1,*a8(OYPOS)
         0000eb80     00b0  
    2720 0000eb90     b7a8          move    *a13(vqzkhiliteimg),a8,L
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   67

         0000eba0     0120  
    2721 0000ebb0     b028          move    a1,*a8(OYPOS)
         0000ebc0     00b0  
    2722                    
    2723                            ;adjust the character image
    2724 0000ebd0     4d20          move    a9,a0
    2725 0000ebe0     2060          sla     3,a0            ;x8
    2726 0000ebf0     0b20          addi    vqzkinit_table1,a0
         0000ec00 0000f740' 
    2727 0000ec20     8e00          movb    *a0,a0
    2728 0000ec30                   X32     a0
    2729 0000ec40     0b20          addi    font9_ascii,a0
         0000ec50 00000000! 
    2730 0000ec70     8600          move    *a0,a0,L
    2731 0000ec80     cb03          jrnz    vqzkgood_image
    2732 0000ec90     09e0          movi    OSGEMD_DOT,a0
         0000eca0 00000000! 
    2733 0000ecc0           vqzkgood_image
    2734 0000ecc0     b7a8          move    *a13(vqzkhiliteimg),a8,L
         0000ecd0     0120  
    2735 0000ece0     0d5f          calla   civanic
         0000ecf0 00000000! 
    2736 0000ed10     09e0          movi    FNT9YEL_P,a0
         0000ed20 00000000! 
    2737 0000ed40     0d5f          calla   pal_getf
         0000ed50 00000000! 
    2738 0000ed70     b008          move    a0,*a8(OPAL)
         0000ed80     0150  
    2739 0000ed90     b50e          move    *a8(OSIZEX),a14         ;center it
         0000eda0     0130  
    2740 0000edb0     0d0e          subi    vqzkblock_size,a14
         0000edc0 ffffffed  
    2741 0000ede0     2bee          sra     1,a14
    2742 0000edf0     b1c8          move    a14,*a8(ODXOFF)
         0000ee00     0220  
    2743 0000ee10     b50e          move    *a8(OSIZEY),a14
         0000ee20     0140  
    2744 0000ee30     0d0e          subi    vqzkblock_size,a14
         0000ee40 ffffffed  
    2745 0000ee60     2bee          sra     1,a14
    2746 0000ee70     b1c8          move    a14,*a8(ODYOFF)
         0000ee80     0230  
    2747                    
    2748 0000ee90     0960          rets
    2749                    
    2750                    
    2751                    ****************************************
    2752                    * deletes the old displayed init string (if any) and makes a new one.
    2753                    
    2754 0000eea0            SUBRP  print_init_string
    2755                    
    2756 0000eea0                   push    b5,b3
    2757 0000eec0                   PUSH    a0,a1,a2,a3,a4,a5,a6,a7,a8
    2758 0000eee0                   PUSH    a4
    2759 0000eef0     b5a0          move    *a13(vqzkstick),a0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   68

         0000ef00     0140  
    2760 0000ef10     0b00          addi    CLSNEUT|TYPTEXT|00A5h,a0
         0000ef20     07a5  
    2761 0000ef30     0d5f          calla   obj_del1c
         0000ef40 00000000! 
    2762                    
    2763 0000ef60     09e2          movi    vqzkcurrentinit1_mes,a2
         0000ef70 0000f980' 
    2764 0000ef90     b5a3          move    *a13(vqzkstick),a3
         0000efa0     0140  
    2765 0000efb0     ca03          jrz     vqzkcurrent_mess_set
    2766 0000efc0     09e2          movi    vqzkcurrentinit2_mes,a2
         0000efd0 0000fa30' 
    2767 0000eff0           vqzkcurrent_mess_set
    2768                    
    2769 0000eff0     0d5f          calla   setup_message
         0000f000 00000000! 
    2770                    
    2771 0000f020     b5a0          move    *a13(vqzkstick),a0
         0000f030     0140  
    2772 0000f040     0b00          addi    CLSNEUT|TYPTEXT|00A5h,a0
         0000f050     07a5  
    2773 0000f060     0580          move    a0,@mess_objid
         0000f070 00000000! 
    2774                    
    2775 0000f090                   PULL    a4
    2776 0000f0a0     0d5f          calla   print_string_C2
         0000f0b0 00000000! 
    2777                    
    2778 0000f0d0                   PULL    a0,a1,a2,a3,a4,a5,a6,a7,a8
    2779 0000f0f0                   pull    b5,b3
    2780                            
    2781 0000f110     0960          rets
    2782                    
    2783                    ****************************************
    2784                    * draw the letter grid
    2785                    
    2786 0000f120            SUBRP  draw_letter_grid
    2787                    
    2788 0000f120     09e0          movi    FNT9YEL_P,a0
         0000f130 00000000! 
    2789 0000f150     0d5f          calla   pal_getf
         0000f160 00000000! 
    2790 0000f180     4c0b          move    a0,a11
    2791                    
    2792 0000f190     b5a1          move    *a13(vqzkstick),A1
         0000f1a0     0140  
    2793 0000f1b0     24c1          SLL     6,A1
    2794 0000f1c0     0b21          ADDI    WHERE_BLOCK,A1
         0000f1d0 0000f6c0' 
    2795 0000f1f0     9620          MOVE    *A1+,A0,L
    2796 0000f200     8621          MOVE    *A1,A1,L
    2797 0000f210     4e02          MOVE    A0,B2
    2798 0000f220     0d12          SUBI    [vqzkblock_size,0],B2
         0000f230 ffedffff  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   69

    2799                    
    2800 0000f250     09e9          movi    vqzkinit_table1,a9
         0000f260 0000f740' 
    2801 0000f280     09ca          movi    30,a10
         0000f290     001e  
    2802 0000f2a0     c007          jruc    vqzkdraw_loop
    2803                    
    2804 0000f2b0           vqzkdraw_incy
    2805 0000f2b0     4e50          MOVE    B2,A0
    2806 0000f2c0     0b21          addi    [vqzkblock_size,0],a1
         0000f2d0 00120000  
    2807 0000f2f0           vqzkdraw_incx
    2808 0000f2f0     0b20          addi    [vqzkblock_size,0],a0
         0000f300 00120000  
    2809                    
    2810 0000f320           vqzkdraw_loop
    2811 0000f320     8f22          movb    *a9,a2
    2812 0000f330     1109          addk    8,a9
    2813 0000f340                   X32     a2
    2814 0000f350     0b22          addi    font9_ascii,a2
         0000f360 00000000! 
    2815 0000f380     8642          move    *a2,a2,L
    2816 0000f390     cb03          jrnz    vqzkdraw_okimg
    2817                    
    2818                            ;bad image
    2819 0000f3a0     09e2          movi    OSGEMD_DOT,a2
         0000f3b0 00000000! 
    2820                    
    2821 0000f3d0           vqzkdraw_okimg
    2822 0000f3d0     5663          clr     a3
    2823 0000f3e0     09e4          movi    DMAWNZ,a4
         0000f3f0 00008002  
    2824 0000f410     b5a5          move    *a13(vqzkstick),a5
         0000f420     0140  
    2825 0000f430     0b05          addi    CLSNEUT|TYPTEXT|00A3h,a5
         0000f440     07a3  
    2826 0000f450     56c6          clr     a6
    2827 0000f460     56e7          clr     a7
    2828 0000f470                   PUSH    a0,a1
    2829 0000f490     09f0          movi    FNT9YEL_P,b0
         0000f4a0 00000000! 
    2830 0000f4c0     0d5f          calla   BEGINOBJP
         0000f4d0 00000000! 
    2831 0000f4f0                   PULL    a0,a1
    2832 0000f510     b168          move    a11,*a8(OPAL)                   ;set the palette
         0000f520     0150  
    2833                    
    2834                            ;center the image in its' box
    2835 0000f530     b50e          move    *a8(OSIZEX),a14
         0000f540     0130  
    2836 0000f550     0d0e          subi    vqzkblock_size,a14
         0000f560 ffffffed  
    2837 0000f580     2bee          sra     1,a14
    2838 0000f590     b1c8          move    a14,*a8(ODXOFF)
         0000f5a0     0220  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   70

    2839                    
    2840 0000f5b0     b50e          move    *a8(OSIZEY),a14
         0000f5c0     0140  
    2841 0000f5d0     0d0e          subi    vqzkblock_size,a14
         0000f5e0 ffffffed  
    2842 0000f600     2bee          sra     1,a14
    2843 0000f610     b1c8          move    a14,*a8(ODYOFF)
         0000f620     0230  
    2844                    
    2845 0000f630     142a          dec     a10
    2846 0000f640     ca06          jrz     vqzkdraw_done
    2847                    
    2848 0000f650     4d46          move    a10,a6
    2849 0000f660     09c7          movi    5,a7
         0000f670     0005  
    2850 0000f680     6ee6          modu    a7,a6
    2851 0000f690     cac1          jrz     vqzkdraw_incy
    2852 0000f6a0     c0c4          jruc    vqzkdraw_incx
    2853                    
    2854 0000f6b0           vqzkdraw_done
    2855 0000f6b0     0960          rets
    2856                    
    2857                    ****************************************
    2858                    * enter inits config stuff
    2859              0005  crap_off                .equ    5
    2860 0000f6c0           WHERE_BLOCK
    2861 0000f6c0 00250000          .LONG   [32+crap_off,0] ;X
    2862 0000f6e0 003b0000          .LONG   [59,0]  ;Y
    2863                    
    2864 0000f700 01160000          .LONG   [273+crap_off,0]        ;X
    2865 0000f720 003b0000          .LONG   [59,0]  ;Y
    2866                    
    2867 0000f740       41  vqzkinit_table1 .STRING "ABCDEFGHIJKLMNOPQRSTUVWXYZ!",010H,011H,012H
    2868 0000f830       41  vqzkinit_table2 .STRING "ABCDEFGHIJKLMNOPQRSTUVWXYZ!",020H,011H,012H
    2869                    
    2870              00c8  vqzkgrid_x              equ     200             ;x position of letter grid
    2871              0064  vqzkgrid_y              equ     100             ;y position of letter grid
    2872              0012  vqzkblock_size  equ     18              ;x & y spacing of letter grid
    2873                    
    2874              001e  vqzktstatic     equ     30              ;ticks before repeat motion begins
    2875              000a  vqzktmoving     equ     10              ;ticks between repeat motions
    2876              0008  vqzkdebounce_time       equ     8               ;min ticks between stick changes
    2877                    
    2878 0000f920           vqzkenterinit_mod
    2879 0000f920 00000000!         .long   wwfselbkBMOD            ;wrestler select map
    2880 0000f940     ffd4          .word   -44,0
    2881 0000f960 00000000          .long   0
    2882                    
    2883 0000f980           vqzkcurrentinit1_mes
    2884 0000f980                   JAM_STR osgemd_ascii,10,1,77+crap_off,204,BLUE,print_string_C2
    2885 0000fa20       41          .byte   "A",0
    2886 0000fa30                   .even
    2887                    
    2888 0000fa30           vqzkcurrentinit2_mes
    2889 0000fa30                   JAM_STR osgemd_ascii,10,1,315+crap_off,204,RUBYPAL,print_string_C2
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   71

    2890 0000fad0       41          .byte   "A",0
    2891 0000fae0                   .even
    2892                    
    2893 0000fae0           vqzkenterinita_mess
    2894 0000fae0                   JAM_STR font9_ascii,8,0,76+crap_off,179,FNT9WHT2P,print_string_C2
    2895 0000fb80       45          .byte   "ENTER INITIALS",0,0
    2896 0000fc00                   .even
    2897                    
    2898 0000fc00           vqzkenterinitb_mess
    2899 0000fc00                   JAM_STR font9_ascii,8,0,286+crap_off+29,179,FNT9RED_P,print_string_C2
    2900 0000fca0       45          .byte   "ENTER INITIALS",0,0
    2901 0000fd20                   .even
    2902                    
    2903 0000fd20           vqzkenterinit1_mes
    2904 0000fd20                   JAM_STR font9_ascii,4,0,77+crap_off,38,FNT9WHT2P,print_string_C2
    2905 0000fdc0       57          .byte   "WIN STREAK !",0,0
    2906 0000fe30                   .even      
    2907                    
    2908 0000fe30           vqzkenterinit2_mes
    2909 0000fe30                   JAM_STR font9_ascii,4,0,317+crap_off,38,FNT9RED_P,print_string_C2
    2910 0000fed0       57          .byte   "WIN STREAK !",0,0
    2911 0000ff40                   .even
    2912                    
    2913 0000ff40           vqzkenterinit3_mes
    2914 0000ff40                   JAM_STR font9_ascii,4,0,77+crap_off,38,FNT9WHT2P,print_string_C2
    2915 0000ffe0       46          .byte   "FAST VICTORY",0,0
    2916 00010050                   .even
    2917                    
    2918 00010050           vqzkenterinit4_mes
    2919 00010050                   JAM_STR font9_ascii,4,0,317+crap_off,38,FNT9RED_P,print_string_C2
    2920 000100f0       46          .byte   "FAST VICTORY",0,0
    2921 00010160                   .even
    2922                    
    2923 00010160           vqzkenterinit5_mes
    2924 00010160                   JAM_STR font9_ascii,4,0,77+crap_off,38,FNT9WHT2P,print_string_C2
    2925 00010200       42          .byte   "BEATEN GAME",0,0
    2926 00010270                   .even
    2927                    
    2928 00010270           vqzkenterinit6_mes
    2929 00010270                   JAM_STR font9_ascii,4,0,317+crap_off,38,FNT9RED_P,print_string_C2
    2930 00010310       42          .byte   "BEATEN GAME",0,0
    2931 00010380                   .even
    2932                    
    2933 00010380           vqzkenterinit7_mes
    2934 00010380                   JAM_STR font9_ascii,4,0,45+crap_off,16,FNT9WHT2P,print_string_C2
    2935 00010420       57          .byte   "WINS : ",0,0
    2936 00010470                   .even
    2937                    
    2938 00010470           vqzkenterinit8_mes
    2939 00010470                   JAM_STR font9_ascii,4,0,285+crap_off,16,FNT9RED_P,print_string_C2
    2940 00010510       57          .byte   "WINS : ",0,0
    2941 00010560                   .even
    2942                    
    2943 00010560           vqzkenterinit9_mes
    2944 00010560       53          .byte   "SEC.",0,0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   72

    2945 00010590                   .even
    2946                    
    2947 00010590           vqzkentermess_mes
    2948 00010590                   JAM_STR osgemd_ascii,10,0,200+crap_off,10,BLUE,print_string_C2
    2949 00010630       45          .byte   "ENTER A MESSAGE",0,0
    2950 000106c0                   .even
    2951                    
    2952 000106c0     0000  vqzkcursor      .word   0,0,10                                  ;X, Y, Z
    2953 000106f0 00000000!         .long   jmeter                                  ;IMG
    2954 00010710     800c          .word   DMACAL                                  ;CTRL
    2955 00010720     07a3          .word   CLSNEUT|TYPTEXT|00A3h
    2956 00010730 00000000          .long   0,0                                     ;XVEL, YVEL
    2957 00010770                   .even
    2958                    
    2959 00010770     0000  vqzkcursor2     .word   0,0,10                                  ;X, Y, Z
    2960 000107a0 00010820'         .long   vqzkjmeter2                                     ;IMG
    2961 000107c0     800c          .word   DMACAL                                  ;CTRL
    2962 000107d0     07a4          .word   CLSNEUT|TYPTEXT|00A4h
    2963 000107e0 00000000          .long   0,0                                     ;XVEL, YVEL
    2964 00010820                   .even
    2965                    
    2966 00010820           vqzkjmeter2
    2967 00010820     00af          .word   175,13,2,2
    2968 00010860 040427fc          .long   040427fcH
    2969 00010880     2000          .word   02000H
    2970 00010890 000108b0'         .long   vqzkjmeter2_p
    2971                    
    2972 000108b0           vqzkjmeter2_p
    2973 000108b0     0005          .word     5
    2974 000108c0     0000          .word   00H,7d00H,07F60H,01E0H,00H
    2975                    
    2976 00010910     0000  vqzkhilite1     .word   0,0,20                                  ;X, Y, Z
    2977 00010940 00000000!         .long   FNT9_A
    2978 00010960     8002          .word   DMAWNZ                                  ;CTRL
    2979 00010970     07a3          .word   CLSNEUT|TYPTEXT|00A3h
    2980 00010980 00000000          .long   0,0                                     ;XVEL, YVEL
    2981 000109c0                   .even
    2982                    
    2983 000109c0     0000  vqzkhilite2     .word   0,0,20                                  ;X, Y, Z
    2984 000109f0 00000000!         .long   FNT9_A
    2985 00010a10     8002          .word   DMAWNZ                                  ;CTRL
    2986 00010a20     07a4          .word   CLSNEUT|TYPTEXT|00A4h
    2987 00010a30 00000000          .long   0,0                                     ;XVEL, YVEL
    2988 00010a70                   .even
    2989                    
    2990 00010a70           vqzkjoytab                              ;RLDU
    2991 00010a70     0000          .word   0               ;0000
    2992 00010a80     fffb          .word   -5              ;0001
    2993 00010a90     0005          .word   5               ;0010
    2994 00010aa0     0000          .word   0               ;0011
    2995 00010ab0     ffff          .word   -1              ;0100
    2996 00010ac0     fffa          .word   -6              ;0101
    2997 00010ad0     0004          .word   4               ;0110
    2998 00010ae0     ffff          .word   -1              ;0111
    2999 00010af0     0001          .word   1               ;1000
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   73

    3000 00010b00     fffc          .word   -4              ;1001
    3001 00010b10     0006          .word   6               ;1010
    3002 00010b20     0001          .word   1               ;1011
    3003 00010b30     0000          .word   0               ;1100
    3004 00010b40     fffb          .word   -5              ;1101
    3005 00010b50     0005          .word   5               ;1110
    3006 00010b60     0000          .word   0               ;1111
    3007                    
    3008                    ********************************
    3009                    *INITIAL ENTRY JOYSTICK TABLE
    3010                            
    3011                    *INITIAL MATRIX
    3012                    
    3013                    
    3014                    **************************************************************************
    3015                    *
    3016                    *       CHECK_INITS
    3017                    *
    3018                    *       A1 POINTS AT A SET OF INITIALS ENTERED. RETURN .EQ.
    3019                    *       IF THEY'RE ALL SPACES (OR ZERO).
    3020                    *
    3021                    **************************************************************************
    3022 00010b70           CHECK_INITS:
    3023 00010b70     098f          MMTM    SP,A0,A1,A2
         00010b80     e000  
    3024 00010b90     09c2          MOVI    NUM_INITS,A2
         00010ba0     0005  
    3025 00010bb0           CHECK_NEXT:
    3026 00010bb0     8e20          MOVB    *A1,A0                  ;GET AN INITIAL
    3027 00010bc0     ca03          JRZ     SPACE_FOUND             ;NULL IS A SPACE
    3028 00010bd0     0b40          CMPI    SPACE,A0                ;IS IT A REAL SPACE?
         00010be0     ffdf  
    3029 00010bf0     cb04          JRNZ    LET_FOUND
    3030 00010c00           SPACE_FOUND:
    3031 00010c00     0b01          ADDI    BYTE_SIZE,A1
         00010c10     0008  
    3032 00010c20     3d02          DSJS    A2,CHECK_NEXT
    3033 00010c30     5642          CLR     A2                      ;SET Z BIT ON FALL THROUGH
    3034                    
    3035 00010c40           LET_FOUND:
    3036 00010c40     09af          MMFM    SP,A0,A1,A2
         00010c50     0007  
    3037 00010c60     0960          RETS
    3038                    
    3039                    **************************************************************************
    3040                    *
    3041                    *       CHECK_SCORE
    3042                    *
    3043                    *       THIS IS CALLED WITH A SCORE IN A0 TO SEE IF IT
    3044                    *       IS HIGH ENOUGH TO MAKE THE TABLE.
    3045                    *
    3046                    *       THE OTHER PLAYER'S SCORE IS PASSED IN A2. IF
    3047                    *       THE PLAYER MAKES THE LAST POSITION OF THE TABLE,
    3048                    *       THEN HIS SCORE IS COMPARED AGAINST THE OTHER SCORE
    3049                    *       IT MUST BE HIGHER THAN THE OTHER SCORE, OTHERWISE
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   74

    3050                    *       HE WILL ENTER HIS INITIALS, BUT THERE WILL BE NO
    3051                    *       PLACE TO PUT THEM WHEN HIS BUDDY IS DONE ENTERING HIS!
    3052                    *
    3053                    *       THIS ROUTINE CALLS FIND_TABLE_LEVEL WHICH RETURNS
    3054                    *       THE POINT IN THE TABLE THAT THE PASSED SCORE WOULD
    3055                    *       LAND.   THIS VALUE MUST BE LESS THAN OR EQUAL TO
    3056                    *       THE "TB_VISIBLE" VALUE FOR THE TABLE.  THIS WOULD
    3057                    *       MEAN THAT WE WANT TO GET THE PLAYER'S INITIALS.
    3058                    *
    3059                    *       A8 CONTAINS ROM POINTER FOR TABLE TO CHECK.
    3060                    *       RETURN A0 = 0 (AND .EQ.) IF SCORE ISN'T HIGH ENOUGH
    3061                    *       AND A0 = POSITION IN TABLE IF SCORE MAKES IT.
    3062                    *
    3063                    **************************************************************************
    3064 00010c70            SUBR   CHECK_SCORE
    3065 00010c70     098f          MMTM    SP,A1,A3,A9,A10
         00010c80     5060  
    3066 00010c90     4c03          MOVE    A0,A3                   ;STASH SCORE IN A3
    3067 00010ca0     b7aa          move    *a13(vqzkwhich_level),a10,L
         00010cb0     0190  
    3068 00010cc0     092a          call    a10
    3069                    
    3070                    ;       CALLR   FIND_TABLE_LEVEL        ;SEE WHERE WE LAND IN THIS TABLE
    3071                    
    3072 00010cd0     ca05          JRZ     ANSWER_IN_A0            ;ZERO.....GUY DIDN'T MAKE IT
    3073 00010ce0     b501          MOVE    *A8(TB_VISIBLE),A1,W    ;GET THE NUMBER "ENTERED"
         00010cf0     0030  
    3074 00010d00     4820          CMP     A1,A0                   ;A0 MUST BE LESS OR EQUAL
    3075 00010d10     c801          JRLO    ANSWER_IN_A0            ;NOT LAST ENTRY...RETURN SUCCESS
    3076                    
    3077                    ;       JRHI    DIDNT_MAKE_HSTD
    3078                    *
    3079                    *       GUY IS GOING FOR LAST POSITION.....SEE IF HIS BUDDY IS
    3080                    *       GOING TO NOSE HIM OUT:
    3081                    *
    3082                    *       ^^^^^^^^^^ not anymore !! ^^^^^^^
    3083                    ;       CMP     A2,A3                   ;HI MUST BE HIGHER THAN BUDDY
    3084                    ;       JRHI    ANSWER_IN_A0
    3085                    ;
    3086                    ;DIDNT_MAKE_HSTD:
    3087 00010d20     5600          CLR     A0                      ;RETURN FAILURE
    3088 00010d30           ANSWER_IN_A0:
    3089 00010d30     4c00          MOVE    A0,A0                   ;SET EQ BIT ACCORDINGLY
    3090 00010d40     09af          MMFM    SP,A1,A3,A9,A10
         00010d50     060a  
    3091 00010d60     0960          RETS
    3092                    
    3093 00010d70           SORT_BEATEN_TABLE
    3094 00010d70                   PUSH    A1
    3095 00010d80     b7a8          MOVE    *A13(vqzkwhich_tab),A8,L
         00010d90     0150  
    3096                    ;       MOVI    BEATEN_TAB,A8
    3097 00010da0     0d3f          CALLR   ROM_PTRS
         00010db0     0143  
    3098 00010dc0     b5a0          MOVE    *A13(vqzkwhich_aud),A0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   75

         00010dd0     01b0  
    3099                    ;       MOVI    AUD_BEATEN,A0
    3100 00010de0     0d5f          CALLA   GET_AUD
         00010df0 00000000! 
    3101 00010e10     4c20          MOVE    A1,A0
    3102 00010e20                   PULL    A1
    3103 00010e30     4c06          MOVE    A0,A6
    3104 00010e40     0d3f          CALLR   TEST_NUM_ICON
         00010e50     0031  
    3105 00010e60     4c65          MOVE    A3,A5
    3106                    
    3107 00010e70     1820          MOVK    1,A0
    3108 00010e80     09ea          MOVI    BEATEN_TAB_ENTRIES,A10
         00010e90 0000001f  
    3109 00010eb0           TEST_NEXT_BEATEN_ENTRY
    3110 00010eb0     0d3f          CALLR   TEST_NUM_ICON
         00010ec0     002a  
    3111 00010ed0     4865          CMP     A3,A5
    3112 00010ee0     c503          JRGE    THIS_IS_IT
    3113 00010ef0     1020          INC     A0
    3114 00010f00     3cca          DSJS    A10,TEST_NEXT_BEATEN_ENTRY
    3115 00010f10           NO_MOVEMENT
    3116 00010f10     0960          RETS
    3117                    
    3118 00010f20           THIS_IS_IT
    3119 00010f20     4806          CMP     A0,A6
    3120 00010f30     cafd          JREQ    NO_MOVEMENT
    3121 00010f40     4cca          MOVE    A6,A10
    3122 00010f50     4d43          MOVE    A10,A3
    3123                    
    3124 00010f60     b7a8          MOVE    *A13(vqzkwhich_tab),A8,L
         00010f70     0150  
    3125 00010f80     0d3f          CALLR   ROM_PTRS
         00010f90     0125  
    3126 00010fa0                   PUSH    A0,A1
    3127 00010fc0     b5a0          MOVE    *A13(vqzkwhich_aud),A0
         00010fd0     01b0  
    3128 00010fe0     0d5f          CALLA   GET_AUD
         00010ff0 00000000! 
    3129 00011010     4c20          MOVE    A1,A0
    3130 00011020     0d3f          CALLR   GET_HSCR
         00011030     00d1  
    3131 00011040     4c24          MOVE    A1,A4
    3132 00011050                   PULL    A0,A1
    3133 00011070                   PUSH    A0,A1
    3134 00011090     4c01          MOVE    A0,A1
    3135 000110a0     b5a0          MOVE    *A13(vqzkwhich_aud),A0
         000110b0     01b0  
    3136 000110c0     0d5f          calla   KILL_AUD
         000110d0 00000000! 
    3137 000110f0     0d5f          calla   AUD
         00011100 00000000! 
    3138 00011120                   PULL    A0,A1
    3139 00011140     098f          MMTM    SP,A0,A1,A2,A3,A4,A7,A9,A10
         00011150     f960  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   76

    3140 00011160     c071          JRUC    COPY_DOWN_LOOP
    3141                    
    3142 00011170           TEST_NUM_ICON
    3143 00011170                   PUSH    A1
    3144 00011180     0d3f          CALLR   GET_HSCR
         00011190     00bb  
    3145 000111a0     5663          CLR     A3
    3146 000111b0     1904          MOVK    8,A4
    3147 000111c0           TEST_NEXT_NYBBLE
    3148 000111c0     2fe1          SRL     1,A1
    3149 000111d0     c901          JRNC    NO_IN_A3
    3150 000111e0     1023          INC     A3
    3151 000111f0           NO_IN_A3
    3152 000111f0     2fa1          SRL     3,A1
    3153 00011200     3ca4          DSJS    A4,TEST_NEXT_NYBBLE
    3154 00011210                   PULL    A1
    3155 00011220     0960          RETS
    3156                    
    3157 00011230           COMPARE_INITIALS
    3158 00011230     1820          MOVK    1,A0                    ;START AT 1 AND WORK UP.
    3159 00011240     0d3f          CALLR   VAL_TAB                 ;FIX THE TABLE IN CASE ITS BROKEN.
         00011250     014f  
    3160 00011260     c809          JRC     vqzkNOT_MATCHED
    3161 00011270           COMPARE_NEXT
    3162 00011270     0d3f          CALLR   COMPARE_INITS
         00011280     000a  
    3163 00011290     c904          JRNC    MATCHED
    3164 000112a0     1020          INC     A0
    3165 000112b0     4940          CMP     A10,A0
    3166 000112c0     cbfa          JRNE    COMPARE_NEXT
    3167 000112d0     5600          CLR     A0
    3168 000112e0           MATCHED
    3169 000112e0     4c00          MOVE    A0,A0
    3170 000112f0     0960          RETS
    3171 00011300           vqzkNOT_MATCHED
    3172 00011300     09c0          MOVI    -1,A0
         00011310     ffff  
    3173 00011320     0960          RETS
    3174                    
    3175 00011330           COMPARE_INITS
    3176 00011330                   PUSH    A0
    3177 00011340     4c26          MOVE    A1,A6
    3178 00011350     0d5f          CALLA   PT_ENTRY
         00011360 00012160' 
    3179 00011380     0b07          ADDI    HS_INITS,A7             ;POINT AT FIRST INITIAL
         00011390     0040  
    3180 000113a0     09c2          MOVI    NUM_INITS,A2            ;THIS IS NUMBER OF INITIALS
         000113b0     0005  
    3181 000113c0           vqzkINIT_COPY_LOOP
    3182 000113c0     0d3f          CALLR   RC_BYTEI
         000113d0     01d4  
    3183 000113e0     4c05          MOVE    A0,A5
    3184 000113f0     cb02          JRNZ    vqzkNOT_BLANK
    3185 00011400     09c5          MOVI    SPACE,A5                ;REPLACE BLANKS WITH SPACES
         00011410     0020  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   77

    3186 00011420           vqzkNOT_BLANK:
    3187 00011420     8ecb          MOVB    *A6,A11
    3188 00011430     cb03          JRNZ    vqzkNOT_A_SPACE
    3189 00011440     09cb          MOVI    SPACE,A11               ;REPLACE BLANKS WITH SPACES
         00011450     0020  
    3190 00011460     8d66          MOVB    A11,*A6
    3191 00011470           vqzkNOT_A_SPACE
    3192 00011470     48ab          CMP     A5,A11
    3193 00011480     cb08          JRNE    NOT_MATCHED
    3194 00011490     1106          ADDK    8,A6
    3195 000114a0     3de2          DSJ     A2,vqzkINIT_COPY_LOOP
    3196 000114b0                   PULL    A0
    3197 000114c0     0d3f          CALLR   GET_HSCR
         000114d0     0087  
    3198 000114e0     5424          OR      A1,A4
    3199 000114f0     0320          CLRC
    3200 00011500     0960          RETS
    3201 00011510           NOT_MATCHED
    3202 00011510                   PULL    A0
    3203 00011520     0de0          SETC
    3204 00011530     0960          RETS
    3205                    
    3206 00011540           SPECIAL_ADD_ENTRY
    3207 00011540     098f          MMTM    SP,A0,A1,A2,A3,A4,A7,A9,A10
         00011550     f960  
    3208 00011560     0d3f          CALLR   ROM_PTRS                ;SETUP FOR THIS TABLE
         00011570     00c7  
    3209 00011580     4c04          MOVE    A0,A4
    3210 00011590                   PUSH    A1
    3211 000115a0     0d3f          CALLR   COMPARE_INITIALS
         000115b0     ffc7  
    3212 000115c0     cb02          JRNZ    INSERT_HERE
    3213 000115d0     ce4a          JRN     DIDNT_MAKE_IT
    3214 000115e0     4d40          MOVE    A10,A0
    3215                    
    3216 000115f0           INSERT_HERE
    3217 000115f0                   PUSH    A0
    3218 00011600     4c01          MOVE    A0,A1
    3219 00011610     b5a0          MOVE    *A13(vqzkwhich_aud),A0
         00011620     01b0  
    3220 00011630     0d5f          calla   KILL_AUD
         00011640 00000000! 
    3221 00011660     0d5f          calla   AUD
         00011670 00000000! 
    3222 00011690                   PULL    A0
    3223 000116a0                   PULL    A1
    3224 000116b0     4d43          MOVE    A10,A3
    3225 000116c0     0de0          SETC
    3226 000116d0     c022          JRUC    COPY_DONE
    3227                    
    3228 000116e0           TAG_ENTRY:
    3229 000116e0     098f          MMTM    SP,A0,A1,A2,A3,A4,A7,A9,A10
         000116f0     f960  
    3230 00011700     0d3f          CALLR   ROM_PTRS                ;SETUP FOR THIS TABLE
         00011710     00ad  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   78

    3231 00011720     4c04          MOVE    A0,A4                   ;STASH THE SCORE A SEC.
    3232 00011730     5642          CLR     A2                      ;DONT WORRY ABOUT OTHER GUY AT THIS POINT
    3233 00011740     0d3f          CALLR   CHECK_SCORE             ;DOES THE REQUEST MAKE IT?
         00011750     ff51  
    3234 00011760     0de0          SETC                            ;ANTICIPATE FAILURE
    3235 00011770     ca02          JRZ     SPECIAL_DIDNT_MAKE_IT           ;DON'T KNOW WHY I GOT THESE INITS.
    3236 00011780     4d43          MOVE    A10,A3                  ;LAST GUY IN TABLE IS DESTINATION
    3237 00011790     c00e          JRUC    COPY_DOWN_LOOP
    3238 000117a0           SPECIAL_DIDNT_MAKE_IT
    3239 000117a0     1a20          MOVK    17,A0
    3240 000117b0     4d43          MOVE    A10,A3                  ;LAST GUY IN TABLE IS DESTINATION
    3241 000117c0     c00b          JRUC    COPY_DOWN_LOOP
    3242                    
    3243                    **************************************************************************
    3244                    *
    3245                    *       ADD_ENTRY
    3246                    *
    3247                    *       THIS IS CALLED AFTER "ENTER YOUR INITIALS" TO
    3248                    *       ADD AN ENTRY TO THE TABLE. A0 CONTAINS THE
    3249                    *       SCORE OF THE PLAYER. A1 CONTAINS A POINTER
    3250                    *       TO THE FETCHED INITIALS. THE INITIALS ARE
    3251                    *       STORED AS CONSECUTIVE BYTES IN CONVENTIONAL
    3252                    *       (1 BYTE TAKES 1 BYTE SPACE) RAM.
    3253                    *
    3254                    *       A8 contains a the table to store the entry in.
    3255                    *
    3256                    *       RETURN CARRY SET IF IT DIDN'T MAKE IT INTO REQUESTED TABLE
    3257                    *
    3258                    **************************************************************************
    3259 000117d0           ADD_ENTRY:
    3260 000117d0     098f          MMTM    SP,A0,A1,A2,A3,A4,A7,A9,A10
         000117e0     f960  
    3261 000117f0     0d3f          CALLR   ROM_PTRS                ;SETUP FOR THIS TABLE
         00011800     009e  
    3262 00011810     4c04          MOVE    A0,A4                   ;STASH THE SCORE A SEC.
    3263 00011820     5642          CLR     A2                      ;DONT WORRY ABOUT OTHER GUY AT THIS POINT
    3264 00011830     0d3f          CALLR   CHECK_SCORE             ;DOES THE REQUEST MAKE IT?
         00011840     ff42  
    3265 00011850     0de0          SETC                            ;ANTICIPATE FAILURE
    3266 00011860     ca21          JRZ     DIDNT_MAKE_IT           ;DON'T KNOW WHY I GOT THESE INITS.
    3267                    *
    3268                    *       A0 NOW HAS THE PLACE FOR THE NEW GUY.
    3269                    *       MOVE THE ENTIRE TABLE DOWN 1 UNIT.
    3270                    *
    3271 00011870     4d43          MOVE    A10,A3                  ;LAST GUY IN TABLE IS DESTINATION
    3272                    
    3273 00011880           COPY_DOWN_LOOP:
    3274 00011880     4c62          MOVE    A3,A2                   ;GUY BEFORE HIM IS SOURCE
    3275 00011890     1422          DEC     A2                      ;A2 NOW HAS SOURCE
    3276 000118a0     4802          CMP     A0,A2                   ;IS SOURCE LOWER THAN OUR SLOT?
    3277 000118b0     c804          JRLO    COPY_DONE               ;IT IS...DON'T MOVE HIM.
    3278                    
    3279 000118c0     0d3f          CALLR   COPY_ENTRY              ;COPY A2 ENTRY TO A3
         000118d0     00cf  
    3280 000118e0     1423          DEC     A3                      ;MOVE DOWN TO ONE BEFORE
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   79

    3281 000118f0     c0f8          JRUC    COPY_DOWN_LOOP
    3282                    
    3283 00011900           COPY_DONE:
    3284 00011900     0d3f          CALLR   PUT_SCORE_FOR_ENTRY     ;SCORE IN A4 WRITTEN TO ENTRY A0
         00011910     004f  
    3285                    *
    3286                    *       INITAIAL POINTER IS IN A1
    3287                    *       TABLE OFFSET IN A0
    3288                    *
    3289 00011920     0d3f          CALLR   PT_ENTRY                ;GET ENTRY POINTER IN A7
         00011930     0082  
    3290 00011940     0b07          ADDI    HS_INITS,A7             ;POINT AT FIRST INITIAL
         00011950     0040  
    3291 00011960     09c2          MOVI    NUM_INITS,A2            ;THIS IS NUMBER OF INITIALS
         00011970     0005  
    3292 00011980     098f          MMTM    SP,A0                   ;SAVE A0
         00011990     8000  
    3293                    
    3294 000119a0           INIT_COPY_LOOP:
    3295 000119a0     8e20          MOVB    *A1,A0                  ;GET AN INITIAL
    3296 000119b0     cb02          JRNZ    NOT_BLANK
    3297 000119c0     09c0          MOVI    SPACE,A0                ;REPLACE BLANKS WITH SPACES
         000119d0     0020  
    3298 000119e0           NOT_BLANK:
    3299 000119e0     0d3f          CALLR   WC_BYTEI                ;WRITE THE BYTE AND INCREMENT
         000119f0     01a8  
    3300 00011a00     0b01          ADDI    BYTE_SIZE,A1            ;A1 TO NEXT BYTE PLEASE
         00011a10     0008  
    3301 00011a20     3d22          DSJ     A2,INIT_COPY_LOOP
    3302                    
    3303 00011a30     09af          MMFM    SP,A0                   ;GET BACK ENTRY NUMBER
         00011a40     0001  
    3304 00011a50     0d3f          CALLR   FORM_HS_CKSUM_AND_STORE ;FOR CHECKSUM FOR THIS ENTRY AND STORE!
         00011a60     0061  
    3305 00011a70     0320          CLRC                            ;RETURN SUCCESS!
    3306                    
    3307 00011a80           DIDNT_MAKE_IT
    3308 00011a80     09af          MMFM    SP,A0,A1,A2,A3,A4,A7,A9,A10
         00011a90     069f  
    3309 00011aa0     0960          RETS
    3310                    
    3311                    **************************************************************************
    3312                    *
    3313                    *       FIND_TABLE_LEVEL
    3314                    *
    3315                    *       THIS IS CALLED TO COMPARE THE SCORE IN A0 TO
    3316                    *       THE TABLE POINTED TO BY A8.
    3317                    *
    3318                    *       RETURN PHYSICALLY WHERE IT FITS IN A0, AND
    3319                    *       SET THE Z FLAG ACCORDINGLY
    3320                    *
    3321                    **************************************************************************
    3322 00011ab0           FIND_HIGH_TABLE_LEVEL
    3323 00011ab0     098f          MMTM    SP,A1,A2,A3
         00011ac0     7000  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   80

    3324 00011ad0     0d3f          CALLR   ROM_PTRS                ;SETUP FOR THIS TABLE
         00011ae0     0070  
    3325 00011af0     0d3f          CALLR   VAL_TAB                 ;FIX THE TABLE IN CASE ITS BROKEN.
         00011b00     00c4  
    3326 00011b10     c809          JRC     dpyuFTL_FAIL            ;CAN'T VALIDATE..SAY SCORE DIDN'T MAKE IT
    3327                    
    3328 00011b20     4c02          MOVE    A0,A2                   ;KEEP SCORE IN A2
    3329 00011b30     1820          MOVK    1,A0                    ;START AT 1 AND WORK UP.
    3330                    
    3331 00011b40           dpyuCHECK_NEXT_SCORE:
    3332 00011b40     0d3f          CALLR   GET_HSCR                ;FETCH A0 ENTRY'S SCORE IN A1
         00011b50     001f  
    3333 00011b60     4822          CMP     A1,A2                   ;HOW DO WE FARE AGAINST A1?
    3334 00011b70     c504          JRGE    dpyuFOUND_THE_SPOT              ;WE FOUND THE SPOT
    3335 00011b80     1020          INC     A0                      ;KEEP MOVING DOWN TILL WE FIT
    3336 00011b90     4940          CMP     A10,A0                  ;ARE WE LOOKING AT THE LAST ONE?
    3337 00011ba0     c2f9          JRLS    dpyuCHECK_NEXT_SCORE
    3338                    
    3339 00011bb0           dpyuFTL_FAIL:
    3340 00011bb0     5600          CLR     A0                      ;WE'RE NOT HIGH ENOUGH RETURN FAILURE
    3341                    
    3342 00011bc0           dpyuFOUND_THE_SPOT:
    3343 00011bc0     4c00          MOVE    A0,A0                   ;MAKE SURE YOU SET THE FLAGS
    3344 00011bd0     09af          MMFM    SP,A1,A2,A3
         00011be0     000e  
    3345 00011bf0     0960          RETS
    3346                    
    3347                    **************************************************************************
    3348                    *
    3349                    *       FIND_TABLE_LEVEL
    3350                    *
    3351                    *       THIS IS CALLED TO COMPARE THE SCORE IN A0 TO
    3352                    *       THE TABLE POINTED TO BY A8.
    3353                    *
    3354                    *       RETURN PHYSICALLY WHERE IT FITS IN A0, AND
    3355                    *       SET THE Z FLAG ACCORDINGLY
    3356                    *
    3357                    **************************************************************************
    3358 00011c00            SUBR   FIND_LOW_TABLE_LEVEL
    3359 00011c00     098f          MMTM    SP,A1,A2,A3
         00011c10     7000  
    3360 00011c20     0d3f          CALLR   ROM_PTRS                ;SETUP FOR THIS TABLE
         00011c30     005b  
    3361 00011c40     0d3f          CALLR   VAL_TAB                 ;FIX THE TABLE IN CASE ITS BROKEN.
         00011c50     00af  
    3362 00011c60     c809          JRC     iuqrFTL_FAIL            ;CAN'T VALIDATE..SAY SCORE DIDN'T MAKE IT
    3363                    
    3364 00011c70     4c02          MOVE    A0,A2                   ;KEEP SCORE IN A2
    3365 00011c80     1820          MOVK    1,A0                    ;START AT 1 AND WORK UP.
    3366                    
    3367 00011c90           iuqrCHECK_NEXT_SCORE:
    3368 00011c90     0d3f          CALLR   GET_HSCR                ;FETCH A0 ENTRY'S SCORE IN A1
         00011ca0     000a  
    3369 00011cb0     4822          CMP     A1,A2                   ;HOW DO WE FARE AGAINST A1?
    3370 00011cc0     c804          JRLO    iuqrFOUND_THE_SPOT
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   81

    3371                    ;       JRHI    iuqrFOUND_THE_SPOT              ;WE FOUND THE SPOT
    3372 00011cd0     1020          INC     A0                      ;KEEP MOVING DOWN TILL WE FIT
    3373 00011ce0     4940          CMP     A10,A0                  ;ARE WE LOOKING AT THE LAST ONE?
    3374 00011cf0     c2f9          JRLS    iuqrCHECK_NEXT_SCORE
    3375                    
    3376 00011d00           iuqrFTL_FAIL:
    3377 00011d00     5600          CLR     A0                      ;WE'RE NOT HIGH ENOUGH RETURN FAILURE
    3378                    
    3379 00011d10           iuqrFOUND_THE_SPOT:
    3380 00011d10     4c00          MOVE    A0,A0                   ;MAKE SURE YOU SET THE FLAGS
    3381 00011d20     09af          MMFM    SP,A1,A2,A3
         00011d30     000e  
    3382 00011d40     0960          RETS
    3383                    
    3384                    
    3385                    **************************************************************************
    3386                    *
    3387                    *       GET_HSCR
    3388                    *
    3389                    *       THIS IS CALLED TO FETCH THE SCORE FROM CMOS FOR
    3390                    *       A GIVEN ENTRY.
    3391                    *
    3392                    *       ENTRY NUMBER PASSED IN A0.
    3393                    *       SCORE RETURNED IN A1.
    3394                    *
    3395                    **************************************************************************
    3396 00011d50           GET_HSCR
    3397 00011d50     098f          MMTM    SP,A7,A0
         00011d60     8100  
    3398 00011d70     0d3f          CALLR   PT_ENTRY                ;POINT A7 AT ENTRY
         00011d80     003d  
    3399 00011d90     0b07          ADDI    HS_SCORE,A7             ;INDEX SCORE PART.
         00011da0     0000  
    3400 00011db0     0d3f          CALLR   RC_LONG                 ;FETCH THE LONG WORD INTO A0
         00011dc0     0153  
    3401 00011dd0     4c01          MOVE    A0,A1                   ;MOVE TO A1
    3402 00011de0     09af          MMFM    SP,A7,A0
         00011df0     0081  
    3403 00011e00     0960          RETS
    3404                    
    3405                    **************************************************************************
    3406                    *
    3407                    *       PUT_SCORE_FOR_ENTRY
    3408                    *
    3409                    *       THIS IS CALLED TO WRITE OUT THE SCORE FOR A GIVEN ENTRY.
    3410                    *       ENTRY SPECIFIED BY A0.
    3411                    *       SCORE PASSED IN A4.
    3412                    *
    3413                    **************************************************************************
    3414 00011e10           PUT_SCORE_FOR_ENTRY
    3415 00011e10     098f          MMTM    SP,A7,A0
         00011e20     8100  
    3416 00011e30     0d3f          CALLR   PT_ENTRY                ;POINT A7 AT ENTRY
         00011e40     0031  
    3417 00011e50     0b07          ADDI    HS_SCORE,A7             ;INDEX SCORE PART.
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   82

         00011e60     0000  
    3418 00011e70     4c80          MOVE    A4,A0                   ;MOVE SCORE TO A0
    3419 00011e80     0d3f          CALLR   WC_LONG                 ;WRITE OUT THE LONG WORD
         00011e90     0174  
    3420 00011ea0     09af          MMFM    SP,A7,A0
         00011eb0     0081  
    3421 00011ec0     0960          RETS
    3422                    
    3423                    **************************************************************************
    3424                    *
    3425                    *       LOW LEVEL HSTD PROCESSING
    3426                    *
    3427                    **************************************************************************
    3428                    *
    3429                    *        FOR HIGH SCORE ROUTINES
    3430                    *
    3431                    *        A8  = ROM POINTER FOR A GIVEN TABLE STATS
    3432                    *        A9  = RAM POINTER FOR CMOS DATA
    3433                    *        A10 = NUMBER OF ENTRIES IN THE TABLE
    3434                    *
    3435                    *        A0  = PARTICULAR ENTRY TO DEAL WITH
    3436                    *                0 = FILL ENTRY (POINTER ROUTINES POINT HERE IF ERROR)
    3437                    *                1 = HIGHEST SCORE IN TABLE
    3438                    *                N = NTH SCORE
    3439                    *
    3440                    *        A1  = OUTPUT OF CHECKSUM ROUTINE (BYTE)
    3441                    *
    3442                    *        A7  = POINTER TO CURRENT ENTRY
    3443                    *
    3444                    *        A4,A5,A6 SCRATCH
    3445                    *
    3446                    **************************************************************************
    3447                    *
    3448                    *       FORM_HS_CKSUM
    3449                    *
    3450                    *       THIS IS CALLED TO FORM THE CHECKSUM FOR THE SCORE
    3451                    *       NUMBER IN A0. (RAM POINTER ASSUMED IN A9).
    3452                    *       CHECKSUM IS RETURNED IN A1.      THIS IS A *BYTE*.
    3453                    *
    3454                    *       CHECKSUM IS COMPUTED AS THE COMPLEMENT OF THE SIMPLE SUM
    3455                    *       OF THE BYTES IN THE ENTRY.
    3456                    *
    3457                    *       THIS ROUTINE RETURNS WITH THE Z BIT SET (.EQ.) IF THE
    3458                    *       CHECKSUM FOR THIS ENTRY MATCHES.
    3459                    *
    3460                    **************************************************************************
    3461 00011ed0           FORM_HS_CKSUM:
    3462 00011ed0     098f          MMTM    SP,A0,A4,A6,A7
         00011ee0     8b00  
    3463 00011ef0     0d3f          CALLR   PT_ENTRY                ;A7 = POINTER TO CURRENT ENTRY
         00011f00     0025  
    3464 00011f10     098f          MMTM    SP,A7                   ;SAVE POINTER TO ENTRY
         00011f20     0100  
    3465 00011f30     09c4          MOVI    HS_BYTES_TO_CHECK,A4    ;COUNT DOWN THE BYTES
         00011f40     0009  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   83

    3466 00011f50     5621          CLR     A1                      ;KEEP SUM IN A1
    3467 00011f60           ADD_A_BYTE:
    3468 00011f60     0d3f          CALLR   RC_BYTEI                ;GET A BYTE INTO A0
         00011f70     011a  
    3469 00011f80     4001          ADD     A0,A1                   ;ADD TO SUM
    3470 00011f90     3c84          DSJ     A4,ADD_A_BYTE           ;ONE MORE ADDED
    3471 00011fa0     03e1          NOT     A1                      ;CHECKSUM IS NOW IN LOW BYTE
    3472 00011fb0     0b81          ANDI    BYTE_MASK,A1            ;MASK SO ITS COOL
         00011fc0 ffffff00  
    3473 00011fe0     09af          MMFM    SP,A7                   ;GET POINTER BACK
         00011ff0     0080  
    3474 00012000     0b07          ADDI    HS_CKBYTE,A7            ;POINT AT CHECKBYTE
         00012010     0090  
    3475 00012020     0d3f          CALLR   RC_BYTE                 ;READ IN THE BYTE
         00012030     0105  
    3476 00012040     4801          CMP     A0,A1                   ;COMPARE WHAT'S THERE TO WHAT WE GOT
    3477 00012050     09af          MMFM    SP,A0,A4,A6,A7          ;Z BIT RETURNS COMPARE
         00012060     00d1  
    3478 00012070     0960          RETS                            ;A1 RETURNS CKSUM
    3479                    
    3480                    **************************************************************************
    3481                    *
    3482                    *       FORM_HS_CKSUM_AND_STORE
    3483                    *
    3484                    *       THIS IS USED TO SET THE CHECKSUM FOR THE CURRENT
    3485                    *       ENTRY (A0) TO THE CORRECT VALUE.
    3486                    *
    3487                    **************************************************************************
    3488 00012080           FORM_HS_CKSUM_AND_STORE:
    3489 00012080     098f          MMTM    SP,A0,A7
         00012090     8100  
    3490 000120a0     0d3f          CALLR   FORM_HS_CKSUM           ;GET THE CKSUM IN A1, POINTER IN A7
         000120b0     ffe1  
    3491 000120c0     0d3f          CALLR   PT_ENTRY                ;POINT AT THE VALUE
         000120d0     0008  
    3492 000120e0     0b07          ADDI    HS_CKBYTE,A7            ;POINT AT CHECKBYTE
         000120f0     0090  
    3493 00012100     4c20          MOVE    A1,A0                   ;GET CHECKBYTE TO A0
    3494 00012110     0d3f          CALLR   WC_BYTE                 ;WRITE OUT THE BYTE
         00012120     00fa  
    3495 00012130     09af          MMFM    SP,A0,A7
         00012140     0081  
    3496 00012150     0960          RETS
    3497                    
    3498                    **************************************************************************
    3499                    *
    3500                    *       PT_ENTRY
    3501                    *
    3502                    *       THIS IS CALLED TO POINT AT A GIVEN ENTRY OF
    3503                    *       THE HIGH SCORE TABLE.  THIS ROUTINE BASES
    3504                    *       ACTIVITY ON ROM POINTER IN A8.  IT FETCHES
    3505                    *       FRESH COPIES OF THE A9 RAM POINTER AND THE
    3506                    *       A10 ENTRY COUNTER.  IT RETURNS THE ENTRY
    3507                    *       POINTER IN A7.
    3508                    *
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   84

    3509                    *       A0 SPECIFIES WHICH ENTRY TO POINT AT
    3510                    *       A8,A9,A10 AND SYSCTRL ASSUMED SET PROPERLY
    3511                    *       A7 RETURNED POINTING TO THAT ENTRY
    3512                    *
    3513                    **************************************************************************
    3514 00012160           PT_ENTRY:
    3515 00012160     4940          CMP     A10,A0                  ;A10 IS MAX VALUE
    3516 00012170     c202          JRLS    POINTER_IN_RANGE
    3517                    
    3518                            .IF DEBUG
    3519                            LOCKUP
    3520                            .ENDIF
    3521                    
    3522 00012180     4d27          MOVE    A9,A7                   ;RETURN ZERO OFFSET IN FIELD
    3523 00012190     0960          RETS
    3524                    
    3525 000121a0           POINTER_IN_RANGE:
    3526 000121a0     09c7          MOVI    HS_SIZE,A7              ;SIZE OF ENTRY
         000121b0     00a0  
    3527 000121c0     5e07          MPYU    A0,A7                   ;OFFSET OF ENTRY
    3528 000121d0     4127          ADD     A9,A7                   ;ADD IN THE BASE
    3529 000121e0     0960          RETS
    3530                    
    3531                    **************************************************************************
    3532                    *
    3533                    *       ROM_PTRS
    3534                    *
    3535                    *       THIS IS CALLED TO LOAD UP THE ROM STRUCTURE
    3536                    *       DATA INTO REGISTERS.
    3537                    *
    3538                    *       THIS ALSO SETS UP STATUS WORD TO SELECT THE CMOS
    3539                    *       BANK SELECT FOR WHERE THE PARTICULAR TABLE RESIDES.
    3540                    *
    3541                    *       INPUT A8=HSTD STRUCTURE ROM POINTER.
    3542                    *
    3543                    *       OUTPUT A9 = CMOS RAM POINTER TO BASE OF TABLE
    3544                    *       OUTPUT A10= LAST ENTRY IN TABLE. TABLE WILL
    3545                    *                       HAVE A10+1 ENTRIES SINCE ENTRY
    3546                    *                       0 IS A FILLER.
    3547                    *
    3548                    **************************************************************************
    3549 000121f0           ROM_PTRS:
    3550 000121f0     098f          MMTM    SP,A0,A1                ;SCRATCH REGGIES
         00012200     c000  
    3551 00012210     b709          MOVE    *A8(TB_POINTER),A9,L    ;GET CMOS POINTER
         00012220     0000  
    3552 00012230     b50a          MOVE    *A8(TB_COUNT),A10,W     ;GET NUMBER OF ENTRIES
         00012240     0020  
    3553 00012250     b501          MOVE    *A8(TB_PAGE_BITS),A1    ;GET OUR CMOS PAGE BITS
         00012260     0040  
    3554                    
    3555 00012270     0d3f          CALLR   SET_PAGE
         00012280     0003  
    3556                    
    3557 00012290     09af          MMFM    SP,A0,A1                ;SCRATCH REGGIES
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   85

         000122a0     0003  
    3558 000122b0     0960          RETS
    3559                    
    3560                    **************************************************************************
    3561                    *
    3562                    *       SET_PAGE
    3563                    *
    3564                    *       This is called to set the CMOS page to the bits
    3565                    *       contained in A1.
    3566                    *
    3567                    **************************************************************************
    3568 000122c0           SET_PAGE
    3569                    ;       MMTM    SP,A0,A1
    3570                    ;       ANDI    CMOS_PAGE_SELECT_BITS,A1        ;KILL SIGN EXTEND..SAVE BITS
    3571                    ;       PUSHST                                  ;SAVE INTERRUPT STATUS
    3572                    ;       DINT                                    ;STOP INTERRUPTS
    3573                    ;       MOVE    @SYSCOPY,A0,W                   ;GET THE RAM COPY
    3574                    ;       ANDNI   CMOS_PAGE_SELECT_BITS,A0        ;REMOVE THE CURRENT PAGE SELECT
    3575                    ;       OR      A1,A0                           ;ADD IN OUR BITS
    3576                    ;       MOVE    A0,@SYSCOPY,W                   ;PUT THEM BACK IN THE RAM COPY
    3577                    ;;      MOVE    A0,@SYSCTRL,W                   ;NOW THE HARDWARE
    3578                    ;       POPST                                   ;OK TO RE-START INTS
    3579                    ;       MMFM    SP,A0,A1
    3580 000122c0     0960          RETS
    3581                    
    3582                    **************************************************************************
    3583                    *
    3584                    *       INIT_TAB
    3585                    *
    3586                    *       This entrypoint is called at power up to
    3587                    *       clear out "today's" high score table. We do
    3588                    *       this job, and then we do the job on the
    3589                    *       all time table for high score reset if
    3590                    *       necessary.
    3591                    *
    3592                    **************************************************************************
    3593 000122d0           INIT_TAB
    3594 000122d0     0960          RETS
    3595                    
    3596                    *************************************************************************
    3597                    *
    3598                    *       INIT_HSTRING
    3599                    *
    3600                    *       Initializes the special name of the top scorer on the table.
    3601                    
    3602 000122e0            SUBR   INIT_HSTRING
    3603 000122e0     09c0          MOVI    AUD_WINSTREAK,A0
         000122f0     0057  
    3604 00012300     0d5f          CALLA   KILL_AUD
         00012310 00000000! 
    3605 00012330     09c0          MOVI    AUD_PINSPEED,A0
         00012340     0058  
    3606 00012350     0d5f          CALLA   KILL_AUD
         00012360 00000000! 
    3607 00012380     09c0          MOVI    AUD_BEATEN,A0
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   86

         00012390     0059  
    3608 000123a0     0d5f          CALLA   KILL_AUD
         000123b0 00000000! 
    3609 000123d0     09c0          MOVI    AUD_TAG,A0
         000123e0     0062  
    3610 000123f0     0d5f          CALLA   KILL_AUD
         00012400 00000000! 
    3611 00012420     0960          rets
    3612                    
    3613                    
    3614                    *************************************************************************
    3615                    *
    3616                    *       INIT_TB
    3617                    *
    3618                    *       THIS IS CALLED TO SETUP A HIGH SCORE TABLE WITH
    3619                    *       FACTORY ENTRIES.
    3620                    *
    3621                    *       A8 = ROM TABLE POINTER
    3622                    *
    3623                    **************************************************************************
    3624 00012430            SUBR   INIT_TB
    3625                    
    3626 00012430     098f          MMTM    SP,A5,A6,A7,A0
         00012440     8700  
    3627 00012450     0d3f          CALLR   ROM_PTRS                ;STUFF TABLE DATA
         00012460     ffd8  
    3628 00012470     b706          MOVE    *A8(TB_FACTORY),A6,L    ;GET THE FACTORY TABLE
         00012480     0050  
    3629 00012490     4d45          MOVE    A10,A5                  ;NUMBER OF VALID ENTRIES
    3630 000124a0     1025          INC     A5                      ;1 MORE TO HOLD ZERO ENTRY
    3631 000124b0     09c1          MOVI    HS_SIZE_IN_BYTES,A1     ;SIZE OF 1 ENTRY
         000124c0     000a  
    3632 000124d0     5e25          MPYU    A1,A5                   ;A7 HAS NUMBER OF WORDS TO MOVE
    3633 000124e0     4d27          MOVE    A9,A7                   ;CMOS POINTER IN A7
    3634                    
    3635 000124f0           INIT_TB_1
    3636 000124f0     8ec0          MOVB    *A6,A0                  ;GET A BYTE FROM ROM
    3637 00012500     0b06          ADDI    BYTE_SIZE,A6            ;KICK ROM POINTER
         00012510     0008  
    3638 00012520     0d3f          CALLR   WC_BYTEI                ;WRITE THE BYTE AND INCREMENT
         00012530     00f4  
    3639 00012540     3cc5          DSJS    A5,INIT_TB_1            ;UNTIL THEY'RE ALL THERE.
    3640                    
    3641 00012550     4d40          MOVE    A10,A0                  ;POINT AT LAST ENTRY
    3642 00012560           INIT_TB_2
    3643 00012560     0d3f          CALLR   FORM_HS_CKSUM_AND_STORE ;SET ITS CHECKSUM
         00012570     ffb0  
    3644 00012580     1420          DEC     A0                      ;MOVE DOWN
    3645 00012590     cffc          JRNN    INIT_TB_2               ;SET EACH ONE INCLUDING ZERO
    3646 000125a0     09af          MMFM    SP,A5,A6,A7,A0
         000125b0     00e1  
    3647                    
    3648 000125c0     0960          RETS
    3649                    
    3650                    *************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   87

    3651                    *
    3652                    *       COPY_ENTRY
    3653                    *
    3654                    *       THIS IS CALLED TO COPY 1 ENTRY OF THE TABLE TO A
    3655                    *       DIFFERENT LOCATION IN THE TABLE.
    3656                    *
    3657                    *       A8,A9,A10,SYSCTRL ASSUMED TO BE SETUP ALREADY
    3658                    *       A2 = SOURCE ENTRY (NUMBER)
    3659                    *       A3 = DESTINATION ENTRY (NUMBER)
    3660                    *
    3661                    **************************************************************************
    3662 000125d0           COPY_ENTRY:
    3663 000125d0     098f          MMTM    SP,A0,A4,A5,A6,A7
         000125e0     8f00  
    3664 000125f0     09c4          MOVI    HS_SIZE_IN_BYTES,A4     ;ENTRY SIZE IN BYTES
         00012600     000a  
    3665 00012610     4c40          MOVE    A2,A0                   ;FIRST POINT FOR A0
    3666 00012620     0d3f          CALLR   PT_ENTRY        
         00012630     ffb2  
    3667 00012640     4ce6          MOVE    A7,A6                   ;A6 = SOURCE POINTER
    3668 00012650     4c60          MOVE    A3,A0
    3669 00012660     0d3f          CALLR   PT_ENTRY                ;A5 = DESTINATION
         00012670     ffae  
    3670 00012680     4ce5          MOVE    A7,A5
    3671 00012690           COPY_LOOP:
    3672                    *
    3673                    *        IN THIS LOOP WE MOVE A BYTE AT A TIME.
    3674                    *        SINCE THE WORD AND LONG DO THE SHIFTING AND
    3675                    *        MASKING AND CALL MULTIPLE ROUTINES, THIS IS
    3676                    *        THE MOST EFFICIENT MODE OF OPERATION.
    3677                    *
    3678 00012690     4cc7          MOVE    A6,A7                   ;SOURCE IN CMOS REGGIE
    3679 000126a0     0d3f          CALLR   RC_BYTEI                ;FETCH A WORD
         000126b0     00a6  
    3680 000126c0     4ce6          MOVE    A7,A6
    3681 000126d0     4ca7          MOVE    A5,A7                   ;DESTINATION
    3682 000126e0     0d3f          CALLR   WC_BYTEI                ;WRITE IT
         000126f0     00d8  
    3683 00012700     4ce5          MOVE    A7,A5                   ;BACK TO DEST REGGIE
    3684 00012710     3d24          DSJ     A4,COPY_LOOP            ;UNTIL ALL WORDS ARE COPIED
    3685 00012720     09af          MMFM    SP,A0,A4,A5,A6,A7
         00012730     00f1  
    3686 00012740     0960          RETS
    3687                    
    3688                    **************************************************************************
    3689                    *
    3690                    *       VAL_TAB
    3691                    *
    3692                    *       THIS ROUTINE IS CALLED WHEN WE ARE INTERESTED IN
    3693                    *       THE HSTD TABLE DATA. A8 CONTAINS THE ROM POINTER
    3694                    *       FOR THE TABLE. FOR ANY ENTRIES THAT WE THROW
    3695                    *       OUT, WE MOVE THE REST OF THE TABLE UP, AND CREATE
    3696                    *       A NEW ENTRY AT THE END OF THE TABLE.
    3697                    *
    3698                    *       A2 = 0 ON OUTSIDE CALL.
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   88

    3699                    *       A2 = 1 ON RECURSIVE CALL (THE CHECK AFTER RE-INIT)
    3700                    *
    3701                    *       THERE ARE 3 CHECKS MADE FOR EACH ENTRY:
    3702                    *
    3703                    *       1)      IS CHECKSUM CORRECT.
    3704                    *       2)      IS SCORE ALL NUMERIC
    3705                    *       3)      ARE INITIALS ALL VALID ENTRIES.
    3706                    *
    3707                    *        OUTPUT CC = TABLE OK
    3708                    *               CS = PROBLEM THAT CAN'T BE RECTIFIED
    3709                    *                       (PROBABLY BAD RAM)
    3710                    *
    3711                    *               A2 = 0 ...table ok, or cleaned up
    3712                    *               A2 otherwise meanes table initialized
    3713                    *
    3714                    **************************************************************************
    3715 00012750           VAL_TAB
    3716 00012750     5642          CLR     A2              ;indicate first call in
    3717 00012760     0d3f          CALLR   DO_VALIDATE     ;validate
         00012770     0001  
    3718 00012780     0960          RETS
    3719                    
    3720 00012790           DO_VALIDATE
    3721 00012790     098f          MMTM    SP,A0,A1,A3,A4,A5,A6,A7
         000127a0     df00  
    3722 000127b0     0d3f          CALLR   ROM_PTRS                ;SETUP FOR TABLE
         000127c0     ffa2  
    3723 000127d0     09c0          MOVI    1,A0                    ;ITERATE THROUGH THE ENTRIES
         000127e0     0001  
    3724 000127f0     5621          CLR     A1                      ;COUNT ERRORS
    3725                    
    3726 00012800           CHECK_A0_ENTRY:
    3727 00012800     0d3f          CALLR   CHECK_ENTRY             ;IS THE ENTRY OK?
         00012810     001f  
    3728 00012820     c913          JRNC    VT_1                    ;YEP.
    3729                    
    3730 00012830     0d3f          CALLR   REMOVE_ENTRY            ;REMOVE THIS ENTRY
         00012840     0062  
    3731 00012850     1021          INC     A1
    3732 00012860     b503          MOVE    *A8(TB_ERROR_COUNT),A3  ;GET THRESHOLD
         00012870     0070  
    3733 00012880     4861          CMP     A3,A1                   ;ARE WE THERE?
    3734 00012890     c8f6          JRLO    CHECK_A0_ENTRY          ;NOPE...CHECK MOVE UP ENTRY AT A0
    3735                    *
    3736                    *       TABLE IS MESSED UP....RE-INITIALIZE IT PLEASE
    3737                    *
    3738 000128a0     4c42          MOVE    A2,A2                   ;IS THIS RECURSIVE CHECK AFTER INIT?
    3739 000128b0     cb11          JRNZ    CANT_VALIDATE           ;THEN RETURN FAILURE
    3740                    
    3741 000128c0     0d3f          CALLR   INIT_TB                 ;INIT THIS TABLE PLEASE
         000128d0     ffb5  
    3742 000128e0     0d3f          CALLR   INIT_HSTRING
         000128f0     ff9e  
    3743 00012900     1822          MOVK    1,A2                    ;INDICATE RECURSIVE CALL
    3744 00012910     0d3f          CALLR   DO_VALIDATE             ;IS IT ALRIGHT NOW?
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   89

         00012920     ffe6  
    3745 00012930     09af          MMFM    SP,A0,A1,A3,A4,A5,A6,A7
         00012940     00fb  
    3746 00012950     0960          RETS
    3747                    *
    3748                    *        LAST ENTRY WAS VALID...MOVE TO NEXT
    3749                    *
    3750 00012960           VT_1:   
    3751 00012960     1020          INC     A0                      ;KICK IT
    3752 00012970     4940          CMP     A10,A0                  ;STILL IN TABLE?
    3753 00012980     c2e7          JRLS    CHECK_A0_ENTRY          ;YEP....CHECK THIS ENTRY
    3754                    
    3755 00012990     0320          CLRC                            ;RETURN VALID!
    3756 000129a0     09af          MMFM    SP,A0,A1,A3,A4,A5,A6,A7
         000129b0     00fb  
    3757 000129c0     0960          RETS
    3758                    
    3759 000129d0           CANT_VALIDATE:
    3760 000129d0     0de0          SETC                            ;RETURN FAILURE!
    3761 000129e0     09af          MMFM    SP,A0,A1,A3,A4,A5,A6,A7
         000129f0     00fb  
    3762 00012a00     0960          RETS
    3763                    
    3764                    **************************************************************************
    3765                    *
    3766                    *       CHECK_ENTRY
    3767                    *
    3768                    *       THIS IS CALLED TO CHECK THE ENTRY INDICATED BY A0.
    3769                    *
    3770                    *       CC = OK
    3771                    *       CS = ENTRY BAD
    3772                    *
    3773                    **************************************************************************
    3774 00012a10           CHECK_ENTRY
    3775 00012a10     098f          MMTM    SP,A0,A1,A2,A3,A7
         00012a20     f100  
    3776 00012a30     0d3f          CALLR   FORM_HS_CKSUM           ;CHECK OUT CKSUM FIRST
         00012a40     ff48  
    3777 00012a50     cb21          JRNZ    CHECK_FAIL              ;BAD CHECKSUM....ITS BAD
    3778                    *
    3779                    *       CHECKSUM OK...CHECK SCORE
    3780                    *
    3781 00012a60     0d3f          CALLR   GET_HSCR                ;SCORE IN A1
         00012a70     ff2d  
    3782 00012a80     4c23          MOVE    A1,A3                   ;SAVE COPY OF SCORE
    3783                    
    3784 00012a90           CHECK_DIGIT:
    3785 00012a90     4c22          MOVE    A1,A2                   ;COPY FOR NEXT NIBBLE
    3786 00012aa0     0b82          ANDI    0FH,A2                  ;MASK THE NIBBLE
         00012ab0 fffffff0  
    3787 00012ad0     0b42          CMPI    9,A2
         00012ae0     fff6  
    3788 00012af0     c317          JRHI    CHECK_FAIL              ;NIBBLE TOO HIGH
    3789 00012b00     2f81          SRL     4,A1                    ;SHIFT DOWN TO NEXT NIBBLE
    3790 00012b10     cbf7          JRNZ    CHECK_DIGIT
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   90

    3791                    
    3792 00012b20     1420          DEC     A0                      ;MAKE SURE WE ARE LOWER THAN PREVIOUS SCORE!
    3793 00012b30     ca02          JREQ    FIRST_ENT               ;WE'RE THE 1ST IN THE TABLE
    3794                    
    3795 00012b40     0d3f          CALLR   GET_HSCR                ;GET THE SCORE FOR THE GUY BEFORE US
         00012b50     ff1f  
    3796                    ;       CMP     A1,A3                   ;OURS MUST BE LOWER OR SAME
    3797                    ;       JRHI    CHECK_FAIL              ;OURS IS BIGGER....REMOVE US
    3798                    
    3799 00012b60           FIRST_ENT:
    3800 00012b60     1020          INC     A0                      ;RESTORE THE ENTRY NUMBER
    3801                    *
    3802                    *       SCORE OK...CHECK INITIALS
    3803                    *
    3804 00012b70     0d3f          CALLR   PT_ENTRY                ;POINT A7 AT ENTRY
         00012b80     ff5d  
    3805 00012b90     0b07          ADDI    HS_INITS,A7             ;POINT AT FIRST INITIAL
         00012ba0     0040  
    3806 00012bb0     09c2          MOVI    NUM_INITS,A2            ;THIS IS NUMBER OF INITIALS
         00012bc0     0005  
    3807                    
    3808 00012bd0           NEXT_LETTER:
    3809 00012bd0     0d3f          CALLR   RC_BYTEI                ;FETCH A BYTE
         00012be0     0053  
    3810                    
    3811 00012bf0     0d3f          CALLR   VERIFY_LETTER           ;SEE IF ITS VALID.
         00012c00     000a  
    3812 00012c10     c805          JRC     CHECK_FAIL              ;NOT A LETTER...BYTE
    3813                    
    3814 00012c20     3cc2          DSJ     A2,NEXT_LETTER
    3815                    
    3816 00012c30     0320          CLRC                            ;RETURN PASS
    3817 00012c40     09af          MMFM    SP,A0,A1,A2,A3,A7
         00012c50     008f  
    3818 00012c60     0960          RETS
    3819                    
    3820 00012c70           CHECK_FAIL:
    3821 00012c70     0de0          SETC
    3822 00012c80     09af          MMFM    SP,A0,A1,A2,A3,A7
         00012c90     008f  
    3823 00012ca0     0960          RETS
    3824                    
    3825                    
    3826                    **************************************************************************
    3827                    *
    3828                    *       VERIFY_LETTER
    3829                    *
    3830                    *       THIS IS CALLED FOR EACH INITIAL LETTER TO SEE
    3831                    *       IF ITS VALID.
    3832                    *
    3833                    *       CC = VALID
    3834                    *       CS = NOT VALID
    3835                    *
    3836                    **************************************************************************
    3837                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   91

    3838 00012cb0           VERIFY_LETTER:
    3839 00012cb0     0b80          ANDI    BYTE_MASK,A0            ;KEEP JUST THE BYTE
         00012cc0 ffffff00  
    3840                    
    3841 00012ce0     0b40          CMPI    '.',A0                  ;SPACE?
         00012cf0     ffd1  
    3842 00012d00     ca12          JREQ    VERIFY_PASS             ;ITS OK.
    3843                    
    3844 00012d10     0b40          CMPI    '!',A0                  ;SPACE?
         00012d20     ffde  
    3845 00012d30     ca0f          JREQ    VERIFY_PASS             ;ITS OK.
    3846                    
    3847 00012d40     0b40          CMPI    '%',A0                  ;SPACE?
         00012d50     ffda  
    3848 00012d60     ca0c          JREQ    VERIFY_PASS             ;ITS OK.
    3849                    
    3850 00012d70     0b40          CMPI    '?',A0                  ;SPACE?
         00012d80     ffc0  
    3851 00012d90     ca09          JREQ    VERIFY_PASS             ;ITS OK.
    3852                    
    3853 00012da0     0b40          CMPI    SPACE,A0                ;SPACE?
         00012db0     ffdf  
    3854 00012dc0     ca06          JREQ    VERIFY_PASS             ;ITS OK.
    3855                    
    3856 00012dd0     0b40          CMPI    LET_A,A0                ;BETWEEN A-Z?
         00012de0     ffbe  
    3857 00012df0     c805          JRLO    VERIFY_FAIL
    3858                    
    3859 00012e00     0b40          CMPI    LET_Z,A0
         00012e10     ffa5  
    3860 00012e20     c302          JRHI    VERIFY_FAIL
    3861                    
    3862 00012e30           VERIFY_PASS:
    3863 00012e30     0320          CLRC
    3864 00012e40     0960          RETS
    3865                    
    3866 00012e50           VERIFY_FAIL:
    3867 00012e50     0de0          SETC
    3868 00012e60     0960          RETS
    3869                    
    3870                    **************************************************************************
    3871                    *
    3872                    *       REMOVE_ENTRY
    3873                    *
    3874                    *       THIS IS CALLED TO REMOVE A BAD ENTRY FROM THE TABLE.
    3875                    *       IT DELETES THE ENTRY INDICATED BY A0.
    3876                    *
    3877                    *       IT BUBBLES THE REST OF THE TABLE UP 1 UNIT.
    3878                    *
    3879                    *       IT THEN PUTS THE LOWEST SCORE FROM THE ROM TABLE
    3880                    *       WITH INITIALS IN THAT ENTRY.
    3881                    *
    3882                    **************************************************************************
    3883 00012e70           REMOVE_ENTRY:
    3884 00012e70     098f          MMTM    SP,A0,A1,A2,A6,A7
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   92

         00012e80     e300  
    3885 00012e90     4c03          MOVE    A0,A3                   ;THIS IS DEST
    3886 00012ea0     4c62          MOVE    A3,A2                   ;SOURCE IS 1 BELOW
    3887                    
    3888 00012eb0           BUBBLE_ANOTHER:
    3889 00012eb0     1022          INC     A2                      ;NOW WE'RE SET FOR A COPY...
    3890                    
    3891 00012ec0     4942          CMP     A10,A2                  ;IS SOURCE OUT OF RANGE?
    3892 00012ed0     c304          JRHI    BUBBLE_DONE             ;YEP....WE'RE AT THE BOTTOM (A3)
    3893                    
    3894 00012ee0     0d3f          CALLR   COPY_ENTRY
         00012ef0     ff6d  
    3895 00012f00     1023          INC     A3
    3896 00012f10     c0f9          JRUC    BUBBLE_ANOTHER
    3897                    
    3898 00012f20           BUBBLE_DONE:
    3899 00012f20     4c60          MOVE    A3,A0                   ;THIS IS BOTTOM OF TABLE
    3900 00012f30     0d3f          CALLR   PT_ENTRY                ;A7 POINTS AT CMOS BLOCK
         00012f40     ff21  
    3901                    
    3902 00012f50     b706          MOVE    *A8(TB_FACTORY),A6,L    ;GET FACTORY TABLE
         00012f60     0050  
    3903 00012f70     09c1          MOVI    HS_ROM_SIZE,A1          ;SIZE OF ENTRY
         00012f80     0050  
    3904 00012f90     5f41          MPYU    A10,A1                  ;TIMES NUMBER OF VALID ENTRIES..POINTS AT LAST.
    3905 00012fa0     4026          ADD     A1,A6                   ;NOW WE POINT AT END OF ROM TABLE
    3906 00012fb0     09c2          MOVI    HS_SIZE_IN_BYTES,A2     ;SIZE OF ENTRY
         00012fc0     000a  
    3907                    
    3908 00012fd0           REPLACE_LOOP:
    3909 00012fd0     8ec0          MOVB    *A6,A0                  ;MOVE A ROM BYTE TO A0
    3910 00012fe0     0b06          ADDI    BYTE_SIZE,A6
         00012ff0     0008  
    3911 00013000     0d3f          CALLR   WC_BYTEI                ;WRITE THE WORD AND INCREMENT
         00013010     0046  
    3912 00013020     3cc2          DSJ     A2,REPLACE_LOOP         ;UNTIL THEY'RE ALL THERE.
    3913                    
    3914 00013030     4d40          MOVE    A10,A0                  ;POINT AT "LAST" ENTRY
    3915 00013040     0d3f          CALLR   FORM_HS_CKSUM_AND_STORE ;STORE THE CHECKBYTE
         00013050     ff02  
    3916 00013060     09af          MMFM    SP,A0,A1,A2,A6,A7       ;AND RETURN
         00013070     00c7  
    3917 00013080     0960          RETS
    3918                    
    3919                    **************************************************************************
    3920                    *
    3921                    *       CMOS UTILITIES
    3922                    *
    3923                    **************************************************************************
    3924                    
    3925                    **************************************************************************
    3926                    *
    3927                    *       FOR ALL OF THESE CMOS ROUTINES.
    3928                    *
    3929                    *               A7 = POINTER TO MEMORY
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   93

    3930                    *               A0 = DATA TO/FROM MEMORY
    3931                    *
    3932                    **************************************************************************
    3933                    *
    3934                    *       **** IMPORTANT NOTE ON WORD AND LONG WORD PACKING ****
    3935                    *
    3936                    *       NOTE THAT REQUESTS FOR WORDS RETURN THE 2 BYTES PACKED
    3937                    *       INTO A WORD AS <1ST BYTE><2ND BYTE>.    THIS IS NOT
    3938                    *       THE SAME WAY THAT THE GSP HANDLES A WORD POINTED AT
    3939                    *       WITH A POINTER.
    3940                    *
    3941                    *       LONG WORDS WORK SIMILARLY:
    3942                    *
    3943                    *       MSB                                     LSB
    3944                    *       <1ST BYTE> <2ND BYTE> <3RD BYTE> <4TH BYTE>
    3945                    *
    3946                    *       TOUGH LUCK INTEL HACKERS!
    3947                    *
    3948                    *
    3949                    *       RC_BYTE
    3950                    *       WC_BYTE
    3951                    *
    3952                    *       These 2 routines are the only routines that ever touch
    3953                    *       CMOS ram. This is done to localize the effect of
    3954                    *       changes in the architecture. All efforts to deal with
    3955                    *       CMOS should come through these routines. Locking
    3956                    *       hardware will be easily added in the future (as well
    3957                    *       as different memory mapping).
    3958                    
    3959                    
    3960                    
    3961 00013090           RC_BYTE
    3962                    ;       move    @SYSCOPY,a0
    3963                    ;       sll     32-2,a0
    3964                    ;       srl     32-2,a0
    3965                    ;       sll     15,a0           ;Page offset
    3966                    ;       add     a7,a0
    3967 00013090     8ee0          movb    *a7,a0
    3968 000130a0     2700          sll     32-8,a0
    3969 000130b0     2d00          srl     32-8,a0
    3970 000130c0     0960          rets
    3971                    
    3972 000130d0           WC_BYTE
    3973                    ;       MOVE    A1,-*SP,L
    3974                    ;       move    @SYSCOPY,a1
    3975                    ;       sll     32-2,a1
    3976                    ;       srl     32-2,a1
    3977                    ;       sll     15,a1           ;Page offset
    3978                    ;       add     a7,a1
    3979                    ;       move    a7,a1
    3980 000130d0     0580          move    a0,@CMOSWE
         000130e0 014ffff0  
    3981 00013100     8c07          movb    a0,*a7
    3982                    ;       MMFM    SP,A1
    3983 00013110     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   94

    3984                    
    3985                    
    3986                    **************************************************************************
    3987                    *
    3988                    *       RC_BYTEI
    3989                    *
    3990                    *       READ BYTE POINTED TO BY A7...INCREMENT POINTER TO
    3991                    *       "NEXT" BYTE.
    3992                    *
    3993                    **************************************************************************
    3994 00013120           RC_BYTEI:
    3995 00013120     0d3f          CALLR   RC_BYTE
         00013130     fff5  
    3996 00013140     0b07          ADDI    C_BYTE_SIZE,A7  ;WORDS SEPARATE CMOS BYTES.
         00013150     0010  
    3997 00013160     4c00          MOVE    A0,A0           ;RETURN FLAGS ACCORDINGLY
    3998 00013170     0960          RETS
    3999                    
    4000 00013180           RC_WORD:
    4001 00013180     098f          MMTM    SP,A1,A7        ;USE A1 TO COMBINE BYTES
         00013190     4100  
    4002 000131a0     0d3f          CALLR   RC_BYTEI        ;GET A BYTE
         000131b0     fff6  
    4003 000131c0     4c01          MOVE    A0,A1           ;SAVE IN A1
    4004 000131d0     0b81          ANDI    BYTE_MASK,A1    ;MASK ONLY BYTE
         000131e0 ffffff00  
    4005 00013200     2501          SLL     8,A1            ;SHIFT TO HIGH BYTE
    4006 00013210     0d3f          CALLR   RC_BYTE         ;GET THE 2ND BYTE
         00013220     ffe6  
    4007 00013230     0b80          ANDI    BYTE_MASK,A0
         00013240 ffffff00  
    4008 00013260     5420          OR      A1,A0           ;A0 HAS THE WORD
    4009 00013270     09af          MMFM    SP,A1,A7        
         00013280     0082  
    4010 00013290     0960          RETS
    4011                    
    4012 000132a0           RC_WORDI:
    4013 000132a0     0d3f          CALLR   RC_WORD
         000132b0     ffec  
    4014 000132c0     0b07          ADDI    C_WORD_SIZE,A7  ;LONG SEPARATE CMOS WORDS.
         000132d0     0020  
    4015 000132e0     4c00          MOVE    A0,A0           ;RETURN FLAGS ACCORDINGLY
    4016 000132f0     0960          RETS
    4017                    
    4018 00013300           RC_LONG:
    4019 00013300     098f          MMTM    SP,A1,A7        ;USE A1 TO COMBINE BYTES
         00013310     4100  
    4020 00013320     0d3f          CALLR   RC_WORDI        ;GET A WORD
         00013330     fff6  
    4021 00013340     4c01          MOVE    A0,A1           ;SAVE IN A1
    4022 00013350     0b81          ANDI    WORD_MASK,A1    ;MASK ONLY WORD
         00013360 ffff0000  
    4023 00013380     2601          SLL     16,A1           ;SHIFT TO HIGH WORD
    4024 00013390     0d3f          CALLR   RC_WORD         ;GET THE 2ND WORD
         000133a0     ffdd  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   95

    4025 000133b0     0b80          ANDI    WORD_MASK,A0
         000133c0 ffff0000  
    4026 000133e0     5420          OR      A1,A0           ;A0 HAS THE LONG WORD
    4027 000133f0     09af          MMFM    SP,A1,A7        
         00013400     0082  
    4028 00013410     0960          RETS
    4029                    
    4030 00013420           RC_LONGI:
    4031 00013420     0d3f          CALLR   RC_LONG
         00013430     ffec  
    4032 00013440     0b07          ADDI    C_LONG_SIZE,A7  ;DOUBLE THE DISTANCE FOR BRAIN DAMIJ
         00013450     0040  
    4033 00013460     4c00          MOVE    A0,A0           ;RETURN FLAGS ACCORDINGLY
    4034 00013470     0960          RETS
    4035                    
    4036 00013480           WC_BYTEI:
    4037 00013480     0d3f          CALLR   WC_BYTE
         00013490     ffc3  
    4038 000134a0     0b07          ADDI    C_BYTE_SIZE,A7
         000134b0     0010  
    4039 000134c0     0960          RETS
    4040                    
    4041 000134d0           WC_WORD:
    4042 000134d0     098f          MMTM    SP,A0,A1,A7
         000134e0     c100  
    4043 000134f0     4c01          MOVE    A0,A1           ;MAKE COPY OF WORD
    4044 00013500     2f00          SRL     8,A0            ;GET HIGH BYTE IN A0
    4045 00013510     0d3f          CALLR   WC_BYTEI        ;WRITE THE HIGH BYTE
         00013520     fff5  
    4046 00013530     4c20          MOVE    A1,A0           ;NOW GET THE LOW BYTE BACK
    4047 00013540     0d3f          CALLR   WC_BYTE ;WRITE IT
         00013550     ffb7  
    4048 00013560     09af          MMFM    SP,A0,A1,A7     ;AND RESTORE ALL WE TOUCHED
         00013570     0083  
    4049 00013580     0960          RETS
    4050                    
    4051 00013590           WC_WORDI:
    4052 00013590     0d3f          CALLR   WC_WORD
         000135a0     fff2  
    4053 000135b0     0b07          ADDI    C_WORD_SIZE,A7
         000135c0     0020  
    4054 000135d0     0960          RETS
    4055                    
    4056 000135e0           WC_LONG:
    4057 000135e0     098f          MMTM    SP,A0,A1,A7
         000135f0     c100  
    4058 00013600     4c01          MOVE    A0,A1           ;MAKE COPY OF LONG
    4059 00013610     2e00          SRL     16,A0           ;GET HIGH WORD IN A0
    4060 00013620     0d3f          CALLR   WC_WORDI        ;WRITE THE HIGH WORD
         00013630     fff5  
    4061 00013640     4c20          MOVE    A1,A0           ;NOW GET THE LOW WORD BACK
    4062 00013650     0d3f          CALLR   WC_WORD ;WRITE IT
         00013660     ffe6  
    4063 00013670     09af          MMFM    SP,A0,A1,A7     ;AND RESTORE ALL WE TOUCHED
         00013680     0083  
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   96

    4064 00013690     0960          RETS
    4065                    
    4066 000136a0           WC_LONGI:
    4067 000136a0     0d3f          CALLR   WC_LONG
         000136b0     fff2  
    4068 000136c0     0b07          ADDI    C_LONG_SIZE,A7
         000136d0     0040  
    4069 000136e0     0960          RETS
    4070                    
    4071                    *****************************************************************************
    4072                    *****************************************************************************
    4073                    *****
    4074                    *****    DEFAULT ROM HSTD TABLES AND TABLE DEFINITIONS
    4075                    *****
    4076                    *****************************************************************************
    4077                    *****************************************************************************
    4078                    
    4079              0000  TB_POINTER       EQU     0                      ;LONG-POINTER TO BEGINNING OF TABLE
    4080              0020  TB_COUNT         EQU     TB_POINTER+LONG_SIZE   ;WORD....# IN THE TABLE.
    4081              0030  TB_VISIBLE       EQU     TB_COUNT+WORD_SIZE     ;WORD....NUMBER DISPLAYED
    4082              0040  TB_PAGE_BITS     EQU     TB_VISIBLE+WORD_SIZE   ;WORD....STATUS WORD FOR CMOS PAGE
    4083              0050  TB_FACTORY       EQU     TB_PAGE_BITS+WORD_SIZE ;LONG....ROM STARTUP TABLE
    4084              0070  TB_ERROR_COUNT   EQU     TB_FACTORY+LONG_SIZE   ;WORD....NUM ERRORS TO RE-INIT
    4085                    
    4086                    
    4087                    ;SCRM   .MACRO  a,b
    4088                    SCRM    .MACRO  a
    4089                            .byte   :a:/01000000H,:a:/010000H&0ffH,:a:/0100H&0ffH,:a:&0ffH
    4090                    ;       .byte   ":b:",0
    4091                            .ENDM
    4092                    
    4093 000136f0           STREAK_ROM_TABLE
    4094 000136f0                   SCRM    022122145H              ;****ZERO ENTRY...NOT SEEN!
    4095 00013710       45          .BYTE   "EPJA.",0
    4096              0050  ROM_ENTRY_SIZE  EQU     $-STREAK_ROM_TABLE
    4097 00013740                   SCRM    011H
    4098 00013760       4d          .BYTE   "MJTA.",0
    4099 00013790                   SCRM    010H
    4100 000137b0       53          .BYTE   "SALB.",0
    4101 000137e0                   SCRM    09H
    4102 00013800       4a          .BYTE   "JMSC.",0
    4103 00013830                   SCRM    09H
    4104 00013850       4a          .BYTE   "JYTD.",0
    4105 00013880                   SCRM    08H
    4106 000138a0       4d          .BYTE   "MJLE.",0
    4107 000138d0                   SCRM    08H
    4108 000138f0       4a          .BYTE   "JAKF.",0
    4109 00013920                   SCRM    07H
    4110 00013940       4f          .BYTE   "OEGA.",0
    4111 00013970                   SCRM    07H
    4112 00013990       53          .BYTE   "SL A.",0
    4113 000139c0                   SCRM    07H
    4114 000139e0       4d          .BYTE   "MDPA.",0
    4115                    
    4116 00013a10                   SCRM    06H
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   97

    4117 00013a30       47          .BYTE   "GBSA.",0
    4118 00013a60                   SCRM    06H
    4119 00013a80       44          .BYTE   "DJTA.",0
    4120 00013ab0                   SCRM    06H
    4121 00013ad0       45          .BYTE   "EPJA.",0
    4122 00013b00                   SCRM    05H
    4123 00013b20       42          .BYTE   "BIFA.",0
    4124 00013b50                   SCRM    05H
    4125 00013b70       55          .BYTE   "UNKA.",0
    4126 00013ba0                   SCRM    05H
    4127 00013bc0       55          .BYTE   "UTBA.",0
    4128 00013bf0                   SCRM    04H
    4129 00013c10       43          .BYTE   "CRLA.",0
    4130 00013c40                   SCRM    04H
    4131 00013c60       54          .BYTE   "TDGA.",0
    4132 00013c90                   SCRM    04H
    4133 00013cb0       41          .BYTE   "ASBA.",0
    4134              0013  STREAK_TABLE_ENTRIES    EQU     ($-STREAK_ROM_TABLE)/ROM_ENTRY_SIZE
    4135                    
    4136 00013ce0           PIN_SPEED_TAB_ROM_TABLE
    4137                    
    4138 00013ce0                   SCRM    07000H          ;****ZERO ENTRY...NOT SEEN!
    4139 00013d00       45          .BYTE   "EPJA.",0
    4140 00013d30                   SCRM    06000H 
    4141 00013d50       4d          .BYTE   "MJTI.",0
    4142 00013d80                   SCRM    06100H
    4143 00013da0       53          .BYTE   "SALI.",0
    4144 00013dd0                   SCRM    06200H
    4145 00013df0       4a          .BYTE   "JMSG.",0
    4146 00013e20                   SCRM    06300H
    4147 00013e40       4a          .BYTE   "JYTF.",0
    4148 00013e70                   SCRM    06400H
    4149 00013e90       4a          .BYTE   "JAKE.",0
    4150 00013ec0                   SCRM    06500H
    4151 00013ee0       4f          .BYTE   "OEGD.",0
    4152 00013f10                   SCRM    06600H
    4153 00013f30       4d          .BYTE   "MJLC.",0
    4154 00013f60                   SCRM    06700H
    4155 00013f80       55          .BYTE   "UTBB.",0
    4156 00013fb0                   SCRM    06800H 
    4157 00013fd0       41          .BYTE   "ASBA.",0
    4158                    
    4159              000a  PIN_SPEED_TAB_ENTRIES   EQU     ($-PIN_SPEED_TAB_ROM_TABLE)/ROM_ENTRY_SIZE
    4160                    
    4161 00014000           BEATEN_ROM_TABLE
    4162 00014000                   SCRM    022122145H              ;****ZERO ENTRY...NOT SEEN!
    4163 00014020       45          .BYTE   "EPJAB",0
    4164              0050  B_ROM_ENTRY_SIZE        EQU     $-BEATEN_ROM_TABLE
    4165 00014050                   SCRM    011101H
    4166 00014070       4d          .BYTE   "MIKE ",0
    4167 000140a0                   SCRM    01001H
    4168 000140c0       4a          .BYTE   "JAMIT",0
    4169 000140f0                   SCRM    0100H
    4170 00014110       54          .BYTE   "TEAL ",0
    4171 00014140                   SCRM    01000H
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   98

    4172 00014160       44          .BYTE   "DINK ",0
    4173 00014190                   SCRM    010000H
    4174 000141b0       4a          .BYTE   "JAKE ",0
    4175 000141e0                   SCRM    0100000H
    4176 00014200       44          .BYTE   "DRJ  ",0
    4177 00014230                   SCRM    01000000H
    4178 00014250       43          .BYTE   "CHICK",0
    4179 00014280                   SCRM    010000000H
    4180 000142a0       53          .BYTE   "SHAWN",0
    4181 000142d0                   SCRM    00000000H
    4182 000142f0       20          .BYTE   "     ",0
    4183 00014320                   SCRM    00000000H
    4184 00014340       20          .BYTE   "     ",0
    4185 00014370                   SCRM    00000000H
    4186 00014390       20          .BYTE   "     ",0
    4187 000143c0                   SCRM    00000000H
    4188 000143e0       20          .BYTE   "     ",0
    4189 00014410                   SCRM    00000000H
    4190 00014430       20          .BYTE   "     ",0
    4191 00014460                   SCRM    00000000H
    4192 00014480       20          .BYTE   "     ",0
    4193 000144b0                   SCRM    00000000H
    4194 000144d0       20          .BYTE   "     ",0
    4195 00014500                   SCRM    00000000H
    4196 00014520       20          .BYTE   "     ",0
    4197 00014550                   SCRM    00000000H
    4198 00014570       20          .BYTE   "     ",0
    4199 000145a0                   SCRM    00000000H
    4200 000145c0       20          .BYTE   "     ",0
    4201 000145f0                   SCRM    00000000H
    4202 00014610       20          .BYTE   "     ",0
    4203 00014640                   SCRM    00000000H
    4204 00014660       20          .BYTE   "     ",0
    4205 00014690                   SCRM    00000000H
    4206 000146b0       20          .BYTE   "     ",0
    4207 000146e0                   SCRM    00000000H
    4208 00014700       20          .BYTE   "     ",0
    4209 00014730                   SCRM    00000000H
    4210 00014750       20          .BYTE   "     ",0
    4211 00014780                   SCRM    00000000H
    4212 000147a0       20          .BYTE   "     ",0
    4213 000147d0                   SCRM    00000000H
    4214 000147f0       20          .BYTE   "     ",0
    4215 00014820                   SCRM    00000000H
    4216 00014840       20          .BYTE   "     ",0
    4217 00014870                   SCRM    00000000H
    4218 00014890       20          .BYTE   "     ",0
    4219 000148c0                   SCRM    00000000H
    4220 000148e0       20          .BYTE   "     ",0
    4221 00014910                   SCRM    00000000H
    4222 00014930       20          .BYTE   "     ",0
    4223 00014960                   SCRM    00000000H
    4224 00014980       20          .BYTE   "     ",0
    4225              001f  BEATEN_TAB_ENTRIES      EQU     ($-BEATEN_ROM_TABLE)/B_ROM_ENTRY_SIZE
    4226                    
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   99

    4227 000149b0           INTER_ROM_TABLE
    4228 000149b0                   SCRM    022122145H              ;****ZERO ENTRY...NOT SEEN!
    4229 000149d0       45          .BYTE   "EPJAB",0
    4230              0050  I_ROM_ENTRY_SIZE        EQU     $-INTER_ROM_TABLE
    4231 00014a00                   SCRM    0111H
    4232 00014a20       4d          .BYTE   "MARK ",0
    4233 00014a50                   SCRM    0101H
    4234 00014a70       53          .BYTE   "SAL  ",0
    4235 00014aa0                   SCRM    0100H
    4236 00014ac0       4a          .BYTE   "JASON",0
    4237 00014af0                   SCRM    01000H
    4238 00014b10       4c          .BYTE   "LICK ",0
    4239 00014b40                   SCRM    010000H
    4240 00014b60       4a          .BYTE   "JAKE ",0
    4241 00014b90                   SCRM    0100000H
    4242 00014bb0       44          .BYTE   "DIESL",0
    4243 00014be0                   SCRM    01000000H
    4244 00014c00       46          .BYTE   "FUJI ",0
    4245 00014c30                   SCRM    010000000H
    4246 00014c50       53          .BYTE   "SHAWN",0
    4247 00014c80                   SCRM    01000000H
    4248 00014ca0       42          .BYTE   "BIFF ",0
    4249 00014cd0                   SCRM    00000000H
    4250 00014cf0       20          .BYTE   "     ",0
    4251 00014d20                   SCRM    00000000H
    4252 00014d40       20          .BYTE   "     ",0
    4253 00014d70                   SCRM    00000000H
    4254 00014d90       20          .BYTE   "     ",0
    4255 00014dc0                   SCRM    00000000H
    4256 00014de0       20          .BYTE   "     ",0
    4257 00014e10                   SCRM    00000000H
    4258 00014e30       20          .BYTE   "     ",0
    4259 00014e60                   SCRM    00000000H
    4260 00014e80       20          .BYTE   "     ",0
    4261 00014eb0                   SCRM    00000000H
    4262 00014ed0       20          .BYTE   "     ",0
    4263 00014f00                   SCRM    00000000H
    4264 00014f20       20          .BYTE   "     ",0
    4265 00014f50                   SCRM    00000000H
    4266 00014f70       20          .BYTE   "     ",0
    4267 00014fa0                   SCRM    00000000H
    4268 00014fc0       20          .BYTE   "     ",0
    4269 00014ff0                   SCRM    00000000H
    4270 00015010       20          .BYTE   "     ",0
    4271 00015040                   SCRM    00000000H
    4272 00015060       20          .BYTE   "     ",0
    4273 00015090                   SCRM    00000000H
    4274 000150b0       20          .BYTE   "     ",0
    4275 000150e0                   SCRM    00000000H
    4276 00015100       20          .BYTE   "     ",0
    4277 00015130                   SCRM    00000000H
    4278 00015150       20          .BYTE   "     ",0
    4279 00015180                   SCRM    00000000H
    4280 000151a0       20          .BYTE   "     ",0
    4281 000151d0                   SCRM    00000000H
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE  100

    4282 000151f0       20          .BYTE   "     ",0
    4283 00015220                   SCRM    00000000H
    4284 00015240       20          .BYTE   "     ",0
    4285 00015270                   SCRM    00000000H
    4286 00015290       20          .BYTE   "     ",0
    4287 000152c0                   SCRM    00000000H
    4288 000152e0       20          .BYTE   "     ",0
    4289 00015310                   SCRM    00000000H
    4290 00015330       20          .BYTE   "     ",0
    4291              001f  INTER_TAB_ENTRIES       EQU     ($-INTER_ROM_TABLE)/I_ROM_ENTRY_SIZE
    4292                    
    4293 00015360           TAG_ROM_TABLE
    4294 00015360                   SCRM    022122145H              ;****ZERO ENTRY...NOT SEEN!
    4295 00015380       45          .BYTE   "EPJAB",0
    4296              0050  T_ROM_ENTRY_SIZE        EQU     $-TAG_ROM_TABLE
    4297 000153b0                   SCRM    09000H
    4298 000153d0       42          .BYTE   "BOON ",0
    4299 00015400                   SCRM    09000H
    4300 00015420       53          .BYTE   "SAL  ",0
    4301 00015450                   SCRM    09500H
    4302 00015470       45          .BYTE   "ERMAC",0
    4303 000154a0                   SCRM    09500H
    4304 000154c0       4b          .BYTE   "KANO ",0
    4305 000154f0                   SCRM    010000H
    4306 00015510       53          .BYTE   "SONYA",0
    4307 00015540                   SCRM    010000H
    4308 00015560       47          .BYTE   "GENE ",0
    4309 00015590                   SCRM    010500H
    4310 000155b0       4d          .BYTE   "MIKE ",0
    4311 000155e0                   SCRM    010500H
    4312 00015600       53          .BYTE   "SHAWN",0
    4313 00015630                   SCRM    011000H
    4314 00015650       4a          .BYTE   "JASON",0
    4315 00015680                   SCRM    011000H
    4316 000156a0       4a          .BYTE   "JOSH ",0
    4317 000156d0                   SCRM    011500H
    4318 000156f0       4a          .BYTE   "JOHN ",0
    4319 00015720                   SCRM    011500H
    4320 00015740       4a          .BYTE   "JAKE ",0
    4321 00015770                   SCRM    012000H
    4322 00015790       4a          .BYTE   "JOE  ",0
    4323 000157c0                   SCRM    012000H
    4324 000157e0       45          .BYTE   "EDWIN",0
    4325 00015810                   SCRM    012500H
    4326 00015830       42          .BYTE   "BILL ",0
    4327 00015860                   SCRM    012500H
    4328 00015880       4d          .BYTE   "MARKP",0
    4329 000158b0                   SCRM    013000H
    4330 000158d0       53          .BYTE   "STEVE",0
    4331 00015900                   SCRM    013000H
    4332 00015920       54          .BYTE   "TONY ",0
    4333              0013  TAG_TAB_ENTRIES EQU     ($-TAG_ROM_TABLE)/T_ROM_ENTRY_SIZE
    4334                    
    4335                    
    4336                    ******************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Fri Nov 03 01:28:33 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE  101

    4337                    
    4338                            .end

 No Errors,  No Warnings
