TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    
       2                            .file   "hstd.asm"
       4                            .width  132
       5                            .option b,d,l,t
       6                            .mnolist
       7                    
       8                            .include        "audit.equ"
       9                            .include        "mproc.equ"
      10                            .include        "display.equ"
      11                            .include        "sys.equ"
      12                            .include        "game.equ"
      13                            .include        "link.equ"
      14                            .include        "macros.h"
      15                            .include        "plyr.equ"
      16                            .include        "gsp.equ"
      17                    
      18                            .include        "crowdimg.glo"
      19                            .include        "fontsimg.glo"
      20                            .include        "bgndtbl.glo"
      21                            .include        "miscimg.glo"
      22                            .include        "ropeimg.glo"
      23                            .include        "sound.h"
      24                    
      25 00000000                   .TEXT
      26                    
      27                    
      28                     
      29                    
      30                            .DEF    GET_HSCR
      31                            .DEF    RC_BYTEI
      32                            .DEF    RC_BYTE
      33                            .DEF    RC_WORD
      34                            .DEF    RC_LONG
      35                            .DEF    RC_LONGI
      36                            .DEF    WC_BYTE
      37                            .DEF    WC_BYTEI
      38                            .DEF    WC_WORD
      39                            .DEF    WC_WORDI
      40                            .DEF    WC_LONG
      41                            .DEF    WC_LONGI
      42                            .DEF    PT_ENTRY
      43                            .DEF    INIT_TB
      44                            .DEF    INIT_TAB        ;GEORGES POWER UP ENTRY
      45                            .DEF    P_FORK
      46                            .DEF    VAL_TAB
      47                            .DEF    ROM_PTRS
      48                            .DEF    BEATEN_TAB_ENTRIES
      49                            .DEF    INTER_TAB_ENTRIES
      50                            .DEF    TAG_TAB_ENTRIES
      51                    
      52                            .DEF    INTER_TAB
      53                            .DEF    TAG_TAB
      54                    
      55                            .DEF    STREAK_TAB
      56                            .DEF    BEATEN_TAB
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    2

      57                            .DEF    DO_BEATEN_GAME
      58                            .DEF    SET_PAGE
      59                            .DEF    DEC_HSR,INIT_HSR,GET_HSC
      60                            .def    not_blank
      61                    
      62                    
      63                            .ref    ADD_VOICE,message_palette,get_but_val_down,dec_to_asc
      64                            .ref    dec_to_asc_new_entry,MATCH_TIMERS,civanic,GET_ADJ
      65                            .ref    which_player,mess_z,ANIM_CROWD,DEF_PAGE,print_message
      66                            .ref    message_buffer,howard_wins,GET_AUD,RNDRNG0,mess_line_spacing
      67                            .ref    pal_getf,AUD,BEGINOBJ_TBL,print_string_C2,SHADOW01
      68                            .ref    SHADOW02,mess_space_width,SPEAR,mess_objid,print_string_R
      69                            .ref    BINBCD,message_ascii,get_stick_val_cur,p1oldwinstreak
      70                            .ref    mess_spacing,mess_cursx,print_string,mess_cursy
      71                            .ref    print_string_with_z,setup_message,KILL_AUD,osgemd_ascii
      72                            .ref    get_stick_val_down,setup_back_anim,font9_ascii,CYCLE_TABLE
      73                            .ref    BCDBIN,copy_string,IGNORE_CHAR_WIDTH,message_buffer2
      74                            .ref    triple_sound,change_image,digits_tbl,wsf14_ascii
      75                            .ref    p2oldwinstreak,print_string2,current_round
      76                            .ref    mess_cursx2,font9A_ascii
      77                            .ref    font18_ascii
      78                            .ref    print_string_C,belt_type
      79                            .if 0
      80                            .ref    prog_specials,are_special_inits
      81                            .endif
      82                    
      83                    
      84                    
      85 00000000                    .TEXT
      86                    
      87                    
      88 00000000     f3fe  BEEPSND  .WORD  0F3FEH,010H,080A2H,0            ;LOW BEEP
      89                    
      90                    
      91 00000040                   BSSX    starting_num,16
      92 00000040                   BSSX    entered_inits,          (8*6)*2
      93 00000070                   .bss    last_hscore_ndx,        16
      94 00000080                   .bss    last_streak_ndx,        16
      95 00000090                   .bss    not_blank,16
      96 00000040                   BSSX    auto_init,16
      97                    
      98                    
      99              0012  STREAK_TABLE_VISIBLE    equ     18
     100              0009  PIN_SPEED_TAB_VISIBLE   equ     9
     101              001e  BEATEN_TAB_VISIBLE      equ     30
     102              001e  INTER_TAB_VISIBLE       equ     30
     103              0012  TAG_TAB_VISIBLE         EQU     18
     104                    
     105 00000040           STREAK_TAB
     106 00000040 01408200          .LONG   STREAK_TABLE_ORIGIN     ;LOCATION OF TABLE
     107 00000060     0012          .WORD   STREAK_TABLE_ENTRIES-1  ;NUMBER IN THE TABLE (DON'T COUNT ZERO FILLER)
     108 00000070     0012          .WORD   STREAK_TABLE_VISIBLE    ;unused?
     109 00000080     0001          .WORD   STREAK_TABLE_SELECT     ;BITS TO SELECT IT
     110 00000090 000136f0'         .LONG   STREAK_ROM_TABLE        ;ROM IMAGE OF TABLE
     111 000000b0     0003          .WORD   STREAK_TABLE_ENTRIES/5  ;RESET TABLE IF 1/5 OR MORE BAD
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    3

     112                    
     113 000000c0            SUBR   PIN_SPEED_TAB
     114 000000c0 01409080          .LONG   PIN_SPEED_TAB_ORIGIN    ;LOCATION OF TABLE
     115 000000e0     0009          .WORD   PIN_SPEED_TAB_ENTRIES-1 ;NUMBER IN THE TABLE (DON'T COUNT ZERO FILLER)
     116 000000f0     0009          .WORD   PIN_SPEED_TAB_VISIBLE   ;unused ?
     117 00000100     0002          .WORD   PIN_SPEED_TAB_SELECT    ;BITS TO SELECT IT
     118 00000110 00013ce0'         .LONG   PIN_SPEED_TAB_ROM_TABLE ;ROM IMAGE OF TABLE
     119 00000130     0002          .WORD   PIN_SPEED_TAB_ENTRIES/5 ;RESET TABLE IF 1/5 OR MORE BAD
     120                    
     121                    
     122 00000140           BEATEN_TAB
     123 00000140 014098c0          .LONG   BEATEN_TAB_ORIGIN       ;LOCATION OF TABLE
     124 00000160     001e          .WORD   BEATEN_TAB_ENTRIES-1    ;NUMBER IN THE TABLE (DON'T COUNT ZERO FILLER)
     125 00000170     001e          .WORD   BEATEN_TAB_VISIBLE      ;unused?
     126 00000180     0003          .WORD   BEATEN_TAB_SELECT       ;BITS TO SELECT IT
     127 00000190 00014000'         .LONG   BEATEN_ROM_TABLE        ;ROM IMAGE OF TABLE
     128 000001b0     0006          .WORD   BEATEN_TAB_ENTRIES/5    ;RESET TABLE IF 1/5 OR MORE BAD
     129                    
     130 000001c0           INTER_TAB
     131 000001c0 0140aec0          .LONG   INTER_TAB_ORIGIN        ;LOCATION OF TABLE
     132 000001e0     001e          .WORD   INTER_TAB_ENTRIES-1     ;NUMBER IN THE TABLE (DON'T COUNT ZERO FILLER)
     133 000001f0     001e          .WORD   INTER_TAB_VISIBLE       ;unused?
     134 00000200     0003          .WORD   INTER_TAB_SELECT        ;BITS TO SELECT IT
     135 00000210 000149b0'         .LONG   INTER_ROM_TABLE ;ROM IMAGE OF TABLE
     136 00000230     0006          .WORD   INTER_TAB_ENTRIES/5     ;RESET TABLE IF 1/5 OR MORE BAD
     137                    
     138 00000240           TAG_TAB
     139 00000240 0140c4c0          .LONG   TAG_TAB_ORIGIN  ;LOCATION OF TABLE
     140 00000260     0012          .WORD   TAG_TAB_ENTRIES-1       ;NUMBER IN THE TABLE (DON'T COUNT ZERO FILLER)
     141 00000270     0012          .WORD   TAG_TAB_VISIBLE ;unused?
     142 00000280     0003          .WORD   TAG_TAB_SELECT  ;BITS TO SELECT IT
     143 00000290 00015360'         .LONG   TAG_ROM_TABLE   ;ROM IMAGE OF TABLE
     144 000002b0     0003          .WORD   TAG_TAB_ENTRIES/5       ;RESET TABLE IF 1/5 OR MORE BAD
     145                    
     146                    
     147 000002c0           P_FORK
     148 000002c0     098f          MMTM    SP,A1
         000002d0     4000  
     149 000002e0     b5a1          MOVE    *A13(PROCID),A1         ;PASS OUR ID TO FORKED PROCESS
         000002f0     0020  
     150 00000300     0d5f          CALLA   GETPRC                  ;MAKE THE PROCESS
         00000310 00000000! 
     151 00000330     09af          MMFM    SP,A1
         00000340     0002  
     152 00000350     0960          RETS
     153                    
     154 00000360           DEC_HSR
     155 00000360     098f          MMTM    SP,A0
         00000370     8000  
     156 00000380     0d3f          CALLR   GET_HSC         ;THIS IS EASY...GET THE COUNTER
         00000390     0033  
     157 000003a0     ca03          JRZ     DECHX           ;ITS ZERO....NO ACTION.
     158 000003b0     1420          DEC     A0              ;REMOVE A TICK
     159 000003c0     0d3f          CALLR   PUT_HSC         ;PUT IT BACK JAK
         000003d0     001d  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    4

     160 000003e0     09af  DECHX   MMFM    SP,A0
         000003f0     0001  
     161 00000400     0960          RETS
     162                    
     163              02ee  HS_MIN   EQU     750             ;ALWAYS 750 PLAYS BEFORE REMOVING A FRESH
     164 00000410           DELAY_HSRESET:
     165 00000410     098f          MMTM    SP,A0
         00000420     8000  
     166 00000430     0d3f          CALLR   GET_HSC         ;THIS IS EASY...GET THE COUNTER
         00000440     0028  
     167 00000450     0b40          CMPI    HS_MIN,A0       ;IS IT TOO LOW
         00000460     fd11  
     168 00000470     c904          JRHS    DHX             ;NOPE...NO ACTION
     169                    
     170 00000480     09c0          MOVI    HS_MIN,A0       ;STOP THE RESET!
         00000490     02ee  
     171 000004a0     0d3f          CALLR   PUT_HSC         ;THIS MANY PLAYS TILL RESET!
         000004b0     000f  
     172 000004c0           DHX:    
     173 000004c0     09af          MMFM    SP,A0
         000004d0     0001  
     174 000004e0     0960          RETS
     175                            
     176 000004f0           INIT_HSR
     177 000004f0     098f          MMTM    SP,A0
         00000500     8000  
     178 00000510     09c0          MOVI    ADJHSRES,A0
         00000520     000f  
     179 00000530     0d5f          CALLA   GET_ADJ         ;GET THE ADJUSTED VALUE
         00000540 00000000! 
     180 00000560     0d3f          CALLR   PUT_HSC         ;SET IT TO THIS VALUE
         00000570     0003  
     181 00000580     09af          MMFM    SP,A0
         00000590     0001  
     182 000005a0     0960          RETS
     183                    
     184 000005b0           PUT_HSC
     185 000005b0     098f          MMTM    SP,A7,A0
         000005c0     8100  
     186 000005d0     0d3f          CALLR   HSR_PAGE                ;HIGH SCORE PAGE
         000005e0     002b  
     187                    
     188 000005f0     09e7          MOVI    HRESET_COUNTER,A7       ;POINT AT
         00000600 01402a00  
     189 00000620     0d3f          CALLR   WC_LONGI                ;WRITE OUR PARAMETER
         00000630     1306  
     190 00000640     03e0          NOT     A0                      ;NEGATE IT.
     191 00000650     0d3f          CALLR   WC_LONG                 ;AND WRITE IN SUBSEQUENT SPOT.
         00000660     12f7  
     192 00000670     0d5f          CALLA   DEF_PAGE                ;FLIP PAGE
         00000680 00000000! 
     193 000006a0     09af          MMFM    SP,A7,A0                ;AND RETURN
         000006b0     0081  
     194 000006c0     0960          RETS
     195                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    5

     196 000006d0           GET_HSC
     197 000006d0     098f          MMTM    SP,A7,A1
         000006e0     4100  
     198 000006f0     0d3f          CALLR   HSR_PAGE                ;POINT PAGE AT HSR
         00000700     0019  
     199                    
     200 00000710     09e7          MOVI    HRESET_COUNTER,A7       ;POINT AT
         00000720 01402a00  
     201 00000740     0d3f          CALLR   RC_LONGI                ;READ THE VALUE
         00000750     12cc  
     202 00000760     4c01          MOVE    A0,A1                   ;STASH IT
     203 00000770     0d3f          CALLR   RC_LONG                 ;READ VERIFIER
         00000780     12b7  
     204 00000790     03e0          NOT     A0                      ;SEE IF ITS VALID
     205 000007a0     4801          CMP     A0,A1
     206 000007b0     ca07          JRZ     GET_HSCX                ;IT IS....RETURN IT.
     207                    
     208 000007c0     0d3f          CALLR   INIT_HSR                ;REFRESH IT WITH FACTORY VALUE
         000007d0     ffd1  
     209 000007e0     09c0          MOVI    ADJHSRES,A0
         000007f0     000f  
     210 00000800     0d5f          CALLA   GET_ADJ                 ;GET THE ADJUSTED VALUE
         00000810 00000000! 
     211                    
     212 00000830           GET_HSCX
     213 00000830     0d5f          CALLA   DEF_PAGE                ;FLIP PAGE AWAY FROM US
         00000840 00000000! 
     214 00000860     4c00          MOVE    A0,A0                   ;SET Z FLAG BASED ON COUNTER
     215 00000870     09af          MMFM    SP,A7,A1
         00000880     0082  
     216 00000890     0960          RETS
     217                    
     218 000008a0           HSR_PAGE
     219 000008a0     098f          MMTM    SP,A1
         000008b0     4000  
     220 000008c0     09c1          MOVI    HSR_SELECT,A1
         000008d0     0000  
     221 000008e0     0d3f          CALLR   SET_PAGE
         000008f0     119c  
     222 00000900     09af          MMFM    SP,A1
         00000910     0002  
     223 00000920     0960          RETS
     224                    
     225                    
     226 00000930            SUBR   table_cmos_check
     227                    
     228 00000930     09e8          movi    PIN_SPEED_TAB,a8
         00000940 000000c0' 
     229 00000960     0d3f          callr   VAL_TAB
         00000970     11dd  
     230 00000980     09e8          movi    STREAK_TAB,a8
         00000990 00000040' 
     231 000009b0     0d3f          callr   VAL_TAB
         000009c0     11d8  
     232                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    6

     233 000009d0     09e8          movi    BEATEN_TAB,a8
         000009e0 00000140' 
     234 00000a00     0d3f          callr   VAL_TAB
         00000a10     11d3  
     235                    
     236 00000a20     09e8          movi    INTER_TAB,a8
         00000a30 000001c0' 
     237 00000a50     0d3f          callr   VAL_TAB
         00000a60     11ce  
     238                    
     239 00000a70     09e8          movi    TAG_TAB,a8
         00000a80 00000240' 
     240 00000aa0     0d3f          callr   VAL_TAB
         00000ab0     11c9  
     241 00000ac0     0960          rets
     242                    
     243                    
     244 00000ad0            SUBR   print_inter
     245                    
     246 00000ad0                   push    a5
     247 00000ae0     09e2          movi    ijykhscore_mes2,a2
         00000af0 000012f0' 
     248 00000b10     0d5f          calla   print_message
         00000b20 00000000! 
     249                    
     250 00000b40     09e0          MOVI    [10,0],A0
         00000b50 000a0000  
     251 00000b70     09e1          MOVI    [21,0],A1
         00000b80 00150000  
     252                    
     253 00000ba0     09e2          movi    MVEBAR_R,a2
         00000bb0 00000000! 
     254 00000bd0     09c3          movi    1799H,a3
         00000be0     1799  
     255 00000bf0     09e4          movi    DMAWNZ,a4
         00000c00 00008002  
     256 00000c20     09c5          movi    CLSNEUT,a5
         00000c30     0000  
     257 00000c40     56c6          CLR     A6
     258 00000c50     56e7          CLR     A7
     259 00000c60     0d5f          calla   BEGINOBJ
         00000c70 00000000! 
     260                    
     261 00000c90     09e0          MOVI    [13,0],A0
         00000ca0 000d0000  
     262 00000cc0     09e1          MOVI    [21+9,0],A1
         00000cd0 001e0000  
     263                    
     264 00000cf0     09e2          movi    SHADOW01,a2
         00000d00 00000000! 
     265 00000d20     09c3          movi    1799H,a3
         00000d30     1799  
     266 00000d40     09e4          movi    DMAWNZ,a4
         00000d50 00008002  
     267 00000d70     09c5          movi    CLSNEUT,a5
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    7

         00000d80     0000  
     268 00000d90     56c6          CLR     A6
     269 00000da0     56e7          CLR     A7
     270 00000db0     0d5f          calla   BEGINOBJ
         00000dc0 00000000! 
     271 00000de0                   CREATE  FLASH_PID,JUDDER_SHADOW
     272                    
     273 00000e60                   pull    a9
     274 00000e70     0589          move    a9,@starting_num
         00000e80 00000000- 
     275 00000ea0     09c7          movi    HS_SIZE,a7
         00000eb0     00a0  
     276 00000ec0     5ee9          mpyu    a7,a9
     277 00000ed0     0b29          addi    INTER_TAB_ORIGIN,a9
         00000ee0 0140aec0  
     278 00000f00     4d28          move    a9,a8
     279                    
     280 00000f10     09c7          movi    3,a7                    ;draw 3
         00000f20     0003  
     281                    
     282 00000f30     09e9          movi    [51-9,8],a9
         00000f40 002a0008  
     283 00000f60     09ea          movi    [58+5,10],a10
         00000f70 003f000a  
     284                    
     285 00000f90           ijykloop
     286 00000f90     09eb          movi    GOLD,a11
         00000fa0 00000000! 
     287 00000fc0     09c0          movi    AUD_INTER,A0
         00000fd0     005a  
     288 00000fe0     0d5f          calla   GET_AUD
         00000ff0 00000000! 
     289 00001010     05a5          MOVE    @starting_num,A5
         00001020 00000000- 
     290 00001040     4825          cmp     a1,a5
     291 00001050     cb03          jrne    ijykgold
     292 00001060     09eb          movi    BLUE,a11
         00001070 00000000! 
     293 00001090           ijykgold
     294 00001090                   PUSH    a3,a7,a8,a9,a10,a11
     295 000010b0     09c1          movi    INTER_TAB_SELECT,a1     ;set the read page
         000010c0     0003  
     296 000010d0     0d3f          callr   SET_PAGE
         000010e0     111d  
     297 000010f0     09e5          movi    special_copy,a5
         00001100 00003ed0' 
     298 00001120     0d3f          callr   draw_beaten_table_entry
         00001130     072a  
     299 00001140                   PULL    a3,a7,a8,a9,a10,a11
     300                    
     301 00001160     05a5          move    @starting_num,a5
         00001170 00000000- 
     302 00001190     1025          inc     a5
     303 000011a0     0585          move    a5,@starting_num
         000011b0 00000000- 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    8

     304                    
     305 000011d0     1427          dec     a7
     306 000011e0     ca09          jrz     ijykdone
     307                    
     308 000011f0     0b08          addi    HS_SIZE,a8
         00001200     00a0  
     309 00001210     0b29          addi    [46h,0],a9
         00001220 00460000  
     310 00001240     0b2a          addi    [46h,0],a10
         00001250 00460000  
     311 00001270     c0d1          jruc    ijykloop
     312 00001280           ijykdone
     313 00001280     0d3f          callr   hscore_colcyc
         00001290     0826  
     314 000012a0     0d3f          callr   hscore_colcyc2
         000012b0     0885  
     315 000012c0                   RETP
     316                    
     317 000012f0           ijykhscore_mes2
     318 000012f0                   JAM_STR osgemd_ascii,10,0,200,10,BLUE,print_string_C2
     319 00001390       49          .byte   "INTERCONTINENTAL CHAMPS",0,0
     320 00001460                   .even
     321                    
     322                    
     323                    
     324 00001460            SUBR   print_beaten
     325                    
     326 00001460                   push    a5
     327 00001470     09e2          movi    kizlhscore_mes,a2
         00001480 00001dd0' 
     328 000014a0     0d5f          calla   print_message
         000014b0 00000000! 
     329                    
     330 000014d0     09e0          MOVI    [10,0],A0
         000014e0 000a0000  
     331 00001500     09e1          MOVI    [21,0],A1
         00001510 00150000  
     332                    
     333 00001530     09e2          movi    MVEBAR_R,a2
         00001540 00000000! 
     334 00001560     09c3          movi    1799H,a3
         00001570     1799  
     335 00001580     09e4          movi    DMAWNZ,a4
         00001590 00008002  
     336 000015b0     09c5          movi    CLSNEUT,a5
         000015c0     0000  
     337 000015d0     56c6          CLR     A6
     338 000015e0     56e7          CLR     A7
     339 000015f0     0d5f          calla   BEGINOBJ
         00001600 00000000! 
     340                    
     341 00001620     09e0          MOVI    [13,0],A0
         00001630 000d0000  
     342 00001650     09e1          MOVI    [21+9,0],A1
         00001660 001e0000  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    9

     343                    
     344 00001680     09e2          movi    SHADOW01,a2
         00001690 00000000! 
     345 000016b0     09c3          movi    1799H,a3
         000016c0     1799  
     346 000016d0     09e4          movi    DMAWNZ,a4
         000016e0 00008002  
     347 00001700     09c5          movi    CLSNEUT,a5
         00001710     0000  
     348 00001720     56c6          CLR     A6
     349 00001730     56e7          CLR     A7
     350 00001740     0d5f          calla   BEGINOBJ
         00001750 00000000! 
     351 00001770                   CREATE  FLASH_PID,JUDDER_SHADOW
     352                    
     353 000017f0                   pull    a9
     354 00001800     0589          move    a9,@starting_num
         00001810 00000000- 
     355 00001830     09c7          movi    HS_SIZE,a7
         00001840     00a0  
     356 00001850     5ee9          mpyu    a7,a9
     357 00001860     0b29          addi    BEATEN_TAB_ORIGIN,a9
         00001870 014098c0  
     358 00001890     4d28          move    a9,a8
     359                    
     360 000018a0     09c7          movi    3,a7                    ;draw 3
         000018b0     0003  
     361                    
     362 000018c0     09e9          movi    [51-9,8],a9
         000018d0 002a0008  
     363 000018f0     09ea          movi    [58+5,10],a10
         00001900 003f000a  
     364                    
     365 00001920           kizlloop
     366 00001920     09eb          movi    GOLD,a11
         00001930 00000000! 
     367 00001950     09c0          movi    AUD_BEATEN,A0
         00001960     0059  
     368 00001970     0d5f          calla   GET_AUD
         00001980 00000000! 
     369 000019a0     05a5          MOVE    @starting_num,A5
         000019b0 00000000- 
     370 000019d0     4825          cmp     a1,a5
     371 000019e0     cb03          jrne    kizlgold
     372 000019f0     09eb          movi    BLUE,a11
         00001a00 00000000! 
     373 00001a20           kizlgold
     374 00001a20                   PUSH    a3,a7,a8,a9,a10,a11
     375 00001a40     09c1          movi    BEATEN_TAB_SELECT,a1    ;set the read page
         00001a50     0003  
     376 00001a60     0d3f          callr   SET_PAGE
         00001a70     1084  
     377 00001a80     09e5          movi    special_copy,a5
         00001a90 00003ed0' 
     378 00001ab0     0d3f          callr   draw_beaten_table_entry
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   10

         00001ac0     0691  
     379 00001ad0                   PULL    a3,a7,a8,a9,a10,a11
     380                    
     381 00001af0     05a5          move    @starting_num,a5
         00001b00 00000000- 
     382 00001b20     1025          inc     a5
     383 00001b30     0585          move    a5,@starting_num
         00001b40 00000000- 
     384                    
     385 00001b60     1427          dec     a7
     386 00001b70     ca09          jrz     kizldone
     387                    
     388 00001b80     0b08          addi    HS_SIZE,a8
         00001b90     00a0  
     389 00001ba0     0b29          addi    [46h,0],a9
         00001bb0 00460000  
     390 00001bd0     0b2a          addi    [46h,0],a10
         00001be0 00460000  
     391 00001c00     c0d1          jruc    kizlloop
     392 00001c10           kizldone
     393 00001c10                   RETP
     394                    
     395 00001c40            SUBR   JUDDER_SHADOW
     396 00001c40     09e1          MOVI    SHADOW_ANIM,A1
         00001c50 00001d40' 
     397 00001c70     0d5f          calla   setup_back_anim
         00001c80 00000000! 
     398 00001ca0                   JSRP    ANIM_CROWD
     399 00001d10                   DIE
     400                    
     401              8000  CANI_GOTO       equ     0 + 8000h
     402                    
     403 00001d40           SHADOW_ANIM
     404 00001d40                   WL      1,SHADOW02
     405 00001d70                   WL      1,SHADOW01
     406 00001da0                   WL      CANI_GOTO,SHADOW_ANIM
     407                    
     408 00001dd0           kizlhscore_mes
     409 00001dd0                   JAM_STR osgemd_ascii,10,0,200,10,BLUE,print_string_C2
     410 00001e70       57          .byte   "WORLD CHAMPIONS",0,0
     411 00001f00                   .even
     412                    
     413                    
     414 00001f00            SUBR   STOP_ALL_OBJS
     415 00001f00     09e8          MOVI    OBJLST,A8
         00001f10 00000000! 
     416 00001f30     5621          CLR     A1
     417 00001f40     c002          JRUC    DO_EACH_OBJ_STOP
     418 00001f50           STOP_THIS_OBJ
     419 00001f50     b228          MOVE    A1,*A8(OYVEL),L
         00001f60     0040  
     420 00001f70           DO_EACH_OBJ_STOP
     421 00001f70     8708          MOVE    *A8,A8,L
     422 00001f80     cbfc          JRNZ    STOP_THIS_OBJ
     423 00001f90     0960          RETS
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   11

     424                    
     425 00001fa0            SUBR   MOVE_ALL_OBJS_UP
     426 00001fa0     09e8          MOVI    OBJLST,A8
         00001fb0 00000000! 
     427 00001fd0     09e0          MOVI    RUBYPAL,A0
         00001fe0 00000000! 
     428 00002000     0d5f          CALLA   pal_getf
         00002010 00000000! 
     429 00002030     09e1          MOVI    [-2,0],A1
         00002040 fffe0000  
     430 00002060     c00b          JRUC    DO_EACH_OBJ
     431 00002070           MOVE_THIS_OBJ_UP
     432 00002070     b502          MOVE    *A8(OPAL),A2
         00002080     0150  
     433 00002090     4840          CMP     A2,A0
     434 000020a0     ca07          JREQ    DO_EACH_OBJ
     435 000020b0     b502          MOVE    *A8(OZPOS),A2
         000020c0     00d0  
     436 000020d0     0b42          CMPI    1798H,A2
         000020e0     e867  
     437 000020f0     c702          JRGT    DO_EACH_OBJ
     438 00002100     b228          MOVE    A1,*A8(OYVEL),L
         00002110     0040  
     439 00002120           DO_EACH_OBJ
     440 00002120     8708          MOVE    *A8,A8,L
     441 00002130     cbf3          JRNZ    MOVE_THIS_OBJ_UP
     442 00002140     0960          RETS
     443                    
     444 00002150            SUBR   DELETE_ANY_OFF_TOP
     445 00002150     09e8          MOVI    OBJLST,A8
         00002160 00000000! 
     446 00002180     09e3          MOVI    [-30,0],A3
         00002190 ffe20000  
     447 000021b0     c00b          JRUC    DO_EACH_OBJ_NEXT
     448 000021c0           DELETE_OR_NOT
     449 000021c0     b702          MOVE    *A8(OYVAL),A2,L
         000021d0     00a0  
     450 000021e0     4862          CMP     A3,A2
     451 000021f0     c707          JRGT    DO_EACH_OBJ_NEXT
     452 00002200     8709          MOVE    *A8,A9,L
     453 00002210     0d5f          CALLA   DELOBJA8
         00002220 00000000! 
     454 00002240     4d28          MOVE    A9,A8
     455 00002250     cbf6          JRNZ    DELETE_OR_NOT
     456 00002260     0960          RETS
     457 00002270           DO_EACH_OBJ_NEXT
     458 00002270     8708          MOVE    *A8,A8,L
     459 00002280     cbf3          JRNZ    DELETE_OR_NOT
     460 00002290     0960          RETS
     461                    
     462                    
     463                    
     464 000022a0            SUBR   print_tag
     465                    
     466 000022a0     09e2          movi    tag_mes,a2
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   12

         000022b0 00002a80' 
     467 000022d0     0d5f          calla   print_message
         000022e0 00000000! 
     468                    
     469 00002300     09e0          MOVI    [10,0],A0
         00002310 000a0000  
     470 00002330     09e1          MOVI    [21,0],A1
         00002340 00150000  
     471                    
     472 00002360     09e2          movi    MVEBAR_R,a2
         00002370 00000000! 
     473 00002390     09c3          movi    1799H,a3
         000023a0     1799  
     474 000023b0     09e4          movi    DMAWNZ,a4
         000023c0 00008002  
     475 000023e0     09c5          movi    CLSNEUT,a5
         000023f0     0000  
     476 00002400     56c6          CLR     A6
     477 00002410     56e7          CLR     A7
     478 00002420     0d5f          calla   BEGINOBJ
         00002430 00000000! 
     479                    
     480 00002450     09e0          MOVI    [13,0],A0
         00002460 000d0000  
     481 00002480     09e1          MOVI    [21+9,0],A1
         00002490 001e0000  
     482                    
     483 000024b0     09e2          movi    SHADOW01,a2
         000024c0 00000000! 
     484 000024e0     09c3          movi    1799H,a3
         000024f0     1799  
     485 00002500     09e4          movi    DMAWNZ,a4
         00002510 00008002  
     486 00002530     09c5          movi    CLSNEUT,a5
         00002540     0000  
     487 00002550     56c6          CLR     A6
     488 00002560     56e7          CLR     A7
     489 00002570     0d5f          calla   BEGINOBJ
         00002580 00000000! 
     490                    
     491 000025a0     09c0          movi    FLASH_PID,A0
         000025b0     0139  
     492 000025c0     5621          CLR     A1
     493 000025d0     03e1          NOT     A1
     494 000025e0     0d5f          CALLA   KILALL
         000025f0 00000000! 
     495                    
     496 00002610                   CREATE  FLASH_PID,JUDDER_SHADOW
     497                    
     498 00002690     09c7          movi    9,a7                    ;draw 9
         000026a0     0009  
     499 000026b0     1823          movk    1,a3
     500                    
     501 000026c0     09e8          movi    TAG_TAB_ORIGIN+HS_SIZE,a8
         000026d0 0140c560  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   13

     502 000026f0     09e9          movi    [40,8],a9
         00002700 00280008  
     503 00002720     09ea          movi    [38,64+8],a10
         00002730 00260048  
     504                    
     505 00002750           zdreloop
     506 00002750     09eb          movi    GOLD,a11
         00002760 00000000! 
     507 00002780     09c0          movi    AUD_TAG,A0
         00002790     0062  
     508 000027a0     0d5f          calla   GET_AUD
         000027b0 00000000! 
     509 000027d0     1021          addk    1,a1
     510 000027e0     2fe1          srl     1,a1
     511 000027f0     4823          CMP     a1,A3
     512 00002800     cb03          jrne    zdrenotblue
     513 00002810     09eb          movi    BLUE,a11
         00002820 00000000! 
     514 00002840           zdrenotblue
     515 00002840                   PUSH    A3,a7,a8,a9,a10,a11
     516 00002860     09c1          movi    TAG_TAB_SELECT,a1       ;set the read page
         00002870     0003  
     517 00002880     0d3f          callr   SET_PAGE
         00002890     0fa2  
     518 000028a0     09e5          movi    special_copy,a5
         000028b0 00003ed0' 
     519 000028d0     09e2          movi    SEC,a2
         000028e0 00000000! 
     520 00002900     09e1          MOVI    [118H,0],a1
         00002910 01180000  
     521 00002930     09c6          MOVI    0110H,A6
         00002940     0110  
     522 00002950     0d3f          callr   draw_tag_table_entry
         00002960     01ab  
     523 00002970                   PULL    A3,a7,a8,a9,a10,a11
     524                    
     525 00002990     1023          INC     A3
     526 000029a0     1427          dec     a7
     527 000029b0     ca09          jrz     zdredone
     528                    
     529 000029c0     0b08          addi    HS_SIZE*2,a8
         000029d0     0140  
     530 000029e0     0b29          addi    [23,0],a9
         000029f0 00170000  
     531 00002a10     0b2a          addi    [23,0],a10
         00002a20 00170000  
     532 00002a40     c0d0          jruc    zdreloop
     533                    
     534 00002a50           zdredone
     535 00002a50                   RETP
     536                    
     537 00002a80           tag_mes
     538 00002a80                   JAM_STR osgemd_ascii,10,0,200,10,BLUE,print_string_C2
     539 00002b20       54          .byte   "TAG TEAM CHAMPIONS",0,0
     540 00002bc0                   .even
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   14

     541                    
     542                    
     543 00002bc0            SUBR   print_hscores
     544                    
     545 00002bc0     09e2          movi    lhtohscore_mes,a2
         00002bd0 00003380' 
     546 00002bf0     0d5f          calla   print_message
         00002c00 00000000! 
     547                    
     548                    
     549 00002c20     09e0          MOVI    [10,0],A0
         00002c30 000a0000  
     550 00002c50     09e1          MOVI    [21,0],A1
         00002c60 00150000  
     551                    
     552 00002c80     09e2          movi    MVEBAR_R,a2
         00002c90 00000000! 
     553 00002cb0     09c3          movi    1799H,a3
         00002cc0     1799  
     554 00002cd0     09e4          movi    DMAWNZ,a4
         00002ce0 00008002  
     555 00002d00     09c5          movi    CLSNEUT,a5
         00002d10     0000  
     556 00002d20     56c6          CLR     A6
     557 00002d30     56e7          CLR     A7
     558 00002d40     0d5f          calla   BEGINOBJ
         00002d50 00000000! 
     559                    
     560 00002d70     09e0          MOVI    [13,0],A0
         00002d80 000d0000  
     561 00002da0     09e1          MOVI    [21+9,0],A1
         00002db0 001e0000  
     562                    
     563 00002dd0     09e2          movi    SHADOW01,a2
         00002de0 00000000! 
     564 00002e00     09c3          movi    1799H,a3
         00002e10     1799  
     565 00002e20     09e4          movi    DMAWNZ,a4
         00002e30 00008002  
     566 00002e50     09c5          movi    CLSNEUT,a5
         00002e60     0000  
     567 00002e70     56c6          CLR     A6
     568 00002e80     56e7          CLR     A7
     569 00002e90     0d5f          calla   BEGINOBJ
         00002ea0 00000000! 
     570                    
     571 00002ec0     09c0          movi    FLASH_PID,A0
         00002ed0     0139  
     572 00002ee0     5621          CLR     A1
     573 00002ef0     03e1          NOT     A1
     574 00002f00     0d5f          CALLA   KILALL
         00002f10 00000000! 
     575                    
     576 00002f30                   CREATE  FLASH_PID,JUDDER_SHADOW
     577                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   15

     578                    
     579 00002fb0     09c7          movi    9,a7                    ;draw 9
         00002fc0     0009  
     580 00002fd0     1823          movk    1,a3
     581                    
     582 00002fe0     09e8          movi    PIN_SPEED_TAB_ORIGIN+HS_SIZE,a8
         00002ff0 01409120  
     583 00003010     09e9          movi    [40,8],a9
         00003020 00280008  
     584 00003040     09ea          movi    [38,64+8],a10
         00003050 00260048  
     585                    
     586 00003070           lhtoloop
     587 00003070     09eb          movi    GOLD,a11
         00003080 00000000! 
     588 000030a0     09c0          movi    AUD_PINSPEED,A0
         000030b0     0058  
     589 000030c0     0d5f          calla   GET_AUD
         000030d0 00000000! 
     590 000030f0     4823          CMP     a1,A3
     591 00003100     cb03          jrne    lhtonotblue
     592 00003110     09eb          movi    BLUE,a11
         00003120 00000000! 
     593 00003140           lhtonotblue
     594 00003140                   PUSH    A3,a7,a8,a9,a10,a11
     595 00003160     09c1          movi    PIN_SPEED_TAB_SELECT,a1 ;set the read page
         00003170     0002  
     596 00003180     0d3f          callr   SET_PAGE
         00003190     0f12  
     597 000031a0     09e5          movi    special_copy,a5
         000031b0 00003ed0' 
     598 000031d0     09e2          movi    SEC,a2
         000031e0 00000000! 
     599 00003200     09e1          MOVI    [82H,0],a1
         00003210 00820000  
     600 00003230     09c6          MOVI    120,A6
         00003240     0078  
     601 00003250     0d3f          callr   draw_pinspeed_table_entry
         00003260     0299  
     602 00003270                   PULL    A3,a7,a8,a9,a10,a11
     603                    
     604 00003290     1023          INC     A3
     605 000032a0     1427          dec     a7
     606 000032b0     ca09          jrz     lhtodone
     607                    
     608 000032c0     0b08          addi    HS_SIZE,a8
         000032d0     00a0  
     609 000032e0     0b29          addi    [23,0],a9
         000032f0 00170000  
     610 00003310     0b2a          addi    [23,0],a10
         00003320 00170000  
     611 00003340     c0d2          jruc    lhtoloop
     612                    
     613 00003350           lhtodone
     614 00003350                   RETP
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   16

     615                    
     616 00003380           lhtohscore_mes
     617 00003380                   JAM_STR osgemd_ascii,10,0,200,10,BLUE,print_string_C2
     618 00003420       46          .byte   "FASTEST PINDOWN TIMES",0,0
     619 000034e0                   .even
     620                    
     621                    
     622                    
     623 000034e0            SUBR   print_winstreaks
     624                    
     625 000034e0     09e2          movi    uipzstreak_mes,a2
         000034f0 00003d60' 
     626 00003510     0d5f          calla   print_message
         00003520 00000000! 
     627                    
     628 00003540     09e0          MOVI    [10,0],A0
         00003550 000a0000  
     629 00003570     09e1          MOVI    [21,0],A1
         00003580 00150000  
     630                    
     631 000035a0     09e2          movi    MVEBAR_R,a2
         000035b0 00000000! 
     632 000035d0     09c3          movi    1799H,a3
         000035e0     1799  
     633 000035f0     09e4          movi    DMAWNZ,a4
         00003600 00008002  
     634 00003620     09c5          movi    CLSNEUT,a5
         00003630     0000  
     635 00003640     56c6          CLR     A6
     636 00003650     56e7          CLR     A7
     637 00003660     0d5f          calla   BEGINOBJ
         00003670 00000000! 
     638                    
     639 00003690     09e0          MOVI    [13,0],A0
         000036a0 000d0000  
     640 000036c0     09e1          MOVI    [21+9,0],A1
         000036d0 001e0000  
     641                    
     642 000036f0     09e2          movi    SHADOW01,a2
         00003700 00000000! 
     643 00003720     09c3          movi    1799H,a3
         00003730     1799  
     644 00003740     09e4          movi    DMAWNZ,a4
         00003750 00008002  
     645 00003770     09c5          movi    CLSNEUT,a5
         00003780     0000  
     646 00003790     56c6          CLR     A6
     647 000037a0     56e7          CLR     A7
     648 000037b0     0d5f          calla   BEGINOBJ
         000037c0 00000000! 
     649                    
     650 000037e0     09c0          movi    FLASH_PID,A0
         000037f0     0139  
     651 00003800     5621          CLR     A1
     652 00003810     03e1          NOT     A1
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   17

     653 00003820     0d5f          CALLA   KILALL
         00003830 00000000! 
     654                    
     655 00003850                   CREATE  FLASH_PID,JUDDER_SHADOW
     656                    
     657 000038d0     09c7          movi    18,a7                   ;draw 18
         000038e0     0012  
     658 000038f0     1823          MOVK    1,A3
     659                    
     660 00003900     09e8          movi    STREAK_TABLE_ORIGIN+HS_SIZE,a8
         00003910 014082a0  
     661 00003930     09e9          movi    [40,8],a9
         00003940 00280008  
     662 00003960     09ea          movi    [38,44],a10
         00003970 0026002c  
     663                    
     664 00003990           uipzloop
     665 00003990     09eb          movi    GOLD,a11
         000039a0 00000000! 
     666 000039c0     09c0          movi    AUD_WINSTREAK,A0
         000039d0     0057  
     667 000039e0     0d5f          calla   GET_AUD
         000039f0 00000000! 
     668 00003a10     4823          cmp     a1,a3
     669 00003a20     cb03          jrne    uipzgold
     670 00003a30     09eb          movi    BLUE,a11
         00003a40 00000000! 
     671 00003a60           uipzgold
     672 00003a60                   PUSH    A3,a7,a8,a9,a10,a11
     673 00003a80     09c1          movi    STREAK_TABLE_SELECT,a1
         00003a90     0001  
     674 00003aa0     0d3f          callr   SET_PAGE
         00003ab0     0e80  
     675 00003ac0     09e5          movi    copy_string,a5
         00003ad0 00000000! 
     676 00003af0     09e1          MOVI    [6aH,0],a1
         00003b00 006a0000  
     677 00003b20     09e2          movi    WINS,a2
         00003b30 00000000! 
     678 00003b50     09c6          MOVI    80,A6
         00003b60     0050  
     679 00003b70     0d3f          callr   draw_winstreak_table_entry
         00003b80     031e  
     680 00003b90                   PULL    A3,a7,a8,a9,a10,a11
     681 00003bb0     1023          INC     A3
     682 00003bc0     1427          dec     a7
     683 00003bd0     ca15          jrz     uipzdone
     684 00003be0     0b47          cmpi    9,a7
         00003bf0     fff6  
     685 00003c00     ca09          jreq    reset_position
     686                    
     687 00003c10     0b08          addi    HS_SIZE,a8
         00003c20     00a0  
     688 00003c30     0b29          addi    [23,0],a9
         00003c40 00170000  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   18

     689 00003c60     0b2a          addi    [23,0],a10
         00003c70 00170000  
     690 00003c90     c0cf          jruc    uipzloop
     691                    
     692 00003ca0           reset_position
     693 00003ca0     0b08          addi    HS_SIZE,a8
         00003cb0     00a0  
     694 00003cc0     09e9          movi    [40,208+5],a9
         00003cd0 002800d5  
     695 00003cf0     09ea          movi    [38,244+5],a10
         00003d00 002600f9  
     696 00003d20     c0c6          jruc    uipzloop
     697                    
     698 00003d30           uipzdone
     699 00003d30                   RETP
     700                    
     701                    
     702 00003d60           uipzstreak_mes
     703 00003d60                   JAM_STR osgemd_ascii,10,0,200,10,BLUE,print_string_C2
     704 00003e00       4c          .byte   "LONGEST WINNING STREAKS",0,0
     705 00003ed0                   .even
     706                    
     707 00003ed0           special_copy
     708 00003ed0     09e2          movi    message_buffer,a2
         00003ee0 00000000! 
     709 00003f00     09e3          movi    message_buffer2,a3
         00003f10 00000000! 
     710 00003f30     9862          move    *a3+,*a2+
     711 00003f40     09c1          movi    ".",a1
         00003f50     002e  
     712 00003f60     8c22          movb    a1,*a2
     713 00003f70     0b02          addi    8,a2
         00003f80     0008  
     714 00003f90     9c62          movb    *a3,*a2
     715 00003fa0     0b02          addi    8,a2
         00003fb0     0008  
     716 00003fc0     0b03          addi    16,a3
         00003fd0     0010  
     717 00003fe0     5621          clr     a1
     718 00003ff0     8c22          movb    a1,*a2
     719 00004000     19e0          MOVK    15,A0
     720 00004010     0580          move    a0,@mess_spacing
         00004020 00000000! 
     721 00004040     1820          MOVK    1,A0
     722 00004050     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         00004060 00000000! 
     723 00004080     0960          rets
     724                    
     725 000000b0                   .bss    work_buffer,8*10
     726                    
     727 00004090            SUBRP  strip_white
     728 00004090                   PUSH    a0,a1,a2
     729 000040b0     09e0          movi    work_buffer,a0          ; Pointer to work buffer
         000040c0 000000b0- 
     730 000040e0     1423          subk    1,a3
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   19

     731 000040f0     2463          sll     3,a3                    ; Set pointer to end of buffer
     732 00004100     4c61          move    a3,a1
     733 00004110     0b21          addi    work_buffer,a1
         00004120 000000b0- 
     734 00004140           roziff_loop
     735 00004140     8e02          movb    *a0,a2                  ; Get char
     736 00004150     0b42          cmpi    20h,a2                  ; Is it a space ?
         00004160     ffdf  
     737 00004170     cb04          jrnz    rozifirst_found         ; br = no
     738 00004180     4c42          move    a2,a2                   ; Is it 0 ?
     739 00004190     ca02          jrz     rozifirst_found         ; br = yes
     740 000041a0     1100          addk    8,a0                    ; Increment front pointer
     741 000041b0     c0f8          jruc    roziff_loop             ; Go check next char
     742                    
     743 000041c0           rozifirst_found
     744 000041c0           rozifl_loop
     745 000041c0     8e22          movb    *a1,a2                  ; Get char
     746 000041d0     4c42          move    a2,a2                   ; Is it 0 ?
     747 000041e0     ca03          jrz     roziget_prev
     748 000041f0     0b42          cmpi    20h,a2                  ; Is it a space ?
         00004200     ffdf  
     749 00004210     cb06          jrnz    rozilast_found          ; br = yes
     750 00004220           roziget_prev
     751 00004220     0b61          cmpi    work_buffer,a1          ; Are we at beginning ?
         00004230 ffffff4f- 
     752 00004250     ca02          jrz     rozilast_found          ; br = yes
     753 00004260     1501          subk    8,a1                    ; Decrement pointer
     754 00004270     c0f4          jruc    rozifl_loop             ; Go check previous char
     755                    
     756 00004280           rozilast_found
     757 00004280     1101          addk    8,a1
     758 00004290     09e2          movi    message_buffer,a2       ; Where we are gonna put it
         000042a0 00000000! 
     759 000042c0     4801          cmp     a0,a1                   ; back pointer > front pointer ?
     760 000042d0     c707          jrgt    rozicopy_loop           ; br = yes
     761 000042e0     09e0          movi    work_buffer,a0          ; reset front pointer
         000042f0 000000b0- 
     762 00004310     4c61          move    a3,a1
     763 00004320     0b21          addi    work_buffer,a1
         00004330 000000b0- 
     764 00004350           rozicopy_loop
     765 00004350     8e0e          movb    *a0,a14                 ; Get char
     766 00004360     8dc2          movb    a14,*a2                 ; Write to message buffer
     767 00004370     1100          addk    8,a0                    ; Increment front pointer
     768 00004380     4801          cmp     a0,a1                   ; front = back ?
     769 00004390     ca02          jrz     rozicopy_done           ; br = yes
     770 000043a0     1102          addk    8,a2                    ; Increment dest pointer
     771 000043b0     c0f9          jruc    rozicopy_loop           ; Go do next char
     772                    
     773 000043c0           rozicopy_done
     774 000043c0     1102          addk    8,a2                    ; Increment dest pointer
     775 000043d0     5621          clr     a1                      ; NULL terminate the string
     776 000043e0     8022          move    a1,*a2
     777                    
     778 000043f0                   PULL    a0,a1,a2
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   20

     779 00004410     0960          rets
     780                    
     781                    
     782 00004420            SUBRP   draw_tag_table_entry
     783 00004420                   PUSH    A7
     784                    
     785 00004430                   push    a8
     786 00004440                   PUSH    A5
     787 00004450                   PUSH    A6
     788 00004460     4d40          move    a10,a0
     789 00004470     2600          sll     16,a0
     790 00004480     4020          ADD     A1,A0
     791 00004490     4d41          move    a10,a1
     792 000044a0     2e01          srl     16,a1
     793 000044b0     2601          sll     16,a1
     794 000044c0     0b21          addi    [4,0],a1
         000044d0 00040000  
     795 000044f0     09c3          movi    1000H,a3
         00004500     1000  
     796 00004510     09e4          movi    DMAWNZ,a4
         00004520 00008002  
     797 00004540     09c5          movi    CLSNEUT,a5
         00004550     0000  
     798 00004560     56c6          clr     a6
     799 00004570     56e7          clr     a7
     800 00004580     0d5f          calla   BEGINOBJW
         00004590 00000000! 
     801 000045b0                   PULL    A6
     802 000045c0                   PULL    A5
     803 000045d0                   pull    a8
     804                    
     805 000045e0     4d07          move    a8,a7
     806 000045f0     0d3f          callr   RC_LONG                 ;read the score
         00004600     0ecf  
     807 00004610     0d5f          calla   BCDBIN
         00004620 00000000! 
     808 00004640     0d3f          callr   val_to_dec_tenths_asc
         00004650     0126  
     809                    
     810 00004660     1840          movk    2,a0
     811 00004670     0580          move    a0,@mess_spacing
         00004680 00000000! 
     812 000046a0     5600          CLR     A0
     813 000046b0     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         000046c0 00000000! 
     814 000046e0     09e0          movi    font18_ascii,a0
         000046f0 00000000! 
     815 00004710     0780          move    a0,@message_ascii,L
         00004720 00000000! 
     816 00004740     09c0          movi    10,a0
         00004750     000a  
     817 00004760     0580          move    a0,@mess_space_width
         00004770 00000000! 
     818 00004790     4d40          move    a10,a0
     819 000047a0     2600          sll     16,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   21

     820 000047b0     2e00          srl     16,a0
     821 000047c0     40c0          add     A6,a0
     822 000047d0     0580          move    a0,@mess_cursx
         000047e0 00000000! 
     823 00004800     4d40          move    a10,a0
     824 00004810     2e00          srl     16,a0
     825 00004820     0580          move    a0,@mess_cursy
         00004830 00000000! 
     826 00004850     09e0          movi    WGSF_W_P1,a0
         00004860 00000000! 
     827 00004880     0780          move    a0,@message_palette,L
         00004890 00000000! 
     828 000048b0     0d5f          calla   print_string_R
         000048c0 00000000! 
     829                    
     830                            ;initials
     831 000048e0     09e1          movi    work_buffer,a1
         000048f0 000000b0- 
     832 00004910     4d07          move    a8,a7
     833 00004920     0b07          addi    HS_INITS,a7
         00004930     0040  
     834 00004940     09c2          movi    5,a2
         00004950     0005  
     835                    
     836 00004960           vymjinitloop
     837 00004960     0d3f          callr   RC_BYTEI
         00004970     0e7a  
     838 00004980     8c01          movb    a0,*a1
     839 00004990     1101          addk    8,a1
     840 000049a0     3ca2          dsj     a2,vymjinitloop
     841                    
     842 000049b0     18a3          movk    5,a3
     843 000049c0     0d3f          callr   strip_white
         000049d0     ff6b  
     844                    
     845 000049e0     5600          clr     a0                      ;null-terminate it
     846 000049f0     8c01          movb    a0,*a1
     847                    
     848 00004a00     09e0          movi    osgemd_ascii,a0
         00004a10 00000000! 
     849 00004a30     0780          move    a0,@message_ascii,L
         00004a40 00000000! 
     850 00004a60     09c0          movi    10,a0
         00004a70     000a  
     851 00004a80     0580          move    a0,@mess_space_width
         00004a90 00000000! 
     852 00004ab0     5600          clr     a0
     853 00004ac0     0580          move    a0,@mess_spacing
         00004ad0 00000000! 
     854 00004af0     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         00004b00 00000000! 
     855 00004b20     4d40          move    a10,a0
     856 00004b30     2600          sll     16,a0
     857 00004b40     2e00          srl     16,a0
     858 00004b50     13c0          addk    30,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   22

     859 00004b60     0580          move    a0,@mess_cursx
         00004b70 00000000! 
     860 00004b90     4d40          move    a10,a0
     861 00004ba0     2e00          srl     16,a0
     862 00004bb0     0580          move    a0,@mess_cursy
         00004bc0 00000000! 
     863 00004be0     078b          move    a11,@message_palette,L
         00004bf0 00000000! 
     864 00004c10     0d5f          calla   print_string_C
         00004c20 00000000! 
     865                    
     866                    
     867 00004c40                   push    a8
     868 00004c50     4d40          move    a10,a0
     869 00004c60     2600          sll     16,a0
     870 00004c70     0b20          addi    [52h,0],a0
         00004c80 00520000  
     871                    
     872 00004ca0     4d41          move    a10,a1
     873 00004cb0     2e01          srl     16,a1
     874 00004cc0     2601          sll     16,a1
     875                    
     876 00004cd0     4f60          move    a11,b0
     877 00004ce0     09e2          movi    OSGEMD_AND,a2
         00004cf0 00000000! 
     878 00004d10     09c3          movi    1799H,a3
         00004d20     1799  
     879 00004d30     09e4          movi    DMAWNZ,a4
         00004d40 00008002  
     880 00004d60     09c5          movi    CLSNEUT,a5
         00004d70     0000  
     881 00004d80     56c6          CLR     A6
     882 00004d90     56e7          CLR     A7
     883 00004da0     0d5f          calla   BEGINOBJP
         00004db0 00000000! 
     884 00004dd0                   pull    a8
     885                    
     886                            ;initials second set
     887 00004de0     09e1          movi    work_buffer,a1
         00004df0 000000b0- 
     888 00004e10     4d07          move    a8,a7
     889 00004e20     0b07          addi    HS_INITS+HS_SIZE,a7
         00004e30     00e0  
     890 00004e40     09c2          movi    5,a2
         00004e50     0005  
     891                    
     892 00004e60           vymjinitloop2
     893 00004e60     0d3f          callr   RC_BYTEI
         00004e70     0e2a  
     894 00004e80     8c01          movb    a0,*a1
     895 00004e90     1101          addk    8,a1
     896 00004ea0     3ca2          dsj     a2,vymjinitloop2
     897                    
     898 00004eb0     18a3          movk    5,a3
     899 00004ec0     0d3f          callr   strip_white
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   23

         00004ed0     ff1b  
     900                    
     901 00004ee0     5600          clr     a0                      ;null-terminate it
     902 00004ef0     8c01          movb    a0,*a1
     903                    
     904 00004f00     09e0          movi    osgemd_ascii,a0
         00004f10 00000000! 
     905 00004f30     0780          move    a0,@message_ascii,L
         00004f40 00000000! 
     906 00004f60     09c0          movi    10,a0
         00004f70     000a  
     907 00004f80     0580          move    a0,@mess_space_width
         00004f90 00000000! 
     908 00004fb0     5600          clr     a0
     909 00004fc0     0580          move    a0,@mess_spacing
         00004fd0 00000000! 
     910 00004ff0     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         00005000 00000000! 
     911 00005020     4d40          move    a10,a0
     912 00005030     2600          sll     16,a0
     913 00005040     2e00          srl     16,a0
     914 00005050     0b00          addi    155,a0
         00005060     009b  
     915 00005070     0580          move    a0,@mess_cursx
         00005080 00000000! 
     916 000050a0     4d40          move    a10,a0
     917 000050b0     2e00          srl     16,a0
     918 000050c0     0580          move    a0,@mess_cursy
         000050d0 00000000! 
     919 000050f0     078b          move    a11,@message_palette,L
         00005100 00000000! 
     920 00005120     0d5f          calla   print_string_C
         00005130 00000000! 
     921                    
     922 00005150     4d20          move    a9,a0
     923 00005160     2600          sll     16,a0
     924 00005170     0d00          subi    [8,0],a0
         00005180 fff7ffff  
     925 000051a0     4d21          move    a9,a1
     926 000051b0     2e01          srl     16,a1
     927 000051c0     2601          sll     16,a1
     928 000051d0     0b21          addi    [2,0],a1
         000051e0 00020000  
     929 00005200     09e2          movi    SPEAR,a2
         00005210 00000000! 
     930 00005230     09c3          movi    1000H,a3
         00005240     1000  
     931 00005250     09e4          movi    DMAWNZ,a4
         00005260 00008002  
     932 00005280     09c5          movi    CLSNEUT,a5
         00005290     0000  
     933 000052a0     56c6          clr     a6
     934 000052b0     56e7          clr     a7
     935 000052c0     0d5f          calla   BEGINOBJW
         000052d0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   24

     936                    
     937 000052f0     4d20          move    a9,a0
     938 00005300     2600          sll     16,a0
     939 00005310     0b20          addi    [13,0],a0
         00005320 000d0000  
     940 00005340     4d21          move    a9,a1
     941 00005350     2e01          srl     16,a1
     942 00005360     2601          sll     16,a1
     943 00005370     0b21          addi    [2,0],a1
         00005380 00020000  
     944 000053a0     09e2          movi    SPEAR,a2
         000053b0 00000000! 
     945 000053d0     09c3          movi    1001H,a3
         000053e0     1001  
     946 000053f0     09e4          movi    DMAWNZ,a4
         00005400 00008002  
     947 00005420     09c5          movi    CLSNEUT,a5
         00005430     0000  
     948 00005440     56c6          clr     a6
     949 00005450     56e7          clr     a7
     950 00005460     0d5f          calla   BEGINOBJW
         00005470 00000000! 
     951                    
     952 00005490                   PULL    A7
     953                    
     954 000054a0     09c0          movi    "#",a0
         000054b0     0023  
     955 000054c0     05e0          movb    a0,@message_buffer
         000054d0 00000000! 
     956 000054f0     1101          addk    8,a1
     957                    
     958 00005500     1940          MOVK    10,A0
     959 00005510     44e0          SUB     A7,A0
     960 00005520     0d5f          calla   BINBCD                  ;dec number in A0
         00005530 00000000! 
     961 00005550     4c01          move    a0,a1
     962 00005560     09e2          movi    message_buffer+8,a2
         00005570 00000008! 
     963 00005590     0d5f          calla   dec_to_asc_new_entry
         000055a0 00000000! 
     964                    
     965 000055c0     5600          clr     a0
     966 000055d0     9002          move    a0,*a2+
     967                    
     968 000055e0     09e0          movi    wsf14_ascii,a0
         000055f0 00000000! 
     969 00005610     0780          move    a0,@message_ascii,L
         00005620 00000000! 
     970 00005640     09c0          movi    7,a0
         00005650     0007  
     971 00005660     0580          move    a0,@mess_space_width
         00005670 00000000! 
     972 00005690     5600          clr     a0
     973 000056a0     0580          move    a0,@mess_spacing
         000056b0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   25

     974 000056d0     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         000056e0 00000000! 
     975 00005700     4d20          move    a9,a0
     976 00005710     2600          sll     16,a0
     977 00005720     2e00          srl     16,a0
     978 00005730     0580          move    a0,@mess_cursx
         00005740 00000000! 
     979 00005760     4d20          move    a9,a0
     980 00005770     2e00          srl     16,a0
     981 00005780     0580          move    a0,@mess_cursy
         00005790 00000000! 
     982 000057b0     09e0          movi    WSF_W_P,a0
         000057c0 00000000! 
     983 000057e0     0780          move    a0,@message_palette,L
         000057f0 00000000! 
     984 00005810     09c0          movi    1003h,a0
         00005820     1003  
     985 00005830     0780          move    a0,@mess_z,L
         00005840 00000000! 
     986 00005860     0d5f          calla   print_string_with_z
         00005870 00000000! 
     987                    
     988 00005890     0960          rets
     989                    
     990                    
     991 000058a0           dot
     992 000058a0       2e          .string ".",0
     993 000058b0                   .even
     994 000058b0           zero
     995 000058b0       30          .string "0",0
     996 000058c0                   .even
     997                    
     998                            .ref    concat_string
     999                            .ref    concat_rom_string
    1000                    
    1001 000058c0            SUBRP  val_to_dec_tenths_asc
    1002 000058c0                   PUSH    a1,a2,a3,a4,a5,a6
    1003                    
    1004 000058e0     09c3          movi    10,a3
         000058f0     000a  
    1005 00005900     4c01          move    a0,a1
    1006 00005910     5a61          divu    a3,a1
    1007 00005920     4c20          move    a1,a0
    1008                    
    1009 00005930     09c3          movi    10,a3
         00005940     000a  
    1010 00005950     4c01          move    a0,a1
    1011 00005960     5a61          divu    a3,a1
    1012                    
    1013 00005970     09c2          movi    10,a2
         00005980     000a  
    1014 00005990     4c03          move    a0,a3
    1015 000059a0     6e43          modu    a2,a3
    1016                            
    1017 000059b0                   PUSH    a3
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   26

    1018 000059c0     4c20          move    a1,a0
    1019 000059d0     09c1          movi    1000,a1
         000059e0     03e8  
    1020 000059f0     0d5f          calla   dec_to_asc
         00005a00 00000000! 
    1021 00005a20     0d5f          calla   copy_string
         00005a30 00000000! 
    1022 00005a50     09e4          movi    dot,a4
         00005a60 000058a0' 
    1023 00005a80     0d5f          calla   concat_rom_string
         00005a90 00000000! 
    1024 00005ab0                   PULL    a3
    1025 00005ac0     4c60          move    a3,a0
    1026 00005ad0     ca09          jrz     vymjis_zero
    1027 00005ae0     09c1          movi    10,a1
         00005af0     000a  
    1028 00005b00     0d5f          calla   dec_to_asc
         00005b10 00000000! 
    1029 00005b30     0d5f          calla   concat_string
         00005b40 00000000! 
    1030 00005b60     c006          jruc    vymjconv_done
    1031 00005b70           vymjis_zero
    1032 00005b70     09e4          movi    zero,a4
         00005b80 000058b0' 
    1033 00005ba0     0d5f          calla   concat_rom_string
         00005bb0 00000000! 
    1034 00005bd0           vymjconv_done
    1035                    
    1036 00005bd0                   PULL    a1,a2,a3,a4,a5,a6
    1037 00005bf0     0960          rets
    1038                    
    1039                    
    1040                    
    1041 00005c00            SUBRP   draw_pinspeed_table_entry
    1042                    
    1043 00005c00                   PUSH    A7
    1044                    
    1045 00005c10                   push    a8
    1046 00005c20                   PUSH    A5
    1047 00005c30                   PUSH    A6
    1048 00005c40     4d40          move    a10,a0
    1049 00005c50     2600          sll     16,a0
    1050 00005c60     4020          ADD     A1,A0
    1051 00005c70     4d41          move    a10,a1
    1052 00005c80     2e01          srl     16,a1
    1053 00005c90     2601          sll     16,a1
    1054 00005ca0     0b21          addi    [4,0],a1
         00005cb0 00040000  
    1055 00005cd0     09c3          movi    1000H,a3
         00005ce0     1000  
    1056 00005cf0     09e4          movi    DMAWNZ,a4
         00005d00 00008002  
    1057 00005d20     09c5          movi    CLSNEUT,a5
         00005d30     0000  
    1058 00005d40     56c6          clr     a6
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   27

    1059 00005d50     56e7          clr     a7
    1060 00005d60     0d5f          calla   BEGINOBJW
         00005d70 00000000! 
    1061 00005d90                   PULL    A6
    1062 00005da0                   PULL    A5
    1063 00005db0                   pull    a8
    1064                    
    1065 00005dc0     4d07          move    a8,a7
    1066 00005dd0     0d3f          callr   RC_LONG                 ;read the score
         00005de0     0d51  
    1067 00005df0     0d5f          calla   BCDBIN
         00005e00 00000000! 
    1068 00005e20     0d3f          callr   val_to_dec_tenths_asc
         00005e30     ffa8  
    1069                    
    1070 00005e40     1840          movk    2,a0
    1071 00005e50     0580          move    a0,@mess_spacing
         00005e60 00000000! 
    1072 00005e80     5600          CLR     A0
    1073 00005e90     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         00005ea0 00000000! 
    1074 00005ec0     09e0          movi    font18_ascii,a0
         00005ed0 00000000! 
    1075 00005ef0     0780          move    a0,@message_ascii,L
         00005f00 00000000! 
    1076 00005f20     09c0          movi    10,a0
         00005f30     000a  
    1077 00005f40     0580          move    a0,@mess_space_width
         00005f50 00000000! 
    1078 00005f70     4d40          move    a10,a0
    1079 00005f80     2600          sll     16,a0
    1080 00005f90     2e00          srl     16,a0
    1081 00005fa0     40c0          add     A6,a0
    1082 00005fb0     0580          move    a0,@mess_cursx
         00005fc0 00000000! 
    1083 00005fe0     4d40          move    a10,a0
    1084 00005ff0     2e00          srl     16,a0
    1085 00006000     0580          move    a0,@mess_cursy
         00006010 00000000! 
    1086 00006030     09e0          movi    WGSF_W_P1,a0
         00006040 00000000! 
    1087 00006060     0780          move    a0,@message_palette,L
         00006070 00000000! 
    1088 00006090     0d5f          calla   print_string_R
         000060a0 00000000! 
    1089                    
    1090                            ;initials
    1091 000060c0     09e1          movi    message_buffer,a1
         000060d0 00000000! 
    1092 000060f0     4d07          move    a8,a7
    1093 00006100     0b07          addi    HS_INITS,a7
         00006110     0040  
    1094 00006120     09c2          movi    3,a2
         00006130     0003  
    1095                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   28

    1096 00006140           vvqtinitloop
    1097 00006140     0d3f          callr   RC_BYTEI
         00006150     0cfc  
    1098 00006160     8c01          movb    a0,*a1
    1099 00006170     1101          addk    8,a1
    1100 00006180     3ca2          dsj     a2,vvqtinitloop
    1101                    
    1102 00006190     0d3f          callr   RC_BYTEI
         000061a0     0cf7  
    1103 000061b0                   push    a0
    1104                    
    1105 000061c0     5600          clr     a0                      ;null-terminate it
    1106 000061d0     8c01          movb    a0,*a1
    1107                    
    1108 000061e0     09e0          movi    osgemd_ascii,a0
         000061f0 00000000! 
    1109 00006210     0780          move    a0,@message_ascii,L
         00006220 00000000! 
    1110 00006240     09c0          movi    10,a0
         00006250     000a  
    1111 00006260     0580          move    a0,@mess_space_width
         00006270 00000000! 
    1112 00006290     5600          clr     a0
    1113 000062a0     0580          move    a0,@mess_spacing
         000062b0 00000000! 
    1114 000062d0     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         000062e0 00000000! 
    1115 00006300     4d40          move    a10,a0
    1116 00006310     2600          sll     16,a0
    1117 00006320     2e00          srl     16,a0
    1118 00006330     0b00          addi    17h,a0
         00006340     0017  
    1119 00006350     0580          move    a0,@mess_cursx
         00006360 00000000! 
    1120 00006380     4d40          move    a10,a0
    1121 00006390     2e00          srl     16,a0
    1122 000063a0     0580          move    a0,@mess_cursy
         000063b0 00000000! 
    1123 000063d0     078b          move    a11,@message_palette,L
         000063e0 00000000! 
    1124 00006400     0d5f          calla   print_string_C
         00006410 00000000! 
    1125                    
    1126 00006430     4d20          move    a9,a0
    1127 00006440     2600          sll     16,a0
    1128 00006450     0d00          subi    [8,0],a0
         00006460 fff7ffff  
    1129 00006480     4d21          move    a9,a1
    1130 00006490     2e01          srl     16,a1
    1131 000064a0     2601          sll     16,a1
    1132 000064b0     0b21          addi    [2,0],a1
         000064c0 00020000  
    1133 000064e0     09e2          movi    SPEAR,a2
         000064f0 00000000! 
    1134 00006510     09c3          movi    1000H,a3
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   29

         00006520     1000  
    1135 00006530     09e4          movi    DMAWNZ,a4
         00006540 00008002  
    1136 00006560     09c5          movi    CLSNEUT,a5
         00006570     0000  
    1137 00006580     56c6          clr     a6
    1138 00006590     56e7          clr     a7
    1139 000065a0     0d5f          calla   BEGINOBJW
         000065b0 00000000! 
    1140                    
    1141 000065d0     4d20          move    a9,a0
    1142 000065e0     2600          sll     16,a0
    1143 000065f0     0b20          addi    [13,0],a0
         00006600 000d0000  
    1144 00006620     4d21          move    a9,a1
    1145 00006630     2e01          srl     16,a1
    1146 00006640     2601          sll     16,a1
    1147 00006650     0b21          addi    [2,0],a1
         00006660 00020000  
    1148 00006680     09e2          movi    SPEAR,a2
         00006690 00000000! 
    1149 000066b0     09c3          movi    1001H,a3
         000066c0     1001  
    1150 000066d0     09e4          movi    DMAWNZ,a4
         000066e0 00008002  
    1151 00006700     09c5          movi    CLSNEUT,a5
         00006710     0000  
    1152 00006720     56c6          clr     a6
    1153 00006730     56e7          clr     a7
    1154 00006740     0d5f          calla   BEGINOBJW
         00006750 00000000! 
    1155                    
    1156 00006770                   pull    a0
    1157                    
    1158 00006780     0be0          SUBI    "A",a0
         00006790     ffbe  
    1159 000067a0     24a0          sll     5,a0
    1160 000067b0     0b20          addi    WHICH_NAMES,A0
         000067c0 00007d30' 
    1161 000067e0     8602          MOVE    *A0,A2,L
    1162                    
    1163 000067f0     4d20          move    a9,a0
    1164 00006800     2600          sll     16,a0
    1165 00006810     0b20          addi    [302,0],a0
         00006820 012e0000  
    1166 00006840     4d21          move    a9,a1
    1167 00006850     2e01          srl     16,a1
    1168 00006860     2601          sll     16,a1
    1169 00006870     0b21          addi    [7,0],a1
         00006880 00070000  
    1170 000068a0     09c3          movi    1001H,a3
         000068b0     1001  
    1171 000068c0     09e4          movi    DMAWNZ,a4
         000068d0 00008002  
    1172 000068f0     09c5          movi    CLSNEUT,a5
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   30

         00006900     0000  
    1173 00006910     56c6          clr     a6
    1174 00006920     56e7          clr     a7
    1175 00006930     0d5f          calla   BEGINOBJW
         00006940 00000000! 
    1176                    
    1177 00006960                   PULL    A7
    1178                    
    1179 00006970     09c0          movi    "#",a0
         00006980     0023  
    1180 00006990     05e0          movb    a0,@message_buffer
         000069a0 00000000! 
    1181 000069c0     1101          addk    8,a1
    1182                    
    1183 000069d0     1940          MOVK    10,A0
    1184 000069e0     44e0          SUB     A7,A0
    1185 000069f0     0d5f          calla   BINBCD                  ;dec number in A0
         00006a00 00000000! 
    1186 00006a20     4c01          move    a0,a1
    1187 00006a30     09e2          movi    message_buffer+8,a2
         00006a40 00000008! 
    1188 00006a60     0d5f          calla   dec_to_asc_new_entry
         00006a70 00000000! 
    1189                    
    1190 00006a90     5600          clr     a0
    1191 00006aa0     9002          move    a0,*a2+
    1192                    
    1193 00006ab0     09e0          movi    wsf14_ascii,a0
         00006ac0 00000000! 
    1194 00006ae0     0780          move    a0,@message_ascii,L
         00006af0 00000000! 
    1195 00006b10     09c0          movi    7,a0
         00006b20     0007  
    1196 00006b30     0580          move    a0,@mess_space_width
         00006b40 00000000! 
    1197 00006b60     5600          clr     a0
    1198 00006b70     0580          move    a0,@mess_spacing
         00006b80 00000000! 
    1199 00006ba0     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         00006bb0 00000000! 
    1200 00006bd0     4d20          move    a9,a0
    1201 00006be0     2600          sll     16,a0
    1202 00006bf0     2e00          srl     16,a0
    1203 00006c00     0580          move    a0,@mess_cursx
         00006c10 00000000! 
    1204 00006c30     4d20          move    a9,a0
    1205 00006c40     2e00          srl     16,a0
    1206 00006c50     0580          move    a0,@mess_cursy
         00006c60 00000000! 
    1207 00006c80     09e0          movi    WSF_W_P,a0
         00006c90 00000000! 
    1208 00006cb0     0780          move    a0,@message_palette,L
         00006cc0 00000000! 
    1209 00006ce0     09c0          movi    1003h,a0
         00006cf0     1003  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   31

    1210 00006d00     0780          move    a0,@mess_z,L
         00006d10 00000000! 
    1211 00006d30     0d5f          calla   print_string_with_z
         00006d40 00000000! 
    1212                    
    1213 00006d60     0960          rets
    1214                    
    1215 00006d70            SUBRP  draw_winstreak_table_entry
    1216                    
    1217 00006d70                   PUSH    A7
    1218                    
    1219 00006d80                   push    a8
    1220 00006d90                   PUSH    A5
    1221 00006da0                   PUSH    A6
    1222 00006db0     4d40          move    a10,a0
    1223 00006dc0     2600          sll     16,a0
    1224 00006dd0     4020          ADD     A1,A0
    1225 00006de0     4d41          move    a10,a1
    1226 00006df0     2e01          srl     16,a1
    1227 00006e00     2601          sll     16,a1
    1228 00006e10     0b21          addi    [4,0],a1
         00006e20 00040000  
    1229 00006e40     09c3          movi    1000H,a3
         00006e50     1000  
    1230 00006e60     09e4          movi    DMAWNZ,a4
         00006e70 00008002  
    1231 00006e90     09c5          movi    CLSNEUT,a5
         00006ea0     0000  
    1232 00006eb0     56c6          clr     a6
    1233 00006ec0     56e7          clr     a7
    1234 00006ed0     0d5f          calla   BEGINOBJW
         00006ee0 00000000! 
    1235 00006f00                   PULL    A6
    1236 00006f10                   PULL    A5
    1237 00006f20                   pull    a8
    1238                    
    1239 00006f30     4d07          move    a8,a7
    1240 00006f40     0d3f          callr   RC_LONG                 ;read the score
         00006f50     0c3a  
    1241 00006f60     0d5f          calla   BCDBIN
         00006f70 00000000! 
    1242 00006f90     09e1          movi    9999999,a1
         00006fa0 0098967f  
    1243 00006fc0     0d5f          calla   dec_to_asc              ;convert to ASCII
         00006fd0 00000000! 
    1244 00006ff0     5600          CLR     A0
    1245 00007000     0580          move    a0,@mess_spacing
         00007010 00000000! 
    1246 00007030     0925          call    a5
    1247                    
    1248 00007040     5600          clr     a0
    1249 00007050     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         00007060 00000000! 
    1250 00007080     09e0          movi    font18_ascii,a0
         00007090 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   32

    1251 000070b0     0780          move    a0,@message_ascii,L
         000070c0 00000000! 
    1252 000070e0     09c0          movi    10,a0
         000070f0     000a  
    1253 00007100     0580          move    a0,@mess_space_width
         00007110 00000000! 
    1254 00007130     4d40          move    a10,a0
    1255 00007140     2600          sll     16,a0
    1256 00007150     2e00          srl     16,a0
    1257 00007160     40c0          add     A6,a0
    1258 00007170     0580          move    a0,@mess_cursx
         00007180 00000000! 
    1259 000071a0     4d40          move    a10,a0
    1260 000071b0     2e00          srl     16,a0
    1261 000071c0     0580          move    a0,@mess_cursy
         000071d0 00000000! 
    1262 000071f0     09e0          movi    WGSF_W_P1,a0
         00007200 00000000! 
    1263 00007220     0780          move    a0,@message_palette,L
         00007230 00000000! 
    1264 00007250     0d5f          calla   print_string_C
         00007260 00000000! 
    1265                    
    1266                            ;initials
    1267 00007280     09e1          movi    work_buffer,a1
         00007290 000000b0- 
    1268 000072b0     4d07          move    a8,a7
    1269 000072c0     0b07          addi    HS_INITS,a7
         000072d0     0040  
    1270 000072e0     09c2          movi    3,a2
         000072f0     0003  
    1271                    
    1272 00007300           olbxinitloop
    1273 00007300     0d3f          callr   RC_BYTEI
         00007310     0be0  
    1274 00007320     8c01          movb    a0,*a1
    1275 00007330     1101          addk    8,a1
    1276 00007340     3ca2          dsj     a2,olbxinitloop
    1277                    
    1278 00007350     1863          movk    3,a3
    1279 00007360     0d3f          callr   strip_white
         00007370     fcd1  
    1280                    
    1281 00007380     5600          clr     a0                      ;null-terminate it
    1282 00007390     8c01          movb    a0,*a1
    1283                    
    1284 000073a0     09e0          movi    osgemd_ascii,a0
         000073b0 00000000! 
    1285 000073d0     0780          move    a0,@message_ascii,L
         000073e0 00000000! 
    1286 00007400     09c0          movi    10,a0
         00007410     000a  
    1287 00007420     0580          move    a0,@mess_space_width
         00007430 00000000! 
    1288 00007450     5600          clr     a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   33

    1289 00007460     0580          move    a0,@mess_spacing
         00007470 00000000! 
    1290 00007490     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         000074a0 00000000! 
    1291 000074c0     4d40          move    a10,a0
    1292 000074d0     2600          sll     16,a0
    1293 000074e0     2e00          srl     16,a0
    1294 000074f0     0b00          addi    17h,a0
         00007500     0017  
    1295 00007510     0580          move    a0,@mess_cursx
         00007520 00000000! 
    1296 00007540     4d40          move    a10,a0
    1297 00007550     2e00          srl     16,a0
    1298 00007560     0580          move    a0,@mess_cursy
         00007570 00000000! 
    1299 00007590     078b          move    a11,@message_palette,L
         000075a0 00000000! 
    1300 000075c0     0d5f          calla   print_string_C
         000075d0 00000000! 
    1301                    
    1302 000075f0     4d20          move    a9,a0
    1303 00007600     2600          sll     16,a0
    1304 00007610     0d00          subi    [8,0],a0
         00007620 fff7ffff  
    1305 00007640     4d21          move    a9,a1
    1306 00007650     2e01          srl     16,a1
    1307 00007660     2601          sll     16,a1
    1308 00007670     0b21          addi    [2,0],a1
         00007680 00020000  
    1309 000076a0     09e2          movi    SPEAR,a2
         000076b0 00000000! 
    1310 000076d0     09c3          movi    1000H,a3
         000076e0     1000  
    1311 000076f0     09e4          movi    DMAWNZ,a4
         00007700 00008002  
    1312 00007720     09c5          movi    CLSNEUT,a5
         00007730     0000  
    1313 00007740     56c6          clr     a6
    1314 00007750     56e7          clr     a7
    1315 00007760     0d5f          calla   BEGINOBJW
         00007770 00000000! 
    1316                    
    1317 00007790     4d20          move    a9,a0
    1318 000077a0     2600          sll     16,a0
    1319 000077b0     0d00          SUBi    [10,0],a0
         000077c0 fff5ffff  
    1320 000077e0     4d21          move    a9,a1
    1321 000077f0     2e01          srl     16,a1
    1322 00007800     2601          sll     16,a1
    1323 00007810     0b21          addi    [2,0],a1
         00007820 00020000  
    1324 00007840     09e2          movi    BARBUTT,a2
         00007850 00000000! 
    1325 00007870     09c3          movi    1001H,a3
         00007880     1001  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   34

    1326 00007890     09e4          movi    DMAWNZ,a4
         000078a0 00008002  
    1327 000078c0     09c5          movi    CLSNEUT,a5
         000078d0     0000  
    1328 000078e0     56c6          clr     a6
    1329 000078f0     56e7          clr     a7
    1330 00007900     09f0          MOVI    DPLT_R_P,B0
         00007910 00000000! 
    1331 00007930     0d5f          calla   BEGINOBJWP
         00007940 00000000! 
    1332 00007960                   PULL    A7
    1333                    
    1334                    
    1335 00007970     1a60          MOVK    19,A0
    1336 00007980     44e0          SUB     A7,A0
    1337 00007990     0d5f          calla   BINBCD                  ;dec number in A0
         000079a0 00000000! 
    1338 000079c0     4c01          move    a0,a1
    1339 000079d0     09e2          movi    message_buffer,a2
         000079e0 00000000! 
    1340 00007a00     0d5f          calla   dec_to_asc_new_entry
         00007a10 00000000! 
    1341                    
    1342 00007a30     5600          clr     a0
    1343 00007a40     9002          move    a0,*a2+
    1344                    
    1345 00007a50     09e0          movi    wsf14_ascii,a0
         00007a60 00000000! 
    1346 00007a80     0780          move    a0,@message_ascii,L
         00007a90 00000000! 
    1347 00007ab0     09c0          movi    7,a0
         00007ac0     0007  
    1348 00007ad0     0580          move    a0,@mess_space_width
         00007ae0 00000000! 
    1349 00007b00     5600          clr     a0
    1350 00007b10     0580          move    a0,@mess_spacing
         00007b20 00000000! 
    1351 00007b40     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         00007b50 00000000! 
    1352 00007b70     4d20          move    a9,a0
    1353 00007b80     2600          sll     16,a0
    1354 00007b90     2e00          srl     16,a0
    1355 00007ba0     0be0          subi    4,a0
         00007bb0     fffb  
    1356 00007bc0     0580          move    a0,@mess_cursx
         00007bd0 00000000! 
    1357 00007bf0     4d20          move    a9,a0
    1358 00007c00     2e00          srl     16,a0
    1359 00007c10     0580          move    a0,@mess_cursy
         00007c20 00000000! 
    1360 00007c40     09e0          movi    WSF_W_P,a0
         00007c50 00000000! 
    1361 00007c70     0780          move    a0,@message_palette,L
         00007c80 00000000! 
    1362 00007ca0     09c0          movi    1003h,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   35

         00007cb0     1003  
    1363 00007cc0     0780          move    a0,@mess_z,L
         00007cd0 00000000! 
    1364 00007cf0     0d5f          calla   print_string_with_z
         00007d00 00000000! 
    1365                    
    1366 00007d20     0960          rets
    1367                    
    1368 00007d30           WHICH_NAMES
    1369 00007d30 00000000!         .LONG   HART
    1370 00007d50 00000000!         .LONG   RAZOR
    1371 00007d70 00000000!         .LONG   UNDER
    1372 00007d90 00000000!         .LONG   YOKO
    1373 00007db0 00000000!         .LONG   SHAWN
    1374 00007dd0 00000000!         .LONG   BAMBAM
    1375 00007df0 00000000!         .LONG   DOINK
    1376 00007e10 00000000          .LONG   0
    1377 00007e30 00000000!         .LONG   LEX
    1378                    
    1379 00007e50           which_crouton
    1380 00007e50 00000000!         .long   CRUT_BH
    1381 00007e70 00000000!         .long   CRUT_RR
    1382 00007e90 00000000!         .long   CRUT_UN
    1383 00007eb0 00000000!         .long   CRUT_YK
    1384 00007ed0 00000000!         .long   CRUT_SM
    1385 00007ef0 00000000!         .long   CRUT_BM
    1386 00007f10 00000000!         .long   CRUT_DK
    1387 00007f30 00000000!         .long   CRUT_LX
    1388                    
    1389 00007f50            SUBR   draw_each_inter_table_entry
    1390                    
    1391 00007f50     09c7          movi    HS_SIZE,a7
         00007f60     00a0  
    1392 00007f70     5ee9          mpyu    a7,a9
    1393 00007f80     0b29          addi    INTER_TAB_ORIGIN,a9
         00007f90 0140aec0  
    1394 00007fb0     4d28          move    a9,a8
    1395                    
    1396 00007fc0     09e9          movi    [126H,8],a9
         00007fd0 01260008  
    1397 00007ff0     09ea          movi    [13BH,10],a10
         00008000 013b000a  
    1398                    
    1399 00008020     09eb          movi    GOLD,a11
         00008030 00000000! 
    1400 00008050     09c0          movi    AUD_INTER,A0
         00008060     005a  
    1401 00008070     0d5f          calla   GET_AUD
         00008080 00000000! 
    1402 000080a0     05a5          MOVE    @starting_num,A5
         000080b0 00000000- 
    1403 000080d0     4825          cmp     a1,a5
    1404 000080e0     cb03          jrne    olbxgold2
    1405 000080f0     09eb          movi    BLUE,a11
         00008100 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   36

    1406 00008120           olbxgold2
    1407 00008120     09c1          movi    INTER_TAB_SELECT,a1     ;set the read page
         00008130     0003  
    1408 00008140     0d3f          callr   SET_PAGE
         00008150     0a16  
    1409 00008160     09e5          movi    special_copy,a5
         00008170 00003ed0' 
    1410 00008190     c024          JRUC    draw_beaten_table_entry
    1411                    
    1412 000081a0            SUBR   draw_each_beaten_table_entry
    1413                    
    1414 000081a0     09c7          movi    HS_SIZE,a7
         000081b0     00a0  
    1415 000081c0     5ee9          mpyu    a7,a9
    1416 000081d0     0b29          addi    BEATEN_TAB_ORIGIN,a9
         000081e0 014098c0  
    1417 00008200     4d28          move    a9,a8
    1418                    
    1419 00008210     09e9          movi    [126H,8],a9
         00008220 01260008  
    1420 00008240     09ea          movi    [13BH,10],a10
         00008250 013b000a  
    1421                    
    1422 00008270     09eb          movi    GOLD,a11
         00008280 00000000! 
    1423 000082a0     09c0          movi    AUD_BEATEN,A0
         000082b0     0059  
    1424 000082c0     0d5f          calla   GET_AUD
         000082d0 00000000! 
    1425 000082f0     05a5          MOVE    @starting_num,A5
         00008300 00000000- 
    1426 00008320     4825          cmp     a1,a5
    1427 00008330     cb03          jrne    olbxgold
    1428 00008340     09eb          movi    BLUE,a11
         00008350 00000000! 
    1429 00008370           olbxgold
    1430 00008370     09c1          movi    BEATEN_TAB_SELECT,a1    ;set the read page
         00008380     0003  
    1431 00008390     0d3f          callr   SET_PAGE
         000083a0     09f1  
    1432 000083b0     09e5          movi    special_copy,a5
         000083c0 00003ed0' 
    1433                    
    1434                    
    1435 000083e0            SUBR   draw_beaten_table_entry
    1436                    
    1437 000083e0                   push    a7
    1438 000083f0                   push    a9,a10
    1439 00008410     4d07          move    a8,a7
    1440 00008420     0d3f          callr   RC_LONG                 ;read the score
         00008430     0aec  
    1441 00008440     4c09          move    a0,a9
    1442                    
    1443 00008450     cb04          jrnz    no_reset_blank
    1444 00008460     1820          movk    1,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   37

    1445 00008470     0580          move    a0,@not_blank
         00008480 00000090- 
    1446 000084a0           no_reset_blank
    1447                    
    1448 000084a0     190a          movk    8,a10
    1449 000084b0     5663          clr     a3
    1450 000084c0                   pull    a1
    1451 000084d0                   push    a1
    1452 000084e0     4c20          move    a1,a0
    1453 000084f0     2600          sll     16,a0
    1454 00008500     5694          clr     b4
    1455 00008510     0b21          addi    [2,0],a1
         00008520 00020000  
    1456 00008540           next_icon
    1457 00008540     2fe9          srl     1,a9
    1458 00008550     c91f          jrnc    no_icon
    1459 00008560     098f          mmtm    sp,a0,a1,a3,a8,a11
         00008570     d090  
    1460 00008580     4c64          move    a3,a4
    1461 00008590     24a4          sll     5,a4
    1462 000085a0     0b24          addi    which_crouton,a4
         000085b0 00007e50' 
    1463 000085d0     8682          move    *a4,a2,L
    1464 000085e0     09c3          movi    1000H,a3
         000085f0     1000  
    1465 00008600     09e4          movi    DMAWNZ,a4
         00008610 00008002  
    1466 00008630     09c5          movi    CLSNEUT,a5
         00008640     0000  
    1467 00008650     56c6          clr     a6
    1468 00008660     56e7          clr     a7
    1469 00008670     0d5f          calla   BEGINOBJW
         00008680 00000000! 
    1470 000086a0     09e3          movi    01000100h,a3
         000086b0 01000100  
    1471 000086d0     b268          move    a3,*a8(OSCALE),L
         000086e0     0240  
    1472 000086f0     09af          mmfm    sp,a0,a1,a3,a8,a11
         00008700     090b  
    1473 00008710     0b20          addi    [30h,0],a0
         00008720 00300000  
    1474 00008740     1034          inc     b4
    1475 00008750           no_icon
    1476 00008750     2fa9          srl     3,a9
    1477 00008760     1023          inc     a3
    1478 00008770     142a          dec     a10
    1479 00008780     cbdb          jrnz    next_icon
    1480                    
    1481 00008790     098f          mmtm    sp,a0,a1,a3,a8,a11
         000087a0     d090  
    1482 000087b0     09d5          movi    8,b5
         000087c0     0008  
    1483 000087d0     4495          sub     b4,b5
    1484 000087e0     ca1c          jrz     rkssno_dots
    1485 000087f0     4eba          move    b5,a10
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   38

    1486 00008800     0b20          addi    [10,0],a0
         00008810 000a0000  
    1487 00008830           next_dot
    1488 00008830     09e2          movi    OSGEMD_DOT,a2
         00008840 00000000! 
    1489 00008860     09c3          movi    1000H,a3
         00008870     1000  
    1490 00008880     09e4          movi    DMAWNZ,a4
         00008890 00008002  
    1491 000088b0     09c5          movi    CLSNEUT,a5
         000088c0     0000  
    1492 000088d0     56c6          clr     a6
    1493 000088e0     56e7          clr     a7
    1494 000088f0                   push    a0,a1
    1495 00008910     0d5f          calla   BEGINOBJW
         00008920 00000000! 
    1496 00008940                   pull    a0,a1
    1497 00008960     0b20          addi    [30h,0],a0
         00008970 00300000  
    1498 00008990     142a          dec     a10
    1499 000089a0     cbe8          jrnz    next_dot
    1500 000089b0           rkssno_dots
    1501 000089b0     09af          mmfm    sp,a0,a1,a3,a8,a11
         000089c0     090b  
    1502                    
    1503 000089d0                   pull    a9,a10
    1504                    
    1505                            ;initials
    1506 000089f0           do_just_init
    1507 000089f0     09e1          movi    message_buffer,a1
         00008a00 00000000! 
    1508 00008a20     4d07          move    a8,a7
    1509 00008a30     0b07          addi    HS_INITS,a7
         00008a40     0040  
    1510 00008a50     09c2          movi    5,a2
         00008a60     0005  
    1511                    
    1512 00008a70           rkssinitloop
    1513 00008a70     0d3f          callr   RC_BYTEI
         00008a80     0a69  
    1514 00008a90     8c01          movb    a0,*a1
    1515 00008aa0     1101          addk    8,a1
    1516 00008ab0     3ca2          dsj     a2,rkssinitloop
    1517                    
    1518 00008ac0     5600          clr     a0                      ;null-terminate it
    1519 00008ad0     8c01          movb    a0,*a1
    1520                    
    1521 00008ae0     09e0          movi    osgemd_ascii,a0
         00008af0 00000000! 
    1522 00008b10     0780          move    a0,@message_ascii,L
         00008b20 00000000! 
    1523 00008b40     09c0          movi    10,a0
         00008b50     000a  
    1524 00008b60     0580          move    a0,@mess_space_width
         00008b70 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   39

    1525 00008b90     5600          clr     a0
    1526 00008ba0     0580          move    a0,@mess_spacing
         00008bb0 00000000! 
    1527 00008bd0     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         00008be0 00000000! 
    1528 00008c00     4d20          move    a9,a0
    1529 00008c10     2600          sll     16,a0
    1530 00008c20     2e00          srl     16,a0
    1531 00008c30     0b00          addi    50,a0
         00008c40     0032  
    1532 00008c50     0580          move    a0,@mess_cursx
         00008c60 00000000! 
    1533 00008c80     4d20          move    a9,a0
    1534 00008c90     2e00          srl     16,a0
    1535 00008ca0     0580          move    a0,@mess_cursy
         00008cb0 00000000! 
    1536 00008cd0     078b          move    a11,@message_palette,L
         00008ce0 00000000! 
    1537 00008d00     09c0          movi    1003h,a0
         00008d10     1003  
    1538 00008d20     0780          move    a0,@mess_z,L
         00008d30 00000000! 
    1539 00008d50     0d5f          calla   print_string_with_z
         00008d60 00000000! 
    1540                    
    1541 00008d80                   push    a1
    1542 00008d90     4d20          move    a9,a0
    1543 00008da0     2600          sll     16,a0
    1544 00008db0     0d00          subi    [8,0],a0
         00008dc0 fff7ffff  
    1545 00008de0     4d21          move    a9,a1
    1546 00008df0     2e01          srl     16,a1
    1547 00008e00     2601          sll     16,a1
    1548 00008e10     0b21          addi    [2,0],a1
         00008e20 00020000  
    1549 00008e40     09e2          movi    SPEAR,a2
         00008e50 00000000! 
    1550 00008e70     09c3          movi    1000H,a3
         00008e80     1000  
    1551 00008e90     09e4          movi    DMAWNZ,a4
         00008ea0 00008002  
    1552 00008ec0     09c5          movi    CLSNEUT,a5
         00008ed0     0000  
    1553 00008ee0     56c6          clr     a6
    1554 00008ef0     56e7          clr     a7
    1555 00008f00     0d5f          calla   BEGINOBJW
         00008f10 00000000! 
    1556                    
    1557 00008f30     4d20          move    a9,a0
    1558 00008f40     2600          sll     16,a0
    1559 00008f50     0b20          addi    [13,0],a0
         00008f60 000d0000  
    1560 00008f80     4d21          move    a9,a1
    1561 00008f90     2e01          srl     16,a1
    1562 00008fa0     2601          sll     16,a1
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   40

    1563 00008fb0     0b21          addi    [2,0],a1
         00008fc0 00020000  
    1564 00008fe0     09e2          movi    SPEAR,a2
         00008ff0 00000000! 
    1565 00009010     09c3          movi    1001H,a3
         00009020     1001  
    1566 00009030     09e4          movi    DMAWNZ,a4
         00009040 00008002  
    1567 00009060     09c5          movi    CLSNEUT,a5
         00009070     0000  
    1568 00009080     56c6          clr     a6
    1569 00009090     56e7          clr     a7
    1570 000090a0     0d5f          calla   BEGINOBJW
         000090b0 00000000! 
    1571 000090d0                   pull    a1
    1572                    
    1573 000090e0                   pull    a7
    1574                    
    1575 000090f0     09c0          movi    "#",a0
         00009100     0023  
    1576 00009110     05e0          movb    a0,@message_buffer
         00009120 00000000! 
    1577 00009140     1101          addk    8,a1
    1578 00009150     05a0          move    @starting_num,a0
         00009160 00000000- 
    1579                    
    1580 00009180     0d5f          calla   BINBCD                  ;dec number in A0
         00009190 00000000! 
    1581 000091b0     4c01          move    a0,a1
    1582 000091c0     09e2          movi    message_buffer+8,a2
         000091d0 00000008! 
    1583 000091f0     0d5f          calla   dec_to_asc_new_entry
         00009200 00000000! 
    1584                    
    1585 00009220     5600          clr     a0
    1586 00009230     9002          move    a0,*a2+
    1587                    
    1588 00009240     09e0          movi    wsf14_ascii,a0
         00009250 00000000! 
    1589 00009270     0780          move    a0,@message_ascii,L
         00009280 00000000! 
    1590 000092a0     09c0          movi    7,a0
         000092b0     0007  
    1591 000092c0     0580          move    a0,@mess_space_width
         000092d0 00000000! 
    1592 000092f0     5600          clr     a0
    1593 00009300     0580          move    a0,@mess_spacing
         00009310 00000000! 
    1594 00009330     0580          MOVE    A0,@IGNORE_CHAR_WIDTH
         00009340 00000000! 
    1595 00009360     4d20          move    a9,a0
    1596 00009370     2600          sll     16,a0
    1597 00009380     2e00          srl     16,a0
    1598 00009390     0580          move    a0,@mess_cursx
         000093a0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   41

    1599 000093c0     4d20          move    a9,a0
    1600 000093d0     2e00          srl     16,a0
    1601 000093e0     0580          move    a0,@mess_cursy
         000093f0 00000000! 
    1602 00009410     09e0          movi    WSF_W_P,a0
         00009420 00000000! 
    1603 00009440     0780          move    a0,@message_palette,L
         00009450 00000000! 
    1604 00009470     09c0          movi    1003h,a0
         00009480     1003  
    1605 00009490     0780          move    a0,@mess_z,L
         000094a0 00000000! 
    1606 000094c0     0d5f          calla   print_string_with_z
         000094d0 00000000! 
    1607                    
    1608 000094f0     0960          rets
    1609                    
    1610                    
    1611                    
    1612 00009500            SUBR   hscore_colcyc
    1613                    
    1614 00009500     09e8          movi    [10,7],a8               ;START AT COLOR 10, CYCLE 7 COLORS
         00009510 000a0007  
    1615 00009530     09e9          movi    BLUE,a9                 ;PAL NAME
         00009540 00000000! 
    1616 00009560     09ea          movi    COLTAB2,a10             ;TABLE TO CYCLE WITH
         00009570 00009630' 
    1617 00009590     186b          movk    3,a11                   ;RATE OF CYCLE IN TICKS
    1618 000095a0                   CREATE  CYCPID,CYCLE_TABLE      ;START PROCESS TO DO CYCLE
    1619                    
    1620 00009620     0960          rets
    1621                    
    1622 00009630           COLTAB2
    1623 00009630     033e     .word   0033eh,0135fh,02b7fh,03f9fh,053bfh,06bdfh,07fffh
    1624 000096a0     6bdf     .word   06bdfh,053bfh,03f9fh,0277fh,0135fh,00f3fh,00b1fh,002ffh
    1625 00009720     02df     .word   002dfh,002ffh,002ffh,0031fh,0031fh,0033fh,002fdh,002dch
    1626 000097a0     029a     .word   0029ah,00259h,00237h,00258h,00259h,0027ah,0029bh,002bch
    1627 00009820     025a     .word   0025ah,001f7h,001b5h,00172h,00194h,001d6h,00218h,0065ah
    1628 000098a0     069c     .word   0069ch,00ebch,01addh,022fdh,02f1eh,0375eh,0437fh,04f9fh
    1629 00009920     3b7f     .word   03b7fh,0275fh,0133fh,0033fh,002feh,002ddh,002bch,0029bh
    1630 000099a0     025a     .word   0025ah,00239h,00218h,00259h,0027bh,002bch,002feh,0033fh
    1631                    
    1632 00009a20     033e     .word   0033eh,0135fh,02b7fh,03f9fh,053bfh,06bdfh,07fffh
    1633 00009a90     6bdf     .word   06bdfh,053bfh,03f9fh,0277fh,0135fh,00f3fh,00b1fh,002ffh
    1634                    
    1635 00009b10            SUBR   hscore_colcyc2
    1636                    
    1637 00009b10     09e8          movi    [10,7],a8               ;START AT COLOR 10, CYCLE 7 COLORS
         00009b20 000a0007  
    1638 00009b40     09e9          movi    RUBYPAL,a9                      ;PAL NAME
         00009b50 00000000! 
    1639 00009b70     09ea          movi    COLTAB3,a10             ;TABLE TO CYCLE WITH
         00009b80 00009c40' 
    1640 00009ba0     186b          movk    3,a11                   ;RATE OF CYCLE IN TICKS
    1641 00009bb0                   CREATE  CYCPID,CYCLE_TABLE      ;START PROCESS TO DO CYCLE
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   42

    1642                    
    1643 00009c30     0960          rets
    1644                    
    1645 00009c40           COLTAB3
    1646                    
    1647 00009c40     7c01     .word   07c01h,07c63h,07d08h,07d8ch,07e10h,07eb5h,07f39h
    1648 00009cb0     7e94     .word   07e94h,07e10h,07d6bh,07ce7h,07c42h,07421h,06c00h,06400h
    1649 00009d30     5c00     .word   05c00h,06400h,06800h,07000h,07400h,07c00h,07400h,06c00h
    1650 00009db0     6000     .word   06000h,05800h,05c00h,06000h,06400h,06800h,06c00h,07000h
    1651 00009e30     6400     .word   06400h,05c00h,05000h,04800h,05000h,05800h,06000h,06c00h
    1652 00009eb0     6c21     .word   06c21h,07063h,070c6h,07508h,0754ah,079adh,079efh,07e52h
    1653 00009f30     7def     .word   07defh,07dadh,0794ah,078e7h,07884h,07842h,07800h,07000h
    1654 00009fb0     6c00     .word   06c00h,06400h,06000h,06400h,06c00h,07000h,07800h,07c00h
    1655                    
    1656 0000a030     7c01     .word   07c01h,07c63h,07d08h,07d8ch,07e10h,07eb5h,07f39h
    1657 0000a0a0     7e94     .word   07e94h,07e10h,07d6bh,07ce7h,07c42h,07421h,06c00h,06400h
    1658                    
    1659                    
    1660                    
    1661 0000a120                   STRUCTPD
    1662 0000a120                   LONG    oagscursorimg           ;UHL cursor *img
    1663 0000a120                   LONG    oagshiliteimg           ;UHL hilite letter *img
    1664 0000a120                   WORD    oagsstick                       ;UHW stick to read
    1665 0000a120                   LONG    oagswhich_tab
    1666 0000a120                   LONG    oagswhich_entry
    1667 0000a120                   LONG    oagswhich_level
    1668 0000a120                   WORD    oagswhich_aud
    1669                    
    1670                    
    1671                    
    1672 0000a120           WHICH_TO_OR
    1673 0000a120 00000001          .LONG   1H
    1674 0000a140 00000010          .LONG   10H
    1675 0000a160 00000100          .LONG   100H
    1676 0000a180 00001000          .LONG   1000H
    1677 0000a1a0 00010000          .LONG   10000H
    1678 0000a1c0 00100000          .LONG   100000H
    1679 0000a1e0 01000000          .LONG   1000000H
    1680 0000a200 10000000          .LONG   10000000H
    1681                    
    1682 0000a220           DO_BEATEN_GAME
    1683 0000a220     4d41          move    a10,a1
    1684 0000a230     2481          sll     4,a1
    1685 0000a240     0b21          addi    which_player,a1
         0000a250 00000000! 
    1686 0000a270     8429          move    *a1,a9
    1687 0000a280     0b49          CMPI    8,A9
         0000a290     fff7  
    1688 0000a2a0     cb01          JRNE    AVOID_NUMBER_8
    1689 0000a2b0     1429          DEC     A9
    1690 0000a2c0           AVOID_NUMBER_8
    1691 0000a2c0     24a9          SLL     5,A9
    1692 0000a2d0     0b29          ADDI    WHICH_TO_OR,A9
         0000a2e0 0000a120' 
    1693 0000a300     8729          MOVE    *A9,A9,L
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   43

    1694                    
    1695 0000a310     4d41          move    a10,a1          ;clear out intials for end game table
    1696 0000a320     4c22          MOVE    a1,a2
    1697 0000a330     24a1          sll     5,a1
    1698 0000a340     2482          sll     4,a2
    1699 0000a350     4041          add     a2,a1
    1700 0000a360     0b21          addi    entered_inits,a1
         0000a370 00000010- 
    1701 0000a390     576b          clr     a11
    1702 0000a3a0     9361          move    a11,*a1+,L
    1703 0000a3b0     8d61          movb    a11,*a1
    1704                    
    1705 0000a3c0     09eb          movi    FIND_LOW_TABLE_LEVEL,a11
         0000a3d0 00011c00' 
    1706 0000a3f0     09e5          movi    BEATEN_TAB,a5
         0000a400 00000140' 
    1707 0000a420     09c3          movi    AUD_BEATEN,A3
         0000a430     0059  
    1708 0000a440     05a1          MOVE    @belt_type,a1
         0000a450 00000000! 
    1709 0000a470     cb05          jrnz    found_right_table
    1710 0000a480     09e5          movi    INTER_TAB,A5
         0000a490 000001c0' 
    1711 0000a4b0     09c3          movi    AUD_INTER,A3
         0000a4c0     005a  
    1712 0000a4d0           found_right_table
    1713 0000a4d0     09ea          movi    enter_initials_beaten,a10
         0000a4e0 0000b5e0' 
    1714 0000a500     09e7          movi    SPECIAL_ENTRY,a7
         0000a510 0000af20' 
    1715 0000a530     c04d          jruc    create_initial_input
    1716                    
    1717 0000a540            SUBR   DO_TAG_GAME
    1718                    
    1719 0000a540     4d41          move    a10,a1          ;clear out intials for end game table
    1720 0000a550     4c22          MOVE    a1,a2
    1721 0000a560     24a1          sll     5,a1
    1722 0000a570     2482          sll     4,a2
    1723 0000a580     4041          add     a2,a1
    1724 0000a590     0b21          addi    entered_inits,a1
         0000a5a0 00000010- 
    1725 0000a5c0     576b          clr     a11
    1726 0000a5d0     9361          move    a11,*a1+,L
    1727 0000a5e0     8d61          movb    a11,*a1
    1728                    
    1729 0000a5f0     09eb          movi    FIND_LOW_TABLE_LEVEL,a11
         0000a600 00011c00' 
    1730 0000a620     09e5          movi    TAG_TAB,a5
         0000a630 00000240' 
    1731 0000a650     09c3          movi    AUD_TAG,A3
         0000a660     0062  
    1732 0000a670     09ea          movi    enter_initials_beaten,a10
         0000a680 0000b5e0' 
    1733 0000a6a0     09e7          movi    do_entry_time,a7
         0000a6b0 0000ae20' 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   44

    1734 0000a6d0     c033          jruc    create_initial_input
    1735                    
    1736                    
    1737 0000a6e0            SUBR   pin_speed_check
    1738                    
    1739                            ;skip this check if I'm a drone.
    1740 0000a6e0     4d00          move    a8,A0
    1741 0000a6f0     0b40          CMPI    2,A0
         0000a700     fffd  
    1742 0000a710     c53f          JRGE    oagsretp
    1743                    
    1744                            ;skip this check if the match took three rounds
    1745 0000a720     05ae          move    @current_round,a14
         0000a730 00000000! 
    1746 0000a750     0b4e          cmpi    3,a14
         0000a760     fffc  
    1747 0000a770     ca39          jreq    oagsretp
    1748                    
    1749 0000a780     24a0          SLL     5,A0
    1750 0000a790     0b20          ADDI    MATCH_TIMERS,A0
         0000a7a0 00000000! 
    1751 0000a7c0     8609          MOVE    *A0,A9,L
    1752 0000a7d0     c633          jrle    oagsretp
    1753                    
    1754 0000a7e0     09eb          movi    FIND_LOW_TABLE_LEVEL,a11
         0000a7f0 00011c00' 
    1755 0000a810     09e5          movi    PIN_SPEED_TAB,a5
         0000a820 000000c0' 
    1756 0000a840     09ea          movi    enter_initials_top_20,a10
         0000a850 0000c020' 
    1757 0000a870     09e7          movi    do_entry_time,a7
         0000a880 0000ae20' 
    1758 0000a8a0     09c3          movi    AUD_PINSPEED,a3
         0000a8b0     0058  
    1759 0000a8c0     c014          jruc    create_initial_input
    1760                    
    1761 0000a8d0            SUBR   winstreak_check
    1762                    
    1763 0000a8d0     4d09          move    a8,a9
    1764 0000a8e0     2489          sll     4,a9
    1765 0000a8f0     0b29          addi    p1oldwinstreak,a9
         0000a900 00000000! 
    1766 0000a920     8529          move    *a9,a9
    1767 0000a930     09eb          movi    FIND_HIGH_TABLE_LEVEL,a11
         0000a940 00011ab0' 
    1768 0000a960     09e5          movi    STREAK_TAB,a5
         0000a970 00000040' 
    1769 0000a990     09ea          movi    enter_initials_streak,a10
         0000a9a0 0000b930' 
    1770 0000a9c0     09e7          movi    do_entry,a7
         0000a9d0 0000add0' 
    1771 0000a9f0     09c3          movi    AUD_WINSTREAK,a3
         0000aa00     0057  
    1772                    
    1773 0000aa10           create_initial_input
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   45

    1774 0000aa10     4d01          move    a8,a1
    1775 0000aa20     0b01          addi    HI_INPUT_PID,a1
         0000aa30     0137  
    1776 0000aa40     0d5f          calla   GETPRC
         0000aa50 00000000! 
    1777 0000aa70     b2a0          move    a5,*a0(oagswhich_tab),L
         0000aa80     0150  
    1778 0000aa90     b100          move    a8,*a0(oagsstick)
         0000aaa0     0140  
    1779 0000aab0     b340          move    a10,*a0(oagswhich_entry),L
         0000aac0     0170  
    1780 0000aad0     b360          move    a11,*a0(oagswhich_level),L
         0000aae0     0190  
    1781 0000aaf0     b060          move    a3,*a0(oagswhich_aud)
         0000ab00     01b0  
    1782                    
    1783 0000ab10           oagsretp        RETP
    1784                    
    1785 0000ab40            SUBR   do_that_cycle
    1786 0000ab40     09e8          movi    [02h,1],a8              ;cycle color A
         0000ab50 00020001  
    1787 0000ab70     09e9          movi    FNT9RED_P,a9            ;pal name
         0000ab80 00000000! 
    1788 0000aba0     09ea          movi    fnt9_red_white,a10      ;use the LFLASH table
         0000abb0 0000b5b0' 
    1789 0000abd0     18cb          movk    6,a11                   ;cycle speed
    1790 0000abe0                   CREATE  CYCPID,CYCLE_TABLE
    1791                    
    1792 0000ac60     09e8          movi    [02h,1],a8              ;cycle color A
         0000ac70 00020001  
    1793 0000ac90     09e9          movi    FNT9WHT2P,a9            ;pal name
         0000aca0 00000000! 
    1794 0000acc0     09ea          movi    fnt9_blue_white,a10     ;use the LFLASH table
         0000acd0 0000b580' 
    1795 0000acf0     18cb          movk    6,a11                   ;cycle speed
    1796 0000ad00                   CREATE  CYCPID,CYCLE_TABLE
    1797 0000ad80     0d3f          callr   hscore_colcyc
         0000ad90     fe76  
    1798 0000ada0     0d3f          callr   hscore_colcyc2
         0000adb0     fed5  
    1799 0000adc0     0960          rets
    1800                    
    1801 0000add0           do_entry
    1802                            ;convert score and wins to BCD
    1803 0000add0     4d20          move    a9,a0
    1804 0000ade0     0d5f          calla   BINBCD
         0000adf0 00000000! 
    1805 0000ae10     4c09          move    a0,a9
    1806 0000ae20           do_entry_time
    1807 0000ae20     4d20          move    a9,a0
    1808                    
    1809 0000ae30     5663          clr     a3
    1810 0000ae40     b7a8          move    *a13(oagswhich_tab),a8,L
         0000ae50     0150  
    1811 0000ae60     0d3f          callr   CHECK_SCORE
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   46

         0000ae70     05df  
    1812                    
    1813 0000ae80     ca5d          jrz     oagsdone_jake_hack
    1814                    
    1815 0000ae90           no_we_can_come_back
    1816                            ;they made one of the tables.  first update AUD_LSCORE
    1817 0000ae90     4c01          move    a0,a1
    1818 0000aea0     b5a0          move    *a13(oagswhich_aud),a0
         0000aeb0     01b0  
    1819 0000aec0     0d5f          calla   KILL_AUD
         0000aed0 00000000! 
    1820 0000aef0     0d5f          calla   AUD
         0000af00 00000000! 
    1821                    
    1822 0000af20           SPECIAL_ENTRY
    1823 0000af20     182e          movk    1,a14
    1824 0000af30     058e          move    a14,@auto_init
         0000af40 000000a0- 
    1825 0000af60     b5a1          MOVE    *A13(oagsstick),a1
         0000af70     0140  
    1826 0000af80     4c22          MOVE    a1,a2
    1827 0000af90     24a1          sll     5,a1
    1828 0000afa0     2482          sll     4,a2
    1829 0000afb0     4041          add     a2,a1
    1830 0000afc0     0b21          addi    entered_inits,a1
         0000afd0 00000010- 
    1831 0000aff0     8620          move    *a1,a0,L
    1832 0000b000     cb22          JRNZ    NO_NEED_TO_ENTER
    1833                    
    1834 0000b010     57ce          clr     a14
    1835 0000b020     058e          move    a14,@auto_init
         0000b030 000000a0- 
    1836                    
    1837 0000b050                   CREATE0 howard_wins
    1838                    
    1839 0000b0c0                   PUSHP   a9
    1840                    
    1841 0000b0d0     b7a1          MOVE    *A13(oagswhich_entry),A1,L
         0000b0e0     0170  
    1842 0000b0f0     0147          GETPC   A7
    1843 0000b100     0b07          ADDI    040h,A7
         0000b110     0040  
    1844 0000b120     a2ec          MOVE    A7,-*A12,L      ;PUSH RET ADDR
    1845 0000b130     0161          JUMP    A1
    1846                    
    1847 0000b140                   PULLP   a9
    1848                    
    1849 0000b150     09c0          MOVI    0B8H,A0
         0000b160     00b8  
    1850 0000b170     0d5f          CALLA   triple_sound
         0000b180 00000000! 
    1851                    
    1852 0000b1a0     b5a1          MOVE    *A13(oagsstick),a1
         0000b1b0     0140  
    1853 0000b1c0     4c22          MOVE    a1,a2
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   47

    1854 0000b1d0     24a1          sll     5,a1
    1855 0000b1e0     2482          sll     4,a2
    1856 0000b1f0     4041          add     a2,a1
    1857 0000b200     0b21          addi    entered_inits,a1
         0000b210 00000010- 
    1858 0000b230           NO_NEED_TO_ENTER
    1859 0000b230     4d20          move    a9,a0
    1860 0000b240     b7a8          move    *a13(oagswhich_tab),a8,L
         0000b250     0150  
    1861 0000b260     0b68          cmpi    BEATEN_TAB,a8
         0000b270 fffffebf' 
    1862 0000b290     ca0b          JREQ    SPECIAL_ADDITION
    1863 0000b2a0     0b68          CMPI    INTER_TAB,A8
         0000b2b0 fffffe3f' 
    1864 0000b2d0     ca07          JREQ    SPECIAL_ADDITION
    1865 0000b2e0     0b68          CMPI    TAG_TAB,A8
         0000b2f0 fffffdbf' 
    1866 0000b310     cb08          JRNE    normal_addition
    1867 0000b320     0d3f          CALLR   TAG_ENTRY
         0000b330     063a  
    1868 0000b340     c007          jruc    oagsdone
    1869 0000b350           SPECIAL_ADDITION
    1870 0000b350     0d3f          callr   SPECIAL_ADD_ENTRY
         0000b360     061d  
    1871 0000b370     0d3f          CALLR   SORT_BEATEN_TABLE
         0000b380     059e  
    1872 0000b390     c002          jruc    oagsdone
    1873                    
    1874 0000b3a0           normal_addition
    1875 0000b3a0     0d3f          callr   ADD_ENTRY
         0000b3b0     0641  
    1876 0000b3c0           oagsdone
    1877                    
    1878 0000b3c0     09c0          movi    CYCPID,a0
         0000b3d0     0110  
    1879 0000b3e0     09c1          movi    -1,a1
         0000b3f0     ffff  
    1880 0000b400     0d5f          calla   KILALL
         0000b410 00000000! 
    1881 0000b430                   DIE
    1882                    
    1883 0000b460           oagsdone_jake_hack
    1884 0000b460     09c0          movi    17,a0
         0000b470     0011  
    1885 0000b480     b7a8          move    *a13(oagswhich_tab),a8,L
         0000b490     0150  
    1886 0000b4a0     0b68          cmpi    TAG_TAB,a8
         0000b4b0 fffffdbf' 
    1887 0000b4d0     ca9b          jreq    no_we_can_come_back     
    1888                    
    1889 0000b4e0     09c0          movi    CYCPID,a0
         0000b4f0     0110  
    1890 0000b500     09c1          movi    -1,a1
         0000b510     ffff  
    1891 0000b520     0d5f          calla   KILALL
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   48

         0000b530 00000000! 
    1892 0000b550                   DIE
    1893                    
    1894 0000b580           fnt9_blue_white
    1895 0000b580     001f          .word   0001fH,07FFFH
    1896 0000b5a0     ffff          .word   -1
    1897                    
    1898 0000b5b0           fnt9_red_white
    1899 0000b5b0     7c00          .word   07C00H,07FFFH
    1900 0000b5d0     ffff          .word   -1
    1901                    
    1902                    
    1903                    
    1904 0000b5e0            SUBR   enter_initials_beaten
    1905                    
    1906 0000b5e0     09e4          movi    entered_inits,a4
         0000b5f0 00000010- 
    1907 0000b610     4c85          move    a4,a5
    1908 0000b620     09e6          movi    entered_inits+(5*8),a6
         0000b630 00000038- 
    1909 0000b650     09e3          movi    oagsenterinita_mess,a3
         0000b660 0000fae0' 
    1910 0000b680     09e2          movi    oagsenterinit5_mes,a2
         0000b690 00010160' 
    1911 0000b6b0     b5a0          move    *a13(oagsstick),a0
         0000b6c0     0140  
    1912 0000b6d0     4c00          move    a0,a0
    1913 0000b6e0     ca0d          jrz     oagsenter_mess_set_3
    1914 0000b6f0     09e4          movi    entered_inits+030h,a4
         0000b700 00000040- 
    1915 0000b720     4c85          move    a4,a5
    1916 0000b730     09e6          movi    entered_inits+(5*8)+030h,a6
         0000b740 00000068- 
    1917 0000b760     09e3          movi    oagsenterinitb_mess,a3
         0000b770 0000fc00' 
    1918 0000b790     09e2          movi    oagsenterinit6_mes,a2
         0000b7a0 00010270' 
    1919 0000b7c0           oagsenter_mess_set_3
    1920 0000b7c0     57ce          clr     a14
    1921 0000b7d0     83c4          move    a14,*a4,L       ;clear out initials
    1922 0000b7e0     b1c4          move    a14,*a4(018h)   ;clear out initials
         0000b7f0     0018  
    1923 0000b800                   PUSHP   a4,a5,a6
    1924 0000b820                   PUSHP   a2
    1925 0000b830     4c62          move    a3,a2
    1926 0000b840     0d5f          calla   setup_message
         0000b850 00000000! 
    1927                    
    1928 0000b870     b5a0          move    *a13(oagsstick),a0
         0000b880     0140  
    1929 0000b890     0b00          addi    CLSNEUT|TYPTEXT|00A3h,a0
         0000b8a0     07a3  
    1930 0000b8b0     0580          move    a0,@mess_objid
         0000b8c0 00000000! 
    1931                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   49

    1932 0000b8e0     9640          move    *a2+,a0,L               ;print method
    1933 0000b8f0     4c44          move    a2,a4                   ;* text string
    1934 0000b900     0920          call    a0
    1935 0000b910     c000          jruc    oagsgo
         0000b920     00e8  
    1936                    
    1937 0000b930            SUBR   enter_initials_streak
    1938                    
    1939 0000b930     5642          CLR     A2
    1940 0000b940     0582          MOVE    A2,@IGNORE_CHAR_WIDTH
         0000b950 00000000! 
    1941                    
    1942 0000b970     09e2          movi    oagsenterinit7_mes,a2
         0000b980 00010380' 
    1943 0000b9a0     b5a0          move    *a13(oagsstick),a0
         0000b9b0     0140  
    1944 0000b9c0     ca03          jrz     just_add_to_id
    1945 0000b9d0     09e2          movi    oagsenterinit8_mes,a2
         0000b9e0 00010470' 
    1946 0000ba00           just_add_to_id
    1947 0000ba00                   PUSH    A0
    1948 0000ba10     0d5f          calla   setup_message
         0000ba20 00000000! 
    1949 0000ba40                   PULL    A0
    1950 0000ba50     0b00          addi    CLSNEUT|TYPTEXT|00A3h,a0
         0000ba60     07a3  
    1951 0000ba70     0580          move    a0,@mess_objid
         0000ba80 00000000! 
    1952                    
    1953 0000baa0     9640          move    *a2+,a0,L               ;print method
    1954 0000bab0     4c44          move    a2,a4                   ;* text string
    1955 0000bac0     0920          call    a0
    1956                    
    1957 0000bad0     05a0          move    @mess_cursx2,a0
         0000bae0 00000000! 
    1958 0000bb00     0b00          addi    8,a0
         0000bb10     0008  
    1959 0000bb20     0580          move    a0,@mess_cursx
         0000bb30 00000000! 
    1960                    
    1961 0000bb50     1840          movk    2,a0
    1962 0000bb60     0580          move    a0,@mess_spacing
         0000bb70 00000000! 
    1963                    
    1964 0000bb90     05a0          move    @p1oldwinstreak,a0
         0000bba0 00000000! 
    1965 0000bbc0     b5a2          move    *a13(oagsstick),a2
         0000bbd0     0140  
    1966 0000bbe0     ca03          jrz     got_right_streak
    1967 0000bbf0     05a0          move    @p2oldwinstreak,a0
         0000bc00 00000000! 
    1968 0000bc20           got_right_streak
    1969 0000bc20     09e1          movi    9999999,a1
         0000bc30 0098967f  
    1970 0000bc50     0d5f          calla   dec_to_asc              ;convert to ASCII
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   50

         0000bc60 00000000! 
    1971 0000bc80     0d5f          CALLA   copy_string
         0000bc90 00000000! 
    1972 0000bcb0     0d5f          calla   print_string
         0000bcc0 00000000! 
    1973                    
    1974 0000bce0     09e4          movi    entered_inits,a4
         0000bcf0 00000010- 
    1975 0000bd10     4c85          move    a4,a5
    1976 0000bd20     09e6          movi    entered_inits+(3*8),a6
         0000bd30 00000028- 
    1977 0000bd50     09e3          movi    oagsenterinita_mess,a3
         0000bd60 0000fae0' 
    1978 0000bd80     09e2          movi    oagsenterinit1_mes,a2
         0000bd90 0000fd20' 
    1979 0000bdb0     b5a0          move    *a13(oagsstick),a0
         0000bdc0     0140  
    1980 0000bdd0     4c00          move    a0,a0
    1981 0000bde0     ca0d          jrz     oagsenter_mess_set_1
    1982 0000bdf0     09e4          movi    entered_inits+030h,a4
         0000be00 00000040- 
    1983 0000be20     4c85          move    a4,a5
    1984 0000be30     09e6          movi    entered_inits+(3*8)+030h,a6
         0000be40 00000058- 
    1985 0000be60     09e3          movi    oagsenterinitb_mess,a3
         0000be70 0000fc00' 
    1986 0000be90     09e2          movi    oagsenterinit2_mes,a2
         0000bea0 0000fe30' 
    1987 0000bec0           oagsenter_mess_set_1
    1988 0000bec0     57ce          clr     a14
    1989 0000bed0     83c4          move    a14,*a4,L       ;clear out initials
    1990 0000bee0     b1c4          move    a14,*a4(018h)   ;clear out initials
         0000bef0     0018  
    1991 0000bf00                   PUSHP   a4,a5,a6
    1992 0000bf20                   PUSHP   a2
    1993 0000bf30     4c62          move    a3,a2
    1994 0000bf40     0d5f          calla   setup_message
         0000bf50 00000000! 
    1995                    
    1996 0000bf70     b5a0          move    *a13(oagsstick),a0
         0000bf80     0140  
    1997 0000bf90     0b00          addi    CLSNEUT|TYPTEXT|00A3h,a0
         0000bfa0     07a3  
    1998 0000bfb0     0580          move    a0,@mess_objid
         0000bfc0 00000000! 
    1999                    
    2000 0000bfe0     9640          move    *a2+,a0,L               ;print method
    2001 0000bff0     4c44          move    a2,a4                   ;* text string
    2002 0000c000     0920          call    a0
    2003 0000c010     c079          jruc    oagsgo
    2004                    
    2005 0000c020            SUBR   enter_initials_top_20
    2006                    
    2007 0000c020     09e0          movi    font9A_ascii,a0
         0000c030 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   51

    2008 0000c050     0780          move    a0,@message_ascii,L
         0000c060 00000000! 
    2009                    
    2010 0000c080     07a0          move    @MATCH_TIMERS,a0,L
         0000c090 00000000! 
    2011 0000c0b0     09c3          movi    35,a3
         0000c0c0     0023  
    2012 0000c0d0     09eb          movi    FNT9WHT2P,a11
         0000c0e0 00000000! 
    2013 0000c100     b5a2          move    *a13(oagsstick),a2
         0000c110     0140  
    2014 0000c120     ca08          jrz     got_right_time
    2015 0000c130     07a0          move    @MATCH_TIMERS+32,a0,L
         0000c140 00000020! 
    2016 0000c160     09eb          movi    FNT9RED_P,a11
         0000c170 00000000! 
    2017 0000c190     09c3          movi    270,a3
         0000c1a0     010e  
    2018 0000c1b0           got_right_time
    2019 0000c1b0     0b02          addi    CLSNEUT|TYPTEXT|00A3h,a2
         0000c1c0     07a3  
    2020 0000c1d0     0582          move    a2,@mess_objid
         0000c1e0 00000000! 
    2021 0000c200     078b          move    a11,@message_palette,L
         0000c210 00000000! 
    2022 0000c230     09c2          movi    16,a2
         0000c240     0010  
    2023 0000c250     0582          move    a2,@mess_cursy
         0000c260 00000000! 
    2024 0000c280     0583          move    a3,@mess_cursx
         0000c290 00000000! 
    2025 0000c2b0     0d5f          calla   BCDBIN
         0000c2c0 00000000! 
    2026 0000c2e0     0d3f          callr   val_to_dec_tenths_asc
         0000c2f0     f95c  
    2027 0000c300     5600          clr     a0
    2028 0000c310     0580          move    A0,@IGNORE_CHAR_WIDTH
         0000c320 00000000! 
    2029 0000c340     0580          move    a0,@mess_spacing
         0000c350 00000000! 
    2030 0000c370     0d5f          calla   print_string
         0000c380 00000000! 
    2031                    
    2032 0000c3a0     05a0          move    @mess_cursx2,a0
         0000c3b0 00000000! 
    2033 0000c3d0     0b00          addi    6,a0
         0000c3e0     0006  
    2034 0000c3f0     0580          move    a0,@mess_cursx
         0000c400 00000000! 
    2035                    
    2036 0000c420     09e4          movi    oagsenterinit9_mes,a4
         0000c430 00010560' 
    2037 0000c450     0d5f          calla   print_string2
         0000c460 00000000! 
    2038                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   52

    2039 0000c480     09e4          movi    entered_inits,a4
         0000c490 00000010- 
    2040 0000c4b0     4c85          move    a4,a5
    2041 0000c4c0     09e6          movi    entered_inits+(3*8),a6
         0000c4d0 00000028- 
    2042 0000c4f0     09e3          movi    oagsenterinita_mess,a3
         0000c500 0000fae0' 
    2043 0000c520     09e2          movi    oagsenterinit3_mes,a2
         0000c530 0000ff40' 
    2044 0000c550     b5a0          move    *a13(oagsstick),a0
         0000c560     0140  
    2045 0000c570     4c00          move    a0,a0
    2046 0000c580     ca0d          jrz     oagsenter_mess_set
    2047 0000c590     09e4          movi    entered_inits+030h,a4
         0000c5a0 00000040- 
    2048 0000c5c0     4c85          move    a4,a5
    2049 0000c5d0     09e6          movi    entered_inits+(3*8)+030h,a6
         0000c5e0 00000058- 
    2050 0000c600     09e3          movi    oagsenterinitb_mess,a3
         0000c610 0000fc00' 
    2051 0000c630     09e2          movi    oagsenterinit4_mes,a2
         0000c640 00010050' 
    2052 0000c660           oagsenter_mess_set
    2053 0000c660     57ce          clr     a14
    2054 0000c670     83c4          move    a14,*a4,L       ;clear out initials
    2055 0000c680     b1c4          move    a14,*a4(018h)   ;clear out initials
         0000c690     0018  
    2056 0000c6a0                   PUSHP   a4,a5,a6
    2057 0000c6c0                   PUSHP   a2
    2058 0000c6d0     4c62          move    a3,a2
    2059                    
    2060 0000c6e0     0d5f          calla   setup_message
         0000c6f0 00000000! 
    2061                    
    2062 0000c710     b5a0          move    *a13(oagsstick),a0
         0000c720     0140  
    2063 0000c730     0b00          addi    CLSNEUT|TYPTEXT|00A3h,a0
         0000c740     07a3  
    2064 0000c750     0580          move    a0,@mess_objid
         0000c760 00000000! 
    2065                    
    2066 0000c780     9640          move    *a2+,a0,L               ;print method
    2067 0000c790     4c44          move    a2,a4                   ;* text string
    2068 0000c7a0     0920          call    a0
    2069 0000c7b0           oagsgo
    2070                    
    2071 0000c7b0                   PULLP   a2
    2072 0000c7c0     19a0          movk    13,a0
    2073 0000c7d0     0580          move    a0,@mess_line_spacing
         0000c7e0 00000000! 
    2074                    
    2075 0000c800     0d5f          calla   setup_message
         0000c810 00000000! 
    2076                    
    2077 0000c830     b5a0          move    *a13(oagsstick),a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   53

         0000c840     0140  
    2078 0000c850     0b00          addi    CLSNEUT|TYPTEXT|00A3h,a0
         0000c860     07a3  
    2079 0000c870     0580          move    a0,@mess_objid
         0000c880 00000000! 
    2080                    
    2081 0000c8a0     9640          move    *a2+,a0,L               ;print method
    2082 0000c8b0     4c44          move    a2,a4                   ;* text string
    2083 0000c8c0     0920          call    a0
    2084                    
    2085 0000c8d0     0d3f          callr   draw_letter_grid        ;draw the letter grid
         0000c8e0     0283  
    2086                    
    2087 0000c8f0     b5a1          move    *a13(oagsstick),a1
         0000c900     0140  
    2088 0000c910     cb07          jrnz    oagsright_type
    2089 0000c920                   TBL_OBJ oagscursor                      ;create cursor
    2090 0000c980     c006          jruc    oagscursor_type_set
    2091 0000c990           oagsright_type
    2092 0000c990                   TBL_OBJ oagscursor2                     ;create cursor
    2093 0000c9f0           oagscursor_type_set
    2094 0000c9f0     5600          clr     a0
    2095 0000ca00     b208          move    a0,*a8(ODOFF),L
         0000ca10     0220  
    2096 0000ca20     09c0          movi    0101h,a0
         0000ca30     0101  
    2097 0000ca40     b008          move    a0,*a8(OCONST)
         0000ca50     0160  
    2098 0000ca60     09e0          movi    oagsblock_size,a0
         0000ca70 00000012  
    2099 0000ca90     b008          move    a0,*a8(OSIZEX)
         0000caa0     0130  
    2100 0000cab0     b008          move    a0,*a8(OSIZEY)
         0000cac0     0140  
    2101 0000cad0     b30d          move    a8,*a13(oagscursorimg),L
         0000cae0     0100  
    2102                    
    2103 0000caf0     b5a1          move    *a13(oagsstick),a1
         0000cb00     0140  
    2104 0000cb10     cb07          jrnz    oagsright_hilite
    2105 0000cb20                   TBL_OBJ oagshilite1                     ;create hilite letter
    2106 0000cb80     c006          jruc    oagshilite_set
    2107 0000cb90           oagsright_hilite
    2108 0000cb90                   TBL_OBJ oagshilite2                     ;create hilite letter
    2109 0000cbf0           oagshilite_set
    2110                    
    2111 0000cbf0     b30d          move    a8,*a13(oagshiliteimg),L
         0000cc00     0120  
    2112                    
    2113 0000cc10     5729          clr     a9
    2114 0000cc20     0d3f          callr   new_cursor_pos          ;place them & set char img/pal
         0000cc30     01cf  
    2115                    
    2116                    
    2117                            ;reg use (loop)
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   54

    2118                            ; a4 *first initial ram
    2119                            ; a5 *next initial ram
    2120                            ; a6 *last initial ram
    2121                            ; a8 scratch
    2122                            ; a9 cursor position (0-29)
    2123                            ;a10 hold count for repeat motion
    2124                            ;a11 debounce timer
    2125                    
    2126 0000cc40                   PULLP   a4,a5,a6
    2127                    
    2128 0000cc60     09cb          movi    65,a11
         0000cc70     0041  
    2129 0000cc80     8164          move    a11,*a4
    2130                    
    2131 0000cc90     0d3f          callr   print_init_string
         0000cca0     021f  
    2132                    
    2133 0000ccb0     576b          clr     a11
    2134 0000ccc0     09d5          MOVI    700H,B5
         0000ccd0     0700  
    2135 0000cce0     5673          clr     b3
    2136                    
    2137 0000ccf0           oagsloop
    2138 0000ccf0     1831          movk    1,b1
    2139 0000cd00     0b55          cmpi    150*5,b5
         0000cd10     fd11  
    2140 0000cd20     c74d          jrgt    no_need_for_timer
    2141 0000cd30     098f          mmtm    sp,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10
         0000cd40     ffe0  
    2142 0000cd50     4cb7          move    b5,b7
    2143 0000cd60     09d1          movi    150,b1
         0000cd70     0096  
    2144 0000cd80     5837          divs    b1,b7
    2145 0000cd90     4c73          move    b3,b3
    2146 0000cda0     cb2a          jrnz    we_already_have_it
    2147 0000cdb0     09e0          movi    [83+40,0],a0
         0000cdc0 007b0000  
    2148 0000cde0     b5a1          move    *a13(oagsstick),a1
         0000cdf0     0140  
    2149 0000ce00     ca03          jrz     which_edge_set
    2150 0000ce10     09e0          movi    [322+40,0],a0
         0000ce20 016a0000  
    2151 0000ce40           which_edge_set
    2152 0000ce40     09e1          movi    [16,0],a1                       ;y pos
         0000ce50 00100000  
    2153 0000ce70     09e2          movi    FNT9_5,a2
         0000ce80 00000000! 
    2154 0000cea0     09c3          movi    104+200,a3                      ;z pos
         0000ceb0     0130  
    2155 0000cec0     09e4          movi    DMAWNZ|M_SCRNREL,a4             ;DMA flags
         0000ced0 0000a002  
    2156 0000cef0     b5a5          move    *a13(oagsstick),a5
         0000cf00     0140  
    2157 0000cf10     0b05          addi    CLSNEUT|TYPTEXT|00A3h,a5        ;object ID
         0000cf20     07a3  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   55

    2158 0000cf30     56c6          clr     a6                              ;x vel
    2159 0000cf40     56e7          clr     a7                              ;y vel
    2160 0000cf50     09f0          movi    FNT9WHT_P,b0
         0000cf60 00000000! 
    2161 0000cf80     0d5f          calla   BEGINOBJWP
         0000cf90 00000000! 
    2162 0000cfb0     4f03          move    a8,b3
    2163                    
    2164 0000cfc0                   push    b3,b5
    2165 0000cfe0     09c0          MOVI    0AH,A0
         0000cff0     000a  
    2166 0000d000     0d5f          calla   triple_sound
         0000d010 00000000! 
    2167 0000d030                   pull    b3,b5
    2168 0000d050           we_already_have_it
    2169 0000d050     4e78          move    b3,a8
    2170 0000d060     4ef0          move    b7,a0
    2171 0000d070     24a0          sll     5,a0
    2172 0000d080     0b20          addi    digits_tbl,a0
         0000d090 00000000! 
    2173 0000d0b0     8600          move    *a0,a0,L                ;* image
    2174 0000d0c0     b701          move    *a8(OIMG),a1,L
         0000d0d0     0170  
    2175 0000d0e0     4801          cmp     a0,a1
    2176 0000d0f0     ca0e          jreq    no_change
    2177 0000d100     b501          move    *a8(OCTRL),a1
         0000d110     00f0  
    2178 0000d120     0d5f          calla   change_image
         0000d130 00000000! 
    2179 0000d150                   push    b3,b5
    2180 0000d170     09c0          MOVI    0AH,A0
         0000d180     000a  
    2181 0000d190     0d5f          calla   triple_sound
         0000d1a0 00000000! 
    2182 0000d1c0                   pull    b3,b5
    2183 0000d1e0           no_change
    2184                    
    2185 0000d1e0     09af          mmfm    sp,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10
         0000d1f0     07ff  
    2186 0000d200           no_need_for_timer
    2187                    
    2188 0000d200     1435          DEC     B5              ;have a limit we'll wait
    2189 0000d210     ca00          JRZ     oagsdone2
         0000d220     00a6  
    2190 0000d230     4e72          move    b3,a2
    2191 0000d240     4eb0          MOVE    B5,A0
    2192 0000d250                   PUSHP   A0,a2,a4,a5,a6
    2193 0000d270                   SLEEPK  1
    2194 0000d2b0                   PULLP   A0,a2,a4,a5,a6
    2195 0000d2d0     4e05          MOVE    A0,B5
    2196 0000d2e0     4e43          move    a2,b3
    2197                    
    2198                            ;button check
    2199 0000d2f0     b5a0          move    *a13(oagsstick),a0
         0000d300     0140  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   56

    2200 0000d310     0d5f          calla   get_but_val_down
         0000d320 00000000! 
    2201 0000d340     4c00          move    a0,a0
    2202 0000d350     ca2c          jrz     oagsstick_check
    2203                    
    2204                            ;new press.  add a letter.
    2205 0000d360     4d20          move    a9,a0
    2206 0000d370     0b40          cmpi    28,a0
         0000d380     ffe3  
    2207 0000d390     ca0f          jreq    oagsdeletechar          ;backspace?
    2208                    
    2209 0000d3a0     0b40          cmpi    29,a0
         0000d3b0     ffe2  
    2210 0000d3c0     ca00          jreq    oagsdone2                       ;EOL?
         0000d3d0     008b  
    2211                    
    2212 0000d3e0     48a6          cmp     a5,a6
    2213 0000d3f0     ca22          jreq    oagsstick_check         ;room for another char?
    2214                    
    2215 0000d400     2060          sla     3,a0                    ;x8
    2216 0000d410     0b20          addi    oagsinit_table2,a0
         0000d420 0000f830' 
    2217 0000d440     9c05          movb    *a0,*a5
    2218 0000d450     1105          addk    8,a5
    2219 0000d460     5600          clr     a0
    2220 0000d470     8c05          movb    a0,*a5                  ;always keep a terminator in there.
    2221 0000d480     c008          jruc    oagsadded
    2222                    
    2223 0000d490           oagsdeletechar
    2224 0000d490     4885          cmp     a4,a5
    2225 0000d4a0     ca17          jreq    oagsstick_check         ;no chars to delete!
    2226 0000d4b0     1505          subk    8,a5
    2227 0000d4c0     5600          clr     a0
    2228 0000d4d0     8c05          movb    a0,*a5
    2229 0000d4e0     0d3f          callr   print_init_string
         0000d4f0     019a  
    2230 0000d500     c011          jruc    oagsstick_check
    2231                    
    2232 0000d510           oagsadded
    2233 0000d510     09c0          movi    0b1h,a0
         0000d520     00b1  
    2234 0000d530                   push    b3,b5
    2235 0000d550     0d5f          calla   triple_sound
         0000d560 00000000! 
    2236 0000d580                   pull    b3,b5
    2237                    
    2238                            ;character added.
    2239 0000d5a0     0d3f          callr   print_init_string
         0000d5b0     018e  
    2240                    
    2241                            ;if that was the last character, move the cursor to the END char.
    2242 0000d5c0     48a6          cmp     a5,a6
    2243 0000d5d0     cb04          jrne    oagsstick_check
    2244                    
    2245 0000d5e0     09c9          movi    29,a9
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   57

         0000d5f0     001d  
    2246 0000d600     0d3f          callr   new_cursor_pos
         0000d610     0131  
    2247                    
    2248 0000d620           oagsstick_check
    2249 0000d620     142b          dec     a11                     ;debounce check
    2250 0000d630     c100          jrp     oagsloop                        ;too soon?
         0000d640     ff6a  
    2251                    
    2252 0000d650     b5a0          move    *a13(oagsstick),a0
         0000d660     0140  
    2253 0000d670     0d5f          calla   get_stick_val_down
         0000d680 00000000! 
    2254 0000d6a0     4c00          move    a0,a0
    2255 0000d6b0     ca07          jrz     oagsno_new_stick
    2256                    
    2257 0000d6c0     09ea          movi    oagststatic-oagsdebounce_time,a10
         0000d6d0 00000016  
    2258 0000d6f0     09eb          movi    oagsdebounce_time,a11
         0000d700 00000008  
    2259 0000d720     c00b          jruc    oagsadjust
    2260                    
    2261 0000d730           oagsno_new_stick
    2262 0000d730     142a          dec     a10
    2263 0000d740     cb00          jrnz    oagsloop                        ;holding and waiting
         0000d750     ff59  
    2264                    
    2265                            ;whee!  time to repeat-move
    2266 0000d760     b5a0          move    *a13(oagsstick),a0
         0000d770     0140  
    2267 0000d780     0d5f          calla   get_stick_val_cur
         0000d790 00000000! 
    2268 0000d7b0     09ea          movi    oagstmoving,a10
         0000d7c0 0000000a  
    2269 0000d7e0           oagsadjust
    2270 0000d7e0                   X16     a0
    2271 0000d7f0     0b20          addi    oagsjoytab,a0
         0000d800 00010a70' 
    2272 0000d820     8400          move    *a0,a0
    2273                    
    2274 0000d830     4009          add     a0,a9
    2275 0000d840     ce04          jrn     oagstoo_low
    2276 0000d850     0b49          cmpi    30,a9
         0000d860     ffe1  
    2277 0000d870     c504          jrge    oagstoo_high
    2278 0000d880     c006          jruc    oagsjust_right
    2279                    
    2280 0000d890           oagstoo_low
    2281 0000d890     0b09          addi    30,a9
         0000d8a0     001e  
    2282 0000d8b0     c003          jruc    oagsjust_right
    2283 0000d8c0           oagstoo_high
    2284 0000d8c0     0be9          subi    30,a9
         0000d8d0     ffe1  
    2285 0000d8e0     0300          jruc    oagsjust_right
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   58

    2286                    
    2287 0000d8f0           oagsjust_right
    2288                            ;adjust cursor and character position
    2289 0000d8f0     4c00          move    a0,a0
    2290 0000d900     ca0d          jrz     no_motion_sound
    2291 0000d910     09c0          movi    0c7h,a0
         0000d920     00c7  
    2292 0000d930     b5a1          move    *a13(oagsstick),a1
         0000d940     0140  
    2293 0000d950     ca01          jrz     motion_sound_set
    2294 0000d960     1020          inc     a0
    2295 0000d970           motion_sound_set
    2296 0000d970                   push    b3,b5
    2297 0000d990     0d5f          calla   triple_sound
         0000d9a0 00000000! 
    2298 0000d9c0                   pull    b3,b5
    2299 0000d9e0           no_motion_sound
    2300 0000d9e0     0d3f          callr   new_cursor_pos
         0000d9f0     00f3  
    2301 0000da00     4d20          move    a9,a0
    2302                    
    2303 0000da10     0b40          cmpi    28,a0
         0000da20     ffe3  
    2304 0000da30     ca1f          jreq    oagsspace_it
    2305                    
    2306 0000da40     0b40          cmpi    29,a0
         0000da50     ffe2  
    2307 0000da60     ca1c          jreq    oagsspace_it
    2308                    
    2309 0000da70     48c5          cmp     a6,a5
    2310 0000da80     ca00          jreq    oagsloop
         0000da90     ff25  
    2311                    
    2312 0000daa0     2060          sla     3,a0 
    2313 0000dab0     0b20          addi    oagsinit_table2,a0
         0000dac0 0000f830' 
    2314 0000dae0     9c05          movb    *a0,*a5
    2315 0000daf0     5600          clr     a0
    2316 0000db00     ac05          movb    a0,*a5(8)                       ;always keep a terminator in there.
         0000db10     0008  
    2317 0000db20     0d3f          callr   print_init_string
         0000db30     0136  
    2318 0000db40     c000          jruc    oagsloop
         0000db50     ff19  
    2319                    
    2320 0000db60           oagsbackspace_it
    2321 0000db60     2060          sla     3,a0 
    2322 0000db70     0b20          addi    oagsinit_table2,a0
         0000db80 0000f830' 
    2323 0000dba0     1505          subk    8,a5
    2324 0000dbb0     9c05          movb    *a0,*a5
    2325 0000dbc0     1105          addk    8,a5
    2326                    
    2327 0000dbd0     5600          clr     a0
    2328 0000dbe0     8c05          movb    a0,*a5                          ;always keep a terminator in there.
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   59

    2329 0000dbf0     0d3f          callr   print_init_string
         0000dc00     0129  
    2330 0000dc10     c000          jruc    oagsloop
         0000dc20     ff0c  
    2331                    
    2332 0000dc30           oagsspace_it
    2333 0000dc30     5600          clr     a0
    2334 0000dc40     8c05          movb    a0,*a5                          ;always keep a terminator in there.
    2335 0000dc50     0d3f          callr   print_init_string
         0000dc60     0123  
    2336 0000dc70     c000          jruc    oagsloop
         0000dc80     ff06  
    2337                    
    2338 0000dc90           oagsdone2
    2339 0000dc90     0d3f          callr   are_inits_dirty
         0000dca0     0094  
    2340 0000dcb0     cb18          jrnz    replace_dirty_inits
    2341                            .if 0
    2342                            calla   are_special_inits
    2343                            jrnz    oagsnot_special_inits
    2344                            JSRP    prog_specials
    2345                    oagsnot_special_inits
    2346                            .endif
    2347                    
    2348 0000dcc0     09c0          MOVI    0cbh,A0
         0000dcd0     00cb  
    2349 0000dce0     b5a1          MOVE    *A13(oagsstick),a1
         0000dcf0     0140  
    2350 0000dd00     ca01          jrz     select_set
    2351 0000dd10     1020          inc     a0
    2352 0000dd20           select_set
    2353 0000dd20                   push    b3,b5
    2354 0000dd40     0d5f          CALLA   triple_sound
         0000dd50 00000000! 
    2355 0000dd70                   pull    b3,b5
    2356                    
    2357 0000dd90                   pushp   a4
    2358 0000dda0                   PUSHP   A6
    2359 0000ddb0                   sleep   30
    2360 0000de00                   PULLP   A6
    2361 0000de10                   pullp   a4
    2362                    
    2363                    
    2364 0000de20     8680          move    *a4,a0,L
    2365 0000de30     cb0d          jrnz    oagsinitials_have_content
    2366 0000de40           replace_dirty_inits
    2367 0000de40     18c0          movk    6,a0
    2368 0000de50     0d5f          calla   RNDRNG0
         0000de60 00000000! 
    2369 0000de80     24a0          sll     5,a0
    2370 0000de90     0b20          addi    oagsrandom_initials,a0
         0000dea0 0000e310' 
    2371 0000dec0     8600          move    *a0,A0,L
    2372 0000ded0     8204          move    a0,*a4,L
    2373 0000dee0     5621          CLR     A1
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   60

    2374 0000def0     ac24          MOVB    A1,*A4(020H)
         0000df00     0020  
    2375                    
    2376 0000df10           oagsinitials_have_content
    2377 0000df10                   PUSH    a0
    2378 0000df20     b5a0          move    *a13(oagsstick),a0
         0000df30     0140  
    2379 0000df40     0b00          addi    CLSNEUT|TYPTEXT|00A5h,a0
         0000df50     07a5  
    2380 0000df60     0d5f          calla   obj_del1c
         0000df70 00000000! 
    2381                    
    2382 0000df90     b5a0          move    *a13(oagsstick),a0
         0000dfa0     0140  
    2383 0000dfb0     0b00          addi    CLSNEUT|TYPTEXT|00A3h,a0
         0000dfc0     07a3  
    2384 0000dfd0     0d5f          calla   obj_del1c
         0000dfe0 00000000! 
    2385 0000e000                   PULL    a0
    2386                    
    2387 0000e010     0b60          CMPI    "TJM",a0
         0000e020 ffabb5b2  
    2388 0000e040     cb0d          jrne    no_worry_about_disaster
    2389                    
    2390 0000e050                   push    a0
    2391 0000e060     09c0          movi    129h,a0
         0000e070     0129  
    2392 0000e080     05a1          move    @HCOUNT,a1
         0000e090 c00001c0  
    2393 0000e0b0     2fe1          srl     1,a1
    2394 0000e0c0     c901          jrnc    we_now_which
    2395 0000e0d0     1020          inc     a0
    2396 0000e0e0           we_now_which
    2397 0000e0e0     0d5f          CALLA   ADD_VOICE
         0000e0f0 00000000! 
    2398 0000e110                   pull    a0
    2399 0000e120           no_worry_about_disaster
    2400                    
    2401 0000e120     0b60          CMPI    "SMJ",a0
         0000e130 ffacb2b5  
    2402 0000e150     cb07          jrne    no_worry_about_yes_indeedly
    2403 0000e160                   push    a0
    2404 0000e170     09c0          movi    214h,a0
         0000e180     0214  
    2405 0000e190     0d5f          CALLA   ADD_VOICE
         0000e1a0 00000000! 
    2406 0000e1c0                   pull    a0
    2407                    
    2408 0000e1d0           no_worry_about_yes_indeedly
    2409 0000e1d0                   PUSH    A6
    2410 0000e1e0     4486          SUB     A4,A6
    2411 0000e1f0     0b46          CMPI    18H,A6
         0000e200     ffe7  
    2412 0000e210     cb0b          JRNE    A_FIVE_INITIALER
    2413                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   61

    2414 0000e220     b5a1          MOVE    *A13(oagsstick),a1
         0000e230     0140  
    2415 0000e240     2481          sll     4,a1
    2416 0000e250     0b21          addi    which_player,a1
         0000e260 00000000! 
    2417 0000e280     8429          move    *a1,a9
    2418 0000e290     0b09          ADDI    "A",A9
         0000e2a0     0041  
    2419 0000e2b0     ad24          MOVB    A9,*A4(18H)
         0000e2c0     0018  
    2420                    
    2421 0000e2d0           A_FIVE_INITIALER
    2422 0000e2d0                   PULL    A6
    2423                    
    2424 0000e2e0                   RETP
    2425                    
    2426                    
    2427 0000e310           oagsrandom_initials
    2428 0000e310       4d          .byte   "MJT",0
    2429 0000e330       4a          .byte   "JYT",0
    2430 0000e350       53          .byte   "SAL",0
    2431 0000e370       4a          .byte   "JMS",0
    2432 0000e390       4a          .byte   "JAZ",0
    2433 0000e3b0       52          .byte   "RJR",0
    2434 0000e3d0       4d          .byte   "MJL",0
    2435                    
    2436 0000e3f0           oagsdw_table
    2437 0000e3f0 00001ab1          .long   00001ab1h               ; FUQ
    2438 0000e410 00001aa3          .long   00001aa3h               ; FUC
    2439 0000e430 00001aab          .long   00001aabh               ; FUK
    2440 0000e450 000822b1          .long   000822b1h               ; PHUQ
    2441 0000e470 000822ab          .long   000822abh               ; PHUK
    2442 0000e490 000822a3          .long   000822a3h               ; PHUC
    2443 0000e4b0 010ace79          .long   010ace79h               ; PUSSY
    2444 0000e4d0 0102b933          .long   0102b933h               ; PENIS
    2445 0000e4f0 0024d068          .long   0024d068h               ; BITCH
    2446 0000e510 0009b2b4          .long   0009b2b4h               ; SLUT
    2447 0000e530 0009a134          .long   0009a134h               ; SHIT
    2448 0000e550 0001d5d4          .long   0001d5d4h               ; CUNT
    2449 0000e570 0001b134          .long   0001b134h               ; CLIT
    2450 0000e590 0001bc6b          .long   0001bc6bh               ; COCK
    2451 0000e5b0 000994e1          .long   000994e1h               ; SEGA
    2452 0000e5d0 00000000          .long   0
    2453                    
    2454 0000e5f0            SUBR   are_inits_dirty
    2455 0000e5f0                   PUSH    a0,a1,a2,a4,a5,a6
    2456 0000e610     4c86          move    a4,a6
    2457 0000e620     1506          subk    8,a6
    2458 0000e630           oagsrecheck
    2459 0000e630     1106          addk    8,a6
    2460 0000e640     4cc4          move    a6,a4
    2461 0000e650     8ec2          movb    *a6,a2
    2462 0000e660     ca27          jrz     oagsnot_dirty_word
    2463 0000e670     5621          clr     a1
    2464 0000e680           oagsget_inits_loop
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   62

    2465 0000e680     8e82          movb    *a4,a2
    2466 0000e690     caf9          jrz     oagsrecheck
    2467 0000e6a0     0b42          cmpi    20h,a2
         0000e6b0     ffdf  
    2468 0000e6c0     ca0f          jrz     oagsnot_alpha
    2469 0000e6d0     0b42          cmpi    21h,a2
         0000e6e0     ffde  
    2470 0000e6f0     ca0c          jrz     oagsnot_alpha
    2471 0000e700     0b42          cmpi    19h,a2
         0000e710     ffe6  
    2472 0000e720     ca09          jrz     oagsnot_alpha
    2473 0000e730     24a1          sll     5,a1
    2474 0000e740     0be2          subi    40h,a2
         0000e750     ffbf  
    2475 0000e760     0b82          andi    1fh,a2
         0000e770 ffffffe0  
    2476 0000e790     5441          or      a2,a1
    2477 0000e7a0     0d3f          callr   oagscheck_it
         0000e7b0     0002  
    2478 0000e7c0           oagsnot_alpha
    2479 0000e7c0     1104          addk    8,a4
    2480 0000e7d0     c0ea          jruc    oagsget_inits_loop
    2481 0000e7e0           oagsgi_done
    2482                    
    2483 0000e7e0           oagscheck_it
    2484 0000e7e0                   PUSH    a4
    2485 0000e7f0     09e4          movi    oagsdw_table,a4
         0000e800 0000e3f0' 
    2486 0000e820     5600          clr     a0
    2487 0000e830           oagscheck_dw_loop
    2488 0000e830     9685          move    *a4+,a5,L
    2489 0000e840     ca03          jrz     oagscheck_done
    2490 0000e850     4825          cmp     a1,a5
    2491 0000e860     ca03          jrz     oagsis_dirty
    2492 0000e870     c0fb          jruc    oagscheck_dw_loop
    2493 0000e880           oagscheck_done
    2494 0000e880                   PULL    a4
    2495 0000e890     0960          rets
    2496                    
    2497 0000e8a0           oagsis_dirty
    2498 0000e8a0                   PULL    a4,a14                  ; This sucks don't change this
    2499 0000e8c0     1820          movk    1,a0                    ; or it will break
    2500 0000e8d0     c001          jruc    oagsaid_exit
    2501 0000e8e0           oagsnot_dirty_word
    2502 0000e8e0     5600          clr     a0
    2503 0000e8f0           oagsaid_exit
    2504 0000e8f0     4c00          move    a0,a0
    2505 0000e900                   PULL    a0,a1,a2,a4,a5,a6
    2506 0000e920     0960          rets
    2507                    
    2508                    
    2509                    
    2510                    
    2511 0000e930            SUBRP  new_cursor_pos
    2512                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   63

    2513                            ;x pos = oagsgrid_x + oagsblock_size * (index mod 6)
    2514 0000e930     4d21          move    a9,a1
    2515 0000e940     18a0          movk    5,a0
    2516 0000e950     6e01          modu    a0,a1
    2517 0000e960     09e0          movi    oagsblock_size,a0
         0000e970 00000012  
    2518 0000e990     5e01          mpyu    a0,a1
    2519 0000e9a0     b5a3          move    *a13(oagsstick),a3
         0000e9b0     0140  
    2520 0000e9c0     24c3          SLL     6,A3
    2521 0000e9d0     0b23          ADDI    WHERE_BLOCK,A3
         0000e9e0 0000f6c0' 
    2522 0000ea00     b46e          MOVE    *A3(010h),A14
         0000ea10     0010  
    2523 0000ea20     41c1          add     a14,a1
    2524 0000ea30     b7a8          move    *a13(oagscursorimg),a8,L
         0000ea40     0100  
    2525 0000ea50     b028          move    a1,*a8(OXPOS)
         0000ea60     0090  
    2526 0000ea70     b7a8          move    *a13(oagshiliteimg),a8,L
         0000ea80     0120  
    2527 0000ea90     b028          move    a1,*a8(OXPOS)
         0000eaa0     0090  
    2528                    
    2529                            ;y pos = oagsgrid_y + oagsblock_size * (index / 6)
    2530 0000eab0     4d21          move    a9,a1
    2531 0000eac0     18a2          movk    5,a2
    2532 0000ead0     5a41          divu    a2,a1
    2533 0000eae0     09e0          movi    oagsblock_size,a0
         0000eaf0 00000012  
    2534 0000eb10     5e01          mpyu    a0,a1
    2535 0000eb20     b46e          move    *a3(030h),a14
         0000eb30     0030  
    2536 0000eb40     41c1          add     a14,a1
    2537 0000eb50     b7a8          move    *a13(oagscursorimg),a8,L
         0000eb60     0100  
    2538 0000eb70     b028          move    a1,*a8(OYPOS)
         0000eb80     00b0  
    2539 0000eb90     b7a8          move    *a13(oagshiliteimg),a8,L
         0000eba0     0120  
    2540 0000ebb0     b028          move    a1,*a8(OYPOS)
         0000ebc0     00b0  
    2541                    
    2542                            ;adjust the character image
    2543 0000ebd0     4d20          move    a9,a0
    2544 0000ebe0     2060          sla     3,a0            ;x8
    2545 0000ebf0     0b20          addi    oagsinit_table1,a0
         0000ec00 0000f740' 
    2546 0000ec20     8e00          movb    *a0,a0
    2547 0000ec30                   X32     a0
    2548 0000ec40     0b20          addi    font9_ascii,a0
         0000ec50 00000000! 
    2549 0000ec70     8600          move    *a0,a0,L
    2550 0000ec80     cb03          jrnz    oagsgood_image
    2551 0000ec90     09e0          movi    OSGEMD_DOT,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   64

         0000eca0 00000000! 
    2552 0000ecc0           oagsgood_image
    2553 0000ecc0     b7a8          move    *a13(oagshiliteimg),a8,L
         0000ecd0     0120  
    2554 0000ece0     0d5f          calla   civanic
         0000ecf0 00000000! 
    2555 0000ed10     09e0          movi    FNT9YEL_P,a0
         0000ed20 00000000! 
    2556 0000ed40     0d5f          calla   pal_getf
         0000ed50 00000000! 
    2557 0000ed70     b008          move    a0,*a8(OPAL)
         0000ed80     0150  
    2558 0000ed90     b50e          move    *a8(OSIZEX),a14         ;center it
         0000eda0     0130  
    2559 0000edb0     0d0e          subi    oagsblock_size,a14
         0000edc0 ffffffed  
    2560 0000ede0     2bee          sra     1,a14
    2561 0000edf0     b1c8          move    a14,*a8(ODXOFF)
         0000ee00     0220  
    2562 0000ee10     b50e          move    *a8(OSIZEY),a14
         0000ee20     0140  
    2563 0000ee30     0d0e          subi    oagsblock_size,a14
         0000ee40 ffffffed  
    2564 0000ee60     2bee          sra     1,a14
    2565 0000ee70     b1c8          move    a14,*a8(ODYOFF)
         0000ee80     0230  
    2566                    
    2567 0000ee90     0960          rets
    2568                    
    2569                    
    2570                    
    2571 0000eea0            SUBRP  print_init_string
    2572                    
    2573 0000eea0                   push    b5,b3
    2574 0000eec0                   PUSH    a0,a1,a2,a3,a4,a5,a6,a7,a8
    2575 0000eee0                   PUSH    a4
    2576 0000eef0     b5a0          move    *a13(oagsstick),a0
         0000ef00     0140  
    2577 0000ef10     0b00          addi    CLSNEUT|TYPTEXT|00A5h,a0
         0000ef20     07a5  
    2578 0000ef30     0d5f          calla   obj_del1c
         0000ef40 00000000! 
    2579                    
    2580 0000ef60     09e2          movi    oagscurrentinit1_mes,a2
         0000ef70 0000f980' 
    2581 0000ef90     b5a3          move    *a13(oagsstick),a3
         0000efa0     0140  
    2582 0000efb0     ca03          jrz     oagscurrent_mess_set
    2583 0000efc0     09e2          movi    oagscurrentinit2_mes,a2
         0000efd0 0000fa30' 
    2584 0000eff0           oagscurrent_mess_set
    2585                    
    2586 0000eff0     0d5f          calla   setup_message
         0000f000 00000000! 
    2587                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   65

    2588 0000f020     b5a0          move    *a13(oagsstick),a0
         0000f030     0140  
    2589 0000f040     0b00          addi    CLSNEUT|TYPTEXT|00A5h,a0
         0000f050     07a5  
    2590 0000f060     0580          move    a0,@mess_objid
         0000f070 00000000! 
    2591                    
    2592 0000f090                   PULL    a4
    2593 0000f0a0     0d5f          calla   print_string_C2
         0000f0b0 00000000! 
    2594                    
    2595 0000f0d0                   PULL    a0,a1,a2,a3,a4,a5,a6,a7,a8
    2596 0000f0f0                   pull    b5,b3
    2597                            
    2598 0000f110     0960          rets
    2599                    
    2600                    
    2601 0000f120            SUBRP  draw_letter_grid
    2602                    
    2603 0000f120     09e0          movi    FNT9YEL_P,a0
         0000f130 00000000! 
    2604 0000f150     0d5f          calla   pal_getf
         0000f160 00000000! 
    2605 0000f180     4c0b          move    a0,a11
    2606                    
    2607 0000f190     b5a1          move    *a13(oagsstick),A1
         0000f1a0     0140  
    2608 0000f1b0     24c1          SLL     6,A1
    2609 0000f1c0     0b21          ADDI    WHERE_BLOCK,A1
         0000f1d0 0000f6c0' 
    2610 0000f1f0     9620          MOVE    *A1+,A0,L
    2611 0000f200     8621          MOVE    *A1,A1,L
    2612 0000f210     4e02          MOVE    A0,B2
    2613 0000f220     0d12          SUBI    [oagsblock_size,0],B2
         0000f230 ffedffff  
    2614                    
    2615 0000f250     09e9          movi    oagsinit_table1,a9
         0000f260 0000f740' 
    2616 0000f280     09ca          movi    30,a10
         0000f290     001e  
    2617 0000f2a0     c007          jruc    oagsdraw_loop
    2618                    
    2619 0000f2b0           oagsdraw_incy
    2620 0000f2b0     4e50          MOVE    B2,A0
    2621 0000f2c0     0b21          addi    [oagsblock_size,0],a1
         0000f2d0 00120000  
    2622 0000f2f0           oagsdraw_incx
    2623 0000f2f0     0b20          addi    [oagsblock_size,0],a0
         0000f300 00120000  
    2624                    
    2625 0000f320           oagsdraw_loop
    2626 0000f320     8f22          movb    *a9,a2
    2627 0000f330     1109          addk    8,a9
    2628 0000f340                   X32     a2
    2629 0000f350     0b22          addi    font9_ascii,a2
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   66

         0000f360 00000000! 
    2630 0000f380     8642          move    *a2,a2,L
    2631 0000f390     cb03          jrnz    oagsdraw_okimg
    2632                    
    2633                            ;bad image
    2634 0000f3a0     09e2          movi    OSGEMD_DOT,a2
         0000f3b0 00000000! 
    2635                    
    2636 0000f3d0           oagsdraw_okimg
    2637 0000f3d0     5663          clr     a3
    2638 0000f3e0     09e4          movi    DMAWNZ,a4
         0000f3f0 00008002  
    2639 0000f410     b5a5          move    *a13(oagsstick),a5
         0000f420     0140  
    2640 0000f430     0b05          addi    CLSNEUT|TYPTEXT|00A3h,a5
         0000f440     07a3  
    2641 0000f450     56c6          clr     a6
    2642 0000f460     56e7          clr     a7
    2643 0000f470                   PUSH    a0,a1
    2644 0000f490     09f0          movi    FNT9YEL_P,b0
         0000f4a0 00000000! 
    2645 0000f4c0     0d5f          calla   BEGINOBJP
         0000f4d0 00000000! 
    2646 0000f4f0                   PULL    a0,a1
    2647 0000f510     b168          move    a11,*a8(OPAL)                   ;set the palette
         0000f520     0150  
    2648                    
    2649                            ;center the image in its' box
    2650 0000f530     b50e          move    *a8(OSIZEX),a14
         0000f540     0130  
    2651 0000f550     0d0e          subi    oagsblock_size,a14
         0000f560 ffffffed  
    2652 0000f580     2bee          sra     1,a14
    2653 0000f590     b1c8          move    a14,*a8(ODXOFF)
         0000f5a0     0220  
    2654                    
    2655 0000f5b0     b50e          move    *a8(OSIZEY),a14
         0000f5c0     0140  
    2656 0000f5d0     0d0e          subi    oagsblock_size,a14
         0000f5e0 ffffffed  
    2657 0000f600     2bee          sra     1,a14
    2658 0000f610     b1c8          move    a14,*a8(ODYOFF)
         0000f620     0230  
    2659                    
    2660 0000f630     142a          dec     a10
    2661 0000f640     ca06          jrz     oagsdraw_done
    2662                    
    2663 0000f650     4d46          move    a10,a6
    2664 0000f660     09c7          movi    5,a7
         0000f670     0005  
    2665 0000f680     6ee6          modu    a7,a6
    2666 0000f690     cac1          jrz     oagsdraw_incy
    2667 0000f6a0     c0c4          jruc    oagsdraw_incx
    2668                    
    2669 0000f6b0           oagsdraw_done
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   67

    2670 0000f6b0     0960          rets
    2671                    
    2672              0005  crap_off                .equ    5
    2673 0000f6c0           WHERE_BLOCK
    2674 0000f6c0 00250000          .LONG   [32+crap_off,0] ;X
    2675 0000f6e0 003b0000          .LONG   [59,0]  ;Y
    2676                    
    2677 0000f700 01160000          .LONG   [273+crap_off,0]        ;X
    2678 0000f720 003b0000          .LONG   [59,0]  ;Y
    2679                    
    2680 0000f740       41  oagsinit_table1 .STRING "ABCDEFGHIJKLMNOPQRSTUVWXYZ!",010H,011H,012H
    2681 0000f830       41  oagsinit_table2 .STRING "ABCDEFGHIJKLMNOPQRSTUVWXYZ!",020H,011H,012H
    2682                    
    2683              00c8  oagsgrid_x              equ     200             ;x position of letter grid
    2684              0064  oagsgrid_y              equ     100             ;y position of letter grid
    2685              0012  oagsblock_size  equ     18              ;x & y spacing of letter grid
    2686                    
    2687              001e  oagststatic     equ     30              ;ticks before repeat motion begins
    2688              000a  oagstmoving     equ     10              ;ticks between repeat motions
    2689              0008  oagsdebounce_time       equ     8               ;min ticks between stick changes
    2690                    
    2691 0000f920           oagsenterinit_mod
    2692 0000f920 00000000!         .long   wwfselbkBMOD            ;wrestler select map
    2693 0000f940     ffd4          .word   -44,0
    2694 0000f960 00000000          .long   0
    2695                    
    2696 0000f980           oagscurrentinit1_mes
    2697 0000f980                   JAM_STR osgemd_ascii,10,1,77+crap_off,204,BLUE,print_string_C2
    2698 0000fa20       41          .byte   "A",0
    2699 0000fa30                   .even
    2700                    
    2701 0000fa30           oagscurrentinit2_mes
    2702 0000fa30                   JAM_STR osgemd_ascii,10,1,315+crap_off,204,RUBYPAL,print_string_C2
    2703 0000fad0       41          .byte   "A",0
    2704 0000fae0                   .even
    2705                    
    2706 0000fae0           oagsenterinita_mess
    2707 0000fae0                   JAM_STR font9_ascii,8,0,76+crap_off,179,FNT9WHT2P,print_string_C2
    2708 0000fb80       45          .byte   "ENTER INITIALS",0,0
    2709 0000fc00                   .even
    2710                    
    2711 0000fc00           oagsenterinitb_mess
    2712 0000fc00                   JAM_STR font9_ascii,8,0,286+crap_off+29,179,FNT9RED_P,print_string_C2
    2713 0000fca0       45          .byte   "ENTER INITIALS",0,0
    2714 0000fd20                   .even
    2715                    
    2716 0000fd20           oagsenterinit1_mes
    2717 0000fd20                   JAM_STR font9_ascii,4,0,77+crap_off,38,FNT9WHT2P,print_string_C2
    2718 0000fdc0       57          .byte   "WIN STREAK !",0,0
    2719 0000fe30                   .even      
    2720                    
    2721 0000fe30           oagsenterinit2_mes
    2722 0000fe30                   JAM_STR font9_ascii,4,0,317+crap_off,38,FNT9RED_P,print_string_C2
    2723 0000fed0       57          .byte   "WIN STREAK !",0,0
    2724 0000ff40                   .even
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   68

    2725                    
    2726 0000ff40           oagsenterinit3_mes
    2727 0000ff40                   JAM_STR font9_ascii,4,0,77+crap_off,38,FNT9WHT2P,print_string_C2
    2728 0000ffe0       46          .byte   "FAST VICTORY",0,0
    2729 00010050                   .even
    2730                    
    2731 00010050           oagsenterinit4_mes
    2732 00010050                   JAM_STR font9_ascii,4,0,317+crap_off,38,FNT9RED_P,print_string_C2
    2733 000100f0       46          .byte   "FAST VICTORY",0,0
    2734 00010160                   .even
    2735                    
    2736 00010160           oagsenterinit5_mes
    2737 00010160                   JAM_STR font9_ascii,4,0,77+crap_off,38,FNT9WHT2P,print_string_C2
    2738 00010200       42          .byte   "BEATEN GAME",0,0
    2739 00010270                   .even
    2740                    
    2741 00010270           oagsenterinit6_mes
    2742 00010270                   JAM_STR font9_ascii,4,0,317+crap_off,38,FNT9RED_P,print_string_C2
    2743 00010310       42          .byte   "BEATEN GAME",0,0
    2744 00010380                   .even
    2745                    
    2746 00010380           oagsenterinit7_mes
    2747 00010380                   JAM_STR font9_ascii,4,0,45+crap_off,16,FNT9WHT2P,print_string_C2
    2748 00010420       57          .byte   "WINS : ",0,0
    2749 00010470                   .even
    2750                    
    2751 00010470           oagsenterinit8_mes
    2752 00010470                   JAM_STR font9_ascii,4,0,285+crap_off,16,FNT9RED_P,print_string_C2
    2753 00010510       57          .byte   "WINS : ",0,0
    2754 00010560                   .even
    2755                    
    2756 00010560           oagsenterinit9_mes
    2757 00010560       53          .byte   "SEC.",0,0
    2758 00010590                   .even
    2759                    
    2760 00010590           oagsentermess_mes
    2761 00010590                   JAM_STR osgemd_ascii,10,0,200+crap_off,10,BLUE,print_string_C2
    2762 00010630       45          .byte   "ENTER A MESSAGE",0,0
    2763 000106c0                   .even
    2764                    
    2765 000106c0     0000  oagscursor      .word   0,0,10                                  ;X, Y, Z
    2766 000106f0 00000000!         .long   jmeter                                  ;IMG
    2767 00010710     800c          .word   DMACAL                                  ;CTRL
    2768 00010720     07a3          .word   CLSNEUT|TYPTEXT|00A3h
    2769 00010730 00000000          .long   0,0                                     ;XVEL, YVEL
    2770 00010770                   .even
    2771                    
    2772 00010770     0000  oagscursor2     .word   0,0,10                                  ;X, Y, Z
    2773 000107a0 00010820'         .long   oagsjmeter2                                     ;IMG
    2774 000107c0     800c          .word   DMACAL                                  ;CTRL
    2775 000107d0     07a4          .word   CLSNEUT|TYPTEXT|00A4h
    2776 000107e0 00000000          .long   0,0                                     ;XVEL, YVEL
    2777 00010820                   .even
    2778                    
    2779 00010820           oagsjmeter2
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   69

    2780 00010820     00af          .word   175,13,2,2
    2781 00010860 040427fc          .long   040427fcH
    2782 00010880     2000          .word   02000H
    2783 00010890 000108b0'         .long   oagsjmeter2_p
    2784                    
    2785 000108b0           oagsjmeter2_p
    2786 000108b0     0005          .word     5
    2787 000108c0     0000          .word   00H,7d00H,07F60H,01E0H,00H
    2788                    
    2789 00010910     0000  oagshilite1     .word   0,0,20                                  ;X, Y, Z
    2790 00010940 00000000!         .long   FNT9_A
    2791 00010960     8002          .word   DMAWNZ                                  ;CTRL
    2792 00010970     07a3          .word   CLSNEUT|TYPTEXT|00A3h
    2793 00010980 00000000          .long   0,0                                     ;XVEL, YVEL
    2794 000109c0                   .even
    2795                    
    2796 000109c0     0000  oagshilite2     .word   0,0,20                                  ;X, Y, Z
    2797 000109f0 00000000!         .long   FNT9_A
    2798 00010a10     8002          .word   DMAWNZ                                  ;CTRL
    2799 00010a20     07a4          .word   CLSNEUT|TYPTEXT|00A4h
    2800 00010a30 00000000          .long   0,0                                     ;XVEL, YVEL
    2801 00010a70                   .even
    2802                    
    2803 00010a70           oagsjoytab                              ;RLDU
    2804 00010a70     0000          .word   0               ;0000
    2805 00010a80     fffb          .word   -5              ;0001
    2806 00010a90     0005          .word   5               ;0010
    2807 00010aa0     0000          .word   0               ;0011
    2808 00010ab0     ffff          .word   -1              ;0100
    2809 00010ac0     fffa          .word   -6              ;0101
    2810 00010ad0     0004          .word   4               ;0110
    2811 00010ae0     ffff          .word   -1              ;0111
    2812 00010af0     0001          .word   1               ;1000
    2813 00010b00     fffc          .word   -4              ;1001
    2814 00010b10     0006          .word   6               ;1010
    2815 00010b20     0001          .word   1               ;1011
    2816 00010b30     0000          .word   0               ;1100
    2817 00010b40     fffb          .word   -5              ;1101
    2818 00010b50     0005          .word   5               ;1110
    2819 00010b60     0000          .word   0               ;1111
    2820                    
    2821                            
    2822                    
    2823                    
    2824 00010b70           CHECK_INITS:
    2825 00010b70     098f          MMTM    SP,A0,A1,A2
         00010b80     e000  
    2826 00010b90     09c2          MOVI    NUM_INITS,A2
         00010ba0     0005  
    2827 00010bb0           CHECK_NEXT:
    2828 00010bb0     8e20          MOVB    *A1,A0                  ;GET AN INITIAL
    2829 00010bc0     ca03          JRZ     SPACE_FOUND             ;NULL IS A SPACE
    2830 00010bd0     0b40          CMPI    SPACE,A0                ;IS IT A REAL SPACE?
         00010be0     ffdf  
    2831 00010bf0     cb04          JRNZ    LET_FOUND
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   70

    2832 00010c00           SPACE_FOUND:
    2833 00010c00     0b01          ADDI    BYTE_SIZE,A1
         00010c10     0008  
    2834 00010c20     3d02          DSJS    A2,CHECK_NEXT
    2835 00010c30     5642          CLR     A2                      ;SET Z BIT ON FALL THROUGH
    2836                    
    2837 00010c40           LET_FOUND:
    2838 00010c40     09af          MMFM    SP,A0,A1,A2
         00010c50     0007  
    2839 00010c60     0960          RETS
    2840                    
    2841 00010c70            SUBR   CHECK_SCORE
    2842 00010c70     098f          MMTM    SP,A1,A3,A9,A10
         00010c80     5060  
    2843 00010c90     4c03          MOVE    A0,A3                   ;STASH SCORE IN A3
    2844 00010ca0     b7aa          move    *a13(oagswhich_level),a10,L
         00010cb0     0190  
    2845 00010cc0     092a          call    a10
    2846                    
    2847                    
    2848 00010cd0     ca05          JRZ     ANSWER_IN_A0            ;ZERO.....GUY DIDN'T MAKE IT
    2849 00010ce0     b501          MOVE    *A8(TB_VISIBLE),A1,W    ;GET THE NUMBER "ENTERED"
         00010cf0     0030  
    2850 00010d00     4820          CMP     A1,A0                   ;A0 MUST BE LESS OR EQUAL
    2851 00010d10     c801          JRLO    ANSWER_IN_A0            ;NOT LAST ENTRY...RETURN SUCCESS
    2852                    
    2853 00010d20     5600          CLR     A0                      ;RETURN FAILURE
    2854 00010d30           ANSWER_IN_A0:
    2855 00010d30     4c00          MOVE    A0,A0                   ;SET EQ BIT ACCORDINGLY
    2856 00010d40     09af          MMFM    SP,A1,A3,A9,A10
         00010d50     060a  
    2857 00010d60     0960          RETS
    2858                    
    2859 00010d70           SORT_BEATEN_TABLE
    2860 00010d70                   PUSH    A1
    2861 00010d80     b7a8          MOVE    *A13(oagswhich_tab),A8,L
         00010d90     0150  
    2862 00010da0     0d3f          CALLR   ROM_PTRS
         00010db0     0143  
    2863 00010dc0     b5a0          MOVE    *A13(oagswhich_aud),A0
         00010dd0     01b0  
    2864 00010de0     0d5f          CALLA   GET_AUD
         00010df0 00000000! 
    2865 00010e10     4c20          MOVE    A1,A0
    2866 00010e20                   PULL    A1
    2867 00010e30     4c06          MOVE    A0,A6
    2868 00010e40     0d3f          CALLR   TEST_NUM_ICON
         00010e50     0031  
    2869 00010e60     4c65          MOVE    A3,A5
    2870                    
    2871 00010e70     1820          MOVK    1,A0
    2872 00010e80     09ea          MOVI    BEATEN_TAB_ENTRIES,A10
         00010e90 0000001f  
    2873 00010eb0           TEST_NEXT_BEATEN_ENTRY
    2874 00010eb0     0d3f          CALLR   TEST_NUM_ICON
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   71

         00010ec0     002a  
    2875 00010ed0     4865          CMP     A3,A5
    2876 00010ee0     c503          JRGE    THIS_IS_IT
    2877 00010ef0     1020          INC     A0
    2878 00010f00     3cca          DSJS    A10,TEST_NEXT_BEATEN_ENTRY
    2879 00010f10           NO_MOVEMENT
    2880 00010f10     0960          RETS
    2881                    
    2882 00010f20           THIS_IS_IT
    2883 00010f20     4806          CMP     A0,A6
    2884 00010f30     cafd          JREQ    NO_MOVEMENT
    2885 00010f40     4cca          MOVE    A6,A10
    2886 00010f50     4d43          MOVE    A10,A3
    2887                    
    2888 00010f60     b7a8          MOVE    *A13(oagswhich_tab),A8,L
         00010f70     0150  
    2889 00010f80     0d3f          CALLR   ROM_PTRS
         00010f90     0125  
    2890 00010fa0                   PUSH    A0,A1
    2891 00010fc0     b5a0          MOVE    *A13(oagswhich_aud),A0
         00010fd0     01b0  
    2892 00010fe0     0d5f          CALLA   GET_AUD
         00010ff0 00000000! 
    2893 00011010     4c20          MOVE    A1,A0
    2894 00011020     0d3f          CALLR   GET_HSCR
         00011030     00d1  
    2895 00011040     4c24          MOVE    A1,A4
    2896 00011050                   PULL    A0,A1
    2897 00011070                   PUSH    A0,A1
    2898 00011090     4c01          MOVE    A0,A1
    2899 000110a0     b5a0          MOVE    *A13(oagswhich_aud),A0
         000110b0     01b0  
    2900 000110c0     0d5f          calla   KILL_AUD
         000110d0 00000000! 
    2901 000110f0     0d5f          calla   AUD
         00011100 00000000! 
    2902 00011120                   PULL    A0,A1
    2903 00011140     098f          MMTM    SP,A0,A1,A2,A3,A4,A7,A9,A10
         00011150     f960  
    2904 00011160     c071          JRUC    COPY_DOWN_LOOP
    2905                    
    2906 00011170           TEST_NUM_ICON
    2907 00011170                   PUSH    A1
    2908 00011180     0d3f          CALLR   GET_HSCR
         00011190     00bb  
    2909 000111a0     5663          CLR     A3
    2910 000111b0     1904          MOVK    8,A4
    2911 000111c0           TEST_NEXT_NYBBLE
    2912 000111c0     2fe1          SRL     1,A1
    2913 000111d0     c901          JRNC    NO_IN_A3
    2914 000111e0     1023          INC     A3
    2915 000111f0           NO_IN_A3
    2916 000111f0     2fa1          SRL     3,A1
    2917 00011200     3ca4          DSJS    A4,TEST_NEXT_NYBBLE
    2918 00011210                   PULL    A1
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   72

    2919 00011220     0960          RETS
    2920                    
    2921 00011230           COMPARE_INITIALS
    2922 00011230     1820          MOVK    1,A0                    ;START AT 1 AND WORK UP.
    2923 00011240     0d3f          CALLR   VAL_TAB                 ;FIX THE TABLE IN CASE ITS BROKEN.
         00011250     014f  
    2924 00011260     c809          JRC     oagsNOT_MATCHED
    2925 00011270           COMPARE_NEXT
    2926 00011270     0d3f          CALLR   COMPARE_INITS
         00011280     000a  
    2927 00011290     c904          JRNC    MATCHED
    2928 000112a0     1020          INC     A0
    2929 000112b0     4940          CMP     A10,A0
    2930 000112c0     cbfa          JRNE    COMPARE_NEXT
    2931 000112d0     5600          CLR     A0
    2932 000112e0           MATCHED
    2933 000112e0     4c00          MOVE    A0,A0
    2934 000112f0     0960          RETS
    2935 00011300           oagsNOT_MATCHED
    2936 00011300     09c0          MOVI    -1,A0
         00011310     ffff  
    2937 00011320     0960          RETS
    2938                    
    2939 00011330           COMPARE_INITS
    2940 00011330                   PUSH    A0
    2941 00011340     4c26          MOVE    A1,A6
    2942 00011350     0d5f          CALLA   PT_ENTRY
         00011360 00012160' 
    2943 00011380     0b07          ADDI    HS_INITS,A7             ;POINT AT FIRST INITIAL
         00011390     0040  
    2944 000113a0     09c2          MOVI    NUM_INITS,A2            ;THIS IS NUMBER OF INITIALS
         000113b0     0005  
    2945 000113c0           oagsINIT_COPY_LOOP
    2946 000113c0     0d3f          CALLR   RC_BYTEI
         000113d0     01d4  
    2947 000113e0     4c05          MOVE    A0,A5
    2948 000113f0     cb02          JRNZ    oagsNOT_BLANK
    2949 00011400     09c5          MOVI    SPACE,A5                ;REPLACE BLANKS WITH SPACES
         00011410     0020  
    2950 00011420           oagsNOT_BLANK:
    2951 00011420     8ecb          MOVB    *A6,A11
    2952 00011430     cb03          JRNZ    oagsNOT_A_SPACE
    2953 00011440     09cb          MOVI    SPACE,A11               ;REPLACE BLANKS WITH SPACES
         00011450     0020  
    2954 00011460     8d66          MOVB    A11,*A6
    2955 00011470           oagsNOT_A_SPACE
    2956 00011470     48ab          CMP     A5,A11
    2957 00011480     cb08          JRNE    NOT_MATCHED
    2958 00011490     1106          ADDK    8,A6
    2959 000114a0     3de2          DSJ     A2,oagsINIT_COPY_LOOP
    2960 000114b0                   PULL    A0
    2961 000114c0     0d3f          CALLR   GET_HSCR
         000114d0     0087  
    2962 000114e0     5424          OR      A1,A4
    2963 000114f0     0320          CLRC
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   73

    2964 00011500     0960          RETS
    2965 00011510           NOT_MATCHED
    2966 00011510                   PULL    A0
    2967 00011520     0de0          SETC
    2968 00011530     0960          RETS
    2969                    
    2970 00011540           SPECIAL_ADD_ENTRY
    2971 00011540     098f          MMTM    SP,A0,A1,A2,A3,A4,A7,A9,A10
         00011550     f960  
    2972 00011560     0d3f          CALLR   ROM_PTRS                ;SETUP FOR THIS TABLE
         00011570     00c7  
    2973 00011580     4c04          MOVE    A0,A4
    2974 00011590                   PUSH    A1
    2975 000115a0     0d3f          CALLR   COMPARE_INITIALS
         000115b0     ffc7  
    2976 000115c0     cb02          JRNZ    INSERT_HERE
    2977 000115d0     ce4a          JRN     DIDNT_MAKE_IT
    2978 000115e0     4d40          MOVE    A10,A0
    2979                    
    2980 000115f0           INSERT_HERE
    2981 000115f0                   PUSH    A0
    2982 00011600     4c01          MOVE    A0,A1
    2983 00011610     b5a0          MOVE    *A13(oagswhich_aud),A0
         00011620     01b0  
    2984 00011630     0d5f          calla   KILL_AUD
         00011640 00000000! 
    2985 00011660     0d5f          calla   AUD
         00011670 00000000! 
    2986 00011690                   PULL    A0
    2987 000116a0                   PULL    A1
    2988 000116b0     4d43          MOVE    A10,A3
    2989 000116c0     0de0          SETC
    2990 000116d0     c022          JRUC    COPY_DONE
    2991                    
    2992 000116e0           TAG_ENTRY:
    2993 000116e0     098f          MMTM    SP,A0,A1,A2,A3,A4,A7,A9,A10
         000116f0     f960  
    2994 00011700     0d3f          CALLR   ROM_PTRS                ;SETUP FOR THIS TABLE
         00011710     00ad  
    2995 00011720     4c04          MOVE    A0,A4                   ;STASH THE SCORE A SEC.
    2996 00011730     5642          CLR     A2                      ;DONT WORRY ABOUT OTHER GUY AT THIS POINT
    2997 00011740     0d3f          CALLR   CHECK_SCORE             ;DOES THE REQUEST MAKE IT?
         00011750     ff51  
    2998 00011760     0de0          SETC                            ;ANTICIPATE FAILURE
    2999 00011770     ca02          JRZ     SPECIAL_DIDNT_MAKE_IT           ;DON'T KNOW WHY I GOT THESE INITS.
    3000 00011780     4d43          MOVE    A10,A3                  ;LAST GUY IN TABLE IS DESTINATION
    3001 00011790     c00e          JRUC    COPY_DOWN_LOOP
    3002 000117a0           SPECIAL_DIDNT_MAKE_IT
    3003 000117a0     1a20          MOVK    17,A0
    3004 000117b0     4d43          MOVE    A10,A3                  ;LAST GUY IN TABLE IS DESTINATION
    3005 000117c0     c00b          JRUC    COPY_DOWN_LOOP
    3006                    
    3007 000117d0           ADD_ENTRY:
    3008 000117d0     098f          MMTM    SP,A0,A1,A2,A3,A4,A7,A9,A10
         000117e0     f960  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   74

    3009 000117f0     0d3f          CALLR   ROM_PTRS                ;SETUP FOR THIS TABLE
         00011800     009e  
    3010 00011810     4c04          MOVE    A0,A4                   ;STASH THE SCORE A SEC.
    3011 00011820     5642          CLR     A2                      ;DONT WORRY ABOUT OTHER GUY AT THIS POINT
    3012 00011830     0d3f          CALLR   CHECK_SCORE             ;DOES THE REQUEST MAKE IT?
         00011840     ff42  
    3013 00011850     0de0          SETC                            ;ANTICIPATE FAILURE
    3014 00011860     ca21          JRZ     DIDNT_MAKE_IT           ;DON'T KNOW WHY I GOT THESE INITS.
    3015 00011870     4d43          MOVE    A10,A3                  ;LAST GUY IN TABLE IS DESTINATION
    3016                    
    3017 00011880           COPY_DOWN_LOOP:
    3018 00011880     4c62          MOVE    A3,A2                   ;GUY BEFORE HIM IS SOURCE
    3019 00011890     1422          DEC     A2                      ;A2 NOW HAS SOURCE
    3020 000118a0     4802          CMP     A0,A2                   ;IS SOURCE LOWER THAN OUR SLOT?
    3021 000118b0     c804          JRLO    COPY_DONE               ;IT IS...DON'T MOVE HIM.
    3022                    
    3023 000118c0     0d3f          CALLR   COPY_ENTRY              ;COPY A2 ENTRY TO A3
         000118d0     00cf  
    3024 000118e0     1423          DEC     A3                      ;MOVE DOWN TO ONE BEFORE
    3025 000118f0     c0f8          JRUC    COPY_DOWN_LOOP
    3026                    
    3027 00011900           COPY_DONE:
    3028 00011900     0d3f          CALLR   PUT_SCORE_FOR_ENTRY     ;SCORE IN A4 WRITTEN TO ENTRY A0
         00011910     004f  
    3029 00011920     0d3f          CALLR   PT_ENTRY                ;GET ENTRY POINTER IN A7
         00011930     0082  
    3030 00011940     0b07          ADDI    HS_INITS,A7             ;POINT AT FIRST INITIAL
         00011950     0040  
    3031 00011960     09c2          MOVI    NUM_INITS,A2            ;THIS IS NUMBER OF INITIALS
         00011970     0005  
    3032 00011980     098f          MMTM    SP,A0                   ;SAVE A0
         00011990     8000  
    3033                    
    3034 000119a0           INIT_COPY_LOOP:
    3035 000119a0     8e20          MOVB    *A1,A0                  ;GET AN INITIAL
    3036 000119b0     cb02          JRNZ    NOT_BLANK
    3037 000119c0     09c0          MOVI    SPACE,A0                ;REPLACE BLANKS WITH SPACES
         000119d0     0020  
    3038 000119e0           NOT_BLANK:
    3039 000119e0     0d3f          CALLR   WC_BYTEI                ;WRITE THE BYTE AND INCREMENT
         000119f0     01a8  
    3040 00011a00     0b01          ADDI    BYTE_SIZE,A1            ;A1 TO NEXT BYTE PLEASE
         00011a10     0008  
    3041 00011a20     3d22          DSJ     A2,INIT_COPY_LOOP
    3042                    
    3043 00011a30     09af          MMFM    SP,A0                   ;GET BACK ENTRY NUMBER
         00011a40     0001  
    3044 00011a50     0d3f          CALLR   FORM_HS_CKSUM_AND_STORE ;FOR CHECKSUM FOR THIS ENTRY AND STORE!
         00011a60     0061  
    3045 00011a70     0320          CLRC                            ;RETURN SUCCESS!
    3046                    
    3047 00011a80           DIDNT_MAKE_IT
    3048 00011a80     09af          MMFM    SP,A0,A1,A2,A3,A4,A7,A9,A10
         00011a90     069f  
    3049 00011aa0     0960          RETS
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   75

    3050                    
    3051 00011ab0           FIND_HIGH_TABLE_LEVEL
    3052 00011ab0     098f          MMTM    SP,A1,A2,A3
         00011ac0     7000  
    3053 00011ad0     0d3f          CALLR   ROM_PTRS                ;SETUP FOR THIS TABLE
         00011ae0     0070  
    3054 00011af0     0d3f          CALLR   VAL_TAB                 ;FIX THE TABLE IN CASE ITS BROKEN.
         00011b00     00c4  
    3055 00011b10     c809          JRC     jqlhFTL_FAIL            ;CAN'T VALIDATE..SAY SCORE DIDN'T MAKE IT
    3056                    
    3057 00011b20     4c02          MOVE    A0,A2                   ;KEEP SCORE IN A2
    3058 00011b30     1820          MOVK    1,A0                    ;START AT 1 AND WORK UP.
    3059                    
    3060 00011b40           jqlhCHECK_NEXT_SCORE:
    3061 00011b40     0d3f          CALLR   GET_HSCR                ;FETCH A0 ENTRY'S SCORE IN A1
         00011b50     001f  
    3062 00011b60     4822          CMP     A1,A2                   ;HOW DO WE FARE AGAINST A1?
    3063 00011b70     c504          JRGE    jqlhFOUND_THE_SPOT              ;WE FOUND THE SPOT
    3064 00011b80     1020          INC     A0                      ;KEEP MOVING DOWN TILL WE FIT
    3065 00011b90     4940          CMP     A10,A0                  ;ARE WE LOOKING AT THE LAST ONE?
    3066 00011ba0     c2f9          JRLS    jqlhCHECK_NEXT_SCORE
    3067                    
    3068 00011bb0           jqlhFTL_FAIL:
    3069 00011bb0     5600          CLR     A0                      ;WE'RE NOT HIGH ENOUGH RETURN FAILURE
    3070                    
    3071 00011bc0           jqlhFOUND_THE_SPOT:
    3072 00011bc0     4c00          MOVE    A0,A0                   ;MAKE SURE YOU SET THE FLAGS
    3073 00011bd0     09af          MMFM    SP,A1,A2,A3
         00011be0     000e  
    3074 00011bf0     0960          RETS
    3075                    
    3076 00011c00            SUBR   FIND_LOW_TABLE_LEVEL
    3077 00011c00     098f          MMTM    SP,A1,A2,A3
         00011c10     7000  
    3078 00011c20     0d3f          CALLR   ROM_PTRS                ;SETUP FOR THIS TABLE
         00011c30     005b  
    3079 00011c40     0d3f          CALLR   VAL_TAB                 ;FIX THE TABLE IN CASE ITS BROKEN.
         00011c50     00af  
    3080 00011c60     c809          JRC     tibbFTL_FAIL            ;CAN'T VALIDATE..SAY SCORE DIDN'T MAKE IT
    3081                    
    3082 00011c70     4c02          MOVE    A0,A2                   ;KEEP SCORE IN A2
    3083 00011c80     1820          MOVK    1,A0                    ;START AT 1 AND WORK UP.
    3084                    
    3085 00011c90           tibbCHECK_NEXT_SCORE:
    3086 00011c90     0d3f          CALLR   GET_HSCR                ;FETCH A0 ENTRY'S SCORE IN A1
         00011ca0     000a  
    3087 00011cb0     4822          CMP     A1,A2                   ;HOW DO WE FARE AGAINST A1?
    3088 00011cc0     c804          JRLO    tibbFOUND_THE_SPOT
    3089 00011cd0     1020          INC     A0                      ;KEEP MOVING DOWN TILL WE FIT
    3090 00011ce0     4940          CMP     A10,A0                  ;ARE WE LOOKING AT THE LAST ONE?
    3091 00011cf0     c2f9          JRLS    tibbCHECK_NEXT_SCORE
    3092                    
    3093 00011d00           tibbFTL_FAIL:
    3094 00011d00     5600          CLR     A0                      ;WE'RE NOT HIGH ENOUGH RETURN FAILURE
    3095                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   76

    3096 00011d10           tibbFOUND_THE_SPOT:
    3097 00011d10     4c00          MOVE    A0,A0                   ;MAKE SURE YOU SET THE FLAGS
    3098 00011d20     09af          MMFM    SP,A1,A2,A3
         00011d30     000e  
    3099 00011d40     0960          RETS
    3100                    
    3101                    
    3102 00011d50           GET_HSCR
    3103 00011d50     098f          MMTM    SP,A7,A0
         00011d60     8100  
    3104 00011d70     0d3f          CALLR   PT_ENTRY                ;POINT A7 AT ENTRY
         00011d80     003d  
    3105 00011d90     0b07          ADDI    HS_SCORE,A7             ;INDEX SCORE PART.
         00011da0     0000  
    3106 00011db0     0d3f          CALLR   RC_LONG                 ;FETCH THE LONG WORD INTO A0
         00011dc0     0153  
    3107 00011dd0     4c01          MOVE    A0,A1                   ;MOVE TO A1
    3108 00011de0     09af          MMFM    SP,A7,A0
         00011df0     0081  
    3109 00011e00     0960          RETS
    3110                    
    3111 00011e10           PUT_SCORE_FOR_ENTRY
    3112 00011e10     098f          MMTM    SP,A7,A0
         00011e20     8100  
    3113 00011e30     0d3f          CALLR   PT_ENTRY                ;POINT A7 AT ENTRY
         00011e40     0031  
    3114 00011e50     0b07          ADDI    HS_SCORE,A7             ;INDEX SCORE PART.
         00011e60     0000  
    3115 00011e70     4c80          MOVE    A4,A0                   ;MOVE SCORE TO A0
    3116 00011e80     0d3f          CALLR   WC_LONG                 ;WRITE OUT THE LONG WORD
         00011e90     0174  
    3117 00011ea0     09af          MMFM    SP,A7,A0
         00011eb0     0081  
    3118 00011ec0     0960          RETS
    3119                    
    3120 00011ed0           FORM_HS_CKSUM:
    3121 00011ed0     098f          MMTM    SP,A0,A4,A6,A7
         00011ee0     8b00  
    3122 00011ef0     0d3f          CALLR   PT_ENTRY                ;A7 = POINTER TO CURRENT ENTRY
         00011f00     0025  
    3123 00011f10     098f          MMTM    SP,A7                   ;SAVE POINTER TO ENTRY
         00011f20     0100  
    3124 00011f30     09c4          MOVI    HS_BYTES_TO_CHECK,A4    ;COUNT DOWN THE BYTES
         00011f40     0009  
    3125 00011f50     5621          CLR     A1                      ;KEEP SUM IN A1
    3126 00011f60           ADD_A_BYTE:
    3127 00011f60     0d3f          CALLR   RC_BYTEI                ;GET A BYTE INTO A0
         00011f70     011a  
    3128 00011f80     4001          ADD     A0,A1                   ;ADD TO SUM
    3129 00011f90     3c84          DSJ     A4,ADD_A_BYTE           ;ONE MORE ADDED
    3130 00011fa0     03e1          NOT     A1                      ;CHECKSUM IS NOW IN LOW BYTE
    3131 00011fb0     0b81          ANDI    BYTE_MASK,A1            ;MASK SO ITS COOL
         00011fc0 ffffff00  
    3132 00011fe0     09af          MMFM    SP,A7                   ;GET POINTER BACK
         00011ff0     0080  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   77

    3133 00012000     0b07          ADDI    HS_CKBYTE,A7            ;POINT AT CHECKBYTE
         00012010     0090  
    3134 00012020     0d3f          CALLR   RC_BYTE                 ;READ IN THE BYTE
         00012030     0105  
    3135 00012040     4801          CMP     A0,A1                   ;COMPARE WHAT'S THERE TO WHAT WE GOT
    3136 00012050     09af          MMFM    SP,A0,A4,A6,A7          ;Z BIT RETURNS COMPARE
         00012060     00d1  
    3137 00012070     0960          RETS                            ;A1 RETURNS CKSUM
    3138                    
    3139 00012080           FORM_HS_CKSUM_AND_STORE:
    3140 00012080     098f          MMTM    SP,A0,A7
         00012090     8100  
    3141 000120a0     0d3f          CALLR   FORM_HS_CKSUM           ;GET THE CKSUM IN A1, POINTER IN A7
         000120b0     ffe1  
    3142 000120c0     0d3f          CALLR   PT_ENTRY                ;POINT AT THE VALUE
         000120d0     0008  
    3143 000120e0     0b07          ADDI    HS_CKBYTE,A7            ;POINT AT CHECKBYTE
         000120f0     0090  
    3144 00012100     4c20          MOVE    A1,A0                   ;GET CHECKBYTE TO A0
    3145 00012110     0d3f          CALLR   WC_BYTE                 ;WRITE OUT THE BYTE
         00012120     00fa  
    3146 00012130     09af          MMFM    SP,A0,A7
         00012140     0081  
    3147 00012150     0960          RETS
    3148                    
    3149 00012160           PT_ENTRY:
    3150 00012160     4940          CMP     A10,A0                  ;A10 IS MAX VALUE
    3151 00012170     c202          JRLS    POINTER_IN_RANGE
    3152                    
    3153                            .IF DEBUG
    3154                            LOCKUP
    3155                            .ENDIF
    3156                    
    3157 00012180     4d27          MOVE    A9,A7                   ;RETURN ZERO OFFSET IN FIELD
    3158 00012190     0960          RETS
    3159                    
    3160 000121a0           POINTER_IN_RANGE:
    3161 000121a0     09c7          MOVI    HS_SIZE,A7              ;SIZE OF ENTRY
         000121b0     00a0  
    3162 000121c0     5e07          MPYU    A0,A7                   ;OFFSET OF ENTRY
    3163 000121d0     4127          ADD     A9,A7                   ;ADD IN THE BASE
    3164 000121e0     0960          RETS
    3165                    
    3166 000121f0           ROM_PTRS:
    3167 000121f0     098f          MMTM    SP,A0,A1                ;SCRATCH REGGIES
         00012200     c000  
    3168 00012210     b709          MOVE    *A8(TB_POINTER),A9,L    ;GET CMOS POINTER
         00012220     0000  
    3169 00012230     b50a          MOVE    *A8(TB_COUNT),A10,W     ;GET NUMBER OF ENTRIES
         00012240     0020  
    3170 00012250     b501          MOVE    *A8(TB_PAGE_BITS),A1    ;GET OUR CMOS PAGE BITS
         00012260     0040  
    3171                    
    3172 00012270     0d3f          CALLR   SET_PAGE
         00012280     0003  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   78

    3173                    
    3174 00012290     09af          MMFM    SP,A0,A1                ;SCRATCH REGGIES
         000122a0     0003  
    3175 000122b0     0960          RETS
    3176                    
    3177 000122c0           SET_PAGE
    3178 000122c0     0960          RETS
    3179                    
    3180 000122d0           INIT_TAB
    3181 000122d0     0960          RETS
    3182                    
    3183                    
    3184 000122e0            SUBR   INIT_HSTRING
    3185 000122e0     09c0          MOVI    AUD_WINSTREAK,A0
         000122f0     0057  
    3186 00012300     0d5f          CALLA   KILL_AUD
         00012310 00000000! 
    3187 00012330     09c0          MOVI    AUD_PINSPEED,A0
         00012340     0058  
    3188 00012350     0d5f          CALLA   KILL_AUD
         00012360 00000000! 
    3189 00012380     09c0          MOVI    AUD_BEATEN,A0
         00012390     0059  
    3190 000123a0     0d5f          CALLA   KILL_AUD
         000123b0 00000000! 
    3191 000123d0     09c0          MOVI    AUD_TAG,A0
         000123e0     0062  
    3192 000123f0     0d5f          CALLA   KILL_AUD
         00012400 00000000! 
    3193 00012420     0960          rets
    3194                    
    3195                    
    3196 00012430            SUBR   INIT_TB
    3197                    
    3198 00012430     098f          MMTM    SP,A5,A6,A7,A0
         00012440     8700  
    3199 00012450     0d3f          CALLR   ROM_PTRS                ;STUFF TABLE DATA
         00012460     ffd8  
    3200 00012470     b706          MOVE    *A8(TB_FACTORY),A6,L    ;GET THE FACTORY TABLE
         00012480     0050  
    3201 00012490     4d45          MOVE    A10,A5                  ;NUMBER OF VALID ENTRIES
    3202 000124a0     1025          INC     A5                      ;1 MORE TO HOLD ZERO ENTRY
    3203 000124b0     09c1          MOVI    HS_SIZE_IN_BYTES,A1     ;SIZE OF 1 ENTRY
         000124c0     000a  
    3204 000124d0     5e25          MPYU    A1,A5                   ;A7 HAS NUMBER OF WORDS TO MOVE
    3205 000124e0     4d27          MOVE    A9,A7                   ;CMOS POINTER IN A7
    3206                    
    3207 000124f0           INIT_TB_1
    3208 000124f0     8ec0          MOVB    *A6,A0                  ;GET A BYTE FROM ROM
    3209 00012500     0b06          ADDI    BYTE_SIZE,A6            ;KICK ROM POINTER
         00012510     0008  
    3210 00012520     0d3f          CALLR   WC_BYTEI                ;WRITE THE BYTE AND INCREMENT
         00012530     00f4  
    3211 00012540     3cc5          DSJS    A5,INIT_TB_1            ;UNTIL THEY'RE ALL THERE.
    3212                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   79

    3213 00012550     4d40          MOVE    A10,A0                  ;POINT AT LAST ENTRY
    3214 00012560           INIT_TB_2
    3215 00012560     0d3f          CALLR   FORM_HS_CKSUM_AND_STORE ;SET ITS CHECKSUM
         00012570     ffb0  
    3216 00012580     1420          DEC     A0                      ;MOVE DOWN
    3217 00012590     cffc          JRNN    INIT_TB_2               ;SET EACH ONE INCLUDING ZERO
    3218 000125a0     09af          MMFM    SP,A5,A6,A7,A0
         000125b0     00e1  
    3219                    
    3220 000125c0     0960          RETS
    3221                    
    3222 000125d0           COPY_ENTRY:
    3223 000125d0     098f          MMTM    SP,A0,A4,A5,A6,A7
         000125e0     8f00  
    3224 000125f0     09c4          MOVI    HS_SIZE_IN_BYTES,A4     ;ENTRY SIZE IN BYTES
         00012600     000a  
    3225 00012610     4c40          MOVE    A2,A0                   ;FIRST POINT FOR A0
    3226 00012620     0d3f          CALLR   PT_ENTRY        
         00012630     ffb2  
    3227 00012640     4ce6          MOVE    A7,A6                   ;A6 = SOURCE POINTER
    3228 00012650     4c60          MOVE    A3,A0
    3229 00012660     0d3f          CALLR   PT_ENTRY                ;A5 = DESTINATION
         00012670     ffae  
    3230 00012680     4ce5          MOVE    A7,A5
    3231 00012690           COPY_LOOP:
    3232 00012690     4cc7          MOVE    A6,A7                   ;SOURCE IN CMOS REGGIE
    3233 000126a0     0d3f          CALLR   RC_BYTEI                ;FETCH A WORD
         000126b0     00a6  
    3234 000126c0     4ce6          MOVE    A7,A6
    3235 000126d0     4ca7          MOVE    A5,A7                   ;DESTINATION
    3236 000126e0     0d3f          CALLR   WC_BYTEI                ;WRITE IT
         000126f0     00d8  
    3237 00012700     4ce5          MOVE    A7,A5                   ;BACK TO DEST REGGIE
    3238 00012710     3d24          DSJ     A4,COPY_LOOP            ;UNTIL ALL WORDS ARE COPIED
    3239 00012720     09af          MMFM    SP,A0,A4,A5,A6,A7
         00012730     00f1  
    3240 00012740     0960          RETS
    3241                    
    3242 00012750           VAL_TAB
    3243 00012750     5642          CLR     A2              ;indicate first call in
    3244 00012760     0d3f          CALLR   DO_VALIDATE     ;validate
         00012770     0001  
    3245 00012780     0960          RETS
    3246                    
    3247 00012790           DO_VALIDATE
    3248 00012790     098f          MMTM    SP,A0,A1,A3,A4,A5,A6,A7
         000127a0     df00  
    3249 000127b0     0d3f          CALLR   ROM_PTRS                ;SETUP FOR TABLE
         000127c0     ffa2  
    3250 000127d0     09c0          MOVI    1,A0                    ;ITERATE THROUGH THE ENTRIES
         000127e0     0001  
    3251 000127f0     5621          CLR     A1                      ;COUNT ERRORS
    3252                    
    3253 00012800           CHECK_A0_ENTRY:
    3254 00012800     0d3f          CALLR   CHECK_ENTRY             ;IS THE ENTRY OK?
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   80

         00012810     001f  
    3255 00012820     c913          JRNC    VT_1                    ;YEP.
    3256                    
    3257 00012830     0d3f          CALLR   REMOVE_ENTRY            ;REMOVE THIS ENTRY
         00012840     0062  
    3258 00012850     1021          INC     A1
    3259 00012860     b503          MOVE    *A8(TB_ERROR_COUNT),A3  ;GET THRESHOLD
         00012870     0070  
    3260 00012880     4861          CMP     A3,A1                   ;ARE WE THERE?
    3261 00012890     c8f6          JRLO    CHECK_A0_ENTRY          ;NOPE...CHECK MOVE UP ENTRY AT A0
    3262 000128a0     4c42          MOVE    A2,A2                   ;IS THIS RECURSIVE CHECK AFTER INIT?
    3263 000128b0     cb11          JRNZ    CANT_VALIDATE           ;THEN RETURN FAILURE
    3264                    
    3265 000128c0     0d3f          CALLR   INIT_TB                 ;INIT THIS TABLE PLEASE
         000128d0     ffb5  
    3266 000128e0     0d3f          CALLR   INIT_HSTRING
         000128f0     ff9e  
    3267 00012900     1822          MOVK    1,A2                    ;INDICATE RECURSIVE CALL
    3268 00012910     0d3f          CALLR   DO_VALIDATE             ;IS IT ALRIGHT NOW?
         00012920     ffe6  
    3269 00012930     09af          MMFM    SP,A0,A1,A3,A4,A5,A6,A7
         00012940     00fb  
    3270 00012950     0960          RETS
    3271 00012960           VT_1:   
    3272 00012960     1020          INC     A0                      ;KICK IT
    3273 00012970     4940          CMP     A10,A0                  ;STILL IN TABLE?
    3274 00012980     c2e7          JRLS    CHECK_A0_ENTRY          ;YEP....CHECK THIS ENTRY
    3275                    
    3276 00012990     0320          CLRC                            ;RETURN VALID!
    3277 000129a0     09af          MMFM    SP,A0,A1,A3,A4,A5,A6,A7
         000129b0     00fb  
    3278 000129c0     0960          RETS
    3279                    
    3280 000129d0           CANT_VALIDATE:
    3281 000129d0     0de0          SETC                            ;RETURN FAILURE!
    3282 000129e0     09af          MMFM    SP,A0,A1,A3,A4,A5,A6,A7
         000129f0     00fb  
    3283 00012a00     0960          RETS
    3284                    
    3285 00012a10           CHECK_ENTRY
    3286 00012a10     098f          MMTM    SP,A0,A1,A2,A3,A7
         00012a20     f100  
    3287 00012a30     0d3f          CALLR   FORM_HS_CKSUM           ;CHECK OUT CKSUM FIRST
         00012a40     ff48  
    3288 00012a50     cb21          JRNZ    CHECK_FAIL              ;BAD CHECKSUM....ITS BAD
    3289 00012a60     0d3f          CALLR   GET_HSCR                ;SCORE IN A1
         00012a70     ff2d  
    3290 00012a80     4c23          MOVE    A1,A3                   ;SAVE COPY OF SCORE
    3291                    
    3292 00012a90           CHECK_DIGIT:
    3293 00012a90     4c22          MOVE    A1,A2                   ;COPY FOR NEXT NIBBLE
    3294 00012aa0     0b82          ANDI    0FH,A2                  ;MASK THE NIBBLE
         00012ab0 fffffff0  
    3295 00012ad0     0b42          CMPI    9,A2
         00012ae0     fff6  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   81

    3296 00012af0     c317          JRHI    CHECK_FAIL              ;NIBBLE TOO HIGH
    3297 00012b00     2f81          SRL     4,A1                    ;SHIFT DOWN TO NEXT NIBBLE
    3298 00012b10     cbf7          JRNZ    CHECK_DIGIT
    3299                    
    3300 00012b20     1420          DEC     A0                      ;MAKE SURE WE ARE LOWER THAN PREVIOUS SCORE!
    3301 00012b30     ca02          JREQ    FIRST_ENT               ;WE'RE THE 1ST IN THE TABLE
    3302                    
    3303 00012b40     0d3f          CALLR   GET_HSCR                ;GET THE SCORE FOR THE GUY BEFORE US
         00012b50     ff1f  
    3304                    
    3305 00012b60           FIRST_ENT:
    3306 00012b60     1020          INC     A0                      ;RESTORE THE ENTRY NUMBER
    3307 00012b70     0d3f          CALLR   PT_ENTRY                ;POINT A7 AT ENTRY
         00012b80     ff5d  
    3308 00012b90     0b07          ADDI    HS_INITS,A7             ;POINT AT FIRST INITIAL
         00012ba0     0040  
    3309 00012bb0     09c2          MOVI    NUM_INITS,A2            ;THIS IS NUMBER OF INITIALS
         00012bc0     0005  
    3310                    
    3311 00012bd0           NEXT_LETTER:
    3312 00012bd0     0d3f          CALLR   RC_BYTEI                ;FETCH A BYTE
         00012be0     0053  
    3313                    
    3314 00012bf0     0d3f          CALLR   VERIFY_LETTER           ;SEE IF ITS VALID.
         00012c00     000a  
    3315 00012c10     c805          JRC     CHECK_FAIL              ;NOT A LETTER...BYTE
    3316                    
    3317 00012c20     3cc2          DSJ     A2,NEXT_LETTER
    3318                    
    3319 00012c30     0320          CLRC                            ;RETURN PASS
    3320 00012c40     09af          MMFM    SP,A0,A1,A2,A3,A7
         00012c50     008f  
    3321 00012c60     0960          RETS
    3322                    
    3323 00012c70           CHECK_FAIL:
    3324 00012c70     0de0          SETC
    3325 00012c80     09af          MMFM    SP,A0,A1,A2,A3,A7
         00012c90     008f  
    3326 00012ca0     0960          RETS
    3327                    
    3328                    
    3329                    
    3330 00012cb0           VERIFY_LETTER:
    3331 00012cb0     0b80          ANDI    BYTE_MASK,A0            ;KEEP JUST THE BYTE
         00012cc0 ffffff00  
    3332                    
    3333 00012ce0     0b40          CMPI    '.',A0                  ;SPACE?
         00012cf0     ffd1  
    3334 00012d00     ca12          JREQ    VERIFY_PASS             ;ITS OK.
    3335                    
    3336 00012d10     0b40          CMPI    '!',A0                  ;SPACE?
         00012d20     ffde  
    3337 00012d30     ca0f          JREQ    VERIFY_PASS             ;ITS OK.
    3338                    
    3339 00012d40     0b40          CMPI    '%',A0                  ;SPACE?
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   82

         00012d50     ffda  
    3340 00012d60     ca0c          JREQ    VERIFY_PASS             ;ITS OK.
    3341                    
    3342 00012d70     0b40          CMPI    '?',A0                  ;SPACE?
         00012d80     ffc0  
    3343 00012d90     ca09          JREQ    VERIFY_PASS             ;ITS OK.
    3344                    
    3345 00012da0     0b40          CMPI    SPACE,A0                ;SPACE?
         00012db0     ffdf  
    3346 00012dc0     ca06          JREQ    VERIFY_PASS             ;ITS OK.
    3347                    
    3348 00012dd0     0b40          CMPI    LET_A,A0                ;BETWEEN A-Z?
         00012de0     ffbe  
    3349 00012df0     c805          JRLO    VERIFY_FAIL
    3350                    
    3351 00012e00     0b40          CMPI    LET_Z,A0
         00012e10     ffa5  
    3352 00012e20     c302          JRHI    VERIFY_FAIL
    3353                    
    3354 00012e30           VERIFY_PASS:
    3355 00012e30     0320          CLRC
    3356 00012e40     0960          RETS
    3357                    
    3358 00012e50           VERIFY_FAIL:
    3359 00012e50     0de0          SETC
    3360 00012e60     0960          RETS
    3361                    
    3362 00012e70           REMOVE_ENTRY:
    3363 00012e70     098f          MMTM    SP,A0,A1,A2,A6,A7
         00012e80     e300  
    3364 00012e90     4c03          MOVE    A0,A3                   ;THIS IS DEST
    3365 00012ea0     4c62          MOVE    A3,A2                   ;SOURCE IS 1 BELOW
    3366                    
    3367 00012eb0           BUBBLE_ANOTHER:
    3368 00012eb0     1022          INC     A2                      ;NOW WE'RE SET FOR A COPY...
    3369                    
    3370 00012ec0     4942          CMP     A10,A2                  ;IS SOURCE OUT OF RANGE?
    3371 00012ed0     c304          JRHI    BUBBLE_DONE             ;YEP....WE'RE AT THE BOTTOM (A3)
    3372                    
    3373 00012ee0     0d3f          CALLR   COPY_ENTRY
         00012ef0     ff6d  
    3374 00012f00     1023          INC     A3
    3375 00012f10     c0f9          JRUC    BUBBLE_ANOTHER
    3376                    
    3377 00012f20           BUBBLE_DONE:
    3378 00012f20     4c60          MOVE    A3,A0                   ;THIS IS BOTTOM OF TABLE
    3379 00012f30     0d3f          CALLR   PT_ENTRY                ;A7 POINTS AT CMOS BLOCK
         00012f40     ff21  
    3380                    
    3381 00012f50     b706          MOVE    *A8(TB_FACTORY),A6,L    ;GET FACTORY TABLE
         00012f60     0050  
    3382 00012f70     09c1          MOVI    HS_ROM_SIZE,A1          ;SIZE OF ENTRY
         00012f80     0050  
    3383 00012f90     5f41          MPYU    A10,A1                  ;TIMES NUMBER OF VALID ENTRIES..POINTS AT LAST.
    3384 00012fa0     4026          ADD     A1,A6                   ;NOW WE POINT AT END OF ROM TABLE
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   83

    3385 00012fb0     09c2          MOVI    HS_SIZE_IN_BYTES,A2     ;SIZE OF ENTRY
         00012fc0     000a  
    3386                    
    3387 00012fd0           REPLACE_LOOP:
    3388 00012fd0     8ec0          MOVB    *A6,A0                  ;MOVE A ROM BYTE TO A0
    3389 00012fe0     0b06          ADDI    BYTE_SIZE,A6
         00012ff0     0008  
    3390 00013000     0d3f          CALLR   WC_BYTEI                ;WRITE THE WORD AND INCREMENT
         00013010     0046  
    3391 00013020     3cc2          DSJ     A2,REPLACE_LOOP         ;UNTIL THEY'RE ALL THERE.
    3392                    
    3393 00013030     4d40          MOVE    A10,A0                  ;POINT AT "LAST" ENTRY
    3394 00013040     0d3f          CALLR   FORM_HS_CKSUM_AND_STORE ;STORE THE CHECKBYTE
         00013050     ff02  
    3395 00013060     09af          MMFM    SP,A0,A1,A2,A6,A7       ;AND RETURN
         00013070     00c7  
    3396 00013080     0960          RETS
    3397                    
    3398                    
    3399                    
    3400                    
    3401                    
    3402 00013090           RC_BYTE
    3403 00013090     8ee0          movb    *a7,a0
    3404 000130a0     2700          sll     32-8,a0
    3405 000130b0     2d00          srl     32-8,a0
    3406 000130c0     0960          rets
    3407                    
    3408 000130d0           WC_BYTE
    3409 000130d0     0580          move    a0,@CMOSWE
         000130e0 014ffff0  
    3410 00013100     8c07          movb    a0,*a7
    3411 00013110     0960          rets
    3412                    
    3413                    
    3414 00013120           RC_BYTEI:
    3415 00013120     0d3f          CALLR   RC_BYTE
         00013130     fff5  
    3416 00013140     0b07          ADDI    C_BYTE_SIZE,A7  ;WORDS SEPARATE CMOS BYTES.
         00013150     0010  
    3417 00013160     4c00          MOVE    A0,A0           ;RETURN FLAGS ACCORDINGLY
    3418 00013170     0960          RETS
    3419                    
    3420 00013180           RC_WORD:
    3421 00013180     098f          MMTM    SP,A1,A7        ;USE A1 TO COMBINE BYTES
         00013190     4100  
    3422 000131a0     0d3f          CALLR   RC_BYTEI        ;GET A BYTE
         000131b0     fff6  
    3423 000131c0     4c01          MOVE    A0,A1           ;SAVE IN A1
    3424 000131d0     0b81          ANDI    BYTE_MASK,A1    ;MASK ONLY BYTE
         000131e0 ffffff00  
    3425 00013200     2501          SLL     8,A1            ;SHIFT TO HIGH BYTE
    3426 00013210     0d3f          CALLR   RC_BYTE         ;GET THE 2ND BYTE
         00013220     ffe6  
    3427 00013230     0b80          ANDI    BYTE_MASK,A0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   84

         00013240 ffffff00  
    3428 00013260     5420          OR      A1,A0           ;A0 HAS THE WORD
    3429 00013270     09af          MMFM    SP,A1,A7        
         00013280     0082  
    3430 00013290     0960          RETS
    3431                    
    3432 000132a0           RC_WORDI:
    3433 000132a0     0d3f          CALLR   RC_WORD
         000132b0     ffec  
    3434 000132c0     0b07          ADDI    C_WORD_SIZE,A7  ;LONG SEPARATE CMOS WORDS.
         000132d0     0020  
    3435 000132e0     4c00          MOVE    A0,A0           ;RETURN FLAGS ACCORDINGLY
    3436 000132f0     0960          RETS
    3437                    
    3438 00013300           RC_LONG:
    3439 00013300     098f          MMTM    SP,A1,A7        ;USE A1 TO COMBINE BYTES
         00013310     4100  
    3440 00013320     0d3f          CALLR   RC_WORDI        ;GET A WORD
         00013330     fff6  
    3441 00013340     4c01          MOVE    A0,A1           ;SAVE IN A1
    3442 00013350     0b81          ANDI    WORD_MASK,A1    ;MASK ONLY WORD
         00013360 ffff0000  
    3443 00013380     2601          SLL     16,A1           ;SHIFT TO HIGH WORD
    3444 00013390     0d3f          CALLR   RC_WORD         ;GET THE 2ND WORD
         000133a0     ffdd  
    3445 000133b0     0b80          ANDI    WORD_MASK,A0
         000133c0 ffff0000  
    3446 000133e0     5420          OR      A1,A0           ;A0 HAS THE LONG WORD
    3447 000133f0     09af          MMFM    SP,A1,A7        
         00013400     0082  
    3448 00013410     0960          RETS
    3449                    
    3450 00013420           RC_LONGI:
    3451 00013420     0d3f          CALLR   RC_LONG
         00013430     ffec  
    3452 00013440     0b07          ADDI    C_LONG_SIZE,A7  ;DOUBLE THE DISTANCE FOR BRAIN DAMIJ
         00013450     0040  
    3453 00013460     4c00          MOVE    A0,A0           ;RETURN FLAGS ACCORDINGLY
    3454 00013470     0960          RETS
    3455                    
    3456 00013480           WC_BYTEI:
    3457 00013480     0d3f          CALLR   WC_BYTE
         00013490     ffc3  
    3458 000134a0     0b07          ADDI    C_BYTE_SIZE,A7
         000134b0     0010  
    3459 000134c0     0960          RETS
    3460                    
    3461 000134d0           WC_WORD:
    3462 000134d0     098f          MMTM    SP,A0,A1,A7
         000134e0     c100  
    3463 000134f0     4c01          MOVE    A0,A1           ;MAKE COPY OF WORD
    3464 00013500     2f00          SRL     8,A0            ;GET HIGH BYTE IN A0
    3465 00013510     0d3f          CALLR   WC_BYTEI        ;WRITE THE HIGH BYTE
         00013520     fff5  
    3466 00013530     4c20          MOVE    A1,A0           ;NOW GET THE LOW BYTE BACK
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   85

    3467 00013540     0d3f          CALLR   WC_BYTE ;WRITE IT
         00013550     ffb7  
    3468 00013560     09af          MMFM    SP,A0,A1,A7     ;AND RESTORE ALL WE TOUCHED
         00013570     0083  
    3469 00013580     0960          RETS
    3470                    
    3471 00013590           WC_WORDI:
    3472 00013590     0d3f          CALLR   WC_WORD
         000135a0     fff2  
    3473 000135b0     0b07          ADDI    C_WORD_SIZE,A7
         000135c0     0020  
    3474 000135d0     0960          RETS
    3475                    
    3476 000135e0           WC_LONG:
    3477 000135e0     098f          MMTM    SP,A0,A1,A7
         000135f0     c100  
    3478 00013600     4c01          MOVE    A0,A1           ;MAKE COPY OF LONG
    3479 00013610     2e00          SRL     16,A0           ;GET HIGH WORD IN A0
    3480 00013620     0d3f          CALLR   WC_WORDI        ;WRITE THE HIGH WORD
         00013630     fff5  
    3481 00013640     4c20          MOVE    A1,A0           ;NOW GET THE LOW WORD BACK
    3482 00013650     0d3f          CALLR   WC_WORD ;WRITE IT
         00013660     ffe6  
    3483 00013670     09af          MMFM    SP,A0,A1,A7     ;AND RESTORE ALL WE TOUCHED
         00013680     0083  
    3484 00013690     0960          RETS
    3485                    
    3486 000136a0           WC_LONGI:
    3487 000136a0     0d3f          CALLR   WC_LONG
         000136b0     fff2  
    3488 000136c0     0b07          ADDI    C_LONG_SIZE,A7
         000136d0     0040  
    3489 000136e0     0960          RETS
    3490                    
    3491                    
    3492              0000  TB_POINTER       EQU     0                      ;LONG-POINTER TO BEGINNING OF TABLE
    3493              0020  TB_COUNT         EQU     TB_POINTER+LONG_SIZE   ;WORD....# IN THE TABLE.
    3494              0030  TB_VISIBLE       EQU     TB_COUNT+WORD_SIZE     ;WORD....NUMBER DISPLAYED
    3495              0040  TB_PAGE_BITS     EQU     TB_VISIBLE+WORD_SIZE   ;WORD....STATUS WORD FOR CMOS PAGE
    3496              0050  TB_FACTORY       EQU     TB_PAGE_BITS+WORD_SIZE ;LONG....ROM STARTUP TABLE
    3497              0070  TB_ERROR_COUNT   EQU     TB_FACTORY+LONG_SIZE   ;WORD....NUM ERRORS TO RE-INIT
    3498                    
    3499                    
    3500                    SCRM    .MACRO  a
    3501                            .byte   :a:/01000000H,:a:/010000H&0ffH,:a:/0100H&0ffH,:a:&0ffH
    3502                            .ENDM
    3503                    
    3504 000136f0           STREAK_ROM_TABLE
    3505 000136f0                   SCRM    022122145H              ;****ZERO ENTRY...NOT SEEN!
    3506 00013710       45          .BYTE   "EPJA.",0
    3507              0050  ROM_ENTRY_SIZE  EQU     $-STREAK_ROM_TABLE
    3508 00013740                   SCRM    011H
    3509 00013760       4d          .BYTE   "MJTA.",0
    3510 00013790                   SCRM    010H
    3511 000137b0       53          .BYTE   "SALB.",0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   86

    3512 000137e0                   SCRM    09H
    3513 00013800       4a          .BYTE   "JMSC.",0
    3514 00013830                   SCRM    09H
    3515 00013850       4a          .BYTE   "JYTD.",0
    3516 00013880                   SCRM    08H
    3517 000138a0       4d          .BYTE   "MJLE.",0
    3518 000138d0                   SCRM    08H
    3519 000138f0       4a          .BYTE   "JAKF.",0
    3520 00013920                   SCRM    07H
    3521 00013940       4f          .BYTE   "OEGA.",0
    3522 00013970                   SCRM    07H
    3523 00013990       53          .BYTE   "SL A.",0
    3524 000139c0                   SCRM    07H
    3525 000139e0       4d          .BYTE   "MDPA.",0
    3526                    
    3527 00013a10                   SCRM    06H
    3528 00013a30       47          .BYTE   "GBSA.",0
    3529 00013a60                   SCRM    06H
    3530 00013a80       44          .BYTE   "DJTA.",0
    3531 00013ab0                   SCRM    06H
    3532 00013ad0       45          .BYTE   "EPJA.",0
    3533 00013b00                   SCRM    05H
    3534 00013b20       42          .BYTE   "BIFA.",0
    3535 00013b50                   SCRM    05H
    3536 00013b70       55          .BYTE   "UNKA.",0
    3537 00013ba0                   SCRM    05H
    3538 00013bc0       55          .BYTE   "UTBA.",0
    3539 00013bf0                   SCRM    04H
    3540 00013c10       43          .BYTE   "CRLA.",0
    3541 00013c40                   SCRM    04H
    3542 00013c60       54          .BYTE   "TDGA.",0
    3543 00013c90                   SCRM    04H
    3544 00013cb0       41          .BYTE   "ASBA.",0
    3545              0013  STREAK_TABLE_ENTRIES    EQU     ($-STREAK_ROM_TABLE)/ROM_ENTRY_SIZE
    3546                    
    3547 00013ce0           PIN_SPEED_TAB_ROM_TABLE
    3548                    
    3549 00013ce0                   SCRM    07000H          ;****ZERO ENTRY...NOT SEEN!
    3550 00013d00       45          .BYTE   "EPJA.",0
    3551 00013d30                   SCRM    06000H 
    3552 00013d50       4d          .BYTE   "MJTI.",0
    3553 00013d80                   SCRM    06100H
    3554 00013da0       53          .BYTE   "SALI.",0
    3555 00013dd0                   SCRM    06200H
    3556 00013df0       4a          .BYTE   "JMSG.",0
    3557 00013e20                   SCRM    06300H
    3558 00013e40       4a          .BYTE   "JYTF.",0
    3559 00013e70                   SCRM    06400H
    3560 00013e90       4a          .BYTE   "JAKE.",0
    3561 00013ec0                   SCRM    06500H
    3562 00013ee0       4f          .BYTE   "OEGD.",0
    3563 00013f10                   SCRM    06600H
    3564 00013f30       4d          .BYTE   "MJLC.",0
    3565 00013f60                   SCRM    06700H
    3566 00013f80       55          .BYTE   "UTBB.",0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   87

    3567 00013fb0                   SCRM    06800H 
    3568 00013fd0       41          .BYTE   "ASBA.",0
    3569                    
    3570              000a  PIN_SPEED_TAB_ENTRIES   EQU     ($-PIN_SPEED_TAB_ROM_TABLE)/ROM_ENTRY_SIZE
    3571                    
    3572 00014000           BEATEN_ROM_TABLE
    3573 00014000                   SCRM    022122145H              ;****ZERO ENTRY...NOT SEEN!
    3574 00014020       45          .BYTE   "EPJAB",0
    3575              0050  B_ROM_ENTRY_SIZE        EQU     $-BEATEN_ROM_TABLE
    3576 00014050                   SCRM    011101H
    3577 00014070       4d          .BYTE   "MIKE ",0
    3578 000140a0                   SCRM    01001H
    3579 000140c0       4a          .BYTE   "JAMIT",0
    3580 000140f0                   SCRM    0100H
    3581 00014110       54          .BYTE   "TEAL ",0
    3582 00014140                   SCRM    01000H
    3583 00014160       44          .BYTE   "DINK ",0
    3584 00014190                   SCRM    010000H
    3585 000141b0       4a          .BYTE   "JAKE ",0
    3586 000141e0                   SCRM    0100000H
    3587 00014200       44          .BYTE   "DRJ  ",0
    3588 00014230                   SCRM    01000000H
    3589 00014250       43          .BYTE   "CHICK",0
    3590 00014280                   SCRM    010000000H
    3591 000142a0       53          .BYTE   "SHAWN",0
    3592 000142d0                   SCRM    00000000H
    3593 000142f0       20          .BYTE   "     ",0
    3594 00014320                   SCRM    00000000H
    3595 00014340       20          .BYTE   "     ",0
    3596 00014370                   SCRM    00000000H
    3597 00014390       20          .BYTE   "     ",0
    3598 000143c0                   SCRM    00000000H
    3599 000143e0       20          .BYTE   "     ",0
    3600 00014410                   SCRM    00000000H
    3601 00014430       20          .BYTE   "     ",0
    3602 00014460                   SCRM    00000000H
    3603 00014480       20          .BYTE   "     ",0
    3604 000144b0                   SCRM    00000000H
    3605 000144d0       20          .BYTE   "     ",0
    3606 00014500                   SCRM    00000000H
    3607 00014520       20          .BYTE   "     ",0
    3608 00014550                   SCRM    00000000H
    3609 00014570       20          .BYTE   "     ",0
    3610 000145a0                   SCRM    00000000H
    3611 000145c0       20          .BYTE   "     ",0
    3612 000145f0                   SCRM    00000000H
    3613 00014610       20          .BYTE   "     ",0
    3614 00014640                   SCRM    00000000H
    3615 00014660       20          .BYTE   "     ",0
    3616 00014690                   SCRM    00000000H
    3617 000146b0       20          .BYTE   "     ",0
    3618 000146e0                   SCRM    00000000H
    3619 00014700       20          .BYTE   "     ",0
    3620 00014730                   SCRM    00000000H
    3621 00014750       20          .BYTE   "     ",0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   88

    3622 00014780                   SCRM    00000000H
    3623 000147a0       20          .BYTE   "     ",0
    3624 000147d0                   SCRM    00000000H
    3625 000147f0       20          .BYTE   "     ",0
    3626 00014820                   SCRM    00000000H
    3627 00014840       20          .BYTE   "     ",0
    3628 00014870                   SCRM    00000000H
    3629 00014890       20          .BYTE   "     ",0
    3630 000148c0                   SCRM    00000000H
    3631 000148e0       20          .BYTE   "     ",0
    3632 00014910                   SCRM    00000000H
    3633 00014930       20          .BYTE   "     ",0
    3634 00014960                   SCRM    00000000H
    3635 00014980       20          .BYTE   "     ",0
    3636              001f  BEATEN_TAB_ENTRIES      EQU     ($-BEATEN_ROM_TABLE)/B_ROM_ENTRY_SIZE
    3637                    
    3638 000149b0           INTER_ROM_TABLE
    3639 000149b0                   SCRM    022122145H              ;****ZERO ENTRY...NOT SEEN!
    3640 000149d0       45          .BYTE   "EPJAB",0
    3641              0050  I_ROM_ENTRY_SIZE        EQU     $-INTER_ROM_TABLE
    3642 00014a00                   SCRM    0111H
    3643 00014a20       4d          .BYTE   "MARK ",0
    3644 00014a50                   SCRM    0101H
    3645 00014a70       53          .BYTE   "SAL  ",0
    3646 00014aa0                   SCRM    0100H
    3647 00014ac0       4a          .BYTE   "JASON",0
    3648 00014af0                   SCRM    01000H
    3649 00014b10       4c          .BYTE   "LICK ",0
    3650 00014b40                   SCRM    010000H
    3651 00014b60       4a          .BYTE   "JAKE ",0
    3652 00014b90                   SCRM    0100000H
    3653 00014bb0       44          .BYTE   "DIESL",0
    3654 00014be0                   SCRM    01000000H
    3655 00014c00       46          .BYTE   "FUJI ",0
    3656 00014c30                   SCRM    010000000H
    3657 00014c50       53          .BYTE   "SHAWN",0
    3658 00014c80                   SCRM    01000000H
    3659 00014ca0       42          .BYTE   "BIFF ",0
    3660 00014cd0                   SCRM    00000000H
    3661 00014cf0       20          .BYTE   "     ",0
    3662 00014d20                   SCRM    00000000H
    3663 00014d40       20          .BYTE   "     ",0
    3664 00014d70                   SCRM    00000000H
    3665 00014d90       20          .BYTE   "     ",0
    3666 00014dc0                   SCRM    00000000H
    3667 00014de0       20          .BYTE   "     ",0
    3668 00014e10                   SCRM    00000000H
    3669 00014e30       20          .BYTE   "     ",0
    3670 00014e60                   SCRM    00000000H
    3671 00014e80       20          .BYTE   "     ",0
    3672 00014eb0                   SCRM    00000000H
    3673 00014ed0       20          .BYTE   "     ",0
    3674 00014f00                   SCRM    00000000H
    3675 00014f20       20          .BYTE   "     ",0
    3676 00014f50                   SCRM    00000000H
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   89

    3677 00014f70       20          .BYTE   "     ",0
    3678 00014fa0                   SCRM    00000000H
    3679 00014fc0       20          .BYTE   "     ",0
    3680 00014ff0                   SCRM    00000000H
    3681 00015010       20          .BYTE   "     ",0
    3682 00015040                   SCRM    00000000H
    3683 00015060       20          .BYTE   "     ",0
    3684 00015090                   SCRM    00000000H
    3685 000150b0       20          .BYTE   "     ",0
    3686 000150e0                   SCRM    00000000H
    3687 00015100       20          .BYTE   "     ",0
    3688 00015130                   SCRM    00000000H
    3689 00015150       20          .BYTE   "     ",0
    3690 00015180                   SCRM    00000000H
    3691 000151a0       20          .BYTE   "     ",0
    3692 000151d0                   SCRM    00000000H
    3693 000151f0       20          .BYTE   "     ",0
    3694 00015220                   SCRM    00000000H
    3695 00015240       20          .BYTE   "     ",0
    3696 00015270                   SCRM    00000000H
    3697 00015290       20          .BYTE   "     ",0
    3698 000152c0                   SCRM    00000000H
    3699 000152e0       20          .BYTE   "     ",0
    3700 00015310                   SCRM    00000000H
    3701 00015330       20          .BYTE   "     ",0
    3702              001f  INTER_TAB_ENTRIES       EQU     ($-INTER_ROM_TABLE)/I_ROM_ENTRY_SIZE
    3703                    
    3704 00015360           TAG_ROM_TABLE
    3705 00015360                   SCRM    022122145H              ;****ZERO ENTRY...NOT SEEN!
    3706 00015380       45          .BYTE   "EPJAB",0
    3707              0050  T_ROM_ENTRY_SIZE        EQU     $-TAG_ROM_TABLE
    3708 000153b0                   SCRM    09000H
    3709 000153d0       42          .BYTE   "BOON ",0
    3710 00015400                   SCRM    09000H
    3711 00015420       53          .BYTE   "SAL  ",0
    3712 00015450                   SCRM    09500H
    3713 00015470       45          .BYTE   "ERMAC",0
    3714 000154a0                   SCRM    09500H
    3715 000154c0       4b          .BYTE   "KANO ",0
    3716 000154f0                   SCRM    010000H
    3717 00015510       53          .BYTE   "SONYA",0
    3718 00015540                   SCRM    010000H
    3719 00015560       47          .BYTE   "GENE ",0
    3720 00015590                   SCRM    010500H
    3721 000155b0       4d          .BYTE   "MIKE ",0
    3722 000155e0                   SCRM    010500H
    3723 00015600       53          .BYTE   "SHAWN",0
    3724 00015630                   SCRM    011000H
    3725 00015650       4a          .BYTE   "JASON",0
    3726 00015680                   SCRM    011000H
    3727 000156a0       4a          .BYTE   "JOSH ",0
    3728 000156d0                   SCRM    011500H
    3729 000156f0       4a          .BYTE   "JOHN ",0
    3730 00015720                   SCRM    011500H
    3731 00015740       4a          .BYTE   "JAKE ",0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:51 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   90

    3732 00015770                   SCRM    012000H
    3733 00015790       4a          .BYTE   "JOE  ",0
    3734 000157c0                   SCRM    012000H
    3735 000157e0       45          .BYTE   "EDWIN",0
    3736 00015810                   SCRM    012500H
    3737 00015830       42          .BYTE   "BILL ",0
    3738 00015860                   SCRM    012500H
    3739 00015880       4d          .BYTE   "MARKP",0
    3740 000158b0                   SCRM    013000H
    3741 000158d0       53          .BYTE   "STEVE",0
    3742 00015900                   SCRM    013000H
    3743 00015920       54          .BYTE   "TONY ",0
    3744              0013  TAG_TAB_ENTRIES EQU     ($-TAG_ROM_TABLE)/T_ROM_ENTRY_SIZE
    3745                    
    3746                    
    3747                    
    3748                            .end

 No Errors,  No Warnings
