TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    
       2                            .file   "display.asm"
       4                            .width  132
       5                            .option b,d,l,t
       6                            .mnolist
       7                    
       8                    
       9                            .include        "gsp.equ"
      10                            .include        "sys.equ"
      11                            .include        "mproc.equ"
      12                            .include        "display.equ"
      13                            .include        "macros.h"
      14                            .include        "fontsimg.glo"
      15                            .include        "game.equ"
      16                            .INCLUDE        "PLYR.EQU"
      17                    
      18                    
      19                            .REF    process_ptrs
      20                            .ref    special_screen
      21                            .REF    DUMRETS,WHICH_SCREEN
      22                            .REF    TOP_LEFT,BOT_RIGHT
      23                            .def    clear_objs
      24                            .ref    FRANIMQ
      25                            .ref    HALT
      26                            .ref    SYSCOPY
      27                            .ref    pal_getf
      28                            .ref    IRQSKYE
      29                    
      30                    
      31                    
      32 00000000                   .sect   "OFIXED"
      33                    
      34 00000000 00000000  OBJLST          .long   0       ;*Active object list
      35 00000020 00000000  OFREE           .long   0       ;*Free object block
      36 00000040 00000000  BAKLST          .long   0       ;*Background list
      37                    
      38                    
      39                    
      40              004c  GND_Y           .equ    116-40
      41              0074  GNDI_Y          .equ    116
      42              04fd  GNDI_W          .equ    1277
      43              008a  GNDI_H          .equ    138
      44              00b2  GND_H           .equ    GNDI_H+40
      45              037e  GZBASE          .equ    894
      46                    
      47                    
      48 00000000                   .bss    present_pos,16
      49 00000060                   BSSX    page_addr,32
      50                    
      51 00000030                   .bss    SCROLLX         ,32     ;X scroll value
      52 00000050                   .bss    SCROLLY         ,32     ;Y scroll value
      53                                                            ;/ Must stay in order
      54 00000070                   .bss    WORLDTLX        ,32     ;Left X screen coord (16:16)
      55 00000090                   .bss    WORLDTLY        ,32     ;Top Y screen coord (16:16)
      56 000000b0                   .bss    WORLDTL         ,32     ;Top left world Y:X
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE    2

      57                    
      58 000000d0                   .bss    SCRNTL          ,32     ;TOP LEFT [Y,X] SCREEN (SCRN COORD.)
      59 000000f0                   .bss    SCRNLR          ,32     ;LOWER RIGHT [Y,X] SCREEN (SCRN COORD.)
      60                    
      61 00000110                   .bss    dpage           ,16     ;Display page; 0=Page0, -1=Page1
      62 00000060                   BSSX    dtype           ,16     ;Display type; 0=2D, 1=3D, -=Special
      63 00000060                   BSSX    dcode_p         ,32     ;!0=*Special code (^ must = neg)
      64 00000150                   .bss    DMAQCUR         ,32     ;Misc DMAQ position
      65                    
      66 00000170                   .bss    OBJSTR,NOBJ*OBSIZ       ;Object structure mem
      67                    
      68          00016e00  QSIZE   .set    (NOBJ+GNDI_H)*BQCELL
      69          00010680  QMSIZE  .set    NOBJ*BQCELL
      70 000340b0                   .bss    dmaq0           ,QSIZE  ;Main DMA queue
      71 00000060                   BSSX    DMAQ            ,QMSIZE ;Misc DMA queue
      72                    
      73 00000060                   BSSX    gndstat         ,16     ;!0=Show ground
      74 00000060                   BSSX    gndpos_t        ,16*GND_H
      75 00000060                   BSSX    gndx            ,32
      76 0005c080                   .bss    DISPLAYON       ,16     ;!0=Do display processing
      77                    
      78 00000060                   BSSX    _3dstat         ,16     ;!0=Show polygons
      79                    
      80 00000060                   BSSX    dma_foo         ,32
      81                    
      82 00000000                   .text
      83                    
      84                    
      85                    
      86                    
      87 00000000            SUBR   dma_irq
      88                    
      89                            ;temp!
      90                    
      91 00000000     abdc          move    -*b14,-*b12,L           ;[Y SCALE : X SCALE]
      92 00000010     abdc          move    -*b14,-*b12,L           ;[COLOR CONST : PAL REGISTER]
      93 00000020     abdc          move    -*b14,-*b12,L           ;[HEIGHT : WIDTH]
      94 00000030     abdc          move    -*b14,-*b12,L           ;[DEST Y : DEST X]
      95 00000040     abdc          move    -*b14,-*b12,L           ;[SOURCE ADDRESS]
      96 00000050     abdc          move    -*b14,-*b12,L           ;[CNTRL REG-DMA go! : OFFSET/CLIP]
      97                    
      98 00000060     0b1c          addi    0c0h,b12                ;DMAREGS (End of DMA)
         00000070     00c0  
      99 00000080     143d          subk    1,b13
     100 00000090     ce09          jrn     sxphdone                        ;Queue empty?
     101 000000a0     0940          RETI
     102                    
     103 000000b0                   push    b11
     104 000000c0     05bb          move    @present_pos,b11
         000000d0 00000000- 
     105 000000f0     497d          cmp     b11,b13
     106 00000100     ca09          jreq    do_shadows
     107 00000110                   pull    b11
     108 00000120     0940          reti
     109                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE    3

     110 00000130           sxphdone
     111 00000130     0541          setf    1,0,0                   ;Disable dma interrupt
     112 00000140     059c          move    b12,@INTENB+1           ;Clr X1E
         00000150 c0000111  
     113 00000170     57bd          clr     b13                     ;For safety!
     114 00000180     143d          subk    1,b13                   ;-1
     115 00000190     0940          reti
     116                    
     117 000001a0           do_shadows
     118 000001a0                   pull    b11
     119 000001b0     01e0          pushst
     120 000001c0     0360          dint
     121 000001d0     0d3f          callr   PLACE_SHADOWS
         000001e0     07df  
     122 000001f0     01c0          popst
     123 00000200     0940          reti
     124                    
     125                    
     126                    
     127 00000210           dma_objlst2d
     128 00000210     c000          jruc    tqsxnxt
         00000220     0093  
     129                    
     130                            .align
     131                    
     132 00000400           tqsxlp
     133 00000400     b401          MOVE    *A0(OFLAGS),A1
         00000410     00e0  
     134 00000420     1f01          BTST    B_NODISP,A1
     135 00000430     cb72          JRNZ    tqsxnxt
     136 00000440     b605          move    *a0(OSCALE),a5,L
         00000450     0240  
     137                    
     138 00000460     4eb3          move    b5,a3
     139 00000470     4003          add     a0,a3
     140 00000480     9461          move    *a3+,a1                 ;Get OFLAGS
     141 00000490     09a3          mmfm    a3,a12,a11,a9,a8
         000004a0     1b00  
     142                    
     143 000004b0     b60a          move    *a0(OYVAL),a10,L        ;Get int Y
         000004c0     00a0  
     144                    
     145 000004d0     b402          move    *a0(OXPOS),a2           ;X
         000004e0     0090  
     146 000004f0     ec4a          movx    a2,a10                  ;A10=Obj Y:X
     147 00000500     1e41          btst    B_SCRNREL,a1
     148 00000510     cb02          jrnz    tqsxnoscl                       ;Screen relative XY?
     149 00000520     4e96          move    b4,a6                   ;A6=World TL Y:X
     150 00000530     e2ca          subxy   a6,a10                  ;-world coord to get screen coord
     151 00000540           tqsxnoscl
     152                                                            ;A8=Const:PAL
     153                                                            ;A9=HEIGHT:WIDTH
     154                                                            ;A10=Dest Y:X
     155                                                            ;A11=*SAG
     156                                                            ;A12=Offset:Ctrl
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE    4

     157                    
     158 00000540     1e21          btst    B_BOBJ,a1
     159 00000550     cb0a          jrnz    tqsxis_bgnd_obj
     160                    
     161 00000560     b603          move    *a0(ODOFF),a3,L         ;display offset Y:X
         00000570     0220  
     162                    
     163 00000580     1f6c          btst    B_FLIPH,a12
     164 00000590     ca05          jrz     tqsxno_x_flip0
     165                    
     166 000005a0     ec62          movx    a3,a2
     167 000005b0     03a2          neg     a2
     168 000005c0     1422          dec     a2              ; -1
     169 000005d0     e122          addxy   a9,a2           ;- image width (gets added later)
     170 000005e0     ec43          movx    a2,a3
     171                    
     172 000005f0           tqsxno_x_flip0
     173                    
     174                    
     175 000005f0     e26a          subxy   a3,a10
     176                    
     177                    
     178 00000600           tqsxis_bgnd_obj
     179                    
     180                    
     181                    
     182                    
     183                                                    ;Calc top,bot,left,right clips
     184                                                    ;a2 = BR clip size
     185 00000600     5663          clr     a3              ;a3 = TL clip size
     186 00000610     4d42          move    a10,a2          ;Dest Y:X
     187 00000620     e122          addxy   a9,a2           ; + HEIGHT:WIDTH = BR Y:X
     188 00000630     e3a2          subxy   a13,a2          ;A2=BR clip size
     189 00000640                   JRYGE   tqsxclip_bot
     190 00000650     ee62          movy    a3,a2           ;no bot clip if y neg
     191 00000660           tqsxclip_bot
     192 00000660                   JRXGE   tqsxclip_right
     193 00000670     ec62          movx    a3,a2           ;no right clip if x neg
     194 00000680           tqsxclip_right
     195                    
     196 00000680     4dc7          move    a14,a7          ;screen TL
     197 00000690     e347          subxy   a10,a7          ; - DEST Y:X = TL clip size
     198 000006a0                   JRYLT   tqsxno_top_clip
     199 000006b0     eee3          movy    a7,a3           ;Top clip size
     200 000006c0     1f0c          btst    7,a12           ;zero compression on?
     201 000006d0     cb01          jrnz    tqsxno_top_clip ;can't clip if it is
     202 000006e0     efca          movy    a14,a10         ;Y start = window top edge
     203                    
     204 000006f0           tqsxno_top_clip
     205 000006f0                   JRXLT   tqsxno_left_clip
     206 00000700     ece3          movx    a7,a3           ;Left clip size
     207 00000710     1f0c          btst    7,a12
     208 00000720     cb01          jrnz    tqsxno_left_clip        ;Zero compression on?
     209 00000730     edca          movx    a14,a10         ;X start = window left edge
     210                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE    5

     211 00000740           tqsxno_left_clip
     212 00000740     4e40          move    a2,b0           ;Save BR clip
     213 00000750     4062          add     a3,a2           ;TL clip + BR clip
     214                            ;no need to use addxy as no signs + this sets Z for both
     215                    
     216 00000760     ca25          jrz     tqsxnoclip              ;Zero clip?
     217                    
     218                    
     219 00000770     4d26          move    a9,a6           ;Save HEIGHT:WIDTH
     220                    
     221 00000780     e249          subxy   a2,a9           ;Get clipped size
     222 00000790     c43c          JRXLE   tqsxnxt         ;Totally clipped?
     223 000007a0     c23b          JRYLE   tqsxnxt
     224                    
     225 000007b0     1f0c          btst    7,a12
     226 000007c0     ca02          jrz     tqsxnozc                ;Zero compression off?
     227 000007d0     4cc9          move    a6,a9           ;Restore v:h size
     228 000007e0     c01d          jruc    tqsxnoclip
     229                    
     230 000007f0           tqsxnozc
     231 000007f0     5621          clr     a1
     232 00000800     ec41          movx    a2,a1           ;x clip total
     233 00000810     4c21          move    a1,a1
     234 00000820     ca03          jrz     tqsxno_x_clip
     235 00000830     ed21          movx    a9,a1           ;image width
     236 00000840     1501          subk    8,a1
     237 00000850     c630          jrle    tqsxnxt         ;<=8 wide? Skip so DMA doesn't lockup
     238                    
     239 00000860           tqsxno_x_clip
     240 00000860     ecc9          movx    a6,a9           ;Restore hsize
     241                    
     242 00000870     ec61          movx    a3,a1           ;A1=Left clip
     243                    
     244                    
     245 00000880     1f6c          btst    B_FLIPH,a12
     246 00000890     ca04          jrz     tqsxno_x_flip
     247                    
     248 000008a0     e22a          subxy   a1,a10          ;Original X
     249                    
     250 000008b0     4e11          move    b0,a1           ;LClip=RClip
     251 000008c0     0521          zext    a1,W            ;clear Y portion
     252 000008d0     e22a          subxy   a1,a10          ;X-RClip
     253                    
     254                    
     255 000008e0           tqsxno_x_flip
     256 000008e0     2e03          srl     16,a3           ;A3=Top or bot clip
     257 000008f0     ca02          jrz     tqsxt0
     258 00000900     0526          zext    a6,W            ;clear Y portion
     259 00000910     5ec3          mpyu    a6,a3           ;T or B clip * width
     260                    
     261                    
     262 00000920           tqsxt0
     263 00000920     4023          add     a1,a3           ;Add x clip + y clip * width
     264 00000930     4d81          move    a12,a1
     265 00000940     2621          sll     32-15,a1        ;Get bits 12-14 (PIXEL SIZE)
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE    6

     266 00000950     2c61          srl     32-15+12,a1
     267 00000960     cb01          jrnz    tqsxnot8
     268 00000970     1901          movk    8,a1
     269 00000980     5c23  tqsxnot8        mpys    a1,a3           ;# of bits to skip
     270 00000990     406b          add     a3,a11          ;Add to SAG
     271 000009a0     2602          sll     16,a2
     272 000009b0     e04c          addxy   a2,a12          ;Add clip offset to offset
     273                    
     274                    
     275 000009c0           tqsxnoclip
     276                    
     277                    
     278 000009c0     1f6c          btst    B_FLIPH,a12
     279 000009d0     ca04          jrz     tqsx300
     280 000009e0     ed21          movx    a9,a1                   ;image WIDTH
     281 000009f0     1421          subk    1,a1
     282 00000a00     0521          zext    a1
     283 00000a10     e02a          addxy   a1,a10                  ;+ WIDTH-1
     284                    
     285 00000a20           tqsx300
     286                    
     287 00000a20     4e51          move    b2,a1
     288 00000a30     e02a          addxy   a1,a10                  ;Add the page y offset : XPad
     289 00000a40     320c          rl      16,a12                  ;Flip ctrl & offset
     290 00000a50     0984          mmtm    a4,a5,a8,a9,a10,a11,a12 ;Save the dma regs
         00000a60     04f8  
     291 00000a70     103d          addk    1,b13                   ;+1 Q cnt
     292 00000a80     c70d          jrgt    tqsxnxt                 ;DMA going?
     293                    
     294 00000a90     0360          dint
     295                    
     296 00000aa0     0541          setf    1,0,0                   ;0EHnable DMA int
     297 00000ab0     1821          movk    1,a1
     298 00000ac0     0581          move    a1,@INTENB+1            ;X1E
         00000ad0 c0000111  
     299 00000af0     0570          setf    16,1,0
     300                    
     301 00000b00     8570          move    *b11,b0
     302 00000b10     ce03          jrn     tqsxdmaok                       ;DMA busy?
     303                    
     304 00000b20     4dbd          move    b13,b13
     305 00000b30     ce01          jrn     tqsxdmaok                       ;DMA int done?
     306                    
     307 00000b40     0901          trap    1                       ;Cause DMA int
     308                    
     309 00000b50     0d60  tqsxdmaok       eint
     310 00000b60           tqsxnxt
     311 00000b60     8600          move    *a0,a0,L                ;Get next link
     312 00000b70     cb88          jrnz    tqsxlp                  ;More?
     313 00000b80     0960          rets
     314                    
     315                            .if     0
     316                    
     317                    
     318                    dma_objlst3d
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE    7

     319                            movi    [100h,100h],a5          ;A5=Y:X scale
     320                            jruc    arbonxt
     321                    
     322                            .align
     323                    
     324                    arbolp
     325                            move    b5,a3
     326                            add     a0,a3
     327                            move    *a3+,a1                 ;Get OFLAGS
     328                            mmfm    a3,a12,a11,a9,a8
     329                    
     330                            move    *a0(OYVAL),a10,L        ;Get int Y
     331                    
     332                            move    *a0(OXPOS),a2           ;X
     333                            movx    a2,a10                  ;A10=Obj Y:X
     334                            btst    B_SCRNREL,a1
     335                            jrnz    arbonoscl                       ;Screen relative XY?
     336                            move    b4,a6                   ;A6=World TL Y:X
     337                            subxy   a6,a10                  ;-world coord to get screen coord
     338                    arbonoscl
     339                                                            ;A8=Const:PAL
     340                                                            ;A9=HEIGHT:WIDTH
     341                                                            ;A10=Dest Y:X
     342                                                            ;A11=*SAG
     343                                                            ;A12=Offset:Ctrl
     344                    
     345                            btst    B_BOBJ,a1
     346                            jrnz    arbois_bgnd_obj
     347                    
     348                            move    *a0(ODOFF),a3,L         ;display offset Y:X
     349                    
     350                            btst    B_FLIPH,a12
     351                            jrz     arbono_x_flip0
     352                    
     353                            movx    a3,a2
     354                            neg     a2
     355                            dec     a2              ; -1
     356                            addxy   a9,a2           ;- image width (gets added later)
     357                            movx    a2,a3
     358                    
     359                    arbono_x_flip0
     360                    
     361                            btst    B_FLIPV,a12
     362                            jrz     arbono_y_flip0
     363                    
     364                            move    a3,a2
     365                            srl     16,a2
     366                            neg     a2
     367                            dec     a2              ; -1
     368                            sll     16,a2
     369                            addxy   a9,a2           ;- image height (gets added later)
     370                            movy    a2,a3
     371                    
     372                    arbono_y_flip0
     373                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE    8

     374                            subxy   a3,a10
     375                    
     376                    
     377                    arbois_bgnd_obj
     378                    
     379                    
     380                    
     381                    
     382                                                    ;Calc top,bot,left,right clips
     383                                                    ;a2 = BR clip size
     384                            clr     a3              ;a3 = TL clip size
     385                            move    a10,a2          ;Dest Y:X
     386                            addxy   a9,a2           ; + HEIGHT:WIDTH = BR Y:X
     387                            subxy   a13,a2          ;A2=BR clip size
     388                            JRYGE   arboclip_bot
     389                            movy    a3,a2           ;no bot clip if y neg
     390                    arboclip_bot
     391                            JRXGE   arboclip_right
     392                            movx    a3,a2           ;no right clip if x neg
     393                    arboclip_right
     394                    
     395                            move    a14,a7          ;screen TL
     396                            subxy   a10,a7          ; - DEST Y:X = TL clip size
     397                            JRYLT   arbono_top_clip
     398                            movy    a7,a3           ;Top clip size
     399                            btst    7,a12           ;zero compression on?
     400                            jrnz    arbono_top_clip ;can't clip if it is
     401                            movy    a14,a10         ;Y start = window top edge
     402                    
     403                    arbono_top_clip
     404                            JRXLT   arbono_left_clip
     405                            movx    a7,a3           ;Left clip size
     406                            btst    7,a12
     407                            jrnz    arbono_left_clip        ;Zero compression on?
     408                            movx    a14,a10         ;X start = window left edge
     409                    
     410                    arbono_left_clip
     411                            move    a2,b0           ;Save BR clip
     412                            add     a3,a2           ;TL clip + BR clip
     413                            ;no need to use addxy as no signs + this sets Z for both
     414                    
     415                            jrz     arbonoclip              ;Zero clip?
     416                    
     417                    
     418                            move    a9,a6           ;Save HEIGHT:WIDTH
     419                    
     420                            subxy   a2,a9           ;Get clipped size
     421                            JRXLE   arbonxt         ;Totally clipped?
     422                            JRYLE   arbonxt
     423                    
     424                            btst    7,a12
     425                            jrz     arbonozc                ;Zero compression off?
     426                            move    a6,a9           ;Restore v:h size
     427                            jruc    arbonoclip
     428                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE    9

     429                    arbonozc
     430                            clr     a1
     431                            movx    a2,a1           ;x clip total
     432                            move    a1,a1
     433                            jrz     arbono_x_clip
     434                            movx    a9,a1           ;image width
     435                            subk    8,a1
     436                            jrle    arbonxt         ;<=8 wide? Skip so DMA doesn't lockup
     437                    
     438                    arbono_x_clip
     439                            movx    a6,a9           ;Restore hsize
     440                    
     441                            movx    a3,a1           ;A1=Left clip
     442                    
     443                    
     444                            btst    B_FLIPH,a12
     445                            jrz     arbono_x_flip
     446                    
     447                            subxy   a1,a10          ;Original X
     448                    
     449                            move    b0,a1           ;LClip=RClip
     450                            zext    a1,W            ;clear Y portion
     451                            subxy   a1,a10          ;X-RClip
     452                    
     453                    
     454                    arbono_x_flip
     455                            btst    B_FLIPV,a12
     456                            jrz     arbono_y_flip
     457                    
     458                            move    b0,a3           ;Bot clip
     459                    
     460                    arbono_y_flip
     461                            srl     16,a3           ;A3=Top or bot clip
     462                            jrz     arbot0
     463                            zext    a6,W            ;clear Y portion
     464                            mpyu    a6,a3           ;T or B clip * width
     465                    
     466                    
     467                    arbot0
     468                            add     a1,a3           ;Add x clip + y clip * width
     469                            move    a12,a1
     470                            sll     32-15,a1        ;Get bits 12-14 (PIXEL SIZE)
     471                            srl     32-15+12,a1
     472                            jrnz    arbonot8
     473                            movk    8,a1
     474                    arbonot8        mpys    a1,a3           ;# of bits to skip
     475                            add     a3,a11          ;Add to SAG
     476                            sll     16,a2
     477                            addxy   a2,a12          ;Add clip offset to offset
     478                    
     479                    
     480                    arbonoclip
     481                    
     482                    
     483                            btst    B_FLIPH,a12
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   10

     484                            jrz     arbo300
     485                            movx    a9,a1                   ;image WIDTH
     486                            subk    1,a1
     487                            zext    a1
     488                            addxy   a1,a10                  ;+ WIDTH-1
     489                    
     490                    arbo300
     491                            btst    B_FLIPV,a12
     492                            jrz     arbo400
     493                            move    a9,a1                   ;image HEIGHT
     494                            srl     16,a1
     495                            subk    1,a1
     496                            sll     16,a1
     497                            addxy   a1,a10                  ;+ HEIGHT-1
     498                    arbo400
     499                    
     500                    
     501                            move    b2,a1
     502                            addxy   a1,a10                  ;Add the page y offset : XPad
     503                            rl      16,a12                  ;Flip ctrl & offset
     504                            mmtm    a4,a5,a8,a9,a10,a11,a12 ;Save the dma regs
     505                            addk    1,b13                   ;+1 Q cnt
     506                            jrgt    arbonxt                 ;DMA going?
     507                    
     508                            dint
     509                    
     510                            setf    1,0,0                   ;0EHnable DMA int
     511                            movk    1,a1
     512                            move    a1,@INTENB+1            ;X1E
     513                            setf    16,1,0
     514                    
     515                            move    *b11,b0
     516                            jrn     arbodmaok                       ;DMA busy?
     517                    
     518                            move    b13,b13
     519                            jrn     arbodmaok                       ;DMA int done?
     520                    
     521                            trap    1                       ;Cause DMA int
     522                    
     523                    arbodmaok       eint
     524                    arbonxt
     525                            move    *a0,a0,L                ;Get next link
     526                            jrnz    arbolp                  ;More?
     527                            rets
     528                    
     529                            .endif
     530                    
     531                    
     532                    
     533 00000b90           dma_background
     534                    
     535 00000b90     09e5          movi    [100h,100h],a5          ;A5=Y:X scale
         00000ba0 01000100  
     536 00000bc0     c071          jruc    fvzgnxt
     537                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   11

     538                            .align
     539                    
     540 00000c00           fvzglp
     541 00000c00     4eb3          move    b5,a3
     542 00000c10     4003          add     a0,a3
     543 00000c20     9461          move    *a3+,a1                 ;Get OFLAGS
     544 00000c30     09a3          mmfm    a3,a12,a11,a9,a8
         00000c40     1b00  
     545                    
     546 00000c50     b60a          move    *a0(OYVAL),a10,L        ;Get int Y
         00000c60     00a0  
     547                    
     548 00000c70     b402          move    *a0(OXPOS),a2           ;X
         00000c80     0090  
     549 00000c90     ec4a          movx    a2,a10                  ;A10=Obj Y:X
     550 00000ca0     1e41          btst    B_SCRNREL,a1
     551 00000cb0     cb02          jrnz    fvzgnoscl                       ;Screen relative XY?
     552 00000cc0     4e96          move    b4,a6                   ;A6=World TL Y:X
     553 00000cd0     e2ca          subxy   a6,a10                  ;-world coord to get screen coord
     554 00000ce0           fvzgnoscl
     555                                                            ;A8=Const:PAL
     556                                                            ;A9=HEIGHT:WIDTH
     557                                                            ;A10=Dest Y:X
     558                                                            ;A11=*SAG
     559                                                            ;A12=Offset:Ctrl
     560                    
     561                    
     562                                                    ;Calc top,bot,left,right clips
     563 00000ce0     5663          clr     a3              ;A3=TL clip size
     564 00000cf0     4d42          move    a10,a2          ;Dest Y:X
     565 00000d00     e122          addxy   a9,a2           ; + HEIGHT:WIDTH = BR Y:X
     566 00000d10     e3a2          subxy   a13,a2          ;A2=BR clip size
     567 00000d20                   JRYGE   fvzgclip_bot
     568 00000d30     ee62          movy    a3,a2           ;no bot clip if y neg
     569 00000d40           fvzgclip_bot
     570 00000d40                   JRXGE   fvzgclip_right
     571 00000d50     ec62          movx    a3,a2           ;no right clip if x neg
     572 00000d60           fvzgclip_right
     573                    
     574 00000d60     4dc7          move    a14,a7          ;screen TL
     575 00000d70     e347          subxy   a10,a7          ; - DEST Y:X = TL clip size
     576 00000d80                   JRYLT   fvzgno_top_clip
     577 00000d90     eee3          movy    a7,a3           ;Top clip size
     578 00000da0     1f0c          btst    7,a12           ;zero compression on?
     579 00000db0     cb01          jrnz    fvzgno_top_clip ;can't clip if it is
     580 00000dc0     efca          movy    a14,a10         ;Y start = window top edge
     581                    
     582 00000dd0           fvzgno_top_clip
     583 00000dd0                   JRXLT   fvzgno_left_clip
     584 00000de0     ece3          movx    a7,a3           ;Left clip size
     585 00000df0     1f0c          btst    7,a12
     586 00000e00     cb01          jrnz    fvzgno_left_clip        ;Zero compression on?
     587 00000e10     edca          movx    a14,a10         ;X start = window left edge
     588                    
     589 00000e20           fvzgno_left_clip
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   12

     590 00000e20     4e40          move    a2,b0           ;Save
     591 00000e30     4062          add     a3,a2           ;TL clip+BR clip
     592 00000e40     ca28          jrz     fvzgnoclip              ;Zero clip?
     593                    
     594                    
     595 00000e50     4d26          move    a9,a6           ;Save HEIGHT:WIDTH
     596                    
     597 00000e60     e249          subxy   a2,a9           ;Get clipped size
     598 00000e70     c446          JRXLE   fvzgnxt         ;Totally clipped?
     599 00000e80     c245          JRYLE   fvzgnxt
     600                    
     601 00000e90     1f0c          btst    7,a12
     602 00000ea0     ca02          jrz     fvzgnozc                ;Zero compression off?
     603 00000eb0     4cc9          move    a6,a9           ;Restore v:h size
     604 00000ec0     c020          jruc    fvzgnoclip
     605                    
     606 00000ed0           fvzgnozc
     607 00000ed0     5621          clr     a1
     608 00000ee0     ec41          movx    a2,a1           ;x clip total
     609 00000ef0     4c21          move    a1,a1
     610 00000f00     ca03          jrz     fvzgno_x_clip
     611 00000f10     ed21          movx    a9,a1           ;image width
     612 00000f20     1501          subk    8,a1
     613 00000f30     c63a          jrle    fvzgnxt         ;<=8 wide? Skip so DMA doesn't lockup
     614                    
     615 00000f40           fvzgno_x_clip
     616 00000f40     ecc9          movx    a6,a9           ;Restore hsize
     617                    
     618 00000f50     ec61          movx    a3,a1           ;A1=Left clip
     619                    
     620                    
     621 00000f60     1f6c          btst    B_FLIPH,a12
     622 00000f70     ca04          jrz     fvzgno_x_flip
     623                    
     624 00000f80     e22a          subxy   a1,a10          ;Original X
     625                    
     626 00000f90     4e11          move    b0,a1           ;LClip=RClip
     627 00000fa0     0521          zext    a1
     628 00000fb0     e22a          subxy   a1,a10          ;X-RClip
     629                    
     630                    
     631 00000fc0           fvzgno_x_flip
     632 00000fc0     1f4c          btst    B_FLIPV,a12
     633 00000fd0     ca01          jrz     fvzgno_y_flip
     634                    
     635 00000fe0     4e13          move    b0,a3           ;Bot clip
     636                    
     637 00000ff0           fvzgno_y_flip
     638 00000ff0     2e03          srl     16,a3           ;A3=Top or bot clip
     639 00001000     ca02          jrz     fvzgt0
     640 00001010     0526          zext    a6
     641 00001020     5ec3          mpyu    a6,a3           ;T or B clip * total hsize
     642                    
     643                    
     644 00001030           fvzgt0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   13

     645 00001030     4023          add     a1,a3           ;Add left clip + tc*ths
     646 00001040     4d81          move    a12,a1
     647 00001050     2621          sll     32-15,a1        ;Get bits 12-14 (PIXEL SIZE)
     648 00001060     2c61          srl     32-15+12,a1
     649 00001070     cb01          jrnz    fvzgnot8
     650 00001080     1901          movk    8,a1
     651 00001090     5c23  fvzgnot8        mpys    a1,a3           ;# of bits to skip
     652 000010a0     406b          add     a3,a11          ;Add to SAG
     653 000010b0     2602          sll     16,a2
     654 000010c0     e04c          addxy   a2,a12          ;Add clip offset to offset
     655                    
     656                    
     657 000010d0           fvzgnoclip
     658                    
     659 000010d0     1f6c          btst    B_FLIPH,a12             ;if flipped, keep block
     660 000010e0     ca04          jrz     fvzg300                 ;in same position
     661 000010f0     ed21          movx    a9,a1                   ;image WIDTH
     662 00001100     1421          subk    1,a1
     663 00001110     0521          zext    a1
     664 00001120     e02a          addxy   a1,a10
     665 00001130     1f4c  fvzg300 btst    B_FLIPV,a12
     666 00001140     ca05          jrz     fvzg400
     667 00001150     4d21          move    a9,a1                   ;image HEIGHT
     668 00001160     2e01          srl     16,a1
     669 00001170     1421          subk    1,a1
     670 00001180     2601          sll     16,a1
     671 00001190     e02a          addxy   a1,a10
     672 000011a0           fvzg400
     673                    
     674                    
     675 000011a0     4e51          move    b2,a1
     676 000011b0     e02a          addxy   a1,a10                  ;Add the page y offset : XPad
     677 000011c0     320c          rl      16,a12                  ;Flip ctrl & offset
     678 000011d0     0984          mmtm    a4,a5,a8,a9,a10,a11,a12 ;Save the dma regs
         000011e0     04f8  
     679 000011f0     103d          addk    1,b13                   ;+1 Q cnt
     680 00001200     c70d          jrgt    fvzgnxt                 ;DMA going?
     681                    
     682 00001210     0360          dint
     683                    
     684 00001220     0541          setf    1,0,0                   ;0EHnable DMA int
     685 00001230     1821          movk    1,a1
     686 00001240     0581          move    a1,@INTENB+1            ;X1E
         00001250 c0000111  
     687 00001270     0570          setf    16,1,0
     688                    
     689 00001280     8570          move    *b11,b0
     690 00001290     ce03          jrn     fvzgdmaok                       ;DMA busy?
     691                    
     692 000012a0     4dbd          move    b13,b13
     693 000012b0     ce01          jrn     fvzgdmaok                       ;DMA int done?
     694                    
     695 000012c0     0901          trap    1                       ;Cause DMA int
     696                    
     697 000012d0     0d60  fvzgdmaok       eint
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   14

     698 000012e0           fvzgnxt
     699 000012e0     8600          move    *a0,a0,L                ;Get next link
     700 000012f0     cb90          jrnz    fvzglp                  ;More?
     701 00001300     0960          rets
     702                    
     703                    
     704                    
     705 00001310           DISPLAY
     706 00001310     05a0          move    @DISPLAYON,a0
         00001320 0005c080- 
     707 00001340     ca00          jrz     lutanovel
         00001350     0086  
     708                    
     709 00001360     09fb          movi    DMACTRL,b11             ;B11=*DMACTRL
         00001370 01a00010  
     710                    
     711                    
     712 00001390     09f2          movi    [PAGE1YO,SCRNXP],b2
         000013a0 01000038  
     713 000013c0     09f3          movi    [509,256],b3            ;dma window [ bottom : top ]
         000013d0 01fd0100  
     714 000013f0     05a1          move    @special_screen,a1
         00001400 00000000! 
     715 00001420     cb0f          jrnz    lutap1
     716                    
     717 00001430     09d2          movi    SCRNXP,b2               ;B2=Page y offset : XPad offset
         00001440     0038  
     718 00001450     09f3          movi    [253,0],b3              ;dma window [ bottom : top ]
         00001460 00fd0000  
     719                    
     720 00001480     05a1          move    @dpage,a1
         00001490 00000110- 
     721 000014b0     cb06          jrnz    lutap1
     722 000014c0     09f2          movi    [PAGE1YO,SCRNXP],b2
         000014d0 01000038  
     723 000014f0     09f3          movi    [509,256],b3            ;dma window [ bottom : top ]
         00001500 01fd0100  
     724                    
     725 00001520           lutap1
     726 00001520     0792          move    b2,@page_addr,L
         00001530 00000010- 
     727 00001550     09e4          movi    dmaq0+QSIZE,a4          ;A4=*DMAQ for new data (Top)
         00001560 0004aeb0- 
     728 00001580     57bd          clr     b13                     ;Kill DMA
     729 00001590     81bb          move    b13,*b11
     730 000015a0     81bb          move    b13,*b11
     731                    
     732 000015b0     09fc          movi    DMAREGS,b12             ;B12=*DMAREGS
         000015c0 01a000c0  
     733 000015e0     143d          subk    1,b13                   ;B13=Q count (-1)
     734 000015f0     4e8e          move    a4,b14                  ;B14=*DMAQ for next fetch (Top)
     735                    
     736                    
     737 00001600     1810          movk    BIT5,b0                 ;DMAWIN (1 = BOTTOM:TOP)
     738 00001610     b01c          move    b0,*b12(30h)            ;DMACONF (Top/Bottom)
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   15

         00001620     0030  
     739 00001630     827c          move    b3,*b12,L               ;DMAWINDOW
     740                    
     741                    
     742 00001640     09f0          movi    WORLDTLX,b0             ;Left X screen coord (16:16)
         00001650 00000070- 
     743 00001670     9613          move    *b0+,b3,L               ;left x [16:16]
     744 00001680     9614          move    *b0+,b4,L               ;top y [16:16]
     745 00001690     2e13          srl     16,b3                   ;int left x
     746 000016a0     ec74          movx    b3,b4
     747 000016b0     8290          move    b4,*b0,L                ;top left world  [Y:X] (WORLDTL)
     748                    
     749 000016c0     09d5          movi    OFLAGS,b5               ;B5=Obj data offset
         000016d0     00e0  
     750 000016e0     4c96          move    b4,b6
     751 000016f0     0b16          addi    200,b6
         00001700     00c8  
     752 00001710     2616          sll     16,b6                   ;B6=World center scrn X * 64K
     753 00001720     07ad          move    @SCRNLR,a13,L           ;A13=Screen BR
         00001730 000000f0- 
     754 00001750     07ae          move    @SCRNTL,a14,L           ;A14=Screen TL
         00001760 000000d0- 
     755                    
     756 00001780     07a0          move    @TOP_LEFT,A0,L
         00001790 00000000! 
     757 000017b0     e00e          ADDXY   A0,A14
     758 000017c0     07a0          MOVE    @BOT_RIGHT,A0,L
         000017d0 00000000! 
     759 000017f0     e00d          ADDXY   A0,A13
     760                    
     761 00001800     09e0          movi    BAKLST,a0
         00001810 00000040+ 
     762 00001830     0d3f          callr   dma_background
         00001840     ff34  
     763                    
     764 00001850     059d          move    b13,@present_pos
         00001860 00000000- 
     765                    
     766 00001880     09e0          movi    OBJLST,a0
         00001890 00000000+ 
     767 000018b0     0d3f          callr   dma_objlst2d
         000018c0     fe94  
     768                    
     769 000018d0     07a0          MOVE    @WHICH_SCREEN,A0,L
         000018e0 00000000! 
     770 00001900     0920          CALL    A0
     771                    
     772 00001910           lutadoff
     773 00001910     07a2          move    @DMAQCUR,a2,L
         00001920 00000150- 
     774 00001940     09e1          movi    DMAQ+QMSIZE,a1
         00001950 0005b530- 
     775 00001970     4822          cmp     a1,a2
     776 00001980     c91a          jrhs    lutanoman                       ;Empty?
     777 00001990     0781          move    a1,@DMAQCUR,L           ;Reset top of queue
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   16

         000019a0 00000150- 
     778                    
     779 000019c0     4e55          move    b2,a5
     780                    
     781 000019d0     aa24  lutalp  move    -*a1,-*a4,L             ;0CHopy manual DMAQ to end of Q
     782 000019e0     aa24          move    -*a1,-*a4,L
     783 000019f0     aa24          move    -*a1,-*a4,L
     784 00001a00     a620          move    -*a1,a0,L
     785 00001a10     e0a0          addxy   a5,a0                   ;+Y
     786 00001a20     a204          move    a0,-*a4,L
     787 00001a30     aa24          move    -*a1,-*a4,L
     788 00001a40     aa24          move    -*a1,-*a4,L
     789 00001a50     103d          addk    1,b13
     790 00001a60     4841          cmp     a2,a1
     791 00001a70     c3f5          jrhi    lutalp
     792                    
     793                    
     794 00001a80     8570          move    *b11,b0
     795 00001a90     ce09          jrn     lutanoman                       ;DMA busy?
     796                    
     797 00001aa0     4dbd          move    b13,b13
     798 00001ab0     ce07          jrn     lutanoman                       ;DMA int done?
     799                    
     800 00001ac0     0541          setf    1,0,0                   ;0EHnable DMA int
     801 00001ad0     1821          movk    1,a1
     802 00001ae0     0581          move    a1,@INTENB+1            ;X1E
         00001af0 c0000111  
     803 00001b10     0570          setf    16,1,0
     804                    
     805 00001b20     0901          trap    1                       ;Cause DMA int
     806                    
     807 00001b30           lutanoman
     808                    
     809 00001b30     05a0          move    @HALT,a0
         00001b40 00000000! 
     810 00001b60     cb05          jrnz    lutanovel                       ;Skip vel update?
     811 00001b70     09e0          movi    OBJLST,a0
         00001b80 00000000+ 
     812 00001ba0     0d3f          callr   vel_add
         00001bb0     002e  
     813 00001bc0           lutanovel
     814 00001bc0           lutax
     815 00001bc0     0960          rets
     816                    
     817                    
     818 00001bd0 80000000  nulldma .long   080000000H,IROM,0,000010001H,0,01000100H
     819                    
     820                    
     821                            .align
     822 00001e00     4c01  szkqlp  move    a0,a1
     823 00001e10     1001          addk    OXVEL,a1
     824                    
     825 00001e20     09a1          mmfm    a1,a2,a3,a4,a5,a6,a7    ;A7=XV, A6=YV, A5=ZV, A4=X, A3=Y, A2=Z
         00001e30     00fc  
     826                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   17

     827 00001e40     40a2          add     a5,a2                   ;Add ZVEL to Z
     828 00001e50     a241          move    a2,-*a1,L
     829 00001e60     40c3          add     a6,a3                   ;Add YVEL to Y (Uses hidden cycle!)
     830 00001e70     a261          move    a3,-*a1,L
     831 00001e80     40e4          add     a7,a4                   ;Add XVEL to X ^
     832 00001e90     a281          move    a4,-*a1,L
     833                    
     834 00001ea0     8600  vel_add move    *a0,a0,L
     835 00001eb0     cbf4          jrnz    szkqlp                  ;!End?
     836 00001ec0     0960          rets
     837                    
     838                    
     839                    
     840                    
     841 00001ed0           QDMAN
     842                    
     843 00001ed0     07ae          move    @DMAQCUR,a14,L
         00001ee0 00000150- 
     844 00001f00     0b6e          cmpi    DMAQ,a14
         00001f10 fffb514f- 
     845 00001f30     c20a          jrls    aqcnx                   ;Q full?
     846                    
     847 00001f40     09e0          movi    [100h,100h],a0          ;No scale
         00001f50 01000100  
     848 00001f70     3205          rl      16,a5                   ;Flip DMA & offset
     849 00001f80     098e          mmtm    a14,a0,a1,a2,a3,a4,a5
         00001f90     fc00  
     850 00001fa0     3205          rl      16,a5                   ;Flip DMA & offset
     851 00001fb0     078e          move    a14,@DMAQCUR,L
         00001fc0 00000150- 
     852                    
     853 00001fe0           aqcnx
     854 00001fe0     0960          rets
     855                    
     856                            .if     0
     857                    
     858                    
     859                     SUBRP  display_2dsclmodeon
     860                    
     861                            movi    rxtudrawcode,a0
     862                            move    a0,@dcode_p,L
     863                            movi    -1,a0
     864                            move    a0,@dtype
     865                    
     866                            rets
     867                    
     868                    rxtudrawcode
     869                            movi    BAKLST,a0
     870                            callr   dma_objlst2d
     871                    
     872                            movi    OBJLST,a0
     873                    
     874                    
     875                    
     876                            .asg    SCRATCH+8*128*1024,STARBUF
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   18

     877                    NSTARS  .equ    900
     878                    STARSIZE .equ   32*6+16
     879                    
     880                     SUBRP  display_2dsclstarmodeon
     881                    
     882                            movi    NSTARS,b0               ;>Init star array
     883                            movi    STARBUF,a1
     884                            movi    -1,a0
     885                    azqqsilp        move    a0,*a1,L                ;X
     886                            addi    STARSIZE,a1
     887                            dsj     b0,azqqsilp
     888                    
     889                            movi    azqqdrawcode,a0
     890                            move    a0,@dcode_p,L
     891                            movi    -1,a0
     892                            move    a0,@dtype
     893                    
     894                            rets
     895                    
     896                    
     897                    CFRAC   .equ    2
     898                    
     899                            .bss    starcolor       ,16
     900                    
     901                    azqqdrawcode
     902                            PUSH    a13,a14
     903                            PUSH    b4
     904                    
     905                            movk    3,a0
     906                            callr   rnd
     907                            move    @starcolor,a6
     908                            add     a0,a6
     909                            move    a6,@starcolor
     910                            sll     32-3-6,a6
     911                            srl     32-3,a6                 ;Remove fraction
     912                            sll     5+CFRAC,a6
     913                    
     914                    
     915                            movi    NSTARS,a5               ;0FHind a free star
     916                            movi    STARBUF,a2
     917                            movk    3,a3
     918                    azqqflp move    *a2,a0,L                ;X
     919                            jrn     azqqfound
     920                            addi    STARSIZE,a2
     921                    azqqfnxt        dsj     a5,azqqflp
     922                            jruc    azqqnofree
     923                    
     924                    azqqfound       movi    [200,0],a0              ;0CHreate star
     925                            move    a0,*a2+,L               ;X
     926                            movi    [252,0],a0
     927                            move    a0,*a2+,L               ;Y
     928                    
     929                            clr     a0
     930                            move    a0,*a2+,L               ;XV
     931                            movi    -03e000H,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   19

     932                            move    a0,*a2+,L               ;YV
     933                    
     934                            movi    07ffH,a0
     935                            callr   rnd
     936                            subi    03ffH,a0
     937                            move    a0,*a2+,L               ;XA
     938                            movi    03ffH,a0
     939                            callr   rnd
     940                            addi    07ffH,a0
     941                            move    a0,*a2+,L               ;YA
     942                    
     943                            move    a6,*a2+                 ;Color type
     944                            dsj     a3,azqqfnxt
     945                    azqqnofree
     946                    
     947                            movi    azqqstar_p,a0           ;>Update stars
     948                            calla   pal_getf
     949                            move    a0,@DMACMAP
     950                    
     951                            movi    512*8,b3
     952                            lmo     b3,b0
     953                            move    b0,@CONVDP
     954                            clr     b4
     955                    
     956                            movi    1<<(32-5-CFRAC),a11
     957                            movi    [400,0],a13             ;A13=X max+1
     958                            movi    [254,0],a14             ;A14=Y max+1
     959                            move    b2,a12
     960                            movi    NSTARS,b0
     961                            movi    STARBUF,a8
     962                    azqqlp
     963                            mmfm    a8,a2,a3,a5,a6,a9,a10   ;YA,XA,YV,XV,Y,X
     964                            move    *a8+,a1                 ;Color
     965                            move    a10,a10
     966                            jrn     azqqnxt
     967                    
     968                            add     a2,a5
     969                            add     a3,a6
     970                            add     a5,a9
     971                            add     a6,a10
     972                            cmp     a13,a10
     973                            jrhs    azqqoffscr                      ;X off screen?
     974                            cmp     a14,a9
     975                            jrlo    azqqplot                        ;Y on screen?
     976                    azqqoffscr
     977                            movi    -1,a0
     978                            move    a0,*a8(-STARSIZE),L
     979                            jruc    azqqnxt
     980                    azqqplot
     981                            move    a10,*a8(-STARSIZE),L
     982                            move    a9,*a8(-STARSIZE+32),L
     983                            move    a6,*a8(-STARSIZE+32*2),L
     984                            move    a5,*a8(-STARSIZE+32*3),L
     985                    
     986                            move    a1,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   20

     987                            sll     32-5-CFRAC,a0
     988                            add     a11,a0
     989                            jrc     azqqmaxc                        ;Overflow?
     990                            addk    1,a1
     991                            move    a1,*a8(-16)
     992                    azqqmaxc        srl     CFRAC,a1                ;Remove fraction
     993                            srl     16,a10
     994                            movx    a10,a9
     995                            addxy   a12,a9
     996                            pixt    a1,*a9.XY
     997                    azqqnxt
     998                            dsj     b0,azqqlp
     999                    
    1000                            PULL    b4
    1001                            PULL    a13,a14
    1002                    
    1003                            movi    BAKLST,a0
    1004                            callr   dma_objlst2d
    1005                    
    1006                            movi    OBJLST,a0
    1007                    
    1008                    azqqstar_p
    1009                            .word   256
    1010                            COLORW  01,01,01, 02,02,02, 03,03,03, 04,04,04  ;Grey
    1011                            COLORW  05,05,05, 06,06,06, 07,07,07, 08,08,08
    1012                            COLORW  09,09,09, 10,10,10, 11,11,11, 12,12,12
    1013                            COLORW  13,13,13, 14,14,14, 15,15,15, 16,16,16
    1014                            COLORW  17,17,17, 18,18,18, 19,19,19, 20,20,20
    1015                            COLORW  21,21,21, 22,22,22, 23,23,23, 24,24,24
    1016                            COLORW  25,25,25, 26,26,26, 27,27,27, 28,28,28
    1017                            COLORW  29,29,29, 30,30,30, 31,31,31, 31,31,31
    1018                            COLORW  01,01,00, 02,02,00, 03,03,00, 04,04,00  ;Yellow
    1019                            COLORW  05,05,00, 06,06,00, 07,07,00, 08,08,00
    1020                            COLORW  09,09,00, 10,10,00, 11,11,00, 12,12,00
    1021                            COLORW  13,13,00, 14,14,00, 15,15,00, 16,16,00
    1022                            COLORW  17,17,00, 18,18,00, 19,19,00, 20,20,00
    1023                            COLORW  21,21,00, 22,22,00, 23,23,00, 24,24,00
    1024                            COLORW  25,25,00, 26,26,00, 27,27,00, 28,28,00
    1025                            COLORW  29,29,00, 30,30,00, 31,31,00, 31,31,00
    1026                            COLORW  01,00,00, 02,00,00, 03,00,00, 04,00,00  ;Red
    1027                            COLORW  05,00,00, 06,00,00, 07,00,00, 08,00,00
    1028                            COLORW  09,00,00, 10,00,00, 11,00,00, 12,00,00
    1029                            COLORW  13,00,00, 14,00,00, 15,00,00, 16,00,00
    1030                            COLORW  17,00,00, 18,00,00, 19,00,00, 20,00,00
    1031                            COLORW  21,00,00, 22,00,00, 23,00,00, 24,00,00
    1032                            COLORW  25,00,00, 26,00,00, 27,00,00, 28,00,00
    1033                            COLORW  29,00,00, 30,00,00, 31,00,00, 31,00,00
    1034                            COLORW  00,01,00, 00,02,00, 00,03,00, 00,04,00  ;Green
    1035                            COLORW  00,05,00, 00,06,00, 00,07,00, 00,08,00
    1036                            COLORW  00,09,00, 00,10,00, 00,11,00, 00,12,00
    1037                            COLORW  00,13,00, 00,14,00, 00,15,00, 00,16,00
    1038                            COLORW  00,17,00, 00,18,00, 00,19,00, 00,20,00
    1039                            COLORW  00,21,00, 00,22,00, 00,23,00, 00,24,00
    1040                            COLORW  00,25,00, 00,26,00, 00,27,00, 00,28,00
    1041                            COLORW  00,29,00, 00,30,00, 00,31,00, 00,31,00
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   21

    1042                            COLORW  00,00,01, 00,00,02, 00,00,03, 00,00,04  ;Blue
    1043                            COLORW  00,00,05, 00,00,06, 00,00,07, 00,00,08
    1044                            COLORW  00,00,09, 00,00,10, 00,00,11, 00,00,12
    1045                            COLORW  00,00,13, 00,00,14, 00,00,15, 00,00,16
    1046                            COLORW  00,00,17, 00,00,18, 00,00,19, 00,00,20
    1047                            COLORW  00,00,21, 00,00,22, 00,00,23, 00,00,24
    1048                            COLORW  00,00,25, 00,00,26, 00,00,27, 00,00,28
    1049                            COLORW  00,00,29, 00,00,30, 00,00,31, 00,00,31
    1050                            COLORW  00,00,01, 00,00,02, 00,00,03, 00,00,04  ;Lt blue
    1051                            COLORW  00,00,05, 00,00,06, 00,00,07, 00,00,08
    1052                            COLORW  00,00,09, 01,01,10, 02,02,11, 03,03,12
    1053                            COLORW  04,04,13, 05,05,14, 06,06,15, 07,07,16
    1054                            COLORW  08,08,17, 09,09,18, 10,10,19, 11,11,20
    1055                            COLORW  12,12,21, 14,14,22, 16,16,23, 18,18,24
    1056                            COLORW  20,20,25, 22,22,26, 24,24,27, 26,26,28
    1057                            COLORW  28,28,29, 30,30,30, 30,30,31, 31,31,31
    1058                            COLORW  01,00,01, 02,00,02, 03,00,03, 04,00,04  ;Purple
    1059                            COLORW  05,00,05, 06,00,06, 07,00,07, 08,00,08
    1060                            COLORW  09,00,09, 10,00,10, 11,00,11, 12,00,12
    1061                            COLORW  13,00,13, 14,00,14, 15,00,15, 16,00,16
    1062                            COLORW  17,00,17, 18,00,18, 19,00,19, 20,00,20
    1063                            COLORW  21,00,21, 22,00,22, 23,00,23, 24,00,24
    1064                            COLORW  25,00,25, 26,00,26, 27,00,27, 28,00,28
    1065                            COLORW  29,00,29, 30,00,30, 31,00,31, 31,00,31
    1066                            COLORW  00,01,01, 00,02,02, 00,03,03, 00,04,04  ;Cyan
    1067                            COLORW  00,05,05, 00,06,06, 00,07,07, 00,08,08
    1068                            COLORW  00,09,09, 00,10,10, 00,11,11, 00,12,12
    1069                            COLORW  00,13,13, 00,14,14, 00,15,15, 00,16,16
    1070                            COLORW  00,17,17, 00,18,18, 00,19,19, 00,20,20
    1071                            COLORW  00,21,21, 00,22,22, 00,23,23, 00,24,24
    1072                            COLORW  00,25,25, 00,26,26, 00,27,27, 00,28,28
    1073                            COLORW  00,29,29, 00,30,30, 00,31,31, 00,31,31
    1074                    
    1075                            .endif
    1076                    
    1077                    
    1078 00001ff0            SUBRP  rnd
    1079                    
    1080 00001ff0     07a1          move    @RAND,a1,L
         00002000 00000000! 
    1081 00002020     6821          rl      a1,a1
    1082 00002030     05ae          move    @HCOUNT,a14
         00002040 c00001c0  
    1083 00002060     69c1          rl      a14,a1
    1084 00002070     41e1          add     sp,a1
    1085 00002080     0781          move    a1,@RAND,L
         00002090 00000000! 
    1086                    
    1087 000020b0     5020          and     a1,a0
    1088 000020c0     0960          rets
    1089                    
    1090                    
    1091                    
    1092 000020d0           STOPOBJS
    1093 000020d0     5600          clr     a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   22

    1094 000020e0     09e1          movi    OBJLST,a1
         000020f0 00000000+ 
    1095 00002110     c006          jruc    so20
    1096                    
    1097 00002120     b201  so10    move    a0,*a1(OXVEL),L
         00002130     0020  
    1098 00002140     b201          move    a0,*a1(OYVEL),L
         00002150     0040  
    1099 00002160     b201          move    a0,*a1(OZVEL),L
         00002170     0060  
    1100 00002180     8621  so20    move    *a1,a1,L
    1101 00002190     cbf8          jrnz    so10
    1102                    
    1103 000021a0     0960          rets
    1104                    
    1105                    
    1106                    
    1107                            .align
    1108                    
    1109 00002200            SUBR   obj_yzsort
    1110                    
    1111 00002200     09e0          movi    OBJLST,a0
         00002210 00000000+ 
    1112 00002230     1821          movk    1,a1                    ;Lowest Z
    1113 00002240     27e1          sll     31,a1                   ;Make 080000000H
    1114 00002250     c014          jruc    yzlp
    1115                    
    1116 00002260           yz0
    1117 00002260     b446          move    *a2(OZPOS),a6           ;Get Z
         00002270     00d0  
    1118 00002280     b447          move    *a2(OYPOS),a7           ;Get Y
         00002290     00b0  
    1119                    
    1120 000022a0     4826          cmp     a1,a6
    1121 000022b0     c70a          jrgt    priok                   ;Next Z > Current Z?
    1122 000022c0     c402          jrlt    priswap
    1123                    
    1124 000022d0     48a7          cmp     a5,a7
    1125 000022e0     c507          jrge    priok                   ;Next Y > Current Y?
    1126                    
    1127 000022f0     0360  priswap dint                            ;>Make current after next
    1128 00002300     8244          move    a2,*a4,L                ;Point last to next
    1129 00002310     8a40          move    *a2,*a0,L               ;Point current to block after next
    1130 00002320     8202          move    a0,*a2,L                ;Point next to current
    1131 00002330     0d60          eint
    1132 00002340     4c44          move    a2,a4
    1133 00002350     c004          jruc    yzlp                    ;Continue sort of current obj
    1134                    
    1135 00002360     4c04  priok   move    a0,a4                   ;A4=*Last obj
    1136 00002370     4c40          move    a2,a0                   ;A0=*Current obj
    1137 00002380     4cc1          move    a6,a1                   ;A1=Current Z
    1138 00002390     4ce5          move    a7,a5                   ;A5=Current Y
    1139                    
    1140 000023a0     8602  yzlp    move    *a0,a2,L                ;A2=*Next obj
    1141 000023b0     cbea          jrnz    yz0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   23

    1142                    
    1143 000023c0     0960          rets
    1144                    
    1145                    
    1146                    
    1147 000023d0           SCRTSTG
    1148 000023d0     098f          mmtm    sp,a1,a2,a3
         000023e0     7000  
    1149 000023f0     c008          jruc    scrtst1
    1150                    
    1151 00002400           SCRTST
    1152 00002400     098f          mmtm    sp,a1,a2,a3
         00002410     7000  
    1153 00002420     07a2          move    @SCRNTL,a2,L            ;Get screen top left
         00002430 000000d0- 
    1154 00002450     07a3          move    @SCRNLR,a3,L            ;Get screen lower rgt
         00002460 000000f0- 
    1155                    
    1156 00002480     b500  scrtst1 move    *a8(OYPOS),a0
         00002490     00b0  
    1157 000024a0     b501          move    *a8(OXPOS),a1
         000024b0     0090  
    1158 000024c0     2600          sll     16,a0
    1159 000024d0     ec20          movx    a1,a0                   ;get top left of object
    1160 000024e0     07a1          move    @WORLDTL,a1,L
         000024f0 000000b0- 
    1161 00002510     e220          subxy   a1,a0                   ;subtract out world base
    1162 00002520     b701          move    *a8(OSIZE),a1,L
         00002530     0130  
    1163 00002540     e001          addxy   a0,a1                   ;get lower rt of object
    1164                    
    1165 00002550     e460          cmpxy   a3,a0                   ;is it lower than lower rt?
    1166 00002560                   JRYGE   scrtf_d                 ;lower
    1167 00002570                   JRXGE   scrtf_r                 ;to the right
    1168                    
    1169 00002580     e441          cmpxy   a2,a1
    1170 00002590     c20d          JRYLE   scrtf_u                 ;above...
    1171 000025a0     c404          JRXLE   scrtf_l                 ;to the left..
    1172                    
    1173 000025b0     09af          mmfm    sp,a1,a2,a3
         000025c0     000e  
    1174 000025d0     5600          clr     a0                      ;On screen Z
    1175 000025e0     0960          rets
    1176 000025f0     1820  scrtf_l movk    1,a0                    ;Pass NZ
    1177 00002600     09af          mmfm    sp,a1,a2,a3
         00002610     000e  
    1178 00002620     0960          rets
    1179                    
    1180 00002630     1840  scrtf_r movk    2,a0
    1181 00002640     09af          mmfm    sp,a1,a2,a3
         00002650     000e  
    1182 00002660     0960          rets
    1183                    
    1184 00002670     1860  scrtf_u movk    3,a0
    1185 00002680     09af          mmfm    sp,a1,a2,a3
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   24

         00002690     000e  
    1186 000026a0     0960          rets
    1187                    
    1188 000026b0     1880  scrtf_d movk    4,a0
    1189 000026c0     09af          mmfm    sp,a1,a2,a3
         000026d0     000e  
    1190 000026e0     0960          rets
    1191                    
    1192                    
    1193                    
    1194 000026f0            SUBR   SPECIAL_DISPLAY_INIT
    1195                    
    1196 000026f0     01e0          pushst
    1197 00002700     0360          dint
    1198 00002710     09c0          movi    DIE+X2E,a0
         00002720     0404  
    1199 00002730     0580          move    a0,@INTENB              ;Display int on, DMA int off
         00002740 c0000110  
    1200                    
    1201 00002760     5600          clr     a0
    1202 00002770     0580          move    a0,@DMACTRL             ;Init DMA
         00002780 01a00010  
    1203 000027a0     0580          move    a0,@DMACTRL
         000027b0 01a00010  
    1204 000027d0     0580          move    a0,@CMAPSEL             ;Clear color map select
         000027e0 01a80080  
    1205 00002800     0580          move    a0,@DMATEST
         00002810 01a000e0  
    1206 00002830     0580          move    a0,@DMACONF
         00002840 01a000f0  
    1207 00002860     09e1          movi    [511,0],a1              ;RIGHT:LEFT (full width to fix glitch)
         00002870 01ff0000  
    1208 00002890     0781          move    a1,@DMAWINDOW,L
         000028a0 01a000c0  
    1209 000028c0     09c1          movi    30h,a1          ;<--------------------check this!!!!!!!!!!!
         000028d0     0030  
    1210 000028e0     0581          move    a1,@DMACONF             ;BOTTOM:TOP
         000028f0 01a000f0  
    1211 00002910     09e1          movi    [509,0],a1
         00002920 01fd0000  
    1212 00002940     0781          move    a1,@DMAWINDOW,L
         00002950 01a000c0  
    1213 00002970     09e1          movi    [100h,100h],a1
         00002980 01000100  
    1214 000029a0     0781          move    a1,@DMASCALEX,L
         000029b0 01a000a0  
    1215                    
    1216 000029d0     09dd          movi    -1,b13                  ;DMAQ cnt
         000029e0     ffff  
    1217                    
    1218 000029f0     09e1          MOVI    DUMRETS,A1
         00002a00 00000000! 
    1219 00002a20     0781          MOVE    A1,@WHICH_SCREEN,L
         00002a30 00000000! 
    1220 00002a50     5600          CLR     A0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   25

    1221 00002a60     0780          MOVE    A0,@TOP_LEFT,L
         00002a70 00000000! 
    1222 00002a90     0780          MOVE    A0,@BOT_RIGHT,L
         00002aa0 00000000! 
    1223 00002ac0     0580          move    a0,@special_screen
         00002ad0 00000000! 
    1224 00002af0     0d3f          callr   clear_objs
         00002b00     0055  
    1225 00002b10     01c0          popst
    1226                    
    1227 00002b20     0960          rets
    1228                    
    1229                    
    1230                    
    1231 00002b30            SUBR   display_init
    1232                    
    1233 00002b30     01e0          pushst
    1234 00002b40     0360          dint
    1235 00002b50     09c0          movi    DIE+X2E,a0
         00002b60     0404  
    1236 00002b70     0580          move    a0,@INTENB              ;Display int on, DMA int off
         00002b80 c0000110  
    1237                    
    1238 00002ba0     5600          clr     a0
    1239 00002bb0     0580          move    a0,@DMACTRL             ;Init DMA
         00002bc0 01a00010  
    1240 00002be0     0580          move    a0,@DMACTRL
         00002bf0 01a00010  
    1241 00002c10     0580          move    a0,@CMAPSEL             ;Clear color map select
         00002c20 01a80080  
    1242 00002c40     0580          move    a0,@DMATEST
         00002c50 01a000e0  
    1243 00002c70     0580          move    a0,@DMACONF
         00002c80 01a000f0  
    1244 00002ca0     09e1          movi    [511,0],a1              ;RIGHT:LEFT (full width to fix glitch)
         00002cb0 01ff0000  
    1245 00002cd0     0781          move    a1,@DMAWINDOW,L
         00002ce0 01a000c0  
    1246 00002d00     09c1          movi    30h,a1          ;<--------------------check this!!!!!!!!!!!
         00002d10     0030  
    1247 00002d20     0581          move    a1,@DMACONF             ;BOTTOM:TOP
         00002d30 01a000f0  
    1248 00002d50     09e1          movi    [509,0],a1
         00002d60 01fd0000  
    1249 00002d80     0781          move    a1,@DMAWINDOW,L
         00002d90 01a000c0  
    1250 00002db0     09e1          movi    [100h,100h],a1
         00002dc0 01000100  
    1251 00002de0     0781          move    a1,@DMASCALEX,L
         00002df0 01a000a0  
    1252                    
    1253 00002e10     09dd          movi    -1,b13                  ;DMAQ cnt
         00002e20     ffff  
    1254                    
    1255 00002e30     5621          clr     a1                      ;0CHlr video mem
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   26

    1256 00002e40     09d0          movi    (SCRNE-512*8*2)/64,b0
         00002e50     7f80  
    1257 00002e60     9201  ztwbclp move    a0,*a1+,L
    1258 00002e70     9201          move    a0,*a1+,L
    1259 00002e80     3c70          dsj     b0,ztwbclp
    1260                                                            ;>Set autoerase lines
    1261 00002e90     09e1          movi    510*512*8,a1            ;Store to last 2 lines of bitmap
         00002ea0 001fe000  
    1262 00002ec0     09ce          movi    ERASECOL,a14            ;Color pair
         00002ed0     0000  
    1263 00002ee0     09d0          movi    512*8*2/16,b0
         00002ef0     0200  
    1264 00002f00     91c1  ztwblp  move    a14,*a1+
    1265 00002f10     3c50          dsj     b0,ztwblp
    1266                    
    1267                    
    1268                    
    1269 00002f20     09e1          MOVI    DUMRETS,A1
         00002f30 00000000! 
    1270 00002f50     0781          MOVE    A1,@WHICH_SCREEN,L
         00002f60 00000000! 
    1271 00002f80     5600          CLR     A0
    1272 00002f90     0780          MOVE    A0,@TOP_LEFT,L
         00002fa0 00000000! 
    1273 00002fc0     0780          MOVE    A0,@BOT_RIGHT,L
         00002fd0 00000000! 
    1274 00002ff0     0580          move    a0,@special_screen
         00003000 00000000! 
    1275 00003020     0d3f          callr   clear_objs
         00003030     0002  
    1276 00003040     01c0          popst
    1277                    
    1278 00003050     0960          rets
    1279                    
    1280 00003060           clear_objs
    1281 00003060     5600          CLR     A0
    1282 00003070     0780          move    a0,@WORLDTLX,L
         00003080 00000070- 
    1283 000030a0     0780          move    a0,@WORLDTLY,L
         000030b0 00000090- 
    1284 000030d0     0780          move    a0,@WORLDTL,L
         000030e0 000000b0- 
    1285 00003100     0780          move    a0,@SCROLLX,L
         00003110 00000030- 
    1286 00003130     0780          move    a0,@SCROLLY,L
         00003140 00000050- 
    1287                    
    1288 00003160     0780          move    a0,@BAKLST,L            ;Null backgnd object list
         00003170 00000040+ 
    1289 00003190     0780          move    a0,@OBJLST,L            ;Null object list
         000031a0 00000000+ 
    1290                    
    1291 000031c0     0780          move    a0,@dcode_p,L
         000031d0 00000130- 
    1292                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   27

    1293 000031f0     09e1          movi    SCRNST,a1               ;Screen top left [Y,X]
         00003200 0000ffe0  
    1294 00003220     0781          move    a1,@SCRNTL,L
         00003230 000000d0- 
    1295 00003250     09e1          movi    SCRNEND,a1              ;Screen lower right [Y,X]
         00003260 00fe01b0  
    1296 00003280     0781          move    a1,@SCRNLR,L
         00003290 000000f0- 
    1297                    
    1298 000032b0     09e1          movi    DMAQ+QMSIZE,a1
         000032c0 0005b530- 
    1299 000032e0     0781          move    a1,@DMAQCUR,L           ;Init misc DMA queue
         000032f0 00000150- 
    1300                    
    1301 00003310     09e1          movi    OBJSTR,a1,L             ;>Init free list
         00003320 00000170- 
    1302 00003340     0781          move    a1,@OFREE,L
         00003350 00000020+ 
    1303 00003370     09d0          movi    NOBJ,b0                 ;# of object blocks
         00003380     015e  
    1304                    
    1305 00003390     4c2e  ztwbolp move    a1,a14
    1306 000033a0     0b01          addi    OBSIZ,a1
         000033b0     0260  
    1307 000033c0     822e          move    a1,*a14,L               ;link em up
    1308 000033d0     3cb0          dsj     b0,ztwbolp
    1309                    
    1310 000033e0     820e          move    a0,*a14,L               ;Null end
    1311 000033f0     0960          rets
    1312                    
    1313                    
    1314                    
    1315 00003400           GETOBJ
    1316 00003400     07a0          move    @OFREE,a0,L
         00003410 00000020+ 
    1317 00003430     ca0b          jrz     nonelft                 ;None free?
    1318                    
    1319 00003440     8601          move    *a0,a1,L
    1320 00003450     0781          move    a1,@OFREE,L             ;Unlink
         00003460 00000020+ 
    1321 00003480     5621          clr     a1
    1322 00003490     b220          move    a1,*a0(OPLINK),L
         000034a0     01a0  
    1323 000034b0     b220          move    a1,*a0(ODATA_p),L
         000034c0     01c0  
    1324 000034d0           getox
    1325 000034d0     4c00          move    a0,a0
    1326 000034e0     0960          rets
    1327                    
    1328 000034f0           nonelft
    1329                            .if     DEBUG
    1330                            LOCKUP
    1331                            eint
    1332                            .else
    1333 000034f0                   CALLERR 3,0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   28

    1334                            .endif
    1335 000035a0     c0f2          jruc    getox
    1336                    
    1337                    
    1338                    
    1339 000035b0           FREEOBJ
    1340 000035b0     d600          move    @OFREE,*a0+,L
         000035c0 00000020+ 
    1341 000035e0     1400          subk    32,a0
    1342 000035f0     0780          move    a0,@OFREE,L
         00003600 00000020+ 
    1343 00003620     0960          rets
    1344                    
    1345                    
    1346                    
    1347                    
    1348                    
    1349                    
    1350                    
    1351                    
    1352 00003630           INSBOBJ
    1353 00003630     09ee          movi    BAKLST,a14
         00003640 00000040+ 
    1354 00003660     c003          jruc    rolvstrt
    1355                    
    1356                    
    1357 00003670           INSOBJ
    1358                    
    1359 00003670     09ee          movi    OBJLST,a14
         00003680 00000000+ 
    1360                    
    1361 000036a0           rolvstrt        PUSH    a2,a3,a4
    1362                    
    1363 000036c0     b401          move    *a0(OZPOS),a1
         000036d0     00d0  
    1364 000036e0     b404          move    *a0(OYPOS),a4
         000036f0     00b0  
    1365 00003700           rolvlp
    1366 00003700     4dc2          move    a14,a2                  ;A2=*prev
    1367 00003710     87ce          move    *a14,a14,L              ;A14=*next
    1368 00003720     ca09          jrz     rolvx
    1369 00003730     b5c3          move    *a14(OZPOS),a3
         00003740     00d0  
    1370 00003750     4861          cmp     a3,a1
    1371 00003760     c7f9          jrgt    rolvlp
    1372 00003770     c404          jrlt    rolvx
    1373                    
    1374 00003780     b5c3          move    *a14(OYPOS),a3          ;Test y position
         00003790     00b0  
    1375 000037a0     4864          cmp     a3,a4
    1376 000037b0     c7f4          jrgt    rolvlp
    1377                    
    1378                    
    1379 000037c0     83c0  rolvx   move    a14,*a0,L               ;Put *next in new block
    1380 000037d0     8202          move    a0,*a2,L                ;Put *new in prev block
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   29

    1381                    
    1382 000037e0                   PULL    a2,a3,a4
    1383 00003800     0960          rets
    1384                    
    1385                    
    1386                    
    1387 00003810           DELBOBJ
    1388                    
    1389 00003810     09ee          movi    BAKLST,a14
         00003820 00000040+ 
    1390 00003840     c004          jruc    uigglp
    1391                    
    1392                    
    1393                    
    1394 00003850           DELOBJA8
    1395                    
    1396 00003850     4d00          move    a8,a0
    1397                    
    1398                    
    1399 00003860           DELOBJ
    1400 00003860     09ee          movi    OBJLST,a14
         00003870 00000000+ 
    1401                    
    1402 00003890     4dc1  uigglp  move    a14,a1          ;A1=*Prev
    1403 000038a0     87ce          move    *a14,a14,L      ;A14=*Next
    1404 000038b0     ca0e          jrz     delerr
    1405 000038c0     49c0          cmp     a14,a0
    1406 000038d0     cbfb          jrne    uigglp
    1407                    
    1408 000038e0     8a01          move    *a0,*a1,L       ;Unlink from obj list
    1409                    
    1410 000038f0     5621          clr     a1
    1411 00003900     b020          move    a1,*a0(OXPOS)   ;Indicates not in use for collisions
         00003910     0090  
    1412                    
    1413 00003920     d600          move    @OFREE,*a0+,L   ;Add to free list
         00003930 00000020+ 
    1414 00003950     1400          subk    32,a0
    1415 00003960     0780          move    a0,@OFREE,L
         00003970 00000020+ 
    1416                    
    1417 00003990     0960  uiggx   rets
    1418                    
    1419 000039a0           delerr
    1420                            .if     DEBUG
    1421                            LOCKUP
    1422                            eint
    1423                            .else
    1424 000039a0                   CALLERR 1,0
    1425                            .endif
    1426 00003a50     c0f3          jruc    uiggx
    1427                    
    1428                    
    1429                    
    1430                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   30

    1431 00003a60           FRQDELDIE
    1432                    
    1433 00003a60                   JSRP    FRANIMQ
    1434                    
    1435                    
    1436 00003ad0           DELOBJDIE
    1437                    
    1438 00003ad0     09ee          movi    OBJLST,a14
         00003ae0 00000000+ 
    1439                    
    1440 00003b00     4dc1  fpdrlp  move    a14,a1          ;A1=*Prev
    1441 00003b10     87ce          move    *a14,a14,L      ;A14=*Next
    1442 00003b20     ca10          jrz     doderr
    1443 00003b30     49c8          cmp     a14,a8
    1444 00003b40     cbfb          jrne    fpdrlp
    1445                    
    1446 00003b50     8b01          move    *a8,*a1,L       ;Unlink from obj list
    1447                    
    1448 00003b60     5621          clr     a1
    1449 00003b70     b028          move    a1,*a8(OXPOS)   ;Indicates not in use for collisions
         00003b80     0090  
    1450                    
    1451 00003b90     d608          move    @OFREE,*a8+,L   ;Add to free list
         00003ba0 00000020+ 
    1452 00003bc0     1408          subk    32,a8
    1453 00003bd0     0788          move    a8,@OFREE,L
         00003be0 00000020+ 
    1454                    
    1455 00003c00     c080  fpdrx   jauc    SUCIDE
         00003c10 00000000! 
    1456                    
    1457 00003c30           doderr
    1458                            .if     DEBUG
    1459                            LOCKUP
    1460                            eint
    1461                            .else
    1462 00003c30                   CALLERR 1,0
    1463                            .endif
    1464 00003ce0     c0f1          jruc    fpdrx
    1465                    
    1466                    
    1467                    
    1468                    
    1469 00003cf0           obj_del1c
    1470                    
    1471 00003cf0     5621          clr     a1
    1472                    
    1473                    
    1474 00003d00           obj_delc
    1475 00003d00     4e40          move    a2,b0
    1476 00003d10     4e61          move    a3,b1
    1477                    
    1478 00003d20     09ee          movi    OBJLST,a14
         00003d30 00000000+ 
    1479 00003d50     0500          sext    a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   31

    1480 00003d60     5220          andn    a1,a0           ;Form match
    1481                    
    1482 00003d70     4dc3  vhqalp  move    a14,a3          ;A3=*Prev
    1483 00003d80     87ce          move    *a14,a14,L      ;A14=*Next
    1484 00003d90     ca0f          jrz     vhqax
    1485 00003da0     b5c2  vhqacmp move    *a14(OID),a2
         00003db0     0190  
    1486 00003dc0     5222          andn    a1,a2           ;Mask
    1487 00003dd0     4802          cmp     a0,a2
    1488 00003de0     cbf8          jrne    vhqalp
    1489                    
    1490 00003df0     8bc3          move    *a14,*a3,L      ;Unlink from obj list
    1491                    
    1492 00003e00     d60e          move    @OFREE,*a14+,L  ;Add to free list
         00003e10 00000020+ 
    1493 00003e30     140e          subk    32,a14
    1494 00003e40     078e          move    a14,@OFREE,L
         00003e50 00000020+ 
    1495 00003e70     866e          move    *a3,a14,L
    1496 00003e80     cbf1          jrnz    vhqacmp
    1497                    
    1498 00003e90           vhqax
    1499 00003e90     4e33          move    b1,a3
    1500 00003ea0     4e12          move    b0,a2
    1501 00003eb0     0960          rets
    1502                    
    1503                    
    1504                    
    1505                    
    1506 00003ec0           EXISTOBJ
    1507 00003ec0     4e40          move    a2,b0
    1508                    
    1509 00003ed0     09ee          movi    OBJLST,a14
         00003ee0 00000000+ 
    1510 00003f00     0500          sext    a0
    1511 00003f10     5220          andn    a1,a0           ;Form match
    1512 00003f20           btdklp
    1513 00003f20     87ce          move    *a14,a14,L
    1514 00003f30     ca05          jrz     btdkx
    1515 00003f40     b5c2          move    *a14(OID),a2
         00003f50     0190  
    1516 00003f60     5222          andn    a1,a2           ;Mask
    1517 00003f70     4802          cmp     a0,a2
    1518 00003f80     cbf9          jrne    btdklp
    1519                    
    1520 00003f90     4e12  btdkx   move    b0,a2
    1521 00003fa0     4dc0          move    a14,a0
    1522 00003fb0     0960          rets
    1523                    
    1524                    
    1525                    
    1526                    
    1527                    
    1528                    
    1529 00003fc0           ISOBJ
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   32

    1530 00003fc0     09e1          movi    OBJLST,a1
         00003fd0 00000000+ 
    1531                    
    1532 00003ff0     8621  lwtalp  move    *a1,a1,L
    1533 00004000     ca04          jrz     lwtax           ;End?
    1534 00004010     4801          cmp     a0,a1
    1535 00004020     cbfc          jrne    lwtalp          ;No match?
    1536                    
    1537 00004030     4c00          move    a0,a0           ;Clr Z
    1538 00004040     0960          rets
    1539                    
    1540 00004050     5600  lwtax   clr     a0              ;Set Z
    1541 00004060     0960          rets
    1542                    
    1543                    
    1544                    
    1545 00004070            SUBR   obj_addworldxy
    1546                    
    1547 00004070     07ae          move    @WORLDTLX,a14,L
         00004080 00000070- 
    1548 000040a0     b601          move    *a0(OXVAL),a1,L
         000040b0     0080  
    1549 000040c0     41c1          add     a14,a1
    1550 000040d0     b220          move    a1,*a0(OXVAL),L
         000040e0     0080  
    1551                    
    1552 000040f0     07ae          move    @WORLDTLY,a14,L
         00004100 00000090- 
    1553 00004120     b601          move    *a0(OYVAL),a1,L
         00004130     00a0  
    1554 00004140     41c1          add     a14,a1
    1555 00004150     b220          move    a1,*a0(OYVAL),L
         00004160     00a0  
    1556                    
    1557 00004170     0960          rets
    1558                    
    1559                    
    1560                    
    1561 00004180           ADJNEWTL
    1562 00004180                   PUSH    a1,a2
    1563 000041a0     0d3f          CALLR   GSCRNREL                ;SCREEN RELATIVE PLEASE
         000041b0     0009  
    1564 000041c0     4081          ADD     A4,A1
    1565 000041d0     40a2          ADD     A5,A2                   ;ADJUST
    1566 000041e0     b220          MOVE    A1,*A0(OXVAL),L
         000041f0     0080  
    1567 00004200     b240          MOVE    A2,*A0(OYVAL),L         ;STORE
         00004210     00a0  
    1568 00004220                   PULL    a1,a2
    1569 00004240     0960          RETS
    1570                    
    1571                    
    1572                    
    1573 00004250           GSCRNREL
    1574 00004250                   PUSH    a5
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   33

    1575 00004260     07a5          MOVE    @WORLDTLX,A5,L
         00004270 00000070- 
    1576 00004290     b601          MOVE    *A0(OXVAL),A1,L
         000042a0     0080  
    1577 000042b0     44a1          SUB     A5,A1
    1578 000042c0     07a5          MOVE    @WORLDTLY,A5,L
         000042d0 00000090- 
    1579 000042f0     b602          MOVE    *A0(OYVAL),A2,L
         00004300     00a0  
    1580 00004310     44a2          SUB     A5,A2
    1581 00004320                   PULL    a5
    1582 00004330     0960          RETS
    1583                    
    1584                    
    1585                    
    1586 00004340           SCRNRELV
    1587 00004340                   PUSH    a1,a5
    1588 00004360     07a5          MOVE    @SCROLLX,A5,L
         00004370 00000030- 
    1589 00004390     b601          MOVE    *A0(OXVEL),A1,L
         000043a0     0020  
    1590 000043b0     40a1          ADD     A5,A1
    1591 000043c0     b220          MOVE    A1,*A0(OXVEL),L
         000043d0     0020  
    1592 000043e0     07a5          MOVE    @SCROLLY,A5,L
         000043f0 00000050- 
    1593 00004410     b601          MOVE    *A0(OYVEL),A1,L
         00004420     0040  
    1594 00004430     40a1          ADD     A5,A1
    1595 00004440     b220          MOVE    A1,*A0(OYVEL),L
         00004450     0040  
    1596 00004460                   PULL    a1,a5
    1597 00004480     0960          RETS
    1598                    
    1599                    
    1600                    
    1601 00004490           GANISAG
    1602 00004490                   PUSH    a4,a6,a7
    1603                    
    1604 000044b0                   PUSH    a2
    1605 000044c0     b601          move    *a0(OIMG),a1,L
         000044d0     0170  
    1606 000044e0     8622          move    *a1,a2,L                ;ISIZE
    1607 000044f0     b240          move    a2,*a0(OSIZE),L
         00004500     0130  
    1608 00004510     0d3f          callr   GANIOF
         00004520     019e  
    1609 00004530                   PULL    a2
    1610                    
    1611 00004540     44c3          sub     a6,a3
    1612 00004550     44e2          sub     a7,a2                   ;adjust upper left corner
    1613 00004560     b260          move    a3,*a0(OXVAL),L
         00004570     0080  
    1614 00004580     b240          move    a2,*a0(OYVAL),L
         00004590     00a0  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   34

    1615                    
    1616 000045a0     b421          move    *a1(ICTRL),a1           ;Get DMA flags
         000045b0     0060  
    1617 000045c0     0b84          andi    0803fH,a4               ;Kill mode bits
         000045d0 ffff7fc0  
    1618 000045f0     5424          or      a1,a4
    1619 00004600     b280          move    a4,*a0(OCTRL),L         ;&OFFSET
         00004610     00f0  
    1620                    
    1621 00004620                   PULL    a4,a6,a7
    1622 00004640     0960          rets
    1623                    
    1624                    
    1625                    
    1626 00004650           BEGINOBJW
    1627 00004650     07a8          move    @WORLDTLX,a8,L          ;Adjust for world coord
         00004660 00000070- 
    1628 00004680     4100          add     a8,a0
    1629 00004690     1ee4          btst    B_3D,a4
    1630 000046a0     cb04          jrnz    BEGINOBJ                ;No Y add for 3D?
    1631 000046b0     07a8          move    @WORLDTLY,a8,L
         000046c0 00000090- 
    1632 000046e0     4101          add     a8,a1
    1633                    
    1634 000046f0           BEGINOBJ
    1635 000046f0                   PUSH    a2,a3,a4,a6,a7,a9,a10
    1636 00004710     4c09          move    a0,a9                   ;X
    1637 00004720     4c2a          move    a1,a10                  ;Y
    1638                    
    1639 00004730     b640          move    *a2(ICMAP),a0,L         ;Get *palette
         00004740     0070  
    1640                            .if     DEBUG
    1641                            jrnn    bopalerr                ;No palette?
    1642                            .endif
    1643 00004750     0d5f          calla   pal_getf
         00004760 00000000! 
    1644                    
    1645 00004780     07a8  bo20    move    @OFREE,a8,L             ;Pointer to next available obj block
         00004790 00000020+ 
    1646 000047b0     ca45          jrz     begobjerr               ;No objs?
    1647 000047c0     8701          move    *a8,a1,L
    1648 000047d0     0781          move    a1,@OFREE,L             ;Adjust pointer to free list
         000047e0 00000020+ 
    1649                    
    1650 00004800     b208          move    a0,*a8(OPAL),L          ;Set palette & constant
         00004810     0150  
    1651 00004820     5600          clr     a0
    1652 00004830     b208          move    a0,*a8(ODATA_p),L       ;Clr stuff
         00004840     01c0  
    1653 00004850     b208          move    a0,*a8(OXANI),L
         00004860     01e0  
    1654 00004870     b208          move    a0,*a8(OZVEL),L
         00004880     0060  
    1655 00004890     b008          move    a0,*a8(OMISC)
         000048a0     0210  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   35

    1656                    
    1657 000048b0     b208          move    a0,*a8(ODOFF),L
         000048c0     0220  
    1658 000048d0     09e0          movi    01000100H,a0
         000048e0 01000100  
    1659 00004900     b208          move    a0,*a8(OSCALE),L
         00004910     0240  
    1660                    
    1661 00004920     b068          move    a3,*a8(OZPOS)
         00004930     00d0  
    1662                    
    1663 00004940     b0a8          move    a5,*a8(OID)
         00004950     0190  
    1664 00004960     b2c8          move    a6,*a8(OXVEL),L
         00004970     0020  
    1665 00004980     b2e8          move    a7,*a8(OYVEL),L
         00004990     0040  
    1666                    
    1667 000049a0     4c41          move    a2,a1                   ;*Img
    1668 000049b0     8622          move    *a1,a2,L                ;ISIZE
    1669 000049c0     0d3f          callr   GANIOF                  ;Adjust animation offset
         000049d0     0153  
    1670                    
    1671 000049e0     b828          move    *a1(IANIOFFX),*a8(ODXOFF) ;display x offset
         000049f0     0020  
         00004a00     0220  
    1672 00004a10     b828          move    *a1(IANIOFFY),*a8(ODYOFF) ;display y offset
         00004a20     0030  
         00004a30     0230  
    1673                    
    1674 00004a40     b623          move    *a1(ISAG),a3,L          ;Get top left sag
         00004a50     0040  
    1675                    
    1676 00004a60     b328          move    a9,*a8(OXVAL),L
         00004a70     0080  
    1677 00004a80     b348          move    a10,*a8(OYVAL),L
         00004a90     00a0  
    1678                    
    1679 00004aa0     b228          move    a1,*a8(OIMG),L
         00004ab0     0170  
    1680 00004ac0     b248          move    a2,*a8(OSIZE),L
         00004ad0     0130  
    1681 00004ae0     b268          move    a3,*a8(OSAG),L
         00004af0     0110  
    1682 00004b00     b088          move    a4,*a8(OFLAGS)
         00004b10     00e0  
    1683 00004b20     b420          move    *a1(ICTRL),a0           ;Get DMA flags
         00004b30     0060  
    1684 00004b40     0b84          andi    0803fH,a4               ;Kill mode bits
         00004b50 ffff7fc0  
    1685 00004b70     5404          or      a0,a4
    1686 00004b80     b288          move    a4,*a8(OCTRL),L         ;&OFSET
         00004b90     00f0  
    1687                    
    1688 00004ba0                   PULL    a2,a3,a4,a6,a7,a9,a10
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   36

    1689                    
    1690 00004bc0     b3a8          move    a13,*a8(OPLINK),L
         00004bd0     01a0  
    1691 00004be0     4d00          move    a8,a0
    1692 00004bf0     c000          jruc    INSOBJ                  ;Insert object into list
         00004c00     fea6  
    1693                    
    1694                    
    1695                            .if     DEBUG
    1696                    bopalerr
    1697                            LOCKUP                          ;Object doesn't have pallette!
    1698                            eint
    1699                            clr     a0
    1700                            jruc    bo20
    1701                            .endif
    1702                    
    1703 00004c10           begobjerr
    1704                            .if     DEBUG
    1705                            LOCKUP                          ;Out of objects!
    1706                            eint
    1707                            .else
    1708 00004c10                   CALLERR 3,7
    1709                            .endif
    1710 00004cc0     07a8          move    @OBJLST,a8,L            ;Pass 1st obj on list
         00004cd0 00000000+ 
    1711 00004cf0                   PULL    a2,a3,a4,a6,a7,a9,a10
    1712 00004d10     0960          rets
    1713                    
    1714                    
    1715                    
    1716                    
    1717 00004d20           BEGINOBJWP
    1718 00004d20     07a8          move    @WORLDTLX,a8,L          ;Adjust for world coord
         00004d30 00000070- 
    1719 00004d50     4100          add     a8,a0
    1720 00004d60     1ee4          btst    B_3D,a4
    1721 00004d70     cb04          jrnz    BEGINOBJP               ;No Y add for 3D?
    1722 00004d80     07a8          move    @WORLDTLY,a8,L
         00004d90 00000090- 
    1723 00004db0     4101          add     a8,a1
    1724                    
    1725 00004dc0           BEGINOBJP
    1726 00004dc0                   PUSH    a2,a3,a4,a6,a7,a9,a10
    1727 00004de0     4c09          move    a0,a9                   ;X
    1728 00004df0     4c2a          move    a1,a10                  ;Y
    1729                    
    1730 00004e00     4e10          move    b0,a0                   ;Get *palette
    1731                            .if     DEBUG
    1732                            jrnn    ysqwbopalerr            ;No pallette?
    1733                            .endif
    1734 00004e10     0d5f          calla   pal_getf
         00004e20 00000000! 
    1735                    
    1736 00004e40     07a8  ysqwbo20        move    @OFREE,a8,L             ;Pointer to next available obj block
         00004e50 00000020+ 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   37

    1737 00004e70     cad9          jrz     begobjerr               ;No objs?
    1738 00004e80     8701          move    *a8,a1,L
    1739 00004e90     0781          move    a1,@OFREE,L             ;Adjust pointer to free list
         00004ea0 00000020+ 
    1740                    
    1741 00004ec0     b208          move    a0,*a8(OPAL),L          ;Set pallette & constant
         00004ed0     0150  
    1742 00004ee0     5600          clr     a0
    1743 00004ef0     b208          move    a0,*a8(ODATA_p),L       ;Clr stuff
         00004f00     01c0  
    1744 00004f10     b208          move    a0,*a8(OXANI),L
         00004f20     01e0  
    1745 00004f30     b208          move    a0,*a8(OZVEL),L
         00004f40     0060  
    1746 00004f50     b008          move    a0,*a8(OMISC)
         00004f60     0210  
    1747                    
    1748 00004f70     b208          move    a0,*a8(ODOFF),L
         00004f80     0220  
    1749 00004f90     09e0          movi    01000100H,a0
         00004fa0 01000100  
    1750 00004fc0     b208          move    a0,*a8(OSCALE),L
         00004fd0     0240  
    1751                    
    1752 00004fe0     b068          move    a3,*a8(OZPOS)
         00004ff0     00d0  
    1753                    
    1754 00005000     b0a8          move    a5,*a8(OID)
         00005010     0190  
    1755 00005020     b2c8          move    a6,*a8(OXVEL),L
         00005030     0020  
    1756 00005040     b2e8          move    a7,*a8(OYVEL),L
         00005050     0040  
    1757                    
    1758 00005060     4c41          move    a2,a1                   ;*Img
    1759 00005070     8622          move    *a1,a2,L                ;ISIZE
    1760 00005080     0d3f          callr   GANIOF                  ;Adjust animation offset
         00005090     00e7  
    1761                    
    1762 000050a0     b828          move    *a1(IANIOFFX),*a8(ODXOFF) ;display x offset
         000050b0     0020  
         000050c0     0220  
    1763 000050d0     b828          move    *a1(IANIOFFY),*a8(ODYOFF) ;display y offset
         000050e0     0030  
         000050f0     0230  
    1764                    
    1765 00005100     b623          move    *a1(ISAG),a3,L          ;Get top left sag
         00005110     0040  
    1766                    
    1767 00005120     b328          move    a9,*a8(OXVAL),L
         00005130     0080  
    1768 00005140     b348          move    a10,*a8(OYVAL),L
         00005150     00a0  
    1769                    
    1770 00005160     b228          move    a1,*a8(OIMG),L
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   38

         00005170     0170  
    1771 00005180     b248          move    a2,*a8(OSIZE),L
         00005190     0130  
    1772 000051a0     b268          move    a3,*a8(OSAG),L
         000051b0     0110  
    1773 000051c0     b088          move    a4,*a8(OFLAGS)
         000051d0     00e0  
    1774 000051e0     b420          move    *a1(ICTRL),a0           ;Get DMA flags
         000051f0     0060  
    1775 00005200     0b84          andi    0803fH,a4               ;Kill mode bits
         00005210 ffff7fc0  
    1776 00005230     5404          or      a0,a4
    1777 00005240     b288          move    a4,*a8(OCTRL),L         ;&OFSET
         00005250     00f0  
    1778                    
    1779 00005260                   PULL    a2,a3,a4,a6,a7,a9,a10
    1780                    
    1781 00005280     b3a8          move    a13,*a8(OPLINK),L
         00005290     01a0  
    1782 000052a0     4d00          move    a8,a0
    1783 000052b0     c000          jruc    INSOBJ                  ;Insert object into list
         000052c0     fe3a  
    1784                    
    1785                    
    1786                            .if     DEBUG
    1787                    ysqwbopalerr
    1788                            LOCKUP                          ;Object doesn't have pallette!
    1789                            eint
    1790                            clr     a0
    1791                            jruc    ysqwbo20
    1792                            .endif
    1793                    
    1794                    
    1795                    
    1796 000052d0            SUBR   ANI
    1797                    
    1798 000052d0                   PUSH    a0,a2,a3,a4,a5,a6,a7
    1799                    
    1800 000052f0     0b61          cmpi    ROM,a1
         00005300 f87fffff  
    1801 00005320     c82f          jrlo    anierr
    1802                    
    1803 00005330     4c23          move    a1,a3
    1804 00005340     4c85          move    a4,a5
    1805 00005350     b701          move    *a8(OIMG),a1,L
         00005360     0170  
    1806 00005370     b504          move    *a8(OCTRL),a4
         00005380     00f0  
    1807 00005390     4823          cmp     a1,a3
    1808 000053a0     cb03          jrne    pqgl1                   ;Different img?
    1809                    
    1810 000053b0     0505          sext    a5
    1811 000053c0     4885          cmp     a4,a5
    1812 000053d0     ca21          jreq    pqglx                   ;All the same?
    1813                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   39

    1814 000053e0     b702  pqgl1   move    *a8(OSIZE),a2,L
         000053f0     0130  
    1815 00005400     0d3f          callr   GANIOF                  ;Get old animation offset
         00005410     00af  
    1816 00005420     4c61          move    a3,a1                   ;New OIMG
    1817 00005430     2f44          srl     6,a4
    1818 00005440     24c4          sll     6,a4
    1819 00005450     54a4          or      a5,a4                   ;Set new OCTRL
    1820 00005460     4cc0          move    a6,a0
    1821 00005470     4ce5          move    a7,a5
    1822 00005480     b623          move    *a1(ISAG),a3,L          ;Get top left sag
         00005490     0040  
    1823 000054a0     8622          move    *a1,a2,L                ;ISIZE
    1824 000054b0     0d3f          callr   GANIOF                  ;Get new animation offset
         000054c0     00a4  
    1825 000054d0     b228          move    a1,*a8(OIMG),L
         000054e0     0170  
    1826 000054f0     44c0          sub     a6,a0                   ;Subtract new from old
    1827 00005500     44e5          sub     a7,a5
    1828 00005510     0524          zext    a4                      ;Zero offset in A4
    1829                    
    1830 00005520     4d06          move    a8,a6                   ;Get push address of octrl,osag,osize
    1831 00005530     0b06          addi    OCTRL+060H,a6
         00005540     0150  
    1832 00005550     0986          mmtm    a6,a2,a3,a4             ;Save new data
         00005560     3800  
    1833                    
    1834 00005570     0be6          subi    OCTRL-OXVAL,a6
         00005580     ff8f  
    1835 00005590     86c7          move    *a6,a7,L                ;New OXVAL
    1836 000055a0     4007          add     a0,a7
    1837 000055b0     92e6          move    a7,*a6+,L
    1838 000055c0     86c7          move    *a6,a7,L                ;New OYVAL
    1839 000055d0     40a7          add     a5,a7
    1840 000055e0     82e6          move    a7,*a6,L
    1841                    
    1842 000055f0           pqglx   PULL    a0,a2,a3,a4,a5,a6,a7
    1843 00005610     0960          rets
    1844                    
    1845 00005620           anierr
    1846                            .if     DEBUG
    1847                            LOCKUP
    1848                            eint
    1849                            .else
    1850 00005620                   CALLERR 2,7
    1851                            .endif
    1852 000056d0     c0f1          jruc    pqglx
    1853                    
    1854                    
    1855                    
    1856 000056e0            SUBRP  obj_aniq
    1857                    
    1858                    
    1859 000056e0                   PUSH    a2,a3
    1860                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   40

    1861 00005700     0b60          cmpi    ROM,a0
         00005710 f87fffff  
    1862 00005730     c826          jrlo    kagranierr
    1863                    
    1864 00005740     4c02          move    a0,a2
    1865 00005750     4c23          move    a1,a3
    1866                    
    1867 00005760     0d3f          callr   anipt_getxy
         00005770     002e  
    1868                    
    1869 00005780     b248          move    a2,*a8(OIMG),L
         00005790     0170  
    1870 000057a0     ba48          move    *a2(0),*a8(OSIZE),L
         000057b0     0000  
         000057c0     0130  
    1871 000057d0     ba48          move    *a2(ISAG),*a8(OSAG),L
         000057e0     0040  
         000057f0     0110  
    1872                    
    1873 00005800     0545          setf    5,0,0
    1874 00005810     b848          move    *a2(ICTRL+7),*a8(OCTRL+7) ;Write 5 z comp bits
         00005820     0067  
         00005830     00f7  
    1875 00005840     0546          setf    6,0,0
    1876 00005850     b068          move    a3,*a8(OCTRL)           ;Write 6 low bits
         00005860     00f0  
    1877 00005870     0570          setf    16,1,0
    1878                    
    1879 00005880     4c02          move    a0,a2
    1880 00005890     4c23          move    a1,a3
    1881 000058a0     0d3f          callr   anipt_getxy
         000058b0     001a  
    1882                    
    1883 000058c0     4402          sub     a0,a2                   ;Subtract new from old
    1884 000058d0     4423          sub     a1,a3
    1885                    
    1886 000058e0     4d00          move    a8,a0                   ;Get base address
    1887 000058f0     0b00          addi    OXVAL,a0
         00005900     0080  
    1888 00005910     860e          move    *a0,a14,L               ;New OXVAL
    1889 00005920     404e          add     a2,a14
    1890 00005930     93c0          move    a14,*a0+,L
    1891 00005940     860e          move    *a0,a14,L               ;New OYVAL
    1892 00005950     406e          add     a3,a14
    1893 00005960     83c0          move    a14,*a0,L
    1894                    
    1895 00005970           kagrx   PULL    a2,a3
    1896 00005990     0960          rets
    1897                    
    1898 000059a0           kagranierr 
    1899                            .if     DEBUG
    1900                            LOCKUP
    1901                            eint
    1902                            .else
    1903 000059a0                   CALLERR 2,2
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   41

    1904                            .endif
    1905 00005a50     c0f1          jruc    kagrx
    1906                    
    1907                    
    1908                    
    1909 00005a60            SUBRP  anipt_getxy
    1910                    
    1911 00005a60     4e40          move    a2,b0
    1912                    
    1913 00005a70     b702          move    *a8(OIMG),a2,L
         00005a80     0170  
    1914                    
    1915 00005a90     b440          move    *a2(IANIOFFX),a0
         00005aa0     0020  
    1916 00005ab0     2600          sll     16,a0
    1917 00005ac0     b441          move    *a2(IANIOFFY),a1
         00005ad0     0030  
    1918 00005ae0     2601          sll     16,a1
    1919                    
    1920 00005af0     b50e          move    *a8(OCTRL),a14
         00005b00     00f0  
    1921 00005b10     1f6e          btst    B_FLIPH,a14
    1922 00005b20     ca05          jrz     gmdrx                   ;No flip?
    1923                    
    1924 00005b30     8442          move    *a2,a2                  ;ISIZEX
    1925 00005b40     1422          subk    1,a2
    1926 00005b50     2602          sll     16,a2                   ;*64K
    1927 00005b60     03a0          neg     a0
    1928 00005b70     4040          add     a2,a0                   ;+size
    1929                    
    1930                    
    1931 00005b80     4e12  gmdrx   move    b0,a2
    1932 00005b90     0960          rets
    1933                    
    1934                    
    1935                    
    1936                    
    1937 00005ba0            SUBRP  obj_aniq_cnoff
    1938                    
    1939 00005ba0     4e40          move    a2,b0
    1940                    
    1941 00005bb0     b028          move    a1,*a8(OCTRL)           ;Write new ctrl
         00005bc0     00f0  
    1942                    
    1943 00005bd0     b70e          move    *a8(OIMG),a14,L
         00005be0     0170  
    1944 00005bf0     b5c2          move    *a14(IANIOFFX),a2
         00005c00     0020  
    1945 00005c10     b5ce          move    *a14(IANIOFFY),a14
         00005c20     0030  
    1946                    
    1947 00005c30     b208          move    a0,*a8(OIMG),L
         00005c40     0170  
    1948 00005c50     ba08          move    *a0(0),*a8(OSIZE),L
         00005c60     0000  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   42

         00005c70     0130  
    1949 00005c80     ba08          move    *a0(ISAG),*a8(OSAG),L
         00005c90     0040  
         00005ca0     0110  
    1950                    
    1951 00005cb0     b401          move    *a0(IANIOFFY),a1
         00005cc0     0030  
    1952 00005cd0     b400          move    *a0(IANIOFFX),a0
         00005ce0     0020  
    1953                    
    1954 00005cf0     4402          sub     a0,a2                   ;Subtract new from old
    1955 00005d00     442e          sub     a1,a14
    1956 00005d10     2602          sll     16,a2
    1957 00005d20     260e          sll     16,a14
    1958                    
    1959 00005d30     4d00          move    a8,a0                   ;Get base address
    1960 00005d40     0b00          addi    OXVAL,a0
         00005d50     0080  
    1961 00005d60     8601          move    *a0,a1,L                ;New OXVAL
    1962 00005d70     4041          add     a2,a1
    1963 00005d80     9220          move    a1,*a0+,L
    1964 00005d90     8601          move    *a0,a1,L                ;New OYVAL
    1965 00005da0     41c1          add     a14,a1
    1966 00005db0     8220          move    a1,*a0,L
    1967                    
    1968 00005dc0     4e12          move    b0,a2
    1969 00005dd0     0960          rets
    1970                    
    1971                    
    1972                    
    1973                    
    1974                    
    1975                    
    1976                    
    1977 00005de0           GETANIXY
    1978 00005de0                   PUSH    a4,a6,a7
    1979 00005e00     b701          move    *a8(OIMG),a1,L
         00005e10     0170  
    1980 00005e20     b702          move    *a8(OSIZE),a2,L
         00005e30     0130  
    1981 00005e40     b504          move    *a8(OCTRL),a4
         00005e50     00f0  
    1982 00005e60     0d3f          callr   GANIOF
         00005e70     0009  
    1983 00005e80     b703          move    *a8(OXVAL),a3,L
         00005e90     0080  
    1984 00005ea0     b702          move    *a8(OYVAL),a2,L
         00005eb0     00a0  
    1985 00005ec0     40c3          add     a6,a3
    1986 00005ed0     40e2          add     a7,a2
    1987 00005ee0                   PULL    a4,a6,a7
    1988 00005f00     0960          rets
    1989                    
    1990                    
    1991                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   43

    1992 00005f10           GANIOF
    1993 00005f10     b626          move    *a1(IANIOFF),a6,L
         00005f20     0020  
    1994 00005f30     0b66          cmpi    IROM,a6
         00005f40 fdffffff  
    1995 00005f60     c513          jrge    ualnerr
    1996                    
    1997 00005f70     56e7  ualnh   clr     a7
    1998 00005f80     eec7          movy    a6,a7
    1999 00005f90     2606          sll     16,a6           ;Move to upper word
    2000                    
    2001 00005fa0     1f64          btst    B_FLIPH,a4
    2002 00005fb0     ca05          jrz     ualnv
    2003 00005fc0     4c4e          move    a2,a14
    2004 00005fd0     142e          subk    1,a14
    2005 00005fe0     260e          sll     16,a14          ;Move W to upper word
    2006 00005ff0     03a6          neg     a6
    2007 00006000     41c6          add     a14,a6          ;Sub Width-1
    2008                    
    2009 00006010     1f44  ualnv   btst    B_FLIPV,a4
    2010 00006020     ca06          jrz     ualnx
    2011 00006030     4c4e          move    a2,a14
    2012 00006040     03a7          neg     a7
    2013 00006050     2e0e          srl     16,a14
    2014 00006060     142e          subk    1,a14
    2015 00006070     260e          sll     16,a14
    2016 00006080     41c7          add     a14,a7          ;Sub Hgt-1
    2017                    
    2018 00006090     0960  ualnx   rets
    2019                    
    2020 000060a0     56c6  ualnerr clr     a6
    2021 000060b0     c0eb          jruc    ualnh
    2022                    
    2023                    
    2024                    
    2025                            .asg    SCRATCH+8*256*1024,SCRNBUF
    2026                            .asg    SCRNBUF+8*128*1024,PALBUF
    2027                    
    2028 0005c0c0                   .bss    scrnscl         ,16
    2029                    
    2030 000060c0            SUBR   scrn_scaleout
    2031                    
    2032 000060c0     1820          movk    1,a0
    2033 000060d0     0580          move    a0,@HALT
         000060e0 00000000! 
    2034                    
    2035 00006100     05a0          move    @dtype,a0
         00006110 00000120- 
    2036 00006130                   PUSHP   a0
    2037 00006140     05a0          move    @gndstat,a0
         00006150 0005b530- 
    2038 00006170                   PUSHP   a0
    2039                    
    2040 00006180     09c0          movi    0160H,a0
         00006190     0160  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   44

    2041 000061a0     0580          move    a0,@scrnscl
         000061b0 0005c0c0- 
    2042                    
    2043 000061d0     09e0          movi    akfninitcode,a0
         000061e0 000064d0' 
    2044 00006200     0780          move    a0,@dcode_p,L
         00006210 00000130- 
    2045                    
    2046 00006230     09c0          movi    -1,a0
         00006240     ffff  
    2047 00006250     0580          move    a0,@dtype
         00006260 00000120- 
    2048 00006280     5600          clr     a0
    2049 00006290     0580          move    a0,@gndstat
         000062a0 0005b530- 
    2050 000062c0     0580          move    a0,@IRQSKYE
         000062d0 00000000! 
    2051                    
    2052 000062f0           akfnlp  SLEEPK  1
    2053                    
    2054 00006330     09ee          movi    scrnscl,a14
         00006340 0005c0c0- 
    2055 00006360     85c5          move    *a14,a5
    2056 00006370     4ca0          move    a5,a0
    2057 00006380     2fa0          srl     3,a0
    2058 00006390     4005          add     a0,a5
    2059 000063a0     80ae          move    a5,*a14
    2060 000063b0     0b45          cmpi    07000H,a5
         000063c0     8fff  
    2061 000063d0     c4f1          jrlt    akfnlp
    2062                    
    2063 000063e0     5600          clr     a0
    2064 000063f0     0780          move    a0,@dcode_p,L
         00006400 00000130- 
    2065                    
    2066 00006420                   PULLP   a0
    2067 00006430     0580          move    a0,@gndstat
         00006440 0005b530- 
    2068 00006460                   PULLP   a0
    2069 00006470     0580          move    a0,@dtype
         00006480 00000120- 
    2070                    
    2071                    
    2072 000064a0                   RETP
    2073                    
    2074 000064d0           akfninitcode
    2075 000064d0     0d3f          callr   scrn_copy
         000064e0     0072  
    2076 000064f0     09e0          movi    scrn_scale,a0
         00006500 00007710' 
    2077 00006520     0780          move    a0,@dcode_p,L
         00006530 00000130- 
    2078 00006550     0160          jump    a0
    2079                    
    2080                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   45

    2081                    
    2082 00006560            SUBR   scrn_scaleininit
    2083                    
    2084 00006560     0360          dint
    2085 00006570     05a0  nidolp  move    @VCOUNT,a0
         00006580 c00001d0  
    2086 000065a0     0b40          cmpi    EOSINT,a0
         000065b0     feed  
    2087 000065c0     c4fa          jrlt    nidolp
    2088 000065d0     05a0          move    @HSBLNK,a0      ;Blank screen
         000065e0 c0000020  
    2089 00006600     0580          move    a0,@HEBLNK
         00006610 c0000010  
    2090 00006630     0d60          eint
    2091 00006640                   SLEEPK  2
    2092                    
    2093 00006680                   RETP
    2094                    
    2095                    
    2096 000066b0            SUBR   scrn_scalein
    2097                    
    2098 000066b0                   PUSHP   a8
    2099                    
    2100 000066c0     05a0          move    @HALT,a0
         000066d0 00000000! 
    2101 000066f0                   PUSHP   a0
    2102 00006700     1820          movk    1,a0
    2103 00006710     0580          move    a0,@HALT
         00006720 00000000! 
    2104                    
    2105 00006740     05a0          move    @dtype,a0
         00006750 00000120- 
    2106 00006770                   PUSHP   a0
    2107 00006780     05a0          move    @gndstat,a0
         00006790 0005b530- 
    2108 000067b0                   PUSHP   a0
    2109 000067c0     07a0          move    @dcode_p,a0,L
         000067d0 00000130- 
    2110 000067f0                   PUSHP   a0
    2111                    
    2112 00006800     09c0          movi    07000H,a0
         00006810     7000  
    2113 00006820     0580          move    a0,@scrnscl
         00006830 0005c0c0- 
    2114                    
    2115 00006850     09e0          movi    vmpminitcode,a0
         00006860 00006b70' 
    2116 00006880     0780          move    a0,@dcode_p,L
         00006890 00000130- 
    2117 000068b0     09c0          movi    -1,a0
         000068c0     ffff  
    2118 000068d0     0580          move    a0,@dtype
         000068e0 00000120- 
    2119 00006900     5600          clr     a0
    2120 00006910     0580          move    a0,@gndstat
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   46

         00006920 0005b530- 
    2121                    
    2122                    
    2123                            .if     DEBUG
    2124                            .endif
    2125                    
    2126                    
    2127 00006940           vmpmlp  SLEEPK  1
    2128                    
    2129 00006980     09ee          movi    scrnscl,a14
         00006990 0005c0c0- 
    2130 000069b0     85c5          move    *a14,a5
    2131 000069c0     4ca0          move    a5,a0
    2132 000069d0     2fc0          srl     2,a0
    2133 000069e0     4405          sub     a0,a5
    2134 000069f0     80ae          move    a5,*a14
    2135 00006a00     0b45          cmpi    0100H,a5
         00006a10     feff  
    2136 00006a20     c7f1          jrgt    vmpmlp
    2137                    
    2138                    
    2139 00006a30                   PULLP   a0
    2140 00006a40     0780          move    a0,@dcode_p,L
         00006a50 00000130- 
    2141 00006a70                   PULLP   a0
    2142 00006a80     0580          move    a0,@gndstat
         00006a90 0005b530- 
    2143 00006ab0                   PULLP   a0
    2144 00006ac0     0580          move    a0,@dtype
         00006ad0 00000120- 
    2145                    
    2146 00006af0                   PULLP   a0
    2147 00006b00     0580          move    a0,@HALT
         00006b10 00000000! 
    2148                    
    2149                    
    2150 00006b30                   PULLP   a8
    2151 00006b40                   RETP
    2152                    
    2153                    
    2154 00006b70           vmpminitcode
    2155 00006b70     0d3f          callr   scrn_copy
         00006b80     0008  
    2156 00006b90     09e0          movi    scrn_scaledison,a0
         00006ba0 00007660' 
    2157 00006bc0     0780          move    a0,@dcode_p,L
         00006bd0 00000130- 
    2158 00006bf0     c000          jruc    scrn_scale
         00006c00     00b0  
    2159                    
    2160                    
    2161                    
    2162 00006c10            SUBRP  scrn_copy
    2163                    
    2164 00006c10     4e50          move    b2,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   47

    2165 00006c20     2e00          srl     16,a0
    2166 00006c30     0bc0          xori    0100H,a0                        ;Flip to the page being shown
         00006c40 00000100  
    2167 00006c60     2580          sll     12,a0                   ;*512*8
    2168 00006c70     0b00          addi    SCRNXP*8,a0             ;A0=*Scrn mem
         00006c80     01c0  
    2169 00006c90                   PUSH    a0
    2170                    
    2171 00006ca0     09e1          movi    SCRNBUF,a1
         00006cb0 01200000  
    2172 00006cd0     09c3          movi    254,a3
         00006ce0     00fe  
    2173 00006cf0     09c7          movi    (512-400)*8,a7
         00006d00     0380  
    2174 00006d10           qzmocslp
    2175 00006d10     09c2          movi    400/16,a2
         00006d20     0019  
    2176 00006d30     9a01  qzmocslp2       move    *a0+,*a1+,L
    2177 00006d40     9a01          move    *a0+,*a1+,L
    2178 00006d50     9a01          move    *a0+,*a1+,L
    2179 00006d60     9a01          move    *a0+,*a1+,L
    2180 00006d70     3ca2          dsj     a2,qzmocslp2
    2181                    
    2182 00006d80     40e0          add     a7,a0
    2183 00006d90     40e1          add     a7,a1
    2184 00006da0     3d43          dsj     a3,qzmocslp
    2185                    
    2186                    
    2187 00006db0     05a0          move    @SYSCOPY,a0
         00006dc0 00000000! 
    2188                            .if     WWFUNIT
    2189 00006de0     0b80          andni   PALENB,a0
         00006df0 00000800  
    2190 00006e10     0580          move    a0,@SYSCOPY
         00006e20 00000000! 
    2191                            .if     DEBUG
    2192                            andni   LEDON,a0
    2193                            ori     WROMINTCLR,a0
    2194                            .endif
    2195                            .else
    2196                            andni   100000b,a0
    2197                            move    a0,@SYSCOPY
    2198                            .if     DEBUG
    2199                            andni   1000000b,a0
    2200                            .endif
    2201                            .endif
    2202 00006e40     0580          move    a0,@SYSCTRL
         00006e50 01b00000  
    2203                    
    2204                    
    2205 00006e70                   PULL    a0
    2206 00006e80     09e1          movi    PALBUF,a1
         00006e90 01300000  
    2207 00006eb0     09c3          movi    254,a3
         00006ec0     00fe  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   48

    2208 00006ed0           qzmocplp
    2209 00006ed0     09c2          movi    400/16,a2
         00006ee0     0019  
    2210 00006ef0     9a01  qzmocplp2       move    *a0+,*a1+,L
    2211 00006f00     9a01          move    *a0+,*a1+,L
    2212 00006f10     9a01          move    *a0+,*a1+,L
    2213 00006f20     9a01          move    *a0+,*a1+,L
    2214 00006f30     3ca2          dsj     a2,qzmocplp2
    2215                    
    2216 00006f40     40e0          add     a7,a0
    2217 00006f50     40e1          add     a7,a1
    2218 00006f60     3d43          dsj     a3,qzmocplp
    2219                    
    2220 00006f70     05a0          move    @SYSCOPY,a0
         00006f80 00000000! 
    2221                    
    2222                    
    2223                            .if     WWFUNIT
    2224 00006fa0     0ba0          ori     PALENB,a0
         00006fb0 00000800  
    2225 00006fd0     0580          move    a0,@SYSCOPY
         00006fe0 00000000! 
    2226                            .if     DEBUG
    2227                            andni   LEDON,a0
    2228                            ori     WROMINTCLR,a0
    2229                            .endif
    2230                            .else
    2231                            ori     100000b,a0
    2232                            move    a0,@SYSCOPY
    2233                            .if     DEBUG
    2234                            andni   1000000b,a0
    2235                            .endif
    2236                            .endif
    2237 00007000     0580          move    a0,@SYSCTRL
         00007010 01b00000  
    2238                    
    2239                    
    2240 00007030     0960          rets
    2241                    
    2242                    
    2243                    
    2244 00007040            SUBRP  scrn_scale140
    2245                    
    2246 00007040                   PUSH    a4,a14
    2247                    
    2248 00007060     09c5          movi    0140H,a5
         00007070     0140  
    2249                    
    2250 00007080     4e51          move    b2,a1
    2251 00007090     2e01          srl     16,a1
    2252 000070a0     0b01          addi    25,a1
         000070b0     0019  
    2253 000070c0     2581          sll     12,a1                   ;*512*8
    2254 000070d0     0b01          addi    SCRNXP*8+40*8,a1        ;A1=*Scrn mem
         000070e0     0300  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   49

    2255                    
    2256 000070f0     09e6          movi    DMACMAP,a6
         00007100 01a00080  
    2257 00007120     56e7          clr     a7                      ;Y line 8:8
    2258 00007130           qhpolp
    2259 00007130     4ce2          move    a7,a2
    2260 00007140     2f02          srl     8,a2
    2261 00007150     2582          sll     12,a2                   ;*512*8
    2262 00007160     4c43          move    a2,a3
    2263                    
    2264 00007170     0b22          addi    SCRNBUF,a2
         00007180 01200000  
    2265 000071a0     0b23          addi    PALBUF,a3
         000071b0 01300000  
    2266 000071d0     09d0          movi    400/2/5,b0              ;Copy 1 line
         000071e0     0028  
    2267 000071f0           qhpocslp
    2268 000071f0     8866          move    *a3,*a6                 ;Set pal latch
    2269 00007200     1203          addk    16,a3
    2270 00007210     9841          move    *a2+,*a1+               ;Copy 2 pixels
    2271                    
    2272 00007220     8866          move    *a3,*a6
    2273 00007230     1203          addk    16,a3
    2274 00007240     9841          move    *a2+,*a1+
    2275                    
    2276 00007250     8866          move    *a3,*a6
    2277 00007260     1203          addk    16,a3
    2278 00007270     9841          move    *a2+,*a1+
    2279                    
    2280 00007280     8866          move    *a3,*a6
    2281 00007290     1203          addk    16,a3
    2282 000072a0     9841          move    *a2+,*a1+
    2283                    
    2284 000072b0     1203          addk    16,a3
    2285 000072c0     1202          addk    16,a2
    2286                    
    2287 000072d0     3df0          dsj     b0,qhpocslp
    2288                    
    2289 000072e0     0b01          addi    (512-320)*8,a1
         000072f0     0600  
    2290                    
    2291 00007300     40a7          add     a5,a7
    2292 00007310     0b67          cmpi    254<<8,a7
         00007320 ffff01ff  
    2293 00007340     c4de          jrlt    qhpolp
    2294                    
    2295                    
    2296 00007350           qhpox   PULL    a4,a14
    2297 00007370     0960          rets
    2298                    
    2299                    
    2300                    
    2301                    
    2302 00007380            SUBRP  scrn_scale180
    2303                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   50

    2304 00007380                   PUSH    a4,a14
    2305                    
    2306 000073a0     09c5          movi    0180H,a5
         000073b0     0180  
    2307                    
    2308 000073c0     4e51          move    b2,a1
    2309 000073d0     2e01          srl     16,a1
    2310 000073e0     0b01          addi    42,a1
         000073f0     002a  
    2311 00007400     2581          sll     12,a1                   ;*512*8
    2312 00007410     0b01          addi    SCRNXP*8+68*8,a1        ;A1=*Scrn mem
         00007420     03e0  
    2313                    
    2314 00007430     09e6          movi    DMACMAP,a6
         00007440 01a00080  
    2315 00007460     56e7          clr     a7                      ;Y line 8:8
    2316 00007470           nmfwlp
    2317 00007470     4ce2          move    a7,a2
    2318 00007480     2f02          srl     8,a2
    2319 00007490     2582          sll     12,a2                   ;*512*8
    2320 000074a0     4c43          move    a2,a3
    2321                    
    2322 000074b0     0b22          addi    SCRNBUF,a2
         000074c0 01200000  
    2323 000074e0     0b23          addi    PALBUF,a3
         000074f0 01300000  
    2324 00007510     09d0          movi    400/2/3,b0              ;Copy 1 line
         00007520     0042  
    2325 00007530           nmfwcslp
    2326 00007530     8866          move    *a3,*a6                 ;Set pal latch
    2327 00007540     1203          addk    16,a3
    2328 00007550     9841          move    *a2+,*a1+               ;Copy 2 pixels
    2329                    
    2330 00007560     8866          move    *a3,*a6
    2331 00007570     1203          addk    16,a3
    2332 00007580     9841          move    *a2+,*a1+
    2333                    
    2334 00007590     1203          addk    16,a3
    2335 000075a0     1202          addk    16,a2
    2336                    
    2337 000075b0     3d30          dsj     b0,nmfwcslp
    2338                    
    2339 000075c0     0b01          addi    (512-264)*8,a1
         000075d0     07c0  
    2340                    
    2341 000075e0     40a7          add     a5,a7
    2342 000075f0     0b67          cmpi    254<<8,a7
         00007600 ffff01ff  
    2343 00007620     c4e4          jrlt    nmfwlp
    2344                    
    2345                    
    2346 00007630           nmfwx   PULL    a4,a14
    2347 00007650     0960          rets
    2348                    
    2349                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   51

    2350                    
    2351 00007660            SUBRP  scrn_scaledison
    2352                    
    2353 00007660     09c0          movi    HEBLNKINIT,a0           ;Display on
         00007670     0065  
    2354 00007680     0580          move    a0,@HEBLNK
         00007690 c0000010  
    2355 000076b0     09e0          movi    scrn_scale,a0
         000076c0 00007710' 
    2356 000076e0     0780          move    a0,@dcode_p,L
         000076f0 00000130- 
    2357                    
    2358                    
    2359                    
    2360 00007710            SUBRP  scrn_scale
    2361                    
    2362 00007710     05a5          move    @scrnscl,a5
         00007720 0005c0c0- 
    2363 00007740     0b45          cmpi    0168H,a5
         00007750     fe97  
    2364 00007760     c48d          jrlt    scrn_scale140
    2365 00007770     0b45          cmpi    0190H,a5
         00007780     fe6f  
    2366 00007790     c4be          jrlt    scrn_scale180
    2367                    
    2368 000077a0                   PUSH    a4,a14
    2369                    
    2370 000077c0     4e59          move    b2,a9
    2371 000077d0     2e09          srl     16,a9
    2372 000077e0     09c3          movi    127<<8,a3
         000077f0     7f00  
    2373 00007800     5aa3          divu    a5,a3
    2374 00007810     4469          sub     a3,a9
    2375 00007820     0b09          addi    127,a9
         00007830     007f  
    2376 00007840     2589          sll     12,a9                   ;*512*8
    2377                    
    2378 00007850     0b09          addi    (SCRNXP+200)*8,a9       ;A9=*Scrn mem
         00007860     0800  
    2379 00007870     09c3          movi    100<<8,a3
         00007880     6400  
    2380 00007890     5aa3          divu    a5,a3
    2381 000078a0     2483          sll     4,a3                    ;*16
    2382 000078b0     4469          sub     a3,a9
    2383                    
    2384 000078c0     09e6          movi    DMACMAP,a6
         000078d0 01a00080  
    2385 000078f0     56e7          clr     a7                      ;Y line 8:8
    2386 00007900     09ea          movi    200<<8,a10
         00007910 0000c800  
    2387 00007930           hghdlp
    2388 00007930     4ce2          move    a7,a2
    2389 00007940     2f02          srl     8,a2
    2390 00007950     2582          sll     12,a2                   ;*512*8
    2391 00007960     4c43          move    a2,a3
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   52

    2392                    
    2393 00007970     4d21          move    a9,a1
    2394 00007980     0b22          addi    SCRNBUF,a2
         00007990 01200000  
    2395 000079b0     0b23          addi    PALBUF,a3
         000079c0 01300000  
    2396 000079e0     5708          clr     a8                      ;X 8:8
    2397 000079f0           hghdcslp
    2398 000079f0     8866          move    *a3,*a6                 ;Set pal latch
    2399 00007a00     8841          move    *a2,*a1                 ;Copy 2 pixels
    2400 00007a10     1201          addk    16,a1
    2401                    
    2402 00007a20     4d00          move    a8,a0
    2403 00007a30     40a8          add     a5,a8
    2404 00007a40     2b00          sra     8,a0
    2405 00007a50     4d0e          move    a8,a14
    2406 00007a60     2b0e          sra     8,a14
    2407 00007a70     440e          sub     a0,a14
    2408                    
    2409 00007a80           hghdnxtp
    2410 00007a80     1203          addk    16,a3
    2411 00007a90     1202          addk    16,a2
    2412 00007aa0     142e          subk    1,a14
    2413 00007ab0     c7fc          jrgt    hghdnxtp
    2414                    
    2415 00007ac0     4948          cmp     a10,a8
    2416 00007ad0     c4f1          jrlt    hghdcslp
    2417                    
    2418                    
    2419 00007ae0     0b09          addi    512*8,a9                ;Next line
         00007af0     1000  
    2420                    
    2421 00007b00     40a7          add     a5,a7
    2422 00007b10     0b67          cmpi    254<<8,a7
         00007b20 ffff01ff  
    2423 00007b40     c4de          jrlt    hghdlp
    2424                    
    2425                    
    2426 00007b50           hghdx   PULL    a4,a14
    2427 00007b70     0960          rets
    2428                    
    2429                    
    2430                    
    2431 00007b80            SUBR   fg2bg
    2432                    
    2433 00007b80     09e1          movi    OBJLST,a1
         00007b90 00000000+ 
    2434                    
    2435 00007bb0           inuvloop
    2436 00007bb0     4c2e          move    a1,a14
    2437 00007bc0     8621          move    *a1,a1,L
    2438 00007bd0     ca19          jrz     inuvnot_found
    2439 00007be0     4801          cmp     a0,a1
    2440 00007bf0     cbfb          jrne    inuvloop
    2441                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   53

    2442                            ;found it
    2443 00007c00     8a0e          move    *a0,*a14,L              ;remove from OBJLST
    2444 00007c10     0d3f          callr   INSBOBJ                 ;add to BAKLST
         00007c20     fba0  
    2445                    
    2446 00007c30     b401          move    *a0(ODXOFF),a1          ;adjust X and Y pos.  BGND objects
         00007c40     0220  
    2447 00007c50     b40e          move    *a0(OXPOS),a14          ; don't use anim points.
         00007c60     0090  
    2448 00007c70     442e          sub     a1,a14
    2449 00007c80     b1c0          move    a14,*a0(OXPOS)
         00007c90     0090  
    2450 00007ca0     57ce          clr     a14
    2451 00007cb0     b1c0          move    a14,*a0(ODXOFF)
         00007cc0     0220  
    2452                    
    2453 00007cd0     b401          move    *a0(ODYOFF),a1
         00007ce0     0230  
    2454 00007cf0     b40e          move    *a0(OYPOS),a14
         00007d00     00b0  
    2455 00007d10     442e          sub     a1,a14
    2456 00007d20     b1c0          move    a14,*a0(OYPOS)
         00007d30     00b0  
    2457 00007d40     57ce          clr     a14
    2458 00007d50     b1c0          move    a14,*a0(ODYOFF)
         00007d60     0230  
    2459                    
    2460 00007d70           inuvnot_found
    2461 00007d70     0960          rets
    2462                    
    2463                    
    2464 00007d80            SUBR   BEGINOBJ_TBL
    2465                    
    2466 00007d80                   PUSH    a0,a1,a2,a3,a4,a5,a6,a7
    2467 00007da0     4c0e          move    a0,a14
    2468 00007db0     95c0          move    *a14+,a0,W              ;X
    2469 00007dc0     2600          sll     16,a0
    2470 00007dd0     95c1          move    *a14+,a1,W              ;Y
    2471 00007de0     2601          sll     16,a1
    2472 00007df0     95c3          move    *a14+,a3,W              ;Z
    2473 00007e00     97c2          move    *a14+,a2,L              ;IMG
    2474 00007e10     95c4          move    *a14+,a4,W              ;CTRL
    2475 00007e20     95c5          move    *a14+,a5,W              ;OID
    2476 00007e30     97c6          move    *a14+,a6,L              ;X vel
    2477 00007e40     97c7          move    *a14+,a7,L              ;Y vel
    2478                    
    2479 00007e50     0d5f          calla   BEGINOBJ
         00007e60 000046f0' 
    2480                    
    2481 00007e80                   PULL    a0,a1,a2,a3,a4,a5,a6,a7
    2482 00007ea0     0960          rets
    2483                    
    2484 00007eb0            SUBR   BEGINOBJW_TBL
    2485                    
    2486 00007eb0                   PUSH    a0,a1,a2,a3,a4,a5,a6,a7
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   54

    2487 00007ed0     4c0e          move    a0,a14
    2488 00007ee0     95c0          move    *a14+,a0,W              ;X
    2489 00007ef0     2600          sll     16,a0
    2490 00007f00     95c1          move    *a14+,a1,W              ;Y
    2491 00007f10     2601          sll     16,a1
    2492 00007f20     95c3          move    *a14+,a3,W              ;Z
    2493 00007f30     97c2          move    *a14+,a2,L              ;IMG
    2494 00007f40     95c4          move    *a14+,a4,W              ;CTRL
    2495 00007f50     95c5          move    *a14+,a5,W              ;OID
    2496 00007f60     97c6          move    *a14+,a6,L              ;X vel
    2497 00007f70     97c7          move    *a14+,a7,L              ;Y vel
    2498                    
    2499 00007f80     0d5f          calla   BEGINOBJW
         00007f90 00004650' 
    2500                    
    2501 00007fb0                   PULL    a0,a1,a2,a3,a4,a5,a6,a7
    2502 00007fd0     0960          rets
    2503                    
    2504                    
    2505 00007fe0           PLACE_SHADOWS
    2506 00007fe0     098f          mmtm    sp,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14
         00007ff0     fffe  
    2507 00008000     099f          mmtm    sp,b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14
         00008010     fffe  
    2508                    
    2509 00008020     07ad          move    @process_ptrs,a13,L
         00008030 00000000! 
    2510 00008050     ca00          jrz     shad9
         00008060     00a7  
    2511 00008070     4da3          MOVE    A13,A3
    2512 00008080     0b03          addi    OBJ_BASE,a3
         00008090     0760  
    2513 000080a0     8663          move    *a3,a3,L
    2514 000080b0     0b03          addi    020h,a3
         000080c0     0020  
    2515                    
    2516 000080d0     09f0          movi    DMACTRL,b0
         000080e0 01a00010  
    2517 00008100     8413  shad_1  move    *b0,b3,W
    2518 00008110     cefe          jrn     shad_1          ; wait for dma while busy
    2519                    
    2520 00008120     09e2          movi    001000100H,a2
         00008130 01000100  
    2521 00008150     0782          move    a2,@DMASCALEX,L         ; dma input yajs1 = scale
         00008160 01a000a0  
    2522 00008180     09e2          movi    010101010h,a2
         00008190 10101010  
    2523 000081b0     0782          move    a2,@DMACMAP,L           ; dma input yajs2 = const:palette
         000081c0 01a00080  
    2524                    
    2525 000081e0     09e6          movi    DMAVERT,a6
         000081f0 01a00050  
    2526 00008210     1828          movk    1,a8
    2527 00008220     b106          move    a8,*a6(020h),W          ; y size is always "1"
         00008230     0020  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   55

    2528 00008240     09e2          movi    DMAOFFST,a2
         00008250 01a00000  
    2529 00008270     5708          clr     a8
    2530 00008280     9102          move    a8,*a2+,W               ; offset is always "0"
    2531 00008290     09f6          movi    DMAHORIZ,b6
         000082a0 01a00040  
    2532 000082c0     09e7          movi    02000000h,a7
         000082d0 02000000  
    2533 000082f0     09ec          movi    DMASAGL,a12
         00008300 01a00020  
    2534 00008320     07a5          move    @page_addr,a5,L
         00008330 00000010- 
    2535                    
    2536 00008350           shad0   
    2537 00008350     9669          move    *a3+,a9,L
    2538 00008360     b520          move    *a9(OXPOS),a0,W
         00008370     0090  
    2539 00008380     0520          zext    a0,W
    2540                    
    2541 00008390     4e3e          move    b1,a14                  ; a14 = worldtly
    2542 000083a0     57ad          CLR     A13
    2543 000083b0     05ad          move    @WORLDTLX+16,a13
         000083c0 00000080- 
    2544 000083e0     e3a0          SUBXY   A13,A0
    2545                    
    2546 000083f0     05ad          move    @WORLDTLY+16,A13
         00008400 000000a0- 
    2547 00008420     0bed          SUBI    10,A13
         00008430     fff5  
    2548 00008440     260d          SLL     16,A13
    2549 00008450     e3a0          SUBXY   A13,A0
    2550                    
    2551 00008460     e0a0          addxy   a5,a0
    2552 00008470     4e08          MOVE    A0,B8
    2553 00008480     8316          MOVE    B8,*B6,L        ;DO XPOS
    2554                    
    2555 00008490     4e04          MOVE    A0,B4
    2556                    
    2557                            .ALIGN
    2558 00008600           shad2
    2559 00008600     b52a          move    *a9(OYPOS),a10
         00008610     00b0  
    2560 00008620     ce4b          jrn     shad9
    2561 00008630     b72a          move    *a9(OSAG),a10,L ; a10 = sag of this piece
         00008640     0110  
    2562 00008650     ca48          jrz     shad9                   ; sag = 0 ---> we are done
    2563                    
    2564 00008660     40ea          add     a7,a10
    2565                    
    2566 00008670     b52d          move    *a9(OSIZEY),a13,W       ; a13 = # of lines
         00008680     0140  
    2567 00008690     2fad          srl     3,a13                   ; shadows are 1/4 the normal height
    2568 000086a0     4fa5          move    a13,b5
    2569                    
    2570 000086b0     b52b          move    *a9(OSIZEX),a11,W
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   56

         000086c0     0130  
    2571 000086d0     b166          move    a11,*a6(010h),W         ; set a11 = x size for this piece
         000086e0     0010  
    2572                    
    2573 000086f0     b52d          move    *a9(ODXOFF),A13
         00008700     0220  
    2574 00008710     b52e          move    *a9(OCTRL),a14,W
         00008720     00f0  
    2575 00008730     1f6e          btst    B_FLIPH,a14             ; flip horizontal ?
    2576 00008740     ca01          jreq    shad1
    2577 00008750     03ad          NEG     A13
    2578                    
    2579 00008760     4dc1  shad1   move    a14,a1
    2580 00008770     4dc4          move    a14,a4
    2581 00008780     2681          sll     16+4,a1
    2582 00008790     2c41          srl     32-2,a1                 ; a1 = trail multiplier
    2583 000087a0     26c4          sll     16+4+2,a4
    2584 000087b0     2c44          srl     32-2,a4                 ; a4 = lead multiplier
    2585                    
    2586 000087c0     0bae          ori     DMACNZ,a14
         000087d0 00008008  
    2587                    
    2588 000087f0     4e90          MOVE    B4,A0
    2589 00008800     e3a0          SUBXY   A13,A0
    2590 00008810     4e08          move    a0,b8
    2591 00008820     8116          move    b8,*b6,W                ; set x coordinate here !!
    2592 00008830     2e00          srl     16,a0
    2593 00008840     b52d          move    *a9(ODYOFF),A13
         00008850     0230  
    2594 00008860     2fad          SRL     3,A13
    2595 00008870     e3a0          SUBXY   A13,A0
    2596                    
    2597                    
    2598 00008880           shad4
    2599 00008880     8413  shad3   move    *b0,b3,W
    2600 00008890     cefe          jrn     shad3           ; wait for dma while busy
    2601                    
    2602 000088a0     44ea          sub     A7,a10
    2603 000088b0     834c          move    a10,*a12,L      ; stuff sag
    2604 000088c0     40ea          add     A7,a10
    2605                    
    2606 000088d0     8006          move    a0,*a6,W        ; set y coordinate
    2607 000088e0     81c2          move    a14,*a2,W       ; set the GO! bit
    2608 000088f0     3915          dsjs    b5,shad5
    2609                    
    2610 00008900     1020          inc     a0
    2611 00008910     8006          move    a0,*a6,W        ; set y 1 line down
    2612 00008920     1420          dec     a0
    2613                    
    2614 00008930     8413  shad6   move    *b0,b3,W
    2615 00008940     cefe          jrn     shad6           ; wait for dma while busy
    2616 00008950     81c2          move    a14,*a2,W       ; set the GO
    2617 00008960     9669          move    *a3+,a9,L
    2618 00008970     c0c8          jruc    shad2
    2619                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:55 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

DMA object handler                                                   PAGE   57

    2620 00008980     8413  shad5   move    *b0,b3,W
    2621 00008990     cefe          jrn     shad5           ; wait for dma while busy
    2622 000089a0     1020          inc     a0
    2623 000089b0     1913          movk    8,b3
    2624 000089c0     0548          setf    8,0,0           ; field 0 is 8 bits (zero extend)
    2625                    
    2626 000089d0     9548  shad7   move    *a10+,a8,W      ; grab a BYTE !!
    2627                    
    2628 000089e0     4d0d          move    a8,a13
    2629 000089f0     278d          sll     32-4,a13
    2630 00008a00     2c8d          srl     32-4,a13        ; mask off upper b.s.
    2631 00008a10     628d          sll     a4,a13          ; a13 = lead zeros
    2632                    
    2633 00008a20     2f88          srl     4,a8            
    2634 00008a30     6228          sll     a1,a8           ; a8 = trailing zeros
    2635                    
    2636 00008a40     410d          add     a8,a13          ; a13 = lead + trailing = all compressed zeros
    2637 00008a50     4d68          move    a11,a8          ; a8 = x size
    2638 00008a60     45a8          sub     a13,a8          ; a8 = uncompressed pixels to skip
    2639                    
    2640 00008a70     2428          sll     1,a8            ; 2x
    2641 00008a80     410a          add     a8,a10
    2642 00008a90     2428          sll     1,a8            ; + 4x = 6 bits per pixel
    2643 00008aa0     410a          add     a8,a10          ; a10 ---> sag for next line
    2644 00008ab0     3df3          dsjs    b3,shad7
    2645                    
    2646 00008ac0     0570          setf    16,1,0          ; field 0 is back to 16 bits
    2647 00008ad0     c0da          jruc    shad4
    2648                    
    2649 00008ae0           shad9
    2650 00008ae0     09bf          mmfm    sp,b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14
         00008af0     7fff  
    2651 00008b00     09af          mmfm    sp,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14
         00008b10     7fff  
    2652 00008b20     0960          rets
    2653                    
    2654                    
    2655                    
    2656                            .end

 No Errors,  No Warnings
