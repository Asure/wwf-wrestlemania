TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .file   "bakgnd.asm"
       3                            .option b,d,l
       4                            .mnolist
       5                    
       6                            .include        "mproc.equ"
       7                            .include        "display.equ"
       8                            .include        "gsp.equ"
       9                            .include        "sys.equ"
      10                            .include        "game.equ"
      11                            .include        "macros.h"
      12                    
      13                            .include        "fontsimg.glo"
      14                            .include        "bgndtbl.glo"           ;background equates
      15                    
      16                    
      17                    
      18                            .ref    pal_getf
      19                    
      20                            .REF    DO_FLASH,DO_JASON_CROWD,DO_TONY_CROWD
      21                            .REF    DO_VOGEL_CROWD
      22                    
      23                    
      24                    
      25                    
      26                    
      27                    
      28                    
      29                    
      30                    
      31 00000000                   .bss    BGNDPALTBL      ,32
      32 00000020                   .bss    MOD_POS         ,32
      33 00000000                   BSSX    BAKBITS         ,10000
      34                    
      35 00000000                   BSSX    BAKMODS         ,32
      36                    
      37                    
      38 00000000                   .text
      39                    
      40                    
      41              8000  BLSTSTRT        .EQU    08000H
      42              8001  BLSTEND         .EQU    08001H
      43                    
      44                    
      45          00200040  DISP_PAD        .SET    [20h,40h]       ;Y:X
      46                    
      47                    
      48              00fa  WIDEST_BLOCK    .SET    250
      49                    
      50              0000  MAP_PAL         .SET    0       ;SIZE 4 - PALETTE SELECT
      51              0004  MAP_FLAGS       .SET    4       ;SIZE 4 - BIT 0 HFLIP, BIT 1 YFLIP
      52              0008  MAP_Z           .SET    8       ;SIZE 8
      53              0010  MAP_X           .SET    16      ;SIZE 16
      54              0020  MAP_Y           .SET    32      ;SIZE 16
      55              0030  MAP_HDR         .SET    48      ;SIZE 16 - OFFSET IN LONG WORDS FROM BLOCK_HDR_TBL
      56                                                    ; BITS 12-15 ARE BITS 4-7 OF PAL
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE    2

      57                                                    ; MAP_HDR SET TO 0FFFFH IF BLOCK IS NOT ALLOCATED
      58              0040  BLOCK_SIZE      .SET    64      ;Uses shifts!
      59                    
      60              0000  MAP_W           .set    0       ;Word
      61              0010  MAP_H           .set    16      ;Word
      62              0020  MAP_DATAPTR     .set    32      ;Long
      63              0040  MAP_CTRL        .equ    64      ;DMA ctrl word
      64                    
      65                    
      66                    
      67 00000000           BGNDHGHT
      68 00000000     098f          MMTM    SP,A1,A2,A3,A4,A7,A8,A9,A10,A11
         00000010     79f0  
      69 00000020     4c01          MOVE    A0,A1
      70                    
      71 00000030     574a          CLR     A10             ;INIT PACKED Y:X STARTING POSITION
      72 00000040     576b          CLR     A11
      73                    
      74 00000050     07a0          MOVE    @BAKMODS,A0,L   ;* A0- PTR TO THE MODULE LIST
         00000060 00002750- 
      75 00000080     9608  MODLP0  MOVE    *A0+,A8,L       ;LOAD MODULE PTR
      76 00000090     ca2a          jrz     MODX0           ;End?
      77 000000a0     9709          MOVE    *A8+,A9,L       ;LOAD PACKED Y:X SIZE
      78                    
      79 000000b0     9403          MOVE    *A0+,A3         ;X START POSITION
      80 000000c0     0523          ZEXT    A3
      81 000000d0     0b63          CMPI    BLSTSTRT,A3
         000000e0 ffff7fff  
      82 00000100     cb03          JRNZ    NOTLSTSTRTX
      83 00000110     4d63          MOVE    A11,A3          
      84 00000120     e323          SUBXY   A9,A3
      85 00000130     c005          JRUC    GOTNEWX0
      86 00000140           NOTLSTSTRTX
      87 00000140     0b63          CMPI    BLSTEND,A3
         00000150 ffff7ffe  
      88 00000170     cb01          JRNZ    GOTNEWX0
      89 00000180     4d63          MOVE    A11,A3
      90 00000190           GOTNEWX0
      91 00000190     9404          MOVE    *A0+,A4         ;Y START POSITION
      92 000001a0     0524          ZEXT    A4
      93 000001b0     0b64          CMPI    BLSTSTRT,A4
         000001c0 ffff7fff  
      94 000001e0     cb03          JRNZ    NOTLSTSTRTY
      95 000001f0     4d64          MOVE    A11,A4          
      96 00000200     e324          SUBXY   A9,A4
      97 00000210     c007          JRUC    GOTNEWY0
      98 00000220           NOTLSTSTRTY
      99 00000220     0b64          CMPI    BLSTEND,A4
         00000230 ffff7ffe  
     100 00000250     cb02          JRNZ    NOTLSTENDY
     101 00000260     4d64          MOVE    A11,A4
     102 00000270     c001          JRUC    GOTNEWY0
     103 00000280           NOTLSTENDY
     104 00000280     2604          SLL     16,A4
     105 00000290           GOTNEWY0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE    3

     106 00000290     ee83          MOVY    A4,A3
     107 000002a0     4c6a          MOVE    A3,A10
     108                    
     109                    
     110                            ;IF MOD END X < X SOUGHT KEEP SEARCHING MOD LIST
     111 000002b0     4d4b          MOVE    A10,A11
     112 000002c0     e12b          ADDXY   A9,A11          ;A11 IS MODULE Y:X END
     113                    
     114 000002d0     9509          MOVE    *A8+,A9         ;LOAD # OF BLOCKS
     115 000002e0     4127          ADD     A9,A7           ;A7 IS NEW BAKBITS PTR
     116 000002f0     e561          CMPXY   A11,A1
     117 00000300     cdd7          JRNV    MODLP0          ;SKIP IF AX < BX
     118                    
     119 00000310     4d40          MOVE    A10,A0
     120 00000320     2e00          SRL     16,A0
     121 00000330     c001          JRUC    GOTHGHT
     122                    
     123 00000340     5600  MODX0   CLR     A0
     124 00000350     09af  GOTHGHT MMFM    SP,A1,A2,A3,A4,A7,A8,A9,A10,A11
         00000360     0f9e  
     125 00000370     0960          RETS
     126                    
     127                    
     128                    
     129                    
     130 00000380            SUBRP  bgnd_get1stx
     131                    
     132 00000380                   PUSH    a1,a2,a8,a9,a10
     133                    
     134 000003a0     5729          clr     a9              ;set low = 0
     135 000003b0     4422          sub     a1,a2
     136 000003c0     2f42          srl     6,a2            ;div by size of block (64)
     137 000003d0     0b01          addi    MAP_X,a1        ;block tbl base + x offset
         000003e0     0010  
     138 000003f0     18ae          movk    5,a14           ;threshhold for switching from binary to linear search
     139                    
     140 00000400     4c4a  zwdulp  move    a2,a10
     141 00000410     452a          sub     a9,a10          ;if (high - low) <= 5 finish with linear search
     142 00000420     49ca          cmp     a14,a10
     143 00000430     c60c          jrle    lsrch
     144                    
     145 00000440     2fea          srl     1,a10           ;/2
     146 00000450     412a          add     a9,a10
     147                    
     148 00000460     4d48          move    a10,a8          ;Get mid X
     149 00000470     24c8          sll     6,a8            ;multiply by block size (64)
     150 00000480     4028          add     a1,a8
     151 00000490     8508          move    *a8,a8          ;get x coor of the block
     152 000004a0     4808          cmp     a0,a8
     153 000004b0     c402          jrlt    blow
     154                    
     155 000004c0     4d42          move    a10,a2          ;high = mid
     156 000004d0     c0f2          jruc    zwdulp
     157 000004e0     4d49  blow    move    a10,a9          ;low = mid
     158 000004f0     c0f0          jruc    zwdulp
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE    4

     159                    
     160 00000500           lsrch
     161                            ;* FINISH WITH A LINEAR SEARCH OF BLOCK TABLE FROM LOW TO HIGH
     162                            ;* ENDING WITH FIRST BLOCK X COOR THAT IS >= A0
     163                            ;* A0 = X VAL BEING SEARCHED FOR
     164                            ;* A9 = LOW ADDRESS -- PTS TO X OFFSET OF BLOCK
     165                            ;* A2 = HIGH ADDRESS -- PTS TO X OFFSET OF BLOCK
     166                    
     167 00000500     24c9          SLL     6,A9            ;LOW BLOCK # TO LOW BLOCK OFFSET
     168 00000510     24c2          SLL     6,A2            ;HIGH BLOCK # TO HIGH BLOCK OFFSET
     169 00000520     4029          ADD     A1,A9
     170 00000530     4022          ADD     A1,A2
     171 00000540     09c8          MOVI    BLOCK_SIZE,A8
         00000550     0040  
     172 00000560           zwdulinlp
     173 00000560     852a          MOVE    *A9,A10         ;X COOR
     174 00000570     480a          CMP     A0,A10
     175 00000580     c505          JRGE    GOTB            ;IF LOW->X >= A0 GOTO FOUND
     176 00000590     4109          ADD     A8,A9
     177 000005a0     4849          CMP     A2,A9
     178 000005b0     c6fa          jrle    zwdulinlp
     179 000005c0     5600          clr     a0              ;block not found, return 0
     180 000005d0     c003          jruc    zwdux
     181                    
     182 000005e0           GOTB
     183 000005e0     4d20          move    a9,a0           ;return a ptr to the block
     184 000005f0     0be0          subi    MAP_X,a0
         00000600     ffef  
     185                    
     186 00000610           zwdux
     187 00000610                   PULL    a1,a2,a8,a9,a10
     188 00000630     0960          rets
     189                    
     190                    
     191                            ;A0 - MODULE LIST
     192                            ;A0 - PACKED Y:X END OF WAVE
     193                    
     194                    
     195                    
     196                    
     197                    
     198 00000640            SUBR   BGND_UD1
     199                    
     200 00000640                   PUSH    a2,a3,a4,a5,a6,a7,a8,a9,a10,a11
     201                    
     202 00000660     07a3          move    @WORLDTL,a3,L
         00000670 00000000! 
     203 00000690     4c64          move    a3,a4
     204 000006a0     07a0          move    @SCRNTL,a0,L
         000006b0 00000000! 
     205 000006d0     e003          addxy   a0,a3
     206 000006e0     07a0          move    @SCRNLR,a0,L
         000006f0 00000000! 
     207 00000710     e004          addxy   a0,a4           
     208                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE    5

     209 00000720     09e0          movi    DISP_PAD,a0     ;XY border pad
         00000730 00200040  
     210                    
     211 00000750     e203          subxy   a0,a3           ;A3=DISP_TL
     212 00000760     e004          addxy   a0,a4           ;A4=DISP_LR
     213 00000770     09e8          movi    BAKLST,a8       ;A8=*bakgnd list
         00000780 00000000! 
     214 000007a0     0d3f          callr   bgnd_delnonvis
         000007b0     01a4  
     215                    
     216 000007c0     07a0          move    @BAKMODS,a0,L   ;*Module list
         000007d0 00002750- 
     217 000007f0     09e7          movi    BAKBITS,a7      ;Bit table for block being on disp list
         00000800 00000040- 
     218 00000820     0d3f          callr   bgnd_scanmod
         00000830     0003  
     219                    
     220 00000840                   PULL    a2,a3,a4,a5,a6,a7,a8,a9,a10,a11
     221 00000860     0960          rets
     222                    
     223                    
     224                    
     225 00000870            SUBRP  bgnd_scanmod
     226                    
     227 00000870     4ce6          move    a7,a6           ;a6 will point to bakbits after mod
     228 00000880     c02d          jruc    holznext
     229                            .align
     230                    
     231 00000a00           holzlp
     232 00000a00     9609          move    *a0+,a9,L       ;Y:X start
     233                    
     234 00000a10     970b          move    *a8+,a11,L      ;Mod Y:X size
     235 00000a20     e12b          addxy   a9,a11          ;Mod Y:X end
     236                    
     237 00000a30     9502          move    *a8+,a2         ;# of blocks
     238 00000a40     4046          add     a2,a6           ;A6=*Next bakbits
     239                    
     240 00000a50     e46b          cmpxy   a3,a11
     241 00000a60                   jrxlt   holznext                ;Mod x end < tl x ?
     242 00000a70                   jrylt   holznext                ;Mod y end < tl y ?
     243                    
     244 00000a80     e524          cmpxy   a9,a4
     245 00000a90                   jrxlt   holznext                ;Mod x start > br x ?
     246 00000aa0                   jrylt   holznext                ;Mod y start > br y ?
     247                    
     248 00000ab0     24c2          sll     6,a2            ;*64 (each block is 4 words)
     249 00000ac0     9701          move    *a8+,a1,L       ;A1=*block table
     250 00000ad0     4022          add     a1,a2           ;A2=*block table end
     251                    
     252 00000ae0     9705          move    *a8+,a5,L       ;A5=*hdrs
     253 00000af0     970a          move    *a8+,a10,L      ;A10=*PAL table
     254 00000b00     e323          subxy   a9,a3
     255 00000b10     e324          subxy   a9,a4
     256 00000b20     0d3f          callr   bgnd_addmod
         00000b30     0006  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE    6

     257 00000b40     e123          addxy   a9,a3
     258 00000b50     e124          addxy   a9,a4
     259                    
     260 00000b60     4cc7  holznext        move    a6,a7
     261 00000b70     9608          move    *a0+,a8,L       ;* module
     262 00000b80     cbe7          jrnz    holzlp          ;!End?
     263                    
     264                    
     265 00000b90     0960  holzx   rets
     266                    
     267                    
     268                    
     269 00000ba0            SUBRP  bgnd_addmod
     270                    
     271 00000ba0                   PUSH    a0,a6,a7
     272                    
     273 00000bc0     ec60          movx    a3,a0           ;find 1st universe block with x >= a9
     274 00000bd0     0500          sext    a0
     275 00000be0     0be0          subi    WIDEST_BLOCK,a0 ;1st x coordinate of a block
         00000bf0     ff05  
     276 00000c00     0d3f          callr   bgnd_get1stx
         00000c10     ff76  
     277 00000c20     ca4e          jrz     poqax           ;no blocks with > X ?
     278                    
     279 00000c30     09c6          movi    BLOCK_SIZE,a6
         00000c40     0040  
     280                    
     281 00000c50     4c08          move    a0,a8           ;A0=*Block
     282 00000c60     4428          sub     a1,a8           ;subtract off start of table
     283 00000c70     2f48          srl     6,a8            ;divide by block size (64)
     284 00000c80     40e8          add     a7,a8           ;a8=ptr to bit which indicates block on list
     285 00000c90     1508          subk    8,a8            ;after inc a8, use movb *a8 to load sign bit
     286 00000ca0     44c0          sub     a6,a0           ;subtract block size
     287 00000cb0     4c07          move    a0,a7
     288                    
     289 00000cc0           poqasclp1
     290 00000cc0     1028          addk    1,a8
     291 00000cd0     40c7          add     a6,a7           ;Next block
     292 00000ce0     4847          cmp     a2,a7
     293 00000cf0     c541          jrge    poqax           ;End?
     294                    
     295 00000d00     8f00          movb    *a8,a0          ;Check bakbit
     296 00000d10     cefa          jrn     poqasclp1               ;Already displayed?
     297                    
     298 00000d20     b4e1          move    *a7(MAP_X),a1
         00000d30     0010  
     299 00000d40     e461          cmpxy   a3,a1
     300 00000d50                   JRXGE   poqaqscanstrt   ;Block X >= TL X ? (Do quicker scan)
     301                    
     302 00000d60     b4ee          move    *a7(MAP_HDR),a14
         00000d70     0030  
     303 00000d80     268e          sll     32-12,a14       ;Bits 0-11 are hdr offset
     304 00000d90     2e0e          srl     32-12-4,a14     ;*16
     305 00000da0     4dc0          move    a14,a0          ;>*5
     306 00000db0     2440          sll     2,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE    7

     307 00000dc0     400e          add     a0,a14
     308 00000dd0     40ae          add     a5,a14          ;A14=*Img hdr
     309                    
     310 00000de0     85c0          move    *a14,a0         ;MAP_W
     311 00000df0     4001          add     a0,a1
     312 00000e00     e461          cmpxy   a3,a1
     313 00000e10                   JRXLT   poqasclp1               ;Block X+W < TL X ? (not in range)
     314                    
     315 00000e20     b4e1          move    *a7(MAP_Y),a1
         00000e30     0020  
     316 00000e40     2601          sll     16,a1
     317 00000e50     e481          cmpxy   a4,a1
     318 00000e60                   JRYGE   poqasclp1               ;Block Y >= BR Y ?
     319                    
     320 00000e70     b5c0          move    *a14(MAP_H),a0
         00000e80     0010  
     321 00000e90     2600          sll     16,a0
     322 00000ea0     4001          add     a0,a1
     323 00000eb0     e461          cmpxy   a3,a1
     324 00000ec0                   JRYLT   poqasclp1               ;Block Y+H < TL Y ?
     325                    
     326 00000ed0     0d3f          callr   bgnd_addblk
         00000ee0     0025  
     327 00000ef0     c9dc          jrnc    poqasclp1
     328                    
     329 00000f00     c020          jruc    poqax           ;No more blocks!
     330                    
     331                    
     332                    
     333 00000f10           poqasclp2
     334 00000f10     1028          addk    1,a8
     335 00000f20     40c7          add     a6,a7           ;Next block
     336 00000f30     4847          cmp     a2,a7
     337 00000f40     c51c          jrge    poqax           ;End?
     338                    
     339 00000f50     8f00          movb    *a8,a0          ;Check bakbit
     340 00000f60     cefa          jrn     poqasclp2               ;Already displayed?
     341                    
     342 00000f70           poqaqscanstrt
     343 00000f70     b4e1          move    *a7(MAP_Y),a1
         00000f80     0020  
     344 00000f90     2601          sll     16,a1
     345 00000fa0     e481          cmpxy   a4,a1
     346 00000fb0                   JRYGE   poqasclp2               ;Block Y >= BR Y ?
     347                    
     348 00000fc0     b4ee          move    *a7(MAP_HDR),a14
         00000fd0     0030  
     349 00000fe0     268e          sll     32-12,a14       ;Bits 0-11 are hdr offset
     350 00000ff0     2e0e          srl     32-12-4,a14     ;*16
     351 00001000     4dc0          move    a14,a0          ;>*5
     352 00001010     2440          sll     2,a0
     353 00001020     400e          add     a0,a14
     354 00001030     40ae          add     a5,a14          ;A14=*Img hdr
     355                    
     356 00001040     b5c0          move    *a14(MAP_H),a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE    8

         00001050     0010  
     357 00001060     2600          sll     16,a0
     358 00001070     4001          add     a0,a1
     359 00001080     e461          cmpxy   a3,a1
     360 00001090                   JRYLT   poqasclp2               ;Block Y+H < TL Y ?
     361                    
     362 000010a0     b4e1          move    *a7(MAP_X),a1
         000010b0     0010  
     363 000010c0     e481          cmpxy   a4,a1
     364 000010d0                   JRXGE   poqax           ;BLOCK X > BR X ?
     365                    
     366 000010e0     0d3f          callr   bgnd_addblk
         000010f0     0004  
     367 00001100     c9e0          jrnc    poqasclp2
     368                    
     369                    
     370 00001110           poqax   PULL    a0,a6,a7
     371 00001130     0960          rets
     372                    
     373                    
     374                    
     375                    
     376 00001140            SUBRP  bgnd_addblk
     377                    
     378 00001140                   PUSH    a0,a2,a3,a4
     379                    
     380                    
     381 00001160     0d5f          calla   GETOBJ
         00001170 00000000! 
     382 00001190     ca00          jrz     tdffx
         000011a0     008b  
     383                    
     384 000011b0     8f0e          movb    *a8,a14         ;set bit in bitmap for block on list
     385 000011c0     0bae          ori     080H,a14
         000011d0 00000080  
     386 000011f0     8dc8          movb    a14,*a8
     387                    
     388 00001200     b300          move    a8,*a0(OPLINK),L ;OPLINK = *Bakbit for obj
         00001210     01a0  
     389                    
     390 00001220     5621          clr     a1
     391 00001230     b020          move    a1,*a0(OID)
         00001240     0190  
     392 00001250     b020          move    a1,*a0(OFLAGS)
         00001260     00e0  
     393 00001270     b220          move    a1,*a0(OXVEL),L
         00001280     0020  
     394 00001290     b220          move    a1,*a0(OYVEL),L
         000012a0     0040  
     395 000012b0     09e1          movi    01000100H,a1
         000012c0 01000100  
     396 000012e0     b220          move    a1,*a0(OSCALE),L
         000012f0     0240  
     397                    
     398 00001300     b6e1          move    *a7(MAP_X),a1,L ;A1=ypos:xpos of block from mod base
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE    9

         00001310     0010  
     399 00001320     e121          addxy   a9,a1           ;+module base position
     400 00001330     b020          move    a1,*a0(OXPOS)
         00001340     0090  
     401 00001350     2e01          srl     16,a1
     402 00001360     b020          move    a1,*a0(OYPOS)
         00001370     00b0  
     403 00001380     84e4          move    *a7,a4          ;A4=map_z,8:map_flags,4:map_pal,4
     404 00001390     4c83          move    a4,a3
     405 000013a0     0523          zext    a3
     406 000013b0     2f03          srl     8,a3
     407 000013c0     b060          move    a3,*a0(OZPOS)
         000013d0     00d0  
     408                    
     409 000013e0     b4e1          move    *a7(MAP_HDR),a1
         000013f0     0030  
     410 00001400     ec2e          movx    a1,a14
     411 00001410     260e          sll     32-16,a14
     412 00001420     2c8e          srl     32-4,a14
     413 00001430     252e          sll     4+5,a14         ;Bits 12-15 are bits 4-7 of pal index *32
     414                            
     415 00001440     2681          sll     32-12,a1        ;Bits 0-11 are hdr offset
     416 00001450     2e01          srl     32-12-4,a1      ;*16
     417 00001460     4c23          move    a1,a3           ;>*5
     418 00001470     2441          sll     2,a1
     419 00001480     4061          add     a3,a1
     420                    
     421 00001490     40a1          add     a5,a1           ;A1=*Img hdr
     422                    
     423 000014a0     4c83          move    a4,a3           ;A4=Map_z,8: map_flags,4: map_pal,4
     424 000014b0     2784          sll     32-4,a4         ;Last four bits for *pal
     425 000014c0     2d24          srl     32-4-5,a4       ;*32
     426 000014d0     41c4          add     a14,a4
     427 000014e0     4144          add     a10,a4          ;+Pal_t base
     428 000014f0     4c02          move    a0,a2           ;Save A0
     429 00001500     8680          move    *a4,a0,L        ;Get *PAL
     430 00001510     4c24          move    a1,a4
     431                            .if     NMBPAL
     432                            calla   pal_getb
     433                            .else
     434 00001520     0d5f          calla   pal_getf
         00001530 00000000! 
     435                            .endif
     436 00001550     cb01          jrnz    bsetpal         ;No PAL?
     437 00001560     5600          clr     a0
     438 00001570           bsetpal
     439 00001570     0520          zext    a0
     440 00001580     b202          move    a0,*a2(OPAL),L
         00001590     0150  
     441 000015a0     4c40          move    a2,a0                   ;Restore A0
     442 000015b0     4c81          move    a4,a1                   ;^ A1
     443 000015c0     b220          move    a1,*a0(OIMG),L          ;A1=Data block pointer
         000015d0     0170  
     444                    
     445 000015e0     b424          move    *a1(MAP_CTRL),a4        ;Get DMA ctrl
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE   10

         000015f0     0040  
     446 00001600     0ba4          ori     08002H,a4               ;A4=flags (08000H dma go, 2)
         00001610 00008002  
     447 00001630     2f83          srl     4,a3                    ;remove palette bits
     448 00001640     27c3          sll     32-2,a3
     449 00001650     c801          jrc     tdfftrans                       ;Transparent?
     450 00001660     1024          addk    1,a4
     451 00001670     2cc3  tdfftrans       srl     26,a3                   ;Line up flip bits
     452 00001680     5464          or      a3,a4
     453                    
     454 00001690     9622          move    *a1+,a2,L               ;ISIZE
     455 000016a0     8623          move    *a1,a3,L                ;Get SAG
     456 000016b0     0524          zext    a4                      ;Zero offset in A4
     457                    
     458 000016c0     4c01          move    a0,a1
     459 000016d0     0b01          addi    OSIZE+32,a1
         000016e0     0150  
     460 000016f0     0981          mmtm    a1,a2,a3,a4             ;Stuff OSIZE,OSAG,OFFSET,OCTRL
         00001700     3800  
     461                    
     462 00001710     b404          move    *a0(OZPOS),a4
         00001720     00d0  
     463                    
     464 00001730     0b44          cmpi    80,a4                   ;> 80?
         00001740     ffaf  
     465 00001750     c429          jrlt    tdffnormz                       ;Normal?
     466                    
     467 00001760     0b44          cmpi    100,a4
         00001770     ff9b  
     468 00001780     c50a          jrge    no_call_routine
     469 00001790     4c8e          move    a4,a14
     470 000017a0     0bee          subi    80,a14
         000017b0     ffaf  
     471 000017c0                   X32     a14
     472 000017d0     0b2e          addi    z_t,a14
         000017e0 00001bf0' 
     473 00001800     87ce          move    *a14,a14,L
     474 00001810     092e          call    a14
     475 00001820     c009          jruc    tdffend_clever_stuff
     476                    
     477 00001830           no_call_routine
     478                    
     479 00001830     0be4          subi    100,a4
         00001840     ff9b  
     480 00001850                   X16     a4
     481 00001860     0b24          addi    tdffztbl,a4
         00001870 00001aa0' 
     482 00001890     8484          move    *a4,a4
     483 000018a0     b080          move    a4,*a0(OZPOS)
         000018b0     00d0  
     484                    
     485                    
     486                     .if 0
     487                    
     488                            move    a4,*a0(OZPOS)
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE   11

     489                    
     490                            subi    20,a4                   ;> 100?
     491                            jrgt    tdffno_rel
     492                            move    *a0(OFLAGS),a4
     493                            ori     M_SCRNREL,a4
     494                            move    a4,*a0(OFLAGS)
     495                            move    *a0(OYPOS),a4
     496                            andi    0ffh,a4
     497                            move    a4,*a0(OYPOS)
     498                    tdffno_rel
     499                     .endif
     500                    
     501 000018c0           tdffend_clever_stuff
     502 000018c0     b404          move    *a0(OFLAGS),a4
         000018d0     00e0  
     503 000018e0     0ba4          ori     M_BOBJ,a4
         000018f0 00004000  
     504 00001910     b080          move    a4,*a0(OFLAGS)
         00001920     00e0  
     505                    
     506 00001930     5684          clr     a4
     507 00001940     b280          move    a4,*a0(OXVEL),L
         00001950     0020  
     508 00001960     b280          move    a4,*a0(OYVEL),L
         00001970     0040  
     509                    
     510 00001980     0d5f          calla   INSOBJ                  ;Put on objlst
         00001990 00000000! 
     511 000019b0     0320          clrc
     512 000019c0                   PULL    a0,a2,a3,a4
     513 000019e0     0960          rets
     514                    
     515 000019f0           tdffnormz
     516 000019f0     0d5f          calla   INSBOBJ
         00001a00 00000000! 
     517 00001a20     0320          clrc
     518 00001a30                   PULL    a0,a2,a3,a4
     519 00001a50     0960          rets
     520                    
     521 00001a60     0de0  tdffx   setc                            ;failure to get object
     522 00001a70                   PULL    a0,a2,a3,a4
     523 00001a90     0960          rets
     524                    
     525                    
     526                    
     527 00001aa0           tdffztbl
     528 00001aa0     13c7          .word   013c7h  ;100    mat
     529 00001ab0     13c8          .word   013c8h  ;101    back posts
     530 00001ac0     13c9          .word   013c9h  ;102    back buckles
     531 00001ad0     1500          .word   01500h  ;103    front buckles
     532 00001ae0     1501          .word   01501h  ;104    front posts
     533 00001af0     1502          .word   01502h  ;105    front mat
     534 00001b00     1769          .word   01769h  ;106    front gate
     535 00001b10     0000          .word   0       ;107
     536 00001b20     0000          .word   0       ;108
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE   12

     537 00001b30     0000          .word   0       ;109
     538 00001b40     0000          .word   0       ;110
     539 00001b50     0000          .word   0       ;111
     540 00001b60     0000          .word   0       ;112
     541 00001b70     0000          .word   0       ;113
     542 00001b80     0000          .word   0       ;114
     543 00001b90     0000          .word   0       ;115
     544 00001ba0     0000          .word   0       ;116
     545 00001bb0     0000          .word   0       ;117
     546 00001bc0     0000          .word   0       ;118
     547 00001bd0     0000          .word   0       ;119
     548 00001be0     0000          .word   0       ;120
     549                    
     550                    
     551                    
     552                    
     553 00001bf0           z_t
     554 00001bf0 00002130'         .long   bak_null,bak_null,bak_null,bak_null,bak_null
     555 00001c90 00002130'         .long   bak_null,DO_FLASH,DO_JASON_CROWD,DO_TONY_CROWD,DO_VOGEL_CROWD
     556 00001d30 00002130'         .long   bak_null,bak_null,bak_null,bak_null,bak_null
     557 00001dd0 00002130'         .long   bak_null,bak_null,bak_null,bak_null,bak_null
     558 00001e70 00002130'         .long   bak_null,bak_null,bak_null,bak_null,bak_null
     559 00001f10 00002130'         .long   bak_null,bak_null,bak_null,bak_null,bak_null
     560 00001fb0 00002130'         .long   bak_null,bak_null,bak_null,bak_null,bak_null
     561 00002050 00002130'         .long   bak_null,bak_null,bak_null,bak_null,bak_null
     562 000020f0 00002130'         .long   bak_null,bak_null
     563                    
     564                    
     565 00002130           bak_null
     566                    
     567 00002130     0960          rets
     568                    
     569                    
     570                    
     571                            .align
     572 00002200            SUBR   bgnd_delnonvis
     573                    
     574 00002200     4d09  kpvrlp  move    a8,a9                   ;ptr to prev in a9
     575 00002210     8708          move    *a8,a8,L                ;ptr to next in a8
     576 00002220     ca25          jrz     kpvrx                   ;End?
     577                    
     578 00002230     b507  kpvrlp2 MOVE    *A8(OXPOS),A7
         00002240     0090  
     579 00002250     e4e4          CMPXY   A7,A4
     580 00002260                   JRXLT   DEL_IT                  ;JUMP IF BR X < BLOCK X
     581                    
     582 00002270     b500          MOVE    *A8(OYPOS),A0
         00002280     00b0  
     583 00002290     2600          SLL     16,A0
     584 000022a0     e404          CMPXY   A0,A4
     585 000022b0                   JRYLT   DEL_IT                  ;JUMP IF BR Y < BLOCK Y
     586                    
     587 000022c0     b701          MOVE    *A8(OIMG),A1,L
         000022d0     0170  
     588 000022e0     8426          MOVE    *A1,A6                  ;A6 BLOCK WIDTH
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE   13

     589 000022f0     40c7          ADD     A6,A7
     590 00002300     e467          CMPXY   A3,A7
     591 00002310                   JRXLT   DEL_IT                  ;JUMP IF TL X > BLOCK X+W
     592                    
     593 00002320     b427          MOVE    *A1(MAP_H),A7           ;A7 BLOCK HEIGHT
         00002330     0010  
     594 00002340     2607          SLL     16,A7
     595 00002350     40e0          ADD     A7,A0
     596 00002360     e460          CMPXY   A3,A0
     597 00002370                   JRYGE   kpvrlp                  ;JUMP IF TL Y <= BLOCK Y+H
     598                    
     599 00002380           DEL_IT
     600 00002380     b700          move    *a8(OPLINK),a0,L        ;0CHlr the on display list bit
         00002390     01a0  
     601 000023a0     8e07          movb    *a0,a7
     602 000023b0     2727          sll     32-7,a7
     603 000023c0     2ce7          srl     32-7,a7
     604 000023d0     8ce0          movb    a7,*a0
     605                    
     606 000023e0     8b09          move    *a8,*a9,L               ;Unlink
     607 000023f0     07a0          move    @OFREE,a0,L
         00002400 00000000! 
     608 00002420     8208          move    a0,*a8,L
     609 00002430     0788          move    a8,@OFREE,L             ;Put on free list
         00002440 00000000! 
     610 00002460     8728          move    *a9,a8,L                ;A8=*Next obj
     611 00002470     cbdb          jrnz    kpvrlp2                 ;More?
     612                    
     613 00002480     0960  kpvrx   rets
     614                    
     615                    
     616                    
     617                            .end

 No Errors,  No Warnings
