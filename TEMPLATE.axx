
	.file	"bam.asm"
	.title	"Bam Bam Bigelo specific game code"
	.width	132
	.option	b,d,l,t
	.mnolist


	.include	"macros.h"
	.include	"mproc.equ"		;Mproc equates
	.include	"display.equ"		;Display proc equates
	.include	"gsp.equ"		;Gsp asm equates
	.include	"sys.equ"
	.include	"game.equ"
	.include	"plyr.equ"
	.include	"anim.equ"
	.include	"audit.equ"
	.include	"sound.h"
	.include 	"ring.equ"
	.include	"lifebar.h"



	.ref	set_getup_time
	.ref	wres_get_but_val_up,wres_get_but_val_down,wres_get_but_val_cur
	.ref	wres_get_stick_val_cur
	.ref	get_punch_dtime
	.ref	get_rope_x

	.ref	change_anim1,change_anim1a
	.ref	change_anim2,change_anim2a
	.ref	process_ptrs
	.ref	keep_attached
	.ref	get_opp_plyrmode
	.ref	count_hits
	.ref	wres_collis_off
	.ref	convert_facing
	.ref	check_secret_moves
	.ref	change_walk_anim
	.ref	set_rotate_anim
	.ref	execute_walk
	.ref	start_run,bounce_off_ropes
	.ref	inc_burnout

	;from CROWD.ASM
	.ref	crowd_cheer

	;from DCSSOUND.ASM
	.ref	triple_sound

	;from WRESTLE.ASM
	.ref	set_turbo_status
	.ref	calc_line_x
	.ref	face_each_other
	.ref	lineup_grapple
	.ref	break_lockup







bam_secret_moves
	.long	nxrobutton_hold	;must have this one

	.long	nxroturbo_run
	.long	nxro2nd_wind1
	.long	nxro2nd_wind2
	.long	0



nxrobutton_hold

	move	a13,a0
	calla	wres_get_but_val_up
	btst	PLAYER_PUNCH_BIT,a0
	jrz	nxrono_punch

	move	*a13(PLYRNUM),a0
	calla	get_punch_dtime
	cmpi	100,a0			;> min?
	jrlt	nxrono_punch
	cmpi	100+60,a0		;< max?
	jrgt	nxrono_punch

	callr	scrt_2ndwind
	setc
	rets

nxrono_punch
	clrc
	rets




nxroturbo_run
	.word	B_TURBO,		J_ALL
	.word	B_TURBO,		J_ALL
	.word	8000h | 16		;max
	.long	scrt_run

nxro2nd_wind1
	.word	J_UP,			J_REAL_LR
	.word	J_UP_AWAY,		J_REAL_LR
	.word	J_AWAY,			J_REAL_LR
	.word	J_DOWN_AWAY,		J_REAL_LR
	.word	J_DOWN,			J_REAL_LR
	.word	J_DOWN_TOWARD,		J_REAL_LR
	.word	J_TOWARD,		J_REAL_LR
	.word	J_UP_TOWARD,		J_REAL_LR
	.word	J_UP,			J_REAL_LR
	.word	8000h | 50 		;max
	.long	scrt_2ndwind

nxro2nd_wind2
	.word	J_UP,			J_REAL_LR
	.word	J_UP_TOWARD,		J_REAL_LR
	.word	J_TOWARD,		J_REAL_LR
	.word	J_DOWN_TOWARD,		J_REAL_LR
	.word	J_DOWN,			J_REAL_LR
	.word	J_DOWN_AWAY,		J_REAL_LR
	.word	J_AWAY,			J_REAL_LR
	.word	J_UP_AWAY,		J_REAL_LR
	.word	J_UP,			J_REAL_LR
	.word	8000h | 50 		;max
	.long	scrt_2ndwind


scrt_run

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	nxrono_scrt_run
	move	*a13(PLYRMODE),a0

	move	*a13(PLYRMODE),a0
	cmpi	MODE_RUNNING,a0
	jreq	nxrono_scrt_run
	cmpi	MODE_BOUNCING,a0
	jreq	nxrono_scrt_run
	calla	start_run

nxrono_scrt_run
	rets

scrt_2ndwind
	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	nxrono_scrt_2ndwind

	movi	dnk_2ndwind_anim,a0
	calla	change_anim1a
nxrono_scrt_2ndwind
	rets



 SUBR	bam_ani_init

	movi	bam_stand2_anim,a0
	calla	change_anim1a

	movi	bam_torso2_anim,a0
	calla	change_anim2a

	rets



 SUBR	move_bam



	movi	bam_secret_moves,a11
	calla	check_secret_moves

	move	*a13(PLYRMODE),a0
	sll	5,a0			;x 32
	addi	kpyumode_table,a0
	move	*a0,a0,L
	call	a0
	rets

kpyumode_table
	.long	mode_normal		;0
	.long	mode_running		;1
	.long	mode_inair		;2
	.long	mode_attached		;3
	.long	mode_onground		;4
	.long	mode_bouncing		;5
	.long	mode_onturnbkl		;6
	.long	mode_block		;7
	.long	mode_dizzy		;8
	.long	mode_dead		;9
	.long	mode_oppoverhead	;10
	.long	mode_climbturnbkl	;11
	.long	mode_waitanim		;12
	.long	mode_grapple		;13
	.long	mode_master		;14
	.long	mode_slave		;15
	.long	mode_headhold		;16


mode_normal


	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	zihbno_interrupt

 .if 0
	calla	get_opp_plyrmode
	cmpi	MODE_DEAD,a0
	jrne	zihbopp_not_dead

	movi	bam_raisearm_anim,a0
	calla	change_anim1a
	rets

zihbopp_not_dead

	GETLIFE
	jruc	zihbnot_dizzy
	jrnz	zihbnot_dizzy

	SETMODE	DIZZY
	movi	dnk_dizzy_anim,a0
	calla	change_anim1a
	rets

 .endif
zihbnot_dizzy

	calla	set_turbo_status

	move	a13,a0
	calla	wres_get_but_val_cur
	btst	PLAYER_BLOCK_BIT,a0	;maybe have to action tables?
	jrz	zihbnblk			;1 for down transitions
	callr	zihbblock			;& 1 for current buttons
zihbnblk
	move	a13,a0
	calla	wres_get_but_val_down
	andi	01111b,a0		;mask out turbo button
	sll	5,a0			;x 32
	addi	zihbaction_table,a0
	move	*a0,a0,L
	call	a0

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	zihbno_interrupt



	move	a13,a0
	calla	wres_get_stick_val_cur
	move	a0,*a13(MOVE_DIR)
	move	a0,a4

	btst	MOVE_UP_BIT,a4		;check if player should climb
	jrz	zihbnot_top		;up the turnbuckle

	move	*a13(INRING),a0
	jrnz	zihbno_climb

	move	*a13(OBJ_ZPOSINT),a0
	cmpi	RING_TOP,a0
	jrgt	zihbnot_top


	move	*a13(OBJ_XPOSINT),a0
	cmpi	RING_X_CENTER,a0
	jrgt	zihbright
	calla	get_rope_x
	move	*a13(OBJ_COLLX1),a1
	cmp	a0,a1			;a1-a0
	jrgt	zihbno_climb

	movi	MOVE_UP_LEFT,a3		;face top left turnbuckle
	cmp	a3,a4			;Make sure UP/LEFT is pressed
	jreq	zihbclimbit
	jruc	zihbno_climb

zihbright
	calla	get_rope_x
	move	*a13(OBJ_COLLX2),a1
	cmp	a0,a1			;a1-a0
	jrlt	zihbno_climb

	movi	MOVE_UP_RIGHT,a3	;face top right turnbuckle
	cmp	a3,a4			;Make sure UP/RIGHT is pressed
	jrne	zihbno_climb


zihbclimbit
	move	a3,*a13(NEW_FACING_DIR)
	move	*a13(FACING_DIR),a0
	cmp	a0,a3
	jreq	zihbclimb
	calla	set_rotate_anim

	movi	zihbclimb,a0			;this routine gets executed
	move	a0,*a13(CODE_ADDR),L		;when the rotate anim
	SETMODE	WAITANIM			;finishes
	rets

zihbclimb
	movi	dnk_climb_up_anim,a0
	calla	change_anim1a

	SETMODE	CLIMBTURNBKL

	rets

zihbnot_top
zihbno_climb

	calla	execute_walk

zihbno_interrupt
	rets

zihbaction_table
	.long	zihbzip_action	;0
	.long	zihbblock		;1
	.long	zihbgrab		;2
	.long	zihbzip_action	;3
	.long	zihbpunch		;4
	.long	zihbzip_action	;5
	.long	zihbzip_action	;6
	.long	zihbzip_action	;7
	.long	zihbkick		;8
	.long	zihbzip_action	;9
	.long	zihbzip_action	;10
	.long	zihbzip_action	;11
	.long	zihbzip_action	;12
	.long	zihbzip_action	;13
	.long	zihbzip_action	;14
	.long	zihbzip_action	;15


zihbzip_action	;0


	rets

zihbpunch		;1

	rets

zihbblock		;2

	rets

zihbkick		;4

	rets


zihbgrab		;8

	rets



djjuXRUN_VAL	equ	60000h		;50000h
djjuZDRIFT_VAL	equ	20000h		;18000h

mode_running

	move	*a13(GETUP_TIME),a0		;delay b4 gaining control
	jrz	djjunot_octrl

	calla	keep_attached			;if still being flung
	jrnz	djjuout_of_control			;(Z=0 - still attached)


djjunot_octrl

	calla	bounce_off_ropes

	move	*a13(MOVE_DIR),a0

	movi	djjuXRUN_VAL,a1
	btst	PLAYER_RIGHT_BIT,a0
	jrnz	djjusetxvel

	movi	-djjuXRUN_VAL,a1
djjusetxvel
	move	a1,*a13(OBJ_XVEL),L


	move	*a13(GETUP_TIME),a0		;delay b4 gaining control
	jrnz	djjuout_of_control

	move	*a13(ANIMODE),a0
	btst	MODE_UNINT_BIT,a0
	jrnz	djjuno_interrupt

	move	a13,a0
	calla	wres_get_but_val_cur
	btst	PLAYER_TURBO_BIT,a0		;turbo down?
	jrnz	djjurun_down

	;has released turbo - go back to walk mode

	SETMODE	NORMAL

djjurun_down
djjuno_interrupt

	move	a13,a0
	calla	wres_get_stick_val_cur
	clr	a1

	movi	-djjuZDRIFT_VAL,a1
	btst	PLAYER_UP_BIT,a0
	jrnz	djjusetvel

	movi	djjuZDRIFT_VAL,a1
	btst	PLAYER_DOWN_BIT,a0
	jrnz	djjusetvel

	clr	a1
djjusetvel
	move	a1,*a13(OBJ_ZVEL),L


	move	a13,a0
	calla	wres_get_but_val_down
	andi	01111b,a0		;mask out turbo button
	sll	5,a0			;x 32
	addi	djjuaction_table,a0
	move	*a0,a0,L
	call	a0
djjuout_of_control
	rets

djjuaction_table
	.long	djjuzip_action		;0
	.long	djjuzip_action		;1
	.long	djjuzip_action		;2
	.long	djjuzip_action		;3
	.long	djjuflying_clothesline	;4 punch
	.long	djjuzip_action		;5
	.long	djjuzip_action		;6
	.long	djjuzip_action		;7
	.long	djjuflying_kick		;8 kick
	.long	djjuzip_action		;9
	.long	djjuzip_action		;10
	.long	djjuzip_action		;11
	.long	djjuzip_action		;12
	.long	djjuzip_action		;13
	.long	djjuzip_action		;14
	.long	djjuzip_action		;15

djjuzip_action
	rets

djjuflying_clothesline	;1

	rets

djjuflying_kick	;djju4

	rets


mode_inair	;2

	rets


mode_attached	;3

	calla	keep_attached
	jrnz	ncipstill_attached

	clr	a0
	move	a0,*a13(ATTACH_PROC),L

	SETMODE	NORMAL

	movi	MODE_NORMAL,a0
	move	a0,*a13(ANIMODE)

ncipstill_attached
	rets

nuaaZROLL_VAL	equ	20000h
nuaaROLL_SPEED	equ	50h
nuaaROLL_FRAMES	equ	11

mode_onground	;4

	rets



mode_bouncing	;5

	rets


mode_onturnbkl	;6

	rets


mode_block	;7
	rets


mode_dizzy	;8

	rets

mode_dead	;9

	rets


mode_oppoverhead ;10

	rets


mode_climbturnbkl	;11

	rets



mode_waitanim	;12

	move	*a13(ANIMODE),a0
	btst	MODE_END_BIT,a0
	jrz	ygirnot_ended

	move	*a13(CODE_ADDR),a0,L
	call	a0

ygirnot_ended
	rets



mode_grapple	;13

	rets



mode_master	;14

	.ref	master_keep_attached
	calla	master_keep_attached	;keep slave attached to me

	rets


mode_slave	;15
	rets


mode_headhold	;16

	move	*a13(ANIMODE),a0
	btst	MODE_END_BIT,a0
	jrz	qdgpnot_ended

	clr	a0
	movi	MODE_NORMAL,a1
	move	a1,*a13(PLYRMODE)

	move	*a13(ATTACH_PROC),a10,L
	jrz	qdgpskp
	move	a1,*a10(PLYRMODE)
	move	a0,*a10(ATTACH_PROC),L
qdgpskp
	move	a0,*a13(ATTACH_PROC),L

qdgpnot_ended
	rets



ozseVEL	equ	30000h
ozseDVEL	equ	21f0eh

ozseVEL2	equ	50000h
ozseDVEL2	equ	38917h


 SUBR bam_velocity_table


	.long	0,	-ozseVEL	;0 UP
	.long	0,	-ozseVEL2

	.long	ozseDVEL,	-ozseDVEL	;1 UP-RIGHT
	.long	ozseDVEL2,	-ozseDVEL2

	.long	ozseDVEL,	0	;2 RIGHT
	.long	ozseDVEL2,	0

	.long	ozseDVEL,	ozseDVEL	;3 DOWN-RIGHT
	.long	ozseDVEL2,	ozseDVEL2

	.long	0,	ozseVEL	;4 DOWN
	.long	0,	ozseVEL2

	.long	-ozseDVEL,	ozseDVEL	;5 DOWN-LEFT
	.long	-ozseDVEL2,ozseDVEL2

	.long	-ozseDVEL,	0	;6 LEFT
	.long	-ozseDVEL2,0

	.long	-ozseDVEL,	-ozseDVEL	;7 UP-LEFT
	.long	-ozseDVEL2,-ozseDVEL2



 SUBR bam_rotate_anims_table
	.long	dnk_stand2_anim		;new = up right
	.long	dnk_2_to_4_turn_anim	;    = down right
	.long	dnk_2_to_6_turn_anim	;    = down left ***
	.long	dnk_2_to_8_turn_anim	;    = up left

	.long	dnk_4_to_2_turn_anim	;new = up right
	.long	dnk_stand4_anim		;    = down right
	.long	dnk_4_to_6_turn_anim	;    = down left
	.long	dnk_4_to_8_turn_anim	;    = up left ***

	.long	dnk_6_to_2_turn_anim	;new = up right ***
	.long	dnk_6_to_4_turn_anim	;    = down right
	.long	dnk_stand4_anim		;    = down left
	.long	dnk_6_to_8_turn_anim	;    = up left

	.long	dnk_8_to_2_turn_anim	;new = up right
	.long	dnk_8_to_4_turn_anim	;    = down right ***
	.long	dnk_8_to_6_turn_anim	;    = down left
	.long	dnk_stand2_anim		;    = up left


 SUBR bam_leg_anims_table
	.long	dnk_walk1_f2_anim	;1 (UP)
	.long	dnk_walk1_f2_anim	;2 (UP_RIGHT)
	.long	dnk_walk1_f4_anim	;3 (RIGHT)
	.long	dnk_walk1_f4_anim	;4 (DOWN_RIGHT)
	.long	dnk_walk1_f4_anim	;5 (DOWN)
	.long	dnk_walk1_f4_anim	;6 (DOWN_LEFT)
	.long	dnk_walk1_f2_anim	;7 (LEFT)
	.long	dnk_walk1_f2_anim	;8 (UP-LEFT)

	.long	dnk_walk2_f2_anim	;1 (UP)
	.long	dnk_walk2_f2_anim	;2 (UP_RIGHT)
	.long	dnk_walk2_f2_anim	;3 (RIGHT)
	.long	dnk_walk2_f4_anim	;4 (DOWN_RIGHT)
	.long	dnk_walk8_f4_anim	;5 (DOWN)
	.long	dnk_walk8_f4_anim	;6 (DOWN_LEFT)
	.long	dnk_walk4_f2_anim	;7 (LEFT)
	.long	dnk_walk4_f2_anim	;8 (UP-LEFT)

	.long	dnk_walk2_f2_anim	;1 (UP)
	.long	dnk_walk2_f2_anim	;2 (UP_RIGHT)
	.long	dnk_walk2_f2_anim	;3 (RIGHT)
	.long	dnk_walk4_f4_anim	;4 (DOWN_RIGHT)
	.long	dnk_walk4_f4_anim	;5 (DOWN)
	.long	dnk_walk8_f4_anim	;6 (DOWN_LEFT)
	.long	dnk_walk6_f2_anim	;7 (LEFT)
	.long	dnk_walk6_f2_anim	;8 (UP-LEFT)


	.long	dnk_walk2_f2_anim	;1 (UP)
	.long	dnk_walk8_f2_anim	;2 (UP_RIGHT)
	.long	dnk_walk4_f4_anim	;3 (RIGHT)
	.long	dnk_walk4_f4_anim	;4 (DOWN_RIGHT)
	.long	dnk_walk2_f4_anim	;5 (DOWN)
	.long	dnk_walk6_f4_anim	;6 (DOWN_LEFT)
	.long	dnk_walk2_f2_anim	;7 (LEFT)
	.long	dnk_walk6_f2_anim	;8 (UP-LEFT)

	.long	dnk_walk5_f2_anim	;1 (UP)
	.long	dnk_walk5_f2_anim	;2 (UP_RIGHT)
	.long	dnk_walk5_f4_anim	;3 (RIGHT)
	.long	dnk_walk5_f4_anim	;4 (DOWN_RIGHT)
	.long	dnk_walk5_f4_anim	;5 (DOWN)
	.long	dnk_walk5_f4_anim	;6 (DOWN_LEFT)
	.long	dnk_walk5_f2_anim	;7 (LEFT)
	.long	dnk_walk5_f2_anim	;8 (UP-LEFT)

	.long	dnk_walk2_f2_anim	;1 (UP)
	.long	dnk_walk6_f2_anim	;2 (UP_RIGHT)
	.long	dnk_walk2_f2_anim	;3 (RIGHT)
	.long	dnk_walk6_f4_anim	;4 (DOWN_RIGHT)
	.long	dnk_walk2_f4_anim	;5 (DOWN)
	.long	dnk_walk4_f4_anim	;6 (DOWN_LEFT)
	.long	dnk_walk2_f2_anim	;7 (LEFT)
	.long	dnk_walk8_f2_anim	;8 (UP-LEFT)

	.long	dnk_walk2_f2_anim	;1 (UP)
	.long	dnk_walk6_f2_anim	;2 (UP_RIGHT)
	.long	dnk_walk6_f2_anim	;3 (RIGHT)
	.long	dnk_walk8_f4_anim	;4 (DOWN_RIGHT)
	.long	dnk_walk4_f4_anim	;5 (DOWN)
	.long	dnk_walk4_f4_anim	;6 (DOWN_LEFT)
	.long	dnk_walk2_f2_anim	;7 (LEFT)
	.long	dnk_walk2_f2_anim	;8 (UP-LEFT)

	.long	dnk_walk2_f2_anim	;1 (UP)
	.long	dnk_walk4_f2_anim	;2 (UP_RIGHT)
	.long	dnk_walk6_f2_anim	;3 (RIGHT)
	.long	dnk_walk8_f4_anim	;4 (DOWN_RIGHT)
	.long	dnk_walk6_f4_anim	;5 (DOWN)
	.long	dnk_walk2_f4_anim	;6 (DOWN_LEFT)
	.long	dnk_walk2_f2_anim	;7 (LEFT)
	.long	dnk_walk2_f2_anim	;8 (UP-LEFT)


 SUBR bam_torso_anims_table
	.long	dnk_torso2_anim		;new = up right
	.long	dnk_2_to_4_turn2_anim	;    = down right
	.long	dnk_2_to_8_turn2_anim	;    = down left ***
	.long	dnk_2_to_8_turn2_anim	;    = up left

	.long	dnk_4_to_2_turn2_anim	;new = up right
	.long	dnk_torso4_anim		;    = down right
	.long	dnk_4_to_6_turn2_anim	;    = down left
	.long	dnk_4_to_6_turn2_anim	;    = up left ***

	.long	dnk_6_to_4_turn2_anim	;new = up right ***
	.long	dnk_6_to_4_turn2_anim	;    = down right
	.long	dnk_torso4_anim		;    = down left
	.long	dnk_4_to_2_turn2_anim	;    = up left

	.long	dnk_8_to_2_turn2_anim	;new = up right
	.long	dnk_8_to_2_turn2_anim	;    = down right ***
	.long	dnk_2_to_4_turn2_anim	;    = down left
	.long	dnk_torso2_anim		;    = up left



 SUBR	bam_hit

	move	*a10(ATTACK_MODE),a0	;type of attack that hit doink
	move	a0,a1
	sll	5,a1			;x 32
	addi	dqsihit_table,a1
	move	*a1,a1,L		;appropriate routine
	call	a1

	rets

dqsihit_table
	.long	_punch		;0
	.long	_hdbutt		;1
	.long	_kick		;2
	.long	_flykick	;3
	.long	_grabthrow	;4
	.long	_uprcut		;5
	.long	_lbowdrop	;6
	.long	_grabhold	;7
	.long	_grabfling	;8
	.long	_push		;9
	.long	_hiptoss	;10
	.long	_bigboot	;11
	.long	_knee		;12
	.long	_grapple	;13
	.long	_14		;14
	.long	_15		;15
	.long	_16		;16

_punch

	calla	wres_collis_off
	rets

_hdbutt

	calla	wres_collis_off
	rets

_kick

	calla	wres_collis_off
	rets

_flykick

	calla	wres_collis_off
	rets

_grabthrow

	calla	wres_collis_off
	rets

_uprcut

	calla	wres_collis_off
	rets

_lbowdrop

	calla	wres_collis_off
	rets
	
_grabhold

	calla	wres_collis_off
	rets

_grabfling

	calla	wres_collis_off
	rets

_push

	calla	wres_collis_off
	rets

_hiptoss

	calla	wres_collis_off
	rets

_bigboot

	calla	wres_collis_off
	rets

_knee

	calla	wres_collis_off
	rets


_grapple		;13

	calla	wres_collis_off
	rets


_14		;14
_15		;15
_16		;16



	.end

