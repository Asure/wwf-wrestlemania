	.file	"util.asm"
	.title	"utility subroutines"
	.width	132
	.option	b,d,l,t
	.mnolist

	.include	"mproc.equ"
	.include	"display.equ"
	.include	"gsp.equ"
	.include	"sys.equ"
	.include	"game.equ"
	.include	"audit.equ"
	.include	"macros.h"



	.def	SCRCLR
	.def	OBJOFF,OBJON
	.def	STRLNRM,STRCNRM,STRCNRMO,STRLNRMO,STRCNRMO_1,CYCLE_TABLE
	.def	STRCNRMO_2
	.def	BLNKAREA
	.def	FRANIM,FRANIMQ
	.def	STRNGLEN
	.def	STRRNRM,FILLAREA

	.DEF	SPECIAL_WIPEOUT


	.ref	IGNORE_CHAR_WIDTH,debris_count,are_we_waiting_f
	.ref	SPECIAL_DISPLAY_INIT,switches_cur,dirqtimer,pal_set
	.ref	SYSCOPY,GET_ADJ,display_init,GAMSTATE,pal_find
	.ref	pal_getf,dpageflip,SOUNDSUP,IRQSKYE,PSTATUS2,PALRAM
	.ref	switches_down,gndstat,pal_init,BAKBITS,WFLG,WSPEED
	.ref	COLRTEMP,ENDLESS_SOUND,get_but_val_cur,get_but_val_down
	.ref	get_stick_val_cur,get_stick_val_down



	.def	STRNGRAM,HEXTOASC,GETANIX,WRLD
	.def	COLCYC,CYCLE_TABLE,FLASHME



	BSSX	RAND		,32		;Last random #
	.bss	STRNGRAM	,20*16
	.bss	WRLD		,16
	BSSX	LOWZ		,16


	.text





 SUBR	ZERO_BITS

	CLR	A0
	MOVI	10000/16,A2	;SIZE OF BAKBITS IN WORDS
	MOVI	BAKBITS,A1
KILUP
	MOVE	A0,*A1+,W
	DSJS	A2,KILUP
	RETS

 SUBR	SPECIAL_WIPEOUT
	CALLR	WIPEOUT2
	JAUC	SPECIAL_DISPLAY_INIT


 SUBR	WIPEOUT

	callr	dirq_wait

	calla	display_init

	pushst
	dint
	calla	pal_init
	POPST


 SUBR	WIPEOUT2


	clr	a0

	move	a0,@gndstat
	move	a0,@dtype

	move	a0,@are_we_waiting_f
	move	a0,@IGNORE_CHAR_WIDTH
	MOVE	A0,@ENDLESS_SOUND
	move	a0,@debris_count

	move	a0,@WFLG
	movk	OWSPD,a1
	move	a1,@WSPEED

	move	a0,a1
	calla	KILALL			;Kill all processes

	callr	ZERO_BITS
	callr	dpageflip_off
	clr	a0
	move	a0,@SOUNDSUP		;Allow sounds
	move	a0,@IRQSKYE

	pushst
	dint

	move	@SYSCOPY,a0		;>Init sysctrl

	.if	WWFUNIT
	movi	SYSCINIT,a1
	.else
	srl	8,a0
	sll	8,a0
	movi	SYSCINIT&0ffH,a1		;Don't touch 7seg LED
	.endif

	or	a1,a0
	move	a0,@SYSCOPY
	move	a0,@SYSCTRL

	popst

	callr	dirq_wait		;Now wait for vblank to zap color map


	rets


	.bss	sysstate_t	,16*50		;Mem for state save
	.bss	svproc_p	,32		;*Saved proc list
	.bss	pal_t		,32*NMFPAL	;Mem for pal save

SSS	.macro	a
	move	@:a:,*a1+
	.endm
SSSL	.macro	a
	move	@:a:,*a1+,L
	.endm

 SUBR	system_savegame

	movi	sysstate_t,a1

	SSSL	OBJLST
	SSSL	BAKLST
	SSSL	WORLDTLX
	SSSL	WORLDTLY

	SSS	IRQSKYE
	SSSL	COLRTEMP
	SSS	dtype
	SSS	dpageflip
	SSS	gndstat

	SSS	GAMSTATE



	movi	ACTIVE,a2
	movi	svproc_p,a4
	jruc	apxhprnxt

apxhprlp	cmp	a13,a2
	jreq	apxhprnxt			;Me?

	move	*a2(PROCID),a14
	jrn	apxhprnxt			;Indestructible?

	move	*a2,*a3,L		;Unlink
	move	a2,*a4,L		;Add it to save list
	move	a2,a4
	move	a3,a2
apxhprnxt
	move	a2,a3
	move	*a2,a2,L
	jrnz	apxhprlp

	clr	a0
	move	a0,*a3,L
	move	a0,*a4,L

	move	a0,@OBJLST,L		;Null lists
	move	a0,@BAKLST,L
	move	a0,@gndstat

	callr	ZERO_BITS


	movi	PALRAM,a0		;>Save pal ptrs
	movi	pal_t,a1
	movi	NMFPAL,b0
apxhplp	move	*a0+,*a1+,L
	dsj	b0,apxhplp

	calla	pal_init

	rets







	BSSX	animscnt	,16	;# anim scripts running

	STRUCTPD
	APTR	animslobj_p		;*Last obj created
	LONG	animsv			;Temp value
	WORD	animsbx			;Base X
	WORD	animsby			;Base Y
	WORD	animsfnum		;# FRANIMs running
	APTR	animslp_p		;*Loop point table pos
	APTR	animslp_t		;(*Loop point, Loop cnt)*5

	.if 0
 SUBR	anim_script		;A8=*Script

	clr	a9

 SUBRP	anim_script2		;A8=*Script, A9=Base Y:X

	move	a9,*a13(animsbx),L	;Save XY

	move	*a13(PROCID),a11
	subi	ANIMPID,a11
	srl	8,a11
	sll	8,a11			;A11=ID offset (0-0300H)

	clr	a1
	move	a1,*a13(animsfnum)
	move	a13,a1
	addi	animslp_t,a1
	move	a1,*a13(animslp_p),L

anslp	move	*a8+,a1			;Get command

	addi	anims_t,a1
	move	*a1,a1,L
	jump	a1

	.long	asEND
anims_t	.long	asNEW,asDEL,asDELM,asFRA
	.long	asANI,asHIDE,asSHOW,asPAL
	.long	asXY,asXYRNG,asYA,asXYV
	.long	asXYVA,asXYV0,asZ,asBXY
	.long	asSLP,asSLP1,asSLPR
	.long	asWAIT,asTXT
	.long	asTXTR,asTXTK,asLAB,asLABR
	.long	asDSJ,asDSJS1,asJMP,asJMPR,asJMPEQ
	.long	asJMPNE,asRUN,asRUNI,asCRE
	.long	asKIL,asASM,asSND,asSNDD
	.long	asADDW
	.long	asADDWO,asADDLO,asADLVO,asSVRL
	.long	asSVRLT,asSVL


asNEW					;>New objects
	move	*a8+,a9,L		;Get data
	PUSH	a8
ans100	move	*a9+,a2,L		;*Image
	move	*a9+,a0,L		;Get XY
	move	*a13(animsbx),a3,L
	addxy	a3,a0			;Add base
	clr	a1
	movy	a0,a1
	sll	16,a0
	move	*a9+,a3			;Z
	move	*a9+,a4			;Flags
	addi	M_NOCOLL,a4
	move	*a9+,a5			;ID
	addi	CLSANIM,a5
	add	a11,a5			;+offset
	clr	a6
	clr	a7
	calla	BEGINOBJW
	move	*a9,a0
	cmpi	-1000,a0
	jrne	ans100			;End?
	move	a8,*a13(animslobj_p),L	;Save * to last one
	PULL	a8
	jruc	anslp

asFRA					;0FHRANIM
	move	a11,a6			;Save a11
	move	*a8+,a9,L		;Get data
	move	*a13(PROCID),a1		;Inherit same ID+1
	addk	1,a1
	move	*a8+,a10		;OID
	jrn	ans250			;No ID?
	addi	CLSANIM,a10
	add	a11,a10			;+offset
	move	*a8+,a11		;apxhloops
	jrn	ans220
	move	*a13(animsfnum),a2	;+1 FRANIM cnt
	addk	1,a2
	move	a2,*a13(animsfnum)
ans220	movi	anims_franim,a7
	calla	GETPRC
	move	a13,*a0(anfc_p),L
	move	a6,a11
	jruc	anslp

ans250	addk	16,a8			;Skip apxhloops
	move	a8,a10
	move	*a13(animslobj_p),a8,L	;Get * to last one
	movi	FRQDELDIE,a7
	calla	GETPRC
	move	a10,a8
	jruc	anslp


asSLP					;>SLEEP
	move	*a8+,a0			;Get time
	calla	PRCSLP
	jruc	anslp

asSLP1					;>SLEEP 1
	movk	1,a0
	calla	PRCSLP
	jruc	anslp

asSLPR					;>Sleep random
	move	*a8+,a0			;Get time
	move	*a8+,a1
	callr	RNDRNG
	calla	PRCSLP
	jruc	anslp

asWAIT					;>Wait on FRANIMs
	SLEEPK	2
	move	*a13(animsfnum),a1
	jrnz	asWAIT
	jruc	anslp

asXY					;>New XY rel to current pos
	move	*a8+,a1			;Get ID
	move	*a8+,a2
	move	*a8+,a4
	move	*a8+,a5
asxyhs					;Entry for HIDE/SHOW
asxyr	addi	CLSANIM,a1
	add	a11,a1			;+offset
	move	@OBJLST,a0,L
ans720	callr	obj_find
	jrz	anslp
	move	*a0(OXPOS),a6		;New X
	add	a4,a6
	move	a6,*a0(OXPOS)
	move	*a0(OYPOS),a6		;New Y
	add	a5,a6
	move	a6,*a0(OYPOS)
	move	*a0,a0,L
	jrnz	ans720
	jruc	anslp

asXYRNG					;>New XY rel to current pos in rndrng
	move	*a8+,a0
	move	*a8+,a1
	callr	RNDRNG
	move	a0,a4
	move	*a8+,a0
	move	*a8+,a1
	callr	RNDRNG
	move	a0,a5
	move	*a8+,a1
	jrn	asxyr5			;No ID?
	move	*a8+,a2
	jruc	asxyr

asxyr5	addk	16,a8			;Skip mask
	move	*a13(animslobj_p),a0,L	;Get * to last one
	move	*a0(OXPOS),a6		;New X
	add	a4,a6
	move	a6,*a0(OXPOS)
	move	*a0(OYPOS),a6		;New Y
	add	a5,a6
	move	a6,*a0(OYPOS)
	jruc	anslp

asYA					;>Set Y ani pt world relative
	move	*a8+,a1
	move	*a8+,a2			;Mask
	move	*a8+,a5			;
	sll	16,a5
	move	@WORLDTLY,a0,L
	add	a0,a5
	addi	CLSANIM,a1
	add	a11,a1			;+offset
	move	@OBJLST,a0,L
asya10	callr	obj_find
	jrz	asya90

	PUSH	a1,a2
	move	*a0(OIMG),a1,L
	move	*a0(OSIZE),a2,L
	move	*a0(OCTRL),a4
	calla	GANIOF
	move	*a0(OXVAL),a3,L
	add	a6,a3			;Old X
	move	a5,a2			;New Y
	calla	GANISAG
	PULL	a1,a2

	move	*a0,a0,L
	jrnz	asya10
asya90	jruc	anslp

asXYV					;>Set XYVel
	move	*a8+,a4,L
	move	*a8+,a5,L
	move	*a8+,a1
	move	*a8+,a2
	addi	CLSANIM,a1
	add	a11,a1			;+offset
	move	@OBJLST,a0,L
ans920	callr	obj_find
	jrz	anslp
	move	*a0(OXVEL),a6,L
	add	a4,a6
	move	a6,*a0(OXVEL),L
	move	*a0(OYVEL),a6,L
	add	a5,a6
	move	a6,*a0(OYVEL),L
	move	*a0,a0,L
	jrnz	ans920
	jruc	anslp

asXYVA					;>Set XYVel absolute
	move	*a8+,a4,L
	move	*a8+,a5,L
	move	*a8+,a1
	move	*a8+,a2
	addi	CLSANIM,a1
	add	a11,a1			;+offset
	move	@OBJLST,a0,L
ans1020	callr	obj_find
	jrz	anslp
	move	a4,*a0(OXVEL),L
	move	a5,*a0(OYVEL),L
	move	*a0,a0,L
	jrnz	ans1020
	jruc	anslp

asXYV0					;>XYVel = 0
	move	*a13(animslobj_p),a0,L	;Get * to last one
	clr	a1
	move	a1,*a0(OXVEL),L
	move	a1,*a0(OYVEL),L
	jruc	anslp

asZ					;>Set Z pos
	move	*a8+,a1
	move	*a8+,a2
	move	*a8+,a4
	addi	CLSANIM,a1
	add	a11,a1			;+offset
	move	@OBJLST,a0,L
ans1120	callr	obj_find
	jrz	anslp
	move	a4,*a0(OZPOS)
	move	*a0,a0,L
	jrnz	ans1120
	jruc	anslp

asLAB					;>Set label
	move	*a8+,a0
anslab	move	*a13(animslp_p),a2,L
	move	a8,*a2+,L		;Save *
	move	a0,*a2+
	move	a2,*a13(animslp_p)
	jruc	anslp

asLABR					;>Set label randomly
	move	*a8+,a0
	move	*a8+,a1
	callr	RNDRNG
	jruc	anslab

asDSJS1					;>Sleep 1, dec and loop to label
	SLEEPK	1

asDSJ					;0DecHrement and loop to label
	move	*a13(animslp_p),a1,L
	move	-*a1,a2
	subk	1,a2
	move	a2,*a1
	jrz	ans1330
	move	-*a1,a8,L		;Get *Loop
	jruc	anslp
ans1330	subk	32,a1			;Del loop entry
	move	a1,*a13(animslp_p),L
	jruc	anslp

asPAL					;>Set palette
	move	*a13(animsv),a0,L	;Get *Pal
	calla	pal_getf
	move	a0,a4
	move	*a8+,a1
	jrn	ans1450
	addi	CLSANIM,a1
	add	a11,a1			;+offset
	move	@OBJLST,a0,L
	clr	a2			;No mask
ans1420	callr	obj_find
	jrz	anslp
	move	a4,*a0(OPAL)
	move	*a0,a0,L
	jrnz	ans1420			;More?
	jruc	anslp

ans1450	move	*a13(animslobj_p),a0,L	;Get * to last obj
	move	a4,*a0(OPAL)
	jruc	anslp

asANI					;0DHo ANI on OID
	move	*a8+,a5,L
	move	*a8+,a1			;OID
	addi	CLSANIM,a1
	add	a11,a1			;+offset
	move	@OBJLST,a0,L
	clr	a2			;No mask
ans1620	callr	obj_find
	jrz	anslp
	move	a8,a9
	move	a1,a3
	move	a5,a1			;*Img
	move	a0,a8			;*Obj
	move	*a8(OCTRL),a4		;Same flags
	calla	ANI
	move	a3,a1
	move	a8,a0
	move	a9,a8
	move	*a0,a0,L
	jrnz	ans1620			;More?
	jruc	anslp

asDEL					;0DeHlete obj
	move	*a8+,a0
	clr	a1
asdel5	addi	CLSANIM,a0
	add	a11,a0			;+offset
	calla	obj_delc
	jruc	anslp

asDELM					;0DeHlete obj with mask
	move	*a8+,a0
	move	*a8+,a1
	jruc	asdel5

asRUN					;>Run a new anim script
	move	*a8+,a0,L
	move	*a13(PROCID),a1		;Inherit same ID
asrun5	move	a8,a10
	move	a0,a8			;*Script
	move	*a13(animsbx),a9,L	;Get base XY
	movi	anim_script2,a7
	calla	GETPRC
	move	a10,a8
	jruc	anslp

asRUNI					;>Run a new anim script with ID
	move	*a8+,a0,L
	move	*a8+,a1
	addi	ANIMPID,a1
	add	a11,a1			;+offset
	jruc	asrun5

asCRE					;0CHreate a process
	move	*a8+,a7,L
	move	*a8+,a9,L		;Pass A9 to process
	movi	ANIMPID+0ffH,a1
	add	a11,a1			;+offset
	calla	GETPRC
	jruc	anslp

asKIL					;>Kill processes with mask
	move	*a8+,a0
	addi	ANIMPID,a0
	add	a11,a0			;+offset
	move	*a8+,a1
	calla	KILALLN
	jruc	anslp

asJMP					;>Jump to new location
	move	*a8+,a8,L
	jruc	anslp

asJMPR					;>Jump to new location if RND<#
	move	*a8+,a4,L
	movi	999,a0			;.1 % resolution
	callr	RNDRNG0
	move	*a8+,a1
	cmp	a1,a0
	jrhs	anslp
	move	a4,a8			;Do jmp
	jruc	anslp

asJMPEQ					;>Jump to new location if = to mem
	move	*a8+,a0,L
	move	*a0,a0			;Get value
	move	*a8+,a2,L
	move	*a8+,a1
	cmp	a1,a0
	jrne	anslp			;Not same?
	move	a2,a8			;Do jmp
	jruc	anslp

asJMPNE					;>Jump to new location if != to mem
	move	*a8+,a0,L
	move	*a0,a0			;Get value
	move	*a8+,a2,L
	move	*a8+,a1
	cmp	a1,a0
	jreq	anslp			;Same?
	move	a2,a8			;Do jmp
	jruc	anslp

asSNDD					;0DHo a snd call in demo
	movk	ADJMUSIC,a0		;Get demo music ON/OFF
	calla	GET_ADJ
	jrz	asSND			;Do sounds?
	addk	32,a8
	jruc	anslp
asSND					;0DHo a snd call
	move	*a8+,a0,L
	calla	snd_play1
	jruc	anslp

asASM					;>Inline code
	exgpc	a8
	jruc	anslp

asHIDE					;>Hide an OID (X+5000)
	movi	5000,a4
ashide2	move	*a8+,a1
	clr	a2
	clr	a5
	jruc	asxyhs

asSHOW					;>Show an OID (X-5000)
	movi	-5000,a4
	jruc	ashide2

asADDW					;0AddH WORD to mem
	move	*a8+,a0,L
	move	*a8+,a1
	move	*a0,a2
	add	a1,a2
	move	a2,*a0
	jruc	anslp

asADDWO					;0AddH WORD to last obj+offset
	move	*a8+,a0
	move	*a13(animslobj_p),a1,L	;Get * to last one
	move	*a8+,a2			;Offset
	add	a2,a1
	move	*a1,a2
	add	a0,a2
	move	a2,*a1
	jruc	anslp

asADDLO					;0AddH LONG # to last obj+offset
	move	*a8+,a0,L
	move	*a13(animslobj_p),a1,L	;Get * to last one
	move	*a8+,a2			;Offset
	add	a2,a1
	move	*a1,a2,L
	add	a0,a2
	move	a2,*a1,L
	jruc	anslp

asADLVO					;0AddH LONG value to last obj+offset
	move	*a8+,a0
	move	*a13(animslobj_p),a1,L	;Get * to last one
	add	a0,a1			;+Offset
	move	*a13(animsv),a0,L	;Get value
	move	*a1,a2,L
	add	a0,a2
	move	a2,*a1,L
	jruc	anslp

asSVRL					;>Set value to rnd long
	move	*a8+,a0,L
	move	*a8+,a1,L
	callr	RNDRNG
	move	a0,*a13(animsv),L
	jruc	anslp

asSVRLT					;>Set value to rnd long from a table
	move	*a8+,a4,L
	move	*a4+,a0			;apxhTable entries
	subk	1,a0
	callr	RNDRNG0
	sll	5,a0			;*32
	add	a0,a4
	move	*a4,a0,L
	move	a0,*a13(animsv),L
	jruc	anslp

asSVL					;>Set value to long
	move	*a8+,a0,L
	move	a0,*a13(animsv),L
	jruc	anslp

asBXY					;0AddH # to BaseXY
	move	*a8+,a0,L
	move	*a13(animsbx),a1,L
	addxy	a0,a1
	move	a1,*a13(animsbx),L
	jruc	anslp

asTXTR					;>Print rnd text from table
	move	*a8+,a4,L
	move	*a4+,a0			;apxhTable entries
	subk	1,a0
	callr	RNDRNG0
	sll	5,a0			;*32
	add	a0,a4
	move	*a4,a0,L
	jruc	astxt5

asTXT					;>Print text
	move	*a8+,a0,L
astxt5
	jruc	anslp


asTXTK					;>Kill text
	PUSHP	a8
	callr	ERASE_TXT
	PULLP	a8
	jruc	anslp


asEND	SLEEPK	1			;>Wait on FRANIMs before exit
	move	*a13(animsfnum),a1
	jrnz	asEND
	DIE

	.endif



	STRUCTPD
	APTR	anfc_p		;*AnimScrpt process that made me, set by AS
	APTR	anfl		;*Franim list


 SUBRP	anims_franim		;A9=*FRAN list, A10=OID, A11=# Loops

	move	@OBJLST,a8,L		;0FHind object
anf100	move	*a8(OID),a0
	cmp	a10,a0
	jreq	anf300
	move	*a8,a8,L
	jrnz	anf100
	jruc	anf700			;No match!

anf300	move	a9,*a13(anfl),L
anf340	JSRP	FRANIMQ
	move	*a13(anfl),a9,L		;Go to 1st
	move	a11,a11
	jrn	anf340			;-=Infinite
	dsj	a11,anf340

anf700	move	a11,a11
	jrn	anf800
	move	*a13(anfc_p),a0,L	;Get *Creator
	move	*a0(animsfnum),a2	;apxhFrans-1
	subk	1,a2
	move	a2,*a0(animsfnum)
anf800	DIE




 SUBR	anim_wait

anw10	SLEEPK	3
	move	@animscnt,a1
	jrgt	anw10
	RETP

	.if 0


 SUBR	anim_kilslp

	SLEEP	50
	callr	anim_killall
	DIE


 SUBR	anim_killall

	clr	a0
	move	a0,@animscnt

	movi	ANIMPID,a0	;>Kill processes
	movi	03ffH,a1
	calla	KILALLN

	movi	CLSANIM,a0	;0DeHlete objs
	movi	03ffH,a1
	jauc	obj_delc

	.endif



 SUBRP	obj_find

	andn	a2,a1
of20	move	*a0(OID),a3
	andn	a2,a3		;Remove bits
	cmp	a1,a3
	jreq	of50
	move	*a0,a0,L
	jrnz	of20
of50	move	a0,a0		;A0=*Obj or 0
	rets			;Pass CC







 SUBR	autoerase_set

	pushst
	dint
	callr	dma_wait		;Wait on dma

	clr	a0
	move	a0,@DMACMAP
	movi	ERASECOL,a0		;Color pair
	movi	510*512*8,a1		;Store to last 2 lines of bitmap
	movi	512*8*2/16,b0
ivxllp	move	a0,*a1+
	dsj	b0,ivxllp

	popst

	rets



FLASHME

	move	*a8(OCONST),a0
	jrnz	rkoux			;Flashing?

	move	a9,*a8(OCONST)
	setf	4,0,0
	movk	M_CONNON,a0		;Replace non-zero data with constant
	move	a0,*a8(OCTRL)		;Write 4 low bits
	setf	16,1,0

	SLEEPK	2

	clr	a0
	move	a0,*a8(OCONST)		;Clr color

	setf	4,0,0
	movk	M_WRNONZ,a0
	move	a0,*a8(OCTRL)		;Write 4 low bits
	setf	16,1,0

rkoux	DIE

 .if 0

FLASHME
	move	*a8(OCONST),a10
	jrnz	gsvcx			;Flashing?
	srl	16,a9
	move	a9,*a8(OCONST)		;Set color
	move	*a8(OCTRL),a0
	movk	8,a1
	or	a1,a0			;Set constant
	move	a0,*a8(OCTRL)
	SLEEPK	2
	clr	a0
	move	a0,*a8(OCONST)		;Clr color
	move	*a8(OCTRL),a0
	andi	0fff5H,a0		;Clr constant & nonzero
	addk	2,a0			;Set nonzero
	move	a0,*a8(OCTRL)
gsvcx	DIE
 .endif


COLCYC	
	SLEEPK	4
	MOVE	A8,A0
	calla	pal_find
	JRZ	COLCYC		;WAIT TILL IT SHOWS UP FOLKS...

	CLR	A1		;GET THE COLORS INTO RAM
	MOVX	A10,A1		;GET END COLOR
	SRL	16,A10		;ADJUST START COLOR
	SUB	A10,A1		;GET COUNT
	MOVE	A1,*A13(PDATA)	;SAVE COUNT
	MOVE	A1,A4
	SLL	4,A1		;COUNT IN WORDS
	MOVE	A10,A5
	SLL	4,A5		;OFFSET INTO PALETTE
	ADD	A8,A5
	ADDK	16,A5		;SKIP PALETTE WORD COUNT
	MOVE	A9,A3
	MOVE	A9,A6
	ADD	A1,A6
	MOVE	A6,A8

COLCYC1	MOVE	*A5+,A7		;TRANSFER IT TWICE
	MOVE	A7,*A3+
	MOVE	A7,*A6+
	DSJS	A4,COLCYC1

	SRL	8,A0
	SLL	8,A0
	ADD	A0,A10			;COLRAM DESTINATION

COLCYCB
	MOVE	A8,*A13(PDATA+020H),L	;SAVE RAM ADDRESS
COLCYCBL
	MOVE	A8,A0			;GET SOURCE ADDRESS
	MOVE	A10,A1			;GET DESTINATION CONSTANT
	MOVE	*A13(PDATA),A2,W	;GET COUNT
	calla	pal_set
	SUBK	16,A8
	CMP	A8,A9
	JRLO	CCYCBSLP
	MOVE	*A13(PDATA+020H),A8,L	;GET SOURCE TABLE START
CCYCBSLP
	MOVE	A11,A0		;GET SLEEP TIME
	CALLA	PRCSLP
	JRUC	COLCYCBL



CYC0	SLEEP	60

CYCLE_TABLE
	MOVE	A9,A0			;PAL NAME TO CYCLE
	calla	pal_find
	jrz	CYC0

	SUBI	32,A14
	MOVE	*A14,A1,L
	PUSHP	A14,A1

	SRL	8,A0
	SLL	8,A0
	MOVY	A8,A1
	SRL	16,A1			;A1=COLOR # TO START WITH
	MOVE	A8,*A13(PDATA)		;PDATA WILL HAVE # TO CYCLE (CNT)
	MOVE	*A10,A2,W
	MOVE	A2,*A13(PDATA+16)	;VALUE IN TABLE TO STOP AT
	MOVE	A0,A8			;A8=[PAL #,0]
	ADD	A1,A8			;A8=[PAL #,COLOR TO START AT]
	MOVE	A10,A9			;A10=ROM TABLE TO CYCLE WITH
wamlloop	
	PULLP	A1,A14
	PUSHP	A1,A14
	MOVE	*A1,A0,L
	CMP	A0,A14
	JRNE	KILL_US
	move	a8,a1
	MOVE	A9,A0			;A0=TABLE POSITION
	MOVE	*A13(PDATA),A2		;A2=COLOR COUNT
	calla	pal_set			;do the transfer
	MOVE	A11,A0
	CALLA	PRCSLP
	ADDK	010H,A9
	MOVE	*A9,A0
	JRN	RESTUFF
	MOVE	*A13(PDATA+16),A1	;PDATA+16=ENTRY WE STOP AT
	CMP	A0,A1
	jrne	wamlloop
RESTUFF	MOVE	A10,A9			;REACHED END OF TABLE, RESTUFF
	jruc	wamlloop
KILL_US
	DIE



HEXTOASC
	PUSH	a1,a2,a9
	clr	a1
	move	a1,-*sp			;Push the null terminator
	movk	10,a1			;Divisor for decimal
	move	a8,a9
hexta1	movk	3,a2			;Comma count
hexta2	clr	a8
	divu	a1,a8
	addi	'0',a9			;Make the remainder ascii
	move	a9,-*sp			;Save here
	move	a8,a9
	jrz	hexta3			;Done?
	dsj	a2,hexta2
	movi	',',a2
	move	a2,-*sp			;Stuff a comma
	jruc	hexta1

hexta3	movi	STRNGRAM,a1		;Store here for blow out
	move	a1,a8
hexta4	move	*sp+,a9
	movb	a9,*a1
	addk	8,a1
	move	a9,a9
	jrnz	hexta4

	PULL	a1,a2,a9
	rets



 SUBR	ERASE_TXT

	movi	CLSNEUT|TYPTEXT|SUBTXT,a0
	jauc	obj_del1c



STRLNRM
	mmtm	a12,a1,a2,a3,a4,a6,a14
	movi	DMACNZ|M_NOCOLL,a4
	clr	a14
	jruc	stringr1

STRCNRM
	mmtm	a12,a1,a2,a3,a4,a6,a14
	movi	DMACNZ|M_NOCOLL,a4
	movk	1,a14
	jruc	stringr1
 SUBR	STRCNRM_1
	mmtm	a12,a1,a2,a3,a4,a6,a14
	movi	DMAWNZ|M_NOCOLL,a4
	movk	1,a14
	move	a6,a5
	jruc	stringr1_1

STRRNRM
	mmtm	a12,a1,a2,a3,a4,a6,a14
	movi	DMACNZ|M_NOCOLL,a4
	movk	2,a14
	jruc	stringr1



STRLNRMO
	mmtm	a12,a1,a2,a3,a4,a6,a14
	movi	DMACNZ|M_NOCOLL,a4
	movi	010000H,a14
	jruc	stringr1

STRCNRMO
	mmtm	a12,a1,a2,a3,a4,a6,a14
	movi	DMACNZ|M_NOCOLL,a4
	movi	010001H,a14
	jruc	stringr1

STRCNRMO_1
	mmtm	a12,a1,a2,a3,a4,a6,a14
	movi	DMAWNZ|M_NOCOLL,a4
	movi	010001H,a14
	move	a6,a5
	jruc	stringr1_1

STRCNRMO_2
	mmtm	a12,a1,a2,a3,a4,a6,a14
	movi	DMACNZ|M_NOCOLL,a4
	movi	010001H,a14
	move	a6,a5
	jruc	stringr1_1

 SUBR	STRLNRMO_1
	mmtm	a12,a1,a2,a3,a4,a6,a14
	movi	DMAWNZ|M_NOCOLL,a4
	movi	010000H,a14
	move	a6,a5
	jruc	stringr1_1

STRINGER
	mmtm	a12,a1,a2,a3,a4,a6,a14
stringr1
	move	a6,a5
	sll	16,a5			;Setup constant color in fixed palette
stringr1_1

	clr	a7
	movx	a14,a7
	subk	1,a7
	jrn	strr10			;Normal left justify
	jrz	strrc

	callr	STRNGLEN		;Right justify
	jruc	strra

strrc	callr	STRNGLEN		;Center justify
	srl	1,a7			;STRNGLEN/2

strra	subxy	a7,a9			;Adjust string starting position
	jruc	strr10			;Start loop


strr1	addk	5,a9			;Add a space
strr5	addxy	a10,a9			;Add spacing

strr10	movb	*a8,a1			;Get a character
	jrle	strrx			;Done?
	addk	8,a8			;Next byte

	subk	32,a1
	jrle	strr1			;Space?

					;Save sleep time
strr20	PUSH	a0

	subk	1,a1			;0CaHlc table offset
	sll	5,a1			;*32
	add	a11,a1
	move	*a1,a1,L		;Get * image header
	move	*a1(ICTRL),a3

	PUSH	a1,a14
	
	btst	16,a14
	jrz	strrdma			;Only do DMA?

	move	a1,a2

	calla	GETOBJ			;Create the character as an object
	jrz	strrdun			;No object?

	move	a2,*a0(OIMG),L
	move	*a2(ISAG),*a0(OSAG),L
	move	a4,*a0(OFLAGS)		;FIX!!!!!
	move	a5,*a0(OPAL),L		;&CONST
	movi	01000100h,a1
	move	a1,*a0(OSCALE),L


	move	a4,a1
	andi	0803fH,a1		;Kill mode bits
	or	a1,a3
	move	a3,*a0(OCTRL),L		;&OFSET

	movi	CLSNEUT|TYPTEXT|SUBTXT,a14
	move	a14,*a0(OID)

	move	@LOWZ,a14
	addi	20000,a14
	move	a14,*a0(OZPOS)

	clr	a2
	move	a2,*a0(OXVEL),L
	move	a2,*a0(OYVEL),L
	move	a2,*a0(OZVEL),L
	move	a2,*a0(ODOFF),L

	movy	a9,a2			;Y
	move	a9,a3
	sll	16,a3			;X
	calla	GANISAG

	move	@WRLD,a2
	jrnz	strr100
	calla	obj_addworldxy		;Put us in the world

strr100	calla	INSOBJ
	jruc	strrdun


strrdma	PUSH	a3			;>Simple DMA
	move	*a1,a2,L		;ISIZE
	move	*a1(ISAG),a3,L		;Get top left sag
	calla	GANIOF
	move	a5,a1			;Constant:Palette
	PULL	a5
	PUSH	a4
	andi	0803fH,a4
	or	a4,a5			;Offset:Control
	move	a3,a4			;SAG

	move	a9,a3			;A3=Y:X
	srl	16,a6
	movx	a6,a7
	subxy	a7,a3			;Sub anioffset

	calla	QDMAN
	PULL	a4
	move	a1,a5

strrdun	PULL	a1,a14

	move	*a1,a1			;Get ISIZEX
	addxy	a1,a9			;Add X size
	move	*sp+,a0,L
	jrz	strr5			;No sleep?

	mmtm	a12,a0,a4,a5,a14
	calla	PRCSLP
	mmfm	a12,a0,a4,a5,a14
	jruc	strr5

strrx	clr	a1
	move	a1,@LOWZ
	addk	8,a8			;Next byte
	mmfm	a12,a1,a2,a3,a4,a6,a14
	RETP


STRNGLEN
	PUSH	a8,a14
	clr	a7		;A7=Length
	jruc	stl60

stl10	addk	8,a8		;Point to next
	subk	32,a14
	jrgt	stl20		;Good char?
	addk	5,a7		;Hard code a space
	jruc	stl40

stl20	subk	1,a14
	sll	5,a14		;*32
	add	a11,a14		;A14=*Correct character header
	move	*a14,a14,L
	move	*a14,a14	;Get ISIZEX

	addxy	a14,a7		;Add char length
stl40	addxy	a10,a7		;Add space length
stl60	movb	*a8,a14
	jrgt	stl10		;Next character?

	PULL	a8,a14
	zext	a7
	rets



OBJOFF
	PUSH	A4
	MOVE	*A0(OCTRL),A4
	SRL	4,A4
	SLL	4,A4
	MOVE	A4,*A0(OCTRL)
	move	*sp+,a4,L
	RETS

OBJON
	PUSH	A4
	MOVE	*A0(OCTRL),A4
	SRL	4,A4
	SLL	4,A4
	ADDK	2,A4
	MOVE	A4,*A0(OCTRL)
	move	*sp+,a4,L
	RETS

	




 SUBR	GETCPNT

	move	*a8(OYVAL),a1,L
	move	*a8(OXPOS),a0
	movx	a0,a1
	move	*a8(OSIZE),a0,L
	srl	1,a0			;/2
	andi	07fff7fffH,a0		;Clr bit 15
	addxy	a1,a0
	rets



GETANIX
	MMTM	SP,A1,A2
	MOVE	*A8(OIMG),A1,L
	MOVE	*A1(IANIOFF),A2
	MOVE	*A8(OCTRL),A0
	BTST	B_FLIPH,A0
	JRZ	GETAX1
	MOVE	*A1,A0		;ISIZEX
	SUB	A2,A0
	DEC	A0
	MOVE	A0,A2
GETAX1	MOVE	*A8(OXPOS),A0
	ADD	A2,A0
	MMFM	SP,A1,A2
	RETS




 SUBR	RNDRNGS

	move	a0,a1
	neg	a0



 SUBR	RNDRNG

	sub	a0,a1		;Normalize the range
	addk	1,a1
	move	a0,b0

	move	@RAND,a0,L
	rl	a0,a0
	move	@HCOUNT,a14
	rl	a14,a0
	add	sp,a0
	move	a0,@RAND,L

	mpyu	a1,a0
	move	b0,a1
	add	a1,a0
	rets



 SUBR	RNDRNG0

	move	@RAND,a1,L
	rl	a1,a1
	move	@HCOUNT,a14
	rl	a14,a1
	add	sp,a1
	move	a1,@RAND,L

	addk	1,a0
	mpyu	a1,a0		;Condition codes not valid!

	rets



 SUBR	RNDPER

	move	@RAND,a1,L
	rl	a1,a1
	move	@HCOUNT,a14
	rl	a14,a1
	add	sp,a1
	move	a1,@RAND,L

	move	a0,a14
	movi	1000,a0
	mpyu	a1,a0		;0-999
	cmp	a0,a14
	rets


FILLAREA
	PUSH	a0,a1,a2,a4,a5,a14
	jruc	areacon
BLNKAREA
	PUSH	a0,a1,a2,a4,a5,a14
	clr	a1			;constant 0:palette 0
areacon
	move	a4,a2
	movi	IROM,a4			;Somewhere in image rom
	movi	DMACAL,a5
	calla	QDMAN
	PULL	a0,a1,a2,a4,a5,a14
	rets



 SUBR	dirq_wait

	move	@dirqtimer,a0
dirqwlp	move	@dirqtimer,a1
	cmp	a0,a1
	jreq	dirqwlp
	rets



 SUBRP	dma_wait

dwlp	move	@DMACTRL,b0
	jrn	dwlp		;Busy?
	rets



 SUBR	dmaq_wait

	move	@DISPLAYON,a1
	clr	a0
	move	a0,@DISPLAYON		;Display off

	move	@DMACTRL,b0
	jrnn	dqw20
dqw10	move	b13,b13
	jrge	dqw10
dqw20	callr	dma_wait
	move	a1,@DISPLAYON

	rets



 SUBR	dpageflip_off

	clr	a0
	move	a0,@dpageflip
	not	a0
	move	a0,@dpage
	movi	-4,a0			;Page0
	move	a0,@DPYSTRT

	rets


 SUBRP	display_blank
	dint
dzavlp	move	@VCOUNT,a0
	cmpi	EOSINT,a0
	jrlt	dzavlp
	move	@HSBLNK,a0	;Blank screen
	move	a0,@HEBLNK
	eint

	rets


 SUBRP	display_unblank

	dint
mzqylp	move	@VCOUNT,a0
	cmpi	EOSINT,a0
	jrlt	mzqylp
	movi	HEBLNKINIT,a0
	move	a0,@HEBLNK
	eint

	rets


CRINIT
	MMTM	SP,A0,A1,A2,A6
	MOVI	COLRAM,A1
	CLR	A0
	MOVI	10000H,A6,L
CRINIT1
	MOVE	A0,*A1+,L	;STUFF TWO WORDS AT A TIME
	DSJS	A6,CRINIT1

	MMFM	SP,A0,A1,A2,A6
	RETS

CRLOAD
	MMTM	SP,A0,A1,A2
CRLOAD1
	MOVE	*A1+,A0,W	;GRAB FIRST COLOR FROM THIS TABLE
	JRN	CRLOAD4		;BR = NULL PALETTE
CRLOAD3
	MOVE	A0,*A2,W	;STUFF COLOR
	MOVE	*A1+,A0,W	;GRAB NEXT COLOR FROM THIS TABLE
	JRN	CRLOAD4		;BR = NEXT PALETTE
	ADDK	16,A2		;INC THIS WAY SO WE DON'T OVERRUN PALETTES
	JRUC	CRLOAD3

CRLOAD4
	ADDI	1000H,A2	;NEXT PALETTE
	SRL	12,A2
	SLL	12,A2		;MASK OFF LOW BULLSHIT
	DSJ	A6,CRLOAD1

	MMFM	SP,A0,A1,A2
	RETS



SCRCLR	CLR	A0

	MMTM	SP,A1,A2
	CLR	A1
	MOVE	A1,@CMAPSEL			;SELECT COLOR MAP 0
	MOVI	SCREEN,A1
	MOVI	(SCRNE-SCREEN)/32,A2
SCRLP	MOVE	A0,*A1+,L
	DSJS	A2,SCRLP

	MMFM	SP,A1,A2
	RETS




 SUBR	CLR_SCRN

	mmtm	sp,a1,a2,a3
	move	@DISPLAYON,a3
	callr	dmaq_wait			;wait on dma
	clr	a0
	move	a0,@CMAPSEL			;Select color map 0
	movi	SCREEN,a1,L
	movi	((SCRNE-2000H)-SCREEN)/32,a2,L
clrlp	move	a0,*a1+,L
	dsjs	a2,clrlp
	move	a3,@DISPLAYON
	mmfm	sp,a1,a2,a3
	rets




FRANIM
	PUSHP	a3,a4

	cmpi	ROM,a9			;Check for bogus script pointer
	jrlo	franerr

	move	a1,a3			;A3=Mode

franl	move	*a9+,a1,L
	jrz	frannd			;End?

	move	*a8(OCTRL),a4		;Current flags
	move	*a9+,a0			;Sleep time
	cmpi	0100H,a0
	jrlo	fran2			;Just sleep?
	
	PUSH	a1,a2,a7

	btst	BFLIPBIT,a0
	jrz	frannobi		;No flip?
	move	*a9+,a2			;Get the new flip flags
	andni	(M_FLIPV|M_FLIPH),a4	;Clear the current flip status
	or	a2,a4			;Set flag bits

frannobi
	btst	BNEWPAL,a0
	jrz	frannopa		;No pal?

	move	a0,a7
	move	*a9+,a0,L		;Get *pal
	calla	pal_getf
	jrz	fran10			;No palette available?
	move	a0,*a8(OPAL)		;Store new palette
fran10
	move	a7,a0
frannopa
	PULL	a1,a2,a7
	sll	32-8,a0			;Kill special bits
	srl	32-8,a0

fran2
	calla	ANI			;Setup new animation

	cmpi	4,a3
	jreq	fran3			;One frame, no sleep?

	move	a3,-*a12
	calla	PRCSLP			;Sleep
	move	*a12+,a3
	jrnz	franl			;Loop til end of list?

fran3
	PULLP	a3,a4
	clrc				;Clear end flag
	RETP

frannd
	PULLP	a3,a4
	setc				;Return with end flag set
	RETP


franerr
	.if	DEBUG
	LOCKUP
	eint
	.else
	CALLERR	8,0			;Bad franim list
	.endif
	jruc	frannd




FRANIMQ

	cmpi	ROM,a9
	jrhs	frq80			;Franim list OK?

	.if	DEBUG
	LOCKUP
	eint
	.else
	CALLERR	8,0			;Bad franim list
	.endif
	jruc	tjwex


tjwelp	move	*a8(OCTRL),a4		;Current flags
	move	*a9+,a0			;Sleep time
	cmpi	0100H,a0
	jrlo	frq70			;No special bits?
	
	btst	BFLIPBIT,a0		;New flip?
	jrz	frq40
	move	*a9+,a2			;Get the new flip flags
	andni	(M_FLIPV|M_FLIPH),a4	;Clear the current flip status
	or	a2,a4			;Set desired bits

frq40	btst	BNEWPAL,a0		;New palette ?
	jrz	frq60

	move	a0,a2
	move	a1,a3
	move	*a9+,a0,L		;Get the palette address
	calla	pal_getf		;Get a color map assignment
	jrz	frq50			;No palette available?
	move	a0,*a8(OPAL)		;Set new palette
frq50	move	a2,a0
	move	a3,a1

frq60	btst	BDELTAY,a0
	jrz	frq65
	move	*a9+,a2			;Get DY
	move	*a8(OYPOS),a3
	add	a2,a3
	move	a3,*a8(OYPOS)

frq65	sll	32-8,a0			;Kill special bits
	srl	32-8,a0

frq70	calla	ANI
	calla	PRCSLP			;Sleep

frq80	move	*a9+,a1,L		;Get frame
	jrnz	tjwelp

tjwex	RETP




OFF	.equ	07db0H
SEC	.equ	01b14030H-OFF
FAKEO	.equ	-0b00030H+OFF

 SUBR	security_chk

	PUSH	a2,a3,a4
	clr	a0
	movi	63,a3
hsmclp	move	a3,a14
	callr	hsmcsc
	or	a2,a0
	subk	1,a3
	jrge	hsmclp
	PULL	a2,a3,a4
	rets

hsmcsc
	movi	SEC+FAKEO,a1
	sll	15-5,a14
	add	a14,a1		;Add a bogus offset
	subi	FAKEO,a1
	move	a14,*a1(OFF)	;Write 1 of 64 to sec
	sub	a14,a1		;Sub offset so we read a different address
	move	*a1(OFF),a2	;Read 1st sec value
	sll	32-15,a2
	srl	32-6,a2
	sll	9,a2		;Move to bits 9-14
	xor	a14,a2
	sll	32-15,a2	;Remove top bits
	jrnz	hsmcx		;Bad value?

	add	a14,a1
	srl	2+3,a14
	add	a14,a1
	pushst
	setf	6,0,0
	move	*a1(OFF+9),a2	;Read 2nd sec value
	move	a2,b1
	sll	24,b1
	getpc	a4
	addi	hsmcsec_t-$,a4,W
	add	a4,a14
	move	*a1(OFF+019H),a2	;Read 3rd sec value
	move	a2,b0
	sll	16,b0
	or	b0,b1
	move	*a1(OFF+029H),a2	;Read 4th sec value
	move	a2,b0
	sll	8,b0
	or	b0,b1
	move	*a1(OFF+039H),a2	;Read 5th sec value
	move	a2,b0
	or	b0,b1
	popst
	move	*a14+,a2,L
	move	b1,a1
	andi	03f3f3f3fH,a1
	xor	a1,a2		;A2=0 if OK

hsmcx	rets


hsmcsec_t	.long	021283b3bH	;0
	.long	02439383bH
	.long	031283b3bH
	.long	0302b3938H
	.long	031283b3bH
	.long	0302b3938H
	.long	0232f2f2fH
	.long	026383b3bH
	.long	021283b3bH	;20
	.long	02439383bH
	.long	0312a1224H
	.long	0302b1120H
	.long	0312a1224H
	.long	0302b1120H
	.long	0232d283bH
	.long	026383b3bH
	.long	02b3b3b3bH	;40
	.long	02e2e2e2eH
	.long	039383b1bH
	.long	0383b3b1bH
	.long	03b3b3b1bH
	.long	03a3a3a1aH
	.long	02b3b3b3bH
	.long	02e2e2e2eH
	.long	02b39383bH	;60
	.long	02e2e2e2eH
	.long	0393a1a18H
	.long	0383b1b1bH
	.long	03b3b1b1bH
	.long	03a3a1a18H
	.long	02b39383bH
	.long	02e2e2e2eH
	.long	001202b3bH	;80
	.long	00431283bH
	.long	011202b3bH
	.long	01021283bH
	.long	011202b3bH
	.long	01021283bH
	.long	003273b3bH
	.long	006302b39H
	.long	009302b39H	;A0
	.long	00c232f2fH
	.long	019322e06H
	.long	018312a12H
	.long	019322e06H
	.long	018312a12H
	.long	00b31283bH
	.long	00e26383bH
	.long	003273b3bH	;C0
	.long	006302b39H
	.long	011202b3bH
	.long	01021283bH
	.long	013273938H
	.long	012243938H
	.long	003273b3bH
	.long	006302b39H
	.long	00b31283bH	;E0
	.long	00e26383bH
	.long	019322e06H
	.long	018312a12H
	.long	01b332f05H
	.long	01a302b11H
	.long	00b31283bH
	.long	00e26383bH
	.def	secend
secend



	BSSX	znvhSHK_ON,16		;is a shake in progress?
	BSSX	znvhX_ADJ,32		;current deviation from rest

 SUBR	HORZ_SHAKER2

	;check for a valid a10
	move	a10,a10
	jrn	znvhdone
	jrz	znvhdone

	move	@znvhSHK_ON,a0
	jrz	znvhno_shake

	;abort shake currently in progress
	movi	HZSHAKE_PID,a0
	calla	KIL1C
	move	@znvhX_ADJ,a14
	move	@WORLDTLX,a0,L
	sub	a14,a0
	move	a0,@WORLDTLX,L

znvhno_shake
	;set the 'in progress' flag
	movk	1,a14
	move	a14,@znvhSHK_ON

	;create the shaker process
	CREATE	HZSHAKE_PID,znvhshaker

znvhdone
	rets

znvhshaker
	;a9  = index into sine table
	;a10 = time left
	;a11 = original time left

	;initialize
	movi	znvhlast_entry,a9
	move	a10,a11

znvhloop
	;calculate the new offset

	;get the cosine
	move	a9,a14
	X16	a14
	addi	znvhsine_table,a14
	move	*a14,a0,W

	;get the exp (index is 64 - (64 * a10 / a11)
	move	a10,a1
	X64	a1
	divu	a11,a1
	neg	a1
	addi	64,a1
	X16	a1
	addi	znvhexp_table,a1
	move	*a1,a1,W

	;multiply
	mpys	a0,a1

	;scale
	sra	5,a1
	mpyu	a11,a1

	move	a1,@znvhX_ADJ,L

	;update the table pointer
	dsj	a9,znvhtable_ok
	movi	znvhlast_entry,a9
znvhtable_ok

	;apply it
	move	@WORLDTLX,a14,L
	add	a14,a1
	move	a1,@WORLDTLX,L

	;nap
	SLEEPK	1

	;undo it
	move	@znvhX_ADJ,a14,L
	move	@WORLDTLX,a1,L
	sub	a14,a1
	move	a1,@WORLDTLX,L

	;loop
	dsj	a10,znvhloop

	;all done
	clr	a14
	move	a14,@znvhSHK_ON
	move	a14,@znvhX_ADJ
	DIE

znvhsine_table			;deg
	.word	-601		;324
	.word	-973		;288
	.word	-973		;252
	.word	-601		;216
	.word	0		;180
	.word	602		;144
	.word	974		;108
	.word	974		;72
	.word	602		;36
	.word	0		;0
znvhlast_entry	equ	9

	;values of e^(-x) for values from 0 to 7, in 64 divisions
	; e.g. e^-1.5 is the 32nd entry
	; all values are multiplied by 1024
znvhexp_table		;damps at speed 5
	.word 1024,945,873,807,745,688,636,587
	.word 542,501,463,427,395,364,337,311
	.word 287,265,245,226,209,193,178,165
	.word 152,140,130,120,110,102,94,87
	.word 80,74,68,63,58,54,50,46
	.word 42,39,36,33,31,28,26,24
	.word 22,20,19,17,16,15,14,13
	.word 12,11,10,9,8,8,7,6


	BSSX	wcoxSHK_ON,16		;is a shake in progress?
	BSSX	wcoxY_ADJ,32		;current deviation from rest

 SUBR	SHAKER2

	;check for a valid a10
	move	a10,a10
	jrn	wcoxdone
	jrz	wcoxdone

	move	@wcoxSHK_ON,a0
	jrz	wcoxno_shake

	;abort shake currently in progress
	movi	SHAKE_PID,a0
	calla	KIL1C
	move	@wcoxY_ADJ,a14
	move	@WORLDTLY,a0,L
	sub	a14,a0
	move	a0,@WORLDTLY,L

wcoxno_shake
	;set the 'in progress' flag
	movk	1,a14
	move	a14,@wcoxSHK_ON

	;create the shaker process
	CREATE	SHAKE_PID,wcoxshaker

wcoxdone
	rets

wcoxshaker
	;a9  = index into sine table
	;a10 = time left
	;a11 = original time left

	;initialize
	movi	wcoxlast_entry,a9
	move	a10,a11

wcoxloop
	;calculate the new offset

	;get the cosine
	move	a9,a14
	X16	a14
	addi	wcoxsine_table,a14
	move	*a14,a0,W

	;get the exp (index is 64 - (64 * a10 / a11)
	move	a10,a1
	X64	a1
	divu	a11,a1
	neg	a1
	addi	64,a1
	X16	a1
	addi	wcoxexp_table,a1
	move	*a1,a1,W

	;multiply
	mpys	a0,a1

	;scale
	sra	5,a1
	mpyu	a11,a1

	move	a1,@wcoxY_ADJ,L

	;update the table pointer
	dsj	a9,wcoxtable_ok
	movi	wcoxlast_entry,a9
wcoxtable_ok

	;apply it
	move	@WORLDTLY,a14,L
	add	a14,a1
	move	a1,@WORLDTLY,L

	;nap
	SLEEPK	1

	;undo it
	move	@wcoxY_ADJ,a14,L
	move	@WORLDTLY,a1,L
	sub	a14,a1
	move	a1,@WORLDTLY,L

	;loop
	dsj	a10,wcoxloop

	;all done
	clr	a14
	move	a14,@wcoxSHK_ON
	move	a14,@wcoxY_ADJ
	DIE

	;45-degree increments

	;36-degree increments
wcoxcosine_table			;deg
	.word	828		;324
	.word	316		;288
	.word	-315		;252
	.word	-827		;216
	.word	-102		;180
	.word	-827		;144
	.word	-315		;108
	.word	316		;72
	.word	828		;36
	.word	1024		;0
	
wcoxsine_table			;deg
	.word	-601		;324
	.word	-973		;288
	.word	-973		;252
	.word	-601		;216
	.word	0		;180
	.word	602		;144
	.word	974		;108
	.word	974		;72
	.word	602		;36
	.word	0		;0
wcoxlast_entry	equ	9

	;30-degree increments

	;values of e^(-x) for values from 0 to 7, in 64 divisions
	; e.g. e^-1.5 is the 32nd entry
	; all values are multiplied by 1024


wcoxexp_table		;damps at speed 5
	.word 1024,945,873,807,745,688,636,587
	.word 542,501,463,427,395,364,337,311
	.word 287,265,245,226,209,193,178,165
	.word 152,140,130,120,110,102,94,87
	.word 80,74,68,63,58,54,50,46
	.word 42,39,36,33,31,28,26,24
	.word 22,20,19,17,16,15,14,13
	.word 12,11,10,9,8,8,7,6




	.BSS	AMP,16
	.BSS	AMPCNT,16
	.BSS	XSET,16
	.BSS	YSET,16
	.BSS	SHK_ON,16

 SUBR	SHAKER

	move	@SHK_ON,a0
	jrnz	wcoxx
	move	a10,a11
	movk	2,a0
	move	a0,@SHK_ON
	divs	a0,a11
	movk	6,a0
	move	a0,@AMP
	move	a11,@AMPCNT
	
	CREATE0	shakelp
wcoxx	RETS
	

shakelp
 .if 0
	move	@AMP,a0
	calla	RNDRNG0
	move	a0,@XSET
	move	@AMP,a0
	calla	RNDRNG0
	move	a0,@YSET
	move	@HCOUNT,a14
	btst	0,a14
	jrz	wcoxshakey

	move	@XSET,a1
	move	@WORLDTLX,a0,L
	sll	16,a1
	add	a1,a0
	move	a0,@WORLDTLX,L
	SLEEPK	1
	move	@XSET,a1
	move	@WORLDTLX,a0,L
	sll	16,a1
	sub	a1,a0
	move	a0,@WORLDTLX,L
	jruc	shakelp
 .endif

wcoxshakey
	move	@AMP,a0
	calla	RNDRNG0
	move	a0,@YSET

	move	@YSET,a1
	move	@WORLDTLY,a0,L
	sll	16,a1
	add	a1,a0
	move	a0,@WORLDTLY,L
	SLEEPK	1
	move	@YSET,a1
	move	@WORLDTLY,a0,L
	sll	16,a1
	sub	a1,a0
	move	a0,@WORLDTLY,L
	move	@AMPCNT,a2
	dec	a2
	move	a2,@AMPCNT
	jrnz	wcoxampok
	move	a11,@AMPCNT
	move	@AMP,a0
	cmpi	1,a0
	jrz	wcoxampok
	dec	a0
	move	a0,@AMP
wcoxampok
	dsj	a10,shakelp
	move	a10,@SHK_ON

	DIE


 SUBR	get_all_starts_cur

	clr	a1

	move	@PSTATUS2,a2

	btst	0,a2
	jrz	muibno_player1
	clr	a0			;player 1
	calla	get_start_cur
	or	a0,a1
muibno_player1

	btst	1,a2
	jrz	muibno_player2
	movk	1,a0			;player 2
	calla	get_start_cur
	or	a0,a1
muibno_player2

	move	a1,a0
	rets


 SUBR	get_all_starts_down

	clr	a1

	move	@PSTATUS2,a2

	btst	0,a2
	jrz	zeojno_player1
	clr	a0			;player 1
	calla	get_start_down
	or	a0,a1
zeojno_player1

	btst	1,a2
	jrz	zeojno_player2
	movk	1,a0			;player 2
	calla	get_start_down
	or	a0,a1
zeojno_player2

	move	a1,a0
	rets


 SUBR	get_start_cur

	sll	4,a0			;x 16 bits
	addi	start_offs,a0
	move	*a0,a0
	addi	switches_cur,a0
	move	*a0,a0
	andi	1,a0
	rets


 SUBR	get_start_down

	sll	4,a0			;x 16 bits
	addi	start_offs,a0
	move	*a0,a0
	addi	switches_down,a0
	move	*a0,a0
	andi	1,a0
	rets


start_offs	.word	12h,15h


  SUBR	get_all_sticks_cur

	clr	a1

	move	@PSTATUS2,a2

	btst	0,a2
	jrz	cmgyno_player1
	clr	a0			;player 1
	calla	get_stick_val_cur
	or	a0,a1
cmgyno_player1

	btst	1,a2
	jrz	cmgyno_player2
	movk	1,a0			;player 2
	calla	get_stick_val_cur
	or	a0,a1
cmgyno_player2

	move	a1,a0
	rets



  SUBR	get_all_sticks_cur2

	clr	a1

	clr	a0			;player 1
	calla	get_stick_val_cur
	or	a0,a1

	movk	1,a0			;player 2
	calla	get_stick_val_cur
	or	a0,a1

	move	a1,a0
	rets



  SUBR	get_all_sticks_down

	clr	a1

	move	@PSTATUS2,a2

	btst	0,a2
	jrz	xuknno_player1
	clr	a0			;player 1
	calla	get_stick_val_down
	or	a0,a1
xuknno_player1

	btst	1,a2
	jrz	xuknno_player2
	movk	1,a0			;player 2
	calla	get_stick_val_down
	or	a0,a1
xuknno_player2

	move	a1,a0
	rets



  SUBR	get_all_sticks_down2

	clr	a1

	clr	a0			;player 1
	calla	get_stick_val_down
	or	a0,a1

	movk	1,a0
	calla	get_stick_val_down	;player 2
	or	a0,a1

	move	a1,a0

	rets



  SUBR	get_all_buttons_cur

	clr	a1

	move	@PSTATUS2,a2

	btst	0,a2
	jrz	ayreno_player1
	clr	a0			;player 1
	calla	get_but_val_cur
	or	a0,a1
ayreno_player1

	btst	1,a2
	jrz	ayreno_player2
	movk	1,a0			;player 2
	calla	get_but_val_cur
	or	a0,a1
ayreno_player2

	move	a1,a0
	rets



  SUBR	get_all_buttons_cur2

	clr	a1
	clr	a0			;player 1
	calla	get_but_val_cur
	or	a0,a1
	movk	1,a0			;player 2
	calla	get_but_val_cur
	or	a0,a1
	move	a1,a0
	rets



 SUBR	get_all_buttons_down

	clr	a1

	move	@PSTATUS2,a2

	btst	0,a2
	jrz	eaxsno_player1
	clr	a0			;player 1
	calla	get_but_val_down
	or	a0,a1
eaxsno_player1

	btst	1,a2
	jrz	eaxsno_player2
	movk	1,a0			;player 2
	calla	get_but_val_down
	or	a0,a1
eaxsno_player2

	move	a1,a0
	rets



 SUBR	get_all_buttons_down2

	clr	a1
	clr	a0			;player 1
	calla	get_but_val_down
	or	a0,a1
	movk	1,a0			;player 2
	calla	get_but_val_down
	or	a0,a1
	move	a1,a0
	rets


 SUBRP	rnd

	move	@RAND,a1,L
	rl	a1,a1
	move	@HCOUNT,a14
	rl	a14,a1
	add	sp,a1
	move	a1,@RAND,L

	and	a1,a0
	rets



 SUBR	rndrng0

	move	@RAND,a1,L
	rl	a1,a1
	move	@HCOUNT,a14
	rl	a14,a1
	add	sp,a1
	move	a1,@RAND,L

	addk	1,a0
	mpyu	a1,a0		;Condition codes not valid!

	rets


	.if	DEBUG
	

 SUBR	tint_on

	PUSH	a0,a1
	movi	07fffh,a0	;all bits on (5 bits RGB (white))
	movi	COLRAM,a1	;base address of colour ram
	move	a0,*a1		;restore colour
	PULL	a0,a1
	rets


 SUBR	tint_off

	PUSH	a0,a1
	clr	a0		;all bits off (black)
	movi	8<<10+8<<5+8,a0	;grey
	movi	COLRAM,a1	;base address of colour ram
	move	a0,*a1		;restore colour
	PULL	a0,a1
	rets

	.endif



 SUBR	civanic

	move	*a8(OCTRL),a1,W

 SUBR	civani

	cmpi	ROM,a0
	jrlo	ukrtanierr

	;set new anim points
	move	*a0(IANIOFFX),*a8(ODXOFF),W
	move	*a0(IANIOFFY),*a8(ODYOFF),W

	move	a0,*a8(OIMG),L
	move	*a0(0),*a8(OSIZE),L
	move	*a0(ISAG),*a8(OSAG),L

	setf	5,0,0
	move	*a0(ICTRL+7),*a8(OCTRL+7) ;Write 5 z comp bits
	setf	6,0,0
	move	a1,*a8(OCTRL)		;Write 6 low bits
	setf	16,1,0

ukrtx	rets

ukrtanierr 
	.if	DEBUG
	LOCKUP
	eint
	.else
	CALLERR	2,2
	.endif
	jruc	ukrtx



	.end

