TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:58 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .file   "mproc.asm"
       3                            .width  132
       4                            .option b,d,l,t
       5                            .mnolist
       6                    
       7                    
       8                            .include        "gsp.equ"
       9                            .include        "sys.equ"
      10                            .include        "mproc.equ"
      11                            .include        "display.equ"
      12                            .include        "macros.h"
      13                    
      14                    
      15                    
      16                            .ref    dirqtimer
      17                            .ref    L_TIMER
      18                    
      19                    
      20                    
      21 00000000                   .bss    PRCSTR  ,NPROC*PRCSIZ   ;Process data blocks
      22                    
      23                    
      24 00038400                   .bss    SPRCSTR ,SNPROC*SPRCSIZ ;Super-process data blocks
      25                    
      26 00000000                   .sect   "FIXED"
      27 00000000 00000000  ACTIVE  .long   0
      28 00000020 00000000  FREE    .long   0
      29 00000040 00000000  SFREE   .long   0
      30                    
      31                    
      32 00000000                   .text
      33                    
      34                    
      35                    
      36 00000000            SUBR   process_init
      37                    
      38 00000000     09ed          movi    ACTIVE,a13      ;Init A13
         00000010 00000000+ 
      39 00000030     5600          clr     a0
      40 00000040     820d          move    a0,*a13,L       ;Empty list
      41                    
      42 00000050     09e1          movi    PRCSTR,a1
         00000060 00000000- 
      43 00000080     0781          move    a1,@FREE,L      ;Full free list
         00000090 00000020+ 
      44                    
      45 000000b0     09d0          movi    NPROC,b0        ;# of processes
         000000c0     0096  
      46 000000d0     4c2e  cfiulp  move    a1,a14
      47 000000e0     0b01          addi    PRCSIZ,a1
         000000f0     0600  
      48 00000100     822e          move    a1,*a14,L       ;Set link
      49 00000110     3cb0          dsj     b0,cfiulp
      50                    
      51 00000120     820e          move    a0,*a14,L       ;Null last link
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:58 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

GSP multi-processing system                                          PAGE    2

      52                    
      53                            ;initialize the super-proc list
      54 00000130     09e1          movi    SPRCSTR,a1
         00000140 00038400- 
      55 00000160     0781          move    a1,@SFREE,L
         00000170 00000040+ 
      56                    
      57 00000190     09d0          movi    SNPROC,b0       ;# of processes
         000001a0     0007  
      58 000001b0     4c2e  cfiuslp move    a1,a14
      59 000001c0     0b01          addi    SPRCSIZ,a1
         000001d0     1380  
      60 000001e0     822e          move    a1,*a14,L       ;Set link
      61 000001f0     3cb0          dsj     b0,cfiuslp
      62                    
      63 00000200     820e          move    a0,*a14,L       ;Null last link
      64                    
      65 00000210     0960          rets
      66                    
      67                    
      68                    
      69 00000220            SUBR   process_dispatch
      70                    
      71                     .if    0
      72                    
      73                            movi    31*32,a0                ;Proc usage
      74                            move    a0,@ERASELOC
      75                    
      76                    uhiydmawt       move    b13,b13
      77                            jrge    uhiydmawt
      78                            movk    6,a0                    ;DMA usage
      79                            move    a0,@ERASELOC
      80                    uhiynoline
      81                     .endif
      82                    
      83                     .if DEBUG
      84                            .ref    slowmotion
      85                            move    @slowmotion,a0
      86                    uhiysmlp        move    @dirqtimer,a1
      87                            cmp     a1,a0
      88                            jrge    uhiysmlp
      89                     .endif
      90                    
      91 00000220     09ed          movi    ACTIVE,a13              ;*Proc list
         00000230 00000000+ 
      92 00000250     5600          clr     a0
      93 00000260     0580          move    a0,@dirqtimer           ;Tell DIRQ to flip and draw
         00000270 00000000! 
      94                    
      95 00000290           uhiylp
      96                    
      97                    
      98 00000290     09e0          movi    OBJLST,a0
         000002a0 00000000! 
      99 000002c0     1821          movk    1,a1                    ;Lowest Z
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:58 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

GSP multi-processing system                                          PAGE    3

     100 000002d0     27e1          sll     31,a1                   ;Make 080000000H
     101 000002e0     5708          clr     a8
     102 000002f0     c026          jruc    yzlp
     103                    
     104                            .align
     105 00000400           yz0
     106 00000400     b446          move    *a2(OZPOS),a6           ;Get Z
         00000410     00d0  
     107 00000420     b447          move    *a2(OYPOS),a7           ;Get Y
         00000430     00b0  
     108                    
     109 00000440     4826          cmp     a1,a6
     110 00000450     c70c          jrgt    priok                   ;Next Z > Current Z?
     111 00000460     c402          jrlt    priswap
     112                    
     113 00000470     48a7          cmp     a5,a7
     114 00000480     c509          jrge    priok                   ;Next Y > Current Y?
     115                    
     116 00000490     0360  priswap dint                            ;>Make current after next
     117 000004a0     1828          movk    1,a8
     118 000004b0     8244          move    a2,*a4,L                ;Point last to next
     119 000004c0     8a40          move    *a2,*a0,L               ;Point current to block after next
     120 000004d0     8202          move    a0,*a2,L                ;Point next to current
     121 000004e0     1828          movk    1,a8
     122 000004f0     0d60          eint
     123 00000500     4c44          move    a2,a4
     124 00000510     c004          jruc    yzlp                    ;Continue sort of current obj
     125                    
     126 00000520     4c04  priok   move    a0,a4                   ;A4=*Last obj
     127 00000530     4c40          move    a2,a0                   ;A0=*Current obj
     128 00000540     4cc1          move    a6,a1                   ;A1=Current Z
     129 00000550     4ce5          move    a7,a5                   ;A5=Current Y
     130                    
     131 00000560     8602  yzlp    move    *a0,a2,L                ;A2=*Next obj
     132 00000570     cbe8          jrnz    yz0
     133                    
     134 00000580     4d08          move    a8,a8
     135 00000590     cbcf          jrnz    uhiylp
     136                    
     137 000005a0           uhiylp2
     138 000005a0     05a0          move    @dirqtimer,a0
         000005b0 00000000! 
     139 000005d0     cafc          jrz     uhiylp2                 ;Wait?
     140                    
     141 000005e0     0d5f          calla   L_TIMER                 ;Linky timer (FIX so BOG time is OK!)
         000005f0 00000000! 
     142                    
     143 00000610     c007          jruc    prcd1
     144                    
     145                    
     146 00000620           PRCSLP
     147 00000620                   PULL    a7                      ;Get *Wakeup
     148                    
     149                            .if DEBUG
     150                            cmpi    0FF800000H,a7
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:58 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

GSP multi-processing system                                          PAGE    4

     151                            jrhs    uhiypsok
     152                            LOCKUP  ;bad wake address!
     153                    uhiypsok
     154                            .endif
     155                    
     156 00000630     4da1  PRCLSP  move    a13,a1
     157 00000640     0b01          addi    PDATA,a1
         00000650     0100  
     158 00000660     0981          mmtm    a1,a7,a8,a9,a10,a11,a12 ;*Wakeup, regs, *stack
         00000670     01f8  
     159 00000680     a001          move    a0,-*a1                 ;sleep
     160                    
     161                            .if     DEBUG
     162                            move    a13,a0
     163                            cmpi    SPRCSTR,a13             ;is it a superproc?
     164                            jrge    uhiysuper_stkchk
     165                    
     166                            addi    PSDATA,a0
     167                            cmp     a0,a12
     168                            jrlt    $                       ;stick on stack overflow
     169                            addi    PRCSIZ-PSDATA,a0
     170                            cmp     a0,a12
     171                            jrgt    $                       ;stick on stack underflow
     172                            jruc    prcd1
     173                    
     174                    uhiysuper_stkchk
     175                            addi    SPSDATA,a0
     176                            cmp     a0,a12
     177                            jrlt    $                       ;stick on stack overflow
     178                            addi    SPRCSIZ-SPSDATA,a0
     179                            cmp     a0,a12
     180                            jrgt    $                       ;stick on stack underflow
     181                            jruc    prcd1
     182                            .endif
     183                    
     184 00000690           prcd1
     185                    
     186 00000690     87ad          move    *a13,a13,L
     187 000006a0     ca0c          jrz     prcdx                   ;End?
     188 000006b0     b5a0          move    *a13(PTIME),a0          ;Get count
         000006c0     0030  
     189 000006d0     1420          subk    1,a0
     190 000006e0     b00d          move    a0,*a13(PTIME)          ;Put it back
         000006f0     0030  
     191 00000700     c7f8          jrgt    prcd1                   ;Not ready?
     192                    
     193                    
     194 00000710     4da1          move    a13,a1                  ;0DHispatch
     195 00000720     0b01          addi    040H,a1
         00000730     0040  
     196 00000740     09a1          mmfm    a1,a7,a8,a9,a10,a11,a12 ;*Wake, regs, *stack
         00000750     1f80  
     197                    
     198 00000760           uhiygo
     199                            .if DEBUG
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:58 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

GSP multi-processing system                                          PAGE    5

     200                            cmpi    0FF800000H,a7
     201                            jrhs    uhiywake_ok
     202                            LOCKUP  ;bad wake address!
     203                    uhiywake_ok
     204                            .endif
     205 00000760     0167          jump    a7                      ;Do process
     206                    
     207 00000770           prcdx
     208 00000770     0960          rets
     209                    
     210                    
     211 00000780           SUCIDE
     212 00000780     09e1          movi    ACTIVE,a1
         00000790 00000000+ 
     213 000007b0     4c22  suclp   move    a1,a2           ;save previous
     214 000007c0     8621          move    *a1,a1,L
     215 000007d0     ca19          jrz     sucerr
     216                    
     217 000007e0     482d          cmp     a1,a13
     218 000007f0     cbfb          jrne    suclp           ;!Us
     219                    
     220 00000800     8a22          move    *a1,*a2,L       ;Unlink
     221                    
     222 00000810     0b61          cmpi    SPRCSTR,a1
         00000820 fffc7bff- 
     223 00000840     c509          jrge    uhiysuclink_sproc
     224                    
     225 00000850     d601          move    @FREE,*a1+,L    ;Link into free list at start
         00000860 00000020+ 
     226 00000880     1401          subk    32,a1
     227 00000890     0781          move    a1,@FREE,L
         000008a0 00000020+ 
     228                    
     229 000008c0     4c4d          move    a2,a13          ;Set current process to previous
     230 000008d0     c0db          jruc    prcd1           ;Continue with dispatch
     231                    
     232 000008e0           uhiysuclink_sproc
     233 000008e0     d601          move    @SFREE,*a1+,L   ;Link into super-proc free list at start
         000008f0 00000040+ 
     234 00000910     1401          subk    32,a1
     235 00000920     0781          move    a1,@SFREE,L
         00000930 00000040+ 
     236 00000950     4c4d          move    a2,a13          ;Continue with dispatch
     237 00000960     c0d2          jruc    prcd1
     238                    
     239 00000970           sucerr
     240                            .if     DEBUG
     241                            LOCKUP
     242                            eint
     243                            .else
     244 00000970                   CALLERR 5,0
     245                            .endif
     246 00000a20     09ed          movi    ACTIVE,a13      ;*Proc list
         00000a30 00000000+ 
     247 00000a50     c0c3          jruc    prcd1
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:58 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

GSP multi-processing system                                          PAGE    6

     248                    
     249                    
     250                    
     251 00000a60           KILL
     252 00000a60     480d          cmp     a0,a13
     253 00000a70     ca1d          jreq    hgnbx           ;Killing self?
     254                    
     255 00000a80     09e1          movi    ACTIVE,a1
         00000a90 00000000+ 
     256                    
     257 00000ab0     4c2e  hgnblp  move    a1,a14          ;Save previous
     258 00000ac0     8621          move    *a1,a1,L
     259 00000ad0     ca18          jrz     killerr         ;Can't find?
     260 00000ae0     4820          cmp     a1,a0
     261 00000af0     cbfb          jrne    hgnblp          ;Not the one?
     262                    
     263 00000b00     8a0e          move    *a0,*a14,L      ;Unlink from active
     264                    
     265 00000b10     0b60          cmpi    SPRCSTR,a0
         00000b20 fffc7bff- 
     266 00000b40     c508          jrge    hgnbkill_super
     267 00000b50     d600          move    @FREE,*a0+,L    ;Link into free list at start
         00000b60 00000020+ 
     268 00000b80     1400          subk    32,a0
     269 00000b90     0780          move    a0,@FREE,L
         00000ba0 00000020+ 
     270 00000bc0     c008          jruc    hgnbx
     271                    
     272 00000bd0           hgnbkill_super
     273 00000bd0     d600          move    @SFREE,*a0+,L   ;Link into free list at start
         00000be0 00000040+ 
     274 00000c00     1400          subk    32,a0
     275 00000c10     0780          move    a0,@SFREE,L
         00000c20 00000040+ 
     276 00000c40     0300          jruc    hgnbx
     277                    
     278 00000c50     0960  hgnbx   rets
     279                    
     280 00000c60           killerr
     281                            .if     DEBUG
     282                            LOCKUP
     283                            eint
     284                            .else
     285 00000c60                   CALLERR 6,0
     286                            .endif
     287 00000d10     c0f3          jruc    hgnbx
     288                    
     289                    
     290                    
     291 00000d20           GETPRC
     292 00000d20     4f80          move    a12,b0
     293                    
     294 00000d30     07a0          move    @FREE,a0,L
         00000d40 00000020+ 
     295 00000d60     ca07          jrz     nonelft         ;No more?
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:58 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

GSP multi-processing system                                          PAGE    7

     296 00000d70     860e          move    *a0,a14,L
     297 00000d80     078e          move    a14,@FREE,L     ;Unlink from free list
         00000d90 00000020+ 
     298 00000db0     8ba0          move    *a13,*a0,L      ;Link into active list after current process
     299 00000dc0     820d          move    a0,*a13,L
     300 00000dd0     c035          jruc    xferprc0
     301                    
     302 00000de0           nonelft
     303                            .if     DEBUG
     304                            LOCKUP
     305                            eint
     306                            .else
     307 00000de0                   CALLERR 4,2
     308                            .endif
     309 00000e90     c03e          jruc    getpx
     310                    
     311                    
     312 00000ea0           GETPRC_INSERT
     313 00000ea0     4f80          move    a12,b0
     314                    
     315 00000eb0     07a0          move    @FREE,a0,L
         00000ec0 00000020+ 
     316 00000ee0     caef          jrz     nonelft         ;No more?
     317 00000ef0     860e          move    *a0,a14,L
     318 00000f00     078e          move    a14,@FREE,L     ;Unlink from free list
         00000f10 00000020+ 
     319                    
     320                    
     321                            ;find the process that's immediately before the parent.
     322 00000f30                   PUSH    a1,a2
     323 00000f50     09e1          movi    ACTIVE,a1
         00000f60 00000000+ 
     324 00000f80     8622          move    *a1,a2,L
     325 00000f90           hgnbsearch
     326 00000f90     49a2          cmp     a13,a2
     327 00000fa0     ca06          jreq    hgnbfound
     328 00000fb0     4c41          move    a2,a1
     329 00000fc0     8622          move    *a1,a2,L
     330 00000fd0     cbfb          jrnz    hgnbsearch
     331                    
     332                            ;We've been called by a nonexistent process.  How odd.
     333                            .if DEBUG
     334                            LOCKUP
     335                            .endif
     336 00000fe0                   PULL    a1,a2
     337 00001000     c027          jruc    getpx
     338                    
     339 00001010           hgnbfound
     340                            ;a2 is parent proc, a1 is before that.  slip in between.
     341 00001010     8201          move    a0,*a1,L
     342 00001020     8240          move    a2,*a0,L
     343 00001030                   PULL    a1,a2
     344 00001050     c00d          jruc    xferprc0
     345                            
     346                            
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:58 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

GSP multi-processing system                                          PAGE    8

     347                            
     348                    
     349                    
     350 00001060            SUBR   GETSPRC
     351 00001060     4f80          move    a12,b0
     352                    
     353 00001070     07a0          move    @SFREE,a0,L
         00001080 00000040+ 
     354 000010a0     cad3          jrz     nonelft         ;No more?
     355 000010b0     860e          move    *a0,a14,L
     356 000010c0     078e          move    a14,@SFREE,L    ;Unlink from free list
         000010d0 00000040+ 
     357 000010f0     8ba0          move    *a13,*a0,L      ;Link into active list after current process
     358 00001100     820d          move    a0,*a13,L
     359 00001110     c001          jruc    xferprc0
     360                    
     361                    
     362                    
     363 00001120           XFERPROC
     364 00001120     4f80          move    a12,b0
     365 00001130           xferprc0
     366 00001130     0b67          cmpi    ROM,a7
         00001140 f87fffff  
     367 00001160     c813          jrlo    procwakeerr             ;Error?
     368                    
     369 00001170     4c0e          move    a0,a14
     370 00001180     0b0e          addi    PDATA,a14
         00001190     0100  
     371 000011a0     4c0c          move    a0,a12                  ;Reset process stack pointer
     372 000011b0     0b0c          addi    SPRCSIZ,a12
         000011c0     1380  
     373 000011d0     0b60          cmpi    SPRCSTR,a0
         000011e0 fffc7bff- 
     374 00001200     c502          jrge    hgnbsuperproc
     375                    
     376 00001210     0b0c          addi    PRCSIZ-SPRCSIZ,a12
         00001220     f280  
     377 00001230           hgnbsuperproc
     378 00001230     098e          mmtm    a14,a7,a8,a9,a10,a11,a12 ;Stuff wake, regs, p stack ptr
         00001240     01f8  
     379 00001250     182c          movk    1,a12
     380 00001260     a18e          move    a12,-*a14               ;Wakeup next time
     381 00001270     a02e          move    a1,-*a14                ;ID
     382                    
     383 00001280     4e1c  getpx   move    b0,a12
     384 00001290     0960          rets                            ;Flags are trashed!!!
     385                    
     386 000012a0           procwakeerr
     387                            .if     DEBUG
     388                            LOCKUP
     389                            eint
     390                            .else
     391 000012a0                   CALLERR 7,0
     392                            .endif
     393 00001350     c0f2          jruc    getpx
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:58 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

GSP multi-processing system                                          PAGE    9

     394                    
     395                    
     396                    
     397 00001360           KILALL
     398 00001360     03e1          not     a1
     399 00001370     c001          jruc    KILALLN
     400                    
     401                    
     402                    
     403 00001380           KIL1C
     404 00001380     5621          clr     a1
     405                    
     406                    
     407 00001390           KILALLN
     408 00001390     4e40          move    a2,b0
     409 000013a0     4e61          move    a3,b1
     410                    
     411 000013b0     0521          zext    a1              ;Won't kill PIDS 08000H+
     412 000013c0     5220          andn    a1,a0           ;Form match
     413 000013d0     09e2          movi    ACTIVE,a2
         000013e0 00000000+ 
     414                    
     415 00001400     4c43  fyjmlp  move    a2,a3           ;Save previous
     416 00001410     8642          move    *a2,a2,L
     417 00001420     ca1f          jrz     fyjmx           ;Done?
     418 00001430     b44e          move    *a2(PROCID),a14
         00001440     0020  
     419 00001450     cefa          JRN     fyjmlp          ;ALLOW INDESTRUCTABLES (ANYTHING 8000h+)
     420                    
     421 00001460     522e          andn    a1,a14          ;Apply mask
     422 00001470     480e          cmp     a0,a14
     423 00001480     cbf7          jrne    fyjmlp          ;No match?
     424                    
     425 00001490     484d          cmp     a2,a13
     426 000014a0     caf5          jreq    fyjmlp          ;Current proecess?
     427                    
     428 000014b0     8a43          move    *a2,*a3,L       ;Unlink
     429 000014c0     0b62          cmpi    SPRCSTR,a2
         000014d0 fffc7bff- 
     430 000014f0     c509          jrge    fyjmspr
     431 00001500     07ae          move    @FREE,a14,L     ;Link into free list at start
         00001510 00000020+ 
     432 00001530     83c2          move    a14,*a2,L
     433 00001540     0782          move    a2,@FREE,L
         00001550 00000020+ 
     434 00001570     4c62          move    a3,a2
     435 00001580     c0e7          jruc    fyjmlp
     436                    
     437 00001590           fyjmspr
     438 00001590     07ae          move    @SFREE,a14,L    ;Link into super-proc free list at start
         000015a0 00000040+ 
     439 000015c0     83c2          move    a14,*a2,L
     440 000015d0     0782          move    a2,@SFREE,L
         000015e0 00000040+ 
     441 00001600     4c62          move    a3,a2
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:58 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

GSP multi-processing system                                          PAGE   10

     442 00001610     c0de          jruc    fyjmlp
     443                    
     444 00001620     4e12  fyjmx   move    b0,a2
     445 00001630     4e33          move    b1,a3
     446 00001640     0960          rets
     447                    
     448                    
     449                    
     450 00001650            SUBR   IKIL1C
     451 00001650     5621          clr     a1
     452                    
     453                    
     454                    
     455 00001660            SUBR   IKILALLN
     456 00001660     4e40          move    a2,b0
     457 00001670     4e61          move    a3,b1
     458                    
     459 00001680     0500          sext    a0
     460 00001690     5220          andn    a1,a0           ;Form match
     461 000016a0     09e2          movi    ACTIVE,a2
         000016b0 00000000+ 
     462                    
     463 000016d0     4c43  nulllp  move    a2,a3           ;Save previous
     464 000016e0     8642          move    *a2,a2,L
     465 000016f0     ca1e          jrz     nullx           ;Done?
     466 00001700     b44e          move    *a2(PROCID),a14
         00001710     0020  
     467                    
     468 00001720     522e          andn    a1,a14          ;Apply mask
     469 00001730     480e          cmp     a0,a14
     470 00001740     cbf8          jrne    nulllp          ;No match?
     471                    
     472 00001750     484d          cmp     a2,a13
     473 00001760     caf6          jreq    nulllp          ;Current proecess?
     474                    
     475 00001770     8a43          move    *a2,*a3,L       ;Unlink
     476 00001780     0b62          cmpi    SPRCSTR,a2
         00001790 fffc7bff- 
     477 000017b0     c509          jrge    nullspr
     478 000017c0     07ae          move    @FREE,a14,L     ;Link into free list at start
         000017d0 00000020+ 
     479 000017f0     83c2          move    a14,*a2,L
     480 00001800     0782          move    a2,@FREE,L
         00001810 00000020+ 
     481 00001830     4c62          move    a3,a2
     482 00001840     c0e8          jruc    nulllp
     483                    
     484 00001850           nullspr
     485 00001850     07ae          move    @SFREE,a14,L    ;Link into super-proc free list at start
         00001860 00000040+ 
     486 00001880     83c2          move    a14,*a2,L
     487 00001890     0782          move    a2,@SFREE,L
         000018a0 00000040+ 
     488 000018c0     4c62          move    a3,a2
     489 000018d0     c0df          jruc    nulllp
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:53:58 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

GSP multi-processing system                                          PAGE   11

     490                    
     491 000018e0     4e12  nullx   move    b0,a2
     492 000018f0     4e33          move    b1,a3
     493 00001900     0960          rets
     494                    
     495                    
     496                    
     497                    
     498                    
     499 00001910           process_exist
     500 00001910     09e1          movi    ACTIVE,a1
         00001920 00000000+ 
     501                    
     502 00001940     8621  uvislp  move    *a1,a1,L
     503 00001950     ca03          jrz     uvisx           ;End?
     504 00001960     4801          cmp     a0,a1
     505 00001970     cbfc          jrne    uvislp          ;!Match?
     506 00001980     4c00          move    a0,a0           ;Clr Z
     507                    
     508 00001990     0960  uvisx   rets
     509                    
     510                    
     511                    
     512 000019a0           EXISTP
     513 000019a0                   PUSH    a1,a2,a4
     514                    
     515 000019c0     0500          sext    a0
     516 000019d0     5020          and     a1,a0           ;form match
     517 000019e0     09e2          movi    ACTIVE,a2
         000019f0 00000000+ 
     518                    
     519 00001a10     8642  sibmlp  move    *a2,a2,L
     520 00001a20     ca07          jrz     sibmx           ;End?
     521 00001a30     b444          move    *a2(PROCID),a4
         00001a40     0020  
     522 00001a50     5024          and     a1,a4
     523 00001a60     4804          cmp     a0,a4
     524 00001a70     cbf9          jrne    sibmlp          ;!Match?
     525                    
     526 00001a80     484d          cmp     a2,a13
     527 00001a90     caf7          jreq    sibmlp          ;Self?
     528                    
     529 00001aa0     4c40  sibmx   move    a2,a0
     530                    
     531 00001ab0                   PULL    a1,a2,a4
     532 00001ad0     0960          rets
     533                    
     534                    
     535                            .end

 No Errors,  No Warnings
