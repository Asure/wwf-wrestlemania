TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    **************************************************************
       2                    *
       3                    * Software:     Jamie Rivett, Mark Turmell, Jason Skiles
       4                    * Initiated:    12/7/93
       5                    *
       6                    * Modified:
       7                    *
       8                    * COPYRIGHT (C) 1992 WILLIAMS ELECTRONICS GAMES, INC.
       9                    *
      10                    **************************************************************
      11                    
      12                            .file   "wrestle.asm"
      14                            .width  132
      15                            .option b,d,l,t
      16                            .mnolist
      17                    
      18                    
      19                            .include        "macros.h"
      20                            .include        "mproc.equ"             ;Mproc equates
      21                            .include        "display.equ"           ;Display proc equates
      22                            .include        "gsp.equ"               ;Gsp asm equates
      23                            .include        "sys.equ"
      24                            .include        "wwfsec.equ"
      25                            .include        "game.equ"
      26                            .include        "audit.equ"
      27                            .include        "plyr.equ"
      28                            .include        "anim.equ"
      29                            .include        "sound.h"
      30                            .include        "ring.equ"
      31                            .include        "sound.equ"
      32                            .include        "damage.equ"
      33                    
      34                            .include        "newfont.tbl"
      35                            .include        "imgtbl.glo"
      36                            .include        "fontsimg.glo"
      37                            .include        "bgndtbl.glo"
      38                            .include        "miscimg.glo"
      39                    
      40                    ; .if DEBUG
      41                    ;       .include        "dirdebug.tbl"
      42                    ;
      43                    ;ARROWS:
      44                    ;       .word     4
      45                    ;       .word   00H,015H,07FFFH,02B5H
      46                    ; .endif
      47                    
      48                     .if DEBUG
      49                    
      50                    SCRT_DEBUG      equ     0
      51                    DIR_DEBUG       equ     0
      52                    COL_DEBUG       equ     1
      53                    
      54                     .else
      55                    
      56              0000  SCRT_DEBUG      equ     0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    2

      57              0000  DIR_DEBUG       equ     0
      58              0000  COL_DEBUG       equ     0
      59                    
      60                     .endif
      61                    
      62                    ******************************************************************************
      63                    * EXTERNAL REFERENCES
      64                    
      65                            .if     DEBUG
      66                            .ref    instant_death
      67                            .endif
      68                    
      69                            .ref    ADD_VOICE,ARE_WE_IN_RING,AUD,AUD1,BAKMODS,BGND_UD1
      70                            .ref    CLEAR_SPEECH_REPEAT,CREATE_TEXT_LINE,CR_CONTP,CR_STRTP
      71                            .ref    CURRENT_LADDER,D2ST2B03,DAM_MULT,DBV,DIAG,DONE_HOWARD
      72                            .ref    DO_CROWD_CHEER,FIND_AND_KILL_ENDLESS,GAME_BEATEN
      73                            .ref    GET_ADJ,GET_AUD,combo_audit_done,FINAL_PTR
      74                            .ref    INIT_LADDER_TABLE,INIT_SKIRTS,INIT_TAB,IRQSKYE,KILL_AUD
      75                            .ref    LCOIN,MATCH_TIMERS,NUM_OPPS,OPEN_PROGRESS_SCREEN
      76                            .ref    POWERCMOS,POWERTST,P_CONT,P_START,RCOIN,READ_DIP
      77                            .ref    RESETUP_PROGRESS,SERVICE,SET_LOWER_VOL,SHIFT_BARS_IN_Z
      78                            .ref    SLAM_SW,SORT_OUT_WRESTLER_NUM,SPECIAL_WIPEOUT,STORE_AUDIT
      79                            .ref    THIS_GAME_IS_BEATEN,VOLBTN_PRESS,WALK_SOUND,do_game_over
      80                            .ref    WDOGRAM,rewire_monitor,XCOIN,DUMRETS,WHICH_SCREEN
      81                            .ref    ZFLIP_POS_VAR,CREATE_TIMEOUT,CCOIN,CHANGE_SKIRTS,CKDIAG
      82                            .ref    set_volume,KILL_ALL_CHANNELS,RESET_VOICE_QUEUE
      83                            .ref    FINAL_BATTLE_LINEUP,RNDRNG0,change_wrestler,match_timer
      84                            .ref    animate_wrestler,are_we_waiting_f,attract_mode
      85                            .ref    bam_ani_init,bret_ani_init,change_anim1,change_anim1a
      86                            .ref    change_anim2,check_collisions,ck_climb_in_bot,keep_onscreen
      87                            .ref    ck_climb_in_side,ck_climb_in_top,ck_climb_out_bot
      88                            .ref    ck_climb_out_side,ck_climb_out_top
      89                            .ref    crowd_anim,dirqtimer,dma_meter,doink_ani_init,buyin_select
      90                            .ref    dpageflip,drone_main,entered_inits,getup_meter
      91                            .ref    index1,index2,init_all,init_life_data,init_special_objlist
      92                            .ref    lex_ani_init,meters,move_bam,move_bret,move_doink,move_lex
      93                            .ref    move_razor,move_shawn,move_taker,move_yoko,adjust_health
      94                            .ref    overlap_collision,pal_getf,pin_speed_in_case,pregame_show
      95                            .ref    print_string_C2,process_dispatch,razor_ani_init,choose_pal
      96                            .ref    read_switches,rope,rope_command,select_screen,init_smoves
      97                            .ref    set_collision_boxes,set_images,setup_message
      98                            .ref    shawn_ani_init,snd_update,square_root,taker_ani_init
      99                            .ref    triple_sound,wgsf24_ascii,wres_get_but_val_down
     100                            .ref    wres_get_stick_val_down,wres_get_stick_val_up
     101                            .ref    wrestler_audits,yoko_ani_init,mess_objid,pal_clean
     102                            .ref    wrestler_veladd,announce_rnd_winner,scroll_world
     103                            .ref    drone_change_back,is_final_match,audit_ud_flag
     104                            .ref    ditch_getup_meter,message_flag,init_rnd_life_data
     105                            .ref    p1rnd_award,p2rnd_award,p1mtch_award,p2mtch_award
     106                            .ref    p1ws_award,p2ws_award,rst_awards,rst_winstreak_awards
     107                            .ref    PERFECT_WINS,MUSIC_HAP,THIS_GAME_TIME,WINS_OBJ
     108                            .ref    arm_winstreak_award,reset_dufus_msgs,clear_icon_total
     109                            .ref    MESSAGE_FLAGS,FLASH_FLAG,royal_rumble,choose_buddies
     110                            .ref    do_show_options,show_options,IKIL1C,is_a14_behind
     111                            .ref    maybe_do_flashes,COMBO_FLASH_FLAG,loser_snd
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    3

     112                            .ref    in_finish_move,buddy_mode_on,buddy_mode_checked
     113                            .ref    copy_rom_string,concat_rom_string,setup_message
     114                            .ref    copy_string,dec_to_asc,concat_string,message_buffer
     115                            .ref    osgmd8_ascii,get_all_buttons_cur,_serial_number,_man_date
     116                            .ref    InitPIC,RemapIO,SecFuncCheck
     117                            .ref    rr_loss,postgame_audits
     118                            .ref    wrestler_counter
     119                            .ref    is_8_on_1,bncoff_gate,fall_back_tbl
     120                            .ref    show_wrestler_end_story,do_fireworks
     121                            .ref    p1pins,p2pins,finish_completed
     122                    * need to check if errors
     123                            .ref    PSTATUS2,OLD_PSTATUS2
     124                    
     125                    
     126                    ******************************************************************************
     127                    * SYMBOLS DEFINED IN THIS FILE
     128                    
     129                    
     130                            .def    obj_look,ani_init,mainlp,PCMOSRET,ring_mod
     131                    
     132 00000000                   BSSX    _coin_addr,32
     133 00000000                   BSSX    _switch_addr,32
     134 00000000                   BSSX    _switch2_addr,32
     135 00000000                   BSSX    _watchdog_addr,32
     136 00000000                   BSSX    _dipswitch_addr,32
     137 00000000                   BSSX    _sound_addr,32
     138 00000000                   BSSX    _soundirq_addr,32
     139 00000000                   BSSX    _coin_counter_addr,32
     140                    
     141                    ;uninitialized ram definitions
     142 00000000                   BSSX    no_pin_check,16
     143 00000000                   BSSX    belt_ask        ,16
     144 00000000                   BSSX    belt_type       ,16
     145                    
     146 00000000                   BSSX    PSTATUS         ,16     ;Player in game bits (0-3)
     147 00000000                   BSSX    OLD_PSTATUS     ,16     ;Previous games PSTATUS
     148 00000000                   BSSX    PSTARTS         ,16     ;Not documented.  Pbltltlt.
     149                    
     150                            .if     DEBUG
     151                            BSSX    SLDEBUG         ,16     ;Shawn's debug
     152                            BSSX    slowmotion      ,16     ;!0=Frames of delay for slow motion
     153                            .endif
     154                    
     155 00000000                   BSSX    slowmo          ,16     ;!0=Frames of delay for slow motion
     156                    
     157                            ;I changed PCNT to a 32-bit value instead of 16 'cuz I'm tired of
     158                            ; coding checks for the wraparound case, which happens every ten
     159                            ; minutes or so.  Since it's always treated as an unsigned value
     160                            ; anyway, it's perfectly safe to continue using it as a word. - JS
     161 00000000                   .even
     162 00000000                   BSSX    PCNT            ,32     ;Main loop cnt
     163                    
     164 00000000                   BSSX    swstack_p       ,32     ;*Stack position
     165 00000000                   BSSX    swstackbot      ,16*64  ;Bottom of stack
     166 00000000                   BSSX    swstacktop      ,0      ;Top of stack
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    4

     167                    
     168 00000000                   BSSX    COLRTEMP        ,16*16  ;RAM COPY OF CYCLING COLORS
     169                    
     170 00000000                   BSSX    GAMSTATE        ,16     ;Game state: See game.equ
     171                    
     172 00000000                   BSSX    HALT            ,16     ;FREEZE ALL OBJECTS (NO VEL UPDATE)
     173 00000000                   BSSX    NO_START        ,16     ;FLAG 0=OKAY, 1=NOT RIGHT NOW.
     174                    
     175 00000000                   BSSX    WSPEED          ,16
     176 00000000                   BSSX    WFLG            ,16     ;0=NOT ON, 1=YES IT IS ON
     177 00000700                   .bss    WNDWFLG         ,16     ;0=WINDOW SHOULD CLOSE, 1=NO WINDOW
     178 00000000                   .even
     179 00000000                   BSSX    OBJPTR          ,32     ;PNTR FOR WINDOW OBJECT
     180                    
     181                    
     182 00000730                   .bss    PALTMP          ,13*16*2 ;ALLOCATE 2 X COLOR AREA IN RAM
     183                    
     184 00000000                   BSSX    match_cnt,      16
     185                    
     186 00000000                   BSSX    debug_collis,   16
     187                    
     188 00000000                   .even
     189 00000000                   BSSX    DIAG0,          32
     190 00000000                   BSSX    DIAG1,          32
     191                    
     192 00000000                   BSSX    process_ptrs,   32*NUM_WRES     ;long * number wrestlers
     193              0950- p2_process      .equ    process_ptrs+32
     194                            .def    p2_process
     195                    
     196 00000a10                   .bss    wres0_objs,     32*MAX_PIECES
     197 00000ad0                   .bss    wres1_objs,     32*MAX_PIECES
     198 00000b90                   .bss    wres2_objs,     32*MAX_PIECES
     199 00000c50                   .bss    wres3_objs,     32*MAX_PIECES
     200 00000d10                   .bss    wres4_objs,     32*MAX_PIECES
     201 00000dd0                   .bss    wres5_objs,     32*MAX_PIECES
     202 00000e90                   .bss    wres6_objs,     32*MAX_PIECES
     203 00000f50                   .bss    wres7_objs,     32*MAX_PIECES
     204                    
     205 00000000                   BSSX    round_tickcount,16
     206                    
     207                    
     208 00000000                   BSSX    wrest_joystat,  32*16*NUM_WRES  ;16 bit joyval: 16 bit count
     209                    
     210 00001e20                   .bss    fudge_x,        32              ;wrestler_x[-20h]
     211 00000000                   BSSX    wrestler_x,     32*NUM_WRES     ;long * number wrestlers
     212 00001f20                   .bss    fudge_y,        32              ;wrestler_y[-20h]
     213 00000000                   BSSX    wrestler_y,     32*NUM_WRES     ;long *         "
     214 00002020                   .bss    fudge_z,        32              ;wrestler_z[-20h]
     215 00000000                   BSSX    wrestler_z,     32*NUM_WRES     ;long *         "
     216                    
     217                            ;This is the game clock at the top of the screen.  It runs at various
     218                            ; speeds in the different modes, and can be adjusted by the operator.
     219                            ; It's not any kind of real time clock and shouldn't be used for
     220                            ; ANYTHING except displaying those two digits.
     221 00000000                   BSSX    match_time,     16*3            ;frac, 1's, 10's
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    5

     222                    
     223 00000000                   BSSX    match_over,     16              ;0=not over, !0=over
     224                    
     225                            ;This used to be incremented on the fly.  Bogus, since we lose bog
     226                            ; frames that way and end up with an artificially low time.  Instead,
     227                            ; compute this based on current PCNT and match_start_time at the
     228                            ; end of the match.
     229 00000000                   BSSX    match_realtime, 16              ;actual seconds elapsed
     230                    
     231 00000000                   BSSX    match_winner,   16              ;just like PSTATUS
     232                    
     233 00000000                   BSSX    fight_debug,    16
     234                    
     235 00000000                   BSSX    p1winstreak,    16              ;player 1 winning streak
     236 00000000                   BSSX    p2winstreak,    16              ;player 2 winning streak
     237 00000000                   BSSX    p1winstreakd,   16              ;player 1 vs drones
     238 00000000                   BSSX    p2winstreakd,   16              ;player 2 vs drones
     239                    
     240                            ;copy pXwinstreak to pXoldwinstreak immediately after any battle
     241                            ; ends, then clear pXwinstreak.
     242 00000000                   BSSX    p1oldwinstreak, 16              ;player 1 dead winning streak
     243 00000000                   BSSX    p2oldwinstreak, 16              ;player 2 dead winning streak
     244                    
     245 00000000                   BSSX    current_round,  16              ;current round in match (1+)
     246 00000000                   BSSX    p1rounds,       16              ;player 1 rounds won
     247 00000000                   BSSX    p2rounds,       16              ;player 2 rounds won
     248                    
     249                            ;keep these in order and adjacent
     250 00000000                   .even
     251 00000000                   BSSX    front_rproc,    32              ;front ropes proc
     252 00000000                   BSSX    back_rproc,     32              ;back ropes proc
     253 00000000                   BSSX    left_rproc,     32              ;left ropes proc
     254 00000000                   BSSX    right_rproc,    32              ;right ropes proc
     255                    
     256 00000000                   BSSX    total_matches,  16              ;matches since attract mode
     257 00000000                   BSSX    no_debris,      16              ;Don't allow debris - it bogs
     258 00000000                   BSSX    reduce_bog,     16
     259 00000000                   BSSX    allow_offscrn,16                ;Allow players offscrn on toss outs
     260                    
     261 000022e0                   .bss    bgnd_cntr,16
     262 00000000                   BSSX    any_hits,16
     263 00000000                   BSSX    robo_icon_trigger,16
     264                    
     265                            .if DEBUG
     266                            BSSX    stay_down,      16              ;flag - don't dec GETUP_TIME
     267                            .endif
     268                    
     269                            ;these three data are only for use in pin times.  They don't count
     270                            ; time not spent actually fighting, and so we can't use them for
     271                            ; the game time audit.
     272 00000000                   BSSX    round_start_time,32             ;PCNT at start of round
     273 00000000                   BSSX    round_end_time,32               ;PCNT at end of round
     274                            
     275                            ;Set this at the beginning of a match, and subtract it from PCNT
     276                            ; at the end of the match.  THIS is the clock we use for the game
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    6

     277                            ; time audits.  It won't lose bog frames, and it isn't tied to that
     278                            ; silly game clock.
     279 00000000                   BSSX    match_start_time,32             ;PCNT at start of match
     280 00000000                   .text
     281                    
     282 00002370                   .bss    plyr_dmg_given,2*16
     283 00000000                   BSSX    wrestler_count,16
     284 00000000                   BSSX    wrestler_count_proc,32
     285 00000000                   BSSX    temp_music,16
     286                    
     287 00000000                   BSSX    annc_rnd_winner_done,16
     288                            
     289 00000000           vln_right_rope_r
     290 00000000     0511          .WORD   RING_TOP_RIGHT,RING_TOP,RING_BOT_RIGHT,RING_BOT
     291 00000040     0142          .WORD   RING_DEPTH,RING_RIGHT_WIDTH
     292 00000060           vln_left_rope_r
     293 00000060     0358          .WORD   RING_TOP_LEFT,RING_TOP,RING_BOT_LEFT,RING_BOT
     294 000000a0     0142          .WORD   RING_DEPTH,RING_LEFT_WIDTH
     295 000000c0           vln_right_matedge_r
     296 000000c0     054d          .WORD   MAT_TOP_RIGHT,MAT_TOP,MAT_BOT_RIGHT,MAT_BOT
     297 00000100     022a          .WORD   MAT_DEPTH,MAT_RIGHT_WIDTH
     298 00000120           vln_left_matedge_r
     299 00000120     0314          .WORD   MAT_TOP_LEFT,MAT_TOP,MAT_BOT_LEFT,MAT_BOT
     300 00000160     022a          .WORD   MAT_DEPTH,MAT_LEFT_WIDTH
     301 00000180           vln_right_matedge2_r
     302 00000180     0565          .WORD   MAT2_TOP_RIGHT,MAT2_TOP,MAT2_BOT_RIGHT,MAT2_BOT
     303 000001c0     0234          .WORD   MAT2_DEPTH,MAT2_RIGHT_WIDTH
     304 000001e0           vln_left_matedge2_r
     305 000001e0     0304          .WORD   MAT2_TOP_LEFT,MAT2_TOP,MAT2_BOT_LEFT,MAT2_BOT
     306 00000220     0234          .WORD   MAT2_DEPTH,MAT2_LEFT_WIDTH
     307 00000240           vln_right_fence_r
     308 00000240     06c8          .WORD   ARENA_TOP_RIGHT,ARENA_TOP,ARENA_BOT_RIGHT,ARENA_BOT
     309 00000280     0518          .WORD   ARENA_DEPTH,ARENA_RIGHT_WIDTH
     310 000002a0           vln_left_fence_r
     311 000002a0     026a          .WORD   ARENA_TOP_LEFT,ARENA_TOP,ARENA_BOT_LEFT,ARENA_BOT
     312 000002e0     0518          .WORD   ARENA_DEPTH,ARENA_LEFT_WIDTH
     313                    
     314 00000300                   bssx    vln_right_rope,((RING_DEPTH+10)*16)+64
     315 00000300                   bssx    vln_left_rope,((RING_DEPTH+10)*16)+64
     316 00000300                   bssx    vln_right_matedge,((MAT_DEPTH+10)*16)+64
     317 00000300                   bssx    vln_left_matedge,((MAT_DEPTH+10)*16)+64
     318 00000300                   bssx    vln_right_matedge2,((MAT2_DEPTH+10)*16)+64
     319 00000300                   bssx    vln_left_matedge2,((MAT2_DEPTH+10)*16)+64
     320 00000300                   bssx    vln_right_fence,((ARENA_DEPTH+10)*16)+64
     321 00000300                   bssx    vln_left_fence,((ARENA_DEPTH+10)*16)+64
     322                    
     323 00000300                   .even
     324 00000300           box_matedge
     325 00000300 00007160-         .long   vln_left_matedge
     326 00000320 00004de0-         .long   vln_right_matedge
     327                    
     328 00000340           box_matedge2
     329 00000340 0000b900-         .long   vln_left_matedge2
     330 00000360 000094e0-         .long   vln_right_matedge2
     331                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    7

     332                    
     333                    ****************************************************************
     334                    * Reset entry point
     335                    
     336 00000380            SUBR   init_prog
     337                    
     338                            .if 0
     339                            dint
     340                            setf    16,1,0                  ;Field0 = Word sign extend
     341                            setf    32,0,1                  ;Field1 = Long word
     342                            movi    STCKST,sp               ;Top of stack
     343                    
     344                            calla   InitPIC
     345                    
     346                    ;       .if     DEBUG
     347                    ;       move    a0,@01e00000H           ;Clr FPGA rom protect
     348                    ;       .endif
     349                    
     350                                                            ;>Manual sound board reset
     351                    ; Moved to PU DIAGS
     352                    ;       movi    0fe00h,a0               ;Hit reset bit
     353                    ;       move    a0,@SOUND
     354                    ;       movi    100,a0                  ;Wait for it to catch
     355                    ;       dsj     a0,$
     356                    ;       movi    0ff00h,a0               ;Let it go
     357                    ;       move    a0,@SOUND
     358                    
     359                            move    @WDOGRAM,a0,L
     360                            cmpi    WDOGNUM,a0
     361                            jrne    initp50                 ;Powerup?
     362                    
     363                            move    @dirqtimer,a0
     364                            cmpi    400,a0
     365                            jrhs    cpxlockup                       ;Main loop died?
     366                    
     367                    
     368                            .if     TUNIT
     369                            move    @TALKPORT,a0            ;Check if watchdog was real
     370                            btst    B_WDOG,a0               ;Bit should be low if dog fired
     371                            jrnz    initp50                 ;No watchdog?
     372                            .endif
     373                    
     374                            movk    AUD_LOCKUP,a0           ;watchdog
     375                            calla   AUD1
     376                            jruc    cpxcont
     377                    
     378                    cpxlockup
     379                    
     380                            movi    AUD_LOCKUP,a0           ;main loop lockup
     381                            calla   AUD1
     382                    
     383                    cpxcont
     384                            .if     DEBUG
     385                            .else
     386                            CALLERR 11,0                    ;Watch dog
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    8

     387                            .endif
     388                    
     389                    
     390                            movk    AUDSTAT,a0
     391                            calla   GET_AUD                 ;0=AMode, 1=Game
     392                            move    a1,a1
     393                            jrz     WARMSET                 ;Attract mode glitch?
     394                    
     395                    initp50
     396                            calla   READ_DIP                ;skip if UJ2 bit 6 set
     397                            btst    6,a0
     398                            jrnz    cpxskip_powerst
     399                            jauc    POWERTST                ;board test etc...
     400                    cpxskip_powerst
     401                    
     402                            .else
     403 00000380     0360          dint                            ; Interrupts OFF
     404 00000390     0570          setf    16,1,0                  ; word sign extend
     405 000003a0     0760          setf    32,1,1                  ; long word sign extend
     406 000003b0     09ef          movi    STCKST,sp               ; Setup the stack pointer
         000003c0 013f73e0  
     407                    
     408 000003e0     5600          clr     a0                      ; initial mode for VMUX chip
     409 000003f0     0580          move    a0,@VMUX_CONTROL,W      ; initialize VMUX chip
         00000400 01800000  
     410                    
     411 00000420     09c0          movi    00030h,a0               ; hit sound reset bit
         00000430     0030  
     412 00000440     0580          move    a0,@COIN_COUNTERS       ; this is where reset bit is
         00000450 01860010  
     413 00000470     09c0          movi    100,a0                  ; wait for it to catch
         00000480     0064  
     414 00000490     3c20          dsjs    a0,$    
     415 000004a0     09c0          movi    00020h,a0               ; let it go
         000004b0     0020  
     416 000004c0     0580          move    a0,@COIN_COUNTERS
         000004d0 01860010  
     417                    
     418                    
     419 000004f0     05a0          move    @SOUNDIRQ,a0            ; read watchdog status
         00000500 01860040  
     420 00000520     1ee0          btst    8,a0                    ; Is this reset from a watchdog ?
     421 00000530     cb04          jrnz    initp50                 ; br = no
     422                    
     423 00000540           cpxlockup
     424                    
     425 00000540     1b60          movk    AUD_LOCKUP,a0           ; watchdog audit
     426 00000550     0d5f          calla   AUD1
         00000560 00000000! 
     427                    
     428                    ;04/01/95 - NOTE:  It may look a little dumb to have two calls to InitPIC
     429                    ;here instead of one above before the read for the watchdog status and it may
     430                    ;be tempting to move the InitPIC call to before the watchdog status read BUT
     431                    ;don't do it!!!  The watchdog status MUST be read BEFORE the PIC is initialized
     432                    ;or the status of the watchdog will be reset.
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    9

     433                    
     434 00000580           initp50
     435 00000580     0d5f          calla   InitPIC                 ; Initialize the PIC and the I/O system
         00000590 00000000! 
     436 000005b0     0580          move    a0,@WATCHDOG            ; Kill the dog fer yucks
         000005c0 01860030  
     437 000005e0     0d5f          calla   READ_DIP                ; Read the dipswitches
         000005f0 00000000! 
     438 00000610     1f20          btst    6,a0                    ; Is the power test bypass switch on?
     439 00000620     cb03          jrnz    cpxskip_powerst         ; br = yes
     440 00000630     c080          jauc    POWERTST                ; Go off and run the power up tests
         00000640 00000000! 
     441 00000660           cpxskip_powerst
     442 00000660     0d5f          calla   InitPIC                 ; Reinitialize the PIC and I/O system
         00000670 00000000! 
     443                            .endif
     444                    
     445                    
     446                    ******************************************************************************
     447                    
     448 00000690            SUBR   WARMSET
     449                    
     450 00000690     0360          dint
     451 000006a0     0570          setf    16,1,0                  ;Field0 = Word sign extend
     452 000006b0     0740          setf    32,0,1                  ;Field1 = Long word
     453 000006c0     09ef          movi    STCKST,sp               ;Top of stack
         000006d0 013f73e0  
     454                    
     455 000006f0     0d5f          calla   InitPIC
         00000700 00000000! 
     456                    
     457                    ;This takes all day to run.  leave it out until we ship.
     458                            .if DEBUG
     459                            .else
     460 00000720     c080          jauc    POWERCMOS
         00000730 00000000! 
     461                            .endif
     462 00000750           PCMOSRET
     463                    
     464 00000750     0d5f          calla   init_all                ;Initialize hardware
         00000760 00000000! 
     465                    ; These are stored in these reggies to protect them
     466 00000780     0795          move    b5,@_serial_number,L
         00000790 00000000! 
     467 000007b0     0796          move    b6,@_man_date,L
         000007c0 00000000! 
     468 000007e0     0d5f          calla   SecFuncCheck            ;Check to make sure security functions
         000007f0 00000000! 
     469                                                            ;have not been mucked with
     470 00000810     0d5f          calla   INIT_TAB                ;Reset todays high score table
         00000820 00000000! 
     471                    
     472                            .if DEBUG
     473                            clr     a14
     474                            move    a14,@fight_debug
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   10

     475                            move    @_soundirq_addr,a14,L
     476                            move    *a14,a14
     477                            btst    8,a14
     478                            jrnz    cpxno_dog
     479                            LOCKUP
     480                    cpxno_dog
     481                            .endif
     482                    
     483 00000840     0d5f          calla   CKDIAG
         00000850 00000000! 
     484 00000870     ca09          jrz     main_go                 ;No diag switches closed?
     485                    
     486 00000880                   CREATE  DIAG_PID,DIAG           ;Fire off the diag process
     487 00000900     c008          jruc    mainlp
     488 00000910           main_go
     489 00000910                   CREATE  AMODE_PID,attract_mode  ;Start the attract mode
     490                    
     491                            ;fall through
     492                    
     493                    ********************************
     494                    * Main loop
     495                    
     496 00000990           mainlp
     497 00000990     0d5f          calla   process_dispatch
         000009a0 00000000! 
     498                    
     499 000009c0     4dad          move    a13,a13
     500 000009d0     ca0b          jrz     mainpok
     501                    
     502                            .if     DEBUG
     503                            LOCKUP
     504                            eint
     505                            .else
     506 000009e0                   CALLERR 10,0
     507                            .endif
     508                    
     509 00000a90           mainpok
     510                    
     511 00000a90     07a1          move    @RAND,a1,L              ;>Randomize
         00000aa0 00000000! 
     512 00000ac0     6821          rl      a1,a1
     513 00000ad0     05ae          move    @HCOUNT,a14
         00000ae0 c00001c0  
     514 00000b00     69c1          rl      a14,a1
     515 00000b10     41e1          add     sp,a1
     516 00000b20     0781          move    a1,@RAND,L
         00000b30 00000000! 
     517                    
     518                     .if DEBUG
     519                            move    @dma_meter,a14
     520                            jrz     cpxno_dmaline
     521                            .ref    draw_dma_meter
     522                            calla   draw_dma_meter
     523                    cpxno_dmaline
     524                     .endif
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   11

     525                    
     526                    
     527                    ;isn't there a less obvious place
     528                    ;that we can remap the IO ???
     529                    ;       btst    5,a1
     530                    ;       jrz     _no_remap
     531                    ;       calla   RemapIO
     532                    ;_no_remap
     533                    
     534 00000b50     0d3f          callr   switch_unstack
         00000b60     000b  
     535 00000b70     0d5f          calla   snd_update              ;Update the sound calls
         00000b80 00000000! 
     536                    
     537                            .if     DEBUG
     538                            calla   cputime_calcfree
     539                            .endif
     540                    
     541                            ;update all 32 bits of PCNT
     542 00000ba0     07a0          move    @PCNT,a0,L
         00000bb0 00000170- 
     543 00000bd0     1020          addk    1,a0
     544 00000be0     0780          move    a0,@PCNT,L
         00000bf0 00000170- 
     545                    
     546 00000c10     c0d7          jruc    mainlp
     547                    
     548                    
     549                    ***************************************************************
     550                    * Unstack switch queue
     551                    
     552                    
     553 00000c20            SUBRP  switch_unstack
     554                    
     555                    
     556 00000c20     07a3  afslp   move    @swstack_p,a3,L
         00000c30 00000190- 
     557 00000c50     0b63          cmpi    swstacktop,a3           ;Stack at start?
         00000c60 fffffa4f- 
     558 00000c80     ca1a          jreq    afsx                    ;Empty?
     559 00000c90     07a0          move    @FREE,a0,L
         00000ca0 00000000! 
     560 00000cc0     ca16          jrz     afsx                    ;No processes left?
     561                    
     562 00000cd0     9460          move    *a3+,a0                 ;Get entry
     563 00000ce0     0783          move    a3,@swstack_p,L         ;Update stack
         00000cf0 00000190- 
     564 00000d10     2760          sll     32-5,a0                 ;Max switch # 31
     565 00000d20     2d20          srl     32-5-4,a0               ;*16
     566 00000d30     4c02          move    a0,a2
     567 00000d40     4002          add     a0,a2
     568 00000d50     4002          add     a0,a2                   ;*3
     569 00000d60     0b22          addi    switch_t,a2
         00000d70 00000e40' 
     570 00000d90     9441          move    *a2+,a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   12

     571 00000da0     cae7          jrz     afslp                   ;No PID?
     572 00000db0     9647          move    *a2+,a7,L               ;*Code
     573 00000dc0     09ed          movi    ACTIVE,a13              ;*Proc list
         00000dd0 00000000! 
     574 00000df0     0d5f          calla   GETPRC
         00000e00 00000000! 
     575 00000e20     c0df          jruc    afslp
     576                    
     577 00000e30     0960  afsx    rets
     578                    
     579                    
     580 00000e40           switch_t        ;(Process ID or 0, *Routine)    ;Put in audit??
     581                    
     582                    
     583                            .if     TUNIT
     584 00000e40                   WL      0,0                     ;S0
     585 00000e70                   WL      0,0                     ;S1
     586 00000ea0                   WL      0,0                     ;S2
     587 00000ed0                   WL      0,0                     ;S3
     588 00000f00                   WL      0,0                     ;S4
     589 00000f30                   WL      0,0                     ;S5
     590 00000f60                   WL      0,0                     ;S6
     591 00000f90                   WL      0,0                     ;S7
     592 00000fc0                   WL      0,0                     ;S8
     593 00000ff0                   WL      0,0                     ;S9
     594 00001020                   WL      0,0                     ;S10
     595 00001050                   WL      0,0                     ;S11
     596 00001080                   WL      0,0                     ;S12
     597 000010b0                   WL      0,0                     ;S13
     598 000010e0                   WL      0,0                     ;S14
     599 00001110                   WL      0,0                     ;S15
     600                    
     601 00001140                   WL      LC_PID,LCOIN            ;S16 - LEFT COIN (1)
     602 00001170                   WL      RC_PID,RCOIN            ;S17 - RIGHT COIN (2)
     603 000011a0                   WL      PSWPID,plyr_strtb1      ;S18 - START 1
     604 000011d0                   WL      SLAM_PID,SLAM_SW        ;S19 - SLAM TILT
     605 00001200                   WL      DIAG_PID,DIAG           ;S20 - TEST
     606 00001230                   WL      PSWPID,plyr_strtb2      ;S21 - START 2
     607 00001260                   WL      DIAG_PID,SERVICE        ;S22 - SERVICE CREDIT
     608 00001290                   WL      CC_PID,CCOIN            ;S23 - CENTER COIN (3)
     609 000012c0                   WL      CC_PID,XCOIN            ;S24 - COIN 4
     610 000012f0                   WL      0,0                     ;S25 - START 3
     611 00001320                   WL      0,0                     ;S26 - START 4
     612 00001350                   WL      VOLBTN_PID,VOLBTN_PRESS ;S27 - VOLUME DOWN
     613 00001380                   WL      VOLBTN_PID,VOLBTN_PRESS ;S28 - VOLUME UP
     614 000013b0                   WL      0,0                     ;S29
     615 000013e0                   WL      0,0                     ;S30
     616 00001410                   WL      CC_PID,DBV                      ;S31
     617                    
     618                            .else
     619                    
     620                            WL      PSWPID,plyr_strtb4      ;S7 IO20 - START 4
     621                            WL      0,0                     ;S1
     622                            WL      0,0                     ;S2
     623                            WL      0,0                     ;S3
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   13

     624                            WL      0,0                     ;S4
     625                            WL      0,0                     ;S5
     626                            WL      0,0                     ;S6
     627                            WL      PSWPID,plyr_strtb3      ;S7 - START 3
     628                            WL      0,0                     ;S8
     629                            WL      0,0                     ;S9
     630                            WL      0,0                     ;S10
     631                            WL      0,0                     ;S11
     632                            WL      0,0                     ;S12
     633                            WL      0,0                     ;S13
     634                            WL      0,0                     ;S14
     635                            WL      CC_PID,XCOIN            ;S15 - COIN 4
     636                    
     637                            WL      LC_PID,LCOIN            ;S16 - LEFT COIN (1)
     638                            WL      RC_PID,RCOIN            ;S17 - RIGHT COIN (2)
     639                            WL      PSWPID,plyr_strtb1      ;S18 - START 1
     640                            WL      SLAM_PID,SLAM_SW        ;S19 - SLAM TILT
     641                            WL      DIAG_PID,DIAG           ;S20 - TEST
     642                            WL      PSWPID,plyr_strtb2      ;S21 - START 2
     643                            WL      DIAG_PID,SERVICE        ;S22 - SERVICE CREDIT
     644                            WL      CC_PID,CCOIN            ;S23 - CENTER COIN (3)
     645                            WL      0,0                     ;S24
     646                            WL      0,0                     ;S25
     647                            WL      0,0                     ;S26
     648                            WL      0,0                     ;S27
     649                            WL      0,0                     ;S28
     650                            WL      0,0                     ;S29
     651                            WL      0,0                     ;S30 - Snd IRQ
     652                            WL      0,0                     ;S31
     653                            .endif
     654                    
     655 00001440           are_we_waiting_for_inits
     656 00001440     4d00          move    a8,a0
     657 00001450     0b00          addi    HI_INPUT_PID,a0
         00001460     0137  
     658 00001470     5621          clr     a1
     659 00001480     03e1          not     a1
     660 00001490     c080          jauc    EXISTP
         000014a0 00000000! 
     661                    
     662                    ***************************************************************
     663                    * plyr_strtbx - Process player start button (Process)
     664                    
     665 000014c0            SUBR   plyr_strtb1
     666 000014c0     5708          clr     a8                      ;A8=Player #
     667 000014d0     c001          jruc    zxago
     668                    
     669 000014e0            SUBR   plyr_strtb2
     670 000014e0     1828          movk    1,a8
     671                    
     672 000014f0           zxago
     673                    
     674 000014f0     05a0          move    @GAMSTATE,a0
         00001500 000006b0- 
     675 00001520     ce00          jrn     zxadie                  ;In diagnostics?
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   14

         00001530     0139  
     676                    
     677 00001540     0b40          cmpi    INPARTY,a0
         00001550     fff9  
     678 00001560     ca00          jreq    zxadie                  ;don't interrupt the win sequence
         00001570     0135  
     679                    
     680 00001580     05ae          move    @PSTATUS2,a14
         00001590 00000000! 
     681 000015b0     4b0e          btst    a8,a14
     682 000015c0     cb00          jrnz    zxadie                  ;Player already started?
         000015d0     012f  
     683                    
     684                    ;New start.  kill the player's score and win count
     685                    
     686 000015e0                   PUSH    a0
     687 000015f0     09e2          MOVI    process_ptrs,A2
         00001600 00000930- 
     688 00001620     09e0          movi    p1winstreak,a0
         00001630 00002190- 
     689 00001650     09e4          movi    p1winstreakd,a4
         00001660 000021b0- 
     690 00001680     09e1          movi    entered_inits,a1
         00001690 00000000! 
     691 000016b0     09e3          movi    MATCH_TIMERS,a3
         000016c0 00000000! 
     692 000016e0     09ee          movi    p1ws_award,a14
         000016f0 00000000! 
     693 00001710     4d08          move    a8,a8
     694 00001720     ca12          jrz     zxarstp1scor
     695 00001730     09e2          MOVI    process_ptrs+020H,A2
         00001740 00000950- 
     696 00001760     09e0          movi    p2winstreak,a0
         00001770 000021a0- 
     697 00001790     09e4          movi    p2winstreakd,a4
         000017a0 000021c0- 
     698 000017c0     09e1          movi    entered_inits+030h,a1
         000017d0 00000030! 
     699 000017f0     09e3          movi    MATCH_TIMERS+020H,a3
         00001800 00000020! 
     700 00001820     09ee          movi    p2ws_award,a14
         00001830 00000000! 
     701 00001850           zxarstp1scor
     702 00001850     0d5f          calla   rst_winstreak_awards    ;reset player winstreak awards
         00001860 00000000! 
     703 00001880                   PUSH    a0
     704 00001890     5600          clr     a0
     705 000018a0     4d08          move    a8,a8
     706 000018b0     ca01          jrz     zxado_dmsg_rst
     707 000018c0     1820          movk    1,a0
     708 000018d0           zxado_dmsg_rst
     709 000018d0     0d5f          calla   reset_dufus_msgs
         000018e0 00000000! 
     710 00001900     4d00          move    a8,a0
     711 00001910     0d5f          calla   clear_icon_total
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   15

         00001920 00000000! 
     712 00001940     4c08          move    a0,a8
     713 00001950                   PULL    a0
     714                    ;       calla   dufus_msgs_on
     715 00001960     57ce          clr     a14
     716                    ;       move    a14,@belt_ask
     717 00001970     81c0          move    a14,*a0,W               ;wins
     718 00001980     83c1          MOVE    A14,*A1,L               ;entered_inits
     719 00001990     83c2          MOVE    A14,*A2,L               ;process_ptrs
     720 000019a0     83c3          MOVE    A14,*A3,L               ;MATCH_TIMERS
     721                    
     722 000019b0     8480          move    *a4,a0
     723 000019c0     ce01          jrn     zxaa4ok
     724 000019d0     81c4          move    a14,*a4,W               ;wins vs drones
     725 000019e0           zxaa4ok
     726                    
     727 000019e0                   PULL    a0
     728                    
     729 000019f0     05ae          move    @OLD_PSTATUS2,a14
         00001a00 00000000! 
     730 00001a20     4b0e          btst    a8,a14
     731 00001a30     ca04          jrz     zxareg                  ;Player on buyin screen?
     732                    ;On the buyin screen.
     733 00001a40     0b40          cmpi    INSELECT,a0
         00001a50     fffd  
     734 00001a60     ca32          jreq    zxastart_from_waitcont
     735 00001a70                   LOCKUP
     736                    
     737 00001a80           zxareg
     738                    
     739 00001a80     0d5f          calla   CR_STRTP                ;not a continue.  die on insuff $$
         00001a90 00000000! 
     740 00001ab0     c880          jalo    zxadie
         00001ac0 000028d0' 
     741                    
     742 00001ae0     05a0          move    @GAMSTATE,a0
         00001af0 000006b0- 
     743 00001b10     0b40          cmpi    INAMODE,a0
         00001b20     fffe  
     744 00001b30     ca38          jreq    zxastart_from_amode     ;New start from amode?
     745                    
     746 00001b40     0b40          cmpi    INGAMEOVER,a0
         00001b50     fff8  
     747 00001b60     ca3f          jreq    zxastart_from_gameover  ;just like attract mode, really
     748                    
     749 00001b70     0b40          cmpi    INSELECT,a0
         00001b80     fffd  
     750 00001b90     ca78          jreq    zxastart_from_select
     751                    
     752 00001ba0     0b40          cmpi    INPREGAME,a0
         00001bb0     fffc  
     753 00001bc0     ca00          jreq    zxastart_from_pregame
         00001bd0     0080  
     754                    
     755 00001be0     0b40          cmpi    INPREGAME2,a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   16

         00001bf0     fff6  
     756 00001c00     ca06          jreq    zxastart_from_midgame
     757                    
     758 00001c10     0b40          cmpi    INGAME,a0
         00001c20     fffb  
     759 00001c30     ca03          jreq    zxastart_from_midgame
     760                    
     761 00001c40                   LOCKUP
     762                    
     763 00001c50     c000          jruc    zxadie                  ;cases we forgot...
         00001c60     00c6  
     764                    
     765 00001c70           zxastart_from_midgame
     766                    
     767 00001c70     09c0          movi    AUD_TOTSTARTS,a0        ;inc total starts audit
         00001c80     000e  
     768 00001c90     0d5f          calla   AUD1
         00001ca0 00000000! 
     769                    
     770 00001cc0     0d5f          calla   P_START                 ;eat the creds
         00001cd0 00000000! 
     771                    
     772 00001cf0                   CREATE  NO_PID,game_interrupt           ;create the game proc
     773                    
     774 00001d70     c000          jruc    zxaset_pstatus_and_die
         00001d80     0088  
     775                    
     776 00001d90           zxastart_from_waitcont
     777                    
     778 00001d90     0d3f          callr   are_we_waiting_for_inits
         00001da0     ff69  
     779 00001db0     cb00          jrnz    zxadie
         00001dc0     00b0  
     780                    
     781 00001dd0     0d5f          calla   CR_CONTP                ;enuff creds?
         00001de0 00000000! 
     782 00001e00     c880          jalo    zxadie
         00001e10 000028d0' 
     783 00001e30     0d5f          calla   P_CONT                  ;eat the creds
         00001e40 00000000! 
     784                    
     785 00001e60     09c0          movi    AUD_CONTTAKN,a0         ;inc continues taken audit
         00001e70     002d  
     786 00001e80     0d5f          calla   AUD1
         00001e90 00000000! 
     787                    
     788                    
     789 00001eb0     c075          jruc    zxaset_pstatus_and_die  ;waitcont watches for PSTATUS
     790                                                            ; changes, so we don't need to
     791                    
     792 00001ec0           zxastart_from_amode
     793                    
     794 00001ec0     5600          clr     a0
     795                    
     796 00001ed0     0580          move    a0,@are_we_waiting_f
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   17

         00001ee0 00000000! 
     797 00001f00     0580          move    a0,@OLD_PSTATUS
         00001f10 00000140- 
     798 00001f30     0d5f          CALLA   INIT_LADDER_TABLE
         00001f40 00000000! 
     799                    
     800 00001f60           zxastart_from_gameover
     801 00001f60     1b20          movk    25,a0
     802 00001f70     0580          move    a0,@robo_icon_trigger
         00001f80 00002300- 
     803                    
     804 00001fa0     1820          movk    1,a0
     805 00001fb0     0580          move    a0,@no_pin_check
         00001fc0 00000100- 
     806 00001fe0     0580          move    a0,@belt_ask
         00001ff0 00000110- 
     807                    
     808 00002010     09c0          movi    AUD_PRESTARTS,a0        ;inc attract mode starts audit
         00002020     000f  
     809 00002030     0d5f          calla   AUD1
         00002040 00000000! 
     810                    
     811 00002060     09c0          movi    AUD_TOTSTARTS,a0        ;inc total starts audit
         00002070     000e  
     812 00002080     0d5f          calla   AUD1
         00002090 00000000! 
     813                    
     814 000020b0     0d5f          calla   P_START                 ;eat the creds
         000020c0 00000000! 
     815                    
     816                            ;Reset the volume levels here
     817 000020e0     0d5f          calla   KILL_ALL_CHANNELS
         000020f0 00000000! 
     818 00002110     0d5f          calla   RESET_VOICE_QUEUE
         00002120 00000000! 
     819                    
     820 00002140     09c0          movi    ADJVOLUME,a0
         00002150     001c  
     821 00002160     0d5f          calla   GET_ADJ
         00002170 00000000! 
     822 00002190                   BADCHK  a0,0,255,28             ;reg, lo, hi, val if bad
     823 00002220     0d5f          calla   set_volume
         00002230 00000000! 
     824                    
     825                    ;If any button is pressed at the same time as the start button,
     826                    ;then skip all select stuff.  Otherwise, game acts as it will on location
     827                    
     828 00002250     5600          clr     a0
     829 00002260     0580          move    a0,@match_cnt
         00002270 000008d0- 
     830                    
     831                    
     832                     .if DEBUG
     833                            move    a0,@skip_select
     834                            move    a0,@fight_debug
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   18

     835                    
     836                            .ref    get_all_buttons_cur2
     837                            calla   get_all_buttons_cur2
     838                            jrz     zxanobutn
     839                    
     840                            movk    1,a0
     841                            move    a0,@skip_select
     842                            move    a0,@fight_debug
     843                    
     844                            .ref    get_all_sticks_cur2
     845                            calla   get_all_sticks_cur2
     846                            jrz     zxanobutn
     847                    
     848                            movi    -1,a0
     849                            move    a0,@skip_select
     850                    
     851                    zxanobutn
     852                     .endif
     853                    
     854                    
     855 00002290                   CREATE  NO_PID,game_loop                ;create the game proc
     856 00002310     c02f          jruc    zxaset_pstatus_and_die
     857                    
     858                    
     859 00002320           zxastart_from_select
     860 00002320     0d3f          callr   are_we_waiting_for_inits
         00002330     ff10  
     861 00002340     cb58          jrnz    zxadie
     862                    
     863 00002350     09c0          movi    AUD_TOTSTARTS,a0        ;creds have already been checked,
         00002360     000e  
     864 00002370     0d5f          calla   AUD1                    ; so we know we have enough.
         00002380 00000000! 
     865 000023a0     0d5f          calla   P_START
         000023b0 00000000! 
     866 000023d0     c023          jruc    zxaset_pstatus_and_die
     867                    
     868                    
     869 000023e0           zxastart_from_pregame
     870 000023e0     09c0          movi    AUD_TOTSTARTS,a0        ;total starts
         000023f0     000e  
     871 00002400     0d5f          calla   AUD1
         00002410 00000000! 
     872 00002430     0d5f          calla   P_START                 ;eat creds
         00002440 00000000! 
     873 00002460                   CREATE  NO_PID,game_loop                ;make a new game loop.  This will
     874                    
     875 000024e0     5663          clr     a3
     876 000024f0     0d5f          calla   SNDSND
         00002500 00000000! 
     877                    
     878 00002520     0d5f          calla   KILL_ALL_CHANNELS
         00002530 00000000! 
     879 00002550     0d5f          calla   RESET_VOICE_QUEUE
         00002560 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   19

     880                    
     881 00002580     1963          movk    11,a3                   ;Little rap ditty
     882 00002590     0d5f          calla   SNDSND
         000025a0 00000000! 
     883                    
     884 000025c0     5600          clr     a0
     885 000025d0     0580          move    a0,@are_we_waiting_f
         000025e0 00000000! 
     886 00002600     0300          jruc    zxaset_pstatus_and_die  ;kill the old one and drop back
     887                                                            ;into the select screen.
     888                    
     889 00002610           zxaset_pstatus_and_die
     890 00002610     1820          movk    1,a0                    ;set the player bit in PSTATUS
     891 00002620     6300          sll     a8,a0
     892 00002630     05ae          move    @PSTATUS2,a14
         00002640 00000000! 
     893 00002660     540e          or      a0,a14
     894 00002670     058e          move    a14,@PSTATUS
         00002680 00000130- 
     895 000026a0     05ae          MOVE    @PSTARTS,A14
         000026b0 00000150- 
     896 000026d0     540e          or      a0,a14
     897 000026e0     058e          move    a14,@PSTARTS
         000026f0 00000150- 
     898 00002710     5600          CLR     A0
     899 00002720     0580          MOVE    A0,@THIS_GAME_TIME
         00002730 00000000! 
     900 00002750     09c0          movi    49h,a0
         00002760     0049  
     901 00002770     0d5f          calla   triple_sound
         00002780 00000000! 
     902                    
     903 000027a0     5600          clr     a0
     904 000027b0     0580          MOVE    A0,@IRQSKYE
         000027c0 00000000! 
     905                    
     906 000027e0     09c0          movi    AUD_WINSTREAK,A0
         000027f0     0057  
     907 00002800     0d5f          calla   KILL_AUD
         00002810 00000000! 
     908 00002830     09c0          movi    AUD_PINSPEED,A0
         00002840     0058  
     909 00002850     0d5f          calla   KILL_AUD
         00002860 00000000! 
     910 00002880     09c0          movi    AUD_BEATEN,A0
         00002890     0059  
     911 000028a0     0d5f          calla   KILL_AUD
         000028b0 00000000! 
     912                    
     913 000028d0           zxadie  DIE
     914                    
     915                    
     916                    *****************************************************************************
     917                    * game loop
     918                    *
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   20

     919                    
     920 00002900                   STRUCTPD
     921 00002900                   LONG    BLINK_PROC
     922                    
     923 00002900            SUBRP  game_interrupt
     924                    
     925                    ;Someone has bought in during gameplay of a one player game!
     926                    ;Print challenger comes message
     927                    
     928 00002900     1820          movk    1,a0
     929 00002910     0580          move    a0,@HALT
         00002920 000006c0- 
     930                    
     931                    ;If a player buys in during a one player game.  We must decrement pxcpu_ladder
     932                    ;because we haven't defeated that cpu opponent yet!
     933                    
     934                            ;...but if the player has already lost, go ahead and dec.
     935 00002940     05a0          MOVE    @match_winner,a0
         00002950 00002170- 
     936 00002970     ca13          jrz     drxdecldr
     937                    
     938                            ;someone has won--figure out if it's our player.  We can't look at
     939                            ; PSTATUS because the other player has now bought in and it's gonna
     940                            ; be 3.  Instead, look at the process_ptrs.  There'll be a non-zero
     941                            ; value one of the first two, and that's our player.
     942 00002980     07ae          move    @process_ptrs,a14,L
         00002990 00000930- 
     943 000029b0     ca08          jrz     drxop2
     944 000029c0           drxop1  ;p1 is the human.  test bit 0 of match_winner
     945 000029c0     1fe0          btst    0,a0
     946 000029d0     cb15          jrnz    drxnodecldr
     947                    
     948                            ;p1 lost.  kill his PSTATUS bit.
     949 000029e0     09ce          movi    2,a14
         000029f0     0002  
     950 00002a00     058e          move    a14,@PSTATUS
         00002a10 00000130- 
     951                    
     952 00002a30     c007          jruc    drxdecldr
     953 00002a40           drxop2  ;p2 is the human.
     954 00002a40     1fc0          btst    1,a0
     955 00002a50     cb0d          jrnz    drxnodecldr
     956                    
     957                            ;p2 lost.  kill his PSTATUS bit.
     958 00002a60     09ce          movi    1,a14
         00002a70     0001  
     959 00002a80     058e          move    a14,@PSTATUS
         00002a90 00000130- 
     960                    
     961 00002ab0     07a0  drxdecldr       MOVE    @CURRENT_LADDER,A0,L
         00002ac0 00000000! 
     962 00002ae0     0be0          SUBI    020H,A0
         00002af0     ffdf  
     963 00002b00     0780          MOVE    A0,@CURRENT_LADDER,L
         00002b10 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   21

     964 00002b30           drxnodecldr
     965                    
     966                    ;If match/rnd winner anouncement is on screen, kill it
     967 00002b30     09c0          movi    ANNC_PID,a0
         00002b40     012e  
     968 00002b50     5621          clr     a1
     969 00002b60     03e1          not     a1
     970 00002b70     0d5f          calla   KILALL
         00002b80 00000000! 
     971                    
     972 00002ba0     09c0          movi    CYCPID,a0
         00002bb0     0110  
     973 00002bc0     5621          clr     a1
     974 00002bd0     03e1          not     a1
     975 00002be0     0d5f          calla   KILALL
         00002bf0 00000000! 
     976                    
     977 00002c10     09c0          movi    CLSNEUT|TYPTEXT|SUBTXT,a0
         00002c20     0701  
     978 00002c30     0d5f          calla   obj_del1c               ;delete text/plates
         00002c40 00000000! 
     979                    
     980 00002c60     09c0          movi    CLSNEUT|TYPTEXT|SUBMES1,a0
         00002c70     0702  
     981 00002c80     0d5f          calla   obj_del1c               ;delete text/plates
         00002c90 00000000! 
     982                    
     983 00002cb0           drxnope
     984                    
     985 00002cb0     09e2          movi    LN1b_setup,a2
         00002cc0 00004b80' 
     986 00002ce0     0d5f          calla   setup_message
         00002cf0 00000000! 
     987 00002d10     09c0          movi    CLSNEUT|TYPTEXT|SUBMES1,a0
         00002d20     0702  
     988 00002d30     0580          move    a0,@mess_objid          ;OBJ ID's for text
         00002d40 00000000! 
     989 00002d60     09e4          movi    drxstr_game,a4
         00002d70 00004cc0' 
     990 00002d90     0d5f          calla   print_string_C2
         00002da0 00000000! 
     991                    
     992 00002dc0     09e2          movi    LN2b_setup,a2
         00002dd0 00004c20' 
     993 00002df0     0d5f          calla   setup_message
         00002e00 00000000! 
     994 00002e20     09c0          movi    CLSNEUT|TYPTEXT|SUBMES1,a0
         00002e30     0702  
     995 00002e40     0580          move    a0,@mess_objid          ;OBJ ID's for text
         00002e50 00000000! 
     996 00002e70     09e4          movi    drxstr_over,a4
         00002e80 00004d18' 
     997 00002ea0     0d5f          calla   print_string_C2
         00002eb0 00000000! 
     998                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   22

     999 00002ed0     0d5f          calla   pal_clean
         00002ee0 00000000! 
    1000                    
    1001                    
    1002                    
    1003                    
    1004 00002f00     09e3          movi    ACTIVE,a3,L
         00002f10 00000000! 
    1005                    
    1006 00002f30     8663  drxlp   move    *a3,a3,L        ;Get next
    1007 00002f40     ca09          jrz     drxx            ;End?
    1008 00002f50     b660          move    *a3(PWAKE),a0,L
         00002f60     00e0  
    1009 00002f70     b46e          move    *a3(PTIME),a14  ;Add sleep
         00002f80     0030  
    1010 00002f90     0b0e          addi    3*60,a14
         00002fa0     00b4  
    1011 00002fb0     b1c3          move    a14,*a3(PTIME)
         00002fc0     0030  
    1012 00002fd0     c0f5          jruc    drxlp
    1013 00002fe0           drxx
    1014                    
    1015 00002fe0                   CREATE  SET_IMAGES_PID,DO_SET_IMAGES
    1016                            .ref    fade_down_half
    1017 00003060     09ea          movi    drxno_fade,a10
         00003070 00004b20' 
    1018 00003090                   CREATE  FADE_PID,fade_down_half
    1019                    
    1020 00003110                   SLEEP   120
    1021                    
    1022 00003160     0d5f          calla   KILL_ALL_CHANNELS
         00003170 00000000! 
    1023 00003190     0d5f          calla   RESET_VOICE_QUEUE
         000031a0 00000000! 
    1024                    
    1025 000031c0     09c0          movi    ADJVOLUME,a0
         000031d0     001c  
    1026 000031e0     0d5f          calla   GET_ADJ
         000031f0 00000000! 
    1027 00003210                   BADCHK  a0,0,255,28             ;reg, lo, hi, val if bad
    1028 000032a0     0d5f          calla   set_volume
         000032b0 00000000! 
    1029                    
    1030 000032d0     1820          movk    1,a0
    1031 000032e0     0580          move    a0,@no_pin_check
         000032f0 00000100- 
    1032 00003310     1963          movk    11,a3                   ;Little rap ditty
    1033 00003320     0d5f          calla   SNDSND
         00003330 00000000! 
    1034                    
    1035                    
    1036 00003350            SUBRP  game_loop
    1037                    
    1038                     .if DEBUG
    1039                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   23

    1040                            movk    3,a0            ;2 humans
    1041                            .ref    skip_select
    1042                            move    @skip_select,a14
    1043                            jrz     drxnoskp
    1044                            jrp     drxnodrn
    1045                            movk    2,a0            ;1 human 1 drone
    1046                    drxnodrn
    1047                            move    a0,@PSTATUS
    1048                    drxnoskp
    1049                     .endif
    1050                    
    1051                    ;       .if DEBUG
    1052                    ;       ;don't allow this out in the field yet.
    1053                    ;       JSRP    robo_check
    1054                    ;       .endif
    1055                    
    1056 00003350     1820          movk    1,a0
    1057 00003360     0580          move    a0,@NUM_OPPS
         00003370 00000000! 
    1058                    
    1059 00003390                   JSRP    select_screen
    1060 00003400     5600          clr     a0
    1061 00003410     0580          move    a0,@no_pin_check
         00003420 00000100- 
    1062                    
    1063 00003440           do_pregame
    1064                    
    1065                            ;clear match_winner
    1066 00003440     57ce          clr     a14
    1067 00003450     058e          move    a14,@match_winner
         00003460 00002170- 
    1068                    
    1069                    ;       .ref    robo_check
    1070                    ;
    1071                    ;       JSRP    robo_check              ; RETURNS ONLY
    1072 00003480     186e          movk    INPREGAME,a14           ;set GAMSTATE
    1073 00003490     058e          move    a14,@GAMSTATE
         000034a0 000006b0- 
    1074 000034c0     09ce          movi    PREGAME_PID,a14         ;set our PID
         000034d0     0400  
    1075 000034e0     b1cd          move    a14,*a13(PROCID)
         000034f0     0020  
    1076                    
    1077 00003500     05a0          move    @match_cnt,a0
         00003510 000008d0- 
    1078 00003530     1020          inc     a0
    1079 00003540     0580          move    a0,@match_cnt
         00003550 000008d0- 
    1080                    
    1081 00003570     05a0          move    @PSTATUS2,A0
         00003580 00000000! 
    1082 000035a0     0b40          CMPI    3,A0
         000035b0     fffc  
    1083 000035c0     ca05          JREQ    NOT_FINISHED_GAME
    1084                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   24

    1085 000035d0     0d5f          calla   is_final_match
         000035e0 00000000! 
    1086 00003600     c800          jrc     finished_game
         00003610     0102  
    1087                    
    1088 00003620           NOT_FINISHED_GAME
    1089 00003620     182e          movk    1,a14
    1090 00003630     058e          move    a14,@do_show_options
         00003640 00000000! 
    1091 00003660                   JSRP    pregame_show
    1092                            
    1093 000036d0           drxgame
    1094 000036d0     09ce          movi    INGAME,a14              ;set GAMSTATE
         000036e0     0004  
    1095 000036f0     058e          move    a14,@GAMSTATE
         00003700 000006b0- 
    1096 00003720     09ce          movi    GAME_PID,a14            ;set our PID
         00003730     0500  
    1097 00003740     b1cd          move    a14,*a13(PROCID)
         00003750     0020  
    1098                    
    1099 00003760     5600          clr     a0
    1100 00003770     0580          move    a0,@p1rounds
         00003780 00002200- 
    1101 000037a0     0580          move    a0,@p2rounds
         000037b0 00002210- 
    1102 000037d0     0580          move    a0,@in_finish_move
         000037e0 00000000! 
    1103                    
    1104 00003800     1820          movk    1,a0
    1105 00003810     0580          move    a0,@current_round
         00003820 000021f0- 
    1106                    
    1107                            ;set match_start_time
    1108 00003840     07ae          move    @PCNT,a14,L
         00003850 00000170- 
    1109 00003870     078e          move    a14,@match_start_time,L
         00003880 00002350- 
    1110                    
    1111                            ;do the match
    1112 000038a0                   JSRP    start_match
    1113                    
    1114                            ;inc the TOTAL GAMES audit
    1115 00003910     09c0          movi    AUD_TOTALGAMES,A0
         00003920     005c  
    1116 00003930     0d5f          CALLA   AUD1
         00003940 00000000! 
    1117                    
    1118                    ;The only time we return from start_match is when the match is over
    1119                    ;and the game must goto:
    1120                    
    1121                    ;1.  Buy-in screen for 1 or 2 player games
    1122                    ;2.  Ladder screen for the next matchup
    1123                    ;3.  Finale screens
    1124                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   25

    1125                            ;clear out howard speech flag so he can say it again on
    1126                            ; new select screen.
    1127 00003960     5600          CLR     A0
    1128 00003970     0580          MOVE    A0,@DONE_HOWARD
         00003980 00000000! 
    1129                    
    1130                            ;set delay before allowing player to select a wrestler
    1131 000039a0     09c0          movi    60,a0
         000039b0     003c  
    1132 000039c0     0580          move    a0,@are_we_waiting_f
         000039d0 00000000! 
    1133                    
    1134                            ;If that was a royal rumble, branch right now.  The following code
    1135                            ; assumes that PLYRNUMs match PLYR_SIDEs for human players.
    1136 000039f0     05ae          move    @royal_rumble,a14
         00003a00 00000000! 
    1137 00003a20     cb53          jrnz    drxfinished_rumble
    1138                    
    1139                            ;Did a human player lose?
    1140 00003a30     05a0          move    @PSTATUS2,a0
         00003a40 00000000! 
    1141 00003a60     05a1          move    @match_winner,a1
         00003a70 00002170- 
    1142 00003a90     5220          andn    a1,a0
    1143 00003aa0     cb0c          jrnz    drxgo_buyin
    1144                    
    1145                    ;This player will keep on playing.
    1146                    ;Display ladder of progreesion which shows his next opponent.
    1147                    
    1148 00003ab0     05aa          move    @match_winner,a10
         00003ac0 00002170- 
    1149 00003ae0     142a          dec     a10
    1150 00003af0                   JSRP    pin_speed_in_case
    1151 00003b60     c08d          jruc    do_pregame
    1152                    
    1153 00003b70           drxgo_buyin
    1154                    ;Display 2 player buyin screen.
    1155                    ;Turn on appropriate messages for each player
    1156                    ;One guy lost, check if he achieved a high score.  (Most wins)
    1157                    ;If so, allow him to enter initials just on his panel.
    1158                    
    1159                            ;if the loser had a win streak, do a random sound call.
    1160 00003b70     0d5f          calla   loser_snd
         00003b80 00000000! 
    1161                    
    1162                            ;save old PSTATUS
    1163 00003ba0     05a0          move    @PSTATUS2,a0
         00003bb0 00000000! 
    1164 00003bd0     0580          move    a0,@OLD_PSTATUS
         00003be0 00000140- 
    1165                    
    1166                            ;did a human win?  Check by ANDing match_winner with PSTATUS.
    1167 00003c00     05a0          move    @PSTATUS2,a0
         00003c10 00000000! 
    1168 00003c30     05a1          move    @match_winner,a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   26

         00003c40 00002170- 
    1169 00003c60     5020          and     a1,a0
    1170 00003c70     cb0c          jrnz    drxhuman_won
    1171                    
    1172                            ;The cpu won
    1173 00003c80     5600          clr     a0
    1174 00003c90     0580          move    a0,@match_winner
         00003ca0 00002170- 
    1175                    
    1176                            ;decrement CURRENT_LADDER, because NEXT_IN_LADDER automatically
    1177                            ; increments it.
    1178 00003cc0     07a0          move    @CURRENT_LADDER,A0,L
         00003cd0 00000000! 
    1179 00003cf0     0be0          subi    20h,a0
         00003d00     ffdf  
    1180 00003d10     0780          move    a0,@CURRENT_LADDER,L
         00003d20 00000000! 
    1181                    
    1182 00003d40           drxhuman_won
    1183                            ;use match_winner as our new PSTATUS.
    1184 00003d40     05a0          move    @match_winner,a0
         00003d50 00002170- 
    1185 00003d70     0580          move    a0,@PSTATUS
         00003d80 00000130- 
    1186                    
    1187 00003da0     0d5f          calla   is_final_match
         00003db0 00000000! 
    1188 00003dd0     c800          jrc     finished_game
         00003de0     0085  
    1189                    
    1190 00003df0                   JSRP    buyin_select
    1191                    
    1192                    ;Clear the loser's wincount
    1193 00003e60     09e1          movi    p1winstreak,a1
         00003e70 00002190- 
    1194 00003e90     05a0          move    @match_winner,a0
         00003ea0 00002170- 
    1195                    
    1196 00003ec0     0b40          cmpi    1,a0
         00003ed0     fffe  
    1197 00003ee0     cb03          jrnz    drxnotp1
    1198 00003ef0     09e1          movi    p2winstreak,a1
         00003f00 000021a0- 
    1199                    
    1200 00003f20     57ce  drxnotp1        clr     a14
    1201 00003f30     81c1          move    a14,*a1
    1202                    
    1203 00003f40     c000          jruc    do_pregame
         00003f50     ff4e  
    1204                    
    1205                    ****
    1206                    
    1207 00003f60           drxfinished_rumble
    1208                    
    1209                            ;save old PSTATUS
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   27

    1210                    ;       move    @PSTATUS2,a14
    1211                    ;       move    a14,@OLD_PSTATUS
    1212                    
    1213                            ;...no, DON'T save the old PSTATUS.  For whatever reason, the
    1214                            ;buyin/select stuff won't work with a PSTATUS of 0 and an
    1215                            ;OLD_PSTATUS of 3.  Evidently two people losing is too traumatic
    1216                            ;an event for this rickety code to deal with.  So we just pretend.
    1217                            ;Maybe we fix this before we ship, maybe we don't.  It works.
    1218                    
    1219                            ;create a set_images process to keep us animating while this
    1220                            ; stuff is going on.
    1221 00003f60                   CREATE  SET_IMAGES_PID,DO_SET_IMAGES
    1222 00003fe0                   PUSHP   a0              ;store set_images proc address
    1223 00003ff0                   JSRP    show_most_damage
    1224                    
    1225 00004060     182e          movk    1,a14
    1226 00004070     058e          move    a14,@OLD_PSTATUS
         00004080 00000140- 
    1227                    
    1228                            ;did the humans win?
    1229 000040a0     05a0          move    @p1winstreak,a0
         000040b0 00002190- 
    1230 000040d0     57ce          clr     a14
    1231 000040e0     058e          move    a14,@p1winstreak
         000040f0 00002190- 
    1232 00004110     058e          move    a14,@p2winstreak
         00004120 000021a0- 
    1233 00004140     058e          move    a14,@p1oldwinstreak
         00004150 000021d0- 
    1234 00004170     058e          move    a14,@p2oldwinstreak
         00004180 000021e0- 
    1235 000041a0                   TEST    a0
    1236 000041b0     ca27          jrz     drxrr_cpuwon
    1237                    
    1238                            ;create a set_images process to keep us animating while this
    1239                            ; stuff is going on.
    1240                    
    1241                            ;set GAMSTATE to INPARTY--disallows buyins
    1242 000041c0     18ce          movk    INPARTY,a14
    1243 000041d0     058e          move    a14,@GAMSTATE
         000041e0 000006b0- 
    1244                    
    1245 00004200                   JSRP    do_fireworks
    1246                    
    1247 00004270                   PULLP   a0              ;restore set_images proc address
    1248 00004280     0d5f          calla   KILL
         00004290 00000000! 
    1249                    
    1250                            ;inc the 'human wins in rumble' audit
    1251 000042b0     09c0          movi    AUD_RRWINS,a0
         000042c0     0065  
    1252 000042d0     0d5f          calla   AUD1
         000042e0 00000000! 
    1253                    
    1254 00004300                   JSRP    GAME_BEATEN
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   28

    1255                    
    1256                            .if     RR_AWARD = 1
    1257                    
    1258                            ;zero entered_inits
    1259 00004370     57ce          clr     a14
    1260 00004380     078e          move    a14,@entered_inits,L
         00004390 00000000! 
    1261 000043b0     078e          move    a14,@entered_inits+20h,L
         000043c0 00000020! 
    1262 000043e0     078e          move    a14,@entered_inits+40h,L
         000043f0 00000040! 
    1263                            
    1264 00004410     c000          jruc    do_pregame
         00004420     ff01  
    1265                            .endif
    1266                    
    1267 00004430           drxrr_cpuwon
    1268                    
    1269 00004430     57ce          clr     a14
    1270 00004440     058e          move    a14,@PSTATUS
         00004450 00000130- 
    1271 00004470     186e          movk    3,a14
    1272 00004480     058e          move    a14,@OLD_PSTATUS
         00004490 00000140- 
    1273 000044b0     058e          move    a14,@rr_loss
         000044c0 00000000! 
    1274 000044e0                   JSRP    buyin_select
    1275                    
    1276                            ;clear royal_rumble
    1277 00004550     57ce          clr     a14
    1278 00004560     058e          move    a14,@rr_loss
         00004570 00000000! 
    1279 00004590     058e          move    a14,@royal_rumble
         000045a0 00000000! 
    1280                    
    1281 000045c0     05ae          move    @PSTATUS2,a14
         000045d0 00000000! 
    1282 000045f0     cb00          jrnz    do_pregame
         00004600     fee3  
    1283                    
    1284                            ;nobody bought in.  drop to game over
    1285 00004610     c080          jauc    do_game_over
         00004620 00000000! 
    1286                    ****
    1287                    
    1288 00004640           finished_game
    1289                            ;player has won the entire game.
    1290                    
    1291                            ;set GAMSTATE to INPARTY--disallows buyins
    1292 00004640     18ce          movk    INPARTY,a14
    1293 00004650     058e          move    a14,@GAMSTATE
         00004660 000006b0- 
    1294                    
    1295                    ;Audit total time for a 1 credit game
    1296 00004680     09c0          MOVI    AUD_CREDLEN,A0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   29

         00004690     005d  
    1297 000046a0     05a1          MOVE    @THIS_GAME_TIME,A1
         000046b0 00000000! 
    1298 000046d0     0d5f          CALLA   AUD
         000046e0 00000000! 
    1299 00004700     09c0          MOVI    AUD_CREDLENNUM,A0
         00004710     005e  
    1300 00004720     0d5f          CALLA   AUD1
         00004730 00000000! 
    1301 00004750     5600          CLR     A0
    1302 00004760     0580          MOVE    A0,@THIS_GAME_TIME
         00004770 00000000! 
    1303 00004790     0580          MOVE    A0,@PSTARTS
         000047a0 00000150- 
    1304                    
    1305                    
    1306                            ;create a set_images process to keep us animating while this
    1307                            ; stuff is going on.
    1308 000047c0                   CREATE  SET_IMAGES_PID,DO_SET_IMAGES
    1309 00004840                   PUSHP   a0
    1310 00004850                   JSRP    do_fireworks
    1311 000048c0                   PULLP   a0
    1312 000048d0     0d5f          calla   KILL
         000048e0 00000000! 
    1313 00004900     0d5f          calla   is_8_on_1
         00004910 00000000! 
    1314 00004930     c907          jrnc    drxno_stories
    1315 00004940                   JSRP    show_wrestler_end_story
    1316 000049b0           drxno_stories
    1317 000049b0                   JSRP    GAME_BEATEN
    1318 00004a20                   JSRP    CREATE_TEXT_LINE
    1319 00004a90     c080          JAUC    THIS_GAME_IS_BEATEN
         00004aa0 00000000! 
    1320                    
    1321 00004ac0           drxbuyin_mod
    1322 00004ac0 00000000!         .long   wwfselbkBMOD
    1323 00004ae0     ffd8          .word   -40,0
    1324 00004b00 00000000          .long   0
    1325                    
    1326 00004b20           drxno_fade
    1327 00004b20 00000000!         .long   WGSF_Y_P,scorep,0
    1328 00004b80           LN1b_setup
    1329 00004b80                   JAM_STR wgsf24_ascii,12,0,200,77,WGSF_Y_P,0
    1330 00004c20           LN2b_setup
    1331 00004c20                   JAM_STR wgsf24_ascii,6,0,200,120,WGSF_Y_P,0
    1332 00004cc0           drxstr_game
    1333 00004cc0       43          .byte   "CHALLENGER",0
    1334 00004d18           drxstr_over
    1335 00004d18       46          .byte   "FOUND!",0
    1336 00004d50                   .even
    1337                    
    1338                    
    1339 00004d50           pprompt
    1340 00004d50       50          .string "PLAYER ",0
    1341 00004d90                   .even
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   30

    1342 00004d90           ydid_prompt
    1343 00004d90       20          .string " INFLICTED",0
    1344 00004df0                   .even
    1345 00004df0           pct_damage
    1346 00004df0       25          .string "% OF THE TOTAL DAMAGE!!!",0
    1347 00004ec0                   .even
    1348 00004ec0           pprompt_setup
    1349                            .ref    osgemd_ascii
    1350                    ;       JAM_STR osgmd8_ascii,10,0,200,140,SGMD8YEL,print_string_C2
    1351 00004ec0                   JAM_STR osgemd_ascii,10,0,200,140,BLUE,print_string_C2
    1352 00004f60                   .even
    1353 00004f60           pct_damage_setup
    1354                    ;       JAM_STR osgmd8_ascii,10,0,200,155,SGMD8YEL,print_string_C2
    1355 00004f60                   JAM_STR osgemd_ascii,10,0,200,163,BLUE,print_string_C2
    1356 00005000                   .even
    1357 000181e0                   .bss    dmg_ram,16*64
    1358                    
    1359                    *************************************************************************
    1360                    *
    1361 00005000            SUBRP  show_most_damage
    1362 00005000                   PUSHP   a0,a1,a2,a4
    1363 00005020                   PUSHP   a8,a9,a10,a11
    1364                    
    1365 00005040     576b          clr     a11                     ; Clear out plyr damage totals
    1366 00005050     5621          clr     a1                      ; Clear total damage done
    1367 00005060     078b          move    a11,@plyr_dmg_given,L
         00005070 00002370- 
    1368                    
    1369 00005090     09e8          movi    process_ptrs,a8         ; Get process pointers
         000050a0 00000930- 
    1370 000050c0           pyzfind_damage_lp
    1371 000050c0     9709          move    *a8+,a9,L               ; Get player process pointer
    1372 000050d0     ca0e          jrz     pyzfind_done            ; are we done ? - br = yes
    1373 000050e0     b52a          move    *a9(PLYR_TYPE),a10      ; Get the player type
         000050f0     05a0  
    1374 00005100     cbfb          jrnz    pyzfind_damage_lp               ; Is this a drone - br = yes
    1375 00005110     b52b          move    *a9(DAMAGE_GIVEN),a11   ; Get damage this player did
         00005120     0dc0  
    1376 00005130     4161          add     a11,a1                  ; Total the damage
    1377 00005140     b52a          move    *a9(PLYRNUM),a10        ; Which player is this
         00005150     0580  
    1378 00005160     248a          sll     4,a10                   ; Point to temp storage for this player
    1379 00005170     0b2a          addi    plyr_dmg_given,a10
         00005180 00002370- 
    1380 000051a0     816a          move    a11,*a10                ; Store his damage
    1381 000051b0     c0f0          jruc    pyzfind_damage_lp               ; Keep going
    1382 000051c0           pyzfind_done
    1383 000051c0     182b          movk    1,a11                   ; Set player 1
    1384 000051d0     05a8          move    @plyr_dmg_given,a8      ; Get player 1 damage
         000051e0 00002370- 
    1385 00005200     05a9          move    @plyr_dmg_given+10h,a9  ; Get player 2 damage
         00005210 00002380- 
    1386 00005230     4909          cmp     a8,a9                   ; Player 1 did more damage ?
    1387 00005240     c402          jrlt    pyzp1_most              ; br = yes
    1388 00005250     184b          movk    2,a11                   ; Set player 2
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   31

    1389 00005260     4d28          move    a9,a8                   ; Set damage done
    1390 00005270           pyzp1_most
    1391 00005270     4d09          move    a8,a9                   ; Set up for conversion to %
    1392 00005280     09ca          movi    100,a10                 ; Mult damage done by 100
         00005290     0064  
    1393 000052a0     5f49          mpyu    a10,a9
    1394 000052b0     5a29          divu    a1,a9                   ; Divide by total damage done
    1395                    
    1396 000052c0     09e2          movi    pprompt_setup,a2        ; Show which player did most damage
         000052d0 00004ec0' 
    1397 000052f0     0d5f          calla   setup_message
         00005300 00000000! 
    1398 00005320     09c4          movi    CLSDEAD,a4
         00005330     2000  
    1399 00005340     0584          move    a4,@mess_objid
         00005350 00000000! 
    1400 00005370     4d60          move    a11,a0
    1401 00005380     1841          movk    2,a1
    1402 00005390     0d5f          calla   dec_to_asc
         000053a0 00000000! 
    1403 000053c0     09e4          movi    pprompt,a4
         000053d0 00004d50' 
    1404 000053f0     0d5f          calla   copy_rom_string
         00005400 00000000! 
    1405 00005420     0d5f          calla   concat_string
         00005430 00000000! 
    1406 00005450     09e4          movi    ydid_prompt,a4
         00005460 00004d90' 
    1407 00005480     0d5f          calla   concat_rom_string
         00005490 00000000! 
    1408 000054b0     09e4          movi    message_buffer,a4
         000054c0 00000000! 
    1409 000054e0     0d5f          calla   print_string_C2
         000054f0 00000000! 
    1410                            
    1411 00005510     09e2          movi    pct_damage_setup,a2     ; Show how much damage he/she did
         00005520 00004f60' 
    1412 00005540     0d5f          calla   setup_message
         00005550 00000000! 
    1413 00005570     09c4          movi    CLSDEAD,a4
         00005580     2000  
    1414 00005590     0584          move    a4,@mess_objid
         000055a0 00000000! 
    1415 000055c0     4d20          move    a9,a0
    1416 000055d0     09c1          movi    100,a1
         000055e0     0064  
    1417 000055f0     0d5f          calla   dec_to_asc
         00005600 00000000! 
    1418 00005620     0d5f          calla   copy_string
         00005630 00000000! 
    1419 00005650     09e4          movi    pct_damage,a4
         00005660 00004df0' 
    1420 00005680     0d5f          calla   concat_rom_string
         00005690 00000000! 
    1421 000056b0     09e4          movi    message_buffer,a4
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   32

         000056c0 00000000! 
    1422 000056e0     0d5f          calla   print_string_C2
         000056f0 00000000! 
    1423                            .ref    hscore_colcyc
    1424                    
    1425 00005710     0d5f          calla   hscore_colcyc
         00005720 00000000! 
    1426 00005740     4c08          move    a0,a8
    1427 00005750                   SLEEP   TSEC                    ; Show for 1 second minimum
    1428                    
    1429 000057a0     09c9          movi    TSEC*2,a9               ; Allow upto 2 more seconds
         000057b0     006a  
    1430 000057c0           pyzwait_lp
    1431 000057c0                   SLEEPK  1
    1432 00005800     0d5f          calla   get_all_buttons_cur
         00005810 00000000! 
    1433 00005830     cb01          jrnz    pyzsd_exit
    1434 00005840     3d29          dsjs    a9,pyzwait_lp
    1435 00005850           pyzsd_exit
    1436 00005850     4d00          move    a8,a0
    1437 00005860     0d5f          calla   KILL
         00005870 00000000! 
    1438 00005890                   PULLP   a8,a9,a10,a11
    1439 000058b0                   PULLP   a0,a1,a2,a4
    1440 000058d0                   RETP
    1441                    
    1442                    
    1443                    *****************************************************************************
    1444                    ;Copy pXwinstreaks to pXoldwinstreaks, then
    1445                    ;increment winner's winstreak and clear loser's.
    1446                    
    1447 00005900            SUBR   increment_wincount
    1448                    
    1449                            ;save old streaks
    1450 00005900     05ae          move    @p1winstreak,a14
         00005910 00002190- 
    1451 00005930     058e          move    a14,@p1oldwinstreak
         00005940 000021d0- 
    1452 00005960     05ae          move    @p2winstreak,a14
         00005970 000021a0- 
    1453 00005990     058e          move    a14,@p2oldwinstreak
         000059a0 000021e0- 
    1454                    
    1455 000059c0     05a0          move    @match_winner,a0
         000059d0 00002170- 
    1456 000059f0     05ae          move    @PSTATUS2,a14
         00005a00 00000000! 
    1457 00005a20     51c0          and     a14,a0
    1458                    
    1459                            ;inc/clear p1winstreak
    1460 00005a30     05a1          move    @p1winstreak,a1
         00005a40 00002190- 
    1461 00005a60     1021          inc     a1
    1462 00005a70     1fe0          btst    0,a0
    1463 00005a80     cb01          jrnz    tsrp1ok
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   33

    1464 00005a90     5621          clr     a1
    1465                    
    1466 00005aa0           tsrp1ok PUSHP   a2
    1467 00005ab0     5642          clr     a2
    1468 00005ac0     0d5f          calla   arm_winstreak_award
         00005ad0 00000000! 
    1469 00005af0                   PULLP   a2
    1470                    
    1471 00005b00     0581          move    a1,@p1winstreak
         00005b10 00002190- 
    1472 00005b30     4c21          move    a1,a1
    1473 00005b40     cb06          jrnz    tsrno_clr_p1_ws_awards
    1474 00005b50     09ee          movi    p1ws_award,a14
         00005b60 00000000! 
    1475 00005b80     0d5f          calla   rst_winstreak_awards
         00005b90 00000000! 
    1476 00005bb0           tsrno_clr_p1_ws_awards
    1477                    
    1478                    ;       ;inc/clear p1winstreakd (clear if lost, inc if won vs drones)
    1479                    ;       btst    0,a0
    1480                    ;       jrz     tsrclrp1d                       ;clr if we lost
    1481                    ;       move    @p1winstreakd,a1
    1482                    ;       move    @PSTATUS2,a14
    1483                    ;       btst    1,a14
    1484                    ;       jrz     tsrincp1d                       ;inc if vs drone
    1485                    ;       jruc    tsrp1dset                       ;else no increment
    1486                    ;
    1487                    ;tsrincp1d      inc     a1
    1488                    ;       jruc    tsrp1dset
    1489                    ;tsrclrp1d      clr     a1
    1490                    ;tsrp1dset      move    a1,@p1winstreakd
    1491                    
    1492                            ;inc/clear p2winstreak
    1493 00005bb0     05a1          move    @p2winstreak,a1
         00005bc0 000021a0- 
    1494 00005be0     1021          inc     a1
    1495 00005bf0     1fc0          btst    1,a0
    1496 00005c00     cb01          jrnz    tsrp2ok
    1497 00005c10     5621          clr     a1
    1498 00005c20           tsrp2ok PUSHP   a2
    1499 00005c30     1822          movk    1,a2
    1500 00005c40     0d5f          calla   arm_winstreak_award
         00005c50 00000000! 
    1501 00005c70                   PULLP   a2
    1502 00005c80     0581          move    a1,@p2winstreak
         00005c90 000021a0- 
    1503 00005cb0     4c21          move    a1,a1
    1504 00005cc0     cb06          jrnz    tsrno_clr_p2_ws_awards
    1505 00005cd0     09ee          movi    p2ws_award,a14
         00005ce0 00000000! 
    1506 00005d00     0d5f          calla   rst_winstreak_awards
         00005d10 00000000! 
    1507 00005d30           tsrno_clr_p2_ws_awards
    1508                    
    1509                    ;       ;inc/clear p2winstreakd (clear if lost, inc if won vs drones or
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   34

    1510                    ;       ; value < 2.
    1511                    ;       btst    1,a0
    1512                    ;       jrz     tsrclrp2d                       ;clr if we lost
    1513                    ;       move    @p2winstreakd,a1
    1514                    ;       move    @PSTATUS2,a14
    1515                    ;       btst    0,a14
    1516                    ;       jrz     tsrincp2d                       ;inc if vs drone
    1517                    ;       jruc    tsrp2dset                       ;else no increment
    1518                    ;
    1519                    ;tsrincp2d      inc     a1
    1520                    ;       jruc    tsrp2dset
    1521                    ;tsrclrp2d      clr     a1
    1522                    ;tsrp2dset      move    a1,@p2winstreakd
    1523                    
    1524                            ;adjust p1&p2winstreakd. three possibilities:
    1525                            ; 1. 2p match.  do nothing
    1526                            ; 2. 1p match, player wins.  inc his winstreak.
    1527                            ; 3. 1p match, player loses.  set both winstreaks to -1, unless
    1528                            ;     they're already negative, in which case we dec both.
    1529                    
    1530 00005d30     05ae          move    @PSTATUS2,a14
         00005d40 00000000! 
    1531 00005d60     0b4e          cmpi    3,a14
         00005d70     fffc  
    1532 00005d80     ca1c          jreq    tsrdo_nothing
    1533                    
    1534 00005d90     05a0          move    @match_winner,a0
         00005da0 00002170- 
    1535 00005dc0     480e          cmp     a0,a14
    1536 00005dd0     cb0b          jrne    tsrdec_both
    1537                    ;       jruc    tsrinc_one
    1538                    
    1539 00005de0           tsrinc_one
    1540 00005de0     1420          dec     a0
    1541 00005df0                   X16     a0
    1542 00005e00     0b20          addi    p1winstreakd,a0
         00005e10 000021b0- 
    1543 00005e30     840e          move    *a0,a14
    1544 00005e40     cf01          jrnn    tsrib_ok
    1545 00005e50     57ce          clr     a14
    1546 00005e60     102e  tsrib_ok        inc     a14
    1547 00005e70     81c0          move    a14,*a0
    1548 00005e80     c00c          jruc    tsrdo_nothing
    1549                    
    1550 00005e90           tsrdec_both
    1551 00005e90     05ae          move    @p1winstreakd,a14
         00005ea0 000021b0- 
    1552 00005ec0     ce01          jrn     tsrdb_ok
    1553 00005ed0     57ce          clr     a14
    1554 00005ee0     142e  tsrdb_ok        dec     a14
    1555 00005ef0     058e          move    a14,@p1winstreakd
         00005f00 000021b0- 
    1556 00005f20     058e          move    a14,@p2winstreakd
         00005f30 000021c0- 
    1557                    ;       jruc    tsrdo_nothing
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   35

    1558                    
    1559 00005f50           tsrdo_nothing
    1560                    
    1561 00005f50     0960          rets
    1562                    
    1563                    *****************************************************************************
    1564                    *
    1565                    * This is the master fight process.  It's created once, and it doesn't end
    1566                    * until the entire match is over.  Between rounds, it's just suspended--
    1567                    * it doesn't actually die and get re-created.
    1568                    *
    1569                    
    1570 00005f60            SUBR   start_match
    1571                    
    1572                            ;skip some of this if we're in attract mode
    1573 00005f60     05ae          move    @PSTATUS2,a14
         00005f70 00000000! 
    1574 00005f90     ca20          jrz     pyramode_battle
    1575                    
    1576 00005fa0     05ae          move    @total_matches,a14,W
         00005fb0 000022a0- 
    1577 00005fd0     102e          inc     a14
    1578 00005fe0     058e          move    a14,@total_matches,W
         00005ff0 000022a0- 
    1579 00006010     0d5f          CALLA   SPECIAL_WIPEOUT
         00006020 00000000! 
    1580 00006040     57ce          clr     a14                     ; Clear out stuff for finishing moves
    1581 00006050     058e          move    a14,@p1pins
         00006060 00000000! 
    1582 00006080     058e          move    a14,@p2pins
         00006090 00000000! 
    1583 000060b0     058e          move    a14,@finish_completed
         000060c0 00000000! 
    1584                    
    1585 000060e0     09ee          movi    p1mtch_award,a14        ; Reset the per match awards
         000060f0 00000000! 
    1586 00006110     0d5f          calla   rst_awards
         00006120 00000000! 
    1587 00006140     09ee          movi    p1rnd_award,a14         ; Reset the per round awards
         00006150 00000000! 
    1588 00006170     0d5f          calla   rst_awards
         00006180 00000000! 
    1589                    
    1590 000061a0           pyramode_battle
    1591                    
    1592 000061a0     0d5f          calla   pal_clean
         000061b0 00000000! 
    1593                    
    1594                    ****    ;routine display initialization
    1595 000061d0     1820          movk    1,a0
    1596 000061e0     0580          move    a0,@dpageflip
         000061f0 00000000! 
    1597 00006210     0580          move    a0,@HALT
         00006220 000006c0- 
    1598                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   36

    1599                    ****    ;position the scroller
    1600 00006240     0d3f          callr   init_scroller
         00006250     11a6  
    1601                    
    1602                    ****    ;If this is the final match, initialize FINAL_PTR.  We can't do
    1603                            ; it in NEXT_IN_LADDER because if we're speeding through the
    1604                            ; rounds, that can happen while wrestler processes from the
    1605                            ; previous round are still active and DEAD, so they gobble up
    1606                            ; the first three slots and we end up with a 1v5 match.
    1607 00006260     0d5f          calla   is_final_match
         00006270 00000000! 
    1608 00006290     c906          jrnc    pyrdo_zf
    1609 000062a0     09ee          movi    FINAL_BATTLE_LINEUP+24,a14
         000062b0 00000018! 
    1610 000062d0     078e          move    a14,@FINAL_PTR,L
         000062e0 00000000! 
    1611                    
    1612                    ****    ;World Y-position at which power bars toggle in z
    1613 00006300     09e0  pyrdo_zf        movi    ZFLIP_POS,a0
         00006310 000d8000  
    1614 00006330     0780          move    a0,@ZFLIP_POS_VAR,L
         00006340 00000000! 
    1615                    
    1616                    ****    ;set up the ring.
    1617 00006360     09e0          movi    ring_mod,a0
         00006370 00009c80' 
    1618 00006390     0780          move    a0,@BAKMODS,L
         000063a0 00000000! 
    1619 000063c0     0d5f          calla   BGND_UD1
         000063d0 00000000! 
    1620                    
    1621                    ****    ;init message_flag - clears 'already done' bits for move names
    1622 000063f0     5600          clr     a0
    1623 00006400     0780          move    a0,@message_flag,L
         00006410 00000000! 
    1624 00006430     0780          move    a0,@MESSAGE_FLAGS,L     ;clear which side has a message out
         00006440 00000000! 
    1625 00006460     0580          MOVE    A0,@FLASH_FLAG          ;clear out the 'doing flashes' flag
         00006470 00000000! 
    1626 00006490     0780          MOVE    A0,@COMBO_FLASH_FLAG,L ;clear out combo flashing message
         000064a0 00000000! 
    1627                    
    1628                    ****    ;kill off any perpetual yells that might be going on.
    1629 000064c0     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         000064d0 00000000! 
    1630                    
    1631                    ****    ;create misc stuff like crowd, clocks, a wipe, and some debug stuff.
    1632 000064f0                   CREATE  CROWD_PID,crowd_anim
    1633 00006570                   CREATE  TIMER_PID,match_timer
    1634 000065f0                   CREATE  ZSHIFT_PID,SHIFT_BARS_IN_Z
    1635 00006670                   CREATE  FLASH_PID,maybe_do_flashes
    1636 000066f0     57ce          clr     a14
    1637 00006700     078e          move    a14,@wrestler_count_proc,L
         00006710 000023a0- 
    1638 00006730     05ae          move    @royal_rumble,a14
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   37

         00006740 00000000! 
    1639 00006760     cb04          jrnz    pyrcreate_wcounter
    1640 00006770     0d5f          calla   is_8_on_1
         00006780 00000000! 
    1641 000067a0     c90b          jrnc    pyrno_wcounter
    1642 000067b0           pyrcreate_wcounter
    1643 000067b0                   CREATE  WCOUNT_PID,wrestler_counter
    1644 00006830     0780          move    a0,@wrestler_count_proc,L
         00006840 000023a0- 
    1645 00006860           pyrno_wcounter
    1646                    
    1647                     .if DIR_DEBUG
    1648                            CREATE  DIR_DEBUG_PID,dir_debug
    1649                     .endif
    1650                    
    1651                     .if SCRT_DEBUG
    1652                            CREATE  SCRT_DEBUG_PID,scrt_debug
    1653                     .endif
    1654                    
    1655                    ****    ;create ropes
    1656                    
    1657 00006860     09cb          movi    ROPE_FRONT,a11
         00006870     0000  
    1658 00006880                   CREATE  ROPE_PID,rope
    1659 00006900     0780          move    a0,@front_rproc,L
         00006910 00002220- 
    1660                    
    1661 00006930     09cb          movi    ROPE_BACK,a11
         00006940     0001  
    1662 00006950                   CREATE  ROPE_PID,rope
    1663 000069d0     0780          move    a0,@back_rproc,L
         000069e0 00002240- 
    1664                    
    1665 00006a00     09cb          movi    ROPE_LEFT,a11
         00006a10     0002  
    1666 00006a20                   CREATE  ROPE_PID,rope
    1667 00006aa0     0780          move    a0,@left_rproc,L
         00006ab0 00002260- 
    1668                    
    1669 00006ad0     09cb          movi    ROPE_RIGHT,a11
         00006ae0     0003  
    1670 00006af0                   CREATE  ROPE_PID,rope
    1671 00006b70     0780          move    a0,@right_rproc,L
         00006b80 00002280- 
    1672                    
    1673                    ****    ;initialize various other crap
    1674 00006ba0     5600          clr     a0
    1675 00006bb0     0580          move    a0,@match_winner
         00006bc0 00002170- 
    1676 00006be0     0580          MOVE    A0,@DAM_MULT
         00006bf0 00000000! 
    1677 00006c10     0580          MOVE    A0,@combo_audit_done
         00006c20 00000000! 
    1678 00006c40     0580          move    a0,@no_debris
         00006c50 000022b0- 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   38

    1679 00006c70     0580          move    a0,@any_hits
         00006c80 000022f0- 
    1680 00006ca0     0580          MOVE    A0,@PERFECT_WINS
         00006cb0 00000000! 
    1681 00006cd0     0580          MOVE    A0,@MUSIC_HAP
         00006ce0 00000000! 
    1682 00006d00     0780          MOVE    A0,@WINS_OBJ,L 
         00006d10 00000000! 
    1683 00006d30     0780          MOVE    A0,@WINS_OBJ+20H,L 
         00006d40 00000020! 
    1684 00006d60     0780          MOVE    A0,@WINS_OBJ+40H,L 
         00006d70 00000040! 
    1685                    
    1686                            .if     DEBUG
    1687                            move    a0,@instant_death
    1688                            .endif
    1689                    
    1690                    ****    ;increment the battles started audit
    1691 00006d90     09c0          movi    AUD_VSHUMS,a0
         00006da0     0026  
    1692 00006db0     05ae          move    @PSTATUS2,a14
         00006dc0 00000000! 
    1693 00006de0     ca08          JRZ     NO_BATLES_AT_ALL
    1694 00006df0     0b4e          cmpi    03h,a14
         00006e00     fffc  
    1695 00006e10     ca02          jreq    pyraud_vshumf
    1696 00006e20     09c0          movi    AUD_VSCPUS,a0
         00006e30     0024  
    1697 00006e40           pyraud_vshumf
    1698 00006e40     0d5f          calla   AUD1
         00006e50 00000000! 
    1699 00006e70           NO_BATLES_AT_ALL
    1700                    
    1701                            ;clear out the process_ptrs data
    1702 00006e70     0d3f          callr   CLEAR_PROCESSES
         00006e80     02cf  
    1703                    
    1704                    ****    ;initialize the life and combo bars.
    1705 00006e90     0d5f          calla   init_life_data
         00006ea0 00000000! 
    1706                    
    1707                    ****    ;create wrestler processes
    1708                    
    1709                            ;figure out if it's a 0-, 1-, or 2-player game, and branch.
    1710 00006ec0     05a0          MOVE    @PSTATUS2,A0
         00006ed0 00000000! 
    1711 00006ef0     ca54          jrz     pyr0plyr
    1712 00006f00     0b40          CMPI    3,A0
         00006f10     fffc  
    1713 00006f20     ca00          JREQ    pyr2plyr
         00006f30     008f  
    1714                    
    1715 00006f40           pyr1plyr        ;1-player game
    1716                    
    1717                            ;create player process
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   39

    1718 00006f40     09c9          movi    PSIDE_PLYR1,a9          ;side on
         00006f50     0000  
    1719 00006f60     574a          clr     a10                     ;plyrnum
    1720 00006f70     05ab          move    @index1,a11             ;wrestlernum
         00006f80 00000000! 
    1721                    
    1722 00006fa0     1fe0          btst    0,A0
    1723 00006fb0     cb06          jrnz    pyrset
    1724                    
    1725 00006fc0     09c9          movi    PSIDE_PLYR2,a9          ;side on
         00006fd0     0001  
    1726 00006fe0     182a          movk    1,a10                   ;plyrnum
    1727 00006ff0     05ab          move    @index2,a11             ;wrestlernum
         00007000 00000000! 
    1728                    
    1729 00007020     09c8  pyrset  movi    PTYPE_PLAYER,a8         ;player type
         00007030     0000  
    1730 00007040                   SCREATE WMAIN_PID,wrestler_main
    1731 000070c0     0d3f          callr   set_process_ptr2
         000070d0     05bc  
    1732 000070e0                   CREATE  GETUP_PID,getup_meter
    1733                    
    1734                    
    1735 00007160           pyrndrone       ;create the drone processes
    1736                            ;get the lineup for the coming battle
    1737 00007160     07a4          MOVE    @CURRENT_LADDER,A4,L
         00007170 00000000! 
    1738 00007190     8684          MOVE    *A4,A4,L                ;battle lineup
    1739                    
    1740                            ;drone PLYRNUM's start at 2
    1741 000071a0     184a          MOVK    2,A10
    1742 000071b0     05a3          move    @NUM_OPPS,a3
         000071c0 00000000! 
    1743                    
    1744 000071e0     0d5f  pyrnxtdrn       CALLA   SORT_OUT_WRESTLER_NUM
         000071f0 00000000! 
    1745                    
    1746                    *jakeeee if you want a specific wrestler, put his number in A11 here !
    1747                    
    1748 00007210     09c8          movi    PTYPE_DRONE,a8          ;player type
         00007220     0001  
    1749                    
    1750                            ;set PLYR_SIDE for ENEMY drones--All these drones are bad guys.
    1751                            ;In a 2v2 match, we can't use this code.
    1752 00007230     09c9          movi    PSIDE_PLYR2,a9
         00007240     0001  
    1753 00007250     05ae          move    @PSTATUS2,a14
         00007260 00000000! 
    1754 00007280     1fee          btst    0,a14                   ;plyr 1 human?
    1755 00007290     cb02          jrnz    pyrpside_set
    1756 000072a0     09c9          movi    PSIDE_PLYR1,a9
         000072b0     0000  
    1757 000072c0           pyrpside_set
    1758                    
    1759                     .if DEBUG
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   40

    1760                            move    @skip_select,a0
    1761                            jrge    pyrskp
    1762                            movk    6,a11   ;make him a doink
    1763                    pyrskp
    1764                     .endif
    1765                    
    1766 000072c0                   SCREATE WMAIN_PID,wrestler_main
    1767 00007340     0d3f          callr   set_process_ptr2
         00007350     0594  
    1768 00007360                   CREATE  GETUP_PID,getup_meter
    1769 000073e0     2f04          SRL     8,A4                            ;shift battle lineup
    1770 000073f0     102a          INC     A10                             ;inc PLYRNUM
    1771 00007400     0d83          dsj     a3,pyrnxtdrn
         00007410     ffdc  
    1772                    
    1773 00007420     c000          JRUC    pyrwrestlers_created
         00007430     00da  
    1774                    
    1775                    *****
    1776                    
    1777 00007440           pyr0plyr        ;0-player (attract mode) game
    1778 00007440     09c8          movi    PTYPE_DRONE,a8                  ;player type
         00007450     0001  
    1779 00007460     09c9          movi    PSIDE_PLYR1,a9                  ;side on
         00007470     0000  
    1780 00007480     184a          movk    2,a10                           ;wres num
    1781 00007490     05ab          move    @index1,a11                     ;wrestler
         000074a0 00000000! 
    1782 000074c0                   SCREATE WMAIN_PID,wrestler_main         ;player 1
    1783 00007540     0d3f          callr   set_process_ptr2
         00007550     0574  
    1784 00007560                   CREATE  GETUP_PID,getup_meter
    1785                    
    1786 000075e0     07a4          move    @CURRENT_LADDER,a4,L
         000075f0 00000000! 
    1787 00007610     8684          move    *a4,a4,L
    1788 00007620     05a3          move    @NUM_OPPS,a3
         00007630 00000000! 
    1789 00007650     09c8          movi    PTYPE_DRONE,a8
         00007660     0001  
    1790 00007670     09c9          movi    PSIDE_PLYR2,a9
         00007680     0001  
    1791 00007690     0d5f  pyrnxt  calla   SORT_OUT_WRESTLER_NUM
         000076a0 00000000! 
    1792 000076c0     2f04          srl     8,a4                            ;shift battle lineup
    1793 000076d0     102a          inc     a10                             ;inc PLYRNUM
    1794 000076e0                   SCREATE WMAIN_PID,wrestler_main
    1795 00007760     0d3f          callr   set_process_ptr2
         00007770     0552  
    1796 00007780                   CREATE  GETUP_PID,getup_meter
    1797 00007800     3f03  pyrngup dsj     a3,pyrnxt
    1798                    
    1799 00007810     c000          jruc    pyrwrestlers_created
         00007820     009b  
    1800                         
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   41

    1801                    *****
    1802                            
    1803 00007830           pyr2plyr        ;2-player game
    1804                    
    1805 00007830     09c8          movi    PTYPE_PLAYER,a8                 ;player type
         00007840     0000  
    1806 00007850     05a0          move    @PSTATUS2,a0
         00007860 00000000! 
    1807 00007880     1fe0          btst    0,a0
    1808 00007890     cb02          jrnz    pyrok
    1809 000078a0     09c8          movi    PTYPE_DRONE,a8                  ;player type
         000078b0     0001  
    1810 000078c0     09c9  pyrok   movi    PSIDE_PLYR1,a9                  ;side on
         000078d0     0000  
    1811 000078e0     574a          clr     a10                             ;wres num
    1812 000078f0     05ab          move    @index1,a11                     ;wrestler
         00007900 00000000! 
    1813 00007920                   SCREATE WMAIN_PID,wrestler_main         ;player 1
    1814 000079a0     0d3f          callr   set_process_ptr2
         000079b0     052e  
    1815 000079c0                   CREATE  GETUP_PID,getup_meter
    1816                    
    1817 00007a40     09c8          movi    PTYPE_PLAYER,a8                 ;player type
         00007a50     0000  
    1818 00007a60     05a0          move    @PSTATUS2,a0
         00007a70 00000000! 
    1819 00007a90     1fc0          btst    1,a0
    1820 00007aa0     cb02          jrnz    pyrok1
    1821 00007ab0     09c8          movi    PTYPE_DRONE,a8                  ;player type
         00007ac0     0001  
    1822 00007ad0     09c9  pyrok1  movi    PSIDE_PLYR2,a9                  ;side on
         00007ae0     0001  
    1823                    
    1824                            ;if we're in royal rumble mode, second guy is on first team
    1825 00007af0     05ae          move    @royal_rumble,a14
         00007b00 00000000! 
    1826 00007b20     45c9          sub     a14,a9
    1827                    
    1828 00007b30     182a          movk    1,a10                           ;wres num
    1829 00007b40     05ab          move    @index2,a11                     ;wrestler
         00007b50 00000000! 
    1830 00007b70                   SCREATE WMAIN_PID,wrestler_main         ;player 2
    1831 00007bf0     0d3f          callr   set_process_ptr2
         00007c00     0509  
    1832 00007c10                   CREATE  GETUP_PID,getup_meter
    1833                    
    1834                            ;set the 'too late now to choose buddy mode' flag
    1835 00007c90     182e          movk    1,a14
    1836 00007ca0     058e          move    a14,@buddy_mode_checked
         00007cb0 00000000! 
    1837                    
    1838                            ;If they selected buddy mode, add a pair of drones.
    1839                            ;WE HAVE TO COMPUTE buddy_mode_on OURSELVES, because
    1840                            ; the code that normally does that kind of thing hasn't
    1841                            ; gone off yet.
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   42

    1842                            .ref    p1powerup_request
    1843                            .ref    p2powerup_request
    1844 00007cd0     07a8          move    @p1powerup_request,a8,L
         00007ce0 00000000! 
    1845 00007d00     07a9          move    @p2powerup_request,a9,L
         00007d10 00000000! 
    1846 00007d30     5128          and     a9,a8
    1847 00007d40     0b88          andi    BUDDY_MODE,a8
         00007d50 ffffff7f  
    1848 00007d70     0588          move    a8,@buddy_mode_on
         00007d80 00000000! 
    1849 00007da0     ca23          jrz     pyrno_buddies
    1850                    
    1851 00007db0     0d5f          calla   choose_buddies
         00007dc0 00000000! 
    1852 00007de0                   PUSH    a0,a1           ;store the two wrestlernums
    1853                            
    1854 00007e00     1828          movk    PTYPE_DRONE,a8
    1855 00007e10     09c9          movi    PSIDE_PLYR1,a9
         00007e20     0000  
    1856 00007e30     184a          movk    2,a10
    1857 00007e40                   PULL    a11             ;get the first buddy
    1858 00007e50                   SCREATE WMAIN_PID,wrestler_main
    1859 00007ed0     0d3f          callr   set_process_ptr2
         00007ee0     04db  
    1860                    
    1861 00007ef0     1828          movk    PTYPE_DRONE,a8
    1862 00007f00     1829          movk    PSIDE_PLYR2,a9
    1863 00007f10     186a          movk    3,a10
    1864 00007f20                   PULL    a11             ;get the second buddy
    1865 00007f30                   SCREATE WMAIN_PID,wrestler_main
    1866 00007fb0     0d3f          callr   set_process_ptr2
         00007fc0     04cd  
    1867                    
    1868 00007fd0     c020          jruc    pyrwrestlers_created
    1869                    
    1870 00007fe0           pyrno_buddies
    1871                    
    1872                            ;if we're in royal rumble mode, create the starting bad guys.
    1873 00007fe0     05ae          move    @royal_rumble,a14
         00007ff0 00000000! 
    1874 00008010     ca1c          jrz     pyrwrestlers_created
    1875                    
    1876                            ;you never hit the progress screen in royal_rumble mode, so we've
    1877                            ; got to set up some stuff by hand.
    1878                    
    1879                            .ref    get_royal_lineup
    1880                    
    1881 00008020     0d5f          calla   get_royal_lineup
         00008030 00000000! 
    1882 00008050     09e0          movi    FINAL_BATTLE_LINEUP,a0
         00008060 00000000! 
    1883 00008080     8601          move    *a0,a1,L
    1884 00008090     0b81          andi    0000FFFFh,a1
         000080a0 ffff0000  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   43

    1885 000080c0     0ba1          ori     02000000h,a1
         000080d0 02000000  
    1886                    
    1887 000080f0     07ae          move    @CURRENT_LADDER,a14,L
         00008100 00000000! 
    1888 00008120     822e          move    a1,*a14,L
    1889 00008130     184e          movk    2,a14
    1890 00008140     058e          move    a14,@NUM_OPPS
         00008150 00000000! 
    1891                    
    1892                            ;set FINAL_PTR to the next guy to fight.
    1893 00008170     0b00          addi    2*8,a0
         00008180     0010  
    1894 00008190     0780          move    a0,@FINAL_PTR,L
         000081a0 00000000! 
    1895                    
    1896 000081c0     c000          jruc    pyrndrone
         000081d0     fef8  
    1897                    
    1898 000081e0           pyrwrestlers_created
    1899                    
    1900                    ****    ;create the rewire monitor - this has to be done AFTER all the
    1901                            ; set_process_ptr2's have been called
    1902 000081e0                   CREATE  REWIRE_PID,rewire_monitor
    1903                    
    1904                            ;play the battle music
    1905                    
    1906                     .if    DEBUG
    1907                            movi    40,a3
    1908                            move    @skip_select,a14
    1909                            jrnz    pyrmarked_snd
    1910                     .endif
    1911                    
    1912 00008260     1a03          movk    16,a3
    1913 00008270     05ae          move    @royal_rumble,a14
         00008280 00000000! 
    1914 000082a0     cb0b          jrnz    music_selected
    1915 000082b0     0d5f          calla   is_8_on_1
         000082c0 00000000! 
    1916 000082e0     c807          jrc     music_selected
    1917 000082f0     1b23          movk    25,a3
    1918 00008300     05ae          move    @hcount,a14
         00008310 c00001c0  
    1919 00008330     2fee          srl     1,a14
    1920 00008340     c901          jrnc    music_selected
    1921 00008350     19e3          movk    15,a3
    1922 00008360           music_selected
    1923 00008360     0583          move    a3,@temp_music
         00008370 000023c0- 
    1924                    
    1925 00008390     0d5f          calla   SNDSND
         000083a0 00000000! 
    1926                    
    1927 000083c0           pyrmarked_snd
    1928                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   44

    1929                            ;SET CROWD VOLUME TO 100% OF MASTER VOLUME
    1930 000083c0     09c3          MOVI    55ABH+5,A3
         000083d0     55b0  
    1931 000083e0     0d5f          CALLA   SNDSND
         000083f0 00000000! 
    1932 00008410     09e3          MOVI    0FF00H,A3
         00008420 0000ff00  
    1933 00008440     0d5f          CALLA   SNDSND
         00008450 00000000! 
    1934                            ;and the crowd
    1935 00008470     09c3          movi    2065,a3
         00008480     0811  
    1936 00008490     0d5f          calla   SNDSND
         000084a0 00000000! 
    1937                    
    1938 000084c0     0d5f          CALLA   CLEAR_SPEECH_REPEAT
         000084d0 00000000! 
    1939                    
    1940 000084f0     0d3f          callr   init_joystat
         00008500     0a13  
    1941 00008510     0d3f          callr   init_joy_dtime
         00008520     085c  
    1942                    
    1943 00008530     0d3f          callr   init_reduce_bog
         00008540     0a1b  
    1944                    
    1945 00008550     0d5f          calla   init_special_objlist
         00008560 00000000! 
    1946                    
    1947 00008580     5600          clr     a0
    1948 00008590     0580          move    a0,@match_over
         000085a0 00002150- 
    1949                    
    1950 000085c0     0d5f          CALLA   RESETUP_PROGRESS
         000085d0 00000000! 
    1951 000085f0     0d5f          calla   INIT_SKIRTS
         00008600 00000000! 
    1952                    
    1953 00008620                   SLEEPK  1
    1954                    
    1955 00008660     0d5f          calla   BGND_UD1
         00008670 00000000! 
    1956 00008690                   SLEEPK  1
    1957                    
    1958                    ;       CREATE  SKIRT_PID,CHANGE_SKIRTS
    1959                    
    1960                            ;if this is the first match after attract mode, cue vince.
    1961 000086d0     05ae          move    @total_matches,a14
         000086e0 000022a0- 
    1962 00008700     142e          dec     a14
    1963 00008710     cb19          jrnz    pyrno_vince_intro
    1964 00008720                   CREATE  SKIRT_PID,CHANGE_SKIRTS
    1965 000087a0     05a0          move    @PSTATUS2,A0
         000087b0 00000000! 
    1966 000087d0     0b40          CMPI    3,A0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   45

         000087e0     fffc  
    1967 000087f0     cb0b          JRNE    pyrno_vince_intro
    1968                    
    1969 00008800     09c0          movi    0E0h,a0
         00008810     00e0  
    1970 00008820     0d5f          calla   ADD_VOICE
         00008830 00000000! 
    1971 00008850     09c0          MOVI    01FAH,A0
         00008860     01fa  
    1972 00008870     0d5f          calla   ADD_VOICE
         00008880 00000000! 
    1973 000088a0     c00a          JRUC    INTRO_DONE
    1974                    
    1975 000088b0           pyrno_vince_intro
    1976 000088b0     18a0          MOVK    5,A0
    1977 000088c0     0d5f          CALLA   RNDRNG0
         000088d0 00000000! 
    1978 000088f0     cb05          JRNZ    INTRO_DONE
    1979 00008900     09c0          MOVI    THIS_IS_FOR_THE_MARBLES,A0
         00008910     0190  
    1980 00008920     0d5f          CALLA   ADD_VOICE
         00008930 00000000! 
    1981 00008950           INTRO_DONE
    1982                    
    1983 00008950     0d5f          calla   BGND_UD1
         00008960 00000000! 
    1984 00008980                   SLEEPK  2
    1985 000089c0     0d5f          calla   BGND_UD1
         000089d0 00000000! 
    1986                    
    1987 000089f0     5708          clr     a8                              ;left meter for player 0
    1988 00008a00     1829          movk    1,a9                            ;right meter for player 1
    1989 00008a10     05a0          move    @PSTATUS2,a0
         00008a20 00000000! 
    1990 00008a40     ca0f          jrz     drone_pointers
    1991                    
    1992 00008a50     05ae          move    @royal_rumble,a14
         00008a60 00000000! 
    1993 00008a80     cb09          jrnz    pyrrumble_pointers
    1994                    
    1995 00008a90     0b40          cmpi    3,a0
         00008aa0     fffc  
    1996 00008ab0     ca0a          jreq    meter_pointers_set
    1997                    
    1998 00008ac0     1849          movk    2,a9
    1999 00008ad0     2fe0          srl     1,a0
    2000 00008ae0     ca07          jrz     meter_pointers_set
    2001 00008af0     1829          movk    1,a9
    2002 00008b00     1848          movk    2,a8
    2003 00008b10     c004          jruc    meter_pointers_set
    2004                    
    2005 00008b20           pyrrumble_pointers
    2006 00008b20     1849          movk    2,a9
    2007 00008b30     c002          jruc    meter_pointers_set
    2008                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   46

    2009 00008b40           drone_pointers
    2010 00008b40     1848          movk    2,a8
    2011 00008b50     1869          movk    3,a9
    2012 00008b60           meter_pointers_set
    2013 00008b60                   CREATE  METER_PID,meters                ;life/turbo/names
    2014                    
    2015 00008be0     1820          movk    1,a0
    2016 00008bf0     0580          move    a0,@DISPLAYON
         00008c00 00000000! 
    2017                    
    2018 00008c20     5600          clr     a0
    2019 00008c30     0580          move    a0,@IRQSKYE
         00008c40 00000000! 
    2020                    
    2021                            .if DEBUG
    2022                    ;FIX THAT DAM ANNOYING START UP DMA GLITCH !!!!!!!
    2023                            move    @skip_select,a0
    2024                            JRNZ    DONT_OPEN_ANYTHING
    2025                            .endif
    2026                    
    2027 00008c60                   CREATE  SET_IMAGES_PID,DO_SET_IMAGES
    2028                    
    2029 00008ce0                   PUSHP   A0
    2030 00008cf0     1a48          movk    18,a8   ;20
    2031 00008d00     1889          movk    4,a9    ;6
    2032 00008d10                   JSRP    OPEN_PROGRESS_SCREEN
    2033                    ;       movi    PU_CHECK_PID,a0
    2034                    ;       calla   IKIL1C
    2035 00008d80                   PULLP   A0
    2036                    
    2037 00008d90     0d5f          CALLA   KILL
         00008da0 00000000! 
    2038 00008dc0           DONT_OPEN_ANYTHING
    2039 00008dc0     09e0          MOVI    DUMRETS,A0
         00008dd0 00000000! 
    2040 00008df0     0780          MOVE    A0,@WHICH_SCREEN,L
         00008e00 00000000! 
    2041                    
    2042 00008e20     5621          clr     a1
    2043 00008e30     0d3f          callr   get_process_ptr
         00008e40     03f3  
    2044                    ;       clr     a14
    2045                    ;Don't allow meters for the first x seconds of round
    2046 00008e50     09ce          movi    10*60,a14
         00008e60     0258  
    2047 00008e70     b1c0          move    a14,*a0(DELAY_METER)
         00008e80     0ad0  
    2048                    
    2049 00008e90     1821          movk    1,a1
    2050 00008ea0     0d3f          callr   get_process_ptr
         00008eb0     03ec  
    2051                    ;Don't allow meters for the first x seconds of round
    2052 00008ec0     09ce          movi    14*60,a14
         00008ed0     0348  
    2053 00008ee0     b1c0          move    a14,*a0(DELAY_METER)
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   47

         00008ef0     0ad0  
    2054                    
    2055                            ;initialize the bgnd_cntr
    2056 00008f00     182e          movk    1,a14
    2057 00008f10     058e          move    a14,@bgnd_cntr
         00008f20 000022e0- 
    2058                    
    2059                            ;initialize annc_rnd_winner_done
    2060 00008f40     57ce          clr     a14
    2061 00008f50     058e          move    a14,@annc_rnd_winner_done
         00008f60 000023d0- 
    2062                    
    2063                    ;       CREATE0 show_options
    2064                    
    2065 00008f80     0d5f  pyrloop calla   check_collisions
         00008f90 00000000! 
    2066 00008fb0     0d3f          callr   final_confine
         00008fc0     0eb7  
    2067 00008fd0     0d5f          calla   set_images
         00008fe0 00000000! 
    2068                    
    2069                            ;BGND_UD1 every eight ticks.
    2070 00009000     05a2          move    @bgnd_cntr,a2
         00009010 000022e0- 
    2071 00009030     3922          dsjs    a2,pyrno_bg
    2072                    
    2073                            ;time to do it - but if there's a AUDIT_UD_PID process going, wait
    2074                            ; until it dies.  This could lead to a delay of up to three ticks.
    2075 00009040     1022          inc     a2              ;...so that if we skip, we try next tick.
    2076                    
    2077                            ;check this flag instead of using the extremely slow EXISTP
    2078 00009050     05ae          move    @audit_ud_flag,a14
         00009060 00000000! 
    2079 00009080     cb04          jrnz    pyrno_bg
    2080                            
    2081 00009090     0d5f          calla   BGND_UD1
         000090a0 00000000! 
    2082 000090c0     1902          movk    8,a2
    2083 000090d0     0582  pyrno_bg        move    a2,@bgnd_cntr
         000090e0 000022e0- 
    2084                    
    2085 00009100                   SLEEPK  1
    2086                    
    2087 00009140     0d5f          calla   read_switches
         00009150 00000000! 
    2088                    
    2089 00009170     05a0          move    @match_over,a0
         00009180 00002150- 
    2090 000091a0     ca06          jrz     pyrnot_over
    2091                    
    2092 000091b0     0d5f          calla   postgame_audits
         000091c0 00000000! 
    2093                    
    2094 000091e0                   RETP
    2095                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   48

    2096 00009210           pyrnot_over
    2097                    
    2098 00009210     0d5f          calla   scroll_world
         00009220 00000000! 
    2099                    
    2100 00009240     05a0          move    @round_tickcount,a0
         00009250 00001010- 
    2101 00009270     1020          inc     a0
    2102 00009280     0580          move    a0,@round_tickcount
         00009290 00001010- 
    2103                    
    2104 000092b0     07a0          move    @match_time,a0,L        ;10's & 1's
         000092c0 00002120- 
    2105 000092e0     cbc9          jrnz    pyrloop
    2106                    
    2107                            .if     DEBUG
    2108                            ;if we're in fight_debug mode, roll the clock around
    2109                            move    @fight_debug,a14
    2110                            jrnz    pyrwraparound
    2111                            .endif
    2112                    
    2113                            ;if we're in attract mode, roll the clock around
    2114 000092f0     05ae          move    @PSTATUS2,a14
         00009300 00000000! 
    2115 00009320     cb07          jrnz    pyrnorm
    2116                    
    2117 00009330           pyrwraparound
    2118 00009330     09ee          movi    00090009h,a14
         00009340 00090009  
    2119 00009360     078e          move    a14,@match_time,L
         00009370 00002120- 
    2120 00009390     c0e7          jruc    pyrnot_over
    2121                    
    2122 000093a0           pyrnorm
    2123 000093a0     1820          movk    1,a0
    2124 000093b0     0580          move    a0,@HALT
         000093c0 000006c0- 
    2125                    
    2126                    
    2127                    ;Timer on the round expired
    2128                    
    2129 000093e0     5621          clr     a1
    2130 000093f0     0d3f          callr   get_process_ptr
         00009400     0397  
    2131                    
    2132 00009410     b220          move    a1,*a0(OBJ_XVEL),L
         00009420     02d0  
    2133 00009430     b220          move    a1,*a0(OBJ_YVEL),L
         00009440     02f0  
    2134 00009450     b220          move    a1,*a0(OBJ_ZVEL),L
         00009460     0310  
    2135 00009470     09c1          movi    -1,a1
         00009480     ffff  
    2136 00009490     0781          move    a1,@MATCH_TIMERS,L      
         000094a0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   49

    2137                    
    2138 000094c0     1821          movk    1,a1
    2139 000094d0     0d3f          callr   get_process_ptr
         000094e0     0389  
    2140                    
    2141 000094f0     5621          clr     a1
    2142 00009500     b220          move    a1,*a0(OBJ_XVEL),L
         00009510     02d0  
    2143 00009520     b220          move    a1,*a0(OBJ_YVEL),L
         00009530     02f0  
    2144 00009540     b220          move    a1,*a0(OBJ_ZVEL),L
         00009550     0310  
    2145 00009560     09c1          movi    -1,a1
         00009570     ffff  
    2146 00009580     0781          move    a1,@MATCH_TIMERS+32,L      
         00009590 00000020! 
    2147                    
    2148 000095b0     0d5f          calla   DO_CROWD_CHEER
         000095c0 00000000! 
    2149                    
    2150 000095e0                   CREATE  CYCPID,CREATE_TIMEOUT
    2151                    
    2152 00009660     09c9          movi    55,a9
         00009670     0037  
    2153 00009680           pyrwait SLEEPK  1
    2154 000096c0                   PUSH    a9,a11
    2155 000096e0     0d5f          calla   set_images              ;Make shadows shift...
         000096f0 00000000! 
    2156 00009710                   PULL    a9,a11
    2157 00009730     3d89          dsjs    a9,pyrwait
    2158                    
    2159 00009740                   CREATE  ANNC_PID,announce_rnd_winner
    2160                            .if DEBUG
    2161                            move    a13,*a0(PDATA),L        ;pyrCREATOR (pdata)
    2162                            movi    $,a14
    2163                            move    a14,*a0(PDATA+20h),L    ;pyrORIGIN
    2164                            .endif
    2165                    
    2166 000097c0     1b89          movk    28,a9
    2167 000097d0           pyrwait1        SLEEPK  1
    2168 00009810                   PUSH    a9,a11
    2169 00009830     0d5f          calla   set_images              ;Make shadows shift...
         00009840 00000000! 
    2170 00009860                   PULL    a9,a11
    2171 00009880     3d89          dsjs    a9,pyrwait1
    2172                    
    2173                    ;       move    a11,a0
    2174                    ;       calla   KILL
    2175                    
    2176 00009890     09c0          movi    CLSNEUT|TYPTEXT|SUBMES1,a0
         000098a0     0702  
    2177 000098b0     0d5f          calla   obj_del1c               ;delete text/plates
         000098c0 00000000! 
    2178                    
    2179 000098e0           pyrwait2        SLEEPK  1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   50

    2180 00009920     0d5f          calla   set_images              ;Make shadows shift...
         00009930 00000000! 
    2181                    ;       move    @HALT,a0
    2182 00009950     09c0          movi    ANNC_PID,a0
         00009960     012e  
    2183 00009970     5621          clr     a1
    2184 00009980     03e1          not     a1
    2185 00009990     0d5f          calla   EXISTP
         000099a0 00000000! 
    2186 000099c0     cbf1          jrnz    pyrwait2
    2187                    
    2188 000099d0     05a0          move    @p1rounds,a0
         000099e0 00002200- 
    2189 00009a00     0b40          cmpi    2,a0
         00009a10     fffd  
    2190 00009a20     ca06          jrz     pyrend
    2191 00009a30     05a0          move    @p2rounds,a0
         00009a40 00002210- 
    2192 00009a60     0b40          cmpi    2,a0
         00009a70     fffd  
    2193 00009a80     cb03          jrnz    pyrnot_end
    2194                    
    2195 00009a90           pyrend
    2196                    ;Match is over.
    2197 00009a90     0580          move    a0,@match_over
         00009aa0 00002150- 
    2198                    
    2199                    ;Move match winning players match awards to winning players winstread awards,
    2200                    ;annunciate match awards for winning player, then clear get out
    2201                    
    2202 00009ac0           pyrnot_end
    2203 00009ac0     c000          jruc    pyrloop
         00009ad0     ff4a  
    2204                    
    2205                    **********
    2206                    ;Is this duplicated effort?  Jason, look into this...
    2207 00009ae0            SUBR   DO_SET_IMAGES
    2208 00009ae0     0d5f          CALLA   set_images
         00009af0 00000000! 
    2209 00009b10                   SLOOP   1,DO_SET_IMAGES
    2210                    
    2211                    **********
    2212                    
    2213 00009b80            SUBR   CLEAR_PROCESSES
    2214                    
    2215 00009b80     5600          clr     a0
    2216 00009b90     09e1          movi    wres0_objs,a1
         00009ba0 00000a10- 
    2217 00009bc0     09c2          movi    NUM_WRES*MAX_PIECES,a2
         00009bd0     002a  
    2218 00009be0           pyrclr_lp
    2219 00009be0     9201          move    a0,*a1+,L
    2220 00009bf0     3c42          dsj     a2,pyrclr_lp
    2221                    
    2222 00009c00     09e1          movi    process_ptrs,a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   51

         00009c10 00000930- 
    2223 00009c30     09c2          movi    NUM_WRES,a2
         00009c40     0007  
    2224 00009c50           pyrclr_ptr
    2225 00009c50     9201          move    a0,*a1+,L
    2226 00009c60     3c42          dsj     a2,pyrclr_ptr
    2227 00009c70     0960          rets
    2228                    
    2229 00009c80           ring_mod
    2230 00009c80 00000000!         .long   ringBMOD        ;wrestling ring
    2231 00009ca0     0069          .word   105,-450        ;x,y
    2232 00009cc0 00000000          .long   0
    2233                    
    2234                    *****************************************************************************
    2235                    *
    2236                    * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    2237                    * can probably get rid of this crap once scroller is finished
    2238                    * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    2239                    
    2240 00009ce0            SUBRP  update_positions
    2241                    
    2242 00009ce0     b5a0          move    *a13(PLYRNUM),a0
         00009cf0     0580  
    2243 00009d00                   X32     a0
    2244                    
    2245 00009d10     4c01          move    a0,a1
    2246 00009d20     0b21          addi    wrestler_x,a1
         00009d30 00001e40- 
    2247 00009d50     b7ae          move    *a13(OBJ_XPOS),a14,L
         00009d60     0100  
    2248 00009d70     83c1          move    a14,*a1,L
    2249                    
    2250 00009d80     4c01          move    a0,a1
    2251 00009d90     0b21          addi    wrestler_y,a1
         00009da0 00001f40- 
    2252                    ;;;;    move    *a13(OBJ_YPOS),a14,L
    2253 00009dc0     b5ae          move    *a13(GROUND_Y),a14
         00009dd0     0570  
    2254 00009de0     260e          sll     16,a14
    2255                    
    2256 00009df0     cf01          jrnn    oafok
    2257                    
    2258 00009e00     57ce          clr     a14
    2259 00009e10     83c1  oafok   move    a14,*a1,L
    2260                    
    2261 00009e20     4c01          move    a0,a1
    2262 00009e30     0b21          addi    wrestler_z,a1
         00009e40 00002040- 
    2263 00009e60     b7ae          move    *a13(OBJ_ZPOS),a14,L
         00009e70     0140  
    2264 00009e80     83c1          move    a14,*a1,L
    2265 00009e90     0960          rets
    2266                    
    2267                    *****************************************************************************
    2268                    *
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   52

    2269                    * a8    = player type (PLAYER, DRONE, REFEREE)
    2270                    * a9    = player side (PLYR1, PLYR2, NONE)
    2271                    * a10   = player number
    2272                    * a11   = wrestler number
    2273                    
    2274                    
    2275 00009ea0            SUBRP  wrestler_main
    2276                    
    2277 00009ea0     b10d          move    a8,*a13(PLYR_TYPE)
         00009eb0     05a0  
    2278 00009ec0     b12d          move    a9,*a13(PLYR_SIDE)
         00009ed0     05b0  
    2279 00009ee0     b14d          move    a10,*a13(PLYRNUM)
         00009ef0     0580  
    2280 00009f00     b16d          move    a11,*a13(WRESTLERNUM)
         00009f10     0590  
    2281                    
    2282 00009f20     4d40          MOVE    A10,A0
    2283 00009f30     0b40          CMPI    2,A0
         00009f40     fffd  
    2284 00009f50     c506          JRGE    NO_POINT_ITS_A_DRONE
    2285 00009f60     5621          CLR     A1
    2286 00009f70     24a0          SLL     5,A0
    2287 00009f80     0b20          ADDI    MATCH_TIMERS,A0
         00009f90 00000000! 
    2288 00009fb0     8220          MOVE    A1,*A0,L
    2289 00009fc0           NO_POINT_ITS_A_DRONE
    2290                    
    2291 00009fc0     09c0          movi    112,a0
         00009fd0     0070  
    2292 00009fe0     b00d          move    a0,*a13(OBJ_PRIORITY)
         00009ff0     0160  
    2293                    
    2294 0000a000     0d3f          callr   reset_start
         0000a010     0198  
    2295                    
    2296 0000a020     0d5f          calla   choose_pal              ;sets b0
         0000a030 00000000! 
    2297 0000a050     5621          clr     a1                      ;y pos
    2298 0000a060     09e2          movi    D2ST2B03,a2             ;* image
         0000a070 00000000! 
    2299 0000a090     09c3          movi    110,a3                  ;z pos
         0000a0a0     006e  
    2300 0000a0b0     09e4          movi    DMAWNZ|M_3D,a4          ;DMA flags
         0000a0c0 00008102  
    2301 0000a0e0     b08d          move    a4,*a13(OBJ_CONTROL)
         0000a0f0     0780  
    2302 0000a100     09c5          movi    CLSPLYR | TYPPLYR,a5    ;object ID
         0000a110     4100  
    2303 0000a120     56c6          clr     a6                      ;x vel
    2304 0000a130     56e7          clr     a7                      ;y vel
    2305                    
    2306 0000a140     18c9          movk    MAX_PIECES,a9
    2307 0000a150           sghnxt_obj
    2308 0000a150                   PUSH    b0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   53

    2309 0000a160     0d5f          calla   BEGINOBJP
         0000a170 00000000! 
    2310 0000a190                   PULL    b0
    2311 0000a1a0     a30a          move    a8,-*a10,L
    2312 0000a1b0     3ce9          dsj     a9,sghnxt_obj
    2313                    
    2314 0000a1c0     0d5f          calla   BEGINOBJP
         0000a1d0 00000000! 
    2315 0000a1f0     b30d          move    a8,*a13(ATTIMG_IMG),L
         0000a200     08c0  
    2316 0000a210     5600          clr     a0
    2317 0000a220     b20d          move    a0,*a13(ATTIMG_CUR_FRAME),L
         0000a230     08e0  
    2318 0000a240     b20d          move    a0,*a13(ATTIMG_LAST_FRAME),L
         0000a250     0900  
    2319 0000a260     b00d          move    a0,*a13(GETUP_TIME)
         0000a270     0460  
    2320 0000a280     b00d          move    a0,*a13(COMBO_COUNT)
         0000a290     0af0  
    2321 0000a2a0     b00d          move    a0,*a13(COMBO_START)
         0000a2b0     0b00  
    2322 0000a2c0     b00d          move    a0,*a13(OUTSIDE_ALONE)
         0000a2d0     0b70  
    2323 0000a2e0     b20d          move    a0,*a13(SPECIAL_MOVE_ADDR),L
         0000a2f0     0930  
    2324                    
    2325 0000a300     b20d          move    a0,*a13(LAST_HIT_TIME),L
         0000a310     0c50  
    2326 0000a320     b20d          move    a0,*a13(LAST_FLING_ATTEMPT),L
         0000a330     0df0  
    2327 0000a340     b20d          move    a0,*a13(HIT_GATE_TIME),L
         0000a350     0dd0  
    2328 0000a360     b20d          move    a0,*a13(LAST_HEADHOLD),L
         0000a370     0cd0  
    2329 0000a380     b20d          move    a0,*a13(LAST_FLING),L
         0000a390     0cf0  
    2330 0000a3a0     b20d          move    a0,*a13(LAST_SPUNCH),L
         0000a3b0     0e10  
    2331 0000a3c0     b20d          move    a0,*a13(LAST_SKICK),L
         0000a3d0     0e30  
    2332 0000a3e0     b00d          move    a0,*a13(CONSECUTIVE_HITS)
         0000a3f0     0e50  
    2333 0000a400     b20d          move    a0,*a13(LAST_DAMAGE),L
         0000a410     0d50  
    2334 0000a420     b00d          move    a0,*a13(DAMAGE_GIVEN)
         0000a430     0dc0  
    2335 0000a440     09c0          movi    8*60,a0
         0000a450     01e0  
    2336 0000a460     b00d          move    a0,*a13(DELAY_METER)
         0000a470     0ad0  
    2337                    
    2338 0000a480     b500          move    *a8(OPAL),a0
         0000a490     0150  
    2339 0000a4a0     b00d          move    a0,*a13(OBJ_PAL)
         0000a4b0     07a0  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   54

    2340 0000a4c0     b00d          move    a0,*a13(MY_PAL)
         0000a4d0     08a0  
    2341                    
    2342 0000a4e0     09e0          movi    shadow_p,a0
         0000a4f0 00000000! 
    2343 0000a510     0d5f          calla   pal_getf
         0000a520 00000000! 
    2344 0000a540     b7a8          move    *a13(OBJ_BASE),a8,L
         0000a550     0760  
    2345 0000a560     8708          move    *a8,a8,L                ;1st object
    2346 0000a570     b008          move    a0,*a8(OPAL)            ;set palette for shadow
         0000a580     0150  
    2347                    
    2348 0000a590     09c0          movi    MAT_Y,a0
         0000a5a0     003e  
    2349 0000a5b0     b00d          move    a0,*a13(GROUND_Y)
         0000a5c0     0570  
    2350                    
    2351 0000a5d0     5600          clr     a0
    2352 0000a5e0     b00d          move    a0,*a13(ATTACK_TIME)
         0000a5f0     05f0  
    2353 0000a600     b00d          move    a0,*a13(INRING)
         0000a610     0560  
    2354 0000a620     b00d          MOVE    A0,*A13(COMBO_START)
         0000a630     0b00  
    2355 0000a640     b00d          MOVE    A0,*A13(COMBO_COUNT)
         0000a650     0af0  
    2356                    
    2357 0000a660     b20d          move    a0,*a13(OBJ_XVEL),L
         0000a670     02d0  
    2358 0000a680     b20d          move    a0,*a13(OBJ_YVEL),L
         0000a690     02f0  
    2359 0000a6a0     b20d          move    a0,*a13(OBJ_ZVEL),L
         0000a6b0     0310  
    2360 0000a6c0     b20d          move    a0,*a13(SHADTRAIL_PROC),L
         0000a6d0     0a90  
    2361 0000a6e0     b00d          move    a0,*a13(I_WILL_DIE)
         0000a6f0     0b30  
    2362 0000a700     b20d          move    a0,*a13(STATUS_FLAGS),L
         0000a710     0b50  
    2363                    
    2364 0000a720     b00d          move    a0,*a13(BUT_VAL_CUR)
         0000a730     0b90  
    2365 0000a740     b00d          move    a0,*a13(BUT_VAL_DOWN)
         0000a750     0ba0  
    2366 0000a760     b00d          move    a0,*a13(BUT_VAL_UP)
         0000a770     0bb0  
    2367 0000a780     b00d          move    a0,*a13(STICK_VAL_CUR)
         0000a790     0bc0  
    2368 0000a7a0     b00d          move    a0,*a13(STICK_VAL_DOWN)
         0000a7b0     0bd0  
    2369 0000a7c0     b00d          move    a0,*a13(STICK_VAL_UP)
         0000a7d0     0be0  
    2370 0000a7e0     b00d          move    a0,*a13(STICK_REL_CUR)
         0000a7f0     0bf0  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   55

    2371 0000a800     b00d          move    a0,*a13(STICK_REL_NEW)
         0000a810     0c00  
    2372                    
    2373                    
    2374                    ;       calla   clear_damage_log
    2375 0000a820     0d3f          callr   ani_init                ;start default animation
         0000a830     0213  
    2376                    
    2377 0000a840     05ae          move    @PCNT,a14
         0000a850 00000170- 
    2378 0000a870     b1cd          move    a14,*a13(FOOT_PCNT),W   ;init foot timer
         0000a880     0890  
    2379                    
    2380                     .if COL_DEBUG
    2381                            move    a13,a10
    2382                            CREATE  CDEBUG_PID,collis_debug
    2383                            move    a13,a10
    2384                            CREATE  CDEBUG_PID,collis_debug2
    2385                     .endif
    2386                    
    2387 0000a890     0d5f          calla   init_smoves
         0000a8a0 00000000! 
    2388 0000a8c0     0d5f          calla   set_collision_boxes
         0000a8d0 00000000! 
    2389                    
    2390                            .ref    drone_calcskill
    2391 0000a8f0     0d5f          calla   drone_calcskill
         0000a900 00000000! 
    2392                    
    2393                    ;sghwait        MOVE    @VCOUNT,a0
    2394                    ; andi  7,a0
    2395                    ; jrnz  sghwait
    2396                    ; TINTON
    2397                    ; move  @VCOUNT,a0
    2398                    ; PUSH  a0
    2399                    
    2400                    
    2401                    ; move  @VCOUNT,a0
    2402                    ; PULL  a1
    2403                    ; sub   a1,a0
    2404                    ; TINTOFF
    2405                    
    2406 0000a920                   SLEEPK  1
    2407                    
    2408 0000a960     0d3f          callr   calc_closest
         0000a970     0683  
    2409                    
    2410 0000a980           sghloop
    2411                    ;-----> calla   animate_wrestler
    2412                    
    2413 0000a980     0d5f          calla   ARE_WE_IN_RING
         0000a990 00000000! 
    2414                    
    2415 0000a9b0     0d5f          calla   set_collision_boxes
         0000a9c0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   56

    2416                    
    2417 0000a9e0     0d3f          callr   confine_wrestler
         0000a9f0     027a  
    2418 0000aa00     0d3f          callr   confine_wrestler_fix2
         0000aa10     0562  
    2419                    
    2420 0000aa20     0d3f          callr   update_newfacing
         0000aa30     0247  
    2421                    
    2422 0000aa40     0d3f          callr   update_positions        ;used by scroller (temp!)
         0000aa50     ff28  
    2423                    
    2424 0000aa60     b5a0          move    *a13(PLYR_TYPE),a0
         0000aa70     05a0  
    2425 0000aa80     ca07          jrz     sghhmn                  ;Human?
    2426 0000aa90     b5ae          move    *a13(STATUS_FLAGS),a14
         0000aaa0     0b50  
    2427 0000aab0     1f8e          btst    B_ZOMBIE,a14
    2428 0000aac0     cb03          jrnz    sghzmb                  ;Zombie?
    2429 0000aad0     0d5f          calla   drone_main
         0000aae0 00000000! 
    2430 0000ab00           sghzmb
    2431 0000ab00           sghhmn
    2432                    
    2433                    ;       TINTOFF
    2434 0000ab00     1820          movk    1,a0
    2435 0000ab10     b5ae          move    *a13(STATUS_FLAGS),a14
         0000ab20     0b50  
    2436 0000ab30     1f0e          btst    B_KOD,a14
    2437 0000ab40     ca02          jrz     sghslp
    2438 0000ab50     09c0          movi    07fffH,a0
         0000ab60     7fff  
    2439 0000ab70           sghslp  SLEEPR  a0
    2440                    ;       TINTON
    2441                    
    2442 0000abb0     b5a0          MOVE    *A13(RISK),A0
         0000abc0     0950  
    2443 0000abd0     ca09          JRZ     NO_DECREMENT
    2444 0000abe0     1420          DEC     A0
    2445 0000abf0     b00d          MOVE    A0,*A13(RISK)
         0000ac00     0950  
    2446                    
    2447 0000ac10     0b80          andi    7fffh,a0
         0000ac20 ffff8000  
    2448 0000ac40     cb02          jrnz    NO_DECREMENT
    2449                    ;Turn off taunt high risk move bonus
    2450 0000ac50     b00d          move    a0,*a13(RISK)
         0000ac60     0950  
    2451                    
    2452 0000ac70           NO_DECREMENT
    2453                    
    2454 0000ac70     0d3f          callr   update_joystat
         0000ac80     07b6  
    2455 0000ac90     0d3f          callr   count_button_presses
         0000aca0     0813  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   57

    2456                    
    2457 0000acb0     0d5f          calla   keep_onscreen
         0000acc0 00000000! 
    2458                    
    2459 0000ace0     0d5f          calla   wrestler_veladd         ;<-------
         0000acf0 00000000! 
    2460 0000ad10     0d3f          callr   wrestler_friction       ;<-------
         0000ad20     0539  
    2461                    
    2462 0000ad30     0d5f          calla   animate_wrestler        ;<-------
         0000ad40 00000000! 
    2463 0000ad60     0d5f          calla   set_collision_boxes     ;<-------
         0000ad70 00000000! 
    2464                    
    2465 0000ad90     0d3f          callr   confine_wrestler        ;<--- temp fix!
         0000ada0     023f  
    2466 0000adb0     0d3f          callr   confine_wrestler_fix1
         0000adc0     0523  
    2467                    
    2468 0000add0     0d3f          callr   calc_closest2
         0000ade0     0622  
    2469                    
    2470 0000adf0     0d3f          callr   move_wrestler
         0000ae00     056e  
    2471                    
    2472                    ;---->  calla   wrestler_veladd
    2473                    ;---->  callr   wrestler_friction
    2474                    
    2475 0000ae10     0d3f          callr   update_links
         0000ae20     01fd  
    2476                    
    2477 0000ae30     0d5f          calla   set_collision_boxes
         0000ae40 00000000! 
    2478 0000ae60     0d5f          calla   overlap_collision
         0000ae70 00000000! 
    2479                    
    2480                    
    2481 0000ae90     b5a0          move    *a13(ANIMODE),a0
         0000aea0     0660  
    2482 0000aeb0     1e40          btst    MODE_KEEPATTACHED_BIT,a0
    2483 0000aec0     ca02          jrz     sghno_attach
    2484 0000aed0     0d3f          callr   master_keep_attached
         0000aee0     06e6  
    2485 0000aef0           sghno_attach
    2486                    
    2487                    
    2488 0000aef0     b5a0          move    *a13(ANIMODE),a0
         0000af00     0660  
    2489 0000af10     1f80          btst    MODE_NOAUTOFLIP_BIT,a0
    2490 0000af20     cb03          jrnz    sghno_flip
    2491 0000af30     4da0          move    a13,a0
    2492 0000af40     0d3f          callr   set_wrestler_xflip
         0000af50     0210  
    2493 0000af60           sghno_flip
    2494                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   58

    2495 0000af60     0d3f          callr   update_joy_dtime
         0000af70     05de  
    2496                    
    2497                    ;       move    *a13(BURNOUT_COUNT),a0
    2498                    ;       jrz     sghskp
    2499                    ;       dec     a0
    2500                    ;       move    a0,*a13(BURNOUT_COUNT)
    2501                    ;sghskp
    2502                    ;This is for delaying the reading of buttons just after regaining
    2503                    ;control from being flung.  This will stop inadvertant moves from happening
    2504                    ;while the player is still whacking on his buttons
    2505                    
    2506 0000af80     b5a0          move    *a13(DELAY_BUTNS),a0
         0000af90     0ab0  
    2507 0000afa0     ca03          jrz     sghskp2
    2508 0000afb0     1420          dec     a0
    2509 0000afc0     b00d          move    a0,*a13(DELAY_BUTNS)
         0000afd0     0ab0  
    2510 0000afe0           sghskp2
    2511                    ;This is for delaying collisions when a player gets up
    2512                    
    2513 0000afe0     b5a0          move    *a13(SAFE_TIME),a0
         0000aff0     0ac0  
    2514 0000b000     ca03          jrz     sghskp3
    2515 0000b010     1420          dec     a0
    2516 0000b020     b00d          move    a0,*a13(SAFE_TIME)
         0000b030     0ac0  
    2517 0000b040           sghskp3
    2518                    ;This is for delaying the reappearance of a getup meter
    2519                    
    2520 0000b040     b5a0          move    *a13(DELAY_METER),a0
         0000b050     0ad0  
    2521 0000b060     ca03          jrz     sghskp4
    2522 0000b070     1420          dec     a0
    2523 0000b080     b00d          move    a0,*a13(DELAY_METER)
         0000b090     0ad0  
    2524 0000b0a0           sghskp4
    2525                    ;This is for disallowing movement by wrestler
    2526                    
    2527 0000b0a0     b5a0          move    *a13(IMMOBILIZE_TIME),a0
         0000b0b0     0ae0  
    2528 0000b0c0     ca03          jrz     sghskp5
    2529 0000b0d0     1420          dec     a0
    2530 0000b0e0     b00d          move    a0,*a13(IMMOBILIZE_TIME)
         0000b0f0     0ae0  
    2531 0000b100           sghskp5
    2532                    ;This is for walking fast powerup
    2533                    
    2534 0000b100     b5a0          move    *a13(WALK_FAST),a0
         0000b110     0b40  
    2535 0000b120     ca04          jrz     sghskp6
    2536 0000b130     ce03          jrn     sghskp6
    2537 0000b140     1420          dec     a0
    2538 0000b150     b00d          move    a0,*a13(WALK_FAST)
         0000b160     0b40  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   59

    2539 0000b170           sghskp6
    2540 0000b170     b5a0          move    *a13(GETUP_TIME),a0
         0000b180     0460  
    2541 0000b190     ca00          jrz     sghloop
         0000b1a0     ff7d  
    2542                    
    2543 0000b1b0     07ae          move    @match_time,a14,L
         0000b1c0 00002120- 
    2544 0000b1e0     cb05          jrnz    sghnotend
    2545                    ;Match timer ran out...
    2546 0000b1f0     5600          clr     a0
    2547 0000b200     b00d          move    a0,*a13(GETUP_TIME)
         0000b210     0460  
    2548 0000b220     c000          jruc    sghloop
         0000b230     ff74  
    2549 0000b240           sghnotend
    2550 0000b240     b5ae          move    *a13(DELAY_METER),a14
         0000b250     0ad0  
    2551 0000b260     ca05          jrz     sghreg
    2552                    ;Don't want to allow getup time to be set this close to last time!
    2553                            ;allow the meter to come right back if stay_down is set
    2554                            .if DEBUG
    2555                            move    @stay_down,a14
    2556                            jrnz    sghreg
    2557                            .endif
    2558 0000b270     5600          clr     a0
    2559 0000b280     b00d          move    a0,*a13(GETUP_TIME)
         0000b290     0460  
    2560 0000b2a0     ca00          jrz     sghloop
         0000b2b0     ff6c  
    2561 0000b2c0           sghreg
    2562                    
    2563                            .if DEBUG
    2564                    ;If stay_down flag is set, don't decrement
    2565                            move    @stay_down,a14
    2566                            jrz     sghdec
    2567                            inc     a0
    2568                    sghdec
    2569                            .endif
    2570 0000b2c0     1420          dec     a0
    2571                    
    2572 0000b2d0     b00d          move    a0,*a13(GETUP_TIME)
         0000b2e0     0460  
    2573 0000b2f0     ca25          jrz     sghclr_dizzy
    2574                    
    2575 0000b300           sghskip
    2576                    
    2577                    ;NOTE:
    2578                    ;Drones will have to fill up their meter
    2579                    ;at a faster pace!
    2580                    
    2581                    ;Allow players to whack buttons to speed
    2582                    ;up their recovery from getup_time.
    2583                    ;Remember, the wrestler's meter doesn't have to be visible for him
    2584                    ;to still have a getup time set!
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   60

    2585                    ;As long as getup_time has a value, he is stuck.
    2586                    
    2587                            ;get data on this and last ticks
    2588 0000b300     4da0          move    a13,a0
    2589 0000b310     0d5f          calla   wres_get_but_val_down
         0000b320 00000000! 
    2590 0000b340     4c02          move    a0,a2
    2591 0000b350     4da0          move    a13,a0
    2592 0000b360     0d5f          calla   wres_get_stick_val_down
         0000b370 00000000! 
    2593 0000b390     5440          or      a2,a0
    2594 0000b3a0     b5a1          move    *a13(STATUS_FLAGS),a1
         0000b3b0     0b50  
    2595                    
    2596 0000b3c0     4c2e          move    a1,a14
    2597 0000b3d0     0b8e          andni   M_PRESS_LAST,a14
         0000b3e0 00000001  
    2598 0000b400                   TEST    a0
    2599 0000b410     ca03          jrz     sghset_flag
    2600 0000b420     0bae          ori     M_PRESS_LAST,a14
         0000b430 00000001  
    2601 0000b450           sghset_flag
    2602 0000b450     b1cd          move    a14,*a13(STATUS_FLAGS)
         0000b460     0b50  
    2603                    
    2604 0000b470                   TEST    a0
    2605 0000b480     cb03          jrnz    sghdeduct_three
    2606 0000b490     1fe1          BTST    B_PRESS_LAST,a1
    2607 0000b4a0     ca00          jrz     sghloop
         0000b4b0     ff4c  
    2608                    
    2609 0000b4c0           sghdeduct_three
    2610 0000b4c0     b5ae          move    *a13(GETUP_TIME),a14
         0000b4d0     0460  
    2611 0000b4e0     146e          subk    3,a14
    2612 0000b4f0     cf01          jrnn    sghok
    2613 0000b500     57ce          clr     a14
    2614 0000b510           sghok
    2615 0000b510     b1cd          move    a14,*a13(GETUP_TIME)
         0000b520     0460  
    2616 0000b530     c100          jrp     sghloop
         0000b540     ff43  
    2617                    
    2618                    
    2619 0000b550           sghclr_dizzy
    2620 0000b550     5600          clr     a0
    2621 0000b560     b00d          move    a0,*a13(PLYR_DIZZY)
         0000b570     0600  
    2622 0000b580     b00d          move    a0,*a13(STARS_FLAG)     ;Gets rid of them...
         0000b590     07f0  
    2623                    
    2624                    ;Delay button reads
    2625 0000b5a0     09c0          movi    40,a0
         0000b5b0     0028  
    2626 0000b5c0     b00d          move    a0,*a13(DELAY_BUTNS)
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   61

         0000b5d0     0ab0  
    2627                    
    2628 0000b5e0     c000          jruc    sghloop
         0000b5f0     ff38  
    2629                    
    2630                    *****************************************************************************
    2631                    
    2632 0000b600            SUBR   reset_for_round
    2633                    
    2634                    ;Reset world and both wrestlers for the start
    2635                    ;of a new round - Called from lifebar.
    2636                    
    2637 0000b600                   PUSH    a13
    2638                    
    2639 0000b610     5621          clr     a1
    2640 0000b620           mhllp0  PUSH    a1
    2641 0000b630     0d3f          callr   reset_wrestle
         0000b640     0025  
    2642 0000b650                   PULL    a1
    2643 0000b660     1021          inc     a1
    2644 0000b670     0b41          cmpi    NUM_WRES,a1
         0000b680     fff8  
    2645 0000b690     c4f8          jrlt    mhllp0
    2646                    
    2647 0000b6a0                   PULL    a13
    2648                    
    2649 0000b6b0     05a0          move    @current_round,a0
         0000b6c0 000021f0- 
    2650 0000b6e0     1020          inc     a0
    2651 0000b6f0     0580          move    a0,@current_round
         0000b700 000021f0- 
    2652                    
    2653                            ;reset life data
    2654 0000b720     0d5f          calla   init_rnd_life_data
         0000b730 00000000! 
    2655                    
    2656                            ;reset special move processes
    2657 0000b750     0d3f          callr   reset_smoves
         0000b760     0c2b  
    2658                    
    2659                            ;reset match_time
    2660 0000b770     1920          movk    9,a0
    2661 0000b780     0580          move    a0,@match_time          ;10's
         0000b790 00002120- 
    2662 0000b7b0     1920          movk    9,a0
    2663 0000b7c0     0580          move    a0,@match_time+10h      ;1's
         0000b7d0 00002130- 
    2664 0000b7f0     5600          clr     a0
    2665 0000b800     0580          move    a0,@match_time+20h      ;fractional
         0000b810 00002140- 
    2666                    
    2667                            ;reset various other crap
    2668 0000b830     5600          clr     a0
    2669 0000b840     0580          move    a0,@any_hits
         0000b850 000022f0- 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   62

    2670                    
    2671 0000b870     0d3f          callr   init_reduce_bog
         0000b880     06e7  
    2672                    
    2673 0000b890           nobody_home
    2674 0000b890     0960          rets
    2675                    
    2676                    *****************************************************************************
    2677                    
    2678 0000b8a0           reset_wrestle
    2679 0000b8a0     0d3f          callr   get_process_ptr
         0000b8b0     014c  
    2680 0000b8c0     4c0d          move    a0,a13
    2681 0000b8d0     cafb          jrz     nobody_home
    2682                    
    2683 0000b8e0     0d5f          calla   drone_change_back
         0000b8f0 00000000! 
    2684                    
    2685 0000b910     5600          clr     a0
    2686 0000b920     b00d          move    a0,*a13(PLYR_DIZZY_CNT)
         0000b930     0610  
    2687                    ;Don't allow meters for the first x seconds of round
    2688 0000b940     09c0          movi    14*60,a0
         0000b950     0348  
    2689 0000b960     b00d          move    a0,*a13(DELAY_METER)
         0000b970     0ad0  
    2690                    
    2691 0000b980     b5aa          move    *a13(PLYRNUM),a10
         0000b990     0580  
    2692                    
    2693 0000b9a0           reset_start
    2694                    
    2695                            ;choose starting position - our index into the ugeteamX_starts table
    2696                            ; is the number of teammates with PLYRNUM's lower than ours. (0-2)
    2697 0000b9a0     b5a0          move    *a13(PLYR_SIDE),a0
         0000b9b0     05b0  
    2698 0000b9c0     09e1          movi    process_ptrs,a1
         0000b9d0 00000930- 
    2699 0000b9f0     5642          clr     a2
    2700                    
    2701 0000ba00     962e  ugeloop0        move    *a1+,a14,L
    2702 0000ba10     cafe          jrz     ugeloop0                ;skip inactive
    2703 0000ba20     49ae          cmp     a13,a14
    2704 0000ba30     ca06          jreq    ugeset0         ;hit self -> we're done
    2705 0000ba40     b5ce          move    *a14(PLYR_SIDE),a14
         0000ba50     05b0  
    2706 0000ba60     49c0          cmp     a14,a0
    2707 0000ba70     cbf8          jrne    ugeloop0
    2708 0000ba80     1022          inc     a2              ;lower PSTATUS2, same PLYR_SIDE, so inc index
    2709 0000ba90     c0f6          jruc    ugeloop0
    2710                            
    2711 0000baa0           ugeset0 ;a2 is index.
    2712 0000baa0                   X64     a2
    2713 0000bab0     09e9          movi    ugeteam1_starts,a9
         0000bac0 0000bfd0' 
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   63

    2714 0000bae0                   TEST    a0              ;team == 0?
    2715 0000baf0     ca03          jrz     ugeadd
    2716 0000bb00     09e9          movi    ugeteam2_starts,a9
         0000bb10 0000c090' 
    2717 0000bb30     4049  ugeadd  add     a2,a9
    2718                    
    2719 0000bb40     9520          move    *a9+,a0
    2720 0000bb50     2600          sll     16,a0                   ;x val
    2721 0000bb60     b20d          move    a0,*a13(OBJ_XPOS),L
         0000bb70     0100  
    2722 0000bb80     9520          move    *a9+,a0
    2723 0000bb90     2600          sll     16,a0                   ;z val
    2724 0000bba0     b20d          move    a0,*a13(OBJ_ZPOS),L
         0000bbb0     0140  
    2725                    
    2726 0000bbc0     5600          clr     a0
    2727 0000bbd0     b20d          move    a0,*a13(OBJ_YPOS),L
         0000bbe0     0120  
    2728                    
    2729 0000bbf0     09c0          movi    MAT_Y,a0
         0000bc00     003e  
    2730 0000bc10     b00d          move    a0,*a13(GROUND_Y)
         0000bc20     0570  
    2731                    
    2732                    ;From veladd
    2733 0000bc30     b5a2          move    *a13(GROUND_Y),a2
         0000bc40     0570  
    2734 0000bc50     2602          sll     16,a2
    2735 0000bc60     b7a0          move    *a13(OBJ_YPOS),a0,L
         0000bc70     0120  
    2736 0000bc80     4440          sub     a2,a0                   ;- GROUND_Y
    2737 0000bc90     b7a1          move    *a13(OBJ_YVEL),a1,L
         0000bca0     02f0  
    2738 0000bcb0     4020          add     a1,a0
    2739 0000bcc0     cf03          jrnn    ugeyok
    2740                    
    2741 0000bcd0     5600          clr     a0
    2742 0000bce0     b20d          move    a0,*a13(OBJ_YVEL),L
         0000bcf0     02f0  
    2743 0000bd00           ugeyok
    2744 0000bd00     4040          add     a2,a0                   ;+ GROUND_Y
    2745 0000bd10     b20d          move    a0,*a13(OBJ_YPOS),L
         0000bd20     0120  
    2746                    
    2747 0000bd30     4d40          move    a10,a0
    2748 0000bd40                   X32     a0
    2749 0000bd50     0b20          addi    obj_look,a0
         0000bd60 0000c870' 
    2750 0000bd80     8600          move    *a0,a0,L                ;* start of objects
    2751 0000bd90     b20d          move    a0,*a13(OBJ_BASE),L
         0000bda0     0760  
    2752 0000bdb0     4c0a          move    a0,a10
    2753 0000bdc0     0b0a          addi    32*MAX_PIECES,a10       ;start at end to reverse priorities
         0000bdd0     00c0  
    2754                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   64

    2755 0000bde0     9520          move    *a9+,a0
    2756 0000bdf0     b00d          move    a0,*a13(NEW_FACING_DIR)
         0000be00     04d0  
    2757 0000be10     b00d          move    a0,*a13(FACING_DIR)
         0000be20     04c0  
    2758                    
    2759 0000be30     5600          clr     a0                      ;x pos
    2760 0000be40     b00d          move    a0,*a13(PLYRMODE)
         0000be50     05c0  
    2761 0000be60     b00d          move    a0,*a13(PLYR_DIZZY)
         0000be70     0600  
    2762 0000be80     b00d          move    a0,*a13(ANIMODE)
         0000be90     0660  
    2763 0000bea0     b00d          move    a0,*a13(ANIMODE2)
         0000beb0     06e0  
    2764                    
    2765                    ;       movi    MAT_Y,a0
    2766                    ;       move    a0,*a13(GROUND_Y)
    2767                    
    2768 0000bec0     5600          clr     a0
    2769                    ;       move    a0,*a13(BURNOUT_COUNT)
    2770 0000bed0     b00d          move    a0,*a13(INRING)
         0000bee0     0560  
    2771                    
    2772 0000bef0     b20d          move    a0,*a13(OBJ_XVEL),L
         0000bf00     02d0  
    2773 0000bf10     b20d          move    a0,*a13(OBJ_YVEL),L
         0000bf20     02f0  
    2774 0000bf30     b20d          move    a0,*a13(OBJ_ZVEL),L
         0000bf40     0310  
    2775                    
    2776                    ;       calla   clear_damage_log
    2777 0000bf50     0d3f          callr   ani_init                ;start default animation
         0000bf60     00a0  
    2778                    
    2779 0000bf70     05ae          move    @PCNT,a14
         0000bf80 00000170- 
    2780 0000bfa0     b1cd          move    a14,*a13(FOOT_PCNT),W   ;init foot timer
         0000bfb0     0890  
    2781                    
    2782 0000bfc0     0960          rets
    2783                    
    2784                            ;X,Z,face_dir,unused for team 0
    2785 0000bfd0           ugeteam1_starts
    2786 0000bfd0     03dd          .word   RING_X_CENTER-85,1127+93,9,0    ;first player on team
    2787 0000c010     039c          .word   RING_X_CENTER-150,1127+170,9,0  ;second
    2788 0000c050     041e          .word   RING_X_CENTER-20,1127+16,10,0   ;third
    2789                    
    2790                            ;X,Z,face_dir,unused for team 1
    2791 0000c090           ugeteam2_starts
    2792 0000c090     0487          .word   RING_X_CENTER+85,1103+93,6,0    ;first player on team
    2793 0000c0d0     04c8          .word   RING_X_CENTER+150,1103+170,5,0  ;second
    2794 0000c110     0446          .word   RING_X_CENTER+20,1103+16,6,0    ;third
    2795                    
    2796                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   65

    2797                    *****************************************************************************
    2798                    
    2799 0000c150            SUBR   reset_for_round2
    2800                    
    2801 0000c150                   PUSH    a13
    2802                    
    2803 0000c160     57ce          clr     a14
    2804 0000c170     058e          move    a14,@annc_rnd_winner_done
         0000c180 000023d0- 
    2805                    
    2806                    ;un-canned for NUM_WRES wrestlers
    2807                    
    2808 0000c1a0     5621          clr     a1
    2809 0000c1b0           wzxlp1  PUSH    a1
    2810 0000c1c0     0d3f          callr   reset_wrestle2
         0000c1d0     0007  
    2811 0000c1e0                   PULL    a1
    2812 0000c1f0     1021          inc     a1
    2813 0000c200     0b41          cmpi    NUM_WRES,a1
         0000c210     fff8  
    2814 0000c220     c4f8          jrlt    wzxlp1
    2815                    
    2816 0000c230                   PULL    a13
    2817 0000c240     0960          rets
    2818                    
    2819 0000c250           reset_wrestle2
    2820 0000c250     0d3f          callr   get_process_ptr
         0000c260     00b1  
    2821 0000c270     4c0d          move    a0,a13
    2822 0000c280     ca00          jrz     nobody_home
         0000c290     ff5f  
    2823                    
    2824 0000c2a0     0d5f          calla   drone_change_back
         0000c2b0 00000000! 
    2825                    
    2826 0000c2d0     1bc0          movk    30,a0
    2827 0000c2e0     b00d          move    a0,*a13(IMMOBILIZE_TIME)
         0000c2f0     0ae0  
    2828                    
    2829                            ;Re-initialize these variables between rounds
    2830 0000c300     5600          clr     a0
    2831 0000c310     b00d          move    a0,*a13(PLYR_DIZZY_CNT)
         0000c320     0610  
    2832 0000c330     b00d          move    a0,*a13(GETUP_TIME)
         0000c340     0460  
    2833 0000c350     b00d          move    a0,*a13(AUTO_PIN_CNTDOWN)
         0000c360     0c70  
    2834 0000c370     b20d          move    a0,*a13(SPECIAL_MOVE_ADDR),L
         0000c380     0930  
    2835 0000c390     b20d          move    a0,*a13(LAST_HIT_TIME),L
         0000c3a0     0c50  
    2836 0000c3b0     b20d          move    a0,*a13(LAST_FLING_ATTEMPT),L
         0000c3c0     0df0  
    2837 0000c3d0     b20d          move    a0,*a13(HIT_GATE_TIME),L
         0000c3e0     0dd0  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   66

    2838 0000c3f0     b20d          move    a0,*a13(LAST_HEADHOLD),L
         0000c400     0cd0  
    2839 0000c410     b20d          move    a0,*a13(LAST_SPUNCH),L
         0000c420     0e10  
    2840 0000c430     b20d          move    a0,*a13(LAST_SKICK),L
         0000c440     0e30  
    2841 0000c450     b00d          move    a0,*a13(CONSECUTIVE_HITS)
         0000c460     0e50  
    2842 0000c470     b20d          move    a0,*a13(LAST_FLING),L
         0000c480     0cf0  
    2843 0000c490     b20d          move    a0,*a13(LAST_HIPTOSS),L
         0000c4a0     0d10  
    2844 0000c4b0     b20d          move    a0,*a13(LAST_DAMAGE),L
         0000c4c0     0d50  
    2845                    
    2846                            ;clear STATUS_FLAGS, except for bits in SF_RESET_MASK,
    2847                            ; which should be preserved between rounds.
    2848 0000c4d0     b7ae          move    *a13(STATUS_FLAGS),a14,L
         0000c4e0     0b50  
    2849 0000c4f0     0b8e          andi    SF_RESET_MASK,a14
         0000c500 ffffbffb  
    2850 0000c520     b3cd          move    a14,*a13(STATUS_FLAGS),L
         0000c530     0b50  
    2851                    
    2852                            ;set PTIME to 1, just in case they were KO'd last round.
    2853 0000c540     182e          movk    1,a14
    2854 0000c550     b1cd          move    a14,*a13(PTIME)
         0000c560     0030  
    2855                    
    2856 0000c570     b5aa          move    *a13(PLYRNUM),a10
         0000c580     0580  
    2857                    
    2858 0000c590           reset_start2
    2859 0000c590     0d3f          callr   calc_closest
         0000c5a0     04c0  
    2860 0000c5b0     0d5f          calla   set_collision_boxes
         0000c5c0 00000000! 
    2861 0000c5e0     0d3f          callr   confine_wrestler
         0000c5f0     00ba  
    2862 0000c600     0d3f          callr   update_positions        ;used by scroller (temp!)
         0000c610     fd6c  
    2863 0000c620     0d3f          callr   update_joystat
         0000c630     061b  
    2864 0000c640     0d3f          callr   count_button_presses
         0000c650     0678  
    2865 0000c660     0d5f          calla   wrestler_veladd         ;<-------
         0000c670 00000000! 
    2866 0000c690     0d3f          callr   wrestler_friction       ;<-------
         0000c6a0     03a1  
    2867 0000c6b0     0d5f          calla   set_collision_boxes     ;<-------
         0000c6c0 00000000! 
    2868 0000c6e0     0d3f          callr   confine_wrestler        ;<--- temp fix!
         0000c6f0     00aa  
    2869 0000c700     0d3f          callr   calc_closest
         0000c710     04a9  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   67

    2870 0000c720     0d3f          callr   move_wrestler
         0000c730     03db  
    2871 0000c740     0d3f          callr   ani_init
         0000c750     0021  
    2872 0000c760     0d3f          callr   update_links
         0000c770     0068  
    2873 0000c780     0d5f          calla   set_collision_boxes
         0000c790 00000000! 
    2874 0000c7b0     0d5f          calla   overlap_collision
         0000c7c0 00000000! 
    2875                    
    2876 0000c7e0     4da0          move    a13,a0
    2877 0000c7f0     0d3f          callr   set_wrestler_xflip
         0000c800     0085  
    2878 0000c810     0d3f          callr   update_joy_dtime
         0000c820     0453  
    2879 0000c830     0d5f          calla   drone_calcskill
         0000c840 00000000! 
    2880                     
    2881 0000c860     0960          rets
    2882                    
    2883                    
    2884                    *****************************************************************************
    2885                    *
    2886                    * wrestler object blocks
    2887                    
    2888 0000c870           obj_look
    2889 0000c870 00000a10-         .long   wres0_objs      ;0
    2890 0000c890 00000ad0-         .long   wres1_objs      ;1
    2891 0000c8b0 00000b90-         .long   wres2_objs      ;2
    2892 0000c8d0 00000c50-         .long   wres3_objs      ;3
    2893 0000c8f0 00000d10-         .long   wres4_objs      ;4
    2894 0000c910 00000dd0-         .long   wres5_objs      ;5
    2895 0000c930 00000e90-         .long   wres6_objs      ;6
    2896 0000c950 00000f50-         .long   wres7_objs      ;7
    2897                    
    2898                    
    2899                    *****************************************************************************
    2900                    *
    2901                    * initializes animations for each wrestler
    2902                    *
    2903                    * a13 = * wrestler process
    2904                    
    2905 0000c970            SUBR   ani_init
    2906                    
    2907                    
    2908 0000c970     09c0          movi    100h,a0
         0000c980     0100  
    2909 0000c990     b00d          move    a0,*a13(ANI_SPEED)      ;normal speed animations
         0000c9a0     0650  
    2910                    
    2911 0000c9b0     5600          clr     a0
    2912 0000c9c0     b00d          move    a0,*a13(I_WILL_DIE)
         0000c9d0     0b30  
    2913                            .ref    hyper_speed_on
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   68

    2914                    
    2915 0000c9e0     05ae          move    @hyper_speed_on,a14
         0000c9f0 00000000! 
    2916 0000ca10     b1cd          move    a14,*a13(WALK_FAST)
         0000ca20     0b40  
    2917                    ;       move    a0,*a13(WALK_FAST)
    2918                    
    2919 0000ca30     b20d          move    a0,*a13(ATTIMG_CUR_FRAME),L
         0000ca40     08e0  
    2920                    
    2921 0000ca50     b5a0          move    *a13(WRESTLERNUM),a0
         0000ca60     0590  
    2922 0000ca70                   X32     a0
    2923 0000ca80     0b20          addi    fhuinit_addr,a0
         0000ca90 0000cae0' 
    2924 0000cab0     8600          move    *a0,a0,L
    2925 0000cac0     0920          call    a0
    2926                    
    2927 0000cad0     0960          rets
    2928                    
    2929 0000cae0           fhuinit_addr
    2930 0000cae0 00000000!         .long   bret_ani_init   ;0 Bret Hart
    2931 0000cb00 00000000!         .long   razor_ani_init  ;1 Razor Ramon
    2932 0000cb20 00000000!         .long   taker_ani_init  ;2 Undertaker
    2933 0000cb40 00000000!         .long   yoko_ani_init   ;3 Yokozuna
    2934 0000cb60 00000000!         .long   shawn_ani_init  ;4 Shawn Michaels
    2935 0000cb80 00000000!         .long   bam_ani_init    ;5 Bam Bam
    2936 0000cba0 00000000!         .long   doink_ani_init  ;6 Doink
    2937 0000cbc0 00000000!         .long   doink_ani_init  ;7 spare
    2938 0000cbe0 00000000!         .long   lex_ani_init    ;8 Lex Luger
    2939 0000cc00 00000000          .long   0               ;9 Referee
    2940                    
    2941                    
    2942                    *****************************************************************************
    2943                    * a13 = ptr to process
    2944                    * a1 = player/drone number 0-?
    2945                    
    2946                    ;old version - used by PROGRESS.ASM
    2947                    
    2948 0000cc20            SUBR   set_process_ptr
    2949                    
    2950 0000cc20                   PUSH    a1
    2951 0000cc30                   X32     a1
    2952 0000cc40     0b21          addi    process_ptrs,a1
         0000cc50 00000930- 
    2953 0000cc70     83a1          move    a13,*a1,L
    2954 0000cc80                   PULL    a1
    2955 0000cc90     0960          rets
    2956                    
    2957                    *****************************************************************************
    2958                    * a0 = ptr to process
    2959                    * a9 = side (0 or 1)
    2960                    * a10 = player/drone number 0-?
    2961                    * a11 = WRESTLERNUM
    2962                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   69

    2963                    ;new version - used here in WRESTLE.ASM because the new pal selector routine
    2964                    ; requires that process_ptrs are all set up before any of the wrestler
    2965                    ; processes actually wake up.  set_process_ptr2 is called by the code that
    2966                    ; creates wrestler_main procs, not by wrestler_main itself.
    2967                    
    2968                    ;it also sets PLYRNUM and WRESTLERNUM, 'cuz the pal thing needs those
    2969                    ; too.  What a pain, eh? (And now PLYR_SIDE, too)
    2970                    
    2971 0000cca0            SUBRP  set_process_ptr2
    2972                    
    2973 0000cca0                   PUSH    a10
    2974 0000ccb0                   X32     a10
    2975 0000ccc0     0b2a          addi    process_ptrs,a10
         0000ccd0 00000930- 
    2976 0000ccf0     820a          move    a0,*a10,L
    2977 0000cd00                   PULL    a10
    2978                    
    2979 0000cd10     b120          move    a9,*a0(PLYR_SIDE)
         0000cd20     05b0  
    2980 0000cd30     b140          move    a10,*a0(PLYRNUM)
         0000cd40     0580  
    2981 0000cd50     b160          move    a11,*a0(WRESTLERNUM)
         0000cd60     0590  
    2982                    
    2983 0000cd70     0960          rets
    2984                    
    2985                    *****************************************************************************
    2986                    * a1 = player/drone number 0-?
    2987                    * returns ptr in a0
    2988                    
    2989 0000cd80            SUBR   get_process_ptr
    2990                    
    2991 0000cd80                   PUSH    a1
    2992 0000cd90                   X32     a1
    2993 0000cda0     0b21          addi    process_ptrs,a1
         0000cdb0 00000930- 
    2994 0000cdd0     8620          move    *a1,a0,L
    2995 0000cde0                   PULL    a1
    2996 0000cdf0     0960          rets
    2997                    
    2998                    *****************************************************************************
    2999                    *
    3000                    * a13 = * to wrestler process
    3001                    *
    3002                    * breaks links if both wrestlers not attached to each other
    3003                    *
    3004                    
    3005 0000ce00            SUBRP  update_links
    3006                    
    3007 0000ce00     b7a1          move    *a13(ATTACH_PROC),a1,L          ;proc attached to
         0000ce10     03e0  
    3008 0000ce20     ca07          jrz     pqjexit                         ;not attached
    3009 0000ce30     b620          move    *a1(ATTACH_PROC),a0,L
         0000ce40     03e0  
    3010 0000ce50     480d          cmp     a0,a13                          ;pointing to each other?
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   70

    3011 0000ce60     ca03          jreq    pqjexit                         ;ok
    3012                    
    3013 0000ce70     5600          clr     a0
    3014 0000ce80     b20d          move    a0,*a13(ATTACH_PROC),L
         0000ce90     03e0  
    3015 0000cea0     0960  pqjexit rets
    3016                    
    3017                    *****************************************************************************
    3018                    *
    3019                    
    3020 0000ceb0            SUBRP  update_newfacing
    3021                    
    3022                    
    3023 0000ceb0     0d3f          callr   get_opp_process         ;closest opponent process
         0000cec0     054f  
    3024 0000ced0     4c0a          move    a0,a10
    3025                    
    3026 0000cee0     09c0          movi    MOVE_RIGHT,a0
         0000cef0     0008  
    3027 0000cf00     b7a2          move    *a13(OBJ_XPOS),a2,L
         0000cf10     0100  
    3028 0000cf20     b743          move    *a10(OBJ_XPOS),a3,L
         0000cf30     0100  
    3029 0000cf40     4843          cmp     a2,a3           ;a3-a2
    3030 0000cf50     c702          jrgt    qelright
    3031 0000cf60     09c0          movi    MOVE_LEFT,a0
         0000cf70     0004  
    3032                    
    3033 0000cf80     09c1  qelright        movi    MOVE_DOWN,a1
         0000cf90     0002  
    3034 0000cfa0     b7a2          move    *a13(OBJ_ZPOS),a2,L
         0000cfb0     0140  
    3035 0000cfc0     b743          move    *a10(OBJ_ZPOS),a3,L
         0000cfd0     0140  
    3036 0000cfe0     4843          cmp     a2,a3           ;a3-a2
    3037 0000cff0     c702          jrgt    qeldown
    3038 0000d000     09c1          movi    MOVE_UP,a1
         0000d010     0001  
    3039                    
    3040 0000d020     5420  qeldown or      a1,a0
    3041 0000d030     b00d          move    a0,*a13(NEW_FACING_DIR)
         0000d040     04d0  
    3042                    
    3043 0000d050     0960          rets
    3044                    
    3045                    *****************************************************************************
    3046                    *
    3047                    * sets x-flip based on facing direction
    3048                    *
    3049                    * a0 = * wrestler process
    3050                    
    3051                    
    3052 0000d060            SUBR   set_wrestler_xflip
    3053                    
    3054 0000d060     b40e          move    *a0(FACING_DIR),a14
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   71

         0000d070     04c0  
    3055 0000d080     1f8e          btst    PLAYER_RIGHT_BIT,a14
    3056 0000d090     cb08          jrnz    jueright
    3057                    
    3058 0000d0a0     b40e          move    *a0(OBJ_CONTROL),a14
         0000d0b0     0780  
    3059 0000d0c0     0bae          ori     M_FLIPH,a14
         0000d0d0 00000010  
    3060 0000d0f0     b1c0          move    a14,*a0(OBJ_CONTROL)
         0000d100     0780  
    3061                    
    3062 0000d110     0960          rets
    3063                    
    3064 0000d120     b40e  jueright        move    *a0(OBJ_CONTROL),a14
         0000d130     0780  
    3065 0000d140     0b8e          andni   M_FLIPH,a14
         0000d150 00000010  
    3066 0000d170     b1c0          move    a14,*a0(OBJ_CONTROL)
         0000d180     0780  
    3067                    
    3068 0000d190     0960          rets
    3069                    
    3070                    *****************************************************************************
    3071                    *
    3072                    * confines wrestler in/out of ring
    3073                    * and sets CAN_MOVE_DIR bits
    3074                    *
    3075                    
    3076 0000d1a0            SUBRP  confine_wrestler
    3077                    
    3078 0000d1a0     56e7          clr     a7                      ;can move in all directions
    3079                    
    3080 0000d1b0     b5a0          move    *a13(ANIMODE),a0
         0000d1c0     0660  
    3081 0000d1d0     1f00          btst    MODE_NOCONFINE_BIT,a0
    3082 0000d1e0     cb00          jrnz    odpno_confine
         0000d1f0     016b  
    3083                    
    3084 0000d200     b5a0          move    *a13(PLYRMODE),a0
         0000d210     05c0  
    3085 0000d220     0b40          cmpi    MODE_ATTACHED,a0
         0000d230     fffc  
    3086 0000d240     ca00          jreq    odpno_confine
         0000d250     0165  
    3087                    
    3088 0000d260     b5a0          move    *a13(INRING),a0
         0000d270     0560  
    3089 0000d280     cb00          jrnz    odpoutring
         0000d290     0164  
    3090                    
    3091                            ;We're inside the ring
    3092                            ;Check against the top ropes.
    3093 0000d2a0     09c0          movi    RING_TOP,a0
         0000d2b0     03ff  
    3094 0000d2c0     b5a5          move    *a13(OBJ_ZPOSINT),a5
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   72

         0000d2d0     0150  
    3095 0000d2e0     4805          cmp     a0,a5                   ;zpos - top
    3096 0000d2f0     c70d          jrgt    odpzu_ok
    3097 0000d300     ca08          jreq    odpno_u
    3098                    
    3099                            ;set Z to top of ring
    3100 0000d310     b00d          move    a0,*a13(Z_BOUND)
         0000d320     04a0  
    3101 0000d330     2600          sll     16,a0
    3102 0000d340     b20d          move    a0,*a13(OBJ_ZPOS),L
         0000d350     0140  
    3103                    
    3104                            ;climb out if allowed
    3105 0000d360     0d5f          calla   ck_climb_out_top
         0000d370 00000000! 
    3106                    
    3107 0000d390           odpno_u ;just inside - don't adjust, but don't go any further.
    3108 0000d390     0ba7          ori     MOVE_UP,a7              ;can't move up
         0000d3a0 00000001  
    3109 0000d3c0     c014          jruc    odpcheck_x
    3110                    
    3111 0000d3d0           odpzu_ok        ;Check aginst bottom ropes
    3112 0000d3d0     09c0          movi    RING_BOT,a0             ;zpos - bot
         0000d3e0     0541  
    3113 0000d3f0     4805          cmp     a0,a5
    3114 0000d400     c40d          jrlt    odpzd_ok
    3115 0000d410     ca08          jreq    odpno_d
    3116                    
    3117                            ;set Z to bottom of ring
    3118 0000d420     b00d          move    a0,*a13(Z_BOUND)
         0000d430     04a0  
    3119 0000d440     2600          sll     16,a0
    3120 0000d450     b20d          move    a0,*a13(OBJ_ZPOS),L
         0000d460     0140  
    3121                    
    3122                            ;climb out if allowed
    3123 0000d470     0d5f          calla   ck_climb_out_bot
         0000d480 00000000! 
    3124                    
    3125 0000d4a0           odpno_d ;just inside - don't adjust, but don't go any further.
    3126 0000d4a0     0ba7          ori     MOVE_DOWN,a7            ;can't move down
         0000d4b0 00000002  
    3127 0000d4d0     c003          jruc    odpcheck_x
    3128                    
    3129 0000d4e0           odpzd_ok        ;no z problems.  zero Z_BOUND
    3130 0000d4e0     57ce          clr     a14
    3131 0000d4f0     b1cd          move    a14,*a13(Z_BOUND)
         0000d500     04a0  
    3132                    
    3133 0000d510           odpcheck_x
    3134                            ;Check left edge of collision box against left rope
    3135 0000d510     b5a5          move    *a13(OBJ_COLLX1),a5
         0000d520     01e0  
    3136                    
    3137                            ;first see if we're even in the ballpark.
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   73

    3138 0000d530     09e6          movi    vln_left_rope,a6
         0000d540 000038e0- 
    3139 0000d560     84c0          move    *a6,a0                  ;x1
    3140 0000d570     4805          cmp     a0,a5                   ;xpos - x2
    3141 0000d580     c700          jrgt    odpxl_ok
         0000d590     0093  
    3142                    
    3143                            ;close enough for a more careful check...
    3144 0000d5a0     0d3f          callr   calc_line_x
         0000d5b0     090c  
    3145 0000d5c0     4805          cmp     a0,a5                   ;xpos - a0
    3146 0000d5d0     c700          jrgt    odpxl_ok
         0000d5e0     008e  
    3147 0000d5f0     ca00          jreq    odpno_l
         0000d600     0087  
    3148                    
    3149                    
    3150                            ;we're past the left rope.  see if we're attached
    3151 0000d610     b7ae          move    *a13(ATTACH_PROC),a14,L
         0000d620     03e0  
    3152 0000d630     ca4f          jrz     odpnot
    3153                    
    3154                            ;I'm attached, which means both me and my opponent are gonna get
    3155                            ; moved.  Figure the right amount, apply it to both of us, then
    3156                            ; wobble the ropes and bounce both of us away.
    3157                    
    3158                            ;a0 is rope X, a5 is left edge of our collbox.  Move us and our
    3159                            ; opponent right (a0 - a5) pixels.
    3160 0000d640     44a0          sub     a5,a0
    3161 0000d650     b5ae          move    *a13(OBJ_XPOSINT),a14
         0000d660     0110  
    3162 0000d670     400e          add     a0,a14
    3163 0000d680     b1cd          move    a14,*a13(OBJ_XPOSINT)
         0000d690     0110  
    3164                    
    3165 0000d6a0     b7a5          move    *a13(ATTACH_PROC),a5,L
         0000d6b0     03e0  
    3166 0000d6c0     b4ae          move    *a5(OBJ_XPOSINT),a14
         0000d6d0     0110  
    3167 0000d6e0     400e          add     a0,a14
    3168 0000d6f0     b1c5          move    a14,*a5(OBJ_XPOSINT)
         0000d700     0110  
    3169                    
    3170                            ;If either I or my opponent has a nonzero X velocity other than
    3171                            ; 40000h, give us both Xvel 40000h, Yvel 30000h.
    3172                    
    3173                            ;Skip the velocity crap if I'm on the ground.
    3174 0000d710     b5a0          move    *a13(GROUND_Y),a0
         0000d720     0570  
    3175 0000d730     b5a1          move    *a13(OBJ_YPOSINT),a1
         0000d740     0130  
    3176 0000d750     4801          cmp     a0,a1
    3177 0000d760     ca71          jreq    odpno_l
    3178                    
    3179 0000d770     b7ae          move    *a13(OBJ_XVEL),a14,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   74

         0000d780     02d0  
    3180 0000d790     ca05          jrz     odplr_check_opp
    3181 0000d7a0     0b6e          cmpi    [4,0],a14
         0000d7b0 fffbffff  
    3182 0000d7d0     cb01          jrne    odplr_check_opp
    3183 0000d7e0     c008          jruc    odplr_set_vels
    3184                    
    3185 0000d7f0           odplr_check_opp
    3186 0000d7f0     b6ae          move    *a5(OBJ_XVEL),a14,L
         0000d800     02d0  
    3187 0000d810     ca66          jrz     odpno_l
    3188 0000d820     0b6e          cmpi    [4,0],a14
         0000d830 fffbffff  
    3189 0000d850     cb01          jrne    odplr_set_vels
    3190 0000d860     c061          jruc    odpno_l
    3191                    
    3192 0000d870           odplr_set_vels
    3193                            ;X vel
    3194 0000d870     09ee          movi    [4,0],a14
         0000d880 00040000  
    3195 0000d8a0     b3cd          move    a14,*a13(OBJ_XVEL),L
         0000d8b0     02d0  
    3196 0000d8c0     b3c5          move    a14,*a5(OBJ_XVEL),L
         0000d8d0     02d0  
    3197                    
    3198                            ;Y vel
    3199                            ;Wait!  Don't muck with the Y vels if they're already above 30000h.
    3200 0000d8e0     b7ae          move    *a13(OBJ_YVEL),a14,L
         0000d8f0     02f0  
    3201 0000d900     0b6e          cmpi    30000h,a14
         0000d910 fffcffff  
    3202 0000d930     c70d          jrgt    odpnyv1
    3203 0000d940     b6ae          move    *a5(OBJ_YVEL),a14,L
         0000d950     02f0  
    3204 0000d960     0b6e          cmpi    30000h,a14
         0000d970 fffcffff  
    3205 0000d990     c707          jrgt    odpnyv1
    3206 0000d9a0     09ee          movi    [3,0],a14
         0000d9b0 00030000  
    3207 0000d9d0     b3cd          move    a14,*a13(OBJ_YVEL),L
         0000d9e0     02f0  
    3208 0000d9f0     b3c5          move    a14,*a5(OBJ_YVEL),L
         0000da00     02f0  
    3209                    
    3210 0000da10           odpnyv1 ;...and wobble the ropes
    3211 0000da10                   PUSH    a0,a5
    3212 0000da30     09c0          movi    ROPE_LEFT,a0
         0000da40     0002  
    3213 0000da50     1822          movk    1,a2
    3214 0000da60     09c1          movi    ROPE_BOUNCEIO,a1
         0000da70     0001  
    3215 0000da80     0d5f          calla   rope_command
         0000da90 00000000! 
    3216                    
    3217 0000dab0     09c0          movi    3ch,a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   75

         0000dac0     003c  
    3218 0000dad0     0d5f          calla   triple_sound
         0000dae0 00000000! 
    3219                    
    3220 0000db00                   PULL    a0,a5
    3221                    
    3222 0000db20     c035          jruc    odpno_l
    3223                    
    3224 0000db30           odpnot
    3225                            ;we're not attached
    3226                            ;line me up flush against the left rope
    3227 0000db30     b5ae          move    *a13(OBJ_XPOSINT),a14
         0000db40     0110  
    3228 0000db50     44ae          sub     a5,a14
    3229 0000db60     41c0          add     a14,a0
    3230 0000db70     b00d          move    a0,*a13(X_BOUND)
         0000db80     0490  
    3231 0000db90     2600          sll     16,a0
    3232 0000dba0     b20d          move    a0,*a13(OBJ_XPOS),L
         0000dbb0     0100  
    3233                    
    3234 0000dbc0     b5a0          move    *a13(INRING),a0
         0000dbd0     0560  
    3235 0000dbe0     cb29          jrnz    odpno_l                         ;Am outside.
    3236                            ;climb out the side if allowed
    3237 0000dbf0     0d5f          calla   ck_climb_out_side
         0000dc00 00000000! 
    3238                    
    3239                    ;Has hit left rope
    3240                    ;Wobble ropes and bounce off of them upon first hit.
    3241 0000dc20     b5a0          move    *a13(MOVE_DIR),a0
         0000dc30     04b0  
    3242 0000dc40     cb23          jrnz    odpno_l
    3243                    
    3244 0000dc50     b7a0          move    *a13(OBJ_XVEL),a0,L
         0000dc60     02d0  
    3245 0000dc70     ca20          jrz     odpno_l
    3246                    
    3247                            ;Skip the velocity crap if I'm on the ground.
    3248 0000dc80     b5a0          move    *a13(GROUND_Y),a0
         0000dc90     0570  
    3249 0000dca0     b5a1          move    *a13(OBJ_YPOSINT),a1
         0000dcb0     0130  
    3250 0000dcc0     4801          cmp     a0,a1
    3251 0000dcd0     ca1a          jreq    odpno_l
    3252                    
    3253                    ;We also should check YPOS also.  Ropes shouldn't wobble if
    3254                    ;not hit.
    3255                    
    3256 0000dce0     b7a0          move    *a13(OBJ_XVEL),a0,L
         0000dcf0     02d0  
    3257 0000dd00     09e7          movi    [3,0001],a7
         0000dd10 00030001  
    3258 0000dd30     b2ed          move    a7,*a13(OBJ_XVEL),L
         0000dd40     02d0  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   76

    3259 0000dd50     0b80          andi    0ffffH,a0
         0000dd60 ffff0000  
    3260 0000dd80     0b40          cmpi    1,a0
         0000dd90     fffe  
    3261 0000dda0     ca0d          jrz     odpno_l
    3262                    
    3263                    ;This is the first time we have collided with ropes.
    3264                    ;Wobble them.
    3265                    
    3266 0000ddb0     09c0          movi    ROPE_LEFT,a0
         0000ddc0     0002  
    3267 0000ddd0     1822          movk    1,a2
    3268 0000dde0     09c1          movi    ROPE_BOUNCEIO,a1
         0000ddf0     0001  
    3269 0000de00     0d5f          calla   rope_command
         0000de10 00000000! 
    3270                    
    3271 0000de30     09c0          movi    3ch,a0
         0000de40     003c  
    3272 0000de50     0d5f          calla   triple_sound
         0000de60 00000000! 
    3273                    
    3274 0000de80           odpno_l
    3275 0000de80     0ba7          ori     MOVE_LEFT,a7            ;can't move left
         0000de90 00000004  
    3276 0000deb0     c000          jruc    odpdone
         0000dec0     009e  
    3277                    
    3278 0000ded0           odpxl_ok
    3279                            ;Check right edge of collision box against right ropes
    3280 0000ded0     b5a5          move    *a13(OBJ_COLLX2),a5
         0000dee0     01f0  
    3281                    
    3282                            ;first see if we're even in the ballpark.
    3283 0000def0     09e6          movi    vln_right_rope,a6
         0000df00 000023e0- 
    3284 0000df20     84c0          move    *a6,a0                  ;x1
    3285 0000df30     4805          cmp     a0,a5                   ;xpos - x1
    3286 0000df40     c400          jrlt    odpxr_ok
         0000df50     0095  
    3287                    
    3288                            ;close enough for a more careful check...
    3289 0000df60     0d3f          callr   calc_line_x
         0000df70     0870  
    3290 0000df80     4805          cmp     a0,a5                   ;xpos - a0
    3291 0000df90     c400          jrlt    odpxr_ok
         0000dfa0     0090  
    3292 0000dfb0     ca00          jreq    odpno_r
         0000dfc0     008b  
    3293                    
    3294                    
    3295                            ;we're past the right rope.  see if we're attached
    3296 0000dfd0     b7ae          move    *a13(ATTACH_PROC),a14,L
         0000dfe0     03e0  
    3297 0000dff0     ca53          jrz     odpnot2
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   77

    3298                    
    3299                            ;I'm attached, which means both me and my opponent are gonna get
    3300                            ; moved.  Figure the right amount, apply it to both of us, then
    3301                            ; wobble the ropes and bounce both of us away.
    3302                    
    3303                            ;a0 is rope X, a5 is right edge of our collbox.  Move us and our
    3304                            ; opponent left (a5 - a0) pixels.
    3305 0000e000     4405          sub     a0,a5
    3306 0000e010     b5ae          move    *a13(OBJ_XPOSINT),a14
         0000e020     0110  
    3307 0000e030     44ae          sub     a5,a14
    3308 0000e040     b1cd          move    a14,*a13(OBJ_XPOSINT)
         0000e050     0110  
    3309                    
    3310 0000e060     b7a0          move    *a13(ATTACH_PROC),a0,L
         0000e070     03e0  
    3311 0000e080     b40e          move    *a0(OBJ_XPOSINT),a14
         0000e090     0110  
    3312 0000e0a0     44ae          sub     a5,a14
    3313 0000e0b0     b1c0          move    a14,*a0(OBJ_XPOSINT)
         0000e0c0     0110  
    3314                    
    3315                            ;If either I or my opponent has a nonzero X velocity other than
    3316                            ; -40000h, give us both Xvel -40000h, Yvel 30000h.
    3317                    
    3318                            ;Skip the velocity crap if I'm on the ground.
    3319 0000e0d0     b5a0          move    *a13(GROUND_Y),a0
         0000e0e0     0570  
    3320 0000e0f0     b5a1          move    *a13(OBJ_YPOSINT),a1
         0000e100     0130  
    3321 0000e110     4801          cmp     a0,a1
    3322 0000e120     ca75          jreq    odpno_r
    3323                    
    3324 0000e130     b7ae          move    *a13(OBJ_XVEL),a14,L
         0000e140     02d0  
    3325 0000e150     ca05          jrz     odprr_check_opp
    3326 0000e160     0b6e          cmpi    [-4,0],a14
         0000e170 0003ffff  
    3327 0000e190     cb01          jrne    odprr_check_opp
    3328 0000e1a0     c00a          jruc    odprr_set_vels
    3329                    
    3330 0000e1b0           odprr_check_opp
    3331 0000e1b0     b7a5          move    *a13(ATTACH_PROC),a5,L
         0000e1c0     03e0  
    3332 0000e1d0     b6ae          move    *a5(OBJ_XVEL),a14,L
         0000e1e0     02d0  
    3333 0000e1f0     ca68          jrz     odpno_r
    3334 0000e200     0b6e          cmpi    [-4,0],a14
         0000e210 0003ffff  
    3335 0000e230     cb01          jrne    odprr_set_vels
    3336 0000e240     c063          jruc    odpno_r
    3337                    
    3338 0000e250           odprr_set_vels
    3339                            ;X vel
    3340 0000e250     09ee          movi    [-4,0],a14
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   78

         0000e260 fffc0000  
    3341 0000e280     b3cd          move    a14,*a13(OBJ_XVEL),L
         0000e290     02d0  
    3342 0000e2a0     b7a5          move    *a13(ATTACH_PROC),a5,L
         0000e2b0     03e0  
    3343 0000e2c0     b3c5          move    a14,*a5(OBJ_XVEL),L
         0000e2d0     02d0  
    3344                    
    3345                            ;Y vel
    3346                            ;Wait!  Don't muck with the Y vels if they're already above 30000h.
    3347 0000e2e0     b7ae          move    *a13(OBJ_YVEL),a14,L
         0000e2f0     02f0  
    3348 0000e300     0b6e          cmpi    30000h,a14
         0000e310 fffcffff  
    3349 0000e330     c70d          jrgt    odpnyv2
    3350 0000e340     b6ae          move    *a5(OBJ_YVEL),a14,L
         0000e350     02f0  
    3351 0000e360     0b6e          cmpi    30000h,a14
         0000e370 fffcffff  
    3352 0000e390     c707          jrgt    odpnyv2
    3353 0000e3a0     09ee          movi    [3,0],a14
         0000e3b0 00030000  
    3354 0000e3d0     b3cd          move    a14,*a13(OBJ_YVEL),L
         0000e3e0     02f0  
    3355 0000e3f0     b3c5          move    a14,*a5(OBJ_YVEL),L
         0000e400     02f0  
    3356 0000e410           odpnyv2
    3357                            ;...and wobble the ropes
    3358 0000e410                   PUSH    a0,a5
    3359 0000e430     09c0          movi    ROPE_RIGHT,a0
         0000e440     0003  
    3360 0000e450     1822          movk    1,a2
    3361 0000e460     09c1          movi    ROPE_BOUNCEIO,a1
         0000e470     0001  
    3362 0000e480     0d5f          calla   rope_command
         0000e490 00000000! 
    3363                    
    3364 0000e4b0     09c0          movi    3ch,a0
         0000e4c0     003c  
    3365 0000e4d0     0d5f          calla   triple_sound
         0000e4e0 00000000! 
    3366                    
    3367 0000e500                   PULL    a0,a5
    3368                    
    3369 0000e520     c035          jruc    odpno_r
    3370                    
    3371 0000e530           odpnot2
    3372                    
    3373 0000e530     b5ae          move    *a13(OBJ_XPOSINT),a14
         0000e540     0110  
    3374 0000e550     45c5          sub     a14,a5
    3375 0000e560     44a0          sub     a5,a0
    3376                    
    3377 0000e570     b00d          move    a0,*a13(X_BOUND)
         0000e580     0490  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   79

    3378 0000e590     2600          sll     16,a0
    3379 0000e5a0     b20d          move    a0,*a13(OBJ_XPOS),L
         0000e5b0     0100  
    3380                    
    3381 0000e5c0     b5a0          move    *a13(INRING),a0
         0000e5d0     0560  
    3382 0000e5e0     cb29          jrnz    odpno_r                         ;Am outside.
    3383                    
    3384 0000e5f0     0d5f          calla   ck_climb_out_side
         0000e600 00000000! 
    3385                    
    3386                    ;Has hit right rope
    3387                    ;Wobble ropes and bounce off of them upon first hit.
    3388 0000e620     b5a0          move    *a13(MOVE_DIR),a0
         0000e630     04b0  
    3389 0000e640     cb23          jrnz    odpno_r
    3390                    
    3391 0000e650     b7a0          move    *a13(OBJ_XVEL),a0,L
         0000e660     02d0  
    3392 0000e670     ca20          jrz     odpno_r
    3393                    
    3394                            ;Skip the velocity crap if I'm on the ground.
    3395 0000e680     b5a0          move    *a13(GROUND_Y),a0
         0000e690     0570  
    3396 0000e6a0     b5a1          move    *a13(OBJ_YPOSINT),a1
         0000e6b0     0130  
    3397 0000e6c0     4801          cmp     a0,a1
    3398 0000e6d0     ca1a          jreq    odpno_r
    3399                    
    3400                    ;We also should check YPOS also.  Ropes shouldn't wobble if
    3401                    ;not hit.
    3402                    
    3403 0000e6e0     b7a0          move    *a13(OBJ_XVEL),a0,L
         0000e6f0     02d0  
    3404 0000e700     09e7          movi    [-3,0001],a7
         0000e710 fffd0001  
    3405 0000e730     b2ed          move    a7,*a13(OBJ_XVEL),L
         0000e740     02d0  
    3406 0000e750     0b80          andi    0ffffH,a0
         0000e760 ffff0000  
    3407 0000e780     0b40          cmpi    1,a0
         0000e790     fffe  
    3408 0000e7a0     ca0d          jrz     odpno_r
    3409                    
    3410                    ;This is the first time we have collided with ropes.
    3411                    ;Wobble them.
    3412                    
    3413 0000e7b0     09c0          movi    ROPE_RIGHT,a0
         0000e7c0     0003  
    3414 0000e7d0     1822          movk    1,a2
    3415 0000e7e0     09c1          movi    ROPE_BOUNCEIO,a1
         0000e7f0     0001  
    3416 0000e800     0d5f          calla   rope_command
         0000e810 00000000! 
    3417                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   80

    3418 0000e830     09c0          movi    3ch,a0
         0000e840     003c  
    3419 0000e850     0d5f          calla   triple_sound
         0000e860 00000000! 
    3420                    
    3421 0000e880           odpno_r
    3422 0000e880     0ba7          ori     MOVE_RIGHT,a7           ;can't move right
         0000e890 00000008  
    3423 0000e8b0           odpxr_ok
    3424 0000e8b0           odpdone
    3425 0000e8b0           odpno_confine
    3426 0000e8b0     b0ed          move    a7,*a13(CAN_MOVE_DIR)
         0000e8c0     0470  
    3427 0000e8d0     0960          rets
    3428                    
    3429                    
    3430                    
    3431                            ;We're outside the ring
    3432 0000e8e0           odpoutring
    3433 0000e8e0     09c0          movi    ARENA_TOP,a0
         0000e8f0     0250  
    3434 0000e900     b5a5          move    *a13(OBJ_ZPOSINT),a5
         0000e910     0150  
    3435 0000e920     4805          cmp     a0,a5                   ;zpos - top
    3436 0000e930     c70a          jrgt    odpzu_ok2
    3437 0000e940     ca05          jreq    odpno_u2
    3438                    
    3439 0000e950     b00d          move    a0,*a13(Z_BOUND)
         0000e960     04a0  
    3440 0000e970     2600          sll     16,a0
    3441 0000e980     b20d          move    a0,*a13(OBJ_ZPOS),L
         0000e990     0140  
    3442 0000e9a0           odpno_u2
    3443 0000e9a0     0ba7          ori     MOVE_UP,a7              ;can't move up
         0000e9b0 00000001  
    3444 0000e9d0     c00d          jruc    odpcheck_x2
    3445                    
    3446 0000e9e0           odpzu_ok2
    3447 0000e9e0     09c0          movi    ARENA_BOT,a0            ;zpos - bot
         0000e9f0     0768  
    3448 0000ea00     4805          cmp     a0,a5
    3449 0000ea10     c409          jrlt    odpzd_ok2
    3450 0000ea20     ca05          jreq    odpno_d2
    3451                    
    3452 0000ea30     b00d          move    a0,*a13(Z_BOUND)
         0000ea40     04a0  
    3453 0000ea50     2600          sll     16,a0
    3454 0000ea60     b20d          move    a0,*a13(OBJ_ZPOS),L
         0000ea70     0140  
    3455 0000ea80           odpno_d2
    3456 0000ea80     0ba7          ori     MOVE_DOWN,a7            ;can't move down
         0000ea90 00000002  
    3457 0000eab0           odpzd_ok2
    3458                    
    3459 0000eab0           odpcheck_x2
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   81

    3460 0000eab0     b5a5          move    *a13(OBJ_COLLX1),a5
         0000eac0     01e0  
    3461 0000ead0     09e6          movi    vln_left_fence,a6
         0000eae0 00012f80- 
    3462 0000eb00     84c0          move    *a6,a0                  ;x1
    3463 0000eb10     4805          cmp     a0,a5                   ;xpos - x2
    3464 0000eb20     c71c          jrgt    odpxl_ok2
    3465 0000eb30     0d3f          callr   calc_line_x
         0000eb40     07b3  
    3466 0000eb50     4805          cmp     a0,a5                   ;xpos - a0
    3467 0000eb60     c718          jrgt    odpxl_ok2
    3468 0000eb70     ca13          jreq    odpno_l2
    3469                    
    3470                            ;must move right (a0-a5) pixels.  If we're attached, move our
    3471                            ; opponent too.
    3472 0000eb80     4c01          move    a0,a1
    3473 0000eb90     44a0          sub     a5,a0
    3474                    
    3475 0000eba0     b5ae          move    *a13(OBJ_XPOSINT),a14
         0000ebb0     0110  
    3476 0000ebc0     400e          add     a0,a14
    3477 0000ebd0     b1cd          move    a14,*a13(OBJ_XPOSINT)
         0000ebe0     0110  
    3478 0000ebf0     b02d          move    a1,*a13(X_BOUND)
         0000ec00     0490  
    3479                    
    3480 0000ec10     b7a5          move    *a13(ATTACH_PROC),a5,L
         0000ec20     03e0  
    3481 0000ec30     ca07          jrz     odpno_l2
    3482                    
    3483 0000ec40     b4ae          move    *a5(OBJ_XPOSINT),a14
         0000ec50     0110  
    3484 0000ec60     400e          add     a0,a14
    3485 0000ec70     b1c5          move    a14,*a5(OBJ_XPOSINT)
         0000ec80     0110  
    3486 0000ec90     b025          move    a1,*a5(X_BOUND)
         0000eca0     0490  
    3487 0000ecb0           odpno_l2
    3488 0000ecb0     0ba7          ori     MOVE_LEFT,a7            ;can't move left
         0000ecc0 00000004  
    3489 0000ece0     c022          jruc    odpcont_x
    3490                    
    3491 0000ecf0           odpxl_ok2
    3492 0000ecf0     b5a5          move    *a13(OBJ_COLLX2),a5
         0000ed00     01f0  
    3493 0000ed10     09e6          movi    vln_right_fence,a6
         0000ed20 0000dd20- 
    3494 0000ed40     84c0          move    *a6,a0                  ;x1
    3495 0000ed50     4805          cmp     a0,a5                   ;xpos - x1
    3496 0000ed60     c41a          jrlt    odpxr_ok2
    3497 0000ed70     0d3f          callr   calc_line_x
         0000ed80     078f  
    3498 0000ed90     4805          cmp     a0,a5                   ;xpos - a0
    3499 0000eda0     c416          jrlt    odpxr_ok2
    3500 0000edb0     ca12          jreq    odpno_r2
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   82

    3501                    
    3502                            ;must move left (a5-a0) pixels.  If we're attached, move our
    3503                            ; opponent too.
    3504 0000edc0     4405          sub     a0,a5
    3505                    
    3506 0000edd0     b5ae          move    *a13(OBJ_XPOSINT),a14
         0000ede0     0110  
    3507 0000edf0     44ae          sub     a5,a14
    3508 0000ee00     b1cd          move    a14,*a13(OBJ_XPOSINT)
         0000ee10     0110  
    3509 0000ee20     b00d          move    a0,*a13(X_BOUND)
         0000ee30     0490  
    3510                    
    3511 0000ee40     b7a1          move    *a13(ATTACH_PROC),a1,L
         0000ee50     03e0  
    3512 0000ee60     ca07          jrz     odpno_r2
    3513 0000ee70     b42e          move    *a1(OBJ_XPOSINT),a14
         0000ee80     0110  
    3514 0000ee90     44ae          sub     a5,a14
    3515 0000eea0     b1c1          move    a14,*a1(OBJ_XPOSINT)
         0000eeb0     0110  
    3516 0000eec0     b001          move    a0,*a1(X_BOUND)
         0000eed0     0490  
    3517 0000eee0           odpno_r2
    3518 0000eee0     0ba7          ori     MOVE_RIGHT,a7           ;can't move right
         0000eef0 00000008  
    3519 0000ef10           odpxr_ok2
    3520                    
    3521                    ;now check for the mat/ring
    3522                    
    3523 0000ef10           odpcont_x
    3524 0000ef10     b5a5          move    *a13(OBJ_XPOSINT),a5
         0000ef20     0110  
    3525 0000ef30     0b45          cmpi    RING_X_CENTER,a5
         0000ef40     fbcd  
    3526 0000ef50     c74b          jrgt    odpright_side
    3527                    ;left side
    3528 0000ef60     09e6          movi    vln_left_matedge2,a6
         0000ef70 0000b900- 
    3529 0000ef90     0d3f          callr   calc_line_x
         0000efa0     076d  
    3530 0000efb0     ca00          jrz     odpdone2                        ;out of range
         0000efc0     008d  
    3531 0000efd0     b5a8          move    *a13(OBJ_COLLX2),a8
         0000efe0     01f0  
    3532 0000eff0     4408          sub     a0,a8                   ;xpos - a0 =(xov)
    3533 0000f000     ce00          jrn     odpdone2
         0000f010     0088  
    3534                    
    3535 0000f020     b5a4          move    *a13(OBJ_ZPOSINT),a4
         0000f030     0150  
    3536 0000f040     0b44          cmpi    RING_Z_CENTER,a4
         0000f050     fb5f  
    3537 0000f060     c713          jrgt    odpbot_left
    3538                    ;top left
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   83

    3539 0000f070     b4c0          move    *a6(10h),a0
         0000f080     0010  
    3540                    ;;;     dec     a4
    3541 0000f090     4c89          move    a4,a9
    3542 0000f0a0     4409          sub     a0,a9                   ;zpos - z1 =(zov)
    3543 0000f0b0     4909          cmp     a8,a9                   ;zov - xov
    3544 0000f0c0     c71f          jrgt    odpno_r3
    3545                    
    3546 0000f0d0     4524          sub     a9,a4
    3547 0000f0e0     b08d          move    a4,*a13(Z_BOUND)
         0000f0f0     04a0  
    3548 0000f100     2604          sll     16,a4
    3549 0000f110     b28d          move    a4,*a13(OBJ_ZPOS),L
         0000f120     0140  
    3550 0000f130     0ba7          ori     MOVE_DOWN,a7            ;can't move down
         0000f140 00000002  
    3551                    
    3552 0000f160     0d5f          calla   ck_climb_in_top
         0000f170 00000000! 
    3553                    
    3554 0000f190     c070          jruc    odpdone2
    3555                    
    3556 0000f1a0           odpbot_left
    3557 0000f1a0     b4c9          move    *a6(30h),a9
         0000f1b0     0030  
    3558                    ;;;     inc     a4
    3559 0000f1c0     4489          sub     a4,a9                   ;z2 - zpos =(zov)
    3560 0000f1d0     4909          cmp     a8,a9                   ;zov - xov
    3561 0000f1e0     c70d          jrgt    odpno_r3
    3562 0000f1f0     4124          add     a9,a4
    3563 0000f200     b08d          move    a4,*a13(Z_BOUND)
         0000f210     04a0  
    3564 0000f220     2604          sll     16,a4
    3565 0000f230     b28d          move    a4,*a13(OBJ_ZPOS),L
         0000f240     0140  
    3566 0000f250     0ba7          ori     MOVE_UP,a7              ;can't move up
         0000f260 00000001  
    3567                    
    3568 0000f280     0d5f          calla   ck_climb_in_bot
         0000f290 00000000! 
    3569                    
    3570 0000f2b0     c05e          jruc    odpdone2
    3571                    
    3572 0000f2c0           odpno_r3
    3573                            ;we need to move a8 pixels to the left.  if we're attached, move both
    3574                            ; of us.
    3575 0000f2c0     4505          sub     a8,a5
    3576 0000f2d0     b0ad          move    a5,*a13(X_BOUND)
         0000f2e0     0490  
    3577 0000f2f0     2605          sll     16,a5
    3578 0000f300     b2ad          move    a5,*a13(OBJ_XPOS),L
         0000f310     0100  
    3579 0000f320     0ba7          ori     MOVE_RIGHT,a7           ;can't move right
         0000f330 00000008  
    3580                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   84

    3581 0000f350     b7a0          move    *a13(ATTACH_PROC),a0,L
         0000f360     03e0  
    3582 0000f370     ca05          jrz     odpno_r3_att
    3583 0000f380     b40e          move    *a0(OBJ_XPOSINT),a14
         0000f390     0110  
    3584 0000f3a0     450e          sub     a8,a14
    3585 0000f3b0     b1c0          move    a14,*a0(OBJ_XPOSINT)
         0000f3c0     0110  
    3586 0000f3d0           odpno_r3_att
    3587                    
    3588 0000f3d0     0d5f          calla   ck_climb_in_side
         0000f3e0 00000000! 
    3589                    
    3590 0000f400     c049          jruc    odpdone2
    3591                    
    3592                    
    3593 0000f410           odpright_side
    3594 0000f410     09e6          movi    vln_right_matedge2,a6
         0000f420 000094e0- 
    3595 0000f440     0d3f          callr   calc_line_x
         0000f450     0722  
    3596 0000f460     ca43          jrz     odpdone2                        ;out of range
    3597 0000f470     4c08          move    a0,a8
    3598 0000f480     b5a0          move    *a13(OBJ_COLLX1),a0
         0000f490     01e0  
    3599 0000f4a0     4408          sub     a0,a8                   ;a8 - xpos =(xov)
    3600 0000f4b0     ce3e          jrn     odpdone2
    3601                    
    3602 0000f4c0     b5a4          move    *a13(OBJ_ZPOSINT),a4
         0000f4d0     0150  
    3603 0000f4e0     0b44          cmpi    RING_Z_CENTER,a4
         0000f4f0     fb5f  
    3604 0000f500     c713          jrgt    odpbot_right
    3605                    ;top right
    3606 0000f510     b4c0          move    *a6(10h),a0
         0000f520     0010  
    3607                    ;;;     dec     a4
    3608 0000f530     4c89          move    a4,a9
    3609 0000f540     4409          sub     a0,a9                   ;zpos - z1 =(zov)
    3610 0000f550     4909          cmp     a8,a9                   ;zov - xov
    3611 0000f560     c71f          jrgt    odpno_l3
    3612 0000f570     4524          sub     a9,a4
    3613 0000f580     b08d          move    a4,*a13(Z_BOUND)
         0000f590     04a0  
    3614 0000f5a0     2604          sll     16,a4
    3615 0000f5b0     b28d          move    a4,*a13(OBJ_ZPOS),L
         0000f5c0     0140  
    3616 0000f5d0     0ba7          ori     MOVE_DOWN,a7            ;can't move down
         0000f5e0 00000002  
    3617                    
    3618 0000f600     0d5f          calla   ck_climb_in_top
         0000f610 00000000! 
    3619                    
    3620 0000f630     c026          jruc    odpdone2
    3621                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   85

    3622                    
    3623 0000f640           odpbot_right
    3624 0000f640     b4c9          move    *a6(30h),a9
         0000f650     0030  
    3625                    ;;;     inc     a4
    3626 0000f660     4489          sub     a4,a9                   ;z2 - zpos =(zov)
    3627 0000f670     4909          cmp     a8,a9                   ;zov - xov
    3628 0000f680     c70d          jrgt    odpno_l3
    3629 0000f690     4124          add     a9,a4
    3630 0000f6a0     b08d          move    a4,*a13(Z_BOUND)
         0000f6b0     04a0  
    3631 0000f6c0     2604          sll     16,a4
    3632 0000f6d0     b28d          move    a4,*a13(OBJ_ZPOS),L
         0000f6e0     0140  
    3633 0000f6f0     0ba7          ori     MOVE_UP,a7              ;can't move up
         0000f700 00000001  
    3634                    
    3635 0000f720     0d5f          calla   ck_climb_in_bot
         0000f730 00000000! 
    3636                    
    3637 0000f750     c014          jruc    odpdone2
    3638                    
    3639                    
    3640 0000f760           odpno_l3
    3641                            ;we need to move a8 pixels to the right. if we're attached, move both
    3642                            ; of us.
    3643 0000f760     4105          add     a8,a5
    3644 0000f770     b0ad          move    a5,*a13(X_BOUND)
         0000f780     0490  
    3645 0000f790     2605          sll     16,a5
    3646 0000f7a0     b2ad          move    a5,*a13(OBJ_XPOS),L
         0000f7b0     0100  
    3647 0000f7c0     0ba7          ori     MOVE_LEFT,a7            ;can't move down
         0000f7d0 00000004  
    3648                    
    3649 0000f7f0     b7a0          move    *a13(ATTACH_PROC),a0,L
         0000f800     03e0  
    3650 0000f810     ca05          jrz     odpno_l3_att
    3651 0000f820     b40e          move    *a0(OBJ_XPOSINT),a14
         0000f830     0110  
    3652 0000f840     410e          add     a8,a14
    3653 0000f850     b1c0          move    a14,*a0(OBJ_XPOSINT)
         0000f860     0110  
    3654 0000f870           odpno_l3_att
    3655                    
    3656 0000f870     0d5f          calla   ck_climb_in_side
         0000f880 00000000! 
    3657                    
    3658 0000f8a0           odpdone2
    3659 0000f8a0     b0ed          move    a7,*a13(CAN_MOVE_DIR)
         0000f8b0     0470  
    3660 0000f8c0     b5a0          move    *a13(PLYRMODE),a0
         0000f8d0     05c0  
    3661 0000f8e0     0b40          cmpi    MODE_DEAD,a0
         0000f8f0     fff6  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   86

    3662 0000f900     ca60          jreq    odpdead
    3663 0000f910     0b40          cmpi    MODE_RUNNING,a0
         0000f920     fffe  
    3664 0000f930     cb5c          jrne    just_ignore_me
    3665                    
    3666 0000f940     09e2          movi    [3,0],a2
         0000f950 00030000  
    3667 0000f970     1fa7          btst    MOVE_LEFT_BIT,a7
    3668 0000f980     cb03          jrnz    we_going_left
    3669 0000f990     03a2          neg     a2
    3670 0000f9a0     1f87          btst    MOVE_RIGHT_BIT,a7
    3671 0000f9b0     ca54          jrz     just_ignore_me
    3672 0000f9c0           we_going_left
    3673                    
    3674                            ;we've hit a gate, and we're running.  It's possible, however, that
    3675                            ; we're right up against a gate and have just started running in the
    3676                            ; opposite direction, in which case we shouldn't crash or anything.
    3677                            ; blow this off if we're running AWAY from the gate we've hit
    3678 0000f9c0     b5a0          move    *a13(CAN_MOVE_DIR),a0
         0000f9d0     0470  
    3679 0000f9e0     b5ae          move    *a13(FACING_DIR),a14
         0000f9f0     04c0  
    3680 0000fa00     51c0          and     a14,a0
    3681 0000fa10     0b80          andi    MOVE_LEFT|MOVE_RIGHT,a0
         0000fa20 fffffff3  
    3682 0000fa40     ca4b          jrz     just_ignore_me
    3683                    
    3684 0000fa50     b24d          move    a2,*a13(OBJ_XVEL),L
         0000fa60     02d0  
    3685 0000fa70                   SETMODE NORMAL
    3686 0000fb20     09e0          movi    [3,0],a0
         0000fb30 00030000  
    3687 0000fb50     b20d          move    a0,*a13(OBJ_YVEL),L
         0000fb60     02f0  
    3688 0000fb70     5600          clr     a0
    3689 0000fb80     b00d          move    a0,*a13(RUN_TIME)
         0000fb90     07b0  
    3690                    
    3691                            ;if we've hit the gate in the last three seconds, fall back instead.
    3692 0000fba0     07ae          move    @PCNT,a14,L
         0000fbb0 00000170- 
    3693 0000fbd0     b7a0          move    *a13(HIT_GATE_TIME),a0,L
         0000fbe0     0dd0  
    3694 0000fbf0     440e          sub     a0,a14
    3695 0000fc00     0b4e          cmpi    TSEC*3,a14
         0000fc10     ff60  
    3696 0000fc20     c508          jrge    odpbnc
    3697 0000fc30                   FACETBL fall_back_tbl
    3698 0000fca0     c00d          jruc    odpbcanim
    3699                    
    3700 0000fcb0           odpbnc  FACE24TBL bncoff_gate
    3701 0000fd80     0d5f  odpbcanim       calla   change_anim1a
         0000fd90 00000000! 
    3702                    
    3703                            ;crash sound
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   87

    3704 0000fdb0     09c0          movi    0c5h,a0
         0000fdc0     00c5  
    3705 0000fdd0     0d5f          calla   triple_sound
         0000fde0 00000000! 
    3706                    
    3707                            ;set HIT_GATE_TIME
    3708 0000fe00     07ae          move    @PCNT,a14,L
         0000fe10 00000170- 
    3709 0000fe30     b3cd          move    a14,*a13(HIT_GATE_TIME),L
         0000fe40     0dd0  
    3710                    
    3711                            ;take some damage
    3712 0000fe50     b5a1          move    *a13(PLYRNUM),a1
         0000fe60     0580  
    3713 0000fe70     09c0          movi    -D_GATE_CRASH,a0
         0000fe80     ffec  
    3714 0000fe90     574a          clr     a10
    3715 0000fea0     0d5f          calla   adjust_health
         0000feb0 00000000! 
    3716                    
    3717 0000fed0     0d5f          calla   ditch_getup_meter
         0000fee0 00000000! 
    3718                    
    3719 0000ff00           just_ignore_me
    3720 0000ff00     0960          rets
    3721                    
    3722 0000ff10           odpdead ;if we're a zombie, hitting the edge is our cue to transform
    3723 0000ff10     0b87          andi    MOVE_LEFT|MOVE_RIGHT,a7
         0000ff20 fffffff3  
    3724 0000ff40     cafb          jrz     just_ignore_me
    3725 0000ff50     b5ae          move    *a13(STATUS_FLAGS),a14
         0000ff60     0b50  
    3726 0000ff70     1f8e          btst    B_ZOMBIE,a14
    3727 0000ff80     caf7          jrz     just_ignore_me
    3728 0000ff90     1f2e          btst    B_CAN_XFORM,a14
    3729 0000ffa0     caf5          jrz     just_ignore_me
    3730                    
    3731 0000ffb0           odpzombie_transform
    3732 0000ffb0     1820          movk    1,a0
    3733 0000ffc0     0d5f          calla   change_wrestler
         0000ffd0 00000000! 
    3734 0000fff0     0960          rets
    3735                    
    3736                    *****************************************************************************
    3737                    *
    3738                    * for whatever reason, confine_wrestler happens twice per tick.  The problem
    3739                    * is that if you bump into the ropes, the first time we execute c_w, your
    3740                    * CAN_MOVE_DIR bits are set.  But the second time, they're cleared since you
    3741                    * aren't hitting the ropes anymore.  This ugly little hack gets around this
    3742                    * by saving your CAN_MOVE_DIR bits after the first call, and then ORing them
    3743                    * with your CAN_MOVE_DIR bits after the second.
    3744                    
    3745 00010000            SUBRP  confine_wrestler_fix1
    3746                    
    3747 00010000     b9ad          move    *a13(CAN_MOVE_DIR),*a13(CAN_MOVE_TEMP)
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   88

         00010010     0470  
         00010020     0480  
    3748 00010030     0960          rets
    3749                    
    3750 00010040            SUBRP  confine_wrestler_fix2
    3751 00010040     b5a0          move    *a13(CAN_MOVE_DIR),a0
         00010050     0470  
    3752 00010060     b5a1          move    *a13(CAN_MOVE_TEMP),a1
         00010070     0480  
    3753 00010080     5401          or      a0,a1
    3754 00010090     b02d          move    a1,*a13(CAN_MOVE_DIR)
         000100a0     0470  
    3755 000100b0     0960          rets
    3756                    
    3757                    *****************************************************************************
    3758                    *
    3759 000100c0            SUBRP  wrestler_friction
    3760                    
    3761 000100c0     b5a0          move    *a13(ANIMODE),a0
         000100d0     0660  
    3762 000100e0     1f20          btst    MODE_FRICTION_BIT,a0
    3763 000100f0     ca11          jrz     qsono_friction
    3764                    
    3765 00010100     b5a0          move    *a13(OBJ_FRICTION),a0
         00010110     0350  
    3766                    
    3767 00010120     b7a1          move    *a13(OBJ_XVEL),a1,L
         00010130     02d0  
    3768 00010140     ca0c          jrz     qsono_friction
    3769 00010150     ce06          jrn     qsoadd
    3770                    
    3771 00010160     4401          sub     a0,a1
    3772 00010170     c101          jrp     qsook1
    3773 00010180     5621          clr     a1
    3774 00010190           qsook1
    3775 00010190     b22d          move    a1,*a13(OBJ_XVEL),L
         000101a0     02d0  
    3776 000101b0     0960          rets
    3777                    
    3778 000101c0           qsoadd
    3779 000101c0     4001          add     a0,a1
    3780 000101d0     ce01          jrn     qsook2
    3781 000101e0     5621          clr     a1
    3782 000101f0           qsook2
    3783 000101f0     b22d          move    a1,*a13(OBJ_XVEL),L
         00010200     02d0  
    3784                    
    3785                    
    3786 00010210           qsono_friction
    3787 00010210     0960          rets
    3788                    
    3789                    *****************************************************************************
    3790                    * Change an objects image
    3791                    * A0=*New image
    3792                    * A1=New flip flags & const
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   89

    3793                    * A8=*Obj
    3794                    * Trashes scratch
    3795                    
    3796 00010220            SUBR   change_image
    3797                    
    3798                    
    3799 00010220                   PUSH    a2,a3
    3800                    
    3801 00010240     0b60          cmpi    ROM,a0
         00010250 f87fffff  
    3802 00010270     c81b          jrlo    mytanierr
    3803                    
    3804 00010280     4c02          move    a0,a2
    3805 00010290     4c23          move    a1,a3
    3806                    
    3807 000102a0     b248          move    a2,*a8(OIMG),L
         000102b0     0170  
    3808 000102c0     ba48          move    *a2(0),*a8(OSIZE),L
         000102d0     0000  
         000102e0     0130  
    3809 000102f0     ba48          move    *a2(ISAG),*a8(OSAG),L
         00010300     0040  
         00010310     0110  
    3810                    
    3811                    
    3812 00010320     b848          move    *a2(IANIOFFX),*a8(ODXOFF)       ;display x offset
         00010330     0020  
         00010340     0220  
    3813 00010350     b848          move    *a2(IANIOFFY),*a8(ODYOFF)       ;display y offset
         00010360     0030  
         00010370     0230  
    3814                    
    3815                    
    3816 00010380     0545          setf    5,0,0
    3817 00010390     b848          move    *a2(ICTRL+7),*a8(OCTRL+7)       ;Write 5 z comp bits
         000103a0     0067  
         000103b0     00f7  
    3818 000103c0     0546          setf    6,0,0
    3819 000103d0     b068          move    a3,*a8(OCTRL)                   ;Write 6 low bits
         000103e0     00f0  
    3820 000103f0     0570          setf    16,1,0
    3821                    
    3822 00010400           mytx    PULL    a2,a3
    3823 00010420     0960          rets
    3824                    
    3825 00010430           mytanierr 
    3826                            .if     DEBUG
    3827                            LOCKUP
    3828                            eint
    3829                            .else
    3830 00010430                   CALLERR 2,2
    3831                            .endif
    3832 000104e0     c0f1          jruc    mytx
    3833                    
    3834                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   90

    3835                    *****************************************************************************
    3836                    *
    3837                    * calls movement code base on wrestler number
    3838                    *
    3839                    * a13 = * wrestler process
    3840                    
    3841 000104f0            SUBRP  move_wrestler
    3842                    
    3843 000104f0     05a0          move    @HALT,a0
         00010500 000006c0- 
    3844 00010520     cb14          jrnz    plorets
    3845                    
    3846                            ;check to see if a special move watchdog proc has queued up an anim.
    3847                            ; If one has, do that instead of calling move_xxx.
    3848 00010530     b7a0          move    *a13(SPECIAL_MOVE_ADDR),a0,L
         00010540     0930  
    3849 00010550     ca07          jrz     plono_special
    3850                    
    3851                            ;a special has been queued up.  do it.
    3852 00010560     0d5f          calla   change_anim1a
         00010570 00000000! 
    3853 00010590     57ce          clr     a14
    3854 000105a0     b3cd          move    a14,*a13(SPECIAL_MOVE_ADDR),L
         000105b0     0930  
    3855 000105c0     c00a          jruc    plorets
    3856                    
    3857 000105d0           plono_special
    3858                    
    3859                            ;turn into a drone if it's time to auto-pin.
    3860 000105d0     0d3f          callr   auto_pin_check
         000105e0     001b  
    3861                    
    3862 000105f0     b5a0          move    *a13(WRESTLERNUM),a0
         00010600     0590  
    3863 00010610                   X32     a0
    3864 00010620     0b20          addi    plocode_addr,a0
         00010630 00010680' 
    3865 00010650     8600          move    *a0,a0,L
    3866 00010660     0920          call    a0
    3867                    
    3868 00010670     0960  plorets rets
    3869                    
    3870 00010680           plocode_addr
    3871 00010680 00000000!         .long   move_bret       ;0 Bret Hart
    3872 000106a0 00000000!         .long   move_razor      ;1 Razor Ramon
    3873 000106c0 00000000!         .long   move_taker      ;2 Undertaker
    3874 000106e0 00000000!         .long   move_yoko       ;3 Yokozuna
    3875 00010700 00000000!         .long   move_shawn      ;4 Shawn Michaels
    3876 00010720 00000000!         .long   move_bam        ;5 Bam Bam
    3877 00010740 00000000!         .long   move_doink      ;6 Doink
    3878 00010760 00000000          .long   0               ;7 spare
    3879 00010780 00000000!         .long   move_lex        ;8 Lex Luger
    3880                    
    3881                    
    3882                    *****************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   91

    3883                    *
    3884                    * if all opponents are dead, wait four seconds, then wait for the
    3885                    * unint bit to clear, then turn into a drone.
    3886                    *
    3887                    
    3888 000107a0            SUBR   auto_pin_check
    3889 000107a0     05ae          move    @in_finish_move,a14     ; Are we in a finishing move ?
         000107b0 00000000! 
    3890 000107d0     cb30          jrnz    ohvrets                 ; br = yes
    3891 000107e0     05ae          move    @finish_completed,a14   ; Did we do a finishing move ?
         000107f0 00000000! 
    3892 00010810     cb2c          jrnz    ohvrets                 ; br = yes
    3893                    
    3894 00010820     05ae          move    @royal_rumble,a14
         00010830 00000000! 
    3895 00010850     cb28          jrnz    ohvrets
    3896                    
    3897 00010860     0d5f          calla   get_opp_plyrmode
         00010870 00012440' 
    3898 00010890     0b40          cmpi    MODE_DEAD,a0
         000108a0     fff6  
    3899 000108b0     cb1f          jrne    ohvalive
    3900                    
    3901                            ;skip it if we've already pinned
    3902 000108c0     b5ae          move    *a13(STATUS_FLAGS),a14
         000108d0     0b50  
    3903 000108e0     1fce          btst    B_DID_PIN,a14
    3904 000108f0     cb1e          jrnz    ohvrets
    3905                    
    3906 00010900     0d3f          callr   get_opp_process
         00010910     01aa  
    3907 00010920     b40e          move    *a0(STATUS_FLAGS),a14
         00010930     0b50  
    3908 00010940     1f8e          btst    B_ZOMBIE,a14
    3909 00010950     cb15          jrnz    ohvalive
    3910                    
    3911                            .ref    anyone_bucking
    3912 00010960     0d5f          calla   anyone_bucking
         00010970 00000000! 
    3913 00010990     cb14          jrnz    ohvrets
    3914                    
    3915                            ;all opponents are dead.  increment AUTO_PIN_CNTDOWN and turn into
    3916                            ; a drone if the total is >= TSEC*4.
    3917 000109a0     b5ae          move    *a13(AUTO_PIN_CNTDOWN),a14
         000109b0     0c70  
    3918 000109c0     102e          inc     a14
    3919 000109d0     b1cd          move    a14,*a13(AUTO_PIN_CNTDOWN)
         000109e0     0c70  
    3920 000109f0     0b4e          cmpi    TSEC*3,a14
         00010a00     ff60  
    3921 00010a10     c40c          jrlt    ohvrets
    3922                    
    3923 00010a20     b5ae          move    *a13(ANIMODE),a14
         00010a30     0660  
    3924 00010a40     1fae          btst    MODE_UNINT_BIT,a14
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   92

    3925 00010a50     cb08          jrnz    ohvrets
    3926                    
    3927                            ;become a drone
    3928 00010a60     09ce          movi    PTYPE_DRONE,a14
         00010a70     0001  
    3929 00010a80     b1cd          move    a14,*a13(PLYR_TYPE)
         00010a90     05a0  
    3930 00010aa0     c003          jruc    ohvrets
    3931                    
    3932 00010ab0           ohvalive        ;Reset AUTO_PIN_CNTDOWN
    3933 00010ab0     57ce          clr     a14
    3934 00010ac0     b1cd          move    a14,*a13(AUTO_PIN_CNTDOWN)
         00010ad0     0c70  
    3935 00010ae0     0960  ohvrets rets
    3936                    
    3937                    *****************************************************************************
    3938                    
    3939                    ; SUBRP realtime_clock
    3940                    ;
    3941                    ;       clr     a8
    3942                    ;       move    a8,@match_realtime
    3943                    ;
    3944                    ;wfvloop        SLEEP   TSEC
    3945                    ;       inc     a8
    3946                    ;       move    a8,@match_realtime
    3947                    ;       jruc    wfvloop
    3948                    
    3949                    ******************************************************************************
    3950                    
    3951                                                                    ;!KEEP THIS ORDER!
    3952 00010af0                   BSSX    up_dtime1,      16*NUM_WRES     ;number of ticks stick held down
    3953 00010af0                   BSSX    down_dtime1,    16*NUM_WRES
    3954 00010af0                   BSSX    left_dtime1,    16*NUM_WRES
    3955 00010af0                   BSSX    right_dtime1,   16*NUM_WRES
    3956 00010af0                   BSSX    punch_dtime1,   16*NUM_WRES
    3957 00010af0                   BSSX    block_dtime1,   16*NUM_WRES     ;number of ticks button held down
    3958 00010af0                   BSSX    powerp_dtime1,  16*NUM_WRES
    3959 00010af0                   BSSX    kick_dtime1,    16*NUM_WRES
    3960 00010af0                   BSSX    powerk_dtime1,  16*NUM_WRES
    3961                    
    3962                    *****************************************************************************
    3963                    
    3964 00010af0            SUBRP  init_joy_dtime
    3965                    
    3966 00010af0     5600          clr     a0
    3967                    
    3968 00010b00     09e1          movi    up_dtime1,a1
         00010b10 000185e0- 
    3969 00010b30     09c2          movi    9*NUM_WRES,a2
         00010b40     003f  
    3970 00010b50           iyplp1
    3971 00010b50     9001          move    a0,*a1+
    3972 00010b60     3c42          dsj     a2,iyplp1
    3973                    
    3974 00010b70     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   93

    3975                    
    3976                    *****************************************************************************
    3977                    
    3978 00010b80            SUBR   get_block_dtime
    3979                    
    3980 00010b80                   X16     a0
    3981 00010b90     0b20          addi    block_dtime1,a0
         00010ba0 00018810- 
    3982 00010bc0     8400          move    *a0,a0
    3983 00010bd0     0960          rets
    3984                    
    3985                    *****************************************************************************
    3986                    
    3987 00010be0            SUBR   get_powerp_dtime
    3988                    
    3989 00010be0                   X16     a0
    3990 00010bf0     0b20          addi    powerp_dtime1,a0
         00010c00 00018880- 
    3991 00010c20     8400          move    *a0,a0
    3992 00010c30     0960          rets
    3993                    
    3994                    *****************************************************************************
    3995                    
    3996 00010c40            SUBR   get_punch_dtime
    3997                    
    3998 00010c40                   X16     a0
    3999 00010c50     0b20          addi    punch_dtime1,a0
         00010c60 000187a0- 
    4000 00010c80     8400          move    *a0,a0
    4001 00010c90     0960          rets
    4002                    
    4003                    *****************************************************************************
    4004                    
    4005 00010ca0            SUBR   get_kick_dtime
    4006                    
    4007 00010ca0                   X16     a0
    4008 00010cb0     0b20          addi    kick_dtime1,a0
         00010cc0 000188f0- 
    4009 00010ce0     8400          move    *a0,a0
    4010 00010cf0     0960          rets
    4011                    
    4012                    *****************************************************************************
    4013                    
    4014 00010d00            SUBR   get_powerk_dtime
    4015                    
    4016 00010d00                   X16     a0
    4017 00010d10     0b20          addi    powerk_dtime1,a0
         00010d20 00018960- 
    4018 00010d40     8400          move    *a0,a0
    4019 00010d50     0960          rets
    4020                    
    4021                    
    4022                    *****************************************************************************
    4023                    
    4024                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   94

    4025 00010d60            SUBRP  update_joy_dtime
    4026                    
    4027 00010d60     b5a2          move    *a13(PLYRNUM),a2
         00010d70     0580  
    4028 00010d80     0d3f          callr   reiupdate_but
         00010d90     0016  
    4029 00010da0     b5a2          move    *a13(PLYRNUM),a2
         00010db0     0580  
    4030 00010dc0     0d3f          callr   reiupdate_stick
         00010dd0     0001  
    4031                    
    4032 00010de0     0960          rets
    4033                    
    4034 00010df0           reiupdate_stick
    4035                    ;       move    a13,a0
    4036                    ;       calla   wres_get_stick_val_cur
    4037 00010df0     b5a0          move    *a13(STICK_VAL_CUR),a0
         00010e00     0bc0  
    4038 00010e10                   X16     a2
    4039 00010e20     0b22          addi    up_dtime1,a2
         00010e30 000185e0- 
    4040                    
    4041 00010e50     1883          movk    4,a3
    4042 00010e60           reiloop1
    4043 00010e60     5621          clr     a1
    4044                    
    4045 00010e70     2fe0          srl     1,a0
    4046 00010e80     c902          jrnc    reiclr1
    4047                    
    4048 00010e90     8441          move    *a2,a1
    4049 00010ea0     1021          inc     a1
    4050 00010eb0           reiclr1
    4051 00010eb0     8022          move    a1,*a2
    4052                    
    4053 00010ec0     0b02          addi    16*NUM_WRES,a2
         00010ed0     0070  
    4054 00010ee0     3d23          dsj     a3,reiloop1
    4055                    
    4056 00010ef0     0960          rets
    4057                    
    4058 00010f00           reiupdate_but
    4059 00010f00     b5a0          move    *a13(BUT_VAL_CUR),a0
         00010f10     0b90  
    4060 00010f20                   X16     a2
    4061 00010f30     0b22          addi    punch_dtime1,a2
         00010f40 000187a0- 
    4062                    
    4063 00010f60     18a3          movk    5,a3
    4064 00010f70           reiloop2
    4065 00010f70     5621          clr     a1
    4066                    
    4067 00010f80     2fe0          srl     1,a0
    4068 00010f90     c902          jrnc    reiclr2
    4069                    
    4070 00010fa0     8441          move    *a2,a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   95

    4071 00010fb0     1021          inc     a1
    4072 00010fc0           reiclr2
    4073 00010fc0     8022          move    a1,*a2
    4074                    
    4075 00010fd0     0b02          addi    16*NUM_WRES,a2
         00010fe0     0070  
    4076 00010ff0     3d23          dsj     a3,reiloop2
    4077                    
    4078 00011000     0960          rets
    4079                    
    4080                    *****************************************************************************
    4081                    * a13 = * current process
    4082                    * calculates closest opponent and distances to him
    4083                    *
    4084                    * Well, not really the closest.  We bias it lots of ways:
    4085                    *
    4086                    * ---> Will always choose live targets over dead ones.
    4087                    * ---> Will always choose normal dead over zombies.
    4088                    * ---> Biased distance (used for comparison but never stored) is doubled
    4089                    *      for targets in MODE_ONGROUND.
    4090                    * ---> 25% reduction in biased distance for WHOIHIT
    4091                    * ---> Biased distance tripled for targets with different INRING values.
    4092                    * ---> Add double the Z difference to biased range (favors targets in
    4093                    *      your Z-lane.
    4094                    * ---> 25% reduction in biased distance for previous closest
    4095                    * ---> Will always pick live targets in front of a runner over targets behind
    4096                    *      him, IF they have the same INRING value.
    4097                    * ---> If in combo mode, will always face WHOIHIT, unless WHOIHIT is dead.
    4098                    *
    4099                    
    4100                    
    4101                            ;biased distance to current champ.
    4102 000189d0                   .bss    cxubiased_range,16
    4103                    
    4104                    ; first calculate the distance on the X-Z plane
    4105                    ;  dxz = sqroot ( (x1-x2)^2 + (z1-z2)^2 )
    4106                    ; total dist = sqroot ( DXZ^2 + (y1-y2)^2 )
    4107                    
    4108                    
    4109 00011010            SUBRP  calc_closest2
    4110                    
    4111                            ;Always recalculate if our current closest is dead.
    4112 00011010     b5ae          move    *a13(CLOSEST_NUM),a14
         00011020     03a0  
    4113 00011030                   X32     a14
    4114 00011040     0b2e          addi    process_ptrs,a14
         00011050 00000930- 
    4115 00011070     87ce          move    *a14,a14,L
    4116 00011080     b5ce          move    *a14(PLYRMODE),a14
         00011090     05c0  
    4117 000110a0     0b4e          cmpi    MODE_DEAD,a14
         000110b0     fff6  
    4118 000110c0     ca0e          jreq    cxugo
    4119                    
    4120                            ;Only proceed on every fourth tick.
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   96

    4121 000110d0     b5a0          move    *a13(PLYRNUM),a0
         000110e0     0580  
    4122 000110f0     0b80          andi    3,a0
         00011100 fffffffc  
    4123 00011120     05a1          move    @PCNT,a1
         00011130 00000170- 
    4124 00011150     0b81          andi    3,a1
         00011160 fffffffc  
    4125 00011180     4801          cmp     a0,a1
    4126 00011190     cb00          jrnz    cxux
         000111a0     00b9  
    4127                    
    4128                    
    4129 000111b0            SUBRP  calc_closest
    4130                    
    4131                            ;a11 is a flag.  when set, this indicates that a live player
    4132                            ; is the current closest.  Any live player will be chosen over
    4133                            ; a dead one.
    4134                            ;a11 is the status of the closest guy.  a positive value means the
    4135                            ; current closest is alive.  Zero means he's dead, and a negative
    4136                            ; value means there isn't one or it's a zombie.
    4137                    
    4138 000111b0     b5a0  cxugo   move    *a13(PLYR_TYPE),a0
         000111c0     05a0  
    4139                    
    4140 000111d0     b5a4          move    *a13(OBJ_XPOSINT),a4
         000111e0     0110  
    4141 000111f0     b5a5          move    *a13(OBJ_ZPOSINT),a5
         00011200     0150  
    4142 00011210     b5a6          move    *a13(OBJ_YPOSINT),a6
         00011220     0130  
    4143                    
    4144 00011230     09c3          movi    7FFFh,a3                ;closest distance
         00011240     7fff  
    4145 00011250     0583          move    a3,@cxubiased_range
         00011260 000189d0- 
    4146 00011280     576b          clr     a11
    4147 00011290     142b          dec     a11                     ;initialize to none/zombie
    4148 000112a0     09e2          movi    process_ptrs,a2
         000112b0 00000930- 
    4149 000112d0     09c1          movi    NUM_WRES,a1
         000112e0     0007  
    4150                    
    4151 000112f0     964a  cxuloop move    *a2+,a10,L
    4152 00011300     ca00          jrz     cxuinactive
         00011310     00a0  
    4153 00011320     49aa          cmp     a13,a10
    4154 00011330     ca00          jreq    cxuskip_nopull          ;skip self
         00011340     009d  
    4155                    
    4156 00011350     b5a7          move    *a13(PLYR_SIDE),a7
         00011360     05b0  
    4157 00011370     b548          move    *a10(PLYR_SIDE),a8
         00011380     05b0  
    4158 00011390     48e8          cmp     a7,a8
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   97

    4159 000113a0     ca00          jreq    cxuskip_nopull          ;skip friendly
         000113b0     0096  
    4160                    
    4161 000113c0                   PUSH    a4,a6
    4162 000113e0                   PUSH    a1
    4163                    
    4164 000113f0     b547          move    *a10(OBJ_XPOSINT),a7
         00011400     0110  
    4165 00011410     b548          move    *a10(OBJ_ZPOSINT),a8
         00011420     0150  
    4166 00011430     b549          move    *a10(OBJ_YPOSINT),a9
         00011440     0130  
    4167                    
    4168 00011450     4487          sub     a4,a7                   ;abs(delta x)
    4169 00011460     0387          abs     a7
    4170 00011470     4ce1          move    a7,a1
    4171 00011480     5e21          mpyu    a1,a1                   ;^2
    4172 00011490     4c20          move    a1,a0
    4173                    
    4174 000114a0     44a8          sub     a5,a8                   ;abs(delta z)
    4175 000114b0     0388          abs     a8
    4176 000114c0     4d01          move    a8,a1
    4177 000114d0     5e21          mpyu    a1,a1                   ;^2
    4178 000114e0     4020          add     a1,a0
    4179                    
    4180 000114f0     44c9          sub     a6,a9                   ;abs(delta y)
    4181 00011500     0389          abs     a9
    4182 00011510     4d21          move    a9,a1
    4183 00011520     5e21          mpyu    a1,a1                   ;^2
    4184 00011530     4020          add     a1,a0
    4185 00011540     0d5f          calla   square_root             ;sqroot of dxz^2 + dy^2
         00011550 00000000! 
    4186                    
    4187 00011570                   PULL    a1
    4188                    
    4189                            ;a0 is dist.  compute biased dist in a4
    4190 00011580     4c04          move    a0,a4
    4191                    
    4192                            ;ONGROUND penalty
    4193 00011590     b54e          move    *a10(PLYRMODE),a14
         000115a0     05c0  
    4194 000115b0     0b4e          cmpi    MODE_ONGROUND,a14
         000115c0     fffb  
    4195 000115d0     cb01          jrne    cxubc1
    4196 000115e0     2424          sll     1,a4            ;double it
    4197                    
    4198 000115f0           cxubc1  ;WHOIHIT bonus
    4199 000115f0     b7ae          move    *a13(WHOIHIT),a14,L
         00011600     0500  
    4200 00011610     49ca          cmp     a14,a10
    4201 00011620     cb03          jrne    cxubc2
    4202 00011630     4c8e          move    a4,a14
    4203 00011640     2fce          srl     2,a14
    4204 00011650     45c4          sub     a14,a4          ;sub 25%
    4205                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   98

    4206 00011660           cxubc2  ;INRING penalty
    4207 00011660     b54e          move    *a10(INRING),a14
         00011670     0560  
    4208 00011680     b5a6          move    *a13(INRING),a6
         00011690     0560  
    4209 000116a0     48ce          cmp     a6,a14
    4210 000116b0     ca03          jreq    cxubc3
    4211 000116c0     4c8e          move    a4,a14
    4212 000116d0     2424          sll     1,a4
    4213 000116e0     41c4          add     a14,a4          ;triple it
    4214                    
    4215 000116f0           cxubc3  ;previous closest bonus
    4216 000116f0     b5ae          move    *a13(CLOSEST_NUM),a14
         00011700     03a0  
    4217 00011710     b546          move    *a10(PLYRNUM),a6
         00011720     0580  
    4218 00011730     49c6          cmp     a14,a6
    4219 00011740     cb03          jrne    cxubc4
    4220 00011750     4c8e          move    a4,a14
    4221 00011760     2fce          srl     2,a14
    4222 00011770     45c4          sub     a14,a4          ;sub 25%
    4223                    
    4224 00011780           cxubc4  ;zero biased dist to combo target
    4225 00011780     b5ae          move    *a13(COMBO_COUNT),a14
         00011790     0af0  
    4226 000117a0     ca05          jrz     cxubc5
    4227 000117b0     b7ae          move    *a13(WHOIHIT),a14,L
         000117c0     0500  
    4228 000117d0     49ca          cmp     a14,a10
    4229 000117e0     cb01          jrne    cxubc5
    4230 000117f0     5684          clr     a4              ;zero dist
    4231                    
    4232 00011800           cxubc5  ;Z penalty
    4233 00011800     4d0e          move    a8,a14          ;delta Z
    4234 00011810     242e          sll     1,a14
    4235 00011820     41c4          add     a14,a4          ;add double the Z dist
    4236                    
    4237                    
    4238                            ;skip this guy if:
    4239                            ; a) we're running,
    4240                            ; b) he's behind us,
    4241                            ; c) our current closest is ahead of us, and
    4242                            ; d) our current closest is inside the ring.
    4243                    
    4244                            ;we running?
    4245 00011830     b5ae          move    *a13(PLYRMODE),a14
         00011840     05c0  
    4246 00011850     0b4e          cmpi    MODE_RUNNING,a14
         00011860     fffe  
    4247 00011870     cb1d          jrne    cxuab_ok
    4248                    
    4249                            ;have a useful current closest?
    4250 00011880                   TEST    a11
    4251 00011890     ce1b          jrn     cxuab_ok
    4252                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   99

    4253                            ;is this guy behind us?
    4254 000118a0     4d4e          move    a10,a14
    4255 000118b0     0d5f          calla   is_a14_behind
         000118c0 00000000! 
    4256 000118e0     c916          jrnc    cxuab_ok
    4257                    
    4258                            ;is closest ahead of us?
    4259 000118f0     b5ae          move    *a13(CLOSEST_NUM),a14
         00011900     03a0  
    4260 00011910                   X32     a14
    4261 00011920     0b2e          addi    process_ptrs,a14
         00011930 00000930- 
    4262 00011950     87ce          move    *a14,a14,L
    4263 00011960     0d5f          calla   is_a14_behind
         00011970 00000000! 
    4264 00011990     c80b          jrc     cxuab_ok
    4265                    
    4266                            ;is closest inside the ring?
    4267 000119a0     b5ae          move    *a13(CLOSEST_NUM),a14
         000119b0     03a0  
    4268 000119c0                   X32     a14
    4269 000119d0     0b2e          addi    process_ptrs,a14
         000119e0 00000930- 
    4270 00011a00     87ce          move    *a14,a14,L
    4271 00011a10     b5ce          move    *a14(INRING),a14
         00011a20     0560  
    4272 00011a30     cb01          jrnz    cxuab_ok
    4273                    
    4274                            ;we're running, this guy is behind us, and our current closest is
    4275                            ; both inside the ring and ahead of us.  Ignore this guy.
    4276 00011a40     c02b          jruc    cxuskip
    4277                    
    4278 00011a50           cxuab_ok        ;ahead/behind ok.
    4279                    
    4280                            ;three cases.  zombie, dead, or alive.
    4281 00011a50     b54e          move    *a10(PLYRMODE),a14
         00011a60     05c0  
    4282 00011a70     0b4e          cmpi    MODE_DEAD,a14
         00011a80     fff6  
    4283 00011a90     cb0c          jrne    cxualive
    4284 00011aa0     b54e          move    *a10(STATUS_FLAGS),a14
         00011ab0     0b50  
    4285 00011ac0     1f8e          btst    B_ZOMBIE,a14
    4286 00011ad0     ca03          jrz     cxudead
    4287                            ;fall through to zombie
    4288                    
    4289 00011ae0           cxuzombie       ;Only test this guy if a11 is negative.
    4290 00011ae0                   TEST    a11
    4291 00011af0     cf20          jrnn    cxuskip
    4292 00011b00     c009          jruc    cxucompare
    4293                    
    4294 00011b10           cxudead ;If a11 is negative, take this guy.  If it's zero, compare
    4295 00011b10                   TEST    a11
    4296 00011b20     ca07          jrz     cxucompare
    4297 00011b30     cf1c          jrnn    cxuskip
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  100

    4298 00011b40     576b          clr     a11             ;set a11 to dead
    4299 00011b50     c00a          jruc    cxuaccept
    4300                    
    4301 00011b60           cxualive        ;If a11 is positive, compare, otherwise just take him.
    4302 00011b60                   TEST    a11
    4303 00011b70     c102          jrp     cxucompare
    4304 00011b80     182b          movk    1,a11           ;set a11 to alive
    4305 00011b90     c006          jruc    cxuaccept
    4306                    
    4307 00011ba0           cxucompare
    4308 00011ba0     05ae          move    @cxubiased_range,a14
         00011bb0 000189d0- 
    4309 00011bd0     49c4          cmp     a14,a4
    4310 00011be0     c601          jrle    cxuaccept
    4311                    
    4312                            ;too far.
    4313 00011bf0     c010          jruc    cxuskip
    4314                    
    4315 00011c00           cxuaccept       ;use the guy in a10
    4316                    
    4317 00011c00     0584          move    a4,@cxubiased_range
         00011c10 000189d0- 
    4318 00011c30     4c03          move    a0,a3
    4319 00011c40     b06d          move    a3,*a13(CLOSEST_DIST)
         00011c50     0360  
    4320 00011c60     b0ed          move    a7,*a13(CLOSEST_XDIST)
         00011c70     0370  
    4321 00011c80     b10d          move    a8,*a13(CLOSEST_ZDIST)
         00011c90     0390  
    4322 00011ca0     b12d          move    a9,*a13(CLOSEST_YDIST)
         00011cb0     0380  
    4323                    
    4324 00011cc0     b54e          move    *a10(PLYRNUM),a14
         00011cd0     0580  
    4325 00011ce0     b1cd          move    a14,*a13(CLOSEST_NUM)
         00011cf0     03a0  
    4326                    
    4327 00011d00           cxuskip
    4328 00011d00                   PULL    a4,a6
    4329 00011d20           cxuinactive
    4330 00011d20           cxuskip_nopull
    4331 00011d20     0d81          dsj     a1,cxuloop
         00011d30     ff5b  
    4332                    
    4333 00011d40     0960  cxux    rets
    4334                    
    4335                    *****************************************************************************
    4336                    *
    4337                    * if attached, updates position based on player attached to
    4338                    * wrestler proc = *a13
    4339                    * 
    4340                    * RETURNS:      Z=1     -       not attached to anything
    4341                    *               Z=0     -       attached and updated
    4342                    *
    4343                    * TRASHES:      a0,a1,a2
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  101

    4344                    
    4345 00011d50            SUBR   master_keep_attached
    4346                    
    4347                    
    4348 00011d50     b7aa          move    *a13(ATTACH_PROC),a10,L         ;proc attached to me
         00011d60     03e0  
    4349 00011d70     ca3b          jrz     cgvnot_attached
    4350 00011d80     b740          move    *a10(ATTACH_PROC),a0,L
         00011d90     03e0  
    4351 00011da0     ca38          jrz     cgvnot_attached
    4352                    
    4353 00011db0           cgvstill_attached
    4354                            ;first, see if opponent is on the ground.
    4355 00011db0     b740          move    *a10(OBJ_YPOS),a0,L
         00011dc0     0120  
    4356 00011dd0     b54e          move    *a10(GROUND_Y),a14
         00011de0     0570  
    4357 00011df0     260e          sll     16,a14
    4358 00011e00     49c0          cmp     a14,a0
    4359 00011e10     c710          jrgt    cgvopp_notgnd
    4360                    
    4361                            ;opponent is on ground.  first, make sure he's not in MODE_GHOST
    4362 00011e20     b54e          move    *a10(ANIMODE),a14
         00011e30     0660  
    4363 00011e40     1e8e          btst    MODE_GHOST_BIT,a14
    4364 00011e50     cb0c          jrnz    cgvopp_notgnd
    4365                    
    4366                            ;calc new 'floor'
    4367 00011e60     b740          move    *a10(OBJ_YPOS),a0,L
         00011e70     0120  
    4368 00011e80     b5ae          move    *a13(ATTACH_YOFF),a14
         00011e90     03c0  
    4369 00011ea0     260e          sll     16,a14
    4370 00011eb0     45c0          sub     a14,a0
    4371                    
    4372                            ;a0 is our new floor.  stay at or above
    4373 00011ec0     b7ae          move    *a13(OBJ_YPOS),a14,L
         00011ed0     0120  
    4374 00011ee0     49c0          cmp     a14,a0
    4375 00011ef0     c602          jrle    cgvabove_newfloor
    4376                    
    4377                            ;too low.  climb
    4378 00011f00     b20d          move    a0,*a13(OBJ_YPOS),L
         00011f10     0120  
    4379                    
    4380 00011f20           cgvabove_newfloor
    4381 00011f20           cgvopp_notgnd
    4382                    
    4383 00011f20     5600          clr     a0
    4384 00011f30     b20a          move    a0,*a10(OBJ_YVEL),L
         00011f40     02f0  
    4385                    
    4386 00011f50     b7a0          move    *a13(OBJ_ZPOS),a0,L
         00011f60     0140  
    4387 00011f70     b5a1          move    *a13(ATTACH_ZOFF),a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  102

         00011f80     03d0  
    4388 00011f90     2601          sll     16,a1
    4389 00011fa0     4020          add     a1,a0
    4390 00011fb0     b20a          move    a0,*a10(OBJ_ZPOS),L
         00011fc0     0140  
    4391                    
    4392 00011fd0     b7a0          move    *a13(OBJ_YPOS),a0,L
         00011fe0     0120  
    4393 00011ff0     b5a1          move    *a13(ATTACH_YOFF),a1
         00012000     03c0  
    4394 00012010     2601          sll     16,a1
    4395 00012020     4020          add     a1,a0
    4396 00012030     b20a          move    a0,*a10(OBJ_YPOS),L
         00012040     0120  
    4397                    
    4398 00012050     b7a0          move    *a13(OBJ_XPOS),a0,L
         00012060     0100  
    4399 00012070     b5a1          move    *a13(ATTACH_XOFF),a1
         00012080     03b0  
    4400 00012090     2601          sll     16,a1
    4401                    
    4402 000120a0     b5a2          move    *a13(FACING_DIR),a2
         000120b0     04c0  
    4403 000120c0     1f82          btst    MOVE_RIGHT_BIT,a2
    4404 000120d0     cb01          jrnz    cgvadd
    4405 000120e0     03a1          neg     a1
    4406 000120f0           cgvadd
    4407 000120f0     4020          add     a1,a0
    4408 00012100     b20a          move    a0,*a10(OBJ_XPOS),L
         00012110     0100  
    4409                    
    4410 00012120     1820          movk    1,a0                    ;Z=0
    4411                    
    4412 00012130           cgvnot_attached
    4413 00012130     0960          rets
    4414                    
    4415                    
    4416                    *****************************************************************************
    4417                    *
    4418                    * if attached, updates position based on player attached to
    4419                    * wrestler proc = *a13
    4420                    * 
    4421                    * RETURNS:      Z=1     -       not attached to anything
    4422                    *               Z=0     -       attached and updated
    4423                    *
    4424                    * TRASHES:      a0,a1,a2
    4425                    
    4426                    
    4427 00012140            SUBR   keep_attached
    4428                    
    4429                    
    4430 00012140     b7a2          move    *a13(ATTACH_PROC),a2,L          ;proc attached to
         00012150     03e0  
    4431 00012160     ca24          jrz     kqnnot_attached
    4432 00012170     b640          move    *a2(ATTACH_PROC),a0,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  103

         00012180     03e0  
    4433 00012190     ca21          jrz     kqnnot_attached
    4434                    
    4435 000121a0           kqnstill_attached
    4436 000121a0     5600          clr     a0
    4437 000121b0     b20d          move    a0,*a13(OBJ_YVEL),L
         000121c0     02f0  
    4438                    
    4439 000121d0     b640          move    *a2(OBJ_ZPOS),a0,L
         000121e0     0140  
    4440 000121f0     b441          move    *a2(ATTACH_ZOFF),a1
         00012200     03d0  
    4441 00012210     2601          sll     16,a1
    4442 00012220     4020          add     a1,a0
    4443 00012230     b20d          move    a0,*a13(OBJ_ZPOS),L
         00012240     0140  
    4444                    
    4445 00012250     b640          move    *a2(OBJ_YPOS),a0,L
         00012260     0120  
    4446 00012270     b441          move    *a2(ATTACH_YOFF),a1
         00012280     03c0  
    4447 00012290     2601          sll     16,a1
    4448 000122a0     4020          add     a1,a0
    4449 000122b0     b20d          move    a0,*a13(OBJ_YPOS),L
         000122c0     0120  
    4450                    
    4451                    
    4452 000122d0     b640          move    *a2(OBJ_XPOS),a0,L
         000122e0     0100  
    4453 000122f0     b441          move    *a2(ATTACH_XOFF),a1
         00012300     03b0  
    4454 00012310     2601          sll     16,a1
    4455                    
    4456 00012320     b442          move    *a2(FACING_DIR),a2
         00012330     04c0  
    4457 00012340     1f82          btst    MOVE_RIGHT_BIT,a2
    4458 00012350     cb01          jrnz    kqnadd
    4459 00012360     03a1          neg     a1
    4460 00012370           kqnadd
    4461 00012370     4020          add     a1,a0
    4462 00012380     b20d          move    a0,*a13(OBJ_XPOS),L
         00012390     0100  
    4463                    
    4464 000123a0     1820          movk    1,a0                    ;Z=0
    4465                    
    4466 000123b0           kqnnot_attached
    4467 000123b0     0960          rets
    4468                    
    4469                    
    4470                    *****************************************************************************
    4471                    *
    4472                    * RETURNS:      a0 = * closest opponent process
    4473                    *
    4474                    * TRASHES:      a0
    4475                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  104

    4476 000123c0            SUBR   get_opp_process
    4477                    
    4478 000123c0     b5a0          move    *a13(CLOSEST_NUM),a0
         000123d0     03a0  
    4479 000123e0                   X32     a0
    4480 000123f0     0b20          addi    process_ptrs,a0
         00012400 00000930- 
    4481 00012420     8600          move    *a0,a0,L
    4482                    
    4483 00012430     0960          rets
    4484                    
    4485                    *****************************************************************************
    4486                    *
    4487                    * RETURNS:      a0 = PLYRMODE of the closest opponent
    4488                    *
    4489                    * TRASHES:      a0
    4490                    
    4491 00012440            SUBR   get_opp_plyrmode
    4492                    
    4493 00012440     b5a0          move    *a13(CLOSEST_NUM),a0
         00012450     03a0  
    4494 00012460                   X32     a0
    4495 00012470     0b20          addi    process_ptrs,a0
         00012480 00000930- 
    4496 000124a0     8600          move    *a0,a0,L
    4497 000124b0     b400          move    *a0(PLYRMODE),a0
         000124c0     05c0  
    4498                    
    4499 000124d0     0960          rets
    4500                    
    4501                    *****************************************************************************
    4502                    *
    4503                    * ARGS:         a0 = facing value (in binary form - 0,1,2,4,8)
    4504                    *
    4505                    * RETURNS:      a0 = facing value (in linear form - 0,1,2,3 - 8)
    4506                    *
    4507                    
    4508 000124e0            SUBR   convert_facing
    4509                    
    4510 000124e0                   X16     a0
    4511 000124f0     0b20          addi    rtbconvert_table,a0
         00012500 00012540' 
    4512 00012520     8400          move    *a0,a0
    4513 00012530     0960          rets
    4514                    
    4515 00012540           rtbconvert_table
    4516 00012540     0000          .word   0       ;0 zip
    4517 00012550     0000          .word   0       ;1 up
    4518 00012560     0004          .word   4       ;2 down
    4519 00012570     0000          .word   0       ;3 zip
    4520 00012580     0006          .word   6       ;4 left
    4521 00012590     0007          .word   7       ;5 up_left
    4522 000125a0     0005          .word   5       ;6 down_left
    4523 000125b0     0000          .word   0       ;7 zip
    4524 000125c0     0002          .word   2       ;8 right
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  105

    4525 000125d0     0001          .word   1       ;9 up_right
    4526 000125e0     0003          .word   3       ;10 down_right
    4527 000125f0     0000          .word   0       ;11 zip
    4528 00012600     0000          .word   0       ;12 zip
    4529 00012610     0000          .word   0       ;13 zip
    4530 00012620     0000          .word   0       ;14 zip
    4531 00012630     0000          .word   0       ;15 zip
    4532                    
    4533                    *****************************************************************************
    4534                    
    4535 00012640            SUBRP  init_joystat
    4536                    
    4537 00012640     5600          clr     a0
    4538                    
    4539 00012650     0580          move    a0,@round_tickcount
         00012660 00001010- 
    4540                    
    4541 00012680     09e1          movi    wrest_joystat,a1
         00012690 00001020- 
    4542 000126b0     09c2          movi    16*NUM_WRES,a2
         000126c0     0070  
    4543 000126d0           xpbclr_loop
    4544 000126d0     9201          move    a0,*a1+,L
    4545 000126e0     3c42          dsj     a2,xpbclr_loop
    4546                    
    4547 000126f0     0960          rets
    4548                    
    4549                    *****************************************************************************
    4550                    *
    4551                    * count active wrestler processes.  Clear reduce_bog if there's two, set if
    4552                    * there's more
    4553                    
    4554 00012700            SUBR   init_reduce_bog
    4555                    
    4556 00012700     09e0          movi    process_ptrs,a0
         00012710 00000930- 
    4557 00012730     09c1          movi    NUM_WRES,a1
         00012740     0007  
    4558 00012750     5642          clr     a2
    4559 00012760     960e  hfklp   move    *a0+,a14,L
    4560 00012770     ca01          jrz     hfknxt
    4561 00012780     1022          inc     a2                      ;got one.
    4562 00012790     3c81  hfknxt  dsj     a1,hfklp
    4563                    
    4564                            ;a2 is active wrestlers.  sub 2 and stick it in reduce_bog
    4565 000127a0     1442          subk    2,a2
    4566 000127b0     0582          move    a2,@reduce_bog
         000127c0 000022c0- 
    4567 000127e0     0960          rets
    4568                    
    4569                    *****************************************************************************
    4570                    
    4571 000127f0            SUBRP  update_joystat
    4572                    
    4573 000127f0     05a0          move    @HALT,a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  106

         00012800 000006c0- 
    4574 00012820     cb30          jrnz    kvtexit
    4575                    
    4576                    ;       move    a13,a0
    4577                    ;       calla   wres_get_stick_val_cur
    4578 00012830     b5a0          move    *a13(STICK_VAL_CUR),a0
         00012840     0bc0  
    4579 00012850     1988          movk    1100b,a8                ;mask out left & right
    4580 00012860     5008          and     a0,a8
    4581 00012870     2508          sll     10-2,a8                 ;shift to bit 10 & 11
    4582                    
    4583 00012880     b5ae          move    *a13(FACING_DIR),a14
         00012890     04c0  
    4584 000128a0     1fae          btst    MOVE_LEFT_BIT,a14
    4585 000128b0     ca05          jrz     kvtno_flip
    4586 000128c0                   X16     a0
    4587 000128d0     0b20          addi    kvtxflip_table,a0
         000128e0 00012c60' 
    4588 00012900     8400          move    *a0,a0                  ;flipped based on facing
    4589 00012910           kvtno_flip
    4590 00012910     5408          or      a0,a8                   ;real L/R | flipped joy dirs
    4591                    
    4592                    
    4593 00012920     4da0          move    a13,a0
    4594 00012930     0d5f          calla   wres_get_stick_val_up
         00012940 00000000! 
    4595 00012960     4c04          move    a0,a4
    4596 00012970     4da0          move    a13,a0
    4597 00012980     0d5f          calla   wres_get_stick_val_down
         00012990 00000000! 
    4598 000129b0     5480          or      a4,a0
    4599 000129c0     ca04          jrz     kvtno_stick
    4600                    
    4601 000129d0     4d04          move    a8,a4                   ;cur (flipped) stick vals
    4602 000129e0     ca02          jrz     kvtno_stick
    4603                    
    4604 000129f0     0d3f          callr   kvtinsert
         00012a00     0013  
    4605                    
    4606 00012a10           kvtno_stick
    4607                    
    4608 00012a10     4da0          move    a13,a0
    4609 00012a20     0d5f          calla   wres_get_but_val_down
         00012a30 00000000! 
    4610 00012a50     4c06          move    a0,a6
    4611 00012a60     ca0c          jrz     kvtno_button
    4612 00012a70                   X16     a6
    4613                    
    4614 00012a80     18a5          movk    5,a5                    ;5 button bits
    4615 00012a90     1a07          movk    10000b,a7               ;1st bit << 4 (to skip 4 joy bits)
    4616 00012aa0           kvtbit_loop
    4617 00012aa0     4cc0          move    a6,a0
    4618 00012ab0     50e0          and     a7,a0                   ;button down?
    4619 00012ac0     ca04          jrz     kvtskip
    4620 00012ad0     4c04          move    a0,a4
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  107

    4621 00012ae0     5504          or      a8,a4                   ;+ cur (flipped) stick vals
    4622 00012af0     0d3f          callr   kvtinsert                       ;only 1 button per entry
         00012b00     0003  
    4623 00012b10           kvtskip
    4624 00012b10     2427          sll     1,a7
    4625 00012b20     3d25          dsj     a5,kvtbit_loop
    4626                    
    4627 00012b30           kvtno_button
    4628                    
    4629 00012b30           kvtexit
    4630 00012b30     0960          rets
    4631                    
    4632 00012b40           kvtinsert
    4633 00012b40     05a0          move    @round_tickcount,a0
         00012b50 00001010- 
    4634 00012b70     2600          sll     16,a0
    4635 00012b80     5404          or      a0,a4
    4636                    
    4637 00012b90     b5a0          move    *a13(PLYRNUM),a0
         00012ba0     0580  
    4638 00012bb0     2520          sll     5+4,a0                          ;PLYRNUM x32 x16
    4639                    
    4640 00012bc0     0b20          addi    wrest_joystat + 32*15,a0        ;2nd last entry (after pre-dec)
         00012bd0 00001200- 
    4641 00012bf0     4c01          move    a0,a1
    4642 00012c00     1001          addk    32,a1                           ;last entry (after pre-dec)
    4643                    
    4644 00012c10     19e2          movk    15,a2                           ;# entries - 1
    4645 00012c20           kvtmove_loop
    4646 00012c20     aa01          move    -*a0,-*a1,L                     ;move each entry down
    4647 00012c30     3c42          dsj     a2,kvtmove_loop                 ;1 position
    4648                    
    4649 00012c40     8280          move    a4,*a0,L                        ;time stamp : joy & buttons
    4650 00012c50     0960          rets
    4651                    
    4652 00012c60           kvtxflip_table  ;convert to forward / away  if facing left
    4653 00012c60     0000          .word   0               ;0
    4654 00012c70     0001          .word   J_UP            ;1
    4655 00012c80     0002          .word   J_DOWN          ;2
    4656 00012c90     0000          .word   0               ;3
    4657 00012ca0     0008          .word   J_TOWARD        ;4
    4658 00012cb0     0009          .word   J_UP_TOWARD     ;5
    4659 00012cc0     000a          .word   J_DOWN_TOWARD   ;6
    4660 00012cd0     0000          .word   0               ;7
    4661 00012ce0     0004          .word   J_AWAY          ;8
    4662 00012cf0     0005          .word   J_UP_AWAY       ;9
    4663 00012d00     0006          .word   J_DOWN_AWAY     ;10
    4664 00012d10     0000          .word   0,0,0,0,0       ;11-15
    4665                    
    4666                    
    4667                    *****************************************************************************
    4668                    
    4669 00012d60            SUBR   clear_button_presses
    4670                    
    4671 00012d60     18a1          movk    5,a1            ;5 buttons
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  108

    4672 00012d70     4da2          move    a13,a2
    4673 00012d80     0b02          addi    PUNCHB_COUNT,a2
         00012d90     0800  
    4674 00012da0     5600          clr     a0
    4675 00012db0           vzgloop
    4676 00012db0     9002          move    a0,*a2+
    4677 00012dc0     3c41          dsj     a1,vzgloop
    4678                    
    4679 00012dd0     0960          rets
    4680                    
    4681                    *****************************************************************************
    4682                    
    4683 00012de0            SUBR   count_button_presses
    4684                    
    4685 00012de0     4da0          move    a13,a0
    4686 00012df0     0d5f          calla   wres_get_but_val_down
         00012e00 00000000! 
    4687 00012e20     4c00          move    a0,a0
    4688 00012e30     ca0c          jrz     wadexit
    4689                    
    4690 00012e40     18a1          movk    5,a1            ;5 bits
    4691 00012e50     4da2          move    a13,a2
    4692 00012e60     0b02          addi    PUNCHB_COUNT,a2
         00012e70     0800  
    4693 00012e80           wadloop
    4694 00012e80     2fe0          srl     1,a0            ;button--0CaHrry
    4695 00012e90     c903          jrnc    wadno_but
    4696                    
    4697 00012ea0     844e          move    *a2,a14
    4698 00012eb0     102e          inc     a14
    4699 00012ec0     81c2          move    a14,*a2
    4700                    
    4701 00012ed0           wadno_but
    4702 00012ed0     0b02          addi    16,a2
         00012ee0     0010  
    4703 00012ef0     3d01          dsj     a1,wadloop
    4704                    
    4705 00012f00           wadexit
    4706 00012f00     0960          rets
    4707                    
    4708                    ;       WORD    PUNCHB_COUNT    ;0 <------
    4709                    ;       WORD    BLOCKB_COUNT    ;1 keep   |
    4710                    ;       WORD    SPUNCHB_COUN    ;2 ordered|
    4711                    ;       WORD    KICK_COUNT      ;3        |
    4712                    ;       WORD    SKICK_COUNT     ;4 <------
    4713                    
    4714                    *****************************************************************************
    4715                    
    4716 00012f10            SUBR   direction_test
    4717                    
    4718                     .if 0
    4719                            ;can put this in a mode
    4720                            .ref    direction_test
    4721                    
    4722                            move    *a13(PLYRNUM),a8
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  109

    4723                            move    *a13(CLOSEST_NUM),a9
    4724                    
    4725                            CREATE  0,direction_test                ;temp!!!!!!!!!!!
    4726                    
    4727                            movi    424000h,a0
    4728                            move    a0,*a13(OBJ_YVEL),L
    4729                    
    4730                            SETMODE INAIR
    4731                            rets
    4732                     .endif
    4733                    
    4734                    
    4735                    ;a8 = PLYRNUM
    4736                    ;a9 = CLOSEST_NUM
    4737                    
    4738 00012f10     b10d          move    a8,*a13(PLYRNUM)
         00012f20     0580  
    4739 00012f30     b12d          move    a9,*a13(CLOSEST_NUM)
         00012f40     03a0  
    4740                    
    4741 00012f50                   X32     a8
    4742 00012f60     0b28          addi    process_ptrs,a8
         00012f70 00000930- 
    4743 00012f90     870a          move    *a8,a10,L
    4744                    
    4745 00012fa0                   X32     a9
    4746 00012fb0     0b29          addi    process_ptrs,a9
         00012fc0 00000930- 
    4747 00012fe0     872b          move    *a9,a11,L
    4748                    
    4749 00012ff0     bb4d          move    *a10(OBJ_XPOS),*a13(OBJ_XPOS),L
         00013000     0100  
         00013010     0100  
    4750 00013020     bb4d          move    *a10(OBJ_YPOS),*a13(OBJ_YPOS),L
         00013030     0120  
         00013040     0120  
    4751 00013050     bb4d          move    *a10(OBJ_ZPOS),*a13(OBJ_ZPOS),L
         00013060     0140  
         00013070     0140  
    4752                    
    4753                    
    4754                    
    4755 00013080     b740          move    *a10(OBJ_XPOS),a0,L
         00013090     0100  
    4756 000130a0     b761          move    *a11(OBJ_XPOS),a1,L
         000130b0     0100  
    4757 000130c0     4401          sub     a0,a1
    4758 000130d0     09c0          movi    TSEC,a0
         000130e0     0035  
    4759 000130f0     5801          divs    a0,a1                   ;a1 / a0
    4760 00013100     b22d          move    a1,*a13(OBJ_XVEL),L
         00013110     02d0  
    4761                    
    4762                    
    4763 00013120     b740          move    *a10(OBJ_ZPOS),a0,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  110

         00013130     0140  
    4764 00013140     b761          move    *a11(OBJ_ZPOS),a1,L
         00013150     0140  
    4765 00013160     4401          sub     a0,a1
    4766 00013170     09c0          movi    TSEC,a0
         00013180     0035  
    4767 00013190     5801          divs    a0,a1                   ;a1 / a0
    4768 000131a0     b22d          move    a1,*a13(OBJ_ZVEL),L
         000131b0     0310  
    4769                    
    4770                    
    4771                    
    4772 000131c0     5600          clr     a0
    4773 000131d0     b20d          move    a0,*a13(OBJ_YVEL),L
         000131e0     02f0  
    4774                    
    4775                    ;       move    a0,*a13(OBJ_XVEL),L
    4776                    ;       move    a0,*a13(OBJ_ZVEL),L
    4777                    
    4778 000131f0     5600          clr     a0                      ;x pos
    4779 00013200     5621          clr     a1                      ;y pos
    4780 00013210     09e2          movi    D2ST2B03,a2             ;* image
         00013220 00000000! 
    4781 00013240     1a83          movk    20,a3                   ;z pos
    4782 00013250     09e4          movi    DMAWNZ|M_3D,a4          ;DMA flags
         00013260 00008102  
    4783 00013280     b08d          move    a4,*a13(OBJ_CONTROL)
         00013290     0780  
    4784 000132a0     56a5          clr     a5                      ;object ID
    4785 000132b0     56c6          clr     a6                      ;x vel
    4786 000132c0     56e7          clr     a7                      ;y vel
    4787 000132d0     0d5f          calla   BEGINOBJ
         000132e0 00000000! 
    4788                    
    4789 00013300     09c0          movi    TSEC,a0
         00013310     0035  
    4790 00013320           iahloop
    4791 00013320                   PUSHP   a0
    4792                    
    4793                    ;velocity add
    4794 00013330     b7a0          move    *a13(OBJ_XPOS),a0,L
         00013340     0100  
    4795 00013350     b7a1          move    *a13(OBJ_XVEL),a1,L
         00013360     02d0  
    4796 00013370     4020          add     a1,a0
    4797 00013380     b20d          move    a0,*a13(OBJ_XPOS),L
         00013390     0100  
    4798                    
    4799 000133a0     b7a0          move    *a13(OBJ_YPOS),a0,L
         000133b0     0120  
    4800 000133c0     b7a1          move    *a13(OBJ_YVEL),a1,L
         000133d0     02f0  
    4801 000133e0     4020          add     a1,a0
    4802 000133f0     cf01          jrnn    iahyok
    4803 00013400     5600          clr     a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  111

    4804 00013410           iahyok
    4805 00013410     b20d          move    a0,*a13(OBJ_YPOS),L
         00013420     0120  
    4806                    
    4807 00013430     b7a0          move    *a13(OBJ_ZPOS),a0,L
         00013440     0140  
    4808 00013450     b7a1          move    *a13(OBJ_ZVEL),a1,L
         00013460     0310  
    4809 00013470     4020          add     a1,a0
    4810 00013480     b20d          move    a0,*a13(OBJ_ZPOS),L
         00013490     0140  
    4811                    
    4812                    
    4813                    
    4814                    
    4815                    
    4816                    ;image plot
    4817 000134a0     b7a5          move    *a13(OBJ_XPOS),a5,L     ;x val
         000134b0     0100  
    4818                    
    4819 000134c0     09c0          movi    Y_SCALE_MULTIPLIER,a0
         000134d0     3566  
    4820 000134e0     b5a1          move    *a13(OBJ_ZPOSINT),a1
         000134f0     0150  
    4821 00013500     5c01          mpys    a0,a1
    4822 00013510     4c26          move    a1,a6                   ;y val
    4823                    
    4824 00013520     b5a7          move    *a13(OBJ_CONTROL),a7    ;flip bits & pixel ops
         00013530     0780  
    4825                    
    4826 00013540     b2c8          move    a6,*a8(OYVAL),L         ;keep updating YVAL to keep priorities
         00013550     00a0  
    4827                    
    4828 00013560     b2a8          move    a5,*a8(OXVAL),L
         00013570     0080  
    4829 00013580     b2c8          move    a6,*a8(OYVAL),L
         00013590     00a0  
    4830                    
    4831 000135a0     09e1          movi    [20,0],a1                       ;z pos
         000135b0 00140000  
    4832 000135d0     b228          move    a1,*a8(OZVAL),L
         000135e0     00c0  
    4833                    
    4834 000135f0     0546          setf    6,0,0
    4835 00013600     b0e8          move    a7,*a8(OCTRL)                   ;Write 6 low bits
         00013610     00f0  
    4836 00013620     0570          setf    16,1,0
    4837                    
    4838                    
    4839 00013630                   SLEEPK  1
    4840                    
    4841 00013670                   PULLP   a0
    4842 00013680     0d80          dsj     a0,iahloop
         00013690     ffc8  
    4843                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  112

    4844 000136a0     0d5f          calla   DELOBJA8
         000136b0 00000000! 
    4845                    
    4846 000136d0                   DIE
    4847                    
    4848                    *****************************************************************************
    4849                    *
    4850                    * a11 = * secret move table
    4851                    * a13 = * wrestler process
    4852                    
    4853 00013700            SUBR   check_secret_moves
    4854                    
    4855 00013700     b5ae          move    *a13(IMMOBILIZE_TIME),a14
         00013710     0ae0  
    4856 00013720     cb69          jrnz    vtedone
    4857                    
    4858 00013730     b5ae          move    *a13(PLYRMODE),a14
         00013740     05c0  
    4859 00013750     0b4e          cmpi    MODE_DIZZY,a14
         00013760     fff7  
    4860 00013770     ca64          jreq    vtedone
    4861 00013780     0b4e          cmpi    MODE_WAITANIM,a14
         00013790     fff3  
    4862 000137a0     ca61          jreq    vtedone
    4863                    
    4864                    ;No secret moves if getup time is set - out of control runs, etc.
    4865 000137b0     b5ae          move    *a13(GETUP_TIME),a14
         000137c0     0460  
    4866 000137d0     cb5e          jrnz    vtedone
    4867                    
    4868 000137e0     9760          move    *a11+,a0,L              ;button hold test code
    4869 000137f0     0920          call    a0
    4870 00013800     c85b          jrc     vtedone
    4871                    
    4872 00013810     b5aa          move    *a13(PLYRNUM),a10
         00013820     0580  
    4873 00013830     252a          sll     5+4,a10                 ;PLYRNUM x32 x16
    4874 00013840     0b2a          addi    wrest_joystat,a10
         00013850 00001020- 
    4875                    
    4876                            ;only check if newest entry in queue is fresh
    4877 00013870     b540          move    *a10(10h),a0            ;time stamp
         00013880     0010  
    4878 00013890     05a1          move    @round_tickcount,a1
         000138a0 00001010- 
    4879 000138c0     4801          cmp     a0,a1
    4880 000138d0     cb4e          jrne    vtedone
    4881                    
    4882                    
    4883 000138e0           vtenext_table
    4884                            .align
    4885 00013c00     9762          move    *a11+,a2,L
    4886 00013c10     ca1a          jrz     vtedone
    4887 00013c20     4d49          move    a10,a9
    4888                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  113

    4889 00013c30     1903          movk    8,a3                    ;only skip 8 masked entries
    4890                    
    4891                            ;the first entry in the queue requires a special check...
    4892 00013c40     8440          move    *a2,a0                  ;value
    4893 00013c50     b441          move    *a2(10h),a1             ;mask
         00013c60     0010  
    4894 00013c70     872e          move    *a9,a14,L
    4895 00013c80     0b8e          andi    0ffffh,a14              ;queue head
         00013c90 ffff0000  
    4896 00013cb0     522e          andn    a1,a14                  ;apply mask
    4897                    
    4898                            ;if the mask leaves nothing behind, then there's noise since the
    4899                            ; final (trigger) move, so blow it off.
    4900 00013cc0     cac1          jrz     vtenext_table
    4901                    
    4902 00013cd0           vteloop
    4903 00013cd0     9440          move    *a2+,a0
    4904 00013ce0     ce0e          jrn     vtematch
    4905 00013cf0     9441          move    *a2+,a1                 ;mask
    4906 00013d00           vteskip
    4907                    
    4908                            ;check for end of table (16 entries)
    4909                    
    4910 00013d00     9727          move    *a9+,a7,L
    4911 00013d10     4ce8          move    a7,a8
    4912 00013d20     2e07          srl     16,a7                   ;round tick count
    4913 00013d30     0b88          andi    0ffffh,a8               ;joy+buttons
         00013d40 ffff0000  
    4914 00013d60     5228          andn    a1,a8
    4915 00013d70     0da3          dsjeq   a3,vteskip
         00013d80     fff7  
    4916                    
    4917 00013d90     4808          cmp     a0,a8
    4918 00013da0     caf2          jreq    vteloop
    4919                    
    4920 00013db0           vtefailed
    4921 00013db0     c0b2          jruc    vtenext_table
    4922                    
    4923 00013dc0           vtedone
    4924 00013dc0     0960          rets
    4925                    
    4926 00013dd0           vtematch
    4927                            ;skip it if we're a zombie
    4928 00013dd0     b5ae          move    *a13(STATUS_FLAGS),a14
         00013de0     0b50  
    4929 00013df0     1f8e          btst    B_ZOMBIE,a14
    4930 00013e00     cbfb          jrnz    vtedone
    4931                    
    4932 00013e10     0b80          andi    07fffh,a0               ;clear out sign bit
         00013e20 ffff8000  
    4933 00013e40     05a1          move    @round_tickcount,a1
         00013e50 00001010- 
    4934 00013e70     0b81          andi    0ffffh,a1               ;clear out sign extend
         00013e80 ffff0000  
    4935 00013ea0     44e1          sub     a7,a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  114

    4936 00013eb0     4801          cmp     a0,a1                   ;below count?
    4937 00013ec0     c7ee          jrgt    vtefailed
    4938                    
    4939 00013ed0     8640          move    *a2,a0,L                ;code to execute
    4940 00013ee0     0160          jump    a0
    4941                    
    4942                    *****************************************************************************
    4943                    *
    4944                    * sets animations for legs & torso based on facing & move direction
    4945                    *
    4946                    
    4947 00013ef0            SUBR   change_walk_anim
    4948                    
    4949 00013ef0     5600          clr     a0
    4950 00013f00     b00d          move    a0,*a13(CONSECUTIVE_HITS)
         00013f10     0e50  
    4951                    ;Fix walking speeds!
    4952                    ;Did I do a taunt to achieve high risk move bonus?
    4953 00013f20     b5ae          move    *a13(RISK),a14
         00013f30     0950  
    4954 00013f40     1e0e          btst    15,a14
    4955 00013f50     cb03          jrnz    tdwtaunted
    4956 00013f60     5600          clr     a0
    4957 00013f70     b00d          move    a0,*A13(RISK)
         00013f80     0950  
    4958 00013f90           tdwtaunted
    4959 00013f90     b5a0          move    *a13(WALK_FAST),a0
         00013fa0     0b40  
    4960 00013fb0     cb07          jrnz    tdwfast
    4961                    
    4962 00013fc0     0d3f          callr   get_opp_process
         00013fd0     fe3e  
    4963 00013fe0     b400          move    *a0(PLYRMODE),a0        ;don't slow down if backing
         00013ff0     05c0  
    4964 00014000     0b40          cmpi    MODE_ONGROUND,a0        ;away from a downed opponent
         00014010     fffb  
    4965 00014020     cb03          jrnz    tdwnotgrnd
    4966 00014030           tdwfast
    4967 00014030     09c0          movi    0cdh,a0                 ;fast legs
         00014040     00cd  
    4968 00014050     c002          jruc    tdwgo_spd
    4969                    
    4970 00014060           tdwnotgrnd
    4971 00014060     09c0          movi    100h,a0                 ;normal speed
         00014070     0100  
    4972                    
    4973 00014080           tdwgo_spd
    4974 00014080     b00d          move    a0,*a13(ANI_SPEED)
         00014090     0650  
    4975 000140a0     b5a0          move    *a13(ANIMODE2),a0
         000140b0     06e0  
    4976 000140c0     1fa0          btst    MODE_UNINT_BIT,a0
    4977 000140d0     cb1a          jrnz    tdwno_interrupt
    4978                    
    4979 000140e0     b5a0          move    *a13(FACING_DIR),a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  115

         000140f0     04c0  
    4980 00014100     0d3f          callr   convert_facing          ;(0-7)
         00014110     fe3c  
    4981 00014120     2fe0          srl     1,a0                    ;only uses diagonals (0-3)
    4982 00014130                   X4      a0
    4983 00014140     4c01          move    a0,a1
    4984                    
    4985 00014150     b5a0          move    *a13(NEW_FACING_DIR),a0
         00014160     04d0  
    4986 00014170     0d3f          callr   convert_facing          ;(0-7)
         00014180     fe35  
    4987 00014190     2fe0          srl     1,a0                    ;only uses diagonals (0-3)
    4988 000141a0     4020          add     a1,a0
    4989 000141b0                   X32     a0
    4990                    
    4991 000141c0     b5ae          move    *a13(WRESTLERNUM),a14
         000141d0     0590  
    4992 000141e0                   X32     a14
    4993 000141f0     0b2e          addi    tdwwres_torso_anims,a14
         00014200 00014410' 
    4994 00014220     87ce          move    *a14,a14,L              ;* torso anim table
    4995 00014230     41c0          add     a14,a0
    4996                    
    4997 00014240     8600          move    *a0,a0,L
    4998 00014250     0d5f          calla   change_anim2            ;torso
         00014260 00000000! 
    4999                    
    5000 00014280           tdwno_interrupt
    5001                    
    5002 00014280     b5a0          move    *a13(MOVE_DIR),a0
         00014290     04b0  
    5003 000142a0     0d3f          callr   convert_facing          ;(0-7)
         000142b0     fe22  
    5004 000142c0                   X8      a0
    5005 000142d0     4c01          move    a0,a1
    5006                    
    5007 000142e0     b5a0          move    *a13(FACING_DIR),a0
         000142f0     04c0  
    5008 00014300     0d3f          callr   convert_facing          ;(0-7)
         00014310     fe1c  
    5009 00014320     4020          add     a1,a0
    5010 00014330                   X32     a0
    5011                    
    5012 00014340     b5ae          move    *a13(WRESTLERNUM),a14
         00014350     0590  
    5013 00014360                   X32     a14
    5014 00014370     0b2e          addi    tdwwres_leg_anims,a14
         00014380 00014550' 
    5015 000143a0     87ce          move    *a14,a14,L              ;* leg anim table
    5016 000143b0     41c0          add     a14,a0
    5017                    
    5018 000143c0     8600          move    *a0,a0,L                ;* new animation
    5019 000143d0     0d5f          calla   change_anim1            ;legs
         000143e0 00000000! 
    5020                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  116

    5021 00014400     0960  tdwrets rets
    5022                    
    5023                    
    5024                            .ref    bam_torso_anims_table,bam_leg_anims_table
    5025                            .ref    dnk_torso_anims_table,dnk_leg_anims_table
    5026                            .ref    hrt_torso_anims_table,hrt_leg_anims_table
    5027                            .ref    lex_torso_anims_table,lex_leg_anims_table
    5028                            .ref    rzr_torso_anims_table,rzr_leg_anims_table
    5029                            .ref    shn_torso_anims_table,shn_leg_anims_table
    5030                            .ref    und_torso_anims_table,und_leg_anims_table
    5031                            .ref    yok_torso_anims_table,yok_leg_anims_table
    5032                    
    5033 00014410           tdwwres_torso_anims
    5034 00014410 00000000!         .long   hrt_torso_anims_table   ;0 Bret Hart
    5035 00014430 00000000!         .long   rzr_torso_anims_table   ;1 Razor Ramon
    5036 00014450 00000000!         .long   und_torso_anims_table   ;2 Undertaker
    5037 00014470 00000000!         .long   yok_torso_anims_table   ;3 Yokozuna
    5038 00014490 00000000!         .long   shn_torso_anims_table   ;4 Shawn Michaels
    5039 000144b0 00000000!         .long   bam_torso_anims_table   ;5 Bam Bam
    5040 000144d0 00000000!         .long   dnk_torso_anims_table   ;6 Doink
    5041 000144f0 00000000!         .long   dnk_torso_anims_table   ;7 spare
    5042 00014510 00000000!         .long   lex_torso_anims_table   ;8 Lex Luger
    5043 00014530 00000000          .long   0                       ;9 Referee
    5044                    
    5045 00014550           tdwwres_leg_anims
    5046 00014550 00000000!         .long   hrt_leg_anims_table     ;0 Bret Hart
    5047 00014570 00000000!         .long   rzr_leg_anims_table     ;1 Razor Ramon
    5048 00014590 00000000!         .long   und_leg_anims_table     ;2 Undertaker
    5049 000145b0 00000000!         .long   yok_leg_anims_table     ;3 Yokozuna
    5050 000145d0 00000000!         .long   shn_leg_anims_table     ;4 Shawn Michaels
    5051 000145f0 00000000!         .long   bam_leg_anims_table     ;5 Bam Bam
    5052 00014610 00000000!         .long   dnk_leg_anims_table     ;6 Doink
    5053 00014630 00000000!         .long   dnk_leg_anims_table     ;7 spare
    5054 00014650 00000000!         .long   lex_leg_anims_table     ;8 Lex Luger
    5055 00014670 00000000          .long   0                       ;9 Referee
    5056                    
    5057                    
    5058                    *****************************************************************************
    5059                    *
    5060                    * returns: A0 = rotation anim based on NEW_FACING_DIR & FACING_DIR
    5061                    *
    5062                    * goes into stance anim if already facing if NEW_FACING = FACING
    5063                    
    5064 00014690            SUBR   set_rotate_anim
    5065                    
    5066 00014690     b5a0          move    *a13(FACING_DIR),a0
         000146a0     04c0  
    5067 000146b0     0d5f          calla   convert_facing                  ;(0-7)
         000146c0 000124e0' 
    5068 000146e0     2fe0          srl     1,a0                            ;only uses diagonals (0-3)
    5069 000146f0                   X4      a0
    5070 00014700     4c01          move    a0,a1
    5071                    
    5072 00014710     b5a0          move    *a13(NEW_FACING_DIR),a0
         00014720     04d0  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  117

    5073 00014730     0d5f          calla   convert_facing                  ;(0-7)
         00014740 000124e0' 
    5074 00014760     2fe0          srl     1,a0                            ;only uses diagonals (0-3)
    5075 00014770     4020          add     a1,a0
    5076 00014780                   X32     a0
    5077                    
    5078 00014790     b5ae          move    *a13(WRESTLERNUM),a14
         000147a0     0590  
    5079 000147b0                   X32     a14
    5080 000147c0     0b2e          addi    iedwres_rotate_anims,a14
         000147d0 00014870' 
    5081 000147f0     87ce          move    *a14,a14,L                      ;* rotate anim table
    5082 00014800     41c0          add     a14,a0
    5083                    
    5084 00014810     b5ae          move    *a13(NEW_FACING_DIR),a14
         00014820     04d0  
    5085 00014830     b1cd          move    a14,*a13(FACING_DIR)
         00014840     04c0  
    5086                    
    5087 00014850     8600          move    *a0,a0,L
    5088                    ;;;     calla   change_anim1
    5089                    
    5090 00014860     0960          rets
    5091                    
    5092                    
    5093                            .ref    bam_rotate_anims_table
    5094                            .ref    dnk_rotate_anims_table
    5095                            .ref    hrt_rotate_anims_table
    5096                            .ref    lex_rotate_anims_table
    5097                            .ref    rzr_rotate_anims_table
    5098                            .ref    shn_rotate_anims_table
    5099                            .ref    und_rotate_anims_table
    5100                            .ref    yok_rotate_anims_table
    5101                    
    5102 00014870           iedwres_rotate_anims
    5103 00014870 00000000!         .long   hrt_rotate_anims_table  ;0 Bret Hart
    5104 00014890 00000000!         .long   rzr_rotate_anims_table  ;1 Razor Ramon
    5105 000148b0 00000000!         .long   und_rotate_anims_table  ;2 Undertaker
    5106 000148d0 00000000!         .long   yok_rotate_anims_table  ;3 Yokozuna
    5107 000148f0 00000000!         .long   shn_rotate_anims_table  ;4 Shawn Michaels
    5108 00014910 00000000!         .long   bam_rotate_anims_table  ;5 Bam Bam
    5109 00014930 00000000!         .long   dnk_rotate_anims_table  ;6 Doink
    5110 00014950 00000000!         .long   dnk_rotate_anims_table  ;7 spare
    5111 00014970 00000000!         .long   lex_rotate_anims_table  ;8 Lex Luger
    5112 00014990 00000000          .long   0                       ;9 Referee
    5113                    
    5114                    
    5115                    *****************************************************************************
    5116                    
    5117 000149b0            SUBR   bounce_off_ropes
    5118                    
    5119                    
    5120 000149b0     b5a0          move    *a13(INRING),a0
         000149c0     0560  
    5121 000149d0     cb3f          jrnz    yfqoutside
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  118

    5122                    
    5123 000149e0     b5ae          move    *a13(WRESTLERNUM),a14
         000149f0     0590  
    5124 00014a00                   X16     a14
    5125 00014a10     0b2e          addi    yfqbounce_xoffsets,a14
         00014a20 00014de0' 
    5126 00014a40     85ce          move    *a14,a14
    5127                    
    5128                    
    5129 00014a50     b5a0          move    *a13(MOVE_DIR),a0
         00014a60     04b0  
    5130 00014a70     1f80          btst    PLAYER_RIGHT_BIT,a0
    5131 00014a80     cb0b          jrnz    yfqright
    5132                    ;yfqleft
    5133 00014a90     09e6          movi    vln_left_rope,a6
         00014aa0 000038e0- 
    5134 00014ac0     0d3f          callr   calc_line_x
         00014ad0     01ba  
    5135 00014ae0     45c0          sub     a14,a0
    5136 00014af0     b5a1          move    *a13(OBJ_COLLX1),a1
         00014b00     01e0  
    5137 00014b10     4801          cmp     a0,a1                   ;a0-a1
    5138 00014b20     c60b          jrle    yfqbounce
    5139 00014b30     0960          rets
    5140                    
    5141 00014b40           yfqright
    5142 00014b40     09e6          movi    vln_right_rope,a6
         00014b50 000023e0- 
    5143 00014b70     0d3f          callr   calc_line_x
         00014b80     01af  
    5144 00014b90     41c0          add     a14,a0
    5145 00014ba0     b5a1          move    *a13(OBJ_COLLX2),a1
         00014bb0     01f0  
    5146 00014bc0     4801          cmp     a0,a1                   ;a0-a1
    5147 00014bd0     c61f          jrle    yfqno_bounce
    5148                    
    5149 00014be0           yfqbounce
    5150                    ;;;     move    a0,*a13(OBJ_XPOSINT)
    5151                    
    5152                    
    5153 00014be0     b5a0          MOVE    *A13(GETUP_TIME),A0
         00014bf0     0460  
    5154 00014c00     cb07          JRNZ    ALREADY_DONE_RISK_MESS
    5155                    
    5156 00014c10     b5a0          move    *a13(RISK),A0
         00014c20     0950  
    5157 00014c30     cb04          JRNZ    ALREADY_DONE_RISK_MESS
    5158                    
    5159                    ;Time to execute high-risk move!
    5160 00014c40     09c0          MOVI    60,A0
         00014c50     003c  
    5161 00014c60     b00d          MOVE    A0,*A13(RISK)
         00014c70     0950  
    5162                    
    5163 00014c80           ALREADY_DONE_RISK_MESS
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  119

    5164                    
    5165 00014c80     b5ae          move    *a13(WRESTLERNUM),a14
         00014c90     0590  
    5166 00014ca0                   X32     a14
    5167 00014cb0     0b2e          addi    yfqbounce_anims,a14
         00014cc0 00014e80' 
    5168 00014ce0     87c0          move    *a14,a0,L                       ;* bounce anim
    5169 00014cf0     0d5f          calla   change_anim1a
         00014d00 00000000! 
    5170 00014d20                   SETMODE BOUNCING
    5171                    
    5172 00014dd0           yfqno_bounce
    5173 00014dd0           yfqoutside
    5174 00014dd0     0960          rets
    5175                    
    5176                    
    5177                            .ref    bam_bounce_anim
    5178                            .ref    dnk_bounce_anim
    5179                            .ref    hrt_bounce_anim
    5180                            .ref    lex_bounce_anim
    5181                            .ref    rzr_bounce_anim
    5182                            .ref    shn_bounce_anim
    5183                            .ref    und_bounce_anim
    5184                            .ref    yok_bounce_anim
    5185                    
    5186 00014de0           yfqbounce_xoffsets
    5187 00014de0     ffec          .word   -20     ;0 Bret Hart
    5188 00014df0     ffec          .word   -20     ;1 Razor Ramon
    5189 00014e00     ffec          .word   -20     ;2 Undertaker
    5190 00014e10     ffec          .word   -20     ;3 Yokozuna
    5191 00014e20     0000          .word   0       ;4 Shawn Michaels
    5192 00014e30     ffe2          .word   -30     ;5 Bam Bam
    5193 00014e40     ffec          .word   -20     ;6 Doink
    5194 00014e50     ffec          .word   -20     ;7 spare
    5195 00014e60     ffec          .word   -20     ;8 Lex Luger
    5196 00014e70     0000          .word   0       ;9 Referee
    5197                    
    5198 00014e80           yfqbounce_anims
    5199 00014e80 00000000!         .long   hrt_bounce_anim ;0 Bret Hart
    5200 00014ea0 00000000!         .long   rzr_bounce_anim ;1 Razor Ramon
    5201 00014ec0 00000000!         .long   und_bounce_anim ;2 Undertaker
    5202 00014ee0 00000000!         .long   yok_bounce_anim ;3 Yokozuna
    5203 00014f00 00000000!         .long   shn_bounce_anim ;4 Shawn Michaels
    5204 00014f20 00000000!         .long   bam_bounce_anim ;5 Bam Bam
    5205 00014f40 00000000!         .long   dnk_bounce_anim ;6 Doink
    5206 00014f60 00000000!         .long   dnk_bounce_anim ;7 spare
    5207 00014f80 00000000!         .long   lex_bounce_anim ;8 Lex Luger
    5208 00014fa0 00000000!         .long   dnk_bounce_anim ;9 Referee
    5209                    
    5210                    *****************************************************************************
    5211                    
    5212 00014fc0            SUBR   execute_walk
    5213                    
    5214                            ;Do a step sound every 32 ticks if we're walking. (whether or not
    5215                            ; INTURN bit is set)
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  120

    5216 00014fc0     b5a0          move    *a13(MOVE_DIR),a0
         00014fd0     04b0  
    5217 00014fe0     ca0a          JRZ     NO_SOUND_CALL
    5218 00014ff0     05a0          MOVE    @PCNT,A0
         00015000 00000170- 
    5219 00015020     0b80          ANDI    31,A0
         00015030 ffffffe0  
    5220 00015050     cb03          JRNZ    NO_SOUND_CALL
    5221 00015060     0d5f          CALLA   WALK_SOUND
         00015070 00000000! 
    5222 00015090           NO_SOUND_CALL
    5223                    
    5224                            ;if our INTURN bit is set, we're doing a turn and we shouldn't do
    5225                            ; anything here -- treat it like UNINT.
    5226                    
    5227 00015090     b5ae          move    *a13(ANIMODE),a14
         000150a0     0660  
    5228 000150b0     1fce          btst    MODE_INTURN_BIT,a14
    5229 000150c0     cb10          jrnz    djiinturn
    5230                    
    5231 000150d0     b5ae          move    *a13(ANIMODE2),a14
         000150e0     06e0  
    5232 000150f0     1fce          btst    MODE_INTURN_BIT,a14
    5233 00015100     cb0c          jrnz    djiinturn
    5234                    
    5235 00015110     5600          clr     a0
    5236 00015120     b00d          move    a0,*a13(ATTACK_TYPE)
         00015130     05e0  
    5237                    
    5238 00015140     b5a0          move    *a13(MOVE_DIR),a0
         00015150     04b0  
    5239                    
    5240 00015160                   X32     a0
    5241 00015170     0b20          addi    djiwalk_table,a0
         00015180 00015250' 
    5242 000151a0     8600          move    *a0,a0,L
    5243 000151b0     0920          call    a0
    5244                    
    5245 000151c0     0960  djirets rets
    5246                    
    5247 000151d0     b5a0  djiinturn       move    *a13(MOVE_DIR),a0
         000151e0     04b0  
    5248 000151f0     cbfc          jrnz    djirets
    5249                    
    5250                            ;stick at rest - clear any velocity we might have lying around
    5251 00015200     b20d          move    a0,*a13(OBJ_XVEL),L
         00015210     02d0  
    5252 00015220     b20d          move    a0,*a13(OBJ_ZVEL),L
         00015230     0310  
    5253                    
    5254 00015240     0960          rets
    5255                    
    5256 00015250           djiwalk_table
    5257 00015250 00015450'         .long   djizip          ;0
    5258 00015270 00015520'         .long   djiup           ;1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  121

    5259 00015290 000158b0'         .long   djidown         ;2
    5260 000152b0 00015450'         .long   djizip          ;3
    5261 000152d0 00015a60'         .long   djileft         ;4
    5262 000152f0 00015b50'         .long   djiup_left      ;5
    5263 00015310 00015930'         .long   djidown_left    ;6
    5264 00015330 00015450'         .long   djizip          ;7
    5265 00015350 00015690'         .long   djiright                ;8
    5266 00015370 000155a0'         .long   djiup_right     ;9
    5267 00015390 00015780'         .long   djidown_right   ;10
    5268 000153b0 00015450'         .long   djizip          ;11
    5269 000153d0 00015450'         .long   djizip          ;12
    5270 000153f0 00015450'         .long   djizip          ;13
    5271 00015410 00015450'         .long   djizip          ;14
    5272 00015430 00015450'         .long   djizip          ;15
    5273                    
    5274                    
    5275                    ;All these routines set MOVE_DIR.  However, the above code chooses the
    5276                    ; routine to execute based on MOVE_DIR, so they just end up stuffing the
    5277                    ; same value that's already there.  Wuzzup wit' that? - JS
    5278                    
    5279                    ************
    5280 00015450           djizip          ;(dji0)
    5281 00015450           djido_stance
    5282                    
    5283 00015450     5600          clr     a0
    5284 00015460     b00d          move    a0,*a13(MOVE_DIR)
         00015470     04b0  
    5285 00015480     b20d          move    a0,*a13(OBJ_XVEL),L
         00015490     02d0  
    5286 000154a0     b20d          move    a0,*a13(OBJ_ZVEL),L
         000154b0     0310  
    5287                    
    5288 000154c0     0d3f          callr   set_rotate_anim         ;or stance
         000154d0     ff1b  
    5289 000154e0     0d5f          calla   change_anim1
         000154f0 00000000! 
    5290 00015510     0960          rets
    5291                    
    5292                    ************
    5293 00015520           djiup           ;(dji1)
    5294                    
    5295 00015520     1820          movk    MOVE_UP,a0
    5296 00015530     b00d          move    a0,*a13(MOVE_DIR)
         00015540     04b0  
    5297                    
    5298 00015550     0d3f          callr   set_velocities
         00015560     006d  
    5299 00015570     0d3f          callr   change_walk_anim
         00015580     fe96  
    5300                    
    5301 00015590     0960          rets
    5302                    
    5303                    
    5304                    ************
    5305 000155a0           djiup_right     ;(dji2)
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  122

    5306                    
    5307 000155a0     b5a0          move    *a13(OBJ_CONTROL),a0
         000155b0     0780  
    5308 000155c0     0b80          andni   M_FLIPH,a0
         000155d0 00000010  
    5309 000155f0     b00d          move    a0,*a13(OBJ_CONTROL)
         00015600     0780  
    5310                    
    5311                    ;       move    *a13(CAN_MOVE_DIR),a0
    5312                    ;       btst    MOVE_RIGHT_BIT,a0
    5313                    ;       jrnz    djiup
    5314                    ;       btst    MOVE_UP_BIT,a0
    5315                    ;       jrnz    djiright
    5316                    
    5317 00015610     1920          movk    MOVE_UP_RIGHT,a0
    5318 00015620     b00d          move    a0,*a13(MOVE_DIR)
         00015630     04b0  
    5319                    
    5320 00015640     0d3f          callr   set_velocities
         00015650     005e  
    5321 00015660     0d3f          callr   change_walk_anim
         00015670     fe87  
    5322 00015680     0960          rets
    5323                    
    5324                    
    5325                    ************
    5326 00015690           djiright                ;(dji3)
    5327                    
    5328 00015690     b5a0          move    *a13(OBJ_CONTROL),a0
         000156a0     0780  
    5329 000156b0     0b80          andni   M_FLIPH,a0
         000156c0 00000010  
    5330 000156e0     b00d          move    a0,*a13(OBJ_CONTROL)
         000156f0     0780  
    5331                    
    5332 00015700     1900          movk    MOVE_RIGHT,a0
    5333 00015710     b00d          move    a0,*a13(MOVE_DIR)
         00015720     04b0  
    5334                    
    5335 00015730     0d3f          callr   set_velocities
         00015740     004f  
    5336 00015750     0d3f          callr   change_walk_anim
         00015760     fe78  
    5337 00015770     0960          rets
    5338                    
    5339                    
    5340                    ************
    5341 00015780           djidown_right   ;(dji4)
    5342                    
    5343 00015780     b5a0          move    *a13(OBJ_CONTROL),a0
         00015790     0780  
    5344 000157a0     0b80          andni   M_FLIPH,a0
         000157b0 00000010  
    5345 000157d0     b00d          move    a0,*a13(OBJ_CONTROL)
         000157e0     0780  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  123

    5346                    
    5347 000157f0     b5a0          move    *a13(CAN_MOVE_DIR),a0
         00015800     0470  
    5348 00015810     1fc0          btst    MOVE_DOWN_BIT,a0
    5349 00015820     cbe6          jrnz    djiright
    5350                    
    5351 00015830     1940          movk    MOVE_DOWN_RIGHT,a0
    5352 00015840     b00d          move    a0,*a13(MOVE_DIR)
         00015850     04b0  
    5353                    
    5354 00015860     0d3f          callr   set_velocities
         00015870     003c  
    5355 00015880     0d3f          callr   change_walk_anim
         00015890     fe65  
    5356 000158a0     0960          rets
    5357                    
    5358                    
    5359                    ************
    5360 000158b0           djidown         ;(dji5)
    5361                    
    5362 000158b0     1840          movk    MOVE_DOWN,a0
    5363 000158c0     b00d          move    a0,*a13(MOVE_DIR)
         000158d0     04b0  
    5364                    
    5365 000158e0     0d3f          callr   set_velocities
         000158f0     0034  
    5366 00015900     0d3f          callr   change_walk_anim
         00015910     fe5d  
    5367 00015920     0960          rets
    5368                    
    5369                    
    5370                    ************
    5371 00015930           djidown_left    ;(dji6)
    5372                    
    5373 00015930     b5a0          move    *a13(OBJ_CONTROL),a0
         00015940     0780  
    5374 00015950     0ba0          ori     M_FLIPH,a0
         00015960 00000010  
    5375 00015980     b00d          move    a0,*a13(OBJ_CONTROL)
         00015990     0780  
    5376                    
    5377 000159a0     b5a0          move    *a13(CAN_MOVE_DIR),a0
         000159b0     0470  
    5378 000159c0     1fc0          btst    MOVE_DOWN_BIT,a0
    5379 000159d0     cb08          jrnz    djileft
    5380                    
    5381 000159e0     18c0          movk    MOVE_DOWN_LEFT,a0
    5382 000159f0     b00d          move    a0,*a13(MOVE_DIR)
         00015a00     04b0  
    5383                    
    5384 00015a10     0d3f          callr   set_velocities
         00015a20     0021  
    5385 00015a30     0d3f          callr   change_walk_anim
         00015a40     fe4a  
    5386 00015a50     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  124

    5387                    
    5388                    
    5389                    ************
    5390 00015a60           djileft         ;(dji7)
    5391                    
    5392 00015a60     b5a0          move    *a13(OBJ_CONTROL),a0
         00015a70     0780  
    5393 00015a80     0ba0          ori     M_FLIPH,a0
         00015a90 00000010  
    5394 00015ab0     b00d          move    a0,*a13(OBJ_CONTROL)
         00015ac0     0780  
    5395                    
    5396 00015ad0     1880          movk    MOVE_LEFT,a0
    5397 00015ae0     b00d          move    a0,*a13(MOVE_DIR)
         00015af0     04b0  
    5398                    
    5399 00015b00     0d3f          callr   set_velocities
         00015b10     0012  
    5400 00015b20     0d3f          callr   change_walk_anim
         00015b30     fe3b  
    5401 00015b40     0960          rets
    5402                    
    5403                    
    5404                    ************
    5405 00015b50           djiup_left      ;(dji8)
    5406                    
    5407 00015b50     b5a0          move    *a13(OBJ_CONTROL),a0
         00015b60     0780  
    5408 00015b70     0ba0          ori     M_FLIPH,a0
         00015b80 00000010  
    5409 00015ba0     b00d          move    a0,*a13(OBJ_CONTROL)
         00015bb0     0780  
    5410                    
    5411                    ;       move    *a13(CAN_MOVE_DIR),a0
    5412                    ;       btst    MOVE_LEFT_BIT,a0
    5413                    ;       jrnz    djiup
    5414                    ;       btst    MOVE_UP_BIT,a0
    5415                    ;       jrnz    djileft
    5416                    
    5417 00015bc0     18a0          movk    MOVE_UP_LEFT,a0
    5418 00015bd0     b00d          move    a0,*a13(MOVE_DIR)
         00015be0     04b0  
    5419                    
    5420 00015bf0     0d3f          callr   set_velocities
         00015c00     0003  
    5421 00015c10     0d3f          callr   change_walk_anim
         00015c20     fe2c  
    5422 00015c30     0960          rets
    5423                    
    5424                    *****************************************************************************
    5425                    *
    5426                    * sets X & Z velocites based on MOVE_DIR
    5427                    *
    5428                    
    5429                    ;MULT   equ     256*75/100              ;25% reduction when moving backward
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  125

    5430                    
    5431                    
    5432                    ;MULT   equ     256*100/100             ;0% reduction when moving backward
    5433              00e6  MULT    equ     256*90/100              ;10% reduction when moving backward
    5434              0180  GRND_MULT       equ     256*150/100     ;50% addition when opponent is on ground
    5435                    
    5436                    
    5437 00015c40            SUBRP  set_velocities
    5438                    
    5439                    
    5440 00015c40     b5a0          move    *a13(MOVE_DIR),a0
         00015c50     04b0  
    5441 00015c60     0d3f          callr   convert_facing
         00015c70     fc86  
    5442 00015c80                   X64     a0
    5443                    
    5444 00015c90     b5a2          move    *a13(WRESTLERNUM),a2
         00015ca0     0590  
    5445 00015cb0                   X32     a2
    5446 00015cc0     0b22          addi    qiwwres_velocity_tables,a2
         00015cd0 00016060' 
    5447                    
    5448 00015cf0     8642          move    *a2,a2,L                ;* velocity table
    5449 00015d00     4002          add     a0,a2
    5450 00015d10     9641          move    *a2+,a1,L
    5451                    
    5452 00015d20     b5a0          move    *a13(WALK_FAST),a0
         00015d30     0b40  
    5453 00015d40     cb1b          jrnz    qiwongrnd
    5454                    
    5455 00015d50     0d3f          callr   get_opp_process
         00015d60     fc65  
    5456 00015d70     b400          move    *a0(PLYRMODE),a0        ;don't slow down if backing
         00015d80     05c0  
    5457 00015d90     0b40          cmpi    MODE_ONGROUND,a0        ;away from a downed opponent
         00015da0     fffb  
    5458 00015db0     ca14          jreq    qiwongrnd
    5459                    
    5460 00015dc0     0b40          cmpi    MODE_DEAD,a0            ;away from a dead opponent
         00015dd0     fff6  
    5461 00015de0     ca11          jreq    qiwongrnd
    5462                    
    5463 00015df0     b5a3          move    *a13(MOVE_DIR),a3
         00015e00     04b0  
    5464 00015e10     b5a4          move    *a13(FACING_DIR),a4
         00015e20     04c0  
    5465                    
    5466 00015e30     4c6e          move    a3,a14
    5467 00015e40     548e          or      a4,a14
    5468 00015e50     0b8e          andi    MOVE_LEFT|MOVE_RIGHT,a14
         00015e60 fffffff3  
    5469 00015e80     0b4e          cmpi    MOVE_LEFT|MOVE_RIGHT,a14        ;move opposite to facing?
         00015e90     fff3  
    5470 00015ea0     cb09          jrne    qiwnot_back_x
    5471                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  126

    5472 00015eb0     09c0          movi    MULT,a0
         00015ec0     00e6  
    5473 00015ed0     5c01          mpys    a0,a1
    5474 00015ee0     2b01          sra     8,a1
    5475 00015ef0     c004          jruc    qiwnot_back_x
    5476 00015f00           qiwongrnd
    5477 00015f00     09c0          movi    GRND_MULT,a0
         00015f10     0180  
    5478 00015f20     5c01          mpys    a0,a1
    5479 00015f30     2b01          sra     8,a1
    5480                    
    5481 00015f40           qiwnot_back_x
    5482 00015f40     b22d          move    a1,*a13(OBJ_XVEL),L
         00015f50     02d0  
    5483                    
    5484                    
    5485 00015f60     8641          move    *a2,a1,L
    5486 00015f70     4c6e          move    a3,a14                  ;move_dir
    5487 00015f80     548e          or      a4,a14                  ;facing dir
    5488 00015f90     0b8e          andi    MOVE_UP|MOVE_DOWN,a14
         00015fa0 fffffffc  
    5489 00015fc0     0b4e          cmpi    MOVE_UP|MOVE_DOWN,a14   ;move opposite to facing?
         00015fd0     fffc  
    5490 00015fe0     cb04          jrne    qiwnot_back_y
    5491                    
    5492 00015ff0     09c0          movi    MULT,a0
         00016000     00e6  
    5493 00016010     5c01          mpys    a0,a1
    5494 00016020     2b01          sra     8,a1
    5495                    
    5496 00016030           qiwnot_back_y
    5497 00016030     b22d          move    a1,*a13(OBJ_ZVEL),L
         00016040     0310  
    5498                    
    5499 00016050     0960          rets
    5500                    
    5501                    
    5502                            .ref    bam_velocity_table
    5503                            .ref    dnk_velocity_table
    5504                            .ref    hrt_velocity_table
    5505                            .ref    lex_velocity_table
    5506                            .ref    rzr_velocity_table
    5507                            .ref    shn_velocity_table
    5508                            .ref    und_velocity_table
    5509                            .ref    yok_velocity_table
    5510                    
    5511 00016060           qiwwres_velocity_tables
    5512 00016060 00000000!         .long   hrt_velocity_table      ;0 Bret Hart
    5513 00016080 00000000!         .long   rzr_velocity_table      ;1 Razor Ramon
    5514 000160a0 00000000!         .long   und_velocity_table      ;2 Undertaker
    5515 000160c0 00000000!         .long   yok_velocity_table      ;3 Yokozuna
    5516 000160e0 00000000!         .long   shn_velocity_table      ;4 Shawn Michaels
    5517 00016100 00000000!         .long   bam_velocity_table      ;5 Bam Bam
    5518 00016120 00000000!         .long   dnk_velocity_table      ;6 Doink
    5519 00016140 00000000!         .long   dnk_velocity_table      ;7 spare
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  127

    5520 00016160 00000000!         .long   lex_velocity_table      ;8 Lex Luger
    5521 00016180 00000000          .long   0                       ;9 referee
    5522                    
    5523                    
    5524                    ;*****************************************************************************
    5525                    ;*
    5526                    ;* RETURNS:     a0 = boundary
    5527                    ;*
    5528                    ; SUBRP check_move_up
    5529                    ;
    5530                    ;       move    *a13(INRING),a0
    5531                    ;       jrnz    qiwoutring
    5532                    ;
    5533                    ;       movi    RING_TOP,a0
    5534                    ;       move    *a13(OBJ_ZPOSINT),a1
    5535                    ;       cmp     a0,a1
    5536                    ;       jrle    qiwfail
    5537                    ;       clrc
    5538                    ;       rets
    5539                    ;
    5540                    ;qiwoutring
    5541                    ;       movi    ARENA_TOP,a0
    5542                    ;       move    *a13(OBJ_ZPOSINT),a1
    5543                    ;       cmp     a0,a1
    5544                    ;       jrle    qiwfail
    5545                    ;
    5546                    ;       movi    box_matedge2,a10
    5547                    ;       callr   get_box_overlap
    5548                    ;       move    a1,a1                   ;z overlap
    5549                    ;       jrp     qiwfail2
    5550                    ;
    5551                    ;       clrc
    5552                    ;       rets
    5553                    ;
    5554                    ;qiwfail2
    5555                    ;       move    *a13(OBJ_ZPOSINT),a0
    5556                    ;       dec     a1
    5557                    ;       add     a1,a0
    5558                    ;
    5559                    ;qiwfail
    5560                    ;       setc
    5561                    ;       rets
    5562                    ;
    5563                    ;*****************************************************************************
    5564                    ;*
    5565                    ;* RETURNS:     a0 = boundary
    5566                    ;*
    5567                    ; SUBRP check_move_down
    5568                    ;
    5569                    ;       move    *a13(INRING),a0
    5570                    ;       jrnz    qiwoutring
    5571                    ;
    5572                    ;       movi    RING_BOT,a0
    5573                    ;       move    *a13(OBJ_ZPOSINT),a1
    5574                    ;       cmp     a0,a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  128

    5575                    ;       jrge    qiwfail
    5576                    ;       clrc
    5577                    ;       rets
    5578                    ;
    5579                    ;qiwoutring
    5580                    ;       movi    ARENA_BOT,a0
    5581                    ;       move    *a13(OBJ_ZPOSINT),a1
    5582                    ;       cmp     a0,a1
    5583                    ;       jrge    qiwfail
    5584                    ;
    5585                    ;       movi    box_matedge2,a10
    5586                    ;       callr   get_box_overlap
    5587                    ;       move    a1,a1                   ;z overlap
    5588                    ;       jrn     qiwfail2
    5589                    ;
    5590                    ;       clrc
    5591                    ;       rets
    5592                    ;
    5593                    ;qiwfail2
    5594                    ;       move    *a13(OBJ_ZPOSINT),a0
    5595                    ;       inc     a1
    5596                    ;       add     a1,a0
    5597                    ;qiwfail
    5598                    ;       setc
    5599                    ;       rets
    5600                    ;
    5601                    ;*****************************************************************************
    5602                    ;*
    5603                    ;* RETURNS:     a0 = boundary
    5604                    ;*
    5605                    ; SUBRP check_move_left
    5606                    ;
    5607                    ;       move    *a13(INRING),a0
    5608                    ;       jrnz    qiwoutring
    5609                    ;
    5610                    ;       move    *a13(OBJ_XPOSINT),a5
    5611                    ;       movi    vln_left_rope,a6
    5612                    ;       move    *a6,a0                  ;x1
    5613                    ;       cmp     a0,a5                   ;xpos - x1
    5614                    ;       jrge    qiwok
    5615                    ;       callr   calc_line_x
    5616                    ;       cmp     a0,a5                   ;xpos - a0
    5617                    ;       jrle    qiwfail
    5618                    ;qiwok
    5619                    ;       clrc
    5620                    ;       rets
    5621                    ;
    5622                    ;qiwoutring
    5623                    ;       move    *a13(OBJ_XPOSINT),a5
    5624                    ;       movi    vln_left_fence,a6
    5625                    ;       move    *a6,a0                  ;x1
    5626                    ;       cmp     a0,a5                   ;xpos - x1
    5627                    ;       jrge    qiwok2
    5628                    ;       callr   calc_line_x
    5629                    ;       jrz     qiwoutrange
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  129

    5630                    ;       cmp     a0,a5                   ;xpos - a0
    5631                    ;       jrle    qiwfail
    5632                    ;qiwoutrange
    5633                    ;qiwok2
    5634                    ;       movi    box_matedge2,a10
    5635                    ;       callr   get_box_overlap
    5636                    ;       move    a0,a0                   ;x overlap
    5637                    ;       jrp     qiwfail2
    5638                    ;
    5639                    ;       clrc
    5640                    ;       rets
    5641                    ;
    5642                    ;qiwfail2
    5643                    ;       move    *a13(OBJ_XPOSINT),a1
    5644                    ;       dec     a0
    5645                    ;       add     a1,a0
    5646                    ;qiwfail
    5647                    ;       setc
    5648                    ;       rets
    5649                    ;
    5650                    ;*****************************************************************************
    5651                    ;*
    5652                    ;* RETURNS:     a0 = boundary
    5653                    ;*
    5654                    ; SUBRP check_move_right
    5655                    ;
    5656                    ;       move    *a13(INRING),a0
    5657                    ;       jrnz    qiwoutring
    5658                    ;
    5659                    ;       move    *a13(OBJ_XPOSINT),a5
    5660                    ;       movi    vln_right_rope,a6
    5661                    ;       move    *a6,a0                  ;x1
    5662                    ;       cmp     a0,a5                   ;xpos - x1
    5663                    ;       jrle    qiwok
    5664                    ;       callr   calc_line_x
    5665                    ;       cmp     a0,a5                   ;xpos - a0
    5666                    ;       jrge    qiwfail
    5667                    ;qiwok
    5668                    ;       clrc
    5669                    ;       rets
    5670                    ;
    5671                    ;qiwoutring
    5672                    ;       move    *a13(OBJ_XPOSINT),a5
    5673                    ;       movi    vln_right_fence,a6
    5674                    ;       move    *a6,a0                  ;x1
    5675                    ;       cmp     a0,a5                   ;xpos - x1
    5676                    ;       jrle    qiwok2
    5677                    ;       callr   calc_line_x
    5678                    ;       jrz     qiwoutrange
    5679                    ;       cmp     a0,a5                   ;xpos - a0
    5680                    ;       jrge    qiwfail
    5681                    ;qiwok2
    5682                    ;qiwoutrange
    5683                    ;       movi    box_matedge2,a10
    5684                    ;       callr   get_box_overlap
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  130

    5685                    ;       move    a0,a0                   ;x overlap
    5686                    ;       jrn     qiwfail2
    5687                    ;
    5688                    ;       clrc
    5689                    ;       rets
    5690                    ;
    5691                    ;qiwfail2
    5692                    ;       move    *a13(OBJ_XPOSINT),a1
    5693                    ;       inc     a0
    5694                    ;       add     a1,a0
    5695                    ;qiwfail
    5696                    ;       setc
    5697                    ;       rets
    5698                    
    5699                    *****************************************************************************
    5700                    *
    5701                    * ARGS:         a10 = * box
    5702                    *
    5703                    * RETURNS:      a0 = signed x offset    (left overlap < 0 < right overlap)
    5704                    *               a1 = signed z offset    (top overlap < 0 < bot overlap)
    5705                    
    5706 000161a0            SUBR   get_box_overlap
    5707                    
    5708                    
    5709 000161a0     b746          move    *a10(20h),a6,L
         000161b0     0020  
    5710 000161c0     0d3f          callr   calc_line_x
         000161d0     004a  
    5711 000161e0     4c00          move    a0,a0
    5712 000161f0     ca35          jrz     jtloutrange
    5713 00016200                   PUSH    a0
    5714                    
    5715 00016210     8746          move    *a10,a6,L
    5716 00016220     0d3f          callr   calc_line_x
         00016230     0044  
    5717 00016240     4c00          move    a0,a0                   ;left
    5718 00016250     ca2f          jrz     jtloutrange
    5719 00016260                   PULL    a1                      ;right
    5720                    
    5721 00016270     b5a4          move    *a13(OBJ_XPOSINT),a4
         00016280     0110  
    5722 00016290     4480          sub     a4,a0                   ;left-xpos
    5723 000162a0     c72a          jrgt    jtloutside
    5724 000162b0     03a0          neg     a0
    5725                    
    5726 000162c0     4481          sub     a4,a1                   ;right-xpos
    5727 000162d0     c427          jrlt    jtloutside
    5728                    
    5729 000162e0     b5a2          move    *a13(OBJ_ZPOSINT),a2
         000162f0     0150  
    5730 00016300     4c43          move    a2,a3
    5731 00016310     b4c4          move    *a6(10h),a4             ;z top
         00016320     0010  
    5732 00016330     4482          sub     a4,a2                   ;zpos-top
    5733 00016340     c420          jrlt    jtloutside
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  131

    5734                    
    5735 00016350     b4c4          move    *a6(30h),a4             ;z bot
         00016360     0030  
    5736 00016370     4483          sub     a4,a3                   ;zpos-bot
    5737 00016380     c71c          jrgt    jtloutside
    5738 00016390     03a3          neg     a3
    5739                    
    5740                    
    5741                    
    5742 000163a0     4801          cmp     a0,a1                   ;right - left
    5743 000163b0     c407          jrlt    jtlright_min
    5744                    
    5745                    ;left_min
    5746 000163c0     4840          cmp     a2,a0                   ;left - top
    5747 000163d0     c70c          jrgt    jtltop_min
    5748 000163e0     4860          cmp     a3,a0                   ;left - bot
    5749 000163f0     c710          jrgt    jtlbot_min
    5750                    
    5751 00016400     03a0          neg     a0                      ;xoff
    5752 00016410     5621          clr     a1                      ;zoff
    5753 00016420     0960          rets
    5754                    
    5755 00016430           jtlright_min
    5756 00016430     4841          cmp     a2,a1                   ;right - top
    5757 00016440     c705          jrgt    jtltop_min
    5758 00016450     4861          cmp     a3,a1                   ;right - bot
    5759 00016460     c709          jrgt    jtlbot_min
    5760                    
    5761 00016470     4c20          move    a1,a0                   ;xoff
    5762 00016480     5621          clr     a1                      ;zoff
    5763 00016490     0960          rets
    5764                    
    5765 000164a0           jtltop_min
    5766 000164a0     4862          cmp     a3,a2                   ;top - bot
    5767 000164b0     c704          jrgt    jtlbot_min
    5768                    
    5769 000164c0     03a2          neg     a2
    5770 000164d0     4c41          move    a2,a1                   ;zoff
    5771 000164e0     5600          clr     a0                      ;xoff
    5772 000164f0     0960          rets
    5773                    
    5774 00016500           jtlbot_min
    5775 00016500     4843          cmp     a2,a3                   ;bot - top
    5776 00016510     c7f8          jrgt    jtltop_min
    5777                    
    5778 00016520     4c61          move    a3,a1                   ;zoff
    5779 00016530     5600          clr     a0                      ;xoff
    5780 00016540     0960          rets
    5781                    
    5782 00016550           jtloutside
    5783 00016550           jtloutrange
    5784 00016550     5600          clr     a0
    5785 00016560     5621          clr     a1
    5786                    
    5787 00016570     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  132

    5788                    
    5789                    *****************************************************************************
    5790                    
    5791 00016580            SUBR   get_rope_x
    5792                    
    5793 00016580                   PUSH    a6
    5794                    
    5795 00016590     09e6          movi    vln_right_rope,a6
         000165a0 000023e0- 
    5796 000165c0     b5a0          move    *a13(OBJ_XPOSINT),a0
         000165d0     0110  
    5797 000165e0     0b40          cmpi    RING_X_CENTER,a0
         000165f0     fbcd  
    5798 00016600     c703          jrgt    ioeright
    5799 00016610     09e6          movi    vln_left_rope,a6
         00016620 000038e0- 
    5800 00016640           ioeright
    5801 00016640     0d3f          callr   calc_line_x
         00016650     0002  
    5802 00016660                   PULL    a6
    5803 00016670     0960          rets
    5804                    
    5805                    
    5806                    *****************************************************************************
    5807                    *
    5808                    * ARGUMENTS:    a6 = * line table
    5809                    *
    5810                    * RETURNS:      a0 = x-val of line at player ZPOS
    5811                    *               a0 = 0 if out of range in Z
    5812                    *
    5813                    * TRASHES:      a0,a1
    5814                    
    5815                    
    5816 00016680            SUBR   calc_line_x
    5817                    
    5818 00016680     b5a1          move    *a13(OBJ_ZPOSINT),a1
         00016690     0150  
    5819                    
    5820 000166a0     b4c0          move    *a6(30h),a0     ;z2
         000166b0     0030  
    5821 000166c0     4801          cmp     a0,a1           ;zpos - z2
    5822 000166d0     c709          jrgt    laeoutrange     ;below
    5823                    
    5824 000166e0     b4c0          move    *a6(10h),a0     ;z1
         000166f0     0010  
    5825 00016700     4401          sub     a0,a1           ;zpos - z1
    5826 00016710     c405          jrlt    laeoutrange     ;above
    5827                    
    5828 00016720                   X16     a1
    5829 00016730     40c1          add     a6,a1
    5830 00016740     b420          move    *a1(40h),a0     ;skip 4 word header
         00016750     0040  
    5831 00016760     0960          rets
    5832 00016770           laeoutrange
    5833 00016770     5600          clr     a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  133

    5834 00016780     0960          rets
    5835                    
    5836 00016790            SUBR    set_up_line_tables
    5837 00016790     09e1          movi    vln_right_rope_r,a1
         000167a0 00000000' 
    5838 000167c0     09e0          movi    vln_right_rope,a0
         000167d0 000023e0- 
    5839 000167f0     0d3f          callr   setup_each_right_table
         00016800     004b  
    5840 00016810     09e1          movi    vln_left_rope_r,a1
         00016820 00000060' 
    5841 00016840     09e0          movi    vln_left_rope,a0
         00016850 000038e0- 
    5842 00016870     0d3f          callr   setup_each_left_table
         00016880     002e  
    5843 00016890     09e1          movi    vln_right_matedge_r,a1
         000168a0 000000c0' 
    5844 000168c0     09e0          movi    vln_right_matedge,a0
         000168d0 00004de0- 
    5845 000168f0     0d3f          callr   setup_each_right_table
         00016900     003b  
    5846 00016910     09e1          movi    vln_left_matedge_r,a1
         00016920 00000120' 
    5847 00016940     09e0          movi    vln_left_matedge,a0
         00016950 00007160- 
    5848 00016970     0d3f          callr   setup_each_left_table
         00016980     001e  
    5849 00016990     09e1          movi    vln_right_matedge2_r,a1
         000169a0 00000180' 
    5850 000169c0     09e0          movi    vln_right_matedge2,a0
         000169d0 000094e0- 
    5851 000169f0     0d3f          callr   setup_each_right_table
         00016a00     002b  
    5852 00016a10     09e1          movi    vln_left_matedge2_r,a1
         00016a20 000001e0' 
    5853 00016a40     09e0          movi    vln_left_matedge2,a0
         00016a50 0000b900- 
    5854 00016a70     0d3f          callr   setup_each_left_table
         00016a80     000e  
    5855 00016a90     09e1          movi    vln_right_fence_r,a1
         00016aa0 00000240' 
    5856 00016ac0     09e0          movi    vln_right_fence,a0
         00016ad0 0000dd20- 
    5857 00016af0     0d3f          callr   setup_each_right_table
         00016b00     001b  
    5858 00016b10     09e1          movi    vln_left_fence_r,a1
         00016b20 000002a0' 
    5859 00016b40     09e0          movi    vln_left_fence,a0
         00016b50 00012f80- 
    5860                    
    5861 00016b70           setup_each_left_table
    5862 00016b70     d220          move    *a1(0),*a0+,L
         00016b80     0000  
    5863 00016b90     d220          move    *a1(020h),*a0+,L
         00016ba0     0020  
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  134

    5864 00016bb0     b422          move    *a1(040h),a2
         00016bc0     0040  
    5865 00016bd0     1022          inc     a2
    5866 00016be0     b423          move    *a1(050h),a3
         00016bf0     0050  
    5867 00016c00     b424          move    *a1(0h),a4
         00016c10     0000  
    5868 00016c20     2604          sll     16,a4
    5869 00016c30     4c47          move    a2,a7
    5870 00016c40     2603          sll     16,a3
    5871 00016c50     58e3          divs    a7,a3
    5872 00016c60           laewrite_next_val_l
    5873 00016c60     4464          sub     a3,a4
    5874 00016c70     4c86          move    a4,a6
    5875 00016c80     2e06          srl     16,a6
    5876 00016c90     90c0          move    a6,*a0+
    5877 00016ca0     3ca2          dsjs    a2,laewrite_next_val_l
    5878                    
    5879 00016cb0     0960          rets
    5880                    
    5881 00016cc0           setup_each_right_table
    5882 00016cc0     d220          move    *a1(0),*a0+,L
         00016cd0     0000  
    5883 00016ce0     d220          move    *a1(020h),*a0+,L
         00016cf0     0020  
    5884 00016d00     b422          move    *a1(040h),a2
         00016d10     0040  
    5885 00016d20     1022          inc     a2
    5886 00016d30     b423          move    *a1(050h),a3
         00016d40     0050  
    5887 00016d50     b424          move    *a1(0h),a4
         00016d60     0000  
    5888 00016d70     2603          sll     16,a3
    5889 00016d80     2604          sll     16,a4
    5890 00016d90     4c47          move    a2,a7
    5891 00016da0     58e3          divs    a7,a3
    5892 00016db0           laewrite_next_val
    5893 00016db0     4064          add     a3,a4
    5894 00016dc0     4c86          move    a4,a6
    5895 00016dd0     2e06          srl     16,a6
    5896 00016de0     90c0          move    a6,*a0+
    5897 00016df0     3ca2          dsjs    a2,laewrite_next_val
    5898                    
    5899 00016e00     0960          rets
    5900                    
    5901                    *****************************************************************************
    5902                    *
    5903                    * ARGUMENTS:    a6 = * line table
    5904                    *               a1 = ZPOSINT
    5905                    *
    5906                    * RETURNS:      a0 = x-val of line at input ZPOS
    5907                    *               a0 = 0 if out of range in Z
    5908                    *
    5909                    * TRASHES:      a0,a1
    5910                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  135

    5911                    
    5912 00016e10            SUBR   calc_line_pt
    5913                    
    5914 00016e10     b4c0          move    *a6(30h),a0     ;z2
         00016e20     0030  
    5915 00016e30     4801          cmp     a0,a1           ;zpos - z2
    5916 00016e40     c709          jrgt    jceoutrange     ;below
    5917                    
    5918 00016e50     b4c0          move    *a6(10h),a0     ;z1
         00016e60     0010  
    5919 00016e70     4401          sub     a0,a1           ;zpos - z1
    5920 00016e80     c405          jrlt    jceoutrange     ;above
    5921                    
    5922 00016e90                   X16     a1
    5923 00016ea0     40c1          add     a6,a1
    5924 00016eb0     b420          move    *a1(40h),a0     ;skip 4 word header
         00016ec0     0040  
    5925 00016ed0     0960          rets
    5926 00016ee0           jceoutrange
    5927 00016ee0     5600          clr     a0
    5928 00016ef0     0960          rets
    5929                    
    5930                    *****************************************************************************
    5931                    
    5932 00016f00            SUBR   wobble_ropes
    5933                    
    5934                    ;Called from wrestler "GETTING HIT" sequences.
    5935                    ;Check to see if I'm up against the ropes.
    5936                    ;If so, wobble them.
    5937                    
    5938 00016f00     b5a0          move    *a13(INRING),a0
         00016f10     0560  
    5939 00016f20     cb21          jrnz    nakexit
    5940                    
    5941 00016f30     b5a0          move    *a13(OBJ_XPOSINT),a0
         00016f40     0110  
    5942 00016f50     0b40          cmpi    RING_X_CENTER,a0
         00016f60     fbcd  
    5943 00016f70     c40b          jrlt    naklft
    5944                    
    5945 00016f80     09e6          movi    vln_right_rope,a6
         00016f90 000023e0- 
    5946 00016fb0     0d3f          callr   calc_line_x
         00016fc0     ff6b  
    5947 00016fd0     1862          movk    ROPE_RIGHT,a2
    5948 00016fe0     b5a1          move    *a13(OBJ_XPOSINT),a1
         00016ff0     0110  
    5949 00017000     4801          cmp     a0,a1                   ;a1-a0
    5950 00017010     c50c          jrge    nakwobble
    5951 00017020     c011          jruc    nakexit
    5952                    
    5953 00017030           naklft
    5954 00017030     09e6          movi    vln_left_rope,a6
         00017040 000038e0- 
    5955 00017060     0d3f          callr   calc_line_x
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  136

         00017070     ff60  
    5956 00017080     1842          movk    ROPE_LEFT,a2
    5957 00017090     b5a1          move    *a13(OBJ_XPOSINT),a1
         000170a0     0110  
    5958 000170b0     4801          cmp     a0,a1                   ;a1-a0
    5959 000170c0     c601          jrle    nakwobble
    5960 000170d0     c006          jruc    nakexit
    5961                    
    5962 000170e0           nakwobble
    5963                    
    5964                    ;Wrestler has been knocked back into ropes
    5965                    ;Wobble them!
    5966 000170e0     4c40          move    a2,a0
    5967 000170f0     1822          movk    1,a2
    5968 00017100     1821          movk    ROPE_BOUNCEIO,a1
    5969 00017110     0d5f          calla   rope_command
         00017120 00000000! 
    5970                    
    5971 00017140     0960  nakexit rets
    5972                    
    5973                    *****************************************************************************
    5974                    * 
    5975                    * If player is moving away from opponent, or standing still, tell the 
    5976                    * calling SEQUENCE to not leap at the opponent!
    5977                    *
    5978                    * This routine is used by all wrestlers.
    5979                    
    5980 00017150            SUBR   get_leap
    5981                    
    5982 00017150     b5a1          move    *a13(ANIMODE),a1
         00017160     0660  
    5983 00017170     0b81          andni   MODE_STATUS2,a1
         00017180 00000200  
    5984 000171a0     b02d          move    a1,*a13(ANIMODE)
         000171b0     0660  
    5985                    
    5986 000171c0     b7ae          move    *a13(OBJ_XVEL),a14,L
         000171d0     02d0  
    5987 000171e0     b7a0          move    *a13(OBJ_ZVEL),a0,L
         000171f0     0310  
    5988 00017200     55c0          or      a14,a0
    5989 00017210     ca0c          jrz     kavnovel                        ;Wrestler is standing still!
    5990                    
    5991                    
    5992                    ;Is wrestler backing away from opponent?
    5993                    
    5994 00017220     b5a1          move    *a13(MOVE_DIR),a1
         00017230     04b0  
    5995 00017240     b5a0          move    *a13(NEW_FACING_DIR),a0 ;Current facing dir (9,10,6,5 only)
         00017250     04d0  
    5996 00017260     24a0          sll     5,a0
    5997 00017270     0b20          addi    mv_tbl,a0
         00017280 00017450' 
    5998 000172a0     8600          move    *a0,a0,L
    5999 000172b0     4a01          btst    a0,a1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  137

    6000 000172c0     cb01          jrnz    kavnovel
    6001                    
    6002                    ;Will lunge toward opponent
    6003 000172d0     0960          rets
    6004                    
    6005 000172e0           kavnovel
    6006 000172e0     b5a0          move    *a13(ANIMODE),a0
         000172f0     0660  
    6007 00017300     0ba0          ori     MODE_STATUS2,a0
         00017310 00000200  
    6008 00017330     b00d          move    a0,*a13(ANIMODE)
         00017340     0660  
    6009                    
    6010 00017350     0960          rets
    6011                    
    6012                    *****************************************************************************
    6013                    * 
    6014                    * If player is moving away from opponent, or standing still, tell the 
    6015                    * calling routine to ignore button press
    6016                    *
    6017                    
    6018 00017360            SUBR   ck_ignore
    6019                    
    6020                    ;Is wrestler going away from opponent?
    6021                    
    6022 00017360     b5a1          move    *a13(MOVE_DIR),a1
         00017370     04b0  
    6023 00017380     b5a0          move    *a13(NEW_FACING_DIR),a0 ;Current facing dir (9,10,6,5 only)
         00017390     04d0  
    6024 000173a0     24a0          sll     5,a0
    6025 000173b0     0b20          addi    mv_tbl,a0
         000173c0 00017450' 
    6026 000173e0     8600          move    *a0,a0,L
    6027 000173f0     4a01          btst    a0,a1
    6028 00017400     cb02          jrnz    kavnovel2
    6029                    
    6030                    ;Will allow button press
    6031 00017410     0320          clrc
    6032 00017420     0960          rets
    6033                    
    6034 00017430     0de0  kavnovel2       setc
    6035 00017440     0960          rets
    6036                    
    6037 00017450 00000000  mv_tbl  .long   0,0,0,0,0,MOVE_RIGHT_BIT,MOVE_RIGHT_BIT
    6038 00017530 00000000          .long   0,0,MOVE_LEFT_BIT,MOVE_LEFT_BIT
    6039                    
    6040                    *****************************************************************************
    6041                    * 
    6042                    * If player is moving away from opponent, or standing still, tell the 
    6043                    * calling routine to ignore button press
    6044                    *
    6045                    
    6046 000175b0            SUBR   ck_ignore_a8
    6047                    
    6048                    ;Is wrestler going away from opponent?
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  138

    6049                    
    6050 000175b0     b501          move    *a8(MOVE_DIR),a1
         000175c0     04b0  
    6051 000175d0     b500          move    *a8(NEW_FACING_DIR),a0  ;Current facing dir (9,10,6,5 only)
         000175e0     04d0  
    6052 000175f0     24a0          sll     5,a0
    6053 00017600     0b20          addi    mv_tbl,a0
         00017610 00017450' 
    6054 00017630     8600          move    *a0,a0,L
    6055 00017640     4a01          btst    a0,a1
    6056 00017650     cb02          jrnz    bqwnovel2
    6057                    
    6058                    ;Will allow button press
    6059 00017660     0320          clrc
    6060 00017670     0960          rets
    6061                    
    6062 00017680     0de0  bqwnovel2       setc
    6063 00017690     0960          rets
    6064                    
    6065                    
    6066                    *****************************************************************************
    6067                    * 
    6068                    * When we want all ropes to wobble (Butt drops, etc.)
    6069                    * This routine is used by all wrestlers.
    6070                    
    6071 000176a0            SUBR   shake_all_ropes
    6072                    
    6073                    ;       move    @NUM_OPPS,A1
    6074                    ;       CMPI    2,A1
    6075                    ;       JRGE    NO_SHAKING
    6076                    
    6077 000176a0     09c1          movi    ROPE_BOUNCEUD,a1
         000176b0     0000  
    6078 000176c0     1842          movk    2,a2
    6079                    
    6080 000176d0     09c0          movi    ROPE_FRONT,a0
         000176e0     0000  
    6081 000176f0     0d5f          calla   rope_command
         00017700 00000000! 
    6082                    
    6083 00017720     1820          movk    ROPE_BACK,a0
    6084 00017730     0d5f          calla   rope_command
         00017740 00000000! 
    6085                    
    6086 00017760     1840          movk    ROPE_LEFT,a0
    6087 00017770     0d5f          calla   rope_command
         00017780 00000000! 
    6088                    
    6089 000177a0     1860          movk    ROPE_RIGHT,a0
    6090 000177b0     0d5f          calla   rope_command
         000177c0 00000000! 
    6091                    
    6092 000177e0           NO_SHAKING
    6093 000177e0     0960          rets
    6094                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  139

    6095                    *****************************************************************************
    6096                    *
    6097                    * CALLED FROM WITHIN COLLISION ROUTINES
    6098                    *
    6099                    * makes wrestlers face each other & sets x_flip accordingly
    6100                    *
    6101                    * a13 = victim process
    6102                    * a10 = attacker process
    6103                    
    6104 000177f0            SUBR   face_each_other
    6105                    
    6106 000177f0     1900          movk    MOVE_RIGHT,a0
    6107 00017800     b7a2          move    *a13(OBJ_XPOS),a2,L
         00017810     0100  
    6108 00017820     b743          move    *a10(OBJ_XPOS),a3,L
         00017830     0100  
    6109 00017840     4843          cmp     a2,a3           ;a3-a2
    6110 00017850     c701          jrgt    nqdright
    6111 00017860     1880          movk    MOVE_LEFT,a0
    6112 00017870           nqdright
    6113 00017870     1841          movk    MOVE_DOWN,a1
    6114 00017880     b7a2          move    *a13(OBJ_ZPOS),a2,L
         00017890     0140  
    6115 000178a0     b743          move    *a10(OBJ_ZPOS),a3,L
         000178b0     0140  
    6116 000178c0     4843          cmp     a2,a3           ;a3-a2
    6117 000178d0     c701          jrgt    nqddown
    6118 000178e0     1821          movk    MOVE_UP,a1
    6119 000178f0           nqddown
    6120 000178f0     5420          or      a1,a0
    6121 00017900     b00d          move    a0,*a13(NEW_FACING_DIR)
         00017910     04d0  
    6122 00017920     b00d          move    a0,*a13(FACING_DIR)
         00017930     04c0  
    6123                    
    6124 00017940     0bc0          xori    MOVE_UP|MOVE_DOWN|MOVE_LEFT|MOVE_RIGHT,a0       ;opposite
         00017950 0000000f  
    6125                    
    6126 00017970     b00a          move    a0,*a10(NEW_FACING_DIR)
         00017980     04d0  
    6127 00017990     b00a          move    a0,*a10(FACING_DIR)
         000179a0     04c0  
    6128                    
    6129 000179b0     4d40          move    a10,a0
    6130 000179c0     0d3f          callr   set_wrestler_xflip
         000179d0     f568  
    6131                    
    6132 000179e0     4da0          move    a13,a0
    6133 000179f0     0d3f          callr   set_wrestler_xflip
         00017a00     f565  
    6134                    
    6135 00017a10     0960          rets
    6136                    
    6137                    *****************************************************************************
    6138                    *
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  140

    6139                    * Resets all special move processes by writing their SM_RESET_ADDRESSes
    6140                    * to their PWAKEs, and setting their PTIMEs to 1.
    6141                    
    6142 00017a20            SUBR   reset_smoves
    6143                    
    6144 00017a20     09e0          movi    ACTIVE,a0
         00017a30 00000000! 
    6145 00017a50     1821          movk    1,a1
    6146 00017a60     8600  wmklp0  move    *a0,a0,L
    6147 00017a70     ca0b          jrz     wmkdone
    6148 00017a80     b40e          move    *a0(PROCID),a14
         00017a90     0020  
    6149 00017aa0     0b4e          cmpi    SMOVE_PID,a14
         00017ab0     fed0  
    6150 00017ac0     cbf9          jrne    wmklp0
    6151                    
    6152 00017ad0     ba00          move    *a0(SM_RESET_ADDRESS),*a0(PWAKE),L
         00017ae0     0100  
         00017af0     00e0  
    6153 00017b00     b020          move    a1,*a0(PTIME)
         00017b10     0030  
    6154 00017b20     c0f3          jruc    wmklp0
    6155                    
    6156 00017b30     0960  wmkdone rets
    6157                    
    6158                    *****************************************************************************
    6159                    *
    6160                    * This is a final pass at confining the wrestlers and it's just about the
    6161                    * last thing that happens every frame, certain to run after both wrestler
    6162                    * processes.  It calls confine_wrestler once for each attached wrestler.
    6163                    *
    6164                    
    6165 00017b40            SUBRP  final_confine
    6166                    
    6167 00017b40     09c1          movi    NUM_WRES,a1
         00017b50     0007  
    6168 00017b60     09e2          movi    process_ptrs,a2
         00017b70 00000930- 
    6169 00017b90                   PUSH    a13
    6170 00017ba0           wrtloop
    6171 00017ba0     964d          move    *a2+,a13,L
    6172 00017bb0     ca0d          jrz     wrtinactive
    6173                    
    6174 00017bc0     b7a0          move    *a13(ATTACH_PROC),a0,L
         00017bd0     03e0  
    6175 00017be0     ca0a          jrz     wrtno_attach
    6176                    
    6177 00017bf0                   PUSH    a1,a2
    6178 00017c10     0d5f          calla   set_collision_boxes
         00017c20 00000000! 
    6179 00017c40     0d5f          calla   confine_wrestler
         00017c50 0000d1a0' 
    6180 00017c70                   PULL    a1,a2
    6181                    
    6182 00017c90           wrtno_attach
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  141

    6183 00017c90           wrtinactive
    6184 00017c90     3e01          dsj     a1,wrtloop
    6185                    
    6186 00017ca0                   PULL    a13
    6187 00017cb0     0960          rets
    6188                    
    6189                    
    6190                    *****************************************************************************
    6191                    * Temp routines
    6192                    
    6193                            .if     DEBUG
    6194                    
    6195                            BSSX    CPUAVG          ,16
    6196                            BSSX    CPULEFT         ,16
    6197                    
    6198                    
    6199                     SUBRP  cputime_calcfree
    6200                    
    6201                            move    @dirqtimer,a0
    6202                            subk    1,a0
    6203                            jrle    nobog
    6204                            clr     a0
    6205                            jruc    gottime
    6206                    nobog
    6207                            move    @vcount,a0
    6208                            subi    EOSINT,a0
    6209                            jrnn    skinccnt
    6210                            addi    256,a0
    6211                    skinccnt
    6212                            sll     2,a0
    6213                            neg     a0
    6214                            addi    1024,a0
    6215                    gottime
    6216                            move    a0,@CPULEFT
    6217                    
    6218                            srl     4,a0
    6219                            move    @CPUAVG,a1
    6220                            move    a1,a2
    6221                            srl     4,a2                    ;/16
    6222                            sub     a2,a1
    6223                            add     a0,a1
    6224                            move    a1,@CPUAVG
    6225                    
    6226                            rets
    6227                    
    6228                    
    6229                            .endif
    6230                    
    6231                     .if COL_DEBUG
    6232                    
    6233                    *****************************************************************************
    6234                    * highlights attack box
    6235                    * a10 is ptr to wrestler process
    6236                    
    6237                     SUBR   collis_debug
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  142

    6238                    
    6239                    
    6240                            clr     a0                              ;x pos
    6241                            clr     a1                              ;y pos
    6242                            movi    jmeter,a2                       ;* image
    6243                            movi    01601H,a3                       ;z pos
    6244                            movi    DMACAL|M_3D,a4                  ;DMA flags
    6245                            clr     a5                              ;object ID
    6246                            clr     a6                              ;x vel
    6247                            clr     a7                              ;y vel
    6248                            calla   BEGINOBJ
    6249                    
    6250                            clr     a0
    6251                            move    a0,*a8(ODXOFF)
    6252                            move    a0,*a8(ODYOFF)
    6253                    
    6254                            movi    0202h,a0
    6255                            move    a0,*a8(OCONST)
    6256                    
    6257                    zhuloop
    6258                            SLEEPK  1
    6259                    
    6260                            movi    7f00h,a0
    6261                            move    @debug_collis,a14
    6262                            cmpi    2,a14
    6263                            jrne    zhunot_2
    6264                            movi    1400h,a0
    6265                    zhunot_2
    6266                            move    a0,*a8(OZPOS)
    6267                    
    6268                            move    @debug_collis,a0
    6269                            jrz     zhuoff
    6270                    
    6271                            move    *a10(ANIMODE),a0
    6272                            btst    MODE_CHECKHIT_BIT,a0
    6273                            jrnz    zhuon
    6274                    
    6275                    zhuoff
    6276                            clr     a0
    6277                            move    a0,*a8(OXVAL),L
    6278                            move    a0,*a8(OYVAL),L
    6279                    
    6280                            move    @slowmo,a0
    6281                            move    a0,@slowmotion
    6282                    
    6283                            movk    16,a0
    6284                            move    a0,*a8(OSIZEX)
    6285                            move    a0,*a8(OSIZEY)
    6286                    
    6287                            jruc    zhuloop
    6288                    
    6289                    
    6290                    zhuon
    6291                            movk    30,a0
    6292                            clr     a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  143

    6293                    
    6294                            move    @slowmo,a1
    6295                            jrz     zhuskp
    6296                            move    a1,a0
    6297                    zhuskp
    6298                            move    a0,@slowmotion
    6299                    
    6300                            movi    Y_SCALE_MULTIPLIER,a0
    6301                            move    *a10(OBJ_ZPOSINT),a1
    6302                            mpys    a0,a1
    6303                            move    a1,a4                   ;y val
    6304                            srl     16,a4
    6305                            move    *a10(OBJ_YPOSINT),a0
    6306                            sub     a0,a4
    6307                    
    6308                            move    *a10(OBJ_ATTYOFF),a0
    6309                            sub     a0,a4
    6310                            move    *a10(OBJ_ATTHEIGHT),a0
    6311                            sub     a0,a4
    6312                            sll     16,a4
    6313                            move    a4,*a8(OYVAL),L
    6314                    
    6315                            move    *a10(OBJ_ATTWIDTH),a0
    6316                            move    a0,*a8(OSIZEX)
    6317                            move    *a10(OBJ_ATTHEIGHT),a0
    6318                            move    a0,*a8(OSIZEY)
    6319                    
    6320                            move    *a10(OBJ_ATTXOFF),a0
    6321                            move    *a10(OBJ_XPOSINT),a4
    6322                    
    6323                            ;check the same way the actual collision code does.
    6324                            move    *a10(OBJ_CONTROL),a14
    6325                            btst    B_FLIPH,a14
    6326                            jrz     zhufacing_right
    6327                    
    6328                    ;       move    *a10(FACING_DIR),a14
    6329                    ;       btst    PLAYER_RIGHT_BIT,a14
    6330                    ;       jrnz    zhufacing_right
    6331                    
    6332                            neg     a0
    6333                            move    *a10(OBJ_ATTWIDTH),a14
    6334                            sub     a14,a0
    6335                    
    6336                    zhufacing_right
    6337                    
    6338                            add     a0,a4
    6339                            sll     16,a4
    6340                            move    a4,*a8(OXVAL),L
    6341                    
    6342                    
    6343                    
    6344                            jruc    zhuloop
    6345                    
    6346                    ;;;     move    a0,@debug_collis
    6347                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  144

    6348                    
    6349                    
    6350                    *****************************************************************************
    6351                    * highlights target box
    6352                    * a10 is ptr to wrestler process
    6353                    
    6354                     SUBRP  collis_debug2
    6355                    
    6356                            clr     a0                              ;x pos
    6357                            clr     a1                              ;y pos
    6358                            movi    jmeter,a2                       ;* image
    6359                            movi    7f00h,a0        ;199
    6360                            movi    DMACAL|M_3D,a4                  ;DMA flags
    6361                            clr     a5                              ;object ID
    6362                            clr     a6                              ;x vel
    6363                            clr     a7                              ;y vel
    6364                            calla   BEGINOBJ
    6365                    
    6366                            clr     a0
    6367                            move    a0,*a8(ODXOFF)
    6368                            move    a0,*a8(ODYOFF)
    6369                    
    6370                            movi    0101h,a0
    6371                            move    a0,*a8(OCONST)
    6372                    
    6373                    dptloop
    6374                            SLEEPK  1
    6375                    
    6376                            movi    01600H,a0
    6377                            move    @debug_collis,a14
    6378                            cmpi    2,a14
    6379                            jrne    dptnot_2
    6380                            movi    111,a0
    6381                    dptnot_2
    6382                            move    a0,*a8(OZPOS)
    6383                    
    6384                            move    @debug_collis,a0
    6385                            jrnz    dpton
    6386                    
    6387                            clr     a0
    6388                            move    a0,*a8(OXVAL),L
    6389                            move    a0,*a8(OYVAL),L
    6390                    
    6391                            movk    16,a0
    6392                            move    a0,*a8(OSIZEX)
    6393                            move    a0,*a8(OSIZEY)
    6394                    
    6395                            jruc    dptloop
    6396                    
    6397                    dpton
    6398                            move    *a10(OBJ_COLLX1),a0
    6399                            move    a0,a1
    6400                            sll     16,a0
    6401                            move    a0,*a8(OXVAL),L
    6402                    
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  145

    6403                            move    *a10(OBJ_COLLX2),a2
    6404                            sub     a1,a2
    6405                            move    a2,*a8(OSIZEX)
    6406                    
    6407                            movi    Y_SCALE_MULTIPLIER,a0
    6408                            move    *a10(OBJ_ZPOSINT),a1
    6409                            mpys    a0,a1
    6410                            srl     16,a1
    6411                            move    *a10(OBJ_COLLY2),a0
    6412                            sub     a0,a1
    6413                            sll     16,a1
    6414                            move    a1,*a8(OYVAL),L
    6415                    
    6416                            move    *a10(OBJ_COLLY2),a0
    6417                            move    *a10(OBJ_COLLY1),a1
    6418                            sub     a1,a0
    6419                            move    a0,*a8(OSIZEY)
    6420                    
    6421                            jruc    dptloop
    6422                    
    6423                     .endif
    6424                    
    6425                    *****************************************************************************
    6426                     .if SCRT_DEBUG
    6427                    
    6428                            .bss    imgptrs0,       32*16
    6429                    
    6430                     SUBRP  scrt_debug
    6431                    
    6432                            movk    16,a1
    6433                            movi    imgptrs0,a2
    6434                            movi    [10,0],a0                       ;x pos
    6435                    vqbinit_loop
    6436                    
    6437                            PUSH    a0,a1,a2
    6438                    
    6439                            movi    [238,0],a1                      ;y pos
    6440                            movi    d_zip,a2                        ;* image
    6441                            movi    10000,a3                        ;z pos
    6442                            movi    DMAWNZ|M_SCRNREL,a4             ;DMA flags
    6443                            clr     a5                              ;object ID
    6444                            clr     a6                              ;x vel
    6445                            clr     a7                              ;y vel
    6446                            calla   BEGINOBJ
    6447                    
    6448                            PULL    a0,a1,a2
    6449                            move    a8,*a2+,L
    6450                            addi    [16,0],a0
    6451                            dsj     a1,vqbinit_loop
    6452                    
    6453                    vqbloop
    6454                    
    6455                    
    6456                            movi    wrest_joystat,a1
    6457                            movi    imgptrs0,a2
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  146

    6458                            movk    16,a3
    6459                    
    6460                    vqbloop2
    6461                            move    *a2+,a8,L
    6462                            move    *a1+,a5,L
    6463                            move    a5,a0
    6464                    
    6465                            srl     4,a0
    6466                            andi    011111b,a0
    6467                            jrz     vqbcont
    6468                            X32     a0
    6469                            addi    vqbbutton_imgs,a0
    6470                            move    *a0,a0,L
    6471                            jruc    vqbcont2
    6472                    
    6473                    vqbcont
    6474                            move    a5,a0
    6475                            andi    01111b,a0
    6476                            X32     a0
    6477                            addi    vqbarrow_imgs,a0
    6478                            move    *a0,a0,L
    6479                    
    6480                    vqbcont2
    6481                    
    6482                            PUSH    a1,a2,a3
    6483                    
    6484                            callr   vqbchange_image
    6485                    
    6486                            PULL    a1,a2,a3
    6487                            dsj     a3,vqbloop2
    6488                    
    6489                            SLEEPK  1
    6490                    
    6491                            jruc    vqbloop
    6492                    
    6493                    
    6494                    vqbchange_image
    6495                            move    a0,*a8(OIMG),L
    6496                            move    *a0(0),*a8(OSIZE),L
    6497                            move    *a0(ISAG),*a8(OSAG),L
    6498                    
    6499                            move    *a0(IANIOFFX),a1
    6500                            move    a1,*a8(ODXOFF)                  ;display x offset
    6501                    
    6502                            move    *a0(IANIOFFY),a1
    6503                            move    a1,*a8(ODYOFF)                  ;display y offset
    6504                    
    6505                            setf    5,0,0
    6506                            move    *a0(ICTRL+7),*a8(OCTRL+7) ;Write 5 z comp bits
    6507                            setf    16,1,0
    6508                            rets
    6509                    
    6510                    vqbarrow_imgs
    6511                            .long   d_zip           ;0
    6512                            .long   d_up            ;1
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  147

    6513                            .long   d_down          ;2
    6514                            .long   d_zip           ;3
    6515                            .long   d_left          ;4
    6516                            .long   d_upleft        ;5
    6517                            .long   d_downleft      ;6
    6518                            .long   d_zip           ;7
    6519                            .long   d_right         ;8
    6520                            .long   d_upright       ;9
    6521                            .long   d_downright     ;10
    6522                            .long   d_zip           ;11
    6523                            .long   d_zip           ;12
    6524                            .long   d_zip           ;13
    6525                            .long   d_zip           ;14
    6526                            .long   d_zip           ;15
    6527                    
    6528                    
    6529                    vqbbutton_imgs
    6530                            .long   d_zip           ;0
    6531                            .long   d_block         ;1
    6532                            .long   d_grab          ;2
    6533                            .long   d_zip           ;3
    6534                            .long   d_punch         ;4
    6535                            .long   d_zip           ;5
    6536                            .long   d_zip           ;6
    6537                            .long   d_zip           ;7
    6538                            .long   d_kick          ;8
    6539                            .long   d_zip           ;9
    6540                            .long   d_zip           ;10
    6541                            .long   d_zip           ;11
    6542                            .long   d_zip           ;12
    6543                            .long   d_zip           ;13
    6544                            .long   d_zip           ;14
    6545                            .long   d_zip           ;15
    6546                            .long   d_turbo         ;16
    6547                    
    6548                     .endif
    6549                    
    6550                    *****************************************************************************
    6551                     .if DIR_DEBUG
    6552                    
    6553                            .bss    imgptrs,        32*3
    6554                            .bss    imgptrs2,       32*3
    6555                    
    6556                     SUBRP  dir_debug
    6557                    
    6558                            movi    [10,0],a0                       ;x pos
    6559                            movi    [25,0],a1                       ;y pos
    6560                            movi    d_zip,a2                        ;* image
    6561                            movi    10000,a3                        ;z pos
    6562                            movi    DMAWNZ|M_SCRNREL,a4             ;DMA flags
    6563                            clr     a5                              ;object ID
    6564                            clr     a6                              ;x vel
    6565                            clr     a7                              ;y vel
    6566                            calla   BEGINOBJ
    6567                            move    a8,@imgptrs,L
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  148

    6568                    
    6569                            movi    [10,0],a0                       ;x pos
    6570                            movi    [25+15,0],a1                    ;y pos
    6571                            calla   BEGINOBJ
    6572                            move    a8,@imgptrs+32,L
    6573                    
    6574                            movi    [10,0],a0                       ;x pos
    6575                            movi    [25+30,0],a1                    ;y pos
    6576                            calla   BEGINOBJ
    6577                            move    a8,@imgptrs+64,L
    6578                    
    6579                    
    6580                            movi    [400-24,0],a0                   ;x pos
    6581                            movi    [25,0],a1                       ;y pos
    6582                            calla   BEGINOBJ
    6583                            move    a8,@imgptrs2,L
    6584                    
    6585                            movi    [400-24,0],a0                   ;x pos
    6586                            movi    [25+15,0],a1                    ;y pos
    6587                            calla   BEGINOBJ
    6588                            move    a8,@imgptrs2+32,L
    6589                    
    6590                            movi    [400-24,0],a0                   ;x pos
    6591                            movi    [25+30,0],a1                    ;y pos
    6592                            calla   BEGINOBJ
    6593                            move    a8,@imgptrs2+64,L
    6594                    
    6595                    
    6596                    
    6597                    oqhloop
    6598                            clr     a1
    6599                            callr   get_process_ptr
    6600                    
    6601                            move    a0,a10
    6602                            JRZ     NO_ONE_HERE1
    6603                    
    6604                            move    *a10(MOVE_DIR),a0
    6605                            move    @imgptrs,a8,L
    6606                            callr   oqhud_arrow
    6607                    
    6608                            move    *a10(NEW_FACING_DIR),a0
    6609                            move    @imgptrs+32,a8,L
    6610                            callr   oqhud_arrow
    6611                    
    6612                            move    *a10(FACING_DIR),a0
    6613                            move    @imgptrs+64,a8,L
    6614                            callr   oqhud_arrow
    6615                    
    6616                    NO_ONE_HERE1
    6617                            movk    1,a1
    6618                            callr   get_process_ptr
    6619                            move    a0,a10
    6620                            JRZ     NO_ONE_HERE2
    6621                    
    6622                            move    *a10(MOVE_DIR),a0
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  149

    6623                            move    @imgptrs2,a8,L
    6624                            callr   oqhud_arrow
    6625                    
    6626                            move    *a10(NEW_FACING_DIR),a0
    6627                            move    @imgptrs2+32,a8,L
    6628                            callr   oqhud_arrow
    6629                    
    6630                            move    *a10(FACING_DIR),a0
    6631                            move    @imgptrs2+64,a8,L
    6632                            callr   oqhud_arrow
    6633                    
    6634                    NO_ONE_HERE2
    6635                            SLEEPK  1
    6636                            jruc    oqhloop
    6637                    
    6638                    
    6639                    oqhud_arrow
    6640                            move    a0,a0
    6641                            jrnz    oqhok
    6642                            movi    d_zip,a0
    6643                            jruc    oqhcont
    6644                    oqhok
    6645                            callr   convert_facing
    6646                            X32     a0
    6647                            addi    oqharrow_imgs,a0
    6648                            move    *a0,a0,L
    6649                    
    6650                    oqhcont
    6651                            move    a0,*a8(OIMG),L
    6652                            move    *a0(0),*a8(OSIZE),L
    6653                            move    *a0(ISAG),*a8(OSAG),L
    6654                    
    6655                            move    *a0(IANIOFFX),a1
    6656                            move    a1,*a8(ODXOFF)                  ;display x offset
    6657                    
    6658                            move    *a0(IANIOFFY),a1
    6659                            move    a1,*a8(ODYOFF)                  ;display y offset
    6660                    
    6661                            setf    5,0,0
    6662                            move    *a0(ICTRL+7),*a8(OCTRL+7) ;Write 5 z comp bits
    6663                            setf    16,1,0
    6664                            rets
    6665                    
    6666                    
    6667                    oqharrow_imgs
    6668                            .long   d_up
    6669                            .long   d_upright
    6670                            .long   d_right
    6671                            .long   d_downright
    6672                            .long   d_down
    6673                            .long   d_downleft
    6674                            .long   d_left
    6675                            .long   d_upleft
    6676                    
    6677                            .long   d_punch
TMS340 COFF Macro Assembler Version 6.10     Tue Oct 24 16:44:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  150

    6678                            .long   d_kick
    6679                            .long   d_block
    6680                            .long   d_grab
    6681                            .long   d_turbo
    6682                            .long   d_zip
    6683                    
    6684                     .endif
    6685                    
    6686                    *****************************************************************************
    6687                    *
    6688                    * Initializes the scroller position
    6689                    
    6690 00017cc0            SUBR   init_scroller
    6691                    
    6692 00017cc0     09e0          movi    [RING_X_CENTER-200,0],a0
         00017cd0 036a0000  
    6693 00017cf0     0780          move    a0,@WORLDTLX,L
         00017d00 00000000! 
    6694                    
    6695                            ;use [ffe5,0] in 1v1 or 1v3, [ffe9,0] for 1v2
    6696 00017d20     09e0          movi    [0ffe5h,0],a0
         00017d30 ffe50000  
    6697 00017d50     05ae          move    @NUM_OPPS,a14
         00017d60 00000000! 
    6698 00017d80     0b4e          cmpi    2,a14
         00017d90     fffd  
    6699 00017da0     cb03          jrne    sxpsety
    6700 00017db0     09e0          movi    [0ffe9h,0],a0
         00017dc0 ffe90000  
    6701 00017de0     0780  sxpsety move    a0,@WORLDTLY,L
         00017df0 00000000! 
    6702                    
    6703 00017e10     0960          rets
    6704                    
    6705                    ******************************************************************************
    6706                    
    6707                            .end

 No Errors,  No Warnings
