TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    **************************************************************
       2                    *
       3                    * Software:     Jamie Rivett, Mark Turmell, Jason Skiles
       4                    * Initiated:    12/7/93
       5                    *
       6                    * Modified:
       7                    *
       8                    * COPYRIGHT (C) 1992 WILLIAMS ELECTRONICS GAMES, INC.
       9                    *
      10                    **************************************************************
      11                    
      12                            .file   "wrestle.asm"
      14                            .width  132
      15                            .option b,d,l,t
      16                            .mnolist
      17                    
      18                    
      19                            .include        "macros.h"
      20                            .include        "mproc.equ"             ;Mproc equates
      21                            .include        "display.equ"           ;Display proc equates
      22                            .include        "gsp.equ"               ;Gsp asm equates
      23                            .include        "sys.equ"
      24                            .include        "wwfsec.equ"
      25                            .include        "game.equ"
      26                            .include        "audit.equ"
      27                            .include        "plyr.equ"
      28                            .include        "anim.equ"
      29                            .include        "sound.h"
      30                            .include        "ring.equ"
      31                            .include        "sound.equ"
      32                            .include        "damage.equ"
      33                    
      34                            .include        "newfont.tbl"
      35                            .include        "imgtbl.glo"
      36                            .include        "fontsimg.glo"
      37                            .include        "bgndtbl.glo"
      38                            .include        "miscimg.glo"
      39                    
      40                    ; .if DEBUG
      41                    ;       .include        "dirdebug.tbl"
      42                    ;
      43                    ;ARROWS:
      44                    ;       .word     4
      45                    ;       .word   00H,015H,07FFFH,02B5H
      46                    ; .endif
      47                    
      48                     .if DEBUG
      49                    
      50                    SCRT_DEBUG      equ     0
      51                    DIR_DEBUG       equ     0
      52                    COL_DEBUG       equ     1
      53                    
      54                     .else
      55                    
      56              0000  SCRT_DEBUG      equ     0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    2

      57              0000  DIR_DEBUG       equ     0
      58              0000  COL_DEBUG       equ     0
      59                    
      60                     .endif
      61                    
      62                    ******************************************************************************
      63                    * EXTERNAL REFERENCES
      64                    
      65                            .if     DEBUG
      66                            .ref    instant_death
      67                            .endif
      68                    
      69                            .ref    ADD_VOICE,ARE_WE_IN_RING,AUD,AUD1,BAKMODS,BGND_UD1
      70                            .ref    CLEAR_SPEECH_REPEAT,CREATE_TEXT_LINE,CR_CONTP,CR_STRTP
      71                            .ref    CURRENT_LADDER,D2ST2B03,DAM_MULT,DBV,DIAG,DONE_HOWARD
      72                            .ref    DO_CROWD_CHEER,FIND_AND_KILL_ENDLESS,GAME_BEATEN
      73                            .ref    GET_ADJ,GET_AUD,combo_audit_done,FINAL_PTR
      74                            .ref    INIT_LADDER_TABLE,INIT_SKIRTS,INIT_TAB,IRQSKYE,KILL_AUD
      75                            .ref    LCOIN,MATCH_TIMERS,NUM_OPPS,OPEN_PROGRESS_SCREEN
      76                            .ref    POWERCMOS,POWERTST,P_CONT,P_START,RCOIN,READ_DIP
      77                            .ref    RESETUP_PROGRESS,SERVICE,SET_LOWER_VOL,SHIFT_BARS_IN_Z
      78                            .ref    SLAM_SW,SORT_OUT_WRESTLER_NUM,SPECIAL_WIPEOUT,STORE_AUDIT
      79                            .ref    THIS_GAME_IS_BEATEN,VOLBTN_PRESS,WALK_SOUND,do_game_over
      80                            .ref    WDOGRAM,rewire_monitor,XCOIN,DUMRETS,WHICH_SCREEN
      81                            .ref    ZFLIP_POS_VAR,CREATE_TIMEOUT,CCOIN,CHANGE_SKIRTS,CKDIAG
      82                            .ref    set_volume,KILL_ALL_CHANNELS,RESET_VOICE_QUEUE
      83                            .ref    FINAL_BATTLE_LINEUP,RNDRNG0,change_wrestler,match_timer
      84                            .ref    animate_wrestler,are_we_waiting_f,attract_mode
      85                            .ref    bam_ani_init,bret_ani_init,change_anim1,change_anim1a
      86                            .ref    change_anim2,check_collisions,ck_climb_in_bot,keep_onscreen
      87                            .ref    ck_climb_in_side,ck_climb_in_top,ck_climb_out_bot
      88                            .ref    ck_climb_out_side,ck_climb_out_top
      89                            .ref    crowd_anim,dirqtimer,dma_meter,doink_ani_init,buyin_select
      90                            .ref    dpageflip,drone_main,entered_inits,getup_meter
      91                            .ref    index1,index2,init_all,init_life_data,init_special_objlist
      92                            .ref    lex_ani_init,meters,move_bam,move_bret,move_doink,move_lex
      93                            .ref    move_razor,move_shawn,move_taker,move_yoko,adjust_health
      94                            .ref    overlap_collision,pal_getf,pin_speed_in_case,pregame_show
      95                            .ref    print_string_C2,process_dispatch,razor_ani_init,choose_pal
      96                            .ref    read_switches,rope,rope_command,select_screen,init_smoves
      97                            .ref    set_collision_boxes,set_images,setup_message
      98                            .ref    shawn_ani_init,snd_update,square_root,taker_ani_init
      99                            .ref    triple_sound,wgsf24_ascii,wres_get_but_val_down
     100                            .ref    wres_get_stick_val_down,wres_get_stick_val_up
     101                            .ref    wrestler_audits,yoko_ani_init,mess_objid,pal_clean
     102                            .ref    wrestler_veladd,announce_rnd_winner,scroll_world
     103                            .ref    drone_change_back,is_final_match,audit_ud_flag
     104                            .ref    ditch_getup_meter,message_flag,init_rnd_life_data
     105                            .ref    p1rnd_award,p2rnd_award,p1mtch_award,p2mtch_award
     106                            .ref    p1ws_award,p2ws_award,rst_awards,rst_winstreak_awards
     107                            .ref    PERFECT_WINS,MUSIC_HAP,THIS_GAME_TIME,WINS_OBJ
     108                            .ref    arm_winstreak_award,reset_dufus_msgs,clear_icon_total
     109                            .ref    MESSAGE_FLAGS,FLASH_FLAG,royal_rumble,choose_buddies
     110                            .ref    do_show_options,show_options,IKIL1C,is_a14_behind
     111                            .ref    maybe_do_flashes,COMBO_FLASH_FLAG,loser_snd
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    3

     112                            .ref    in_finish_move,buddy_mode_on,buddy_mode_checked
     113                            .ref    copy_rom_string,concat_rom_string,setup_message
     114                            .ref    copy_string,dec_to_asc,concat_string,message_buffer
     115                            .ref    osgmd8_ascii,get_all_buttons_cur,_serial_number,_man_date
     116                            .ref    InitPIC,RemapIO,SecFuncCheck
     117                            .ref    rr_loss,postgame_audits
     118                            .ref    wrestler_counter
     119                            .ref    is_8_on_1,bncoff_gate,fall_back_tbl
     120                            .ref    show_wrestler_end_story,do_fireworks
     121                            .ref    p1pins,p2pins,finish_completed
     122                    * need to check if errors
     123                    ;       .ref    PSTATUS2,OLD_PSTATUS2
     124                    
     125                    
     126                    ******************************************************************************
     127                    * SYMBOLS DEFINED IN THIS FILE
     128                    
     129                    
     130                            .def    obj_look,ani_init,mainlp,PCMOSRET,ring_mod
     131                    
     132 00000000                   BSSX    _coin_addr,32
     133 00000000                   BSSX    _switch_addr,32
     134 00000000                   BSSX    _switch2_addr,32
     135 00000000                   BSSX    _watchdog_addr,32
     136 00000000                   BSSX    _dipswitch_addr,32
     137 00000000                   BSSX    _sound_addr,32
     138 00000000                   BSSX    _soundirq_addr,32
     139 00000000                   BSSX    _coin_counter_addr,32
     140                    
     141                    ;uninitialized ram definitions
     142 00000000                   BSSX    no_pin_check,16
     143 00000000                   BSSX    belt_ask        ,16
     144 00000000                   BSSX    belt_type       ,16
     145                    
     146 00000000                   BSSX    PSTATUS         ,16     ;Player in game bits (0-3)
     147 00000000                   BSSX    OLD_PSTATUS     ,16     ;Previous games PSTATUS
     148                    ;added these, they are referenced in some others (select.asm etc.)
     149 00000000                   BSSX    PSTATUS2        ,16     ;Player in game bits (0-3)
     150 00000000                   BSSX    OLD_PSTATUS2    ,16     ;Previous games PSTATUS
     151 00000000                   BSSX    PSTARTS         ,16     ;Not documented.  Pbltltlt.
     152                    
     153                            .if     DEBUG
     154                            BSSX    SLDEBUG         ,16     ;Shawn's debug
     155                            BSSX    slowmotion      ,16     ;!0=Frames of delay for slow motion
     156                            .endif
     157                    
     158 00000000                   BSSX    slowmo          ,16     ;!0=Frames of delay for slow motion
     159                    
     160                            ;I changed PCNT to a 32-bit value instead of 16 'cuz I'm tired of
     161                            ; coding checks for the wraparound case, which happens every ten
     162                            ; minutes or so.  Since it's always treated as an unsigned value
     163                            ; anyway, it's perfectly safe to continue using it as a word. - JS
     164 00000000                   .even
     165 00000000                   BSSX    PCNT            ,32     ;Main loop cnt
     166                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    4

     167 00000000                   BSSX    swstack_p       ,32     ;*Stack position
     168 00000000                   BSSX    swstackbot      ,16*64  ;Bottom of stack
     169 00000000                   BSSX    swstacktop      ,0      ;Top of stack
     170                    
     171 00000000                   BSSX    COLRTEMP        ,16*16  ;RAM COPY OF CYCLING COLORS
     172                    
     173 00000000                   BSSX    GAMSTATE        ,16     ;Game state: See game.equ
     174                    
     175 00000000                   BSSX    HALT            ,16     ;FREEZE ALL OBJECTS (NO VEL UPDATE)
     176 00000000                   BSSX    NO_START        ,16     ;FLAG 0=OKAY, 1=NOT RIGHT NOW.
     177                    
     178 00000000                   BSSX    WSPEED          ,16
     179 00000000                   BSSX    WFLG            ,16     ;0=NOT ON, 1=YES IT IS ON
     180 00000720                   .bss    WNDWFLG         ,16     ;0=WINDOW SHOULD CLOSE, 1=NO WINDOW
     181 00000000                   .even
     182 00000000                   BSSX    OBJPTR          ,32     ;PNTR FOR WINDOW OBJECT
     183                    
     184                    
     185 00000750                   .bss    PALTMP          ,13*16*2 ;ALLOCATE 2 X COLOR AREA IN RAM
     186                    
     187 00000000                   BSSX    match_cnt,      16
     188                    
     189 00000000                   BSSX    debug_collis,   16
     190                    
     191 00000000                   .even
     192 00000000                   BSSX    DIAG0,          32
     193 00000000                   BSSX    DIAG1,          32
     194                    
     195 00000000                   BSSX    process_ptrs,   32*NUM_WRES     ;long * number wrestlers
     196              0970- p2_process      .equ    process_ptrs+32
     197                            .def    p2_process
     198                    
     199 00000a30                   .bss    wres0_objs,     32*MAX_PIECES
     200 00000af0                   .bss    wres1_objs,     32*MAX_PIECES
     201 00000bb0                   .bss    wres2_objs,     32*MAX_PIECES
     202 00000c70                   .bss    wres3_objs,     32*MAX_PIECES
     203 00000d30                   .bss    wres4_objs,     32*MAX_PIECES
     204 00000df0                   .bss    wres5_objs,     32*MAX_PIECES
     205 00000eb0                   .bss    wres6_objs,     32*MAX_PIECES
     206 00000f70                   .bss    wres7_objs,     32*MAX_PIECES
     207                    
     208 00000000                   BSSX    round_tickcount,16
     209                    
     210                    
     211 00000000                   BSSX    wrest_joystat,  32*16*NUM_WRES  ;16 bit joyval: 16 bit count
     212                    
     213 00001e40                   .bss    fudge_x,        32              ;wrestler_x[-20h]
     214 00000000                   BSSX    wrestler_x,     32*NUM_WRES     ;long * number wrestlers
     215 00001f40                   .bss    fudge_y,        32              ;wrestler_y[-20h]
     216 00000000                   BSSX    wrestler_y,     32*NUM_WRES     ;long *         "
     217 00002040                   .bss    fudge_z,        32              ;wrestler_z[-20h]
     218 00000000                   BSSX    wrestler_z,     32*NUM_WRES     ;long *         "
     219                    
     220                            ;This is the game clock at the top of the screen.  It runs at various
     221                            ; speeds in the different modes, and can be adjusted by the operator.
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    5

     222                            ; It's not any kind of real time clock and shouldn't be used for
     223                            ; ANYTHING except displaying those two digits.
     224 00000000                   BSSX    match_time,     16*3            ;frac, 1's, 10's
     225                    
     226 00000000                   BSSX    match_over,     16              ;0=not over, !0=over
     227                    
     228                            ;This used to be incremented on the fly.  Bogus, since we lose bog
     229                            ; frames that way and end up with an artificially low time.  Instead,
     230                            ; compute this based on current PCNT and match_start_time at the
     231                            ; end of the match.
     232 00000000                   BSSX    match_realtime, 16              ;actual seconds elapsed
     233                    
     234 00000000                   BSSX    match_winner,   16              ;just like PSTATUS
     235                    
     236 00000000                   BSSX    fight_debug,    16
     237                    
     238 00000000                   BSSX    p1winstreak,    16              ;player 1 winning streak
     239 00000000                   BSSX    p2winstreak,    16              ;player 2 winning streak
     240 00000000                   BSSX    p1winstreakd,   16              ;player 1 vs drones
     241 00000000                   BSSX    p2winstreakd,   16              ;player 2 vs drones
     242                    
     243                            ;copy pXwinstreak to pXoldwinstreak immediately after any battle
     244                            ; ends, then clear pXwinstreak.
     245 00000000                   BSSX    p1oldwinstreak, 16              ;player 1 dead winning streak
     246 00000000                   BSSX    p2oldwinstreak, 16              ;player 2 dead winning streak
     247                    
     248 00000000                   BSSX    current_round,  16              ;current round in match (1+)
     249 00000000                   BSSX    p1rounds,       16              ;player 1 rounds won
     250 00000000                   BSSX    p2rounds,       16              ;player 2 rounds won
     251                    
     252                            ;keep these in order and adjacent
     253 00000000                   .even
     254 00000000                   BSSX    front_rproc,    32              ;front ropes proc
     255 00000000                   BSSX    back_rproc,     32              ;back ropes proc
     256 00000000                   BSSX    left_rproc,     32              ;left ropes proc
     257 00000000                   BSSX    right_rproc,    32              ;right ropes proc
     258                    
     259 00000000                   BSSX    total_matches,  16              ;matches since attract mode
     260 00000000                   BSSX    no_debris,      16              ;Don't allow debris - it bogs
     261 00000000                   BSSX    reduce_bog,     16
     262 00000000                   BSSX    allow_offscrn,16                ;Allow players offscrn on toss outs
     263                    
     264 00002300                   .bss    bgnd_cntr,16
     265 00000000                   BSSX    any_hits,16
     266 00000000                   BSSX    robo_icon_trigger,16
     267                    
     268                            .if DEBUG
     269                            BSSX    stay_down,      16              ;flag - don't dec GETUP_TIME
     270                            .endif
     271                    
     272                            ;these three data are only for use in pin times.  They don't count
     273                            ; time not spent actually fighting, and so we can't use them for
     274                            ; the game time audit.
     275 00000000                   BSSX    round_start_time,32             ;PCNT at start of round
     276 00000000                   BSSX    round_end_time,32               ;PCNT at end of round
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    6

     277                            
     278                            ;Set this at the beginning of a match, and subtract it from PCNT
     279                            ; at the end of the match.  THIS is the clock we use for the game
     280                            ; time audits.  It won't lose bog frames, and it isn't tied to that
     281                            ; silly game clock.
     282 00000000                   BSSX    match_start_time,32             ;PCNT at start of match
     283 00000000                   .text
     284                    
     285 00002390                   .bss    plyr_dmg_given,2*16
     286 00000000                   BSSX    wrestler_count,16
     287 00000000                   BSSX    wrestler_count_proc,32
     288 00000000                   BSSX    temp_music,16
     289                    
     290 00000000                   BSSX    annc_rnd_winner_done,16
     291                            
     292 00000000           vln_right_rope_r
     293 00000000     0511          .WORD   RING_TOP_RIGHT,RING_TOP,RING_BOT_RIGHT,RING_BOT
     294 00000040     0142          .WORD   RING_DEPTH,RING_RIGHT_WIDTH
     295 00000060           vln_left_rope_r
     296 00000060     0358          .WORD   RING_TOP_LEFT,RING_TOP,RING_BOT_LEFT,RING_BOT
     297 000000a0     0142          .WORD   RING_DEPTH,RING_LEFT_WIDTH
     298 000000c0           vln_right_matedge_r
     299 000000c0     054d          .WORD   MAT_TOP_RIGHT,MAT_TOP,MAT_BOT_RIGHT,MAT_BOT
     300 00000100     022a          .WORD   MAT_DEPTH,MAT_RIGHT_WIDTH
     301 00000120           vln_left_matedge_r
     302 00000120     0314          .WORD   MAT_TOP_LEFT,MAT_TOP,MAT_BOT_LEFT,MAT_BOT
     303 00000160     022a          .WORD   MAT_DEPTH,MAT_LEFT_WIDTH
     304 00000180           vln_right_matedge2_r
     305 00000180     0565          .WORD   MAT2_TOP_RIGHT,MAT2_TOP,MAT2_BOT_RIGHT,MAT2_BOT
     306 000001c0     0234          .WORD   MAT2_DEPTH,MAT2_RIGHT_WIDTH
     307 000001e0           vln_left_matedge2_r
     308 000001e0     0304          .WORD   MAT2_TOP_LEFT,MAT2_TOP,MAT2_BOT_LEFT,MAT2_BOT
     309 00000220     0234          .WORD   MAT2_DEPTH,MAT2_LEFT_WIDTH
     310 00000240           vln_right_fence_r
     311 00000240     06c8          .WORD   ARENA_TOP_RIGHT,ARENA_TOP,ARENA_BOT_RIGHT,ARENA_BOT
     312 00000280     0518          .WORD   ARENA_DEPTH,ARENA_RIGHT_WIDTH
     313 000002a0           vln_left_fence_r
     314 000002a0     026a          .WORD   ARENA_TOP_LEFT,ARENA_TOP,ARENA_BOT_LEFT,ARENA_BOT
     315 000002e0     0518          .WORD   ARENA_DEPTH,ARENA_LEFT_WIDTH
     316                    
     317 00000300                   bssx    vln_right_rope,((RING_DEPTH+10)*16)+64
     318 00000300                   bssx    vln_left_rope,((RING_DEPTH+10)*16)+64
     319 00000300                   bssx    vln_right_matedge,((MAT_DEPTH+10)*16)+64
     320 00000300                   bssx    vln_left_matedge,((MAT_DEPTH+10)*16)+64
     321 00000300                   bssx    vln_right_matedge2,((MAT2_DEPTH+10)*16)+64
     322 00000300                   bssx    vln_left_matedge2,((MAT2_DEPTH+10)*16)+64
     323 00000300                   bssx    vln_right_fence,((ARENA_DEPTH+10)*16)+64
     324 00000300                   bssx    vln_left_fence,((ARENA_DEPTH+10)*16)+64
     325                    
     326 00000300                   .even
     327 00000300           box_matedge
     328 00000300 00007180-         .long   vln_left_matedge
     329 00000320 00004e00-         .long   vln_right_matedge
     330                    
     331 00000340           box_matedge2
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    7

     332 00000340 0000b920-         .long   vln_left_matedge2
     333 00000360 00009500-         .long   vln_right_matedge2
     334                    
     335                    
     336                    ****************************************************************
     337                    * Reset entry point
     338                    
     339 00000380            SUBR   init_prog
     340                    
     341                            .if 0
     342                            dint
     343                            setf    16,1,0                  ;Field0 = Word sign extend
     344                            setf    32,0,1                  ;Field1 = Long word
     345                            movi    STCKST,sp               ;Top of stack
     346                    
     347                            calla   InitPIC
     348                    
     349                    ;       .if     DEBUG
     350                    ;       move    a0,@01e00000H           ;Clr FPGA rom protect
     351                    ;       .endif
     352                    
     353                                                            ;>Manual sound board reset
     354                    ; Moved to PU DIAGS
     355                    ;       movi    0fe00h,a0               ;Hit reset bit
     356                    ;       move    a0,@SOUND
     357                    ;       movi    100,a0                  ;Wait for it to catch
     358                    ;       dsj     a0,$
     359                    ;       movi    0ff00h,a0               ;Let it go
     360                    ;       move    a0,@SOUND
     361                    
     362                            move    @WDOGRAM,a0,L
     363                            cmpi    WDOGNUM,a0
     364                            jrne    initp50                 ;Powerup?
     365                    
     366                            move    @dirqtimer,a0
     367                            cmpi    400,a0
     368                            jrhs    gkptlockup                      ;Main loop died?
     369                    
     370                    
     371                            .if     TUNIT
     372                            move    @TALKPORT,a0            ;Check if watchdog was real
     373                            btst    B_WDOG,a0               ;Bit should be low if dog fired
     374                            jrnz    initp50                 ;No watchdog?
     375                            .endif
     376                    
     377                            movk    AUD_LOCKUP,a0           ;watchdog
     378                            calla   AUD1
     379                            jruc    gkptcont
     380                    
     381                    gkptlockup
     382                    
     383                            movi    AUD_LOCKUP,a0           ;main loop lockup
     384                            calla   AUD1
     385                    
     386                    gkptcont
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    8

     387                            .if     DEBUG
     388                            .else
     389                            CALLERR 11,0                    ;Watch dog
     390                            .endif
     391                    
     392                    
     393                            movk    AUDSTAT,a0
     394                            calla   GET_AUD                 ;0=AMode, 1=Game
     395                            move    a1,a1
     396                            jrz     WARMSET                 ;Attract mode glitch?
     397                    
     398                    initp50
     399                            calla   READ_DIP                ;skip if UJ2 bit 6 set
     400                            btst    6,a0
     401                            jrnz    gkptskip_powerst
     402                            jauc    POWERTST                ;board test etc...
     403                    gkptskip_powerst
     404                    
     405                            .else
     406 00000380     0360          dint                            ; Interrupts OFF
     407 00000390     0570          setf    16,1,0                  ; word sign extend
     408 000003a0     0760          setf    32,1,1                  ; long word sign extend
     409 000003b0     09ef          movi    STCKST,sp               ; Setup the stack pointer
         000003c0 013f73e0  
     410                    
     411 000003e0     5600          clr     a0                      ; initial mode for VMUX chip
     412 000003f0     0580          move    a0,@VMUX_CONTROL,W      ; initialize VMUX chip
         00000400 01800000  
     413                    
     414 00000420     09c0          movi    00030h,a0               ; hit sound reset bit
         00000430     0030  
     415 00000440     0580          move    a0,@COIN_COUNTERS       ; this is where reset bit is
         00000450 01860010  
     416 00000470     09c0          movi    100,a0                  ; wait for it to catch
         00000480     0064  
     417 00000490     3c20          dsjs    a0,$    
     418 000004a0     09c0          movi    00020h,a0               ; let it go
         000004b0     0020  
     419 000004c0     0580          move    a0,@COIN_COUNTERS
         000004d0 01860010  
     420                    
     421                    
     422 000004f0     05a0          move    @SOUNDIRQ,a0            ; read watchdog status
         00000500 01860040  
     423 00000520     1ee0          btst    8,a0                    ; Is this reset from a watchdog ?
     424 00000530     cb04          jrnz    initp50                 ; br = no
     425                    
     426 00000540           gkptlockup
     427                    
     428 00000540     1b60          movk    AUD_LOCKUP,a0           ; watchdog audit
     429 00000550     0d5f          calla   AUD1
         00000560 00000000! 
     430                    
     431                    ;04/01/95 - NOTE:  It may look a little dumb to have two calls to InitPIC
     432                    ;here instead of one above before the read for the watchdog status and it may
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE    9

     433                    ;be tempting to move the InitPIC call to before the watchdog status read BUT
     434                    ;don't do it!!!  The watchdog status MUST be read BEFORE the PIC is initialized
     435                    ;or the status of the watchdog will be reset.
     436                    
     437 00000580           initp50
     438 00000580     0d5f          calla   InitPIC                 ; Initialize the PIC and the I/O system
         00000590 00000000! 
     439 000005b0     0580          move    a0,@WATCHDOG            ; Kill the dog fer yucks
         000005c0 01860030  
     440 000005e0     0d5f          calla   READ_DIP                ; Read the dipswitches
         000005f0 00000000! 
     441 00000610     1f20          btst    6,a0                    ; Is the power test bypass switch on?
     442 00000620     cb03          jrnz    gkptskip_powerst                ; br = yes
     443 00000630     c080          jauc    POWERTST                ; Go off and run the power up tests
         00000640 00000000! 
     444 00000660           gkptskip_powerst
     445 00000660     0d5f          calla   InitPIC                 ; Reinitialize the PIC and I/O system
         00000670 00000000! 
     446                            .endif
     447                    
     448                    
     449                    ******************************************************************************
     450                    
     451 00000690            SUBR   WARMSET
     452                    
     453 00000690     0360          dint
     454 000006a0     0570          setf    16,1,0                  ;Field0 = Word sign extend
     455 000006b0     0740          setf    32,0,1                  ;Field1 = Long word
     456 000006c0     09ef          movi    STCKST,sp               ;Top of stack
         000006d0 013f73e0  
     457                    
     458 000006f0     0d5f          calla   InitPIC
         00000700 00000000! 
     459                    
     460                    ;This takes all day to run.  leave it out until we ship.
     461                            .if DEBUG
     462                            .else
     463 00000720     c080          jauc    POWERCMOS
         00000730 00000000! 
     464                            .endif
     465 00000750           PCMOSRET
     466                    
     467 00000750     0d5f          calla   init_all                ;Initialize hardware
         00000760 00000000! 
     468                    ; These are stored in these reggies to protect them
     469 00000780     0795          move    b5,@_serial_number,L
         00000790 00000000! 
     470 000007b0     0796          move    b6,@_man_date,L
         000007c0 00000000! 
     471 000007e0     0d5f          calla   SecFuncCheck            ;Check to make sure security functions
         000007f0 00000000! 
     472                                                            ;have not been mucked with
     473 00000810     0d5f          calla   INIT_TAB                ;Reset todays high score table
         00000820 00000000! 
     474                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   10

     475                            .if DEBUG
     476                            clr     a14
     477                            move    a14,@fight_debug
     478                            move    @_soundirq_addr,a14,L
     479                            move    *a14,a14
     480                            btst    8,a14
     481                            jrnz    jxflno_dog
     482                            LOCKUP
     483                    jxflno_dog
     484                            .endif
     485                    
     486 00000840     0d5f          calla   CKDIAG
         00000850 00000000! 
     487 00000870     ca09          jrz     main_go                 ;No diag switches closed?
     488                    
     489 00000880                   CREATE  DIAG_PID,DIAG           ;Fire off the diag process
     490 00000900     c008          jruc    mainlp
     491 00000910           main_go
     492 00000910                   CREATE  AMODE_PID,attract_mode  ;Start the attract mode
     493                    
     494                            ;fall through
     495                    
     496                    ********************************
     497                    * Main loop
     498                    
     499 00000990           mainlp
     500 00000990     0d5f          calla   process_dispatch
         000009a0 00000000! 
     501                    
     502 000009c0     4dad          move    a13,a13
     503 000009d0     ca0b          jrz     mainpok
     504                    
     505                            .if     DEBUG
     506                            LOCKUP
     507                            eint
     508                            .else
     509 000009e0                   CALLERR 10,0
     510                            .endif
     511                    
     512 00000a90           mainpok
     513                    
     514 00000a90     07a1          move    @RAND,a1,L              ;>Randomize
         00000aa0 00000000! 
     515 00000ac0     6821          rl      a1,a1
     516 00000ad0     05ae          move    @HCOUNT,a14
         00000ae0 c00001c0  
     517 00000b00     69c1          rl      a14,a1
     518 00000b10     41e1          add     sp,a1
     519 00000b20     0781          move    a1,@RAND,L
         00000b30 00000000! 
     520                    
     521                     .if DEBUG
     522                            move    @dma_meter,a14
     523                            jrz     ghprno_dmaline
     524                            .ref    draw_dma_meter
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   11

     525                            calla   draw_dma_meter
     526                    ghprno_dmaline
     527                     .endif
     528                    
     529                    
     530                    ;isn't there a less obvious place
     531                    ;that we can remap the IO ???
     532                    ;       btst    5,a1
     533                    ;       jrz     _no_remap
     534                    ;       calla   RemapIO
     535                    ;_no_remap
     536                    
     537 00000b50     0d3f          callr   switch_unstack
         00000b60     000b  
     538 00000b70     0d5f          calla   snd_update              ;Update the sound calls
         00000b80 00000000! 
     539                    
     540                            .if     DEBUG
     541                            calla   cputime_calcfree
     542                            .endif
     543                    
     544                            ;update all 32 bits of PCNT
     545 00000ba0     07a0          move    @PCNT,a0,L
         00000bb0 00000190- 
     546 00000bd0     1020          addk    1,a0
     547 00000be0     0780          move    a0,@PCNT,L
         00000bf0 00000190- 
     548                    
     549 00000c10     c0d7          jruc    mainlp
     550                    
     551                    
     552                    ***************************************************************
     553                    * Unstack switch queue
     554                    
     555                    
     556 00000c20            SUBRP  switch_unstack
     557                    
     558                    
     559 00000c20     07a3  jgpelp  move    @swstack_p,a3,L
         00000c30 000001b0- 
     560 00000c50     0b63          cmpi    swstacktop,a3           ;Stack at start?
         00000c60 fffffa2f- 
     561 00000c80     ca1a          jreq    jgpex                   ;Empty?
     562 00000c90     07a0          move    @FREE,a0,L
         00000ca0 00000000! 
     563 00000cc0     ca16          jrz     jgpex                   ;No processes left?
     564                    
     565 00000cd0     9460          move    *a3+,a0                 ;Get entry
     566 00000ce0     0783          move    a3,@swstack_p,L         ;Update stack
         00000cf0 000001b0- 
     567 00000d10     2760          sll     32-5,a0                 ;Max switch # 31
     568 00000d20     2d20          srl     32-5-4,a0               ;*16
     569 00000d30     4c02          move    a0,a2
     570 00000d40     4002          add     a0,a2
     571 00000d50     4002          add     a0,a2                   ;*3
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   12

     572 00000d60     0b22          addi    switch_t,a2
         00000d70 00000e40' 
     573 00000d90     9441          move    *a2+,a1
     574 00000da0     cae7          jrz     jgpelp                  ;No PID?
     575 00000db0     9647          move    *a2+,a7,L               ;*Code
     576 00000dc0     09ed          movi    ACTIVE,a13              ;*Proc list
         00000dd0 00000000! 
     577 00000df0     0d5f          calla   GETPRC
         00000e00 00000000! 
     578 00000e20     c0df          jruc    jgpelp
     579                    
     580 00000e30     0960  jgpex   rets
     581                    
     582                    
     583 00000e40           switch_t        ;(Process ID or 0, *Routine)    ;Put in audit??
     584                    
     585                    
     586                            .if     TUNIT
     587 00000e40                   WL      0,0                     ;S0
     588 00000e70                   WL      0,0                     ;S1
     589 00000ea0                   WL      0,0                     ;S2
     590 00000ed0                   WL      0,0                     ;S3
     591 00000f00                   WL      0,0                     ;S4
     592 00000f30                   WL      0,0                     ;S5
     593 00000f60                   WL      0,0                     ;S6
     594 00000f90                   WL      0,0                     ;S7
     595 00000fc0                   WL      0,0                     ;S8
     596 00000ff0                   WL      0,0                     ;S9
     597 00001020                   WL      0,0                     ;S10
     598 00001050                   WL      0,0                     ;S11
     599 00001080                   WL      0,0                     ;S12
     600 000010b0                   WL      0,0                     ;S13
     601 000010e0                   WL      0,0                     ;S14
     602 00001110                   WL      0,0                     ;S15
     603                    
     604 00001140                   WL      LC_PID,LCOIN            ;S16 - LEFT COIN (1)
     605 00001170                   WL      RC_PID,RCOIN            ;S17 - RIGHT COIN (2)
     606 000011a0                   WL      PSWPID,plyr_strtb1      ;S18 - START 1
     607 000011d0                   WL      SLAM_PID,SLAM_SW        ;S19 - SLAM TILT
     608 00001200                   WL      DIAG_PID,DIAG           ;S20 - TEST
     609 00001230                   WL      PSWPID,plyr_strtb2      ;S21 - START 2
     610 00001260                   WL      DIAG_PID,SERVICE        ;S22 - SERVICE CREDIT
     611 00001290                   WL      CC_PID,CCOIN            ;S23 - CENTER COIN (3)
     612 000012c0                   WL      CC_PID,XCOIN            ;S24 - COIN 4
     613 000012f0                   WL      0,0                     ;S25 - START 3
     614 00001320                   WL      0,0                     ;S26 - START 4
     615 00001350                   WL      VOLBTN_PID,VOLBTN_PRESS ;S27 - VOLUME DOWN
     616 00001380                   WL      VOLBTN_PID,VOLBTN_PRESS ;S28 - VOLUME UP
     617 000013b0                   WL      0,0                     ;S29
     618 000013e0                   WL      0,0                     ;S30
     619 00001410                   WL      CC_PID,DBV                      ;S31
     620                    
     621                            .else
     622                    
     623                            WL      PSWPID,plyr_strtb4      ;S7 IO20 - START 4
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   13

     624                            WL      0,0                     ;S1
     625                            WL      0,0                     ;S2
     626                            WL      0,0                     ;S3
     627                            WL      0,0                     ;S4
     628                            WL      0,0                     ;S5
     629                            WL      0,0                     ;S6
     630                            WL      PSWPID,plyr_strtb3      ;S7 - START 3
     631                            WL      0,0                     ;S8
     632                            WL      0,0                     ;S9
     633                            WL      0,0                     ;S10
     634                            WL      0,0                     ;S11
     635                            WL      0,0                     ;S12
     636                            WL      0,0                     ;S13
     637                            WL      0,0                     ;S14
     638                            WL      CC_PID,XCOIN            ;S15 - COIN 4
     639                    
     640                            WL      LC_PID,LCOIN            ;S16 - LEFT COIN (1)
     641                            WL      RC_PID,RCOIN            ;S17 - RIGHT COIN (2)
     642                            WL      PSWPID,plyr_strtb1      ;S18 - START 1
     643                            WL      SLAM_PID,SLAM_SW        ;S19 - SLAM TILT
     644                            WL      DIAG_PID,DIAG           ;S20 - TEST
     645                            WL      PSWPID,plyr_strtb2      ;S21 - START 2
     646                            WL      DIAG_PID,SERVICE        ;S22 - SERVICE CREDIT
     647                            WL      CC_PID,CCOIN            ;S23 - CENTER COIN (3)
     648                            WL      0,0                     ;S24
     649                            WL      0,0                     ;S25
     650                            WL      0,0                     ;S26
     651                            WL      0,0                     ;S27
     652                            WL      0,0                     ;S28
     653                            WL      0,0                     ;S29
     654                            WL      0,0                     ;S30 - Snd IRQ
     655                            WL      0,0                     ;S31
     656                            .endif
     657                    
     658 00001440           are_we_waiting_for_inits
     659 00001440     4d00          move    a8,a0
     660 00001450     0b00          addi    HI_INPUT_PID,a0
         00001460     0137  
     661 00001470     5621          clr     a1
     662 00001480     03e1          not     a1
     663 00001490     c080          jauc    EXISTP
         000014a0 00000000! 
     664                    
     665                    ***************************************************************
     666                    * plyr_strtbx - Process player start button (Process)
     667                    
     668 000014c0            SUBR   plyr_strtb1
     669 000014c0     5708          clr     a8                      ;A8=Player #
     670 000014d0     c001          jruc    frmago
     671                    
     672 000014e0            SUBR   plyr_strtb2
     673 000014e0     1828          movk    1,a8
     674                    
     675 000014f0           frmago
     676                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   14

     677 000014f0     05a0          move    @GAMSTATE,a0
         00001500 000006d0- 
     678 00001520     ce00          jrn     frmadie                 ;In diagnostics?
         00001530     0139  
     679                    
     680 00001540     0b40          cmpi    INPARTY,a0
         00001550     fff9  
     681 00001560     ca00          jreq    frmadie                 ;don't interrupt the win sequence
         00001570     0135  
     682                    
     683 00001580     05ae          move    @PSTATUS2,a14
         00001590 00000150- 
     684 000015b0     4b0e          btst    a8,a14
     685 000015c0     cb00          jrnz    frmadie                 ;Player already started?
         000015d0     012f  
     686                    
     687                    ;New start.  kill the player's score and win count
     688                    
     689 000015e0                   PUSH    a0
     690 000015f0     09e2          MOVI    process_ptrs,A2
         00001600 00000950- 
     691 00001620     09e0          movi    p1winstreak,a0
         00001630 000021b0- 
     692 00001650     09e4          movi    p1winstreakd,a4
         00001660 000021d0- 
     693 00001680     09e1          movi    entered_inits,a1
         00001690 00000000! 
     694 000016b0     09e3          movi    MATCH_TIMERS,a3
         000016c0 00000000! 
     695 000016e0     09ee          movi    p1ws_award,a14
         000016f0 00000000! 
     696 00001710     4d08          move    a8,a8
     697 00001720     ca12          jrz     frmarstp1scor
     698 00001730     09e2          MOVI    process_ptrs+020H,A2
         00001740 00000970- 
     699 00001760     09e0          movi    p2winstreak,a0
         00001770 000021c0- 
     700 00001790     09e4          movi    p2winstreakd,a4
         000017a0 000021e0- 
     701 000017c0     09e1          movi    entered_inits+030h,a1
         000017d0 00000030! 
     702 000017f0     09e3          movi    MATCH_TIMERS+020H,a3
         00001800 00000020! 
     703 00001820     09ee          movi    p2ws_award,a14
         00001830 00000000! 
     704 00001850           frmarstp1scor
     705 00001850     0d5f          calla   rst_winstreak_awards    ;reset player winstreak awards
         00001860 00000000! 
     706 00001880                   PUSH    a0
     707 00001890     5600          clr     a0
     708 000018a0     4d08          move    a8,a8
     709 000018b0     ca01          jrz     frmado_dmsg_rst
     710 000018c0     1820          movk    1,a0
     711 000018d0           frmado_dmsg_rst
     712 000018d0     0d5f          calla   reset_dufus_msgs
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   15

         000018e0 00000000! 
     713 00001900     4d00          move    a8,a0
     714 00001910     0d5f          calla   clear_icon_total
         00001920 00000000! 
     715 00001940     4c08          move    a0,a8
     716 00001950                   PULL    a0
     717                    ;       calla   dufus_msgs_on
     718 00001960     57ce          clr     a14
     719                    ;       move    a14,@belt_ask
     720 00001970     81c0          move    a14,*a0,W               ;wins
     721 00001980     83c1          MOVE    A14,*A1,L               ;entered_inits
     722 00001990     83c2          MOVE    A14,*A2,L               ;process_ptrs
     723 000019a0     83c3          MOVE    A14,*A3,L               ;MATCH_TIMERS
     724                    
     725 000019b0     8480          move    *a4,a0
     726 000019c0     ce01          jrn     frmaa4ok
     727 000019d0     81c4          move    a14,*a4,W               ;wins vs drones
     728 000019e0           frmaa4ok
     729                    
     730 000019e0                   PULL    a0
     731                    
     732 000019f0     05ae          move    @OLD_PSTATUS2,a14
         00001a00 00000160- 
     733 00001a20     4b0e          btst    a8,a14
     734 00001a30     ca04          jrz     frmareg                 ;Player on buyin screen?
     735                    ;On the buyin screen.
     736 00001a40     0b40          cmpi    INSELECT,a0
         00001a50     fffd  
     737 00001a60     ca32          jreq    frmastart_from_waitcont
     738 00001a70                   LOCKUP
     739                    
     740 00001a80           frmareg
     741                    
     742 00001a80     0d5f          calla   CR_STRTP                ;not a continue.  die on insuff $$
         00001a90 00000000! 
     743 00001ab0     c880          jalo    frmadie
         00001ac0 000028d0' 
     744                    
     745 00001ae0     05a0          move    @GAMSTATE,a0
         00001af0 000006d0- 
     746 00001b10     0b40          cmpi    INAMODE,a0
         00001b20     fffe  
     747 00001b30     ca38          jreq    frmastart_from_amode    ;New start from amode?
     748                    
     749 00001b40     0b40          cmpi    INGAMEOVER,a0
         00001b50     fff8  
     750 00001b60     ca3f          jreq    frmastart_from_gameover ;just like attract mode, really
     751                    
     752 00001b70     0b40          cmpi    INSELECT,a0
         00001b80     fffd  
     753 00001b90     ca78          jreq    frmastart_from_select
     754                    
     755 00001ba0     0b40          cmpi    INPREGAME,a0
         00001bb0     fffc  
     756 00001bc0     ca00          jreq    frmastart_from_pregame
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   16

         00001bd0     0080  
     757                    
     758 00001be0     0b40          cmpi    INPREGAME2,a0
         00001bf0     fff6  
     759 00001c00     ca06          jreq    frmastart_from_midgame
     760                    
     761 00001c10     0b40          cmpi    INGAME,a0
         00001c20     fffb  
     762 00001c30     ca03          jreq    frmastart_from_midgame
     763                    
     764 00001c40                   LOCKUP
     765                    
     766 00001c50     c000          jruc    frmadie                 ;cases we forgot...
         00001c60     00c6  
     767                    
     768 00001c70           frmastart_from_midgame
     769                    
     770 00001c70     09c0          movi    AUD_TOTSTARTS,a0        ;inc total starts audit
         00001c80     000e  
     771 00001c90     0d5f          calla   AUD1
         00001ca0 00000000! 
     772                    
     773 00001cc0     0d5f          calla   P_START                 ;eat the creds
         00001cd0 00000000! 
     774                    
     775 00001cf0                   CREATE  NO_PID,game_interrupt           ;create the game proc
     776                    
     777 00001d70     c000          jruc    frmaset_pstatus_and_die
         00001d80     0088  
     778                    
     779 00001d90           frmastart_from_waitcont
     780                    
     781 00001d90     0d3f          callr   are_we_waiting_for_inits
         00001da0     ff69  
     782 00001db0     cb00          jrnz    frmadie
         00001dc0     00b0  
     783                    
     784 00001dd0     0d5f          calla   CR_CONTP                ;enuff creds?
         00001de0 00000000! 
     785 00001e00     c880          jalo    frmadie
         00001e10 000028d0' 
     786 00001e30     0d5f          calla   P_CONT                  ;eat the creds
         00001e40 00000000! 
     787                    
     788 00001e60     09c0          movi    AUD_CONTTAKN,a0         ;inc continues taken audit
         00001e70     002d  
     789 00001e80     0d5f          calla   AUD1
         00001e90 00000000! 
     790                    
     791                    
     792 00001eb0     c075          jruc    frmaset_pstatus_and_die ;waitcont watches for PSTATUS
     793                                                            ; changes, so we don't need to
     794                    
     795 00001ec0           frmastart_from_amode
     796                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   17

     797 00001ec0     5600          clr     a0
     798                    
     799 00001ed0     0580          move    a0,@are_we_waiting_f
         00001ee0 00000000! 
     800 00001f00     0580          move    a0,@OLD_PSTATUS
         00001f10 00000140- 
     801 00001f30     0d5f          CALLA   INIT_LADDER_TABLE
         00001f40 00000000! 
     802                    
     803 00001f60           frmastart_from_gameover
     804 00001f60     1b20          movk    25,a0
     805 00001f70     0580          move    a0,@robo_icon_trigger
         00001f80 00002320- 
     806                    
     807 00001fa0     1820          movk    1,a0
     808 00001fb0     0580          move    a0,@no_pin_check
         00001fc0 00000100- 
     809 00001fe0     0580          move    a0,@belt_ask
         00001ff0 00000110- 
     810                    
     811 00002010     09c0          movi    AUD_PRESTARTS,a0        ;inc attract mode starts audit
         00002020     000f  
     812 00002030     0d5f          calla   AUD1
         00002040 00000000! 
     813                    
     814 00002060     09c0          movi    AUD_TOTSTARTS,a0        ;inc total starts audit
         00002070     000e  
     815 00002080     0d5f          calla   AUD1
         00002090 00000000! 
     816                    
     817 000020b0     0d5f          calla   P_START                 ;eat the creds
         000020c0 00000000! 
     818                    
     819                            ;Reset the volume levels here
     820 000020e0     0d5f          calla   KILL_ALL_CHANNELS
         000020f0 00000000! 
     821 00002110     0d5f          calla   RESET_VOICE_QUEUE
         00002120 00000000! 
     822                    
     823 00002140     09c0          movi    ADJVOLUME,a0
         00002150     001c  
     824 00002160     0d5f          calla   GET_ADJ
         00002170 00000000! 
     825 00002190                   BADCHK  a0,0,255,28             ;reg, lo, hi, val if bad
     826 00002220     0d5f          calla   set_volume
         00002230 00000000! 
     827                    
     828                    ;If any button is pressed at the same time as the start button,
     829                    ;then skip all select stuff.  Otherwise, game acts as it will on location
     830                    
     831 00002250     5600          clr     a0
     832 00002260     0580          move    a0,@match_cnt
         00002270 000008f0- 
     833                    
     834                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   18

     835                     .if DEBUG
     836                            move    a0,@skip_select
     837                            move    a0,@fight_debug
     838                    
     839                            .ref    get_all_buttons_cur2
     840                            calla   get_all_buttons_cur2
     841                            jrz     frmanobutn
     842                    
     843                            movk    1,a0
     844                            move    a0,@skip_select
     845                            move    a0,@fight_debug
     846                    
     847                            .ref    get_all_sticks_cur2
     848                            calla   get_all_sticks_cur2
     849                            jrz     frmanobutn
     850                    
     851                            movi    -1,a0
     852                            move    a0,@skip_select
     853                    
     854                    frmanobutn
     855                     .endif
     856                    
     857                    
     858 00002290                   CREATE  NO_PID,game_loop                ;create the game proc
     859 00002310     c02f          jruc    frmaset_pstatus_and_die
     860                    
     861                    
     862 00002320           frmastart_from_select
     863 00002320     0d3f          callr   are_we_waiting_for_inits
         00002330     ff10  
     864 00002340     cb58          jrnz    frmadie
     865                    
     866 00002350     09c0          movi    AUD_TOTSTARTS,a0        ;creds have already been checked,
         00002360     000e  
     867 00002370     0d5f          calla   AUD1                    ; so we know we have enough.
         00002380 00000000! 
     868 000023a0     0d5f          calla   P_START
         000023b0 00000000! 
     869 000023d0     c023          jruc    frmaset_pstatus_and_die
     870                    
     871                    
     872 000023e0           frmastart_from_pregame
     873 000023e0     09c0          movi    AUD_TOTSTARTS,a0        ;total starts
         000023f0     000e  
     874 00002400     0d5f          calla   AUD1
         00002410 00000000! 
     875 00002430     0d5f          calla   P_START                 ;eat creds
         00002440 00000000! 
     876 00002460                   CREATE  NO_PID,game_loop                ;make a new game loop.  This will
     877                    
     878 000024e0     5663          clr     a3
     879 000024f0     0d5f          calla   SNDSND
         00002500 00000000! 
     880                    
     881 00002520     0d5f          calla   KILL_ALL_CHANNELS
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   19

         00002530 00000000! 
     882 00002550     0d5f          calla   RESET_VOICE_QUEUE
         00002560 00000000! 
     883                    
     884 00002580     1963          movk    11,a3                   ;Little rap ditty
     885 00002590     0d5f          calla   SNDSND
         000025a0 00000000! 
     886                    
     887 000025c0     5600          clr     a0
     888 000025d0     0580          move    a0,@are_we_waiting_f
         000025e0 00000000! 
     889 00002600     0300          jruc    frmaset_pstatus_and_die ;kill the old one and drop back
     890                                                            ;into the select screen.
     891                    
     892 00002610           frmaset_pstatus_and_die
     893 00002610     1820          movk    1,a0                    ;set the player bit in PSTATUS
     894 00002620     6300          sll     a8,a0
     895 00002630     05ae          move    @PSTATUS2,a14
         00002640 00000150- 
     896 00002660     540e          or      a0,a14
     897 00002670     058e          move    a14,@PSTATUS
         00002680 00000130- 
     898 000026a0     05ae          MOVE    @PSTARTS,A14
         000026b0 00000170- 
     899 000026d0     540e          or      a0,a14
     900 000026e0     058e          move    a14,@PSTARTS
         000026f0 00000170- 
     901 00002710     5600          CLR     A0
     902 00002720     0580          MOVE    A0,@THIS_GAME_TIME
         00002730 00000000! 
     903 00002750     09c0          movi    49h,a0
         00002760     0049  
     904 00002770     0d5f          calla   triple_sound
         00002780 00000000! 
     905                    
     906 000027a0     5600          clr     a0
     907 000027b0     0580          MOVE    A0,@IRQSKYE
         000027c0 00000000! 
     908                    
     909 000027e0     09c0          movi    AUD_WINSTREAK,A0
         000027f0     0057  
     910 00002800     0d5f          calla   KILL_AUD
         00002810 00000000! 
     911 00002830     09c0          movi    AUD_PINSPEED,A0
         00002840     0058  
     912 00002850     0d5f          calla   KILL_AUD
         00002860 00000000! 
     913 00002880     09c0          movi    AUD_BEATEN,A0
         00002890     0059  
     914 000028a0     0d5f          calla   KILL_AUD
         000028b0 00000000! 
     915                    
     916 000028d0           frmadie DIE
     917                    
     918                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   20

     919                    *****************************************************************************
     920                    * game loop
     921                    *
     922                    
     923 00002900                   STRUCTPD
     924 00002900                   LONG    BLINK_PROC
     925                    
     926 00002900            SUBRP  game_interrupt
     927                    
     928                    ;Someone has bought in during gameplay of a one player game!
     929                    ;Print challenger comes message
     930                    
     931 00002900     1820          movk    1,a0
     932 00002910     0580          move    a0,@HALT
         00002920 000006e0- 
     933                    
     934                    ;If a player buys in during a one player game.  We must decrement pxcpu_ladder
     935                    ;because we haven't defeated that cpu opponent yet!
     936                    
     937                            ;...but if the player has already lost, go ahead and dec.
     938 00002940     05a0          MOVE    @match_winner,a0
         00002950 00002190- 
     939 00002970     ca13          jrz     wrdedecldr
     940                    
     941                            ;someone has won--figure out if it's our player.  We can't look at
     942                            ; PSTATUS because the other player has now bought in and it's gonna
     943                            ; be 3.  Instead, look at the process_ptrs.  There'll be a non-zero
     944                            ; value one of the first two, and that's our player.
     945 00002980     07ae          move    @process_ptrs,a14,L
         00002990 00000950- 
     946 000029b0     ca08          jrz     wrdeop2
     947 000029c0           wrdeop1 ;p1 is the human.  test bit 0 of match_winner
     948 000029c0     1fe0          btst    0,a0
     949 000029d0     cb15          jrnz    wrdenodecldr
     950                    
     951                            ;p1 lost.  kill his PSTATUS bit.
     952 000029e0     09ce          movi    2,a14
         000029f0     0002  
     953 00002a00     058e          move    a14,@PSTATUS
         00002a10 00000130- 
     954                    
     955 00002a30     c007          jruc    wrdedecldr
     956 00002a40           wrdeop2 ;p2 is the human.
     957 00002a40     1fc0          btst    1,a0
     958 00002a50     cb0d          jrnz    wrdenodecldr
     959                    
     960                            ;p2 lost.  kill his PSTATUS bit.
     961 00002a60     09ce          movi    1,a14
         00002a70     0001  
     962 00002a80     058e          move    a14,@PSTATUS
         00002a90 00000130- 
     963                    
     964 00002ab0     07a0  wrdedecldr      MOVE    @CURRENT_LADDER,A0,L
         00002ac0 00000000! 
     965 00002ae0     0be0          SUBI    020H,A0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   21

         00002af0     ffdf  
     966 00002b00     0780          MOVE    A0,@CURRENT_LADDER,L
         00002b10 00000000! 
     967 00002b30           wrdenodecldr
     968                    
     969                    ;If match/rnd winner anouncement is on screen, kill it
     970 00002b30     09c0          movi    ANNC_PID,a0
         00002b40     012e  
     971 00002b50     5621          clr     a1
     972 00002b60     03e1          not     a1
     973 00002b70     0d5f          calla   KILALL
         00002b80 00000000! 
     974                    
     975 00002ba0     09c0          movi    CYCPID,a0
         00002bb0     0110  
     976 00002bc0     5621          clr     a1
     977 00002bd0     03e1          not     a1
     978 00002be0     0d5f          calla   KILALL
         00002bf0 00000000! 
     979                    
     980 00002c10     09c0          movi    CLSNEUT|TYPTEXT|SUBTXT,a0
         00002c20     0701  
     981 00002c30     0d5f          calla   obj_del1c               ;delete text/plates
         00002c40 00000000! 
     982                    
     983 00002c60     09c0          movi    CLSNEUT|TYPTEXT|SUBMES1,a0
         00002c70     0702  
     984 00002c80     0d5f          calla   obj_del1c               ;delete text/plates
         00002c90 00000000! 
     985                    
     986 00002cb0           wrdenope
     987                    
     988 00002cb0     09e2          movi    LN1b_setup,a2
         00002cc0 00004b80' 
     989 00002ce0     0d5f          calla   setup_message
         00002cf0 00000000! 
     990 00002d10     09c0          movi    CLSNEUT|TYPTEXT|SUBMES1,a0
         00002d20     0702  
     991 00002d30     0580          move    a0,@mess_objid          ;OBJ ID's for text
         00002d40 00000000! 
     992 00002d60     09e4          movi    wrdestr_game,a4
         00002d70 00004cc0' 
     993 00002d90     0d5f          calla   print_string_C2
         00002da0 00000000! 
     994                    
     995 00002dc0     09e2          movi    LN2b_setup,a2
         00002dd0 00004c20' 
     996 00002df0     0d5f          calla   setup_message
         00002e00 00000000! 
     997 00002e20     09c0          movi    CLSNEUT|TYPTEXT|SUBMES1,a0
         00002e30     0702  
     998 00002e40     0580          move    a0,@mess_objid          ;OBJ ID's for text
         00002e50 00000000! 
     999 00002e70     09e4          movi    wrdestr_over,a4
         00002e80 00004d18' 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   22

    1000 00002ea0     0d5f          calla   print_string_C2
         00002eb0 00000000! 
    1001                    
    1002 00002ed0     0d5f          calla   pal_clean
         00002ee0 00000000! 
    1003                    
    1004                    
    1005                    
    1006                    
    1007 00002f00     09e3          movi    ACTIVE,a3,L
         00002f10 00000000! 
    1008                    
    1009 00002f30     8663  wrdelp  move    *a3,a3,L        ;Get next
    1010 00002f40     ca09          jrz     wrdex           ;End?
    1011 00002f50     b660          move    *a3(PWAKE),a0,L
         00002f60     00e0  
    1012 00002f70     b46e          move    *a3(PTIME),a14  ;Add sleep
         00002f80     0030  
    1013 00002f90     0b0e          addi    3*60,a14
         00002fa0     00b4  
    1014 00002fb0     b1c3          move    a14,*a3(PTIME)
         00002fc0     0030  
    1015 00002fd0     c0f5          jruc    wrdelp
    1016 00002fe0           wrdex
    1017                    
    1018 00002fe0                   CREATE  SET_IMAGES_PID,DO_SET_IMAGES
    1019                            .ref    fade_down_half
    1020 00003060     09ea          movi    wrdeno_fade,a10
         00003070 00004b20' 
    1021 00003090                   CREATE  FADE_PID,fade_down_half
    1022                    
    1023 00003110                   SLEEP   120
    1024                    
    1025 00003160     0d5f          calla   KILL_ALL_CHANNELS
         00003170 00000000! 
    1026 00003190     0d5f          calla   RESET_VOICE_QUEUE
         000031a0 00000000! 
    1027                    
    1028 000031c0     09c0          movi    ADJVOLUME,a0
         000031d0     001c  
    1029 000031e0     0d5f          calla   GET_ADJ
         000031f0 00000000! 
    1030 00003210                   BADCHK  a0,0,255,28             ;reg, lo, hi, val if bad
    1031 000032a0     0d5f          calla   set_volume
         000032b0 00000000! 
    1032                    
    1033 000032d0     1820          movk    1,a0
    1034 000032e0     0580          move    a0,@no_pin_check
         000032f0 00000100- 
    1035 00003310     1963          movk    11,a3                   ;Little rap ditty
    1036 00003320     0d5f          calla   SNDSND
         00003330 00000000! 
    1037                    
    1038                    
    1039 00003350            SUBRP  game_loop
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   23

    1040                    
    1041                     .if DEBUG
    1042                    
    1043                            movk    3,a0            ;2 humans
    1044                            .ref    skip_select
    1045                            move    @skip_select,a14
    1046                            jrz     wrdenoskp
    1047                            jrp     wrdenodrn
    1048                            movk    2,a0            ;1 human 1 drone
    1049                    wrdenodrn
    1050                            move    a0,@PSTATUS
    1051                    wrdenoskp
    1052                     .endif
    1053                    
    1054                    ;       .if DEBUG
    1055                    ;       ;don't allow this out in the field yet.
    1056                    ;       JSRP    robo_check
    1057                    ;       .endif
    1058                    
    1059 00003350     1820          movk    1,a0
    1060 00003360     0580          move    a0,@NUM_OPPS
         00003370 00000000! 
    1061                    
    1062 00003390                   JSRP    select_screen
    1063 00003400     5600          clr     a0
    1064 00003410     0580          move    a0,@no_pin_check
         00003420 00000100- 
    1065                    
    1066 00003440           do_pregame
    1067                    
    1068                            ;clear match_winner
    1069 00003440     57ce          clr     a14
    1070 00003450     058e          move    a14,@match_winner
         00003460 00002190- 
    1071                    
    1072                    ;       .ref    robo_check
    1073                    ;
    1074                    ;       JSRP    robo_check              ; RETURNS ONLY
    1075 00003480     186e          movk    INPREGAME,a14           ;set GAMSTATE
    1076 00003490     058e          move    a14,@GAMSTATE
         000034a0 000006d0- 
    1077 000034c0     09ce          movi    PREGAME_PID,a14         ;set our PID
         000034d0     0400  
    1078 000034e0     b1cd          move    a14,*a13(PROCID)
         000034f0     0020  
    1079                    
    1080 00003500     05a0          move    @match_cnt,a0
         00003510 000008f0- 
    1081 00003530     1020          inc     a0
    1082 00003540     0580          move    a0,@match_cnt
         00003550 000008f0- 
    1083                    
    1084 00003570     05a0          move    @PSTATUS2,A0
         00003580 00000150- 
    1085 000035a0     0b40          CMPI    3,A0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   24

         000035b0     fffc  
    1086 000035c0     ca05          JREQ    NOT_FINISHED_GAME
    1087                    
    1088 000035d0     0d5f          calla   is_final_match
         000035e0 00000000! 
    1089 00003600     c800          jrc     finished_game
         00003610     0102  
    1090                    
    1091 00003620           NOT_FINISHED_GAME
    1092 00003620     182e          movk    1,a14
    1093 00003630     058e          move    a14,@do_show_options
         00003640 00000000! 
    1094 00003660                   JSRP    pregame_show
    1095                            
    1096 000036d0           wrdegame
    1097 000036d0     09ce          movi    INGAME,a14              ;set GAMSTATE
         000036e0     0004  
    1098 000036f0     058e          move    a14,@GAMSTATE
         00003700 000006d0- 
    1099 00003720     09ce          movi    GAME_PID,a14            ;set our PID
         00003730     0500  
    1100 00003740     b1cd          move    a14,*a13(PROCID)
         00003750     0020  
    1101                    
    1102 00003760     5600          clr     a0
    1103 00003770     0580          move    a0,@p1rounds
         00003780 00002220- 
    1104 000037a0     0580          move    a0,@p2rounds
         000037b0 00002230- 
    1105 000037d0     0580          move    a0,@in_finish_move
         000037e0 00000000! 
    1106                    
    1107 00003800     1820          movk    1,a0
    1108 00003810     0580          move    a0,@current_round
         00003820 00002210- 
    1109                    
    1110                            ;set match_start_time
    1111 00003840     07ae          move    @PCNT,a14,L
         00003850 00000190- 
    1112 00003870     078e          move    a14,@match_start_time,L
         00003880 00002370- 
    1113                    
    1114                            ;do the match
    1115 000038a0                   JSRP    start_match
    1116                    
    1117                            ;inc the TOTAL GAMES audit
    1118 00003910     09c0          movi    AUD_TOTALGAMES,A0
         00003920     005c  
    1119 00003930     0d5f          CALLA   AUD1
         00003940 00000000! 
    1120                    
    1121                    ;The only time we return from start_match is when the match is over
    1122                    ;and the game must goto:
    1123                    
    1124                    ;1.  Buy-in screen for 1 or 2 player games
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   25

    1125                    ;2.  Ladder screen for the next matchup
    1126                    ;3.  Finale screens
    1127                    
    1128                            ;clear out howard speech flag so he can say it again on
    1129                            ; new select screen.
    1130 00003960     5600          CLR     A0
    1131 00003970     0580          MOVE    A0,@DONE_HOWARD
         00003980 00000000! 
    1132                    
    1133                            ;set delay before allowing player to select a wrestler
    1134 000039a0     09c0          movi    60,a0
         000039b0     003c  
    1135 000039c0     0580          move    a0,@are_we_waiting_f
         000039d0 00000000! 
    1136                    
    1137                            ;If that was a royal rumble, branch right now.  The following code
    1138                            ; assumes that PLYRNUMs match PLYR_SIDEs for human players.
    1139 000039f0     05ae          move    @royal_rumble,a14
         00003a00 00000000! 
    1140 00003a20     cb53          jrnz    wrdefinished_rumble
    1141                    
    1142                            ;Did a human player lose?
    1143 00003a30     05a0          move    @PSTATUS2,a0
         00003a40 00000150- 
    1144 00003a60     05a1          move    @match_winner,a1
         00003a70 00002190- 
    1145 00003a90     5220          andn    a1,a0
    1146 00003aa0     cb0c          jrnz    wrdego_buyin
    1147                    
    1148                    ;This player will keep on playing.
    1149                    ;Display ladder of progreesion which shows his next opponent.
    1150                    
    1151 00003ab0     05aa          move    @match_winner,a10
         00003ac0 00002190- 
    1152 00003ae0     142a          dec     a10
    1153 00003af0                   JSRP    pin_speed_in_case
    1154 00003b60     c08d          jruc    do_pregame
    1155                    
    1156 00003b70           wrdego_buyin
    1157                    ;Display 2 player buyin screen.
    1158                    ;Turn on appropriate messages for each player
    1159                    ;One guy lost, check if he achieved a high score.  (Most wins)
    1160                    ;If so, allow him to enter initials just on his panel.
    1161                    
    1162                            ;if the loser had a win streak, do a random sound call.
    1163 00003b70     0d5f          calla   loser_snd
         00003b80 00000000! 
    1164                    
    1165                            ;save old PSTATUS
    1166 00003ba0     05a0          move    @PSTATUS2,a0
         00003bb0 00000150- 
    1167 00003bd0     0580          move    a0,@OLD_PSTATUS
         00003be0 00000140- 
    1168                    
    1169                            ;did a human win?  Check by ANDing match_winner with PSTATUS.
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   26

    1170 00003c00     05a0          move    @PSTATUS2,a0
         00003c10 00000150- 
    1171 00003c30     05a1          move    @match_winner,a1
         00003c40 00002190- 
    1172 00003c60     5020          and     a1,a0
    1173 00003c70     cb0c          jrnz    wrdehuman_won
    1174                    
    1175                            ;The cpu won
    1176 00003c80     5600          clr     a0
    1177 00003c90     0580          move    a0,@match_winner
         00003ca0 00002190- 
    1178                    
    1179                            ;decrement CURRENT_LADDER, because NEXT_IN_LADDER automatically
    1180                            ; increments it.
    1181 00003cc0     07a0          move    @CURRENT_LADDER,A0,L
         00003cd0 00000000! 
    1182 00003cf0     0be0          subi    20h,a0
         00003d00     ffdf  
    1183 00003d10     0780          move    a0,@CURRENT_LADDER,L
         00003d20 00000000! 
    1184                    
    1185 00003d40           wrdehuman_won
    1186                            ;use match_winner as our new PSTATUS.
    1187 00003d40     05a0          move    @match_winner,a0
         00003d50 00002190- 
    1188 00003d70     0580          move    a0,@PSTATUS
         00003d80 00000130- 
    1189                    
    1190 00003da0     0d5f          calla   is_final_match
         00003db0 00000000! 
    1191 00003dd0     c800          jrc     finished_game
         00003de0     0085  
    1192                    
    1193 00003df0                   JSRP    buyin_select
    1194                    
    1195                    ;Clear the loser's wincount
    1196 00003e60     09e1          movi    p1winstreak,a1
         00003e70 000021b0- 
    1197 00003e90     05a0          move    @match_winner,a0
         00003ea0 00002190- 
    1198                    
    1199 00003ec0     0b40          cmpi    1,a0
         00003ed0     fffe  
    1200 00003ee0     cb03          jrnz    wrdenotp1
    1201 00003ef0     09e1          movi    p2winstreak,a1
         00003f00 000021c0- 
    1202                    
    1203 00003f20     57ce  wrdenotp1       clr     a14
    1204 00003f30     81c1          move    a14,*a1
    1205                    
    1206 00003f40     c000          jruc    do_pregame
         00003f50     ff4e  
    1207                    
    1208                    ****
    1209                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   27

    1210 00003f60           wrdefinished_rumble
    1211                    
    1212                            ;save old PSTATUS
    1213                    ;       move    @PSTATUS2,a14
    1214                    ;       move    a14,@OLD_PSTATUS
    1215                    
    1216                            ;...no, DON'T save the old PSTATUS.  For whatever reason, the
    1217                            ;buyin/select stuff won't work with a PSTATUS of 0 and an
    1218                            ;OLD_PSTATUS of 3.  Evidently two people losing is too traumatic
    1219                            ;an event for this rickety code to deal with.  So we just pretend.
    1220                            ;Maybe we fix this before we ship, maybe we don't.  It works.
    1221                    
    1222                            ;create a set_images process to keep us animating while this
    1223                            ; stuff is going on.
    1224 00003f60                   CREATE  SET_IMAGES_PID,DO_SET_IMAGES
    1225 00003fe0                   PUSHP   a0              ;store set_images proc address
    1226 00003ff0                   JSRP    show_most_damage
    1227                    
    1228 00004060     182e          movk    1,a14
    1229 00004070     058e          move    a14,@OLD_PSTATUS
         00004080 00000140- 
    1230                    
    1231                            ;did the humans win?
    1232 000040a0     05a0          move    @p1winstreak,a0
         000040b0 000021b0- 
    1233 000040d0     57ce          clr     a14
    1234 000040e0     058e          move    a14,@p1winstreak
         000040f0 000021b0- 
    1235 00004110     058e          move    a14,@p2winstreak
         00004120 000021c0- 
    1236 00004140     058e          move    a14,@p1oldwinstreak
         00004150 000021f0- 
    1237 00004170     058e          move    a14,@p2oldwinstreak
         00004180 00002200- 
    1238 000041a0                   TEST    a0
    1239 000041b0     ca27          jrz     wrderr_cpuwon
    1240                    
    1241                            ;create a set_images process to keep us animating while this
    1242                            ; stuff is going on.
    1243                    
    1244                            ;set GAMSTATE to INPARTY--disallows buyins
    1245 000041c0     18ce          movk    INPARTY,a14
    1246 000041d0     058e          move    a14,@GAMSTATE
         000041e0 000006d0- 
    1247                    
    1248 00004200                   JSRP    do_fireworks
    1249                    
    1250 00004270                   PULLP   a0              ;restore set_images proc address
    1251 00004280     0d5f          calla   KILL
         00004290 00000000! 
    1252                    
    1253                            ;inc the 'human wins in rumble' audit
    1254 000042b0     09c0          movi    AUD_RRWINS,a0
         000042c0     0065  
    1255 000042d0     0d5f          calla   AUD1
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   28

         000042e0 00000000! 
    1256                    
    1257 00004300                   JSRP    GAME_BEATEN
    1258                    
    1259                            .if     RR_AWARD = 1
    1260                    
    1261                            ;zero entered_inits
    1262 00004370     57ce          clr     a14
    1263 00004380     078e          move    a14,@entered_inits,L
         00004390 00000000! 
    1264 000043b0     078e          move    a14,@entered_inits+20h,L
         000043c0 00000020! 
    1265 000043e0     078e          move    a14,@entered_inits+40h,L
         000043f0 00000040! 
    1266                            
    1267 00004410     c000          jruc    do_pregame
         00004420     ff01  
    1268                            .endif
    1269                    
    1270 00004430           wrderr_cpuwon
    1271                    
    1272 00004430     57ce          clr     a14
    1273 00004440     058e          move    a14,@PSTATUS
         00004450 00000130- 
    1274 00004470     186e          movk    3,a14
    1275 00004480     058e          move    a14,@OLD_PSTATUS
         00004490 00000140- 
    1276 000044b0     058e          move    a14,@rr_loss
         000044c0 00000000! 
    1277 000044e0                   JSRP    buyin_select
    1278                    
    1279                            ;clear royal_rumble
    1280 00004550     57ce          clr     a14
    1281 00004560     058e          move    a14,@rr_loss
         00004570 00000000! 
    1282 00004590     058e          move    a14,@royal_rumble
         000045a0 00000000! 
    1283                    
    1284 000045c0     05ae          move    @PSTATUS2,a14
         000045d0 00000150- 
    1285 000045f0     cb00          jrnz    do_pregame
         00004600     fee3  
    1286                    
    1287                            ;nobody bought in.  drop to game over
    1288 00004610     c080          jauc    do_game_over
         00004620 00000000! 
    1289                    ****
    1290                    
    1291 00004640           finished_game
    1292                            ;player has won the entire game.
    1293                    
    1294                            ;set GAMSTATE to INPARTY--disallows buyins
    1295 00004640     18ce          movk    INPARTY,a14
    1296 00004650     058e          move    a14,@GAMSTATE
         00004660 000006d0- 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   29

    1297                    
    1298                    ;Audit total time for a 1 credit game
    1299 00004680     09c0          MOVI    AUD_CREDLEN,A0
         00004690     005d  
    1300 000046a0     05a1          MOVE    @THIS_GAME_TIME,A1
         000046b0 00000000! 
    1301 000046d0     0d5f          CALLA   AUD
         000046e0 00000000! 
    1302 00004700     09c0          MOVI    AUD_CREDLENNUM,A0
         00004710     005e  
    1303 00004720     0d5f          CALLA   AUD1
         00004730 00000000! 
    1304 00004750     5600          CLR     A0
    1305 00004760     0580          MOVE    A0,@THIS_GAME_TIME
         00004770 00000000! 
    1306 00004790     0580          MOVE    A0,@PSTARTS
         000047a0 00000170- 
    1307                    
    1308                    
    1309                            ;create a set_images process to keep us animating while this
    1310                            ; stuff is going on.
    1311 000047c0                   CREATE  SET_IMAGES_PID,DO_SET_IMAGES
    1312 00004840                   PUSHP   a0
    1313 00004850                   JSRP    do_fireworks
    1314 000048c0                   PULLP   a0
    1315 000048d0     0d5f          calla   KILL
         000048e0 00000000! 
    1316 00004900     0d5f          calla   is_8_on_1
         00004910 00000000! 
    1317 00004930     c907          jrnc    wrdeno_stories
    1318 00004940                   JSRP    show_wrestler_end_story
    1319 000049b0           wrdeno_stories
    1320 000049b0                   JSRP    GAME_BEATEN
    1321 00004a20                   JSRP    CREATE_TEXT_LINE
    1322 00004a90     c080          JAUC    THIS_GAME_IS_BEATEN
         00004aa0 00000000! 
    1323                    
    1324 00004ac0           wrdebuyin_mod
    1325 00004ac0 00000000!         .long   wwfselbkBMOD
    1326 00004ae0     ffd8          .word   -40,0
    1327 00004b00 00000000          .long   0
    1328                    
    1329 00004b20           wrdeno_fade
    1330 00004b20 00000000!         .long   WGSF_Y_P,scorep,0
    1331 00004b80           LN1b_setup
    1332 00004b80                   JAM_STR wgsf24_ascii,12,0,200,77,WGSF_Y_P,0
    1333 00004c20           LN2b_setup
    1334 00004c20                   JAM_STR wgsf24_ascii,6,0,200,120,WGSF_Y_P,0
    1335 00004cc0           wrdestr_game
    1336 00004cc0       43          .byte   "CHALLENGER",0
    1337 00004d18           wrdestr_over
    1338 00004d18       46          .byte   "FOUND!",0
    1339 00004d50                   .even
    1340                    
    1341                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   30

    1342 00004d50           pprompt
    1343 00004d50       50          .string "PLAYER ",0
    1344 00004d90                   .even
    1345 00004d90           ydid_prompt
    1346 00004d90       20          .string " INFLICTED",0
    1347 00004df0                   .even
    1348 00004df0           pct_damage
    1349 00004df0       25          .string "% OF THE TOTAL DAMAGE!!!",0
    1350 00004ec0                   .even
    1351 00004ec0           pprompt_setup
    1352                            .ref    osgemd_ascii
    1353                    ;       JAM_STR osgmd8_ascii,10,0,200,140,SGMD8YEL,print_string_C2
    1354 00004ec0                   JAM_STR osgemd_ascii,10,0,200,140,BLUE,print_string_C2
    1355 00004f60                   .even
    1356 00004f60           pct_damage_setup
    1357                    ;       JAM_STR osgmd8_ascii,10,0,200,155,SGMD8YEL,print_string_C2
    1358 00004f60                   JAM_STR osgemd_ascii,10,0,200,163,BLUE,print_string_C2
    1359 00005000                   .even
    1360 00018200                   .bss    dmg_ram,16*64
    1361                    
    1362                    *************************************************************************
    1363                    *
    1364 00005000            SUBRP  show_most_damage
    1365 00005000                   PUSHP   a0,a1,a2,a4
    1366 00005020                   PUSHP   a8,a9,a10,a11
    1367                    
    1368 00005040     576b          clr     a11                     ; Clear out plyr damage totals
    1369 00005050     5621          clr     a1                      ; Clear total damage done
    1370 00005060     078b          move    a11,@plyr_dmg_given,L
         00005070 00002390- 
    1371                    
    1372 00005090     09e8          movi    process_ptrs,a8         ; Get process pointers
         000050a0 00000950- 
    1373 000050c0           sajafind_damage_lp
    1374 000050c0     9709          move    *a8+,a9,L               ; Get player process pointer
    1375 000050d0     ca0e          jrz     sajafind_done           ; are we done ? - br = yes
    1376 000050e0     b52a          move    *a9(PLYR_TYPE),a10      ; Get the player type
         000050f0     05a0  
    1377 00005100     cbfb          jrnz    sajafind_damage_lp              ; Is this a drone - br = yes
    1378 00005110     b52b          move    *a9(DAMAGE_GIVEN),a11   ; Get damage this player did
         00005120     0dc0  
    1379 00005130     4161          add     a11,a1                  ; Total the damage
    1380 00005140     b52a          move    *a9(PLYRNUM),a10        ; Which player is this
         00005150     0580  
    1381 00005160     248a          sll     4,a10                   ; Point to temp storage for this player
    1382 00005170     0b2a          addi    plyr_dmg_given,a10
         00005180 00002390- 
    1383 000051a0     816a          move    a11,*a10                ; Store his damage
    1384 000051b0     c0f0          jruc    sajafind_damage_lp              ; Keep going
    1385 000051c0           sajafind_done
    1386 000051c0     182b          movk    1,a11                   ; Set player 1
    1387 000051d0     05a8          move    @plyr_dmg_given,a8      ; Get player 1 damage
         000051e0 00002390- 
    1388 00005200     05a9          move    @plyr_dmg_given+10h,a9  ; Get player 2 damage
         00005210 000023a0- 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   31

    1389 00005230     4909          cmp     a8,a9                   ; Player 1 did more damage ?
    1390 00005240     c402          jrlt    sajap1_most             ; br = yes
    1391 00005250     184b          movk    2,a11                   ; Set player 2
    1392 00005260     4d28          move    a9,a8                   ; Set damage done
    1393 00005270           sajap1_most
    1394 00005270     4d09          move    a8,a9                   ; Set up for conversion to %
    1395 00005280     09ca          movi    100,a10                 ; Mult damage done by 100
         00005290     0064  
    1396 000052a0     5f49          mpyu    a10,a9
    1397 000052b0     5a29          divu    a1,a9                   ; Divide by total damage done
    1398                    
    1399 000052c0     09e2          movi    pprompt_setup,a2        ; Show which player did most damage
         000052d0 00004ec0' 
    1400 000052f0     0d5f          calla   setup_message
         00005300 00000000! 
    1401 00005320     09c4          movi    CLSDEAD,a4
         00005330     2000  
    1402 00005340     0584          move    a4,@mess_objid
         00005350 00000000! 
    1403 00005370     4d60          move    a11,a0
    1404 00005380     1841          movk    2,a1
    1405 00005390     0d5f          calla   dec_to_asc
         000053a0 00000000! 
    1406 000053c0     09e4          movi    pprompt,a4
         000053d0 00004d50' 
    1407 000053f0     0d5f          calla   copy_rom_string
         00005400 00000000! 
    1408 00005420     0d5f          calla   concat_string
         00005430 00000000! 
    1409 00005450     09e4          movi    ydid_prompt,a4
         00005460 00004d90' 
    1410 00005480     0d5f          calla   concat_rom_string
         00005490 00000000! 
    1411 000054b0     09e4          movi    message_buffer,a4
         000054c0 00000000! 
    1412 000054e0     0d5f          calla   print_string_C2
         000054f0 00000000! 
    1413                            
    1414 00005510     09e2          movi    pct_damage_setup,a2     ; Show how much damage he/she did
         00005520 00004f60' 
    1415 00005540     0d5f          calla   setup_message
         00005550 00000000! 
    1416 00005570     09c4          movi    CLSDEAD,a4
         00005580     2000  
    1417 00005590     0584          move    a4,@mess_objid
         000055a0 00000000! 
    1418 000055c0     4d20          move    a9,a0
    1419 000055d0     09c1          movi    100,a1
         000055e0     0064  
    1420 000055f0     0d5f          calla   dec_to_asc
         00005600 00000000! 
    1421 00005620     0d5f          calla   copy_string
         00005630 00000000! 
    1422 00005650     09e4          movi    pct_damage,a4
         00005660 00004df0' 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   32

    1423 00005680     0d5f          calla   concat_rom_string
         00005690 00000000! 
    1424 000056b0     09e4          movi    message_buffer,a4
         000056c0 00000000! 
    1425 000056e0     0d5f          calla   print_string_C2
         000056f0 00000000! 
    1426                            .ref    hscore_colcyc
    1427                    
    1428 00005710     0d5f          calla   hscore_colcyc
         00005720 00000000! 
    1429 00005740     4c08          move    a0,a8
    1430 00005750                   SLEEP   TSEC                    ; Show for 1 second minimum
    1431                    
    1432 000057a0     09c9          movi    TSEC*2,a9               ; Allow upto 2 more seconds
         000057b0     006a  
    1433 000057c0           sajawait_lp
    1434 000057c0                   SLEEPK  1
    1435 00005800     0d5f          calla   get_all_buttons_cur
         00005810 00000000! 
    1436 00005830     cb01          jrnz    sajasd_exit
    1437 00005840     3d29          dsjs    a9,sajawait_lp
    1438 00005850           sajasd_exit
    1439 00005850     4d00          move    a8,a0
    1440 00005860     0d5f          calla   KILL
         00005870 00000000! 
    1441 00005890                   PULLP   a8,a9,a10,a11
    1442 000058b0                   PULLP   a0,a1,a2,a4
    1443 000058d0                   RETP
    1444                    
    1445                    
    1446                    *****************************************************************************
    1447                    ;Copy pXwinstreaks to pXoldwinstreaks, then
    1448                    ;increment winner's winstreak and clear loser's.
    1449                    
    1450 00005900            SUBR   increment_wincount
    1451                    
    1452                            ;save old streaks
    1453 00005900     05ae          move    @p1winstreak,a14
         00005910 000021b0- 
    1454 00005930     058e          move    a14,@p1oldwinstreak
         00005940 000021f0- 
    1455 00005960     05ae          move    @p2winstreak,a14
         00005970 000021c0- 
    1456 00005990     058e          move    a14,@p2oldwinstreak
         000059a0 00002200- 
    1457                    
    1458 000059c0     05a0          move    @match_winner,a0
         000059d0 00002190- 
    1459 000059f0     05ae          move    @PSTATUS2,a14
         00005a00 00000150- 
    1460 00005a20     51c0          and     a14,a0
    1461                    
    1462                            ;inc/clear p1winstreak
    1463 00005a30     05a1          move    @p1winstreak,a1
         00005a40 000021b0- 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   33

    1464 00005a60     1021          inc     a1
    1465 00005a70     1fe0          btst    0,a0
    1466 00005a80     cb01          jrnz    wculp1ok
    1467 00005a90     5621          clr     a1
    1468                    
    1469 00005aa0           wculp1ok        PUSHP   a2
    1470 00005ab0     5642          clr     a2
    1471 00005ac0     0d5f          calla   arm_winstreak_award
         00005ad0 00000000! 
    1472 00005af0                   PULLP   a2
    1473                    
    1474 00005b00     0581          move    a1,@p1winstreak
         00005b10 000021b0- 
    1475 00005b30     4c21          move    a1,a1
    1476 00005b40     cb06          jrnz    wculno_clr_p1_ws_awards
    1477 00005b50     09ee          movi    p1ws_award,a14
         00005b60 00000000! 
    1478 00005b80     0d5f          calla   rst_winstreak_awards
         00005b90 00000000! 
    1479 00005bb0           wculno_clr_p1_ws_awards
    1480                    
    1481                    ;       ;inc/clear p1winstreakd (clear if lost, inc if won vs drones)
    1482                    ;       btst    0,a0
    1483                    ;       jrz     wculclrp1d                      ;clr if we lost
    1484                    ;       move    @p1winstreakd,a1
    1485                    ;       move    @PSTATUS2,a14
    1486                    ;       btst    1,a14
    1487                    ;       jrz     wculincp1d                      ;inc if vs drone
    1488                    ;       jruc    wculp1dset                      ;else no increment
    1489                    ;
    1490                    ;wculincp1d     inc     a1
    1491                    ;       jruc    wculp1dset
    1492                    ;wculclrp1d     clr     a1
    1493                    ;wculp1dset     move    a1,@p1winstreakd
    1494                    
    1495                            ;inc/clear p2winstreak
    1496 00005bb0     05a1          move    @p2winstreak,a1
         00005bc0 000021c0- 
    1497 00005be0     1021          inc     a1
    1498 00005bf0     1fc0          btst    1,a0
    1499 00005c00     cb01          jrnz    wculp2ok
    1500 00005c10     5621          clr     a1
    1501 00005c20           wculp2ok        PUSHP   a2
    1502 00005c30     1822          movk    1,a2
    1503 00005c40     0d5f          calla   arm_winstreak_award
         00005c50 00000000! 
    1504 00005c70                   PULLP   a2
    1505 00005c80     0581          move    a1,@p2winstreak
         00005c90 000021c0- 
    1506 00005cb0     4c21          move    a1,a1
    1507 00005cc0     cb06          jrnz    wculno_clr_p2_ws_awards
    1508 00005cd0     09ee          movi    p2ws_award,a14
         00005ce0 00000000! 
    1509 00005d00     0d5f          calla   rst_winstreak_awards
         00005d10 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   34

    1510 00005d30           wculno_clr_p2_ws_awards
    1511                    
    1512                    ;       ;inc/clear p2winstreakd (clear if lost, inc if won vs drones or
    1513                    ;       ; value < 2.
    1514                    ;       btst    1,a0
    1515                    ;       jrz     wculclrp2d                      ;clr if we lost
    1516                    ;       move    @p2winstreakd,a1
    1517                    ;       move    @PSTATUS2,a14
    1518                    ;       btst    0,a14
    1519                    ;       jrz     wculincp2d                      ;inc if vs drone
    1520                    ;       jruc    wculp2dset                      ;else no increment
    1521                    ;
    1522                    ;wculincp2d     inc     a1
    1523                    ;       jruc    wculp2dset
    1524                    ;wculclrp2d     clr     a1
    1525                    ;wculp2dset     move    a1,@p2winstreakd
    1526                    
    1527                            ;adjust p1&p2winstreakd. three possibilities:
    1528                            ; 1. 2p match.  do nothing
    1529                            ; 2. 1p match, player wins.  inc his winstreak.
    1530                            ; 3. 1p match, player loses.  set both winstreaks to -1, unless
    1531                            ;     they're already negative, in which case we dec both.
    1532                    
    1533 00005d30     05ae          move    @PSTATUS2,a14
         00005d40 00000150- 
    1534 00005d60     0b4e          cmpi    3,a14
         00005d70     fffc  
    1535 00005d80     ca1c          jreq    wculdo_nothing
    1536                    
    1537 00005d90     05a0          move    @match_winner,a0
         00005da0 00002190- 
    1538 00005dc0     480e          cmp     a0,a14
    1539 00005dd0     cb0b          jrne    wculdec_both
    1540                    ;       jruc    wculinc_one
    1541                    
    1542 00005de0           wculinc_one
    1543 00005de0     1420          dec     a0
    1544 00005df0                   X16     a0
    1545 00005e00     0b20          addi    p1winstreakd,a0
         00005e10 000021d0- 
    1546 00005e30     840e          move    *a0,a14
    1547 00005e40     cf01          jrnn    wculib_ok
    1548 00005e50     57ce          clr     a14
    1549 00005e60     102e  wculib_ok       inc     a14
    1550 00005e70     81c0          move    a14,*a0
    1551 00005e80     c00c          jruc    wculdo_nothing
    1552                    
    1553 00005e90           wculdec_both
    1554 00005e90     05ae          move    @p1winstreakd,a14
         00005ea0 000021d0- 
    1555 00005ec0     ce01          jrn     wculdb_ok
    1556 00005ed0     57ce          clr     a14
    1557 00005ee0     142e  wculdb_ok       dec     a14
    1558 00005ef0     058e          move    a14,@p1winstreakd
         00005f00 000021d0- 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   35

    1559 00005f20     058e          move    a14,@p2winstreakd
         00005f30 000021e0- 
    1560                    ;       jruc    wculdo_nothing
    1561                    
    1562 00005f50           wculdo_nothing
    1563                    
    1564 00005f50     0960          rets
    1565                    
    1566                    *****************************************************************************
    1567                    *
    1568                    * This is the master fight process.  It's created once, and it doesn't end
    1569                    * until the entire match is over.  Between rounds, it's just suspended--
    1570                    * it doesn't actually die and get re-created.
    1571                    *
    1572                    
    1573 00005f60            SUBR   start_match
    1574                    
    1575                            ;skip some of this if we're in attract mode
    1576 00005f60     05ae          move    @PSTATUS2,a14
         00005f70 00000150- 
    1577 00005f90     ca20          jrz     tfqxamode_battle
    1578                    
    1579 00005fa0     05ae          move    @total_matches,a14,W
         00005fb0 000022c0- 
    1580 00005fd0     102e          inc     a14
    1581 00005fe0     058e          move    a14,@total_matches,W
         00005ff0 000022c0- 
    1582 00006010     0d5f          CALLA   SPECIAL_WIPEOUT
         00006020 00000000! 
    1583 00006040     57ce          clr     a14                     ; Clear out stuff for finishing moves
    1584 00006050     058e          move    a14,@p1pins
         00006060 00000000! 
    1585 00006080     058e          move    a14,@p2pins
         00006090 00000000! 
    1586 000060b0     058e          move    a14,@finish_completed
         000060c0 00000000! 
    1587                    
    1588 000060e0     09ee          movi    p1mtch_award,a14        ; Reset the per match awards
         000060f0 00000000! 
    1589 00006110     0d5f          calla   rst_awards
         00006120 00000000! 
    1590 00006140     09ee          movi    p1rnd_award,a14         ; Reset the per round awards
         00006150 00000000! 
    1591 00006170     0d5f          calla   rst_awards
         00006180 00000000! 
    1592                    
    1593 000061a0           tfqxamode_battle
    1594                    
    1595 000061a0     0d5f          calla   pal_clean
         000061b0 00000000! 
    1596                    
    1597                    ****    ;routine display initialization
    1598 000061d0     1820          movk    1,a0
    1599 000061e0     0580          move    a0,@dpageflip
         000061f0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   36

    1600 00006210     0580          move    a0,@HALT
         00006220 000006e0- 
    1601                    
    1602                    ****    ;position the scroller
    1603 00006240     0d3f          callr   init_scroller
         00006250     1186  
    1604                    
    1605                    ****    ;If this is the final match, initialize FINAL_PTR.  We can't do
    1606                            ; it in NEXT_IN_LADDER because if we're speeding through the
    1607                            ; rounds, that can happen while wrestler processes from the
    1608                            ; previous round are still active and DEAD, so they gobble up
    1609                            ; the first three slots and we end up with a 1v5 match.
    1610 00006260     0d5f          calla   is_final_match
         00006270 00000000! 
    1611 00006290     c906          jrnc    tfqxdo_zf
    1612 000062a0     09ee          movi    FINAL_BATTLE_LINEUP+24,a14
         000062b0 00000018! 
    1613 000062d0     078e          move    a14,@FINAL_PTR,L
         000062e0 00000000! 
    1614                    
    1615                    ****    ;World Y-position at which power bars toggle in z
    1616 00006300     09e0  tfqxdo_zf       movi    ZFLIP_POS,a0
         00006310 000d8000  
    1617 00006330     0780          move    a0,@ZFLIP_POS_VAR,L
         00006340 00000000! 
    1618                    
    1619                    ****    ;set up the ring.
    1620 00006360     09e0          movi    ring_mod,a0
         00006370 00009c80' 
    1621 00006390     0780          move    a0,@BAKMODS,L
         000063a0 00000000! 
    1622 000063c0     0d5f          calla   BGND_UD1
         000063d0 00000000! 
    1623                    
    1624                    ****    ;init message_flag - clears 'already done' bits for move names
    1625 000063f0     5600          clr     a0
    1626 00006400     0780          move    a0,@message_flag,L
         00006410 00000000! 
    1627 00006430     0780          move    a0,@MESSAGE_FLAGS,L     ;clear which side has a message out
         00006440 00000000! 
    1628 00006460     0580          MOVE    A0,@FLASH_FLAG          ;clear out the 'doing flashes' flag
         00006470 00000000! 
    1629 00006490     0780          MOVE    A0,@COMBO_FLASH_FLAG,L ;clear out combo flashing message
         000064a0 00000000! 
    1630                    
    1631                    ****    ;kill off any perpetual yells that might be going on.
    1632 000064c0     0d5f          CALLA   FIND_AND_KILL_ENDLESS
         000064d0 00000000! 
    1633                    
    1634                    ****    ;create misc stuff like crowd, clocks, a wipe, and some debug stuff.
    1635 000064f0                   CREATE  CROWD_PID,crowd_anim
    1636 00006570                   CREATE  TIMER_PID,match_timer
    1637 000065f0                   CREATE  ZSHIFT_PID,SHIFT_BARS_IN_Z
    1638 00006670                   CREATE  FLASH_PID,maybe_do_flashes
    1639 000066f0     57ce          clr     a14
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   37

    1640 00006700     078e          move    a14,@wrestler_count_proc,L
         00006710 000023c0- 
    1641 00006730     05ae          move    @royal_rumble,a14
         00006740 00000000! 
    1642 00006760     cb04          jrnz    tfqxcreate_wcounter
    1643 00006770     0d5f          calla   is_8_on_1
         00006780 00000000! 
    1644 000067a0     c90b          jrnc    tfqxno_wcounter
    1645 000067b0           tfqxcreate_wcounter
    1646 000067b0                   CREATE  WCOUNT_PID,wrestler_counter
    1647 00006830     0780          move    a0,@wrestler_count_proc,L
         00006840 000023c0- 
    1648 00006860           tfqxno_wcounter
    1649                    
    1650                     .if DIR_DEBUG
    1651                            CREATE  DIR_DEBUG_PID,dir_debug
    1652                     .endif
    1653                    
    1654                     .if SCRT_DEBUG
    1655                            CREATE  SCRT_DEBUG_PID,scrt_debug
    1656                     .endif
    1657                    
    1658                    ****    ;create ropes
    1659                    
    1660 00006860     09cb          movi    ROPE_FRONT,a11
         00006870     0000  
    1661 00006880                   CREATE  ROPE_PID,rope
    1662 00006900     0780          move    a0,@front_rproc,L
         00006910 00002240- 
    1663                    
    1664 00006930     09cb          movi    ROPE_BACK,a11
         00006940     0001  
    1665 00006950                   CREATE  ROPE_PID,rope
    1666 000069d0     0780          move    a0,@back_rproc,L
         000069e0 00002260- 
    1667                    
    1668 00006a00     09cb          movi    ROPE_LEFT,a11
         00006a10     0002  
    1669 00006a20                   CREATE  ROPE_PID,rope
    1670 00006aa0     0780          move    a0,@left_rproc,L
         00006ab0 00002280- 
    1671                    
    1672 00006ad0     09cb          movi    ROPE_RIGHT,a11
         00006ae0     0003  
    1673 00006af0                   CREATE  ROPE_PID,rope
    1674 00006b70     0780          move    a0,@right_rproc,L
         00006b80 000022a0- 
    1675                    
    1676                    ****    ;initialize various other crap
    1677 00006ba0     5600          clr     a0
    1678 00006bb0     0580          move    a0,@match_winner
         00006bc0 00002190- 
    1679 00006be0     0580          MOVE    A0,@DAM_MULT
         00006bf0 00000000! 
    1680 00006c10     0580          MOVE    A0,@combo_audit_done
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   38

         00006c20 00000000! 
    1681 00006c40     0580          move    a0,@no_debris
         00006c50 000022d0- 
    1682 00006c70     0580          move    a0,@any_hits
         00006c80 00002310- 
    1683 00006ca0     0580          MOVE    A0,@PERFECT_WINS
         00006cb0 00000000! 
    1684 00006cd0     0580          MOVE    A0,@MUSIC_HAP
         00006ce0 00000000! 
    1685 00006d00     0780          MOVE    A0,@WINS_OBJ,L 
         00006d10 00000000! 
    1686 00006d30     0780          MOVE    A0,@WINS_OBJ+20H,L 
         00006d40 00000020! 
    1687 00006d60     0780          MOVE    A0,@WINS_OBJ+40H,L 
         00006d70 00000040! 
    1688                    
    1689                            .if     DEBUG
    1690                            move    a0,@instant_death
    1691                            .endif
    1692                    
    1693                    ****    ;increment the battles started audit
    1694 00006d90     09c0          movi    AUD_VSHUMS,a0
         00006da0     0026  
    1695 00006db0     05ae          move    @PSTATUS2,a14
         00006dc0 00000150- 
    1696 00006de0     ca08          JRZ     NO_BATLES_AT_ALL
    1697 00006df0     0b4e          cmpi    03h,a14
         00006e00     fffc  
    1698 00006e10     ca02          jreq    tfqxaud_vshumf
    1699 00006e20     09c0          movi    AUD_VSCPUS,a0
         00006e30     0024  
    1700 00006e40           tfqxaud_vshumf
    1701 00006e40     0d5f          calla   AUD1
         00006e50 00000000! 
    1702 00006e70           NO_BATLES_AT_ALL
    1703                    
    1704                            ;clear out the process_ptrs data
    1705 00006e70     0d3f          callr   CLEAR_PROCESSES
         00006e80     02cf  
    1706                    
    1707                    ****    ;initialize the life and combo bars.
    1708 00006e90     0d5f          calla   init_life_data
         00006ea0 00000000! 
    1709                    
    1710                    ****    ;create wrestler processes
    1711                    
    1712                            ;figure out if it's a 0-, 1-, or 2-player game, and branch.
    1713 00006ec0     05a0          MOVE    @PSTATUS2,A0
         00006ed0 00000150- 
    1714 00006ef0     ca54          jrz     tfqx0plyr
    1715 00006f00     0b40          CMPI    3,A0
         00006f10     fffc  
    1716 00006f20     ca00          JREQ    tfqx2plyr
         00006f30     008f  
    1717                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   39

    1718 00006f40           tfqx1plyr       ;1-player game
    1719                    
    1720                            ;create player process
    1721 00006f40     09c9          movi    PSIDE_PLYR1,a9          ;side on
         00006f50     0000  
    1722 00006f60     574a          clr     a10                     ;plyrnum
    1723 00006f70     05ab          move    @index1,a11             ;wrestlernum
         00006f80 00000000! 
    1724                    
    1725 00006fa0     1fe0          btst    0,A0
    1726 00006fb0     cb06          jrnz    tfqxset
    1727                    
    1728 00006fc0     09c9          movi    PSIDE_PLYR2,a9          ;side on
         00006fd0     0001  
    1729 00006fe0     182a          movk    1,a10                   ;plyrnum
    1730 00006ff0     05ab          move    @index2,a11             ;wrestlernum
         00007000 00000000! 
    1731                    
    1732 00007020     09c8  tfqxset movi    PTYPE_PLAYER,a8         ;player type
         00007030     0000  
    1733 00007040                   SCREATE WMAIN_PID,wrestler_main
    1734 000070c0     0d3f          callr   set_process_ptr2
         000070d0     05bc  
    1735 000070e0                   CREATE  GETUP_PID,getup_meter
    1736                    
    1737                    
    1738 00007160           tfqxndrone      ;create the drone processes
    1739                            ;get the lineup for the coming battle
    1740 00007160     07a4          MOVE    @CURRENT_LADDER,A4,L
         00007170 00000000! 
    1741 00007190     8684          MOVE    *A4,A4,L                ;battle lineup
    1742                    
    1743                            ;drone PLYRNUM's start at 2
    1744 000071a0     184a          MOVK    2,A10
    1745 000071b0     05a3          move    @NUM_OPPS,a3
         000071c0 00000000! 
    1746                    
    1747 000071e0     0d5f  tfqxnxtdrn      CALLA   SORT_OUT_WRESTLER_NUM
         000071f0 00000000! 
    1748                    
    1749                    *jakeeee if you want a specific wrestler, put his number in A11 here !
    1750                    
    1751 00007210     09c8          movi    PTYPE_DRONE,a8          ;player type
         00007220     0001  
    1752                    
    1753                            ;set PLYR_SIDE for ENEMY drones--All these drones are bad guys.
    1754                            ;In a 2v2 match, we can't use this code.
    1755 00007230     09c9          movi    PSIDE_PLYR2,a9
         00007240     0001  
    1756 00007250     05ae          move    @PSTATUS2,a14
         00007260 00000150- 
    1757 00007280     1fee          btst    0,a14                   ;plyr 1 human?
    1758 00007290     cb02          jrnz    tfqxpside_set
    1759 000072a0     09c9          movi    PSIDE_PLYR1,a9
         000072b0     0000  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   40

    1760 000072c0           tfqxpside_set
    1761                    
    1762                     .if DEBUG
    1763                            move    @skip_select,a0
    1764                            jrge    tfqxskp
    1765                            movk    6,a11   ;make him a doink
    1766                    tfqxskp
    1767                     .endif
    1768                    
    1769 000072c0                   SCREATE WMAIN_PID,wrestler_main
    1770 00007340     0d3f          callr   set_process_ptr2
         00007350     0594  
    1771 00007360                   CREATE  GETUP_PID,getup_meter
    1772 000073e0     2f04          SRL     8,A4                            ;shift battle lineup
    1773 000073f0     102a          INC     A10                             ;inc PLYRNUM
    1774 00007400     0d83          dsj     a3,tfqxnxtdrn
         00007410     ffdc  
    1775                    
    1776 00007420     c000          JRUC    tfqxwrestlers_created
         00007430     00da  
    1777                    
    1778                    *****
    1779                    
    1780 00007440           tfqx0plyr       ;0-player (attract mode) game
    1781 00007440     09c8          movi    PTYPE_DRONE,a8                  ;player type
         00007450     0001  
    1782 00007460     09c9          movi    PSIDE_PLYR1,a9                  ;side on
         00007470     0000  
    1783 00007480     184a          movk    2,a10                           ;wres num
    1784 00007490     05ab          move    @index1,a11                     ;wrestler
         000074a0 00000000! 
    1785 000074c0                   SCREATE WMAIN_PID,wrestler_main         ;player 1
    1786 00007540     0d3f          callr   set_process_ptr2
         00007550     0574  
    1787 00007560                   CREATE  GETUP_PID,getup_meter
    1788                    
    1789 000075e0     07a4          move    @CURRENT_LADDER,a4,L
         000075f0 00000000! 
    1790 00007610     8684          move    *a4,a4,L
    1791 00007620     05a3          move    @NUM_OPPS,a3
         00007630 00000000! 
    1792 00007650     09c8          movi    PTYPE_DRONE,a8
         00007660     0001  
    1793 00007670     09c9          movi    PSIDE_PLYR2,a9
         00007680     0001  
    1794 00007690     0d5f  tfqxnxt calla   SORT_OUT_WRESTLER_NUM
         000076a0 00000000! 
    1795 000076c0     2f04          srl     8,a4                            ;shift battle lineup
    1796 000076d0     102a          inc     a10                             ;inc PLYRNUM
    1797 000076e0                   SCREATE WMAIN_PID,wrestler_main
    1798 00007760     0d3f          callr   set_process_ptr2
         00007770     0552  
    1799 00007780                   CREATE  GETUP_PID,getup_meter
    1800 00007800     3f03  tfqxngup        dsj     a3,tfqxnxt
    1801                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   41

    1802 00007810     c000          jruc    tfqxwrestlers_created
         00007820     009b  
    1803                         
    1804                    *****
    1805                            
    1806 00007830           tfqx2plyr       ;2-player game
    1807                    
    1808 00007830     09c8          movi    PTYPE_PLAYER,a8                 ;player type
         00007840     0000  
    1809 00007850     05a0          move    @PSTATUS2,a0
         00007860 00000150- 
    1810 00007880     1fe0          btst    0,a0
    1811 00007890     cb02          jrnz    tfqxok
    1812 000078a0     09c8          movi    PTYPE_DRONE,a8                  ;player type
         000078b0     0001  
    1813 000078c0     09c9  tfqxok  movi    PSIDE_PLYR1,a9                  ;side on
         000078d0     0000  
    1814 000078e0     574a          clr     a10                             ;wres num
    1815 000078f0     05ab          move    @index1,a11                     ;wrestler
         00007900 00000000! 
    1816 00007920                   SCREATE WMAIN_PID,wrestler_main         ;player 1
    1817 000079a0     0d3f          callr   set_process_ptr2
         000079b0     052e  
    1818 000079c0                   CREATE  GETUP_PID,getup_meter
    1819                    
    1820 00007a40     09c8          movi    PTYPE_PLAYER,a8                 ;player type
         00007a50     0000  
    1821 00007a60     05a0          move    @PSTATUS2,a0
         00007a70 00000150- 
    1822 00007a90     1fc0          btst    1,a0
    1823 00007aa0     cb02          jrnz    tfqxok1
    1824 00007ab0     09c8          movi    PTYPE_DRONE,a8                  ;player type
         00007ac0     0001  
    1825 00007ad0     09c9  tfqxok1 movi    PSIDE_PLYR2,a9                  ;side on
         00007ae0     0001  
    1826                    
    1827                            ;if we're in royal rumble mode, second guy is on first team
    1828 00007af0     05ae          move    @royal_rumble,a14
         00007b00 00000000! 
    1829 00007b20     45c9          sub     a14,a9
    1830                    
    1831 00007b30     182a          movk    1,a10                           ;wres num
    1832 00007b40     05ab          move    @index2,a11                     ;wrestler
         00007b50 00000000! 
    1833 00007b70                   SCREATE WMAIN_PID,wrestler_main         ;player 2
    1834 00007bf0     0d3f          callr   set_process_ptr2
         00007c00     0509  
    1835 00007c10                   CREATE  GETUP_PID,getup_meter
    1836                    
    1837                            ;set the 'too late now to choose buddy mode' flag
    1838 00007c90     182e          movk    1,a14
    1839 00007ca0     058e          move    a14,@buddy_mode_checked
         00007cb0 00000000! 
    1840                    
    1841                            ;If they selected buddy mode, add a pair of drones.
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   42

    1842                            ;WE HAVE TO COMPUTE buddy_mode_on OURSELVES, because
    1843                            ; the code that normally does that kind of thing hasn't
    1844                            ; gone off yet.
    1845                            .ref    p1powerup_request
    1846                            .ref    p2powerup_request
    1847 00007cd0     07a8          move    @p1powerup_request,a8,L
         00007ce0 00000000! 
    1848 00007d00     07a9          move    @p2powerup_request,a9,L
         00007d10 00000000! 
    1849 00007d30     5128          and     a9,a8
    1850 00007d40     0b88          andi    BUDDY_MODE,a8
         00007d50 ffffff7f  
    1851 00007d70     0588          move    a8,@buddy_mode_on
         00007d80 00000000! 
    1852 00007da0     ca23          jrz     tfqxno_buddies
    1853                    
    1854 00007db0     0d5f          calla   choose_buddies
         00007dc0 00000000! 
    1855 00007de0                   PUSH    a0,a1           ;store the two wrestlernums
    1856                            
    1857 00007e00     1828          movk    PTYPE_DRONE,a8
    1858 00007e10     09c9          movi    PSIDE_PLYR1,a9
         00007e20     0000  
    1859 00007e30     184a          movk    2,a10
    1860 00007e40                   PULL    a11             ;get the first buddy
    1861 00007e50                   SCREATE WMAIN_PID,wrestler_main
    1862 00007ed0     0d3f          callr   set_process_ptr2
         00007ee0     04db  
    1863                    
    1864 00007ef0     1828          movk    PTYPE_DRONE,a8
    1865 00007f00     1829          movk    PSIDE_PLYR2,a9
    1866 00007f10     186a          movk    3,a10
    1867 00007f20                   PULL    a11             ;get the second buddy
    1868 00007f30                   SCREATE WMAIN_PID,wrestler_main
    1869 00007fb0     0d3f          callr   set_process_ptr2
         00007fc0     04cd  
    1870                    
    1871 00007fd0     c020          jruc    tfqxwrestlers_created
    1872                    
    1873 00007fe0           tfqxno_buddies
    1874                    
    1875                            ;if we're in royal rumble mode, create the starting bad guys.
    1876 00007fe0     05ae          move    @royal_rumble,a14
         00007ff0 00000000! 
    1877 00008010     ca1c          jrz     tfqxwrestlers_created
    1878                    
    1879                            ;you never hit the progress screen in royal_rumble mode, so we've
    1880                            ; got to set up some stuff by hand.
    1881                    
    1882                            .ref    get_royal_lineup
    1883                    
    1884 00008020     0d5f          calla   get_royal_lineup
         00008030 00000000! 
    1885 00008050     09e0          movi    FINAL_BATTLE_LINEUP,a0
         00008060 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   43

    1886 00008080     8601          move    *a0,a1,L
    1887 00008090     0b81          andi    0000FFFFh,a1
         000080a0 ffff0000  
    1888 000080c0     0ba1          ori     02000000h,a1
         000080d0 02000000  
    1889                    
    1890 000080f0     07ae          move    @CURRENT_LADDER,a14,L
         00008100 00000000! 
    1891 00008120     822e          move    a1,*a14,L
    1892 00008130     184e          movk    2,a14
    1893 00008140     058e          move    a14,@NUM_OPPS
         00008150 00000000! 
    1894                    
    1895                            ;set FINAL_PTR to the next guy to fight.
    1896 00008170     0b00          addi    2*8,a0
         00008180     0010  
    1897 00008190     0780          move    a0,@FINAL_PTR,L
         000081a0 00000000! 
    1898                    
    1899 000081c0     c000          jruc    tfqxndrone
         000081d0     fef8  
    1900                    
    1901 000081e0           tfqxwrestlers_created
    1902                    
    1903                    ****    ;create the rewire monitor - this has to be done AFTER all the
    1904                            ; set_process_ptr2's have been called
    1905 000081e0                   CREATE  REWIRE_PID,rewire_monitor
    1906                    
    1907                            ;play the battle music
    1908                    
    1909                     .if    DEBUG
    1910                            movi    40,a3
    1911                            move    @skip_select,a14
    1912                            jrnz    tfqxmarked_snd
    1913                     .endif
    1914                    
    1915 00008260     1a03          movk    16,a3
    1916 00008270     05ae          move    @royal_rumble,a14
         00008280 00000000! 
    1917 000082a0     cb0b          jrnz    music_selected
    1918 000082b0     0d5f          calla   is_8_on_1
         000082c0 00000000! 
    1919 000082e0     c807          jrc     music_selected
    1920 000082f0     1b23          movk    25,a3
    1921 00008300     05ae          move    @hcount,a14
         00008310 c00001c0  
    1922 00008330     2fee          srl     1,a14
    1923 00008340     c901          jrnc    music_selected
    1924 00008350     19e3          movk    15,a3
    1925 00008360           music_selected
    1926 00008360     0583          move    a3,@temp_music
         00008370 000023e0- 
    1927                    
    1928 00008390     0d5f          calla   SNDSND
         000083a0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   44

    1929                    
    1930 000083c0           tfqxmarked_snd
    1931                    
    1932                            ;SET CROWD VOLUME TO 100% OF MASTER VOLUME
    1933 000083c0     09c3          MOVI    55ABH+5,A3
         000083d0     55b0  
    1934 000083e0     0d5f          CALLA   SNDSND
         000083f0 00000000! 
    1935 00008410     09e3          MOVI    0FF00H,A3
         00008420 0000ff00  
    1936 00008440     0d5f          CALLA   SNDSND
         00008450 00000000! 
    1937                            ;and the crowd
    1938 00008470     09c3          movi    2065,a3
         00008480     0811  
    1939 00008490     0d5f          calla   SNDSND
         000084a0 00000000! 
    1940                    
    1941 000084c0     0d5f          CALLA   CLEAR_SPEECH_REPEAT
         000084d0 00000000! 
    1942                    
    1943 000084f0     0d3f          callr   init_joystat
         00008500     0a13  
    1944 00008510     0d3f          callr   init_joy_dtime
         00008520     085c  
    1945                    
    1946 00008530     0d3f          callr   init_reduce_bog
         00008540     0a1b  
    1947                    
    1948 00008550     0d5f          calla   init_special_objlist
         00008560 00000000! 
    1949                    
    1950 00008580     5600          clr     a0
    1951 00008590     0580          move    a0,@match_over
         000085a0 00002170- 
    1952                    
    1953 000085c0     0d5f          CALLA   RESETUP_PROGRESS
         000085d0 00000000! 
    1954 000085f0     0d5f          calla   INIT_SKIRTS
         00008600 00000000! 
    1955                    
    1956 00008620                   SLEEPK  1
    1957                    
    1958 00008660     0d5f          calla   BGND_UD1
         00008670 00000000! 
    1959 00008690                   SLEEPK  1
    1960                    
    1961                    ;       CREATE  SKIRT_PID,CHANGE_SKIRTS
    1962                    
    1963                            ;if this is the first match after attract mode, cue vince.
    1964 000086d0     05ae          move    @total_matches,a14
         000086e0 000022c0- 
    1965 00008700     142e          dec     a14
    1966 00008710     cb19          jrnz    tfqxno_vince_intro
    1967 00008720                   CREATE  SKIRT_PID,CHANGE_SKIRTS
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   45

    1968 000087a0     05a0          move    @PSTATUS2,A0
         000087b0 00000150- 
    1969 000087d0     0b40          CMPI    3,A0
         000087e0     fffc  
    1970 000087f0     cb0b          JRNE    tfqxno_vince_intro
    1971                    
    1972 00008800     09c0          movi    0E0h,a0
         00008810     00e0  
    1973 00008820     0d5f          calla   ADD_VOICE
         00008830 00000000! 
    1974 00008850     09c0          MOVI    01FAH,A0
         00008860     01fa  
    1975 00008870     0d5f          calla   ADD_VOICE
         00008880 00000000! 
    1976 000088a0     c00a          JRUC    INTRO_DONE
    1977                    
    1978 000088b0           tfqxno_vince_intro
    1979 000088b0     18a0          MOVK    5,A0
    1980 000088c0     0d5f          CALLA   RNDRNG0
         000088d0 00000000! 
    1981 000088f0     cb05          JRNZ    INTRO_DONE
    1982 00008900     09c0          MOVI    THIS_IS_FOR_THE_MARBLES,A0
         00008910     0190  
    1983 00008920     0d5f          CALLA   ADD_VOICE
         00008930 00000000! 
    1984 00008950           INTRO_DONE
    1985                    
    1986 00008950     0d5f          calla   BGND_UD1
         00008960 00000000! 
    1987 00008980                   SLEEPK  2
    1988 000089c0     0d5f          calla   BGND_UD1
         000089d0 00000000! 
    1989                    
    1990 000089f0     5708          clr     a8                              ;left meter for player 0
    1991 00008a00     1829          movk    1,a9                            ;right meter for player 1
    1992 00008a10     05a0          move    @PSTATUS2,a0
         00008a20 00000150- 
    1993 00008a40     ca0f          jrz     drone_pointers
    1994                    
    1995 00008a50     05ae          move    @royal_rumble,a14
         00008a60 00000000! 
    1996 00008a80     cb09          jrnz    tfqxrumble_pointers
    1997                    
    1998 00008a90     0b40          cmpi    3,a0
         00008aa0     fffc  
    1999 00008ab0     ca0a          jreq    meter_pointers_set
    2000                    
    2001 00008ac0     1849          movk    2,a9
    2002 00008ad0     2fe0          srl     1,a0
    2003 00008ae0     ca07          jrz     meter_pointers_set
    2004 00008af0     1829          movk    1,a9
    2005 00008b00     1848          movk    2,a8
    2006 00008b10     c004          jruc    meter_pointers_set
    2007                    
    2008 00008b20           tfqxrumble_pointers
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   46

    2009 00008b20     1849          movk    2,a9
    2010 00008b30     c002          jruc    meter_pointers_set
    2011                    
    2012 00008b40           drone_pointers
    2013 00008b40     1848          movk    2,a8
    2014 00008b50     1869          movk    3,a9
    2015 00008b60           meter_pointers_set
    2016 00008b60                   CREATE  METER_PID,meters                ;life/turbo/names
    2017                    
    2018 00008be0     1820          movk    1,a0
    2019 00008bf0     0580          move    a0,@DISPLAYON
         00008c00 00000000! 
    2020                    
    2021 00008c20     5600          clr     a0
    2022 00008c30     0580          move    a0,@IRQSKYE
         00008c40 00000000! 
    2023                    
    2024                            .if DEBUG
    2025                    ;FIX THAT DAM ANNOYING START UP DMA GLITCH !!!!!!!
    2026                            move    @skip_select,a0
    2027                            JRNZ    DONT_OPEN_ANYTHING
    2028                            .endif
    2029                    
    2030 00008c60                   CREATE  SET_IMAGES_PID,DO_SET_IMAGES
    2031                    
    2032 00008ce0                   PUSHP   A0
    2033 00008cf0     1a48          movk    18,a8   ;20
    2034 00008d00     1889          movk    4,a9    ;6
    2035 00008d10                   JSRP    OPEN_PROGRESS_SCREEN
    2036                    ;       movi    PU_CHECK_PID,a0
    2037                    ;       calla   IKIL1C
    2038 00008d80                   PULLP   A0
    2039                    
    2040 00008d90     0d5f          CALLA   KILL
         00008da0 00000000! 
    2041 00008dc0           DONT_OPEN_ANYTHING
    2042 00008dc0     09e0          MOVI    DUMRETS,A0
         00008dd0 00000000! 
    2043 00008df0     0780          MOVE    A0,@WHICH_SCREEN,L
         00008e00 00000000! 
    2044                    
    2045 00008e20     5621          clr     a1
    2046 00008e30     0d3f          callr   get_process_ptr
         00008e40     03f3  
    2047                    ;       clr     a14
    2048                    ;Don't allow meters for the first x seconds of round
    2049 00008e50     09ce          movi    10*60,a14
         00008e60     0258  
    2050 00008e70     b1c0          move    a14,*a0(DELAY_METER)
         00008e80     0ad0  
    2051                    
    2052 00008e90     1821          movk    1,a1
    2053 00008ea0     0d3f          callr   get_process_ptr
         00008eb0     03ec  
    2054                    ;Don't allow meters for the first x seconds of round
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   47

    2055 00008ec0     09ce          movi    14*60,a14
         00008ed0     0348  
    2056 00008ee0     b1c0          move    a14,*a0(DELAY_METER)
         00008ef0     0ad0  
    2057                    
    2058                            ;initialize the bgnd_cntr
    2059 00008f00     182e          movk    1,a14
    2060 00008f10     058e          move    a14,@bgnd_cntr
         00008f20 00002300- 
    2061                    
    2062                            ;initialize annc_rnd_winner_done
    2063 00008f40     57ce          clr     a14
    2064 00008f50     058e          move    a14,@annc_rnd_winner_done
         00008f60 000023f0- 
    2065                    
    2066                    ;       CREATE0 show_options
    2067                    
    2068 00008f80     0d5f  tfqxloop        calla   check_collisions
         00008f90 00000000! 
    2069 00008fb0     0d3f          callr   final_confine
         00008fc0     0e97  
    2070 00008fd0     0d5f          calla   set_images
         00008fe0 00000000! 
    2071                    
    2072                            ;BGND_UD1 every eight ticks.
    2073 00009000     05a2          move    @bgnd_cntr,a2
         00009010 00002300- 
    2074 00009030     3922          dsjs    a2,tfqxno_bg
    2075                    
    2076                            ;time to do it - but if there's a AUDIT_UD_PID process going, wait
    2077                            ; until it dies.  This could lead to a delay of up to three ticks.
    2078 00009040     1022          inc     a2              ;...so that if we skip, we try next tick.
    2079                    
    2080                            ;check this flag instead of using the extremely slow EXISTP
    2081 00009050     05ae          move    @audit_ud_flag,a14
         00009060 00000000! 
    2082 00009080     cb04          jrnz    tfqxno_bg
    2083                            
    2084 00009090     0d5f          calla   BGND_UD1
         000090a0 00000000! 
    2085 000090c0     1902          movk    8,a2
    2086 000090d0     0582  tfqxno_bg       move    a2,@bgnd_cntr
         000090e0 00002300- 
    2087                    
    2088 00009100                   SLEEPK  1
    2089                    
    2090 00009140     0d5f          calla   read_switches
         00009150 00000000! 
    2091                    
    2092 00009170     05a0          move    @match_over,a0
         00009180 00002170- 
    2093 000091a0     ca06          jrz     tfqxnot_over
    2094                    
    2095 000091b0     0d5f          calla   postgame_audits
         000091c0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   48

    2096                    
    2097 000091e0                   RETP
    2098                    
    2099 00009210           tfqxnot_over
    2100                    
    2101 00009210     0d5f          calla   scroll_world
         00009220 00000000! 
    2102                    
    2103 00009240     05a0          move    @round_tickcount,a0
         00009250 00001030- 
    2104 00009270     1020          inc     a0
    2105 00009280     0580          move    a0,@round_tickcount
         00009290 00001030- 
    2106                    
    2107 000092b0     07a0          move    @match_time,a0,L        ;10's & 1's
         000092c0 00002140- 
    2108 000092e0     cbc9          jrnz    tfqxloop
    2109                    
    2110                            .if     DEBUG
    2111                            ;if we're in fight_debug mode, roll the clock around
    2112                            move    @fight_debug,a14
    2113                            jrnz    tfqxwraparound
    2114                            .endif
    2115                    
    2116                            ;if we're in attract mode, roll the clock around
    2117 000092f0     05ae          move    @PSTATUS2,a14
         00009300 00000150- 
    2118 00009320     cb07          jrnz    tfqxnorm
    2119                    
    2120 00009330           tfqxwraparound
    2121 00009330     09ee          movi    00090009h,a14
         00009340 00090009  
    2122 00009360     078e          move    a14,@match_time,L
         00009370 00002140- 
    2123 00009390     c0e7          jruc    tfqxnot_over
    2124                    
    2125 000093a0           tfqxnorm
    2126 000093a0     1820          movk    1,a0
    2127 000093b0     0580          move    a0,@HALT
         000093c0 000006e0- 
    2128                    
    2129                    
    2130                    ;Timer on the round expired
    2131                    
    2132 000093e0     5621          clr     a1
    2133 000093f0     0d3f          callr   get_process_ptr
         00009400     0397  
    2134                    
    2135 00009410     b220          move    a1,*a0(OBJ_XVEL),L
         00009420     02d0  
    2136 00009430     b220          move    a1,*a0(OBJ_YVEL),L
         00009440     02f0  
    2137 00009450     b220          move    a1,*a0(OBJ_ZVEL),L
         00009460     0310  
    2138 00009470     09c1          movi    -1,a1
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   49

         00009480     ffff  
    2139 00009490     0781          move    a1,@MATCH_TIMERS,L      
         000094a0 00000000! 
    2140                    
    2141 000094c0     1821          movk    1,a1
    2142 000094d0     0d3f          callr   get_process_ptr
         000094e0     0389  
    2143                    
    2144 000094f0     5621          clr     a1
    2145 00009500     b220          move    a1,*a0(OBJ_XVEL),L
         00009510     02d0  
    2146 00009520     b220          move    a1,*a0(OBJ_YVEL),L
         00009530     02f0  
    2147 00009540     b220          move    a1,*a0(OBJ_ZVEL),L
         00009550     0310  
    2148 00009560     09c1          movi    -1,a1
         00009570     ffff  
    2149 00009580     0781          move    a1,@MATCH_TIMERS+32,L      
         00009590 00000020! 
    2150                    
    2151 000095b0     0d5f          calla   DO_CROWD_CHEER
         000095c0 00000000! 
    2152                    
    2153 000095e0                   CREATE  CYCPID,CREATE_TIMEOUT
    2154                    
    2155 00009660     09c9          movi    55,a9
         00009670     0037  
    2156 00009680           tfqxwait        SLEEPK  1
    2157 000096c0                   PUSH    a9,a11
    2158 000096e0     0d5f          calla   set_images              ;Make shadows shift...
         000096f0 00000000! 
    2159 00009710                   PULL    a9,a11
    2160 00009730     3d89          dsjs    a9,tfqxwait
    2161                    
    2162 00009740                   CREATE  ANNC_PID,announce_rnd_winner
    2163                            .if DEBUG
    2164                            move    a13,*a0(PDATA),L        ;tfqxCREATOR (pdata)
    2165                            movi    $,a14
    2166                            move    a14,*a0(PDATA+20h),L    ;tfqxORIGIN
    2167                            .endif
    2168                    
    2169 000097c0     1b89          movk    28,a9
    2170 000097d0           tfqxwait1       SLEEPK  1
    2171 00009810                   PUSH    a9,a11
    2172 00009830     0d5f          calla   set_images              ;Make shadows shift...
         00009840 00000000! 
    2173 00009860                   PULL    a9,a11
    2174 00009880     3d89          dsjs    a9,tfqxwait1
    2175                    
    2176                    ;       move    a11,a0
    2177                    ;       calla   KILL
    2178                    
    2179 00009890     09c0          movi    CLSNEUT|TYPTEXT|SUBMES1,a0
         000098a0     0702  
    2180 000098b0     0d5f          calla   obj_del1c               ;delete text/plates
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   50

         000098c0 00000000! 
    2181                    
    2182 000098e0           tfqxwait2       SLEEPK  1
    2183 00009920     0d5f          calla   set_images              ;Make shadows shift...
         00009930 00000000! 
    2184                    ;       move    @HALT,a0
    2185 00009950     09c0          movi    ANNC_PID,a0
         00009960     012e  
    2186 00009970     5621          clr     a1
    2187 00009980     03e1          not     a1
    2188 00009990     0d5f          calla   EXISTP
         000099a0 00000000! 
    2189 000099c0     cbf1          jrnz    tfqxwait2
    2190                    
    2191 000099d0     05a0          move    @p1rounds,a0
         000099e0 00002220- 
    2192 00009a00     0b40          cmpi    2,a0
         00009a10     fffd  
    2193 00009a20     ca06          jrz     tfqxend
    2194 00009a30     05a0          move    @p2rounds,a0
         00009a40 00002230- 
    2195 00009a60     0b40          cmpi    2,a0
         00009a70     fffd  
    2196 00009a80     cb03          jrnz    tfqxnot_end
    2197                    
    2198 00009a90           tfqxend
    2199                    ;Match is over.
    2200 00009a90     0580          move    a0,@match_over
         00009aa0 00002170- 
    2201                    
    2202                    ;Move match winning players match awards to winning players winstread awards,
    2203                    ;annunciate match awards for winning player, then clear get out
    2204                    
    2205 00009ac0           tfqxnot_end
    2206 00009ac0     c000          jruc    tfqxloop
         00009ad0     ff4a  
    2207                    
    2208                    **********
    2209                    ;Is this duplicated effort?  Jason, look into this...
    2210 00009ae0            SUBR   DO_SET_IMAGES
    2211 00009ae0     0d5f          CALLA   set_images
         00009af0 00000000! 
    2212 00009b10                   SLOOP   1,DO_SET_IMAGES
    2213                    
    2214                    **********
    2215                    
    2216 00009b80            SUBR   CLEAR_PROCESSES
    2217                    
    2218 00009b80     5600          clr     a0
    2219 00009b90     09e1          movi    wres0_objs,a1
         00009ba0 00000a30- 
    2220 00009bc0     09c2          movi    NUM_WRES*MAX_PIECES,a2
         00009bd0     002a  
    2221 00009be0           tfqxclr_lp
    2222 00009be0     9201          move    a0,*a1+,L
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   51

    2223 00009bf0     3c42          dsj     a2,tfqxclr_lp
    2224                    
    2225 00009c00     09e1          movi    process_ptrs,a1
         00009c10 00000950- 
    2226 00009c30     09c2          movi    NUM_WRES,a2
         00009c40     0007  
    2227 00009c50           tfqxclr_ptr
    2228 00009c50     9201          move    a0,*a1+,L
    2229 00009c60     3c42          dsj     a2,tfqxclr_ptr
    2230 00009c70     0960          rets
    2231                    
    2232 00009c80           ring_mod
    2233 00009c80 00000000!         .long   ringBMOD        ;wrestling ring
    2234 00009ca0     0069          .word   105,-450        ;x,y
    2235 00009cc0 00000000          .long   0
    2236                    
    2237                    *****************************************************************************
    2238                    *
    2239                    * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    2240                    * can probably get rid of this crap once scroller is finished
    2241                    * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    2242                    
    2243 00009ce0            SUBRP  update_positions
    2244                    
    2245 00009ce0     b5a0          move    *a13(PLYRNUM),a0
         00009cf0     0580  
    2246 00009d00                   X32     a0
    2247                    
    2248 00009d10     4c01          move    a0,a1
    2249 00009d20     0b21          addi    wrestler_x,a1
         00009d30 00001e60- 
    2250 00009d50     b7ae          move    *a13(OBJ_XPOS),a14,L
         00009d60     0100  
    2251 00009d70     83c1          move    a14,*a1,L
    2252                    
    2253 00009d80     4c01          move    a0,a1
    2254 00009d90     0b21          addi    wrestler_y,a1
         00009da0 00001f60- 
    2255                    ;;;;    move    *a13(OBJ_YPOS),a14,L
    2256 00009dc0     b5ae          move    *a13(GROUND_Y),a14
         00009dd0     0570  
    2257 00009de0     260e          sll     16,a14
    2258                    
    2259 00009df0     cf01          jrnn    kcluok
    2260                    
    2261 00009e00     57ce          clr     a14
    2262 00009e10     83c1  kcluok  move    a14,*a1,L
    2263                    
    2264 00009e20     4c01          move    a0,a1
    2265 00009e30     0b21          addi    wrestler_z,a1
         00009e40 00002060- 
    2266 00009e60     b7ae          move    *a13(OBJ_ZPOS),a14,L
         00009e70     0140  
    2267 00009e80     83c1          move    a14,*a1,L
    2268 00009e90     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   52

    2269                    
    2270                    *****************************************************************************
    2271                    *
    2272                    * a8    = player type (PLAYER, DRONE, REFEREE)
    2273                    * a9    = player side (PLYR1, PLYR2, NONE)
    2274                    * a10   = player number
    2275                    * a11   = wrestler number
    2276                    
    2277                    
    2278 00009ea0            SUBRP  wrestler_main
    2279                    
    2280 00009ea0     b10d          move    a8,*a13(PLYR_TYPE)
         00009eb0     05a0  
    2281 00009ec0     b12d          move    a9,*a13(PLYR_SIDE)
         00009ed0     05b0  
    2282 00009ee0     b14d          move    a10,*a13(PLYRNUM)
         00009ef0     0580  
    2283 00009f00     b16d          move    a11,*a13(WRESTLERNUM)
         00009f10     0590  
    2284                    
    2285 00009f20     4d40          MOVE    A10,A0
    2286 00009f30     0b40          CMPI    2,A0
         00009f40     fffd  
    2287 00009f50     c506          JRGE    NO_POINT_ITS_A_DRONE
    2288 00009f60     5621          CLR     A1
    2289 00009f70     24a0          SLL     5,A0
    2290 00009f80     0b20          ADDI    MATCH_TIMERS,A0
         00009f90 00000000! 
    2291 00009fb0     8220          MOVE    A1,*A0,L
    2292 00009fc0           NO_POINT_ITS_A_DRONE
    2293                    
    2294 00009fc0     09c0          movi    112,a0
         00009fd0     0070  
    2295 00009fe0     b00d          move    a0,*a13(OBJ_PRIORITY)
         00009ff0     0160  
    2296                    
    2297 0000a000     0d3f          callr   reset_start
         0000a010     0198  
    2298                    
    2299 0000a020     0d5f          calla   choose_pal              ;sets b0
         0000a030 00000000! 
    2300 0000a050     5621          clr     a1                      ;y pos
    2301 0000a060     09e2          movi    D2ST2B03,a2             ;* image
         0000a070 00000000! 
    2302 0000a090     09c3          movi    110,a3                  ;z pos
         0000a0a0     006e  
    2303 0000a0b0     09e4          movi    DMAWNZ|M_3D,a4          ;DMA flags
         0000a0c0 00008102  
    2304 0000a0e0     b08d          move    a4,*a13(OBJ_CONTROL)
         0000a0f0     0780  
    2305 0000a100     09c5          movi    CLSPLYR | TYPPLYR,a5    ;object ID
         0000a110     4100  
    2306 0000a120     56c6          clr     a6                      ;x vel
    2307 0000a130     56e7          clr     a7                      ;y vel
    2308                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   53

    2309 0000a140     18c9          movk    MAX_PIECES,a9
    2310 0000a150           iuzwnxt_obj
    2311 0000a150                   PUSH    b0
    2312 0000a160     0d5f          calla   BEGINOBJP
         0000a170 00000000! 
    2313 0000a190                   PULL    b0
    2314 0000a1a0     a30a          move    a8,-*a10,L
    2315 0000a1b0     3ce9          dsj     a9,iuzwnxt_obj
    2316                    
    2317 0000a1c0     0d5f          calla   BEGINOBJP
         0000a1d0 00000000! 
    2318 0000a1f0     b30d          move    a8,*a13(ATTIMG_IMG),L
         0000a200     08c0  
    2319 0000a210     5600          clr     a0
    2320 0000a220     b20d          move    a0,*a13(ATTIMG_CUR_FRAME),L
         0000a230     08e0  
    2321 0000a240     b20d          move    a0,*a13(ATTIMG_LAST_FRAME),L
         0000a250     0900  
    2322 0000a260     b00d          move    a0,*a13(GETUP_TIME)
         0000a270     0460  
    2323 0000a280     b00d          move    a0,*a13(COMBO_COUNT)
         0000a290     0af0  
    2324 0000a2a0     b00d          move    a0,*a13(COMBO_START)
         0000a2b0     0b00  
    2325 0000a2c0     b00d          move    a0,*a13(OUTSIDE_ALONE)
         0000a2d0     0b70  
    2326 0000a2e0     b20d          move    a0,*a13(SPECIAL_MOVE_ADDR),L
         0000a2f0     0930  
    2327                    
    2328 0000a300     b20d          move    a0,*a13(LAST_HIT_TIME),L
         0000a310     0c50  
    2329 0000a320     b20d          move    a0,*a13(LAST_FLING_ATTEMPT),L
         0000a330     0df0  
    2330 0000a340     b20d          move    a0,*a13(HIT_GATE_TIME),L
         0000a350     0dd0  
    2331 0000a360     b20d          move    a0,*a13(LAST_HEADHOLD),L
         0000a370     0cd0  
    2332 0000a380     b20d          move    a0,*a13(LAST_FLING),L
         0000a390     0cf0  
    2333 0000a3a0     b20d          move    a0,*a13(LAST_SPUNCH),L
         0000a3b0     0e10  
    2334 0000a3c0     b20d          move    a0,*a13(LAST_SKICK),L
         0000a3d0     0e30  
    2335 0000a3e0     b00d          move    a0,*a13(CONSECUTIVE_HITS)
         0000a3f0     0e50  
    2336 0000a400     b20d          move    a0,*a13(LAST_DAMAGE),L
         0000a410     0d50  
    2337 0000a420     b00d          move    a0,*a13(DAMAGE_GIVEN)
         0000a430     0dc0  
    2338 0000a440     09c0          movi    8*60,a0
         0000a450     01e0  
    2339 0000a460     b00d          move    a0,*a13(DELAY_METER)
         0000a470     0ad0  
    2340                    
    2341 0000a480     b500          move    *a8(OPAL),a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   54

         0000a490     0150  
    2342 0000a4a0     b00d          move    a0,*a13(OBJ_PAL)
         0000a4b0     07a0  
    2343 0000a4c0     b00d          move    a0,*a13(MY_PAL)
         0000a4d0     08a0  
    2344                    
    2345 0000a4e0     09e0          movi    shadow_p,a0
         0000a4f0 00000000! 
    2346 0000a510     0d5f          calla   pal_getf
         0000a520 00000000! 
    2347 0000a540     b7a8          move    *a13(OBJ_BASE),a8,L
         0000a550     0760  
    2348 0000a560     8708          move    *a8,a8,L                ;1st object
    2349 0000a570     b008          move    a0,*a8(OPAL)            ;set palette for shadow
         0000a580     0150  
    2350                    
    2351 0000a590     09c0          movi    MAT_Y,a0
         0000a5a0     003e  
    2352 0000a5b0     b00d          move    a0,*a13(GROUND_Y)
         0000a5c0     0570  
    2353                    
    2354 0000a5d0     5600          clr     a0
    2355 0000a5e0     b00d          move    a0,*a13(ATTACK_TIME)
         0000a5f0     05f0  
    2356 0000a600     b00d          move    a0,*a13(INRING)
         0000a610     0560  
    2357 0000a620     b00d          MOVE    A0,*A13(COMBO_START)
         0000a630     0b00  
    2358 0000a640     b00d          MOVE    A0,*A13(COMBO_COUNT)
         0000a650     0af0  
    2359                    
    2360 0000a660     b20d          move    a0,*a13(OBJ_XVEL),L
         0000a670     02d0  
    2361 0000a680     b20d          move    a0,*a13(OBJ_YVEL),L
         0000a690     02f0  
    2362 0000a6a0     b20d          move    a0,*a13(OBJ_ZVEL),L
         0000a6b0     0310  
    2363 0000a6c0     b20d          move    a0,*a13(SHADTRAIL_PROC),L
         0000a6d0     0a90  
    2364 0000a6e0     b00d          move    a0,*a13(I_WILL_DIE)
         0000a6f0     0b30  
    2365 0000a700     b20d          move    a0,*a13(STATUS_FLAGS),L
         0000a710     0b50  
    2366                    
    2367 0000a720     b00d          move    a0,*a13(BUT_VAL_CUR)
         0000a730     0b90  
    2368 0000a740     b00d          move    a0,*a13(BUT_VAL_DOWN)
         0000a750     0ba0  
    2369 0000a760     b00d          move    a0,*a13(BUT_VAL_UP)
         0000a770     0bb0  
    2370 0000a780     b00d          move    a0,*a13(STICK_VAL_CUR)
         0000a790     0bc0  
    2371 0000a7a0     b00d          move    a0,*a13(STICK_VAL_DOWN)
         0000a7b0     0bd0  
    2372 0000a7c0     b00d          move    a0,*a13(STICK_VAL_UP)
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   55

         0000a7d0     0be0  
    2373 0000a7e0     b00d          move    a0,*a13(STICK_REL_CUR)
         0000a7f0     0bf0  
    2374 0000a800     b00d          move    a0,*a13(STICK_REL_NEW)
         0000a810     0c00  
    2375                    
    2376                    
    2377                    ;       calla   clear_damage_log
    2378 0000a820     0d3f          callr   ani_init                ;start default animation
         0000a830     0213  
    2379                    
    2380 0000a840     05ae          move    @PCNT,a14
         0000a850 00000190- 
    2381 0000a870     b1cd          move    a14,*a13(FOOT_PCNT),W   ;init foot timer
         0000a880     0890  
    2382                    
    2383                     .if COL_DEBUG
    2384                            move    a13,a10
    2385                            CREATE  CDEBUG_PID,collis_debug
    2386                            move    a13,a10
    2387                            CREATE  CDEBUG_PID,collis_debug2
    2388                     .endif
    2389                    
    2390 0000a890     0d5f          calla   init_smoves
         0000a8a0 00000000! 
    2391 0000a8c0     0d5f          calla   set_collision_boxes
         0000a8d0 00000000! 
    2392                    
    2393                            .ref    drone_calcskill
    2394 0000a8f0     0d5f          calla   drone_calcskill
         0000a900 00000000! 
    2395                    
    2396                    ;iuzwwait       MOVE    @VCOUNT,a0
    2397                    ; andi  7,a0
    2398                    ; jrnz  iuzwwait
    2399                    ; TINTON
    2400                    ; move  @VCOUNT,a0
    2401                    ; PUSH  a0
    2402                    
    2403                    
    2404                    ; move  @VCOUNT,a0
    2405                    ; PULL  a1
    2406                    ; sub   a1,a0
    2407                    ; TINTOFF
    2408                    
    2409 0000a920                   SLEEPK  1
    2410                    
    2411 0000a960     0d3f          callr   calc_closest
         0000a970     0683  
    2412                    
    2413 0000a980           iuzwloop
    2414                    ;-----> calla   animate_wrestler
    2415                    
    2416 0000a980     0d5f          calla   ARE_WE_IN_RING
         0000a990 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   56

    2417                    
    2418 0000a9b0     0d5f          calla   set_collision_boxes
         0000a9c0 00000000! 
    2419                    
    2420 0000a9e0     0d3f          callr   confine_wrestler
         0000a9f0     027a  
    2421 0000aa00     0d3f          callr   confine_wrestler_fix2
         0000aa10     0562  
    2422                    
    2423 0000aa20     0d3f          callr   update_newfacing
         0000aa30     0247  
    2424                    
    2425 0000aa40     0d3f          callr   update_positions        ;used by scroller (temp!)
         0000aa50     ff28  
    2426                    
    2427 0000aa60     b5a0          move    *a13(PLYR_TYPE),a0
         0000aa70     05a0  
    2428 0000aa80     ca07          jrz     iuzwhmn                 ;Human?
    2429 0000aa90     b5ae          move    *a13(STATUS_FLAGS),a14
         0000aaa0     0b50  
    2430 0000aab0     1f8e          btst    B_ZOMBIE,a14
    2431 0000aac0     cb03          jrnz    iuzwzmb                 ;Zombie?
    2432 0000aad0     0d5f          calla   drone_main
         0000aae0 00000000! 
    2433 0000ab00           iuzwzmb
    2434 0000ab00           iuzwhmn
    2435                    
    2436                    ;       TINTOFF
    2437 0000ab00     1820          movk    1,a0
    2438 0000ab10     b5ae          move    *a13(STATUS_FLAGS),a14
         0000ab20     0b50  
    2439 0000ab30     1f0e          btst    B_KOD,a14
    2440 0000ab40     ca02          jrz     iuzwslp
    2441 0000ab50     09c0          movi    07fffH,a0
         0000ab60     7fff  
    2442 0000ab70           iuzwslp SLEEPR  a0
    2443                    ;       TINTON
    2444                    
    2445 0000abb0     b5a0          MOVE    *A13(RISK),A0
         0000abc0     0950  
    2446 0000abd0     ca09          JRZ     NO_DECREMENT
    2447 0000abe0     1420          DEC     A0
    2448 0000abf0     b00d          MOVE    A0,*A13(RISK)
         0000ac00     0950  
    2449                    
    2450 0000ac10     0b80          andi    7fffh,a0
         0000ac20 ffff8000  
    2451 0000ac40     cb02          jrnz    NO_DECREMENT
    2452                    ;Turn off taunt high risk move bonus
    2453 0000ac50     b00d          move    a0,*a13(RISK)
         0000ac60     0950  
    2454                    
    2455 0000ac70           NO_DECREMENT
    2456                    
    2457 0000ac70     0d3f          callr   update_joystat
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   57

         0000ac80     07b6  
    2458 0000ac90     0d3f          callr   count_button_presses
         0000aca0     0813  
    2459                    
    2460 0000acb0     0d5f          calla   keep_onscreen
         0000acc0 00000000! 
    2461                    
    2462 0000ace0     0d5f          calla   wrestler_veladd         ;<-------
         0000acf0 00000000! 
    2463 0000ad10     0d3f          callr   wrestler_friction       ;<-------
         0000ad20     0539  
    2464                    
    2465 0000ad30     0d5f          calla   animate_wrestler        ;<-------
         0000ad40 00000000! 
    2466 0000ad60     0d5f          calla   set_collision_boxes     ;<-------
         0000ad70 00000000! 
    2467                    
    2468 0000ad90     0d3f          callr   confine_wrestler        ;<--- temp fix!
         0000ada0     023f  
    2469 0000adb0     0d3f          callr   confine_wrestler_fix1
         0000adc0     0523  
    2470                    
    2471 0000add0     0d3f          callr   calc_closest2
         0000ade0     0622  
    2472                    
    2473 0000adf0     0d3f          callr   move_wrestler
         0000ae00     056e  
    2474                    
    2475                    ;---->  calla   wrestler_veladd
    2476                    ;---->  callr   wrestler_friction
    2477                    
    2478 0000ae10     0d3f          callr   update_links
         0000ae20     01fd  
    2479                    
    2480 0000ae30     0d5f          calla   set_collision_boxes
         0000ae40 00000000! 
    2481 0000ae60     0d5f          calla   overlap_collision
         0000ae70 00000000! 
    2482                    
    2483                    
    2484 0000ae90     b5a0          move    *a13(ANIMODE),a0
         0000aea0     0660  
    2485 0000aeb0     1e40          btst    MODE_KEEPATTACHED_BIT,a0
    2486 0000aec0     ca02          jrz     iuzwno_attach
    2487 0000aed0     0d3f          callr   master_keep_attached
         0000aee0     06e6  
    2488 0000aef0           iuzwno_attach
    2489                    
    2490                    
    2491 0000aef0     b5a0          move    *a13(ANIMODE),a0
         0000af00     0660  
    2492 0000af10     1f80          btst    MODE_NOAUTOFLIP_BIT,a0
    2493 0000af20     cb03          jrnz    iuzwno_flip
    2494 0000af30     4da0          move    a13,a0
    2495 0000af40     0d3f          callr   set_wrestler_xflip
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   58

         0000af50     0210  
    2496 0000af60           iuzwno_flip
    2497                    
    2498 0000af60     0d3f          callr   update_joy_dtime
         0000af70     05de  
    2499                    
    2500                    ;       move    *a13(BURNOUT_COUNT),a0
    2501                    ;       jrz     iuzwskp
    2502                    ;       dec     a0
    2503                    ;       move    a0,*a13(BURNOUT_COUNT)
    2504                    ;iuzwskp
    2505                    ;This is for delaying the reading of buttons just after regaining
    2506                    ;control from being flung.  This will stop inadvertant moves from happening
    2507                    ;while the player is still whacking on his buttons
    2508                    
    2509 0000af80     b5a0          move    *a13(DELAY_BUTNS),a0
         0000af90     0ab0  
    2510 0000afa0     ca03          jrz     iuzwskp2
    2511 0000afb0     1420          dec     a0
    2512 0000afc0     b00d          move    a0,*a13(DELAY_BUTNS)
         0000afd0     0ab0  
    2513 0000afe0           iuzwskp2
    2514                    ;This is for delaying collisions when a player gets up
    2515                    
    2516 0000afe0     b5a0          move    *a13(SAFE_TIME),a0
         0000aff0     0ac0  
    2517 0000b000     ca03          jrz     iuzwskp3
    2518 0000b010     1420          dec     a0
    2519 0000b020     b00d          move    a0,*a13(SAFE_TIME)
         0000b030     0ac0  
    2520 0000b040           iuzwskp3
    2521                    ;This is for delaying the reappearance of a getup meter
    2522                    
    2523 0000b040     b5a0          move    *a13(DELAY_METER),a0
         0000b050     0ad0  
    2524 0000b060     ca03          jrz     iuzwskp4
    2525 0000b070     1420          dec     a0
    2526 0000b080     b00d          move    a0,*a13(DELAY_METER)
         0000b090     0ad0  
    2527 0000b0a0           iuzwskp4
    2528                    ;This is for disallowing movement by wrestler
    2529                    
    2530 0000b0a0     b5a0          move    *a13(IMMOBILIZE_TIME),a0
         0000b0b0     0ae0  
    2531 0000b0c0     ca03          jrz     iuzwskp5
    2532 0000b0d0     1420          dec     a0
    2533 0000b0e0     b00d          move    a0,*a13(IMMOBILIZE_TIME)
         0000b0f0     0ae0  
    2534 0000b100           iuzwskp5
    2535                    ;This is for walking fast powerup
    2536                    
    2537 0000b100     b5a0          move    *a13(WALK_FAST),a0
         0000b110     0b40  
    2538 0000b120     ca04          jrz     iuzwskp6
    2539 0000b130     ce03          jrn     iuzwskp6
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   59

    2540 0000b140     1420          dec     a0
    2541 0000b150     b00d          move    a0,*a13(WALK_FAST)
         0000b160     0b40  
    2542 0000b170           iuzwskp6
    2543 0000b170     b5a0          move    *a13(GETUP_TIME),a0
         0000b180     0460  
    2544 0000b190     ca00          jrz     iuzwloop
         0000b1a0     ff7d  
    2545                    
    2546 0000b1b0     07ae          move    @match_time,a14,L
         0000b1c0 00002140- 
    2547 0000b1e0     cb05          jrnz    iuzwnotend
    2548                    ;Match timer ran out...
    2549 0000b1f0     5600          clr     a0
    2550 0000b200     b00d          move    a0,*a13(GETUP_TIME)
         0000b210     0460  
    2551 0000b220     c000          jruc    iuzwloop
         0000b230     ff74  
    2552 0000b240           iuzwnotend
    2553 0000b240     b5ae          move    *a13(DELAY_METER),a14
         0000b250     0ad0  
    2554 0000b260     ca05          jrz     iuzwreg
    2555                    ;Don't want to allow getup time to be set this close to last time!
    2556                            ;allow the meter to come right back if stay_down is set
    2557                            .if DEBUG
    2558                            move    @stay_down,a14
    2559                            jrnz    iuzwreg
    2560                            .endif
    2561 0000b270     5600          clr     a0
    2562 0000b280     b00d          move    a0,*a13(GETUP_TIME)
         0000b290     0460  
    2563 0000b2a0     ca00          jrz     iuzwloop
         0000b2b0     ff6c  
    2564 0000b2c0           iuzwreg
    2565                    
    2566                            .if DEBUG
    2567                    ;If stay_down flag is set, don't decrement
    2568                            move    @stay_down,a14
    2569                            jrz     iuzwdec
    2570                            inc     a0
    2571                    iuzwdec
    2572                            .endif
    2573 0000b2c0     1420          dec     a0
    2574                    
    2575 0000b2d0     b00d          move    a0,*a13(GETUP_TIME)
         0000b2e0     0460  
    2576 0000b2f0     ca25          jrz     iuzwclr_dizzy
    2577                    
    2578 0000b300           iuzwskip
    2579                    
    2580                    ;NOTE:
    2581                    ;Drones will have to fill up their meter
    2582                    ;at a faster pace!
    2583                    
    2584                    ;Allow players to whack buttons to speed
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   60

    2585                    ;up their recovery from getup_time.
    2586                    ;Remember, the wrestler's meter doesn't have to be visible for him
    2587                    ;to still have a getup time set!
    2588                    ;As long as getup_time has a value, he is stuck.
    2589                    
    2590                            ;get data on this and last ticks
    2591 0000b300     4da0          move    a13,a0
    2592 0000b310     0d5f          calla   wres_get_but_val_down
         0000b320 00000000! 
    2593 0000b340     4c02          move    a0,a2
    2594 0000b350     4da0          move    a13,a0
    2595 0000b360     0d5f          calla   wres_get_stick_val_down
         0000b370 00000000! 
    2596 0000b390     5440          or      a2,a0
    2597 0000b3a0     b5a1          move    *a13(STATUS_FLAGS),a1
         0000b3b0     0b50  
    2598                    
    2599 0000b3c0     4c2e          move    a1,a14
    2600 0000b3d0     0b8e          andni   M_PRESS_LAST,a14
         0000b3e0 00000001  
    2601 0000b400                   TEST    a0
    2602 0000b410     ca03          jrz     iuzwset_flag
    2603 0000b420     0bae          ori     M_PRESS_LAST,a14
         0000b430 00000001  
    2604 0000b450           iuzwset_flag
    2605 0000b450     b1cd          move    a14,*a13(STATUS_FLAGS)
         0000b460     0b50  
    2606                    
    2607 0000b470                   TEST    a0
    2608 0000b480     cb03          jrnz    iuzwdeduct_three
    2609 0000b490     1fe1          BTST    B_PRESS_LAST,a1
    2610 0000b4a0     ca00          jrz     iuzwloop
         0000b4b0     ff4c  
    2611                    
    2612 0000b4c0           iuzwdeduct_three
    2613 0000b4c0     b5ae          move    *a13(GETUP_TIME),a14
         0000b4d0     0460  
    2614 0000b4e0     146e          subk    3,a14
    2615 0000b4f0     cf01          jrnn    iuzwok
    2616 0000b500     57ce          clr     a14
    2617 0000b510           iuzwok
    2618 0000b510     b1cd          move    a14,*a13(GETUP_TIME)
         0000b520     0460  
    2619 0000b530     c100          jrp     iuzwloop
         0000b540     ff43  
    2620                    
    2621                    
    2622 0000b550           iuzwclr_dizzy
    2623 0000b550     5600          clr     a0
    2624 0000b560     b00d          move    a0,*a13(PLYR_DIZZY)
         0000b570     0600  
    2625 0000b580     b00d          move    a0,*a13(STARS_FLAG)     ;Gets rid of them...
         0000b590     07f0  
    2626                    
    2627                    ;Delay button reads
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   61

    2628 0000b5a0     09c0          movi    40,a0
         0000b5b0     0028  
    2629 0000b5c0     b00d          move    a0,*a13(DELAY_BUTNS)
         0000b5d0     0ab0  
    2630                    
    2631 0000b5e0     c000          jruc    iuzwloop
         0000b5f0     ff38  
    2632                    
    2633                    *****************************************************************************
    2634                    
    2635 0000b600            SUBR   reset_for_round
    2636                    
    2637                    ;Reset world and both wrestlers for the start
    2638                    ;of a new round - Called from lifebar.
    2639                    
    2640 0000b600                   PUSH    a13
    2641                    
    2642 0000b610     5621          clr     a1
    2643 0000b620           getwlp0 PUSH    a1
    2644 0000b630     0d3f          callr   reset_wrestle
         0000b640     0025  
    2645 0000b650                   PULL    a1
    2646 0000b660     1021          inc     a1
    2647 0000b670     0b41          cmpi    NUM_WRES,a1
         0000b680     fff8  
    2648 0000b690     c4f8          jrlt    getwlp0
    2649                    
    2650 0000b6a0                   PULL    a13
    2651                    
    2652 0000b6b0     05a0          move    @current_round,a0
         0000b6c0 00002210- 
    2653 0000b6e0     1020          inc     a0
    2654 0000b6f0     0580          move    a0,@current_round
         0000b700 00002210- 
    2655                    
    2656                            ;reset life data
    2657 0000b720     0d5f          calla   init_rnd_life_data
         0000b730 00000000! 
    2658                    
    2659                            ;reset special move processes
    2660 0000b750     0d3f          callr   reset_smoves
         0000b760     0c0b  
    2661                    
    2662                            ;reset match_time
    2663 0000b770     1920          movk    9,a0
    2664 0000b780     0580          move    a0,@match_time          ;10's
         0000b790 00002140- 
    2665 0000b7b0     1920          movk    9,a0
    2666 0000b7c0     0580          move    a0,@match_time+10h      ;1's
         0000b7d0 00002150- 
    2667 0000b7f0     5600          clr     a0
    2668 0000b800     0580          move    a0,@match_time+20h      ;fractional
         0000b810 00002160- 
    2669                    
    2670                            ;reset various other crap
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   62

    2671 0000b830     5600          clr     a0
    2672 0000b840     0580          move    a0,@any_hits
         0000b850 00002310- 
    2673                    
    2674 0000b870     0d3f          callr   init_reduce_bog
         0000b880     06e7  
    2675                    
    2676 0000b890           nobody_home
    2677 0000b890     0960          rets
    2678                    
    2679                    *****************************************************************************
    2680                    
    2681 0000b8a0           reset_wrestle
    2682 0000b8a0     0d3f          callr   get_process_ptr
         0000b8b0     014c  
    2683 0000b8c0     4c0d          move    a0,a13
    2684 0000b8d0     cafb          jrz     nobody_home
    2685                    
    2686 0000b8e0     0d5f          calla   drone_change_back
         0000b8f0 00000000! 
    2687                    
    2688 0000b910     5600          clr     a0
    2689 0000b920     b00d          move    a0,*a13(PLYR_DIZZY_CNT)
         0000b930     0610  
    2690                    ;Don't allow meters for the first x seconds of round
    2691 0000b940     09c0          movi    14*60,a0
         0000b950     0348  
    2692 0000b960     b00d          move    a0,*a13(DELAY_METER)
         0000b970     0ad0  
    2693                    
    2694 0000b980     b5aa          move    *a13(PLYRNUM),a10
         0000b990     0580  
    2695                    
    2696 0000b9a0           reset_start
    2697                    
    2698                            ;choose starting position - our index into the bwlnteamX_starts table
    2699                            ; is the number of teammates with PLYRNUM's lower than ours. (0-2)
    2700 0000b9a0     b5a0          move    *a13(PLYR_SIDE),a0
         0000b9b0     05b0  
    2701 0000b9c0     09e1          movi    process_ptrs,a1
         0000b9d0 00000950- 
    2702 0000b9f0     5642          clr     a2
    2703                    
    2704 0000ba00     962e  bwlnloop0       move    *a1+,a14,L
    2705 0000ba10     cafe          jrz     bwlnloop0               ;skip inactive
    2706 0000ba20     49ae          cmp     a13,a14
    2707 0000ba30     ca06          jreq    bwlnset0                ;hit self -> we're done
    2708 0000ba40     b5ce          move    *a14(PLYR_SIDE),a14
         0000ba50     05b0  
    2709 0000ba60     49c0          cmp     a14,a0
    2710 0000ba70     cbf8          jrne    bwlnloop0
    2711 0000ba80     1022          inc     a2              ;lower PSTATUS2, same PLYR_SIDE, so inc index
    2712 0000ba90     c0f6          jruc    bwlnloop0
    2713                            
    2714 0000baa0           bwlnset0        ;a2 is index.
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   63

    2715 0000baa0                   X64     a2
    2716 0000bab0     09e9          movi    bwlnteam1_starts,a9
         0000bac0 0000bfd0' 
    2717 0000bae0                   TEST    a0              ;team == 0?
    2718 0000baf0     ca03          jrz     bwlnadd
    2719 0000bb00     09e9          movi    bwlnteam2_starts,a9
         0000bb10 0000c090' 
    2720 0000bb30     4049  bwlnadd add     a2,a9
    2721                    
    2722 0000bb40     9520          move    *a9+,a0
    2723 0000bb50     2600          sll     16,a0                   ;x val
    2724 0000bb60     b20d          move    a0,*a13(OBJ_XPOS),L
         0000bb70     0100  
    2725 0000bb80     9520          move    *a9+,a0
    2726 0000bb90     2600          sll     16,a0                   ;z val
    2727 0000bba0     b20d          move    a0,*a13(OBJ_ZPOS),L
         0000bbb0     0140  
    2728                    
    2729 0000bbc0     5600          clr     a0
    2730 0000bbd0     b20d          move    a0,*a13(OBJ_YPOS),L
         0000bbe0     0120  
    2731                    
    2732 0000bbf0     09c0          movi    MAT_Y,a0
         0000bc00     003e  
    2733 0000bc10     b00d          move    a0,*a13(GROUND_Y)
         0000bc20     0570  
    2734                    
    2735                    ;From veladd
    2736 0000bc30     b5a2          move    *a13(GROUND_Y),a2
         0000bc40     0570  
    2737 0000bc50     2602          sll     16,a2
    2738 0000bc60     b7a0          move    *a13(OBJ_YPOS),a0,L
         0000bc70     0120  
    2739 0000bc80     4440          sub     a2,a0                   ;- GROUND_Y
    2740 0000bc90     b7a1          move    *a13(OBJ_YVEL),a1,L
         0000bca0     02f0  
    2741 0000bcb0     4020          add     a1,a0
    2742 0000bcc0     cf03          jrnn    bwlnyok
    2743                    
    2744 0000bcd0     5600          clr     a0
    2745 0000bce0     b20d          move    a0,*a13(OBJ_YVEL),L
         0000bcf0     02f0  
    2746 0000bd00           bwlnyok
    2747 0000bd00     4040          add     a2,a0                   ;+ GROUND_Y
    2748 0000bd10     b20d          move    a0,*a13(OBJ_YPOS),L
         0000bd20     0120  
    2749                    
    2750 0000bd30     4d40          move    a10,a0
    2751 0000bd40                   X32     a0
    2752 0000bd50     0b20          addi    obj_look,a0
         0000bd60 0000c870' 
    2753 0000bd80     8600          move    *a0,a0,L                ;* start of objects
    2754 0000bd90     b20d          move    a0,*a13(OBJ_BASE),L
         0000bda0     0760  
    2755 0000bdb0     4c0a          move    a0,a10
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   64

    2756 0000bdc0     0b0a          addi    32*MAX_PIECES,a10       ;start at end to reverse priorities
         0000bdd0     00c0  
    2757                    
    2758 0000bde0     9520          move    *a9+,a0
    2759 0000bdf0     b00d          move    a0,*a13(NEW_FACING_DIR)
         0000be00     04d0  
    2760 0000be10     b00d          move    a0,*a13(FACING_DIR)
         0000be20     04c0  
    2761                    
    2762 0000be30     5600          clr     a0                      ;x pos
    2763 0000be40     b00d          move    a0,*a13(PLYRMODE)
         0000be50     05c0  
    2764 0000be60     b00d          move    a0,*a13(PLYR_DIZZY)
         0000be70     0600  
    2765 0000be80     b00d          move    a0,*a13(ANIMODE)
         0000be90     0660  
    2766 0000bea0     b00d          move    a0,*a13(ANIMODE2)
         0000beb0     06e0  
    2767                    
    2768                    ;       movi    MAT_Y,a0
    2769                    ;       move    a0,*a13(GROUND_Y)
    2770                    
    2771 0000bec0     5600          clr     a0
    2772                    ;       move    a0,*a13(BURNOUT_COUNT)
    2773 0000bed0     b00d          move    a0,*a13(INRING)
         0000bee0     0560  
    2774                    
    2775 0000bef0     b20d          move    a0,*a13(OBJ_XVEL),L
         0000bf00     02d0  
    2776 0000bf10     b20d          move    a0,*a13(OBJ_YVEL),L
         0000bf20     02f0  
    2777 0000bf30     b20d          move    a0,*a13(OBJ_ZVEL),L
         0000bf40     0310  
    2778                    
    2779                    ;       calla   clear_damage_log
    2780 0000bf50     0d3f          callr   ani_init                ;start default animation
         0000bf60     00a0  
    2781                    
    2782 0000bf70     05ae          move    @PCNT,a14
         0000bf80 00000190- 
    2783 0000bfa0     b1cd          move    a14,*a13(FOOT_PCNT),W   ;init foot timer
         0000bfb0     0890  
    2784                    
    2785 0000bfc0     0960          rets
    2786                    
    2787                            ;X,Z,face_dir,unused for team 0
    2788 0000bfd0           bwlnteam1_starts
    2789 0000bfd0     03dd          .word   RING_X_CENTER-85,1127+93,9,0    ;first player on team
    2790 0000c010     039c          .word   RING_X_CENTER-150,1127+170,9,0  ;second
    2791 0000c050     041e          .word   RING_X_CENTER-20,1127+16,10,0   ;third
    2792                    
    2793                            ;X,Z,face_dir,unused for team 1
    2794 0000c090           bwlnteam2_starts
    2795 0000c090     0487          .word   RING_X_CENTER+85,1103+93,6,0    ;first player on team
    2796 0000c0d0     04c8          .word   RING_X_CENTER+150,1103+170,5,0  ;second
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   65

    2797 0000c110     0446          .word   RING_X_CENTER+20,1103+16,6,0    ;third
    2798                    
    2799                    
    2800                    *****************************************************************************
    2801                    
    2802 0000c150            SUBR   reset_for_round2
    2803                    
    2804 0000c150                   PUSH    a13
    2805                    
    2806 0000c160     57ce          clr     a14
    2807 0000c170     058e          move    a14,@annc_rnd_winner_done
         0000c180 000023f0- 
    2808                    
    2809                    ;un-canned for NUM_WRES wrestlers
    2810                    
    2811 0000c1a0     5621          clr     a1
    2812 0000c1b0           dvrclp1 PUSH    a1
    2813 0000c1c0     0d3f          callr   reset_wrestle2
         0000c1d0     0007  
    2814 0000c1e0                   PULL    a1
    2815 0000c1f0     1021          inc     a1
    2816 0000c200     0b41          cmpi    NUM_WRES,a1
         0000c210     fff8  
    2817 0000c220     c4f8          jrlt    dvrclp1
    2818                    
    2819 0000c230                   PULL    a13
    2820 0000c240     0960          rets
    2821                    
    2822 0000c250           reset_wrestle2
    2823 0000c250     0d3f          callr   get_process_ptr
         0000c260     00b1  
    2824 0000c270     4c0d          move    a0,a13
    2825 0000c280     ca00          jrz     nobody_home
         0000c290     ff5f  
    2826                    
    2827 0000c2a0     0d5f          calla   drone_change_back
         0000c2b0 00000000! 
    2828                    
    2829 0000c2d0     1bc0          movk    30,a0
    2830 0000c2e0     b00d          move    a0,*a13(IMMOBILIZE_TIME)
         0000c2f0     0ae0  
    2831                    
    2832                            ;Re-initialize these variables between rounds
    2833 0000c300     5600          clr     a0
    2834 0000c310     b00d          move    a0,*a13(PLYR_DIZZY_CNT)
         0000c320     0610  
    2835 0000c330     b00d          move    a0,*a13(GETUP_TIME)
         0000c340     0460  
    2836 0000c350     b00d          move    a0,*a13(AUTO_PIN_CNTDOWN)
         0000c360     0c70  
    2837 0000c370     b20d          move    a0,*a13(SPECIAL_MOVE_ADDR),L
         0000c380     0930  
    2838 0000c390     b20d          move    a0,*a13(LAST_HIT_TIME),L
         0000c3a0     0c50  
    2839 0000c3b0     b20d          move    a0,*a13(LAST_FLING_ATTEMPT),L
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   66

         0000c3c0     0df0  
    2840 0000c3d0     b20d          move    a0,*a13(HIT_GATE_TIME),L
         0000c3e0     0dd0  
    2841 0000c3f0     b20d          move    a0,*a13(LAST_HEADHOLD),L
         0000c400     0cd0  
    2842 0000c410     b20d          move    a0,*a13(LAST_SPUNCH),L
         0000c420     0e10  
    2843 0000c430     b20d          move    a0,*a13(LAST_SKICK),L
         0000c440     0e30  
    2844 0000c450     b00d          move    a0,*a13(CONSECUTIVE_HITS)
         0000c460     0e50  
    2845 0000c470     b20d          move    a0,*a13(LAST_FLING),L
         0000c480     0cf0  
    2846 0000c490     b20d          move    a0,*a13(LAST_HIPTOSS),L
         0000c4a0     0d10  
    2847 0000c4b0     b20d          move    a0,*a13(LAST_DAMAGE),L
         0000c4c0     0d50  
    2848                    
    2849                            ;clear STATUS_FLAGS, except for bits in SF_RESET_MASK,
    2850                            ; which should be preserved between rounds.
    2851 0000c4d0     b7ae          move    *a13(STATUS_FLAGS),a14,L
         0000c4e0     0b50  
    2852 0000c4f0     0b8e          andi    SF_RESET_MASK,a14
         0000c500 ffffbffb  
    2853 0000c520     b3cd          move    a14,*a13(STATUS_FLAGS),L
         0000c530     0b50  
    2854                    
    2855                            ;set PTIME to 1, just in case they were KO'd last round.
    2856 0000c540     182e          movk    1,a14
    2857 0000c550     b1cd          move    a14,*a13(PTIME)
         0000c560     0030  
    2858                    
    2859 0000c570     b5aa          move    *a13(PLYRNUM),a10
         0000c580     0580  
    2860                    
    2861 0000c590           reset_start2
    2862 0000c590     0d3f          callr   calc_closest
         0000c5a0     04c0  
    2863 0000c5b0     0d5f          calla   set_collision_boxes
         0000c5c0 00000000! 
    2864 0000c5e0     0d3f          callr   confine_wrestler
         0000c5f0     00ba  
    2865 0000c600     0d3f          callr   update_positions        ;used by scroller (temp!)
         0000c610     fd6c  
    2866 0000c620     0d3f          callr   update_joystat
         0000c630     061b  
    2867 0000c640     0d3f          callr   count_button_presses
         0000c650     0678  
    2868 0000c660     0d5f          calla   wrestler_veladd         ;<-------
         0000c670 00000000! 
    2869 0000c690     0d3f          callr   wrestler_friction       ;<-------
         0000c6a0     03a1  
    2870 0000c6b0     0d5f          calla   set_collision_boxes     ;<-------
         0000c6c0 00000000! 
    2871 0000c6e0     0d3f          callr   confine_wrestler        ;<--- temp fix!
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   67

         0000c6f0     00aa  
    2872 0000c700     0d3f          callr   calc_closest
         0000c710     04a9  
    2873 0000c720     0d3f          callr   move_wrestler
         0000c730     03db  
    2874 0000c740     0d3f          callr   ani_init
         0000c750     0021  
    2875 0000c760     0d3f          callr   update_links
         0000c770     0068  
    2876 0000c780     0d5f          calla   set_collision_boxes
         0000c790 00000000! 
    2877 0000c7b0     0d5f          calla   overlap_collision
         0000c7c0 00000000! 
    2878                    
    2879 0000c7e0     4da0          move    a13,a0
    2880 0000c7f0     0d3f          callr   set_wrestler_xflip
         0000c800     0085  
    2881 0000c810     0d3f          callr   update_joy_dtime
         0000c820     0453  
    2882 0000c830     0d5f          calla   drone_calcskill
         0000c840 00000000! 
    2883                     
    2884 0000c860     0960          rets
    2885                    
    2886                    
    2887                    *****************************************************************************
    2888                    *
    2889                    * wrestler object blocks
    2890                    
    2891 0000c870           obj_look
    2892 0000c870 00000a30-         .long   wres0_objs      ;0
    2893 0000c890 00000af0-         .long   wres1_objs      ;1
    2894 0000c8b0 00000bb0-         .long   wres2_objs      ;2
    2895 0000c8d0 00000c70-         .long   wres3_objs      ;3
    2896 0000c8f0 00000d30-         .long   wres4_objs      ;4
    2897 0000c910 00000df0-         .long   wres5_objs      ;5
    2898 0000c930 00000eb0-         .long   wres6_objs      ;6
    2899 0000c950 00000f70-         .long   wres7_objs      ;7
    2900                    
    2901                    
    2902                    *****************************************************************************
    2903                    *
    2904                    * initializes animations for each wrestler
    2905                    *
    2906                    * a13 = * wrestler process
    2907                    
    2908 0000c970            SUBR   ani_init
    2909                    
    2910                    
    2911 0000c970     09c0          movi    100h,a0
         0000c980     0100  
    2912 0000c990     b00d          move    a0,*a13(ANI_SPEED)      ;normal speed animations
         0000c9a0     0650  
    2913                    
    2914 0000c9b0     5600          clr     a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   68

    2915 0000c9c0     b00d          move    a0,*a13(I_WILL_DIE)
         0000c9d0     0b30  
    2916                            .ref    hyper_speed_on
    2917                    
    2918 0000c9e0     05ae          move    @hyper_speed_on,a14
         0000c9f0 00000000! 
    2919 0000ca10     b1cd          move    a14,*a13(WALK_FAST)
         0000ca20     0b40  
    2920                    ;       move    a0,*a13(WALK_FAST)
    2921                    
    2922 0000ca30     b20d          move    a0,*a13(ATTIMG_CUR_FRAME),L
         0000ca40     08e0  
    2923                    
    2924 0000ca50     b5a0          move    *a13(WRESTLERNUM),a0
         0000ca60     0590  
    2925 0000ca70                   X32     a0
    2926 0000ca80     0b20          addi    uoidinit_addr,a0
         0000ca90 0000cae0' 
    2927 0000cab0     8600          move    *a0,a0,L
    2928 0000cac0     0920          call    a0
    2929                    
    2930 0000cad0     0960          rets
    2931                    
    2932 0000cae0           uoidinit_addr
    2933 0000cae0 00000000!         .long   bret_ani_init   ;0 Bret Hart
    2934 0000cb00 00000000!         .long   razor_ani_init  ;1 Razor Ramon
    2935 0000cb20 00000000!         .long   taker_ani_init  ;2 Undertaker
    2936 0000cb40 00000000!         .long   yoko_ani_init   ;3 Yokozuna
    2937 0000cb60 00000000!         .long   shawn_ani_init  ;4 Shawn Michaels
    2938 0000cb80 00000000!         .long   bam_ani_init    ;5 Bam Bam
    2939 0000cba0 00000000!         .long   doink_ani_init  ;6 Doink
    2940 0000cbc0 00000000!         .long   doink_ani_init  ;7 spare
    2941 0000cbe0 00000000!         .long   lex_ani_init    ;8 Lex Luger
    2942 0000cc00 00000000          .long   0               ;9 Referee
    2943                    
    2944                    
    2945                    *****************************************************************************
    2946                    * a13 = ptr to process
    2947                    * a1 = player/drone number 0-?
    2948                    
    2949                    ;old version - used by PROGRESS.ASM
    2950                    
    2951 0000cc20            SUBR   set_process_ptr
    2952                    
    2953 0000cc20                   PUSH    a1
    2954 0000cc30                   X32     a1
    2955 0000cc40     0b21          addi    process_ptrs,a1
         0000cc50 00000950- 
    2956 0000cc70     83a1          move    a13,*a1,L
    2957 0000cc80                   PULL    a1
    2958 0000cc90     0960          rets
    2959                    
    2960                    *****************************************************************************
    2961                    * a0 = ptr to process
    2962                    * a9 = side (0 or 1)
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   69

    2963                    * a10 = player/drone number 0-?
    2964                    * a11 = WRESTLERNUM
    2965                    
    2966                    ;new version - used here in WRESTLE.ASM because the new pal selector routine
    2967                    ; requires that process_ptrs are all set up before any of the wrestler
    2968                    ; processes actually wake up.  set_process_ptr2 is called by the code that
    2969                    ; creates wrestler_main procs, not by wrestler_main itself.
    2970                    
    2971                    ;it also sets PLYRNUM and WRESTLERNUM, 'cuz the pal thing needs those
    2972                    ; too.  What a pain, eh? (And now PLYR_SIDE, too)
    2973                    
    2974 0000cca0            SUBRP  set_process_ptr2
    2975                    
    2976 0000cca0                   PUSH    a10
    2977 0000ccb0                   X32     a10
    2978 0000ccc0     0b2a          addi    process_ptrs,a10
         0000ccd0 00000950- 
    2979 0000ccf0     820a          move    a0,*a10,L
    2980 0000cd00                   PULL    a10
    2981                    
    2982 0000cd10     b120          move    a9,*a0(PLYR_SIDE)
         0000cd20     05b0  
    2983 0000cd30     b140          move    a10,*a0(PLYRNUM)
         0000cd40     0580  
    2984 0000cd50     b160          move    a11,*a0(WRESTLERNUM)
         0000cd60     0590  
    2985                    
    2986 0000cd70     0960          rets
    2987                    
    2988                    *****************************************************************************
    2989                    * a1 = player/drone number 0-?
    2990                    * returns ptr in a0
    2991                    
    2992 0000cd80            SUBR   get_process_ptr
    2993                    
    2994 0000cd80                   PUSH    a1
    2995 0000cd90                   X32     a1
    2996 0000cda0     0b21          addi    process_ptrs,a1
         0000cdb0 00000950- 
    2997 0000cdd0     8620          move    *a1,a0,L
    2998 0000cde0                   PULL    a1
    2999 0000cdf0     0960          rets
    3000                    
    3001                    *****************************************************************************
    3002                    *
    3003                    * a13 = * to wrestler process
    3004                    *
    3005                    * breaks links if both wrestlers not attached to each other
    3006                    *
    3007                    
    3008 0000ce00            SUBRP  update_links
    3009                    
    3010 0000ce00     b7a1          move    *a13(ATTACH_PROC),a1,L          ;proc attached to
         0000ce10     03e0  
    3011 0000ce20     ca07          jrz     hczwexit                                ;not attached
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   70

    3012 0000ce30     b620          move    *a1(ATTACH_PROC),a0,L
         0000ce40     03e0  
    3013 0000ce50     480d          cmp     a0,a13                          ;pointing to each other?
    3014 0000ce60     ca03          jreq    hczwexit                                ;ok
    3015                    
    3016 0000ce70     5600          clr     a0
    3017 0000ce80     b20d          move    a0,*a13(ATTACH_PROC),L
         0000ce90     03e0  
    3018 0000cea0     0960  hczwexit        rets
    3019                    
    3020                    *****************************************************************************
    3021                    *
    3022                    
    3023 0000ceb0            SUBRP  update_newfacing
    3024                    
    3025                    
    3026 0000ceb0     0d3f          callr   get_opp_process         ;closest opponent process
         0000cec0     054f  
    3027 0000ced0     4c0a          move    a0,a10
    3028                    
    3029 0000cee0     09c0          movi    MOVE_RIGHT,a0
         0000cef0     0008  
    3030 0000cf00     b7a2          move    *a13(OBJ_XPOS),a2,L
         0000cf10     0100  
    3031 0000cf20     b743          move    *a10(OBJ_XPOS),a3,L
         0000cf30     0100  
    3032 0000cf40     4843          cmp     a2,a3           ;a3-a2
    3033 0000cf50     c702          jrgt    qeolright
    3034 0000cf60     09c0          movi    MOVE_LEFT,a0
         0000cf70     0004  
    3035                    
    3036 0000cf80     09c1  qeolright       movi    MOVE_DOWN,a1
         0000cf90     0002  
    3037 0000cfa0     b7a2          move    *a13(OBJ_ZPOS),a2,L
         0000cfb0     0140  
    3038 0000cfc0     b743          move    *a10(OBJ_ZPOS),a3,L
         0000cfd0     0140  
    3039 0000cfe0     4843          cmp     a2,a3           ;a3-a2
    3040 0000cff0     c702          jrgt    qeoldown
    3041 0000d000     09c1          movi    MOVE_UP,a1
         0000d010     0001  
    3042                    
    3043 0000d020     5420  qeoldown        or      a1,a0
    3044 0000d030     b00d          move    a0,*a13(NEW_FACING_DIR)
         0000d040     04d0  
    3045                    
    3046 0000d050     0960          rets
    3047                    
    3048                    *****************************************************************************
    3049                    *
    3050                    * sets x-flip based on facing direction
    3051                    *
    3052                    * a0 = * wrestler process
    3053                    
    3054                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   71

    3055 0000d060            SUBR   set_wrestler_xflip
    3056                    
    3057 0000d060     b40e          move    *a0(FACING_DIR),a14
         0000d070     04c0  
    3058 0000d080     1f8e          btst    PLAYER_RIGHT_BIT,a14
    3059 0000d090     cb08          jrnz    mtyqright
    3060                    
    3061 0000d0a0     b40e          move    *a0(OBJ_CONTROL),a14
         0000d0b0     0780  
    3062 0000d0c0     0bae          ori     M_FLIPH,a14
         0000d0d0 00000010  
    3063 0000d0f0     b1c0          move    a14,*a0(OBJ_CONTROL)
         0000d100     0780  
    3064                    
    3065 0000d110     0960          rets
    3066                    
    3067 0000d120     b40e  mtyqright       move    *a0(OBJ_CONTROL),a14
         0000d130     0780  
    3068 0000d140     0b8e          andni   M_FLIPH,a14
         0000d150 00000010  
    3069 0000d170     b1c0          move    a14,*a0(OBJ_CONTROL)
         0000d180     0780  
    3070                    
    3071 0000d190     0960          rets
    3072                    
    3073                    *****************************************************************************
    3074                    *
    3075                    * confines wrestler in/out of ring
    3076                    * and sets CAN_MOVE_DIR bits
    3077                    *
    3078                    
    3079 0000d1a0            SUBRP  confine_wrestler
    3080                    
    3081 0000d1a0     56e7          clr     a7                      ;can move in all directions
    3082                    
    3083 0000d1b0     b5a0          move    *a13(ANIMODE),a0
         0000d1c0     0660  
    3084 0000d1d0     1f00          btst    MODE_NOCONFINE_BIT,a0
    3085 0000d1e0     cb00          jrnz    tmvnno_confine
         0000d1f0     016b  
    3086                    
    3087 0000d200     b5a0          move    *a13(PLYRMODE),a0
         0000d210     05c0  
    3088 0000d220     0b40          cmpi    MODE_ATTACHED,a0
         0000d230     fffc  
    3089 0000d240     ca00          jreq    tmvnno_confine
         0000d250     0165  
    3090                    
    3091 0000d260     b5a0          move    *a13(INRING),a0
         0000d270     0560  
    3092 0000d280     cb00          jrnz    tmvnoutring
         0000d290     0164  
    3093                    
    3094                            ;We're inside the ring
    3095                            ;Check against the top ropes.
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   72

    3096 0000d2a0     09c0          movi    RING_TOP,a0
         0000d2b0     03ff  
    3097 0000d2c0     b5a5          move    *a13(OBJ_ZPOSINT),a5
         0000d2d0     0150  
    3098 0000d2e0     4805          cmp     a0,a5                   ;zpos - top
    3099 0000d2f0     c70d          jrgt    tmvnzu_ok
    3100 0000d300     ca08          jreq    tmvnno_u
    3101                    
    3102                            ;set Z to top of ring
    3103 0000d310     b00d          move    a0,*a13(Z_BOUND)
         0000d320     04a0  
    3104 0000d330     2600          sll     16,a0
    3105 0000d340     b20d          move    a0,*a13(OBJ_ZPOS),L
         0000d350     0140  
    3106                    
    3107                            ;climb out if allowed
    3108 0000d360     0d5f          calla   ck_climb_out_top
         0000d370 00000000! 
    3109                    
    3110 0000d390           tmvnno_u        ;just inside - don't adjust, but don't go any further.
    3111 0000d390     0ba7          ori     MOVE_UP,a7              ;can't move up
         0000d3a0 00000001  
    3112 0000d3c0     c014          jruc    tmvncheck_x
    3113                    
    3114 0000d3d0           tmvnzu_ok       ;Check aginst bottom ropes
    3115 0000d3d0     09c0          movi    RING_BOT,a0             ;zpos - bot
         0000d3e0     0541  
    3116 0000d3f0     4805          cmp     a0,a5
    3117 0000d400     c40d          jrlt    tmvnzd_ok
    3118 0000d410     ca08          jreq    tmvnno_d
    3119                    
    3120                            ;set Z to bottom of ring
    3121 0000d420     b00d          move    a0,*a13(Z_BOUND)
         0000d430     04a0  
    3122 0000d440     2600          sll     16,a0
    3123 0000d450     b20d          move    a0,*a13(OBJ_ZPOS),L
         0000d460     0140  
    3124                    
    3125                            ;climb out if allowed
    3126 0000d470     0d5f          calla   ck_climb_out_bot
         0000d480 00000000! 
    3127                    
    3128 0000d4a0           tmvnno_d        ;just inside - don't adjust, but don't go any further.
    3129 0000d4a0     0ba7          ori     MOVE_DOWN,a7            ;can't move down
         0000d4b0 00000002  
    3130 0000d4d0     c003          jruc    tmvncheck_x
    3131                    
    3132 0000d4e0           tmvnzd_ok       ;no z problems.  zero Z_BOUND
    3133 0000d4e0     57ce          clr     a14
    3134 0000d4f0     b1cd          move    a14,*a13(Z_BOUND)
         0000d500     04a0  
    3135                    
    3136 0000d510           tmvncheck_x
    3137                            ;Check left edge of collision box against left rope
    3138 0000d510     b5a5          move    *a13(OBJ_COLLX1),a5
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   73

         0000d520     01e0  
    3139                    
    3140                            ;first see if we're even in the ballpark.
    3141 0000d530     09e6          movi    vln_left_rope,a6
         0000d540 00003900- 
    3142 0000d560     84c0          move    *a6,a0                  ;x1
    3143 0000d570     4805          cmp     a0,a5                   ;xpos - x2
    3144 0000d580     c700          jrgt    tmvnxl_ok
         0000d590     0093  
    3145                    
    3146                            ;close enough for a more careful check...
    3147 0000d5a0     0d3f          callr   calc_line_x
         0000d5b0     08ec  
    3148 0000d5c0     4805          cmp     a0,a5                   ;xpos - a0
    3149 0000d5d0     c700          jrgt    tmvnxl_ok
         0000d5e0     008e  
    3150 0000d5f0     ca00          jreq    tmvnno_l
         0000d600     0087  
    3151                    
    3152                    
    3153                            ;we're past the left rope.  see if we're attached
    3154 0000d610     b7ae          move    *a13(ATTACH_PROC),a14,L
         0000d620     03e0  
    3155 0000d630     ca4f          jrz     tmvnnot
    3156                    
    3157                            ;I'm attached, which means both me and my opponent are gonna get
    3158                            ; moved.  Figure the right amount, apply it to both of us, then
    3159                            ; wobble the ropes and bounce both of us away.
    3160                    
    3161                            ;a0 is rope X, a5 is left edge of our collbox.  Move us and our
    3162                            ; opponent right (a0 - a5) pixels.
    3163 0000d640     44a0          sub     a5,a0
    3164 0000d650     b5ae          move    *a13(OBJ_XPOSINT),a14
         0000d660     0110  
    3165 0000d670     400e          add     a0,a14
    3166 0000d680     b1cd          move    a14,*a13(OBJ_XPOSINT)
         0000d690     0110  
    3167                    
    3168 0000d6a0     b7a5          move    *a13(ATTACH_PROC),a5,L
         0000d6b0     03e0  
    3169 0000d6c0     b4ae          move    *a5(OBJ_XPOSINT),a14
         0000d6d0     0110  
    3170 0000d6e0     400e          add     a0,a14
    3171 0000d6f0     b1c5          move    a14,*a5(OBJ_XPOSINT)
         0000d700     0110  
    3172                    
    3173                            ;If either I or my opponent has a nonzero X velocity other than
    3174                            ; 40000h, give us both Xvel 40000h, Yvel 30000h.
    3175                    
    3176                            ;Skip the velocity crap if I'm on the ground.
    3177 0000d710     b5a0          move    *a13(GROUND_Y),a0
         0000d720     0570  
    3178 0000d730     b5a1          move    *a13(OBJ_YPOSINT),a1
         0000d740     0130  
    3179 0000d750     4801          cmp     a0,a1
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   74

    3180 0000d760     ca71          jreq    tmvnno_l
    3181                    
    3182 0000d770     b7ae          move    *a13(OBJ_XVEL),a14,L
         0000d780     02d0  
    3183 0000d790     ca05          jrz     tmvnlr_check_opp
    3184 0000d7a0     0b6e          cmpi    [4,0],a14
         0000d7b0 fffbffff  
    3185 0000d7d0     cb01          jrne    tmvnlr_check_opp
    3186 0000d7e0     c008          jruc    tmvnlr_set_vels
    3187                    
    3188 0000d7f0           tmvnlr_check_opp
    3189 0000d7f0     b6ae          move    *a5(OBJ_XVEL),a14,L
         0000d800     02d0  
    3190 0000d810     ca66          jrz     tmvnno_l
    3191 0000d820     0b6e          cmpi    [4,0],a14
         0000d830 fffbffff  
    3192 0000d850     cb01          jrne    tmvnlr_set_vels
    3193 0000d860     c061          jruc    tmvnno_l
    3194                    
    3195 0000d870           tmvnlr_set_vels
    3196                            ;X vel
    3197 0000d870     09ee          movi    [4,0],a14
         0000d880 00040000  
    3198 0000d8a0     b3cd          move    a14,*a13(OBJ_XVEL),L
         0000d8b0     02d0  
    3199 0000d8c0     b3c5          move    a14,*a5(OBJ_XVEL),L
         0000d8d0     02d0  
    3200                    
    3201                            ;Y vel
    3202                            ;Wait!  Don't muck with the Y vels if they're already above 30000h.
    3203 0000d8e0     b7ae          move    *a13(OBJ_YVEL),a14,L
         0000d8f0     02f0  
    3204 0000d900     0b6e          cmpi    30000h,a14
         0000d910 fffcffff  
    3205 0000d930     c70d          jrgt    tmvnnyv1
    3206 0000d940     b6ae          move    *a5(OBJ_YVEL),a14,L
         0000d950     02f0  
    3207 0000d960     0b6e          cmpi    30000h,a14
         0000d970 fffcffff  
    3208 0000d990     c707          jrgt    tmvnnyv1
    3209 0000d9a0     09ee          movi    [3,0],a14
         0000d9b0 00030000  
    3210 0000d9d0     b3cd          move    a14,*a13(OBJ_YVEL),L
         0000d9e0     02f0  
    3211 0000d9f0     b3c5          move    a14,*a5(OBJ_YVEL),L
         0000da00     02f0  
    3212                    
    3213 0000da10           tmvnnyv1        ;...and wobble the ropes
    3214 0000da10                   PUSH    a0,a5
    3215 0000da30     09c0          movi    ROPE_LEFT,a0
         0000da40     0002  
    3216 0000da50     1822          movk    1,a2
    3217 0000da60     09c1          movi    ROPE_BOUNCEIO,a1
         0000da70     0001  
    3218 0000da80     0d5f          calla   rope_command
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   75

         0000da90 00000000! 
    3219                    
    3220 0000dab0     09c0          movi    3ch,a0
         0000dac0     003c  
    3221 0000dad0     0d5f          calla   triple_sound
         0000dae0 00000000! 
    3222                    
    3223 0000db00                   PULL    a0,a5
    3224                    
    3225 0000db20     c035          jruc    tmvnno_l
    3226                    
    3227 0000db30           tmvnnot
    3228                            ;we're not attached
    3229                            ;line me up flush against the left rope
    3230 0000db30     b5ae          move    *a13(OBJ_XPOSINT),a14
         0000db40     0110  
    3231 0000db50     44ae          sub     a5,a14
    3232 0000db60     41c0          add     a14,a0
    3233 0000db70     b00d          move    a0,*a13(X_BOUND)
         0000db80     0490  
    3234 0000db90     2600          sll     16,a0
    3235 0000dba0     b20d          move    a0,*a13(OBJ_XPOS),L
         0000dbb0     0100  
    3236                    
    3237 0000dbc0     b5a0          move    *a13(INRING),a0
         0000dbd0     0560  
    3238 0000dbe0     cb29          jrnz    tmvnno_l                                ;Am outside.
    3239                            ;climb out the side if allowed
    3240 0000dbf0     0d5f          calla   ck_climb_out_side
         0000dc00 00000000! 
    3241                    
    3242                    ;Has hit left rope
    3243                    ;Wobble ropes and bounce off of them upon first hit.
    3244 0000dc20     b5a0          move    *a13(MOVE_DIR),a0
         0000dc30     04b0  
    3245 0000dc40     cb23          jrnz    tmvnno_l
    3246                    
    3247 0000dc50     b7a0          move    *a13(OBJ_XVEL),a0,L
         0000dc60     02d0  
    3248 0000dc70     ca20          jrz     tmvnno_l
    3249                    
    3250                            ;Skip the velocity crap if I'm on the ground.
    3251 0000dc80     b5a0          move    *a13(GROUND_Y),a0
         0000dc90     0570  
    3252 0000dca0     b5a1          move    *a13(OBJ_YPOSINT),a1
         0000dcb0     0130  
    3253 0000dcc0     4801          cmp     a0,a1
    3254 0000dcd0     ca1a          jreq    tmvnno_l
    3255                    
    3256                    ;We also should check YPOS also.  Ropes shouldn't wobble if
    3257                    ;not hit.
    3258                    
    3259 0000dce0     b7a0          move    *a13(OBJ_XVEL),a0,L
         0000dcf0     02d0  
    3260 0000dd00     09e7          movi    [3,0001],a7
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   76

         0000dd10 00030001  
    3261 0000dd30     b2ed          move    a7,*a13(OBJ_XVEL),L
         0000dd40     02d0  
    3262 0000dd50     0b80          andi    0ffffH,a0
         0000dd60 ffff0000  
    3263 0000dd80     0b40          cmpi    1,a0
         0000dd90     fffe  
    3264 0000dda0     ca0d          jrz     tmvnno_l
    3265                    
    3266                    ;This is the first time we have collided with ropes.
    3267                    ;Wobble them.
    3268                    
    3269 0000ddb0     09c0          movi    ROPE_LEFT,a0
         0000ddc0     0002  
    3270 0000ddd0     1822          movk    1,a2
    3271 0000dde0     09c1          movi    ROPE_BOUNCEIO,a1
         0000ddf0     0001  
    3272 0000de00     0d5f          calla   rope_command
         0000de10 00000000! 
    3273                    
    3274 0000de30     09c0          movi    3ch,a0
         0000de40     003c  
    3275 0000de50     0d5f          calla   triple_sound
         0000de60 00000000! 
    3276                    
    3277 0000de80           tmvnno_l
    3278 0000de80     0ba7          ori     MOVE_LEFT,a7            ;can't move left
         0000de90 00000004  
    3279 0000deb0     c000          jruc    tmvndone
         0000dec0     009e  
    3280                    
    3281 0000ded0           tmvnxl_ok
    3282                            ;Check right edge of collision box against right ropes
    3283 0000ded0     b5a5          move    *a13(OBJ_COLLX2),a5
         0000dee0     01f0  
    3284                    
    3285                            ;first see if we're even in the ballpark.
    3286 0000def0     09e6          movi    vln_right_rope,a6
         0000df00 00002400- 
    3287 0000df20     84c0          move    *a6,a0                  ;x1
    3288 0000df30     4805          cmp     a0,a5                   ;xpos - x1
    3289 0000df40     c400          jrlt    tmvnxr_ok
         0000df50     0095  
    3290                    
    3291                            ;close enough for a more careful check...
    3292 0000df60     0d3f          callr   calc_line_x
         0000df70     0850  
    3293 0000df80     4805          cmp     a0,a5                   ;xpos - a0
    3294 0000df90     c400          jrlt    tmvnxr_ok
         0000dfa0     0090  
    3295 0000dfb0     ca00          jreq    tmvnno_r
         0000dfc0     008b  
    3296                    
    3297                    
    3298                            ;we're past the right rope.  see if we're attached
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   77

    3299 0000dfd0     b7ae          move    *a13(ATTACH_PROC),a14,L
         0000dfe0     03e0  
    3300 0000dff0     ca53          jrz     tmvnnot2
    3301                    
    3302                            ;I'm attached, which means both me and my opponent are gonna get
    3303                            ; moved.  Figure the right amount, apply it to both of us, then
    3304                            ; wobble the ropes and bounce both of us away.
    3305                    
    3306                            ;a0 is rope X, a5 is right edge of our collbox.  Move us and our
    3307                            ; opponent left (a5 - a0) pixels.
    3308 0000e000     4405          sub     a0,a5
    3309 0000e010     b5ae          move    *a13(OBJ_XPOSINT),a14
         0000e020     0110  
    3310 0000e030     44ae          sub     a5,a14
    3311 0000e040     b1cd          move    a14,*a13(OBJ_XPOSINT)
         0000e050     0110  
    3312                    
    3313 0000e060     b7a0          move    *a13(ATTACH_PROC),a0,L
         0000e070     03e0  
    3314 0000e080     b40e          move    *a0(OBJ_XPOSINT),a14
         0000e090     0110  
    3315 0000e0a0     44ae          sub     a5,a14
    3316 0000e0b0     b1c0          move    a14,*a0(OBJ_XPOSINT)
         0000e0c0     0110  
    3317                    
    3318                            ;If either I or my opponent has a nonzero X velocity other than
    3319                            ; -40000h, give us both Xvel -40000h, Yvel 30000h.
    3320                    
    3321                            ;Skip the velocity crap if I'm on the ground.
    3322 0000e0d0     b5a0          move    *a13(GROUND_Y),a0
         0000e0e0     0570  
    3323 0000e0f0     b5a1          move    *a13(OBJ_YPOSINT),a1
         0000e100     0130  
    3324 0000e110     4801          cmp     a0,a1
    3325 0000e120     ca75          jreq    tmvnno_r
    3326                    
    3327 0000e130     b7ae          move    *a13(OBJ_XVEL),a14,L
         0000e140     02d0  
    3328 0000e150     ca05          jrz     tmvnrr_check_opp
    3329 0000e160     0b6e          cmpi    [-4,0],a14
         0000e170 0003ffff  
    3330 0000e190     cb01          jrne    tmvnrr_check_opp
    3331 0000e1a0     c00a          jruc    tmvnrr_set_vels
    3332                    
    3333 0000e1b0           tmvnrr_check_opp
    3334 0000e1b0     b7a5          move    *a13(ATTACH_PROC),a5,L
         0000e1c0     03e0  
    3335 0000e1d0     b6ae          move    *a5(OBJ_XVEL),a14,L
         0000e1e0     02d0  
    3336 0000e1f0     ca68          jrz     tmvnno_r
    3337 0000e200     0b6e          cmpi    [-4,0],a14
         0000e210 0003ffff  
    3338 0000e230     cb01          jrne    tmvnrr_set_vels
    3339 0000e240     c063          jruc    tmvnno_r
    3340                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   78

    3341 0000e250           tmvnrr_set_vels
    3342                            ;X vel
    3343 0000e250     09ee          movi    [-4,0],a14
         0000e260 fffc0000  
    3344 0000e280     b3cd          move    a14,*a13(OBJ_XVEL),L
         0000e290     02d0  
    3345 0000e2a0     b7a5          move    *a13(ATTACH_PROC),a5,L
         0000e2b0     03e0  
    3346 0000e2c0     b3c5          move    a14,*a5(OBJ_XVEL),L
         0000e2d0     02d0  
    3347                    
    3348                            ;Y vel
    3349                            ;Wait!  Don't muck with the Y vels if they're already above 30000h.
    3350 0000e2e0     b7ae          move    *a13(OBJ_YVEL),a14,L
         0000e2f0     02f0  
    3351 0000e300     0b6e          cmpi    30000h,a14
         0000e310 fffcffff  
    3352 0000e330     c70d          jrgt    tmvnnyv2
    3353 0000e340     b6ae          move    *a5(OBJ_YVEL),a14,L
         0000e350     02f0  
    3354 0000e360     0b6e          cmpi    30000h,a14
         0000e370 fffcffff  
    3355 0000e390     c707          jrgt    tmvnnyv2
    3356 0000e3a0     09ee          movi    [3,0],a14
         0000e3b0 00030000  
    3357 0000e3d0     b3cd          move    a14,*a13(OBJ_YVEL),L
         0000e3e0     02f0  
    3358 0000e3f0     b3c5          move    a14,*a5(OBJ_YVEL),L
         0000e400     02f0  
    3359 0000e410           tmvnnyv2
    3360                            ;...and wobble the ropes
    3361 0000e410                   PUSH    a0,a5
    3362 0000e430     09c0          movi    ROPE_RIGHT,a0
         0000e440     0003  
    3363 0000e450     1822          movk    1,a2
    3364 0000e460     09c1          movi    ROPE_BOUNCEIO,a1
         0000e470     0001  
    3365 0000e480     0d5f          calla   rope_command
         0000e490 00000000! 
    3366                    
    3367 0000e4b0     09c0          movi    3ch,a0
         0000e4c0     003c  
    3368 0000e4d0     0d5f          calla   triple_sound
         0000e4e0 00000000! 
    3369                    
    3370 0000e500                   PULL    a0,a5
    3371                    
    3372 0000e520     c035          jruc    tmvnno_r
    3373                    
    3374 0000e530           tmvnnot2
    3375                    
    3376 0000e530     b5ae          move    *a13(OBJ_XPOSINT),a14
         0000e540     0110  
    3377 0000e550     45c5          sub     a14,a5
    3378 0000e560     44a0          sub     a5,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   79

    3379                    
    3380 0000e570     b00d          move    a0,*a13(X_BOUND)
         0000e580     0490  
    3381 0000e590     2600          sll     16,a0
    3382 0000e5a0     b20d          move    a0,*a13(OBJ_XPOS),L
         0000e5b0     0100  
    3383                    
    3384 0000e5c0     b5a0          move    *a13(INRING),a0
         0000e5d0     0560  
    3385 0000e5e0     cb29          jrnz    tmvnno_r                                ;Am outside.
    3386                    
    3387 0000e5f0     0d5f          calla   ck_climb_out_side
         0000e600 00000000! 
    3388                    
    3389                    ;Has hit right rope
    3390                    ;Wobble ropes and bounce off of them upon first hit.
    3391 0000e620     b5a0          move    *a13(MOVE_DIR),a0
         0000e630     04b0  
    3392 0000e640     cb23          jrnz    tmvnno_r
    3393                    
    3394 0000e650     b7a0          move    *a13(OBJ_XVEL),a0,L
         0000e660     02d0  
    3395 0000e670     ca20          jrz     tmvnno_r
    3396                    
    3397                            ;Skip the velocity crap if I'm on the ground.
    3398 0000e680     b5a0          move    *a13(GROUND_Y),a0
         0000e690     0570  
    3399 0000e6a0     b5a1          move    *a13(OBJ_YPOSINT),a1
         0000e6b0     0130  
    3400 0000e6c0     4801          cmp     a0,a1
    3401 0000e6d0     ca1a          jreq    tmvnno_r
    3402                    
    3403                    ;We also should check YPOS also.  Ropes shouldn't wobble if
    3404                    ;not hit.
    3405                    
    3406 0000e6e0     b7a0          move    *a13(OBJ_XVEL),a0,L
         0000e6f0     02d0  
    3407 0000e700     09e7          movi    [-3,0001],a7
         0000e710 fffd0001  
    3408 0000e730     b2ed          move    a7,*a13(OBJ_XVEL),L
         0000e740     02d0  
    3409 0000e750     0b80          andi    0ffffH,a0
         0000e760 ffff0000  
    3410 0000e780     0b40          cmpi    1,a0
         0000e790     fffe  
    3411 0000e7a0     ca0d          jrz     tmvnno_r
    3412                    
    3413                    ;This is the first time we have collided with ropes.
    3414                    ;Wobble them.
    3415                    
    3416 0000e7b0     09c0          movi    ROPE_RIGHT,a0
         0000e7c0     0003  
    3417 0000e7d0     1822          movk    1,a2
    3418 0000e7e0     09c1          movi    ROPE_BOUNCEIO,a1
         0000e7f0     0001  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   80

    3419 0000e800     0d5f          calla   rope_command
         0000e810 00000000! 
    3420                    
    3421 0000e830     09c0          movi    3ch,a0
         0000e840     003c  
    3422 0000e850     0d5f          calla   triple_sound
         0000e860 00000000! 
    3423                    
    3424 0000e880           tmvnno_r
    3425 0000e880     0ba7          ori     MOVE_RIGHT,a7           ;can't move right
         0000e890 00000008  
    3426 0000e8b0           tmvnxr_ok
    3427 0000e8b0           tmvndone
    3428 0000e8b0           tmvnno_confine
    3429 0000e8b0     b0ed          move    a7,*a13(CAN_MOVE_DIR)
         0000e8c0     0470  
    3430 0000e8d0     0960          rets
    3431                    
    3432                    
    3433                    
    3434                            ;We're outside the ring
    3435 0000e8e0           tmvnoutring
    3436 0000e8e0     09c0          movi    ARENA_TOP,a0
         0000e8f0     0250  
    3437 0000e900     b5a5          move    *a13(OBJ_ZPOSINT),a5
         0000e910     0150  
    3438 0000e920     4805          cmp     a0,a5                   ;zpos - top
    3439 0000e930     c70a          jrgt    tmvnzu_ok2
    3440 0000e940     ca05          jreq    tmvnno_u2
    3441                    
    3442 0000e950     b00d          move    a0,*a13(Z_BOUND)
         0000e960     04a0  
    3443 0000e970     2600          sll     16,a0
    3444 0000e980     b20d          move    a0,*a13(OBJ_ZPOS),L
         0000e990     0140  
    3445 0000e9a0           tmvnno_u2
    3446 0000e9a0     0ba7          ori     MOVE_UP,a7              ;can't move up
         0000e9b0 00000001  
    3447 0000e9d0     c00d          jruc    tmvncheck_x2
    3448                    
    3449 0000e9e0           tmvnzu_ok2
    3450 0000e9e0     09c0          movi    ARENA_BOT,a0            ;zpos - bot
         0000e9f0     0768  
    3451 0000ea00     4805          cmp     a0,a5
    3452 0000ea10     c409          jrlt    tmvnzd_ok2
    3453 0000ea20     ca05          jreq    tmvnno_d2
    3454                    
    3455 0000ea30     b00d          move    a0,*a13(Z_BOUND)
         0000ea40     04a0  
    3456 0000ea50     2600          sll     16,a0
    3457 0000ea60     b20d          move    a0,*a13(OBJ_ZPOS),L
         0000ea70     0140  
    3458 0000ea80           tmvnno_d2
    3459 0000ea80     0ba7          ori     MOVE_DOWN,a7            ;can't move down
         0000ea90 00000002  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   81

    3460 0000eab0           tmvnzd_ok2
    3461                    
    3462 0000eab0           tmvncheck_x2
    3463 0000eab0     b5a5          move    *a13(OBJ_COLLX1),a5
         0000eac0     01e0  
    3464 0000ead0     09e6          movi    vln_left_fence,a6
         0000eae0 00012fa0- 
    3465 0000eb00     84c0          move    *a6,a0                  ;x1
    3466 0000eb10     4805          cmp     a0,a5                   ;xpos - x2
    3467 0000eb20     c71c          jrgt    tmvnxl_ok2
    3468 0000eb30     0d3f          callr   calc_line_x
         0000eb40     0793  
    3469 0000eb50     4805          cmp     a0,a5                   ;xpos - a0
    3470 0000eb60     c718          jrgt    tmvnxl_ok2
    3471 0000eb70     ca13          jreq    tmvnno_l2
    3472                    
    3473                            ;must move right (a0-a5) pixels.  If we're attached, move our
    3474                            ; opponent too.
    3475 0000eb80     4c01          move    a0,a1
    3476 0000eb90     44a0          sub     a5,a0
    3477                    
    3478 0000eba0     b5ae          move    *a13(OBJ_XPOSINT),a14
         0000ebb0     0110  
    3479 0000ebc0     400e          add     a0,a14
    3480 0000ebd0     b1cd          move    a14,*a13(OBJ_XPOSINT)
         0000ebe0     0110  
    3481 0000ebf0     b02d          move    a1,*a13(X_BOUND)
         0000ec00     0490  
    3482                    
    3483 0000ec10     b7a5          move    *a13(ATTACH_PROC),a5,L
         0000ec20     03e0  
    3484 0000ec30     ca07          jrz     tmvnno_l2
    3485                    
    3486 0000ec40     b4ae          move    *a5(OBJ_XPOSINT),a14
         0000ec50     0110  
    3487 0000ec60     400e          add     a0,a14
    3488 0000ec70     b1c5          move    a14,*a5(OBJ_XPOSINT)
         0000ec80     0110  
    3489 0000ec90     b025          move    a1,*a5(X_BOUND)
         0000eca0     0490  
    3490 0000ecb0           tmvnno_l2
    3491 0000ecb0     0ba7          ori     MOVE_LEFT,a7            ;can't move left
         0000ecc0 00000004  
    3492 0000ece0     c022          jruc    tmvncont_x
    3493                    
    3494 0000ecf0           tmvnxl_ok2
    3495 0000ecf0     b5a5          move    *a13(OBJ_COLLX2),a5
         0000ed00     01f0  
    3496 0000ed10     09e6          movi    vln_right_fence,a6
         0000ed20 0000dd40- 
    3497 0000ed40     84c0          move    *a6,a0                  ;x1
    3498 0000ed50     4805          cmp     a0,a5                   ;xpos - x1
    3499 0000ed60     c41a          jrlt    tmvnxr_ok2
    3500 0000ed70     0d3f          callr   calc_line_x
         0000ed80     076f  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   82

    3501 0000ed90     4805          cmp     a0,a5                   ;xpos - a0
    3502 0000eda0     c416          jrlt    tmvnxr_ok2
    3503 0000edb0     ca12          jreq    tmvnno_r2
    3504                    
    3505                            ;must move left (a5-a0) pixels.  If we're attached, move our
    3506                            ; opponent too.
    3507 0000edc0     4405          sub     a0,a5
    3508                    
    3509 0000edd0     b5ae          move    *a13(OBJ_XPOSINT),a14
         0000ede0     0110  
    3510 0000edf0     44ae          sub     a5,a14
    3511 0000ee00     b1cd          move    a14,*a13(OBJ_XPOSINT)
         0000ee10     0110  
    3512 0000ee20     b00d          move    a0,*a13(X_BOUND)
         0000ee30     0490  
    3513                    
    3514 0000ee40     b7a1          move    *a13(ATTACH_PROC),a1,L
         0000ee50     03e0  
    3515 0000ee60     ca07          jrz     tmvnno_r2
    3516 0000ee70     b42e          move    *a1(OBJ_XPOSINT),a14
         0000ee80     0110  
    3517 0000ee90     44ae          sub     a5,a14
    3518 0000eea0     b1c1          move    a14,*a1(OBJ_XPOSINT)
         0000eeb0     0110  
    3519 0000eec0     b001          move    a0,*a1(X_BOUND)
         0000eed0     0490  
    3520 0000eee0           tmvnno_r2
    3521 0000eee0     0ba7          ori     MOVE_RIGHT,a7           ;can't move right
         0000eef0 00000008  
    3522 0000ef10           tmvnxr_ok2
    3523                    
    3524                    ;now check for the mat/ring
    3525                    
    3526 0000ef10           tmvncont_x
    3527 0000ef10     b5a5          move    *a13(OBJ_XPOSINT),a5
         0000ef20     0110  
    3528 0000ef30     0b45          cmpi    RING_X_CENTER,a5
         0000ef40     fbcd  
    3529 0000ef50     c74b          jrgt    tmvnright_side
    3530                    ;left side
    3531 0000ef60     09e6          movi    vln_left_matedge2,a6
         0000ef70 0000b920- 
    3532 0000ef90     0d3f          callr   calc_line_x
         0000efa0     074d  
    3533 0000efb0     ca00          jrz     tmvndone2                       ;out of range
         0000efc0     008d  
    3534 0000efd0     b5a8          move    *a13(OBJ_COLLX2),a8
         0000efe0     01f0  
    3535 0000eff0     4408          sub     a0,a8                   ;xpos - a0 =(xov)
    3536 0000f000     ce00          jrn     tmvndone2
         0000f010     0088  
    3537                    
    3538 0000f020     b5a4          move    *a13(OBJ_ZPOSINT),a4
         0000f030     0150  
    3539 0000f040     0b44          cmpi    RING_Z_CENTER,a4
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   83

         0000f050     fb5f  
    3540 0000f060     c713          jrgt    tmvnbot_left
    3541                    ;top left
    3542 0000f070     b4c0          move    *a6(10h),a0
         0000f080     0010  
    3543                    ;;;     dec     a4
    3544 0000f090     4c89          move    a4,a9
    3545 0000f0a0     4409          sub     a0,a9                   ;zpos - z1 =(zov)
    3546 0000f0b0     4909          cmp     a8,a9                   ;zov - xov
    3547 0000f0c0     c71f          jrgt    tmvnno_r3
    3548                    
    3549 0000f0d0     4524          sub     a9,a4
    3550 0000f0e0     b08d          move    a4,*a13(Z_BOUND)
         0000f0f0     04a0  
    3551 0000f100     2604          sll     16,a4
    3552 0000f110     b28d          move    a4,*a13(OBJ_ZPOS),L
         0000f120     0140  
    3553 0000f130     0ba7          ori     MOVE_DOWN,a7            ;can't move down
         0000f140 00000002  
    3554                    
    3555 0000f160     0d5f          calla   ck_climb_in_top
         0000f170 00000000! 
    3556                    
    3557 0000f190     c070          jruc    tmvndone2
    3558                    
    3559 0000f1a0           tmvnbot_left
    3560 0000f1a0     b4c9          move    *a6(30h),a9
         0000f1b0     0030  
    3561                    ;;;     inc     a4
    3562 0000f1c0     4489          sub     a4,a9                   ;z2 - zpos =(zov)
    3563 0000f1d0     4909          cmp     a8,a9                   ;zov - xov
    3564 0000f1e0     c70d          jrgt    tmvnno_r3
    3565 0000f1f0     4124          add     a9,a4
    3566 0000f200     b08d          move    a4,*a13(Z_BOUND)
         0000f210     04a0  
    3567 0000f220     2604          sll     16,a4
    3568 0000f230     b28d          move    a4,*a13(OBJ_ZPOS),L
         0000f240     0140  
    3569 0000f250     0ba7          ori     MOVE_UP,a7              ;can't move up
         0000f260 00000001  
    3570                    
    3571 0000f280     0d5f          calla   ck_climb_in_bot
         0000f290 00000000! 
    3572                    
    3573 0000f2b0     c05e          jruc    tmvndone2
    3574                    
    3575 0000f2c0           tmvnno_r3
    3576                            ;we need to move a8 pixels to the left.  if we're attached, move both
    3577                            ; of us.
    3578 0000f2c0     4505          sub     a8,a5
    3579 0000f2d0     b0ad          move    a5,*a13(X_BOUND)
         0000f2e0     0490  
    3580 0000f2f0     2605          sll     16,a5
    3581 0000f300     b2ad          move    a5,*a13(OBJ_XPOS),L
         0000f310     0100  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   84

    3582 0000f320     0ba7          ori     MOVE_RIGHT,a7           ;can't move right
         0000f330 00000008  
    3583                    
    3584 0000f350     b7a0          move    *a13(ATTACH_PROC),a0,L
         0000f360     03e0  
    3585 0000f370     ca05          jrz     tmvnno_r3_att
    3586 0000f380     b40e          move    *a0(OBJ_XPOSINT),a14
         0000f390     0110  
    3587 0000f3a0     450e          sub     a8,a14
    3588 0000f3b0     b1c0          move    a14,*a0(OBJ_XPOSINT)
         0000f3c0     0110  
    3589 0000f3d0           tmvnno_r3_att
    3590                    
    3591 0000f3d0     0d5f          calla   ck_climb_in_side
         0000f3e0 00000000! 
    3592                    
    3593 0000f400     c049          jruc    tmvndone2
    3594                    
    3595                    
    3596 0000f410           tmvnright_side
    3597 0000f410     09e6          movi    vln_right_matedge2,a6
         0000f420 00009500- 
    3598 0000f440     0d3f          callr   calc_line_x
         0000f450     0702  
    3599 0000f460     ca43          jrz     tmvndone2                       ;out of range
    3600 0000f470     4c08          move    a0,a8
    3601 0000f480     b5a0          move    *a13(OBJ_COLLX1),a0
         0000f490     01e0  
    3602 0000f4a0     4408          sub     a0,a8                   ;a8 - xpos =(xov)
    3603 0000f4b0     ce3e          jrn     tmvndone2
    3604                    
    3605 0000f4c0     b5a4          move    *a13(OBJ_ZPOSINT),a4
         0000f4d0     0150  
    3606 0000f4e0     0b44          cmpi    RING_Z_CENTER,a4
         0000f4f0     fb5f  
    3607 0000f500     c713          jrgt    tmvnbot_right
    3608                    ;top right
    3609 0000f510     b4c0          move    *a6(10h),a0
         0000f520     0010  
    3610                    ;;;     dec     a4
    3611 0000f530     4c89          move    a4,a9
    3612 0000f540     4409          sub     a0,a9                   ;zpos - z1 =(zov)
    3613 0000f550     4909          cmp     a8,a9                   ;zov - xov
    3614 0000f560     c71f          jrgt    tmvnno_l3
    3615 0000f570     4524          sub     a9,a4
    3616 0000f580     b08d          move    a4,*a13(Z_BOUND)
         0000f590     04a0  
    3617 0000f5a0     2604          sll     16,a4
    3618 0000f5b0     b28d          move    a4,*a13(OBJ_ZPOS),L
         0000f5c0     0140  
    3619 0000f5d0     0ba7          ori     MOVE_DOWN,a7            ;can't move down
         0000f5e0 00000002  
    3620                    
    3621 0000f600     0d5f          calla   ck_climb_in_top
         0000f610 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   85

    3622                    
    3623 0000f630     c026          jruc    tmvndone2
    3624                    
    3625                    
    3626 0000f640           tmvnbot_right
    3627 0000f640     b4c9          move    *a6(30h),a9
         0000f650     0030  
    3628                    ;;;     inc     a4
    3629 0000f660     4489          sub     a4,a9                   ;z2 - zpos =(zov)
    3630 0000f670     4909          cmp     a8,a9                   ;zov - xov
    3631 0000f680     c70d          jrgt    tmvnno_l3
    3632 0000f690     4124          add     a9,a4
    3633 0000f6a0     b08d          move    a4,*a13(Z_BOUND)
         0000f6b0     04a0  
    3634 0000f6c0     2604          sll     16,a4
    3635 0000f6d0     b28d          move    a4,*a13(OBJ_ZPOS),L
         0000f6e0     0140  
    3636 0000f6f0     0ba7          ori     MOVE_UP,a7              ;can't move up
         0000f700 00000001  
    3637                    
    3638 0000f720     0d5f          calla   ck_climb_in_bot
         0000f730 00000000! 
    3639                    
    3640 0000f750     c014          jruc    tmvndone2
    3641                    
    3642                    
    3643 0000f760           tmvnno_l3
    3644                            ;we need to move a8 pixels to the right. if we're attached, move both
    3645                            ; of us.
    3646 0000f760     4105          add     a8,a5
    3647 0000f770     b0ad          move    a5,*a13(X_BOUND)
         0000f780     0490  
    3648 0000f790     2605          sll     16,a5
    3649 0000f7a0     b2ad          move    a5,*a13(OBJ_XPOS),L
         0000f7b0     0100  
    3650 0000f7c0     0ba7          ori     MOVE_LEFT,a7            ;can't move down
         0000f7d0 00000004  
    3651                    
    3652 0000f7f0     b7a0          move    *a13(ATTACH_PROC),a0,L
         0000f800     03e0  
    3653 0000f810     ca05          jrz     tmvnno_l3_att
    3654 0000f820     b40e          move    *a0(OBJ_XPOSINT),a14
         0000f830     0110  
    3655 0000f840     410e          add     a8,a14
    3656 0000f850     b1c0          move    a14,*a0(OBJ_XPOSINT)
         0000f860     0110  
    3657 0000f870           tmvnno_l3_att
    3658                    
    3659 0000f870     0d5f          calla   ck_climb_in_side
         0000f880 00000000! 
    3660                    
    3661 0000f8a0           tmvndone2
    3662 0000f8a0     b0ed          move    a7,*a13(CAN_MOVE_DIR)
         0000f8b0     0470  
    3663 0000f8c0     b5a0          move    *a13(PLYRMODE),a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   86

         0000f8d0     05c0  
    3664 0000f8e0     0b40          cmpi    MODE_DEAD,a0
         0000f8f0     fff6  
    3665 0000f900     ca60          jreq    tmvndead
    3666 0000f910     0b40          cmpi    MODE_RUNNING,a0
         0000f920     fffe  
    3667 0000f930     cb5c          jrne    just_ignore_me
    3668                    
    3669 0000f940     09e2          movi    [3,0],a2
         0000f950 00030000  
    3670 0000f970     1fa7          btst    MOVE_LEFT_BIT,a7
    3671 0000f980     cb03          jrnz    we_going_left
    3672 0000f990     03a2          neg     a2
    3673 0000f9a0     1f87          btst    MOVE_RIGHT_BIT,a7
    3674 0000f9b0     ca54          jrz     just_ignore_me
    3675 0000f9c0           we_going_left
    3676                    
    3677                            ;we've hit a gate, and we're running.  It's possible, however, that
    3678                            ; we're right up against a gate and have just started running in the
    3679                            ; opposite direction, in which case we shouldn't crash or anything.
    3680                            ; blow this off if we're running AWAY from the gate we've hit
    3681 0000f9c0     b5a0          move    *a13(CAN_MOVE_DIR),a0
         0000f9d0     0470  
    3682 0000f9e0     b5ae          move    *a13(FACING_DIR),a14
         0000f9f0     04c0  
    3683 0000fa00     51c0          and     a14,a0
    3684 0000fa10     0b80          andi    MOVE_LEFT|MOVE_RIGHT,a0
         0000fa20 fffffff3  
    3685 0000fa40     ca4b          jrz     just_ignore_me
    3686                    
    3687 0000fa50     b24d          move    a2,*a13(OBJ_XVEL),L
         0000fa60     02d0  
    3688 0000fa70                   SETMODE NORMAL
    3689 0000fb20     09e0          movi    [3,0],a0
         0000fb30 00030000  
    3690 0000fb50     b20d          move    a0,*a13(OBJ_YVEL),L
         0000fb60     02f0  
    3691 0000fb70     5600          clr     a0
    3692 0000fb80     b00d          move    a0,*a13(RUN_TIME)
         0000fb90     07b0  
    3693                    
    3694                            ;if we've hit the gate in the last three seconds, fall back instead.
    3695 0000fba0     07ae          move    @PCNT,a14,L
         0000fbb0 00000190- 
    3696 0000fbd0     b7a0          move    *a13(HIT_GATE_TIME),a0,L
         0000fbe0     0dd0  
    3697 0000fbf0     440e          sub     a0,a14
    3698 0000fc00     0b4e          cmpi    TSEC*3,a14
         0000fc10     ff60  
    3699 0000fc20     c508          jrge    tmvnbnc
    3700 0000fc30                   FACETBL fall_back_tbl
    3701 0000fca0     c00d          jruc    tmvnbcanim
    3702                    
    3703 0000fcb0           tmvnbnc FACE24TBL bncoff_gate
    3704 0000fd80     0d5f  tmvnbcanim      calla   change_anim1a
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   87

         0000fd90 00000000! 
    3705                    
    3706                            ;crash sound
    3707 0000fdb0     09c0          movi    0c5h,a0
         0000fdc0     00c5  
    3708 0000fdd0     0d5f          calla   triple_sound
         0000fde0 00000000! 
    3709                    
    3710                            ;set HIT_GATE_TIME
    3711 0000fe00     07ae          move    @PCNT,a14,L
         0000fe10 00000190- 
    3712 0000fe30     b3cd          move    a14,*a13(HIT_GATE_TIME),L
         0000fe40     0dd0  
    3713                    
    3714                            ;take some damage
    3715 0000fe50     b5a1          move    *a13(PLYRNUM),a1
         0000fe60     0580  
    3716 0000fe70     09c0          movi    -D_GATE_CRASH,a0
         0000fe80     ffec  
    3717 0000fe90     574a          clr     a10
    3718 0000fea0     0d5f          calla   adjust_health
         0000feb0 00000000! 
    3719                    
    3720 0000fed0     0d5f          calla   ditch_getup_meter
         0000fee0 00000000! 
    3721                    
    3722 0000ff00           just_ignore_me
    3723 0000ff00     0960          rets
    3724                    
    3725 0000ff10           tmvndead        ;if we're a zombie, hitting the edge is our cue to transform
    3726 0000ff10     0b87          andi    MOVE_LEFT|MOVE_RIGHT,a7
         0000ff20 fffffff3  
    3727 0000ff40     cafb          jrz     just_ignore_me
    3728 0000ff50     b5ae          move    *a13(STATUS_FLAGS),a14
         0000ff60     0b50  
    3729 0000ff70     1f8e          btst    B_ZOMBIE,a14
    3730 0000ff80     caf7          jrz     just_ignore_me
    3731 0000ff90     1f2e          btst    B_CAN_XFORM,a14
    3732 0000ffa0     caf5          jrz     just_ignore_me
    3733                    
    3734 0000ffb0           tmvnzombie_transform
    3735 0000ffb0     1820          movk    1,a0
    3736 0000ffc0     0d5f          calla   change_wrestler
         0000ffd0 00000000! 
    3737 0000fff0     0960          rets
    3738                    
    3739                    *****************************************************************************
    3740                    *
    3741                    * for whatever reason, confine_wrestler happens twice per tick.  The problem
    3742                    * is that if you bump into the ropes, the first time we execute c_w, your
    3743                    * CAN_MOVE_DIR bits are set.  But the second time, they're cleared since you
    3744                    * aren't hitting the ropes anymore.  This ugly little hack gets around this
    3745                    * by saving your CAN_MOVE_DIR bits after the first call, and then ORing them
    3746                    * with your CAN_MOVE_DIR bits after the second.
    3747                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   88

    3748 00010000            SUBRP  confine_wrestler_fix1
    3749                    
    3750 00010000     b9ad          move    *a13(CAN_MOVE_DIR),*a13(CAN_MOVE_TEMP)
         00010010     0470  
         00010020     0480  
    3751 00010030     0960          rets
    3752                    
    3753 00010040            SUBRP  confine_wrestler_fix2
    3754 00010040     b5a0          move    *a13(CAN_MOVE_DIR),a0
         00010050     0470  
    3755 00010060     b5a1          move    *a13(CAN_MOVE_TEMP),a1
         00010070     0480  
    3756 00010080     5401          or      a0,a1
    3757 00010090     b02d          move    a1,*a13(CAN_MOVE_DIR)
         000100a0     0470  
    3758 000100b0     0960          rets
    3759                    
    3760                    *****************************************************************************
    3761                    *
    3762 000100c0            SUBRP  wrestler_friction
    3763                    
    3764 000100c0     b5a0          move    *a13(ANIMODE),a0
         000100d0     0660  
    3765 000100e0     1f20          btst    MODE_FRICTION_BIT,a0
    3766 000100f0     ca11          jrz     snnbno_friction
    3767                    
    3768 00010100     b5a0          move    *a13(OBJ_FRICTION),a0
         00010110     0350  
    3769                    
    3770 00010120     b7a1          move    *a13(OBJ_XVEL),a1,L
         00010130     02d0  
    3771 00010140     ca0c          jrz     snnbno_friction
    3772 00010150     ce06          jrn     snnbadd
    3773                    
    3774 00010160     4401          sub     a0,a1
    3775 00010170     c101          jrp     snnbok1
    3776 00010180     5621          clr     a1
    3777 00010190           snnbok1
    3778 00010190     b22d          move    a1,*a13(OBJ_XVEL),L
         000101a0     02d0  
    3779 000101b0     0960          rets
    3780                    
    3781 000101c0           snnbadd
    3782 000101c0     4001          add     a0,a1
    3783 000101d0     ce01          jrn     snnbok2
    3784 000101e0     5621          clr     a1
    3785 000101f0           snnbok2
    3786 000101f0     b22d          move    a1,*a13(OBJ_XVEL),L
         00010200     02d0  
    3787                    
    3788                    
    3789 00010210           snnbno_friction
    3790 00010210     0960          rets
    3791                    
    3792                    *****************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   89

    3793                    * Change an objects image
    3794                    * A0=*New image
    3795                    * A1=New flip flags & const
    3796                    * A8=*Obj
    3797                    * Trashes scratch
    3798                    
    3799 00010220            SUBR   change_image
    3800                    
    3801                    
    3802 00010220                   PUSH    a2,a3
    3803                    
    3804 00010240     0b60          cmpi    ROM,a0
         00010250 f87fffff  
    3805 00010270     c81b          jrlo    qebeanierr
    3806                    
    3807 00010280     4c02          move    a0,a2
    3808 00010290     4c23          move    a1,a3
    3809                    
    3810 000102a0     b248          move    a2,*a8(OIMG),L
         000102b0     0170  
    3811 000102c0     ba48          move    *a2(0),*a8(OSIZE),L
         000102d0     0000  
         000102e0     0130  
    3812 000102f0     ba48          move    *a2(ISAG),*a8(OSAG),L
         00010300     0040  
         00010310     0110  
    3813                    
    3814                    
    3815 00010320     b848          move    *a2(IANIOFFX),*a8(ODXOFF)       ;display x offset
         00010330     0020  
         00010340     0220  
    3816 00010350     b848          move    *a2(IANIOFFY),*a8(ODYOFF)       ;display y offset
         00010360     0030  
         00010370     0230  
    3817                    
    3818                    
    3819 00010380     0545          setf    5,0,0
    3820 00010390     b848          move    *a2(ICTRL+7),*a8(OCTRL+7)       ;Write 5 z comp bits
         000103a0     0067  
         000103b0     00f7  
    3821 000103c0     0546          setf    6,0,0
    3822 000103d0     b068          move    a3,*a8(OCTRL)                   ;Write 6 low bits
         000103e0     00f0  
    3823 000103f0     0570          setf    16,1,0
    3824                    
    3825 00010400           qebex   PULL    a2,a3
    3826 00010420     0960          rets
    3827                    
    3828 00010430           qebeanierr 
    3829                            .if     DEBUG
    3830                            LOCKUP
    3831                            eint
    3832                            .else
    3833 00010430                   CALLERR 2,2
    3834                            .endif
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   90

    3835 000104e0     c0f1          jruc    qebex
    3836                    
    3837                    
    3838                    *****************************************************************************
    3839                    *
    3840                    * calls movement code base on wrestler number
    3841                    *
    3842                    * a13 = * wrestler process
    3843                    
    3844 000104f0            SUBRP  move_wrestler
    3845                    
    3846 000104f0     05a0          move    @HALT,a0
         00010500 000006e0- 
    3847 00010520     cb14          jrnz    hmmlrets
    3848                    
    3849                            ;check to see if a special move watchdog proc has queued up an anim.
    3850                            ; If one has, do that instead of calling move_xxx.
    3851 00010530     b7a0          move    *a13(SPECIAL_MOVE_ADDR),a0,L
         00010540     0930  
    3852 00010550     ca07          jrz     hmmlno_special
    3853                    
    3854                            ;a special has been queued up.  do it.
    3855 00010560     0d5f          calla   change_anim1a
         00010570 00000000! 
    3856 00010590     57ce          clr     a14
    3857 000105a0     b3cd          move    a14,*a13(SPECIAL_MOVE_ADDR),L
         000105b0     0930  
    3858 000105c0     c00a          jruc    hmmlrets
    3859                    
    3860 000105d0           hmmlno_special
    3861                    
    3862                            ;turn into a drone if it's time to auto-pin.
    3863 000105d0     0d3f          callr   auto_pin_check
         000105e0     001b  
    3864                    
    3865 000105f0     b5a0          move    *a13(WRESTLERNUM),a0
         00010600     0590  
    3866 00010610                   X32     a0
    3867 00010620     0b20          addi    hmmlcode_addr,a0
         00010630 00010680' 
    3868 00010650     8600          move    *a0,a0,L
    3869 00010660     0920          call    a0
    3870                    
    3871 00010670     0960  hmmlrets        rets
    3872                    
    3873 00010680           hmmlcode_addr
    3874 00010680 00000000!         .long   move_bret       ;0 Bret Hart
    3875 000106a0 00000000!         .long   move_razor      ;1 Razor Ramon
    3876 000106c0 00000000!         .long   move_taker      ;2 Undertaker
    3877 000106e0 00000000!         .long   move_yoko       ;3 Yokozuna
    3878 00010700 00000000!         .long   move_shawn      ;4 Shawn Michaels
    3879 00010720 00000000!         .long   move_bam        ;5 Bam Bam
    3880 00010740 00000000!         .long   move_doink      ;6 Doink
    3881 00010760 00000000          .long   0               ;7 spare
    3882 00010780 00000000!         .long   move_lex        ;8 Lex Luger
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   91

    3883                    
    3884                    
    3885                    *****************************************************************************
    3886                    *
    3887                    * if all opponents are dead, wait four seconds, then wait for the
    3888                    * unint bit to clear, then turn into a drone.
    3889                    *
    3890                    
    3891 000107a0            SUBR   auto_pin_check
    3892 000107a0     05ae          move    @in_finish_move,a14     ; Are we in a finishing move ?
         000107b0 00000000! 
    3893 000107d0     cb30          jrnz    nxedrets                        ; br = yes
    3894 000107e0     05ae          move    @finish_completed,a14   ; Did we do a finishing move ?
         000107f0 00000000! 
    3895 00010810     cb2c          jrnz    nxedrets                        ; br = yes
    3896                    
    3897 00010820     05ae          move    @royal_rumble,a14
         00010830 00000000! 
    3898 00010850     cb28          jrnz    nxedrets
    3899                    
    3900 00010860     0d5f          calla   get_opp_plyrmode
         00010870 00012440' 
    3901 00010890     0b40          cmpi    MODE_DEAD,a0
         000108a0     fff6  
    3902 000108b0     cb1f          jrne    nxedalive
    3903                    
    3904                            ;skip it if we've already pinned
    3905 000108c0     b5ae          move    *a13(STATUS_FLAGS),a14
         000108d0     0b50  
    3906 000108e0     1fce          btst    B_DID_PIN,a14
    3907 000108f0     cb1e          jrnz    nxedrets
    3908                    
    3909 00010900     0d3f          callr   get_opp_process
         00010910     01aa  
    3910 00010920     b40e          move    *a0(STATUS_FLAGS),a14
         00010930     0b50  
    3911 00010940     1f8e          btst    B_ZOMBIE,a14
    3912 00010950     cb15          jrnz    nxedalive
    3913                    
    3914                            .ref    anyone_bucking
    3915 00010960     0d5f          calla   anyone_bucking
         00010970 00000000! 
    3916 00010990     cb14          jrnz    nxedrets
    3917                    
    3918                            ;all opponents are dead.  increment AUTO_PIN_CNTDOWN and turn into
    3919                            ; a drone if the total is >= TSEC*4.
    3920 000109a0     b5ae          move    *a13(AUTO_PIN_CNTDOWN),a14
         000109b0     0c70  
    3921 000109c0     102e          inc     a14
    3922 000109d0     b1cd          move    a14,*a13(AUTO_PIN_CNTDOWN)
         000109e0     0c70  
    3923 000109f0     0b4e          cmpi    TSEC*3,a14
         00010a00     ff60  
    3924 00010a10     c40c          jrlt    nxedrets
    3925                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   92

    3926 00010a20     b5ae          move    *a13(ANIMODE),a14
         00010a30     0660  
    3927 00010a40     1fae          btst    MODE_UNINT_BIT,a14
    3928 00010a50     cb08          jrnz    nxedrets
    3929                    
    3930                            ;become a drone
    3931 00010a60     09ce          movi    PTYPE_DRONE,a14
         00010a70     0001  
    3932 00010a80     b1cd          move    a14,*a13(PLYR_TYPE)
         00010a90     05a0  
    3933 00010aa0     c003          jruc    nxedrets
    3934                    
    3935 00010ab0           nxedalive       ;Reset AUTO_PIN_CNTDOWN
    3936 00010ab0     57ce          clr     a14
    3937 00010ac0     b1cd          move    a14,*a13(AUTO_PIN_CNTDOWN)
         00010ad0     0c70  
    3938 00010ae0     0960  nxedrets        rets
    3939                    
    3940                    *****************************************************************************
    3941                    
    3942                    ; SUBRP realtime_clock
    3943                    ;
    3944                    ;       clr     a8
    3945                    ;       move    a8,@match_realtime
    3946                    ;
    3947                    ;nkgxloop       SLEEP   TSEC
    3948                    ;       inc     a8
    3949                    ;       move    a8,@match_realtime
    3950                    ;       jruc    nkgxloop
    3951                    
    3952                    ******************************************************************************
    3953                    
    3954                                                                    ;!KEEP THIS ORDER!
    3955 00010af0                   BSSX    up_dtime1,      16*NUM_WRES     ;number of ticks stick held down
    3956 00010af0                   BSSX    down_dtime1,    16*NUM_WRES
    3957 00010af0                   BSSX    left_dtime1,    16*NUM_WRES
    3958 00010af0                   BSSX    right_dtime1,   16*NUM_WRES
    3959 00010af0                   BSSX    punch_dtime1,   16*NUM_WRES
    3960 00010af0                   BSSX    block_dtime1,   16*NUM_WRES     ;number of ticks button held down
    3961 00010af0                   BSSX    powerp_dtime1,  16*NUM_WRES
    3962 00010af0                   BSSX    kick_dtime1,    16*NUM_WRES
    3963 00010af0                   BSSX    powerk_dtime1,  16*NUM_WRES
    3964                    
    3965                    *****************************************************************************
    3966                    
    3967 00010af0            SUBRP  init_joy_dtime
    3968                    
    3969 00010af0     5600          clr     a0
    3970                    
    3971 00010b00     09e1          movi    up_dtime1,a1
         00010b10 00018600- 
    3972 00010b30     09c2          movi    9*NUM_WRES,a2
         00010b40     003f  
    3973 00010b50           mdaolp1
    3974 00010b50     9001          move    a0,*a1+
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   93

    3975 00010b60     3c42          dsj     a2,mdaolp1
    3976                    
    3977 00010b70     0960          rets
    3978                    
    3979                    *****************************************************************************
    3980                    
    3981 00010b80            SUBR   get_block_dtime
    3982                    
    3983 00010b80                   X16     a0
    3984 00010b90     0b20          addi    block_dtime1,a0
         00010ba0 00018830- 
    3985 00010bc0     8400          move    *a0,a0
    3986 00010bd0     0960          rets
    3987                    
    3988                    *****************************************************************************
    3989                    
    3990 00010be0            SUBR   get_powerp_dtime
    3991                    
    3992 00010be0                   X16     a0
    3993 00010bf0     0b20          addi    powerp_dtime1,a0
         00010c00 000188a0- 
    3994 00010c20     8400          move    *a0,a0
    3995 00010c30     0960          rets
    3996                    
    3997                    *****************************************************************************
    3998                    
    3999 00010c40            SUBR   get_punch_dtime
    4000                    
    4001 00010c40                   X16     a0
    4002 00010c50     0b20          addi    punch_dtime1,a0
         00010c60 000187c0- 
    4003 00010c80     8400          move    *a0,a0
    4004 00010c90     0960          rets
    4005                    
    4006                    *****************************************************************************
    4007                    
    4008 00010ca0            SUBR   get_kick_dtime
    4009                    
    4010 00010ca0                   X16     a0
    4011 00010cb0     0b20          addi    kick_dtime1,a0
         00010cc0 00018910- 
    4012 00010ce0     8400          move    *a0,a0
    4013 00010cf0     0960          rets
    4014                    
    4015                    *****************************************************************************
    4016                    
    4017 00010d00            SUBR   get_powerk_dtime
    4018                    
    4019 00010d00                   X16     a0
    4020 00010d10     0b20          addi    powerk_dtime1,a0
         00010d20 00018980- 
    4021 00010d40     8400          move    *a0,a0
    4022 00010d50     0960          rets
    4023                    
    4024                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   94

    4025                    *****************************************************************************
    4026                    
    4027                    
    4028 00010d60            SUBRP  update_joy_dtime
    4029                    
    4030 00010d60     b5a2          move    *a13(PLYRNUM),a2
         00010d70     0580  
    4031 00010d80     0d3f          callr   tkvwupdate_but
         00010d90     0016  
    4032 00010da0     b5a2          move    *a13(PLYRNUM),a2
         00010db0     0580  
    4033 00010dc0     0d3f          callr   tkvwupdate_stick
         00010dd0     0001  
    4034                    
    4035 00010de0     0960          rets
    4036                    
    4037 00010df0           tkvwupdate_stick
    4038                    ;       move    a13,a0
    4039                    ;       calla   wres_get_stick_val_cur
    4040 00010df0     b5a0          move    *a13(STICK_VAL_CUR),a0
         00010e00     0bc0  
    4041 00010e10                   X16     a2
    4042 00010e20     0b22          addi    up_dtime1,a2
         00010e30 00018600- 
    4043                    
    4044 00010e50     1883          movk    4,a3
    4045 00010e60           tkvwloop1
    4046 00010e60     5621          clr     a1
    4047                    
    4048 00010e70     2fe0          srl     1,a0
    4049 00010e80     c902          jrnc    tkvwclr1
    4050                    
    4051 00010e90     8441          move    *a2,a1
    4052 00010ea0     1021          inc     a1
    4053 00010eb0           tkvwclr1
    4054 00010eb0     8022          move    a1,*a2
    4055                    
    4056 00010ec0     0b02          addi    16*NUM_WRES,a2
         00010ed0     0070  
    4057 00010ee0     3d23          dsj     a3,tkvwloop1
    4058                    
    4059 00010ef0     0960          rets
    4060                    
    4061 00010f00           tkvwupdate_but
    4062 00010f00     b5a0          move    *a13(BUT_VAL_CUR),a0
         00010f10     0b90  
    4063 00010f20                   X16     a2
    4064 00010f30     0b22          addi    punch_dtime1,a2
         00010f40 000187c0- 
    4065                    
    4066 00010f60     18a3          movk    5,a3
    4067 00010f70           tkvwloop2
    4068 00010f70     5621          clr     a1
    4069                    
    4070 00010f80     2fe0          srl     1,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   95

    4071 00010f90     c902          jrnc    tkvwclr2
    4072                    
    4073 00010fa0     8441          move    *a2,a1
    4074 00010fb0     1021          inc     a1
    4075 00010fc0           tkvwclr2
    4076 00010fc0     8022          move    a1,*a2
    4077                    
    4078 00010fd0     0b02          addi    16*NUM_WRES,a2
         00010fe0     0070  
    4079 00010ff0     3d23          dsj     a3,tkvwloop2
    4080                    
    4081 00011000     0960          rets
    4082                    
    4083                    *****************************************************************************
    4084                    * a13 = * current process
    4085                    * calculates closest opponent and distances to him
    4086                    *
    4087                    * Well, not really the closest.  We bias it lots of ways:
    4088                    *
    4089                    * ---> Will always choose live targets over dead ones.
    4090                    * ---> Will always choose normal dead over zombies.
    4091                    * ---> Biased distance (used for comparison but never stored) is doubled
    4092                    *      for targets in MODE_ONGROUND.
    4093                    * ---> 25% reduction in biased distance for WHOIHIT
    4094                    * ---> Biased distance tripled for targets with different INRING values.
    4095                    * ---> Add double the Z difference to biased range (favors targets in
    4096                    *      your Z-lane.
    4097                    * ---> 25% reduction in biased distance for previous closest
    4098                    * ---> Will always pick live targets in front of a runner over targets behind
    4099                    *      him, IF they have the same INRING value.
    4100                    * ---> If in combo mode, will always face WHOIHIT, unless WHOIHIT is dead.
    4101                    *
    4102                    
    4103                    
    4104                            ;biased distance to current champ.
    4105 000189f0                   .bss    oyqqbiased_range,16
    4106                    
    4107                    ; first calculate the distance on the X-Z plane
    4108                    ;  dxz = sqroot ( (x1-x2)^2 + (z1-z2)^2 )
    4109                    ; total dist = sqroot ( DXZ^2 + (y1-y2)^2 )
    4110                    
    4111                    
    4112 00011010            SUBRP  calc_closest2
    4113                    
    4114                            ;Always recalculate if our current closest is dead.
    4115 00011010     b5ae          move    *a13(CLOSEST_NUM),a14
         00011020     03a0  
    4116 00011030                   X32     a14
    4117 00011040     0b2e          addi    process_ptrs,a14
         00011050 00000950- 
    4118 00011070     87ce          move    *a14,a14,L
    4119 00011080     b5ce          move    *a14(PLYRMODE),a14
         00011090     05c0  
    4120 000110a0     0b4e          cmpi    MODE_DEAD,a14
         000110b0     fff6  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   96

    4121 000110c0     ca0e          jreq    oyqqgo
    4122                    
    4123                            ;Only proceed on every fourth tick.
    4124 000110d0     b5a0          move    *a13(PLYRNUM),a0
         000110e0     0580  
    4125 000110f0     0b80          andi    3,a0
         00011100 fffffffc  
    4126 00011120     05a1          move    @PCNT,a1
         00011130 00000190- 
    4127 00011150     0b81          andi    3,a1
         00011160 fffffffc  
    4128 00011180     4801          cmp     a0,a1
    4129 00011190     cb00          jrnz    oyqqx
         000111a0     00b9  
    4130                    
    4131                    
    4132 000111b0            SUBRP  calc_closest
    4133                    
    4134                            ;a11 is a flag.  when set, this indicates that a live player
    4135                            ; is the current closest.  Any live player will be chosen over
    4136                            ; a dead one.
    4137                            ;a11 is the status of the closest guy.  a positive value means the
    4138                            ; current closest is alive.  Zero means he's dead, and a negative
    4139                            ; value means there isn't one or it's a zombie.
    4140                    
    4141 000111b0     b5a0  oyqqgo  move    *a13(PLYR_TYPE),a0
         000111c0     05a0  
    4142                    
    4143 000111d0     b5a4          move    *a13(OBJ_XPOSINT),a4
         000111e0     0110  
    4144 000111f0     b5a5          move    *a13(OBJ_ZPOSINT),a5
         00011200     0150  
    4145 00011210     b5a6          move    *a13(OBJ_YPOSINT),a6
         00011220     0130  
    4146                    
    4147 00011230     09c3          movi    7FFFh,a3                ;closest distance
         00011240     7fff  
    4148 00011250     0583          move    a3,@oyqqbiased_range
         00011260 000189f0- 
    4149 00011280     576b          clr     a11
    4150 00011290     142b          dec     a11                     ;initialize to none/zombie
    4151 000112a0     09e2          movi    process_ptrs,a2
         000112b0 00000950- 
    4152 000112d0     09c1          movi    NUM_WRES,a1
         000112e0     0007  
    4153                    
    4154 000112f0     964a  oyqqloop        move    *a2+,a10,L
    4155 00011300     ca00          jrz     oyqqinactive
         00011310     00a0  
    4156 00011320     49aa          cmp     a13,a10
    4157 00011330     ca00          jreq    oyqqskip_nopull         ;skip self
         00011340     009d  
    4158                    
    4159 00011350     b5a7          move    *a13(PLYR_SIDE),a7
         00011360     05b0  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   97

    4160 00011370     b548          move    *a10(PLYR_SIDE),a8
         00011380     05b0  
    4161 00011390     48e8          cmp     a7,a8
    4162 000113a0     ca00          jreq    oyqqskip_nopull         ;skip friendly
         000113b0     0096  
    4163                    
    4164 000113c0                   PUSH    a4,a6
    4165 000113e0                   PUSH    a1
    4166                    
    4167 000113f0     b547          move    *a10(OBJ_XPOSINT),a7
         00011400     0110  
    4168 00011410     b548          move    *a10(OBJ_ZPOSINT),a8
         00011420     0150  
    4169 00011430     b549          move    *a10(OBJ_YPOSINT),a9
         00011440     0130  
    4170                    
    4171 00011450     4487          sub     a4,a7                   ;abs(delta x)
    4172 00011460     0387          abs     a7
    4173 00011470     4ce1          move    a7,a1
    4174 00011480     5e21          mpyu    a1,a1                   ;^2
    4175 00011490     4c20          move    a1,a0
    4176                    
    4177 000114a0     44a8          sub     a5,a8                   ;abs(delta z)
    4178 000114b0     0388          abs     a8
    4179 000114c0     4d01          move    a8,a1
    4180 000114d0     5e21          mpyu    a1,a1                   ;^2
    4181 000114e0     4020          add     a1,a0
    4182                    
    4183 000114f0     44c9          sub     a6,a9                   ;abs(delta y)
    4184 00011500     0389          abs     a9
    4185 00011510     4d21          move    a9,a1
    4186 00011520     5e21          mpyu    a1,a1                   ;^2
    4187 00011530     4020          add     a1,a0
    4188 00011540     0d5f          calla   square_root             ;sqroot of dxz^2 + dy^2
         00011550 00000000! 
    4189                    
    4190 00011570                   PULL    a1
    4191                    
    4192                            ;a0 is dist.  compute biased dist in a4
    4193 00011580     4c04          move    a0,a4
    4194                    
    4195                            ;ONGROUND penalty
    4196 00011590     b54e          move    *a10(PLYRMODE),a14
         000115a0     05c0  
    4197 000115b0     0b4e          cmpi    MODE_ONGROUND,a14
         000115c0     fffb  
    4198 000115d0     cb01          jrne    oyqqbc1
    4199 000115e0     2424          sll     1,a4            ;double it
    4200                    
    4201 000115f0           oyqqbc1 ;WHOIHIT bonus
    4202 000115f0     b7ae          move    *a13(WHOIHIT),a14,L
         00011600     0500  
    4203 00011610     49ca          cmp     a14,a10
    4204 00011620     cb03          jrne    oyqqbc2
    4205 00011630     4c8e          move    a4,a14
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   98

    4206 00011640     2fce          srl     2,a14
    4207 00011650     45c4          sub     a14,a4          ;sub 25%
    4208                    
    4209 00011660           oyqqbc2 ;INRING penalty
    4210 00011660     b54e          move    *a10(INRING),a14
         00011670     0560  
    4211 00011680     b5a6          move    *a13(INRING),a6
         00011690     0560  
    4212 000116a0     48ce          cmp     a6,a14
    4213 000116b0     ca03          jreq    oyqqbc3
    4214 000116c0     4c8e          move    a4,a14
    4215 000116d0     2424          sll     1,a4
    4216 000116e0     41c4          add     a14,a4          ;triple it
    4217                    
    4218 000116f0           oyqqbc3 ;previous closest bonus
    4219 000116f0     b5ae          move    *a13(CLOSEST_NUM),a14
         00011700     03a0  
    4220 00011710     b546          move    *a10(PLYRNUM),a6
         00011720     0580  
    4221 00011730     49c6          cmp     a14,a6
    4222 00011740     cb03          jrne    oyqqbc4
    4223 00011750     4c8e          move    a4,a14
    4224 00011760     2fce          srl     2,a14
    4225 00011770     45c4          sub     a14,a4          ;sub 25%
    4226                    
    4227 00011780           oyqqbc4 ;zero biased dist to combo target
    4228 00011780     b5ae          move    *a13(COMBO_COUNT),a14
         00011790     0af0  
    4229 000117a0     ca05          jrz     oyqqbc5
    4230 000117b0     b7ae          move    *a13(WHOIHIT),a14,L
         000117c0     0500  
    4231 000117d0     49ca          cmp     a14,a10
    4232 000117e0     cb01          jrne    oyqqbc5
    4233 000117f0     5684          clr     a4              ;zero dist
    4234                    
    4235 00011800           oyqqbc5 ;Z penalty
    4236 00011800     4d0e          move    a8,a14          ;delta Z
    4237 00011810     242e          sll     1,a14
    4238 00011820     41c4          add     a14,a4          ;add double the Z dist
    4239                    
    4240                    
    4241                            ;skip this guy if:
    4242                            ; a) we're running,
    4243                            ; b) he's behind us,
    4244                            ; c) our current closest is ahead of us, and
    4245                            ; d) our current closest is inside the ring.
    4246                    
    4247                            ;we running?
    4248 00011830     b5ae          move    *a13(PLYRMODE),a14
         00011840     05c0  
    4249 00011850     0b4e          cmpi    MODE_RUNNING,a14
         00011860     fffe  
    4250 00011870     cb1d          jrne    oyqqab_ok
    4251                    
    4252                            ;have a useful current closest?
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE   99

    4253 00011880                   TEST    a11
    4254 00011890     ce1b          jrn     oyqqab_ok
    4255                    
    4256                            ;is this guy behind us?
    4257 000118a0     4d4e          move    a10,a14
    4258 000118b0     0d5f          calla   is_a14_behind
         000118c0 00000000! 
    4259 000118e0     c916          jrnc    oyqqab_ok
    4260                    
    4261                            ;is closest ahead of us?
    4262 000118f0     b5ae          move    *a13(CLOSEST_NUM),a14
         00011900     03a0  
    4263 00011910                   X32     a14
    4264 00011920     0b2e          addi    process_ptrs,a14
         00011930 00000950- 
    4265 00011950     87ce          move    *a14,a14,L
    4266 00011960     0d5f          calla   is_a14_behind
         00011970 00000000! 
    4267 00011990     c80b          jrc     oyqqab_ok
    4268                    
    4269                            ;is closest inside the ring?
    4270 000119a0     b5ae          move    *a13(CLOSEST_NUM),a14
         000119b0     03a0  
    4271 000119c0                   X32     a14
    4272 000119d0     0b2e          addi    process_ptrs,a14
         000119e0 00000950- 
    4273 00011a00     87ce          move    *a14,a14,L
    4274 00011a10     b5ce          move    *a14(INRING),a14
         00011a20     0560  
    4275 00011a30     cb01          jrnz    oyqqab_ok
    4276                    
    4277                            ;we're running, this guy is behind us, and our current closest is
    4278                            ; both inside the ring and ahead of us.  Ignore this guy.
    4279 00011a40     c02b          jruc    oyqqskip
    4280                    
    4281 00011a50           oyqqab_ok       ;ahead/behind ok.
    4282                    
    4283                            ;three cases.  zombie, dead, or alive.
    4284 00011a50     b54e          move    *a10(PLYRMODE),a14
         00011a60     05c0  
    4285 00011a70     0b4e          cmpi    MODE_DEAD,a14
         00011a80     fff6  
    4286 00011a90     cb0c          jrne    oyqqalive
    4287 00011aa0     b54e          move    *a10(STATUS_FLAGS),a14
         00011ab0     0b50  
    4288 00011ac0     1f8e          btst    B_ZOMBIE,a14
    4289 00011ad0     ca03          jrz     oyqqdead
    4290                            ;fall through to zombie
    4291                    
    4292 00011ae0           oyqqzombie      ;Only test this guy if a11 is negative.
    4293 00011ae0                   TEST    a11
    4294 00011af0     cf20          jrnn    oyqqskip
    4295 00011b00     c009          jruc    oyqqcompare
    4296                    
    4297 00011b10           oyqqdead        ;If a11 is negative, take this guy.  If it's zero, compare
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  100

    4298 00011b10                   TEST    a11
    4299 00011b20     ca07          jrz     oyqqcompare
    4300 00011b30     cf1c          jrnn    oyqqskip
    4301 00011b40     576b          clr     a11             ;set a11 to dead
    4302 00011b50     c00a          jruc    oyqqaccept
    4303                    
    4304 00011b60           oyqqalive       ;If a11 is positive, compare, otherwise just take him.
    4305 00011b60                   TEST    a11
    4306 00011b70     c102          jrp     oyqqcompare
    4307 00011b80     182b          movk    1,a11           ;set a11 to alive
    4308 00011b90     c006          jruc    oyqqaccept
    4309                    
    4310 00011ba0           oyqqcompare
    4311 00011ba0     05ae          move    @oyqqbiased_range,a14
         00011bb0 000189f0- 
    4312 00011bd0     49c4          cmp     a14,a4
    4313 00011be0     c601          jrle    oyqqaccept
    4314                    
    4315                            ;too far.
    4316 00011bf0     c010          jruc    oyqqskip
    4317                    
    4318 00011c00           oyqqaccept      ;use the guy in a10
    4319                    
    4320 00011c00     0584          move    a4,@oyqqbiased_range
         00011c10 000189f0- 
    4321 00011c30     4c03          move    a0,a3
    4322 00011c40     b06d          move    a3,*a13(CLOSEST_DIST)
         00011c50     0360  
    4323 00011c60     b0ed          move    a7,*a13(CLOSEST_XDIST)
         00011c70     0370  
    4324 00011c80     b10d          move    a8,*a13(CLOSEST_ZDIST)
         00011c90     0390  
    4325 00011ca0     b12d          move    a9,*a13(CLOSEST_YDIST)
         00011cb0     0380  
    4326                    
    4327 00011cc0     b54e          move    *a10(PLYRNUM),a14
         00011cd0     0580  
    4328 00011ce0     b1cd          move    a14,*a13(CLOSEST_NUM)
         00011cf0     03a0  
    4329                    
    4330 00011d00           oyqqskip
    4331 00011d00                   PULL    a4,a6
    4332 00011d20           oyqqinactive
    4333 00011d20           oyqqskip_nopull
    4334 00011d20     0d81          dsj     a1,oyqqloop
         00011d30     ff5b  
    4335                    
    4336 00011d40     0960  oyqqx   rets
    4337                    
    4338                    *****************************************************************************
    4339                    *
    4340                    * if attached, updates position based on player attached to
    4341                    * wrestler proc = *a13
    4342                    * 
    4343                    * RETURNS:      Z=1     -       not attached to anything
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  101

    4344                    *               Z=0     -       attached and updated
    4345                    *
    4346                    * TRASHES:      a0,a1,a2
    4347                    
    4348 00011d50            SUBR   master_keep_attached
    4349                    
    4350                    
    4351 00011d50     b7aa          move    *a13(ATTACH_PROC),a10,L         ;proc attached to me
         00011d60     03e0  
    4352 00011d70     ca3b          jrz     nwoinot_attached
    4353 00011d80     b740          move    *a10(ATTACH_PROC),a0,L
         00011d90     03e0  
    4354 00011da0     ca38          jrz     nwoinot_attached
    4355                    
    4356 00011db0           nwoistill_attached
    4357                            ;first, see if opponent is on the ground.
    4358 00011db0     b740          move    *a10(OBJ_YPOS),a0,L
         00011dc0     0120  
    4359 00011dd0     b54e          move    *a10(GROUND_Y),a14
         00011de0     0570  
    4360 00011df0     260e          sll     16,a14
    4361 00011e00     49c0          cmp     a14,a0
    4362 00011e10     c710          jrgt    nwoiopp_notgnd
    4363                    
    4364                            ;opponent is on ground.  first, make sure he's not in MODE_GHOST
    4365 00011e20     b54e          move    *a10(ANIMODE),a14
         00011e30     0660  
    4366 00011e40     1e8e          btst    MODE_GHOST_BIT,a14
    4367 00011e50     cb0c          jrnz    nwoiopp_notgnd
    4368                    
    4369                            ;calc new 'floor'
    4370 00011e60     b740          move    *a10(OBJ_YPOS),a0,L
         00011e70     0120  
    4371 00011e80     b5ae          move    *a13(ATTACH_YOFF),a14
         00011e90     03c0  
    4372 00011ea0     260e          sll     16,a14
    4373 00011eb0     45c0          sub     a14,a0
    4374                    
    4375                            ;a0 is our new floor.  stay at or above
    4376 00011ec0     b7ae          move    *a13(OBJ_YPOS),a14,L
         00011ed0     0120  
    4377 00011ee0     49c0          cmp     a14,a0
    4378 00011ef0     c602          jrle    nwoiabove_newfloor
    4379                    
    4380                            ;too low.  climb
    4381 00011f00     b20d          move    a0,*a13(OBJ_YPOS),L
         00011f10     0120  
    4382                    
    4383 00011f20           nwoiabove_newfloor
    4384 00011f20           nwoiopp_notgnd
    4385                    
    4386 00011f20     5600          clr     a0
    4387 00011f30     b20a          move    a0,*a10(OBJ_YVEL),L
         00011f40     02f0  
    4388                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  102

    4389 00011f50     b7a0          move    *a13(OBJ_ZPOS),a0,L
         00011f60     0140  
    4390 00011f70     b5a1          move    *a13(ATTACH_ZOFF),a1
         00011f80     03d0  
    4391 00011f90     2601          sll     16,a1
    4392 00011fa0     4020          add     a1,a0
    4393 00011fb0     b20a          move    a0,*a10(OBJ_ZPOS),L
         00011fc0     0140  
    4394                    
    4395 00011fd0     b7a0          move    *a13(OBJ_YPOS),a0,L
         00011fe0     0120  
    4396 00011ff0     b5a1          move    *a13(ATTACH_YOFF),a1
         00012000     03c0  
    4397 00012010     2601          sll     16,a1
    4398 00012020     4020          add     a1,a0
    4399 00012030     b20a          move    a0,*a10(OBJ_YPOS),L
         00012040     0120  
    4400                    
    4401 00012050     b7a0          move    *a13(OBJ_XPOS),a0,L
         00012060     0100  
    4402 00012070     b5a1          move    *a13(ATTACH_XOFF),a1
         00012080     03b0  
    4403 00012090     2601          sll     16,a1
    4404                    
    4405 000120a0     b5a2          move    *a13(FACING_DIR),a2
         000120b0     04c0  
    4406 000120c0     1f82          btst    MOVE_RIGHT_BIT,a2
    4407 000120d0     cb01          jrnz    nwoiadd
    4408 000120e0     03a1          neg     a1
    4409 000120f0           nwoiadd
    4410 000120f0     4020          add     a1,a0
    4411 00012100     b20a          move    a0,*a10(OBJ_XPOS),L
         00012110     0100  
    4412                    
    4413 00012120     1820          movk    1,a0                    ;Z=0
    4414                    
    4415 00012130           nwoinot_attached
    4416 00012130     0960          rets
    4417                    
    4418                    
    4419                    *****************************************************************************
    4420                    *
    4421                    * if attached, updates position based on player attached to
    4422                    * wrestler proc = *a13
    4423                    * 
    4424                    * RETURNS:      Z=1     -       not attached to anything
    4425                    *               Z=0     -       attached and updated
    4426                    *
    4427                    * TRASHES:      a0,a1,a2
    4428                    
    4429                    
    4430 00012140            SUBR   keep_attached
    4431                    
    4432                    
    4433 00012140     b7a2          move    *a13(ATTACH_PROC),a2,L          ;proc attached to
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  103

         00012150     03e0  
    4434 00012160     ca24          jrz     wckinot_attached
    4435 00012170     b640          move    *a2(ATTACH_PROC),a0,L
         00012180     03e0  
    4436 00012190     ca21          jrz     wckinot_attached
    4437                    
    4438 000121a0           wckistill_attached
    4439 000121a0     5600          clr     a0
    4440 000121b0     b20d          move    a0,*a13(OBJ_YVEL),L
         000121c0     02f0  
    4441                    
    4442 000121d0     b640          move    *a2(OBJ_ZPOS),a0,L
         000121e0     0140  
    4443 000121f0     b441          move    *a2(ATTACH_ZOFF),a1
         00012200     03d0  
    4444 00012210     2601          sll     16,a1
    4445 00012220     4020          add     a1,a0
    4446 00012230     b20d          move    a0,*a13(OBJ_ZPOS),L
         00012240     0140  
    4447                    
    4448 00012250     b640          move    *a2(OBJ_YPOS),a0,L
         00012260     0120  
    4449 00012270     b441          move    *a2(ATTACH_YOFF),a1
         00012280     03c0  
    4450 00012290     2601          sll     16,a1
    4451 000122a0     4020          add     a1,a0
    4452 000122b0     b20d          move    a0,*a13(OBJ_YPOS),L
         000122c0     0120  
    4453                    
    4454                    
    4455 000122d0     b640          move    *a2(OBJ_XPOS),a0,L
         000122e0     0100  
    4456 000122f0     b441          move    *a2(ATTACH_XOFF),a1
         00012300     03b0  
    4457 00012310     2601          sll     16,a1
    4458                    
    4459 00012320     b442          move    *a2(FACING_DIR),a2
         00012330     04c0  
    4460 00012340     1f82          btst    MOVE_RIGHT_BIT,a2
    4461 00012350     cb01          jrnz    wckiadd
    4462 00012360     03a1          neg     a1
    4463 00012370           wckiadd
    4464 00012370     4020          add     a1,a0
    4465 00012380     b20d          move    a0,*a13(OBJ_XPOS),L
         00012390     0100  
    4466                    
    4467 000123a0     1820          movk    1,a0                    ;Z=0
    4468                    
    4469 000123b0           wckinot_attached
    4470 000123b0     0960          rets
    4471                    
    4472                    
    4473                    *****************************************************************************
    4474                    *
    4475                    * RETURNS:      a0 = * closest opponent process
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  104

    4476                    *
    4477                    * TRASHES:      a0
    4478                    
    4479 000123c0            SUBR   get_opp_process
    4480                    
    4481 000123c0     b5a0          move    *a13(CLOSEST_NUM),a0
         000123d0     03a0  
    4482 000123e0                   X32     a0
    4483 000123f0     0b20          addi    process_ptrs,a0
         00012400 00000950- 
    4484 00012420     8600          move    *a0,a0,L
    4485                    
    4486 00012430     0960          rets
    4487                    
    4488                    *****************************************************************************
    4489                    *
    4490                    * RETURNS:      a0 = PLYRMODE of the closest opponent
    4491                    *
    4492                    * TRASHES:      a0
    4493                    
    4494 00012440            SUBR   get_opp_plyrmode
    4495                    
    4496 00012440     b5a0          move    *a13(CLOSEST_NUM),a0
         00012450     03a0  
    4497 00012460                   X32     a0
    4498 00012470     0b20          addi    process_ptrs,a0
         00012480 00000950- 
    4499 000124a0     8600          move    *a0,a0,L
    4500 000124b0     b400          move    *a0(PLYRMODE),a0
         000124c0     05c0  
    4501                    
    4502 000124d0     0960          rets
    4503                    
    4504                    *****************************************************************************
    4505                    *
    4506                    * ARGS:         a0 = facing value (in binary form - 0,1,2,4,8)
    4507                    *
    4508                    * RETURNS:      a0 = facing value (in linear form - 0,1,2,3 - 8)
    4509                    *
    4510                    
    4511 000124e0            SUBR   convert_facing
    4512                    
    4513 000124e0                   X16     a0
    4514 000124f0     0b20          addi    aqkpconvert_table,a0
         00012500 00012540' 
    4515 00012520     8400          move    *a0,a0
    4516 00012530     0960          rets
    4517                    
    4518 00012540           aqkpconvert_table
    4519 00012540     0000          .word   0       ;0 zip
    4520 00012550     0000          .word   0       ;1 up
    4521 00012560     0004          .word   4       ;2 down
    4522 00012570     0000          .word   0       ;3 zip
    4523 00012580     0006          .word   6       ;4 left
    4524 00012590     0007          .word   7       ;5 up_left
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  105

    4525 000125a0     0005          .word   5       ;6 down_left
    4526 000125b0     0000          .word   0       ;7 zip
    4527 000125c0     0002          .word   2       ;8 right
    4528 000125d0     0001          .word   1       ;9 up_right
    4529 000125e0     0003          .word   3       ;10 down_right
    4530 000125f0     0000          .word   0       ;11 zip
    4531 00012600     0000          .word   0       ;12 zip
    4532 00012610     0000          .word   0       ;13 zip
    4533 00012620     0000          .word   0       ;14 zip
    4534 00012630     0000          .word   0       ;15 zip
    4535                    
    4536                    *****************************************************************************
    4537                    
    4538 00012640            SUBRP  init_joystat
    4539                    
    4540 00012640     5600          clr     a0
    4541                    
    4542 00012650     0580          move    a0,@round_tickcount
         00012660 00001030- 
    4543                    
    4544 00012680     09e1          movi    wrest_joystat,a1
         00012690 00001040- 
    4545 000126b0     09c2          movi    16*NUM_WRES,a2
         000126c0     0070  
    4546 000126d0           xznvclr_loop
    4547 000126d0     9201          move    a0,*a1+,L
    4548 000126e0     3c42          dsj     a2,xznvclr_loop
    4549                    
    4550 000126f0     0960          rets
    4551                    
    4552                    *****************************************************************************
    4553                    *
    4554                    * count active wrestler processes.  Clear reduce_bog if there's two, set if
    4555                    * there's more
    4556                    
    4557 00012700            SUBR   init_reduce_bog
    4558                    
    4559 00012700     09e0          movi    process_ptrs,a0
         00012710 00000950- 
    4560 00012730     09c1          movi    NUM_WRES,a1
         00012740     0007  
    4561 00012750     5642          clr     a2
    4562 00012760     960e  oirqlp  move    *a0+,a14,L
    4563 00012770     ca01          jrz     oirqnxt
    4564 00012780     1022          inc     a2                      ;got one.
    4565 00012790     3c81  oirqnxt dsj     a1,oirqlp
    4566                    
    4567                            ;a2 is active wrestlers.  sub 2 and stick it in reduce_bog
    4568 000127a0     1442          subk    2,a2
    4569 000127b0     0582          move    a2,@reduce_bog
         000127c0 000022e0- 
    4570 000127e0     0960          rets
    4571                    
    4572                    *****************************************************************************
    4573                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  106

    4574 000127f0            SUBRP  update_joystat
    4575                    
    4576 000127f0     05a0          move    @HALT,a0
         00012800 000006e0- 
    4577 00012820     cb30          jrnz    rpevexit
    4578                    
    4579                    ;       move    a13,a0
    4580                    ;       calla   wres_get_stick_val_cur
    4581 00012830     b5a0          move    *a13(STICK_VAL_CUR),a0
         00012840     0bc0  
    4582 00012850     1988          movk    1100b,a8                ;mask out left & right
    4583 00012860     5008          and     a0,a8
    4584 00012870     2508          sll     10-2,a8                 ;shift to bit 10 & 11
    4585                    
    4586 00012880     b5ae          move    *a13(FACING_DIR),a14
         00012890     04c0  
    4587 000128a0     1fae          btst    MOVE_LEFT_BIT,a14
    4588 000128b0     ca05          jrz     rpevno_flip
    4589 000128c0                   X16     a0
    4590 000128d0     0b20          addi    rpevxflip_table,a0
         000128e0 00012c60' 
    4591 00012900     8400          move    *a0,a0                  ;flipped based on facing
    4592 00012910           rpevno_flip
    4593 00012910     5408          or      a0,a8                   ;real L/R | flipped joy dirs
    4594                    
    4595                    
    4596 00012920     4da0          move    a13,a0
    4597 00012930     0d5f          calla   wres_get_stick_val_up
         00012940 00000000! 
    4598 00012960     4c04          move    a0,a4
    4599 00012970     4da0          move    a13,a0
    4600 00012980     0d5f          calla   wres_get_stick_val_down
         00012990 00000000! 
    4601 000129b0     5480          or      a4,a0
    4602 000129c0     ca04          jrz     rpevno_stick
    4603                    
    4604 000129d0     4d04          move    a8,a4                   ;cur (flipped) stick vals
    4605 000129e0     ca02          jrz     rpevno_stick
    4606                    
    4607 000129f0     0d3f          callr   rpevinsert
         00012a00     0013  
    4608                    
    4609 00012a10           rpevno_stick
    4610                    
    4611 00012a10     4da0          move    a13,a0
    4612 00012a20     0d5f          calla   wres_get_but_val_down
         00012a30 00000000! 
    4613 00012a50     4c06          move    a0,a6
    4614 00012a60     ca0c          jrz     rpevno_button
    4615 00012a70                   X16     a6
    4616                    
    4617 00012a80     18a5          movk    5,a5                    ;5 button bits
    4618 00012a90     1a07          movk    10000b,a7               ;1st bit << 4 (to skip 4 joy bits)
    4619 00012aa0           rpevbit_loop
    4620 00012aa0     4cc0          move    a6,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  107

    4621 00012ab0     50e0          and     a7,a0                   ;button down?
    4622 00012ac0     ca04          jrz     rpevskip
    4623 00012ad0     4c04          move    a0,a4
    4624 00012ae0     5504          or      a8,a4                   ;+ cur (flipped) stick vals
    4625 00012af0     0d3f          callr   rpevinsert                      ;only 1 button per entry
         00012b00     0003  
    4626 00012b10           rpevskip
    4627 00012b10     2427          sll     1,a7
    4628 00012b20     3d25          dsj     a5,rpevbit_loop
    4629                    
    4630 00012b30           rpevno_button
    4631                    
    4632 00012b30           rpevexit
    4633 00012b30     0960          rets
    4634                    
    4635 00012b40           rpevinsert
    4636 00012b40     05a0          move    @round_tickcount,a0
         00012b50 00001030- 
    4637 00012b70     2600          sll     16,a0
    4638 00012b80     5404          or      a0,a4
    4639                    
    4640 00012b90     b5a0          move    *a13(PLYRNUM),a0
         00012ba0     0580  
    4641 00012bb0     2520          sll     5+4,a0                          ;PLYRNUM x32 x16
    4642                    
    4643 00012bc0     0b20          addi    wrest_joystat + 32*15,a0        ;2nd last entry (after pre-dec)
         00012bd0 00001220- 
    4644 00012bf0     4c01          move    a0,a1
    4645 00012c00     1001          addk    32,a1                           ;last entry (after pre-dec)
    4646                    
    4647 00012c10     19e2          movk    15,a2                           ;# entries - 1
    4648 00012c20           rpevmove_loop
    4649 00012c20     aa01          move    -*a0,-*a1,L                     ;move each entry down
    4650 00012c30     3c42          dsj     a2,rpevmove_loop                        ;1 position
    4651                    
    4652 00012c40     8280          move    a4,*a0,L                        ;time stamp : joy & buttons
    4653 00012c50     0960          rets
    4654                    
    4655 00012c60           rpevxflip_table ;convert to forward / away  if facing left
    4656 00012c60     0000          .word   0               ;0
    4657 00012c70     0001          .word   J_UP            ;1
    4658 00012c80     0002          .word   J_DOWN          ;2
    4659 00012c90     0000          .word   0               ;3
    4660 00012ca0     0008          .word   J_TOWARD        ;4
    4661 00012cb0     0009          .word   J_UP_TOWARD     ;5
    4662 00012cc0     000a          .word   J_DOWN_TOWARD   ;6
    4663 00012cd0     0000          .word   0               ;7
    4664 00012ce0     0004          .word   J_AWAY          ;8
    4665 00012cf0     0005          .word   J_UP_AWAY       ;9
    4666 00012d00     0006          .word   J_DOWN_AWAY     ;10
    4667 00012d10     0000          .word   0,0,0,0,0       ;11-15
    4668                    
    4669                    
    4670                    *****************************************************************************
    4671                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  108

    4672 00012d60            SUBR   clear_button_presses
    4673                    
    4674 00012d60     18a1          movk    5,a1            ;5 buttons
    4675 00012d70     4da2          move    a13,a2
    4676 00012d80     0b02          addi    PUNCHB_COUNT,a2
         00012d90     0800  
    4677 00012da0     5600          clr     a0
    4678 00012db0           ncciloop
    4679 00012db0     9002          move    a0,*a2+
    4680 00012dc0     3c41          dsj     a1,ncciloop
    4681                    
    4682 00012dd0     0960          rets
    4683                    
    4684                    *****************************************************************************
    4685                    
    4686 00012de0            SUBR   count_button_presses
    4687                    
    4688 00012de0     4da0          move    a13,a0
    4689 00012df0     0d5f          calla   wres_get_but_val_down
         00012e00 00000000! 
    4690 00012e20     4c00          move    a0,a0
    4691 00012e30     ca0c          jrz     zbjgexit
    4692                    
    4693 00012e40     18a1          movk    5,a1            ;5 bits
    4694 00012e50     4da2          move    a13,a2
    4695 00012e60     0b02          addi    PUNCHB_COUNT,a2
         00012e70     0800  
    4696 00012e80           zbjgloop
    4697 00012e80     2fe0          srl     1,a0            ;button--0CaHrry
    4698 00012e90     c903          jrnc    zbjgno_but
    4699                    
    4700 00012ea0     844e          move    *a2,a14
    4701 00012eb0     102e          inc     a14
    4702 00012ec0     81c2          move    a14,*a2
    4703                    
    4704 00012ed0           zbjgno_but
    4705 00012ed0     0b02          addi    16,a2
         00012ee0     0010  
    4706 00012ef0     3d01          dsj     a1,zbjgloop
    4707                    
    4708 00012f00           zbjgexit
    4709 00012f00     0960          rets
    4710                    
    4711                    ;       WORD    PUNCHB_COUNT    ;0 <------
    4712                    ;       WORD    BLOCKB_COUNT    ;1 keep   |
    4713                    ;       WORD    SPUNCHB_COUN    ;2 ordered|
    4714                    ;       WORD    KICK_COUNT      ;3        |
    4715                    ;       WORD    SKICK_COUNT     ;4 <------
    4716                    
    4717                    *****************************************************************************
    4718                    
    4719 00012f10            SUBR   direction_test
    4720                    
    4721                     .if 0
    4722                            ;can put this in a mode
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  109

    4723                            .ref    direction_test
    4724                    
    4725                            move    *a13(PLYRNUM),a8
    4726                            move    *a13(CLOSEST_NUM),a9
    4727                    
    4728                            CREATE  0,direction_test                ;temp!!!!!!!!!!!
    4729                    
    4730                            movi    424000h,a0
    4731                            move    a0,*a13(OBJ_YVEL),L
    4732                    
    4733                            SETMODE INAIR
    4734                            rets
    4735                     .endif
    4736                    
    4737                    
    4738                    ;a8 = PLYRNUM
    4739                    ;a9 = CLOSEST_NUM
    4740                    
    4741 00012f10     b10d          move    a8,*a13(PLYRNUM)
         00012f20     0580  
    4742 00012f30     b12d          move    a9,*a13(CLOSEST_NUM)
         00012f40     03a0  
    4743                    
    4744 00012f50                   X32     a8
    4745 00012f60     0b28          addi    process_ptrs,a8
         00012f70 00000950- 
    4746 00012f90     870a          move    *a8,a10,L
    4747                    
    4748 00012fa0                   X32     a9
    4749 00012fb0     0b29          addi    process_ptrs,a9
         00012fc0 00000950- 
    4750 00012fe0     872b          move    *a9,a11,L
    4751                    
    4752 00012ff0     bb4d          move    *a10(OBJ_XPOS),*a13(OBJ_XPOS),L
         00013000     0100  
         00013010     0100  
    4753 00013020     bb4d          move    *a10(OBJ_YPOS),*a13(OBJ_YPOS),L
         00013030     0120  
         00013040     0120  
    4754 00013050     bb4d          move    *a10(OBJ_ZPOS),*a13(OBJ_ZPOS),L
         00013060     0140  
         00013070     0140  
    4755                    
    4756                    
    4757                    
    4758 00013080     b740          move    *a10(OBJ_XPOS),a0,L
         00013090     0100  
    4759 000130a0     b761          move    *a11(OBJ_XPOS),a1,L
         000130b0     0100  
    4760 000130c0     4401          sub     a0,a1
    4761 000130d0     09c0          movi    TSEC,a0
         000130e0     0035  
    4762 000130f0     5801          divs    a0,a1                   ;a1 / a0
    4763 00013100     b22d          move    a1,*a13(OBJ_XVEL),L
         00013110     02d0  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  110

    4764                    
    4765                    
    4766 00013120     b740          move    *a10(OBJ_ZPOS),a0,L
         00013130     0140  
    4767 00013140     b761          move    *a11(OBJ_ZPOS),a1,L
         00013150     0140  
    4768 00013160     4401          sub     a0,a1
    4769 00013170     09c0          movi    TSEC,a0
         00013180     0035  
    4770 00013190     5801          divs    a0,a1                   ;a1 / a0
    4771 000131a0     b22d          move    a1,*a13(OBJ_ZVEL),L
         000131b0     0310  
    4772                    
    4773                    
    4774                    
    4775 000131c0     5600          clr     a0
    4776 000131d0     b20d          move    a0,*a13(OBJ_YVEL),L
         000131e0     02f0  
    4777                    
    4778                    ;       move    a0,*a13(OBJ_XVEL),L
    4779                    ;       move    a0,*a13(OBJ_ZVEL),L
    4780                    
    4781 000131f0     5600          clr     a0                      ;x pos
    4782 00013200     5621          clr     a1                      ;y pos
    4783 00013210     09e2          movi    D2ST2B03,a2             ;* image
         00013220 00000000! 
    4784 00013240     1a83          movk    20,a3                   ;z pos
    4785 00013250     09e4          movi    DMAWNZ|M_3D,a4          ;DMA flags
         00013260 00008102  
    4786 00013280     b08d          move    a4,*a13(OBJ_CONTROL)
         00013290     0780  
    4787 000132a0     56a5          clr     a5                      ;object ID
    4788 000132b0     56c6          clr     a6                      ;x vel
    4789 000132c0     56e7          clr     a7                      ;y vel
    4790 000132d0     0d5f          calla   BEGINOBJ
         000132e0 00000000! 
    4791                    
    4792 00013300     09c0          movi    TSEC,a0
         00013310     0035  
    4793 00013320           llstloop
    4794 00013320                   PUSHP   a0
    4795                    
    4796                    ;velocity add
    4797 00013330     b7a0          move    *a13(OBJ_XPOS),a0,L
         00013340     0100  
    4798 00013350     b7a1          move    *a13(OBJ_XVEL),a1,L
         00013360     02d0  
    4799 00013370     4020          add     a1,a0
    4800 00013380     b20d          move    a0,*a13(OBJ_XPOS),L
         00013390     0100  
    4801                    
    4802 000133a0     b7a0          move    *a13(OBJ_YPOS),a0,L
         000133b0     0120  
    4803 000133c0     b7a1          move    *a13(OBJ_YVEL),a1,L
         000133d0     02f0  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  111

    4804 000133e0     4020          add     a1,a0
    4805 000133f0     cf01          jrnn    llstyok
    4806 00013400     5600          clr     a0
    4807 00013410           llstyok
    4808 00013410     b20d          move    a0,*a13(OBJ_YPOS),L
         00013420     0120  
    4809                    
    4810 00013430     b7a0          move    *a13(OBJ_ZPOS),a0,L
         00013440     0140  
    4811 00013450     b7a1          move    *a13(OBJ_ZVEL),a1,L
         00013460     0310  
    4812 00013470     4020          add     a1,a0
    4813 00013480     b20d          move    a0,*a13(OBJ_ZPOS),L
         00013490     0140  
    4814                    
    4815                    
    4816                    
    4817                    
    4818                    
    4819                    ;image plot
    4820 000134a0     b7a5          move    *a13(OBJ_XPOS),a5,L     ;x val
         000134b0     0100  
    4821                    
    4822 000134c0     09c0          movi    Y_SCALE_MULTIPLIER,a0
         000134d0     3566  
    4823 000134e0     b5a1          move    *a13(OBJ_ZPOSINT),a1
         000134f0     0150  
    4824 00013500     5c01          mpys    a0,a1
    4825 00013510     4c26          move    a1,a6                   ;y val
    4826                    
    4827 00013520     b5a7          move    *a13(OBJ_CONTROL),a7    ;flip bits & pixel ops
         00013530     0780  
    4828                    
    4829 00013540     b2c8          move    a6,*a8(OYVAL),L         ;keep updating YVAL to keep priorities
         00013550     00a0  
    4830                    
    4831 00013560     b2a8          move    a5,*a8(OXVAL),L
         00013570     0080  
    4832 00013580     b2c8          move    a6,*a8(OYVAL),L
         00013590     00a0  
    4833                    
    4834 000135a0     09e1          movi    [20,0],a1                       ;z pos
         000135b0 00140000  
    4835 000135d0     b228          move    a1,*a8(OZVAL),L
         000135e0     00c0  
    4836                    
    4837 000135f0     0546          setf    6,0,0
    4838 00013600     b0e8          move    a7,*a8(OCTRL)                   ;Write 6 low bits
         00013610     00f0  
    4839 00013620     0570          setf    16,1,0
    4840                    
    4841                    
    4842 00013630                   SLEEPK  1
    4843                    
    4844 00013670                   PULLP   a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  112

    4845 00013680     0d80          dsj     a0,llstloop
         00013690     ffc8  
    4846                    
    4847 000136a0     0d5f          calla   DELOBJA8
         000136b0 00000000! 
    4848                    
    4849 000136d0                   DIE
    4850                    
    4851                    *****************************************************************************
    4852                    *
    4853                    * a11 = * secret move table
    4854                    * a13 = * wrestler process
    4855                    
    4856 00013700            SUBR   check_secret_moves
    4857                    
    4858 00013700     b5ae          move    *a13(IMMOBILIZE_TIME),a14
         00013710     0ae0  
    4859 00013720     cb49          jrnz    zxwjdone
    4860                    
    4861 00013730     b5ae          move    *a13(PLYRMODE),a14
         00013740     05c0  
    4862 00013750     0b4e          cmpi    MODE_DIZZY,a14
         00013760     fff7  
    4863 00013770     ca44          jreq    zxwjdone
    4864 00013780     0b4e          cmpi    MODE_WAITANIM,a14
         00013790     fff3  
    4865 000137a0     ca41          jreq    zxwjdone
    4866                    
    4867                    ;No secret moves if getup time is set - out of control runs, etc.
    4868 000137b0     b5ae          move    *a13(GETUP_TIME),a14
         000137c0     0460  
    4869 000137d0     cb3e          jrnz    zxwjdone
    4870                    
    4871 000137e0     9760          move    *a11+,a0,L              ;button hold test code
    4872 000137f0     0920          call    a0
    4873 00013800     c83b          jrc     zxwjdone
    4874                    
    4875 00013810     b5aa          move    *a13(PLYRNUM),a10
         00013820     0580  
    4876 00013830     252a          sll     5+4,a10                 ;PLYRNUM x32 x16
    4877 00013840     0b2a          addi    wrest_joystat,a10
         00013850 00001040- 
    4878                    
    4879                            ;only check if newest entry in queue is fresh
    4880 00013870     b540          move    *a10(10h),a0            ;time stamp
         00013880     0010  
    4881 00013890     05a1          move    @round_tickcount,a1
         000138a0 00001030- 
    4882 000138c0     4801          cmp     a0,a1
    4883 000138d0     cb2e          jrne    zxwjdone
    4884                    
    4885                    
    4886 000138e0           zxwjnext_table
    4887                            .align
    4888 00013a00     9762          move    *a11+,a2,L
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  113

    4889 00013a10     ca1a          jrz     zxwjdone
    4890 00013a20     4d49          move    a10,a9
    4891                    
    4892 00013a30     1903          movk    8,a3                    ;only skip 8 masked entries
    4893                    
    4894                            ;the first entry in the queue requires a special check...
    4895 00013a40     8440          move    *a2,a0                  ;value
    4896 00013a50     b441          move    *a2(10h),a1             ;mask
         00013a60     0010  
    4897 00013a70     872e          move    *a9,a14,L
    4898 00013a80     0b8e          andi    0ffffh,a14              ;queue head
         00013a90 ffff0000  
    4899 00013ab0     522e          andn    a1,a14                  ;apply mask
    4900                    
    4901                            ;if the mask leaves nothing behind, then there's noise since the
    4902                            ; final (trigger) move, so blow it off.
    4903 00013ac0     cae1          jrz     zxwjnext_table
    4904                    
    4905 00013ad0           zxwjloop
    4906 00013ad0     9440          move    *a2+,a0
    4907 00013ae0     ce0e          jrn     zxwjmatch
    4908 00013af0     9441          move    *a2+,a1                 ;mask
    4909 00013b00           zxwjskip
    4910                    
    4911                            ;check for end of table (16 entries)
    4912                    
    4913 00013b00     9727          move    *a9+,a7,L
    4914 00013b10     4ce8          move    a7,a8
    4915 00013b20     2e07          srl     16,a7                   ;round tick count
    4916 00013b30     0b88          andi    0ffffh,a8               ;joy+buttons
         00013b40 ffff0000  
    4917 00013b60     5228          andn    a1,a8
    4918 00013b70     0da3          dsjeq   a3,zxwjskip
         00013b80     fff7  
    4919                    
    4920 00013b90     4808          cmp     a0,a8
    4921 00013ba0     caf2          jreq    zxwjloop
    4922                    
    4923 00013bb0           zxwjfailed
    4924 00013bb0     c0d2          jruc    zxwjnext_table
    4925                    
    4926 00013bc0           zxwjdone
    4927 00013bc0     0960          rets
    4928                    
    4929 00013bd0           zxwjmatch
    4930                            ;skip it if we're a zombie
    4931 00013bd0     b5ae          move    *a13(STATUS_FLAGS),a14
         00013be0     0b50  
    4932 00013bf0     1f8e          btst    B_ZOMBIE,a14
    4933 00013c00     cbfb          jrnz    zxwjdone
    4934                    
    4935 00013c10     0b80          andi    07fffh,a0               ;clear out sign bit
         00013c20 ffff8000  
    4936 00013c40     05a1          move    @round_tickcount,a1
         00013c50 00001030- 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  114

    4937 00013c70     0b81          andi    0ffffh,a1               ;clear out sign extend
         00013c80 ffff0000  
    4938 00013ca0     44e1          sub     a7,a1
    4939 00013cb0     4801          cmp     a0,a1                   ;below count?
    4940 00013cc0     c7ee          jrgt    zxwjfailed
    4941                    
    4942 00013cd0     8640          move    *a2,a0,L                ;code to execute
    4943 00013ce0     0160          jump    a0
    4944                    
    4945                    *****************************************************************************
    4946                    *
    4947                    * sets animations for legs & torso based on facing & move direction
    4948                    *
    4949                    
    4950 00013cf0            SUBR   change_walk_anim
    4951                    
    4952 00013cf0     5600          clr     a0
    4953 00013d00     b00d          move    a0,*a13(CONSECUTIVE_HITS)
         00013d10     0e50  
    4954                    ;Fix walking speeds!
    4955                    ;Did I do a taunt to achieve high risk move bonus?
    4956 00013d20     b5ae          move    *a13(RISK),a14
         00013d30     0950  
    4957 00013d40     1e0e          btst    15,a14
    4958 00013d50     cb03          jrnz    evuptaunted
    4959 00013d60     5600          clr     a0
    4960 00013d70     b00d          move    a0,*A13(RISK)
         00013d80     0950  
    4961 00013d90           evuptaunted
    4962 00013d90     b5a0          move    *a13(WALK_FAST),a0
         00013da0     0b40  
    4963 00013db0     cb07          jrnz    evupfast
    4964                    
    4965 00013dc0     0d3f          callr   get_opp_process
         00013dd0     fe5e  
    4966 00013de0     b400          move    *a0(PLYRMODE),a0        ;don't slow down if backing
         00013df0     05c0  
    4967 00013e00     0b40          cmpi    MODE_ONGROUND,a0        ;away from a downed opponent
         00013e10     fffb  
    4968 00013e20     cb03          jrnz    evupnotgrnd
    4969 00013e30           evupfast
    4970 00013e30     09c0          movi    0cdh,a0                 ;fast legs
         00013e40     00cd  
    4971 00013e50     c002          jruc    evupgo_spd
    4972                    
    4973 00013e60           evupnotgrnd
    4974 00013e60     09c0          movi    100h,a0                 ;normal speed
         00013e70     0100  
    4975                    
    4976 00013e80           evupgo_spd
    4977 00013e80     b00d          move    a0,*a13(ANI_SPEED)
         00013e90     0650  
    4978 00013ea0     b5a0          move    *a13(ANIMODE2),a0
         00013eb0     06e0  
    4979 00013ec0     1fa0          btst    MODE_UNINT_BIT,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  115

    4980 00013ed0     cb1a          jrnz    evupno_interrupt
    4981                    
    4982 00013ee0     b5a0          move    *a13(FACING_DIR),a0
         00013ef0     04c0  
    4983 00013f00     0d3f          callr   convert_facing          ;(0-7)
         00013f10     fe5c  
    4984 00013f20     2fe0          srl     1,a0                    ;only uses diagonals (0-3)
    4985 00013f30                   X4      a0
    4986 00013f40     4c01          move    a0,a1
    4987                    
    4988 00013f50     b5a0          move    *a13(NEW_FACING_DIR),a0
         00013f60     04d0  
    4989 00013f70     0d3f          callr   convert_facing          ;(0-7)
         00013f80     fe55  
    4990 00013f90     2fe0          srl     1,a0                    ;only uses diagonals (0-3)
    4991 00013fa0     4020          add     a1,a0
    4992 00013fb0                   X32     a0
    4993                    
    4994 00013fc0     b5ae          move    *a13(WRESTLERNUM),a14
         00013fd0     0590  
    4995 00013fe0                   X32     a14
    4996 00013ff0     0b2e          addi    evupwres_torso_anims,a14
         00014000 00014210' 
    4997 00014020     87ce          move    *a14,a14,L              ;* torso anim table
    4998 00014030     41c0          add     a14,a0
    4999                    
    5000 00014040     8600          move    *a0,a0,L
    5001 00014050     0d5f          calla   change_anim2            ;torso
         00014060 00000000! 
    5002                    
    5003 00014080           evupno_interrupt
    5004                    
    5005 00014080     b5a0          move    *a13(MOVE_DIR),a0
         00014090     04b0  
    5006 000140a0     0d3f          callr   convert_facing          ;(0-7)
         000140b0     fe42  
    5007 000140c0                   X8      a0
    5008 000140d0     4c01          move    a0,a1
    5009                    
    5010 000140e0     b5a0          move    *a13(FACING_DIR),a0
         000140f0     04c0  
    5011 00014100     0d3f          callr   convert_facing          ;(0-7)
         00014110     fe3c  
    5012 00014120     4020          add     a1,a0
    5013 00014130                   X32     a0
    5014                    
    5015 00014140     b5ae          move    *a13(WRESTLERNUM),a14
         00014150     0590  
    5016 00014160                   X32     a14
    5017 00014170     0b2e          addi    evupwres_leg_anims,a14
         00014180 00014350' 
    5018 000141a0     87ce          move    *a14,a14,L              ;* leg anim table
    5019 000141b0     41c0          add     a14,a0
    5020                    
    5021 000141c0     8600          move    *a0,a0,L                ;* new animation
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  116

    5022 000141d0     0d5f          calla   change_anim1            ;legs
         000141e0 00000000! 
    5023                    
    5024 00014200     0960  evuprets        rets
    5025                    
    5026                    
    5027                            .ref    bam_torso_anims_table,bam_leg_anims_table
    5028                            .ref    dnk_torso_anims_table,dnk_leg_anims_table
    5029                            .ref    hrt_torso_anims_table,hrt_leg_anims_table
    5030                            .ref    lex_torso_anims_table,lex_leg_anims_table
    5031                            .ref    rzr_torso_anims_table,rzr_leg_anims_table
    5032                            .ref    shn_torso_anims_table,shn_leg_anims_table
    5033                            .ref    und_torso_anims_table,und_leg_anims_table
    5034                            .ref    yok_torso_anims_table,yok_leg_anims_table
    5035                    
    5036 00014210           evupwres_torso_anims
    5037 00014210 00000000!         .long   hrt_torso_anims_table   ;0 Bret Hart
    5038 00014230 00000000!         .long   rzr_torso_anims_table   ;1 Razor Ramon
    5039 00014250 00000000!         .long   und_torso_anims_table   ;2 Undertaker
    5040 00014270 00000000!         .long   yok_torso_anims_table   ;3 Yokozuna
    5041 00014290 00000000!         .long   shn_torso_anims_table   ;4 Shawn Michaels
    5042 000142b0 00000000!         .long   bam_torso_anims_table   ;5 Bam Bam
    5043 000142d0 00000000!         .long   dnk_torso_anims_table   ;6 Doink
    5044 000142f0 00000000!         .long   dnk_torso_anims_table   ;7 spare
    5045 00014310 00000000!         .long   lex_torso_anims_table   ;8 Lex Luger
    5046 00014330 00000000          .long   0                       ;9 Referee
    5047                    
    5048 00014350           evupwres_leg_anims
    5049 00014350 00000000!         .long   hrt_leg_anims_table     ;0 Bret Hart
    5050 00014370 00000000!         .long   rzr_leg_anims_table     ;1 Razor Ramon
    5051 00014390 00000000!         .long   und_leg_anims_table     ;2 Undertaker
    5052 000143b0 00000000!         .long   yok_leg_anims_table     ;3 Yokozuna
    5053 000143d0 00000000!         .long   shn_leg_anims_table     ;4 Shawn Michaels
    5054 000143f0 00000000!         .long   bam_leg_anims_table     ;5 Bam Bam
    5055 00014410 00000000!         .long   dnk_leg_anims_table     ;6 Doink
    5056 00014430 00000000!         .long   dnk_leg_anims_table     ;7 spare
    5057 00014450 00000000!         .long   lex_leg_anims_table     ;8 Lex Luger
    5058 00014470 00000000          .long   0                       ;9 Referee
    5059                    
    5060                    
    5061                    *****************************************************************************
    5062                    *
    5063                    * returns: A0 = rotation anim based on NEW_FACING_DIR & FACING_DIR
    5064                    *
    5065                    * goes into stance anim if already facing if NEW_FACING = FACING
    5066                    
    5067 00014490            SUBR   set_rotate_anim
    5068                    
    5069 00014490     b5a0          move    *a13(FACING_DIR),a0
         000144a0     04c0  
    5070 000144b0     0d5f          calla   convert_facing                  ;(0-7)
         000144c0 000124e0' 
    5071 000144e0     2fe0          srl     1,a0                            ;only uses diagonals (0-3)
    5072 000144f0                   X4      a0
    5073 00014500     4c01          move    a0,a1
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  117

    5074                    
    5075 00014510     b5a0          move    *a13(NEW_FACING_DIR),a0
         00014520     04d0  
    5076 00014530     0d5f          calla   convert_facing                  ;(0-7)
         00014540 000124e0' 
    5077 00014560     2fe0          srl     1,a0                            ;only uses diagonals (0-3)
    5078 00014570     4020          add     a1,a0
    5079 00014580                   X32     a0
    5080                    
    5081 00014590     b5ae          move    *a13(WRESTLERNUM),a14
         000145a0     0590  
    5082 000145b0                   X32     a14
    5083 000145c0     0b2e          addi    dzwfwres_rotate_anims,a14
         000145d0 00014670' 
    5084 000145f0     87ce          move    *a14,a14,L                      ;* rotate anim table
    5085 00014600     41c0          add     a14,a0
    5086                    
    5087 00014610     b5ae          move    *a13(NEW_FACING_DIR),a14
         00014620     04d0  
    5088 00014630     b1cd          move    a14,*a13(FACING_DIR)
         00014640     04c0  
    5089                    
    5090 00014650     8600          move    *a0,a0,L
    5091                    ;;;     calla   change_anim1
    5092                    
    5093 00014660     0960          rets
    5094                    
    5095                    
    5096                            .ref    bam_rotate_anims_table
    5097                            .ref    dnk_rotate_anims_table
    5098                            .ref    hrt_rotate_anims_table
    5099                            .ref    lex_rotate_anims_table
    5100                            .ref    rzr_rotate_anims_table
    5101                            .ref    shn_rotate_anims_table
    5102                            .ref    und_rotate_anims_table
    5103                            .ref    yok_rotate_anims_table
    5104                    
    5105 00014670           dzwfwres_rotate_anims
    5106 00014670 00000000!         .long   hrt_rotate_anims_table  ;0 Bret Hart
    5107 00014690 00000000!         .long   rzr_rotate_anims_table  ;1 Razor Ramon
    5108 000146b0 00000000!         .long   und_rotate_anims_table  ;2 Undertaker
    5109 000146d0 00000000!         .long   yok_rotate_anims_table  ;3 Yokozuna
    5110 000146f0 00000000!         .long   shn_rotate_anims_table  ;4 Shawn Michaels
    5111 00014710 00000000!         .long   bam_rotate_anims_table  ;5 Bam Bam
    5112 00014730 00000000!         .long   dnk_rotate_anims_table  ;6 Doink
    5113 00014750 00000000!         .long   dnk_rotate_anims_table  ;7 spare
    5114 00014770 00000000!         .long   lex_rotate_anims_table  ;8 Lex Luger
    5115 00014790 00000000          .long   0                       ;9 Referee
    5116                    
    5117                    
    5118                    *****************************************************************************
    5119                    
    5120 000147b0            SUBR   bounce_off_ropes
    5121                    
    5122                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  118

    5123 000147b0     b5a0          move    *a13(INRING),a0
         000147c0     0560  
    5124 000147d0     cb3f          jrnz    nyfloutside
    5125                    
    5126 000147e0     b5ae          move    *a13(WRESTLERNUM),a14
         000147f0     0590  
    5127 00014800                   X16     a14
    5128 00014810     0b2e          addi    nyflbounce_xoffsets,a14
         00014820 00014be0' 
    5129 00014840     85ce          move    *a14,a14
    5130                    
    5131                    
    5132 00014850     b5a0          move    *a13(MOVE_DIR),a0
         00014860     04b0  
    5133 00014870     1f80          btst    PLAYER_RIGHT_BIT,a0
    5134 00014880     cb0b          jrnz    nyflright
    5135                    ;nyflleft
    5136 00014890     09e6          movi    vln_left_rope,a6
         000148a0 00003900- 
    5137 000148c0     0d3f          callr   calc_line_x
         000148d0     01ba  
    5138 000148e0     45c0          sub     a14,a0
    5139 000148f0     b5a1          move    *a13(OBJ_COLLX1),a1
         00014900     01e0  
    5140 00014910     4801          cmp     a0,a1                   ;a0-a1
    5141 00014920     c60b          jrle    nyflbounce
    5142 00014930     0960          rets
    5143                    
    5144 00014940           nyflright
    5145 00014940     09e6          movi    vln_right_rope,a6
         00014950 00002400- 
    5146 00014970     0d3f          callr   calc_line_x
         00014980     01af  
    5147 00014990     41c0          add     a14,a0
    5148 000149a0     b5a1          move    *a13(OBJ_COLLX2),a1
         000149b0     01f0  
    5149 000149c0     4801          cmp     a0,a1                   ;a0-a1
    5150 000149d0     c61f          jrle    nyflno_bounce
    5151                    
    5152 000149e0           nyflbounce
    5153                    ;;;     move    a0,*a13(OBJ_XPOSINT)
    5154                    
    5155                    
    5156 000149e0     b5a0          MOVE    *A13(GETUP_TIME),A0
         000149f0     0460  
    5157 00014a00     cb07          JRNZ    ALREADY_DONE_RISK_MESS
    5158                    
    5159 00014a10     b5a0          move    *a13(RISK),A0
         00014a20     0950  
    5160 00014a30     cb04          JRNZ    ALREADY_DONE_RISK_MESS
    5161                    
    5162                    ;Time to execute high-risk move!
    5163 00014a40     09c0          MOVI    60,A0
         00014a50     003c  
    5164 00014a60     b00d          MOVE    A0,*A13(RISK)
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  119

         00014a70     0950  
    5165                    
    5166 00014a80           ALREADY_DONE_RISK_MESS
    5167                    
    5168 00014a80     b5ae          move    *a13(WRESTLERNUM),a14
         00014a90     0590  
    5169 00014aa0                   X32     a14
    5170 00014ab0     0b2e          addi    nyflbounce_anims,a14
         00014ac0 00014c80' 
    5171 00014ae0     87c0          move    *a14,a0,L                       ;* bounce anim
    5172 00014af0     0d5f          calla   change_anim1a
         00014b00 00000000! 
    5173 00014b20                   SETMODE BOUNCING
    5174                    
    5175 00014bd0           nyflno_bounce
    5176 00014bd0           nyfloutside
    5177 00014bd0     0960          rets
    5178                    
    5179                    
    5180                            .ref    bam_bounce_anim
    5181                            .ref    dnk_bounce_anim
    5182                            .ref    hrt_bounce_anim
    5183                            .ref    lex_bounce_anim
    5184                            .ref    rzr_bounce_anim
    5185                            .ref    shn_bounce_anim
    5186                            .ref    und_bounce_anim
    5187                            .ref    yok_bounce_anim
    5188                    
    5189 00014be0           nyflbounce_xoffsets
    5190 00014be0     ffec          .word   -20     ;0 Bret Hart
    5191 00014bf0     ffec          .word   -20     ;1 Razor Ramon
    5192 00014c00     ffec          .word   -20     ;2 Undertaker
    5193 00014c10     ffec          .word   -20     ;3 Yokozuna
    5194 00014c20     0000          .word   0       ;4 Shawn Michaels
    5195 00014c30     ffe2          .word   -30     ;5 Bam Bam
    5196 00014c40     ffec          .word   -20     ;6 Doink
    5197 00014c50     ffec          .word   -20     ;7 spare
    5198 00014c60     ffec          .word   -20     ;8 Lex Luger
    5199 00014c70     0000          .word   0       ;9 Referee
    5200                    
    5201 00014c80           nyflbounce_anims
    5202 00014c80 00000000!         .long   hrt_bounce_anim ;0 Bret Hart
    5203 00014ca0 00000000!         .long   rzr_bounce_anim ;1 Razor Ramon
    5204 00014cc0 00000000!         .long   und_bounce_anim ;2 Undertaker
    5205 00014ce0 00000000!         .long   yok_bounce_anim ;3 Yokozuna
    5206 00014d00 00000000!         .long   shn_bounce_anim ;4 Shawn Michaels
    5207 00014d20 00000000!         .long   bam_bounce_anim ;5 Bam Bam
    5208 00014d40 00000000!         .long   dnk_bounce_anim ;6 Doink
    5209 00014d60 00000000!         .long   dnk_bounce_anim ;7 spare
    5210 00014d80 00000000!         .long   lex_bounce_anim ;8 Lex Luger
    5211 00014da0 00000000!         .long   dnk_bounce_anim ;9 Referee
    5212                    
    5213                    *****************************************************************************
    5214                    
    5215 00014dc0            SUBR   execute_walk
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  120

    5216                    
    5217                            ;Do a step sound every 32 ticks if we're walking. (whether or not
    5218                            ; INTURN bit is set)
    5219 00014dc0     b5a0          move    *a13(MOVE_DIR),a0
         00014dd0     04b0  
    5220 00014de0     ca0a          JRZ     NO_SOUND_CALL
    5221 00014df0     05a0          MOVE    @PCNT,A0
         00014e00 00000190- 
    5222 00014e20     0b80          ANDI    31,A0
         00014e30 ffffffe0  
    5223 00014e50     cb03          JRNZ    NO_SOUND_CALL
    5224 00014e60     0d5f          CALLA   WALK_SOUND
         00014e70 00000000! 
    5225 00014e90           NO_SOUND_CALL
    5226                    
    5227                            ;if our INTURN bit is set, we're doing a turn and we shouldn't do
    5228                            ; anything here -- treat it like UNINT.
    5229                    
    5230 00014e90     b5ae          move    *a13(ANIMODE),a14
         00014ea0     0660  
    5231 00014eb0     1fce          btst    MODE_INTURN_BIT,a14
    5232 00014ec0     cb10          jrnz    dnhlinturn
    5233                    
    5234 00014ed0     b5ae          move    *a13(ANIMODE2),a14
         00014ee0     06e0  
    5235 00014ef0     1fce          btst    MODE_INTURN_BIT,a14
    5236 00014f00     cb0c          jrnz    dnhlinturn
    5237                    
    5238 00014f10     5600          clr     a0
    5239 00014f20     b00d          move    a0,*a13(ATTACK_TYPE)
         00014f30     05e0  
    5240                    
    5241 00014f40     b5a0          move    *a13(MOVE_DIR),a0
         00014f50     04b0  
    5242                    
    5243 00014f60                   X32     a0
    5244 00014f70     0b20          addi    dnhlwalk_table,a0
         00014f80 00015050' 
    5245 00014fa0     8600          move    *a0,a0,L
    5246 00014fb0     0920          call    a0
    5247                    
    5248 00014fc0     0960  dnhlrets        rets
    5249                    
    5250 00014fd0     b5a0  dnhlinturn      move    *a13(MOVE_DIR),a0
         00014fe0     04b0  
    5251 00014ff0     cbfc          jrnz    dnhlrets
    5252                    
    5253                            ;stick at rest - clear any velocity we might have lying around
    5254 00015000     b20d          move    a0,*a13(OBJ_XVEL),L
         00015010     02d0  
    5255 00015020     b20d          move    a0,*a13(OBJ_ZVEL),L
         00015030     0310  
    5256                    
    5257 00015040     0960          rets
    5258                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  121

    5259 00015050           dnhlwalk_table
    5260 00015050 00015250'         .long   dnhlzip         ;0
    5261 00015070 00015320'         .long   dnhlup          ;1
    5262 00015090 000156b0'         .long   dnhldown                ;2
    5263 000150b0 00015250'         .long   dnhlzip         ;3
    5264 000150d0 00015860'         .long   dnhlleft                ;4
    5265 000150f0 00015950'         .long   dnhlup_left     ;5
    5266 00015110 00015730'         .long   dnhldown_left   ;6
    5267 00015130 00015250'         .long   dnhlzip         ;7
    5268 00015150 00015490'         .long   dnhlright               ;8
    5269 00015170 000153a0'         .long   dnhlup_right    ;9
    5270 00015190 00015580'         .long   dnhldown_right  ;10
    5271 000151b0 00015250'         .long   dnhlzip         ;11
    5272 000151d0 00015250'         .long   dnhlzip         ;12
    5273 000151f0 00015250'         .long   dnhlzip         ;13
    5274 00015210 00015250'         .long   dnhlzip         ;14
    5275 00015230 00015250'         .long   dnhlzip         ;15
    5276                    
    5277                    
    5278                    ;All these routines set MOVE_DIR.  However, the above code chooses the
    5279                    ; routine to execute based on MOVE_DIR, so they just end up stuffing the
    5280                    ; same value that's already there.  Wuzzup wit' that? - JS
    5281                    
    5282                    ************
    5283 00015250           dnhlzip         ;(dnhl0)
    5284 00015250           dnhldo_stance
    5285                    
    5286 00015250     5600          clr     a0
    5287 00015260     b00d          move    a0,*a13(MOVE_DIR)
         00015270     04b0  
    5288 00015280     b20d          move    a0,*a13(OBJ_XVEL),L
         00015290     02d0  
    5289 000152a0     b20d          move    a0,*a13(OBJ_ZVEL),L
         000152b0     0310  
    5290                    
    5291 000152c0     0d3f          callr   set_rotate_anim         ;or stance
         000152d0     ff1b  
    5292 000152e0     0d5f          calla   change_anim1
         000152f0 00000000! 
    5293 00015310     0960          rets
    5294                    
    5295                    ************
    5296 00015320           dnhlup          ;(dnhl1)
    5297                    
    5298 00015320     1820          movk    MOVE_UP,a0
    5299 00015330     b00d          move    a0,*a13(MOVE_DIR)
         00015340     04b0  
    5300                    
    5301 00015350     0d3f          callr   set_velocities
         00015360     006d  
    5302 00015370     0d3f          callr   change_walk_anim
         00015380     fe96  
    5303                    
    5304 00015390     0960          rets
    5305                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  122

    5306                    
    5307                    ************
    5308 000153a0           dnhlup_right    ;(dnhl2)
    5309                    
    5310 000153a0     b5a0          move    *a13(OBJ_CONTROL),a0
         000153b0     0780  
    5311 000153c0     0b80          andni   M_FLIPH,a0
         000153d0 00000010  
    5312 000153f0     b00d          move    a0,*a13(OBJ_CONTROL)
         00015400     0780  
    5313                    
    5314                    ;       move    *a13(CAN_MOVE_DIR),a0
    5315                    ;       btst    MOVE_RIGHT_BIT,a0
    5316                    ;       jrnz    dnhlup
    5317                    ;       btst    MOVE_UP_BIT,a0
    5318                    ;       jrnz    dnhlright
    5319                    
    5320 00015410     1920          movk    MOVE_UP_RIGHT,a0
    5321 00015420     b00d          move    a0,*a13(MOVE_DIR)
         00015430     04b0  
    5322                    
    5323 00015440     0d3f          callr   set_velocities
         00015450     005e  
    5324 00015460     0d3f          callr   change_walk_anim
         00015470     fe87  
    5325 00015480     0960          rets
    5326                    
    5327                    
    5328                    ************
    5329 00015490           dnhlright               ;(dnhl3)
    5330                    
    5331 00015490     b5a0          move    *a13(OBJ_CONTROL),a0
         000154a0     0780  
    5332 000154b0     0b80          andni   M_FLIPH,a0
         000154c0 00000010  
    5333 000154e0     b00d          move    a0,*a13(OBJ_CONTROL)
         000154f0     0780  
    5334                    
    5335 00015500     1900          movk    MOVE_RIGHT,a0
    5336 00015510     b00d          move    a0,*a13(MOVE_DIR)
         00015520     04b0  
    5337                    
    5338 00015530     0d3f          callr   set_velocities
         00015540     004f  
    5339 00015550     0d3f          callr   change_walk_anim
         00015560     fe78  
    5340 00015570     0960          rets
    5341                    
    5342                    
    5343                    ************
    5344 00015580           dnhldown_right  ;(dnhl4)
    5345                    
    5346 00015580     b5a0          move    *a13(OBJ_CONTROL),a0
         00015590     0780  
    5347 000155a0     0b80          andni   M_FLIPH,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  123

         000155b0 00000010  
    5348 000155d0     b00d          move    a0,*a13(OBJ_CONTROL)
         000155e0     0780  
    5349                    
    5350 000155f0     b5a0          move    *a13(CAN_MOVE_DIR),a0
         00015600     0470  
    5351 00015610     1fc0          btst    MOVE_DOWN_BIT,a0
    5352 00015620     cbe6          jrnz    dnhlright
    5353                    
    5354 00015630     1940          movk    MOVE_DOWN_RIGHT,a0
    5355 00015640     b00d          move    a0,*a13(MOVE_DIR)
         00015650     04b0  
    5356                    
    5357 00015660     0d3f          callr   set_velocities
         00015670     003c  
    5358 00015680     0d3f          callr   change_walk_anim
         00015690     fe65  
    5359 000156a0     0960          rets
    5360                    
    5361                    
    5362                    ************
    5363 000156b0           dnhldown                ;(dnhl5)
    5364                    
    5365 000156b0     1840          movk    MOVE_DOWN,a0
    5366 000156c0     b00d          move    a0,*a13(MOVE_DIR)
         000156d0     04b0  
    5367                    
    5368 000156e0     0d3f          callr   set_velocities
         000156f0     0034  
    5369 00015700     0d3f          callr   change_walk_anim
         00015710     fe5d  
    5370 00015720     0960          rets
    5371                    
    5372                    
    5373                    ************
    5374 00015730           dnhldown_left   ;(dnhl6)
    5375                    
    5376 00015730     b5a0          move    *a13(OBJ_CONTROL),a0
         00015740     0780  
    5377 00015750     0ba0          ori     M_FLIPH,a0
         00015760 00000010  
    5378 00015780     b00d          move    a0,*a13(OBJ_CONTROL)
         00015790     0780  
    5379                    
    5380 000157a0     b5a0          move    *a13(CAN_MOVE_DIR),a0
         000157b0     0470  
    5381 000157c0     1fc0          btst    MOVE_DOWN_BIT,a0
    5382 000157d0     cb08          jrnz    dnhlleft
    5383                    
    5384 000157e0     18c0          movk    MOVE_DOWN_LEFT,a0
    5385 000157f0     b00d          move    a0,*a13(MOVE_DIR)
         00015800     04b0  
    5386                    
    5387 00015810     0d3f          callr   set_velocities
         00015820     0021  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  124

    5388 00015830     0d3f          callr   change_walk_anim
         00015840     fe4a  
    5389 00015850     0960          rets
    5390                    
    5391                    
    5392                    ************
    5393 00015860           dnhlleft                ;(dnhl7)
    5394                    
    5395 00015860     b5a0          move    *a13(OBJ_CONTROL),a0
         00015870     0780  
    5396 00015880     0ba0          ori     M_FLIPH,a0
         00015890 00000010  
    5397 000158b0     b00d          move    a0,*a13(OBJ_CONTROL)
         000158c0     0780  
    5398                    
    5399 000158d0     1880          movk    MOVE_LEFT,a0
    5400 000158e0     b00d          move    a0,*a13(MOVE_DIR)
         000158f0     04b0  
    5401                    
    5402 00015900     0d3f          callr   set_velocities
         00015910     0012  
    5403 00015920     0d3f          callr   change_walk_anim
         00015930     fe3b  
    5404 00015940     0960          rets
    5405                    
    5406                    
    5407                    ************
    5408 00015950           dnhlup_left     ;(dnhl8)
    5409                    
    5410 00015950     b5a0          move    *a13(OBJ_CONTROL),a0
         00015960     0780  
    5411 00015970     0ba0          ori     M_FLIPH,a0
         00015980 00000010  
    5412 000159a0     b00d          move    a0,*a13(OBJ_CONTROL)
         000159b0     0780  
    5413                    
    5414                    ;       move    *a13(CAN_MOVE_DIR),a0
    5415                    ;       btst    MOVE_LEFT_BIT,a0
    5416                    ;       jrnz    dnhlup
    5417                    ;       btst    MOVE_UP_BIT,a0
    5418                    ;       jrnz    dnhlleft
    5419                    
    5420 000159c0     18a0          movk    MOVE_UP_LEFT,a0
    5421 000159d0     b00d          move    a0,*a13(MOVE_DIR)
         000159e0     04b0  
    5422                    
    5423 000159f0     0d3f          callr   set_velocities
         00015a00     0003  
    5424 00015a10     0d3f          callr   change_walk_anim
         00015a20     fe2c  
    5425 00015a30     0960          rets
    5426                    
    5427                    *****************************************************************************
    5428                    *
    5429                    * sets X & Z velocites based on MOVE_DIR
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  125

    5430                    *
    5431                    
    5432                    ;MULT   equ     256*75/100              ;25% reduction when moving backward
    5433                    
    5434                    
    5435                    ;MULT   equ     256*100/100             ;0% reduction when moving backward
    5436              00e6  MULT    equ     256*90/100              ;10% reduction when moving backward
    5437              0180  GRND_MULT       equ     256*150/100     ;50% addition when opponent is on ground
    5438                    
    5439                    
    5440 00015a40            SUBRP  set_velocities
    5441                    
    5442                    
    5443 00015a40     b5a0          move    *a13(MOVE_DIR),a0
         00015a50     04b0  
    5444 00015a60     0d3f          callr   convert_facing
         00015a70     fca6  
    5445 00015a80                   X64     a0
    5446                    
    5447 00015a90     b5a2          move    *a13(WRESTLERNUM),a2
         00015aa0     0590  
    5448 00015ab0                   X32     a2
    5449 00015ac0     0b22          addi    mwmdwres_velocity_tables,a2
         00015ad0 00015e60' 
    5450                    
    5451 00015af0     8642          move    *a2,a2,L                ;* velocity table
    5452 00015b00     4002          add     a0,a2
    5453 00015b10     9641          move    *a2+,a1,L
    5454                    
    5455 00015b20     b5a0          move    *a13(WALK_FAST),a0
         00015b30     0b40  
    5456 00015b40     cb1b          jrnz    mwmdongrnd
    5457                    
    5458 00015b50     0d3f          callr   get_opp_process
         00015b60     fc85  
    5459 00015b70     b400          move    *a0(PLYRMODE),a0        ;don't slow down if backing
         00015b80     05c0  
    5460 00015b90     0b40          cmpi    MODE_ONGROUND,a0        ;away from a downed opponent
         00015ba0     fffb  
    5461 00015bb0     ca14          jreq    mwmdongrnd
    5462                    
    5463 00015bc0     0b40          cmpi    MODE_DEAD,a0            ;away from a dead opponent
         00015bd0     fff6  
    5464 00015be0     ca11          jreq    mwmdongrnd
    5465                    
    5466 00015bf0     b5a3          move    *a13(MOVE_DIR),a3
         00015c00     04b0  
    5467 00015c10     b5a4          move    *a13(FACING_DIR),a4
         00015c20     04c0  
    5468                    
    5469 00015c30     4c6e          move    a3,a14
    5470 00015c40     548e          or      a4,a14
    5471 00015c50     0b8e          andi    MOVE_LEFT|MOVE_RIGHT,a14
         00015c60 fffffff3  
    5472 00015c80     0b4e          cmpi    MOVE_LEFT|MOVE_RIGHT,a14        ;move opposite to facing?
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  126

         00015c90     fff3  
    5473 00015ca0     cb09          jrne    mwmdnot_back_x
    5474                    
    5475 00015cb0     09c0          movi    MULT,a0
         00015cc0     00e6  
    5476 00015cd0     5c01          mpys    a0,a1
    5477 00015ce0     2b01          sra     8,a1
    5478 00015cf0     c004          jruc    mwmdnot_back_x
    5479 00015d00           mwmdongrnd
    5480 00015d00     09c0          movi    GRND_MULT,a0
         00015d10     0180  
    5481 00015d20     5c01          mpys    a0,a1
    5482 00015d30     2b01          sra     8,a1
    5483                    
    5484 00015d40           mwmdnot_back_x
    5485 00015d40     b22d          move    a1,*a13(OBJ_XVEL),L
         00015d50     02d0  
    5486                    
    5487                    
    5488 00015d60     8641          move    *a2,a1,L
    5489 00015d70     4c6e          move    a3,a14                  ;move_dir
    5490 00015d80     548e          or      a4,a14                  ;facing dir
    5491 00015d90     0b8e          andi    MOVE_UP|MOVE_DOWN,a14
         00015da0 fffffffc  
    5492 00015dc0     0b4e          cmpi    MOVE_UP|MOVE_DOWN,a14   ;move opposite to facing?
         00015dd0     fffc  
    5493 00015de0     cb04          jrne    mwmdnot_back_y
    5494                    
    5495 00015df0     09c0          movi    MULT,a0
         00015e00     00e6  
    5496 00015e10     5c01          mpys    a0,a1
    5497 00015e20     2b01          sra     8,a1
    5498                    
    5499 00015e30           mwmdnot_back_y
    5500 00015e30     b22d          move    a1,*a13(OBJ_ZVEL),L
         00015e40     0310  
    5501                    
    5502 00015e50     0960          rets
    5503                    
    5504                    
    5505                            .ref    bam_velocity_table
    5506                            .ref    dnk_velocity_table
    5507                            .ref    hrt_velocity_table
    5508                            .ref    lex_velocity_table
    5509                            .ref    rzr_velocity_table
    5510                            .ref    shn_velocity_table
    5511                            .ref    und_velocity_table
    5512                            .ref    yok_velocity_table
    5513                    
    5514 00015e60           mwmdwres_velocity_tables
    5515 00015e60 00000000!         .long   hrt_velocity_table      ;0 Bret Hart
    5516 00015e80 00000000!         .long   rzr_velocity_table      ;1 Razor Ramon
    5517 00015ea0 00000000!         .long   und_velocity_table      ;2 Undertaker
    5518 00015ec0 00000000!         .long   yok_velocity_table      ;3 Yokozuna
    5519 00015ee0 00000000!         .long   shn_velocity_table      ;4 Shawn Michaels
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  127

    5520 00015f00 00000000!         .long   bam_velocity_table      ;5 Bam Bam
    5521 00015f20 00000000!         .long   dnk_velocity_table      ;6 Doink
    5522 00015f40 00000000!         .long   dnk_velocity_table      ;7 spare
    5523 00015f60 00000000!         .long   lex_velocity_table      ;8 Lex Luger
    5524 00015f80 00000000          .long   0                       ;9 referee
    5525                    
    5526                    
    5527                    ;*****************************************************************************
    5528                    ;*
    5529                    ;* RETURNS:     a0 = boundary
    5530                    ;*
    5531                    ; SUBRP check_move_up
    5532                    ;
    5533                    ;       move    *a13(INRING),a0
    5534                    ;       jrnz    mwmdoutring
    5535                    ;
    5536                    ;       movi    RING_TOP,a0
    5537                    ;       move    *a13(OBJ_ZPOSINT),a1
    5538                    ;       cmp     a0,a1
    5539                    ;       jrle    mwmdfail
    5540                    ;       clrc
    5541                    ;       rets
    5542                    ;
    5543                    ;mwmdoutring
    5544                    ;       movi    ARENA_TOP,a0
    5545                    ;       move    *a13(OBJ_ZPOSINT),a1
    5546                    ;       cmp     a0,a1
    5547                    ;       jrle    mwmdfail
    5548                    ;
    5549                    ;       movi    box_matedge2,a10
    5550                    ;       callr   get_box_overlap
    5551                    ;       move    a1,a1                   ;z overlap
    5552                    ;       jrp     mwmdfail2
    5553                    ;
    5554                    ;       clrc
    5555                    ;       rets
    5556                    ;
    5557                    ;mwmdfail2
    5558                    ;       move    *a13(OBJ_ZPOSINT),a0
    5559                    ;       dec     a1
    5560                    ;       add     a1,a0
    5561                    ;
    5562                    ;mwmdfail
    5563                    ;       setc
    5564                    ;       rets
    5565                    ;
    5566                    ;*****************************************************************************
    5567                    ;*
    5568                    ;* RETURNS:     a0 = boundary
    5569                    ;*
    5570                    ; SUBRP check_move_down
    5571                    ;
    5572                    ;       move    *a13(INRING),a0
    5573                    ;       jrnz    mwmdoutring
    5574                    ;
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  128

    5575                    ;       movi    RING_BOT,a0
    5576                    ;       move    *a13(OBJ_ZPOSINT),a1
    5577                    ;       cmp     a0,a1
    5578                    ;       jrge    mwmdfail
    5579                    ;       clrc
    5580                    ;       rets
    5581                    ;
    5582                    ;mwmdoutring
    5583                    ;       movi    ARENA_BOT,a0
    5584                    ;       move    *a13(OBJ_ZPOSINT),a1
    5585                    ;       cmp     a0,a1
    5586                    ;       jrge    mwmdfail
    5587                    ;
    5588                    ;       movi    box_matedge2,a10
    5589                    ;       callr   get_box_overlap
    5590                    ;       move    a1,a1                   ;z overlap
    5591                    ;       jrn     mwmdfail2
    5592                    ;
    5593                    ;       clrc
    5594                    ;       rets
    5595                    ;
    5596                    ;mwmdfail2
    5597                    ;       move    *a13(OBJ_ZPOSINT),a0
    5598                    ;       inc     a1
    5599                    ;       add     a1,a0
    5600                    ;mwmdfail
    5601                    ;       setc
    5602                    ;       rets
    5603                    ;
    5604                    ;*****************************************************************************
    5605                    ;*
    5606                    ;* RETURNS:     a0 = boundary
    5607                    ;*
    5608                    ; SUBRP check_move_left
    5609                    ;
    5610                    ;       move    *a13(INRING),a0
    5611                    ;       jrnz    mwmdoutring
    5612                    ;
    5613                    ;       move    *a13(OBJ_XPOSINT),a5
    5614                    ;       movi    vln_left_rope,a6
    5615                    ;       move    *a6,a0                  ;x1
    5616                    ;       cmp     a0,a5                   ;xpos - x1
    5617                    ;       jrge    mwmdok
    5618                    ;       callr   calc_line_x
    5619                    ;       cmp     a0,a5                   ;xpos - a0
    5620                    ;       jrle    mwmdfail
    5621                    ;mwmdok
    5622                    ;       clrc
    5623                    ;       rets
    5624                    ;
    5625                    ;mwmdoutring
    5626                    ;       move    *a13(OBJ_XPOSINT),a5
    5627                    ;       movi    vln_left_fence,a6
    5628                    ;       move    *a6,a0                  ;x1
    5629                    ;       cmp     a0,a5                   ;xpos - x1
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  129

    5630                    ;       jrge    mwmdok2
    5631                    ;       callr   calc_line_x
    5632                    ;       jrz     mwmdoutrange
    5633                    ;       cmp     a0,a5                   ;xpos - a0
    5634                    ;       jrle    mwmdfail
    5635                    ;mwmdoutrange
    5636                    ;mwmdok2
    5637                    ;       movi    box_matedge2,a10
    5638                    ;       callr   get_box_overlap
    5639                    ;       move    a0,a0                   ;x overlap
    5640                    ;       jrp     mwmdfail2
    5641                    ;
    5642                    ;       clrc
    5643                    ;       rets
    5644                    ;
    5645                    ;mwmdfail2
    5646                    ;       move    *a13(OBJ_XPOSINT),a1
    5647                    ;       dec     a0
    5648                    ;       add     a1,a0
    5649                    ;mwmdfail
    5650                    ;       setc
    5651                    ;       rets
    5652                    ;
    5653                    ;*****************************************************************************
    5654                    ;*
    5655                    ;* RETURNS:     a0 = boundary
    5656                    ;*
    5657                    ; SUBRP check_move_right
    5658                    ;
    5659                    ;       move    *a13(INRING),a0
    5660                    ;       jrnz    mwmdoutring
    5661                    ;
    5662                    ;       move    *a13(OBJ_XPOSINT),a5
    5663                    ;       movi    vln_right_rope,a6
    5664                    ;       move    *a6,a0                  ;x1
    5665                    ;       cmp     a0,a5                   ;xpos - x1
    5666                    ;       jrle    mwmdok
    5667                    ;       callr   calc_line_x
    5668                    ;       cmp     a0,a5                   ;xpos - a0
    5669                    ;       jrge    mwmdfail
    5670                    ;mwmdok
    5671                    ;       clrc
    5672                    ;       rets
    5673                    ;
    5674                    ;mwmdoutring
    5675                    ;       move    *a13(OBJ_XPOSINT),a5
    5676                    ;       movi    vln_right_fence,a6
    5677                    ;       move    *a6,a0                  ;x1
    5678                    ;       cmp     a0,a5                   ;xpos - x1
    5679                    ;       jrle    mwmdok2
    5680                    ;       callr   calc_line_x
    5681                    ;       jrz     mwmdoutrange
    5682                    ;       cmp     a0,a5                   ;xpos - a0
    5683                    ;       jrge    mwmdfail
    5684                    ;mwmdok2
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  130

    5685                    ;mwmdoutrange
    5686                    ;       movi    box_matedge2,a10
    5687                    ;       callr   get_box_overlap
    5688                    ;       move    a0,a0                   ;x overlap
    5689                    ;       jrn     mwmdfail2
    5690                    ;
    5691                    ;       clrc
    5692                    ;       rets
    5693                    ;
    5694                    ;mwmdfail2
    5695                    ;       move    *a13(OBJ_XPOSINT),a1
    5696                    ;       inc     a0
    5697                    ;       add     a1,a0
    5698                    ;mwmdfail
    5699                    ;       setc
    5700                    ;       rets
    5701                    
    5702                    *****************************************************************************
    5703                    *
    5704                    * ARGS:         a10 = * box
    5705                    *
    5706                    * RETURNS:      a0 = signed x offset    (left overlap < 0 < right overlap)
    5707                    *               a1 = signed z offset    (top overlap < 0 < bot overlap)
    5708                    
    5709 00015fa0            SUBR   get_box_overlap
    5710                    
    5711                    
    5712 00015fa0     b746          move    *a10(20h),a6,L
         00015fb0     0020  
    5713 00015fc0     0d3f          callr   calc_line_x
         00015fd0     004a  
    5714 00015fe0     4c00          move    a0,a0
    5715 00015ff0     ca35          jrz     siguoutrange
    5716 00016000                   PUSH    a0
    5717                    
    5718 00016010     8746          move    *a10,a6,L
    5719 00016020     0d3f          callr   calc_line_x
         00016030     0044  
    5720 00016040     4c00          move    a0,a0                   ;left
    5721 00016050     ca2f          jrz     siguoutrange
    5722 00016060                   PULL    a1                      ;right
    5723                    
    5724 00016070     b5a4          move    *a13(OBJ_XPOSINT),a4
         00016080     0110  
    5725 00016090     4480          sub     a4,a0                   ;left-xpos
    5726 000160a0     c72a          jrgt    siguoutside
    5727 000160b0     03a0          neg     a0
    5728                    
    5729 000160c0     4481          sub     a4,a1                   ;right-xpos
    5730 000160d0     c427          jrlt    siguoutside
    5731                    
    5732 000160e0     b5a2          move    *a13(OBJ_ZPOSINT),a2
         000160f0     0150  
    5733 00016100     4c43          move    a2,a3
    5734 00016110     b4c4          move    *a6(10h),a4             ;z top
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  131

         00016120     0010  
    5735 00016130     4482          sub     a4,a2                   ;zpos-top
    5736 00016140     c420          jrlt    siguoutside
    5737                    
    5738 00016150     b4c4          move    *a6(30h),a4             ;z bot
         00016160     0030  
    5739 00016170     4483          sub     a4,a3                   ;zpos-bot
    5740 00016180     c71c          jrgt    siguoutside
    5741 00016190     03a3          neg     a3
    5742                    
    5743                    
    5744                    
    5745 000161a0     4801          cmp     a0,a1                   ;right - left
    5746 000161b0     c407          jrlt    siguright_min
    5747                    
    5748                    ;left_min
    5749 000161c0     4840          cmp     a2,a0                   ;left - top
    5750 000161d0     c70c          jrgt    sigutop_min
    5751 000161e0     4860          cmp     a3,a0                   ;left - bot
    5752 000161f0     c710          jrgt    sigubot_min
    5753                    
    5754 00016200     03a0          neg     a0                      ;xoff
    5755 00016210     5621          clr     a1                      ;zoff
    5756 00016220     0960          rets
    5757                    
    5758 00016230           siguright_min
    5759 00016230     4841          cmp     a2,a1                   ;right - top
    5760 00016240     c705          jrgt    sigutop_min
    5761 00016250     4861          cmp     a3,a1                   ;right - bot
    5762 00016260     c709          jrgt    sigubot_min
    5763                    
    5764 00016270     4c20          move    a1,a0                   ;xoff
    5765 00016280     5621          clr     a1                      ;zoff
    5766 00016290     0960          rets
    5767                    
    5768 000162a0           sigutop_min
    5769 000162a0     4862          cmp     a3,a2                   ;top - bot
    5770 000162b0     c704          jrgt    sigubot_min
    5771                    
    5772 000162c0     03a2          neg     a2
    5773 000162d0     4c41          move    a2,a1                   ;zoff
    5774 000162e0     5600          clr     a0                      ;xoff
    5775 000162f0     0960          rets
    5776                    
    5777 00016300           sigubot_min
    5778 00016300     4843          cmp     a2,a3                   ;bot - top
    5779 00016310     c7f8          jrgt    sigutop_min
    5780                    
    5781 00016320     4c61          move    a3,a1                   ;zoff
    5782 00016330     5600          clr     a0                      ;xoff
    5783 00016340     0960          rets
    5784                    
    5785 00016350           siguoutside
    5786 00016350           siguoutrange
    5787 00016350     5600          clr     a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  132

    5788 00016360     5621          clr     a1
    5789                    
    5790 00016370     0960          rets
    5791                    
    5792                    *****************************************************************************
    5793                    
    5794 00016380            SUBR   get_rope_x
    5795                    
    5796 00016380                   PUSH    a6
    5797                    
    5798 00016390     09e6          movi    vln_right_rope,a6
         000163a0 00002400- 
    5799 000163c0     b5a0          move    *a13(OBJ_XPOSINT),a0
         000163d0     0110  
    5800 000163e0     0b40          cmpi    RING_X_CENTER,a0
         000163f0     fbcd  
    5801 00016400     c703          jrgt    yuorright
    5802 00016410     09e6          movi    vln_left_rope,a6
         00016420 00003900- 
    5803 00016440           yuorright
    5804 00016440     0d3f          callr   calc_line_x
         00016450     0002  
    5805 00016460                   PULL    a6
    5806 00016470     0960          rets
    5807                    
    5808                    
    5809                    *****************************************************************************
    5810                    *
    5811                    * ARGUMENTS:    a6 = * line table
    5812                    *
    5813                    * RETURNS:      a0 = x-val of line at player ZPOS
    5814                    *               a0 = 0 if out of range in Z
    5815                    *
    5816                    * TRASHES:      a0,a1
    5817                    
    5818                    
    5819 00016480            SUBR   calc_line_x
    5820                    
    5821 00016480     b5a1          move    *a13(OBJ_ZPOSINT),a1
         00016490     0150  
    5822                    
    5823 000164a0     b4c0          move    *a6(30h),a0     ;z2
         000164b0     0030  
    5824 000164c0     4801          cmp     a0,a1           ;zpos - z2
    5825 000164d0     c709          jrgt    oyztoutrange    ;below
    5826                    
    5827 000164e0     b4c0          move    *a6(10h),a0     ;z1
         000164f0     0010  
    5828 00016500     4401          sub     a0,a1           ;zpos - z1
    5829 00016510     c405          jrlt    oyztoutrange    ;above
    5830                    
    5831 00016520                   X16     a1
    5832 00016530     40c1          add     a6,a1
    5833 00016540     b420          move    *a1(40h),a0     ;skip 4 word header
         00016550     0040  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  133

    5834 00016560     0960          rets
    5835 00016570           oyztoutrange
    5836 00016570     5600          clr     a0
    5837 00016580     0960          rets
    5838                    
    5839 00016590            SUBR    set_up_line_tables
    5840 00016590     09e1          movi    vln_right_rope_r,a1
         000165a0 00000000' 
    5841 000165c0     09e0          movi    vln_right_rope,a0
         000165d0 00002400- 
    5842 000165f0     0d3f          callr   setup_each_right_table
         00016600     004b  
    5843 00016610     09e1          movi    vln_left_rope_r,a1
         00016620 00000060' 
    5844 00016640     09e0          movi    vln_left_rope,a0
         00016650 00003900- 
    5845 00016670     0d3f          callr   setup_each_left_table
         00016680     002e  
    5846 00016690     09e1          movi    vln_right_matedge_r,a1
         000166a0 000000c0' 
    5847 000166c0     09e0          movi    vln_right_matedge,a0
         000166d0 00004e00- 
    5848 000166f0     0d3f          callr   setup_each_right_table
         00016700     003b  
    5849 00016710     09e1          movi    vln_left_matedge_r,a1
         00016720 00000120' 
    5850 00016740     09e0          movi    vln_left_matedge,a0
         00016750 00007180- 
    5851 00016770     0d3f          callr   setup_each_left_table
         00016780     001e  
    5852 00016790     09e1          movi    vln_right_matedge2_r,a1
         000167a0 00000180' 
    5853 000167c0     09e0          movi    vln_right_matedge2,a0
         000167d0 00009500- 
    5854 000167f0     0d3f          callr   setup_each_right_table
         00016800     002b  
    5855 00016810     09e1          movi    vln_left_matedge2_r,a1
         00016820 000001e0' 
    5856 00016840     09e0          movi    vln_left_matedge2,a0
         00016850 0000b920- 
    5857 00016870     0d3f          callr   setup_each_left_table
         00016880     000e  
    5858 00016890     09e1          movi    vln_right_fence_r,a1
         000168a0 00000240' 
    5859 000168c0     09e0          movi    vln_right_fence,a0
         000168d0 0000dd40- 
    5860 000168f0     0d3f          callr   setup_each_right_table
         00016900     001b  
    5861 00016910     09e1          movi    vln_left_fence_r,a1
         00016920 000002a0' 
    5862 00016940     09e0          movi    vln_left_fence,a0
         00016950 00012fa0- 
    5863                    
    5864 00016970           setup_each_left_table
    5865 00016970     d220          move    *a1(0),*a0+,L
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  134

         00016980     0000  
    5866 00016990     d220          move    *a1(020h),*a0+,L
         000169a0     0020  
    5867 000169b0     b422          move    *a1(040h),a2
         000169c0     0040  
    5868 000169d0     1022          inc     a2
    5869 000169e0     b423          move    *a1(050h),a3
         000169f0     0050  
    5870 00016a00     b424          move    *a1(0h),a4
         00016a10     0000  
    5871 00016a20     2604          sll     16,a4
    5872 00016a30     4c47          move    a2,a7
    5873 00016a40     2603          sll     16,a3
    5874 00016a50     58e3          divs    a7,a3
    5875 00016a60           oyztwrite_next_val_l
    5876 00016a60     4464          sub     a3,a4
    5877 00016a70     4c86          move    a4,a6
    5878 00016a80     2e06          srl     16,a6
    5879 00016a90     90c0          move    a6,*a0+
    5880 00016aa0     3ca2          dsjs    a2,oyztwrite_next_val_l
    5881                    
    5882 00016ab0     0960          rets
    5883                    
    5884 00016ac0           setup_each_right_table
    5885 00016ac0     d220          move    *a1(0),*a0+,L
         00016ad0     0000  
    5886 00016ae0     d220          move    *a1(020h),*a0+,L
         00016af0     0020  
    5887 00016b00     b422          move    *a1(040h),a2
         00016b10     0040  
    5888 00016b20     1022          inc     a2
    5889 00016b30     b423          move    *a1(050h),a3
         00016b40     0050  
    5890 00016b50     b424          move    *a1(0h),a4
         00016b60     0000  
    5891 00016b70     2603          sll     16,a3
    5892 00016b80     2604          sll     16,a4
    5893 00016b90     4c47          move    a2,a7
    5894 00016ba0     58e3          divs    a7,a3
    5895 00016bb0           oyztwrite_next_val
    5896 00016bb0     4064          add     a3,a4
    5897 00016bc0     4c86          move    a4,a6
    5898 00016bd0     2e06          srl     16,a6
    5899 00016be0     90c0          move    a6,*a0+
    5900 00016bf0     3ca2          dsjs    a2,oyztwrite_next_val
    5901                    
    5902 00016c00     0960          rets
    5903                    
    5904                    *****************************************************************************
    5905                    *
    5906                    * ARGUMENTS:    a6 = * line table
    5907                    *               a1 = ZPOSINT
    5908                    *
    5909                    * RETURNS:      a0 = x-val of line at input ZPOS
    5910                    *               a0 = 0 if out of range in Z
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  135

    5911                    *
    5912                    * TRASHES:      a0,a1
    5913                    
    5914                    
    5915 00016c10            SUBR   calc_line_pt
    5916                    
    5917 00016c10     b4c0          move    *a6(30h),a0     ;z2
         00016c20     0030  
    5918 00016c30     4801          cmp     a0,a1           ;zpos - z2
    5919 00016c40     c709          jrgt    ikzvoutrange    ;below
    5920                    
    5921 00016c50     b4c0          move    *a6(10h),a0     ;z1
         00016c60     0010  
    5922 00016c70     4401          sub     a0,a1           ;zpos - z1
    5923 00016c80     c405          jrlt    ikzvoutrange    ;above
    5924                    
    5925 00016c90                   X16     a1
    5926 00016ca0     40c1          add     a6,a1
    5927 00016cb0     b420          move    *a1(40h),a0     ;skip 4 word header
         00016cc0     0040  
    5928 00016cd0     0960          rets
    5929 00016ce0           ikzvoutrange
    5930 00016ce0     5600          clr     a0
    5931 00016cf0     0960          rets
    5932                    
    5933                    *****************************************************************************
    5934                    
    5935 00016d00            SUBR   wobble_ropes
    5936                    
    5937                    ;Called from wrestler "GETTING HIT" sequences.
    5938                    ;Check to see if I'm up against the ropes.
    5939                    ;If so, wobble them.
    5940                    
    5941 00016d00     b5a0          move    *a13(INRING),a0
         00016d10     0560  
    5942 00016d20     cb21          jrnz    tpleexit
    5943                    
    5944 00016d30     b5a0          move    *a13(OBJ_XPOSINT),a0
         00016d40     0110  
    5945 00016d50     0b40          cmpi    RING_X_CENTER,a0
         00016d60     fbcd  
    5946 00016d70     c40b          jrlt    tplelft
    5947                    
    5948 00016d80     09e6          movi    vln_right_rope,a6
         00016d90 00002400- 
    5949 00016db0     0d3f          callr   calc_line_x
         00016dc0     ff6b  
    5950 00016dd0     1862          movk    ROPE_RIGHT,a2
    5951 00016de0     b5a1          move    *a13(OBJ_XPOSINT),a1
         00016df0     0110  
    5952 00016e00     4801          cmp     a0,a1                   ;a1-a0
    5953 00016e10     c50c          jrge    tplewobble
    5954 00016e20     c011          jruc    tpleexit
    5955                    
    5956 00016e30           tplelft
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  136

    5957 00016e30     09e6          movi    vln_left_rope,a6
         00016e40 00003900- 
    5958 00016e60     0d3f          callr   calc_line_x
         00016e70     ff60  
    5959 00016e80     1842          movk    ROPE_LEFT,a2
    5960 00016e90     b5a1          move    *a13(OBJ_XPOSINT),a1
         00016ea0     0110  
    5961 00016eb0     4801          cmp     a0,a1                   ;a1-a0
    5962 00016ec0     c601          jrle    tplewobble
    5963 00016ed0     c006          jruc    tpleexit
    5964                    
    5965 00016ee0           tplewobble
    5966                    
    5967                    ;Wrestler has been knocked back into ropes
    5968                    ;Wobble them!
    5969 00016ee0     4c40          move    a2,a0
    5970 00016ef0     1822          movk    1,a2
    5971 00016f00     1821          movk    ROPE_BOUNCEIO,a1
    5972 00016f10     0d5f          calla   rope_command
         00016f20 00000000! 
    5973                    
    5974 00016f40     0960  tpleexit        rets
    5975                    
    5976                    *****************************************************************************
    5977                    * 
    5978                    * If player is moving away from opponent, or standing still, tell the 
    5979                    * calling SEQUENCE to not leap at the opponent!
    5980                    *
    5981                    * This routine is used by all wrestlers.
    5982                    
    5983 00016f50            SUBR   get_leap
    5984                    
    5985 00016f50     b5a1          move    *a13(ANIMODE),a1
         00016f60     0660  
    5986 00016f70     0b81          andni   MODE_STATUS2,a1
         00016f80 00000200  
    5987 00016fa0     b02d          move    a1,*a13(ANIMODE)
         00016fb0     0660  
    5988                    
    5989 00016fc0     b7ae          move    *a13(OBJ_XVEL),a14,L
         00016fd0     02d0  
    5990 00016fe0     b7a0          move    *a13(OBJ_ZVEL),a0,L
         00016ff0     0310  
    5991 00017000     55c0          or      a14,a0
    5992 00017010     ca0c          jrz     kcgznovel                       ;Wrestler is standing still!
    5993                    
    5994                    
    5995                    ;Is wrestler backing away from opponent?
    5996                    
    5997 00017020     b5a1          move    *a13(MOVE_DIR),a1
         00017030     04b0  
    5998 00017040     b5a0          move    *a13(NEW_FACING_DIR),a0 ;Current facing dir (9,10,6,5 only)
         00017050     04d0  
    5999 00017060     24a0          sll     5,a0
    6000 00017070     0b20          addi    mv_tbl,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  137

         00017080 00017250' 
    6001 000170a0     8600          move    *a0,a0,L
    6002 000170b0     4a01          btst    a0,a1
    6003 000170c0     cb01          jrnz    kcgznovel
    6004                    
    6005                    ;Will lunge toward opponent
    6006 000170d0     0960          rets
    6007                    
    6008 000170e0           kcgznovel
    6009 000170e0     b5a0          move    *a13(ANIMODE),a0
         000170f0     0660  
    6010 00017100     0ba0          ori     MODE_STATUS2,a0
         00017110 00000200  
    6011 00017130     b00d          move    a0,*a13(ANIMODE)
         00017140     0660  
    6012                    
    6013 00017150     0960          rets
    6014                    
    6015                    *****************************************************************************
    6016                    * 
    6017                    * If player is moving away from opponent, or standing still, tell the 
    6018                    * calling routine to ignore button press
    6019                    *
    6020                    
    6021 00017160            SUBR   ck_ignore
    6022                    
    6023                    ;Is wrestler going away from opponent?
    6024                    
    6025 00017160     b5a1          move    *a13(MOVE_DIR),a1
         00017170     04b0  
    6026 00017180     b5a0          move    *a13(NEW_FACING_DIR),a0 ;Current facing dir (9,10,6,5 only)
         00017190     04d0  
    6027 000171a0     24a0          sll     5,a0
    6028 000171b0     0b20          addi    mv_tbl,a0
         000171c0 00017250' 
    6029 000171e0     8600          move    *a0,a0,L
    6030 000171f0     4a01          btst    a0,a1
    6031 00017200     cb02          jrnz    kcgznovel2
    6032                    
    6033                    ;Will allow button press
    6034 00017210     0320          clrc
    6035 00017220     0960          rets
    6036                    
    6037 00017230     0de0  kcgznovel2      setc
    6038 00017240     0960          rets
    6039                    
    6040 00017250 00000000  mv_tbl  .long   0,0,0,0,0,MOVE_RIGHT_BIT,MOVE_RIGHT_BIT
    6041 00017330 00000000          .long   0,0,MOVE_LEFT_BIT,MOVE_LEFT_BIT
    6042                    
    6043                    *****************************************************************************
    6044                    * 
    6045                    * If player is moving away from opponent, or standing still, tell the 
    6046                    * calling routine to ignore button press
    6047                    *
    6048                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  138

    6049 000173b0            SUBR   ck_ignore_a8
    6050                    
    6051                    ;Is wrestler going away from opponent?
    6052                    
    6053 000173b0     b501          move    *a8(MOVE_DIR),a1
         000173c0     04b0  
    6054 000173d0     b500          move    *a8(NEW_FACING_DIR),a0  ;Current facing dir (9,10,6,5 only)
         000173e0     04d0  
    6055 000173f0     24a0          sll     5,a0
    6056 00017400     0b20          addi    mv_tbl,a0
         00017410 00017250' 
    6057 00017430     8600          move    *a0,a0,L
    6058 00017440     4a01          btst    a0,a1
    6059 00017450     cb02          jrnz    jnhvnovel2
    6060                    
    6061                    ;Will allow button press
    6062 00017460     0320          clrc
    6063 00017470     0960          rets
    6064                    
    6065 00017480     0de0  jnhvnovel2      setc
    6066 00017490     0960          rets
    6067                    
    6068                    
    6069                    *****************************************************************************
    6070                    * 
    6071                    * When we want all ropes to wobble (Butt drops, etc.)
    6072                    * This routine is used by all wrestlers.
    6073                    
    6074 000174a0            SUBR   shake_all_ropes
    6075                    
    6076                    ;       move    @NUM_OPPS,A1
    6077                    ;       CMPI    2,A1
    6078                    ;       JRGE    NO_SHAKING
    6079                    
    6080 000174a0     09c1          movi    ROPE_BOUNCEUD,a1
         000174b0     0000  
    6081 000174c0     1842          movk    2,a2
    6082                    
    6083 000174d0     09c0          movi    ROPE_FRONT,a0
         000174e0     0000  
    6084 000174f0     0d5f          calla   rope_command
         00017500 00000000! 
    6085                    
    6086 00017520     1820          movk    ROPE_BACK,a0
    6087 00017530     0d5f          calla   rope_command
         00017540 00000000! 
    6088                    
    6089 00017560     1840          movk    ROPE_LEFT,a0
    6090 00017570     0d5f          calla   rope_command
         00017580 00000000! 
    6091                    
    6092 000175a0     1860          movk    ROPE_RIGHT,a0
    6093 000175b0     0d5f          calla   rope_command
         000175c0 00000000! 
    6094                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  139

    6095 000175e0           NO_SHAKING
    6096 000175e0     0960          rets
    6097                    
    6098                    *****************************************************************************
    6099                    *
    6100                    * CALLED FROM WITHIN COLLISION ROUTINES
    6101                    *
    6102                    * makes wrestlers face each other & sets x_flip accordingly
    6103                    *
    6104                    * a13 = victim process
    6105                    * a10 = attacker process
    6106                    
    6107 000175f0            SUBR   face_each_other
    6108                    
    6109 000175f0     1900          movk    MOVE_RIGHT,a0
    6110 00017600     b7a2          move    *a13(OBJ_XPOS),a2,L
         00017610     0100  
    6111 00017620     b743          move    *a10(OBJ_XPOS),a3,L
         00017630     0100  
    6112 00017640     4843          cmp     a2,a3           ;a3-a2
    6113 00017650     c701          jrgt    bdxfright
    6114 00017660     1880          movk    MOVE_LEFT,a0
    6115 00017670           bdxfright
    6116 00017670     1841          movk    MOVE_DOWN,a1
    6117 00017680     b7a2          move    *a13(OBJ_ZPOS),a2,L
         00017690     0140  
    6118 000176a0     b743          move    *a10(OBJ_ZPOS),a3,L
         000176b0     0140  
    6119 000176c0     4843          cmp     a2,a3           ;a3-a2
    6120 000176d0     c701          jrgt    bdxfdown
    6121 000176e0     1821          movk    MOVE_UP,a1
    6122 000176f0           bdxfdown
    6123 000176f0     5420          or      a1,a0
    6124 00017700     b00d          move    a0,*a13(NEW_FACING_DIR)
         00017710     04d0  
    6125 00017720     b00d          move    a0,*a13(FACING_DIR)
         00017730     04c0  
    6126                    
    6127 00017740     0bc0          xori    MOVE_UP|MOVE_DOWN|MOVE_LEFT|MOVE_RIGHT,a0       ;opposite
         00017750 0000000f  
    6128                    
    6129 00017770     b00a          move    a0,*a10(NEW_FACING_DIR)
         00017780     04d0  
    6130 00017790     b00a          move    a0,*a10(FACING_DIR)
         000177a0     04c0  
    6131                    
    6132 000177b0     4d40          move    a10,a0
    6133 000177c0     0d3f          callr   set_wrestler_xflip
         000177d0     f588  
    6134                    
    6135 000177e0     4da0          move    a13,a0
    6136 000177f0     0d3f          callr   set_wrestler_xflip
         00017800     f585  
    6137                    
    6138 00017810     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  140

    6139                    
    6140                    *****************************************************************************
    6141                    *
    6142                    * Resets all special move processes by writing their SM_RESET_ADDRESSes
    6143                    * to their PWAKEs, and setting their PTIMEs to 1.
    6144                    
    6145 00017820            SUBR   reset_smoves
    6146                    
    6147 00017820     09e0          movi    ACTIVE,a0
         00017830 00000000! 
    6148 00017850     1821          movk    1,a1
    6149 00017860     8600  bhqqlp0 move    *a0,a0,L
    6150 00017870     ca0b          jrz     bhqqdone
    6151 00017880     b40e          move    *a0(PROCID),a14
         00017890     0020  
    6152 000178a0     0b4e          cmpi    SMOVE_PID,a14
         000178b0     fed0  
    6153 000178c0     cbf9          jrne    bhqqlp0
    6154                    
    6155 000178d0     ba00          move    *a0(SM_RESET_ADDRESS),*a0(PWAKE),L
         000178e0     0100  
         000178f0     00e0  
    6156 00017900     b020          move    a1,*a0(PTIME)
         00017910     0030  
    6157 00017920     c0f3          jruc    bhqqlp0
    6158                    
    6159 00017930     0960  bhqqdone        rets
    6160                    
    6161                    *****************************************************************************
    6162                    *
    6163                    * This is a final pass at confining the wrestlers and it's just about the
    6164                    * last thing that happens every frame, certain to run after both wrestler
    6165                    * processes.  It calls confine_wrestler once for each attached wrestler.
    6166                    *
    6167                    
    6168 00017940            SUBRP  final_confine
    6169                    
    6170 00017940     09c1          movi    NUM_WRES,a1
         00017950     0007  
    6171 00017960     09e2          movi    process_ptrs,a2
         00017970 00000950- 
    6172 00017990                   PUSH    a13
    6173 000179a0           ugvkloop
    6174 000179a0     964d          move    *a2+,a13,L
    6175 000179b0     ca0d          jrz     ugvkinactive
    6176                    
    6177 000179c0     b7a0          move    *a13(ATTACH_PROC),a0,L
         000179d0     03e0  
    6178 000179e0     ca0a          jrz     ugvkno_attach
    6179                    
    6180 000179f0                   PUSH    a1,a2
    6181 00017a10     0d5f          calla   set_collision_boxes
         00017a20 00000000! 
    6182 00017a40     0d5f          calla   confine_wrestler
         00017a50 0000d1a0' 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  141

    6183 00017a70                   PULL    a1,a2
    6184                    
    6185 00017a90           ugvkno_attach
    6186 00017a90           ugvkinactive
    6187 00017a90     3e01          dsj     a1,ugvkloop
    6188                    
    6189 00017aa0                   PULL    a13
    6190 00017ab0     0960          rets
    6191                    
    6192                    
    6193                    *****************************************************************************
    6194                    * Temp routines
    6195                    
    6196                            .if     DEBUG
    6197                    
    6198                            BSSX    CPUAVG          ,16
    6199                            BSSX    CPULEFT         ,16
    6200                    
    6201                    
    6202                     SUBRP  cputime_calcfree
    6203                    
    6204                            move    @dirqtimer,a0
    6205                            subk    1,a0
    6206                            jrle    nobog
    6207                            clr     a0
    6208                            jruc    gottime
    6209                    nobog
    6210                            move    @vcount,a0
    6211                            subi    EOSINT,a0
    6212                            jrnn    skinccnt
    6213                            addi    256,a0
    6214                    skinccnt
    6215                            sll     2,a0
    6216                            neg     a0
    6217                            addi    1024,a0
    6218                    gottime
    6219                            move    a0,@CPULEFT
    6220                    
    6221                            srl     4,a0
    6222                            move    @CPUAVG,a1
    6223                            move    a1,a2
    6224                            srl     4,a2                    ;/16
    6225                            sub     a2,a1
    6226                            add     a0,a1
    6227                            move    a1,@CPUAVG
    6228                    
    6229                            rets
    6230                    
    6231                    
    6232                            .endif
    6233                    
    6234                     .if COL_DEBUG
    6235                    
    6236                    *****************************************************************************
    6237                    * highlights attack box
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  142

    6238                    * a10 is ptr to wrestler process
    6239                    
    6240                     SUBR   collis_debug
    6241                    
    6242                    
    6243                            clr     a0                              ;x pos
    6244                            clr     a1                              ;y pos
    6245                            movi    jmeter,a2                       ;* image
    6246                            movi    01601H,a3                       ;z pos
    6247                            movi    DMACAL|M_3D,a4                  ;DMA flags
    6248                            clr     a5                              ;object ID
    6249                            clr     a6                              ;x vel
    6250                            clr     a7                              ;y vel
    6251                            calla   BEGINOBJ
    6252                    
    6253                            clr     a0
    6254                            move    a0,*a8(ODXOFF)
    6255                            move    a0,*a8(ODYOFF)
    6256                    
    6257                            movi    0202h,a0
    6258                            move    a0,*a8(OCONST)
    6259                    
    6260                    ttfdloop
    6261                            SLEEPK  1
    6262                    
    6263                            movi    7f00h,a0
    6264                            move    @debug_collis,a14
    6265                            cmpi    2,a14
    6266                            jrne    ttfdnot_2
    6267                            movi    1400h,a0
    6268                    ttfdnot_2
    6269                            move    a0,*a8(OZPOS)
    6270                    
    6271                            move    @debug_collis,a0
    6272                            jrz     ttfdoff
    6273                    
    6274                            move    *a10(ANIMODE),a0
    6275                            btst    MODE_CHECKHIT_BIT,a0
    6276                            jrnz    ttfdon
    6277                    
    6278                    ttfdoff
    6279                            clr     a0
    6280                            move    a0,*a8(OXVAL),L
    6281                            move    a0,*a8(OYVAL),L
    6282                    
    6283                            move    @slowmo,a0
    6284                            move    a0,@slowmotion
    6285                    
    6286                            movk    16,a0
    6287                            move    a0,*a8(OSIZEX)
    6288                            move    a0,*a8(OSIZEY)
    6289                    
    6290                            jruc    ttfdloop
    6291                    
    6292                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  143

    6293                    ttfdon
    6294                            movk    30,a0
    6295                            clr     a0
    6296                    
    6297                            move    @slowmo,a1
    6298                            jrz     ttfdskp
    6299                            move    a1,a0
    6300                    ttfdskp
    6301                            move    a0,@slowmotion
    6302                    
    6303                            movi    Y_SCALE_MULTIPLIER,a0
    6304                            move    *a10(OBJ_ZPOSINT),a1
    6305                            mpys    a0,a1
    6306                            move    a1,a4                   ;y val
    6307                            srl     16,a4
    6308                            move    *a10(OBJ_YPOSINT),a0
    6309                            sub     a0,a4
    6310                    
    6311                            move    *a10(OBJ_ATTYOFF),a0
    6312                            sub     a0,a4
    6313                            move    *a10(OBJ_ATTHEIGHT),a0
    6314                            sub     a0,a4
    6315                            sll     16,a4
    6316                            move    a4,*a8(OYVAL),L
    6317                    
    6318                            move    *a10(OBJ_ATTWIDTH),a0
    6319                            move    a0,*a8(OSIZEX)
    6320                            move    *a10(OBJ_ATTHEIGHT),a0
    6321                            move    a0,*a8(OSIZEY)
    6322                    
    6323                            move    *a10(OBJ_ATTXOFF),a0
    6324                            move    *a10(OBJ_XPOSINT),a4
    6325                    
    6326                            ;check the same way the actual collision code does.
    6327                            move    *a10(OBJ_CONTROL),a14
    6328                            btst    B_FLIPH,a14
    6329                            jrz     ttfdfacing_right
    6330                    
    6331                    ;       move    *a10(FACING_DIR),a14
    6332                    ;       btst    PLAYER_RIGHT_BIT,a14
    6333                    ;       jrnz    ttfdfacing_right
    6334                    
    6335                            neg     a0
    6336                            move    *a10(OBJ_ATTWIDTH),a14
    6337                            sub     a14,a0
    6338                    
    6339                    ttfdfacing_right
    6340                    
    6341                            add     a0,a4
    6342                            sll     16,a4
    6343                            move    a4,*a8(OXVAL),L
    6344                    
    6345                    
    6346                    
    6347                            jruc    ttfdloop
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  144

    6348                    
    6349                    ;;;     move    a0,@debug_collis
    6350                    
    6351                    
    6352                    
    6353                    *****************************************************************************
    6354                    * highlights target box
    6355                    * a10 is ptr to wrestler process
    6356                    
    6357                     SUBRP  collis_debug2
    6358                    
    6359                            clr     a0                              ;x pos
    6360                            clr     a1                              ;y pos
    6361                            movi    jmeter,a2                       ;* image
    6362                            movi    7f00h,a0        ;199
    6363                            movi    DMACAL|M_3D,a4                  ;DMA flags
    6364                            clr     a5                              ;object ID
    6365                            clr     a6                              ;x vel
    6366                            clr     a7                              ;y vel
    6367                            calla   BEGINOBJ
    6368                    
    6369                            clr     a0
    6370                            move    a0,*a8(ODXOFF)
    6371                            move    a0,*a8(ODYOFF)
    6372                    
    6373                            movi    0101h,a0
    6374                            move    a0,*a8(OCONST)
    6375                    
    6376                    pqvcloop
    6377                            SLEEPK  1
    6378                    
    6379                            movi    01600H,a0
    6380                            move    @debug_collis,a14
    6381                            cmpi    2,a14
    6382                            jrne    pqvcnot_2
    6383                            movi    111,a0
    6384                    pqvcnot_2
    6385                            move    a0,*a8(OZPOS)
    6386                    
    6387                            move    @debug_collis,a0
    6388                            jrnz    pqvcon
    6389                    
    6390                            clr     a0
    6391                            move    a0,*a8(OXVAL),L
    6392                            move    a0,*a8(OYVAL),L
    6393                    
    6394                            movk    16,a0
    6395                            move    a0,*a8(OSIZEX)
    6396                            move    a0,*a8(OSIZEY)
    6397                    
    6398                            jruc    pqvcloop
    6399                    
    6400                    pqvcon
    6401                            move    *a10(OBJ_COLLX1),a0
    6402                            move    a0,a1
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  145

    6403                            sll     16,a0
    6404                            move    a0,*a8(OXVAL),L
    6405                    
    6406                            move    *a10(OBJ_COLLX2),a2
    6407                            sub     a1,a2
    6408                            move    a2,*a8(OSIZEX)
    6409                    
    6410                            movi    Y_SCALE_MULTIPLIER,a0
    6411                            move    *a10(OBJ_ZPOSINT),a1
    6412                            mpys    a0,a1
    6413                            srl     16,a1
    6414                            move    *a10(OBJ_COLLY2),a0
    6415                            sub     a0,a1
    6416                            sll     16,a1
    6417                            move    a1,*a8(OYVAL),L
    6418                    
    6419                            move    *a10(OBJ_COLLY2),a0
    6420                            move    *a10(OBJ_COLLY1),a1
    6421                            sub     a1,a0
    6422                            move    a0,*a8(OSIZEY)
    6423                    
    6424                            jruc    pqvcloop
    6425                    
    6426                     .endif
    6427                    
    6428                    *****************************************************************************
    6429                     .if SCRT_DEBUG
    6430                    
    6431                            .bss    imgptrs0,       32*16
    6432                    
    6433                     SUBRP  scrt_debug
    6434                    
    6435                            movk    16,a1
    6436                            movi    imgptrs0,a2
    6437                            movi    [10,0],a0                       ;x pos
    6438                    bapuinit_loop
    6439                    
    6440                            PUSH    a0,a1,a2
    6441                    
    6442                            movi    [238,0],a1                      ;y pos
    6443                            movi    d_zip,a2                        ;* image
    6444                            movi    10000,a3                        ;z pos
    6445                            movi    DMAWNZ|M_SCRNREL,a4             ;DMA flags
    6446                            clr     a5                              ;object ID
    6447                            clr     a6                              ;x vel
    6448                            clr     a7                              ;y vel
    6449                            calla   BEGINOBJ
    6450                    
    6451                            PULL    a0,a1,a2
    6452                            move    a8,*a2+,L
    6453                            addi    [16,0],a0
    6454                            dsj     a1,bapuinit_loop
    6455                    
    6456                    bapuloop
    6457                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  146

    6458                    
    6459                            movi    wrest_joystat,a1
    6460                            movi    imgptrs0,a2
    6461                            movk    16,a3
    6462                    
    6463                    bapuloop2
    6464                            move    *a2+,a8,L
    6465                            move    *a1+,a5,L
    6466                            move    a5,a0
    6467                    
    6468                            srl     4,a0
    6469                            andi    011111b,a0
    6470                            jrz     bapucont
    6471                            X32     a0
    6472                            addi    bapubutton_imgs,a0
    6473                            move    *a0,a0,L
    6474                            jruc    bapucont2
    6475                    
    6476                    bapucont
    6477                            move    a5,a0
    6478                            andi    01111b,a0
    6479                            X32     a0
    6480                            addi    bapuarrow_imgs,a0
    6481                            move    *a0,a0,L
    6482                    
    6483                    bapucont2
    6484                    
    6485                            PUSH    a1,a2,a3
    6486                    
    6487                            callr   bapuchange_image
    6488                    
    6489                            PULL    a1,a2,a3
    6490                            dsj     a3,bapuloop2
    6491                    
    6492                            SLEEPK  1
    6493                    
    6494                            jruc    bapuloop
    6495                    
    6496                    
    6497                    bapuchange_image
    6498                            move    a0,*a8(OIMG),L
    6499                            move    *a0(0),*a8(OSIZE),L
    6500                            move    *a0(ISAG),*a8(OSAG),L
    6501                    
    6502                            move    *a0(IANIOFFX),a1
    6503                            move    a1,*a8(ODXOFF)                  ;display x offset
    6504                    
    6505                            move    *a0(IANIOFFY),a1
    6506                            move    a1,*a8(ODYOFF)                  ;display y offset
    6507                    
    6508                            setf    5,0,0
    6509                            move    *a0(ICTRL+7),*a8(OCTRL+7) ;Write 5 z comp bits
    6510                            setf    16,1,0
    6511                            rets
    6512                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  147

    6513                    bapuarrow_imgs
    6514                            .long   d_zip           ;0
    6515                            .long   d_up            ;1
    6516                            .long   d_down          ;2
    6517                            .long   d_zip           ;3
    6518                            .long   d_left          ;4
    6519                            .long   d_upleft        ;5
    6520                            .long   d_downleft      ;6
    6521                            .long   d_zip           ;7
    6522                            .long   d_right         ;8
    6523                            .long   d_upright       ;9
    6524                            .long   d_downright     ;10
    6525                            .long   d_zip           ;11
    6526                            .long   d_zip           ;12
    6527                            .long   d_zip           ;13
    6528                            .long   d_zip           ;14
    6529                            .long   d_zip           ;15
    6530                    
    6531                    
    6532                    bapubutton_imgs
    6533                            .long   d_zip           ;0
    6534                            .long   d_block         ;1
    6535                            .long   d_grab          ;2
    6536                            .long   d_zip           ;3
    6537                            .long   d_punch         ;4
    6538                            .long   d_zip           ;5
    6539                            .long   d_zip           ;6
    6540                            .long   d_zip           ;7
    6541                            .long   d_kick          ;8
    6542                            .long   d_zip           ;9
    6543                            .long   d_zip           ;10
    6544                            .long   d_zip           ;11
    6545                            .long   d_zip           ;12
    6546                            .long   d_zip           ;13
    6547                            .long   d_zip           ;14
    6548                            .long   d_zip           ;15
    6549                            .long   d_turbo         ;16
    6550                    
    6551                     .endif
    6552                    
    6553                    *****************************************************************************
    6554                     .if DIR_DEBUG
    6555                    
    6556                            .bss    imgptrs,        32*3
    6557                            .bss    imgptrs2,       32*3
    6558                    
    6559                     SUBRP  dir_debug
    6560                    
    6561                            movi    [10,0],a0                       ;x pos
    6562                            movi    [25,0],a1                       ;y pos
    6563                            movi    d_zip,a2                        ;* image
    6564                            movi    10000,a3                        ;z pos
    6565                            movi    DMAWNZ|M_SCRNREL,a4             ;DMA flags
    6566                            clr     a5                              ;object ID
    6567                            clr     a6                              ;x vel
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  148

    6568                            clr     a7                              ;y vel
    6569                            calla   BEGINOBJ
    6570                            move    a8,@imgptrs,L
    6571                    
    6572                            movi    [10,0],a0                       ;x pos
    6573                            movi    [25+15,0],a1                    ;y pos
    6574                            calla   BEGINOBJ
    6575                            move    a8,@imgptrs+32,L
    6576                    
    6577                            movi    [10,0],a0                       ;x pos
    6578                            movi    [25+30,0],a1                    ;y pos
    6579                            calla   BEGINOBJ
    6580                            move    a8,@imgptrs+64,L
    6581                    
    6582                    
    6583                            movi    [400-24,0],a0                   ;x pos
    6584                            movi    [25,0],a1                       ;y pos
    6585                            calla   BEGINOBJ
    6586                            move    a8,@imgptrs2,L
    6587                    
    6588                            movi    [400-24,0],a0                   ;x pos
    6589                            movi    [25+15,0],a1                    ;y pos
    6590                            calla   BEGINOBJ
    6591                            move    a8,@imgptrs2+32,L
    6592                    
    6593                            movi    [400-24,0],a0                   ;x pos
    6594                            movi    [25+30,0],a1                    ;y pos
    6595                            calla   BEGINOBJ
    6596                            move    a8,@imgptrs2+64,L
    6597                    
    6598                    
    6599                    
    6600                    cvieloop
    6601                            clr     a1
    6602                            callr   get_process_ptr
    6603                    
    6604                            move    a0,a10
    6605                            JRZ     NO_ONE_HERE1
    6606                    
    6607                            move    *a10(MOVE_DIR),a0
    6608                            move    @imgptrs,a8,L
    6609                            callr   cvieud_arrow
    6610                    
    6611                            move    *a10(NEW_FACING_DIR),a0
    6612                            move    @imgptrs+32,a8,L
    6613                            callr   cvieud_arrow
    6614                    
    6615                            move    *a10(FACING_DIR),a0
    6616                            move    @imgptrs+64,a8,L
    6617                            callr   cvieud_arrow
    6618                    
    6619                    NO_ONE_HERE1
    6620                            movk    1,a1
    6621                            callr   get_process_ptr
    6622                            move    a0,a10
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  149

    6623                            JRZ     NO_ONE_HERE2
    6624                    
    6625                            move    *a10(MOVE_DIR),a0
    6626                            move    @imgptrs2,a8,L
    6627                            callr   cvieud_arrow
    6628                    
    6629                            move    *a10(NEW_FACING_DIR),a0
    6630                            move    @imgptrs2+32,a8,L
    6631                            callr   cvieud_arrow
    6632                    
    6633                            move    *a10(FACING_DIR),a0
    6634                            move    @imgptrs2+64,a8,L
    6635                            callr   cvieud_arrow
    6636                    
    6637                    NO_ONE_HERE2
    6638                            SLEEPK  1
    6639                            jruc    cvieloop
    6640                    
    6641                    
    6642                    cvieud_arrow
    6643                            move    a0,a0
    6644                            jrnz    cvieok
    6645                            movi    d_zip,a0
    6646                            jruc    cviecont
    6647                    cvieok
    6648                            callr   convert_facing
    6649                            X32     a0
    6650                            addi    cviearrow_imgs,a0
    6651                            move    *a0,a0,L
    6652                    
    6653                    cviecont
    6654                            move    a0,*a8(OIMG),L
    6655                            move    *a0(0),*a8(OSIZE),L
    6656                            move    *a0(ISAG),*a8(OSAG),L
    6657                    
    6658                            move    *a0(IANIOFFX),a1
    6659                            move    a1,*a8(ODXOFF)                  ;display x offset
    6660                    
    6661                            move    *a0(IANIOFFY),a1
    6662                            move    a1,*a8(ODYOFF)                  ;display y offset
    6663                    
    6664                            setf    5,0,0
    6665                            move    *a0(ICTRL+7),*a8(OCTRL+7) ;Write 5 z comp bits
    6666                            setf    16,1,0
    6667                            rets
    6668                    
    6669                    
    6670                    cviearrow_imgs
    6671                            .long   d_up
    6672                            .long   d_upright
    6673                            .long   d_right
    6674                            .long   d_downright
    6675                            .long   d_down
    6676                            .long   d_downleft
    6677                            .long   d_left
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 05:12:46 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

wrestling game program                                               PAGE  150

    6678                            .long   d_upleft
    6679                    
    6680                            .long   d_punch
    6681                            .long   d_kick
    6682                            .long   d_block
    6683                            .long   d_grab
    6684                            .long   d_turbo
    6685                            .long   d_zip
    6686                    
    6687                     .endif
    6688                    
    6689                    *****************************************************************************
    6690                    *
    6691                    * Initializes the scroller position
    6692                    
    6693 00017ac0            SUBR   init_scroller
    6694                    
    6695 00017ac0     09e0          movi    [RING_X_CENTER-200,0],a0
         00017ad0 036a0000  
    6696 00017af0     0780          move    a0,@WORLDTLX,L
         00017b00 00000000! 
    6697                    
    6698                            ;use [ffe5,0] in 1v1 or 1v3, [ffe9,0] for 1v2
    6699 00017b20     09e0          movi    [0ffe5h,0],a0
         00017b30 ffe50000  
    6700 00017b50     05ae          move    @NUM_OPPS,a14
         00017b60 00000000! 
    6701 00017b80     0b4e          cmpi    2,a14
         00017b90     fffd  
    6702 00017ba0     cb03          jrne    bwkvsety
    6703 00017bb0     09e0          movi    [0ffe9h,0],a0
         00017bc0 ffe90000  
    6704 00017be0     0780  bwkvsety        move    a0,@WORLDTLY,L
         00017bf0 00000000! 
    6705                    
    6706 00017c10     0960          rets
    6707                    
    6708                    ******************************************************************************
    6709                    
    6710                            .end

 No Errors,  No Warnings
