TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    
       2                            .file   "lifebar.asm"
       4                            .width  132
       5                            .option b,d,l,t
       6                            .mnolist
       7                    
       8                    
       9                            .include        "macros.h"
      10                            .include        "mproc.equ"             ;Mproc equates
      11                            .include        "display.equ"           ;Display proc equates
      12                            .include        "gsp.equ"               ;Gsp asm equates
      13                            .include        "game.equ"
      14                            .include        "plyr.equ"
      15                            .include        "sys.equ"
      16                            .include        "link.equ"
      17                            .include        "sound.h"
      18                            .include        "ring.equ"
      19                    
      20                            .include        "miscimg.glo"
      21                            .include        "fontsimg.glo"
      22                            .include        "sound.equ"
      23                            .include        "imgtbl.glo"
      24                            .include        "jjxm.h"
      25                    
      26                            ;temp! - 314
      27                            .if DEBUG
      28                            .include        "tmpdebug.h"
      29                            .endif
      30                    
      31                    
      32                            .ref    reset_for_round,init_scroller,BGND_UD1
      33                            .ref    reset_for_round2,no_debris,flash_red
      34                            .ref    calc_match_time_2,ck_any_teammates
      35                    
      36                            .ref    change_anim1a,triple_sound,HALT,CLOSE_VERT_SCREEN_LINE
      37                            .ref    civanic,CR_STRTP,get_process_ptr,wres_collis_off
      38                            .ref    GET_ADJ,p2winstreak,ANIM_CROWD,update_timer,GAMSTATE
      39                            .ref    fight_debug,RNDRNG0,pal_getf,ring_bell,BEGINOBJ_TBL
      40                            .ref    PSTATUS2,match_over,p1rounds,is_8_on_1
      41                            .ref    OPEN_VERT_SCREEN_LINE,process_ptrs,SET_LOWER_VOL
      42                            .ref    GET_CREDITS,BINBCD,get_all_buttons_cur2,LINES_VERT
      43                            .ref    current_round,p1winstreak,CLEAR_SPEECH_REPEAT,p2rounds
      44                            .ref    VINCE_START_ROUND2_3,WHICH_SCREEN,do_game_over
      45                            .ref    CALL_MATCH_OVER,AUD1,setup_back_anim,DUMRETS
      46                            .ref    calc_match_time_1,match_time
      47                            .ref    ROLLING_COUNT,match_winner,PCNT,NUM_OPPS,is_final_match
      48                            .ref    ADD_VOICE,KILL_ALL_CHANNELS,END_MATCH_SPEECH
      49                            .ref    accumulate_awards,annc_rnd_winner_done
      50                            .ref    round_award,royal_rumble,buddy_mode_on
      51                            .ref    match_award,reduce_bog,get_live_bits
      52                            .ref    create_end_rnd_awards
      53                            .ref    award_ok_to_die
      54                            .ref    is_it_a_really_quick_win,increment_wincount
      55                            .ref    give_award_if_opponent_is_human
      56                            .ref    arm_comeback_award
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    2

      57                            .ref    check_for_award_for_big_comeback
      58                            .ref    check_for_award_for_winstreak
      59                            .ref    show_dufus_messages
      60                            .ref    CHANGE_SKIRTS2,INIT_SKIRTS
      61                            .ref    pal_clean,round_start_time,round_end_time
      62                            .ref    dboxes_on,do_fireworks
      63                            .ref    instant_combos_on,p1powerup_request
      64                            .ref    show_mk3_tip,MAYBE_HIGH_RISK
      65                            .ref    match_cnt,WGFS_W_P
      66                            .ref    temp_music
      67                            .ref    finish_completed
      68                    
      69                    
      70              0000  PLT_LIFE        equ     0               ;UHW    life pixels (164 max)
      71              0010  PLT_CLIFE       equ     PLT_LIFE+10h    ;UHW    displayed life (164 max)
      72              0020  PLT_TURBO       equ     PLT_CLIFE+10h   ;UHW    turbo val (5400h max)
      73              0030  PLT_COMBO_SIZE  equ     PLT_TURBO+10h   ;UHW    combo bar size
      74              0040  PLT_SIZE        equ     PLT_COMBO_SIZE+010h
      75                    
      76                    
      77              0000  MD_LINK         equ     0               ;UHW    PLYRNUM for this meter
      78              0010  MD_LIFE         equ     MD_LINK+10h     ;UHL    life bar *obj
      79              0030  MD_LBAK         equ     MD_LIFE+20h     ;UHL    turbo bar *obj
      80              0050  MD_NAME         equ     MD_LBAK+20h     ;UHL    name *obj
      81              0070  MD_COMBO        equ     MD_NAME+20h     ;UHL    combo bar *obj
      82              0090  MD_SIZE         equ     MD_COMBO+20H
      83                    
      84                    
      85 00000000                   .bss    life_data,      NUM_WRES*PLT_SIZE
      86 000001c0                   .bss    meter_data,     2*MD_SIZE
      87 000002e0                   .bss    damage_imgs,    4*32
      88 00000360                   .bss    ram_lst,        32*40           ;For announce_match
      89 00000000                   BSSX    DAM_MULT,16
      90 00000870                   .BSS    LAST_FLIP,16
      91 00000000                   BSSX    combo_audit_done,16
      92 00000000                   BSSX    message_flag,32*2               ;Message already displayed bit
      93 00000000                   BSSX    ZFLIP_POS_VAR,32
      94 00000000                   BSSX    MUSIC_HAP,16
      95 00000000                   BSSX    PERFECT_WINS,16
      96 00000000                   BSSX    WINS_OBJ,32*3
      97                    
      98 00000000                   BSSX    fence1,4*32
      99                    
     100 00000000                   BSSX    MESSAGE_FLAGS,32
     101                    
     102 00000000                   BSSX    fence2,4*32
     103                    
     104 00000000                   BSSX    COMBO_FLASH_FLAG,32
     105 00000000                   BSSX    in_finish_move,16
     106 00000000                   BSSX    speed_adjustment,32             ;game speed damage adjustment
     107                    
     108                            ;temp! - 314
     109                            .if DEBUG
     110                            BSSX    event_data,EVENTSIZ*NUM_EVENTS
     111                            BSSX    event_ptr,32
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    3

     112                            .endif
     113                    
     114                    
     115              00a3  LIFE_MAX        .equ    163             ;green pixels in life bar
     116              5400  TURBO_MAX       .equ    84<<8           ;max turbo value
     117                    
     118                    
     119 00000000            SUBR   init_life_data
     120                    
     121                            ;temp! - 314
     122                            .if DEBUG
     123                            movi    event_data,a14
     124                            move    a14,@event_ptr,L
     125                    
     126                            clr     a14
     127                            movi    event_data,a0
     128                            movi    EVENTSIZ*NUM_EVENTS/16,a1
     129                    quoiclp move    a14,*a0+,W
     130                            dsj     a1,quoiclp
     131                    
     132                            .endif
     133                    
     134                            ;initialize speed_adjustment
     135 00000000     1b20          movk    ADJSPEED,a0             ;game timer speed (1-5)
     136 00000010     0d5f          calla   GET_ADJ
         00000020 00000000! 
     137 00000040                   BADCHK  a0,1,5,3                ;reg,lo,hi,val
     138 000000d0                   X32     a0                      ;x 16 bits
     139 000000e0     0b20          addi    quoitimer_table-20h,a0
         000000f0 00000290' 
     140 00000110     8601          move    *a0,a1,L
     141 00000120     0781          move    a1,@speed_adjustment,L
         00000130 00000ac0- 
     142                    
     143                            ;initialize life data
     144 00000150     09c0          movi    NUM_WRES,a0
         00000160     0007  
     145 00000170     09e1          movi    life_data,a1
         00000180 00000000- 
     146 000001a0     09c2          movi    LIFE_MAX,a2
         000001b0     00a3  
     147 000001c0     09c3          movi    TURBO_MAX,a3
         000001d0     5400  
     148 000001e0     5684          clr     a4
     149 000001f0           quoiinit_loop
     150 000001f0     b041          move    a2,*a1(PLT_LIFE)
         00000200     0000  
     151 00000210     b061          move    a3,*a1(PLT_TURBO)
         00000220     0020  
     152 00000230     b081          move    a4,*a1(PLT_CLIFE)
         00000240     0010  
     153 00000250     b081          move    a4,*a1(PLT_COMBO_SIZE)
         00000260     0030  
     154 00000270     0b01          addi    PLT_SIZE,a1
         00000280     0040  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    4

     155 00000290     3d60          dsj     a0,quoiinit_loop
     156                    
     157 000002a0     0960          rets
     158                    
     159 000002b0           quoitimer_table
     160 000002b0 0000cccc          .long           10000h*4/5      ;80% damage (slowest)
     161 000002d0 0000e666          .long           10000h*9/10     ;90%
     162 000002f0 00010000          .long           10000h*1        ;normal damage (default)
     163 00000310 00011999          .long           10000h*11/10    ;110%
     164 00000330 00013333          .long           10000h*6/5      ;120% damage (fastest)
     165                    
     166                    
     167 00000350            SUBR   init_wres_life_data
     168                    
     169                            ;initialize life data
     170 00000350     b5a1          move    *a13(PLYRNUM),a1
         00000360     0580  
     171 00000370                   X64     a1              ;mult by PLT_SIZE
     172 00000380     0b21          addi    life_data,a1
         00000390 00000000- 
     173                    
     174 000003b0     09c2          movi    LIFE_MAX,a2
         000003c0     00a3  
     175 000003d0     09c3          movi    TURBO_MAX,a3
         000003e0     5400  
     176 000003f0     5684          clr     a4
     177 00000400     b041          move    a2,*a1(PLT_LIFE)
         00000410     0000  
     178 00000420     b061          move    a3,*a1(PLT_TURBO)
         00000430     0020  
     179 00000440     b041          move    a2,*a1(PLT_CLIFE)
         00000450     0010  
     180 00000460     b081          move    a4,*a1(PLT_COMBO_SIZE)
         00000470     0030  
     181                    
     182                            ;check names
     183 00000480     b5a1          move    *a13(PLYRNUM),a1
         00000490     0580  
     184 000004a0     09e5          movi    meter_data,a5
         000004b0 000001c0- 
     185 000004d0     b4ae          move    *a5(MD_LINK),a14
         000004e0     0000  
     186 000004f0     482e          cmp     a1,a14
     187 00000500     ca06          jreq    apmschgnm
     188 00000510     0b05          addi    MD_SIZE,a5
         00000520     0090  
     189 00000530     b4ae          move    *a5(MD_LINK),a14
         00000540     0000  
     190 00000550     482e          cmp     a1,a14
     191 00000560     cb0a          jrne    apmsdone
     192                    
     193 00000570           apmschgnm       X32     a1
     194 00000580     0b21          addi    name_tbl,a1
         00000590 00005620' 
     195 000005b0     8620          move    *a1,a0,L
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    5

     196 000005c0     b6a8          move    *a5(MD_NAME),a8,L
         000005d0     0050  
     197 000005e0     0d5f          calla   civanic
         000005f0 00000000! 
     198                    
     199 00000610     0960  apmsdone        rets
     200                    
     201                    
     202 00000620            SUBR   init_rnd_life_data
     203                    
     204                            ;reset life data
     205 00000620     09c0          movi    NUM_WRES,a0
         00000630     0007  
     206 00000640     09e1          movi    life_data,a1
         00000650 00000000- 
     207 00000670     09c2          movi    LIFE_MAX,a2
         00000680     00a3  
     208 00000690           joqlinit_loop
     209 00000690     b041          move    a2,*a1(PLT_LIFE)
         000006a0     0000  
     210 000006b0     b041          move    a2,*a1(PLT_CLIFE)
         000006c0     0010  
     211 000006d0     0b01          addi    PLT_SIZE,a1
         000006e0     0040  
     212 000006f0     3ce0          dsj     a0,joqlinit_loop
     213                    
     214                            ;set lifebar pals.
     215 00000700     09e0          movi    FYL2RD_P,a0
         00000710 00000000! 
     216 00000730     0d5f          calla   pal_getf
         00000740 00000000! 
     217                    
     218 00000760     09e1          movi    meter_data,a1
         00000770 000001c0- 
     219 00000790     05ae          move    @p2rounds,a14
         000007a0 00000000! 
     220 000007c0     ca04          jrz     joqlok1
     221                    
     222                            ;set left lifebar red
     223 000007d0     b628          move    *a1(MD_LIFE),a8,L
         000007e0     0010  
     224 000007f0     b008          move    a0,*a8(OPAL)
         00000800     0150  
     225                    
     226 00000810     0b01  joqlok1 addi    MD_SIZE,a1
         00000820     0090  
     227 00000830     05ae          move    @p1rounds,a14
         00000840 00000000! 
     228 00000860     ca04          jrz     joqlok2
     229                    
     230                            ;set right lifebar red
     231 00000870     b628          move    *a1(MD_LIFE),a8,L
         00000880     0010  
     232 00000890     b008          move    a0,*a8(OPAL)
         000008a0     0150  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    6

     233                    
     234 000008b0     0960  joqlok2 rets
     235                    
     236                    
     237                    
     238              0100  P1CNTR  .equ    PDATA
     239              0110  P2CNTR  .equ    PDATA+16
     240              0120  P1STATE .equ    PDATA+32
     241              0130  P2STATE .equ    PDATA+48
     242                    
     243 000008c0            SUBR   meters
     244                    
     245 000008c0                   PUSH    a8,a9
     246                    
     247                            ;Start the credits message
     248 000008e0     0d5f          calla   start_credbox
         000008f0 00007ea0' 
     249                    
     250                            ;initialize meter data
     251 00000910     09e1          movi    meter_data,a1
         00000920 000001c0- 
     252 00000940                   TBL_OBJ lhlth1
     253 000009a0     b301          move    a8,*a1(MD_LIFE),L
         000009b0     0010  
     254                    
     255 000009c0                   TBL_OBJ lname
     256 00000a20     b301          move    a8,*a1(MD_NAME),L
         00000a30     0050  
     257                    
     258 00000a40                   TBL_OBJ lframec
     259 00000aa0     b301          move    a8,*a1(MD_LBAK),L
         00000ab0     0030  
     260                    
     261 00000ac0                   TBL_OBJ lcombo
     262 00000b20     b301          move    a8,*a1(MD_COMBO),L
         00000b30     0070  
     263                    
     264 00000b40     0b01          addi    MD_SIZE,a1
         00000b50     0090  
     265                    
     266 00000b60                   TBL_OBJ rhlth1
     267 00000bc0     b301          move    a8,*a1(MD_LIFE),L
         00000bd0     0010  
     268                    
     269 00000be0                   TBL_OBJ rname
     270 00000c40     b301          move    a8,*a1(MD_NAME),L
         00000c50     0050  
     271                    
     272 00000c60                   TBL_OBJ rframec
     273 00000cc0     b301          move    a8,*a1(MD_LBAK),L
         00000cd0     0030  
     274                    
     275 00000ce0                   TBL_OBJ rcombo
     276 00000d40     b301          move    a8,*a1(MD_COMBO),L
         00000d50     0070  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    7

     277                    
     278                            ;create the static (no-handle) objects
     279 00000d60                   TBL_OBJ lframe
     280 00000dc0                   TBL_OBJ lframeb
     281                    
     282 00000e20                   TBL_OBJ rframe
     283 00000e80                   TBL_OBJ rframeb
     284                    
     285 00000ee0     0d3f          callr   do_win_streaks
         00000ef0     0846  
     286                    
     287 00000f00                   PULL    a8,a9
     288                    
     289                            ;wire up the meters
     290 00000f20     5600          clr     a0
     291 00000f30     4d01          move    a8,a1
     292 00000f40     0d3f          callr   rewire_meter
         00000f50     03a6  
     293 00000f60     1820          movk    1,a0
     294 00000f70     4d21          move    a9,a1
     295 00000f80     0d3f          callr   rewire_meter
         00000f90     03a2  
     296                    
     297 00000fa0                   CREATE  ANNC_PID,announce_match
     298                    
     299 00001020     1820          movk    1,a0
     300 00001030     b00d          move    a0,*a13(P1CNTR)
         00001040     0100  
     301 00001050     b00d          move    a0,*a13(P2CNTR)
         00001060     0110  
     302 00001070     5600          clr     a0
     303 00001080     b00d          move    a0,*a13(P1STATE)
         00001090     0120  
     304 000010a0     b00d          move    a0,*a13(P2STATE)
         000010b0     0130  
     305                    
     306 000010c0           kthlmain_loop
     307 000010c0     5600          clr     a0
     308                    
     309 000010d0           kthlmaint_loop
     310 000010d0     07a1          MOVE    @WHICH_SCREEN,A1,L
         000010e0 00000000! 
     311 00001100     0b61          CMPI    DUMRETS,A1
         00001110 ffffffff! 
     312 00001130     cb06          JRNE    JUST_DISPLAY_THEM
     313 00001140     0d3f          callr   inc_life
         00001150     0780  
     314 00001160     1020          inc     a0
     315 00001170     0b40          cmpi    NUM_WRES,a0
         00001180     fff8  
     316 00001190     cbf3          jrne    kthlmaint_loop
     317                    
     318 000011a0           JUST_DISPLAY_THEM
     319 000011a0     5600          clr     a0
     320 000011b0     0d3f          callr   update_meter
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    8

         000011c0     046f  
     321 000011d0     1820          movk    1,a0
     322 000011e0     0d3f          callr   update_meter
         000011f0     046c  
     323                    
     324 00001200     09e1          movi    meter_data,a1
         00001210 000001c0- 
     325 00001230     05a0          move    @PSTATUS2,a0
         00001240 00000000! 
     326 00001260     1fe0          btst    0,a0
     327 00001270     cb45          jrnz    kthlp2
     328 00001280     b5a0          move    *a13(P1CNTR),a0
         00001290     0100  
     329 000012a0     1420          dec     a0
     330 000012b0     b00d          move    a0,*a13(P1CNTR)
         000012c0     0100  
     331 000012d0     cb3f          jrnz    kthlp2
     332 000012e0     b5a0          move    *a13(P1STATE),a0
         000012f0     0120  
     333 00001300     0bc0          xori    1,a0    
         00001310 00000001  
     334 00001330     b00d          move    a0,*a13(P1STATE)
         00001340     0120  
     335 00001350     ca1a          jrz     kthldoname
     336                    
     337                    
     338 00001360     09c0          movi    TSEC,a0                 ;one second of PRESS/INSERT...
         00001370     0035  
     339 00001380     05ae          move    @NUM_OPPS,a14           ;(two if one-on-one mode)
         00001390 00000000! 
     340 000013b0     142e          dec     a14
     341 000013c0     cb01          jrnz    kthltset1a
     342 000013d0     2020          sla     1,a0
     343 000013e0     b00d  kthltset1a      move    a0,*a13(P1CNTR)
         000013f0     0100  
     344                    
     345 00001400     b628          move    *a1(MD_NAME),a8,L
         00001410     0050  
     346 00001420     09e0          movi    WF_START,a0
         00001430 00000000! 
     347 00001450     0d5f          calla   CR_STRTP
         00001460 00000000! 
     348 00001480     c903          jrhs    kthlenough_money
     349 00001490     09e0          movi    WF_INSERT,a0
         000014a0 00000000! 
     350 000014c0           kthlenough_money
     351 000014c0     0d5f          calla   civanic
         000014d0 00000000! 
     352 000014f0     c01d          jruc    kthlp2
     353 00001500           kthldoname      
     354 00001500     09c0          movi    TSEC*4,a0               ;and four seconds of names
         00001510     00d4  
     355 00001520     05ae          move    @NUM_OPPS,a14           ;(two if one-on-one mode)
         00001530 00000000! 
     356 00001550     142e          dec     a14
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    9

     357 00001560     cb01          jrnz    kthltset1b
     358 00001570     2be0          sra     1,a0
     359 00001580     b00d  kthltset1b      move    a0,*a13(P1CNTR)
         00001590     0100  
     360                    
     361 000015a0     b420          move    *a1(MD_LINK),a0
         000015b0     0000  
     362 000015c0                   X32     a0
     363 000015d0     0b20          addi    process_ptrs,a0
         000015e0 00000000! 
     364 00001600     8600          move    *a0,a0,L
     365 00001610     b400          move    *a0(WRESTLERNUM),a0
         00001620     0590  
     366                    
     367 00001630                   X32     a0
     368 00001640     0b20          addi    name_tbl,a0
         00001650 00005620' 
     369 00001670     8600          move    *a0,a0,L
     370 00001680     b628          move    *a1(MD_NAME),a8,L
         00001690     0050  
     371 000016a0     0d5f          calla   civanic
         000016b0 00000000! 
     372 000016d0           kthlp2
     373 000016d0     09e1          movi    meter_data,a1
         000016e0 000001c0- 
     374 00001700     0b01          addi    MD_SIZE,a1
         00001710     0090  
     375 00001720     05a0          move    @PSTATUS2,a0
         00001730 00000000! 
     376 00001750     1fc0          btst    1,a0
     377 00001760     cb45          jrnz    kthlok
     378                    
     379 00001770     b5a0          move    *a13(P2CNTR),a0
         00001780     0110  
     380 00001790     1420          dec     a0
     381 000017a0     b00d          move    a0,*a13(P2CNTR)
         000017b0     0110  
     382 000017c0     cb3f          jrnz    kthlok
     383 000017d0     b5a0          move    *a13(P2STATE),a0
         000017e0     0130  
     384 000017f0     0bc0          xori    1,a0    
         00001800 00000001  
     385 00001820     b00d          move    a0,*a13(P2STATE)
         00001830     0130  
     386 00001840     ca1a          jrz     kthldoname2
     387                    
     388                    
     389 00001850     09c0          movi    TSEC,a0                 ;one second of PRESS/INSERT...
         00001860     0035  
     390 00001870     05ae          move    @NUM_OPPS,a14           ;(two if one-on-one mode)
         00001880 00000000! 
     391 000018a0     142e          dec     a14
     392 000018b0     cb01          jrnz    kthltsetsa
     393 000018c0     2020          sla     1,a0
     394 000018d0     b00d  kthltsetsa      move    a0,*a13(P1CNTR)
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   10

         000018e0     0100  
     395                    
     396 000018f0     b628          move    *a1(MD_NAME),a8,L
         00001900     0050  
     397 00001910     09e0          movi    WF_START,a0
         00001920 00000000! 
     398 00001940     0d5f          calla   CR_STRTP
         00001950 00000000! 
     399 00001970     c9b4          jrhs    kthlenough_money
     400 00001980     09e0          movi    WF_INSERT,a0
         00001990 00000000! 
     401 000019b0           kthlenough_money2
     402 000019b0     0d5f          calla   civanic
         000019c0 00000000! 
     403 000019e0     c01d          jruc    kthlok
     404 000019f0           kthldoname2
     405 000019f0     09c0          movi    TSEC*4,a0               ;and four seconds of names
         00001a00     00d4  
     406 00001a10     05ae          move    @NUM_OPPS,a14           ;(two if one-on-one mode)
         00001a20 00000000! 
     407 00001a40     142e          dec     a14
     408 00001a50     cb01          jrnz    kthltset2b
     409 00001a60     2be0          sra     1,a0
     410 00001a70     b00d  kthltset2b      move    a0,*a13(P1CNTR)
         00001a80     0100  
     411                    
     412 00001a90     b420          move    *a1(MD_LINK),a0
         00001aa0     0000  
     413 00001ab0                   X32     a0
     414 00001ac0     0b20          addi    process_ptrs,a0
         00001ad0 00000000! 
     415 00001af0     8600          move    *a0,a0,L
     416 00001b00     b400          move    *a0(WRESTLERNUM),a0
         00001b10     0590  
     417                    
     418 00001b20                   X32     a0
     419 00001b30     0b20          addi    name_tbl,a0
         00001b40 00005620' 
     420 00001b60     8600          move    *a0,a0,L
     421 00001b70     b628          move    *a1(MD_NAME),a8,L
         00001b80     0050  
     422 00001b90     0d5f          calla   civanic
         00001ba0 00000000! 
     423                    
     424 00001bc0           kthlok
     425 00001bc0                   SLEEPK  1
     426 00001c00     c000          jruc    kthlmain_loop
         00001c10     ff4a  
     427                    
     428                    
     429                    
     430              000b  lbar_x          .equ    11
     431              0186  rbar_x          .equ    390
     432                    
     433              0088  lcombo_x        .equ    181-45
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   11

     434              0109  rcombo_x        .equ    220+45
     435                    
     436              0061  lname_x         .equ    97
     437              012f  rname_x         .equ    303
     438                    
     439              0014  bar_y           .equ    20
     440              0026  combo_y         .equ    bar_y+18
     441                    
     442              000d  name_y          .equ    13
     443                    
     444              00c8  bak_z           .equ    200
     445              00ca  bar_z           .equ    202
     446              00c9  frame_z         .equ    201
     447              00cb  name_z          .equ    203
     448                    
     449                    
     450 00001c20     0088  lcombo  .word   lcombo_x,combo_y,name_z                 ;X, Y, Z
     451 00001c50 00000000!         .long   SUPER_0
     452 00001c70     a102          .word   DMAWNZ|M_3D|M_SCRNREL                   ;CTRL
     453 00001c80     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     454 00001c90 00000000          .long   0,0                                     ;XVEL, YVEL
     455 00001cd0                   .even
     456                    
     457 00001cd0     0109  rcombo  .word   rcombo_x,combo_y,name_z                 ;X, Y, Z
     458 00001d00 00000000!         .long   SUPER_0
     459 00001d20     a112          .word   DMAWNZ|M_FLIPH|M_3D|M_SCRNREL                   ;CTRL
     460 00001d30     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     461 00001d40 00000000          .long   0,0                                     ;XVEL, YVEL
     462 00001d80                   .even
     463                    
     464 00001d80     000b  lframe  .word   lbar_x,bar_y,frame_z                    ;X, Y, Z
     465 00001db0 00000000!         .long   PWREMPTY
     466 00001dd0     a102          .word   DMAWNZ|M_3D|M_SCRNREL                   ;CTRL
     467 00001de0     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     468 00001df0 00000000          .long   0,0                                     ;XVEL, YVEL
     469 00001e30                   .even
     470                    
     471                    
     472 00001e30     0186  rframe  .word   rbar_x,bar_y,frame_z                    ;X, Y, Z
     473 00001e60 00000000!         .long   PWREMPTY
     474 00001e80     a112          .word   DMAWNZ|M_3D|M_SCRNREL|M_FLIPH           ;CTRL
     475 00001e90     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     476 00001ea0 00000000          .long   0,0                                     ;XVEL, YVEL
     477 00001ee0                   .even
     478                    
     479                    
     480 00001ee0     000b  lframeb .word   lbar_x,bar_y,frame_z                    ;X, Y, Z
     481 00001f10 00000000!         .long   LBAR_GENB                               ;IMG
     482 00001f30     a102          .word   DMAWNZ|M_3D|M_SCRNREL                   ;CTRL
     483 00001f40     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     484 00001f50 00000000          .long   0,0                                     ;XVEL, YVEL
     485 00001f90                   .even
     486                    
     487 00001f90     0186  rframeb .word   rbar_x,bar_y,frame_z                    ;X, Y, Z
     488 00001fc0 00000000!         .long   RBAR_GENB                               ;IMG
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   12

     489 00001fe0     a112          .word   DMAWNZ|M_3D|M_SCRNREL|M_FLIPH           ;CTRL
     490 00001ff0     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     491 00002000 00000000          .long   0,0                                     ;XVEL, YVEL
     492 00002040                   .even
     493                    
     494                    
     495 00002040     000b  lframec .word   lbar_x,bar_y,bak_z                      ;X, Y, Z
     496 00002070 00000000!         .long   LBAR_GENC                               ;IMG
     497 00002090     a102          .word   DMAWNZ|M_3D|M_SCRNREL                   ;CTRL
     498 000020a0     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     499 000020b0 00000000          .long   0,0                                     ;XVEL, YVEL
     500 000020f0                   .even
     501                    
     502 000020f0     0186  rframec .word   rbar_x,bar_y,bak_z                      ;X, Y, Z
     503 00002120 00000000!         .long   LBAR_GENC                               ;IMG
     504 00002140     a112          .word   DMAWNZ|M_3D|M_SCRNREL|M_FLIPH           ;CTRL
     505 00002150     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     506 00002160 00000000          .long   0,0                                     ;XVEL, YVEL
     507 000021a0                   .even
     508                    
     509 000021a0     000b  lwin    .word   11,22h,name_z                   ;X, Y, Z
     510 000021d0 00000000!         .long   BWINBOX                                 ;IMG
     511 000021f0     a102          .word   DMAWNZ|M_3D|M_SCRNREL           ;CTRL
     512 00002200     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     513 00002210 00000000          .long   0,0                                     ;XVEL, YVEL
     514 00002250                   .even
     515                    
     516 00002250     0187  rwin    .word   391,22h,name_z                  ;X, Y, Z
     517 00002280 00000000!         .long   RWINBOX                                 ;IMG
     518 000022a0     a102          .word   DMAWNZ|M_3D|M_SCRNREL                   ;CTRL
     519 000022b0     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     520 000022c0 00000000          .long   0,0                                     ;XVEL, YVEL
     521 00002300                   .even
     522                    
     523                    
     524 00002300     000b  lhlth1  .word   lbar_x,bar_y,bar_z                      ;X, Y, Z
     525 00002330 00000000!         .long   FGRN2YEL
     526 00002350     a102          .word   DMAWNZ|M_3D|M_SCRNREL                   ;CTRL
     527 00002360     0007          .word   CLSNEUT|TYPNEUT|SUBLBAR                 ;OID
     528 00002370 00000000          .long   0,0                                     ;XVEL, YVEL
     529 000023b0                   .even
     530                    
     531 000023b0     0186  rhlth1  .word   rbar_x,bar_y,bar_z                      ;X, Y, Z
     532 000023e0 00000000!         .long   FGRN2YEL
     533 00002400     a112          .word   DMAWNZ|M_3D|M_SCRNREL|M_FLIPH           ;CTRL
     534 00002410     0007          .word   CLSNEUT|TYPNEUT|SUBLBAR                 ;OID
     535 00002420 00000000          .long   0,0                                     ;XVEL, YVEL
     536 00002460                   .even
     537                    
     538                    
     539 00002460     0061  lname   .word   lname_x,name_y,name_z                   ;X, Y, Z
     540 00002490 00000000!         .long   NAM_BRT                                 ;IMG
     541 000024b0     a102          .word   DMAWNZ|M_3D|M_SCRNREL                   ;CTRL
     542 000024c0     0007          .word   CLSNEUT|TYPNEUT|SUBLBAR                 ;OID
     543 000024d0 00000000          .long   0,0                                     ;XVEL, YVEL
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   13

     544 00002510                   .even
     545                    
     546 00002510     012f  rname   .word   rname_x,name_y,name_z                   ;X, Y, Z
     547 00002540 00000000!         .long   NAM_RZR                                 ;IMG
     548 00002560     a102          .word   DMAWNZ|M_3D|M_SCRNREL                   ;CTRL
     549 00002570     0007          .word   CLSNEUT|TYPNEUT|SUBLBAR                 ;OID
     550 00002580 00000000          .long   0,0                                     ;XVEL, YVEL
     551 000025c0                   .even
     552                    
     553                    
     554 000025c0            SUBRP  replace_wins
     555 000025c0     05a1          move    @match_winner,a1
         000025d0 00000000! 
     556 000025f0     05a0          MOVE    @PSTATUS2,A0
         00002600 00000000! 
     557 00002620     5020          AND     A1,A0
     558 00002630     ca21          JRZ     wucsEXIT
     559                    
     560 00002640     07a0          move    @WINS_OBJ,A0,L
         00002650 00000910- 
     561 00002670     ca03          JRZ     NO_WINS_1
     562 00002680     0d5f          CALLA   DELOBJ
         00002690 00000000! 
     563 000026b0           NO_WINS_1
     564 000026b0     07a0          move    @WINS_OBJ+020H,A0,L
         000026c0 00000930- 
     565 000026e0     ca03          JRZ     NO_WINS_2
     566 000026f0     0d5f          CALLA   DELOBJ
         00002700 00000000! 
     567 00002720           NO_WINS_2
     568 00002720     07a0          move    @WINS_OBJ+040H,A0,L
         00002730 00000950- 
     569 00002750     ca03          JRZ     NO_WINS_3
     570 00002760     0d5f          CALLA   DELOBJ
         00002770 00000000! 
     571 00002790           NO_WINS_3
     572 00002790     05a1          move    @match_winner,a1
         000027a0 00000000! 
     573 000027c0     1421          dec     a1
     574 000027d0     cb08          jrnz    do_player_2_wins
     575 000027e0     05a0          move    @p1winstreak,a0
         000027f0 00000000! 
     576 00002810                   push    a10
     577 00002820     0d3f          callr   streak_1
         00002830     06bf  
     578 00002840                   pull    a10
     579 00002850           wucsEXIT
     580 00002850     0960          rets
     581                    
     582 00002860           do_player_2_wins
     583 00002860     05a0          move    @p2winstreak,a0
         00002870 00000000! 
     584 00002890                   push    a10
     585 000028a0     0d3f          callr   streak_2
         000028b0     06f8  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   14

     586 000028c0                   pull    a10
     587 000028d0     0960          rets
     588                    
     589                    
     590                    
     591 000028e0           FLASH_COMBO
     592                    
     593 000028e0     09e0          MOVI    COMBO_P,A0
         000028f0 00000000! 
     594 00002910     0d5f          CALLA   pal_getf
         00002920 00000000! 
     595 00002940     b008          MOVE    A0,*A8(OPAL)
         00002950     0150  
     596 00002960     b501          MOVE    *A8(OCTRL),A1
         00002970     00f0  
     597 00002980     0b81          ANDNI   M_FLIPH,A1
         00002990 00000010  
     598 000029b0     b028          MOVE    A1,*A8(OCTRL)
         000029c0     00f0  
     599 000029d0           DO_COMBO_FLASH_AGAIN
     600 000029d0     09e1          MOVI    COMBO_FLASH_ANIM,A1
         000029e0 00002bb0' 
     601 00002a00     0d5f          calla   setup_back_anim
         00002a10 00000000! 
     602 00002a30                   JSRP    ANIM_CROWD
     603 00002aa0                   SLEEPK  20
     604 00002ae0     c0ee          JRUC    DO_COMBO_FLASH_AGAIN
     605                    
     606 00002af0           DO_COMBO_SOUND
     607 00002af0                   SLEEPK  25
     608 00002b30     09c0          MOVI    3,A0
         00002b40     0003  
     609 00002b50     0d5f          CALLA   triple_sound
         00002b60 00000000! 
     610 00002b80                   DIE
     611                    
     612              8002  CANI_END                equ     2 + 8000H
     613                    
     614 00002bb0           COMBO_FLASH_ANIM
     615 00002bb0                   WL      2,COMBO_01
     616 00002be0                   WL      2,COMBO_02
     617 00002c10                   WL      2,COMBO_03
     618 00002c40                   WL      2,COMBO_04
     619 00002c70                   WL      2,COMBO_05
     620 00002ca0                   WL      2,COMBO_06
     621 00002cd0                   WL      2,COMBO_07
     622 00002d00                   WL      2,COMBO_08
     623 00002d30                   WL      2,COMBO_09
     624 00002d60                   WL      2,COMBO_10
     625 00002d90     8002          .WORD   CANI_END
     626                    
     627 00002da0            SUBRP  flash_2ndwind
     628 00002da0     b501          MOVE    *A8(OCTRL),A1
         00002db0     00f0  
     629 00002dc0     0b81          ANDNI   M_FLIPH,A1
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   15

         00002dd0 00000010  
     630 00002df0     b028          MOVE    A1,*A8(OCTRL)
         00002e00     00f0  
     631 00002e10     1869          movk    3,a9
     632 00002e20           wucsflsh        PUSHP   a9
     633 00002e30     09e1          movi    wind_anim,a1
         00002e40 00002f90' 
     634 00002e60     0d5f          calla   setup_back_anim
         00002e70 00000000! 
     635 00002e90                   JSRP    ANIM_CROWD
     636                    
     637 00002f00                   SLEEPK  2
     638                    
     639 00002f40                   PULLP   a9
     640 00002f50     3e89          dsj     a9,wucsflsh
     641                    
     642 00002f60                   DIE
     643                    
     644 00002f90           wind_anim
     645 00002f90                   WL      2,SECWND01
     646 00002fc0                   WL      2,SECWND02
     647 00002ff0                   WL      2,SECWND03
     648 00003020                   WL      2,SECWND04
     649 00003050                   WL      2,SECWND05
     650 00003080                   WL      2,SECWND06
     651 000030b0                   WL      2,SECWND07
     652 000030e0                   WL      2,SECWND08
     653 00003110                   WL      2,SECWND09
     654 00003140     8002          .WORD   CANI_END
     655                    
     656                    
     657 00003150            SUBR   CHECK_COMBO_GO
     658 00003150     b501          move    *a8(PLYRNUM),a1
         00003160     0580  
     659                    
     660                            ;if we're in royal rumble, change a 1 to a zero.
     661 00003170     05ae          move    @royal_rumble,a14
         00003180 00000000! 
     662 000031a0     ca04          jrz     wucsnorum0
     663 000031b0     0b41          cmpi    1,a1
         000031c0     fffe  
     664 000031d0     cb01          jrne    wucsnorum0
     665 000031e0     5621          clr     a1
     666 000031f0           wucsnorum0
     667                    
     668 000031f0                   X64     a1              ;x by PLT_SIZE
     669 00003200     0b21          addi    life_data,a1
         00003210 00000000- 
     670 00003230     b42e          MOVE    *A1(PLT_COMBO_SIZE),a14
         00003240     0030  
     671 00003250     05a1          move    @instant_combos_on,a1
         00003260 00000000! 
     672 00003280     cb02          jrnz    wucsauto_combos                 ; Auto combos on
     673 00003290     1a01          movk    16,a1                           ; Normal combo check
     674 000032a0     c001          jruc    wucscombo_check
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   16

     675 000032b0           wucsauto_combos
     676 000032b0     5621          clr     a1
     677 000032c0           wucscombo_check
     678 000032c0     482e          cmp     a1,a14
     679 000032d0     0960          rets
     680                    
     681                    
     682                    
     683 000032e0            SUBR   ADD_TO_COMBO_COUNT
     684                    
     685 000032e0     4ce2          MOVE    A7,A2
     686 000032f0     1825          movk    1,a5
     687 00003300     1823          movk    1,a3
     688 00003310     b5a1          MOVE    *a13(COMBO_START),A1
         00003320     0b00  
     689 00003330     5022          AND     A1,A2
     690 00003340     cb06          JRNZ    ALREADY_ADDED_ONCE
     691 00003350     4ca3          MOVE    A5,A3
     692 00003360     b5a1          MOVE    *a13(COMBO_START),A1
         00003370     0b00  
     693 00003380     54e1          OR      A7,A1
     694 00003390     b02d          MOVE    A1,*A13(COMBO_START)
         000033a0     0b00  
     695 000033b0           ALREADY_ADDED_ONCE
     696                    
     697                            ;HACK ALERT:  In royal rumble mode, each player individually tracks
     698                            ; which moves he's done and so on, but both share a single combo
     699                            ; meter.  Halve the amount to add and give it to player 0 if we're
     700                            ; in royal rumble mode and a13 is player 1.
     701                    
     702 000033b0                   PUSH    a13
     703 000033c0     05ae          move    @royal_rumble,a14
         000033d0 00000000! 
     704 000033f0     ca0a          jrz     wucsnorum
     705                    
     706 00003400     b5ae          move    *a13(PLYRNUM),a14
         00003410     0580  
     707 00003420     0b4e          cmpi    1,a14
         00003430     fffe  
     708 00003440     c705          jrgt    wucsnorum
     709                    
     710                            ;royal rumble and a13 is a human.  make it the first one.
     711 00003450     5621          clr     a1
     712 00003460     0d5f          calla   get_process_ptr
         00003470 00000000! 
     713 00003490     4c0d          move    a0,a13
     714 000034a0           wucsnorum
     715                    
     716                            ;WARNING:  a13 isn't neccesarily valid in here! (see above)
     717 000034a0     b5a1          move    *a13(PLYR_SIDE),a1
         000034b0     05b0  
     718 000034c0     b5ab          move    *a13(PLYRNUM),a11
         000034d0     0580  
     719                    
     720 000034e0                   PULL    a13
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   17

     721                            ;OKAY: a13 is safe again.
     722                    
     723 000034f0     09c9          movi    MD_SIZE,a9
         00003500     0090  
     724 00003510     5e29          mpyu    a1,a9
     725 00003520     0b29          addi    meter_data,a9
         00003530 000001c0- 
     726 00003550     b728          MOVE    *A9(MD_COMBO),A8,L
         00003560     0070  
     727 00003570     4d65          move    a11,a5
     728 00003580                   X64     a5              ;x by PLT_SIZE
     729 00003590     0b25          ADDI    life_data,A5
         000035a0 00000000- 
     730 000035c0     b4a2          MOVE    *A5(PLT_COMBO_SIZE),A2
         000035d0     0030  
     731 000035e0     4062          ADD     A3,A2
     732 000035f0     b045          MOVE    A2,*A5(PLT_COMBO_SIZE)
         00003600     0030  
     733 00003610     05a6          move    @instant_combos_on,a6
         00003620 00000000! 
     734 00003640     ca02          jrz     wucsnorm_combos
     735 00003650     56c6          clr     a6
     736 00003660     c001          jruc    wucsdo_check
     737 00003670           wucsnorm_combos
     738 00003670     1a06          movk    16,a6
     739 00003680           wucsdo_check
     740 00003680     48c2          cmp     a6,a2
     741 00003690     c51c          JRGE    SET_FLASHING_COMBO_GOING
     742 000036a0     24a2          SLL     5,A2
     743 000036b0     0b22          ADDI    WHICH_SIZE_BAR,A2
         000036c0 00003a50' 
     744 000036e0     8640          MOVE    *A2,A0,L
     745 000036f0     ba08          move    *a0(IANIOFF),*A8(ODOFF),L
         00003700     0020  
         00003710     0220  
     746 00003720     ba08          move    *a0(ISAG),*a8(OSAG),L
         00003730     0040  
         00003740     0110  
     747                    
     748 00003750     0960          RETS
     749                    
     750 00003760            SUBR   SET_FLASHING
     751                    
     752 00003760     4d40          move    a10,a0
     753 00003770     24a0          sll     5,a0
     754 00003780     0b20          addi    process_ptrs,a0
         00003790 00000000! 
     755 000037b0     8600          move    *a0,a0,L
     756 000037c0     b401          move    *a0(PLYR_SIDE),a1
         000037d0     05b0  
     757 000037e0     09c9          movi    MD_SIZE,a9
         000037f0     0090  
     758 00003800     5e29          mpyu    a1,a9
     759 00003810     0b29          addi    meter_data,a9
         00003820 000001c0- 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   18

     760 00003840     b728          MOVE    *A9(MD_COMBO),A8,L
         00003850     0070  
     761                    
     762 00003860           SET_FLASHING_COMBO_GOING
     763 00003860     4c20          move    a1,a0
     764 00003870     2480          SLL     4,a0
     765 00003880     0b20          ADDI    COMBO_FLASH_FLAG,a0
         00003890 00000a90- 
     766 000038b0     8400          MOVE    *a0,a0
     767 000038c0     cb17          JRNZ    COMBO_ALREADY_STARTED
     768                    
     769 000038d0     4c27          MOVE    A1,A7
     770 000038e0     2487          SLL     4,A7
     771 000038f0     0b27          ADDI    COMBO_FLASH_FLAG,A7
         00003900 00000a90- 
     772 00003920     1820          MOVK    1,A0
     773 00003930     8007          MOVE    A0,*A7
     774 00003940     0b01          ADDI    FLASH_COMBO_PID,A1
         00003950     0143  
     775 00003960     09e7          MOVI    FLASH_COMBO,A7
         00003970 000028e0' 
     776 00003990     0d5f          CALLA   GETPRC
         000039a0 00000000! 
     777 000039c0                   CREATE  SOUND_PID,DO_COMBO_SOUND
     778 00003a40           COMBO_ALREADY_STARTED
     779 00003a40     0960          RETS
     780                    
     781 00003a50           WHICH_SIZE_BAR
     782 00003a50 00000000!         .LONG   SUPER_0
     783 00003a70 00000000!         .LONG   SUPER_1
     784 00003a90 00000000!         .LONG   SUPER_2
     785 00003ab0 00000000!         .LONG   SUPER_3
     786 00003ad0 00000000!         .LONG   SUPER_4
     787 00003af0 00000000!         .LONG   SUPER_5
     788 00003b10 00000000!         .LONG   SUPER_6
     789 00003b30 00000000!         .LONG   SUPER_7
     790 00003b50 00000000!         .LONG   SUPER_8
     791 00003b70 00000000!         .LONG   SUPER_9
     792 00003b90 00000000!         .LONG   SUPER_10
     793 00003bb0 00000000!         .LONG   SUPER_11
     794 00003bd0 00000000!         .LONG   SUPER_12
     795 00003bf0 00000000!         .LONG   SUPER_13
     796 00003c10 00000000!         .LONG   SUPER_14
     797 00003c30 00000000!         .LONG   SUPER_15
     798 00003c50 00000000!         .LONG   SUPER_16
     799                    
     800                    
     801 00000ae0                   .bss    tjckLAST_REWIRE,32
     802              001a  tjckLATENCY     .equ    TSEC/2
     803                    
     804 00003c70            SUBR   rewire_monitor
     805                    
     806 00003c70     05ae          move    @buddy_mode_on,a14
         00003c80 00000000! 
     807 00003ca0     cb00          jrnz    tjckbuddy
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   19

         00003cb0     0082  
     808 00003cc0     05ae          move    @royal_rumble,a14
         00003cd0 00000000! 
     809 00003cf0     cb52          jrnz    tjckrumble
     810                    
     811                            ;quit if we're a two-player game
     812 00003d00     05ae          move    @PSTATUS2,a14
         00003d10 00000000! 
     813 00003d30     0b4e          cmpi    3,a14
         00003d40     fffc  
     814 00003d50     ca0e          jreq    tjckdie
     815                    
     816                            ;quit if we're a 1v1 game
     817 00003d60     05ae          move    @NUM_OPPS,a14
         00003d70 00000000! 
     818 00003d90     0b4e          cmpi    1,a14
         00003da0     fffe  
     819 00003db0     ca08          jreq    tjckdie
     820                    
     821                            ;okay, we should run.  figure out which PLYRNUM to key on.  Choose
     822                            ; the first active process, since that'll either be the only human
     823                            ; or the lone attract mode drone.  (Even if we do decide to show
     824                            ; 2v2 battles in attract mode, nobody dies so it's okay to always
     825                            ; key on the first drone.)
     826                            ;NOTE: The reason we store the PLYRNUM to key on instead of the
     827                            ; process pointer is that if we allow 2v2 mode and the human can
     828                            ; switch control from one drone to the next, we can't count on
     829                            ; PLYRNUM's and process ptrs always matching up!
     830                    
     831 00003dc0     09c0  tjckrun movi    NUM_WRES,a0
         00003dd0     0007  
     832 00003de0     09e1          movi    process_ptrs,a1
         00003df0 00000000! 
     833 00003e10     9622  tjcklp0 move    *a1+,a2,L
     834 00003e20     cb04          jrnz    tjckfound
     835 00003e30     3c60          dsj     a0,tjcklp0
     836                    
     837                            ;Hey!  No active processes!  Bitch, then quit.
     838                            .if DEBUG
     839                            LOCKUP
     840                            .endif
     841                    
     842 00003e40           tjckdie DIE
     843                    
     844 00003e70     b44a  tjckfound       move    *a2(PLYRNUM),a10        ;key plyrnum
         00003e80     0580  
     845 00003e90     b44b          move    *a2(CLOSEST_NUM),a11    ;previous closest (current disp.)
         00003ea0     03a0  
     846                    
     847 00003eb0     4d41  tjckloop        move    a10,a1
     848 00003ec0     0d5f          calla   get_process_ptr
         00003ed0 00000000! 
     849 00003ef0     4c06          move    a0,a6                   ;key process (recomputed every wake)
     850 00003f00     b4c1          move    *a6(CLOSEST_NUM),a1
         00003f10     03a0  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   20

     851 00003f20     4961          cmp     a11,a1
     852 00003f30     ca27          jreq    tjckno
     853                    
     854                            ;closest has changed.  only rewire if PCNT >= @tjckLAST_REWIRE+tjckLATENCY,
     855                            ; or if the old guy is dead.
     856 00003f40     4d61          move    a11,a1                  ;old guy...
     857 00003f50     0d5f          calla   get_process_ptr
         00003f60 00000000! 
     858 00003f80     b40e          move    *a0(PLYRMODE),a14
         00003f90     05c0  
     859 00003fa0     0b4e          cmpi    MODE_DEAD,a14
         00003fb0     fff6  
     860 00003fc0     ca0a          jreq    tjckrewire                      ;dead?
     861                    
     862 00003fd0     07a0          move    @PCNT,a0,L
         00003fe0 00000000! 
     863 00004000     07a1          move    @tjckLAST_REWIRE,a1,L
         00004010 00000ae0- 
     864 00004030     0b01          addi    tjckLATENCY,a1
         00004040     001a  
     865 00004050     4820          cmp     a1,a0
     866 00004060     c614          jrle    tjckno                  ;enough time since last chg?
     867                    
     868 00004070     b4c1  tjckrewire      move    *a6(CLOSEST_NUM),a1
         00004080     03a0  
     869 00004090     0d5f          calla   get_process_ptr
         000040a0 00000000! 
     870 000040c0     4c07          move    a0,a7                   ;new closest proc
     871 000040d0     b4e0          move    *a7(PLYR_SIDE),a0       ;side to display
         000040e0     05b0  
     872 000040f0     b4e1          move    *a7(PLYRNUM),a1         ;PLYRNUM to display
         00004100     0580  
     873 00004110     0d3f          callr   rewire_meter
         00004120     0089  
     874 00004130     07ae          move    @PCNT,a14,L
         00004140 00000000! 
     875 00004160     078e          move    a14,@tjckLAST_REWIRE,L
         00004170 00000ae0- 
     876 00004190     b4cb          move    *a6(CLOSEST_NUM),a11
         000041a0     03a0  
     877 000041b0           tjckno  SLOOP   10,tjckloop
     878                    
     879                    
     880                    
     881                    
     882 00004220           tjckrumble      ;royal rumble.  Never rewire the left meter.  Toggle the right
     883                            ; meter every four seconds between plyrnums 2 and 3.  Don't
     884                            ; toggle to or stay on a dead guy.
     885                    
     886 00004220     1869          movk    3,a9            ;pretend we're on PLYRNUM 3...
     887 00004230     c012          jruc    tjcktoggle              ;...so that we can just toggle to initialize.
     888                    
     889 00004240           tjckrloop       ;see if we're displaying a dead guy.
     890 00004240     4d21          move    a9,a1
     891 00004250     0d5f          calla   get_process_ptr
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   21

         00004260 00000000! 
     892 00004280     b40e          move    *a0(PLYRMODE),a14
         00004290     05c0  
     893 000042a0     0b4e          cmpi    MODE_DEAD,a14
         000042b0     fff6  
     894 000042c0     ca09          jreq    tjcktoggle
     895                    
     896                            ;still alive.  time to toggle anyway?
     897 000042d0     1428          dec     a8
     898 000042e0     c607          jrle    tjcktoggle
     899                    
     900                            ;not time yet.
     901 000042f0                   SLOOP   10,tjckrloop
     902                    
     903 00004360     4d21  tjcktoggle      move    a9,a1
     904                    
     905                            ;is THIS guy dead?
     906 00004370     0bc1          xori    1,a1            ;toggle between 2 and 3
         00004380 00000001  
     907 000043a0     0d5f          calla   get_process_ptr
         000043b0 00000000! 
     908 000043d0     b40e          move    *a0(PLYRMODE),a14
         000043e0     05c0  
     909 000043f0     0b4e          cmpi    MODE_DEAD,a14
         00004400     fff6  
     910 00004410     ca05          jreq    tjcknotogl              ;new guy is dead.  skip it.
     911                    
     912 00004420     4c29          move    a1,a9
     913 00004430     1820          movk    1,a0
     914 00004440     0d3f          callr   rewire_meter
         00004450     0056  
     915                    
     916 00004460     1aa8          movk    TSEC*4/10,a8
     917 00004470           tjcknotogl      SLOOP   10,tjckrloop
     918                    
     919                    
     920                    
     921                    
     922 000044e0           tjckbuddy       ;buddy mode.  This one is easy:  Show the human, unless he's dead
     923                            ; and his drone teammate is alive.  Don't assume, once the human
     924                            ; is dead, that he'll stay that way.  Buckoffs and all.
     925                    
     926 000044e0     5708          clr     a8              ;displayed player on team 0
     927 000044f0     1829          movk    1,a9            ;displayed player on team 1
     928                    
     929 00004500     5621  tjckbloop       clr     a1
     930 00004510     0d5f          calla   get_process_ptr
         00004520 00000000! 
     931 00004540     b40e          move    *a0(PLYRMODE),a14
         00004550     05c0  
     932 00004560     0b4e          cmpi    MODE_DEAD,a14
         00004570     fff6  
     933 00004580     cb12          jrne    tjckp1liv
     934                    
     935 00004590           tjckp1ded       ;plyr 1 is dead--check his drone.
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   22

     936 00004590     1841          movk    2,a1
     937 000045a0     0d5f          calla   get_process_ptr
         000045b0 00000000! 
     938 000045d0     b40e          move    *a0(PLYRMODE),a14
         000045e0     05c0  
     939 000045f0     0b4e          cmpi    MODE_DEAD,a14
         00004600     fff6  
     940 00004610     ca09          jreq    tjckp1liv               ;show the human anyway
     941                    
     942                            ;p1 is dead and his drone is alive.  show the drone.
     943 00004620     0b48          cmpi    2,a8
         00004630     fffd  
     944 00004640     ca0d          jreq    tjckckp2                ;already showing the drone.  skip it.
     945                    
     946 00004650     5600          clr     a0
     947 00004660     1841          movk    2,a1
     948 00004670     4c28          move    a1,a8
     949 00004680     0d3f          callr   rewire_meter
         00004690     0032  
     950 000046a0     c007          jruc    tjckckp2
     951                    
     952 000046b0           tjckp1liv       ;plyr 1 is alive (or his drone is dead). show him.
     953                    
     954 000046b0                   TEST    a8
     955 000046c0     ca05          jrz     tjckckp2                ;already showing the human.  skip it.
     956                    
     957 000046d0     5600          clr     a0
     958 000046e0     5621          clr     a1
     959 000046f0     4c28          move    a1,a8
     960 00004700     0d3f          callr   rewire_meter
         00004710     002a  
     961                    
     962 00004720     1821  tjckckp2        movk    1,a1
     963 00004730     0d5f          calla   get_process_ptr
         00004740 00000000! 
     964 00004760     b40e          move    *a0(PLYRMODE),a14
         00004770     05c0  
     965 00004780     0b4e          cmpi    MODE_DEAD,a14
         00004790     fff6  
     966 000047a0     cb12          jrne    tjckp2liv
     967                    
     968 000047b0           tjckp2ded       ;plyr 2 is dead--check his drone.
     969 000047b0     1861          movk    3,a1
     970 000047c0     0d5f          calla   get_process_ptr
         000047d0 00000000! 
     971 000047f0     b40e          move    *a0(PLYRMODE),a14
         00004800     05c0  
     972 00004810     0b4e          cmpi    MODE_DEAD,a14
         00004820     fff6  
     973 00004830     ca09          jreq    tjckp2liv               ;show the human anyway
     974                    
     975                            ;p2 is dead and his drone is alive.  show the drone.
     976 00004840     0b49          cmpi    3,a9
         00004850     fffc  
     977 00004860     ca0e          jreq    tjckbnap                ;already showing the drone.  skip it.
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   23

     978                    
     979 00004870     1820          movk    1,a0
     980 00004880     1861          movk    3,a1
     981 00004890     4c29          move    a1,a9
     982 000048a0     0d3f          callr   rewire_meter
         000048b0     0010  
     983 000048c0     c008          jruc    tjckbnap
     984                    
     985 000048d0           tjckp2liv       ;plyr 2 is alive (or his drone is dead). show him.
     986                    
     987 000048d0     0b49          cmpi    1,a9
         000048e0     fffe  
     988 000048f0     ca05          jrz     tjckbnap                ;already showing the human.  skip it.
     989                    
     990 00004900     1820          movk    1,a0
     991 00004910     1821          movk    1,a1
     992 00004920     4c29          move    a1,a9
     993 00004930     0d3f          callr   rewire_meter
         00004940     0007  
     994                    
     995 00004950           tjckbnap        SLOOP   10,tjckbloop
     996                    
     997                    
     998                    
     999 000049c0            SUBR   rewire_meter
    1000                    
    1001 000049c0                   PUSH    a2,a3,a4,a5,a6,a7,a8,a9,a10,a11
    1002                    
    1003                            ;set the pointers
    1004                            ;point a5 at the MD_???? block for the display
    1005 000049e0     09c5          movi    MD_SIZE,a5
         000049f0     0090  
    1006 00004a00     5e05          mpyu    a0,a5
    1007 00004a10     0b25          addi    meter_data,a5
         00004a20 000001c0- 
    1008                    
    1009                            ;point a6 at the PLT_???? block for PLYRNUM
    1010 00004a40     4c23          move    a1,a3
    1011 00004a50                   X64     a3              ;x by PLT_SIZE
    1012 00004a60     09e6          movi    life_data,a6
         00004a70 00000000- 
    1013 00004a90     4066          add     a3,a6
    1014                    
    1015                            ;set MD_LINK
    1016 00004aa0     b025          move    a1,*a5(MD_LINK)
         00004ab0     0000  
    1017                    
    1018                            ;point a7 at PLYRNUM's process
    1019 00004ac0     4c27          move    a1,a7
    1020 00004ad0                   X32     a7
    1021 00004ae0     0b27          addi    process_ptrs,a7
         00004af0 00000000! 
    1022 00004b10     86e7          move    *a7,a7,L
    1023                    
    1024                            ;change the combo bar
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   24

    1025 00004b20                   PUSH    A0
    1026 00004b30     b4c2          MOVE    *A6(PLT_COMBO_SIZE),A2
         00004b40     0030  
    1027 00004b50     05ae          move    @instant_combos_on,a14
         00004b60 00000000! 
    1028 00004b80     ca02          jrz     fcoinorm_combos
    1029 00004b90     57ce          clr     a14
    1030 00004ba0     c001          jruc    fcoido_check
    1031 00004bb0           fcoinorm_combos
    1032 00004bb0     1a0e          movk    16,a14
    1033 00004bc0           fcoido_check
    1034 00004bc0     49c2          cmp     a14,a2
    1035 00004bd0     c539          JRGE    WE_ARE_IN_COMBO_MODE
    1036                            
    1037 00004be0     4c01          MOVE    A0,A1
    1038 00004bf0     2481          SLL     4,A1
    1039 00004c00     0b21          ADDI    COMBO_FLASH_FLAG,A1
         00004c10 00000a90- 
    1040 00004c30     8428          MOVE    *A1,A8
    1041 00004c40     ca09          JRZ     NO_NEED_TO_KILL_COMBO_PROC
    1042 00004c50     5708          CLR     A8
    1043 00004c60     8101          MOVE    A8,*A1
    1044 00004c70     0b00          ADDI    FLASH_COMBO_PID,A0
         00004c80     0143  
    1045 00004c90     09c1          MOVI    -1,A1
         00004ca0     ffff  
    1046 00004cb0     0d5f          CALLA   KILALL
         00004cc0 00000000! 
    1047 00004ce0           NO_NEED_TO_KILL_COMBO_PROC
    1048 00004ce0                   PULL    A0
    1049 00004cf0     b6a8          MOVE    *A5(MD_COMBO),A8,L
         00004d00     0070  
    1050 00004d10     57ce          CLR     A14
    1051 00004d20     4c00          MOVE    A0,A0
    1052 00004d30     ca02          JRZ     NO_NEED_TO_SET_XFLIP
    1053 00004d40     09ce          MOVI    M_FLIPH,A14
         00004d50     0010  
    1054 00004d60           NO_NEED_TO_SET_XFLIP
    1055 00004d60     09e0          MOVI    SUPER_P,A0
         00004d70 00000000! 
    1056 00004d90     0d5f          CALLA   pal_getf
         00004da0 00000000! 
    1057 00004dc0     b008          MOVE    A0,*A8(OPAL)
         00004dd0     0150  
    1058                    
    1059 00004de0     b4c0          MOVE    *A6(PLT_COMBO_SIZE),A0
         00004df0     0030  
    1060 00004e00     24a0          SLL     5,A0
    1061 00004e10     0b20          ADDI    WHICH_SIZE_BAR,A0
         00004e20 00003a50' 
    1062 00004e40     8600          MOVE    *A0,A0,L
    1063                    
    1064 00004e50     b401          MOVE    *A0(ICTRL),A1
         00004e60     0060  
    1065 00004e70     55c1          OR      A14,A1
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   25

    1066 00004e80     0ba1          ORI     8000H|DMAWNZ,A1
         00004e90 00008002  
    1067 00004eb0     b028          MOVE    A1,*A8(OCTRL)
         00004ec0     00f0  
    1068 00004ed0     ba08          move    *a0(IANIOFF),*A8(ODOFF),L
         00004ee0     0020  
         00004ef0     0220  
    1069 00004f00     ba08          move    *a0(ISAG),*a8(OSAG),L
         00004f10     0040  
         00004f20     0110  
    1070 00004f30     ba08          move    *a0(0),*a8(OSIZE),L
         00004f40     0000  
         00004f50     0130  
    1071 00004f60     c017          JRUC    JUMP_BACK_IN
    1072                    
    1073 00004f70           WE_ARE_IN_COMBO_MODE
    1074 00004f70     2480          SLL     4,A0
    1075 00004f80     0b20          ADDI    COMBO_FLASH_FLAG,A0
         00004f90 00000a90- 
    1076 00004fb0     8401          MOVE    *A0,A1
    1077                    
    1078 00004fc0     cb10          JRNZ    WE_ARE_ON_RIGHT_SETTING
    1079 00004fd0     1821          MOVK    1,A1
    1080 00004fe0     8020          MOVE    A1,*A0
    1081                    
    1082 00004ff0                   PULL    A1
    1083 00005000                   PUSH    A1
    1084 00005010     0b01          ADDI    FLASH_COMBO_PID,A1
         00005020     0143  
    1085 00005030                   PUSH    A7
    1086 00005040     09e7          MOVI    FLASH_COMBO,A7
         00005050 000028e0' 
    1087 00005070     b6a8          MOVE    *A5(MD_COMBO),A8,L
         00005080     0070  
    1088 00005090     0d5f          CALLA   GETPRC
         000050a0 00000000! 
    1089 000050c0                   PULL    A7
    1090                    
    1091 000050d0           WE_ARE_ON_RIGHT_SETTING
    1092 000050d0                   PULL    A0
    1093                    
    1094 000050e0           JUMP_BACK_IN
    1095                            ;change the name
    1096 000050e0     b6a8          move    *a5(MD_NAME),a8,L
         000050f0     0050  
    1097 00005100     b4e1          move    *a7(WRESTLERNUM),a1
         00005110     0590  
    1098                    
    1099 00005120     05ae          move    @royal_rumble,a14
         00005130 00000000! 
    1100 00005150     ca41          jrz     fcoiuname
    1101                    
    1102 00005160     b4ee          move    *a7(PLYRNUM),a14
         00005170     0580  
    1103 00005180     ca03          jrz     fcoibuddy0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   26

    1104 00005190     0b4e          cmpi    1,a14
         000051a0     fffe  
    1105 000051b0     c73b          jrgt    fcoiuname
    1106                            .if DEBUG
    1107                            LOCKUP          ;rewire to PLYRNUM 1 in buddy mode!?
    1108                            .endif
    1109 000051c0           fcoibuddy0      ;It's a royal rumble.  Create the pair of names to go with the slash.
    1110                            ; This code only executes once for the left meters in rumble mode.
    1111                    
    1112                            .ref    index1,index2
    1113                    
    1114 000051c0                   PUSH    a8
    1115                    
    1116 000051d0                   TBL_OBJ lname
    1117 00005230     05a0          move    @index1,a0
         00005240 00000000! 
    1118 00005260                   X32     a0
    1119 00005270     0b20          addi    shortname_tbl,a0
         00005280 00005780' 
    1120 000052a0     8600          move    *a0,a0,L
    1121 000052b0     0d5f          calla   civanic
         000052c0 00000000! 
    1122                    
    1123 000052e0     b501          move    *a8(OXPOS),a1
         000052f0     0090  
    1124 00005300     1501          subk    8,a1
    1125 00005310     b40e          move    *a0(ISIZEX),a14
         00005320     0000  
    1126 00005330     45c1          sub     a14,a1
    1127 00005340     b40e          move    *a0(IANIOFFX),a14
         00005350     0020  
    1128 00005360     41c1          add     a14,a1
    1129 00005370     b028          move    a1,*a8(OXPOS)
         00005380     0090  
    1130                    
    1131 00005390                   TBL_OBJ lname
    1132 000053f0     05a0          move    @index2,a0
         00005400 00000000! 
    1133 00005420                   X32     a0
    1134 00005430     0b20          addi    shortname_tbl,a0
         00005440 00005780' 
    1135 00005460     8600          move    *a0,a0,L
    1136 00005470     0d5f          calla   civanic
         00005480 00000000! 
    1137                    
    1138 000054a0     b501          move    *a8(OXPOS),a1
         000054b0     0090  
    1139 000054c0     1101          addk    8,a1
    1140 000054d0     b40e          move    *a0(ISIZEX),a14
         000054e0     0000  
    1141 000054f0     41c1          add     a14,a1
    1142 00005500     b40e          move    *a0(IANIOFFX),a14
         00005510     0020  
    1143 00005520     45c1          sub     a14,a1
    1144 00005530     b028          move    a1,*a8(OXPOS)
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   27

         00005540     0090  
    1145                            
    1146 00005550     1941          movk    10,a1
    1147                    
    1148 00005560                   PULL    a8
    1149                    
    1150 00005570           fcoiuname       X32     a1
    1151 00005580     0b21          addi    name_tbl,a1
         00005590 00005620' 
    1152 000055b0     8620          move    *a1,a0,L
    1153 000055c0     0d5f          calla   civanic
         000055d0 00000000! 
    1154                    
    1155 000055f0           fcoirets        PULL    a2,a3,a4,a5,a6,a7,a8,a9,a10,a11
    1156                    
    1157 00005610     0960          rets
    1158                    
    1159 00005620           name_tbl
    1160 00005620 00000000!         .long   NAM_BRT,NAM_RZR,NAM_UND,NAM_YOK,NAM_SHN
    1161 000056c0 00000000!         .long   NAM_BAM,NAM_DNK,NAM_DNK,NAM_LEX,NAM_LEX
    1162 00005760 00000000!         .long   WSF10SLSx
    1163                    
    1164 00005780           shortname_tbl
    1165 00005780 00000000!         .long   SHORTHRT,SHORTRZR,SHORTUND,SHORTYOK,SHORTSHN
    1166 00005820 00000000!         .long   SHORTBAM,SHORTDNK,SHORTDNK,SHORTLEX,SHORTLEX
    1167                    
    1168                    
    1169 000058c0            SUBRP  update_meter
    1170                    
    1171                            ;aim a1 at the MD struct
    1172 000058c0     09c1          movi    MD_SIZE,a1
         000058d0     0090  
    1173 000058e0     5e01          mpyu    a0,a1
    1174 000058f0     0b21          addi    meter_data,a1
         00005900 000001c0- 
    1175                    
    1176                            ;aim a3 at the PLT struct
    1177 00005920     b422          move    *a1(MD_LINK),a2
         00005930     0000  
    1178 00005940     4c43          move    a2,a3
    1179 00005950                   X64     a3              ;x by PLT_SIZE
    1180 00005960     0b23          addi    life_data,a3
         00005970 00000000- 
    1181                    
    1182                            ;set the life bar
    1183 00005990     b628          move    *a1(MD_LIFE),a8,L
         000059a0     0010  
    1184 000059b0     b46e          move    *a3(PLT_CLIFE),a14
         000059c0     0010  
    1185 000059d0     03ae          neg     a14
    1186 000059e0     0b0e          addi    LIFE_MAX,a14            ;a14 is pixels to hide
         000059f0     00a3  
    1187                    
    1188 00005a00     b1c8          move    a14,*a8(OFSET)
         00005a10     0100  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   28

    1189 00005a20     ca28          JRZ     jfsgNOT_TO_WORRY
    1190                    
    1191 00005a30     0b42          cmpi    2,a2
         00005a40     fffd  
    1192 00005a50     c516          jrge    we_are_a_drone_ignore
    1193 00005a60     4c46          move    a2,a6
    1194 00005a70                   X32     a6
    1195 00005a80     0b26          addi    process_ptrs,a6
         00005a90 00000000! 
    1196 00005ab0     86c6          move    *a6,a6,L
    1197 00005ac0     b4c1          move    *a6(OUTSIDE_ALONE),a1
         00005ad0     0b70  
    1198 00005ae0     ca0d          jrz     we_are_a_drone_ignore
    1199                    
    1200 00005af0     05a0          move    @ROLLING_COUNT,A0
         00005b00 00000000! 
    1201 00005b20     27e0          sll     31,a0
    1202 00005b30     cb07          jrnz    ignore_it
    1203                    
    1204 00005b40     b501          move    *a8(OFLAGS),a1
         00005b50     00e0  
    1205 00005b60     0bc1          xori    M_NODISP,A1
         00005b70 00000080  
    1206 00005b90     b028          move    a1,*a8(OFLAGS)
         00005ba0     00e0  
    1207 00005bb0           ignore_it
    1208 00005bb0     0960          rets
    1209                    
    1210 00005bc0           we_are_a_drone_ignore
    1211 00005bc0     07a1          MOVE    @WHICH_SCREEN,A1,L
         00005bd0 00000000! 
    1212 00005bf0     0b61          CMPI    DUMRETS,A1
         00005c00 ffffffff! 
    1213 00005c20     ca08          JREQ    jfsgNOT_TO_WORRY
    1214 00005c30     b501          MOVE    *A8(OFLAGS),A1
         00005c40     00e0  
    1215 00005c50     0ba1          ORI     M_NODISP,A1
         00005c60 00000080  
    1216 00005c80     b028          MOVE    A1,*A8(OFLAGS)
         00005c90     00e0  
    1217 00005ca0     0960          RETS
    1218                    
    1219 00005cb0           jfsgNOT_TO_WORRY
    1220 00005cb0     b501          MOVE    *A8(OFLAGS),A1
         00005cc0     00e0  
    1221 00005cd0     0b81          ANDI    0FFFFH-M_NODISP,A1
         00005ce0 ffff0080  
    1222 00005d00     b028          MOVE    A1,*A8(OFLAGS)
         00005d10     00e0  
    1223 00005d20     0960          RETS
    1224                    
    1225                    
    1226                    
    1227 00005d30     0960          rets
    1228                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   29

    1229                    
    1230                    
    1231 00005d40            SUBR   get_health
    1232 00005d40                   PUSH    a1
    1233 00005d50                   X64     a1              ;x by PLT_SIZE
    1234 00005d60     0b21          addi    life_data,a1
         00005d70 00000000- 
    1235 00005d90     b420          move    *a1(PLT_LIFE),a0
         00005da0     0000  
    1236 00005db0                   PULL    a1
    1237 00005dc0                   TEST    a0              ;return Z on remaining life
    1238 00005dd0     0960          rets
    1239                    
    1240                    
    1241                    
    1242 00000b00                   .bss    kfgbactual_plyrnum,16
    1243                    
    1244                            ;reg use:
    1245                            ; a3 = adjusted health
    1246                            ; a4 = current health
    1247                            ; a5 = player life meter pointer
    1248                            ;a13 = our process pointer
    1249                    
    1250 00005de0            SUBR   adjust_health
    1251                    
    1252 00005de0                   PUSH    a1,a3,a4,a5,a8,a10,a13
    1253                    
    1254                            ;save the original PLYRNUM
    1255 00005e00     0581          move    a1,@kfgbactual_plyrnum
         00005e10 00000b00- 
    1256                    
    1257                            ;if we're in royal rumble mode and PLYRNUM is 1, make it zero.
    1258 00005e30     05ae          move    @royal_rumble,a14
         00005e40 00000000! 
    1259 00005e60     ca04          jrz     kfgbpnumok
    1260 00005e70     0b41          cmpi    1,a1
         00005e80     fffe  
    1261 00005e90     cb01          jrne    kfgbpnumok
    1262 00005ea0     5621          clr     a1
    1263 00005eb0           kfgbpnumok
    1264                    
    1265 00005eb0     4c2d          move    a1,a13
    1266 00005ec0                   X32     a13
    1267 00005ed0     0b2d          addi    process_ptrs,a13
         00005ee0 00000000! 
    1268 00005f00     87ad          move    *a13,a13,L
    1269                    
    1270 00005f10     4c25          move    a1,a5
    1271 00005f20                   X64     a5              ;x by PLT_SIZE
    1272 00005f30     0b25          addi    life_data,a5
         00005f40 00000000- 
    1273                    
    1274 00005f60     b4a4          move    *a5(PLT_LIFE),a4
         00005f70     0000  
    1275                            
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   30

    1276 00005f80                   TEST    a0
    1277 00005f90     cf06          jrnn    kfgbx0          ;not taking damage
    1278 00005fa0     b5ae          move    *a13(PLYRMODE),a14
         00005fb0     05c0  
    1279 00005fc0     0b4e          cmpi    MODE_DEAD,a14
         00005fd0     fff6  
    1280 00005fe0     ca00          jreq    kfgbalready_dead
         00005ff0     01ad  
    1281 00006000           kfgbx0
    1282                    
    1283 00006000                   TEST    a0
    1284 00006010     cf2e          jrnn    kfgbno_multiplier
    1285                    
    1286 00006020     b7ae          move    *a13(WHOHITME),a14,L
         00006030     04e0  
    1287 00006040     ca2b          jrz     kfgbno_valid_attacker   ;must have this.  WHOHITME is init'd
    1288 00006050     49ca          cmp     a14,a10                 ; to 0, and will thus match a cleared
    1289 00006060     cb29          jrne    kfgbno_valid_attacker   ; a10, with unpredictable results.
    1290                    
    1291                    
    1292 00006070     b543          move    *a10(PLYR_SIDE),a3
         00006080     05b0  
    1293 00006090     b5ae          move    *a13(PLYR_SIDE),a14
         000060a0     05b0  
    1294 000060b0     566e          xor     a3,a14
    1295 000060c0     cb08          jrnz    kfgbnorum1
    1296                    
    1297                            ;in 8-on-1, do half dmg to teammates instead of 1 pixel
    1298 000060d0     0d5f          calla   is_8_on_1
         000060e0 00000000! 
    1299 00006100     c902          jrnc    kfgbdo_1
    1300 00006110     2be0          sra     1,a0
    1301 00006120     c002          jruc    kfgbnorum1
    1302                    
    1303 00006130     09c0  kfgbdo_1        movi    -1,a0
         00006140     ffff  
    1304 00006150           kfgbnorum1
    1305                    
    1306 00006150     b54e          move    *a10(COMBO_COUNT),a14
         00006160     0af0  
    1307 00006170     ca0c          jrz     DO_NORMAL_ADJUST_CHECK
    1308 00006180     4dc0          move    a14,a0
    1309                    
    1310                            ;it's a combo.  Clean DAM_MULT and adjust the damage:
    1311                            ; 0 < hit# < 12:        damage = 15 - hit#
    1312                            ;     hit# > 11:        damage = 4
    1313                    
    1314 00006190     57ce          clr     a14
    1315 000061a0     058e          move    a14,@DAM_MULT
         000061b0 00000860- 
    1316                    
    1317 000061d0     1540          subk    10,a0
    1318 000061e0     0b40          CMPI    -4,A0
         000061f0     0003  
    1319 00006200     c60f          JRLE    kfgbno_multiplier
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   31

    1320 00006210     09c0          MOVI    -4,A0
         00006220     fffc  
    1321 00006230     c00c          JRUC    kfgbno_multiplier
    1322                    
    1323 00006240           DO_NORMAL_ADJUST_CHECK
    1324                            ;not a combo.  check for a multiplier.
    1325 00006240     05a9          move    @DAM_MULT,a9
         00006250 00000860- 
    1326 00006270     ca08          jrz     kfgbno_multiplier
    1327                    
    1328                            ;compute new damage val
    1329                            ;MULT 2:  damage *= 3/2
    1330                            ;MULT 3:  damage *= 4/2
    1331                            ;MULT 4+: damage *= 5/2
    1332 00006280     4c0e          move    a0,a14
    1333 00006290     41c0  kfgbmul_lp      add     a14,a0
    1334 000062a0     3c49          dsj     a9,kfgbmul_lp
    1335 000062b0     2be0          sra     1,a0
    1336                            
    1337                            ;clr DAM_MULT
    1338 000062c0     57ce          clr     a14
    1339 000062d0     058e          move    a14,@DAM_MULT
         000062e0 00000860- 
    1340                    
    1341 00006300           kfgbno_valid_attacker
    1342 00006300           kfgbno_multiplier
    1343                    
    1344                    
    1345                            ;life.
    1346 00006300                   TEST    a0
    1347 00006310     cf2f          jrnn    kfgbdc_adj_done
    1348                    
    1349                            ;count active drones
    1350                            ; count = 0 in attract mode, 4 in 8-on-1, 5 in buddy mode, 6 in
    1351                            ; 8-on-2.
    1352 00006320                   PUSH    a1,a2,a3
    1353                    
    1354 00006340     1883          movk    4,a3
    1355 00006350     0d5f          calla   is_8_on_1
         00006360 00000000! 
    1356 00006380     c818          jrc     kfgbadc_set
    1357                    
    1358 00006390     18a3          movk    5,a3
    1359 000063a0     05ae          move    @buddy_mode_on,a14
         000063b0 00000000! 
    1360 000063d0     cb13          jrnz    kfgbadc_set
    1361                    
    1362 000063e0     18c3          movk    6,a3
    1363 000063f0     05ae          move    @royal_rumble,a14
         00006400 00000000! 
    1364 00006420     cb0e          jrnz    kfgbadc_set
    1365                    
    1366 00006430     5663          clr     a3
    1367                    
    1368 00006440     05ae          move    @PSTATUS2,a14
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   32

         00006450 00000000! 
    1369 00006470     ca09          jrz     kfgbadc_set
    1370                    
    1371 00006480     09e1          movi    process_ptrs+40h,a1
         00006490 00000040! 
    1372 000064b0     09c2          movi    NUM_WRES-2,a2
         000064c0     0005  
    1373 000064d0     962e  kfgblp0 move    *a1+,a14,L
    1374 000064e0     ca02          jrz     kfgbadc_set
    1375 000064f0     1023          inc     a3
    1376 00006500     3c82          dsj     a2,kfgblp0
    1377                    
    1378 00006510           kfgbadc_set
    1379 00006510                   X32     a3
    1380 00006520     0b23          addi    kfgbdamage_mod_table,a3
         00006530 00007b80' 
    1381                    
    1382                            ;add 10h if the target is a player
    1383 00006550     b5ae          move    *a13(PLYR_TYPE),a14
         00006560     05a0  
    1384 00006570     0b4e          cmpi    PTYPE_DRONE,a14
         00006580     fffe  
    1385 00006590     ca01          jreq    kfgbadc_drone
    1386 000065a0     1203          addk    10h,a3
    1387 000065b0           kfgbadc_drone
    1388 000065b0     8463          move    *a3,a3
    1389 000065c0     5e03          mpyu    a0,a3
    1390 000065d0     4c60          move    a3,a0
    1391 000065e0     2b00          sra     8,a0
    1392                    
    1393 000065f0                   PULL    a1,a2,a3
    1394 00006610           kfgbdc_adj_done
    1395                    
    1396                    
    1397 00006610     07ae          move    @speed_adjustment,a14,L
         00006620 00000ac0- 
    1398 00006640     5dc0          mpys    a14,a0
    1399 00006650     2a01          sra     16,a1
    1400 00006660     4c20          move    a1,a0
    1401                    
    1402                    
    1403                            ; if we're taking damage and a10 matches WHOHITME.
    1404 00006670                   TEST    a0
    1405 00006680     cf09          jrnn    kfgbnostore
    1406                    
    1407 00006690     b7ae          move    *a13(WHOHITME),a14,L
         000066a0     04e0  
    1408 000066b0     49ca          cmp     a14,a10
    1409 000066c0     cb05          jrne    kfgbnostore
    1410                    
    1411 000066d0     b54e          move    *a10(DAMAGE_GIVEN),a14
         000066e0     0dc0  
    1412 000066f0     440e          sub     a0,a14          ;(damage is negative)
    1413 00006700     b1ca          move    a14,*a10(DAMAGE_GIVEN)
         00006710     0dc0  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   33

    1414 00006720           kfgbnostore
    1415                    
    1416                            ;do range checking on the damage value.  Don't allow a wrestler
    1417                            ; to have a life value below zero or above LIFE_MAX.
    1418 00006720     4c03          move    a0,a3
    1419 00006730     4083          add     a4,a3                   ;a3 is new life total
    1420 00006740     c606          jrle    kfgbbzero
    1421                    
    1422 00006750     0b43          cmpi    LIFE_MAX,a3
         00006760     ff5c  
    1423 00006770     c613          jrle    kfgbdmg_ok
    1424                    
    1425 00006780     09c3          movi    LIFE_MAX,a3
         00006790     00a3  
    1426 000067a0     c010          jruc    kfgbdmg_ok
    1427                    
    1428 000067b0           kfgbbzero       ;this hit will kill us.  If it was a 20+ point hit, and it killed
    1429                            ; us by a margin of 6 pixels or less, fudge it by taking five
    1430                            ; off the damage
    1431                    
    1432 000067b0     0b43          cmpi    -10,a3
         000067c0     0009  
    1433 000067d0     c606          jrle    kfgbno_fudge    ;skip if life is -4 or less
    1434                    
    1435 000067e0     0b40          cmpi    -20,a0
         000067f0     0013  
    1436 00006800     c703          jrgt    kfgbno_fudge    ;skip if the hit wasn't 25 or more
    1437                    
    1438                            ;fudge it.  Add 5 to the adjusted life to keep us alive
    1439 00006810     10a3          addk    5,a3
    1440 00006820     18a3          movk    5,a3
    1441                            ;and add 5 to the health adjustment (thus subtracting five from
    1442                            ; the damage done), just to be safe.
    1443 00006830     c007          jruc    kfgbdmg_ok
    1444                    
    1445 00006840           kfgbno_fudge
    1446 00006840     5663          clr     a3
    1447                    
    1448                            ;if we're in attract mode, don't die!
    1449 00006850     05ae          move    @PSTATUS2,a14
         00006860 00000000! 
    1450 00006880     cb02          jrnz    kfgbnorm1
    1451 00006890     09c3          MOVI    LIFE_MAX,a3
         000068a0     00a3  
    1452                    
    1453 000068b0           kfgbnorm1       ;if he's out of life and we're in debug mode, fill him up.
    1454                            .if DEBUG
    1455                            move    @fight_debug,a14
    1456                            jrz     kfgbdmg_ok
    1457                            movi    LIFE_MAX,a3
    1458                            .endif
    1459                    
    1460 000068b0           kfgbdmg_ok
    1461 000068b0     b065          move    a3,*a5(PLT_LIFE)
         000068c0     0000  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   34

    1462                    
    1463                            ;update LAST_DAMAGE
    1464 000068d0     05ae          move    @PCNT,a14
         000068e0 00000000! 
    1465 00006900     b1cd          move    a14,*a13(LAST_DAMAGE)
         00006910     0d50  
    1466                    
    1467                            ;figure out if we need to flash the lifebar as a warning.
    1468                            ;if a4 > 30 and a3 <= 30, fire off a danger process.
    1469                            ; re above:  a4 is current life, a3 is life after this hit.
    1470 00006920     0b44          cmpi    30,a4
         00006930     ffe1  
    1471 00006940     c612          jrle    kfgbno_danger_proc
    1472 00006950     0b43          cmpi    30,a3
         00006960     ffe1  
    1473 00006970     c70f          jrgt    kfgbno_danger_proc
    1474                    
    1475                            ;skip this if we have any teammates
    1476 00006980     4da0          move    a13,a0
    1477 00006990     0d5f          calla   ck_any_teammates
         000069a0 00000000! 
    1478 000069c0     c80a          jrc     kfgbno_danger_proc
    1479 000069d0                   CREATE  FLASH_PID,flash_obj
    1480 00006a50     b3a0          move    a13,*a0(PDATA),L
         00006a60     0100  
    1481                    
    1482 00006a70           kfgbno_danger_proc
    1483                    
    1484 00006a70                   TEST    a3
    1485 00006a80     cb00          jrnz    kfgbnot_dead
         00006a90     010a  
    1486                    
    1487                            ;player IS dead. -- time to restore original PLYRNUM
    1488 00006aa0     05a1          move    @kfgbactual_plyrnum,a1
         00006ab0 00000b00- 
    1489 00006ad0     0d5f          calla   get_process_ptr
         00006ae0 00000000! 
    1490 00006b00     4c0d          move    a0,a13
    1491                    
    1492                            ;set I_WILL_DIE on dead human's teammate if we're in royal rumble
    1493                            ; mode.
    1494 00006b10     05ae          move    @royal_rumble,a14
         00006b20 00000000! 
    1495 00006b40     ca0f          jrz     kfgbnorum
    1496 00006b50     0b41          cmpi    2,a1
         00006b60     fffd  
    1497 00006b70     c50c          jrge    kfgbnorum
    1498                    
    1499 00006b80     0bc1          xori    1,a1
         00006b90 00000001  
    1500 00006bb0     0d5f          calla   get_process_ptr
         00006bc0 00000000! 
    1501 00006be0     182e          movk    1,a14
    1502 00006bf0     b1c0          move    a14,*a0(I_WILL_DIE)
         00006c00     0b30  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   35

    1503 00006c10     0bc1          xori    1,a1
         00006c20 00000001  
    1504                    
    1505 00006c40           kfgbnorum       ;if dying guy is a drone, and we're in 8-on-? mode, decrement
    1506                            ; wrestler_count and wake up the wrestler_counter process.
    1507 00006c40     05a1          move    @kfgbactual_plyrnum,a1
         00006c50 00000b00- 
    1508 00006c70     0b41          cmpi    2,a1
         00006c80     fffd  
    1509 00006c90     c418          jrlt    kfgbnotd8
    1510                    
    1511                            ;Set the COUNTED_DEAD bit too.  If it's already set, don't decrement
    1512                            ; wrestler_count again.
    1513 00006ca0     b7ae          move    *a13(STATUS_FLAGS),a14,L
         00006cb0     0b50  
    1514 00006cc0     1dae          btst    B_COUNTED_DEAD,a14
    1515 00006cd0     cb14          jrnz    kfgbnotd8
    1516 00006ce0     0bae          ori     M_COUNTED_DEAD,a14
         00006cf0 00040000  
    1517 00006d10     b3cd          move    a14,*a13(STATUS_FLAGS),L
         00006d20     0b50  
    1518                    
    1519 00006d30     07a0          move    @wrestler_count_proc,a0,L       ; Does the counter proc exist ?
         00006d40 00000000! 
    1520 00006d60     ca0b          jrz     kfgbnotd8                               ; br = no
    1521 00006d70     05ae          move    @wrestler_count,a14             ; Current count == 0 ?
         00006d80 00000000! 
    1522 00006da0     ca07          jrz     kfgbnotd8                               ; br = yes
    1523 00006db0     142e          dec     a14                             ; Decrement it
    1524 00006dc0     058e          move    a14,@wrestler_count             ; Write it back
         00006dd0 00000000! 
    1525 00006df0     182e          movk    1,a14                           ; Make counter proc wakeup on next tick
    1526 00006e00     b1c0          move    a14,*a0(PTIME)
         00006e10     0030  
    1527 00006e20           kfgbnotd8
    1528                    
    1529                            ;Is combo mode on for this player?
    1530 00006e20     b7a8          move    *a13(WHOHITME),a8,L
         00006e30     04e0  
    1531 00006e40     0d3f          callr   CHECK_COMBO_GO
         00006e50     fc2f  
    1532 00006e60     c40a          jrlt    kfgbok
    1533 00006e70     b500          move    *a8(COMBO_COUNT),a0
         00006e80     0af0  
    1534 00006e90     ca07          jrz     kfgbok
    1535 00006ea0     182e          movk    1,a14
    1536 00006eb0     b1c5          move    a14,*a5(PLT_LIFE)
         00006ec0     0000  
    1537 00006ed0     b1cd          move    a14,*a13(I_WILL_DIE)
         00006ee0     0b30  
    1538 00006ef0     c000          jruc    kfgbalready_dead
         00006f00     00bc  
    1539 00006f10           kfgbok
    1540                    
    1541                            ;temp! - 314
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   36

    1542                            .if DEBUG
    1543                            DBEVENT BDE_DIES,a13,L,*a13(WRESTLERNUM),W,*a13(PLYRNUM),W
    1544                            .endif
    1545                    
    1546                            ;death sound
    1547 00006f10     09c0          movi    034h,a0
         00006f20     0034  
    1548 00006f30     0d5f          calla   triple_sound
         00006f40 00000000! 
    1549                    
    1550 00006f60     57ce          clr     a14
    1551 00006f70     b1cd          move    a14,*a13(ROLL_POS)
         00006f80     0450  
    1552                    
    1553                    
    1554 00006f90     b7aa          move    *a13(WHOHITME),a10,L    ;* wrestler process
         00006fa0     04e0  
    1555 00006fb0     b540          move    *a10(ATTACK_MODE),a0
         00006fc0     05d0  
    1556 00006fd0     0b40          cmpi    AMODE_BLBOWDROP,a0
         00006fe0     ffe6  
    1557 00006ff0     ca24          jrz     kfgbskip0
    1558 00007000     0b40          cmpi    AMODE_BSTOMP,a0
         00007010     ffe5  
    1559 00007020     ca21          jrz     kfgbskip0
    1560 00007030     0b40          cmpi    AMODE_BUTTSTOMP,a0
         00007040     ffe1  
    1561 00007050     ca1e          jrz     kfgbskip0
    1562                    
    1563                            ;if death by buzzer, jump to kfgbskip0 ONLY if it was unblocked.
    1564 00007060     0b40          cmpi    AMODE_BUZZ,a0
         00007070     ffe8  
    1565 00007080     cb05          jrne    kfgbnobuzz
    1566 00007090     b5ae          move    *a13(PLYRMODE),a14
         000070a0     05c0  
    1567 000070b0     0b4e          cmpi    MODE_BLOCK,a14
         000070c0     fff8  
    1568 000070d0     cb16          jrne    kfgbskip0
    1569 000070e0           kfgbnobuzz
    1570                    
    1571                            ;if our DEAD_ANIM bit is set, don't animate
    1572 000070e0     b5ae          move    *a13(STATUS_FLAGS),a14
         000070f0     0b50  
    1573 00007100     1e0e          btst    B_DEAD_ANIM,a14
    1574 00007110     cb12          jrnz    kfgbskip0
    1575                    
    1576 00007120     b5a0          move    *a13(WRESTLERNUM),a0
         00007130     0590  
    1577 00007140                   X32     a0
    1578                    
    1579 00007150     b5ae          move    *a13(PLYRMODE),a14
         00007160     05c0  
    1580 00007170     0b4e          cmpi    MODE_DEAD,a14
         00007180     fff6  
    1581 00007190     ca03          jrz     kfgbgrnd
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   37

    1582 000071a0     0b4e          cmpi    MODE_ONGROUND,a14
         000071b0     fffb  
    1583 000071c0     cb1c          jrnz    kfgbfall
    1584                    
    1585 000071d0     0b20  kfgbgrnd        addi    convulse_t,a0
         000071e0 00007d80' 
    1586 00007200     8600          move    *a0,a0,L
    1587                    
    1588 00007210     0d5f          calla   change_anim1a
         00007220 00000000! 
    1589                    
    1590 00007240           kfgbskip0
    1591 00007240                   SETMODE DEAD
    1592 000072f0     0d5f          calla   wres_collis_off
         00007300 00000000! 
    1593                    
    1594 00007320     0d5f          calla   flash_red
         00007330 00000000! 
    1595                    
    1596 00007350                   PULL    a1,a3,a4,a5,a8,a10,a13
    1597                    
    1598 00007370     0de0          setc
    1599 00007380     0960          rets
    1600                    
    1601 00007390           kfgbfall
    1602 00007390     0b4e          cmpi    MODE_NORMAL,a14
         000073a0     ffff  
    1603 000073b0     ca3f          jrz     kfgbfallbk
    1604 000073c0     0b4e          cmpi    MODE_RUNNING,a14
         000073d0     fffe  
    1605 000073e0     ca3c          jrz     kfgbfallbk
    1606 000073f0     0b4e          cmpi    MODE_INAIR,a14
         00007400     fffd  
    1607 00007410     ca39          jrz     kfgbfallbk
    1608 00007420     0b4e          cmpi    MODE_INAIR2,a14
         00007430     ffea  
    1609 00007440     ca36          jrz     kfgbfallbk
    1610 00007450     0b4e          cmpi    MODE_BOUNCING,a14
         00007460     fffa  
    1611 00007470     ca33          jrz     kfgbfallbk
    1612 00007480     0b4e          cmpi    MODE_ONTURNBKL,a14
         00007490     fff9  
    1613 000074a0     ca30          jrz     kfgbfallbk
    1614 000074b0     0b4e          cmpi    MODE_BLOCK,a14
         000074c0     fff8  
    1615 000074d0     ca2d          jrz     kfgbfallbk
    1616 000074e0     0b4e          cmpi    MODE_DIZZY,a14
         000074f0     fff7  
    1617 00007500     ca2a          jrz     kfgbfallbk
    1618 00007510     0b4e          cmpi    MODE_CLIMBTURNBKL,a14
         00007520     fff4  
    1619 00007530     ca27          jrz     kfgbfallbk
    1620 00007540     0b4e          cmpi    MODE_HEADHOLD,a14
         00007550     ffef  
    1621 00007560     ca24          jrz     kfgbfallbk
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   38

    1622 00007570     0b4e          cmpi    MODE_HEADHELD,a14
         00007580     ffec  
    1623 00007590     ca1c          jrz     kfgbwill_die
    1624                    
    1625                    
    1626                    
    1627                    
    1628 000075a0     5600          clr     a0
    1629 000075b0     b20d          move    a0,*a13(OBJ_XVEL),L
         000075c0     02d0  
    1630 000075d0     b20d          move    a0,*a13(OBJ_ZVEL),L
         000075e0     0310  
    1631 000075f0     b20d          move    a0,*a13(OBJ_YVEL),L
         00007600     02f0  
    1632                         
    1633 00007610                   SETMODE DEAD
    1634 000076c0     0d5f  kfgbskip        calla   wres_collis_off
         000076d0 00000000! 
    1635                    
    1636 000076f0     0d5f          calla   flash_red
         00007700 00000000! 
    1637                    
    1638 00007720                   PULL    a1,a3,a4,a5,a8,a10,a13
    1639                    
    1640 00007740     0de0          setc
    1641 00007750     0960          rets
    1642                    
    1643 00007760           kfgbwill_die
    1644 00007760     09c0          movi    3*60,a0
         00007770     00b4  
    1645 00007780     b00d          move    a0,*a13(I_WILL_DIE)
         00007790     0b30  
    1646 000077a0     c0f1          jruc    kfgbskip
    1647                    
    1648 000077b0     0b20  kfgbfallbk      addi    kfgbfallbacks_t,a0
         000077c0 00007c60' 
    1649 000077e0     8600          move    *a0,a0,L
    1650                    
    1651 000077f0     0d5f          calla   change_anim1a
         00007800 00000000! 
    1652                    
    1653 00007820     b7a2          move    *a13(OBJ_XVEL),a2,L
         00007830     02d0  
    1654 00007840     0b62          cmpi    [2,0],a2
         00007850 fffdffff  
    1655 00007870     c710          jrgt    kfgbokz
    1656 00007880     09e2          movi    [2,0],a2
         00007890 00020000  
    1657 000078b0     b5a1          move    *a13(OBJ_XPOSINT),a1
         000078c0     0110  
    1658 000078d0     b7a0          move    *a13(WHOHITME),a0,L     ;* wrestler process
         000078e0     04e0  
    1659                    
    1660 000078f0     b400          move    *a0(OBJ_XPOSINT),a0
         00007900     0110  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   39

    1661 00007910     4801          cmp     a0,a1                   ;offx - defx
    1662 00007920     c703          jrgt    kfgbfall_right          ;attacker on left
    1663 00007930     09e2          movi    [-2,0],a2
         00007940 fffe0000  
    1664                    
    1665                    
    1666 00007960           kfgbfall_right
    1667 00007960     b24d          move    a2,*a13(OBJ_XVEL),L
         00007970     02d0  
    1668 00007980           kfgbokz
    1669                    
    1670 00007980     0d5f          calla   wres_collis_off
         00007990 00000000! 
    1671                         
    1672 000079b0                   SETMODE DEAD
    1673                    
    1674 00007a60     0d5f          calla   flash_red
         00007a70 00000000! 
    1675                    
    1676 00007a90                   PULL    a1,a3,a4,a5,a8,a10,a13
    1677                    
    1678 00007ab0     0de0          setc
    1679 00007ac0     0960          rets
    1680                    
    1681                    
    1682                    
    1683 00007ad0           kfgbalready_dead
    1684                    
    1685 00007ad0     0d5f          calla   flash_red
         00007ae0 00000000! 
    1686                    
    1687 00007b00                   PULL    a1,a3,a4,a5,a8,a10,a13
    1688 00007b20     0de0          setc
    1689 00007b30     0960          rets
    1690                    
    1691 00007b40           kfgbnot_dead
    1692 00007b40                   PULL    a1,a3,a4,a5,a8,a10,a13
    1693 00007b60     0320          clrc
    1694 00007b70     0960          rets
    1695                    
    1696                    
    1697 00007b80           kfgbdamage_mod_table
    1698 00007b80     00da          .word   _85PCT,         _85PCT          ;0 drones
    1699 00007ba0     0100          .word   _100PCT,        _100PCT         ;1 drone
    1700 00007bc0     011a          .word   _110PCT,        _90PCT          ;2 drones
    1701 00007be0     0140          .word   _125PCT,        _75PCT          ;3 drones
    1702 00007c00     0173          .word   _145PCT,        _60PCT          ;8-on-1 match
    1703 00007c20     011a          .word   _110PCT,        _90PCT          ;buddy mode match
    1704 00007c40     014c          .word   _130PCT,        _30PCT          ;8-on-2 match
    1705                    
    1706                    
    1707 00007c60            SUBR   fallbacks_t
    1708 00007c60           kfgbfallbacks_t
    1709 00007c60           kfgbfall_back
    1710 00007c60                   REFLONG hrt_fall_back_anim              ;0 Bret Hart
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   40

    1711 00007c80                   REFLONG rzr_fall_back_anim              ;1 Razor Ramon
    1712 00007ca0                   REFLONG und_fall_back_anim              ;2 Undertaker
    1713 00007cc0                   REFLONG yok_fall_back_anim              ;3 Yokozuna
    1714 00007ce0                   REFLONG shn_fall_back_anim              ;4 Shawn Michaels
    1715 00007d00                   REFLONG bam_fall_back_anim              ;5 Bam Bam
    1716 00007d20                   REFLONG dnk_fall_back_anim              ;6 Doink
    1717 00007d40 00000000          .long   0                               ;7 spare
    1718 00007d60                   REFLONG lex_fall_back_anim              ;8 Lex Luger
    1719                     
    1720                    
    1721 00007d80            SUBR   convulse_t
    1722 00007d80           kfgbhitonground
    1723 00007d80                   REFLONG hrt_hitonground_anim            ;0 Bret Hart
    1724 00007da0                   REFLONG rzr_hitonground_anim
    1725 00007dc0                   REFLONG und_hitonground_anim            ;2 Undertaker
    1726 00007de0                   REFLONG yok_hitonground_anim            ;3 Yokozuna
    1727 00007e00                   REFLONG shn_hitonground_anim            ;4 Shawn Michaels
    1728 00007e20                   REFLONG bam_hitonground_anim            ;5 Bam Bam
    1729 00007e40                   REFLONG dnk_hitonground_anim            ;6 Doink
    1730 00007e60 00000000          .long   0                               ;7 spare
    1731 00007e80                   REFLONG lex_hitonground_anim            ;8 Lex Luger
    1732                    
    1733                    
    1734 00007ea0            SUBR   start_credbox
    1735                    
    1736                            ;draw the panel
    1737 00007ea0                   TBL_OBJ ikycplate
    1738                    
    1739 00007f00     0d3f          callr   update_credit_msg
         00007f10     0001  
    1740 00007f20     0960          rets
    1741                    
    1742                            
    1743                    
    1744 00007f30            SUBR   update_credit_msg
    1745                    
    1746 00007f30                   PUSH    a8,a9,a10
    1747                    
    1748                    
    1749                            .ref    SHOW_CRD_FLAG
    1750 00007f50     05a0          move    @SHOW_CRD_FLAG,a0
         00007f60 00000000! 
    1751 00007f80     cb11          jrnz    ikyccont0
    1752                    
    1753 00007f90     05a0          move    @GAMSTATE,a0
         00007fa0 00000000! 
    1754 00007fc0     0b40          cmpi    INSELECT,a0
         00007fd0     fffd  
    1755 00007fe0     ca1d          jrz     ikyccont
    1756                    
    1757 00007ff0     0b40          CMPI    INPARTY,A0
         00008000     fff9  
    1758 00008010     ca1a          JREQ    ikyccont
    1759 00008020     0b40          CMPI    INPREGAME,A0
         00008030     fffc  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   41

    1760 00008040     ca17          JREQ    ikyccont
    1761 00008050     0b40          CMPI    INPREGAME2,A0
         00008060     fff6  
    1762 00008070     ca14          JREQ    ikyccont
    1763                    
    1764 00008080     1480          subk    INGAME,a0
    1765 00008090     cb6a          jrne    ikycx
    1766                    
    1767 000080a0           ikyccont0
    1768                    
    1769                    
    1770 000080a0     09c0          movi    METER_PID,a0
         000080b0     0240  
    1771 000080c0     5621          clr     a1
    1772 000080d0     03e1          not     a1
    1773 000080e0     0d5f          calla   EXISTP
         000080f0 00000000! 
    1774 00008110     ca0a          jrz     ikyccont
    1775                    
    1776 00008120     1821          movk    1,a1
    1777 00008130     b020          move    a1,*a0(P1CNTR)
         00008140     0100  
    1778 00008150     b020          move    a1,*a0(P2CNTR)
         00008160     0110  
    1779 00008170     5621          clr     a1
    1780 00008180     b020          move    a1,*a0(P1STATE)
         00008190     0120  
    1781 000081a0     b020          move    a1,*a0(P2STATE)
         000081b0     0130  
    1782                    
    1783 000081c0           ikyccont
    1784                    
    1785 000081c0     09c0          movi    CLSDEAD|CREDITID,a0
         000081d0     212a  
    1786 000081e0     0d5f          calla   obj_del1c               ;kill credit/qrtr imgs
         000081f0 00000000! 
    1787                     
    1788 00008210                   TBL_OBJ ikycplate
    1789                    
    1790 00008270     09ea          movi    freeply,a10
         00008280 00000000! 
    1791                    
    1792 000082a0     1a60          movk    ADJFREPL,a0
    1793 000082b0     0d5f          CALLA   GET_ADJ                 ;SEE IF FREEPLAY......(Z BIT CLEAR IF SO!)
         000082c0 00000000! 
    1794 000082e0     cb32          jrnz    ikycfreep
    1795                    
    1796 000082f0     09ea          movi    credit,a10
         00008300 00000000! 
    1797                    
    1798 00008320     0d5f          calla   GET_CREDITS
         00008330 00000000! 
    1799 00008350     0d5f          calla   BINBCD
         00008360 00000000! 
    1800                            
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   42

    1801 00008380     4c09          move    a0,a9
    1802 00008390     2780          sll     32-4,a0
    1803 000083a0     2d20          srl     32-4-5,a0               ;*32
    1804 000083b0     0b20          addi    ikycnumfont,a0
         000083c0 00008820' 
    1805 000083e0     8602          move    *a0,a2,L
    1806                    
    1807 000083f0     09e0          movi    [216,0],a0
         00008400 00d80000  
    1808 00008420     09e1          movi    [6,0],a1
         00008430 00060000  
    1809 00008450     09c3          movi    1901H,a3                        ;Z
         00008460     1901  
    1810 00008470     09e4          movi    DMAWNZ|M_SCRNREL,a4
         00008480 0000a002  
    1811 000084a0     09c5          movi    CLSDEAD|CREDITID,a5
         000084b0     212a  
    1812 000084c0     56c6          clr     a6
    1813 000084d0     56e7          clr     a7
    1814 000084e0     0d5f          calla   BEGINOBJ
         000084f0 00000000! 
    1815                            
    1816 00008510     2f89          srl     4,a9
    1817 00008520     2789          sll     32-4,a9
    1818 00008530     2d29          srl     32-4-5,a9               ;*32
    1819 00008540     0b29          addi    ikycnumfont,a9
         00008550 00008820' 
    1820 00008570     8722          move    *a9,a2,L
    1821                    
    1822 00008580     09e0          movi    [211,0],a0
         00008590 00d30000  
    1823 000085b0     09e1          movi    [6,0],a1
         000085c0 00060000  
    1824 000085e0     0d5f          calla   BEGINOBJ
         000085f0 00000000! 
    1825                            
    1826 00008610     09e0  ikycfreep       movi    [179,0],a0
         00008620 00b30000  
    1827 00008640     09e1          movi    [6,0],a1
         00008650 00060000  
    1828 00008670     4d42          move    a10,a2
    1829 00008680     09c3          movi    1901H,a3                        ;Z
         00008690     1901  
    1830 000086a0     09e4          movi    DMAWNZ|M_SCRNREL,a4
         000086b0 0000a002  
    1831 000086d0     09c5          movi    CLSDEAD|CREDITID,a5
         000086e0     212a  
    1832 000086f0     56c6          clr     a6
    1833 00008700     56e7          clr     a7
    1834 00008710     0d5f          calla   BEGINOBJ
         00008720 00000000! 
    1835                    
    1836 00008740           ikycx   PULL    a8,a9,a10
    1837                    
    1838 00008760     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   43

    1839                    
    1840                    
    1841 00008770     00b0  ikycplate       .word   176,4,1900H                             ;X, Y, Z
    1842 000087a0 00000000!         .long   crplate                                 ;IMG
    1843 000087c0     a002          .word   DMAWNZ|M_SCRNREL                        ;CTRL
    1844 000087d0     212a          .word   CLSDEAD|CREDITID                        ;OID
    1845 000087e0 00000000          .long   0,0                                     ;XVEL, YVEL
    1846 00008820                   .even
    1847                    
    1848 00008820           ikycnumfont
    1849 00008820 00000000!         .long   font60
    1850 00008840 00000000!         .long   font61
    1851 00008860 00000000!         .long   font62
    1852 00008880 00000000!         .long   font63
    1853 000088a0 00000000!         .long   font64
    1854 000088c0 00000000!         .long   font65
    1855 000088e0 00000000!         .long   font66
    1856 00008900 00000000!         .long   font67
    1857 00008920 00000000!         .long   font68
    1858 00008940 00000000!         .long   font69
    1859                    
    1860                    
    1861              0002  cwbilifebar_deltavee    equ     2       ;pixels per tick of motion
    1862                    
    1863 00008960            SUBRP  inc_life
    1864                    
    1865                            ;aim a1 at PLT block
    1866 00008960     4c01          move    a0,a1
    1867 00008970                   X64     a1              ;x by PLT_SIZE
    1868 00008980     0b21          addi    life_data,a1
         00008990 00000000- 
    1869                    
    1870                            ;check the values
    1871 000089b0     b422          move    *a1(PLT_LIFE),a2
         000089c0     0000  
    1872 000089d0     b423          move    *a1(PLT_CLIFE),a3
         000089e0     0010  
    1873                    
    1874 000089f0     4843          cmp     a2,a3
    1875 00008a00     ca0c          jrz     cwbidone
    1876                    
    1877                            ;CLIFE is lagging.  move it toward LIFE
    1878 00008a10     c704          jrgt    cwbishrink
    1879                    
    1880                            ;CLIFE needs to grow
    1881 00008a20     0b03          addi    cwbilifebar_deltavee,a3
         00008a30     0002  
    1882 00008a40     4862          cmp     a3,a2
    1883 00008a50     c003          jruc    cwbiset
    1884                    
    1885 00008a60           cwbishrink
    1886 00008a60     0be3          subi    cwbilifebar_deltavee,a3
         00008a70     fffd  
    1887 00008a80     4843          cmp     a2,a3
    1888 00008a90           cwbiset
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   44

    1889 00008a90     c501          jrge    cwbiinrange
    1890                    
    1891                            ;overshot it
    1892 00008aa0     4c43          move    a2,a3       
    1893 00008ab0           cwbiinrange
    1894 00008ab0     b061          move    a3,*a1(PLT_CLIFE)
         00008ac0     0010  
    1895                    
    1896 00008ad0           cwbidone
    1897 00008ad0     0960          rets
    1898                    
    1899                    
    1900                    
    1901              00b9  danger_snd      equ     0b9h
    1902                    
    1903 00008ae0            SUBRP  flash_obj
    1904                    
    1905                            ;if we're a drone and we have teammates, ignore this.
    1906 00008ae0     0b4a          cmpi    1,a10
         00008af0     fffe  
    1907 00008b00     c614          jrle    idwhndie
    1908                    
    1909 00008b10     4d41          move    a10,a1
    1910 00008b20     0d5f          calla   get_process_ptr
         00008b30 00000000! 
    1911 00008b50     b404          move    *a0(PLYR_SIDE),a4
         00008b60     05b0  
    1912 00008b70     09e1          movi    process_ptrs+40h,a1
         00008b80 00000040! 
    1913 00008ba0     09c2          movi    NUM_WRES-2,a2
         00008bb0     0005  
    1914 00008bc0     9623  idwhlp0 move    *a1+,a3,L
    1915 00008bd0     ca07          jrz     idwhndie                        ;done at first inactive
    1916 00008be0     4803          cmp     a0,a3
    1917 00008bf0     ca04          jreq    idwhnxt0                        ;skip self
    1918 00008c00     b46e          move    *a3(PLYR_SIDE),a14
         00008c10     05b0  
    1919 00008c20     488e          cmp     a4,a14
    1920 00008c30     ca6f          jreq    idwhdie                 ;die--we have a teammate
    1921 00008c40     3d22  idwhnxt0        dsj     a2,idwhlp0
    1922                    
    1923 00008c50           idwhndie
    1924                            ;find the bar obj
    1925 00008c50     0d5f          calla   arm_comeback_award
         00008c60 00000000! 
    1926                    
    1927 00008c80     09c0          movi    danger_snd,a0
         00008c90     00b9  
    1928 00008ca0     0d5f          calla   triple_sound
         00008cb0 00000000! 
    1929                    
    1930                            ;danger music - skip if in 8-on-2 mode
    1931 00008cd0     0d5f          calla   is_8_on_1
         00008ce0 00000000! 
    1932 00008d00     c862          jrc     idwhdie
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   45

    1933 00008d10     05ae          move    @royal_rumble,a14
         00008d20 00000000! 
    1934 00008d40     cb5e          jrnz    idwhdie
    1935                    
    1936 00008d50     09c3          movi    18,a3
         00008d60     0012  
    1937 00008d70     05ae          move    @temp_music,a14
         00008d80 00000000! 
    1938 00008da0     0b4e          cmpi    15,a14
         00008db0     fff0  
    1939 00008dc0     ca01          jreq    end_music_set
    1940 00008dd0     1b43          movk    26,a3
    1941 00008de0           end_music_set
    1942 00008de0     0d5f          calla   SNDSND
         00008df0 00000000! 
    1943                    
    1944 00008e10     09e2          movi    danger,a2
         00008e20 00000000! 
    1945 00008e40     09e0          movi    [85h,0],a0
         00008e50 00850000  
    1946 00008e70     b7a1          move    *a13(PDATA),a1,L
         00008e80     0100  
    1947 00008e90     b421          move    *a1(PLYR_SIDE),a1
         00008ea0     05b0  
    1948 00008eb0     ca03          jrz     idwhp1
    1949 00008ec0     09e0          movi    [0e4h,0],a0
         00008ed0 00e40000  
    1950 00008ef0     09e1  idwhp1  movi    [18h,0],a1
         00008f00 00180000  
    1951 00008f20     09c3          movi    name_z,a3                       ;Z
         00008f30     00cb  
    1952 00008f40     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00008f50 0000a102  
    1953 00008f70     09c5          movi    CLSDEAD,a5
         00008f80     2000  
    1954 00008f90     56c6          clr     a6
    1955 00008fa0     56e7          clr     a7
    1956 00008fb0     0d5f          calla   BEGINOBJ
         00008fc0 00000000! 
    1957                    
    1958 00008fe0     1a89          movk    20,a9
    1959 00008ff0           idwhlp
    1960                    
    1961 00008ff0     4d40          move    a10,a0
    1962 00009000                   X32     a0
    1963 00009010     0b20          addi    process_ptrs,a0
         00009020 00000000! 
    1964 00009040     8600          move    *a0,a0,L
    1965                    
    1966 00009050     b40e          move    *a0(CLOSEST_NUM),a14
         00009060     03a0  
    1967 00009070                   X32     a14
    1968 00009080     0b2e          addi    process_ptrs,a14
         00009090 00000000! 
    1969 000090b0     87ce          move    *a14,a14,L
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   46

    1970 000090c0     b5ce          move    *a14(PLYRMODE),a14
         000090d0     05c0  
    1971 000090e0     0b4e          cmpi    MODE_DEAD,a14
         000090f0     fff6  
    1972 00009100     ca1f          jreq    idwhdeldie
    1973                    
    1974 00009110     b400          move    *a0(PLYRMODE),a0
         00009120     05c0  
    1975 00009130     0b40          cmpi    MODE_DEAD,a0
         00009140     fff6  
    1976 00009150     ca1a          jreq    idwhdeldie
    1977                    
    1978 00009160                   SLEEPK  7
    1979                    
    1980 000091a0     09e0          movi    WSF_R_P,a0
         000091b0 00000000! 
    1981 000091d0     0d5f          calla   pal_getf
         000091e0 00000000! 
    1982 00009200     b008          move    a0,*a8(OPAL)
         00009210     0150  
    1983                    
    1984 00009220                   SLEEPK  4
    1985                    
    1986 00009260     09e0          movi    WSF_W_P,a0
         00009270 00000000! 
    1987 00009290     0d5f          calla   pal_getf
         000092a0 00000000! 
    1988 000092c0     b008          move    a0,*a8(OPAL)
         000092d0     0150  
    1989                    
    1990 000092e0     0d89          dsj     a9,idwhlp
         000092f0     ffcf  
    1991                    
    1992 00009300     0d5f  idwhdeldie      calla   DELOBJA8
         00009310 00000000! 
    1993                    
    1994 00009330           idwhdie DIE
    1995                    
    1996                    
    1997                    
    1998                    
    1999 00009360            SUBRP  do_win_streaks
    2000                    
    2001 00009360     05a0          move    @p1winstreak,a0
         00009370 00000000! 
    2002 00009390     ca02          jrz     idwhp2
    2003                    
    2004 000093a0     0d3f          callr   streak_1
         000093b0     0007  
    2005                    
    2006 000093c0     05a0  idwhp2  move    @p2winstreak,a0
         000093d0 00000000! 
    2007 000093f0     ca02          jrz     idwhx
    2008                    
    2009 00009400     0d3f          callr   streak_2
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   47

         00009410     0042  
    2010                    
    2011 00009420           idwhx
    2012 00009420     0960          rets
    2013                    
    2014 00009430           streak_1
    2015 00009430     0b40          cmpi    99,a0
         00009440     ff9c  
    2016 00009450     c202          jrls    idwhmaxok
    2017 00009460     09c0          movi    99,a0
         00009470     0063  
    2018 00009480           idwhmaxok
    2019 00009480     0d5f          calla   BINBCD
         00009490 00000000! 
    2020                    
    2021 000094b0     4c09          move    a0,a9
    2022 000094c0     2780          sll     32-4,a0
    2023 000094d0     2d20          srl     32-4-5,a0               ;*32
    2024 000094e0     0b20          addi    idwhf_t,a0
         000094f0 00009c60' 
    2025 00009510     8602          move    *a0,a2,L
    2026                    
    2027 00009520     09e0          movi    [3dh,0],a0
         00009530 003d0000  
    2028 00009550     09e1          movi    [23h,0],a1
         00009560 00230000  
    2029 00009580     09c3          movi    name_z,a3                       ;Z
         00009590     00cb  
    2030 000095a0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         000095b0 0000a102  
    2031 000095d0     09c5          movi    CLSDEAD,a5
         000095e0     2000  
    2032 000095f0     56c6          clr     a6
    2033 00009600     56e7          clr     a7
    2034 00009610     0d5f          calla   BEGINOBJ
         00009620 00000000! 
    2035 00009640     0788          MOVE    A8,@WINS_OBJ,L
         00009650 00000910- 
    2036                    
    2037 00009670     2f89          srl     4,a9
    2038 00009680     2789          sll     32-4,a9
    2039 00009690     2d29          srl     32-4-5,a9               ;*32
    2040 000096a0     0b29          addi    idwhf_t,a9
         000096b0 00009c60' 
    2041 000096d0     8722          move    *a9,a2,L
    2042 000096e0     09e0          movi    [36h,0],a0
         000096f0 00360000  
    2043 00009710     09e1          movi    [23h,0],a1
         00009720 00230000  
    2044 00009740     0d5f          calla   BEGINOBJ
         00009750 00000000! 
    2045 00009770     0788          MOVE    A8,@WINS_OBJ+20H,L
         00009780 00000930- 
    2046                       
    2047 000097a0                   TBL_OBJ lwin
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   48

    2048 00009800     0788          MOVE    A8,@WINS_OBJ+40H,L
         00009810 00000950- 
    2049 00009830     0960          rets
    2050                    
    2051 00009840           streak_2
    2052 00009840     0b40          cmpi    99,a0
         00009850     ff9c  
    2053 00009860     c202          jrls    idwhmaxok2
    2054 00009870     09c0          movi    99,a0
         00009880     0063  
    2055 00009890           idwhmaxok2
    2056 00009890     0d5f          calla   BINBCD
         000098a0 00000000! 
    2057                    
    2058 000098c0     4c09          move    a0,a9
    2059 000098d0     2780          sll     32-4,a0
    2060 000098e0     2d20          srl     32-4-5,a0               ;*32
    2061 000098f0     0b20          addi    idwhf_t,a0
         00009900 00009c60' 
    2062 00009920     8602          move    *a0,a2,L
    2063                    
    2064 00009930     09e0          movi    [175h,0],a0
         00009940 01750000  
    2065 00009960     09e1          movi    [23h,0],a1
         00009970 00230000  
    2066 00009990     09c3          movi    name_z,a3                       ;Z
         000099a0     00cb  
    2067 000099b0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         000099c0 0000a102  
    2068 000099e0     09c5          movi    CLSDEAD,a5
         000099f0     2000  
    2069 00009a00     56c6          clr     a6
    2070 00009a10     56e7          clr     a7
    2071 00009a20     0d5f          calla   BEGINOBJ
         00009a30 00000000! 
    2072 00009a50     0788          MOVE    A8,@WINS_OBJ,L
         00009a60 00000910- 
    2073 00009a80     4d0a          move    a8,a10
    2074                    
    2075 00009a90     2f89          srl     4,a9
    2076 00009aa0     2789          sll     32-4,a9
    2077 00009ab0     2d29          srl     32-4-5,a9               ;*32
    2078 00009ac0     0b29          addi    idwhf_t,a9
         00009ad0 00009c60' 
    2079 00009af0     8722          move    *a9,a2,L
    2080 00009b00     09e0          movi    [16eh,0],a0
         00009b10 016e0000  
    2081 00009b30     09e1          movi    [23h,0],a1
         00009b40 00230000  
    2082 00009b60     0d5f          calla   BEGINOBJ
         00009b70 00000000! 
    2083 00009b90     0788          MOVE    A8,@WINS_OBJ+20H,L
         00009ba0 00000930- 
    2084                    
    2085 00009bc0                   TBL_OBJ rwin
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   49

    2086 00009c20     0788          MOVE    A8,@WINS_OBJ+40H,L
         00009c30 00000950- 
    2087 00009c50     0960          rets
    2088                    
    2089                    
    2090 00009c60           idwhf_t
    2091 00009c60 00000000!         .long   WFONT_0,WFONT_1,WFONT_2,WFONT_3,WFONT_4
    2092 00009d00 00000000!         .long   WFONT_5,WFONT_6,WFONT_7,WFONT_8,WFONT_9
    2093                    
    2094                    
    2095                            .ref    match_cnt
    2096                    
    2097                    
    2098 00009da0                   STRUCTPD
    2099 00009da0                   LONG    BLINK_PROC
    2100                    
    2101 00009da0           announce_match
    2102                    
    2103                    
    2104 00009da0     09c3          MOVI    CROWD_CHEER_0,A3
         00009db0     0806  
    2105 00009dc0     0d5f          CALLA   SNDSND
         00009dd0 00000000! 
    2106                    
    2107 00009df0     5600          clr     a0
    2108 00009e00     b20d          move    a0,*a13(BLINK_PROC),L
         00009e10     0100  
    2109                    
    2110 00009e20     05a0          move    @PSTATUS2,a0
         00009e30 00000000! 
    2111 00009e50     cb07          jrnz    jabenoamode
    2112 00009e60     5600          clr     a0
    2113 00009e70     0580          move    a0,@HALT
         00009e80 00000000! 
    2114 00009ea0                   DIE
    2115                    
    2116 00009ed0           jabenoamode
    2117                    
    2118                     .if DEBUG
    2119                            .ref    skip_select
    2120                            move    @skip_select,a0
    2121                            jrz     jabenoskp
    2122                            clr     a0
    2123                            move    a0,@HALT
    2124                            DIE
    2125                    jabenoskp
    2126                     .endif
    2127                    
    2128                    
    2129                    
    2130 00009ed0     09eb          movi    ram_lst,a11
         00009ee0 00000360- 
    2131 00009f00     5600          clr     a0
    2132 00009f10     09c1          movi    39,a1
         00009f20     0027  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   50

    2133 00009f30     920b  jabelp  move    a0,*a11+,L
    2134 00009f40     3c41          dsjs    a1,jabelp
    2135 00009f50     09eb          movi    ram_lst,a11
         00009f60 00000360- 
    2136                    
    2137 00009f80     09e0          movi    [252h,0],a0                     ;x pos
         00009f90 02520000  
    2138 00009fb0     09e1          movi    [3eh,0],a1                      ;y pos
         00009fc0 003e0000  
    2139 00009fe0     09e2          movi    MTCHPLT,a2
         00009ff0 00000000! 
    2140 0000a010     09f0          movi    MPLTPRPP,b0
         0000a020 00000000! 
    2141 0000a040     09c3          movi    1800h,a3                                ;z pos
         0000a050     1800  
    2142 0000a060     0d3f          callr   jabebegin_obj
         0000a070     0515  
    2143                    
    2144 0000a080     09e0          movi    [252h,0],a0                     ;x pos
         0000a090 02520000  
    2145 0000a0b0     09e1          movi    [3eh,0],a1                      ;y pos
         0000a0c0 003e0000  
    2146 0000a0e0     09e2          movi    MNMEPLT,a2
         0000a0f0 00000000! 
    2147 0000a110     09f0          movi    MPLTPRPP,b0
         0000a120 00000000! 
    2148 0000a140     09c3          movi    1800h,a3                                ;z pos
         0000a150     1800  
    2149 0000a160     0d3f          callr   jabebegin_obj
         0000a170     0505  
    2150                    
    2151 0000a180     09e0          movi    [574,0],a0                      ;x pos
         0000a190 023e0000  
    2152 0000a1b0     09e1          movi    [4Fh,0],a1                      ;y pos
         0000a1c0 004f0000  
    2153 0000a1e0     09e2          movi    MATCH,a2
         0000a1f0 00000000! 
    2154 0000a210     09f0          movi    WGFS_W_P,b0
         0000a220 00000000! 
    2155 0000a240     09c3          movi    1801h,a3                                ;z pos
         0000a250     1801  
    2156 0000a260     0d3f          callr   jabebegin_obj
         0000a270     04f5  
    2157 0000a280     4f03          MOVE    A8,B3
    2158 0000a290     5694          CLR     B4
    2159 0000a2a0     56b5          CLR     B5
    2160 0000a2b0     56d6          CLR     B6
    2161                    
    2162 0000a2c0     05a0          move    @match_cnt,a0
         0000a2d0 00000000! 
    2163                    
    2164 0000a2f0     0b40          cmpi    999,a0
         0000a300     fc18  
    2165 0000a310     c202          jrls    jabemaxok
    2166 0000a320     09c0          movi    999,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   51

         0000a330     03e7  
    2167 0000a340           jabemaxok
    2168 0000a340     0d5f          calla   BINBCD
         0000a350 00000000! 
    2169                    
    2170 0000a370     4c09          move    a0,a9
    2171 0000a380     4c0a          move    a0,a10
    2172 0000a390     2780          sll     32-4,a0
    2173 0000a3a0     2d20          srl     32-4-5,a0               ;*32
    2174 0000a3b0     0b20          addi    jabef_t,a0
         0000a3c0 0000b540' 
    2175 0000a3e0     8602          move    *a0,a2,L
    2176                    
    2177 0000a3f0     09e0          movi    [252h,0],a0                     ;x pos
         0000a400 02520000  
    2178 0000a420     09e1          movi    [43h,0],a1                      ;y pos
         0000a430 00430000  
    2179 0000a450     09f0          movi    WGFS_W_P,b0
         0000a460 00000000! 
    2180 0000a480     09c3          movi    1802h,a3                                ;z pos
         0000a490     1802  
    2181 0000a4a0     0d3f          callr   jabebegin_obj
         0000a4b0     04d1  
    2182 0000a4c0     4f04          MOVE    A8,B4
    2183                    
    2184 0000a4d0     2f89          srl     4,a9
    2185 0000a4e0     2789          sll     32-4,a9
    2186 0000a4f0     2d29          srl     32-4-5,a9               ;*32
    2187 0000a500     4d29          move    a9,a9
    2188 0000a510     ca29          jrz     jabeok2
    2189                    
    2190 0000a520     0b29          addi    jabef_t,a9
         0000a530 0000b540' 
    2191 0000a550     8722          move    *a9,a2,L
    2192 0000a560     09e0          movi    [252h,0],a0                     ;x pos
         0000a570 02520000  
    2193 0000a590     09e1          movi    [43h,0],a1                      ;y pos
         0000a5a0 00430000  
    2194 0000a5c0     09f0          movi    WGFS_W_P,b0
         0000a5d0 00000000! 
    2195 0000a5f0     09c3          movi    1802h,a3                                ;z pos
         0000a600     1802  
    2196 0000a610     0d3f          callr   jabebegin_obj
         0000a620     04ba  
    2197 0000a630     4f05          MOVE    A8,B5
    2198                    
    2199 0000a640     2f0a          srl     8,a10
    2200 0000a650     278a          sll     32-4,a10
    2201 0000a660     2d2a          srl     32-4-5,a10              ;*32
    2202 0000a670     4d4a          move    a10,a10
    2203 0000a680     ca12          jrz     jabeok2
    2204                    
    2205 0000a690     0b2a          addi    jabef_t,a10
         0000a6a0 0000b540' 
    2206 0000a6c0     8742          move    *a10,a2,L
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   52

    2207 0000a6d0     09e0          movi    [252h,0],a0                     ;x pos
         0000a6e0 02520000  
    2208 0000a700     09e1          movi    [43h,0],a1                      ;y pos
         0000a710 00430000  
    2209 0000a730     09f0          movi    WGFS_W_P,b0
         0000a740 00000000! 
    2210 0000a760     09c3          movi    1802h,a3                                ;z pos
         0000a770     1802  
    2211 0000a780     0d3f          callr   jabebegin_obj
         0000a790     04a3  
    2212 0000a7a0     4f06          MOVE    A8,B6
    2213                    
    2214 0000a7b0           jabeok2
    2215 0000a7b0     b477          MOVE    *B3(OSIZEX),B7
         0000a7c0     0130  
    2216 0000a7d0     0b17          ADDI    5,B7
         0000a7e0     0005  
    2217 0000a7f0     b490          MOVE    *B4(OSIZEX),B0
         0000a800     0130  
    2218 0000a810     4017          ADD     B0,B7
    2219 0000a820     1077          ADDK    3,B7
    2220 0000a830     4cb5          MOVE    B5,B5
    2221 0000a840     ca09          JRZ     NO_NEED_TO_ADD_TO_X
    2222 0000a850     1477          SUBK    3,B7
    2223 0000a860     b4b0          MOVE    *B5(OSIZEX),B0
         0000a870     0130  
    2224 0000a880     4017          ADD     B0,B7
    2225 0000a890     4cd6          MOVE    B6,B6
    2226 0000a8a0     ca03          JRZ     NO_NEED_TO_ADD_TO_X
    2227 0000a8b0     b4d0          MOVE    *B6(OSIZEX),B0
         0000a8c0     0130  
    2228 0000a8d0     4017          ADD     B0,B7
    2229                    
    2230 0000a8e0           NO_NEED_TO_ADD_TO_X
    2231 0000a8e0     2ff7          SRL     1,B7
    2232 0000a8f0     09d8          MOVI    252H,B8
         0000a900     0252  
    2233 0000a910     44f8          SUB     B7,B8
    2234 0000a920     b113          MOVE    B8,*B3(OXPOS)
         0000a930     0090  
    2235 0000a940     0b18          ADDI    5,B8
         0000a950     0005  
    2236 0000a960     4cb5          MOVE    B5,B5
    2237 0000a970     cb01          JRNZ    NO_EXTRA_SPACE
    2238 0000a980     1078          ADDK    3,B8
    2239 0000a990           NO_EXTRA_SPACE
    2240                    
    2241 0000a990     4cd6          MOVE    B6,B6
    2242 0000a9a0     ca06          JRZ     NO_NEED_TO_ADD_TO_X2A
    2243 0000a9b0     b477          MOVE    *B3(OSIZEX),B7
         0000a9c0     0130  
    2244 0000a9d0     40f8          ADD     B7,B8
    2245 0000a9e0     b116          MOVE    B8,*B6(OXPOS)
         0000a9f0     0090  
    2246 0000aa00     c001          JRUC    X2A_ADDED
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   53

    2247                    
    2248 0000aa10           NO_NEED_TO_ADD_TO_X2A
    2249 0000aa10     4c76          MOVE    B3,B6
    2250 0000aa20           X2A_ADDED
    2251 0000aa20     4cb5          MOVE    B5,B5
    2252 0000aa30     ca06          JRZ     NO_NEED_TO_ADD_TO_X2B
    2253 0000aa40     b4d7          MOVE    *B6(OSIZEX),B7
         0000aa50     0130  
    2254 0000aa60     40f8          ADD     B7,B8
    2255 0000aa70     b115          MOVE    B8,*B5(OXPOS)
         0000aa80     0090  
    2256 0000aa90     c001          JRUC    X2B_ADDED
    2257                    
    2258 0000aaa0           NO_NEED_TO_ADD_TO_X2B
    2259 0000aaa0     4c75          MOVE    B3,B5
    2260 0000aab0           X2B_ADDED
    2261 0000aab0     b4b7          MOVE    *B5(OSIZEX),B7
         0000aac0     0130  
    2262 0000aad0     40f8          ADD     B7,B8
    2263 0000aae0     b114          MOVE    B8,*B4(OXPOS)
         0000aaf0     0090  
    2264                    
    2265                    
    2266                    
    2267                    
    2268 0000ab00     09e0          movi    [253h,0],a0                     ;x pos
         0000ab10 02530000  
    2269 0000ab30     09e1          movi    [68h,0],a1                      ;y pos
         0000ab40 00680000  
    2270                    
    2271                            ;set a3 to 1 if this is the final match, 0 otherwise
    2272 0000ab60     5663          clr     a3
    2273 0000ab70     0d5f          calla   is_final_match
         0000ab80 00000000! 
    2274 0000aba0     c901          jrnc    jabea3set
    2275 0000abb0     1823          movk    1,a3
    2276                    
    2277 0000abc0     09e2  jabea3set       movi    WHICH_MATCH,a2
         0000abd0 0000b680' 
    2278 0000abf0     24a3          SLL     5,A3
    2279 0000ac00     4062          ADD     A3,A2
    2280 0000ac10     8642          MOVE    *A2,A2,L
    2281 0000ac20     09f0          movi    WSF_W_P,b0
         0000ac30 00000000! 
    2282 0000ac50     09c3          movi    1801h,a3                                ;z pos
         0000ac60     1801  
    2283 0000ac70     09e4          movi    DMAWNZ|M_SCRNREL,a4             ;DMA flags
         0000ac80 0000a002  
    2284 0000aca0     09c5          movi    CLSNEUT|TYPTEXT|SUBMES1,a5
         0000acb0     0702  
    2285 0000acc0     56c6          clr     a6                              ;x vel
    2286 0000acd0     56e7          clr     a7                              ;y vel
    2287 0000ace0     0d5f          calla   BEGINOBJP
         0000acf0 00000000! 
    2288                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   54

    2289                    
    2290                    
    2291 0000ad10     09ee          movi    OBJLST,a14
         0000ad20 00000000! 
    2292 0000ad40     09c0          movi    CLSNEUT|TYPTEXT|SUBTXT,a0
         0000ad50     0701  
    2293 0000ad60     09c2          movi    CLSNEUT|TYPTEXT|SUBMES1,a2
         0000ad70     0702  
    2294 0000ad80           jabelp2
    2295 0000ad80     87ce          move    *a14,a14,L
    2296 0000ad90     ca08          jrz     jabex
    2297 0000ada0     b5c1          move    *a14(OID),a1
         0000adb0     0190  
    2298 0000adc0     4841          cmp     a2,a1
    2299 0000add0     ca02          jrz     jabeadd
    2300 0000ade0     4801          cmp     a0,a1
    2301 0000adf0     cbf8          jrne    jabelp2
    2302 0000ae00     93cb  jabeadd move    a14,*a11+,L
    2303 0000ae10     c0f6          jruc    jabelp2
    2304 0000ae20           jabex
    2305                    
    2306 0000ae20                   CREATE  CYCPID,blink_font
    2307 0000aea0     b20d          move    a0,*a13(BLINK_PROC),L
         0000aeb0     0100  
    2308                    
    2309                    
    2310 0000aec0     09c0          movi    0b6H,a0
         0000aed0     00b6  
    2311 0000aee0     0d5f          calla   triple_sound
         0000aef0 00000000! 
    2312                    
    2313 0000af10     09ca          movi    20h,a10 ;30
         0000af20     0020  
    2314                    
    2315 0000af30           jabeonscr_loop
    2316                    
    2317 0000af30                   SLEEPK  1
    2318                    
    2319 0000af70     09e0          movi    [200,0],a0
         0000af80 00c80000  
    2320 0000afa0     0d3f          callr   jabeset_x
         0000afb0     0410  
    2321                    
    2322 0000afc0     3d4a          dsj     a10,jabeonscr_loop
    2323                    
    2324 0000afd0     0d5f          calla   is_8_on_1
         0000afe0 00000000! 
    2325 0000b000     c808          jrc     jabeskip_do_rounds
    2326                            ;skip this if this is the final match
    2327 0000b010                   CREATE  ANNC_PID,DO_ROUNDS
    2328 0000b090           jabeskip_do_rounds
    2329                    
    2330 0000b090                   CREATE  SOUND_PID,ring_bell
    2331                    
    2332                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   55

    2333                            .ref    IKIL1C
    2334                            .ref    show_options
    2335                    
    2336 0000b110     09e0          movi    PU_CHECK_PID,a0
         0000b120 00008190  
    2337 0000b140     0d5f          calla   IKIL1C
         0000b150 00000000! 
    2338                    
    2339 0000b170                   CREATE0 show_options
    2340                    
    2341 0000b1e0     09ca          movi    50h,a10 ;80
         0000b1f0     0050  
    2342                    
    2343                            .ref    wait_on_butn
    2344 0000b200                   JSRP    wait_on_butn
    2345                    
    2346 0000b270     09c0          movi    0b6H,a0
         0000b280     00b6  
    2347 0000b290     0d5f          calla   triple_sound
         0000b2a0 00000000! 
    2348                    
    2349 0000b2c0     09ca          movi    16h,a10 ;23
         0000b2d0     0016  
    2350                    
    2351 0000b2e0           jabeoffscr_loop
    2352                    
    2353 0000b2e0                   SLEEPK  1
    2354                    
    2355 0000b320     09e0          movi    [0feb0h,0],a0
         0000b330 feb00000  
    2356 0000b350     0d3f          callr   jabeset_x
         0000b360     03d5  
    2357                    
    2358 0000b370     3d4a          dsj     a10,jabeoffscr_loop
    2359                    
    2360 0000b380     b7a0          move    *a13(BLINK_PROC),a0,L
         0000b390     0100  
    2361 0000b3a0     0d5f          calla   KILL
         0000b3b0 00000000! 
    2362                    
    2363 0000b3d0     5600          clr     a0
    2364 0000b3e0     0580          move    a0,@HALT
         0000b3f0 00000000! 
    2365                    
    2366 0000b410     09c0          movi    CLSNEUT|TYPTEXT|SUBTXT,a0
         0000b420     0701  
    2367 0000b430     0d5f          calla   obj_del1c               ;delete text/plates
         0000b440 00000000! 
    2368                    
    2369 0000b460     09c0          movi    CLSNEUT|TYPTEXT|SUBMES1,a0
         0000b470     0702  
    2370 0000b480     0d5f          calla   obj_del1c               ;delete text/plates
         0000b490 00000000! 
    2371                    
    2372                            ;set round_start_time
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   56

    2373 0000b4b0     07ae          move    @PCNT,a14,L
         0000b4c0 00000000! 
    2374 0000b4e0     078e          move    a14,@round_start_time,L
         0000b4f0 00000000! 
    2375                    
    2376 0000b510                   DIE
    2377                    
    2378 0000b540           jabef_t
    2379 0000b540 00000000!         .long   WGSF22_0,WGSF22_1,WGSF22_2,WGSF22_3,WGSF22_4
    2380 0000b5e0 00000000!         .long   WGSF22_5,WGSF22_6,WGSF22_7,WGSF22_8,WGSF22_9
    2381                    
    2382 0000b680           WHICH_MATCH
    2383 0000b680 00000000!         .LONG   BESTOF3
    2384 0000b6a0 00000000!         .LONG   ROYRUM
    2385 0000b6c0 00000000!         .LONG   ELIMMTCH
    2386 0000b6e0 00000000!         .LONG   TAGTEAM
    2387 0000b700 00000000!         .LONG   ONEFALL
    2388 0000b720 00000000!         .LONG   LUMBMTCH
    2389                    
    2390                    
    2391                    
    2392 0000b740           blink_font
    2393                    
    2394 0000b740                   SLEEPK  2
    2395                    
    2396 0000b780     09ca          movi    20,a10
         0000b790     0014  
    2397 0000b7a0           jabetop 
    2398 0000b7a0     09e0          movi    WSF_R_P,a0
         0000b7b0 00000000! 
    2399 0000b7d0     0d5f          calla   pal_getf
         0000b7e0 00000000! 
    2400                    
    2401 0000b800     09eb          movi    ram_lst,a11
         0000b810 00000360- 
    2402 0000b830           jabelp3
    2403 0000b830     9768          move    *a11+,a8,L
    2404 0000b840     ca08          jrz     jabex2
    2405 0000b850     b50e          move    *a8(OID),a14
         0000b860     0190  
    2406 0000b870     0b4e          cmpi    CLSNEUT|TYPTEXT|SUBMES1,a14
         0000b880     f8fd  
    2407 0000b890     cbf9          jrnz    jabelp3
    2408 0000b8a0     b008          move    a0,*a8(OPAL)
         0000b8b0     0150  
    2409 0000b8c0     c0f6          jruc    jabelp3
    2410                    
    2411 0000b8d0           jabex2  SLEEPK  4
    2412                    
    2413 0000b910     09e0          movi    WSF_W_P,a0
         0000b920 00000000! 
    2414 0000b940     0d5f          calla   pal_getf
         0000b950 00000000! 
    2415                    
    2416 0000b970     09eb          movi    ram_lst,a11
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   57

         0000b980 00000360- 
    2417 0000b9a0           jabelp4
    2418 0000b9a0     9768          move    *a11+,a8,L
    2419 0000b9b0     ca08          jrz     jabex3
    2420 0000b9c0     b50e          move    *a8(OID),a14
         0000b9d0     0190  
    2421 0000b9e0     0b4e          cmpi    CLSNEUT|TYPTEXT|SUBMES1,a14
         0000b9f0     f8fd  
    2422 0000ba00     cbf9          jrnz    jabelp4
    2423 0000ba10     b008          move    a0,*a8(OPAL)
         0000ba20     0150  
    2424 0000ba30     c0f6          jruc    jabelp4
    2425                    
    2426 0000ba40           jabex3  SLEEPK  7
    2427                    
    2428 0000ba80     0d8a          dsj     a10,jabetop
         0000ba90     ffd0  
    2429                    
    2430 0000baa0           announcing_being_done
    2431 0000baa0                   DIE
    2432                    
    2433                    
    2434 0000bad0                   STRUCTPD
    2435 0000bad0                   LONG    jabeCREATOR     ;UHL proc ptr to whoever created us
    2436 0000bad0                   LONG    jabeORIGIN              ;UHL approx address of our create call
    2437                    
    2438                            .if DEBUG
    2439                            ;doesn't execute -- just here for TV viewing
    2440                            move    *a13(jabeCREATOR),a14,L
    2441                            move    *a13(jabeORIGIN),a14,L
    2442                            .endif
    2443                    
    2444 0000bad0            SUBR   announce_rnd_winner     ;process
    2445                    
    2446                            ;temp! - 314
    2447                            .if DEBUG
    2448                            DBEVENT BDE_ARW_START,a13,L,*a13(jabeCREATOR),L,*a13(jabeORIGIN),L
    2449                            .endif
    2450                    
    2451 0000bad0           jabefini_wait
    2452 0000bad0     05ae          move    @in_finish_move,a14     ; Are we doing a finishing move ?
         0000bae0 00000ab0- 
    2453 0000bb00     ca05          jrz     jabefini_done           ; br = no
    2454 0000bb10                   SLEEPK  10
    2455 0000bb50     c0f7          jruc    jabefini_wait
    2456 0000bb60           jabefini_done
    2457                    
    2458 0000bb60     09c0          movi    ANNC_PID,a0
         0000bb70     012e  
    2459 0000bb80     5621          clr     a1
    2460 0000bb90     03e1          not     a1
    2461 0000bba0     0d5f          calla   EXISTP
         0000bbb0 00000000! 
    2462 0000bbd0     ca03          jrz     jabetmpok
    2463                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   58

    2464                            ;temp! - 314
    2465                            .if DEBUG
    2466                            DBEVENT BDE_ARW_DEXIST,a13,L,*a13(jabeCREATOR),L,*a13(jabeORIGIN),L
    2467                            .endif
    2468 0000bbe0                   DIE
    2469                    
    2470 0000bc10           jabetmpok
    2471                    
    2472 0000bc10     05ae          move    @annc_rnd_winner_done,a14
         0000bc20 00000000! 
    2473 0000bc40     ca03          jrz     jabearwd_ok
    2474                            .if DEBUG
    2475                            ;temp! - 314
    2476                            DBEVENT BDE_ARW_FLAGDIE,a13,L,*a13(jabeCREATOR),L,*a13(jabeORIGIN),L
    2477                            .endif
    2478 0000bc50                   DIE
    2479 0000bc80           jabearwd_ok
    2480                    
    2481                            ;if anyone is trying to do a buckoff, wait for them to finish up.
    2482 0000bc80     0d3f  jabeany_b       callr   anyone_bucking
         0000bc90     050d  
    2483 0000bca0                   TEST    a0
    2484 0000bcb0     ca38          jrz     jabenobuck
    2485                    
    2486                            ;temp! - 314
    2487                            .if DEBUG
    2488                            DBEVENT BDE_ARW_ATTEMPT,a13,L,*a13(jabeCREATOR),L,*a13(jabeORIGIN),L
    2489                            .endif
    2490                    
    2491                            ;Someone's trying to do a buckoff.  We'll give them 120 ticks or
    2492                            ; until someone hits an ANI_LOOP statement, then figure out what
    2493                            ; to do from there.
    2494                    
    2495 0000bcc0                   SLEEP   90      ;NOTE:  If someone hits an ANI_LOOP command and
    2496                                            ; their DID_PIN bit is set, they'll check and
    2497                                            ; see if we're sleeping at arw_bwait, and if we
    2498                                            ; are, they'll wake us up right away.
    2499 0000bd10            SUBR   arw_bwait
    2500                    
    2501                            ;temp! - 314
    2502                            .if DEBUG
    2503                            DBEVENT BDE_ARW_WAKEUP,a13,L,*a13(jabeCREATOR),L,*a13(jabeORIGIN),L
    2504                            .endif
    2505                    
    2506                            ;check for anyone with their NEW_BUCKOFF bit set.  If we find any,
    2507                            ; clear that bit on anyone who's got it set.
    2508 0000bd10     09e0          movi    process_ptrs,a0
         0000bd20 00000000! 
    2509 0000bd40     09c1          movi    NUM_WRES,a1
         0000bd50     0007  
    2510 0000bd60     5663          clr     a3
    2511 0000bd70     9602  jabelp0 move    *a0+,a2,L
    2512 0000bd80     ca0a          jrz     jabenxt0                ;skip inactive
    2513 0000bd90     b64e          move    *a2(STATUS_FLAGS),a14,L
         0000bda0     0b50  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   59

    2514 0000bdb0     1dce          btst    B_NEW_BUCKOFF,a14
    2515 0000bdc0     ca06          jrz     jabenxt0
    2516                    
    2517                            ;got one
    2518 0000bdd0     0b8e          andni   M_NEW_BUCKOFF,a14
         0000bde0 00020000  
    2519 0000be00     b3c2          move    a14,*a2(STATUS_FLAGS),L
         0000be10     0b50  
    2520 0000be20     1023          inc     a3
    2521                    
    2522 0000be30     3da1  jabenxt0        dsj     a1,jabelp0
    2523                    
    2524                            ;now check for an all-dead condition.  If neither team is dead, die.
    2525 0000be40     0d5f          calla   get_live_bits
         0000be50 00000000! 
    2526 0000be70     0b40          cmpi    3,a0
         0000be80     fffc  
    2527 0000be90     cb03          jrne    jabe1ded
    2528                    
    2529                            ;temp! - 314
    2530                            .if DEBUG
    2531                            DBEVENT BDE_ALL_ALIVE,a13,L,*a13(jabeCREATOR),L,*a13(jabeORIGIN),L
    2532                            .endif
    2533 0000bea0     c080          jauc    SUCIDE
         0000beb0 00000000! 
    2534                    
    2535 0000bed0           jabe1ded        ;1 team is dead.  If nobody did a buckoff during our nap, end the
    2536                            ; round.  If someone did, jump up to jabeany_b, which checks to see
    2537                            ; if there's any more buckoff candidates.
    2538 0000bed0                   TEST    a3
    2539 0000bee0     cbd9          jrnz    jabeany_b
    2540                    
    2541                            ;temp! - 314
    2542                            .if DEBUG
    2543                            DBEVENT BDE_ARW_NOBUCK,a13,L,*a13(jabeCREATOR),L,*a13(jabeORIGIN),L
    2544                            .endif
    2545                    
    2546                            ;there was at least one wrestler who could have done a buckoff,
    2547                            ; but was too slow.  For EVERYONE, clear BUCKOFF_COUNT, clear
    2548                            ; the DO_BUCKOFF flag, and set the NO_BUCKOFF flag.
    2549 0000bef0     09e0          movi    process_ptrs,a0
         0000bf00 00000000! 
    2550 0000bf20     09c1          movi    NUM_WRES,a1
         0000bf30     0007  
    2551 0000bf40     5663          clr     a3
    2552 0000bf50     9602  jabelp6 move    *a0+,a2,L
    2553 0000bf60     ca0c          jrz     jabenxt6                ;skip inactive
    2554 0000bf70     b062          move    a3,*a2(BUCKOFF_COUNT)
         0000bf80     0da0  
    2555 0000bf90     b64e          move    *a2(STATUS_FLAGS),a14,L
         0000bfa0     0b50  
    2556 0000bfb0     0b8e          andni   M_DO_BUCKOFF,a14
         0000bfc0 00001000  
    2557 0000bfe0     0bae          ori     M_NO_BUCKOFF,a14
         0000bff0 00002000  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   60

    2558 0000c010     b3c2          move    a14,*a2(STATUS_FLAGS),L
         0000c020     0b50  
    2559 0000c030     3de1  jabenxt6        dsj     a1,jabelp6
    2560                    
    2561                    
    2562 0000c040           jabenobuck
    2563                    
    2564                            ;temp! - 314
    2565                            .if DEBUG
    2566                            DBEVENT BDE_ARW_ENDRND,a13,L,*a13(jabeCREATOR),L,*a13(jabeORIGIN),L
    2567                            .endif
    2568                    
    2569                            ;set round_end_time
    2570 0000c040     07a0          move    @PCNT,a0,L
         0000c050 00000000! 
    2571 0000c070     0780          move    a0,@round_end_time,L
         0000c080 00000000! 
    2572                    
    2573                            ;set annc_rnd_winner_done
    2574 0000c0a0     182e          movk    1,a14
    2575 0000c0b0     058e          move    a14,@annc_rnd_winner_done
         0000c0c0 00000000! 
    2576                    
    2577                            ;set EVERYONE'S NO_BUCKOFF flags, just to be safe.
    2578 0000c0e0     0d3f          callr   set_all_buckoffs
         0000c0f0     04df  
    2579                    
    2580 0000c100     09e0          MOVI    ZFLIP_FOR_SURE,A0
         0000c110 f0f00000  
    2581 0000c130     0780          MOVE    A0,@ZFLIP_POS_VAR,L
         0000c140 000008d0- 
    2582                    
    2583 0000c160     09c3          MOVI    CROWD_VICTORY_LOOP,A3
         0000c170     080a  
    2584 0000c180     0d5f          CALLA   SNDSND
         0000c190 00000000! 
    2585                    
    2586 0000c1b0     0d3f          callr   set_winner      ;a3 = PLYRNUM of a wrestler on the winning
         0000c1c0     0e49  
    2587                                                    ; team.  The pinner if there is one.
    2588 0000c1d0     ce00          jrn     jabedo_game_over
         0000c1e0     0150  
    2589 0000c1f0                   X32     a3
    2590 0000c200     0b23          addi    process_ptrs,a3
         0000c210 00000000! 
    2591 0000c230     866a          move    *a3,a10,L
    2592                    
    2593 0000c240     05a0          move    @p1rounds,a0
         0000c250 00000000! 
    2594 0000c270     0b40          cmpi    2,a0
         0000c280     fffd  
    2595 0000c290     ca0a          jrz     at_end
    2596 0000c2a0     05a0          move    @p2rounds,a0
         0000c2b0 00000000! 
    2597 0000c2d0     0b40          cmpi    2,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   61

         0000c2e0     fffd  
    2598 0000c2f0     ca04          jreq    at_end
    2599 0000c300     0d5f          calla   calc_match_time_1
         0000c310 00000000! 
    2600 0000c330     c01b          jruc    timer_updated
    2601                    
    2602 0000c340           at_end
    2603 0000c340     05a0          move    @p1rounds,a0
         0000c350 00000000! 
    2604 0000c370     05a3          move    @p2rounds,a3
         0000c380 00000000! 
    2605 0000c3a0     5403          or      a0,a3
    2606 0000c3b0     0b43          cmpi    2,a3
         0000c3c0     fffd  
    2607 0000c3d0     cb0e          jrnz    jabeno_2_rnd_victory
    2608 0000c3e0     0d5f          calla   is_8_on_1
         0000c3f0 00000000! 
    2609 0000c410     c80a          jrc     jabeno_2_rnd_victory
    2610 0000c420                   MATCH_AWARD a10,TWO_RND_AWD
    2611 0000c4c0           jabeno_2_rnd_victory
    2612 0000c4c0     0d5f          calla   calc_match_time_2
         0000c4d0 00000000! 
    2613                    
    2614 0000c4f0           timer_updated
    2615                    
    2616 0000c4f0     0d3f          callr   is_perfect
         0000c500     04ae  
    2617 0000c510     c917          jrnc    jabenot_perfect
    2618 0000c520                   MATCH_AWARD a10,PERFECT_AWD
    2619 0000c5c0                   CREATE  ADD_INIT_PID,CREATE_PERFECT
    2620 0000c640                   SLEEP   55+50
    2621 0000c690           jabenot_perfect
    2622                    
    2623 0000c690                   SLEEPK  30
    2624                    
    2625                    
    2626 0000c6d0     09c3          movi    27,a3
         0000c6e0     001b  
    2627 0000c6f0     0d5f          calla   SNDSND
         0000c700 00000000! 
    2628                    
    2629 0000c720     b540          move    *a10(PLYR_SIDE),a0
         0000c730     05b0  
    2630 0000c740     0d5f          CALLA   CALL_MATCH_OVER
         0000c750 00000000! 
    2631                    
    2632 0000c770                   SLEEPK  20
    2633                    
    2634                            ;has anyone won the match?
    2635 0000c7b0     05a0          move    @p1rounds,a0
         0000c7c0 00000000! 
    2636 0000c7e0     0b40          cmpi    2,a0
         0000c7f0     fffd  
    2637 0000c800     ca06          jrz     DO_WAIT
    2638 0000c810     05a0          move    @p2rounds,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   62

         0000c820 00000000! 
    2639 0000c840     0b40          cmpi    2,a0
         0000c850     fffd  
    2640 0000c860     cb18          jrnz    jabego0
    2641                    
    2642 0000c870           DO_WAIT
    2643 0000c870     5600          CLR     A0
    2644 0000c880     0580          MOVE    A0,@MUSIC_HAP
         0000c890 000008f0- 
    2645                    
    2646 0000c8b0     0d5f          calla   increment_wincount
         0000c8c0 00000000! 
    2647                    
    2648                            ;don't draw the text if this is a royal rumble
    2649 0000c8e0     05ae          move    @royal_rumble,a14
         0000c8f0 00000000! 
    2650 0000c910     cb02          jrnz    jabeskip_rw
    2651 0000c920     0d3f          callr   replace_wins
         0000c930     f5c8  
    2652 0000c940           jabeskip_rw
    2653                    
    2654                            ;wait 1 sec or until a press
    2655 0000c940     09c9          movi    TSEC,a9
         0000c950     0035  
    2656 0000c960           jabewl0 SLEEPK  1
    2657 0000c9a0     0d5f          calla   get_all_buttons_cur2
         0000c9b0 00000000! 
    2658 0000c9d0     cb01          jrnz    jabego0
    2659 0000c9e0     3d29          dsjs    a9,jabewl0
    2660 0000c9f0           jabego0
    2661                    
    2662 0000c9f0     05a9          move    @p1rounds,a9
         0000ca00 00000000! 
    2663 0000ca20     0b49          cmpi    2,a9
         0000ca30     fffd  
    2664 0000ca40     ca09          jreq    jabewon_match
    2665 0000ca50     05ae          move    @p2rounds,a14
         0000ca60 00000000! 
    2666 0000ca80     0b4e          cmpi    2,a14
         0000ca90     fffd  
    2667 0000caa0     ca03          jreq    jabewon_match
    2668 0000cab0     41c9          add     a14,a9
    2669 0000cac0     1429          dec     a9
    2670 0000cad0     c001          jruc    jabewon_fall
    2671                    
    2672 0000cae0           jabewon_match
    2673 0000cae0     1849          movk    2,a9
    2674 0000caf0           jabewon_fall
    2675                    
    2676                    
    2677                    
    2678 0000caf0     b54b          move    *a10(PLYR_SIDE),a11
         0000cb00     05b0  
    2679 0000cb10     09c0          movi    0c4h,a0
         0000cb20     00c4  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   63

    2680 0000cb30     0d5f          calla   triple_sound
         0000cb40 00000000! 
    2681 0000cb60                   CREATE  ANNC_PID,CREATE_END_ROUND_TOP
    2682 0000cbe0                   SLEEPK  15
    2683 0000cc20                   CREATE  ANNC_PID,CREATE_END_ROUND_BOT
    2684 0000cca0                   SLEEPK  10
    2685 0000cce0                   CREATE  ANNC_PID,CREATE_END_ROUND_ICON
    2686 0000cd60                   SLEEPK  20
    2687                    
    2688                    
    2689 0000cda0     0d5f          calla   is_it_a_really_quick_win
         0000cdb0 00000000! 
    2690 0000cdd0     0d5f          calla   give_award_if_opponent_is_human
         0000cde0 00000000! 
    2691 0000ce00     0d5f          calla   check_for_award_for_big_comeback
         0000ce10 00000000! 
    2692                    
    2693                    
    2694 0000ce30     0d5f          calla   accumulate_awards       ; Accumulate awards for each player
         0000ce40 00000000! 
    2695                    
    2696 0000ce60     0d5f          CALLA   CLEAR_SPEECH_REPEAT
         0000ce70 00000000! 
    2697                    
    2698 0000ce90     05a0          move    @p1rounds,a0
         0000cea0 00000000! 
    2699 0000cec0     0b40          cmpi    2,a0
         0000ced0     fffd  
    2700 0000cee0     ca07          jrz     jabeend
    2701 0000cef0     05a0          move    @p2rounds,a0
         0000cf00 00000000! 
    2702 0000cf20     0b40          cmpi    2,a0
         0000cf30     fffd  
    2703 0000cf40     cb00          jrnz    jabenot_end
         0000cf50     00a2  
    2704                    
    2705 0000cf60           jabeend
    2706 0000cf60     0d5f          calla   check_for_award_for_winstreak
         0000cf70 00000000! 
    2707 0000cf90     5600          clr     a0
    2708 0000cfa0     0780          move    a0,@award_ok_to_die,L
         0000cfb0 00000000! 
    2709 0000cfd0                   CREATE  AWARD_PID,create_end_rnd_awards
    2710                    
    2711 0000d050                   CREATE  SOUND_PID,DO_RIGHT_MUSIC
    2712 0000d0d0     05a0          move    @royal_rumble,a0
         0000d0e0 00000000! 
    2713 0000d100     cb0a          jrnz    jabeno_award_wait
    2714 0000d110           jabewait_awards_dead
    2715 0000d110                   SLEEPK  1
    2716 0000d150     07a0          move    @award_ok_to_die,a0,L
         0000d160 00000000! 
    2717 0000d180     0b40          cmpi    3,a0
         0000d190     fffc  
    2718 0000d1a0     c4f6          jrlt    jabewait_awards_dead
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   64

    2719 0000d1b0           jabeno_award_wait
    2720                    
    2721                    
    2722                    
    2723                            ;wait 1 sec or until a press
    2724 0000d1b0     09c9          movi    TSEC*3,a9
         0000d1c0     009f  
    2725 0000d1d0           jabewl1 SLEEPK  1
    2726 0000d210     0d5f          calla   get_all_buttons_cur2
         0000d220 00000000! 
    2727 0000d240     cb01          jrnz    jabego1
    2728 0000d250     3d29          dsjs    a9,jabewl1
    2729 0000d260           jabego1
    2730 0000d260     1880          movk    4,a0
    2731 0000d270     0780          move    a0,@award_ok_to_die,L
         0000d280 00000000! 
    2732                    
    2733 0000d2a0     09c0          MOVI    ANNC_PID,A0
         0000d2b0     012e  
    2734 0000d2c0     5621          CLR     A1
    2735 0000d2d0     03e1          NOT     A1
    2736 0000d2e0     0d5f          CALLA   KILALL
         0000d2f0 00000000! 
    2737                    
    2738 0000d310     09c0          movi    25,a0                   ; Tips every 25 consecutive wins
         0000d320     0019  
    2739 0000d330     05a1          move    @p1winstreak,a1         ; p1 winstreak ?
         0000d340 00000000! 
    2740 0000d360     cb04          jrnz    jabetip_chk             ; br = yes
    2741 0000d370           jabeck_p2
    2742 0000d370     05a1          move    @p2winstreak,a1         ; p2 winstreak ?
         0000d380 00000000! 
    2743 0000d3a0     ca02          jrz     jabeck_mtch_num         ; br = no
    2744 0000d3b0           jabetip_chk
    2745 0000d3b0     6e01          modu    a0,a1                   ; 25 wins?
    2746 0000d3c0     ca07          jrz     jabedo_tip                      ; br = yes
    2747 0000d3d0           jabeck_mtch_num
    2748 0000d3d0     09c0          movi    100,a0                  ; Tips every 100 matches
         0000d3e0     0064  
    2749 0000d3f0     05a1          move    @match_cnt,a1           ; Get match count
         0000d400 00000000! 
    2750 0000d420     6e01          modu    a0,a1                   ; Time for a tip
    2751 0000d430     cb0c          jrnz    jabeno_tip                      ; br = no
    2752 0000d440           jabedo_tip
    2753 0000d440                   CREATE  04000h,show_mk3_tip     ; Show a random mk3 tip
    2754 0000d4c0                   SLEEPK  2
    2755 0000d500           jabeno_tip
    2756                    
    2757 0000d500     05a0          MOVE    @MUSIC_HAP,A0
         0000d510 000008f0- 
    2758 0000d530     cb08          JRNZ    MUSIC_ALREADY_GOING
    2759 0000d540                   CREATE  SOUND_PID,DO_RIGHT_MUSIC2
    2760                    
    2761 0000d5c0           MUSIC_ALREADY_GOING
    2762 0000d5c0     1840          MOVK    2,A0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   65

    2763 0000d5d0     0580          move    a0,@match_over
         0000d5e0 00000000! 
    2764 0000d600     0d5f          CALLA   KILL_ALL_CHANNELS
         0000d610 00000000! 
    2765 0000d630     09c0          MOVI    4DH,A0
         0000d640     004d  
    2766 0000d650     0d5f          CALLA   triple_sound
         0000d660 00000000! 
    2767 0000d680     5600          clr     a0
    2768 0000d690     0580          move    a0,@HALT
         0000d6a0 00000000! 
    2769 0000d6c0                   DIE
    2770                    
    2771                    
    2772 0000d6f0            SUBRP  jabedo_game_over
    2773 0000d6f0                   CREATE0 do_game_over            ;it'll set it's own PROCID
    2774 0000d760                   DIE
    2775                    
    2776                    
    2777 0000d790            SUBRP  DO_RIGHT_MUSIC
    2778 0000d790                   SLEEP   55
    2779 0000d7e0            SUBRP  DO_RIGHT_MUSIC2
    2780 0000d7e0     1820          MOVK    1,A0
    2781 0000d7f0     0580          MOVE    A0,@MUSIC_HAP
         0000d800 000008f0- 
    2782 0000d820     b54b          MOVE    *A10(WRESTLERNUM),A11
         0000d830     0590  
    2783 0000d840     248b          SLL     4,A11
    2784 0000d850     0b2b          ADDI    jabewrestler_tunes,A11
         0000d860 0000d8f0' 
    2785 0000d880     8563          MOVE    *A11,A3
    2786 0000d890     0d5f          calla   SNDSND
         0000d8a0 00000000! 
    2787 0000d8c0                   DIE
    2788                    
    2789 0000d8f0           jabewrestler_tunes
    2790 0000d8f0     0005          .word   5,2,1,7,6,4,8,0,3
    2791                    
    2792 0000d980           jabenot_end
    2793 0000d980     05ae          move    @royal_rumble,a14
         0000d990 00000000! 
    2794 0000d9b0     cb07          jrnz    jabeno_run_boxes
    2795 0000d9c0                   JSRP    show_dufus_messages             ; Shows run msg (only between rounds)
    2796 0000da30           jabeno_run_boxes
    2797                    
    2798                            ;wait 105 ticks or until a press
    2799 0000da30     09c9          movi    105,a9
         0000da40     0069  
    2800 0000da50           jabewl2 SLEEPK  1
    2801 0000da90     0d5f          calla   get_all_buttons_cur2
         0000daa0 00000000! 
    2802 0000dac0     cb01          jrnz    jabego2
    2803 0000dad0     3d29          dsjs    a9,jabewl2
    2804 0000dae0           jabego2 ;Hey!  REAL programmers don't use go2's!
    2805                            ;if the dufus msg boxes are on make sure their
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   66

    2806                            ;on for at least 1 second
    2807 0000dae0     07a0          move    @dboxes_on,a0,L         ; Any dufus msg boxes on?
         0000daf0 00000000! 
    2808 0000db10     ca0a          jrz     jabedeath_ok            ; br = no
    2809 0000db20     0b49          cmpi    50,a9                   ; Has 1 second passed ?
         0000db30     ffcd  
    2810 0000db40     c607          jrle    jabedeath_ok            ; br = yes
    2811 0000db50     0be9          subi    50,a9                   ; Give me remainder of 1 second
         0000db60     ffcd  
    2812 0000db70           jabedbox_wait
    2813 0000db70                   SLEEPK  1
    2814 0000dbb0     3ca9          dsjs    a9,jabedbox_wait
    2815 0000dbc0           jabedeath_ok
    2816 0000dbc0     1820          movk    1,a0
    2817 0000dbd0     0780          move    a0,@award_ok_to_die,L
         0000dbe0 00000000! 
    2818                    
    2819 0000dc00     09c0          MOVI    ANNC_PID,A0
         0000dc10     012e  
    2820 0000dc20     5621          CLR     A1
    2821 0000dc30     03e1          NOT     A1
    2822 0000dc40     0d5f          CALLA   KILALL          ;STOP BAR MOTION IF NEED BE
         0000dc50 00000000! 
    2823                    
    2824 0000dc70     05a5          MOVE    @PSTATUS2,A5
         0000dc80 00000000! 
    2825 0000dca0     0b45          CMPI    3,A5
         0000dcb0     fffc  
    2826 0000dcc0     ca0a          JREQ    RESET_HUMAN_VS_HUMAN
    2827                    
    2828 0000dcd0     b543          MOVE    *A10(PLYRNUM),A3
         0000dce0     0580  
    2829 0000dcf0     0b43          CMPI    2,A3
         0000dd00     fffd  
    2830 0000dd10     c505          JRGE    RESET_HUMAN_VS_HUMAN
    2831                    
    2832 0000dd20     03e5          NOT     A5
    2833 0000dd30     27c5          SLL     30,A5
    2834 0000dd40     2c45          SRL     30,A5
    2835 0000dd50     1425          DEC     A5
    2836 0000dd60     c004          JRUC    WRESTLERS_RESET
    2837                    
    2838 0000dd70           HUMAN_WON_IT
    2839                    
    2840 0000dd70           RESET_HUMAN_VS_HUMAN
    2841 0000dd70     b741          MOVE    *A10(WHOIHIT),A1,L
         0000dd80     0500  
    2842 0000dd90     b425          MOVE    *A1(PLYRNUM),A5
         0000dda0     0580  
    2843                    
    2844 0000ddb0           WRESTLERS_RESET
    2845                    
    2846                    
    2847 0000ddb0     0d5f          CALLA   CLEAR_SPEECH_REPEAT
         0000ddc0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   67

    2848                    
    2849                            ;do new music for the coming round
    2850 0000dde0     05a1          MOVE    @current_round,A1
         0000ddf0 00000000! 
    2851 0000de10     09c3          MOVI    16,A3
         0000de20     0010  
    2852 0000de30     0b41          CMPI    2,A1
         0000de40     fffd  
    2853 0000de50     ca02          JREQ    NOT_THIRD_MATCH
    2854 0000de60     09c3          MOVI    17,A3
         0000de70     0011  
    2855 0000de80           NOT_THIRD_MATCH
    2856 0000de80     0d5f          CALLA   SNDSND
         0000de90 00000000! 
    2857 0000deb0           NO_LOWER
    2858 0000deb0     1908          movk    8,a8
    2859 0000dec0     1829          movk    1,a9
    2860 0000ded0                   jsrp    CLOSE_VERT_SCREEN_LINE
    2861                    
    2862 0000df40     09e1          MOVI    LINES_VERT,A1
         0000df50 00000000! 
    2863 0000df70     0781          MOVE    A1,@WHICH_SCREEN,L
         0000df80 00000000! 
    2864                    
    2865 0000dfa0     09c0          movi    CLSNEUT|TYPTEXT|SUBMES1,a0
         0000dfb0     0702  
    2866 0000dfc0     0d5f          calla   obj_del1c               ;delete text/plates
         0000dfd0 00000000! 
    2867                    
    2868 0000dff0     09e0          movi    ZFLIP_POS,a0
         0000e000 000d8000  
    2869 0000e020     0780          move    a0,@ZFLIP_POS_VAR,L
         0000e030 000008d0- 
    2870                    
    2871 0000e050     0d5f          calla   reset_for_round
         0000e060 00000000! 
    2872 0000e080     0d5f          calla   reset_for_round2
         0000e090 00000000! 
    2873                    
    2874 0000e0b0     09c0          movi    TIMER_PID,a0
         0000e0c0     0124  
    2875 0000e0d0     09c1          movi    -1,a1
         0000e0e0     ffff  
    2876 0000e0f0     0d5f          calla   EXISTP
         0000e100 00000000! 
    2877 0000e120     ca17          jrz     dont_update_clock
    2878 0000e130     01e0          pushst
    2879 0000e140     0360          dint
    2880 0000e150                   push    a13
    2881 0000e160     4c0d          move    a0,a13
    2882 0000e170     0d5f          calla   update_timer
         0000e180 00000000! 
    2883 0000e1a0     09e0          movi    WGFS_W_P,a0
         0000e1b0 00000000! 
    2884 0000e1d0     0d5f          calla   pal_getf
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   68

         0000e1e0 00000000! 
    2885 0000e200     b7a8          move    *a13(PDATA+20h),a8,L    ;10's image pointer
         0000e210     0120  
    2886 0000e220     b008          move    a0,*a8(OPAL)
         0000e230     0150  
    2887 0000e240     b7a8          move    *a13(PDATA),a8,L        ;10's image pointer
         0000e250     0100  
    2888 0000e260     b008          move    a0,*a8(OPAL)
         0000e270     0150  
    2889 0000e280                   pull    a13
    2890 0000e290     01c0          popst
    2891 0000e2a0           dont_update_clock
    2892                    
    2893 0000e2a0     5600          clr     a0
    2894 0000e2b0     0580          MOVE    A0,@DAM_MULT
         0000e2c0 00000860- 
    2895 0000e2e0     0d3f          callr   update_meter
         0000e2f0     f75c  
    2896 0000e300     1820          movk    1,a0
    2897 0000e310     0d3f          callr   update_meter
         0000e320     f759  
    2898                    
    2899                            ;reset the scroller position
    2900 0000e330     0d5f          calla   init_scroller
         0000e340 00000000! 
    2901                    
    2902 0000e360     0d5f          calla   INIT_SKIRTS
         0000e370 00000000! 
    2903                    
    2904 0000e390     0d5f          calla   BGND_UD1
         0000e3a0 00000000! 
    2905                    
    2906                    
    2907 0000e3c0                   CREATE  SOUND_PID,ring_bell
    2908                    
    2909 0000e440     1820          movk    1,a0
    2910 0000e450     0580          move    a0,@HALT
         0000e460 00000000! 
    2911                    
    2912 0000e480                   SLEEPK  1
    2913 0000e4c0     0d5f          calla   BGND_UD1
         0000e4d0 00000000! 
    2914 0000e4f0                   CREATE  SKIRT_PID,CHANGE_SKIRTS2
    2915                    
    2916 0000e570                   SLEEPK  1
    2917 0000e5b0     0d5f          calla   BGND_UD1
         0000e5c0 00000000! 
    2918                    
    2919 0000e5e0                   SLEEPK  1
    2920                    
    2921                    
    2922 0000e620     1908          movk    8,a8
    2923 0000e630     1829          movk    1,a9
    2924 0000e640                   jsrp    OPEN_VERT_SCREEN_LINE
    2925                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   69

    2926 0000e6b0                   CREATE  ANNC_PID,DO_ROUNDS
    2927                    
    2928 0000e730                   SLEEP   50
    2929 0000e780     0d5f          CALLA   VINCE_START_ROUND2_3
         0000e790 00000000! 
    2930 0000e7b0     5600          clr     a0
    2931 0000e7c0     0580          move    a0,@HALT
         0000e7d0 00000000! 
    2932 0000e7f0                   SLEEP   40
    2933                    
    2934 0000e840     09c0          movi    CLSNEUT|TYPTEXT|SUBMES1,a0
         0000e850     0702  
    2935 0000e860     0d5f          calla   obj_del1c               ;delete text/plates
         0000e870 00000000! 
    2936                    
    2937 0000e890     09c0          movi    CLSNEUT|TYPTEXT|SUBTXT,a0
         0000e8a0     0701  
    2938 0000e8b0     0d5f          calla   obj_del1c               ;delete text/plates
         0000e8c0 00000000! 
    2939                    
    2940 0000e8e0     5600          clr     a0
    2941 0000e8f0     0580          move    a0,@HALT
         0000e900 00000000! 
    2942                    
    2943                            ;reset round_start_time
    2944 0000e920     07ae          move    @PCNT,a14,L
         0000e930 00000000! 
    2945 0000e950     078e          move    a14,@round_start_time,L
         0000e960 00000000! 
    2946                            
    2947                    
    2948 0000e980                   DIE
    2949                    
    2950                    
    2951 0000e9b0            SUBRP  DO_ROUNDS
    2952 0000e9b0     09e0          movi    [200,0],a0                      ;x pos
         0000e9c0 00c80000  
    2953 0000e9e0     09e1          movi    [255,0],a1                      ;y pos
         0000e9f0 00ff0000  
    2954 0000ea10     09e2          movi    RNDPLAT,a2
         0000ea20 00000000! 
    2955 0000ea40     09f0          movi    RNDPLT_P,b0
         0000ea50 00000000! 
    2956 0000ea70     09c3          movi    1800h,a3                                ;z pos
         0000ea80     1800  
    2957 0000ea90     0d3f          callr   jabebegin_obj
         0000eaa0     0072  
    2958                    
    2959 0000eab0     5600          clr     a0
    2960 0000eac0     b008          move    a0,*a8(OID)
         0000ead0     0190  
    2961                    
    2962 0000eae0                   PUSH    A8
    2963                    
    2964 0000eaf0     05a0          move    @current_round,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   70

         0000eb00 00000000! 
    2965 0000eb20     09e2          MOVI    RNDNUM_1,A2
         0000eb30 00000000! 
    2966 0000eb50     1420          DEC     A0
    2967 0000eb60     ca0d          JRZ     jabeOKAY
    2968 0000eb70     09e2          MOVI    RNDNUM_2,A2
         0000eb80 00000000! 
    2969 0000eba0     1420          DEC     A0
    2970 0000ebb0     ca08          JRZ     jabeOKAY
    2971 0000ebc0     09e2          MOVI    RNDNUM_3,A2
         0000ebd0 00000000! 
    2972 0000ebf0     1420          DEC     A0
    2973 0000ec00     ca03          JRZ     jabeOKAY
    2974 0000ec10     09e2          MOVI    RNDNUM_4,A2
         0000ec20 00000000! 
    2975 0000ec40           jabeOKAY
    2976 0000ec40     09e0          movi    [200,0],a0                      ;x pos
         0000ec50 00c80000  
    2977 0000ec70     09e1          movi    [255,0],a1                      ;y pos
         0000ec80 00ff0000  
    2978 0000eca0     09f0          movi    RNDNUM_P,b0
         0000ecb0 00000000! 
    2979 0000ecd0     09c3          movi    1801h,a3                                ;z pos
         0000ece0     1801  
    2980 0000ecf0     0d3f          callr   jabebegin_obj
         0000ed00     004c  
    2981                    
    2982 0000ed10     5600          clr     a0
    2983 0000ed20     b008          move    a0,*a8(OID)
         0000ed30     0190  
    2984                    
    2985 0000ed40                   PULL    A9
    2986                    
    2987 0000ed50     1a8a          MOVK    20,A10
    2988 0000ed60           LOOP_ROUNDS_ON
    2989 0000ed60     09e0          MOVI    [190,0],A0
         0000ed70 00be0000  
    2990 0000ed90     0d3f          CALLR   ZIP_ROUNDS_ON
         0000eda0     0022  
    2991 0000edb0                   SLEEPK  1
    2992 0000edf0     3d4a          DSJS    A10,LOOP_ROUNDS_ON
    2993 0000ee00     1a8a          movk    20,a10
    2994 0000ee10                   JSRP    wait_on_butn
    2995 0000ee80     1a8a          MOVK    20,A10
    2996 0000ee90           LOOP_ROUNDS_OFF
    2997 0000ee90     09e0          MOVI    [300,0],A0
         0000eea0 012c0000  
    2998 0000eec0     0d3f          CALLR   ZIP_ROUNDS_ON
         0000eed0     000f  
    2999 0000eee0                   SLEEPK  1
    3000 0000ef20     3d4a          DSJS    A10,LOOP_ROUNDS_OFF
    3001                    
    3002 0000ef30     0d5f          calla   DELOBJA8
         0000ef40 00000000! 
    3003 0000ef60     4d20          move    a9,a0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   71

    3004 0000ef70     0d5f          calla   DELOBJ
         0000ef80 00000000! 
    3005 0000efa0                   DIE
    3006                    
    3007 0000efd0           ZIP_ROUNDS_ON
    3008 0000efd0     b701          move    *a8(OYVAL),a1,L
         0000efe0     00a0  
    3009 0000eff0     4420          sub     a1,a0
    3010 0000f000     2ba0          sra     3,a0
    3011 0000f010     b702          move    *a8(OYVAL),a2,L
         0000f020     00a0  
    3012 0000f030     4002          add     a0,a2
    3013 0000f040     b248          move    a2,*a8(OYVAL),L
         0000f050     00a0  
    3014 0000f060     b722          move    *a9(OYVAL),a2,L
         0000f070     00a0  
    3015 0000f080     4002          add     a0,a2
    3016 0000f090     b249          move    a2,*a9(OYVAL),L
         0000f0a0     00a0  
    3017 0000f0b0     0960          RETS
    3018                    
    3019 0000f0c0           jabeset_x
    3020 0000f0c0     09eb          movi    ram_lst,a11
         0000f0d0 00000360- 
    3021 0000f0f0     8768          move    *a11,a8,L
    3022 0000f100     b701          move    *a8(OXVAL),a1,L
         0000f110     0080  
    3023 0000f120     4420          sub     a1,a0
    3024 0000f130     2ba0          sra     3,a0
    3025 0000f140           jabelp5
    3026 0000f140     9768          move    *a11+,a8,L
    3027 0000f150     ca06          jrz     jabex4
    3028 0000f160     b702          move    *a8(OXVAL),a2,L
         0000f170     0080  
    3029 0000f180     4002          add     a0,a2
    3030 0000f190     b248          move    a2,*a8(OXVAL),L
         0000f1a0     0080  
    3031                    
    3032 0000f1b0     c0f8          jruc    jabelp5
    3033 0000f1c0           jabex4
    3034 0000f1c0     0960          rets
    3035                    
    3036 0000f1d0           jabebegin_obj
    3037                    
    3038 0000f1d0     09e4          movi    DMAWNZ|M_SCRNREL,a4             ;DMA flags
         0000f1e0 0000a002  
    3039 0000f200     09c5          movi    CLSNEUT|TYPTEXT|SUBTXT,a5
         0000f210     0701  
    3040 0000f220     56c6          clr     a6                              ;x vel
    3041 0000f230     56e7          clr     a7                              ;y vel
    3042 0000f240     0d5f          calla   BEGINOBJP
         0000f250 00000000! 
    3043 0000f270     0960          rets
    3044                    
    3045 0000f280           blink_text
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   72

    3046 0000f280                   SLEEPK  10
    3047 0000f2c0           jabelp1
    3048 0000f2c0     09e0          movi    SGMD8RED2,a0
         0000f2d0 00000000! 
    3049 0000f2f0     0d5f          calla   pal_getf
         0000f300 00000000! 
    3050 0000f320     b008          move    a0,*a8(OPAL)
         0000f330     0150  
    3051 0000f340                   SLEEPK  4
    3052 0000f380     09e0          movi    SGMD8WHT2,a0
         0000f390 00000000! 
    3053 0000f3b0     0d5f          calla   pal_getf
         0000f3c0 00000000! 
    3054 0000f3e0     b008          move    a0,*a8(OPAL)
         0000f3f0     0150  
    3055 0000f400                   SLEEPK  7
    3056 0000f440     c0e7          jruc    jabelp1
    3057                    
    3058                    
    3059 0000f450            SUBR   FIRSTATT_MESS
    3060                    
    3061 0000f450     4d40          move    a10,a0
    3062 0000f460     09e8          movi    FIRSTATT,a8
         0000f470 00000000! 
    3063 0000f490     b409          move    *a0(PLYR_SIDE),a9
         0000f4a0     05b0  
    3064 0000f4b0     574a          clr     a10
    3065 0000f4c0                   pushp   a10
    3066 0000f4d0     09cb          movi    1801h,a11
         0000f4e0     1801  
    3067                            
    3068 0000f4f0     c06f          jruc    jabecommon
    3069                    
    3070 0000f500            SUBR   BONUS_MESS
    3071                    
    3072                    
    3073 0000f500     57ce          clr     a14
    3074 0000f510     4d4a          move    a10,a10                 ;No message
    3075 0000f520     ca4e          jrz     jabealready
    3076 0000f530     cf32          jrnn    jabereg
    3077                    
    3078 0000f540           jabetag
    3079 0000f540                   PUSHP   a14
    3080                    
    3081                    
    3082 0000f550                   RND_AWARD       a8,HIGH_RISK_AWD        ; give award for high risk
    3083                    
    3084 0000f5f0     b509          move    *a8(PLYR_SIDE),a9
         0000f600     05b0  
    3085 0000f610     09e8          MOVI    HIGHRISK,A8
         0000f620 00000000! 
    3086 0000f640     574a          CLR     A10
    3087 0000f650     09cb          MOVI    1801H,A11
         0000f660     1801  
    3088                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   73

    3089 0000f670                   CREATE0 MAYBE_HIGH_RISK
    3090                    
    3091 0000f6e0     0d3f          callr   is_there_one_already
         0000f6f0     0080  
    3092 0000f700     cb00          jrnz    jabeexit
         0000f710     00b8  
    3093                    
    3094 0000f720                   CREATE  MESSAGE_PID,SPECIAL_MESSAGE
    3095                    
    3096 0000f7a0     09c0          MOVI    0BBH,A0                 ;Guitar snd
         0000f7b0     00bb  
    3097 0000f7c0     0d5f          CALLA   triple_sound
         0000f7d0 00000000! 
    3098                    
    3099 0000f7f0                   SLEEP   50
    3100                    
    3101 0000f840     188a          movk    4,a10
    3102 0000f850     c04f          jruc    jabeinhere
    3103 0000f860           jabereg
    3104                    
    3105 0000f860     b501          move    *a8(RISK),a1
         0000f870     0950  
    3106 0000f880     1e01          btst    15,a1
    3107 0000f890     cbca          jrnz    jabetag
    3108                    
    3109                    
    3110                    
    3111 0000f8a0     4d43          move    a10,a3
    3112 0000f8b0     09e2          movi    message_flag,a2
         0000f8c0 00000890- 
    3113 0000f8e0     0b43          cmpi    32,a3
         0000f8f0     ffdf  
    3114 0000f900     c404          jrlt    normal_thing2
    3115 0000f910     0b02          addi    32,a2
         0000f920     0020  
    3116 0000f930     0be3          subi    32,a3
         0000f940     ffdf  
    3117 0000f950           normal_thing2
    3118 0000f950     8640          move    *a2,a0,L
    3119 0000f960     4a60          btst    a3,a0
    3120 0000f970     cb09          jrnz    jabealready
    3121 0000f980     1821          movk    1,a1
    3122 0000f990     6261          sll     a3,a1
    3123 0000f9a0     5420          or      a1,a0
    3124 0000f9b0     8202          move    a0,*a2,L
    3125                    
    3126 0000f9c0     24aa          sll     5,a10
    3127 0000f9d0     0b2a          addi    jabemessage_tbl,a10
         0000f9e0 000102d0' 
    3128 0000fa00     874e          move    *a10,a14,L
    3129 0000fa10           jabealready
    3130 0000fa10                   PUSHP   a14
    3131                    
    3132                    
    3133                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   74

    3134 0000fa20     1841          movk    2,a1
    3135 0000fa30     0581          move    a1,@DAM_MULT
         0000fa40 00000860- 
    3136                    
    3137 0000fa60                   RND_AWARD       a8,HIGH_RISK_AWD        ; give award for high risk
    3138                    
    3139 0000fb00     b509          move    *a8(PLYR_SIDE),a9
         0000fb10     05b0  
    3140 0000fb20     09e8          MOVI    HIGHRISK,A8
         0000fb30 00000000! 
    3141 0000fb50     574a          CLR     A10
    3142 0000fb60     09cb          MOVI    1801H,A11
         0000fb70     1801  
    3143                    
    3144 0000fb80                   CREATE0 MAYBE_HIGH_RISK
    3145                    
    3146 0000fbf0           jabecommon      
    3147 0000fbf0     0d3f          callr   is_there_one_already
         0000fc00     002f  
    3148 0000fc10     cb68          jrnz    jabeexit
    3149                    
    3150 0000fc20                   CREATE  MESSAGE_PID,SPECIAL_MESSAGE
    3151                    
    3152 0000fca0     09c0          MOVI    0BBH,A0                 ;Guitar snd
         0000fcb0     00bb  
    3153 0000fcc0     0d5f          CALLA   triple_sound
         0000fcd0 00000000! 
    3154                    
    3155 0000fcf0                   SLEEP   50
    3156                    
    3157 0000fd40     184a          movk    2,a10
    3158 0000fd50     09e8  jabeinhere      MOVI    xDAMAGE,A8
         0000fd60 00000000! 
    3159 0000fd80     09cb          MOVI    1803H,A11
         0000fd90     1803  
    3160                    
    3161 0000fda0                   CREATE  MESSAGE_PID,SPECIAL_MESSAGE
    3162                    
    3163 0000fe20                   SLEEP   50
    3164                    
    3165 0000fe70                   PULLP   a8
    3166 0000fe80     ca80          jaz     SUCIDE
         0000fe90 00000000! 
    3167                    
    3168 0000feb0     0d3f          callr   DO_THIS_MESS
         0000fec0     0096  
    3169 0000fed0                   DIE
    3170                    
    3171 0000ff00            SUBRP  is_there_one_already
    3172 0000ff00     4d21          MOVE    A9,A1
    3173 0000ff10     03e1          NOT     A1
    3174 0000ff20     27e1          SLL     31,A1
    3175 0000ff30     2ca1          SRL     31-4,A1
    3176 0000ff40     0b21          ADDI    MESSAGE_FLAGS,A1
         0000ff50 000009f0- 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   75

    3177 0000ff70     8420          MOVE    *A1,A0
    3178 0000ff80     0960          rets
    3179                    
    3180 0000ff90           SET_MESS_FLAGS
    3181 0000ff90     4d21          MOVE    A9,A1
    3182 0000ffa0     03e1          NOT     A1
    3183 0000ffb0     27e1          SLL     31,A1
    3184 0000ffc0     2ca1          SRL     31-4,A1
    3185 0000ffd0     0b21          ADDI    MESSAGE_FLAGS,A1
         0000ffe0 000009f0- 
    3186 00010000     8001          MOVE    A0,*A1
    3187 00010010     0960          RETS
    3188                    
    3189                    
    3190 00010020            SUBR   MOVE_NAME_ANNC
    3191                    
    3192                    
    3193 00010020     0b4a          cmpi    41,a10
         00010030     ffd6  
    3194 00010040     ca04          jrz     jabeskip
    3195                    
    3196 00010050     05ae          move    @reduce_bog,a14
         00010060 00000000! 
    3197 00010080     cb21          jrnz    jabeexit
    3198 00010090           jabeskip
    3199 00010090     b509          move    *a8(PLYR_SIDE),a9
         000100a0     05b0  
    3200                    
    3201 000100b0     0d3f          callr   is_there_one_already
         000100c0     ffe3  
    3202 000100d0     cb1c          jrnz    jabeexit
    3203                    
    3204 000100e0     4d43          move    a10,a3
    3205 000100f0     09e2          movi    message_flag,a2
         00010100 00000890- 
    3206 00010120     0b43          cmpi    32,a3
         00010130     ffdf  
    3207 00010140     c407          jrlt    normal_thing
    3208 00010150     0b02          addi    32,a2
         00010160     0020  
    3209 00010170     0be3          subi    32,a3
         00010180     ffdf  
    3210 00010190     0b43          cmpi    9,a3
         000101a0     fff6  
    3211 000101b0     ca07          jrz     jabecont
    3212 000101c0           normal_thing
    3213 000101c0     8640          move    *a2,a0,L
    3214 000101d0     4a60          btst    a3,a0
    3215 000101e0     cb0b          jrnz    jabeexit
    3216 000101f0     1821          movk    1,a1
    3217 00010200     6261          sll     a3,a1
    3218 00010210     5420          or      a1,a0
    3219 00010220     8202          move    a0,*a2,L
    3220 00010230           jabecont
    3221 00010230     24aa          sll     5,a10
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   76

    3222 00010240     0b2a          addi    jabemessage_tbl,a10
         00010250 000102d0' 
    3223 00010270     8748          move    *a10,a8,L
    3224                    
    3225 00010280     0d3f          callr   DO_THIS_MESS
         00010290     0059  
    3226                    
    3227 000102a0           jabeexit
    3228 000102a0                   DIE
    3229                    
    3230 000102d0           jabemessage_tbl
    3231 000102d0 00000000          .long   0               ;0 = Blank
    3232 000102f0 00000000!         .long   HEADSLAM        ;1
    3233 00010310 00000000          .long   0               ;2
    3234 00010330 00000000!         .long   SNAPMIRR        ;3
    3235 00010350 00000000!         .long   FRANKEN         ;4 *
    3236 00010370 00000000!         .long   BACKBRKR        ;5
    3237 00010390 00000000!         .long   BODYSLAM        ;6
    3238 000103b0 00000000!         .long   PILEDRV         ;7
    3239 000103d0 00000000!         .long   FIRSTATT        ;8  ; saved for Jason
    3240 000103f0 00000000!         .long   ARMBREAK        ;9      *
    3241 00010410 00000000!         .long   ARMDRAG         ;10     *  ;RAZOR & HART HIP TOSS
    3242 00010430 00000000!         .long   BACKDROP        ;11     *  ;BAM BAM HIP TOSS
    3243 00010450 00000000!         .long   BACKSUPL        ;12     *  ;SHAWN MICHEALS
    3244 00010470 00000000!         .long   BANZAI          ;13     *
    3245 00010490 00000000!         .long   BEHMBUTT        ;14     *  ;BAM BAM RUNNING BUTT DROP
    3246 000104b0 00000000!         .long   CROSFIRE        ;15     *
    3247 000104d0 00000000!         .long   DDT             ;16     *
    3248 000104f0 00000000!         .long   DOBLSNAP        ;17     *  ;SHAWN KICK
    3249 00010510 00000000!         .long   ELBOWDRP        ;18        ;EVERYBODY MOSTLY
    3250 00010530 00000000!         .long   EYERAKER        ;19     *
    3251 00010550 00000000!         .long   FACESLAM        ;20     *
    3252 00010570 00000000!         .long   FIRESPL         ;21     *  ;BAM BAM OFF TURNBUCKLES
    3253 00010590 00000000!         .long   CLAPPER         ;22     *  ;DOINK
    3254 000105b0 00000000!         .long   FLYBUTT         ;23        ?
    3255 000105d0 00000000!         .long   FLYCLOTH        ;24     *
    3256 000105f0 00000000!         .long   HAMMER          ;25     *
    3257 00010610 00000000!         .long   HIPTOSS         ;26     *  ;LEX YOKO
    3258 00010630 00000000!         .long   BIGBOOT         ;27     *  ;EVERYBODY
    3259 00010650 00000000!         .long   JOYBUZZ         ;28     *
    3260 00010670 00000000!         .long   MYSTGLVE        ;29     ;
    3261 00010690 00000000!         .long   NAPALM          ;30     ;
    3262 000106b0 00000000!         .long   POGOPILE        ;31     *
    3263 000106d0 00000000!         .long   RAPIDRND        ;32     *
    3264 000106f0 00000000!         .long   RAZOREDG        ;33     *
    3265 00010710 00000000!         .long   SCISSOR         ;34     *  ;YOKO
    3266 00010730 00000000!         .long   SKULLCRK        ;35     *
    3267 00010750 00000000!         .long   SLMONKEY        ;36     *
    3268 00010770 00000000!         .long   SPEEDKIK        ;37     *
    3269 00010790 00000000!         .long   SPLASH          ;38        ;BAMBAM TURNBUCKLE DROP, EVENTUALLY
    3270 000107b0 00000000!         .long   SUNSETFL        ;39     *  ;SHAWN FLIP
    3271 000107d0 00000000!         .long   TOMBPLDR        ;40     *
    3272 000107f0 00000000!         .long   SECWND09        ;41        
    3273 00010810 00000000!         .long   VERTSUPL        ;42     *   ;YOKO LEX
    3274                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   77

    3275                    
    3276 00010830           DO_THIS_MESS
    3277                    
    3278                            ;if this is the second wind message, skip the permission check
    3279 00010830     0b68          cmpi    SECWND09,a8
         00010840 ffffffff! 
    3280 00010860     ca0c          jreq    jabeskip_perm_check
    3281                    
    3282                            ;no messages in no-bog mode?
    3283 00010870     05ae          move    @no_debris,a14
         00010880 00000000! 
    3284 000108a0     cb18          jrnz    NO_MORE_MESS
    3285                    
    3286 000108b0     4d20          move    a9,a0
    3287 000108c0     24a0          sll     5,a0
    3288 000108d0     0b20          addi    p1powerup_request,a0
         000108e0 00000000! 
    3289 00010900     8600          move    *a0,a0,L
    3290 00010910     1f60          btst    MOVE_NAMES_ON_BIT,a0
    3291 00010920     ca10          jrz     NO_MORE_MESS
    3292 00010930           jabeskip_perm_check
    3293                    
    3294 00010930     574a          CLR     A10
    3295                    
    3296 00010940     09cb          MOVI    1805H,A11               ;1801
         00010950     1805  
    3297                    
    3298 00010960                   CREATE  MESSAGE_PID,SPECIAL_MESSAGE
    3299                    
    3300 000109e0     09c0          MOVI    0BBH,A0                 ;Move name annc snd
         000109f0     00bb  
    3301 00010a00     0d5f          CALLA   triple_sound
         00010a10 00000000! 
    3302                    
    3303 00010a30           NO_MORE_MESS
    3304 00010a30     0960          RETS
    3305                    
    3306                    
    3307                    
    3308 00010a40            SUBR   DO_REVERSAL_MESS
    3309 00010a40                   RND_AWARD a8,REVERSAL_AWD               ; give award for reversal
    3310 00010ae0     09c0          movi    15Ch,a0
         00010af0     015c  
    3311 00010b00     0d5f          calla   ADD_VOICE
         00010b10 00000000! 
    3312                    
    3313 00010b30     b509          move    *a8(PLYR_SIDE),a9
         00010b40     05b0  
    3314 00010b50                   CREATE  MESSAGE_PID,CREATE_REVERSAL_MESS
    3315 00010bd0     0960          RETS
    3316                    
    3317 00010be0            SUBRP  CREATE_REVERSAL_MESS    ;process
    3318                    
    3319 00010be0     0d3f          callr   is_there_one_already
         00010bf0     ff30  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   78

    3320 00010c00     cb13          jrnz    exit_reversal
    3321                    
    3322 00010c10     09e8          MOVI    REVERS,A8
         00010c20 00000000! 
    3323 00010c40     574a          CLR     A10
    3324 00010c50     09cb          MOVI    1801H,A11
         00010c60     1801  
    3325                    
    3326 00010c70                   CREATE  MESSAGE_PID,SPECIAL_MESSAGE
    3327                    
    3328 00010cf0     09c0          MOVI    0BBH,A0
         00010d00     00bb  
    3329 00010d10     0d5f          CALLA   triple_sound
         00010d20 00000000! 
    3330                    
    3331 00010d40           exit_reversal
    3332 00010d40                   DIE
    3333                    
    3334                    
    3335 00010d70            SUBR   anyone_bucking
    3336                    
    3337                            ;no buckoffs allowed in royal rumble mode
    3338 00010d70     05ae          move    @royal_rumble,a14
         00010d80 00000000! 
    3339 00010da0     cb12          jrnz    kvoeno
    3340                    
    3341 00010db0     09e0          movi    process_ptrs,a0
         00010dc0 00000000! 
    3342 00010de0     09c1          movi    NUM_WRES,a1
         00010df0     0007  
    3343 00010e00     9602  kvoelp  move    *a0+,a2,L
    3344 00010e10     ca0a          jrz     kvoenxt
    3345 00010e20     b64e          move    *a2(STATUS_FLAGS),a14,L
         00010e30     0b50  
    3346 00010e40     1e6e          btst    B_DO_BUCKOFF,a14
    3347 00010e50     ca06          jrz     kvoenxt
    3348 00010e60     1dce          btst    B_NEW_BUCKOFF,a14
    3349 00010e70     cb02          jrnz    kvoeyes
    3350 00010e80     1e2e          btst    B_DID_BUCKOFF,a14
    3351 00010e90     cb02          jrnz    kvoenxt
    3352 00010ea0     4c40  kvoeyes move    a2,a0
    3353 00010eb0     0960          rets
    3354                    
    3355 00010ec0     3da1  kvoenxt dsj     a1,kvoelp
    3356 00010ed0     5600  kvoeno  clr     a0
    3357 00010ee0     0960          rets
    3358                    
    3359                    
    3360 00010ef0            SUBRP  set_all_buckoffs
    3361                    
    3362 00010ef0     09e0          movi    process_ptrs,a0
         00010f00 00000000! 
    3363 00010f20     09c1          movi    NUM_WRES,a1
         00010f30     0007  
    3364 00010f40     9602  meculp  move    *a0+,a2,L
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   79

    3365 00010f50     ca07          jrz     mecunxt
    3366 00010f60     b44e          move    *a2(STATUS_FLAGS),a14
         00010f70     0b50  
    3367 00010f80     0bae          ori     M_NO_BUCKOFF,a14
         00010f90 00002000  
    3368 00010fb0     b1c2          move    a14,*a2(STATUS_FLAGS)
         00010fc0     0b50  
    3369 00010fd0     3d41  mecunxt dsj     a1,meculp
    3370 00010fe0     0960          rets
    3371                    
    3372                    
    3373 00010ff0            SUBRP  is_perfect
    3374                    
    3375 00010ff0     0d5f          calla   is_8_on_1
         00011000 00000000! 
    3376 00011020     c818          jrc     yazafinal
    3377                    
    3378 00011030                   PUSH    a2,a3,a4,a5
    3379                    
    3380 00011050     b545          move    *a10(PLYR_SIDE),a5
         00011060     05b0  
    3381 00011070     09c2          movi    NUM_WRES,a2
         00011080     0007  
    3382 00011090     09e3          movi    process_ptrs,a3
         000110a0 00000000! 
    3383                    
    3384 000110c0     9664  yazalp  move    *a3+,a4,L
    3385 000110d0     ca0f          jrz     yazanxt         ;skip inactive
    3386                    
    3387 000110e0     b48e          move    *a4(PLYR_SIDE),a14
         000110f0     05b0  
    3388 00011100     48ae          cmp     a5,a14
    3389 00011110     cb0b          jrne    yazanxt         ;skip enemies
    3390                    
    3391 00011120     b481          move    *a4(PLYRNUM),a1
         00011130     0580  
    3392 00011140     0d3f          callr   get_health
         00011150     f4be  
    3393 00011160     0b40          cmpi    LIFE_MAX,a0
         00011170     ff5c  
    3394 00011180     ca04          jreq    yazanxt         ;okay - unharmed
    3395                    
    3396                            ;injured guy found.  return !c
    3397 00011190                   PULL    a2,a3,a4,a5
    3398 000111b0     0320  yazafinal       clrc
    3399 000111c0     0960          rets
    3400                    
    3401 000111d0     3e42  yazanxt dsj     a2,yazalp
    3402                    
    3403                            ;no injured teammates found.  return c
    3404 000111e0                   PULL    a2,a3,a4,a5
    3405 00011200     0de0          setc
    3406 00011210     0960          rets
    3407                    
    3408                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   80

    3409 00011220            SUBR   DO_COMBO_MESS
    3410                    
    3411                    
    3412 00011220     05a0          MOVE    @combo_audit_done,A0
         00011230 00000880- 
    3413 00011250     cb09          JRNZ    YES_WE_HAVE
    3414 00011260     09c0          movi    AUD_COMBO,A0
         00011270     005b  
    3415 00011280     0d5f          calla   AUD1
         00011290 00000000! 
    3416 000112b0     1820          MOVK    1,A0
    3417 000112c0     0580          MOVE    A0,@combo_audit_done
         000112d0 00000880- 
    3418 000112f0           YES_WE_HAVE
    3419                    
    3420                            ;if our combo_broken bit is set, blow out of here altogether.
    3421                            ; We audit it, but we don't adjust the bar or display any kind of
    3422                            ; message.
    3423 000112f0     b7ae          move    *a13(STATUS_FLAGS),a14,L
         00011300     0b50  
    3424 00011310     1d8e          btst    B_COMBO_BROKEN,a14
    3425 00011320     cb00          jrnz    xsbwrets
         00011330     0092  
    3426                    
    3427 00011340     b5a9          MOVE    *A13(PLYRNUM),A9
         00011350     0580  
    3428 00011360     09e8          MOVI    HITCOMBO,A8
         00011370 00000000! 
    3429 00011390     b5aa          MOVE    *A13(COMBO_COUNT),A10
         000113a0     0af0  
    3430 000113b0     142a          DEC     A10
    3431 000113c0     0b4a          CMPI    2,A10
         000113d0     fffd  
    3432 000113e0     c435          JRLT    NO_MESSAGE
    3433                    
    3434                    
    3435 000113f0     0b4a          cmpi    10,a10
         00011400     fff5  
    3436 00011410     c40b          jrlt    xsbwaward_reg_combo
    3437 00011420                   RND_AWARD       a13,UCOMBOS_AWD
    3438 000114c0     c00a          jruc    xsbwcombo_awd_done
    3439 000114d0           xsbwaward_reg_combo
    3440 000114d0                   RND_AWARD       a13,COMBOS_AWD  ; give award for combo started
    3441 00011570           xsbwcombo_awd_done
    3442                    
    3443 00011570     09c0          MOVI    0BAH,A0         ;0BAH humbug!
         00011580     00ba  
    3444 00011590     0d5f          CALLA   triple_sound
         000115a0 00000000! 
    3445                    
    3446 000115c0     09c0          MOVI    01A4H,A0        ;INCREDIBLE COMBINATION MOVE !
         000115d0     01a4  
    3447 000115e0     0d5f          CALLA   ADD_VOICE
         000115f0 00000000! 
    3448                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   81

    3449 00011610     0b4a          CMPI    5,A10
         00011620     fffa  
    3450 00011630     c601          JRLE    NO_MIGHT_BE_OBVIOUS
    3451 00011640     104a          addk    2,a10
    3452 00011650           NO_MIGHT_BE_OBVIOUS
    3453                    
    3454 00011650     09cb          MOVI    1803H,A11
         00011660     1803  
    3455                    
    3456 00011670     b5a9          move    *a13(PLYR_SIDE),a9
         00011680     05b0  
    3457                    
    3458 00011690     0d3f          callr   is_there_one_already
         000116a0     fe85  
    3459 000116b0     cb08          jrnz    NO_MESSAGE
    3460                    
    3461 000116c0                   CREATE  MESSAGE_PID,SPECIAL_MESSAGE
    3462                    
    3463 00011740           NO_MESSAGE
    3464                    
    3465                            ;HACK ALERT:  In royal rumble, the two human players share one combo
    3466                            ; meter.  This means that if player 1 (on the right) calls this,
    3467                            ; we clear HIS combo count but we zero his TEAMMATES bar.
    3468                            ; Confusing, eh?
    3469                    
    3470 00011740     5600          CLR     A0
    3471 00011750     b00d          MOVE    A0,*A13(COMBO_START)
         00011760     0b00  
    3472                    
    3473 00011770     b5a1          move    *a13(PLYR_SIDE),a1
         00011780     05b0  
    3474 00011790     b5ab          move    *a13(PLYRNUM),a11
         000117a0     0580  
    3475                    
    3476 000117b0     0b4b          cmpi    1,a11
         000117c0     fffe  
    3477 000117d0     cb06          jrne    xsbwnorum
    3478 000117e0     05ae          move    @royal_rumble,a14
         000117f0 00000000! 
    3479 00011810     ca02          jrz     xsbwnorum
    3480                    
    3481                            ;pretend we're player 0
    3482 00011820     5621          clr     a1              ;side
    3483 00011830     576b          clr     a11             ;PLYRNUM
    3484                    
    3485                    
    3486 00011840            SUBRP  zero_combo_meter
    3487                    
    3488 00011840     09c9  xsbwnorum       movi    MD_SIZE,a9
         00011850     0090  
    3489 00011860     5e29          mpyu    a1,a9
    3490 00011870     0b29          addi    meter_data,a9
         00011880 000001c0- 
    3491 000118a0     b728          MOVE    *A9(MD_COMBO),A8,L
         000118b0     0070  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   82

    3492 000118c0     4d65          move    a11,a5
    3493 000118d0                   X64     a5              ;x by PLT_SIZE
    3494 000118e0     0b25          ADDI    life_data,A5
         000118f0 00000000- 
    3495 00011910     5642          CLR     A2
    3496                    
    3497 00011920            SUBRP  draw_combo_meter
    3498                    
    3499 00011920     b045          MOVE    A2,*A5(PLT_COMBO_SIZE)
         00011930     0030  
    3500 00011940     24a2          SLL     5,A2
    3501 00011950     0b22          ADDI    WHICH_SIZE_BAR,A2
         00011960 00003a50' 
    3502 00011980     8640          MOVE    *A2,A0,L
    3503 00011990     ba08          move    *a0(IANIOFF),*A8(ODOFF),L
         000119a0     0020  
         000119b0     0220  
    3504 000119c0     ba08          move    *a0(ISAG),*a8(OSAG),L
         000119d0     0040  
         000119e0     0110  
    3505 000119f0     ba08          MOVE    *A0(ISIZEX),*A8(OSIZE),L
         00011a00     0000  
         00011a10     0130  
    3506                    
    3507 00011a20                   PUSH    A0,a1
    3508 00011a40     4c20          MOVE    A1,A0
    3509 00011a50     2480          SLL     4,A0
    3510 00011a60     0b20          ADDI    COMBO_FLASH_FLAG,A0
         00011a70 00000a90- 
    3511 00011a90     5642          CLR     A2
    3512 00011aa0     8040          MOVE    A2,*A0
    3513                    
    3514 00011ab0     0b01          ADDI    FLASH_COMBO_PID,A1
         00011ac0     0143  
    3515 00011ad0     4c20          MOVE    A1,A0
    3516 00011ae0     09c1          MOVI    -1,A1
         00011af0     ffff  
    3517 00011b00     0d5f          CALLA   KILALL
         00011b10 00000000! 
    3518 00011b30                   PULL    A0,a1
    3519                    
    3520                            ;get the flip right
    3521 00011b50     2481          sll     B_FLIPH,a1
    3522 00011b60     b40e          move    *a0(ICTRL),a14
         00011b70     0060  
    3523 00011b80     542e          or      a1,a14
    3524 00011b90     0bae          ori     8000H|DMAWNZ,a14
         00011ba0 00008002  
    3525 00011bc0     b1c8          move    a14,*a8(OCTRL)
         00011bd0     00f0  
    3526                    
    3527 00011be0     09e0          MOVI    SUPER_P,A0
         00011bf0 00000000! 
    3528 00011c10     0d5f          CALLA   pal_getf
         00011c20 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   83

    3529 00011c40     b008          MOVE    A0,*A8(OPAL)
         00011c50     0150  
    3530                    
    3531 00011c60           NO_GO_AWAY
    3532 00011c60     0960  xsbwrets        RETS
    3533                    
    3534                    
    3535 00011c70            SUBRP  SPECIAL_MESSAGE
    3536                    
    3537              0018  ZIP_SPEED       .EQU    18H
    3538              0019  BUFF            .EQU    25
    3539                    
    3540                    
    3541 00011c70     1820          MOVK    1,A0
    3542 00011c80     0d3f          CALLR   SET_MESS_FLAGS
         00011c90     fe2f  
    3543 00011ca0                   PUSHP   A9
    3544                    
    3545 00011cb0     03e9          NOT     A9
    3546 00011cc0     27e9          SLL     31,A9
    3547 00011cd0     2c29          SRL     31,A9
    3548                    
    3549 00011ce0     09c0          MOVI    10H,A0                          ;Whoosh
         00011cf0     0010  
    3550 00011d00     0d5f          CALLA   triple_sound
         00011d10 00000000! 
    3551                    
    3552 00011d30     4f65          MOVE    A11,B5
    3553 00011d40     576b          CLR     A11
    3554 00011d50     4d02          MOVE    A8,A2
    3555 00011d60     b443          MOVE    *A2(ISIZEX),A3
         00011d70     0000  
    3556 00011d80     0b62          CMPI    xDAMAGE,A2
         00011d90 ffffffff! 
    3557 00011db0     ca04          JREQ    SPECIAL_CASE_THIS
    3558 00011dc0     0b62          CMPI    HITCOMBO,A2
         00011dd0 ffffffff! 
    3559 00011df0     cb14          JRNE    ONLY_THIS_SIZE
    3560 00011e00           SPECIAL_CASE_THIS
    3561 00011e00     0b03          ADDI    19,A3
         00011e10     0013  
    3562 00011e20     4d40          MOVE    A10,A0
    3563 00011e30     0d5f          CALLA   BINBCD
         00011e40 00000000! 
    3564 00011e60     4c0a          MOVE    A0,A10
    3565 00011e70     4d4b          MOVE    A10,A11
    3566 00011e80     2f8b          SRL     4,A11
    3567 00011e90     ca0a          JRZ     ONLY_THIS_SIZE
    3568 00011ea0     09e2          MOVI    HITCOMBO2,A2
         00011eb0 00000000! 
    3569 00011ed0     0b03          ADDI    21,A3
         00011ee0     0015  
    3570 00011ef0     0b4b          CMPI    1,A11
         00011f00     fffe  
    3571 00011f10     cb02          JRNE    ONLY_THIS_SIZE
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   84

    3572 00011f20     0be3          SUBI    4,A3
         00011f30     fffb  
    3573 00011f40           ONLY_THIS_SIZE
    3574 00011f40     09c5          MOVI    TYPE_MESS2,A5
         00011f50     0120  
    3575 00011f60     0b03          ADDI    BUFF*2,A3
         00011f70     0032  
    3576 00011f80     09c0          MOVI    410,A0
         00011f90     019a  
    3577 00011fa0     4c07          MOVE    A0,A7
    3578 00011fb0     4467          SUB     A3,A7
    3579 00011fc0     2607          SLL     16,A7
    3580 00011fd0     1429          DEC     A9
    3581 00011fe0     cb08          JRNZ    WE_SET_XPOS
    3582 00011ff0     09c5          MOVI    TYPE_MESS1,A5
         00012000     0110  
    3583 00012010     4c60          MOVE    A3,A0
    3584 00012020     03a0          NEG     A0
    3585 00012030     09e7          MOVI    [BUFF,0],A7
         00012040 00190000  
    3586 00012060     1320          ADDK    BUFF,A0
    3587 00012070           WE_SET_XPOS
    3588 00012070     2600          SLL     16,A0
    3589 00012080     b20d          MOVE    A0,*A13(PDATA+120H),L
         00012090     0220  
    3590 000120a0     b2ed          MOVE    A7,*A13(PDATA+100H),L
         000120b0     0200  
    3591 000120c0     09e1          MOVI    [230+4,0],A1
         000120d0 00ea0000  
    3592 000120f0     4eb3          MOVE    B5,A3
    3593 00012100     1023          ADDK    1,A3
    3594 00012110     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00012120 0000a102  
    3595                    
    3596 00012140     56c6          CLR     A6
    3597 00012150     56e7          CLR     A7
    3598 00012160     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A9,A10
         00012170     ff60  
    3599 00012180     0d5f          calla   BEGINOBJ
         00012190 00000000! 
    3600                    
    3601                    
    3602 000121b0     b700          move    *a8(OIMG),a0,L
         000121c0     0170  
    3603 000121d0     0b60          cmpi    SECWND09,a0
         000121e0 ffffffff! 
    3604 00012200     cb07          jrnz    xsbwnospec
    3605                    
    3606 00012210                   CREATE0 flash_2ndwind
    3607 00012280           xsbwnospec
    3608                    
    3609                    
    3610 00012280     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A9,A10
         00012290     06ff  
    3611 000122a0                   PUSH    A8
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   85

    3612                    
    3613 000122b0     09ee          MOVI    WHICH_BONUS_2,A14
         000122c0 00012d50' 
    3614 000122e0     0b62          CMPI    xDAMAGE,A2
         000122f0 ffffffff! 
    3615 00012310     ca0b          JREQ    WE_HAVE_NUMBERS
    3616 00012320     0b62          CMPI    HITCOMBO,A2
         00012330 ffffffff! 
    3617 00012350     ca07          JREQ    WE_HAVE_NUMBERS
    3618 00012360     09ee          MOVI    WHICH_BONUS_1,A14
         00012370 00012e90' 
    3619 00012390     0b62          CMPI    HITCOMBO2,A2
         000123a0 ffffffff! 
    3620 000123c0     cb23          JRNE    NO_NEED_FOR_THIRD_OBJ
    3621 000123d0           WE_HAVE_NUMBERS
    3622 000123d0     278a          SLL     32-4,A10
    3623 000123e0     2d2a          SRL     32-4-5,A10              ;*32
    3624 000123f0     41ca          ADD     A14,A10
    3625 00012400     8742          MOVE    *A10,A2,L
    3626 00012410     098f          MMTM    SP,A0,A1,A3,A4,A5,A6,A7,A11
         00012420     df10  
    3627 00012430     0d5f          calla   BEGINOBJ
         00012440 00000000! 
    3628 00012460     09af          MMFM    SP,A0,A1,A3,A4,A5,A6,A7,A11
         00012470     08fb  
    3629 00012480     4d0a          MOVE    A8,A10
    3630                    
    3631 00012490     4d67          MOVE    A11,A7
    3632 000124a0     2787          SLL     32-4,A7
    3633 000124b0     ca14          JRZ     NO_NEED_FOR_THIRD_OBJ
    3634 000124c0     2d27          SRL     32-4-5,A7               ;*32
    3635 000124d0     0b27          ADDI    WHICH_BONUS_2,A7
         000124e0 00012d50' 
    3636 00012500     86e2          MOVE    *A7,A2,L
    3637 00012510     56e7          CLR     A7
    3638 00012520     098f          MMTM    SP,A0,A1,A5,A6,A7
         00012530     c700  
    3639 00012540     0b4b          CMPI    1,A11
         00012550     fffe  
    3640 00012560     cb03          JRNE    NO_REPOS_THIS_NUM
    3641 00012570     0b20          ADDI    [4,0],A0
         00012580 00040000  
    3642 000125a0           NO_REPOS_THIS_NUM
    3643 000125a0     0d5f          calla   BEGINOBJ
         000125b0 00000000! 
    3644 000125d0     09af          MMFM    SP,A0,A1,A5,A6,A7
         000125e0     00e3  
    3645 000125f0     4d0b          MOVE    A8,A11
    3646 00012600           NO_NEED_FOR_THIRD_OBJ
    3647                    
    3648 00012600     b502          MOVE    *A8(OSIZEX),A2
         00012610     0130  
    3649 00012620     09c3          MOVI    395,A3
         00012630     018b  
    3650 00012640     4443          SUB     A2,A3
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   86

    3651 00012650     0be3          SUBI    BUFF,A3
         00012660     ffe6  
    3652 00012670     2600          SLL     16,A0
    3653 00012680     4460          SUB     A3,A0
    3654 00012690     09e2          MOVI    MVEBAR_B,A2
         000126a0 00000000! 
    3655 000126c0     09e4          movi    DMAWNZ|M_FLIPH|M_3D|M_SCRNREL,a4        ;DMA flags
         000126d0 0000a112  
    3656 000126f0     4d29          MOVE    A9,A9
    3657 00012700     ca0b          JRZ     BAR_SET
    3658 00012710     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00012720 0000a102  
    3659 00012740     09e2          MOVI    MVEBAR_R,A2
         00012750 00000000! 
    3660 00012770     b700          MOVE    *A8(OXVAL),A0,L
         00012780     0080  
    3661 00012790     0d00          SUBI    [BUFF,0],A0
         000127a0 ffe6ffff  
    3662 000127c0           BAR_SET
    3663 000127c0     4eb3          MOVE    B5,A3
    3664 000127d0     0d5f          calla   BEGINOBJ
         000127e0 00000000! 
    3665 00012800     4d09          MOVE    A8,A9
    3666 00012810                   PULL    A8
    3667                    
    3668 00012820     09c3          MOVI    ZIP_SPEED,A3
         00012830     0018  
    3669 00012840           MOVE_IT_ON
    3670 00012840     b7a0          MOVE    *A13(PDATA+100H),A0,L
         00012850     0200  
    3671 00012860     0d3f          CALLR   MOVE_BARS
         00012870     0032  
    3672 00012880                   PUSHP   A3
    3673 00012890                   SLEEPK  1
    3674 000128d0                   PULLP   A3
    3675 000128e0     3d63          DSJS    A3,MOVE_IT_ON
    3676                    
    3677 000128f0                   SLEEP   50
    3678                    
    3679 00012940     09c3          MOVI    ZIP_SPEED,A3
         00012950     0018  
    3680 00012960           MOVE_IT_OFF
    3681 00012960     b7a0          MOVE    *A13(PDATA+120H),A0,L
         00012970     0220  
    3682 00012980     2020          SLA     1,A0
    3683 00012990     0d3f          CALLR   MOVE_BARS
         000129a0     001f  
    3684 000129b0                   PUSHP   A3
    3685 000129c0                   SLEEPK  1
    3686 00012a00                   PULLP   A3
    3687 00012a10     3d83          DSJS    A3,MOVE_IT_OFF
    3688                    
    3689 00012a20     0d5f          CALLA   DELOBJA8
         00012a30 00000000! 
    3690 00012a50     4d28          MOVE    A9,A8
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   87

    3691 00012a60     0d5f          CALLA   DELOBJA8
         00012a70 00000000! 
    3692 00012a90     4d48          MOVE    A10,A8
    3693 00012aa0     ca03          JRZ     NO_A10_3
    3694 00012ab0     0d5f          CALLA   DELOBJA8
         00012ac0 00000000! 
    3695 00012ae0           NO_A10_3
    3696 00012ae0     4d68          MOVE    A11,A8
    3697 00012af0     ca03          JRZ     NO_A11_3
    3698 00012b00     0d5f          CALLA   DELOBJA8
         00012b10 00000000! 
    3699 00012b30           NO_A11_3
    3700 00012b30                   PULLP   A9
    3701 00012b40     5600          CLR     A0
    3702 00012b50     0d3f          CALLR   SET_MESS_FLAGS
         00012b60     fd42  
    3703                    
    3704 00012b70                   DIE
    3705                    
    3706 00012ba0           MOVE_BARS
    3707 00012ba0                   PUSH    A8
    3708 00012bb0     b701          MOVE    *A8(OXVAL),A1,L
         00012bc0     0080  
    3709 00012bd0     4420          SUB     A1,A0
    3710 00012be0     2ba0          SRA     3,A0
    3711                    
    3712 00012bf0     0d3f          CALLR   MOVE_THIS_PART
         00012c00     000e  
    3713 00012c10     4d28          MOVE    A9,A8
    3714 00012c20     ca0a          JRZ     NO_A11_PART
    3715 00012c30     0d3f          CALLR   MOVE_THIS_PART
         00012c40     000a  
    3716 00012c50     4d48          MOVE    A10,A8
    3717 00012c60     ca02          JRZ     NO_A10_PART
    3718 00012c70     0d3f          CALLR   MOVE_THIS_PART
         00012c80     0006  
    3719 00012c90           NO_A10_PART
    3720 00012c90     4d68          MOVE    A11,A8
    3721 00012ca0     ca02          JRZ     NO_A11_PART
    3722 00012cb0     0d3f          CALLR   MOVE_THIS_PART
         00012cc0     0002  
    3723 00012cd0           NO_A11_PART
    3724 00012cd0                   PULL    A8
    3725 00012ce0     0960          RETS
    3726                    
    3727 00012cf0           MOVE_THIS_PART
    3728 00012cf0     b702          MOVE    *A8(OXVAL),A2,L
         00012d00     0080  
    3729 00012d10     4002          ADD     A0,A2
    3730 00012d20     b248          MOVE    A2,*A8(OXVAL),L
         00012d30     0080  
    3731 00012d40     0960          RETS
    3732                    
    3733 00012d50           WHICH_BONUS_2
    3734 00012d50 00000000!         .LONG   X0X,X1X,X2X
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   88

    3735 00012db0 00000000!         .LONG   X3X,X4X,X5X
    3736 00012e10 00000000!         .LONG   X6X,X7X,X8X
    3737 00012e70 00000000!         .LONG   X9X
    3738                    
    3739 00012e90           WHICH_BONUS_1
    3740 00012e90 00000000!         .LONG   X0X2,X1X2,X2X2
    3741 00012ef0 00000000!         .LONG   X3X2,X4X2,X5X2
    3742 00012f50 00000000!         .LONG   X6X2,X7X2,X8X2
    3743 00012fb0 00000000!         .LONG   X9X2
    3744                    
    3745              1800  Z_FORWARD       .EQU    1800H
    3746                    
    3747 00012fd0            SUBR   SHIFT_BARS_IN_Z
    3748 00012fd0     5600          CLR     A0
    3749 00012fe0     0580          MOVE    A0,@LAST_FLIP
         00012ff0 00000870- 
    3750 00013010           SHIFT_BARS_IN_Z_MOTION
    3751 00013010     07a0          MOVE    @WORLDTLY,A0,L
         00013020 00000000! 
    3752 00013040     07a1          MOVE    @ZFLIP_POS_VAR,A1,L
         00013050 000008d0- 
    3753 00013070     4820          CMP     A1,A0
    3754 00013080     c411          JRLT    CHECK_IF_WE_ALREADY_FLIPPED_BACK
    3755                    
    3756 00013090     05a0          MOVE    @LAST_FLIP,A0
         000130a0 00000870- 
    3757 000130c0     cb17          JRNZ    YES_WE_DID
    3758 000130d0     1820          MOVK    1,A0
    3759 000130e0     0580          MOVE    A0,@LAST_FLIP
         000130f0 00000870- 
    3760 00013110     0d3f          CALLR   SHIFT_BARS_FORWARD
         00013120     0018  
    3761 00013130                   SLOOP   4,SHIFT_BARS_IN_Z_MOTION
    3762                    
    3763 000131a0           CHECK_IF_WE_ALREADY_FLIPPED_BACK
    3764 000131a0     05a0          MOVE    @LAST_FLIP,A0
         000131b0 00000870- 
    3765 000131d0     ca06          JRZ     YES_WE_DID
    3766 000131e0     5600          CLR     A0
    3767 000131f0     0580          MOVE    A0,@LAST_FLIP
         00013200 00000870- 
    3768 00013220     0d3f          CALLR   SHIFT_BARS_BACK
         00013230     001d  
    3769 00013240           YES_WE_DID
    3770 00013240                   SLOOP   4,SHIFT_BARS_IN_Z_MOTION
    3771                    
    3772 000132b0           SHIFT_BARS_FORWARD
    3773 000132b0     09e8          movi    OBJLST,a8
         000132c0 00000000! 
    3774 000132e0     09c2          movi    bak_z,A2
         000132f0     00c8  
    3775 00013300     09c3          movi    name_z,A3
         00013310     00cb  
    3776 00013320     09c4          movi    Z_FORWARD,A4
         00013330     1800  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   89

    3777 00013340     c009          JRUC    DONT_SHIFT_IT_FORWARD
    3778 00013350           STILL_MORE_TO_CHECK
    3779 00013350     b501          MOVE    *A8(OZPOS),A1
         00013360     00d0  
    3780 00013370     4841          CMP     a2,A1
    3781 00013380     c405          JRLT    DONT_SHIFT_IT_FORWARD
    3782 00013390     4861          CMP     a3,A1
    3783 000133a0     c703          JRGT    DONT_SHIFT_IT_FORWARD
    3784 000133b0           SHIFT_IT_FORWARD
    3785 000133b0     4081          ADD     a4,A1
    3786 000133c0     b028          MOVE    A1,*A8(OZPOS)
         000133d0     00d0  
    3787 000133e0           DONT_SHIFT_IT_FORWARD
    3788 000133e0     8708          MOVE    *A8,A8,L
    3789 000133f0     cbf5          JRNZ    STILL_MORE_TO_CHECK
    3790 00013400     0960          RETS
    3791                    
    3792 00013410           SHIFT_BARS_BACK
    3793 00013410     09e8          movi    OBJLST,a8
         00013420 00000000! 
    3794 00013440     09c2          movi    bak_z+Z_FORWARD,A2
         00013450     18c8  
    3795 00013460     09c3          movi    name_z+Z_FORWARD,A3
         00013470     18cb  
    3796 00013480     09c4          movi    Z_FORWARD,A4
         00013490     1800  
    3797 000134a0     c009          JRUC    DONT_SHIFT_IT_BACK
    3798 000134b0           STILL_MORE_TO_CHECK_B
    3799 000134b0     b501          MOVE    *A8(OZPOS),A1
         000134c0     00d0  
    3800 000134d0     4841          CMP     a2,A1
    3801 000134e0     c405          JRLT    DONT_SHIFT_IT_BACK
    3802 000134f0     4861          CMP     a3,A1
    3803 00013500     c703          JRGT    DONT_SHIFT_IT_BACK
    3804 00013510           SHIFT_IT_BACK
    3805 00013510     4481          SUB     a4,A1
    3806 00013520     b028          MOVE    A1,*A8(OZPOS)
         00013530     00d0  
    3807 00013540           DONT_SHIFT_IT_BACK
    3808 00013540     8708          MOVE    *A8,A8,L
    3809 00013550     cbf5          JRNZ    STILL_MORE_TO_CHECK_B
    3810 00013560     0960          RETS
    3811                    
    3812              000a  END_BUFF        .equ    10
    3813              001e  END_POS .EQU    30
    3814              0050  END_YPOS        .EQU    80
    3815              0004  TURM_OFF        .EQU    4
    3816                    
    3817 00013570           WHICH_ROUND
    3818 00013570 00000000!         .LONG   FIRSTFAL,SECNDFAL,MATCHFAL
    3819                    
    3820 000135d0           CREATE_END_ROUND_TOP
    3821 000135d0     24a9          SLL     5,A9
    3822 000135e0     0b29          ADDI    WHICH_ROUND,A9
         000135f0 00013570' 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   90

    3823 00013610     8722          MOVE    *A9,A2,L
    3824                    
    3825 00013620     5621          CLR     A1
    3826 00013630     b22d          MOVE    A1,*A13(PDATA+140),L
         00013640     018c  
    3827                    
    3828 00013650     09e1          MOVI    [END_POS+150+TURM_OFF,0],A1
         00013660 00b80000  
    3829 00013680     09e0          MOVI    [400+END_BUFF+150+TURM_OFF,0],A0
         00013690 02340000  
    3830 000136b0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         000136c0 0000a102  
    3831 000136e0     4d6b          MOVE    A11,A11
    3832 000136f0     cb06          JRNZ    WHICH_TEXT_SET
    3833 00013700     09e1          MOVI    [400-END_POS-150,0],A1
         00013710 00dc0000  
    3834 00013730     09e0          MOVI    [0-END_BUFF-150,0],A0
         00013740 ff600000  
    3835 00013760           WHICH_TEXT_SET
    3836 00013760     b22d          MOVE    A1,*A13(PDATA+100H),L
         00013770     0200  
    3837 00013780     09e1          MOVI    [END_YPOS,0],A1
         00013790 00500000  
    3838 000137b0     09c3          MOVI    1803H,A3
         000137c0     1803  
    3839 000137d0     09c5          MOVI    CLSNEUT|TYPTEXT|SUBMES1,A5
         000137e0     0702  
    3840 000137f0     56c6          CLR     A6
    3841 00013800     56e7          CLR     A7
    3842 00013810     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7
         00013820     ff00  
    3843 00013830     0d5f          calla   BEGINOBJ
         00013840 00000000! 
    3844 00013860     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7
         00013870     00ff  
    3845 00013880     4d09          MOVE    A8,A9
    3846                    
    3847 00013890     09e1          MOVI    [END_POS+TURM_OFF,0],A1
         000138a0 00220000  
    3848 000138c0     09e0          MOVI    [400+END_BUFF+TURM_OFF,0],A0
         000138d0 019e0000  
    3849 000138f0     09e2          MOVI    MVEBAR_R,A2
         00013900 00000000! 
    3850 00013920     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00013930 0000a102  
    3851 00013950     4d6b          MOVE    A11,A11
    3852 00013960     cb0c          JRNZ    WHICH_BAR_SET
    3853 00013970     09e1          MOVI    [400-END_POS,0],A1
         00013980 01720000  
    3854 000139a0     09e0          MOVI    [0-END_BUFF,0],A0
         000139b0 fff60000  
    3855 000139d0     09e4          movi    DMAWNZ|M_FLIPH|M_3D|M_SCRNREL,a4        ;DMA flags
         000139e0 0000a112  
    3856 00013a00     09e2          MOVI    MVEBAR_B,A2
         00013a10 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   91

    3857 00013a30           WHICH_BAR_SET
    3858 00013a30     b22d          MOVE    A1,*A13(PDATA+120H),L
         00013a40     0220  
    3859 00013a50     09e1          MOVI    [END_YPOS,0],A1
         00013a60 00500000  
    3860 00013a80     09c3          MOVI    1800H,A3
         00013a90     1800  
    3861 00013aa0     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A9
         00013ab0     ff40  
    3862 00013ac0     0d5f          calla   BEGINOBJ
         00013ad0 00000000! 
    3863 00013af0     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A9
         00013b00     02ff  
    3864 00013b10     5600          CLR     A0
    3865 00013b20     b20d          MOVE    A0,*A13(PDATA+140H),L
         00013b30     0240  
    3866 00013b40                   JSRP    ZIP_HIM_ON
    3867 00013bb0                   DIE
    3868                    
    3869 00013be0           WHICH_WRESTLE_NAME
    3870 00013be0 00000000!         .LONG   BIGHRT
    3871 00013c00 00000000!         .LONG   BIGRAZ
    3872 00013c20 00000000!         .LONG   BIGUND
    3873 00013c40 00000000!         .LONG   BIGYOK
    3874 00013c60 00000000!         .LONG   BIGSHN
    3875 00013c80 00000000!         .LONG   BIGBAM
    3876 00013ca0 00000000!         .LONG   BIGDNK
    3877 00013cc0 00000000          .LONG   0
    3878 00013ce0 00000000!         .LONG   BIGLEX
    3879                    
    3880 00013d00           CREATE_END_ROUND_BOT
    3881 00013d00     b542          MOVE    *A10(WRESTLERNUM),A2
         00013d10     0590  
    3882 00013d20     24a2          SLL     5,A2
    3883 00013d30     0b22          ADDI    WHICH_WRESTLE_NAME,A2
         00013d40 00013be0' 
    3884 00013d60     8642          MOVE    *A2,A2,L
    3885                    
    3886 00013d70     09e1          MOVI    [END_POS+150+TURM_OFF,0],A1
         00013d80 00b80000  
    3887 00013da0     09e0          MOVI    [400+END_BUFF+150+TURM_OFF,0],A0
         00013db0 02340000  
    3888 00013dd0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00013de0 0000a102  
    3889 00013e00     4d6b          MOVE    A11,A11
    3890 00013e10     cb06          JRNZ    ON_LEFT
    3891 00013e20     09e1          MOVI    [400-END_POS-150,0],A1
         00013e30 00dc0000  
    3892 00013e50     09e0          MOVI    [0-END_BUFF-150,0],A0
         00013e60 ff600000  
    3893 00013e80           ON_LEFT
    3894 00013e80     b22d          MOVE    A1,*A13(PDATA+100H),L
         00013e90     0200  
    3895 00013ea0     09e1          MOVI    [END_YPOS+25,0],A1
         00013eb0 00690000  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   92

    3896 00013ed0     09c3          MOVI    1802H,A3
         00013ee0     1802  
    3897 00013ef0     09c5          MOVI    CLSNEUT|TYPTEXT|SUBMES1,A5
         00013f00     0702  
    3898 00013f10     56c6          CLR     A6
    3899 00013f20     56e7          CLR     A7
    3900 00013f30     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7
         00013f40     ff00  
    3901 00013f50     09f0          movi    WGSF_W_P1,b0
         00013f60 00000000! 
    3902 00013f80     0d5f          calla   BEGINOBJP
         00013f90 00000000! 
    3903 00013fb0     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7
         00013fc0     00ff  
    3904 00013fd0     4d09          MOVE    A8,A9
    3905                    
    3906 00013fe0     09e1          MOVI    [END_POS+TURM_OFF,0],A1
         00013ff0 00220000  
    3907 00014010     09e2          MOVI    AWDNMPL_R,A2
         00014020 00000000! 
    3908 00014040     09e0          MOVI    [400+END_BUFF+TURM_OFF,0],A0
         00014050 019e0000  
    3909 00014070     4d6b          MOVE    A11,A11
    3910 00014080     cb0c          JRNZ    ON_LEFT2
    3911 00014090     09e1          MOVI    [400-END_POS,0],A1
         000140a0 01720000  
    3912 000140c0     09e0          MOVI    [0-END_BUFF,0],A0
         000140d0 fff60000  
    3913 000140f0     09e2          MOVI    AWDNMPL_B,A2
         00014100 00000000! 
    3914 00014120     09e4          movi    DMAWNZ|M_FLIPH|M_3D|M_SCRNREL,a4        ;DMA flags
         00014130 0000a112  
    3915 00014150           ON_LEFT2
    3916 00014150     b22d          MOVE    A1,*A13(PDATA+120H),L
         00014160     0220  
    3917 00014170     b22d          MOVE    A1,*A13(PDATA+140H),L
         00014180     0240  
    3918 00014190     09e1          MOVI    [END_YPOS,0],A1
         000141a0 00500000  
    3919 000141c0     1423          DEC     A3
    3920 000141d0     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A9
         000141e0     ff40  
    3921 000141f0     0d5f          calla   BEGINOBJ
         00014200 00000000! 
    3922 00014220     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A9
         00014230     02ff  
    3923                    
    3924 00014240                   PUSH    A8
    3925 00014250     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00014260 0000a102  
    3926 00014280     09e2          MOVI    DIAGLGO_R,A2
         00014290 00000000! 
    3927 000142b0     4d6b          MOVE    A11,A11
    3928 000142c0     cb03          JRNZ    ON_LEFT3
    3929 000142d0     09e2          MOVI    DIAGLGO_B,A2
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   93

         000142e0 00000000! 
    3930 00014300           ON_LEFT3
    3931 00014300     1023          INC     A3
    3932 00014310     0d5f          calla   BEGINOBJ
         00014320 00000000! 
    3933 00014340     4d0a          MOVE    A8,A10
    3934 00014350                   PULL    A8
    3935 00014360                   JSRP    ZIP_HIM_ON
    3936 000143d0                   DIE
    3937                    
    3938 00014400           ZIP_HIM_ON
    3939 00014400     09c3          MOVI    ZIP_SPEED,A3
         00014410     0018  
    3940 00014420           MOVE_END_ON
    3941 00014420     b7a0          MOVE    *A13(PDATA+140H),A0,L
         00014430     0240  
    3942 00014440     ca05          JRZ     NOTHING_IN_A10
    3943 00014450                   PUSH    A8
    3944 00014460     4d48          MOVE    A10,A8
    3945 00014470     0d3f          CALLR   MOVE_THIS
         00014480     0017  
    3946 00014490                   PULL    A8
    3947 000144a0           NOTHING_IN_A10
    3948 000144a0     b7a0          MOVE    *A13(PDATA+100H),A0,L
         000144b0     0200  
    3949 000144c0     ca05          JRZ     NOTHING_IN_A9
    3950 000144d0                   PUSH    A8
    3951 000144e0     4d28          MOVE    A9,A8
    3952 000144f0     0d3f          CALLR   MOVE_THIS
         00014500     000f  
    3953 00014510                   PULL    A8
    3954 00014520           NOTHING_IN_A9
    3955 00014520     b7a0          MOVE    *A13(PDATA+120H),A0,L
         00014530     0220  
    3956 00014540     0d3f          CALLR   MOVE_THIS
         00014550     000a  
    3957 00014560                   PUSHP   A3
    3958 00014570                   SLEEPK  1
    3959 000145b0                   PULLP   A3
    3960 000145c0     3f63          DSJS    A3,MOVE_END_ON
    3961 000145d0                   RETP
    3962                    
    3963 00014600           MOVE_THIS
    3964 00014600     b701          MOVE    *A8(OXVAL),A1,L
         00014610     0080  
    3965 00014620     4420          SUB     A1,A0
    3966 00014630     2ba0          SRA     3,A0
    3967 00014640     c000          JRUC    MOVE_THIS_PART
         00014650     fe69  
    3968                    
    3969                    
    3970              014c  END_IPOS1       .EQU    332
    3971              0124  END_IPOS2       .EQU    292
    3972              0036  END_IYPOS       .EQU    54
    3973                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   94

    3974 00014660           CREATE_END_ROUND_ICON
    3975                    
    3976                            .ref    wrestler_count_proc
    3977                            .ref    wrestler_count
    3978                    
    3979 00014660     07a0          move    @wrestler_count_proc,a0,L       ; Does the counter proc exist ?
         00014670 00000000! 
    3980 00014690     ca07          jrz     xsbwno_wc_proc                  ; br = no
    3981                    
    3982 000146a0     57ce          clr     a14
    3983 000146b0     058e          move    a14,@wrestler_count             ; Write it back
         000146c0 00000000! 
    3984                    
    3985 000146e0     182e          movk    1,a14                           ; Make counter proc wakeup on next tick
    3986 000146f0     b1c0          move    a14,*a0(PTIME)
         00014700     0030  
    3987 00014710           xsbwno_wc_proc
    3988                    
    3989                    
    3990                    
    3991 00014710     09f4          MOVI    [END_IPOS1+30,0],B4
         00014720 016a0000  
    3992 00014740     09f5          MOVI    [400-END_IPOS1-30,0],B5
         00014750 00260000  
    3993 00014770     09f6          MOVI    [END_IPOS1,0],B6
         00014780 014c0000  
    3994 000147a0     09f7          MOVI    [400-END_IPOS1,0],B7
         000147b0 00440000  
    3995                    
    3996 000147d0     05a1          MOVE    @p1rounds,a1
         000147e0 00000000! 
    3997 00014800     4d6b          MOVE    A11,A11
    3998 00014810     ca03          JRZ     GOT_RIGHT_SIDE
    3999 00014820     05a1          MOVE    @p2rounds,a1
         00014830 00000000! 
    4000 00014850           GOT_RIGHT_SIDE
    4001 00014850     1421          DEC     A1
    4002 00014860     ca0c          JRZ     DO_THE_RIGHT_ROUND
    4003                    
    4004 00014870     09f4          MOVI    [END_IPOS2+30,0],B4
         00014880 01420000  
    4005 000148a0     09f5          MOVI    [400-END_IPOS2-30,0],B5
         000148b0 004e0000  
    4006 000148d0     09f6          MOVI    [END_IPOS2,0],B6
         000148e0 01240000  
    4007 00014900     09f7          MOVI    [400-END_IPOS2,0],B7
         00014910 006c0000  
    4008 00014930           DO_THE_RIGHT_ROUND
    4009                    
    4010 00014930     5621          CLR     A1
    4011 00014940     b22d          MOVE    A1,*A13(PDATA+140),L
         00014950     018c  
    4012                    
    4013 00014960     09e2          MOVI    WWFICON10,A2
         00014970 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   95

    4014 00014990     4e91          MOVE    B4,A1
    4015 000149a0     09e0          MOVI    [400+END_BUFF+150,0],A0
         000149b0 02300000  
    4016 000149d0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         000149e0 0000a102  
    4017 00014a00     4d6b          MOVE    A11,A11
    4018 00014a10     cb04          JRNZ    WHICH_ICON_SET
    4019 00014a20     4eb1          MOVE    B5,A1
    4020 00014a30     09e0          MOVI    [0-END_BUFF-150,0],A0
         00014a40 ff600000  
    4021 00014a60           WHICH_ICON_SET
    4022 00014a60     b22d          MOVE    A1,*A13(PDATA+100H),L
         00014a70     0200  
    4023 00014a80     09e1          MOVI    [END_IYPOS,0],A1
         00014a90 00360000  
    4024 00014ab0     09c3          MOVI    1800h+200,A3
         00014ac0     18c8  
    4025 00014ad0     07a5          MOVE    @WORLDTLY,A5,L
         00014ae0 00000000! 
    4026 00014b00     07a6          MOVE    @ZFLIP_POS_VAR,A6,L
         00014b10 000008d0- 
    4027 00014b30     48c5          CMP     A6,A5
    4028 00014b40     c502          JRGE    IN_FORWARD_POS
    4029 00014b50     09c3          MOVI    200,A3
         00014b60     00c8  
    4030 00014b70           IN_FORWARD_POS
    4031 00014b70     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4                ;DMA flags
         00014b80 0000a102  
    4032 00014ba0     09c5          movi    TYPWWFICON,a5
         00014bb0     0140  
    4033 00014bc0     56c6          CLR     A6
    4034 00014bd0     56e7          CLR     A7
    4035 00014be0     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A9
         00014bf0     ff40  
    4036 00014c00     0d5f          calla   BEGINOBJ
         00014c10 00000000! 
    4037 00014c30     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A9
         00014c40     02ff  
    4038 00014c50     4d09          MOVE    A8,A9
    4039                    
    4040 00014c60     4ed1          MOVE    B6,A1
    4041 00014c70     09e0          MOVI    [400+END_BUFF,0],A0
         00014c80 019a0000  
    4042 00014ca0     09e2          MOVI    MVEBAR_R,A2
         00014cb0 00000000! 
    4043 00014cd0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00014ce0 0000a102  
    4044 00014d00     4d6b          MOVE    A11,A11
    4045 00014d10     cb0a          JRNZ    WHICH_BAR2_SET
    4046 00014d20     4ef1          MOVE    B7,A1
    4047 00014d30     09e0          MOVI    [0-END_BUFF,0],A0
         00014d40 fff60000  
    4048 00014d60     09e4          movi    DMAWNZ|M_FLIPH|M_3D|M_SCRNREL,a4        ;DMA flags
         00014d70 0000a112  
    4049 00014d90     09e2          MOVI    MVEBAR_B,A2
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   96

         00014da0 00000000! 
    4050 00014dc0           WHICH_BAR2_SET
    4051 00014dc0     b22d          MOVE    A1,*A13(PDATA+120H),L
         00014dd0     0220  
    4052 00014de0     b20d          MOVE    A0,*A13(PDATA+160H),L
         00014df0     0260  
    4053 00014e00     09e1          MOVI    [END_IYPOS,0],A1
         00014e10 00360000  
    4054 00014e30     09c3          MOVI    1800h+199,A3
         00014e40     18c7  
    4055 00014e50     07a5          MOVE    @WORLDTLY,A5,L
         00014e60 00000000! 
    4056 00014e80     07a6          MOVE    @ZFLIP_POS_VAR,A6,L
         00014e90 000008d0- 
    4057 00014eb0     48c5          CMP     A6,A5
    4058 00014ec0     c502          JRGE    IN_FORWARD_POS2
    4059 00014ed0     09c3          MOVI    199,A3
         00014ee0     00c7  
    4060 00014ef0           IN_FORWARD_POS2
    4061 00014ef0     09c5          MOVI    CLSNEUT|TYPTEXT|SUBMES1,A5
         00014f00     0702  
    4062 00014f10     56c6          CLR     A6
    4063 00014f20     56e7          CLR     A7
    4064 00014f30     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7
         00014f40     ff00  
    4065 00014f50     0d5f          calla   BEGINOBJ
         00014f60 00000000! 
    4066 00014f80     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7
         00014f90     00ff  
    4067                    
    4068 00014fa0                   JSRP    ZIP_HIM_ON
    4069 00015010                   SLEEP   20
    4070 00015060     09c1          MOVI    ICON_PID,A1
         00015070     0141  
    4071 00015080     4161          ADD     A11,A1
    4072 00015090     0d5f          CALLA   FIND_ANY_OTHERS
         000150a0 00015450' 
    4073 000150c0     09c0          MOVI    4DH,A0
         000150d0     004d  
    4074 000150e0     0d5f          CALLA   triple_sound
         000150f0 00000000! 
    4075 00015110     09e7          MOVI    MAKE_ICON_GLOW,A7
         00015120 00015310' 
    4076 00015140     0d5f          CALLA   GETPRC
         00015150 00000000! 
    4077 00015170     4d2b          MOVE    A9,A11
    4078 00015180     5729          CLR     A9
    4079 00015190     b32d          MOVE    A9,*A13(PDATA+100),L
         000151a0     0164  
    4080 000151b0     bbad          MOVE    *A13(PDATA+160H),*A13(PDATA+120H),L
         000151c0     0260  
         000151d0     0220  
    4081 000151e0                   JSRP    ZIP_HIM_ON
    4082                    
    4083 00015250     4d68          MOVE    A11,A8
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   97

    4084                    
    4085 00015260                   CREATE  FLASH_PID,MAYBE_A_SPARKLE
    4086 000152e0                   DIE
    4087                    
    4088 00015310           MAKE_ICON_GLOW
    4089 00015310     4d28          MOVE    A9,A8
    4090 00015320     09e1          MOVI    WWF_ICON_ANIM,A1
         00015330 00015520' 
    4091 00015350     0d5f          CALLA   setup_back_anim
         00015360 00000000! 
    4092 00015380                   JSRP    ANIM_CROWD
    4093 000153f0                   SLEEP   TSEC*10
    4094 00015440     c0ec          JRUC    MAKE_ICON_GLOW
    4095                    
    4096 00015450           FIND_ANY_OTHERS
    4097 00015450                   PUSH    A1
    4098 00015460     4c20          MOVE    A1,A0
    4099 00015470     09c1          MOVI    -1,A1
         00015480     ffff  
    4100 00015490     0d5f          CALLA   EXISTP
         000154a0 00000000! 
    4101 000154c0     ca03          JRZ     NO_MORE
    4102 000154d0     1821          MOVK    1,A1
    4103 000154e0     b020          MOVE    A1,*A0(PTIME)
         000154f0     0030  
    4104 00015500           NO_MORE
    4105 00015500                   PULL    A1
    4106 00015510     0960          RETS
    4107                    
    4108              8002  CANI_END                equ     2 + 8000H
    4109                    
    4110 00015520           WWF_ICON_ANIM
    4111 00015520                   WL      2,WWFICON01
    4112 00015550                   WL      2,WWFICON02
    4113 00015580                   WL      2,WWFICON03
    4114 000155b0                   WL      2,WWFICON04
    4115 000155e0                   WL      2,WWFICON05
    4116 00015610                   WL      2,WWFICON06
    4117 00015640                   WL      2,WWFICON07
    4118 00015670                   WL      2,WWFICON08
    4119 000156a0                   WL      2,WWFICON09
    4120 000156d0                   WL      2,WWFICON10
    4121 00015700     8002          .WORD   CANI_END
    4122                    
    4123 00015710           MAYBE_A_SPARKLE
    4124 00015710     09c0          MOVI    120,A0
         00015720     0078  
    4125 00015730     0d5f          CALLA   RNDRNG0
         00015740 00000000! 
    4126 00015760     0b00          ADDI    50,A0
         00015770     0032  
    4127 00015780     0d5f          CALLA   PRCSLP
         00015790 00000000! 
    4128 000157b0                   CREATE  FLASH_PID,ICON_SPARKLE
    4129 00015830     c0ed          JRUC    MAYBE_A_SPARKLE
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   98

    4130                    
    4131 00015840            SUBRP  ICON_SPARKLE
    4132                    
    4133 00015840     05ae          move    @reduce_bog,a14
         00015850 00000000! 
    4134 00015870     cb3a          jrnz    xsbwdie
    4135                    
    4136 00015880     18c0          MOVK    6,A0
    4137 00015890     0d5f          CALLA   RNDRNG0
         000158a0 00000000! 
    4138 000158c0     24a0          SLL     5,A0
    4139 000158d0     0b20          ADDI    WHERE_SPARKLE,A0
         000158e0 00015cf0' 
    4140 00015900     4c02          MOVE    A0,A2
    4141                    
    4142 00015910     b500          MOVE    *A8(OXPOS),A0
         00015920     0090  
    4143 00015930     844e          MOVE    *A2,A14
    4144 00015940     41c0          ADD     A14,A0
    4145                            
    4146 00015950     b501          MOVE    *A8(OYPOS),A1
         00015960     00b0  
    4147 00015970     b44e          MOVE    *A2(10H),A14
         00015980     0010  
    4148 00015990     41c1          ADD     A14,A1
    4149                    
    4150 000159a0     2600          SLL     16,A0
    4151 000159b0     2601          SLL     16,A1
    4152 000159c0     09e2          MOVI    SPRKLA01,A2
         000159d0 00000000! 
    4153 000159f0     b703          MOVE    *A8(OZVAL),A3,L
         00015a00     00c0  
    4154 00015a10     1023          INC     A3
    4155 00015a20     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00015a30 0000a102  
    4156 00015a50     09c5          movi    TYPWWFICON,a5
         00015a60     0140  
    4157 00015a70     56c6          CLR     A6
    4158 00015a80     56e7          CLR     A7
    4159 00015a90     0d5f          CALLA   BEGINOBJ
         00015aa0 00000000! 
    4160                    
    4161 00015ac0     1840          MOVK    2,A0
    4162 00015ad0     0d5f          CALLA   RNDRNG0
         00015ae0 00000000! 
    4163 00015b00     24a0          SLL     5,A0
    4164 00015b10     0b20          ADDI    WHICH_SPARKLE,A0
         00015b20 00015c50' 
    4165 00015b40     8601          MOVE    *A0,A1,L
    4166 00015b50     0d5f          calla   setup_back_anim
         00015b60 00000000! 
    4167 00015b80                   JSRP    ANIM_CROWD
    4168 00015bf0     0d5f          CALLA   DELOBJA8
         00015c00 00000000! 
    4169 00015c20           xsbwdie DIE
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   99

    4170                    
    4171                    
    4172 00015c50           WHICH_SPARKLE
    4173 00015c50 00015dd0'         .LONG   SPARKLE_1
    4174 00015c70 00016050'         .LONG   SPARKLE_2
    4175 00015c90 000162d0'         .LONG   SPARKLE_3
    4176 00015cb0 00016550'         .LONG   BSPARKLE1
    4177 00015cd0 00016830'         .LONG   BSPARKLE2
    4178                    
    4179                    
    4180 00015cf0           WHERE_SPARKLE
    4181 00015cf0 fff8fff2          .LONG   [-8,-14]
    4182 00015d10 0008fff7          .LONG   [8,-9]
    4183 00015d30 ffff0008          .LONG   [-1,8]
    4184 00015d50 0000000f          .LONG   [0,15]
    4185 00015d70 fff70013          .LONG   [-9,19]
    4186 00015d90 fff60002          .LONG   [-10,2]
    4187 00015db0 fffffffa          .LONG   [-1,-6]
    4188                    
    4189 00015dd0           SPARKLE_1
    4190 00015dd0                   WL      2,SPRKLA01
    4191 00015e00                   WL      2,SPRKLA02
    4192 00015e30                   WL      2,SPRKLA03
    4193 00015e60                   WL      2,SPRKLA04
    4194 00015e90                   WL      2,SPRKLA05
    4195 00015ec0                   WL      2,SPRKLA06
    4196 00015ef0                   WL      2,SPRKLA07
    4197 00015f20                   WL      2,SPRKLA08
    4198 00015f50                   WL      2,SPRKLA09
    4199 00015f80                   WL      2,SPRKLA10
    4200 00015fb0                   WL      2,SPRKLA11
    4201 00015fe0                   WL      2,SPRKLA12
    4202 00016010                   WL      2,SPRKLA13
    4203 00016040     8002          .WORD   CANI_END
    4204                    
    4205 00016050           SPARKLE_2
    4206 00016050                   WL      2,SPRKLB01
    4207 00016080                   WL      2,SPRKLB02
    4208 000160b0                   WL      2,SPRKLB03
    4209 000160e0                   WL      2,SPRKLB04
    4210 00016110                   WL      2,SPRKLB05
    4211 00016140                   WL      2,SPRKLB06
    4212 00016170                   WL      2,SPRKLB07
    4213 000161a0                   WL      2,SPRKLB08
    4214 000161d0                   WL      2,SPRKLB09
    4215 00016200                   WL      2,SPRKLB10
    4216 00016230                   WL      2,SPRKLB11
    4217 00016260                   WL      2,SPRKLB12
    4218 00016290                   WL      2,SPRKLB13
    4219 000162c0     8002          .WORD   CANI_END
    4220                    
    4221 000162d0           SPARKLE_3
    4222 000162d0                   WL      2,SPRKLC01
    4223 00016300                   WL      2,SPRKLC02
    4224 00016330                   WL      2,SPRKLC03
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  100

    4225 00016360                   WL      2,SPRKLC04
    4226 00016390                   WL      2,SPRKLC05
    4227 000163c0                   WL      2,SPRKLC06
    4228 000163f0                   WL      2,SPRKLC07
    4229 00016420                   WL      2,SPRKLC08
    4230 00016450                   WL      2,SPRKLC09
    4231 00016480                   WL      2,SPRKLC10
    4232 000164b0                   WL      2,SPRKLC11
    4233 000164e0                   WL      2,SPRKLC12
    4234 00016510                   WL      2,SPRKLC13
    4235 00016540     8002          .WORD   CANI_END
    4236                    
    4237 00016550           BSPARKLE1
    4238 00016550                   WL      2,BSPRKA01
    4239 00016580                   WL      2,BSPRKA02
    4240 000165b0                   WL      2,BSPRKA03
    4241 000165e0                   WL      2,BSPRKA04
    4242 00016610                   WL      2,BSPRKA05
    4243 00016640                   WL      2,BSPRKA06
    4244 00016670                   WL      2,BSPRKA07
    4245 000166a0                   WL      2,BSPRKA08
    4246 000166d0                   WL      2,BSPRKA09
    4247 00016700                   WL      2,BSPRKA10
    4248 00016730                   WL      2,BSPRKA11
    4249 00016760                   WL      2,BSPRKA12
    4250 00016790                   WL      2,BSPRKA13
    4251 000167c0                   WL      2,BSPRKA14
    4252 000167f0                   WL      2,BSPRKA15
    4253 00016820     8002          .WORD   CANI_END
    4254                    
    4255 00016830           BSPARKLE2
    4256 00016830                   WL      2,BSPRKB01
    4257 00016860                   WL      2,BSPRKB02
    4258 00016890                   WL      2,BSPRKB03
    4259 000168c0                   WL      2,BSPRKB04
    4260 000168f0                   WL      2,BSPRKB05
    4261 00016920                   WL      2,BSPRKB06
    4262 00016950                   WL      2,BSPRKB07
    4263 00016980                   WL      2,BSPRKB08
    4264 000169b0                   WL      2,BSPRKB09
    4265 000169e0                   WL      2,BSPRKB10
    4266 00016a10                   WL      2,BSPRKB11
    4267 00016a40                   WL      2,BSPRKB12
    4268 00016a70                   WL      2,BSPRKB13
    4269 00016aa0                   WL      2,BSPRKB14
    4270 00016ad0                   WL      2,BSPRKB15
    4271 00016b00     8002          .WORD   CANI_END
    4272                    
    4273          00040000  YSPEED  .EQU    [4,0]
    4274                    
    4275 00016b10           CREATE_PERFECT
    4276                    
    4277 00016b10     09c0          movi    CYCPID,a0
         00016b20     0110  
    4278 00016b30     5621          CLR     A1
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  101

    4279 00016b40     03e1          NOT     A1
    4280 00016b50     0d5f          CALLA   EXISTP
         00016b60 00000000! 
    4281 00016b80     cb00          JRNZ    NO_NEED_FOR_PERFECT
         00016b90     0085  
    4282                    
    4283 00016ba0     09c0          MOVI    0c4h,A0
         00016bb0     00c4  
    4284 00016bc0     0d5f          CALLA   triple_sound
         00016bd0 00000000! 
    4285                    
    4286 00016bf0     09e0          MOVI    [200,0],A0
         00016c00 00c80000  
    4287 00016c20     09e1          MOVI    [300,0],A1
         00016c30 012c0000  
    4288 00016c50     09e2          MOVI    PERFCT09,A2
         00016c60 00000000! 
    4289 00016c80     09c3          MOVI    1799H,A3
         00016c90     1799  
    4290 00016ca0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00016cb0 0000a102  
    4291 00016cd0     09c5          movi    TYPPERFECT,a5
         00016ce0     0170  
    4292 00016cf0     56c6          CLR     A6
    4293 00016d00     56e7          CLR     A7
    4294 00016d10     0d5f          CALLA   BEGINOBJ
         00016d20 00000000! 
    4295 00016d40     09e0          MOVI    YSPEED,A0
         00016d50 00040000  
    4296 00016d70     03a0          NEG     A0
    4297 00016d80     b208          MOVE    A0,*A8(OYVEL),L
         00016d90     0040  
    4298                    
    4299 00016da0                   PUSHP   A10
    4300 00016db0     09e9          MOVI    PERFECT_DISSOLVE_ANIM,A9
         00016dc0 00017f60' 
    4301 00016de0     09cb          MOVI    12,A11
         00016df0     000c  
    4302 00016e00     09ea          MOVI    PERFCT09,A10
         00016e10 00000000! 
    4303 00016e30                   CREATE  FX_PID,COPY_OBJ_AND_MOVE_UP
    4304                    
    4305 00016eb0                   PULLP   A10
    4306                    
    4307                    
    4308 00016ec0           xsbwwait_loop
    4309 00016ec0                   SLEEPK  1
    4310 00016f00     b500          move    *a8(OYPOS),a0
         00016f10     00b0  
    4311 00016f20     0b40          cmpi    100,a0
         00016f30     ff9b  
    4312 00016f40     c5f7          jrge    xsbwwait_loop
    4313 00016f50     5600          clr     a0
    4314 00016f60     b208          move    a0,*a8(OYVEL),L
         00016f70     0040  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  102

    4315 00016f80     09c0          movi    FX_PID,a0
         00016f90     0120  
    4316 00016fa0     5621          clr     a1
    4317 00016fb0     03e1          not     a1
    4318 00016fc0     0d5f          calla   KILALL
         00016fd0 00000000! 
    4319                    
    4320 00016ff0     b54a          MOVE    *A10(PLYRNUM),A10
         00017000     0580  
    4321 00017010     102a          INC     A10
    4322 00017020     05a0          move    @PERFECT_WINS,A0
         00017030 00000900- 
    4323 00017050     5140          and     a10,A0
    4324 00017060     ca08          JRZ     NOT_A_DOUBLE
    4325 00017070                   CREATE  ADD_INIT_PID,CREATE_DOUBLE
    4326                    
    4327 000170f0           NOT_A_DOUBLE
    4328                    
    4329 000170f0     05a0          move    @PERFECT_WINS,A0
         00017100 00000900- 
    4330 00017120     5540          or      a10,A0
    4331 00017130     0580          MOVE    A0,@PERFECT_WINS
         00017140 00000900- 
    4332                    
    4333 00017160     09e1          MOVI    PERFECT_FLASH_ANIM,A1
         00017170 00017da0' 
    4334 00017190     0d5f          calla   setup_back_anim
         000171a0 00000000! 
    4335 000171c0                   JSRP    ANIM_CROWD
    4336                    
    4337 00017230     09c0          MOVI    0A8H,A0
         00017240     00a8  
    4338 00017250     0d5f          calla   triple_sound
         00017260 00000000! 
    4339                    
    4340 00017280     09ea          MOVI    WHERE_PERFECT_SPARKLE,A10
         00017290 00018890' 
    4341 000172b0                   PUSH    A8
    4342 000172c0     b509          MOVE    *A8(OXPOS),A9
         000172d0     0090  
    4343 000172e0     b708          MOVE    *A8(OYVAL),A8,L
         000172f0     00a0  
    4344 00017300     ed28          MOVX    A9,A8
    4345 00017310     1849          MOVK    2,A9
    4346 00017320                   CREATE  FLASH_PID,SPRINKLE_GLINTS
    4347 000173a0                   PULL    A8
    4348 000173b0     09c9          MOVI    110,A9
         000173c0     006e  
    4349 000173d0     c000          JRUC    LOOK_FOR_IT
         000173e0     02b5  
    4350 000173f0           NO_NEED_FOR_PERFECT
    4351 000173f0                   DIE
    4352                    
    4353 00017420           CREATE_DOUBLE
    4354 00017420     09e0          MOVI    [200,0],A0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  103

         00017430 00c80000  
    4355 00017450     09e1          MOVI    [80,0],A1
         00017460 00500000  
    4356 00017480     09e2          MOVI    DOUBLE09,A2
         00017490 00000000! 
    4357 000174b0     09c3          MOVI    1799H,A3
         000174c0     1799  
    4358 000174d0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         000174e0 0000a102  
    4359 00017500     09c5          movi    TYPPERFECT,a5
         00017510     0170  
    4360 00017520     56c6          CLR     A6
    4361 00017530     56e7          CLR     A7
    4362 00017540     0d5f          CALLA   BEGINOBJ
         00017550 00000000! 
    4363                    
    4364 00017570     09e1          MOVI    DOUBLE_FLASH_ANIM,A1
         00017580 00017be0' 
    4365 000175a0     0d5f          calla   setup_back_anim
         000175b0 00000000! 
    4366 000175d0                   JSRP    ANIM_CROWD
    4367 00017640     09c9          MOVI    110,A9
         00017650     006e  
    4368 00017660     c000          JRUC    LOOK_FOR_IT
         00017670     028c  
    4369 00017680                   DIE
    4370                    
    4371 000176b0           COPY_OBJ_AND_MOVE_UP
    4372 000176b0                   PUSHP   A10
    4373 000176c0     4d0a          MOVE    A8,A10
    4374 000176d0           COPY_OBJ_AND_MOVE_UP2
    4375 000176d0     b741          MOVE    *A10(OYVAL),A1,L
         000176e0     00a0  
    4376 000176f0     09e0          MOVI    [200,0],A0
         00017700 00c80000  
    4377 00017720                   PULLP   A2
    4378 00017730                   PUSHP   A2
    4379 00017740     09c3          MOVI    1799H,A3
         00017750     1799  
    4380 00017760     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00017770 0000a102  
    4381 00017790     09c5          movi    TYPPERFECT,a5
         000177a0     0170  
    4382 000177b0     56c6          CLR     A6
    4383 000177c0     56e7          CLR     A7
    4384 000177d0     0d5f          CALLA   BEGINOBJ
         000177e0 00000000! 
    4385 00017800                   CREATE  OVRHED_PID,KILL_THEM_EVENTUALLY_EACH
    4386 00017880                   SLEEP   3
    4387 000178d0     c0df          JRUC    COPY_OBJ_AND_MOVE_UP2
    4388                    
    4389 000178e0           KILL_THEM_EVENTUALLY_EACH
    4390 000178e0     18cb          MOVK    6,A11
    4391 000178f0     4d29          MOVE    A9,A9
    4392 00017900     ca1c          JRZ     NORMAL_KILL
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  104

    4393 00017910           MOVE_IT_BACK
    4394 00017910     b501          MOVE    *A8(OZPOS),A1
         00017920     00d0  
    4395 00017930     1421          DEC     A1
    4396 00017940     b028          MOVE    A1,*A8(OZPOS)
         00017950     00d0  
    4397 00017960                   SLEEP   1
    4398 000179b0     3d6b          DSJS    A11,MOVE_IT_BACK
    4399 000179c0     4d21          MOVE    A9,A1
    4400 000179d0     0d5f          calla   setup_back_anim
         000179e0 00000000! 
    4401 00017a00                   JSRP    ANIM_CROWD
    4402 00017a70     0d5f          CALLA   DELOBJA8
         00017a80 00000000! 
    4403 00017aa0                   DIE
    4404                    
    4405 00017ad0           NORMAL_KILL
    4406 00017ad0     b501          MOVE    *A8(OZPOS),A1
         00017ae0     00d0  
    4407 00017af0     1421          DEC     A1
    4408 00017b00     b028          MOVE    A1,*A8(OZPOS)
         00017b10     00d0  
    4409 00017b20                   SLEEP   1
    4410 00017b70     3d6b          DSJS    A11,NORMAL_KILL
    4411 00017b80     0d5f          CALLA   DELOBJA8
         00017b90 00000000! 
    4412 00017bb0                   DIE
    4413                    
    4414 00017be0           DOUBLE_FLASH_ANIM
    4415 00017be0                   WL      2,DOUBLE01
    4416 00017c10                   WL      2,DOUBLE02
    4417 00017c40                   WL      2,DOUBLE03
    4418 00017c70                   WL      2,DOUBLE04
    4419 00017ca0                   WL      2,DOUBLE05
    4420 00017cd0                   WL      2,DOUBLE06
    4421 00017d00                   WL      2,DOUBLE07
    4422 00017d30                   WL      2,DOUBLE08
    4423 00017d60                   WL      2,DOUBLE09
    4424 00017d90     8002          .WORD   CANI_END
    4425                    
    4426 00017da0           PERFECT_FLASH_ANIM
    4427 00017da0                   WL      2,PERFCT01
    4428 00017dd0                   WL      2,PERFCT02
    4429 00017e00                   WL      2,PERFCT03
    4430 00017e30                   WL      2,PERFCT04
    4431 00017e60                   WL      2,PERFCT05
    4432 00017e90                   WL      2,PERFCT06
    4433 00017ec0                   WL      2,PERFCT07
    4434 00017ef0                   WL      2,PERFCT08
    4435 00017f20                   WL      2,PERFCT09
    4436 00017f50     8002          .WORD   CANI_END
    4437                    
    4438 00017f60           PERFECT_DISSOLVE_ANIM
    4439 00017f60                   WL      2,PERFDS01
    4440 00017f90                   WL      2,PERFDS02
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  105

    4441 00017fc0                   WL      2,PERFDS03
    4442 00017ff0                   WL      2,PERFDS04
    4443 00018020                   WL      2,PERFDS05
    4444 00018050                   WL      2,PERFDS06
    4445 00018080                   WL      2,PERFDS07
    4446 000180b0                   WL      2,PERFDS08
    4447 000180e0     8002          .WORD   CANI_END
    4448                    
    4449 000180f0            SUBR    RANDOM_SPARKLE
    4450                    
    4451 000180f0                   SLEEP   20
    4452 00018140     09c0          MOVI    FLASH_PID,A0
         00018150     0139  
    4453 00018160     09c1          MOVI    -1,A1
         00018170     ffff  
    4454 00018180     0d5f          CALLA   EXISTP
         00018190 00000000! 
    4455 000181b0     cbf3          JRNZ    RANDOM_SPARKLE
    4456                    
    4457 000181c0     09c0          MOVI    39,A0
         000181d0     0027  
    4458 000181e0     0d5f          CALLA   RNDRNG0
         000181f0 00000000! 
    4459 00018210     4c09          MOVE    A0,A9
    4460 00018220     09e8          MOVI    [102,7],A8
         00018230 00660007  
    4461 00018250     09ea          MOVI    WHERE_WRESTLMANIA_SPARKLES,A10
         00018260 00018ad0' 
    4462 00018280     4d2b          MOVE    A9,A11
    4463 00018290     24ab          SLL     5,A11
    4464 000182a0     414b          ADD     A10,A11
    4465 000182b0     1889          MOVK    4,A9
    4466 000182c0                   CREATE  FLASH_PID,START_SPARKLE
    4467 00018340                   SLOOP   30,RANDOM_SPARKLE
    4468                    
    4469 000183b0            SUBR   SPRINKLE_GLINTS
    4470 000183b0     56c6          CLR     A6
    4471 000183c0                   PUSHP   A6
    4472 000183d0           NEXT_SPARKLE
    4473 000183d0                   PULLP   A6
    4474 000183e0     4ccb          MOVE    A6,A11
    4475 000183f0     24ab          SLL     5,A11
    4476 00018400     414b          ADD     A10,A11
    4477 00018410     8761          MOVE    *A11,A1,L
    4478 00018420     1021          INC     A1
    4479 00018430     ca11          JRZ     NO_MORE_SPARKLE
    4480 00018440                   CREATE  FLASH_PID,START_SPARKLE
    4481 000184c0     1026          INC     A6
    4482 000184d0                   PUSHP   A6
    4483 000184e0                   SLOOP   5,NEXT_SPARKLE
    4484 00018550           NO_MORE_SPARKLE
    4485 00018550                   DIE
    4486                    
    4487 00018580           START_SPARKLE
    4488 00018580     4d00          MOVE    A8,A0
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  106

    4489 00018590     856e          MOVE    *A11,A14
    4490 000185a0     41c0          ADD     A14,A0
    4491 000185b0     4d01          MOVE    A8,A1
    4492 000185c0     2e01          SRL     16,A1
    4493 000185d0     b56e          MOVE    *A11(10H),A14
         000185e0     0010  
    4494 000185f0     41c1          ADD     A14,A1
    4495                    
    4496 00018600     2600          SLL     16,A0
    4497 00018610     2601          SLL     16,A1
    4498 00018620     09e2          MOVI    SPRKLA01,A2
         00018630 00000000! 
    4499 00018650     09c3          MOVI    1800H,A3
         00018660     1800  
    4500 00018670     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00018680 0000a102  
    4501 000186a0     56a5          CLR     A5
    4502 000186b0     56c6          CLR     A6
    4503 000186c0     56e7          CLR     A7
    4504 000186d0     0d5f          CALLA   BEGINOBJ
         000186e0 00000000! 
    4505 00018700     4d20          MOVE    A9,A0
    4506 00018710     0d5f          CALLA   RNDRNG0
         00018720 00000000! 
    4507 00018740     24a0          SLL     5,A0
    4508 00018750     0b20          ADDI    WHICH_SPARKLE,A0
         00018760 00015c50' 
    4509 00018780     8601          MOVE    *A0,A1,L
    4510 00018790     0d5f          calla   setup_back_anim
         000187a0 00000000! 
    4511 000187c0                   JSRP    ANIM_CROWD
    4512 00018830     0d5f          CALLA   DELOBJA8
         00018840 00000000! 
    4513 00018860                   DIE
    4514                    
    4515 00018890           WHERE_PERFECT_SPARKLE
    4516 00018890 fffaffb9          .LONG   [-6,-71]
    4517 000188b0 0000ffc0          .LONG   [0,-64]
    4518 000188d0 fff9ffcf          .LONG   [-7,-49]
    4519 000188f0 0005ffd6          .LONG   [5,-42]
    4520 00018910 fffeffdd          .LONG   [-2,-35]
    4521 00018930 0005ffe1          .LONG   [5,-31]
    4522 00018950 fff9ffee          .LONG   [-7,-18]
    4523 00018970 0005fff6          .LONG   [5,-10]
    4524 00018990 fffeffff          .LONG   [-2,-1]
    4525 000189b0 fff90009          .LONG   [-7,9]
    4526 000189d0 00050011          .LONG   [5,17]
    4527 000189f0 fff9001f          .LONG   [-7,31]
    4528 00018a10 00020027          .LONG   [2,39]
    4529 00018a30 fff90031          .LONG   [-7,49]
    4530 00018a50 0006003b          .LONG   [6,59]
    4531 00018a70 fffe0045          .LONG   [-2,69]
    4532 00018a90 fff9004a          .LONG   [-7,74]
    4533 00018ab0 ffffffff          .LONG   -1
    4534                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  107

    4535 00018ad0            SUBR    WHERE_WRESTLMANIA_SPARKLES
    4536 00018ad0 00050008          .LONG   [5,8]
    4537 00018af0 001d0016          .LONG   [29,22]
    4538 00018b10 0004002b          .LONG   [4,43]
    4539 00018b30 003c0032          .LONG   [60,50]
    4540 00018b50 00040041          .LONG   [4,65]
    4541 00018b70 001c004c          .LONG   [28,76]
    4542 00018b90 00380050          .LONG   [56,80]
    4543 00018bb0 000f0057          .LONG   [15,87]
    4544 00018bd0 0021005e          .LONG   [33,94]
    4545 00018bf0 00320069          .LONG   [50,105]
    4546 00018c10 0020006e          .LONG   [32,110]
    4547 00018c30 00040072          .LONG   [4,114]
    4548 00018c50 00400079          .LONG   [64,121]
    4549 00018c70 0038007d          .LONG   [56,125]
    4550 00018c90 001c0081          .LONG   [28,129]
    4551 00018cb0 000f009e          .LONG   [15,158]
    4552 00018cd0 0038009f          .LONG   [56,159]
    4553 00018cf0 000400b1          .LONG   [4,177]
    4554 00018d10 002100ba          .LONG   [33,186]
    4555 00018d30 001e00c8          .LONG   [30,200]
    4556 00018d50 000f00cb          .LONG   [15,203]
    4557 00018d70 002300dc          .LONG   [35,220]
    4558 00018d90 000400e1          .LONG   [4,225]
    4559 00018db0 002800ec          .LONG   [40,236]
    4560 00018dd0 00040101          .LONG   [4,257]
    4561 00018df0 000d0104          .LONG   [13,260]
    4562 00018e10 0004010f          .LONG   [4,271]
    4563 00018e30 003d0111          .LONG   [61,273]
    4564 00018e50 00380115          .LONG   [56,277]
    4565 00018e70 000f011e          .LONG   [15,286]
    4566 00018e90 00210123          .LONG   [33,291]
    4567 00018eb0 000f0135          .LONG   [15,309]
    4568 00018ed0 00250140          .LONG   [37,320]
    4569 00018ef0 0038014e          .LONG   [56,334]
    4570 00018f10 00210152          .LONG   [33,338]
    4571 00018f30 00040159          .LONG   [4,345]
    4572 00018f50 00200167          .LONG   [32,359]
    4573 00018f70 00040172          .LONG   [4,370]
    4574 00018f90 00380175          .LONG   [56,373]
    4575 00018fb0 0011017f          .LONG   [17,383]
    4576 00018fd0 ffffffff          .LONG   -1
    4577                    
    4578                    
    4579 00018ff0            SUBR   CREATE_TIMEOUT
    4580                    
    4581 00018ff0     09c0          MOVI    0c4h,A0
         00019000     00c4  
    4582 00019010     0d5f          CALLA   triple_sound
         00019020 00000000! 
    4583                    
    4584 00019040     09e0          MOVI    [200,0],A0
         00019050 00c80000  
    4585 00019070     09e1          MOVI    [300,0],A1
         00019080 012c0000  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  108

    4586 000190a0     09e2          MOVI    TIMEEX09,A2
         000190b0 00000000! 
    4587 000190d0     09c3          MOVI    1799H,A3
         000190e0     1799  
    4588 000190f0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00019100 0000a102  
    4589 00019120     56a5          CLR     A5
    4590 00019130     56c6          CLR     A6
    4591 00019140     56e7          CLR     A7
    4592 00019150     0d5f          CALLA   BEGINOBJ
         00019160 00000000! 
    4593                    
    4594 00019180     09e0          MOVI    YSPEED,A0
         00019190 00040000  
    4595 000191b0     03a0          NEG     A0
    4596 000191c0     b208          MOVE    A0,*A8(OYVEL),L
         000191d0     0040  
    4597                    
    4598 000191e0     09e9          MOVI    TIMEOUT_DISSOLVE_ANIM,A9
         000191f0 00019830' 
    4599 00019210     09cb          MOVI    12,A11
         00019220     000c  
    4600 00019230     09ea          MOVI    TIMEEX09,A10
         00019240 00000000! 
    4601 00019260                   CREATE  FX_PID,COPY_OBJ_AND_MOVE_UP
    4602 000192e0                   CREATE  FX_PID,HAVE_TO_MOVE_IT_TO
    4603                    
    4604 00019360                   SLEEP   50
    4605 000193b0     5600          CLR     A0
    4606 000193c0     b208          MOVE    A0,*A8(OYVEL),L
         000193d0     0040  
    4607 000193e0     09c0          MOVI    FX_PID,A0
         000193f0     0120  
    4608 00019400     5621          CLR     A1
    4609 00019410     03e1          NOT     A1
    4610 00019420     0d5f          CALLA   KILALL
         00019430 00000000! 
    4611                    
    4612 00019450                   SLEEP   10
    4613                    
    4614 000194a0     1884          MOVK    4,A4
    4615 000194b0           LOOP_TIMEOUT
    4616 000194b0                   PUSHP   A4
    4617 000194c0     09e1          MOVI    TIMEOUT_FLASH_ANIM,A1
         000194d0 00019670' 
    4618 000194f0     0d5f          calla   setup_back_anim
         00019500 00000000! 
    4619 00019520                   JSRP    ANIM_CROWD
    4620                    
    4621 00019590     07a0          MOVE    @match_time,A0,L
         000195a0 00000000! 
    4622 000195c0     0b60          CMPI    90009H,A0
         000195d0 fff6fff6  
    4623 000195f0     ca00          JREQ    JUMP_OUT
         00019600     00a0  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  109

    4624 00019610                   PULLP   A4
    4625 00019620     3f04          DSJS    A4,LOOP_TIMEOUT
    4626                    
    4627 00019630     09c9          MOVI    110-(3*18),A9
         00019640     0038  
    4628 00019650     c000          JRUC    LOOK_FOR_IT
         00019660     008d  
    4629                    
    4630 00019670           TIMEOUT_FLASH_ANIM
    4631 00019670                   WL      2,TIMEEX01
    4632 000196a0                   WL      2,TIMEEX02
    4633 000196d0                   WL      2,TIMEEX03
    4634 00019700                   WL      2,TIMEEX04
    4635 00019730                   WL      2,TIMEEX05
    4636 00019760                   WL      2,TIMEEX06
    4637 00019790                   WL      2,TIMEEX07
    4638 000197c0                   WL      2,TIMEEX08
    4639 000197f0                   WL      2,TIMEEX09
    4640 00019820     8002          .WORD   CANI_END
    4641                    
    4642 00019830           TIMEOUT_DISSOLVE_ANIM
    4643 00019830                   WL      2,TIMEDS01
    4644 00019860                   WL      2,TIMEDS02
    4645 00019890                   WL      2,TIMEDS03
    4646 000198c0                   WL      2,TIMEDS04
    4647 000198f0                   WL      2,TIMEDS05
    4648 00019920                   WL      2,TIMEDS06
    4649 00019950                   WL      2,TIMEDS07
    4650 00019980                   WL      2,TIMEDS08
    4651 000199b0     8002          .WORD   CANI_END
    4652                    
    4653 000199c0            SUBR   CREATE_DISQUAL
    4654                    
    4655 000199c0     09c0          MOVI    0c4h,A0
         000199d0     00c4  
    4656 000199e0     0d5f          CALLA   triple_sound
         000199f0 00000000! 
    4657                    
    4658 00019a10     09e0          MOVI    [200,0],A0
         00019a20 00c80000  
    4659 00019a40     09e1          MOVI    [300,0],A1
         00019a50 012c0000  
    4660 00019a70     09e2          MOVI    DISQUA09,A2
         00019a80 00000000! 
    4661 00019aa0     09c3          MOVI    1799H,A3
         00019ab0     1799  
    4662 00019ac0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00019ad0 0000a102  
    4663 00019af0     56a5          CLR     A5
    4664 00019b00     56c6          CLR     A6
    4665 00019b10     56e7          CLR     A7
    4666 00019b20     0d5f          CALLA   BEGINOBJ
         00019b30 00000000! 
    4667 00019b50     09e0          MOVI    YSPEED,A0
         00019b60 00040000  
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  110

    4668 00019b80     03a0          NEG     A0
    4669 00019b90     b208          MOVE    A0,*A8(OYVEL),L
         00019ba0     0040  
    4670                    
    4671 00019bb0     09e9          MOVI    DISQUAL_DISSOLVE_ANIM,A9
         00019bc0 0001a310' 
    4672 00019be0     09cb          MOVI    12,A11
         00019bf0     000c  
    4673 00019c00     09ea          MOVI    DISQUA09,A10
         00019c10 00000000! 
    4674 00019c30                   CREATE  FX_PID,COPY_OBJ_AND_MOVE_UP
    4675                    
    4676 00019cb0                   SLEEP   50
    4677 00019d00     5600          CLR     A0
    4678 00019d10     b208          MOVE    A0,*A8(OYVEL),L
         00019d20     0040  
    4679 00019d30     09c0          MOVI    FX_PID,A0
         00019d40     0120  
    4680 00019d50     5621          CLR     A1
    4681 00019d60     03e1          NOT     A1
    4682 00019d70     0d5f          CALLA   KILALL
         00019d80 00000000! 
    4683                    
    4684 00019da0     1884          MOVK    4,A4
    4685 00019db0           LOOP_DISQUAL
    4686 00019db0                   PUSHP   A4
    4687                    
    4688 00019dc0     09e1          MOVI    DISQUAL_FLASH_ANIM,A1
         00019dd0 0001a150' 
    4689 00019df0     0d5f          calla   setup_back_anim
         00019e00 00000000! 
    4690 00019e20                   JSRP    ANIM_CROWD
    4691                    
    4692 00019e90     07a0          MOVE    @match_time,A0,L
         00019ea0 00000000! 
    4693 00019ec0     0b60          CMPI    90009H,A0
         00019ed0 fff6fff6  
    4694 00019ef0     ca11          JREQ    JUMP_OUT
    4695 00019f00                   PULLP   A4
    4696 00019f10     3ee4          DSJS    A4,LOOP_DISQUAL
    4697                    
    4698 00019f20     09c9          MOVI    110-(3*18),A9
         00019f30     0038  
    4699 00019f40           LOOK_FOR_IT
    4700 00019f40                   SLEEP   2
    4701 00019f90     07a0          MOVE    @match_time,A0,L
         00019fa0 00000000! 
    4702 00019fc0     0b60          CMPI    90009H,A0
         00019fd0 fff6fff6  
    4703 00019ff0     ca01          JREQ    JUMP_OUT
    4704 0001a000     3da9          DSJS    A9,LOOK_FOR_IT
    4705 0001a010           JUMP_OUT
    4706 0001a010     0d5f          CALLA   DELOBJA8
         0001a020 00000000! 
    4707 0001a040                   DIE
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  111

    4708                    
    4709 0001a070           HAVE_TO_MOVE_IT_TO
    4710 0001a070     b701          MOVE    *A8(OYVEL),A1,L
         0001a080     0040  
    4711 0001a090     b702          MOVE    *A8(OYVAL),A2,L
         0001a0a0     00a0  
    4712 0001a0b0     4022          ADD     A1,A2
    4713 0001a0c0     b248          MOVE    A2,*A8(OYVAL),L
         0001a0d0     00a0  
    4714 0001a0e0                   SLOOP   1,HAVE_TO_MOVE_IT_TO
    4715                    
    4716 0001a150           DISQUAL_FLASH_ANIM
    4717 0001a150                   WL      2,DISQUA01
    4718 0001a180                   WL      2,DISQUA02
    4719 0001a1b0                   WL      2,DISQUA03
    4720 0001a1e0                   WL      2,DISQUA04
    4721 0001a210                   WL      2,DISQUA05
    4722 0001a240                   WL      2,DISQUA06
    4723 0001a270                   WL      2,DISQUA07
    4724 0001a2a0                   WL      2,DISQUA08
    4725 0001a2d0                   WL      2,DISQUA09
    4726 0001a300     8002          .WORD   CANI_END
    4727                    
    4728 0001a310           DISQUAL_DISSOLVE_ANIM
    4729 0001a310                   WL      2,DISQDS01
    4730 0001a340                   WL      2,DISQDS02
    4731 0001a370                   WL      2,DISQDS03
    4732 0001a3a0                   WL      2,DISQDS04
    4733 0001a3d0                   WL      2,DISQDS05
    4734 0001a400                   WL      2,DISQDS06
    4735 0001a430                   WL      2,DISQDS07
    4736 0001a460                   WL      2,DISQDS08
    4737 0001a490     8002          .WORD   CANI_END
    4738                    
    4739 0001a4a0            SUBR   PIN_FLASH_ANIM
    4740                    
    4741 0001a4a0                   WL      2,PINHIM01
    4742 0001a4d0                   WL      2,PINHIM02
    4743 0001a500                   WL      2,PINHIM03
    4744 0001a530                   WL      2,PINHIM04
    4745 0001a560                   WL      2,PINHIM05
    4746 0001a590                   WL      2,PINHIM06
    4747 0001a5c0                   WL      2,PINHIM07
    4748 0001a5f0                   WL      2,PINHIM08
    4749 0001a620                   WL      20,PINHIM09
    4750 0001a650     8002          .WORD   CANI_END
    4751                    
    4752                    
    4753 0001a660            SUBRP  set_winner
    4754                    
    4755                            ;first, establish cause of death.  Choices are time running out
    4756                            ; and loss of all health.
    4757 0001a660     07ae          move    @match_time,a14,L
         0001a670 00000000! 
    4758 0001a690     ca42          jrz     xsbwtmout
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  112

    4759                    
    4760                            ;time didn't run out, so either someone was pinned, which should
    4761                            ; only happen if everyone on his team is dead, or the last living
    4762                            ; member of a team died by ring-out.  Search through the wrestlers
    4763                            ; and award victory to the first live one we find.
    4764 0001a6a0     09c0          movi    NUM_WRES,a0
         0001a6b0     0007  
    4765 0001a6c0     09e1          movi    process_ptrs,a1
         0001a6d0 00000000! 
    4766 0001a6f0     5663          clr     a3
    4767                    
    4768 0001a700     9622  xsbwloop0       move    *a1+,a2,L
    4769 0001a710     ca0a          jrz     xsbwnxt0                ;skip inactive
    4770                    
    4771 0001a720     b44e          move    *a2(PLYRMODE),a14
         0001a730     05c0  
    4772 0001a740     0b4e          cmpi    MODE_DEAD,a14
         0001a750     fff6  
    4773 0001a760     ca05          jreq    xsbwnxt0                ;skip dead
    4774                    
    4775                            ;got a live one.  if he pinned, use him.  if not, save his pointer
    4776                            ; in case we find no pinner, but keep looking
    4777 0001a770     b44e          move    *a2(STATUS_FLAGS),a14
         0001a780     0b50  
    4778 0001a790     1fce          btst    B_DID_PIN,a14
    4779 0001a7a0     cb0e          jrnz    xsbwa2wins
    4780                    
    4781 0001a7b0     4c43          move    a2,a3
    4782                    
    4783 0001a7c0     3da0  xsbwnxt0        dsj     a0,xsbwloop0
    4784                    
    4785                            ;okay, nobody pinned.  did we find any live ones at all?
    4786 0001a7d0     4c62          move    a3,a2
    4787 0001a7e0     cb0a          jrnz    xsbwa2wins              ;yes, we saved a non-pinner.
    4788                    
    4789                            ;trouble.  we didn't find any live wrestlers, and there definitely
    4790                            ; should have been one.  This is really bad and should never happen,
    4791                            ; but just in case it does, give the win to the first valid wrestler
    4792                            ; we can find.
    4793                            .if DEBUG
    4794                            LOCKUP
    4795                            .endif
    4796 0001a7f0     09c0  xsbwbogus       movi    NUM_WRES,a0
         0001a800     0007  
    4797 0001a810     09e1          movi    process_ptrs,a1
         0001a820 00000000! 
    4798                    
    4799 0001a840     9622  xsbwloop1       move    *a1+,a2,L
    4800 0001a850     ca01          jrz     xsbwnxt1                ;skip inactive
    4801                    
    4802                            ;got one
    4803 0001a860     c002          jruc    xsbwa2wins
    4804                    
    4805 0001a870     3c80  xsbwnxt1        dsjs    a0,xsbwloop1
    4806                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  113

    4807                            ;good heavens!  no actives found at all!  no way is this ever gonna
    4808                            ; happen.  fuck it.  quit or something.
    4809 0001a880     c079          jruc    xsbwno_hits
    4810                    
    4811 0001a890           xsbwa2wins      ;a2 is process of winner
    4812                            ;increment pXrounds
    4813 0001a890     09e0          movi    p1rounds,a0
         0001a8a0 00000000! 
    4814 0001a8c0     09c1          movi    01h,a1          ;match_winner value for p1 side winning
         0001a8d0     0001  
    4815 0001a8e0     b444          move    *a2(PLYR_SIDE),a4
         0001a8f0     05b0  
    4816 0001a900     ca05          jrz     xsbwrok
    4817 0001a910     09e0          movi    p2rounds,a0
         0001a920 00000000! 
    4818 0001a940     09c1          movi    02h,a1          ;match_winner value for p1 side winning
         0001a950     0002  
    4819 0001a960     8404  xsbwrok move    *a0,a4
    4820 0001a970     1024          inc     a4
    4821                    
    4822                            ;if this is the final match (or royal rumble), increment it again.
    4823 0001a980     1024          inc     a4              ;increment, then dec if we shouldn't have.
    4824 0001a990     0d5f          calla   is_8_on_1
         0001a9a0 00000000! 
    4825 0001a9c0     c805          jrc     xsbwa4ok
    4826 0001a9d0     05ae          move    @royal_rumble,a14
         0001a9e0 00000000! 
    4827 0001aa00     cb01          jrnz    xsbwa4ok
    4828 0001aa10     1424          dec     a4
    4829 0001aa20     8080  xsbwa4ok        move    a4,*a0
    4830                    
    4831                            ;if pXwins == 2, set match_winner
    4832 0001aa30     0b44          cmpi    2,a4
         0001aa40     fffd  
    4833 0001aa50     cb03          jrne    xsbwno_mw
    4834 0001aa60     0581          move    a1,@match_winner
         0001aa70 00000000! 
    4835                    
    4836 0001aa90     b443  xsbwno_mw       move    *a2(PLYRNUM),a3
         0001aaa0     0580  
    4837 0001aab0     0960          rets
    4838                    
    4839 0001aac0           xsbwtmout       ;clock ran out on the round.  Award victory to the team with the
    4840                            ; highest average life points remaining.  In case of a tie, winner
    4841                            ; is the last team to land a hit.  If there have been no hits,
    4842                            ; we'll wanna drop out and go straight to game over, which I'll
    4843                            ; deal with later, probably by returning a -1 and letting the
    4844                            ; caller deal with it.
    4845                    
    4846                            ;If this was an 8-on-1 or 8-on-2 match, the CPU wins when time
    4847                            ; runs out.
    4848 0001aac0     07a2          move    @process_ptrs+40h,a2,L  ;first drone
         0001aad0 00000040! 
    4849 0001aaf0     0d5f          calla   is_8_on_1
         0001ab00 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  114

    4850 0001ab20     c8d6          jrc     xsbwa2wins
    4851 0001ab30     05ae          move    @royal_rumble,a14
         0001ab40 00000000! 
    4852 0001ab60     cbd2          jrnz    xsbwa2wins
    4853                    
    4854                            ;reggies:
    4855 0001ab70     5684          clr     a4      ;team 1 count
    4856 0001ab80     56a5          clr     a5      ;team 1 total
    4857 0001ab90     56c6          clr     a6      ;team 2 count
    4858 0001aba0     56e7          clr     a7      ;team 2 total
    4859                    
    4860 0001abb0     09c9          movi    NUM_WRES,a9
         0001abc0     0007  
    4861 0001abd0     09e8          movi    process_ptrs,a8
         0001abe0 00000000! 
    4862                    
    4863 0001ac00     970a  xsbwloop2       move    *a8+,a10,L
    4864 0001ac10     ca0d          jrz     xsbwnxt2                ;skip inactive
    4865                    
    4866 0001ac20     b541          move    *a10(PLYRNUM),a1
         0001ac30     0580  
    4867 0001ac40     0d5f          calla   get_health
         0001ac50 00005d40' 
    4868 0001ac70     b54e          move    *a10(PLYR_SIDE),a14
         0001ac80     05b0  
    4869 0001ac90     cb03          jrnz    xsbwt2
    4870                    
    4871                            ;on team 1
    4872 0001aca0     1024          inc     a4
    4873 0001acb0     4005          add     a0,a5
    4874 0001acc0     c002          jruc    xsbwnxt2
    4875                    
    4876 0001acd0           xsbwt2  ;on team 2
    4877 0001acd0     1026          inc     a6
    4878 0001ace0     4007          add     a0,a7
    4879                    
    4880 0001acf0     3e09  xsbwnxt2        dsj     a9,xsbwloop2
    4881                    
    4882                            ;compute the averages (we could check for the very likely case of
    4883                            ; the divisor being one, but there's no real need, as this is
    4884                            ; hardly a performance-critical event.)
    4885 0001ad00     5a85          divu    a4,a5
    4886 0001ad10     5ac7          divu    a6,a7
    4887                    
    4888 0001ad20     48a7          cmp     a5,a7
    4889 0001ad30     c416          jrlt    xsbwt1w
    4890 0001ad40     c717          jrgt    xsbwt2w
    4891                    
    4892 0001ad50           xsbwtie ;uh-oh.  Tie.  Find wrestler with most recent LAST_HIT_TIME and
    4893                            ; award the match to his team.  If everyone's LAST_HIT_TIME's are
    4894                            ; zero, nobody has landed a blow, so just quit to game over.
    4895                            ; LAST_HIT_TIME holds all 32 bits of PCNT, so we don't need to worry
    4896                            ; about wraparound.
    4897                    
    4898 0001ad50     09c9          movi    NUM_WRES,a9
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  115

         0001ad60     0007  
    4899 0001ad70     09e8          movi    process_ptrs,a8
         0001ad80 00000000! 
    4900 0001ada0     5600          clr     a0              ;current high LAST_HIT_TIME
    4901 0001adb0     5621          clr     a1              ;team with current high LAST_HIT_TIME
    4902                    
    4903 0001adc0     970a  xsbwloop4       move    *a8+,a10,L
    4904 0001add0     ca07          jrz     xsbwnxt4                ;skip inactive
    4905                    
    4906 0001ade0     b74e          move    *a10(LAST_HIT_TIME),a14,L
         0001adf0     0c50  
    4907 0001ae00     480e          cmp     a0,a14
    4908 0001ae10     c603          jrle    xsbwnxt4
    4909                    
    4910                            ;new champ.
    4911 0001ae20     4dc0          move    a14,a0
    4912 0001ae30     b541          move    *a10(PLYR_SIDE),a1
         0001ae40     05b0  
    4913                    
    4914 0001ae50     3d49  xsbwnxt4        dsj     a9,xsbwloop4
    4915                    
    4916 0001ae60                   TEST    a0
    4917 0001ae70     ca1a          jrz     xsbwno_hits
    4918 0001ae80                   TEST    a1
    4919 0001ae90     cb02          jrnz    xsbwt2w
    4920                            ;fall through to xsbwt1w
    4921                    
    4922 0001aea0           xsbwt1w ;team 1 wins
    4923 0001aea0     5684          clr     a4
    4924 0001aeb0     c001          jruc    xsbwfw
    4925                    
    4926 0001aec0           xsbwt2w ;team 2 wins
    4927 0001aec0     1824          movk    1,a4
    4928                    
    4929 0001aed0           xsbwfw  ;award win to first live wrestler with PLYR_SIDE equal to a4
    4930                    
    4931 0001aed0     18e0          movk    NUM_WRES,a0
    4932 0001aee0     09e1          movi    process_ptrs,a1
         0001aef0 00000000! 
    4933                    
    4934 0001af10     9622  xsbwloop3       move    *a1+,a2,L
    4935 0001af20     ca0c          jrz     xsbwnxt3                ;skip inactive
    4936                    
    4937 0001af30     b44e          move    *a2(PLYRMODE),a14
         0001af40     05c0  
    4938 0001af50     0b4e          cmpi    MODE_DEAD,a14
         0001af60     fff6  
    4939 0001af70     ca07          jreq    xsbwnxt3                ;skip dead
    4940                    
    4941 0001af80     b44e          move    *a2(PLYR_SIDE),a14
         0001af90     05b0  
    4942 0001afa0     49c4          cmp     a14,a4
    4943 0001afb0     cb03          jrne    xsbwnxt3                ;skip losers
    4944                    
    4945                            ;got one
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  116

    4946 0001afc0     b443          move    *a2(PLYRNUM),a3
         0001afd0     0580  
    4947 0001afe0     c08a          jruc    xsbwa2wins
    4948                    
    4949 0001aff0     3de0  xsbwnxt3        dsj     a0,xsbwloop3
    4950                    
    4951                            ;good heavens.  we didn't find ANYONE from that team.  This is
    4952                            ; a major error that should never happen.  Deal with it as in
    4953                            ; the 'no live wrestlers found' case above.
    4954                            .if DEBUG
    4955                            LOCKUP
    4956                            .endif
    4957 0001b000     c000          jruc    xsbwbogus
         0001b010     ff7d  
    4958                    
    4959 0001b020           xsbwno_hits
    4960                            ;battle ended in a tie with neither side landing a blow.  drop
    4961                            ; out to game over.
    4962 0001b020     09c2          movi    -1,a2
         0001b030     ffff  
    4963 0001b040     0960          rets
    4964                    
    4965                    
    4966 0001b050            SUBR   clear_combo_meter
    4967                    
    4968 0001b050     b5a1          move    *a13(PLYR_SIDE),a1
         0001b060     05b0  
    4969 0001b070     b5ab          move    *a13(PLYRNUM),a11
         0001b080     0580  
    4970 0001b090     c000          jruc    zero_combo_meter
         0001b0a0     f679  
    4971                    
    4972                    
    4973 0001b0b0            SUBR   halve_combo_meter
    4974                    
    4975 0001b0b0     b5a1          move    *a13(PLYR_SIDE),a1
         0001b0c0     05b0  
    4976 0001b0d0     b5ab          move    *a13(PLYRNUM),a11
         0001b0e0     0580  
    4977 0001b0f0     09c9          movi    MD_SIZE,a9
         0001b100     0090  
    4978 0001b110     5e29          mpyu    a1,a9
    4979 0001b120     0b29          addi    meter_data,a9
         0001b130 000001c0- 
    4980 0001b150     b728          move    *a9(MD_COMBO),a8,L
         0001b160     0070  
    4981 0001b170     4d65          move    a11,a5
    4982 0001b180                   X64     a5              ;x by PLT_SIZE
    4983 0001b190     0b25          addi    life_data,a5
         0001b1a0 00000000- 
    4984 0001b1c0     1942          movk    10,a2
    4985 0001b1d0     c000          jruc    draw_combo_meter
         0001b1e0     f673  
    4986                    
    4987                    
TMS340 COFF Macro Assembler Version 6.10     Mon Oct 30 16:54:57 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  117

    4988 0001b1f0            SUBR   clear_lifebar
    4989                    
    4990 0001b1f0     b5a0          move    *a13(PLYRNUM),a0
         0001b200     0580  
    4991 0001b210                   X64     a0
    4992 0001b220     0b20          addi    life_data,a0
         0001b230 00000000- 
    4993 0001b250     57ce          clr     a14
    4994 0001b260     b1c0          move    a14,*a0(PLT_LIFE)
         0001b270     0000  
    4995                    
    4996 0001b280     b5a0          move    *a13(PLYR_SIDE),a0
         0001b290     05b0  
    4997 0001b2a0     0d3f          callr   update_meter
         0001b2b0     ea60  
    4998                    
    4999 0001b2c0     0960          rets
    5000                    
    5001                    
    5002                            .end

 No Errors,  No Warnings
