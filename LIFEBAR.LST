TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                    **************************************************************
       2                    *
       3                    * Software:     Jason Skiles
       4                    * Initiated:    29 Oct 93
       5                    *
       6                    * COPYRIGHT (C) 1993 WILLIAMS ELECTRONICS GAMES, INC.
       7                    *
       8                    *.Last mod - 5/5/95 14:54
       9                    **************************************************************
      10                    
      11                            .file   "lifebar.asm"
      13                            .width  132
      14                            .option b,d,l,t
      15                            .mnolist
      16                    
      17                    
      18                            .include        "macros.h"
      19                            .include        "mproc.equ"             ;Mproc equates
      20                            .include        "display.equ"           ;Display proc equates
      21                            .include        "gsp.equ"               ;Gsp asm equates
      22                            .include        "game.equ"
      23                            .include        "plyr.equ"
      24                            .include        "sys.equ"
      25                            .include        "link.equ"
      26                            .include        "sound.h"
      27                            .include        "ring.equ"
      28                    
      29                            .include        "miscimg.glo"
      30                            .include        "fontsimg.glo"
      31                            .include        "sound.equ"
      32                            .include        "imgtbl.glo"
      33                            .include        "jjxm.h"
      34                    
      35                            ;temp! - 314
      36                            .if DEBUG
      37                            .include        "tmpdebug.h"
      38                            .endif
      39                    
      40                    *****************************************************************************
      41                    
      42                            .ref    reset_for_round,init_scroller,BGND_UD1
      43                            .ref    reset_for_round2,no_debris,flash_red
      44                            .ref    calc_match_time_2,ck_any_teammates
      45                    
      46                            .ref    change_anim1a,triple_sound,HALT,CLOSE_VERT_SCREEN_LINE
      47                            .ref    civanic,CR_STRTP,get_process_ptr,wres_collis_off
      48                            .ref    GET_ADJ,p2winstreak,ANIM_CROWD,update_timer,GAMSTATE
      49                            .ref    fight_debug,RNDRNG0,pal_getf,ring_bell,BEGINOBJ_TBL
      50                            .ref    PSTATUS2,match_over,p1rounds,is_8_on_1
      51                            .ref    OPEN_VERT_SCREEN_LINE,process_ptrs,SET_LOWER_VOL
      52                            .ref    GET_CREDITS,BINBCD,get_all_buttons_cur2,LINES_VERT
      53                            .ref    current_round,p1winstreak,CLEAR_SPEECH_REPEAT,p2rounds
      54                            .ref    VINCE_START_ROUND2_3,WHICH_SCREEN,do_game_over
      55                            .ref    CALL_MATCH_OVER,AUD1,setup_back_anim,DUMRETS
      56                            .ref    calc_match_time_1,match_time
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    2

      57                            .ref    ROLLING_COUNT,match_winner,PCNT,NUM_OPPS,is_final_match
      58                            .ref    ADD_VOICE,KILL_ALL_CHANNELS,END_MATCH_SPEECH
      59                            .ref    accumulate_awards,annc_rnd_winner_done
      60                            .ref    round_award,royal_rumble,buddy_mode_on
      61                            .ref    match_award,reduce_bog,get_live_bits
      62                            .ref    create_end_rnd_awards
      63                            .ref    award_ok_to_die
      64                            .ref    is_it_a_really_quick_win,increment_wincount
      65                            .ref    give_award_if_opponent_is_human
      66                            .ref    arm_comeback_award
      67                            .ref    check_for_award_for_big_comeback
      68                            .ref    check_for_award_for_winstreak
      69                            .ref    show_dufus_messages
      70                            .ref    CHANGE_SKIRTS2,INIT_SKIRTS
      71                            .ref    pal_clean,round_start_time,round_end_time
      72                            .ref    dboxes_on,do_fireworks
      73                            .ref    instant_combos_on,p1powerup_request
      74                            .ref    show_mk3_tip,MAYBE_HIGH_RISK
      75                            .ref    match_cnt,WGFS_W_P
      76                            .ref    temp_music
      77                            .ref    finish_completed
      78                    
      79                    *****************************************************************************
      80                    
      81                    ;player life/turbo data struct
      82              0000  PLT_LIFE        equ     0               ;UHW    life pixels (164 max)
      83              0010  PLT_CLIFE       equ     PLT_LIFE+10h    ;UHW    displayed life (164 max)
      84              0020  PLT_TURBO       equ     PLT_CLIFE+10h   ;UHW    turbo val (5400h max)
      85              0030  PLT_COMBO_SIZE  equ     PLT_TURBO+10h   ;UHW    combo bar size
      86              0040  PLT_SIZE        equ     PLT_COMBO_SIZE+010h
      87                    
      88                    ;NOTE that PLT_SIZE is 40h, so anytime we might otherwise use a multiply,
      89                    ; we do a X64 instead.  DO NOT change the size of this struct unless
      90                    ; you're prepared to do some cleanup.
      91                    
      92                    ;meter data struct
      93              0000  MD_LINK         equ     0               ;UHW    PLYRNUM for this meter
      94              0010  MD_LIFE         equ     MD_LINK+10h     ;UHL    life bar *obj
      95              0030  MD_LBAK         equ     MD_LIFE+20h     ;UHL    turbo bar *obj
      96              0050  MD_NAME         equ     MD_LBAK+20h     ;UHL    name *obj
      97              0070  MD_COMBO        equ     MD_NAME+20h     ;UHL    combo bar *obj
      98              0090  MD_SIZE         equ     MD_COMBO+20H
      99                    
     100                    
     101 00000000                   .bss    life_data,      NUM_WRES*PLT_SIZE
     102 000001c0                   .bss    meter_data,     2*MD_SIZE
     103 000002e0                   .bss    damage_imgs,    4*32
     104 00000360                   .bss    ram_lst,        32*40           ;For announce_match
     105 00000000                   BSSX    DAM_MULT,16
     106 00000870                   .BSS    LAST_FLIP,16
     107 00000000                   BSSX    combo_audit_done,16
     108 00000000                   BSSX    message_flag,32*2               ;Message already displayed bit
     109 00000000                   BSSX    ZFLIP_POS_VAR,32
     110 00000000                   BSSX    MUSIC_HAP,16
     111 00000000                   BSSX    PERFECT_WINS,16
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    3

     112 00000000                   BSSX    WINS_OBJ,32*3
     113                    
     114 00000000                   BSSX    fence1,4*32
     115                    
     116 00000000                   BSSX    MESSAGE_FLAGS,32
     117                    
     118 00000000                   BSSX    fence2,4*32
     119                    
     120 00000000                   BSSX    COMBO_FLASH_FLAG,32
     121 00000000                   BSSX    in_finish_move,16
     122 00000000                   BSSX    speed_adjustment,32             ;game speed damage adjustment
     123                    
     124                            ;temp! - 314
     125                            .if DEBUG
     126                            BSSX    event_data,EVENTSIZ*NUM_EVENTS
     127                            BSSX    event_ptr,32
     128                            .endif
     129                    
     130                    *****************************************************************************
     131                    *
     132                    * Life/Turbo meter sizes and positions.
     133                    *
     134                    
     135              00a3  LIFE_MAX        .equ    163             ;green pixels in life bar
     136              5400  TURBO_MAX       .equ    84<<8           ;max turbo value
     137                    
     138                    *****************************************************************************
     139                    *
     140                    * Called at the beginning of the first round of a match.
     141                    *
     142                    
     143 00000000            SUBR   init_life_data
     144                    
     145                            ;temp! - 314
     146                            .if DEBUG
     147                            movi    event_data,a14
     148                            move    a14,@event_ptr,L
     149                    
     150                            clr     a14
     151                            movi    event_data,a0
     152                            movi    EVENTSIZ*NUM_EVENTS/16,a1
     153                    erjkclp move    a14,*a0+,W
     154                            dsj     a1,erjkclp
     155                    
     156                            .endif
     157                    
     158                            ;initialize speed_adjustment
     159 00000000     1b20          movk    ADJSPEED,a0             ;game timer speed (1-5)
     160 00000010     0d5f          calla   GET_ADJ
         00000020 00000000! 
     161 00000040                   BADCHK  a0,1,5,3                ;reg,lo,hi,val
     162 000000d0                   X32     a0                      ;x 16 bits
     163 000000e0     0b20          addi    erjktimer_table-20h,a0
         000000f0 00000290' 
     164 00000110     8601          move    *a0,a1,L
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    4

     165 00000120     0781          move    a1,@speed_adjustment,L
         00000130 00000ac0- 
     166                    
     167                            ;initialize life data
     168 00000150     09c0          movi    NUM_WRES,a0
         00000160     0007  
     169 00000170     09e1          movi    life_data,a1
         00000180 00000000- 
     170 000001a0     09c2          movi    LIFE_MAX,a2
         000001b0     00a3  
     171 000001c0     09c3          movi    TURBO_MAX,a3
         000001d0     5400  
     172 000001e0     5684          clr     a4
     173 000001f0           erjkinit_loop
     174 000001f0     b041          move    a2,*a1(PLT_LIFE)
         00000200     0000  
     175 00000210     b061          move    a3,*a1(PLT_TURBO)
         00000220     0020  
     176 00000230     b081          move    a4,*a1(PLT_CLIFE)
         00000240     0010  
     177 00000250     b081          move    a4,*a1(PLT_COMBO_SIZE)
         00000260     0030  
     178 00000270     0b01          addi    PLT_SIZE,a1
         00000280     0040  
     179 00000290     3d60          dsj     a0,erjkinit_loop
     180                    
     181 000002a0     0960          rets
     182                    
     183 000002b0           erjktimer_table
     184 000002b0 0000cccc          .long           10000h*4/5      ;80% damage (slowest)
     185 000002d0 0000e666          .long           10000h*9/10     ;90%
     186 000002f0 00010000          .long           10000h*1        ;normal damage (default)
     187 00000310 00011999          .long           10000h*11/10    ;110%
     188 00000330 00013333          .long           10000h*6/5      ;120% damage (fastest)
     189                    
     190                    *****************************************************************************
     191                    *
     192                    * Resets life/turbo/combo data for wrestler in a13.  Used by change_wrestler.
     193                    * Updates name display too, if either display is aimed at our guy.
     194                    *
     195                    * Since this only happens for dead guys, we don't check to see if it's a
     196                    * player, and we don't check special royal rumble mode cases.
     197                    *
     198                    
     199 00000350            SUBR   init_wres_life_data
     200                    
     201                            ;initialize life data
     202 00000350     b5a1          move    *a13(PLYRNUM),a1
         00000360     0580  
     203 00000370                   X64     a1              ;mult by PLT_SIZE
     204 00000380     0b21          addi    life_data,a1
         00000390 00000000- 
     205                    
     206 000003b0     09c2          movi    LIFE_MAX,a2
         000003c0     00a3  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    5

     207 000003d0     09c3          movi    TURBO_MAX,a3
         000003e0     5400  
     208 000003f0     5684          clr     a4
     209 00000400     b041          move    a2,*a1(PLT_LIFE)
         00000410     0000  
     210 00000420     b061          move    a3,*a1(PLT_TURBO)
         00000430     0020  
     211 00000440     b041          move    a2,*a1(PLT_CLIFE)
         00000450     0010  
     212 00000460     b081          move    a4,*a1(PLT_COMBO_SIZE)
         00000470     0030  
     213                    
     214                            ;check names
     215 00000480     b5a1          move    *a13(PLYRNUM),a1
         00000490     0580  
     216 000004a0     09e5          movi    meter_data,a5
         000004b0 000001c0- 
     217 000004d0     b4ae          move    *a5(MD_LINK),a14
         000004e0     0000  
     218 000004f0     482e          cmp     a1,a14
     219 00000500     ca06          jreq    zufechgnm
     220 00000510     0b05          addi    MD_SIZE,a5
         00000520     0090  
     221 00000530     b4ae          move    *a5(MD_LINK),a14
         00000540     0000  
     222 00000550     482e          cmp     a1,a14
     223 00000560     cb0a          jrne    zufedone
     224                    
     225 00000570           zufechgnm       X32     a1
     226 00000580     0b21          addi    name_tbl,a1
         00000590 00005620' 
     227 000005b0     8620          move    *a1,a0,L
     228 000005c0     b6a8          move    *a5(MD_NAME),a8,L
         000005d0     0050  
     229 000005e0     0d5f          calla   civanic
         000005f0 00000000! 
     230                    
     231 00000610     0960  zufedone        rets
     232                    
     233                    *****************************************************************************
     234                    *
     235                    * Called at the start of the second and later rounds of a match.
     236                    *
     237                    
     238 00000620            SUBR   init_rnd_life_data
     239                    
     240                            ;reset life data
     241 00000620     09c0          movi    NUM_WRES,a0
         00000630     0007  
     242 00000640     09e1          movi    life_data,a1
         00000650 00000000- 
     243 00000670     09c2          movi    LIFE_MAX,a2
         00000680     00a3  
     244 00000690           iducinit_loop
     245 00000690     b041          move    a2,*a1(PLT_LIFE)
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    6

         000006a0     0000  
     246 000006b0     b041          move    a2,*a1(PLT_CLIFE)
         000006c0     0010  
     247 000006d0     0b01          addi    PLT_SIZE,a1
         000006e0     0040  
     248 000006f0     3ce0          dsj     a0,iducinit_loop
     249                    
     250                            ;set lifebar pals.
     251 00000700     09e0          movi    FYL2RD_P,a0
         00000710 00000000! 
     252 00000730     0d5f          calla   pal_getf
         00000740 00000000! 
     253                    
     254 00000760     09e1          movi    meter_data,a1
         00000770 000001c0- 
     255 00000790     05ae          move    @p2rounds,a14
         000007a0 00000000! 
     256 000007c0     ca04          jrz     iducok1
     257                    
     258                            ;set left lifebar red
     259 000007d0     b628          move    *a1(MD_LIFE),a8,L
         000007e0     0010  
     260 000007f0     b008          move    a0,*a8(OPAL)
         00000800     0150  
     261                    
     262 00000810     0b01  iducok1 addi    MD_SIZE,a1
         00000820     0090  
     263 00000830     05ae          move    @p1rounds,a14
         00000840 00000000! 
     264 00000860     ca04          jrz     iducok2
     265                    
     266                            ;set right lifebar red
     267 00000870     b628          move    *a1(MD_LIFE),a8,L
         00000880     0010  
     268 00000890     b008          move    a0,*a8(OPAL)
         000008a0     0150  
     269                    
     270 000008b0     0960  iducok2 rets
     271                    
     272                    
     273                    *****************************************************************************
     274                    *
     275                    * 0a8H = PLYRNUM for left meter
     276                    * 0a9H = PLYRNUM for right meter
     277                    
     278              0100  P1CNTR  .equ    PDATA
     279              0110  P2CNTR  .equ    PDATA+16
     280              0120  P1STATE .equ    PDATA+32
     281              0130  P2STATE .equ    PDATA+48
     282                    
     283 000008c0            SUBR   meters
     284                    
     285 000008c0                   PUSH    a8,a9
     286                    
     287                            ;Start the credits message
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    7

     288 000008e0     0d5f          calla   start_credbox
         000008f0 00007ea0' 
     289                    
     290                            ;initialize meter data
     291 00000910     09e1          movi    meter_data,a1
         00000920 000001c0- 
     292 00000940                   TBL_OBJ lhlth1
     293 000009a0     b301          move    a8,*a1(MD_LIFE),L
         000009b0     0010  
     294                    
     295 000009c0                   TBL_OBJ lname
     296 00000a20     b301          move    a8,*a1(MD_NAME),L
         00000a30     0050  
     297                    
     298 00000a40                   TBL_OBJ lframec
     299 00000aa0     b301          move    a8,*a1(MD_LBAK),L
         00000ab0     0030  
     300                    
     301 00000ac0                   TBL_OBJ lcombo
     302 00000b20     b301          move    a8,*a1(MD_COMBO),L
         00000b30     0070  
     303                    
     304 00000b40     0b01          addi    MD_SIZE,a1
         00000b50     0090  
     305                    
     306 00000b60                   TBL_OBJ rhlth1
     307 00000bc0     b301          move    a8,*a1(MD_LIFE),L
         00000bd0     0010  
     308                    
     309 00000be0                   TBL_OBJ rname
     310 00000c40     b301          move    a8,*a1(MD_NAME),L
         00000c50     0050  
     311                    
     312 00000c60                   TBL_OBJ rframec
     313 00000cc0     b301          move    a8,*a1(MD_LBAK),L
         00000cd0     0030  
     314                    
     315 00000ce0                   TBL_OBJ rcombo
     316 00000d40     b301          move    a8,*a1(MD_COMBO),L
         00000d50     0070  
     317                    
     318                            ;create the static (no-handle) objects
     319 00000d60                   TBL_OBJ lframe
     320 00000dc0                   TBL_OBJ lframeb
     321                    
     322 00000e20                   TBL_OBJ rframe
     323 00000e80                   TBL_OBJ rframeb
     324                    
     325 00000ee0     0d3f          callr   do_win_streaks
         00000ef0     0846  
     326                    
     327 00000f00                   PULL    a8,a9
     328                    
     329                            ;wire up the meters
     330 00000f20     5600          clr     a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    8

     331 00000f30     4d01          move    a8,a1
     332 00000f40     0d3f          callr   rewire_meter
         00000f50     03a6  
     333 00000f60     1820          movk    1,a0
     334 00000f70     4d21          move    a9,a1
     335 00000f80     0d3f          callr   rewire_meter
         00000f90     03a2  
     336                    
     337 00000fa0                   CREATE  ANNC_PID,announce_match
     338                    
     339 00001020     1820          movk    1,a0
     340 00001030     b00d          move    a0,*a13(P1CNTR)
         00001040     0100  
     341 00001050     b00d          move    a0,*a13(P2CNTR)
         00001060     0110  
     342 00001070     5600          clr     a0
     343 00001080     b00d          move    a0,*a13(P1STATE)
         00001090     0120  
     344 000010a0     b00d          move    a0,*a13(P2STATE)
         000010b0     0130  
     345                    
     346 000010c0           zsutmain_loop
     347                    ;Update all the life data
     348 000010c0     5600          clr     a0
     349                    
     350 000010d0           zsutmaint_loop
     351 000010d0     07a1          MOVE    @WHICH_SCREEN,A1,L
         000010e0 00000000! 
     352 00001100     0b61          CMPI    DUMRETS,A1
         00001110 ffffffff! 
     353 00001130     cb06          JRNE    JUST_DISPLAY_THEM
     354 00001140     0d3f          callr   inc_life
         00001150     0780  
     355 00001160     1020          inc     a0
     356 00001170     0b40          cmpi    NUM_WRES,a0
         00001180     fff8  
     357 00001190     cbf3          jrne    zsutmaint_loop
     358                    
     359 000011a0           JUST_DISPLAY_THEM
     360                    ;Update the meters
     361 000011a0     5600          clr     a0
     362 000011b0     0d3f          callr   update_meter
         000011c0     046f  
     363 000011d0     1820          movk    1,a0
     364 000011e0     0d3f          callr   update_meter
         000011f0     046c  
     365                    
     366                    ;Blink CPU controlled name with insert coins/press start
     367 00001200     09e1          movi    meter_data,a1
         00001210 000001c0- 
     368 00001230     05a0          move    @PSTATUS2,a0
         00001240 00000000! 
     369 00001260     1fe0          btst    0,a0
     370 00001270     cb45          jrnz    zsutp2
     371                    ;Plyr 1 is drone
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE    9

     372 00001280     b5a0          move    *a13(P1CNTR),a0
         00001290     0100  
     373 000012a0     1420          dec     a0
     374 000012b0     b00d          move    a0,*a13(P1CNTR)
         000012c0     0100  
     375 000012d0     cb3f          jrnz    zsutp2
     376 000012e0     b5a0          move    *a13(P1STATE),a0
         000012f0     0120  
     377 00001300     0bc0          xori    1,a0    
         00001310 00000001  
     378 00001330     b00d          move    a0,*a13(P1STATE)
         00001340     0120  
     379 00001350     ca1a          jrz     zsutdoname
     380                    
     381                    ;Do correct coin message
     382                    
     383 00001360     09c0          movi    TSEC,a0                 ;one second of PRESS/INSERT...
         00001370     0035  
     384 00001380     05ae          move    @NUM_OPPS,a14           ;(two if one-on-one mode)
         00001390 00000000! 
     385 000013b0     142e          dec     a14
     386 000013c0     cb01          jrnz    zsuttset1a
     387 000013d0     2020          sla     1,a0
     388 000013e0     b00d  zsuttset1a      move    a0,*a13(P1CNTR)
         000013f0     0100  
     389                    
     390 00001400     b628          move    *a1(MD_NAME),a8,L
         00001410     0050  
     391 00001420     09e0          movi    WF_START,a0
         00001430 00000000! 
     392                    ;Display the insert coin/press start message
     393 00001450     0d5f          calla   CR_STRTP
         00001460 00000000! 
     394 00001480     c903          jrhs    zsutenough_money
     395 00001490     09e0          movi    WF_INSERT,a0
         000014a0 00000000! 
     396 000014c0           zsutenough_money
     397 000014c0     0d5f          calla   civanic
         000014d0 00000000! 
     398 000014f0     c01d          jruc    zsutp2
     399 00001500           zsutdoname      
     400 00001500     09c0          movi    TSEC*4,a0               ;and four seconds of names
         00001510     00d4  
     401 00001520     05ae          move    @NUM_OPPS,a14           ;(two if one-on-one mode)
         00001530 00000000! 
     402 00001550     142e          dec     a14
     403 00001560     cb01          jrnz    zsuttset1b
     404 00001570     2be0          sra     1,a0
     405 00001580     b00d  zsuttset1b      move    a0,*a13(P1CNTR)
         00001590     0100  
     406                    
     407 000015a0     b420          move    *a1(MD_LINK),a0
         000015b0     0000  
     408 000015c0                   X32     a0
     409 000015d0     0b20          addi    process_ptrs,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   10

         000015e0 00000000! 
     410 00001600     8600          move    *a0,a0,L
     411 00001610     b400          move    *a0(WRESTLERNUM),a0
         00001620     0590  
     412                    
     413 00001630                   X32     a0
     414 00001640     0b20          addi    name_tbl,a0
         00001650 00005620' 
     415 00001670     8600          move    *a0,a0,L
     416                    ;Change the name
     417 00001680     b628          move    *a1(MD_NAME),a8,L
         00001690     0050  
     418 000016a0     0d5f          calla   civanic
         000016b0 00000000! 
     419 000016d0           zsutp2
     420 000016d0     09e1          movi    meter_data,a1
         000016e0 000001c0- 
     421 00001700     0b01          addi    MD_SIZE,a1
         00001710     0090  
     422 00001720     05a0          move    @PSTATUS2,a0
         00001730 00000000! 
     423 00001750     1fc0          btst    1,a0
     424 00001760     cb45          jrnz    zsutok
     425                    
     426                    ;Plyr 2 is drone
     427 00001770     b5a0          move    *a13(P2CNTR),a0
         00001780     0110  
     428 00001790     1420          dec     a0
     429 000017a0     b00d          move    a0,*a13(P2CNTR)
         000017b0     0110  
     430 000017c0     cb3f          jrnz    zsutok
     431 000017d0     b5a0          move    *a13(P2STATE),a0
         000017e0     0130  
     432 000017f0     0bc0          xori    1,a0    
         00001800 00000001  
     433 00001820     b00d          move    a0,*a13(P2STATE)
         00001830     0130  
     434 00001840     ca1a          jrz     zsutdoname2
     435                    
     436                    ;Do correct coin message
     437                    
     438 00001850     09c0          movi    TSEC,a0                 ;one second of PRESS/INSERT...
         00001860     0035  
     439 00001870     05ae          move    @NUM_OPPS,a14           ;(two if one-on-one mode)
         00001880 00000000! 
     440 000018a0     142e          dec     a14
     441 000018b0     cb01          jrnz    zsuttsetsa
     442 000018c0     2020          sla     1,a0
     443 000018d0     b00d  zsuttsetsa      move    a0,*a13(P1CNTR)
         000018e0     0100  
     444                    
     445 000018f0     b628          move    *a1(MD_NAME),a8,L
         00001900     0050  
     446 00001910     09e0          movi    WF_START,a0
         00001920 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   11

     447                    ;Display the insert coin/press start message
     448 00001940     0d5f          calla   CR_STRTP
         00001950 00000000! 
     449 00001970     c9b4          jrhs    zsutenough_money
     450 00001980     09e0          movi    WF_INSERT,a0
         00001990 00000000! 
     451 000019b0           zsutenough_money2
     452 000019b0     0d5f          calla   civanic
         000019c0 00000000! 
     453 000019e0     c01d          jruc    zsutok
     454 000019f0           zsutdoname2
     455 000019f0     09c0          movi    TSEC*4,a0               ;and four seconds of names
         00001a00     00d4  
     456 00001a10     05ae          move    @NUM_OPPS,a14           ;(two if one-on-one mode)
         00001a20 00000000! 
     457 00001a40     142e          dec     a14
     458 00001a50     cb01          jrnz    zsuttset2b
     459 00001a60     2be0          sra     1,a0
     460 00001a70     b00d  zsuttset2b      move    a0,*a13(P1CNTR)
         00001a80     0100  
     461                    
     462 00001a90     b420          move    *a1(MD_LINK),a0
         00001aa0     0000  
     463 00001ab0                   X32     a0
     464 00001ac0     0b20          addi    process_ptrs,a0
         00001ad0 00000000! 
     465 00001af0     8600          move    *a0,a0,L
     466 00001b00     b400          move    *a0(WRESTLERNUM),a0
         00001b10     0590  
     467                    
     468 00001b20                   X32     a0
     469 00001b30     0b20          addi    name_tbl,a0
         00001b40 00005620' 
     470 00001b60     8600          move    *a0,a0,L
     471                    ;Change the name
     472 00001b70     b628          move    *a1(MD_NAME),a8,L
         00001b80     0050  
     473 00001b90     0d5f          calla   civanic
         00001ba0 00000000! 
     474                    
     475 00001bc0           zsutok
     476 00001bc0                   SLEEPK  1
     477 00001c00     c000          jruc    zsutmain_loop
         00001c10     ff4a  
     478                    
     479                    ********
     480                    *
     481                    * Meter objects and their positions
     482                    *
     483                    
     484                    
     485              000b  lbar_x          .equ    11
     486              0186  rbar_x          .equ    390
     487                    
     488              0088  lcombo_x        .equ    181-45
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   12

     489              0109  rcombo_x        .equ    220+45
     490                    
     491              0061  lname_x         .equ    97
     492              012f  rname_x         .equ    303
     493                    
     494              0014  bar_y           .equ    20
     495              0026  combo_y         .equ    bar_y+18
     496                    
     497              000d  name_y          .equ    13
     498                    
     499              00c8  bak_z           .equ    200
     500              00ca  bar_z           .equ    202
     501              00c9  frame_z         .equ    201
     502              00cb  name_z          .equ    203
     503                    
     504                    
     505 00001c20     0088  lcombo  .word   lcombo_x,combo_y,name_z                 ;X, Y, Z
     506 00001c50 00000000!         .long   SUPER_0
     507 00001c70     a102          .word   DMAWNZ|M_3D|M_SCRNREL                   ;CTRL
     508 00001c80     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     509 00001c90 00000000          .long   0,0                                     ;XVEL, YVEL
     510 00001cd0                   .even
     511                    
     512 00001cd0     0109  rcombo  .word   rcombo_x,combo_y,name_z                 ;X, Y, Z
     513 00001d00 00000000!         .long   SUPER_0
     514 00001d20     a112          .word   DMAWNZ|M_FLIPH|M_3D|M_SCRNREL                   ;CTRL
     515 00001d30     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     516 00001d40 00000000          .long   0,0                                     ;XVEL, YVEL
     517 00001d80                   .even
     518                    
     519 00001d80     000b  lframe  .word   lbar_x,bar_y,frame_z                    ;X, Y, Z
     520 00001db0 00000000!         .long   PWREMPTY
     521 00001dd0     a102          .word   DMAWNZ|M_3D|M_SCRNREL                   ;CTRL
     522 00001de0     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     523 00001df0 00000000          .long   0,0                                     ;XVEL, YVEL
     524 00001e30                   .even
     525                    
     526                    
     527 00001e30     0186  rframe  .word   rbar_x,bar_y,frame_z                    ;X, Y, Z
     528 00001e60 00000000!         .long   PWREMPTY
     529 00001e80     a112          .word   DMAWNZ|M_3D|M_SCRNREL|M_FLIPH           ;CTRL
     530 00001e90     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     531 00001ea0 00000000          .long   0,0                                     ;XVEL, YVEL
     532 00001ee0                   .even
     533                    
     534                    
     535 00001ee0     000b  lframeb .word   lbar_x,bar_y,frame_z                    ;X, Y, Z
     536 00001f10 00000000!         .long   LBAR_GENB                               ;IMG
     537 00001f30     a102          .word   DMAWNZ|M_3D|M_SCRNREL                   ;CTRL
     538 00001f40     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     539 00001f50 00000000          .long   0,0                                     ;XVEL, YVEL
     540 00001f90                   .even
     541                    
     542 00001f90     0186  rframeb .word   rbar_x,bar_y,frame_z                    ;X, Y, Z
     543 00001fc0 00000000!         .long   RBAR_GENB                               ;IMG
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   13

     544 00001fe0     a112          .word   DMAWNZ|M_3D|M_SCRNREL|M_FLIPH           ;CTRL
     545 00001ff0     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     546 00002000 00000000          .long   0,0                                     ;XVEL, YVEL
     547 00002040                   .even
     548                    
     549                    
     550 00002040     000b  lframec .word   lbar_x,bar_y,bak_z                      ;X, Y, Z
     551 00002070 00000000!         .long   LBAR_GENC                               ;IMG
     552 00002090     a102          .word   DMAWNZ|M_3D|M_SCRNREL                   ;CTRL
     553 000020a0     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     554 000020b0 00000000          .long   0,0                                     ;XVEL, YVEL
     555 000020f0                   .even
     556                    
     557 000020f0     0186  rframec .word   rbar_x,bar_y,bak_z                      ;X, Y, Z
     558 00002120 00000000!         .long   LBAR_GENC                               ;IMG
     559 00002140     a112          .word   DMAWNZ|M_3D|M_SCRNREL|M_FLIPH           ;CTRL
     560 00002150     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     561 00002160 00000000          .long   0,0                                     ;XVEL, YVEL
     562 000021a0                   .even
     563                    
     564 000021a0     000b  lwin    .word   11,22h,name_z                   ;X, Y, Z
     565 000021d0 00000000!         .long   BWINBOX                                 ;IMG
     566 000021f0     a102          .word   DMAWNZ|M_3D|M_SCRNREL           ;CTRL
     567 00002200     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     568 00002210 00000000          .long   0,0                                     ;XVEL, YVEL
     569 00002250                   .even
     570                    
     571 00002250     0187  rwin    .word   391,22h,name_z                  ;X, Y, Z
     572 00002280 00000000!         .long   RWINBOX                                 ;IMG
     573 000022a0     a102          .word   DMAWNZ|M_3D|M_SCRNREL                   ;CTRL
     574 000022b0     0009          .word   CLSNEUT|TYPNEUT|SUBMFRAME               ;OID
     575 000022c0 00000000          .long   0,0                                     ;XVEL, YVEL
     576 00002300                   .even
     577                    
     578                    
     579 00002300     000b  lhlth1  .word   lbar_x,bar_y,bar_z                      ;X, Y, Z
     580 00002330 00000000!         .long   FGRN2YEL
     581 00002350     a102          .word   DMAWNZ|M_3D|M_SCRNREL                   ;CTRL
     582 00002360     0007          .word   CLSNEUT|TYPNEUT|SUBLBAR                 ;OID
     583 00002370 00000000          .long   0,0                                     ;XVEL, YVEL
     584 000023b0                   .even
     585                    
     586 000023b0     0186  rhlth1  .word   rbar_x,bar_y,bar_z                      ;X, Y, Z
     587 000023e0 00000000!         .long   FGRN2YEL
     588 00002400     a112          .word   DMAWNZ|M_3D|M_SCRNREL|M_FLIPH           ;CTRL
     589 00002410     0007          .word   CLSNEUT|TYPNEUT|SUBLBAR                 ;OID
     590 00002420 00000000          .long   0,0                                     ;XVEL, YVEL
     591 00002460                   .even
     592                    
     593                    *
     594                    * name data
     595                    *
     596                    
     597 00002460     0061  lname   .word   lname_x,name_y,name_z                   ;X, Y, Z
     598 00002490 00000000!         .long   NAM_BRT                                 ;IMG
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   14

     599 000024b0     a102          .word   DMAWNZ|M_3D|M_SCRNREL                   ;CTRL
     600 000024c0     0007          .word   CLSNEUT|TYPNEUT|SUBLBAR                 ;OID
     601 000024d0 00000000          .long   0,0                                     ;XVEL, YVEL
     602 00002510                   .even
     603                    
     604 00002510     012f  rname   .word   rname_x,name_y,name_z                   ;X, Y, Z
     605 00002540 00000000!         .long   NAM_RZR                                 ;IMG
     606 00002560     a102          .word   DMAWNZ|M_3D|M_SCRNREL                   ;CTRL
     607 00002570     0007          .word   CLSNEUT|TYPNEUT|SUBLBAR                 ;OID
     608 00002580 00000000          .long   0,0                                     ;XVEL, YVEL
     609 000025c0                   .even
     610                    
     611                    ***************************************
     612                    
     613 000025c0            SUBRP  replace_wins
     614 000025c0     05a1          move    @match_winner,a1
         000025d0 00000000! 
     615 000025f0     05a0          MOVE    @PSTATUS2,A0
         00002600 00000000! 
     616 00002620     5020          AND     A1,A0
     617 00002630     ca21          JRZ     mfsdEXIT
     618                    
     619 00002640     07a0          move    @WINS_OBJ,A0,L
         00002650 00000910- 
     620 00002670     ca03          JRZ     NO_WINS_1
     621 00002680     0d5f          CALLA   DELOBJ
         00002690 00000000! 
     622 000026b0           NO_WINS_1
     623 000026b0     07a0          move    @WINS_OBJ+020H,A0,L
         000026c0 00000930- 
     624 000026e0     ca03          JRZ     NO_WINS_2
     625 000026f0     0d5f          CALLA   DELOBJ
         00002700 00000000! 
     626 00002720           NO_WINS_2
     627 00002720     07a0          move    @WINS_OBJ+040H,A0,L
         00002730 00000950- 
     628 00002750     ca03          JRZ     NO_WINS_3
     629 00002760     0d5f          CALLA   DELOBJ
         00002770 00000000! 
     630 00002790           NO_WINS_3
     631 00002790     05a1          move    @match_winner,a1
         000027a0 00000000! 
     632 000027c0     1421          dec     a1
     633 000027d0     cb08          jrnz    do_player_2_wins
     634 000027e0     05a0          move    @p1winstreak,a0
         000027f0 00000000! 
     635 00002810                   push    a10
     636 00002820     0d3f          callr   streak_1
         00002830     06bf  
     637 00002840                   pull    a10
     638 00002850           mfsdEXIT
     639 00002850     0960          rets
     640                    
     641 00002860           do_player_2_wins
     642 00002860     05a0          move    @p2winstreak,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   15

         00002870 00000000! 
     643 00002890                   push    a10
     644 000028a0     0d3f          callr   streak_2
         000028b0     06f8  
     645 000028c0                   pull    a10
     646 000028d0     0960          rets
     647                    
     648                    
     649                    ***************************************
     650                    
     651 000028e0           FLASH_COMBO
     652                    
     653 000028e0     09e0          MOVI    COMBO_P,A0
         000028f0 00000000! 
     654 00002910     0d5f          CALLA   pal_getf
         00002920 00000000! 
     655 00002940     b008          MOVE    A0,*A8(OPAL)
         00002950     0150  
     656 00002960     b501          MOVE    *A8(OCTRL),A1
         00002970     00f0  
     657 00002980     0b81          ANDNI   M_FLIPH,A1
         00002990 00000010  
     658 000029b0     b028          MOVE    A1,*A8(OCTRL)
         000029c0     00f0  
     659 000029d0           DO_COMBO_FLASH_AGAIN
     660 000029d0     09e1          MOVI    COMBO_FLASH_ANIM,A1
         000029e0 00002bb0' 
     661 00002a00     0d5f          calla   setup_back_anim
         00002a10 00000000! 
     662 00002a30                   JSRP    ANIM_CROWD
     663 00002aa0                   SLEEPK  20
     664 00002ae0     c0ee          JRUC    DO_COMBO_FLASH_AGAIN
     665                    
     666 00002af0           DO_COMBO_SOUND
     667 00002af0                   SLEEPK  25
     668 00002b30     09c0          MOVI    3,A0
         00002b40     0003  
     669 00002b50     0d5f          CALLA   triple_sound
         00002b60 00000000! 
     670 00002b80                   DIE
     671                    
     672              8002  CANI_END                equ     2 + 8000H
     673                    
     674 00002bb0           COMBO_FLASH_ANIM
     675 00002bb0                   WL      2,COMBO_01
     676 00002be0                   WL      2,COMBO_02
     677 00002c10                   WL      2,COMBO_03
     678 00002c40                   WL      2,COMBO_04
     679 00002c70                   WL      2,COMBO_05
     680 00002ca0                   WL      2,COMBO_06
     681 00002cd0                   WL      2,COMBO_07
     682 00002d00                   WL      2,COMBO_08
     683 00002d30                   WL      2,COMBO_09
     684 00002d60                   WL      2,COMBO_10
     685 00002d90     8002          .WORD   CANI_END
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   16

     686                    
     687 00002da0            SUBRP  flash_2ndwind
     688 00002da0     b501          MOVE    *A8(OCTRL),A1
         00002db0     00f0  
     689 00002dc0     0b81          ANDNI   M_FLIPH,A1
         00002dd0 00000010  
     690 00002df0     b028          MOVE    A1,*A8(OCTRL)
         00002e00     00f0  
     691 00002e10     1869          movk    3,a9
     692 00002e20           mfsdflsh        PUSHP   a9
     693 00002e30     09e1          movi    wind_anim,a1
         00002e40 00002f90' 
     694 00002e60     0d5f          calla   setup_back_anim
         00002e70 00000000! 
     695 00002e90                   JSRP    ANIM_CROWD
     696                    
     697 00002f00                   SLEEPK  2
     698                    
     699 00002f40                   PULLP   a9
     700 00002f50     3e89          dsj     a9,mfsdflsh
     701                    
     702 00002f60                   DIE
     703                    
     704 00002f90           wind_anim
     705 00002f90                   WL      2,SECWND01
     706 00002fc0                   WL      2,SECWND02
     707 00002ff0                   WL      2,SECWND03
     708 00003020                   WL      2,SECWND04
     709 00003050                   WL      2,SECWND05
     710 00003080                   WL      2,SECWND06
     711 000030b0                   WL      2,SECWND07
     712 000030e0                   WL      2,SECWND08
     713 00003110                   WL      2,SECWND09
     714 00003140     8002          .WORD   CANI_END
     715                    
     716                    ******************************************************************************
     717                    
     718 00003150            SUBR   CHECK_COMBO_GO
     719 00003150     b501          move    *a8(PLYRNUM),a1
         00003160     0580  
     720                    
     721                            ;if we're in royal rumble, change a 1 to a zero.
     722 00003170     05ae          move    @royal_rumble,a14
         00003180 00000000! 
     723 000031a0     ca04          jrz     mfsdnorum0
     724 000031b0     0b41          cmpi    1,a1
         000031c0     fffe  
     725 000031d0     cb01          jrne    mfsdnorum0
     726 000031e0     5621          clr     a1
     727 000031f0           mfsdnorum0
     728                    
     729 000031f0                   X64     a1              ;x by PLT_SIZE
     730 00003200     0b21          addi    life_data,a1
         00003210 00000000- 
     731 00003230     b42e          MOVE    *A1(PLT_COMBO_SIZE),a14
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   17

         00003240     0030  
     732                    ;       MOVE    @BONUS_POWER,A1
     733                    ;       cmp     A1,a14
     734 00003250     05a1          move    @instant_combos_on,a1
         00003260 00000000! 
     735 00003280     cb02          jrnz    mfsdauto_combos                 ; Auto combos on
     736 00003290     1a01          movk    16,a1                           ; Normal combo check
     737 000032a0     c001          jruc    mfsdcombo_check
     738 000032b0           mfsdauto_combos
     739 000032b0     5621          clr     a1
     740 000032c0           mfsdcombo_check
     741 000032c0     482e          cmp     a1,a14
     742 000032d0     0960          rets
     743                    
     744                    ******************************************************************************
     745                    
     746                    ;A7 = BIT TO SET IN PLAYER HISTORY
     747                    ;A5 = FIRST TIME FOR MOVE
     748                    ;A6 = MOVE REPEAT
     749                    
     750 000032e0            SUBR   ADD_TO_COMBO_COUNT
     751                    
     752                    ;Adds first value each time! [why?]
     753 000032e0     4ce2          MOVE    A7,A2
     754 000032f0     1825          movk    1,a5
     755 00003300     1823          movk    1,a3
     756 00003310     b5a1          MOVE    *a13(COMBO_START),A1
         00003320     0b00  
     757 00003330     5022          AND     A1,A2
     758 00003340     cb06          JRNZ    ALREADY_ADDED_ONCE
     759 00003350     4ca3          MOVE    A5,A3
     760 00003360     b5a1          MOVE    *a13(COMBO_START),A1
         00003370     0b00  
     761 00003380     54e1          OR      A7,A1
     762 00003390     b02d          MOVE    A1,*A13(COMBO_START)
         000033a0     0b00  
     763 000033b0           ALREADY_ADDED_ONCE
     764                    
     765                            ;HACK ALERT:  In royal rumble mode, each player individually tracks
     766                            ; which moves he's done and so on, but both share a single combo
     767                            ; meter.  Halve the amount to add and give it to player 0 if we're
     768                            ; in royal rumble mode and a13 is player 1.
     769                    
     770 000033b0                   PUSH    a13
     771 000033c0     05ae          move    @royal_rumble,a14
         000033d0 00000000! 
     772 000033f0     ca0a          jrz     mfsdnorum
     773                    
     774 00003400     b5ae          move    *a13(PLYRNUM),a14
         00003410     0580  
     775 00003420     0b4e          cmpi    1,a14
         00003430     fffe  
     776 00003440     c705          jrgt    mfsdnorum
     777                    
     778                            ;royal rumble and a13 is a human.  make it the first one.
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   18

     779 00003450     5621          clr     a1
     780 00003460     0d5f          calla   get_process_ptr
         00003470 00000000! 
     781 00003490     4c0d          move    a0,a13
     782 000034a0           mfsdnorum
     783                    
     784                            ;WARNING:  a13 isn't neccesarily valid in here! (see above)
     785 000034a0     b5a1          move    *a13(PLYR_SIDE),a1
         000034b0     05b0  
     786 000034c0     b5ab          move    *a13(PLYRNUM),a11
         000034d0     0580  
     787                    
     788 000034e0                   PULL    a13
     789                            ;OKAY: a13 is safe again.
     790                    
     791 000034f0     09c9          movi    MD_SIZE,a9
         00003500     0090  
     792 00003510     5e29          mpyu    a1,a9
     793 00003520     0b29          addi    meter_data,a9
         00003530 000001c0- 
     794 00003550     b728          MOVE    *A9(MD_COMBO),A8,L
         00003560     0070  
     795 00003570     4d65          move    a11,a5
     796 00003580                   X64     a5              ;x by PLT_SIZE
     797 00003590     0b25          ADDI    life_data,A5
         000035a0 00000000- 
     798 000035c0     b4a2          MOVE    *A5(PLT_COMBO_SIZE),A2
         000035d0     0030  
     799 000035e0     4062          ADD     A3,A2
     800 000035f0     b045          MOVE    A2,*A5(PLT_COMBO_SIZE)
         00003600     0030  
     801 00003610     05a6          move    @instant_combos_on,a6
         00003620 00000000! 
     802 00003640     ca02          jrz     mfsdnorm_combos
     803 00003650     56c6          clr     a6
     804 00003660     c001          jruc    mfsddo_check
     805 00003670           mfsdnorm_combos
     806 00003670     1a06          movk    16,a6
     807 00003680           mfsddo_check
     808 00003680     48c2          cmp     a6,a2
     809 00003690     c51c          JRGE    SET_FLASHING_COMBO_GOING
     810 000036a0     24a2          SLL     5,A2
     811 000036b0     0b22          ADDI    WHICH_SIZE_BAR,A2
         000036c0 00003a50' 
     812 000036e0     8640          MOVE    *A2,A0,L
     813 000036f0     ba08          move    *a0(IANIOFF),*A8(ODOFF),L
         00003700     0020  
         00003710     0220  
     814 00003720     ba08          move    *a0(ISAG),*a8(OSAG),L
         00003730     0040  
         00003740     0110  
     815                    
     816 00003750     0960          RETS
     817                    
     818 00003760            SUBR   SET_FLASHING
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   19

     819                    
     820 00003760     4d40          move    a10,a0
     821 00003770     24a0          sll     5,a0
     822 00003780     0b20          addi    process_ptrs,a0
         00003790 00000000! 
     823 000037b0     8600          move    *a0,a0,L
     824 000037c0     b401          move    *a0(PLYR_SIDE),a1
         000037d0     05b0  
     825 000037e0     09c9          movi    MD_SIZE,a9
         000037f0     0090  
     826 00003800     5e29          mpyu    a1,a9
     827 00003810     0b29          addi    meter_data,a9
         00003820 000001c0- 
     828 00003840     b728          MOVE    *A9(MD_COMBO),A8,L
         00003850     0070  
     829                    
     830 00003860           SET_FLASHING_COMBO_GOING
     831                    ;a1=plyr side
     832 00003860     4c20          move    a1,a0
     833 00003870     2480          SLL     4,a0
     834 00003880     0b20          ADDI    COMBO_FLASH_FLAG,a0
         00003890 00000a90- 
     835 000038b0     8400          MOVE    *a0,a0
     836 000038c0     cb17          JRNZ    COMBO_ALREADY_STARTED
     837                    
     838 000038d0     4c27          MOVE    A1,A7
     839 000038e0     2487          SLL     4,A7
     840 000038f0     0b27          ADDI    COMBO_FLASH_FLAG,A7
         00003900 00000a90- 
     841 00003920     1820          MOVK    1,A0
     842 00003930     8007          MOVE    A0,*A7
     843 00003940     0b01          ADDI    FLASH_COMBO_PID,A1
         00003950     0143  
     844 00003960     09e7          MOVI    FLASH_COMBO,A7
         00003970 000028e0' 
     845 00003990     0d5f          CALLA   GETPRC
         000039a0 00000000! 
     846 000039c0                   CREATE  SOUND_PID,DO_COMBO_SOUND
     847 00003a40           COMBO_ALREADY_STARTED
     848 00003a40     0960          RETS
     849                    
     850 00003a50           WHICH_SIZE_BAR
     851 00003a50 00000000!         .LONG   SUPER_0
     852 00003a70 00000000!         .LONG   SUPER_1
     853 00003a90 00000000!         .LONG   SUPER_2
     854 00003ab0 00000000!         .LONG   SUPER_3
     855 00003ad0 00000000!         .LONG   SUPER_4
     856 00003af0 00000000!         .LONG   SUPER_5
     857 00003b10 00000000!         .LONG   SUPER_6
     858 00003b30 00000000!         .LONG   SUPER_7
     859 00003b50 00000000!         .LONG   SUPER_8
     860 00003b70 00000000!         .LONG   SUPER_9
     861 00003b90 00000000!         .LONG   SUPER_10
     862 00003bb0 00000000!         .LONG   SUPER_11
     863 00003bd0 00000000!         .LONG   SUPER_12
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   20

     864 00003bf0 00000000!         .LONG   SUPER_13
     865 00003c10 00000000!         .LONG   SUPER_14
     866 00003c30 00000000!         .LONG   SUPER_15
     867 00003c50 00000000!         .LONG   SUPER_16
     868                    
     869                    *****************
     870                    *
     871                    * Use in a 1-player game when there are multiple drones on the other team.
     872                    * This process keeps the other lifebar/name/combo meter display up-to-date.
     873                    * It won't do a rewire within ekgwLATENCY ticks of the last rewire unless the
     874                    * currently displayed wrestler is dead.
     875                    *
     876                    
     877 00000ae0                   .bss    ekgwLAST_REWIRE,32
     878              001a  ekgwLATENCY     .equ    TSEC/2
     879                    
     880 00003c70            SUBR   rewire_monitor
     881                    
     882 00003c70     05ae          move    @buddy_mode_on,a14
         00003c80 00000000! 
     883 00003ca0     cb00          jrnz    ekgwbuddy
         00003cb0     0082  
     884 00003cc0     05ae          move    @royal_rumble,a14
         00003cd0 00000000! 
     885 00003cf0     cb52          jrnz    ekgwrumble
     886                    
     887                            ;quit if we're a two-player game
     888 00003d00     05ae          move    @PSTATUS2,a14
         00003d10 00000000! 
     889 00003d30     0b4e          cmpi    3,a14
         00003d40     fffc  
     890 00003d50     ca0e          jreq    ekgwdie
     891                    
     892                            ;quit if we're a 1v1 game
     893 00003d60     05ae          move    @NUM_OPPS,a14
         00003d70 00000000! 
     894 00003d90     0b4e          cmpi    1,a14
         00003da0     fffe  
     895 00003db0     ca08          jreq    ekgwdie
     896                    
     897                            ;okay, we should run.  figure out which PLYRNUM to key on.  Choose
     898                            ; the first active process, since that'll either be the only human
     899                            ; or the lone attract mode drone.  (Even if we do decide to show
     900                            ; 2v2 battles in attract mode, nobody dies so it's okay to always
     901                            ; key on the first drone.)
     902                            ;NOTE: The reason we store the PLYRNUM to key on instead of the
     903                            ; process pointer is that if we allow 2v2 mode and the human can
     904                            ; switch control from one drone to the next, we can't count on
     905                            ; PLYRNUM's and process ptrs always matching up!
     906                    
     907 00003dc0     09c0  ekgwrun movi    NUM_WRES,a0
         00003dd0     0007  
     908 00003de0     09e1          movi    process_ptrs,a1
         00003df0 00000000! 
     909 00003e10     9622  ekgwlp0 move    *a1+,a2,L
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   21

     910 00003e20     cb04          jrnz    ekgwfound
     911 00003e30     3c60          dsj     a0,ekgwlp0
     912                    
     913                            ;Hey!  No active processes!  Bitch, then quit.
     914                            .if DEBUG
     915                            LOCKUP
     916                            .endif
     917                    
     918 00003e40           ekgwdie DIE
     919                    
     920 00003e70     b44a  ekgwfound       move    *a2(PLYRNUM),a10        ;key plyrnum
         00003e80     0580  
     921 00003e90     b44b          move    *a2(CLOSEST_NUM),a11    ;previous closest (current disp.)
         00003ea0     03a0  
     922                    
     923 00003eb0     4d41  ekgwloop        move    a10,a1
     924 00003ec0     0d5f          calla   get_process_ptr
         00003ed0 00000000! 
     925 00003ef0     4c06          move    a0,a6                   ;key process (recomputed every wake)
     926 00003f00     b4c1          move    *a6(CLOSEST_NUM),a1
         00003f10     03a0  
     927 00003f20     4961          cmp     a11,a1
     928 00003f30     ca27          jreq    ekgwno
     929                    
     930                            ;closest has changed.  only rewire if PCNT >= @ekgwLAST_REWIRE+ekgwLATENCY,
     931                            ; or if the old guy is dead.
     932 00003f40     4d61          move    a11,a1                  ;old guy...
     933 00003f50     0d5f          calla   get_process_ptr
         00003f60 00000000! 
     934 00003f80     b40e          move    *a0(PLYRMODE),a14
         00003f90     05c0  
     935 00003fa0     0b4e          cmpi    MODE_DEAD,a14
         00003fb0     fff6  
     936 00003fc0     ca0a          jreq    ekgwrewire                      ;dead?
     937                    
     938 00003fd0     07a0          move    @PCNT,a0,L
         00003fe0 00000000! 
     939 00004000     07a1          move    @ekgwLAST_REWIRE,a1,L
         00004010 00000ae0- 
     940 00004030     0b01          addi    ekgwLATENCY,a1
         00004040     001a  
     941 00004050     4820          cmp     a1,a0
     942 00004060     c614          jrle    ekgwno                  ;enough time since last chg?
     943                    
     944 00004070     b4c1  ekgwrewire      move    *a6(CLOSEST_NUM),a1
         00004080     03a0  
     945 00004090     0d5f          calla   get_process_ptr
         000040a0 00000000! 
     946 000040c0     4c07          move    a0,a7                   ;new closest proc
     947 000040d0     b4e0          move    *a7(PLYR_SIDE),a0       ;side to display
         000040e0     05b0  
     948 000040f0     b4e1          move    *a7(PLYRNUM),a1         ;PLYRNUM to display
         00004100     0580  
     949 00004110     0d3f          callr   rewire_meter
         00004120     0089  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   22

     950 00004130     07ae          move    @PCNT,a14,L
         00004140 00000000! 
     951 00004160     078e          move    a14,@ekgwLAST_REWIRE,L
         00004170 00000ae0- 
     952 00004190     b4cb          move    *a6(CLOSEST_NUM),a11
         000041a0     03a0  
     953 000041b0           ekgwno  SLOOP   10,ekgwloop
     954                    
     955                    
     956                    ****
     957                    
     958                    
     959 00004220           ekgwrumble      ;royal rumble.  Never rewire the left meter.  Toggle the right
     960                            ; meter every four seconds between plyrnums 2 and 3.  Don't
     961                            ; toggle to or stay on a dead guy.
     962                    
     963 00004220     1869          movk    3,a9            ;pretend we're on PLYRNUM 3...
     964 00004230     c012          jruc    ekgwtoggle              ;...so that we can just toggle to initialize.
     965                    
     966 00004240           ekgwrloop       ;see if we're displaying a dead guy.
     967 00004240     4d21          move    a9,a1
     968 00004250     0d5f          calla   get_process_ptr
         00004260 00000000! 
     969 00004280     b40e          move    *a0(PLYRMODE),a14
         00004290     05c0  
     970 000042a0     0b4e          cmpi    MODE_DEAD,a14
         000042b0     fff6  
     971 000042c0     ca09          jreq    ekgwtoggle
     972                    
     973                            ;still alive.  time to toggle anyway?
     974 000042d0     1428          dec     a8
     975 000042e0     c607          jrle    ekgwtoggle
     976                    
     977                            ;not time yet.
     978 000042f0                   SLOOP   10,ekgwrloop
     979                    
     980 00004360     4d21  ekgwtoggle      move    a9,a1
     981                    
     982                            ;is THIS guy dead?
     983 00004370     0bc1          xori    1,a1            ;toggle between 2 and 3
         00004380 00000001  
     984 000043a0     0d5f          calla   get_process_ptr
         000043b0 00000000! 
     985 000043d0     b40e          move    *a0(PLYRMODE),a14
         000043e0     05c0  
     986 000043f0     0b4e          cmpi    MODE_DEAD,a14
         00004400     fff6  
     987 00004410     ca05          jreq    ekgwnotogl              ;new guy is dead.  skip it.
     988                    
     989 00004420     4c29          move    a1,a9
     990 00004430     1820          movk    1,a0
     991 00004440     0d3f          callr   rewire_meter
         00004450     0056  
     992                    
     993 00004460     1aa8          movk    TSEC*4/10,a8
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   23

     994 00004470           ekgwnotogl      SLOOP   10,ekgwrloop
     995                    
     996                    
     997                    ****
     998                    
     999                    
    1000 000044e0           ekgwbuddy       ;buddy mode.  This one is easy:  Show the human, unless he's dead
    1001                            ; and his drone teammate is alive.  Don't assume, once the human
    1002                            ; is dead, that he'll stay that way.  Buckoffs and all.
    1003                    
    1004 000044e0     5708          clr     a8              ;displayed player on team 0
    1005 000044f0     1829          movk    1,a9            ;displayed player on team 1
    1006                    
    1007 00004500     5621  ekgwbloop       clr     a1
    1008 00004510     0d5f          calla   get_process_ptr
         00004520 00000000! 
    1009 00004540     b40e          move    *a0(PLYRMODE),a14
         00004550     05c0  
    1010 00004560     0b4e          cmpi    MODE_DEAD,a14
         00004570     fff6  
    1011 00004580     cb12          jrne    ekgwp1liv
    1012                    
    1013 00004590           ekgwp1ded       ;plyr 1 is dead--check his drone.
    1014 00004590     1841          movk    2,a1
    1015 000045a0     0d5f          calla   get_process_ptr
         000045b0 00000000! 
    1016 000045d0     b40e          move    *a0(PLYRMODE),a14
         000045e0     05c0  
    1017 000045f0     0b4e          cmpi    MODE_DEAD,a14
         00004600     fff6  
    1018 00004610     ca09          jreq    ekgwp1liv               ;show the human anyway
    1019                    
    1020                            ;p1 is dead and his drone is alive.  show the drone.
    1021 00004620     0b48          cmpi    2,a8
         00004630     fffd  
    1022 00004640     ca0d          jreq    ekgwckp2                ;already showing the drone.  skip it.
    1023                    
    1024 00004650     5600          clr     a0
    1025 00004660     1841          movk    2,a1
    1026 00004670     4c28          move    a1,a8
    1027 00004680     0d3f          callr   rewire_meter
         00004690     0032  
    1028 000046a0     c007          jruc    ekgwckp2
    1029                    
    1030 000046b0           ekgwp1liv       ;plyr 1 is alive (or his drone is dead). show him.
    1031                    
    1032 000046b0                   TEST    a8
    1033 000046c0     ca05          jrz     ekgwckp2                ;already showing the human.  skip it.
    1034                    
    1035 000046d0     5600          clr     a0
    1036 000046e0     5621          clr     a1
    1037 000046f0     4c28          move    a1,a8
    1038 00004700     0d3f          callr   rewire_meter
         00004710     002a  
    1039                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   24

    1040 00004720     1821  ekgwckp2        movk    1,a1
    1041 00004730     0d5f          calla   get_process_ptr
         00004740 00000000! 
    1042 00004760     b40e          move    *a0(PLYRMODE),a14
         00004770     05c0  
    1043 00004780     0b4e          cmpi    MODE_DEAD,a14
         00004790     fff6  
    1044 000047a0     cb12          jrne    ekgwp2liv
    1045                    
    1046 000047b0           ekgwp2ded       ;plyr 2 is dead--check his drone.
    1047 000047b0     1861          movk    3,a1
    1048 000047c0     0d5f          calla   get_process_ptr
         000047d0 00000000! 
    1049 000047f0     b40e          move    *a0(PLYRMODE),a14
         00004800     05c0  
    1050 00004810     0b4e          cmpi    MODE_DEAD,a14
         00004820     fff6  
    1051 00004830     ca09          jreq    ekgwp2liv               ;show the human anyway
    1052                    
    1053                            ;p2 is dead and his drone is alive.  show the drone.
    1054 00004840     0b49          cmpi    3,a9
         00004850     fffc  
    1055 00004860     ca0e          jreq    ekgwbnap                ;already showing the drone.  skip it.
    1056                    
    1057 00004870     1820          movk    1,a0
    1058 00004880     1861          movk    3,a1
    1059 00004890     4c29          move    a1,a9
    1060 000048a0     0d3f          callr   rewire_meter
         000048b0     0010  
    1061 000048c0     c008          jruc    ekgwbnap
    1062                    
    1063 000048d0           ekgwp2liv       ;plyr 2 is alive (or his drone is dead). show him.
    1064                    
    1065 000048d0     0b49          cmpi    1,a9
         000048e0     fffe  
    1066 000048f0     ca05          jrz     ekgwbnap                ;already showing the human.  skip it.
    1067                    
    1068 00004900     1820          movk    1,a0
    1069 00004910     1821          movk    1,a1
    1070 00004920     4c29          move    a1,a9
    1071 00004930     0d3f          callr   rewire_meter
         00004940     0007  
    1072                    
    1073 00004950           ekgwbnap        SLOOP   10,ekgwbloop
    1074                    
    1075                    
    1076                    *****************************************************************************
    1077                    * 'rewires' a meter display for a different wrestler
    1078                    * 0a0H = display(0 or 1), 0a1H= playernum (0 to NUM_WRES-1)
    1079                    
    1080 000049c0            SUBR   rewire_meter
    1081                    
    1082 000049c0                   PUSH    a2,a3,a4,a5,a6,a7,a8,a9,a10,a11
    1083                    
    1084                            ;set the pointers
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   25

    1085                            ;point a5 at the MD_???? block for the display
    1086 000049e0     09c5          movi    MD_SIZE,a5
         000049f0     0090  
    1087 00004a00     5e05          mpyu    a0,a5
    1088 00004a10     0b25          addi    meter_data,a5
         00004a20 000001c0- 
    1089                    
    1090                            ;point a6 at the PLT_???? block for PLYRNUM
    1091 00004a40     4c23          move    a1,a3
    1092 00004a50                   X64     a3              ;x by PLT_SIZE
    1093 00004a60     09e6          movi    life_data,a6
         00004a70 00000000- 
    1094 00004a90     4066          add     a3,a6
    1095                    
    1096                            ;set MD_LINK
    1097 00004aa0     b025          move    a1,*a5(MD_LINK)
         00004ab0     0000  
    1098                    
    1099                            ;point a7 at PLYRNUM's process
    1100 00004ac0     4c27          move    a1,a7
    1101 00004ad0                   X32     a7
    1102 00004ae0     0b27          addi    process_ptrs,a7
         00004af0 00000000! 
    1103 00004b10     86e7          move    *a7,a7,L
    1104                    
    1105                            ;change the combo bar
    1106 00004b20                   PUSH    A0
    1107 00004b30     b4c2          MOVE    *A6(PLT_COMBO_SIZE),A2
         00004b40     0030  
    1108                    ;       MOVE    @BONUS_POWER,A14
    1109                    ;       CMP     A14,A2
    1110 00004b50     05ae          move    @instant_combos_on,a14
         00004b60 00000000! 
    1111 00004b80     ca02          jrz     dylcnorm_combos
    1112 00004b90     57ce          clr     a14
    1113 00004ba0     c001          jruc    dylcdo_check
    1114 00004bb0           dylcnorm_combos
    1115 00004bb0     1a0e          movk    16,a14
    1116 00004bc0           dylcdo_check
    1117 00004bc0     49c2          cmp     a14,a2
    1118                    ;       CMPI    16,A2
    1119 00004bd0     c539          JRGE    WE_ARE_IN_COMBO_MODE
    1120                            
    1121 00004be0     4c01          MOVE    A0,A1
    1122 00004bf0     2481          SLL     4,A1
    1123 00004c00     0b21          ADDI    COMBO_FLASH_FLAG,A1
         00004c10 00000a90- 
    1124 00004c30     8428          MOVE    *A1,A8
    1125 00004c40     ca09          JRZ     NO_NEED_TO_KILL_COMBO_PROC
    1126 00004c50     5708          CLR     A8
    1127 00004c60     8101          MOVE    A8,*A1
    1128 00004c70     0b00          ADDI    FLASH_COMBO_PID,A0
         00004c80     0143  
    1129 00004c90     09c1          MOVI    -1,A1
         00004ca0     ffff  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   26

    1130 00004cb0     0d5f          CALLA   KILALL
         00004cc0 00000000! 
    1131 00004ce0           NO_NEED_TO_KILL_COMBO_PROC
    1132 00004ce0                   PULL    A0
    1133 00004cf0     b6a8          MOVE    *A5(MD_COMBO),A8,L
         00004d00     0070  
    1134 00004d10     57ce          CLR     A14
    1135 00004d20     4c00          MOVE    A0,A0
    1136 00004d30     ca02          JRZ     NO_NEED_TO_SET_XFLIP
    1137 00004d40     09ce          MOVI    M_FLIPH,A14
         00004d50     0010  
    1138 00004d60           NO_NEED_TO_SET_XFLIP
    1139 00004d60     09e0          MOVI    SUPER_P,A0
         00004d70 00000000! 
    1140 00004d90     0d5f          CALLA   pal_getf
         00004da0 00000000! 
    1141 00004dc0     b008          MOVE    A0,*A8(OPAL)
         00004dd0     0150  
    1142                    
    1143 00004de0     b4c0          MOVE    *A6(PLT_COMBO_SIZE),A0
         00004df0     0030  
    1144 00004e00     24a0          SLL     5,A0
    1145 00004e10     0b20          ADDI    WHICH_SIZE_BAR,A0
         00004e20 00003a50' 
    1146 00004e40     8600          MOVE    *A0,A0,L
    1147                    
    1148 00004e50     b401          MOVE    *A0(ICTRL),A1
         00004e60     0060  
    1149 00004e70     55c1          OR      A14,A1
    1150 00004e80     0ba1          ORI     8000H|DMAWNZ,A1
         00004e90 00008002  
    1151 00004eb0     b028          MOVE    A1,*A8(OCTRL)
         00004ec0     00f0  
    1152 00004ed0     ba08          move    *a0(IANIOFF),*A8(ODOFF),L
         00004ee0     0020  
         00004ef0     0220  
    1153 00004f00     ba08          move    *a0(ISAG),*a8(OSAG),L
         00004f10     0040  
         00004f20     0110  
    1154 00004f30     ba08          move    *a0(0),*a8(OSIZE),L
         00004f40     0000  
         00004f50     0130  
    1155 00004f60     c017          JRUC    JUMP_BACK_IN
    1156                    
    1157 00004f70           WE_ARE_IN_COMBO_MODE
    1158                    ;IS THIS NECESSARY!
    1159 00004f70     2480          SLL     4,A0
    1160 00004f80     0b20          ADDI    COMBO_FLASH_FLAG,A0
         00004f90 00000a90- 
    1161 00004fb0     8401          MOVE    *A0,A1
    1162                    
    1163 00004fc0     cb10          JRNZ    WE_ARE_ON_RIGHT_SETTING
    1164 00004fd0     1821          MOVK    1,A1
    1165 00004fe0     8020          MOVE    A1,*A0
    1166                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   27

    1167 00004ff0                   PULL    A1
    1168 00005000                   PUSH    A1
    1169 00005010     0b01          ADDI    FLASH_COMBO_PID,A1
         00005020     0143  
    1170 00005030                   PUSH    A7
    1171 00005040     09e7          MOVI    FLASH_COMBO,A7
         00005050 000028e0' 
    1172 00005070     b6a8          MOVE    *A5(MD_COMBO),A8,L
         00005080     0070  
    1173 00005090     0d5f          CALLA   GETPRC
         000050a0 00000000! 
    1174 000050c0                   PULL    A7
    1175                    
    1176 000050d0           WE_ARE_ON_RIGHT_SETTING
    1177 000050d0                   PULL    A0
    1178                    
    1179 000050e0           JUMP_BACK_IN
    1180                            ;change the name
    1181 000050e0     b6a8          move    *a5(MD_NAME),a8,L
         000050f0     0050  
    1182 00005100     b4e1          move    *a7(WRESTLERNUM),a1
         00005110     0590  
    1183                    
    1184 00005120     05ae          move    @royal_rumble,a14
         00005130 00000000! 
    1185 00005150     ca41          jrz     dylcuname
    1186                    
    1187 00005160     b4ee          move    *a7(PLYRNUM),a14
         00005170     0580  
    1188 00005180     ca03          jrz     dylcbuddy0
    1189 00005190     0b4e          cmpi    1,a14
         000051a0     fffe  
    1190 000051b0     c73b          jrgt    dylcuname
    1191                            .if DEBUG
    1192                            LOCKUP          ;rewire to PLYRNUM 1 in buddy mode!?
    1193                            .endif
    1194 000051c0           dylcbuddy0      ;It's a royal rumble.  Create the pair of names to go with the slash.
    1195                            ; This code only executes once for the left meters in rumble mode.
    1196                    
    1197                            .ref    index1,index2
    1198                    
    1199 000051c0                   PUSH    a8
    1200                    
    1201 000051d0                   TBL_OBJ lname
    1202 00005230     05a0          move    @index1,a0
         00005240 00000000! 
    1203 00005260                   X32     a0
    1204 00005270     0b20          addi    shortname_tbl,a0
         00005280 00005780' 
    1205 000052a0     8600          move    *a0,a0,L
    1206 000052b0     0d5f          calla   civanic
         000052c0 00000000! 
    1207                    
    1208 000052e0     b501          move    *a8(OXPOS),a1
         000052f0     0090  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   28

    1209 00005300     1501          subk    8,a1
    1210 00005310     b40e          move    *a0(ISIZEX),a14
         00005320     0000  
    1211 00005330     45c1          sub     a14,a1
    1212 00005340     b40e          move    *a0(IANIOFFX),a14
         00005350     0020  
    1213 00005360     41c1          add     a14,a1
    1214 00005370     b028          move    a1,*a8(OXPOS)
         00005380     0090  
    1215                    
    1216 00005390                   TBL_OBJ lname
    1217 000053f0     05a0          move    @index2,a0
         00005400 00000000! 
    1218 00005420                   X32     a0
    1219 00005430     0b20          addi    shortname_tbl,a0
         00005440 00005780' 
    1220 00005460     8600          move    *a0,a0,L
    1221 00005470     0d5f          calla   civanic
         00005480 00000000! 
    1222                    
    1223 000054a0     b501          move    *a8(OXPOS),a1
         000054b0     0090  
    1224 000054c0     1101          addk    8,a1
    1225 000054d0     b40e          move    *a0(ISIZEX),a14
         000054e0     0000  
    1226 000054f0     41c1          add     a14,a1
    1227 00005500     b40e          move    *a0(IANIOFFX),a14
         00005510     0020  
    1228 00005520     45c1          sub     a14,a1
    1229 00005530     b028          move    a1,*a8(OXPOS)
         00005540     0090  
    1230                            
    1231 00005550     1941          movk    10,a1
    1232                    
    1233 00005560                   PULL    a8
    1234                    
    1235 00005570           dylcuname       X32     a1
    1236 00005580     0b21          addi    name_tbl,a1
         00005590 00005620' 
    1237 000055b0     8620          move    *a1,a0,L
    1238 000055c0     0d5f          calla   civanic
         000055d0 00000000! 
    1239                    
    1240 000055f0           dylcrets        PULL    a2,a3,a4,a5,a6,a7,a8,a9,a10,a11
    1241                    
    1242 00005610     0960          rets
    1243                    
    1244 00005620           name_tbl
    1245 00005620 00000000!         .long   NAM_BRT,NAM_RZR,NAM_UND,NAM_YOK,NAM_SHN
    1246 000056c0 00000000!         .long   NAM_BAM,NAM_DNK,NAM_DNK,NAM_LEX,NAM_LEX
    1247 00005760 00000000!         .long   WSF10SLSx
    1248                    
    1249 00005780           shortname_tbl
    1250 00005780 00000000!         .long   SHORTHRT,SHORTRZR,SHORTUND,SHORTYOK,SHORTSHN
    1251 00005820 00000000!         .long   SHORTBAM,SHORTDNK,SHORTDNK,SHORTLEX,SHORTLEX
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   29

    1252                    
    1253                    *****************************************************************************
    1254                    * Updates (resizes) the bars on a meter display.
    1255                    * 0a0H = meter (0 or 1)
    1256                    
    1257 000058c0            SUBRP  update_meter
    1258                    
    1259                            ;aim a1 at the MD struct
    1260 000058c0     09c1          movi    MD_SIZE,a1
         000058d0     0090  
    1261 000058e0     5e01          mpyu    a0,a1
    1262 000058f0     0b21          addi    meter_data,a1
         00005900 000001c0- 
    1263                    
    1264                            ;aim a3 at the PLT struct
    1265 00005920     b422          move    *a1(MD_LINK),a2
         00005930     0000  
    1266 00005940     4c43          move    a2,a3
    1267 00005950                   X64     a3              ;x by PLT_SIZE
    1268 00005960     0b23          addi    life_data,a3
         00005970 00000000- 
    1269                    
    1270                            ;set the life bar
    1271 00005990     b628          move    *a1(MD_LIFE),a8,L
         000059a0     0010  
    1272 000059b0     b46e          move    *a3(PLT_CLIFE),a14
         000059c0     0010  
    1273 000059d0     03ae          neg     a14
    1274 000059e0     0b0e          addi    LIFE_MAX,a14            ;a14 is pixels to hide
         000059f0     00a3  
    1275                    
    1276 00005a00     b1c8          move    a14,*a8(OFSET)
         00005a10     0100  
    1277 00005a20     ca28          JRZ     uehxNOT_TO_WORRY
    1278                    
    1279 00005a30     0b42          cmpi    2,a2
         00005a40     fffd  
    1280 00005a50     c516          jrge    we_are_a_drone_ignore
    1281 00005a60     4c46          move    a2,a6
    1282 00005a70                   X32     a6
    1283 00005a80     0b26          addi    process_ptrs,a6
         00005a90 00000000! 
    1284 00005ab0     86c6          move    *a6,a6,L
    1285 00005ac0     b4c1          move    *a6(OUTSIDE_ALONE),a1
         00005ad0     0b70  
    1286 00005ae0     ca0d          jrz     we_are_a_drone_ignore
    1287                    
    1288 00005af0     05a0          move    @ROLLING_COUNT,A0
         00005b00 00000000! 
    1289 00005b20     27e0          sll     31,a0
    1290 00005b30     cb07          jrnz    ignore_it
    1291                    
    1292 00005b40     b501          move    *a8(OFLAGS),a1
         00005b50     00e0  
    1293 00005b60     0bc1          xori    M_NODISP,A1
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   30

         00005b70 00000080  
    1294 00005b90     b028          move    a1,*a8(OFLAGS)
         00005ba0     00e0  
    1295 00005bb0           ignore_it
    1296 00005bb0     0960          rets
    1297                    
    1298 00005bc0           we_are_a_drone_ignore
    1299 00005bc0     07a1          MOVE    @WHICH_SCREEN,A1,L
         00005bd0 00000000! 
    1300 00005bf0     0b61          CMPI    DUMRETS,A1
         00005c00 ffffffff! 
    1301 00005c20     ca08          JREQ    uehxNOT_TO_WORRY
    1302 00005c30     b501          MOVE    *A8(OFLAGS),A1
         00005c40     00e0  
    1303 00005c50     0ba1          ORI     M_NODISP,A1
         00005c60 00000080  
    1304 00005c80     b028          MOVE    A1,*A8(OFLAGS)
         00005c90     00e0  
    1305 00005ca0     0960          RETS
    1306                    
    1307 00005cb0           uehxNOT_TO_WORRY
    1308 00005cb0     b501          MOVE    *A8(OFLAGS),A1
         00005cc0     00e0  
    1309 00005cd0     0b81          ANDI    0FFFFH-M_NODISP,A1
         00005ce0 ffff0080  
    1310 00005d00     b028          MOVE    A1,*A8(OFLAGS)
         00005d10     00e0  
    1311 00005d20     0960          RETS
    1312                    
    1313                    
    1314                    ;       movi    5,a7
    1315                    ;       mpyu    a14,a7
    1316                    ;       move    *a8(OIMG),a14,L
    1317                    ;       move    *a14(ISAG),a14,L
    1318                    ;       add     a14,a7
    1319                    ;       move    a7,*a8(OSAG),L
    1320                    
    1321 00005d30     0960          rets
    1322                    
    1323                    *****************************************************************************
    1324                    * Returns the remaining health for a player
    1325                    * 0a1H = PLYRNUM
    1326                    * <a0 = life (also returns Z bit based on life remaining)
    1327                    
    1328                    
    1329 00005d40            SUBR   get_health
    1330 00005d40                   PUSH    a1
    1331 00005d50                   X64     a1              ;x by PLT_SIZE
    1332 00005d60     0b21          addi    life_data,a1
         00005d70 00000000- 
    1333 00005d90     b420          move    *a1(PLT_LIFE),a0
         00005da0     0000  
    1334 00005db0                   PULL    a1
    1335 00005dc0                   TEST    a0              ;return Z on remaining life
    1336 00005dd0     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   31

    1337                    
    1338                    
    1339                    *****************************************************************************
    1340                    *
    1341                    * Adjusts a player's health total
    1342                    * 0a0H = amount to add to player's health total
    1343                    * 0a1H = PLYRNUM
    1344                    * 0a10H= attacker's process ptr
    1345                    *
    1346                    * Returns carry bit set if we're dead at the end of this, even if we
    1347                    * were dead when the function was called.  Returns carry clear if we're
    1348                    * alive afterwards.
    1349                    *
    1350                    * HACK ALERT:  In royal rumble mode, the two human players share a lifebar.
    1351                    *  This is implemented by halving all damage done to human players, and
    1352                    *  then redirecting any damage done to player 1 to player 0 instead.
    1353                    *  So right away we save the actual PLYRNUM, then change from 1 to 0 in
    1354                    *  royal rumble mode.  When it comes time to animate, we restore the
    1355                    *  original.
    1356                    *
    1357                    
    1358 00000b00                   .bss    yrjbactual_plyrnum,16
    1359                    
    1360                            ;reg use:
    1361                            ; a3 = adjusted health
    1362                            ; a4 = current health
    1363                            ; a5 = player life meter pointer
    1364                            ;a13 = our process pointer
    1365                    
    1366 00005de0            SUBR   adjust_health
    1367                    
    1368 00005de0                   PUSH    a1,a3,a4,a5,a8,a10,a13
    1369                    
    1370                            ;save the original PLYRNUM
    1371 00005e00     0581          move    a1,@yrjbactual_plyrnum
         00005e10 00000b00- 
    1372                    
    1373                            ;if we're in royal rumble mode and PLYRNUM is 1, make it zero.
    1374 00005e30     05ae          move    @royal_rumble,a14
         00005e40 00000000! 
    1375 00005e60     ca04          jrz     yrjbpnumok
    1376 00005e70     0b41          cmpi    1,a1
         00005e80     fffe  
    1377 00005e90     cb01          jrne    yrjbpnumok
    1378 00005ea0     5621          clr     a1
    1379 00005eb0           yrjbpnumok
    1380                    
    1381                    ****    ;get process pointer
    1382 00005eb0     4c2d          move    a1,a13
    1383 00005ec0                   X32     a13
    1384 00005ed0     0b2d          addi    process_ptrs,a13
         00005ee0 00000000! 
    1385 00005f00     87ad          move    *a13,a13,L
    1386                    
    1387                    ****    ;get the meter struct pointer
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   32

    1388 00005f10     4c25          move    a1,a5
    1389 00005f20                   X64     a5              ;x by PLT_SIZE
    1390 00005f30     0b25          addi    life_data,a5
         00005f40 00000000- 
    1391                    
    1392                    ****    ;get health
    1393 00005f60     b4a4          move    *a5(PLT_LIFE),a4
         00005f70     0000  
    1394                            
    1395                    ****    ;skip the whole routine if we're dead and taking damage
    1396 00005f80                   TEST    a0
    1397 00005f90     cf06          jrnn    yrjbx0          ;not taking damage
    1398 00005fa0     b5ae          move    *a13(PLYRMODE),a14
         00005fb0     05c0  
    1399 00005fc0     0b4e          cmpi    MODE_DEAD,a14
         00005fd0     fff6  
    1400 00005fe0     ca00          jreq    yrjbalready_dead
         00005ff0     01ad  
    1401 00006000           yrjbx0
    1402                    
    1403                    ****    ;skip multiplier if we're getting life back.
    1404 00006000                   TEST    a0
    1405 00006010     cf2e          jrnn    yrjbno_multiplier
    1406                    
    1407                    ****    ;make sure a10 is valid
    1408 00006020     b7ae          move    *a13(WHOHITME),a14,L
         00006030     04e0  
    1409 00006040     ca2b          jrz     yrjbno_valid_attacker   ;must have this.  WHOHITME is init'd
    1410 00006050     49ca          cmp     a14,a10                 ; to 0, and will thus match a cleared
    1411 00006060     cb29          jrne    yrjbno_valid_attacker   ; a10, with unpredictable results.
    1412                    
    1413                    
    1414                    ****    ;teammates do 1 pixel damage to each other
    1415 00006070     b543          move    *a10(PLYR_SIDE),a3
         00006080     05b0  
    1416 00006090     b5ae          move    *a13(PLYR_SIDE),a14
         000060a0     05b0  
    1417 000060b0     566e          xor     a3,a14
    1418 000060c0     cb08          jrnz    yrjbnorum1
    1419                    
    1420                            ;in 8-on-1, do half dmg to teammates instead of 1 pixel
    1421 000060d0     0d5f          calla   is_8_on_1
         000060e0 00000000! 
    1422 00006100     c902          jrnc    yrjbdo_1
    1423 00006110     2be0          sra     1,a0
    1424 00006120     c002          jruc    yrjbnorum1
    1425                    
    1426 00006130     09c0  yrjbdo_1        movi    -1,a0
         00006140     ffff  
    1427 00006150           yrjbnorum1
    1428                    
    1429                    ****    ;doing a combo?
    1430 00006150     b54e          move    *a10(COMBO_COUNT),a14
         00006160     0af0  
    1431 00006170     ca0c          jrz     DO_NORMAL_ADJUST_CHECK
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   33

    1432 00006180     4dc0          move    a14,a0
    1433                    
    1434                            ;it's a combo.  Clean DAM_MULT and adjust the damage:
    1435                            ; 0 < hit# < 12:        damage = 15 - hit#
    1436                            ;     hit# > 11:        damage = 4
    1437                    
    1438 00006190     57ce          clr     a14
    1439 000061a0     058e          move    a14,@DAM_MULT
         000061b0 00000860- 
    1440                    
    1441                    ;       subk    12,a0
    1442                    ;       subk    11,a0
    1443 000061d0     1540          subk    10,a0
    1444 000061e0     0b40          CMPI    -4,A0
         000061f0     0003  
    1445 00006200     c60f          JRLE    yrjbno_multiplier
    1446 00006210     09c0          MOVI    -4,A0
         00006220     fffc  
    1447 00006230     c00c          JRUC    yrjbno_multiplier
    1448                    
    1449 00006240           DO_NORMAL_ADJUST_CHECK
    1450                            ;not a combo.  check for a multiplier.
    1451 00006240     05a9          move    @DAM_MULT,a9
         00006250 00000860- 
    1452 00006270     ca08          jrz     yrjbno_multiplier
    1453                    
    1454                            ;compute new damage val
    1455                            ;MULT 2:  damage *= 3/2
    1456                            ;MULT 3:  damage *= 4/2
    1457                            ;MULT 4+: damage *= 5/2
    1458 00006280     4c0e          move    a0,a14
    1459 00006290     41c0  yrjbmul_lp      add     a14,a0
    1460 000062a0     3c49          dsj     a9,yrjbmul_lp
    1461 000062b0     2be0          sra     1,a0
    1462                            
    1463                            ;clr DAM_MULT
    1464 000062c0     57ce          clr     a14
    1465 000062d0     058e          move    a14,@DAM_MULT
         000062e0 00000860- 
    1466                    
    1467 00006300           yrjbno_valid_attacker
    1468 00006300           yrjbno_multiplier
    1469                    
    1470                    
    1471                    ****    ;Adjust damage based on the number of drones, unless we're adding
    1472                            ;life.
    1473 00006300                   TEST    a0
    1474 00006310     cf2f          jrnn    yrjbdc_adj_done
    1475                    
    1476                            ;count active drones
    1477                            ; count = 0 in attract mode, 4 in 8-on-1, 5 in buddy mode, 6 in
    1478                            ; 8-on-2.
    1479 00006320                   PUSH    a1,a2,a3
    1480                    
    1481 00006340     1883          movk    4,a3
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   34

    1482 00006350     0d5f          calla   is_8_on_1
         00006360 00000000! 
    1483 00006380     c818          jrc     yrjbadc_set
    1484                    
    1485 00006390     18a3          movk    5,a3
    1486 000063a0     05ae          move    @buddy_mode_on,a14
         000063b0 00000000! 
    1487 000063d0     cb13          jrnz    yrjbadc_set
    1488                    
    1489 000063e0     18c3          movk    6,a3
    1490 000063f0     05ae          move    @royal_rumble,a14
         00006400 00000000! 
    1491 00006420     cb0e          jrnz    yrjbadc_set
    1492                    
    1493 00006430     5663          clr     a3
    1494                    
    1495 00006440     05ae          move    @PSTATUS2,a14
         00006450 00000000! 
    1496 00006470     ca09          jrz     yrjbadc_set
    1497                    
    1498 00006480     09e1          movi    process_ptrs+40h,a1
         00006490 00000040! 
    1499 000064b0     09c2          movi    NUM_WRES-2,a2
         000064c0     0005  
    1500 000064d0     962e  yrjblp0 move    *a1+,a14,L
    1501 000064e0     ca02          jrz     yrjbadc_set
    1502 000064f0     1023          inc     a3
    1503 00006500     3c82          dsj     a2,yrjblp0
    1504                    
    1505 00006510           yrjbadc_set
    1506 00006510                   X32     a3
    1507 00006520     0b23          addi    yrjbdamage_mod_table,a3
         00006530 00007b80' 
    1508                    
    1509                            ;add 10h if the target is a player
    1510 00006550     b5ae          move    *a13(PLYR_TYPE),a14
         00006560     05a0  
    1511 00006570     0b4e          cmpi    PTYPE_DRONE,a14
         00006580     fffe  
    1512 00006590     ca01          jreq    yrjbadc_drone
    1513 000065a0     1203          addk    10h,a3
    1514 000065b0           yrjbadc_drone
    1515 000065b0     8463          move    *a3,a3
    1516 000065c0     5e03          mpyu    a0,a3
    1517 000065d0     4c60          move    a3,a0
    1518 000065e0     2b00          sra     8,a0
    1519                    
    1520 000065f0                   PULL    a1,a2,a3
    1521 00006610           yrjbdc_adj_done
    1522                    
    1523                    
    1524                    ****    ;Adjust damage based on game time adjustment
    1525 00006610     07ae          move    @speed_adjustment,a14,L
         00006620 00000ac0- 
    1526 00006640     5dc0          mpys    a14,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   35

    1527 00006650     2a01          sra     16,a1
    1528 00006660     4c20          move    a1,a0
    1529                    
    1530                    
    1531                    ****    ;Store away dmg this plyr has done for later analysis, but only
    1532                            ; if we're taking damage and a10 matches WHOHITME.
    1533 00006670                   TEST    a0
    1534 00006680     cf09          jrnn    yrjbnostore
    1535                    
    1536 00006690     b7ae          move    *a13(WHOHITME),a14,L
         000066a0     04e0  
    1537 000066b0     49ca          cmp     a14,a10
    1538 000066c0     cb05          jrne    yrjbnostore
    1539                    
    1540 000066d0     b54e          move    *a10(DAMAGE_GIVEN),a14
         000066e0     0dc0  
    1541 000066f0     440e          sub     a0,a14          ;(damage is negative)
    1542 00006700     b1ca          move    a14,*a10(DAMAGE_GIVEN)
         00006710     0dc0  
    1543 00006720           yrjbnostore
    1544                    
    1545                            ;do range checking on the damage value.  Don't allow a wrestler
    1546                            ; to have a life value below zero or above LIFE_MAX.
    1547 00006720     4c03          move    a0,a3
    1548 00006730     4083          add     a4,a3                   ;a3 is new life total
    1549 00006740     c606          jrle    yrjbbzero
    1550                    
    1551 00006750     0b43          cmpi    LIFE_MAX,a3
         00006760     ff5c  
    1552 00006770     c613          jrle    yrjbdmg_ok
    1553                    
    1554 00006780     09c3          movi    LIFE_MAX,a3
         00006790     00a3  
    1555 000067a0     c010          jruc    yrjbdmg_ok
    1556                    
    1557 000067b0           yrjbbzero       ;this hit will kill us.  If it was a 20+ point hit, and it killed
    1558                            ; us by a margin of 6 pixels or less, fudge it by taking five
    1559                            ; off the damage
    1560                    
    1561 000067b0     0b43          cmpi    -10,a3
         000067c0     0009  
    1562 000067d0     c606          jrle    yrjbno_fudge    ;skip if life is -4 or less
    1563                    
    1564 000067e0     0b40          cmpi    -20,a0
         000067f0     0013  
    1565 00006800     c703          jrgt    yrjbno_fudge    ;skip if the hit wasn't 25 or more
    1566                    
    1567                            ;fudge it.  Add 5 to the adjusted life to keep us alive
    1568 00006810     10a3          addk    5,a3
    1569 00006820     18a3          movk    5,a3
    1570                            ;and add 5 to the health adjustment (thus subtracting five from
    1571                            ; the damage done), just to be safe.
    1572                    ;       addk    5,a0
    1573 00006830     c007          jruc    yrjbdmg_ok
    1574                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   36

    1575 00006840           yrjbno_fudge
    1576 00006840     5663          clr     a3
    1577                    
    1578                            ;if we're in attract mode, don't die!
    1579 00006850     05ae          move    @PSTATUS2,a14
         00006860 00000000! 
    1580 00006880     cb02          jrnz    yrjbnorm1
    1581 00006890     09c3          MOVI    LIFE_MAX,a3
         000068a0     00a3  
    1582                    
    1583 000068b0           yrjbnorm1       ;if he's out of life and we're in debug mode, fill him up.
    1584                            .if DEBUG
    1585                            move    @fight_debug,a14
    1586                            jrz     yrjbdmg_ok
    1587                            movi    LIFE_MAX,a3
    1588                            .endif
    1589                    
    1590 000068b0           yrjbdmg_ok
    1591 000068b0     b065          move    a3,*a5(PLT_LIFE)
         000068c0     0000  
    1592                    
    1593                            ;update LAST_DAMAGE
    1594 000068d0     05ae          move    @PCNT,a14
         000068e0 00000000! 
    1595 00006900     b1cd          move    a14,*a13(LAST_DAMAGE)
         00006910     0d50  
    1596                    
    1597                            ;figure out if we need to flash the lifebar as a warning.
    1598                            ;if a4 > 30 and a3 <= 30, fire off a danger process.
    1599                            ; re above:  a4 is current life, a3 is life after this hit.
    1600 00006920     0b44          cmpi    30,a4
         00006930     ffe1  
    1601 00006940     c612          jrle    yrjbno_danger_proc
    1602 00006950     0b43          cmpi    30,a3
         00006960     ffe1  
    1603 00006970     c70f          jrgt    yrjbno_danger_proc
    1604                    
    1605                            ;skip this if we have any teammates
    1606 00006980     4da0          move    a13,a0
    1607 00006990     0d5f          calla   ck_any_teammates
         000069a0 00000000! 
    1608 000069c0     c80a          jrc     yrjbno_danger_proc
    1609 000069d0                   CREATE  FLASH_PID,flash_obj
    1610 00006a50     b3a0          move    a13,*a0(PDATA),L
         00006a60     0100  
    1611                    
    1612 00006a70           yrjbno_danger_proc
    1613                    
    1614 00006a70                   TEST    a3
    1615 00006a80     cb00          jrnz    yrjbnot_dead
         00006a90     010a  
    1616                    
    1617                            ;player IS dead. -- time to restore original PLYRNUM
    1618 00006aa0     05a1          move    @yrjbactual_plyrnum,a1
         00006ab0 00000b00- 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   37

    1619 00006ad0     0d5f          calla   get_process_ptr
         00006ae0 00000000! 
    1620 00006b00     4c0d          move    a0,a13
    1621                    
    1622                            ;set I_WILL_DIE on dead human's teammate if we're in royal rumble
    1623                            ; mode.
    1624 00006b10     05ae          move    @royal_rumble,a14
         00006b20 00000000! 
    1625 00006b40     ca0f          jrz     yrjbnorum
    1626 00006b50     0b41          cmpi    2,a1
         00006b60     fffd  
    1627 00006b70     c50c          jrge    yrjbnorum
    1628                    
    1629 00006b80     0bc1          xori    1,a1
         00006b90 00000001  
    1630 00006bb0     0d5f          calla   get_process_ptr
         00006bc0 00000000! 
    1631 00006be0     182e          movk    1,a14
    1632 00006bf0     b1c0          move    a14,*a0(I_WILL_DIE)
         00006c00     0b30  
    1633 00006c10     0bc1          xori    1,a1
         00006c20 00000001  
    1634                    
    1635 00006c40           yrjbnorum       ;if dying guy is a drone, and we're in 8-on-? mode, decrement
    1636                            ; wrestler_count and wake up the wrestler_counter process.
    1637 00006c40     05a1          move    @yrjbactual_plyrnum,a1
         00006c50 00000b00- 
    1638 00006c70     0b41          cmpi    2,a1
         00006c80     fffd  
    1639 00006c90     c418          jrlt    yrjbnotd8
    1640                    
    1641                            ;Set the COUNTED_DEAD bit too.  If it's already set, don't decrement
    1642                            ; wrestler_count again.
    1643 00006ca0     b7ae          move    *a13(STATUS_FLAGS),a14,L
         00006cb0     0b50  
    1644 00006cc0     1dae          btst    B_COUNTED_DEAD,a14
    1645 00006cd0     cb14          jrnz    yrjbnotd8
    1646 00006ce0     0bae          ori     M_COUNTED_DEAD,a14
         00006cf0 00040000  
    1647 00006d10     b3cd          move    a14,*a13(STATUS_FLAGS),L
         00006d20     0b50  
    1648                    
    1649 00006d30     07a0          move    @wrestler_count_proc,a0,L       ; Does the counter proc exist ?
         00006d40 00000000! 
    1650 00006d60     ca0b          jrz     yrjbnotd8                               ; br = no
    1651 00006d70     05ae          move    @wrestler_count,a14             ; Current count == 0 ?
         00006d80 00000000! 
    1652 00006da0     ca07          jrz     yrjbnotd8                               ; br = yes
    1653 00006db0     142e          dec     a14                             ; Decrement it
    1654 00006dc0     058e          move    a14,@wrestler_count             ; Write it back
         00006dd0 00000000! 
    1655 00006df0     182e          movk    1,a14                           ; Make counter proc wakeup on next tick
    1656 00006e00     b1c0          move    a14,*a0(PTIME)
         00006e10     0030  
    1657 00006e20           yrjbnotd8
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   38

    1658                    
    1659                            ;Is combo mode on for this player?
    1660 00006e20     b7a8          move    *a13(WHOHITME),a8,L
         00006e30     04e0  
    1661 00006e40     0d3f          callr   CHECK_COMBO_GO
         00006e50     fc2f  
    1662 00006e60     c40a          jrlt    yrjbok
    1663                    ;Am I in the middle of a combo?
    1664 00006e70     b500          move    *a8(COMBO_COUNT),a0
         00006e80     0af0  
    1665 00006e90     ca07          jrz     yrjbok
    1666                    ;Give him some life back
    1667 00006ea0     182e          movk    1,a14
    1668 00006eb0     b1c5          move    a14,*a5(PLT_LIFE)
         00006ec0     0000  
    1669 00006ed0     b1cd          move    a14,*a13(I_WILL_DIE)
         00006ee0     0b30  
    1670 00006ef0     c000          jruc    yrjbalready_dead
         00006f00     00bc  
    1671 00006f10           yrjbok
    1672                    
    1673                            ;temp! - 314
    1674                            .if DEBUG
    1675                            DBEVENT BDE_DIES,a13,L,*a13(WRESTLERNUM),W,*a13(PLYRNUM),W
    1676                            .endif
    1677                    
    1678                            ;death sound
    1679 00006f10     09c0          movi    034h,a0
         00006f20     0034  
    1680 00006f30     0d5f          calla   triple_sound
         00006f40 00000000! 
    1681                    
    1682 00006f60     57ce          clr     a14
    1683 00006f70     b1cd          move    a14,*a13(ROLL_POS)
         00006f80     0450  
    1684                    
    1685                    ;Lookup table based on wrestler type
    1686                    
    1687 00006f90     b7aa          move    *a13(WHOHITME),a10,L    ;* wrestler process
         00006fa0     04e0  
    1688 00006fb0     b540          move    *a10(ATTACK_MODE),a0
         00006fc0     05d0  
    1689 00006fd0     0b40          cmpi    AMODE_BLBOWDROP,a0
         00006fe0     ffe6  
    1690 00006ff0     ca24          jrz     yrjbskip0
    1691 00007000     0b40          cmpi    AMODE_BSTOMP,a0
         00007010     ffe5  
    1692 00007020     ca21          jrz     yrjbskip0
    1693 00007030     0b40          cmpi    AMODE_BUTTSTOMP,a0
         00007040     ffe1  
    1694 00007050     ca1e          jrz     yrjbskip0
    1695                    
    1696                            ;if death by buzzer, jump to yrjbskip0 ONLY if it was unblocked.
    1697 00007060     0b40          cmpi    AMODE_BUZZ,a0
         00007070     ffe8  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   39

    1698 00007080     cb05          jrne    yrjbnobuzz
    1699 00007090     b5ae          move    *a13(PLYRMODE),a14
         000070a0     05c0  
    1700 000070b0     0b4e          cmpi    MODE_BLOCK,a14
         000070c0     fff8  
    1701 000070d0     cb16          jrne    yrjbskip0
    1702 000070e0           yrjbnobuzz
    1703                    
    1704                            ;if our DEAD_ANIM bit is set, don't animate
    1705 000070e0     b5ae          move    *a13(STATUS_FLAGS),a14
         000070f0     0b50  
    1706 00007100     1e0e          btst    B_DEAD_ANIM,a14
    1707 00007110     cb12          jrnz    yrjbskip0
    1708                    
    1709 00007120     b5a0          move    *a13(WRESTLERNUM),a0
         00007130     0590  
    1710 00007140                   X32     a0
    1711                    
    1712 00007150     b5ae          move    *a13(PLYRMODE),a14
         00007160     05c0  
    1713 00007170     0b4e          cmpi    MODE_DEAD,a14
         00007180     fff6  
    1714 00007190     ca03          jrz     yrjbgrnd
    1715 000071a0     0b4e          cmpi    MODE_ONGROUND,a14
         000071b0     fffb  
    1716 000071c0     cb1c          jrnz    yrjbfall
    1717                    
    1718 000071d0     0b20  yrjbgrnd        addi    convulse_t,a0
         000071e0 00007d80' 
    1719 00007200     8600          move    *a0,a0,L
    1720                    
    1721 00007210     0d5f          calla   change_anim1a
         00007220 00000000! 
    1722                    
    1723 00007240           yrjbskip0
    1724 00007240                   SETMODE DEAD
    1725 000072f0     0d5f          calla   wres_collis_off
         00007300 00000000! 
    1726                    
    1727 00007320     0d5f          calla   flash_red
         00007330 00000000! 
    1728                    
    1729 00007350                   PULL    a1,a3,a4,a5,a8,a10,a13
    1730                    
    1731 00007370     0de0          setc
    1732 00007380     0960          rets
    1733                    
    1734 00007390           yrjbfall
    1735                    ;Check plyr mode, attempt a death fall back
    1736                    ;Otherewise, just set mode dead
    1737 00007390     0b4e          cmpi    MODE_NORMAL,a14
         000073a0     ffff  
    1738 000073b0     ca3f          jrz     yrjbfallbk
    1739 000073c0     0b4e          cmpi    MODE_RUNNING,a14
         000073d0     fffe  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   40

    1740 000073e0     ca3c          jrz     yrjbfallbk
    1741 000073f0     0b4e          cmpi    MODE_INAIR,a14
         00007400     fffd  
    1742 00007410     ca39          jrz     yrjbfallbk
    1743 00007420     0b4e          cmpi    MODE_INAIR2,a14
         00007430     ffea  
    1744 00007440     ca36          jrz     yrjbfallbk
    1745 00007450     0b4e          cmpi    MODE_BOUNCING,a14
         00007460     fffa  
    1746 00007470     ca33          jrz     yrjbfallbk
    1747 00007480     0b4e          cmpi    MODE_ONTURNBKL,a14
         00007490     fff9  
    1748 000074a0     ca30          jrz     yrjbfallbk
    1749 000074b0     0b4e          cmpi    MODE_BLOCK,a14
         000074c0     fff8  
    1750 000074d0     ca2d          jrz     yrjbfallbk
    1751 000074e0     0b4e          cmpi    MODE_DIZZY,a14
         000074f0     fff7  
    1752 00007500     ca2a          jrz     yrjbfallbk
    1753 00007510     0b4e          cmpi    MODE_CLIMBTURNBKL,a14
         00007520     fff4  
    1754 00007530     ca27          jrz     yrjbfallbk
    1755 00007540     0b4e          cmpi    MODE_HEADHOLD,a14
         00007550     ffef  
    1756 00007560     ca24          jrz     yrjbfallbk
    1757 00007570     0b4e          cmpi    MODE_HEADHELD,a14
         00007580     ffec  
    1758 00007590     ca1c          jrz     yrjbwill_die
    1759                    
    1760                    ;Puppet mode?  Others?
    1761                    ;How best to deal with this?
    1762                    
    1763                    
    1764                    ;       LOCKUP
    1765                    
    1766                    ;At least zero vels?
    1767 000075a0     5600          clr     a0
    1768 000075b0     b20d          move    a0,*a13(OBJ_XVEL),L
         000075c0     02d0  
    1769 000075d0     b20d          move    a0,*a13(OBJ_ZVEL),L
         000075e0     0310  
    1770 000075f0     b20d          move    a0,*a13(OBJ_YVEL),L
         00007600     02f0  
    1771                         
    1772 00007610                   SETMODE DEAD
    1773 000076c0     0d5f  yrjbskip        calla   wres_collis_off
         000076d0 00000000! 
    1774                    
    1775 000076f0     0d5f          calla   flash_red
         00007700 00000000! 
    1776                    
    1777 00007720                   PULL    a1,a3,a4,a5,a8,a10,a13
    1778                    
    1779 00007740     0de0          setc
    1780 00007750     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   41

    1781                    
    1782 00007760           yrjbwill_die
    1783                    ;       movk    1,a0
    1784                    ;       move    a0,*a13(I_WILL_DIE)
    1785 00007760     09c0          movi    3*60,a0
         00007770     00b4  
    1786 00007780     b00d          move    a0,*a13(I_WILL_DIE)
         00007790     0b30  
    1787 000077a0     c0f1          jruc    yrjbskip
    1788                    
    1789 000077b0     0b20  yrjbfallbk      addi    yrjbfallbacks_t,a0
         000077c0 00007c60' 
    1790 000077e0     8600          move    *a0,a0,L
    1791                    
    1792 000077f0     0d5f          calla   change_anim1a
         00007800 00000000! 
    1793                    
    1794 00007820     b7a2          move    *a13(OBJ_XVEL),a2,L
         00007830     02d0  
    1795 00007840     0b62          cmpi    [2,0],a2
         00007850 fffdffff  
    1796 00007870     c710          jrgt    yrjbokz
    1797 00007880     09e2          movi    [2,0],a2
         00007890 00020000  
    1798 000078b0     b5a1          move    *a13(OBJ_XPOSINT),a1
         000078c0     0110  
    1799 000078d0     b7a0          move    *a13(WHOHITME),a0,L     ;* wrestler process
         000078e0     04e0  
    1800                    
    1801 000078f0     b400          move    *a0(OBJ_XPOSINT),a0
         00007900     0110  
    1802 00007910     4801          cmp     a0,a1                   ;offx - defx
    1803 00007920     c703          jrgt    yrjbfall_right          ;attacker on left
    1804 00007930     09e2          movi    [-2,0],a2
         00007940 fffe0000  
    1805                    
    1806                    
    1807 00007960           yrjbfall_right
    1808 00007960     b24d          move    a2,*a13(OBJ_XVEL),L
         00007970     02d0  
    1809 00007980           yrjbokz
    1810                    
    1811 00007980     0d5f          calla   wres_collis_off
         00007990 00000000! 
    1812                         
    1813 000079b0                   SETMODE DEAD
    1814                    
    1815 00007a60     0d5f          calla   flash_red
         00007a70 00000000! 
    1816                    
    1817 00007a90                   PULL    a1,a3,a4,a5,a8,a10,a13
    1818                    
    1819 00007ab0     0de0          setc
    1820 00007ac0     0960          rets
    1821                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   42

    1822                    
    1823                    
    1824 00007ad0           yrjbalready_dead
    1825                    
    1826 00007ad0     0d5f          calla   flash_red
         00007ae0 00000000! 
    1827                    
    1828 00007b00                   PULL    a1,a3,a4,a5,a8,a10,a13
    1829 00007b20     0de0          setc
    1830 00007b30     0960          rets
    1831                    
    1832 00007b40           yrjbnot_dead
    1833 00007b40                   PULL    a1,a3,a4,a5,a8,a10,a13
    1834 00007b60     0320          clrc
    1835 00007b70     0960          rets
    1836                    
    1837                    
    1838                    ;               tgt = drone     tgt = player
    1839 00007b80           yrjbdamage_mod_table
    1840 00007b80     00da          .word   _85PCT,         _85PCT          ;0 drones
    1841 00007ba0     0100          .word   _100PCT,        _100PCT         ;1 drone
    1842 00007bc0     011a          .word   _110PCT,        _90PCT          ;2 drones
    1843 00007be0     0140          .word   _125PCT,        _75PCT          ;3 drones
    1844 00007c00     0173          .word   _145PCT,        _60PCT          ;8-on-1 match
    1845 00007c20     011a          .word   _110PCT,        _90PCT          ;buddy mode match
    1846 00007c40     014c          .word   _130PCT,        _30PCT          ;8-on-2 match
    1847                    
    1848                    
    1849 00007c60            SUBR   fallbacks_t
    1850 00007c60           yrjbfallbacks_t
    1851 00007c60           yrjbfall_back
    1852 00007c60                   REFLONG hrt_fall_back_anim              ;0 Bret Hart
    1853 00007c80                   REFLONG rzr_fall_back_anim              ;1 Razor Ramon
    1854 00007ca0                   REFLONG und_fall_back_anim              ;2 Undertaker
    1855 00007cc0                   REFLONG yok_fall_back_anim              ;3 Yokozuna
    1856 00007ce0                   REFLONG shn_fall_back_anim              ;4 Shawn Michaels
    1857 00007d00                   REFLONG bam_fall_back_anim              ;5 Bam Bam
    1858 00007d20                   REFLONG dnk_fall_back_anim              ;6 Doink
    1859 00007d40 00000000          .long   0                               ;7 spare
    1860 00007d60                   REFLONG lex_fall_back_anim              ;8 Lex Luger
    1861                     
    1862                    
    1863 00007d80            SUBR   convulse_t
    1864 00007d80           yrjbhitonground
    1865 00007d80                   REFLONG hrt_hitonground_anim            ;0 Bret Hart
    1866 00007da0                   REFLONG rzr_hitonground_anim
    1867 00007dc0                   REFLONG und_hitonground_anim            ;2 Undertaker
    1868 00007de0                   REFLONG yok_hitonground_anim            ;3 Yokozuna
    1869 00007e00                   REFLONG shn_hitonground_anim            ;4 Shawn Michaels
    1870 00007e20                   REFLONG bam_hitonground_anim            ;5 Bam Bam
    1871 00007e40                   REFLONG dnk_hitonground_anim            ;6 Doink
    1872 00007e60 00000000          .long   0                               ;7 spare
    1873 00007e80                   REFLONG lex_hitonground_anim            ;8 Lex Luger
    1874                    
    1875                    *****************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   43

    1876                    * Create the credits display at the top of the screen
    1877                    *
    1878                    
    1879 00007ea0            SUBR   start_credbox
    1880                    
    1881                            ;draw the panel
    1882 00007ea0                   TBL_OBJ jqobplate
    1883                    
    1884 00007f00     0d3f          callr   update_credit_msg
         00007f10     0001  
    1885 00007f20     0960          rets
    1886                    
    1887                            
    1888                    ***************************************
    1889                    * Display credit info - Gets called from coin routines.
    1890                    *
    1891                    * Trashes a0-a7
    1892                    
    1893 00007f30            SUBR   update_credit_msg
    1894                    
    1895 00007f30                   PUSH    a8,a9,a10
    1896                    
    1897                    ;Only turn on these messages if during gameplay, or player select!
    1898                    
    1899                            .ref    SHOW_CRD_FLAG
    1900 00007f50     05a0          move    @SHOW_CRD_FLAG,a0
         00007f60 00000000! 
    1901 00007f80     cb11          jrnz    jqobcont0
    1902                    
    1903 00007f90     05a0          move    @GAMSTATE,a0
         00007fa0 00000000! 
    1904 00007fc0     0b40          cmpi    INSELECT,a0
         00007fd0     fffd  
    1905 00007fe0     ca1d          jrz     jqobcont
    1906                    
    1907 00007ff0     0b40          CMPI    INPARTY,A0
         00008000     fff9  
    1908 00008010     ca1a          JREQ    jqobcont
    1909 00008020     0b40          CMPI    INPREGAME,A0
         00008030     fffc  
    1910 00008040     ca17          JREQ    jqobcont
    1911 00008050     0b40          CMPI    INPREGAME2,A0
         00008060     fff6  
    1912 00008070     ca14          JREQ    jqobcont
    1913                    
    1914 00008080     1480          subk    INGAME,a0
    1915 00008090     cb6a          jrne    jqobx
    1916                    
    1917 000080a0           jqobcont0
    1918                    
    1919                    ;When coins are entered, and the game is being played, tell the meter
    1920                    ;code to display approproiate coinin message.
    1921                    
    1922                    ;Get meter process info
    1923 000080a0     09c0          movi    METER_PID,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   44

         000080b0     0240  
    1924 000080c0     5621          clr     a1
    1925 000080d0     03e1          not     a1
    1926 000080e0     0d5f          calla   EXISTP
         000080f0 00000000! 
    1927 00008110     ca0a          jrz     jqobcont
    1928                    
    1929 00008120     1821          movk    1,a1
    1930 00008130     b020          move    a1,*a0(P1CNTR)
         00008140     0100  
    1931 00008150     b020          move    a1,*a0(P2CNTR)
         00008160     0110  
    1932 00008170     5621          clr     a1
    1933 00008180     b020          move    a1,*a0(P1STATE)
         00008190     0120  
    1934 000081a0     b020          move    a1,*a0(P2STATE)
         000081b0     0130  
    1935                    
    1936 000081c0           jqobcont
    1937                    
    1938 000081c0     09c0          movi    CLSDEAD|CREDITID,a0
         000081d0     212a  
    1939 000081e0     0d5f          calla   obj_del1c               ;kill credit/qrtr imgs
         000081f0 00000000! 
    1940                     
    1941 00008210                   TBL_OBJ jqobplate
    1942                    
    1943 00008270     09ea          movi    freeply,a10
         00008280 00000000! 
    1944                    
    1945 000082a0     1a60          movk    ADJFREPL,a0
    1946 000082b0     0d5f          CALLA   GET_ADJ                 ;SEE IF FREEPLAY......(Z BIT CLEAR IF SO!)
         000082c0 00000000! 
    1947 000082e0     cb32          jrnz    jqobfreep
    1948                    
    1949 000082f0     09ea          movi    credit,a10
         00008300 00000000! 
    1950                    
    1951 00008320     0d5f          calla   GET_CREDITS
         00008330 00000000! 
    1952 00008350     0d5f          calla   BINBCD
         00008360 00000000! 
    1953                            
    1954 00008380     4c09          move    a0,a9
    1955 00008390     2780          sll     32-4,a0
    1956 000083a0     2d20          srl     32-4-5,a0               ;*32
    1957 000083b0     0b20          addi    jqobnumfont,a0
         000083c0 00008820' 
    1958 000083e0     8602          move    *a0,a2,L
    1959                    
    1960 000083f0     09e0          movi    [216,0],a0
         00008400 00d80000  
    1961 00008420     09e1          movi    [6,0],a1
         00008430 00060000  
    1962                    ;       movi    1006,a3                 ;Z
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   45

    1963 00008450     09c3          movi    1901H,a3                        ;Z
         00008460     1901  
    1964 00008470     09e4          movi    DMAWNZ|M_SCRNREL,a4
         00008480 0000a002  
    1965 000084a0     09c5          movi    CLSDEAD|CREDITID,a5
         000084b0     212a  
    1966 000084c0     56c6          clr     a6
    1967 000084d0     56e7          clr     a7
    1968 000084e0     0d5f          calla   BEGINOBJ
         000084f0 00000000! 
    1969                            
    1970 00008510     2f89          srl     4,a9
    1971 00008520     2789          sll     32-4,a9
    1972 00008530     2d29          srl     32-4-5,a9               ;*32
    1973 00008540     0b29          addi    jqobnumfont,a9
         00008550 00008820' 
    1974 00008570     8722          move    *a9,a2,L
    1975                    
    1976 00008580     09e0          movi    [211,0],a0
         00008590 00d30000  
    1977 000085b0     09e1          movi    [6,0],a1
         000085c0 00060000  
    1978 000085e0     0d5f          calla   BEGINOBJ
         000085f0 00000000! 
    1979                            
    1980 00008610     09e0  jqobfreep       movi    [179,0],a0
         00008620 00b30000  
    1981 00008640     09e1          movi    [6,0],a1
         00008650 00060000  
    1982 00008670     4d42          move    a10,a2
    1983                    ;       movi    1006,a3                 ;Z
    1984 00008680     09c3          movi    1901H,a3                        ;Z
         00008690     1901  
    1985 000086a0     09e4          movi    DMAWNZ|M_SCRNREL,a4
         000086b0 0000a002  
    1986 000086d0     09c5          movi    CLSDEAD|CREDITID,a5
         000086e0     212a  
    1987 000086f0     56c6          clr     a6
    1988 00008700     56e7          clr     a7
    1989 00008710     0d5f          calla   BEGINOBJ
         00008720 00000000! 
    1990                    
    1991 00008740           jqobx   PULL    a8,a9,a10
    1992                    
    1993 00008760     0960          rets
    1994                    
    1995                    ***************************************
    1996                    * config data
    1997                    *
    1998                    
    1999 00008770     00b0  jqobplate       .word   176,4,1900H                             ;X, Y, Z
    2000 000087a0 00000000!         .long   crplate                                 ;IMG
    2001 000087c0     a002          .word   DMAWNZ|M_SCRNREL                        ;CTRL
    2002 000087d0     212a          .word   CLSDEAD|CREDITID                        ;OID
    2003 000087e0 00000000          .long   0,0                                     ;XVEL, YVEL
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   46

    2004 00008820                   .even
    2005                    
    2006 00008820           jqobnumfont
    2007 00008820 00000000!         .long   font60
    2008 00008840 00000000!         .long   font61
    2009 00008860 00000000!         .long   font62
    2010 00008880 00000000!         .long   font63
    2011 000088a0 00000000!         .long   font64
    2012 000088c0 00000000!         .long   font65
    2013 000088e0 00000000!         .long   font66
    2014 00008900 00000000!         .long   font67
    2015 00008920 00000000!         .long   font68
    2016 00008940 00000000!         .long   font69
    2017                    
    2018                    *****************************************************************************
    2019                    * Moves PLT_CLIFE toward PLT_LIFE if it isn't already there.
    2020                    * 0a0H = PLYRNUM
    2021                    
    2022              0002  ujzzlifebar_deltavee    equ     2       ;pixels per tick of motion
    2023                    
    2024 00008960            SUBRP  inc_life
    2025                    
    2026                            ;aim a1 at PLT block
    2027 00008960     4c01          move    a0,a1
    2028 00008970                   X64     a1              ;x by PLT_SIZE
    2029 00008980     0b21          addi    life_data,a1
         00008990 00000000- 
    2030                    
    2031                            ;check the values
    2032 000089b0     b422          move    *a1(PLT_LIFE),a2
         000089c0     0000  
    2033 000089d0     b423          move    *a1(PLT_CLIFE),a3
         000089e0     0010  
    2034                    
    2035 000089f0     4843          cmp     a2,a3
    2036 00008a00     ca0c          jrz     ujzzdone
    2037                    
    2038                            ;CLIFE is lagging.  move it toward LIFE
    2039 00008a10     c704          jrgt    ujzzshrink
    2040                    
    2041                            ;CLIFE needs to grow
    2042 00008a20     0b03          addi    ujzzlifebar_deltavee,a3
         00008a30     0002  
    2043 00008a40     4862          cmp     a3,a2
    2044 00008a50     c003          jruc    ujzzset
    2045                    
    2046 00008a60           ujzzshrink
    2047 00008a60     0be3          subi    ujzzlifebar_deltavee,a3
         00008a70     fffd  
    2048 00008a80     4843          cmp     a2,a3
    2049 00008a90           ujzzset
    2050 00008a90     c501          jrge    ujzzinrange
    2051                    
    2052                            ;overshot it
    2053 00008aa0     4c43          move    a2,a3       
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   47

    2054 00008ab0           ujzzinrange
    2055 00008ab0     b061          move    a3,*a1(PLT_CLIFE)
         00008ac0     0010  
    2056                    
    2057 00008ad0           ujzzdone
    2058 00008ad0     0960          rets
    2059                    
    2060                    
    2061                    *****************************************************************************
    2062                    * Flash the background of the life meter for the current player.
    2063                    * 0a10H = plyrnum
    2064                    
    2065              00b9  danger_snd      equ     0b9h
    2066                    
    2067 00008ae0            SUBRP  flash_obj
    2068                    
    2069                            ;if we're a drone and we have teammates, ignore this.
    2070 00008ae0     0b4a          cmpi    1,a10
         00008af0     fffe  
    2071 00008b00     c614          jrle    gnuzndie
    2072                    
    2073 00008b10     4d41          move    a10,a1
    2074 00008b20     0d5f          calla   get_process_ptr
         00008b30 00000000! 
    2075 00008b50     b404          move    *a0(PLYR_SIDE),a4
         00008b60     05b0  
    2076 00008b70     09e1          movi    process_ptrs+40h,a1
         00008b80 00000040! 
    2077 00008ba0     09c2          movi    NUM_WRES-2,a2
         00008bb0     0005  
    2078 00008bc0     9623  gnuzlp0 move    *a1+,a3,L
    2079 00008bd0     ca07          jrz     gnuzndie                        ;done at first inactive
    2080 00008be0     4803          cmp     a0,a3
    2081 00008bf0     ca04          jreq    gnuznxt0                        ;skip self
    2082 00008c00     b46e          move    *a3(PLYR_SIDE),a14
         00008c10     05b0  
    2083 00008c20     488e          cmp     a4,a14
    2084 00008c30     ca6f          jreq    gnuzdie                 ;die--we have a teammate
    2085 00008c40     3d22  gnuznxt0        dsj     a2,gnuzlp0
    2086                    
    2087 00008c50           gnuzndie
    2088                            ;find the bar obj
    2089 00008c50     0d5f          calla   arm_comeback_award
         00008c60 00000000! 
    2090                    
    2091 00008c80     09c0          movi    danger_snd,a0
         00008c90     00b9  
    2092 00008ca0     0d5f          calla   triple_sound
         00008cb0 00000000! 
    2093                    
    2094                            ;danger music - skip if in 8-on-2 mode
    2095 00008cd0     0d5f          calla   is_8_on_1
         00008ce0 00000000! 
    2096 00008d00     c862          jrc     gnuzdie
    2097 00008d10     05ae          move    @royal_rumble,a14
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   48

         00008d20 00000000! 
    2098 00008d40     cb5e          jrnz    gnuzdie
    2099                    
    2100 00008d50     09c3          movi    18,a3
         00008d60     0012  
    2101 00008d70     05ae          move    @temp_music,a14
         00008d80 00000000! 
    2102 00008da0     0b4e          cmpi    15,a14
         00008db0     fff0  
    2103 00008dc0     ca01          jreq    end_music_set
    2104 00008dd0     1b43          movk    26,a3
    2105 00008de0           end_music_set
    2106 00008de0     0d5f          calla   SNDSND
         00008df0 00000000! 
    2107                    
    2108 00008e10     09e2          movi    danger,a2
         00008e20 00000000! 
    2109 00008e40     09e0          movi    [85h,0],a0
         00008e50 00850000  
    2110 00008e70     b7a1          move    *a13(PDATA),a1,L
         00008e80     0100  
    2111 00008e90     b421          move    *a1(PLYR_SIDE),a1
         00008ea0     05b0  
    2112 00008eb0     ca03          jrz     gnuzp1
    2113 00008ec0     09e0          movi    [0e4h,0],a0
         00008ed0 00e40000  
    2114 00008ef0     09e1  gnuzp1  movi    [18h,0],a1
         00008f00 00180000  
    2115 00008f20     09c3          movi    name_z,a3                       ;Z
         00008f30     00cb  
    2116 00008f40     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00008f50 0000a102  
    2117 00008f70     09c5          movi    CLSDEAD,a5
         00008f80     2000  
    2118 00008f90     56c6          clr     a6
    2119 00008fa0     56e7          clr     a7
    2120 00008fb0     0d5f          calla   BEGINOBJ
         00008fc0 00000000! 
    2121                    
    2122 00008fe0     1a89          movk    20,a9
    2123 00008ff0           gnuzlp
    2124                    
    2125 00008ff0     4d40          move    a10,a0
    2126 00009000                   X32     a0
    2127 00009010     0b20          addi    process_ptrs,a0
         00009020 00000000! 
    2128 00009040     8600          move    *a0,a0,L
    2129                    
    2130 00009050     b40e          move    *a0(CLOSEST_NUM),a14
         00009060     03a0  
    2131 00009070                   X32     a14
    2132 00009080     0b2e          addi    process_ptrs,a14
         00009090 00000000! 
    2133 000090b0     87ce          move    *a14,a14,L
    2134 000090c0     b5ce          move    *a14(PLYRMODE),a14
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   49

         000090d0     05c0  
    2135 000090e0     0b4e          cmpi    MODE_DEAD,a14
         000090f0     fff6  
    2136 00009100     ca1f          jreq    gnuzdeldie
    2137                    
    2138 00009110     b400          move    *a0(PLYRMODE),a0
         00009120     05c0  
    2139 00009130     0b40          cmpi    MODE_DEAD,a0
         00009140     fff6  
    2140 00009150     ca1a          jreq    gnuzdeldie
    2141                    
    2142 00009160                   SLEEPK  7
    2143                    
    2144 000091a0     09e0          movi    WSF_R_P,a0
         000091b0 00000000! 
    2145 000091d0     0d5f          calla   pal_getf
         000091e0 00000000! 
    2146 00009200     b008          move    a0,*a8(OPAL)
         00009210     0150  
    2147                    
    2148 00009220                   SLEEPK  4
    2149                    
    2150 00009260     09e0          movi    WSF_W_P,a0
         00009270 00000000! 
    2151 00009290     0d5f          calla   pal_getf
         000092a0 00000000! 
    2152 000092c0     b008          move    a0,*a8(OPAL)
         000092d0     0150  
    2153                    
    2154 000092e0     0d89          dsj     a9,gnuzlp
         000092f0     ffcf  
    2155                    
    2156 00009300     0d5f  gnuzdeldie      calla   DELOBJA8
         00009310 00000000! 
    2157                    
    2158 00009330           gnuzdie DIE
    2159                    
    2160                    
    2161                    
    2162                    ******************************************************************************
    2163                    
    2164 00009360            SUBRP  do_win_streaks
    2165                    
    2166 00009360     05a0          move    @p1winstreak,a0
         00009370 00000000! 
    2167 00009390     ca02          jrz     gnuzp2
    2168                    
    2169 000093a0     0d3f          callr   streak_1
         000093b0     0007  
    2170                    
    2171 000093c0     05a0  gnuzp2  move    @p2winstreak,a0
         000093d0 00000000! 
    2172 000093f0     ca02          jrz     gnuzx
    2173                    
    2174 00009400     0d3f          callr   streak_2
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   50

         00009410     0042  
    2175                    
    2176 00009420           gnuzx
    2177 00009420     0960          rets
    2178                    
    2179 00009430           streak_1
    2180 00009430     0b40          cmpi    99,a0
         00009440     ff9c  
    2181 00009450     c202          jrls    gnuzmaxok
    2182 00009460     09c0          movi    99,a0
         00009470     0063  
    2183 00009480           gnuzmaxok
    2184 00009480     0d5f          calla   BINBCD
         00009490 00000000! 
    2185                    
    2186 000094b0     4c09          move    a0,a9
    2187 000094c0     2780          sll     32-4,a0
    2188 000094d0     2d20          srl     32-4-5,a0               ;*32
    2189 000094e0     0b20          addi    gnuzf_t,a0
         000094f0 00009c60' 
    2190 00009510     8602          move    *a0,a2,L
    2191                    
    2192 00009520     09e0          movi    [3dh,0],a0
         00009530 003d0000  
    2193 00009550     09e1          movi    [23h,0],a1
         00009560 00230000  
    2194 00009580     09c3          movi    name_z,a3                       ;Z
         00009590     00cb  
    2195 000095a0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         000095b0 0000a102  
    2196 000095d0     09c5          movi    CLSDEAD,a5
         000095e0     2000  
    2197 000095f0     56c6          clr     a6
    2198 00009600     56e7          clr     a7
    2199 00009610     0d5f          calla   BEGINOBJ
         00009620 00000000! 
    2200 00009640     0788          MOVE    A8,@WINS_OBJ,L
         00009650 00000910- 
    2201                    
    2202 00009670     2f89          srl     4,a9
    2203 00009680     2789          sll     32-4,a9
    2204 00009690     2d29          srl     32-4-5,a9               ;*32
    2205 000096a0     0b29          addi    gnuzf_t,a9
         000096b0 00009c60' 
    2206 000096d0     8722          move    *a9,a2,L
    2207 000096e0     09e0          movi    [36h,0],a0
         000096f0 00360000  
    2208 00009710     09e1          movi    [23h,0],a1
         00009720 00230000  
    2209 00009740     0d5f          calla   BEGINOBJ
         00009750 00000000! 
    2210 00009770     0788          MOVE    A8,@WINS_OBJ+20H,L
         00009780 00000930- 
    2211                       
    2212 000097a0                   TBL_OBJ lwin
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   51

    2213 00009800     0788          MOVE    A8,@WINS_OBJ+40H,L
         00009810 00000950- 
    2214 00009830     0960          rets
    2215                    
    2216 00009840           streak_2
    2217 00009840     0b40          cmpi    99,a0
         00009850     ff9c  
    2218 00009860     c202          jrls    gnuzmaxok2
    2219 00009870     09c0          movi    99,a0
         00009880     0063  
    2220 00009890           gnuzmaxok2
    2221 00009890     0d5f          calla   BINBCD
         000098a0 00000000! 
    2222                    
    2223 000098c0     4c09          move    a0,a9
    2224 000098d0     2780          sll     32-4,a0
    2225 000098e0     2d20          srl     32-4-5,a0               ;*32
    2226 000098f0     0b20          addi    gnuzf_t,a0
         00009900 00009c60' 
    2227 00009920     8602          move    *a0,a2,L
    2228                    
    2229 00009930     09e0          movi    [175h,0],a0
         00009940 01750000  
    2230 00009960     09e1          movi    [23h,0],a1
         00009970 00230000  
    2231 00009990     09c3          movi    name_z,a3                       ;Z
         000099a0     00cb  
    2232 000099b0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         000099c0 0000a102  
    2233 000099e0     09c5          movi    CLSDEAD,a5
         000099f0     2000  
    2234 00009a00     56c6          clr     a6
    2235 00009a10     56e7          clr     a7
    2236 00009a20     0d5f          calla   BEGINOBJ
         00009a30 00000000! 
    2237 00009a50     0788          MOVE    A8,@WINS_OBJ,L
         00009a60 00000910- 
    2238 00009a80     4d0a          move    a8,a10
    2239                    
    2240 00009a90     2f89          srl     4,a9
    2241 00009aa0     2789          sll     32-4,a9
    2242 00009ab0     2d29          srl     32-4-5,a9               ;*32
    2243 00009ac0     0b29          addi    gnuzf_t,a9
         00009ad0 00009c60' 
    2244 00009af0     8722          move    *a9,a2,L
    2245 00009b00     09e0          movi    [16eh,0],a0
         00009b10 016e0000  
    2246 00009b30     09e1          movi    [23h,0],a1
         00009b40 00230000  
    2247 00009b60     0d5f          calla   BEGINOBJ
         00009b70 00000000! 
    2248 00009b90     0788          MOVE    A8,@WINS_OBJ+20H,L
         00009ba0 00000930- 
    2249                    
    2250 00009bc0                   TBL_OBJ rwin
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   52

    2251 00009c20     0788          MOVE    A8,@WINS_OBJ+40H,L
         00009c30 00000950- 
    2252 00009c50     0960          rets
    2253                    
    2254                    
    2255 00009c60           gnuzf_t
    2256 00009c60 00000000!         .long   WFONT_0,WFONT_1,WFONT_2,WFONT_3,WFONT_4
    2257 00009d00 00000000!         .long   WFONT_5,WFONT_6,WFONT_7,WFONT_8,WFONT_9
    2258                    
    2259                    
    2260                            .ref    match_cnt
    2261                    
    2262                    *****************************************************************************
    2263                    *
    2264                    
    2265 00009da0                   STRUCTPD
    2266 00009da0                   LONG    BLINK_PROC
    2267                    
    2268 00009da0           announce_match
    2269                    
    2270                    
    2271 00009da0     09c3          MOVI    CROWD_CHEER_0,A3
         00009db0     0806  
    2272 00009dc0     0d5f          CALLA   SNDSND
         00009dd0 00000000! 
    2273                    
    2274 00009df0     5600          clr     a0
    2275 00009e00     b20d          move    a0,*a13(BLINK_PROC),L
         00009e10     0100  
    2276                    
    2277 00009e20     05a0          move    @PSTATUS2,a0
         00009e30 00000000! 
    2278 00009e50     cb07          jrnz    ebwtnoamode
    2279 00009e60     5600          clr     a0
    2280 00009e70     0580          move    a0,@HALT
         00009e80 00000000! 
    2281 00009ea0                   DIE
    2282                    
    2283 00009ed0           ebwtnoamode
    2284                    
    2285                     .if DEBUG
    2286                            .ref    skip_select
    2287                            move    @skip_select,a0
    2288                            jrz     ebwtnoskp
    2289                            clr     a0
    2290                            move    a0,@HALT
    2291                            DIE
    2292                    ebwtnoskp
    2293                     .endif
    2294                    
    2295                    
    2296                    ;       SLEEP   28h
    2297                    ;       movi    28h,a10
    2298                    ;       JSRP    wait_on_butn
    2299                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   53

    2300 00009ed0     09eb          movi    ram_lst,a11
         00009ee0 00000360- 
    2301 00009f00     5600          clr     a0
    2302 00009f10     09c1          movi    39,a1
         00009f20     0027  
    2303 00009f30     920b  ebwtlp  move    a0,*a11+,L
    2304 00009f40     3c41          dsjs    a1,ebwtlp
    2305 00009f50     09eb          movi    ram_lst,a11
         00009f60 00000360- 
    2306                    
    2307 00009f80     09e0          movi    [252h,0],a0                     ;x pos
         00009f90 02520000  
    2308 00009fb0     09e1          movi    [3eh,0],a1                      ;y pos
         00009fc0 003e0000  
    2309 00009fe0     09e2          movi    MTCHPLT,a2
         00009ff0 00000000! 
    2310 0000a010     09f0          movi    MPLTPRPP,b0
         0000a020 00000000! 
    2311 0000a040     09c3          movi    1800h,a3                                ;z pos
         0000a050     1800  
    2312 0000a060     0d3f          callr   ebwtbegin_obj
         0000a070     0515  
    2313                    
    2314 0000a080     09e0          movi    [252h,0],a0                     ;x pos
         0000a090 02520000  
    2315 0000a0b0     09e1          movi    [3eh,0],a1                      ;y pos
         0000a0c0 003e0000  
    2316 0000a0e0     09e2          movi    MNMEPLT,a2
         0000a0f0 00000000! 
    2317 0000a110     09f0          movi    MPLTPRPP,b0
         0000a120 00000000! 
    2318 0000a140     09c3          movi    1800h,a3                                ;z pos
         0000a150     1800  
    2319 0000a160     0d3f          callr   ebwtbegin_obj
         0000a170     0505  
    2320                    
    2321 0000a180     09e0          movi    [574,0],a0                      ;x pos
         0000a190 023e0000  
    2322 0000a1b0     09e1          movi    [4Fh,0],a1                      ;y pos
         0000a1c0 004f0000  
    2323 0000a1e0     09e2          movi    MATCH,a2
         0000a1f0 00000000! 
    2324 0000a210     09f0          movi    WGFS_W_P,b0
         0000a220 00000000! 
    2325 0000a240     09c3          movi    1801h,a3                                ;z pos
         0000a250     1801  
    2326 0000a260     0d3f          callr   ebwtbegin_obj
         0000a270     04f5  
    2327 0000a280     4f03          MOVE    A8,B3
    2328 0000a290     5694          CLR     B4
    2329 0000a2a0     56b5          CLR     B5
    2330 0000a2b0     56d6          CLR     B6
    2331                    
    2332 0000a2c0     05a0          move    @match_cnt,a0
         0000a2d0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   54

    2333                    
    2334 0000a2f0     0b40          cmpi    999,a0
         0000a300     fc18  
    2335 0000a310     c202          jrls    ebwtmaxok
    2336 0000a320     09c0          movi    999,a0
         0000a330     03e7  
    2337 0000a340           ebwtmaxok
    2338 0000a340     0d5f          calla   BINBCD
         0000a350 00000000! 
    2339                    
    2340 0000a370     4c09          move    a0,a9
    2341 0000a380     4c0a          move    a0,a10
    2342 0000a390     2780          sll     32-4,a0
    2343 0000a3a0     2d20          srl     32-4-5,a0               ;*32
    2344 0000a3b0     0b20          addi    ebwtf_t,a0
         0000a3c0 0000b540' 
    2345 0000a3e0     8602          move    *a0,a2,L
    2346                    
    2347 0000a3f0     09e0          movi    [252h,0],a0                     ;x pos
         0000a400 02520000  
    2348 0000a420     09e1          movi    [43h,0],a1                      ;y pos
         0000a430 00430000  
    2349 0000a450     09f0          movi    WGFS_W_P,b0
         0000a460 00000000! 
    2350 0000a480     09c3          movi    1802h,a3                                ;z pos
         0000a490     1802  
    2351 0000a4a0     0d3f          callr   ebwtbegin_obj
         0000a4b0     04d1  
    2352 0000a4c0     4f04          MOVE    A8,B4
    2353                    
    2354 0000a4d0     2f89          srl     4,a9
    2355 0000a4e0     2789          sll     32-4,a9
    2356 0000a4f0     2d29          srl     32-4-5,a9               ;*32
    2357 0000a500     4d29          move    a9,a9
    2358 0000a510     ca29          jrz     ebwtok2
    2359                    
    2360 0000a520     0b29          addi    ebwtf_t,a9
         0000a530 0000b540' 
    2361 0000a550     8722          move    *a9,a2,L
    2362 0000a560     09e0          movi    [252h,0],a0                     ;x pos
         0000a570 02520000  
    2363 0000a590     09e1          movi    [43h,0],a1                      ;y pos
         0000a5a0 00430000  
    2364 0000a5c0     09f0          movi    WGFS_W_P,b0
         0000a5d0 00000000! 
    2365 0000a5f0     09c3          movi    1802h,a3                                ;z pos
         0000a600     1802  
    2366 0000a610     0d3f          callr   ebwtbegin_obj
         0000a620     04ba  
    2367 0000a630     4f05          MOVE    A8,B5
    2368                    
    2369 0000a640     2f0a          srl     8,a10
    2370 0000a650     278a          sll     32-4,a10
    2371 0000a660     2d2a          srl     32-4-5,a10              ;*32
    2372 0000a670     4d4a          move    a10,a10
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   55

    2373 0000a680     ca12          jrz     ebwtok2
    2374                    
    2375 0000a690     0b2a          addi    ebwtf_t,a10
         0000a6a0 0000b540' 
    2376 0000a6c0     8742          move    *a10,a2,L
    2377 0000a6d0     09e0          movi    [252h,0],a0                     ;x pos
         0000a6e0 02520000  
    2378 0000a700     09e1          movi    [43h,0],a1                      ;y pos
         0000a710 00430000  
    2379 0000a730     09f0          movi    WGFS_W_P,b0
         0000a740 00000000! 
    2380 0000a760     09c3          movi    1802h,a3                                ;z pos
         0000a770     1802  
    2381 0000a780     0d3f          callr   ebwtbegin_obj
         0000a790     04a3  
    2382 0000a7a0     4f06          MOVE    A8,B6
    2383                    
    2384 0000a7b0           ebwtok2
    2385 0000a7b0     b477          MOVE    *B3(OSIZEX),B7
         0000a7c0     0130  
    2386 0000a7d0     0b17          ADDI    5,B7
         0000a7e0     0005  
    2387 0000a7f0     b490          MOVE    *B4(OSIZEX),B0
         0000a800     0130  
    2388 0000a810     4017          ADD     B0,B7
    2389 0000a820     1077          ADDK    3,B7
    2390 0000a830     4cb5          MOVE    B5,B5
    2391 0000a840     ca09          JRZ     NO_NEED_TO_ADD_TO_X
    2392 0000a850     1477          SUBK    3,B7
    2393 0000a860     b4b0          MOVE    *B5(OSIZEX),B0
         0000a870     0130  
    2394 0000a880     4017          ADD     B0,B7
    2395 0000a890     4cd6          MOVE    B6,B6
    2396 0000a8a0     ca03          JRZ     NO_NEED_TO_ADD_TO_X
    2397 0000a8b0     b4d0          MOVE    *B6(OSIZEX),B0
         0000a8c0     0130  
    2398 0000a8d0     4017          ADD     B0,B7
    2399                    
    2400 0000a8e0           NO_NEED_TO_ADD_TO_X
    2401 0000a8e0     2ff7          SRL     1,B7
    2402 0000a8f0     09d8          MOVI    252H,B8
         0000a900     0252  
    2403 0000a910     44f8          SUB     B7,B8
    2404 0000a920     b113          MOVE    B8,*B3(OXPOS)
         0000a930     0090  
    2405 0000a940     0b18          ADDI    5,B8
         0000a950     0005  
    2406 0000a960     4cb5          MOVE    B5,B5
    2407 0000a970     cb01          JRNZ    NO_EXTRA_SPACE
    2408 0000a980     1078          ADDK    3,B8
    2409 0000a990           NO_EXTRA_SPACE
    2410                    
    2411 0000a990     4cd6          MOVE    B6,B6
    2412 0000a9a0     ca06          JRZ     NO_NEED_TO_ADD_TO_X2A
    2413 0000a9b0     b477          MOVE    *B3(OSIZEX),B7
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   56

         0000a9c0     0130  
    2414 0000a9d0     40f8          ADD     B7,B8
    2415 0000a9e0     b116          MOVE    B8,*B6(OXPOS)
         0000a9f0     0090  
    2416 0000aa00     c001          JRUC    X2A_ADDED
    2417                    
    2418 0000aa10           NO_NEED_TO_ADD_TO_X2A
    2419 0000aa10     4c76          MOVE    B3,B6
    2420 0000aa20           X2A_ADDED
    2421 0000aa20     4cb5          MOVE    B5,B5
    2422 0000aa30     ca06          JRZ     NO_NEED_TO_ADD_TO_X2B
    2423 0000aa40     b4d7          MOVE    *B6(OSIZEX),B7
         0000aa50     0130  
    2424 0000aa60     40f8          ADD     B7,B8
    2425 0000aa70     b115          MOVE    B8,*B5(OXPOS)
         0000aa80     0090  
    2426 0000aa90     c001          JRUC    X2B_ADDED
    2427                    
    2428 0000aaa0           NO_NEED_TO_ADD_TO_X2B
    2429 0000aaa0     4c75          MOVE    B3,B5
    2430 0000aab0           X2B_ADDED
    2431 0000aab0     b4b7          MOVE    *B5(OSIZEX),B7
         0000aac0     0130  
    2432 0000aad0     40f8          ADD     B7,B8
    2433 0000aae0     b114          MOVE    B8,*B4(OXPOS)
         0000aaf0     0090  
    2434                    
    2435                    ;Print the text on the little plate
    2436                    
    2437                    ;This will be a table lookup which points to match type
    2438                    ;(Ex. Best 2 of 3, Intercontinental Championship, WWF Championship
    2439                    ;Lumberjack match, Tag Team Bout, This contest is for 1 fall!, etc.)
    2440                    
    2441                    ;Make sure we have enough ram set aside for the largest
    2442                    ;message possible.  (ram_lst)
    2443                    
    2444 0000ab00     09e0          movi    [253h,0],a0                     ;x pos
         0000ab10 02530000  
    2445 0000ab30     09e1          movi    [68h,0],a1                      ;y pos
         0000ab40 00680000  
    2446                    
    2447                            ;set a3 to 1 if this is the final match, 0 otherwise
    2448 0000ab60     5663          clr     a3
    2449 0000ab70     0d5f          calla   is_final_match
         0000ab80 00000000! 
    2450 0000aba0     c901          jrnc    ebwta3set
    2451 0000abb0     1823          movk    1,a3
    2452                    
    2453 0000abc0     09e2  ebwta3set       movi    WHICH_MATCH,a2
         0000abd0 0000b680' 
    2454 0000abf0     24a3          SLL     5,A3
    2455 0000ac00     4062          ADD     A3,A2
    2456 0000ac10     8642          MOVE    *A2,A2,L
    2457 0000ac20     09f0          movi    WSF_W_P,b0
         0000ac30 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   57

    2458 0000ac50     09c3          movi    1801h,a3                                ;z pos
         0000ac60     1801  
    2459 0000ac70     09e4          movi    DMAWNZ|M_SCRNREL,a4             ;DMA flags
         0000ac80 0000a002  
    2460 0000aca0     09c5          movi    CLSNEUT|TYPTEXT|SUBMES1,a5
         0000acb0     0702  
    2461 0000acc0     56c6          clr     a6                              ;x vel
    2462 0000acd0     56e7          clr     a7                              ;y vel
    2463 0000ace0     0d5f          calla   BEGINOBJP
         0000acf0 00000000! 
    2464                    
    2465                    
    2466                    ;Place all of the new plates & string characters onto the ram_lst that
    2467                    ;gets scrolled.
    2468                    
    2469 0000ad10     09ee          movi    OBJLST,a14
         0000ad20 00000000! 
    2470 0000ad40     09c0          movi    CLSNEUT|TYPTEXT|SUBTXT,a0
         0000ad50     0701  
    2471 0000ad60     09c2          movi    CLSNEUT|TYPTEXT|SUBMES1,a2
         0000ad70     0702  
    2472 0000ad80           ebwtlp2
    2473 0000ad80     87ce          move    *a14,a14,L
    2474 0000ad90     ca08          jrz     ebwtx
    2475 0000ada0     b5c1          move    *a14(OID),a1
         0000adb0     0190  
    2476 0000adc0     4841          cmp     a2,a1
    2477 0000add0     ca02          jrz     ebwtadd
    2478 0000ade0     4801          cmp     a0,a1
    2479 0000adf0     cbf8          jrne    ebwtlp2
    2480 0000ae00     93cb  ebwtadd move    a14,*a11+,L
    2481 0000ae10     c0f6          jruc    ebwtlp2
    2482 0000ae20           ebwtx
    2483                    
    2484                    ;This will blink between red/white
    2485 0000ae20                   CREATE  CYCPID,blink_font
    2486 0000aea0     b20d          move    a0,*a13(BLINK_PROC),L
         0000aeb0     0100  
    2487                    
    2488                    ;Slide everthing onto screen
    2489                    
    2490 0000aec0     09c0          movi    0b6H,a0
         0000aed0     00b6  
    2491 0000aee0     0d5f          calla   triple_sound
         0000aef0 00000000! 
    2492                    
    2493 0000af10     09ca          movi    20h,a10 ;30
         0000af20     0020  
    2494                    
    2495 0000af30           ebwtonscr_loop
    2496                    
    2497 0000af30                   SLEEPK  1
    2498                    
    2499 0000af70     09e0          movi    [200,0],a0
         0000af80 00c80000  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   58

    2500 0000afa0     0d3f          callr   ebwtset_x
         0000afb0     0410  
    2501                    
    2502 0000afc0     3d4a          dsj     a10,ebwtonscr_loop
    2503                    
    2504 0000afd0     0d5f          calla   is_8_on_1
         0000afe0 00000000! 
    2505 0000b000     c808          jrc     ebwtskip_do_rounds
    2506                            ;skip this if this is the final match
    2507 0000b010                   CREATE  ANNC_PID,DO_ROUNDS
    2508 0000b090           ebwtskip_do_rounds
    2509                    
    2510                    ;In middle
    2511 0000b090                   CREATE  SOUND_PID,ring_bell
    2512                    
    2513                    ;       SLEEP   20h
    2514                    
    2515                            .ref    IKIL1C
    2516                            .ref    show_options
    2517                    
    2518 0000b110     09e0          movi    PU_CHECK_PID,a0
         0000b120 00008190  
    2519 0000b140     0d5f          calla   IKIL1C
         0000b150 00000000! 
    2520                    
    2521 0000b170                   CREATE0 show_options
    2522                    
    2523 0000b1e0     09ca          movi    50h,a10 ;80
         0000b1f0     0050  
    2524                    
    2525                            .ref    wait_on_butn
    2526 0000b200                   JSRP    wait_on_butn
    2527                    
    2528 0000b270     09c0          movi    0b6H,a0
         0000b280     00b6  
    2529 0000b290     0d5f          calla   triple_sound
         0000b2a0 00000000! 
    2530                    
    2531 0000b2c0     09ca          movi    16h,a10 ;23
         0000b2d0     0016  
    2532                    
    2533 0000b2e0           ebwtoffscr_loop
    2534                    
    2535 0000b2e0                   SLEEPK  1
    2536                    
    2537 0000b320     09e0          movi    [0feb0h,0],a0
         0000b330 feb00000  
    2538 0000b350     0d3f          callr   ebwtset_x
         0000b360     03d5  
    2539                    
    2540 0000b370     3d4a          dsj     a10,ebwtoffscr_loop
    2541                    
    2542 0000b380     b7a0          move    *a13(BLINK_PROC),a0,L
         0000b390     0100  
    2543 0000b3a0     0d5f          calla   KILL
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   59

         0000b3b0 00000000! 
    2544                    
    2545 0000b3d0     5600          clr     a0
    2546 0000b3e0     0580          move    a0,@HALT
         0000b3f0 00000000! 
    2547                    
    2548 0000b410     09c0          movi    CLSNEUT|TYPTEXT|SUBTXT,a0
         0000b420     0701  
    2549 0000b430     0d5f          calla   obj_del1c               ;delete text/plates
         0000b440 00000000! 
    2550                    
    2551 0000b460     09c0          movi    CLSNEUT|TYPTEXT|SUBMES1,a0
         0000b470     0702  
    2552 0000b480     0d5f          calla   obj_del1c               ;delete text/plates
         0000b490 00000000! 
    2553                    
    2554                            ;set round_start_time
    2555 0000b4b0     07ae          move    @PCNT,a14,L
         0000b4c0 00000000! 
    2556 0000b4e0     078e          move    a14,@round_start_time,L
         0000b4f0 00000000! 
    2557                    
    2558 0000b510                   DIE
    2559                    
    2560 0000b540           ebwtf_t
    2561 0000b540 00000000!         .long   WGSF22_0,WGSF22_1,WGSF22_2,WGSF22_3,WGSF22_4
    2562 0000b5e0 00000000!         .long   WGSF22_5,WGSF22_6,WGSF22_7,WGSF22_8,WGSF22_9
    2563                    
    2564 0000b680           WHICH_MATCH
    2565 0000b680 00000000!         .LONG   BESTOF3
    2566 0000b6a0 00000000!         .LONG   ROYRUM
    2567 0000b6c0 00000000!         .LONG   ELIMMTCH
    2568 0000b6e0 00000000!         .LONG   TAGTEAM
    2569 0000b700 00000000!         .LONG   ONEFALL
    2570 0000b720 00000000!         .LONG   LUMBMTCH
    2571                    
    2572                    
    2573                    ;ebwtln0a_setup
    2574                    ;       JAM_STR osgemd_ascii,6,0,247h,43h,BLUE,0
    2575                    ;
    2576                    ;ebwtln0b_setup
    2577                    ;       JAM_STR osgemd_ascii,6,0,23fh,43h,BLUE,0
    2578                    ;
    2579                    ;ebwtln1_setup
    2580                    ;       JAM_STR sgmd8_ascii,5,0,252h,80h-10,SGMD8WHT2,0
    2581                    ;
    2582                    ;ebwtln2_setup
    2583                    ;       JAM_STR sgmd8_ascii,5,0,252h,8bh-10,SGMD8WHT2,0
    2584                    ;
    2585                    ;ebwtstr_rounds
    2586                    ;       .string "ROUNDS",0
    2587                    ;       .even
    2588                    
    2589 0000b740           blink_font
    2590                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   60

    2591 0000b740                   SLEEPK  2
    2592                    
    2593 0000b780     09ca          movi    20,a10
         0000b790     0014  
    2594 0000b7a0           ebwttop 
    2595 0000b7a0     09e0          movi    WSF_R_P,a0
         0000b7b0 00000000! 
    2596 0000b7d0     0d5f          calla   pal_getf
         0000b7e0 00000000! 
    2597                    
    2598 0000b800     09eb          movi    ram_lst,a11
         0000b810 00000360- 
    2599 0000b830           ebwtlp3
    2600 0000b830     9768          move    *a11+,a8,L
    2601 0000b840     ca08          jrz     ebwtx2
    2602 0000b850     b50e          move    *a8(OID),a14
         0000b860     0190  
    2603 0000b870     0b4e          cmpi    CLSNEUT|TYPTEXT|SUBMES1,a14
         0000b880     f8fd  
    2604 0000b890     cbf9          jrnz    ebwtlp3
    2605 0000b8a0     b008          move    a0,*a8(OPAL)
         0000b8b0     0150  
    2606 0000b8c0     c0f6          jruc    ebwtlp3
    2607                    
    2608 0000b8d0           ebwtx2  SLEEPK  4
    2609                    
    2610 0000b910     09e0          movi    WSF_W_P,a0
         0000b920 00000000! 
    2611 0000b940     0d5f          calla   pal_getf
         0000b950 00000000! 
    2612                    
    2613 0000b970     09eb          movi    ram_lst,a11
         0000b980 00000360- 
    2614 0000b9a0           ebwtlp4
    2615 0000b9a0     9768          move    *a11+,a8,L
    2616 0000b9b0     ca08          jrz     ebwtx3
    2617 0000b9c0     b50e          move    *a8(OID),a14
         0000b9d0     0190  
    2618 0000b9e0     0b4e          cmpi    CLSNEUT|TYPTEXT|SUBMES1,a14
         0000b9f0     f8fd  
    2619 0000ba00     cbf9          jrnz    ebwtlp4
    2620 0000ba10     b008          move    a0,*a8(OPAL)
         0000ba20     0150  
    2621 0000ba30     c0f6          jruc    ebwtlp4
    2622                    
    2623 0000ba40           ebwtx3  SLEEPK  7
    2624                    
    2625 0000ba80     0d8a          dsj     a10,ebwttop
         0000ba90     ffd0  
    2626                    
    2627 0000baa0           announcing_being_done
    2628 0000baa0                   DIE
    2629                    
    2630                    ******************************************************************************
    2631                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   61

    2632 0000bad0                   STRUCTPD
    2633 0000bad0                   LONG    ebwtCREATOR     ;UHL proc ptr to whoever created us
    2634 0000bad0                   LONG    ebwtORIGIN              ;UHL approx address of our create call
    2635                    
    2636                            .if DEBUG
    2637                            ;doesn't execute -- just here for TV viewing
    2638                            move    *a13(ebwtCREATOR),a14,L
    2639                            move    *a13(ebwtORIGIN),a14,L
    2640                            .endif
    2641                    
    2642 0000bad0            SUBR   announce_rnd_winner     ;process
    2643                    
    2644                            ;temp! - 314
    2645                            .if DEBUG
    2646                            DBEVENT BDE_ARW_START,a13,L,*a13(ebwtCREATOR),L,*a13(ebwtORIGIN),L
    2647                            .endif
    2648                    
    2649 0000bad0           ebwtfini_wait
    2650 0000bad0     05ae          move    @in_finish_move,a14     ; Are we doing a finishing move ?
         0000bae0 00000ab0- 
    2651 0000bb00     ca05          jrz     ebwtfini_done           ; br = no
    2652 0000bb10                   SLEEPK  10
    2653 0000bb50     c0f7          jruc    ebwtfini_wait
    2654 0000bb60           ebwtfini_done
    2655                    
    2656 0000bb60     09c0          movi    ANNC_PID,a0
         0000bb70     012e  
    2657 0000bb80     5621          clr     a1
    2658 0000bb90     03e1          not     a1
    2659 0000bba0     0d5f          calla   EXISTP
         0000bbb0 00000000! 
    2660                    ;       janz    SUCIDE
    2661 0000bbd0     ca03          jrz     ebwttmpok
    2662                    
    2663                            ;temp! - 314
    2664                            .if DEBUG
    2665                            DBEVENT BDE_ARW_DEXIST,a13,L,*a13(ebwtCREATOR),L,*a13(ebwtORIGIN),L
    2666                            .endif
    2667 0000bbe0                   DIE
    2668                    
    2669 0000bc10           ebwttmpok
    2670                    
    2671 0000bc10     05ae          move    @annc_rnd_winner_done,a14
         0000bc20 00000000! 
    2672 0000bc40     ca03          jrz     ebwtarwd_ok
    2673                            .if DEBUG
    2674                            ;temp! - 314
    2675                            DBEVENT BDE_ARW_FLAGDIE,a13,L,*a13(ebwtCREATOR),L,*a13(ebwtORIGIN),L
    2676                            .endif
    2677 0000bc50                   DIE
    2678 0000bc80           ebwtarwd_ok
    2679                    
    2680                            ;if anyone is trying to do a buckoff, wait for them to finish up.
    2681 0000bc80     0d3f  ebwtany_b       callr   anyone_bucking
         0000bc90     050d  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   62

    2682 0000bca0                   TEST    a0
    2683 0000bcb0     ca38          jrz     ebwtnobuck
    2684                    
    2685                            ;temp! - 314
    2686                            .if DEBUG
    2687                            DBEVENT BDE_ARW_ATTEMPT,a13,L,*a13(ebwtCREATOR),L,*a13(ebwtORIGIN),L
    2688                            .endif
    2689                    
    2690                            ;Someone's trying to do a buckoff.  We'll give them 120 ticks or
    2691                            ; until someone hits an ANI_LOOP statement, then figure out what
    2692                            ; to do from there.
    2693                    
    2694 0000bcc0                   SLEEP   90      ;NOTE:  If someone hits an ANI_LOOP command and
    2695                                            ; their DID_PIN bit is set, they'll check and
    2696                                            ; see if we're sleeping at arw_bwait, and if we
    2697                                            ; are, they'll wake us up right away.
    2698 0000bd10            SUBR   arw_bwait
    2699                    
    2700                            ;temp! - 314
    2701                            .if DEBUG
    2702                            DBEVENT BDE_ARW_WAKEUP,a13,L,*a13(ebwtCREATOR),L,*a13(ebwtORIGIN),L
    2703                            .endif
    2704                    
    2705                            ;check for anyone with their NEW_BUCKOFF bit set.  If we find any,
    2706                            ; clear that bit on anyone who's got it set.
    2707 0000bd10     09e0          movi    process_ptrs,a0
         0000bd20 00000000! 
    2708 0000bd40     09c1          movi    NUM_WRES,a1
         0000bd50     0007  
    2709 0000bd60     5663          clr     a3
    2710 0000bd70     9602  ebwtlp0 move    *a0+,a2,L
    2711 0000bd80     ca0a          jrz     ebwtnxt0                ;skip inactive
    2712 0000bd90     b64e          move    *a2(STATUS_FLAGS),a14,L
         0000bda0     0b50  
    2713 0000bdb0     1dce          btst    B_NEW_BUCKOFF,a14
    2714 0000bdc0     ca06          jrz     ebwtnxt0
    2715                    
    2716                            ;got one
    2717 0000bdd0     0b8e          andni   M_NEW_BUCKOFF,a14
         0000bde0 00020000  
    2718 0000be00     b3c2          move    a14,*a2(STATUS_FLAGS),L
         0000be10     0b50  
    2719 0000be20     1023          inc     a3
    2720                    
    2721 0000be30     3da1  ebwtnxt0        dsj     a1,ebwtlp0
    2722                    
    2723                            ;now check for an all-dead condition.  If neither team is dead, die.
    2724 0000be40     0d5f          calla   get_live_bits
         0000be50 00000000! 
    2725 0000be70     0b40          cmpi    3,a0
         0000be80     fffc  
    2726 0000be90     cb03          jrne    ebwt1ded
    2727                    
    2728                            ;temp! - 314
    2729                            .if DEBUG
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   63

    2730                            DBEVENT BDE_ALL_ALIVE,a13,L,*a13(ebwtCREATOR),L,*a13(ebwtORIGIN),L
    2731                            .endif
    2732 0000bea0     c080          jauc    SUCIDE
         0000beb0 00000000! 
    2733                    
    2734 0000bed0           ebwt1ded        ;1 team is dead.  If nobody did a buckoff during our nap, end the
    2735                            ; round.  If someone did, jump up to ebwtany_b, which checks to see
    2736                            ; if there's any more buckoff candidates.
    2737 0000bed0                   TEST    a3
    2738 0000bee0     cbd9          jrnz    ebwtany_b
    2739                    
    2740                            ;temp! - 314
    2741                            .if DEBUG
    2742                            DBEVENT BDE_ARW_NOBUCK,a13,L,*a13(ebwtCREATOR),L,*a13(ebwtORIGIN),L
    2743                            .endif
    2744                    
    2745                            ;there was at least one wrestler who could have done a buckoff,
    2746                            ; but was too slow.  For EVERYONE, clear BUCKOFF_COUNT, clear
    2747                            ; the DO_BUCKOFF flag, and set the NO_BUCKOFF flag.
    2748 0000bef0     09e0          movi    process_ptrs,a0
         0000bf00 00000000! 
    2749 0000bf20     09c1          movi    NUM_WRES,a1
         0000bf30     0007  
    2750 0000bf40     5663          clr     a3
    2751 0000bf50     9602  ebwtlp6 move    *a0+,a2,L
    2752 0000bf60     ca0c          jrz     ebwtnxt6                ;skip inactive
    2753 0000bf70     b062          move    a3,*a2(BUCKOFF_COUNT)
         0000bf80     0da0  
    2754 0000bf90     b64e          move    *a2(STATUS_FLAGS),a14,L
         0000bfa0     0b50  
    2755 0000bfb0     0b8e          andni   M_DO_BUCKOFF,a14
         0000bfc0 00001000  
    2756 0000bfe0     0bae          ori     M_NO_BUCKOFF,a14
         0000bff0 00002000  
    2757 0000c010     b3c2          move    a14,*a2(STATUS_FLAGS),L
         0000c020     0b50  
    2758 0000c030     3de1  ebwtnxt6        dsj     a1,ebwtlp6
    2759                    
    2760                    
    2761 0000c040           ebwtnobuck
    2762                    
    2763                            ;temp! - 314
    2764                            .if DEBUG
    2765                            DBEVENT BDE_ARW_ENDRND,a13,L,*a13(ebwtCREATOR),L,*a13(ebwtORIGIN),L
    2766                            .endif
    2767                    
    2768                            ;set round_end_time
    2769 0000c040     07a0          move    @PCNT,a0,L
         0000c050 00000000! 
    2770 0000c070     0780          move    a0,@round_end_time,L
         0000c080 00000000! 
    2771                    
    2772                            ;set annc_rnd_winner_done
    2773 0000c0a0     182e          movk    1,a14
    2774 0000c0b0     058e          move    a14,@annc_rnd_winner_done
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   64

         0000c0c0 00000000! 
    2775                    
    2776                            ;set EVERYONE'S NO_BUCKOFF flags, just to be safe.
    2777 0000c0e0     0d3f          callr   set_all_buckoffs
         0000c0f0     04df  
    2778                    
    2779 0000c100     09e0          MOVI    ZFLIP_FOR_SURE,A0
         0000c110 f0f00000  
    2780 0000c130     0780          MOVE    A0,@ZFLIP_POS_VAR,L
         0000c140 000008d0- 
    2781                    
    2782 0000c160     09c3          MOVI    CROWD_VICTORY_LOOP,A3
         0000c170     080a  
    2783 0000c180     0d5f          CALLA   SNDSND
         0000c190 00000000! 
    2784                    
    2785 0000c1b0     0d3f          callr   set_winner      ;a3 = PLYRNUM of a wrestler on the winning
         0000c1c0     0e49  
    2786                                                    ; team.  The pinner if there is one.
    2787 0000c1d0     ce00          jrn     ebwtdo_game_over
         0000c1e0     0150  
    2788 0000c1f0                   X32     a3
    2789 0000c200     0b23          addi    process_ptrs,a3
         0000c210 00000000! 
    2790 0000c230     866a          move    *a3,a10,L
    2791                    
    2792 0000c240     05a0          move    @p1rounds,a0
         0000c250 00000000! 
    2793 0000c270     0b40          cmpi    2,a0
         0000c280     fffd  
    2794 0000c290     ca0a          jrz     at_end
    2795 0000c2a0     05a0          move    @p2rounds,a0
         0000c2b0 00000000! 
    2796 0000c2d0     0b40          cmpi    2,a0
         0000c2e0     fffd  
    2797 0000c2f0     ca04          jreq    at_end
    2798 0000c300     0d5f          calla   calc_match_time_1
         0000c310 00000000! 
    2799 0000c330     c01b          jruc    timer_updated
    2800                    
    2801 0000c340           at_end
    2802                    ;ebwtlet_finish_happen
    2803                    ;       move    @in_finish_move,a0              ; Did a finish move get started?
    2804                    ;       jrz     ebwtno_finish_move                      ; br = no
    2805                    ;       SLEEPK  1                               ; Wait for it to finish
    2806                    ;       jruc    ebwtlet_finish_happen
    2807                    ;ebwtno_finish_move
    2808 0000c340     05a0          move    @p1rounds,a0
         0000c350 00000000! 
    2809 0000c370     05a3          move    @p2rounds,a3
         0000c380 00000000! 
    2810 0000c3a0     5403          or      a0,a3
    2811 0000c3b0     0b43          cmpi    2,a3
         0000c3c0     fffd  
    2812 0000c3d0     cb0e          jrnz    ebwtno_2_rnd_victory
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   65

    2813 0000c3e0     0d5f          calla   is_8_on_1
         0000c3f0 00000000! 
    2814 0000c410     c80a          jrc     ebwtno_2_rnd_victory
    2815 0000c420                   MATCH_AWARD a10,TWO_RND_AWD
    2816 0000c4c0           ebwtno_2_rnd_victory
    2817 0000c4c0     0d5f          calla   calc_match_time_2
         0000c4d0 00000000! 
    2818                    
    2819 0000c4f0           timer_updated
    2820                    
    2821 0000c4f0     0d3f          callr   is_perfect
         0000c500     04ae  
    2822 0000c510     c917          jrnc    ebwtnot_perfect
    2823 0000c520                   MATCH_AWARD a10,PERFECT_AWD
    2824 0000c5c0                   CREATE  ADD_INIT_PID,CREATE_PERFECT
    2825 0000c640                   SLEEP   55+50
    2826 0000c690           ebwtnot_perfect
    2827                    ;NOT_PERFECT_MATCH
    2828                    
    2829                    ;a10=*proc of wrestler who just pinned opponent
    2830                    ;-not neccesarily: if the win was by disqualification or timeout, there's
    2831                    ; no pin.
    2832 0000c690                   SLEEPK  30
    2833                    
    2834                    ;Place token on top of winner, then have it float up to the top of the screen
    2835                    
    2836 0000c6d0     09c3          movi    27,a3
         0000c6e0     001b  
    2837 0000c6f0     0d5f          calla   SNDSND
         0000c700 00000000! 
    2838                    
    2839 0000c720     b540          move    *a10(PLYR_SIDE),a0
         0000c730     05b0  
    2840 0000c740     0d5f          CALLA   CALL_MATCH_OVER
         0000c750 00000000! 
    2841                    
    2842 0000c770                   SLEEPK  20
    2843                    
    2844                            ;has anyone won the match?
    2845 0000c7b0     05a0          move    @p1rounds,a0
         0000c7c0 00000000! 
    2846 0000c7e0     0b40          cmpi    2,a0
         0000c7f0     fffd  
    2847 0000c800     ca06          jrz     DO_WAIT
    2848 0000c810     05a0          move    @p2rounds,a0
         0000c820 00000000! 
    2849 0000c840     0b40          cmpi    2,a0
         0000c850     fffd  
    2850 0000c860     cb18          jrnz    ebwtgo0
    2851                    
    2852 0000c870           DO_WAIT
    2853 0000c870     5600          CLR     A0
    2854 0000c880     0580          MOVE    A0,@MUSIC_HAP
         0000c890 000008f0- 
    2855                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   66

    2856                    ;Increment his win count
    2857 0000c8b0     0d5f          calla   increment_wincount
         0000c8c0 00000000! 
    2858                    
    2859                            ;don't draw the text if this is a royal rumble
    2860 0000c8e0     05ae          move    @royal_rumble,a14
         0000c8f0 00000000! 
    2861 0000c910     cb02          jrnz    ebwtskip_rw
    2862 0000c920     0d3f          callr   replace_wins
         0000c930     f5c8  
    2863 0000c940           ebwtskip_rw
    2864                    
    2865                            ;wait 1 sec or until a press
    2866 0000c940     09c9          movi    TSEC,a9
         0000c950     0035  
    2867 0000c960           ebwtwl0 SLEEPK  1
    2868 0000c9a0     0d5f          calla   get_all_buttons_cur2
         0000c9b0 00000000! 
    2869 0000c9d0     cb01          jrnz    ebwtgo0
    2870 0000c9e0     3d29          dsjs    a9,ebwtwl0
    2871 0000c9f0           ebwtgo0
    2872                    
    2873 0000c9f0     05a9          move    @p1rounds,a9
         0000ca00 00000000! 
    2874 0000ca20     0b49          cmpi    2,a9
         0000ca30     fffd  
    2875 0000ca40     ca09          jreq    ebwtwon_match
    2876 0000ca50     05ae          move    @p2rounds,a14
         0000ca60 00000000! 
    2877 0000ca80     0b4e          cmpi    2,a14
         0000ca90     fffd  
    2878 0000caa0     ca03          jreq    ebwtwon_match
    2879 0000cab0     41c9          add     a14,a9
    2880 0000cac0     1429          dec     a9
    2881 0000cad0     c001          jruc    ebwtwon_fall
    2882                    
    2883 0000cae0           ebwtwon_match
    2884 0000cae0     1849          movk    2,a9
    2885 0000caf0           ebwtwon_fall
    2886                    
    2887                    
    2888                    ;       calla   is_8_on_1
    2889                    ;       jrnc    ebwtno_fireworks
    2890                    ;       move    @p1rounds,a0
    2891                    ;       move    @p2rounds,a14
    2892                    ;       or      a0,a14
    2893                    ;       cmpi    2,a14
    2894                    ;       jrlt    ebwtno_fireworks
    2895                    ;       JSRP    do_fireworks
    2896                    ;ebwtno_fireworks
    2897                    
    2898 0000caf0     b54b          move    *a10(PLYR_SIDE),a11
         0000cb00     05b0  
    2899 0000cb10     09c0          movi    0c4h,a0
         0000cb20     00c4  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   67

    2900 0000cb30     0d5f          calla   triple_sound
         0000cb40 00000000! 
    2901 0000cb60                   CREATE  ANNC_PID,CREATE_END_ROUND_TOP
    2902 0000cbe0                   SLEEPK  15
    2903 0000cc20                   CREATE  ANNC_PID,CREATE_END_ROUND_BOT
    2904 0000cca0                   SLEEPK  10
    2905 0000cce0                   CREATE  ANNC_PID,CREATE_END_ROUND_ICON
    2906 0000cd60                   SLEEPK  20
    2907                    
    2908                    ;Move round awards into match awards section and annunciate round awards for
    2909                    ;each human player.  Then clear out round awards.
    2910                    
    2911 0000cda0     0d5f          calla   is_it_a_really_quick_win
         0000cdb0 00000000! 
    2912 0000cdd0     0d5f          calla   give_award_if_opponent_is_human
         0000cde0 00000000! 
    2913 0000ce00     0d5f          calla   check_for_award_for_big_comeback
         0000ce10 00000000! 
    2914                    
    2915                    
    2916 0000ce30     0d5f          calla   accumulate_awards       ; Accumulate awards for each player
         0000ce40 00000000! 
    2917                    
    2918 0000ce60     0d5f          CALLA   CLEAR_SPEECH_REPEAT
         0000ce70 00000000! 
    2919                    
    2920 0000ce90     05a0          move    @p1rounds,a0
         0000cea0 00000000! 
    2921 0000cec0     0b40          cmpi    2,a0
         0000ced0     fffd  
    2922 0000cee0     ca07          jrz     ebwtend
    2923 0000cef0     05a0          move    @p2rounds,a0
         0000cf00 00000000! 
    2924 0000cf20     0b40          cmpi    2,a0
         0000cf30     fffd  
    2925 0000cf40     cb00          jrnz    ebwtnot_end
         0000cf50     00a2  
    2926                    
    2927 0000cf60           ebwtend
    2928 0000cf60     0d5f          calla   check_for_award_for_winstreak
         0000cf70 00000000! 
    2929 0000cf90     5600          clr     a0
    2930 0000cfa0     0780          move    a0,@award_ok_to_die,L
         0000cfb0 00000000! 
    2931 0000cfd0                   CREATE  AWARD_PID,create_end_rnd_awards
    2932                    
    2933 0000d050                   CREATE  SOUND_PID,DO_RIGHT_MUSIC
    2934 0000d0d0     05a0          move    @royal_rumble,a0
         0000d0e0 00000000! 
    2935 0000d100     cb0a          jrnz    ebwtno_award_wait
    2936 0000d110           ebwtwait_awards_dead
    2937 0000d110                   SLEEPK  1
    2938 0000d150     07a0          move    @award_ok_to_die,a0,L
         0000d160 00000000! 
    2939 0000d180     0b40          cmpi    3,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   68

         0000d190     fffc  
    2940 0000d1a0     c4f6          jrlt    ebwtwait_awards_dead
    2941 0000d1b0           ebwtno_award_wait
    2942                    
    2943                    
    2944                    
    2945                            ;wait 1 sec or until a press
    2946 0000d1b0     09c9          movi    TSEC*3,a9
         0000d1c0     009f  
    2947 0000d1d0           ebwtwl1 SLEEPK  1
    2948 0000d210     0d5f          calla   get_all_buttons_cur2
         0000d220 00000000! 
    2949 0000d240     cb01          jrnz    ebwtgo1
    2950 0000d250     3d29          dsjs    a9,ebwtwl1
    2951 0000d260           ebwtgo1
    2952 0000d260     1880          movk    4,a0
    2953 0000d270     0780          move    a0,@award_ok_to_die,L
         0000d280 00000000! 
    2954                    
    2955 0000d2a0     09c0          MOVI    ANNC_PID,A0
         0000d2b0     012e  
    2956 0000d2c0     5621          CLR     A1
    2957 0000d2d0     03e1          NOT     A1
    2958 0000d2e0     0d5f          CALLA   KILALL
         0000d2f0 00000000! 
    2959                    
    2960 0000d310     09c0          movi    25,a0                   ; Tips every 25 consecutive wins
         0000d320     0019  
    2961 0000d330     05a1          move    @p1winstreak,a1         ; p1 winstreak ?
         0000d340 00000000! 
    2962 0000d360     cb04          jrnz    ebwttip_chk             ; br = yes
    2963 0000d370           ebwtck_p2
    2964 0000d370     05a1          move    @p2winstreak,a1         ; p2 winstreak ?
         0000d380 00000000! 
    2965 0000d3a0     ca02          jrz     ebwtck_mtch_num         ; br = no
    2966 0000d3b0           ebwttip_chk
    2967 0000d3b0     6e01          modu    a0,a1                   ; 25 wins?
    2968 0000d3c0     ca07          jrz     ebwtdo_tip                      ; br = yes
    2969 0000d3d0           ebwtck_mtch_num
    2970 0000d3d0     09c0          movi    100,a0                  ; Tips every 100 matches
         0000d3e0     0064  
    2971 0000d3f0     05a1          move    @match_cnt,a1           ; Get match count
         0000d400 00000000! 
    2972 0000d420     6e01          modu    a0,a1                   ; Time for a tip
    2973 0000d430     cb0c          jrnz    ebwtno_tip                      ; br = no
    2974 0000d440           ebwtdo_tip
    2975 0000d440                   CREATE  04000h,show_mk3_tip     ; Show a random mk3 tip
    2976 0000d4c0                   SLEEPK  2
    2977 0000d500           ebwtno_tip
    2978                    
    2979 0000d500     05a0          MOVE    @MUSIC_HAP,A0
         0000d510 000008f0- 
    2980 0000d530     cb08          JRNZ    MUSIC_ALREADY_GOING
    2981 0000d540                   CREATE  SOUND_PID,DO_RIGHT_MUSIC2
    2982                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   69

    2983 0000d5c0           MUSIC_ALREADY_GOING
    2984 0000d5c0     1840          MOVK    2,A0
    2985 0000d5d0     0580          move    a0,@match_over
         0000d5e0 00000000! 
    2986 0000d600     0d5f          CALLA   KILL_ALL_CHANNELS
         0000d610 00000000! 
    2987 0000d630     09c0          MOVI    4DH,A0
         0000d640     004d  
    2988 0000d650     0d5f          CALLA   triple_sound
         0000d660 00000000! 
    2989 0000d680     5600          clr     a0
    2990 0000d690     0580          move    a0,@HALT
         0000d6a0 00000000! 
    2991 0000d6c0                   DIE
    2992                    
    2993                    ********
    2994                    * Create game over process and die
    2995                    
    2996 0000d6f0            SUBRP  ebwtdo_game_over
    2997 0000d6f0                   CREATE0 do_game_over            ;it'll set it's own PROCID
    2998 0000d760                   DIE
    2999                    
    3000                    ********
    3001                    * Play's a wrestler's music
    3002                    
    3003 0000d790            SUBRP  DO_RIGHT_MUSIC
    3004 0000d790                   SLEEP   55
    3005 0000d7e0            SUBRP  DO_RIGHT_MUSIC2
    3006 0000d7e0     1820          MOVK    1,A0
    3007 0000d7f0     0580          MOVE    A0,@MUSIC_HAP
         0000d800 000008f0- 
    3008 0000d820     b54b          MOVE    *A10(WRESTLERNUM),A11
         0000d830     0590  
    3009 0000d840     248b          SLL     4,A11
    3010 0000d850     0b2b          ADDI    ebwtwrestler_tunes,A11
         0000d860 0000d8f0' 
    3011 0000d880     8563          MOVE    *A11,A3
    3012 0000d890     0d5f          calla   SNDSND
         0000d8a0 00000000! 
    3013 0000d8c0                   DIE
    3014                    
    3015 0000d8f0           ebwtwrestler_tunes
    3016 0000d8f0     0005          .word   5,2,1,7,6,4,8,0,3
    3017                    
    3018 0000d980           ebwtnot_end
    3019 0000d980     05ae          move    @royal_rumble,a14
         0000d990 00000000! 
    3020 0000d9b0     cb07          jrnz    ebwtno_run_boxes
    3021 0000d9c0                   JSRP    show_dufus_messages             ; Shows run msg (only between rounds)
    3022 0000da30           ebwtno_run_boxes
    3023                    
    3024                            ;wait 105 ticks or until a press
    3025 0000da30     09c9          movi    105,a9
         0000da40     0069  
    3026 0000da50           ebwtwl2 SLEEPK  1
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   70

    3027 0000da90     0d5f          calla   get_all_buttons_cur2
         0000daa0 00000000! 
    3028 0000dac0     cb01          jrnz    ebwtgo2
    3029 0000dad0     3d29          dsjs    a9,ebwtwl2
    3030 0000dae0           ebwtgo2 ;Hey!  REAL programmers don't use go2's!
    3031                            ;if the dufus msg boxes are on make sure their
    3032                            ;on for at least 1 second
    3033 0000dae0     07a0          move    @dboxes_on,a0,L         ; Any dufus msg boxes on?
         0000daf0 00000000! 
    3034 0000db10     ca0a          jrz     ebwtdeath_ok            ; br = no
    3035 0000db20     0b49          cmpi    50,a9                   ; Has 1 second passed ?
         0000db30     ffcd  
    3036 0000db40     c607          jrle    ebwtdeath_ok            ; br = yes
    3037 0000db50     0be9          subi    50,a9                   ; Give me remainder of 1 second
         0000db60     ffcd  
    3038 0000db70           ebwtdbox_wait
    3039 0000db70                   SLEEPK  1
    3040 0000dbb0     3ca9          dsjs    a9,ebwtdbox_wait
    3041 0000dbc0           ebwtdeath_ok
    3042 0000dbc0     1820          movk    1,a0
    3043 0000dbd0     0780          move    a0,@award_ok_to_die,L
         0000dbe0 00000000! 
    3044                    
    3045 0000dc00     09c0          MOVI    ANNC_PID,A0
         0000dc10     012e  
    3046 0000dc20     5621          CLR     A1
    3047 0000dc30     03e1          NOT     A1
    3048 0000dc40     0d5f          CALLA   KILALL          ;STOP BAR MOTION IF NEED BE
         0000dc50 00000000! 
    3049                    
    3050 0000dc70     05a5          MOVE    @PSTATUS2,A5
         0000dc80 00000000! 
    3051 0000dca0     0b45          CMPI    3,A5
         0000dcb0     fffc  
    3052 0000dcc0     ca0a          JREQ    RESET_HUMAN_VS_HUMAN
    3053                    
    3054 0000dcd0     b543          MOVE    *A10(PLYRNUM),A3
         0000dce0     0580  
    3055 0000dcf0     0b43          CMPI    2,A3
         0000dd00     fffd  
    3056 0000dd10     c505          JRGE    RESET_HUMAN_VS_HUMAN
    3057                    
    3058 0000dd20     03e5          NOT     A5
    3059 0000dd30     27c5          SLL     30,A5
    3060 0000dd40     2c45          SRL     30,A5
    3061 0000dd50     1425          DEC     A5
    3062 0000dd60     c004          JRUC    WRESTLERS_RESET
    3063                    
    3064 0000dd70           HUMAN_WON_IT
    3065                    
    3066 0000dd70           RESET_HUMAN_VS_HUMAN
    3067 0000dd70     b741          MOVE    *A10(WHOIHIT),A1,L
         0000dd80     0500  
    3068 0000dd90     b425          MOVE    *A1(PLYRNUM),A5
         0000dda0     0580  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   71

    3069                    
    3070 0000ddb0           WRESTLERS_RESET
    3071                    
    3072                    ;Cause wrestlers to re-appear in the correct spot to start the next round.
    3073                    
    3074 0000ddb0     0d5f          CALLA   CLEAR_SPEECH_REPEAT
         0000ddc0 00000000! 
    3075                    
    3076                            ;do new music for the coming round
    3077 0000dde0     05a1          MOVE    @current_round,A1
         0000ddf0 00000000! 
    3078 0000de10     09c3          MOVI    16,A3
         0000de20     0010  
    3079 0000de30     0b41          CMPI    2,A1
         0000de40     fffd  
    3080 0000de50     ca02          JREQ    NOT_THIRD_MATCH
    3081 0000de60     09c3          MOVI    17,A3
         0000de70     0011  
    3082 0000de80           NOT_THIRD_MATCH
    3083 0000de80     0d5f          CALLA   SNDSND
         0000de90 00000000! 
    3084 0000deb0           NO_LOWER
    3085 0000deb0     1908          movk    8,a8
    3086 0000dec0     1829          movk    1,a9
    3087 0000ded0                   jsrp    CLOSE_VERT_SCREEN_LINE
    3088                    
    3089 0000df40     09e1          MOVI    LINES_VERT,A1
         0000df50 00000000! 
    3090 0000df70     0781          MOVE    A1,@WHICH_SCREEN,L
         0000df80 00000000! 
    3091                    
    3092 0000dfa0     09c0          movi    CLSNEUT|TYPTEXT|SUBMES1,a0
         0000dfb0     0702  
    3093 0000dfc0     0d5f          calla   obj_del1c               ;delete text/plates
         0000dfd0 00000000! 
    3094                    
    3095 0000dff0     09e0          movi    ZFLIP_POS,a0
         0000e000 000d8000  
    3096 0000e020     0780          move    a0,@ZFLIP_POS_VAR,L
         0000e030 000008d0- 
    3097                    
    3098 0000e050     0d5f          calla   reset_for_round
         0000e060 00000000! 
    3099 0000e080     0d5f          calla   reset_for_round2
         0000e090 00000000! 
    3100                    
    3101 0000e0b0     09c0          movi    TIMER_PID,a0
         0000e0c0     0124  
    3102 0000e0d0     09c1          movi    -1,a1
         0000e0e0     ffff  
    3103 0000e0f0     0d5f          calla   EXISTP
         0000e100 00000000! 
    3104 0000e120     ca17          jrz     dont_update_clock
    3105 0000e130     01e0          pushst
    3106 0000e140     0360          dint
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   72

    3107 0000e150                   push    a13
    3108 0000e160     4c0d          move    a0,a13
    3109 0000e170     0d5f          calla   update_timer
         0000e180 00000000! 
    3110 0000e1a0     09e0          movi    WGFS_W_P,a0
         0000e1b0 00000000! 
    3111 0000e1d0     0d5f          calla   pal_getf
         0000e1e0 00000000! 
    3112 0000e200     b7a8          move    *a13(PDATA+20h),a8,L    ;10's image pointer
         0000e210     0120  
    3113 0000e220     b008          move    a0,*a8(OPAL)
         0000e230     0150  
    3114 0000e240     b7a8          move    *a13(PDATA),a8,L        ;10's image pointer
         0000e250     0100  
    3115 0000e260     b008          move    a0,*a8(OPAL)
         0000e270     0150  
    3116 0000e280                   pull    a13
    3117 0000e290     01c0          popst
    3118 0000e2a0           dont_update_clock
    3119                    
    3120                    ;Update the meters
    3121 0000e2a0     5600          clr     a0
    3122 0000e2b0     0580          MOVE    A0,@DAM_MULT
         0000e2c0 00000860- 
    3123 0000e2e0     0d3f          callr   update_meter
         0000e2f0     f75c  
    3124 0000e300     1820          movk    1,a0
    3125 0000e310     0d3f          callr   update_meter
         0000e320     f759  
    3126                    
    3127                            ;reset the scroller position
    3128 0000e330     0d5f          calla   init_scroller
         0000e340 00000000! 
    3129                    
    3130 0000e360     0d5f          calla   INIT_SKIRTS
         0000e370 00000000! 
    3131                    
    3132 0000e390     0d5f          calla   BGND_UD1
         0000e3a0 00000000! 
    3133                    
    3134                    ;Now display "round 2" or "round 3"
    3135                    
    3136 0000e3c0                   CREATE  SOUND_PID,ring_bell
    3137                    
    3138 0000e440     1820          movk    1,a0
    3139 0000e450     0580          move    a0,@HALT
         0000e460 00000000! 
    3140                    
    3141 0000e480                   SLEEPK  1
    3142 0000e4c0     0d5f          calla   BGND_UD1
         0000e4d0 00000000! 
    3143 0000e4f0                   CREATE  SKIRT_PID,CHANGE_SKIRTS2
    3144                    
    3145 0000e570                   SLEEPK  1
    3146 0000e5b0     0d5f          calla   BGND_UD1
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   73

         0000e5c0 00000000! 
    3147                    ;       CREATE  SKIRT_PID,CHANGE_SKIRTS2
    3148                    
    3149 0000e5e0                   SLEEPK  1
    3150                    
    3151                    
    3152 0000e620     1908          movk    8,a8
    3153 0000e630     1829          movk    1,a9
    3154 0000e640                   jsrp    OPEN_VERT_SCREEN_LINE
    3155                    
    3156 0000e6b0                   CREATE  ANNC_PID,DO_ROUNDS
    3157                    
    3158 0000e730                   SLEEP   50
    3159 0000e780     0d5f          CALLA   VINCE_START_ROUND2_3
         0000e790 00000000! 
    3160 0000e7b0     5600          clr     a0
    3161 0000e7c0     0580          move    a0,@HALT
         0000e7d0 00000000! 
    3162 0000e7f0                   SLEEP   40
    3163                    
    3164 0000e840     09c0          movi    CLSNEUT|TYPTEXT|SUBMES1,a0
         0000e850     0702  
    3165 0000e860     0d5f          calla   obj_del1c               ;delete text/plates
         0000e870 00000000! 
    3166                    
    3167 0000e890     09c0          movi    CLSNEUT|TYPTEXT|SUBTXT,a0
         0000e8a0     0701  
    3168 0000e8b0     0d5f          calla   obj_del1c               ;delete text/plates
         0000e8c0 00000000! 
    3169                    
    3170 0000e8e0     5600          clr     a0
    3171 0000e8f0     0580          move    a0,@HALT
         0000e900 00000000! 
    3172                    
    3173                            ;reset round_start_time
    3174 0000e920     07ae          move    @PCNT,a14,L
         0000e930 00000000! 
    3175 0000e950     078e          move    a14,@round_start_time,L
         0000e960 00000000! 
    3176                            
    3177                    
    3178 0000e980                   DIE
    3179                    
    3180                    ******************************************************************************
    3181                    
    3182 0000e9b0            SUBRP  DO_ROUNDS
    3183 0000e9b0     09e0          movi    [200,0],a0                      ;x pos
         0000e9c0 00c80000  
    3184 0000e9e0     09e1          movi    [255,0],a1                      ;y pos
         0000e9f0 00ff0000  
    3185 0000ea10     09e2          movi    RNDPLAT,a2
         0000ea20 00000000! 
    3186 0000ea40     09f0          movi    RNDPLT_P,b0
         0000ea50 00000000! 
    3187 0000ea70     09c3          movi    1800h,a3                                ;z pos
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   74

         0000ea80     1800  
    3188 0000ea90     0d3f          callr   ebwtbegin_obj
         0000eaa0     0072  
    3189                    
    3190 0000eab0     5600          clr     a0
    3191 0000eac0     b008          move    a0,*a8(OID)
         0000ead0     0190  
    3192                    
    3193 0000eae0                   PUSH    A8
    3194                    
    3195 0000eaf0     05a0          move    @current_round,a0
         0000eb00 00000000! 
    3196 0000eb20     09e2          MOVI    RNDNUM_1,A2
         0000eb30 00000000! 
    3197 0000eb50     1420          DEC     A0
    3198 0000eb60     ca0d          JRZ     ebwtOKAY
    3199 0000eb70     09e2          MOVI    RNDNUM_2,A2
         0000eb80 00000000! 
    3200 0000eba0     1420          DEC     A0
    3201 0000ebb0     ca08          JRZ     ebwtOKAY
    3202 0000ebc0     09e2          MOVI    RNDNUM_3,A2
         0000ebd0 00000000! 
    3203 0000ebf0     1420          DEC     A0
    3204 0000ec00     ca03          JRZ     ebwtOKAY
    3205 0000ec10     09e2          MOVI    RNDNUM_4,A2
         0000ec20 00000000! 
    3206 0000ec40           ebwtOKAY
    3207 0000ec40     09e0          movi    [200,0],a0                      ;x pos
         0000ec50 00c80000  
    3208 0000ec70     09e1          movi    [255,0],a1                      ;y pos
         0000ec80 00ff0000  
    3209 0000eca0     09f0          movi    RNDNUM_P,b0
         0000ecb0 00000000! 
    3210 0000ecd0     09c3          movi    1801h,a3                                ;z pos
         0000ece0     1801  
    3211 0000ecf0     0d3f          callr   ebwtbegin_obj
         0000ed00     004c  
    3212                    
    3213 0000ed10     5600          clr     a0
    3214 0000ed20     b008          move    a0,*a8(OID)
         0000ed30     0190  
    3215                    
    3216 0000ed40                   PULL    A9
    3217                    
    3218 0000ed50     1a8a          MOVK    20,A10
    3219 0000ed60           LOOP_ROUNDS_ON
    3220 0000ed60     09e0          MOVI    [190,0],A0
         0000ed70 00be0000  
    3221 0000ed90     0d3f          CALLR   ZIP_ROUNDS_ON
         0000eda0     0022  
    3222 0000edb0                   SLEEPK  1
    3223 0000edf0     3d4a          DSJS    A10,LOOP_ROUNDS_ON
    3224 0000ee00     1a8a          movk    20,a10
    3225 0000ee10                   JSRP    wait_on_butn
    3226 0000ee80     1a8a          MOVK    20,A10
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   75

    3227 0000ee90           LOOP_ROUNDS_OFF
    3228 0000ee90     09e0          MOVI    [300,0],A0
         0000eea0 012c0000  
    3229 0000eec0     0d3f          CALLR   ZIP_ROUNDS_ON
         0000eed0     000f  
    3230 0000eee0                   SLEEPK  1
    3231 0000ef20     3d4a          DSJS    A10,LOOP_ROUNDS_OFF
    3232                    
    3233 0000ef30     0d5f          calla   DELOBJA8
         0000ef40 00000000! 
    3234 0000ef60     4d20          move    a9,a0
    3235 0000ef70     0d5f          calla   DELOBJ
         0000ef80 00000000! 
    3236 0000efa0                   DIE
    3237                    
    3238 0000efd0           ZIP_ROUNDS_ON
    3239 0000efd0     b701          move    *a8(OYVAL),a1,L
         0000efe0     00a0  
    3240 0000eff0     4420          sub     a1,a0
    3241 0000f000     2ba0          sra     3,a0
    3242 0000f010     b702          move    *a8(OYVAL),a2,L
         0000f020     00a0  
    3243 0000f030     4002          add     a0,a2
    3244 0000f040     b248          move    a2,*a8(OYVAL),L
         0000f050     00a0  
    3245 0000f060     b722          move    *a9(OYVAL),a2,L
         0000f070     00a0  
    3246 0000f080     4002          add     a0,a2
    3247 0000f090     b249          move    a2,*a9(OYVAL),L
         0000f0a0     00a0  
    3248 0000f0b0     0960          RETS
    3249                    
    3250 0000f0c0           ebwtset_x
    3251 0000f0c0     09eb          movi    ram_lst,a11
         0000f0d0 00000360- 
    3252 0000f0f0     8768          move    *a11,a8,L
    3253 0000f100     b701          move    *a8(OXVAL),a1,L
         0000f110     0080  
    3254 0000f120     4420          sub     a1,a0
    3255 0000f130     2ba0          sra     3,a0
    3256 0000f140           ebwtlp5
    3257 0000f140     9768          move    *a11+,a8,L
    3258 0000f150     ca06          jrz     ebwtx4
    3259 0000f160     b702          move    *a8(OXVAL),a2,L
         0000f170     0080  
    3260 0000f180     4002          add     a0,a2
    3261 0000f190     b248          move    a2,*a8(OXVAL),L
         0000f1a0     0080  
    3262                    
    3263 0000f1b0     c0f8          jruc    ebwtlp5
    3264 0000f1c0           ebwtx4
    3265 0000f1c0     0960          rets
    3266                    
    3267 0000f1d0           ebwtbegin_obj
    3268                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   76

    3269 0000f1d0     09e4          movi    DMAWNZ|M_SCRNREL,a4             ;DMA flags
         0000f1e0 0000a002  
    3270 0000f200     09c5          movi    CLSNEUT|TYPTEXT|SUBTXT,a5
         0000f210     0701  
    3271 0000f220     56c6          clr     a6                              ;x vel
    3272 0000f230     56e7          clr     a7                              ;y vel
    3273 0000f240     0d5f          calla   BEGINOBJP
         0000f250 00000000! 
    3274 0000f270     0960          rets
    3275                    
    3276 0000f280           blink_text
    3277 0000f280                   SLEEPK  10
    3278 0000f2c0           ebwtlp1
    3279 0000f2c0     09e0          movi    SGMD8RED2,a0
         0000f2d0 00000000! 
    3280 0000f2f0     0d5f          calla   pal_getf
         0000f300 00000000! 
    3281 0000f320     b008          move    a0,*a8(OPAL)
         0000f330     0150  
    3282 0000f340                   SLEEPK  4
    3283 0000f380     09e0          movi    SGMD8WHT2,a0
         0000f390 00000000! 
    3284 0000f3b0     0d5f          calla   pal_getf
         0000f3c0 00000000! 
    3285 0000f3e0     b008          move    a0,*a8(OPAL)
         0000f3f0     0150  
    3286 0000f400                   SLEEPK  7
    3287 0000f440     c0e7          jruc    ebwtlp1
    3288                    
    3289                    *******************************************************************************
    3290                    
    3291 0000f450            SUBR   FIRSTATT_MESS
    3292                    
    3293 0000f450     4d40          move    a10,a0
    3294 0000f460     09e8          movi    FIRSTATT,a8
         0000f470 00000000! 
    3295 0000f490     b409          move    *a0(PLYR_SIDE),a9
         0000f4a0     05b0  
    3296 0000f4b0     574a          clr     a10
    3297 0000f4c0                   pushp   a10
    3298 0000f4d0     09cb          movi    1801h,a11
         0000f4e0     1801  
    3299                            
    3300 0000f4f0     c06f          jruc    ebwtcommon
    3301                    
    3302 0000f500            SUBR   BONUS_MESS
    3303                    
    3304                    ;Process which displays high risk - 2x damage & possibly move name
    3305                    ;This comes in from Secret button moves
    3306                    ;A8=* plyr proc of who fired off the move
    3307                    ;A10=# of move message
    3308                    ;Messages display the first time only
    3309                    
    3310 0000f500     57ce          clr     a14
    3311 0000f510     4d4a          move    a10,a10                 ;No message
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   77

    3312 0000f520     ca4e          jrz     ebwtalready
    3313 0000f530     cf32          jrnn    ebwtreg
    3314                    
    3315 0000f540           ebwttag
    3316                    ;Taunt style high risk move - give 3x dmg
    3317 0000f540                   PUSHP   a14
    3318                    
    3319                    ;       movk    3,a1
    3320                    ;       move    a1,@DAM_MULT
    3321                    
    3322 0000f550                   RND_AWARD       a8,HIGH_RISK_AWD        ; give award for high risk
    3323                    
    3324 0000f5f0     b509          move    *a8(PLYR_SIDE),a9
         0000f600     05b0  
    3325 0000f610     09e8          MOVI    HIGHRISK,A8
         0000f620 00000000! 
    3326 0000f640     574a          CLR     A10
    3327 0000f650     09cb          MOVI    1801H,A11
         0000f660     1801  
    3328                    
    3329 0000f670                   CREATE0 MAYBE_HIGH_RISK
    3330                    
    3331 0000f6e0     0d3f          callr   is_there_one_already
         0000f6f0     0080  
    3332 0000f700     cb00          jrnz    ebwtexit
         0000f710     00b8  
    3333                    
    3334 0000f720                   CREATE  MESSAGE_PID,SPECIAL_MESSAGE
    3335                    
    3336 0000f7a0     09c0          MOVI    0BBH,A0                 ;Guitar snd
         0000f7b0     00bb  
    3337 0000f7c0     0d5f          CALLA   triple_sound
         0000f7d0 00000000! 
    3338                    
    3339 0000f7f0                   SLEEP   50
    3340                    
    3341 0000f840     188a          movk    4,a10
    3342 0000f850     c04f          jruc    ebwtinhere
    3343 0000f860           ebwtreg
    3344                    
    3345 0000f860     b501          move    *a8(RISK),a1
         0000f870     0950  
    3346 0000f880     1e01          btst    15,a1
    3347                    ;Taunt style high risk move - give 3x dmg
    3348 0000f890     cbca          jrnz    ebwttag
    3349                    
    3350                    
    3351                    
    3352 0000f8a0     4d43          move    a10,a3
    3353 0000f8b0     09e2          movi    message_flag,a2
         0000f8c0 00000890- 
    3354 0000f8e0     0b43          cmpi    32,a3
         0000f8f0     ffdf  
    3355 0000f900     c404          jrlt    normal_thing2
    3356 0000f910     0b02          addi    32,a2
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   78

         0000f920     0020  
    3357 0000f930     0be3          subi    32,a3
         0000f940     ffdf  
    3358 0000f950           normal_thing2
    3359 0000f950     8640          move    *a2,a0,L
    3360 0000f960     4a60          btst    a3,a0
    3361 0000f970     cb09          jrnz    ebwtalready
    3362                    ;Set the bit which says I've been displayed already!
    3363 0000f980     1821          movk    1,a1
    3364 0000f990     6261          sll     a3,a1
    3365 0000f9a0     5420          or      a1,a0
    3366 0000f9b0     8202          move    a0,*a2,L
    3367                    
    3368 0000f9c0     24aa          sll     5,a10
    3369 0000f9d0     0b2a          addi    ebwtmessage_tbl,a10
         0000f9e0 000102d0' 
    3370 0000fa00     874e          move    *a10,a14,L
    3371 0000fa10           ebwtalready
    3372 0000fa10                   PUSHP   a14
    3373                    
    3374                    
    3375                    ;       movk    2,a1
    3376                    ;       move    *a8(RISK),a14
    3377                    ;       btst    15,a14
    3378                    ;       jrz     ebwtreg2
    3379                    ;
    3380                    ;;Taunt style high risk move - give 3x dmg
    3381                    ;       movk    4,a1
    3382                    ;ebwtreg2       move    a1,@DAM_MULT
    3383                    
    3384 0000fa20     1841          movk    2,a1
    3385 0000fa30     0581          move    a1,@DAM_MULT
         0000fa40 00000860- 
    3386                    
    3387 0000fa60                   RND_AWARD       a8,HIGH_RISK_AWD        ; give award for high risk
    3388                    
    3389 0000fb00     b509          move    *a8(PLYR_SIDE),a9
         0000fb10     05b0  
    3390 0000fb20     09e8          MOVI    HIGHRISK,A8
         0000fb30 00000000! 
    3391 0000fb50     574a          CLR     A10
    3392 0000fb60     09cb          MOVI    1801H,A11
         0000fb70     1801  
    3393                    
    3394 0000fb80                   CREATE0 MAYBE_HIGH_RISK
    3395                    
    3396 0000fbf0           ebwtcommon      
    3397 0000fbf0     0d3f          callr   is_there_one_already
         0000fc00     002f  
    3398 0000fc10     cb68          jrnz    ebwtexit
    3399                    
    3400 0000fc20                   CREATE  MESSAGE_PID,SPECIAL_MESSAGE
    3401                    
    3402 0000fca0     09c0          MOVI    0BBH,A0                 ;Guitar snd
         0000fcb0     00bb  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   79

    3403 0000fcc0     0d5f          CALLA   triple_sound
         0000fcd0 00000000! 
    3404                    
    3405 0000fcf0                   SLEEP   50
    3406                    
    3407 0000fd40     184a          movk    2,a10
    3408 0000fd50     09e8  ebwtinhere      MOVI    xDAMAGE,A8
         0000fd60 00000000! 
    3409 0000fd80     09cb          MOVI    1803H,A11
         0000fd90     1803  
    3410                    
    3411 0000fda0                   CREATE  MESSAGE_PID,SPECIAL_MESSAGE
    3412                    
    3413                    ;Wait for 2x to leave
    3414                    ;Try to print correct move name
    3415 0000fe20                   SLEEP   50
    3416                    
    3417                    ;Get back message img addr to display
    3418 0000fe70                   PULLP   a8
    3419 0000fe80     ca80          jaz     SUCIDE
         0000fe90 00000000! 
    3420                    
    3421 0000feb0     0d3f          callr   DO_THIS_MESS
         0000fec0     0096  
    3422 0000fed0                   DIE
    3423                    
    3424 0000ff00            SUBRP  is_there_one_already
    3425 0000ff00     4d21          MOVE    A9,A1
    3426 0000ff10     03e1          NOT     A1
    3427 0000ff20     27e1          SLL     31,A1
    3428 0000ff30     2ca1          SRL     31-4,A1
    3429 0000ff40     0b21          ADDI    MESSAGE_FLAGS,A1
         0000ff50 000009f0- 
    3430 0000ff70     8420          MOVE    *A1,A0
    3431 0000ff80     0960          rets
    3432                    
    3433 0000ff90           SET_MESS_FLAGS
    3434 0000ff90     4d21          MOVE    A9,A1
    3435 0000ffa0     03e1          NOT     A1
    3436 0000ffb0     27e1          SLL     31,A1
    3437 0000ffc0     2ca1          SRL     31-4,A1
    3438 0000ffd0     0b21          ADDI    MESSAGE_FLAGS,A1
         0000ffe0 000009f0- 
    3439 00010000     8001          MOVE    A0,*A1
    3440 00010010     0960          RETS
    3441                    
    3442                    *******************************************************************************
    3443                    
    3444 00010020            SUBR   MOVE_NAME_ANNC
    3445                    
    3446                    ;Process which displays move name
    3447                    ;This comes in from actual script - like a hip toss announce
    3448                    ;A8=* plyr proc of who fired off the move
    3449                    ;A10=# of move message
    3450                    ;Messages display the first time only
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   80

    3451                    
    3452 00010020     0b4a          cmpi    41,a10
         00010030     ffd6  
    3453 00010040     ca04          jrz     ebwtskip
    3454                    
    3455 00010050     05ae          move    @reduce_bog,a14
         00010060 00000000! 
    3456 00010080     cb21          jrnz    ebwtexit
    3457 00010090           ebwtskip
    3458 00010090     b509          move    *a8(PLYR_SIDE),a9
         000100a0     05b0  
    3459                    
    3460 000100b0     0d3f          callr   is_there_one_already
         000100c0     ffe3  
    3461 000100d0     cb1c          jrnz    ebwtexit
    3462                    
    3463 000100e0     4d43          move    a10,a3
    3464 000100f0     09e2          movi    message_flag,a2
         00010100 00000890- 
    3465 00010120     0b43          cmpi    32,a3
         00010130     ffdf  
    3466 00010140     c407          jrlt    normal_thing
    3467 00010150     0b02          addi    32,a2
         00010160     0020  
    3468 00010170     0be3          subi    32,a3
         00010180     ffdf  
    3469 00010190     0b43          cmpi    9,a3
         000101a0     fff6  
    3470 000101b0     ca07          jrz     ebwtcont
    3471 000101c0           normal_thing
    3472 000101c0     8640          move    *a2,a0,L
    3473 000101d0     4a60          btst    a3,a0
    3474 000101e0     cb0b          jrnz    ebwtexit
    3475                    ;Set the bit which says I've been displayed already!
    3476 000101f0     1821          movk    1,a1
    3477 00010200     6261          sll     a3,a1
    3478 00010210     5420          or      a1,a0
    3479 00010220     8202          move    a0,*a2,L
    3480 00010230           ebwtcont
    3481 00010230     24aa          sll     5,a10
    3482 00010240     0b2a          addi    ebwtmessage_tbl,a10
         00010250 000102d0' 
    3483 00010270     8748          move    *a10,a8,L
    3484                    
    3485 00010280     0d3f          callr   DO_THIS_MESS
         00010290     0059  
    3486                    
    3487 000102a0           ebwtexit
    3488 000102a0                   DIE
    3489                    
    3490                    ;Add new move img names here:
    3491 000102d0           ebwtmessage_tbl
    3492 000102d0 00000000          .long   0               ;0 = Blank
    3493 000102f0 00000000!         .long   HEADSLAM        ;1
    3494 00010310 00000000          .long   0               ;2
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   81

    3495 00010330 00000000!         .long   SNAPMIRR        ;3
    3496 00010350 00000000!         .long   FRANKEN         ;4 *
    3497 00010370 00000000!         .long   BACKBRKR        ;5
    3498 00010390 00000000!         .long   BODYSLAM        ;6
    3499 000103b0 00000000!         .long   PILEDRV         ;7
    3500 000103d0 00000000!         .long   FIRSTATT        ;8  ; saved for Jason
    3501 000103f0 00000000!         .long   ARMBREAK        ;9      *
    3502 00010410 00000000!         .long   ARMDRAG         ;10     *  ;RAZOR & HART HIP TOSS
    3503 00010430 00000000!         .long   BACKDROP        ;11     *  ;BAM BAM HIP TOSS
    3504 00010450 00000000!         .long   BACKSUPL        ;12     *  ;SHAWN MICHEALS
    3505 00010470 00000000!         .long   BANZAI          ;13     *
    3506 00010490 00000000!         .long   BEHMBUTT        ;14     *  ;BAM BAM RUNNING BUTT DROP
    3507 000104b0 00000000!         .long   CROSFIRE        ;15     *
    3508 000104d0 00000000!         .long   DDT             ;16     *
    3509 000104f0 00000000!         .long   DOBLSNAP        ;17     *  ;SHAWN KICK
    3510 00010510 00000000!         .long   ELBOWDRP        ;18        ;EVERYBODY MOSTLY
    3511 00010530 00000000!         .long   EYERAKER        ;19     *
    3512 00010550 00000000!         .long   FACESLAM        ;20     *
    3513 00010570 00000000!         .long   FIRESPL         ;21     *  ;BAM BAM OFF TURNBUCKLES
    3514 00010590 00000000!         .long   CLAPPER         ;22     *  ;DOINK
    3515 000105b0 00000000!         .long   FLYBUTT         ;23        ?
    3516 000105d0 00000000!         .long   FLYCLOTH        ;24     *
    3517 000105f0 00000000!         .long   HAMMER          ;25     *
    3518 00010610 00000000!         .long   HIPTOSS         ;26     *  ;LEX YOKO
    3519 00010630 00000000!         .long   BIGBOOT         ;27     *  ;EVERYBODY
    3520 00010650 00000000!         .long   JOYBUZZ         ;28     *
    3521 00010670 00000000!         .long   MYSTGLVE        ;29     ;
    3522 00010690 00000000!         .long   NAPALM          ;30     ;
    3523 000106b0 00000000!         .long   POGOPILE        ;31     *
    3524 000106d0 00000000!         .long   RAPIDRND        ;32     *
    3525 000106f0 00000000!         .long   RAZOREDG        ;33     *
    3526 00010710 00000000!         .long   SCISSOR         ;34     *  ;YOKO
    3527 00010730 00000000!         .long   SKULLCRK        ;35     *
    3528 00010750 00000000!         .long   SLMONKEY        ;36     *
    3529 00010770 00000000!         .long   SPEEDKIK        ;37     *
    3530 00010790 00000000!         .long   SPLASH          ;38        ;BAMBAM TURNBUCKLE DROP, EVENTUALLY
    3531 000107b0 00000000!         .long   SUNSETFL        ;39     *  ;SHAWN FLIP
    3532 000107d0 00000000!         .long   TOMBPLDR        ;40     *
    3533 000107f0 00000000!         .long   SECWND09        ;41        
    3534 00010810 00000000!         .long   VERTSUPL        ;42     *   ;YOKO LEX
    3535                    
    3536                    *******************************************************************************
    3537                    
    3538 00010830           DO_THIS_MESS
    3539                    ;a8=*message to print
    3540                    ;a9=0 or 1
    3541                    
    3542                            ;if this is the second wind message, skip the permission check
    3543 00010830     0b68          cmpi    SECWND09,a8
         00010840 ffffffff! 
    3544 00010860     ca0c          jreq    ebwtskip_perm_check
    3545                    
    3546                            ;no messages in no-bog mode?
    3547 00010870     05ae          move    @no_debris,a14
         00010880 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   82

    3548 000108a0     cb18          jrnz    NO_MORE_MESS
    3549                    
    3550 000108b0     4d20          move    a9,a0
    3551 000108c0     24a0          sll     5,a0
    3552 000108d0     0b20          addi    p1powerup_request,a0
         000108e0 00000000! 
    3553 00010900     8600          move    *a0,a0,L
    3554 00010910     1f60          btst    MOVE_NAMES_ON_BIT,a0
    3555 00010920     ca10          jrz     NO_MORE_MESS
    3556 00010930           ebwtskip_perm_check
    3557                    
    3558                    ;Don't allow overlaps!
    3559 00010930     574a          CLR     A10
    3560                    
    3561 00010940     09cb          MOVI    1805H,A11               ;1801
         00010950     1805  
    3562                    
    3563 00010960                   CREATE  MESSAGE_PID,SPECIAL_MESSAGE
    3564                    
    3565 000109e0     09c0          MOVI    0BBH,A0                 ;Move name annc snd
         000109f0     00bb  
    3566 00010a00     0d5f          CALLA   triple_sound
         00010a10 00000000! 
    3567                    
    3568 00010a30           NO_MORE_MESS
    3569 00010a30     0960          RETS
    3570                    
    3571                    
    3572                    *******************************************************************************
    3573                    
    3574 00010a40            SUBR   DO_REVERSAL_MESS
    3575 00010a40                   RND_AWARD a8,REVERSAL_AWD               ; give award for reversal
    3576 00010ae0     09c0          movi    15Ch,a0
         00010af0     015c  
    3577 00010b00     0d5f          calla   ADD_VOICE
         00010b10 00000000! 
    3578                    
    3579 00010b30     b509          move    *a8(PLYR_SIDE),a9
         00010b40     05b0  
    3580 00010b50                   CREATE  MESSAGE_PID,CREATE_REVERSAL_MESS
    3581 00010bd0     0960          RETS
    3582                    
    3583 00010be0            SUBRP  CREATE_REVERSAL_MESS    ;process
    3584                    
    3585 00010be0     0d3f          callr   is_there_one_already
         00010bf0     ff30  
    3586 00010c00     cb13          jrnz    exit_reversal
    3587                    
    3588 00010c10     09e8          MOVI    REVERS,A8
         00010c20 00000000! 
    3589 00010c40     574a          CLR     A10
    3590 00010c50     09cb          MOVI    1801H,A11
         00010c60     1801  
    3591                    
    3592 00010c70                   CREATE  MESSAGE_PID,SPECIAL_MESSAGE
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   83

    3593                    
    3594 00010cf0     09c0          MOVI    0BBH,A0
         00010d00     00bb  
    3595 00010d10     0d5f          CALLA   triple_sound
         00010d20 00000000! 
    3596                    
    3597 00010d40           exit_reversal
    3598 00010d40                   DIE
    3599                    
    3600                    ****************************************************************************
    3601                    * Returns process ptr to first wrestler we can find who's trying a buckoff.
    3602                    
    3603 00010d70            SUBR   anyone_bucking
    3604                    
    3605                            ;no buckoffs allowed in royal rumble mode
    3606 00010d70     05ae          move    @royal_rumble,a14
         00010d80 00000000! 
    3607 00010da0     cb12          jrnz    cqwwno
    3608                    
    3609 00010db0     09e0          movi    process_ptrs,a0
         00010dc0 00000000! 
    3610 00010de0     09c1          movi    NUM_WRES,a1
         00010df0     0007  
    3611 00010e00     9602  cqwwlp  move    *a0+,a2,L
    3612 00010e10     ca0a          jrz     cqwwnxt
    3613 00010e20     b64e          move    *a2(STATUS_FLAGS),a14,L
         00010e30     0b50  
    3614 00010e40     1e6e          btst    B_DO_BUCKOFF,a14
    3615 00010e50     ca06          jrz     cqwwnxt
    3616 00010e60     1dce          btst    B_NEW_BUCKOFF,a14
    3617 00010e70     cb02          jrnz    cqwwyes
    3618 00010e80     1e2e          btst    B_DID_BUCKOFF,a14
    3619 00010e90     cb02          jrnz    cqwwnxt
    3620 00010ea0     4c40  cqwwyes move    a2,a0
    3621 00010eb0     0960          rets
    3622                    
    3623 00010ec0     3da1  cqwwnxt dsj     a1,cqwwlp
    3624 00010ed0     5600  cqwwno  clr     a0
    3625 00010ee0     0960          rets
    3626                    
    3627                    ****************************************************************************
    3628                    * Sets everyone's NO_BUCKOFF flag.
    3629                    
    3630 00010ef0            SUBRP  set_all_buckoffs
    3631                    
    3632 00010ef0     09e0          movi    process_ptrs,a0
         00010f00 00000000! 
    3633 00010f20     09c1          movi    NUM_WRES,a1
         00010f30     0007  
    3634 00010f40     9602  wpxnlp  move    *a0+,a2,L
    3635 00010f50     ca07          jrz     wpxnnxt
    3636 00010f60     b44e          move    *a2(STATUS_FLAGS),a14
         00010f70     0b50  
    3637 00010f80     0bae          ori     M_NO_BUCKOFF,a14
         00010f90 00002000  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   84

    3638 00010fb0     b1c2          move    a14,*a2(STATUS_FLAGS)
         00010fc0     0b50  
    3639 00010fd0     3d41  wpxnnxt dsj     a1,wpxnlp
    3640 00010fe0     0960          rets
    3641                    
    3642                    ****************************************************************************
    3643                    *
    3644                    * Returns carry set if everyone on winning team is unharmed.
    3645                    * Exception:  Never returns C if final match.
    3646                    *
    3647                    * 0a10H = proc of a wrestler on the winning team (anyone will do)
    3648                    *
    3649                    
    3650 00010ff0            SUBRP  is_perfect
    3651                    
    3652 00010ff0     0d5f          calla   is_8_on_1
         00011000 00000000! 
    3653 00011020     c818          jrc     vfcufinal
    3654                    
    3655 00011030                   PUSH    a2,a3,a4,a5
    3656                    
    3657 00011050     b545          move    *a10(PLYR_SIDE),a5
         00011060     05b0  
    3658 00011070     09c2          movi    NUM_WRES,a2
         00011080     0007  
    3659 00011090     09e3          movi    process_ptrs,a3
         000110a0 00000000! 
    3660                    
    3661 000110c0     9664  vfculp  move    *a3+,a4,L
    3662 000110d0     ca0f          jrz     vfcunxt         ;skip inactive
    3663                    
    3664 000110e0     b48e          move    *a4(PLYR_SIDE),a14
         000110f0     05b0  
    3665 00011100     48ae          cmp     a5,a14
    3666 00011110     cb0b          jrne    vfcunxt         ;skip enemies
    3667                    
    3668 00011120     b481          move    *a4(PLYRNUM),a1
         00011130     0580  
    3669 00011140     0d3f          callr   get_health
         00011150     f4be  
    3670 00011160     0b40          cmpi    LIFE_MAX,a0
         00011170     ff5c  
    3671 00011180     ca04          jreq    vfcunxt         ;okay - unharmed
    3672                    
    3673                            ;injured guy found.  return !c
    3674 00011190                   PULL    a2,a3,a4,a5
    3675 000111b0     0320  vfcufinal       clrc
    3676 000111c0     0960          rets
    3677                    
    3678 000111d0     3e42  vfcunxt dsj     a2,vfculp
    3679                    
    3680                            ;no injured teammates found.  return c
    3681 000111e0                   PULL    a2,a3,a4,a5
    3682 00011200     0de0          setc
    3683 00011210     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   85

    3684                    
    3685                    *****************************************************************************
    3686                    
    3687 00011220            SUBR   DO_COMBO_MESS
    3688                    
    3689                    ;Combo messages come from the scripts
    3690                    
    3691 00011220     05a0          MOVE    @combo_audit_done,A0
         00011230 00000880- 
    3692 00011250     cb09          JRNZ    YES_WE_HAVE
    3693 00011260     09c0          movi    AUD_COMBO,A0
         00011270     005b  
    3694 00011280     0d5f          calla   AUD1
         00011290 00000000! 
    3695 000112b0     1820          MOVK    1,A0
    3696 000112c0     0580          MOVE    A0,@combo_audit_done
         000112d0 00000880- 
    3697 000112f0           YES_WE_HAVE
    3698                    
    3699                            ;if our combo_broken bit is set, blow out of here altogether.
    3700                            ; We audit it, but we don't adjust the bar or display any kind of
    3701                            ; message.
    3702 000112f0     b7ae          move    *a13(STATUS_FLAGS),a14,L
         00011300     0b50  
    3703 00011310     1d8e          btst    B_COMBO_BROKEN,a14
    3704 00011320     cb00          jrnz    bvhdrets
         00011330     0092  
    3705                    
    3706 00011340     b5a9          MOVE    *A13(PLYRNUM),A9
         00011350     0580  
    3707 00011360     09e8          MOVI    HITCOMBO,A8
         00011370 00000000! 
    3708 00011390     b5aa          MOVE    *A13(COMBO_COUNT),A10
         000113a0     0af0  
    3709 000113b0     142a          DEC     A10
    3710                    ;We need to announce even the lowly combos
    3711                    ;How can you have a combo of 1 ?????
    3712 000113c0     0b4a          CMPI    2,A10
         000113d0     fffd  
    3713 000113e0     c435          JRLT    NO_MESSAGE
    3714                    
    3715                    
    3716 000113f0     0b4a          cmpi    10,a10
         00011400     fff5  
    3717 00011410     c40b          jrlt    bvhdaward_reg_combo
    3718 00011420                   RND_AWARD       a13,UCOMBOS_AWD
    3719 000114c0     c00a          jruc    bvhdcombo_awd_done
    3720 000114d0           bvhdaward_reg_combo
    3721 000114d0                   RND_AWARD       a13,COMBOS_AWD  ; give award for combo started
    3722 00011570           bvhdcombo_awd_done
    3723                    
    3724 00011570     09c0          MOVI    0BAH,A0         ;0BAH humbug!
         00011580     00ba  
    3725 00011590     0d5f          CALLA   triple_sound
         000115a0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   86

    3726                    
    3727 000115c0     09c0          MOVI    01A4H,A0        ;INCREDIBLE COMBINATION MOVE !
         000115d0     01a4  
    3728 000115e0     0d5f          CALLA   ADD_VOICE
         000115f0 00000000! 
    3729                    
    3730                    ;Add a couple for a better appearance!
    3731 00011610     0b4a          CMPI    5,A10
         00011620     fffa  
    3732 00011630     c601          JRLE    NO_MIGHT_BE_OBVIOUS
    3733 00011640     104a          addk    2,a10
    3734 00011650           NO_MIGHT_BE_OBVIOUS
    3735                    
    3736 00011650     09cb          MOVI    1803H,A11
         00011660     1803  
    3737                    
    3738 00011670     b5a9          move    *a13(PLYR_SIDE),a9
         00011680     05b0  
    3739                    
    3740                    ;Don't allow combo message to come out if other message there...
    3741 00011690     0d3f          callr   is_there_one_already
         000116a0     fe85  
    3742 000116b0     cb08          jrnz    NO_MESSAGE
    3743                    
    3744 000116c0                   CREATE  MESSAGE_PID,SPECIAL_MESSAGE
    3745                    
    3746 00011740           NO_MESSAGE
    3747                    
    3748                            ;HACK ALERT:  In royal rumble, the two human players share one combo
    3749                            ; meter.  This means that if player 1 (on the right) calls this,
    3750                            ; we clear HIS combo count but we zero his TEAMMATES bar.
    3751                            ; Confusing, eh?
    3752                    
    3753 00011740     5600          CLR     A0
    3754 00011750     b00d          MOVE    A0,*A13(COMBO_START)
         00011760     0b00  
    3755                    
    3756 00011770     b5a1          move    *a13(PLYR_SIDE),a1
         00011780     05b0  
    3757 00011790     b5ab          move    *a13(PLYRNUM),a11
         000117a0     0580  
    3758                    
    3759 000117b0     0b4b          cmpi    1,a11
         000117c0     fffe  
    3760 000117d0     cb06          jrne    bvhdnorum
    3761 000117e0     05ae          move    @royal_rumble,a14
         000117f0 00000000! 
    3762 00011810     ca02          jrz     bvhdnorum
    3763                    
    3764                            ;pretend we're player 0
    3765 00011820     5621          clr     a1              ;side
    3766 00011830     576b          clr     a11             ;PLYRNUM
    3767                    
    3768                    
    3769                    ;clear_combo_meter jumps here!
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   87

    3770 00011840            SUBRP  zero_combo_meter
    3771                    
    3772 00011840     09c9  bvhdnorum       movi    MD_SIZE,a9
         00011850     0090  
    3773 00011860     5e29          mpyu    a1,a9
    3774 00011870     0b29          addi    meter_data,a9
         00011880 000001c0- 
    3775 000118a0     b728          MOVE    *A9(MD_COMBO),A8,L
         000118b0     0070  
    3776 000118c0     4d65          move    a11,a5
    3777 000118d0                   X64     a5              ;x by PLT_SIZE
    3778 000118e0     0b25          ADDI    life_data,A5
         000118f0 00000000- 
    3779 00011910     5642          CLR     A2
    3780                    
    3781                    ;halve_combo_meter jumps here!
    3782 00011920            SUBRP  draw_combo_meter
    3783                    
    3784 00011920     b045          MOVE    A2,*A5(PLT_COMBO_SIZE)
         00011930     0030  
    3785 00011940     24a2          SLL     5,A2
    3786 00011950     0b22          ADDI    WHICH_SIZE_BAR,A2
         00011960 00003a50' 
    3787 00011980     8640          MOVE    *A2,A0,L
    3788 00011990     ba08          move    *a0(IANIOFF),*A8(ODOFF),L
         000119a0     0020  
         000119b0     0220  
    3789 000119c0     ba08          move    *a0(ISAG),*a8(OSAG),L
         000119d0     0040  
         000119e0     0110  
    3790 000119f0     ba08          MOVE    *A0(ISIZEX),*A8(OSIZE),L
         00011a00     0000  
         00011a10     0130  
    3791                    
    3792 00011a20                   PUSH    A0,a1
    3793 00011a40     4c20          MOVE    A1,A0
    3794 00011a50     2480          SLL     4,A0
    3795 00011a60     0b20          ADDI    COMBO_FLASH_FLAG,A0
         00011a70 00000a90- 
    3796 00011a90     5642          CLR     A2
    3797 00011aa0     8040          MOVE    A2,*A0
    3798                    
    3799 00011ab0     0b01          ADDI    FLASH_COMBO_PID,A1
         00011ac0     0143  
    3800 00011ad0     4c20          MOVE    A1,A0
    3801 00011ae0     09c1          MOVI    -1,A1
         00011af0     ffff  
    3802 00011b00     0d5f          CALLA   KILALL
         00011b10 00000000! 
    3803 00011b30                   PULL    A0,a1
    3804                    
    3805                            ;get the flip right
    3806 00011b50     2481          sll     B_FLIPH,a1
    3807 00011b60     b40e          move    *a0(ICTRL),a14
         00011b70     0060  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   88

    3808 00011b80     542e          or      a1,a14
    3809 00011b90     0bae          ori     8000H|DMAWNZ,a14
         00011ba0 00008002  
    3810 00011bc0     b1c8          move    a14,*a8(OCTRL)
         00011bd0     00f0  
    3811                    
    3812 00011be0     09e0          MOVI    SUPER_P,A0
         00011bf0 00000000! 
    3813 00011c10     0d5f          CALLA   pal_getf
         00011c20 00000000! 
    3814 00011c40     b008          MOVE    A0,*A8(OPAL)
         00011c50     0150  
    3815                    
    3816 00011c60           NO_GO_AWAY
    3817 00011c60     0960  bvhdrets        RETS
    3818                    
    3819                    *******************************************************************************
    3820                    *
    3821                    
    3822 00011c70            SUBRP  SPECIAL_MESSAGE
    3823                    
    3824              0018  ZIP_SPEED       .EQU    18H
    3825              0019  BUFF            .EQU    25
    3826                    
    3827                    ;A8=IMAGE TO PLACE UP
    3828                    ;A9=WHICH SIDE (1 OR 2)
    3829                    ;A10=NUMBER OF BONUS MULTIPLIER 2-5 (IF NECESSARY)
    3830                    ;A11=ZPOS TO PLACE BLOCK (SO DAMAGE x GOES OVER OTHER)
    3831                    
    3832 00011c70     1820          MOVK    1,A0
    3833 00011c80     0d3f          CALLR   SET_MESS_FLAGS
         00011c90     fe2f  
    3834 00011ca0                   PUSHP   A9
    3835                    
    3836 00011cb0     03e9          NOT     A9
    3837 00011cc0     27e9          SLL     31,A9
    3838 00011cd0     2c29          SRL     31,A9
    3839                    
    3840 00011ce0     09c0          MOVI    10H,A0                          ;Whoosh
         00011cf0     0010  
    3841 00011d00     0d5f          CALLA   triple_sound
         00011d10 00000000! 
    3842                    
    3843 00011d30     4f65          MOVE    A11,B5
    3844 00011d40     576b          CLR     A11
    3845 00011d50     4d02          MOVE    A8,A2
    3846 00011d60     b443          MOVE    *A2(ISIZEX),A3
         00011d70     0000  
    3847 00011d80     0b62          CMPI    xDAMAGE,A2
         00011d90 ffffffff! 
    3848 00011db0     ca04          JREQ    SPECIAL_CASE_THIS
    3849 00011dc0     0b62          CMPI    HITCOMBO,A2
         00011dd0 ffffffff! 
    3850 00011df0     cb14          JRNE    ONLY_THIS_SIZE
    3851 00011e00           SPECIAL_CASE_THIS
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   89

    3852 00011e00     0b03          ADDI    19,A3
         00011e10     0013  
    3853 00011e20     4d40          MOVE    A10,A0
    3854 00011e30     0d5f          CALLA   BINBCD
         00011e40 00000000! 
    3855 00011e60     4c0a          MOVE    A0,A10
    3856 00011e70     4d4b          MOVE    A10,A11
    3857 00011e80     2f8b          SRL     4,A11
    3858 00011e90     ca0a          JRZ     ONLY_THIS_SIZE
    3859 00011ea0     09e2          MOVI    HITCOMBO2,A2
         00011eb0 00000000! 
    3860 00011ed0     0b03          ADDI    21,A3
         00011ee0     0015  
    3861 00011ef0     0b4b          CMPI    1,A11
         00011f00     fffe  
    3862 00011f10     cb02          JRNE    ONLY_THIS_SIZE
    3863 00011f20     0be3          SUBI    4,A3
         00011f30     fffb  
    3864 00011f40           ONLY_THIS_SIZE
    3865 00011f40     09c5          MOVI    TYPE_MESS2,A5
         00011f50     0120  
    3866 00011f60     0b03          ADDI    BUFF*2,A3
         00011f70     0032  
    3867 00011f80     09c0          MOVI    410,A0
         00011f90     019a  
    3868 00011fa0     4c07          MOVE    A0,A7
    3869 00011fb0     4467          SUB     A3,A7
    3870 00011fc0     2607          SLL     16,A7
    3871 00011fd0     1429          DEC     A9
    3872 00011fe0     cb08          JRNZ    WE_SET_XPOS
    3873 00011ff0     09c5          MOVI    TYPE_MESS1,A5
         00012000     0110  
    3874 00012010     4c60          MOVE    A3,A0
    3875 00012020     03a0          NEG     A0
    3876 00012030     09e7          MOVI    [BUFF,0],A7
         00012040 00190000  
    3877 00012060     1320          ADDK    BUFF,A0
    3878 00012070           WE_SET_XPOS
    3879 00012070     2600          SLL     16,A0
    3880 00012080     b20d          MOVE    A0,*A13(PDATA+120H),L
         00012090     0220  
    3881 000120a0     b2ed          MOVE    A7,*A13(PDATA+100H),L
         000120b0     0200  
    3882 000120c0     09e1          MOVI    [230+4,0],A1
         000120d0 00ea0000  
    3883 000120f0     4eb3          MOVE    B5,A3
    3884 00012100     1023          ADDK    1,A3
    3885 00012110     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00012120 0000a102  
    3886                    
    3887 00012140     56c6          CLR     A6
    3888 00012150     56e7          CLR     A7
    3889 00012160     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A9,A10
         00012170     ff60  
    3890 00012180     0d5f          calla   BEGINOBJ
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   90

         00012190 00000000! 
    3891                    
    3892                    
    3893 000121b0     b700          move    *a8(OIMG),a0,L
         000121c0     0170  
    3894 000121d0     0b60          cmpi    SECWND09,a0
         000121e0 ffffffff! 
    3895 00012200     cb07          jrnz    bvhdnospec
    3896                    ;We need to animate this second wind message
    3897                    
    3898 00012210                   CREATE0 flash_2ndwind
    3899 00012280           bvhdnospec
    3900                    
    3901                    
    3902 00012280     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A9,A10
         00012290     06ff  
    3903 000122a0                   PUSH    A8
    3904                    
    3905 000122b0     09ee          MOVI    WHICH_BONUS_2,A14
         000122c0 00012d50' 
    3906 000122e0     0b62          CMPI    xDAMAGE,A2
         000122f0 ffffffff! 
    3907 00012310     ca0b          JREQ    WE_HAVE_NUMBERS
    3908 00012320     0b62          CMPI    HITCOMBO,A2
         00012330 ffffffff! 
    3909 00012350     ca07          JREQ    WE_HAVE_NUMBERS
    3910 00012360     09ee          MOVI    WHICH_BONUS_1,A14
         00012370 00012e90' 
    3911 00012390     0b62          CMPI    HITCOMBO2,A2
         000123a0 ffffffff! 
    3912 000123c0     cb23          JRNE    NO_NEED_FOR_THIRD_OBJ
    3913 000123d0           WE_HAVE_NUMBERS
    3914 000123d0     278a          SLL     32-4,A10
    3915 000123e0     2d2a          SRL     32-4-5,A10              ;*32
    3916 000123f0     41ca          ADD     A14,A10
    3917 00012400     8742          MOVE    *A10,A2,L
    3918 00012410     098f          MMTM    SP,A0,A1,A3,A4,A5,A6,A7,A11
         00012420     df10  
    3919 00012430     0d5f          calla   BEGINOBJ
         00012440 00000000! 
    3920 00012460     09af          MMFM    SP,A0,A1,A3,A4,A5,A6,A7,A11
         00012470     08fb  
    3921 00012480     4d0a          MOVE    A8,A10
    3922                    
    3923 00012490     4d67          MOVE    A11,A7
    3924 000124a0     2787          SLL     32-4,A7
    3925 000124b0     ca14          JRZ     NO_NEED_FOR_THIRD_OBJ
    3926 000124c0     2d27          SRL     32-4-5,A7               ;*32
    3927 000124d0     0b27          ADDI    WHICH_BONUS_2,A7
         000124e0 00012d50' 
    3928 00012500     86e2          MOVE    *A7,A2,L
    3929 00012510     56e7          CLR     A7
    3930 00012520     098f          MMTM    SP,A0,A1,A5,A6,A7
         00012530     c700  
    3931 00012540     0b4b          CMPI    1,A11
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   91

         00012550     fffe  
    3932 00012560     cb03          JRNE    NO_REPOS_THIS_NUM
    3933 00012570     0b20          ADDI    [4,0],A0
         00012580 00040000  
    3934 000125a0           NO_REPOS_THIS_NUM
    3935 000125a0     0d5f          calla   BEGINOBJ
         000125b0 00000000! 
    3936 000125d0     09af          MMFM    SP,A0,A1,A5,A6,A7
         000125e0     00e3  
    3937 000125f0     4d0b          MOVE    A8,A11
    3938 00012600           NO_NEED_FOR_THIRD_OBJ
    3939                    
    3940 00012600     b502          MOVE    *A8(OSIZEX),A2
         00012610     0130  
    3941 00012620     09c3          MOVI    395,A3
         00012630     018b  
    3942 00012640     4443          SUB     A2,A3
    3943 00012650     0be3          SUBI    BUFF,A3
         00012660     ffe6  
    3944 00012670     2600          SLL     16,A0
    3945 00012680     4460          SUB     A3,A0
    3946 00012690     09e2          MOVI    MVEBAR_B,A2
         000126a0 00000000! 
    3947 000126c0     09e4          movi    DMAWNZ|M_FLIPH|M_3D|M_SCRNREL,a4        ;DMA flags
         000126d0 0000a112  
    3948 000126f0     4d29          MOVE    A9,A9
    3949 00012700     ca0b          JRZ     BAR_SET
    3950 00012710     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00012720 0000a102  
    3951 00012740     09e2          MOVI    MVEBAR_R,A2
         00012750 00000000! 
    3952 00012770     b700          MOVE    *A8(OXVAL),A0,L
         00012780     0080  
    3953 00012790     0d00          SUBI    [BUFF,0],A0
         000127a0 ffe6ffff  
    3954 000127c0           BAR_SET
    3955 000127c0     4eb3          MOVE    B5,A3
    3956 000127d0     0d5f          calla   BEGINOBJ
         000127e0 00000000! 
    3957 00012800     4d09          MOVE    A8,A9
    3958 00012810                   PULL    A8
    3959                    
    3960 00012820     09c3          MOVI    ZIP_SPEED,A3
         00012830     0018  
    3961 00012840           MOVE_IT_ON
    3962 00012840     b7a0          MOVE    *A13(PDATA+100H),A0,L
         00012850     0200  
    3963 00012860     0d3f          CALLR   MOVE_BARS
         00012870     0032  
    3964 00012880                   PUSHP   A3
    3965 00012890                   SLEEPK  1
    3966 000128d0                   PULLP   A3
    3967 000128e0     3d63          DSJS    A3,MOVE_IT_ON
    3968                    
    3969 000128f0                   SLEEP   50
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   92

    3970                    
    3971 00012940     09c3          MOVI    ZIP_SPEED,A3
         00012950     0018  
    3972 00012960           MOVE_IT_OFF
    3973 00012960     b7a0          MOVE    *A13(PDATA+120H),A0,L
         00012970     0220  
    3974 00012980     2020          SLA     1,A0
    3975 00012990     0d3f          CALLR   MOVE_BARS
         000129a0     001f  
    3976 000129b0                   PUSHP   A3
    3977 000129c0                   SLEEPK  1
    3978 00012a00                   PULLP   A3
    3979 00012a10     3d83          DSJS    A3,MOVE_IT_OFF
    3980                    
    3981 00012a20     0d5f          CALLA   DELOBJA8
         00012a30 00000000! 
    3982 00012a50     4d28          MOVE    A9,A8
    3983 00012a60     0d5f          CALLA   DELOBJA8
         00012a70 00000000! 
    3984 00012a90     4d48          MOVE    A10,A8
    3985 00012aa0     ca03          JRZ     NO_A10_3
    3986 00012ab0     0d5f          CALLA   DELOBJA8
         00012ac0 00000000! 
    3987 00012ae0           NO_A10_3
    3988 00012ae0     4d68          MOVE    A11,A8
    3989 00012af0     ca03          JRZ     NO_A11_3
    3990 00012b00     0d5f          CALLA   DELOBJA8
         00012b10 00000000! 
    3991 00012b30           NO_A11_3
    3992 00012b30                   PULLP   A9
    3993 00012b40     5600          CLR     A0
    3994 00012b50     0d3f          CALLR   SET_MESS_FLAGS
         00012b60     fd42  
    3995                    
    3996 00012b70                   DIE
    3997                    
    3998 00012ba0           MOVE_BARS
    3999 00012ba0                   PUSH    A8
    4000 00012bb0     b701          MOVE    *A8(OXVAL),A1,L
         00012bc0     0080  
    4001 00012bd0     4420          SUB     A1,A0
    4002 00012be0     2ba0          SRA     3,A0
    4003                    
    4004 00012bf0     0d3f          CALLR   MOVE_THIS_PART
         00012c00     000e  
    4005 00012c10     4d28          MOVE    A9,A8
    4006 00012c20     ca0a          JRZ     NO_A11_PART
    4007 00012c30     0d3f          CALLR   MOVE_THIS_PART
         00012c40     000a  
    4008 00012c50     4d48          MOVE    A10,A8
    4009 00012c60     ca02          JRZ     NO_A10_PART
    4010 00012c70     0d3f          CALLR   MOVE_THIS_PART
         00012c80     0006  
    4011 00012c90           NO_A10_PART
    4012 00012c90     4d68          MOVE    A11,A8
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   93

    4013 00012ca0     ca02          JRZ     NO_A11_PART
    4014 00012cb0     0d3f          CALLR   MOVE_THIS_PART
         00012cc0     0002  
    4015 00012cd0           NO_A11_PART
    4016 00012cd0                   PULL    A8
    4017 00012ce0     0960          RETS
    4018                    
    4019 00012cf0           MOVE_THIS_PART
    4020 00012cf0     b702          MOVE    *A8(OXVAL),A2,L
         00012d00     0080  
    4021 00012d10     4002          ADD     A0,A2
    4022 00012d20     b248          MOVE    A2,*A8(OXVAL),L
         00012d30     0080  
    4023 00012d40     0960          RETS
    4024                    
    4025 00012d50           WHICH_BONUS_2
    4026 00012d50 00000000!         .LONG   X0X,X1X,X2X
    4027 00012db0 00000000!         .LONG   X3X,X4X,X5X
    4028 00012e10 00000000!         .LONG   X6X,X7X,X8X
    4029 00012e70 00000000!         .LONG   X9X
    4030                    
    4031 00012e90           WHICH_BONUS_1
    4032 00012e90 00000000!         .LONG   X0X2,X1X2,X2X2
    4033 00012ef0 00000000!         .LONG   X3X2,X4X2,X5X2
    4034 00012f50 00000000!         .LONG   X6X2,X7X2,X8X2
    4035 00012fb0 00000000!         .LONG   X9X2
    4036                    
    4037              1800  Z_FORWARD       .EQU    1800H
    4038                    
    4039 00012fd0            SUBR   SHIFT_BARS_IN_Z
    4040 00012fd0     5600          CLR     A0
    4041 00012fe0     0580          MOVE    A0,@LAST_FLIP
         00012ff0 00000870- 
    4042 00013010           SHIFT_BARS_IN_Z_MOTION
    4043 00013010     07a0          MOVE    @WORLDTLY,A0,L
         00013020 00000000! 
    4044 00013040     07a1          MOVE    @ZFLIP_POS_VAR,A1,L
         00013050 000008d0- 
    4045 00013070     4820          CMP     A1,A0
    4046 00013080     c411          JRLT    CHECK_IF_WE_ALREADY_FLIPPED_BACK
    4047                    
    4048 00013090     05a0          MOVE    @LAST_FLIP,A0
         000130a0 00000870- 
    4049 000130c0     cb17          JRNZ    YES_WE_DID
    4050 000130d0     1820          MOVK    1,A0
    4051 000130e0     0580          MOVE    A0,@LAST_FLIP
         000130f0 00000870- 
    4052 00013110     0d3f          CALLR   SHIFT_BARS_FORWARD
         00013120     0018  
    4053 00013130                   SLOOP   4,SHIFT_BARS_IN_Z_MOTION
    4054                    
    4055 000131a0           CHECK_IF_WE_ALREADY_FLIPPED_BACK
    4056 000131a0     05a0          MOVE    @LAST_FLIP,A0
         000131b0 00000870- 
    4057 000131d0     ca06          JRZ     YES_WE_DID
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   94

    4058 000131e0     5600          CLR     A0
    4059 000131f0     0580          MOVE    A0,@LAST_FLIP
         00013200 00000870- 
    4060 00013220     0d3f          CALLR   SHIFT_BARS_BACK
         00013230     001d  
    4061 00013240           YES_WE_DID
    4062 00013240                   SLOOP   4,SHIFT_BARS_IN_Z_MOTION
    4063                    
    4064 000132b0           SHIFT_BARS_FORWARD
    4065 000132b0     09e8          movi    OBJLST,a8
         000132c0 00000000! 
    4066 000132e0     09c2          movi    bak_z,A2
         000132f0     00c8  
    4067 00013300     09c3          movi    name_z,A3
         00013310     00cb  
    4068 00013320     09c4          movi    Z_FORWARD,A4
         00013330     1800  
    4069 00013340     c009          JRUC    DONT_SHIFT_IT_FORWARD
    4070 00013350           STILL_MORE_TO_CHECK
    4071 00013350     b501          MOVE    *A8(OZPOS),A1
         00013360     00d0  
    4072 00013370     4841          CMP     a2,A1
    4073 00013380     c405          JRLT    DONT_SHIFT_IT_FORWARD
    4074 00013390     4861          CMP     a3,A1
    4075 000133a0     c703          JRGT    DONT_SHIFT_IT_FORWARD
    4076 000133b0           SHIFT_IT_FORWARD
    4077 000133b0     4081          ADD     a4,A1
    4078 000133c0     b028          MOVE    A1,*A8(OZPOS)
         000133d0     00d0  
    4079 000133e0           DONT_SHIFT_IT_FORWARD
    4080 000133e0     8708          MOVE    *A8,A8,L
    4081 000133f0     cbf5          JRNZ    STILL_MORE_TO_CHECK
    4082 00013400     0960          RETS
    4083                    
    4084 00013410           SHIFT_BARS_BACK
    4085 00013410     09e8          movi    OBJLST,a8
         00013420 00000000! 
    4086 00013440     09c2          movi    bak_z+Z_FORWARD,A2
         00013450     18c8  
    4087 00013460     09c3          movi    name_z+Z_FORWARD,A3
         00013470     18cb  
    4088 00013480     09c4          movi    Z_FORWARD,A4
         00013490     1800  
    4089 000134a0     c009          JRUC    DONT_SHIFT_IT_BACK
    4090 000134b0           STILL_MORE_TO_CHECK_B
    4091 000134b0     b501          MOVE    *A8(OZPOS),A1
         000134c0     00d0  
    4092 000134d0     4841          CMP     a2,A1
    4093 000134e0     c405          JRLT    DONT_SHIFT_IT_BACK
    4094 000134f0     4861          CMP     a3,A1
    4095 00013500     c703          JRGT    DONT_SHIFT_IT_BACK
    4096 00013510           SHIFT_IT_BACK
    4097 00013510     4481          SUB     a4,A1
    4098 00013520     b028          MOVE    A1,*A8(OZPOS)
         00013530     00d0  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   95

    4099 00013540           DONT_SHIFT_IT_BACK
    4100 00013540     8708          MOVE    *A8,A8,L
    4101 00013550     cbf5          JRNZ    STILL_MORE_TO_CHECK_B
    4102 00013560     0960          RETS
    4103                    
    4104              000a  END_BUFF        .equ    10
    4105              001e  END_POS .EQU    30
    4106              0050  END_YPOS        .EQU    80
    4107              0004  TURM_OFF        .EQU    4
    4108                    
    4109 00013570           WHICH_ROUND
    4110 00013570 00000000!         .LONG   FIRSTFAL,SECNDFAL,MATCHFAL
    4111                    
    4112 000135d0           CREATE_END_ROUND_TOP
    4113 000135d0     24a9          SLL     5,A9
    4114 000135e0     0b29          ADDI    WHICH_ROUND,A9
         000135f0 00013570' 
    4115 00013610     8722          MOVE    *A9,A2,L
    4116                    
    4117 00013620     5621          CLR     A1
    4118 00013630     b22d          MOVE    A1,*A13(PDATA+140),L
         00013640     018c  
    4119                    
    4120 00013650     09e1          MOVI    [END_POS+150+TURM_OFF,0],A1
         00013660 00b80000  
    4121 00013680     09e0          MOVI    [400+END_BUFF+150+TURM_OFF,0],A0
         00013690 02340000  
    4122 000136b0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         000136c0 0000a102  
    4123 000136e0     4d6b          MOVE    A11,A11
    4124 000136f0     cb06          JRNZ    WHICH_TEXT_SET
    4125 00013700     09e1          MOVI    [400-END_POS-150,0],A1
         00013710 00dc0000  
    4126 00013730     09e0          MOVI    [0-END_BUFF-150,0],A0
         00013740 ff600000  
    4127 00013760           WHICH_TEXT_SET
    4128 00013760     b22d          MOVE    A1,*A13(PDATA+100H),L
         00013770     0200  
    4129 00013780     09e1          MOVI    [END_YPOS,0],A1
         00013790 00500000  
    4130 000137b0     09c3          MOVI    1803H,A3
         000137c0     1803  
    4131 000137d0     09c5          MOVI    CLSNEUT|TYPTEXT|SUBMES1,A5
         000137e0     0702  
    4132 000137f0     56c6          CLR     A6
    4133 00013800     56e7          CLR     A7
    4134 00013810     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7
         00013820     ff00  
    4135 00013830     0d5f          calla   BEGINOBJ
         00013840 00000000! 
    4136 00013860     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7
         00013870     00ff  
    4137 00013880     4d09          MOVE    A8,A9
    4138                    
    4139 00013890     09e1          MOVI    [END_POS+TURM_OFF,0],A1
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   96

         000138a0 00220000  
    4140 000138c0     09e0          MOVI    [400+END_BUFF+TURM_OFF,0],A0
         000138d0 019e0000  
    4141 000138f0     09e2          MOVI    MVEBAR_R,A2
         00013900 00000000! 
    4142 00013920     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00013930 0000a102  
    4143 00013950     4d6b          MOVE    A11,A11
    4144 00013960     cb0c          JRNZ    WHICH_BAR_SET
    4145 00013970     09e1          MOVI    [400-END_POS,0],A1
         00013980 01720000  
    4146 000139a0     09e0          MOVI    [0-END_BUFF,0],A0
         000139b0 fff60000  
    4147 000139d0     09e4          movi    DMAWNZ|M_FLIPH|M_3D|M_SCRNREL,a4        ;DMA flags
         000139e0 0000a112  
    4148 00013a00     09e2          MOVI    MVEBAR_B,A2
         00013a10 00000000! 
    4149 00013a30           WHICH_BAR_SET
    4150 00013a30     b22d          MOVE    A1,*A13(PDATA+120H),L
         00013a40     0220  
    4151 00013a50     09e1          MOVI    [END_YPOS,0],A1
         00013a60 00500000  
    4152 00013a80     09c3          MOVI    1800H,A3
         00013a90     1800  
    4153 00013aa0     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A9
         00013ab0     ff40  
    4154 00013ac0     0d5f          calla   BEGINOBJ
         00013ad0 00000000! 
    4155 00013af0     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A9
         00013b00     02ff  
    4156 00013b10     5600          CLR     A0
    4157 00013b20     b20d          MOVE    A0,*A13(PDATA+140H),L
         00013b30     0240  
    4158 00013b40                   JSRP    ZIP_HIM_ON
    4159 00013bb0                   DIE
    4160                    
    4161 00013be0           WHICH_WRESTLE_NAME
    4162 00013be0 00000000!         .LONG   BIGHRT
    4163 00013c00 00000000!         .LONG   BIGRAZ
    4164 00013c20 00000000!         .LONG   BIGUND
    4165 00013c40 00000000!         .LONG   BIGYOK
    4166 00013c60 00000000!         .LONG   BIGSHN
    4167 00013c80 00000000!         .LONG   BIGBAM
    4168 00013ca0 00000000!         .LONG   BIGDNK
    4169 00013cc0 00000000          .LONG   0
    4170 00013ce0 00000000!         .LONG   BIGLEX
    4171                    
    4172 00013d00           CREATE_END_ROUND_BOT
    4173 00013d00     b542          MOVE    *A10(WRESTLERNUM),A2
         00013d10     0590  
    4174 00013d20     24a2          SLL     5,A2
    4175 00013d30     0b22          ADDI    WHICH_WRESTLE_NAME,A2
         00013d40 00013be0' 
    4176 00013d60     8642          MOVE    *A2,A2,L
    4177                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   97

    4178 00013d70     09e1          MOVI    [END_POS+150+TURM_OFF,0],A1
         00013d80 00b80000  
    4179 00013da0     09e0          MOVI    [400+END_BUFF+150+TURM_OFF,0],A0
         00013db0 02340000  
    4180 00013dd0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00013de0 0000a102  
    4181 00013e00     4d6b          MOVE    A11,A11
    4182 00013e10     cb06          JRNZ    ON_LEFT
    4183 00013e20     09e1          MOVI    [400-END_POS-150,0],A1
         00013e30 00dc0000  
    4184 00013e50     09e0          MOVI    [0-END_BUFF-150,0],A0
         00013e60 ff600000  
    4185 00013e80           ON_LEFT
    4186 00013e80     b22d          MOVE    A1,*A13(PDATA+100H),L
         00013e90     0200  
    4187 00013ea0     09e1          MOVI    [END_YPOS+25,0],A1
         00013eb0 00690000  
    4188 00013ed0     09c3          MOVI    1802H,A3
         00013ee0     1802  
    4189 00013ef0     09c5          MOVI    CLSNEUT|TYPTEXT|SUBMES1,A5
         00013f00     0702  
    4190 00013f10     56c6          CLR     A6
    4191 00013f20     56e7          CLR     A7
    4192 00013f30     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7
         00013f40     ff00  
    4193 00013f50     09f0          movi    WGSF_W_P1,b0
         00013f60 00000000! 
    4194                    ;       calla   BEGINOBJ
    4195 00013f80     0d5f          calla   BEGINOBJP
         00013f90 00000000! 
    4196 00013fb0     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7
         00013fc0     00ff  
    4197 00013fd0     4d09          MOVE    A8,A9
    4198                    
    4199 00013fe0     09e1          MOVI    [END_POS+TURM_OFF,0],A1
         00013ff0 00220000  
    4200 00014010     09e2          MOVI    AWDNMPL_R,A2
         00014020 00000000! 
    4201 00014040     09e0          MOVI    [400+END_BUFF+TURM_OFF,0],A0
         00014050 019e0000  
    4202 00014070     4d6b          MOVE    A11,A11
    4203 00014080     cb0c          JRNZ    ON_LEFT2
    4204 00014090     09e1          MOVI    [400-END_POS,0],A1
         000140a0 01720000  
    4205 000140c0     09e0          MOVI    [0-END_BUFF,0],A0
         000140d0 fff60000  
    4206 000140f0     09e2          MOVI    AWDNMPL_B,A2
         00014100 00000000! 
    4207 00014120     09e4          movi    DMAWNZ|M_FLIPH|M_3D|M_SCRNREL,a4        ;DMA flags
         00014130 0000a112  
    4208 00014150           ON_LEFT2
    4209 00014150     b22d          MOVE    A1,*A13(PDATA+120H),L
         00014160     0220  
    4210 00014170     b22d          MOVE    A1,*A13(PDATA+140H),L
         00014180     0240  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   98

    4211 00014190     09e1          MOVI    [END_YPOS,0],A1
         000141a0 00500000  
    4212 000141c0     1423          DEC     A3
    4213 000141d0     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A9
         000141e0     ff40  
    4214 000141f0     0d5f          calla   BEGINOBJ
         00014200 00000000! 
    4215 00014220     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A9
         00014230     02ff  
    4216                    
    4217 00014240                   PUSH    A8
    4218 00014250     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00014260 0000a102  
    4219 00014280     09e2          MOVI    DIAGLGO_R,A2
         00014290 00000000! 
    4220 000142b0     4d6b          MOVE    A11,A11
    4221 000142c0     cb03          JRNZ    ON_LEFT3
    4222 000142d0     09e2          MOVI    DIAGLGO_B,A2
         000142e0 00000000! 
    4223 00014300           ON_LEFT3
    4224 00014300     1023          INC     A3
    4225 00014310     0d5f          calla   BEGINOBJ
         00014320 00000000! 
    4226 00014340     4d0a          MOVE    A8,A10
    4227 00014350                   PULL    A8
    4228 00014360                   JSRP    ZIP_HIM_ON
    4229 000143d0                   DIE
    4230                    
    4231 00014400           ZIP_HIM_ON
    4232 00014400     09c3          MOVI    ZIP_SPEED,A3
         00014410     0018  
    4233 00014420           MOVE_END_ON
    4234 00014420     b7a0          MOVE    *A13(PDATA+140H),A0,L
         00014430     0240  
    4235 00014440     ca05          JRZ     NOTHING_IN_A10
    4236 00014450                   PUSH    A8
    4237 00014460     4d48          MOVE    A10,A8
    4238 00014470     0d3f          CALLR   MOVE_THIS
         00014480     0017  
    4239 00014490                   PULL    A8
    4240 000144a0           NOTHING_IN_A10
    4241 000144a0     b7a0          MOVE    *A13(PDATA+100H),A0,L
         000144b0     0200  
    4242 000144c0     ca05          JRZ     NOTHING_IN_A9
    4243 000144d0                   PUSH    A8
    4244 000144e0     4d28          MOVE    A9,A8
    4245 000144f0     0d3f          CALLR   MOVE_THIS
         00014500     000f  
    4246 00014510                   PULL    A8
    4247 00014520           NOTHING_IN_A9
    4248 00014520     b7a0          MOVE    *A13(PDATA+120H),A0,L
         00014530     0220  
    4249 00014540     0d3f          CALLR   MOVE_THIS
         00014550     000a  
    4250 00014560                   PUSHP   A3
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE   99

    4251 00014570                   SLEEPK  1
    4252 000145b0                   PULLP   A3
    4253 000145c0     3f63          DSJS    A3,MOVE_END_ON
    4254 000145d0                   RETP
    4255                    
    4256 00014600           MOVE_THIS
    4257 00014600     b701          MOVE    *A8(OXVAL),A1,L
         00014610     0080  
    4258 00014620     4420          SUB     A1,A0
    4259 00014630     2ba0          SRA     3,A0
    4260 00014640     c000          JRUC    MOVE_THIS_PART
         00014650     fe69  
    4261                    
    4262                    
    4263              014c  END_IPOS1       .EQU    332
    4264              0124  END_IPOS2       .EQU    292
    4265              0036  END_IYPOS       .EQU    54
    4266                    
    4267 00014660           CREATE_END_ROUND_ICON
    4268                    
    4269                            .ref    wrestler_count_proc
    4270                            .ref    wrestler_count
    4271                    
    4272 00014660     07a0          move    @wrestler_count_proc,a0,L       ; Does the counter proc exist ?
         00014670 00000000! 
    4273 00014690     ca07          jrz     bvhdno_wc_proc                  ; br = no
    4274                    
    4275                    ;       move    @wrestler_count,a14             ; Current count == 0 ?
    4276                    ;       jrz     bvhdno_wc_proc                  ; br = yes
    4277                    ;       dec     a14                             ; Decrement it
    4278 000146a0     57ce          clr     a14
    4279 000146b0     058e          move    a14,@wrestler_count             ; Write it back
         000146c0 00000000! 
    4280                    
    4281 000146e0     182e          movk    1,a14                           ; Make counter proc wakeup on next tick
    4282 000146f0     b1c0          move    a14,*a0(PTIME)
         00014700     0030  
    4283 00014710           bvhdno_wc_proc
    4284                    
    4285                    
    4286                    
    4287 00014710     09f4          MOVI    [END_IPOS1+30,0],B4
         00014720 016a0000  
    4288 00014740     09f5          MOVI    [400-END_IPOS1-30,0],B5
         00014750 00260000  
    4289 00014770     09f6          MOVI    [END_IPOS1,0],B6
         00014780 014c0000  
    4290 000147a0     09f7          MOVI    [400-END_IPOS1,0],B7
         000147b0 00440000  
    4291                    
    4292 000147d0     05a1          MOVE    @p1rounds,a1
         000147e0 00000000! 
    4293 00014800     4d6b          MOVE    A11,A11
    4294 00014810     ca03          JRZ     GOT_RIGHT_SIDE
    4295 00014820     05a1          MOVE    @p2rounds,a1
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  100

         00014830 00000000! 
    4296 00014850           GOT_RIGHT_SIDE
    4297 00014850     1421          DEC     A1
    4298 00014860     ca0c          JRZ     DO_THE_RIGHT_ROUND
    4299                    
    4300 00014870     09f4          MOVI    [END_IPOS2+30,0],B4
         00014880 01420000  
    4301 000148a0     09f5          MOVI    [400-END_IPOS2-30,0],B5
         000148b0 004e0000  
    4302 000148d0     09f6          MOVI    [END_IPOS2,0],B6
         000148e0 01240000  
    4303 00014900     09f7          MOVI    [400-END_IPOS2,0],B7
         00014910 006c0000  
    4304 00014930           DO_THE_RIGHT_ROUND
    4305                    
    4306 00014930     5621          CLR     A1
    4307 00014940     b22d          MOVE    A1,*A13(PDATA+140),L
         00014950     018c  
    4308                    
    4309 00014960     09e2          MOVI    WWFICON10,A2
         00014970 00000000! 
    4310 00014990     4e91          MOVE    B4,A1
    4311 000149a0     09e0          MOVI    [400+END_BUFF+150,0],A0
         000149b0 02300000  
    4312 000149d0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         000149e0 0000a102  
    4313 00014a00     4d6b          MOVE    A11,A11
    4314 00014a10     cb04          JRNZ    WHICH_ICON_SET
    4315 00014a20     4eb1          MOVE    B5,A1
    4316 00014a30     09e0          MOVI    [0-END_BUFF-150,0],A0
         00014a40 ff600000  
    4317 00014a60           WHICH_ICON_SET
    4318 00014a60     b22d          MOVE    A1,*A13(PDATA+100H),L
         00014a70     0200  
    4319 00014a80     09e1          MOVI    [END_IYPOS,0],A1
         00014a90 00360000  
    4320 00014ab0     09c3          MOVI    1800h+200,A3
         00014ac0     18c8  
    4321 00014ad0     07a5          MOVE    @WORLDTLY,A5,L
         00014ae0 00000000! 
    4322 00014b00     07a6          MOVE    @ZFLIP_POS_VAR,A6,L
         00014b10 000008d0- 
    4323 00014b30     48c5          CMP     A6,A5
    4324 00014b40     c502          JRGE    IN_FORWARD_POS
    4325 00014b50     09c3          MOVI    200,A3
         00014b60     00c8  
    4326 00014b70           IN_FORWARD_POS
    4327 00014b70     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4                ;DMA flags
         00014b80 0000a102  
    4328 00014ba0     09c5          movi    TYPWWFICON,a5
         00014bb0     0140  
    4329 00014bc0     56c6          CLR     A6
    4330 00014bd0     56e7          CLR     A7
    4331 00014be0     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A9
         00014bf0     ff40  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  101

    4332 00014c00     0d5f          calla   BEGINOBJ
         00014c10 00000000! 
    4333 00014c30     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A9
         00014c40     02ff  
    4334 00014c50     4d09          MOVE    A8,A9
    4335                    
    4336 00014c60     4ed1          MOVE    B6,A1
    4337 00014c70     09e0          MOVI    [400+END_BUFF,0],A0
         00014c80 019a0000  
    4338 00014ca0     09e2          MOVI    MVEBAR_R,A2
         00014cb0 00000000! 
    4339 00014cd0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00014ce0 0000a102  
    4340 00014d00     4d6b          MOVE    A11,A11
    4341 00014d10     cb0a          JRNZ    WHICH_BAR2_SET
    4342 00014d20     4ef1          MOVE    B7,A1
    4343 00014d30     09e0          MOVI    [0-END_BUFF,0],A0
         00014d40 fff60000  
    4344 00014d60     09e4          movi    DMAWNZ|M_FLIPH|M_3D|M_SCRNREL,a4        ;DMA flags
         00014d70 0000a112  
    4345 00014d90     09e2          MOVI    MVEBAR_B,A2
         00014da0 00000000! 
    4346 00014dc0           WHICH_BAR2_SET
    4347 00014dc0     b22d          MOVE    A1,*A13(PDATA+120H),L
         00014dd0     0220  
    4348 00014de0     b20d          MOVE    A0,*A13(PDATA+160H),L
         00014df0     0260  
    4349 00014e00     09e1          MOVI    [END_IYPOS,0],A1
         00014e10 00360000  
    4350 00014e30     09c3          MOVI    1800h+199,A3
         00014e40     18c7  
    4351 00014e50     07a5          MOVE    @WORLDTLY,A5,L
         00014e60 00000000! 
    4352 00014e80     07a6          MOVE    @ZFLIP_POS_VAR,A6,L
         00014e90 000008d0- 
    4353 00014eb0     48c5          CMP     A6,A5
    4354 00014ec0     c502          JRGE    IN_FORWARD_POS2
    4355 00014ed0     09c3          MOVI    199,A3
         00014ee0     00c7  
    4356 00014ef0           IN_FORWARD_POS2
    4357 00014ef0     09c5          MOVI    CLSNEUT|TYPTEXT|SUBMES1,A5
         00014f00     0702  
    4358 00014f10     56c6          CLR     A6
    4359 00014f20     56e7          CLR     A7
    4360 00014f30     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7
         00014f40     ff00  
    4361 00014f50     0d5f          calla   BEGINOBJ
         00014f60 00000000! 
    4362 00014f80     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7
         00014f90     00ff  
    4363                    
    4364 00014fa0                   JSRP    ZIP_HIM_ON
    4365 00015010                   SLEEP   20
    4366 00015060     09c1          MOVI    ICON_PID,A1
         00015070     0141  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  102

    4367 00015080     4161          ADD     A11,A1
    4368 00015090     0d5f          CALLA   FIND_ANY_OTHERS
         000150a0 00015450' 
    4369 000150c0     09c0          MOVI    4DH,A0
         000150d0     004d  
    4370 000150e0     0d5f          CALLA   triple_sound
         000150f0 00000000! 
    4371 00015110     09e7          MOVI    MAKE_ICON_GLOW,A7
         00015120 00015310' 
    4372 00015140     0d5f          CALLA   GETPRC
         00015150 00000000! 
    4373 00015170     4d2b          MOVE    A9,A11
    4374 00015180     5729          CLR     A9
    4375 00015190     b32d          MOVE    A9,*A13(PDATA+100),L
         000151a0     0164  
    4376 000151b0     bbad          MOVE    *A13(PDATA+160H),*A13(PDATA+120H),L
         000151c0     0260  
         000151d0     0220  
    4377 000151e0                   JSRP    ZIP_HIM_ON
    4378                    
    4379 00015250     4d68          MOVE    A11,A8
    4380                    
    4381 00015260                   CREATE  FLASH_PID,MAYBE_A_SPARKLE
    4382 000152e0                   DIE
    4383                    
    4384 00015310           MAKE_ICON_GLOW
    4385 00015310     4d28          MOVE    A9,A8
    4386 00015320     09e1          MOVI    WWF_ICON_ANIM,A1
         00015330 00015520' 
    4387 00015350     0d5f          CALLA   setup_back_anim
         00015360 00000000! 
    4388 00015380                   JSRP    ANIM_CROWD
    4389 000153f0                   SLEEP   TSEC*10
    4390 00015440     c0ec          JRUC    MAKE_ICON_GLOW
    4391                    
    4392 00015450           FIND_ANY_OTHERS
    4393 00015450                   PUSH    A1
    4394 00015460     4c20          MOVE    A1,A0
    4395 00015470     09c1          MOVI    -1,A1
         00015480     ffff  
    4396 00015490     0d5f          CALLA   EXISTP
         000154a0 00000000! 
    4397 000154c0     ca03          JRZ     NO_MORE
    4398 000154d0     1821          MOVK    1,A1
    4399 000154e0     b020          MOVE    A1,*A0(PTIME)
         000154f0     0030  
    4400 00015500           NO_MORE
    4401 00015500                   PULL    A1
    4402 00015510     0960          RETS
    4403                    
    4404              8002  CANI_END                equ     2 + 8000H
    4405                    
    4406 00015520           WWF_ICON_ANIM
    4407 00015520                   WL      2,WWFICON01
    4408 00015550                   WL      2,WWFICON02
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  103

    4409 00015580                   WL      2,WWFICON03
    4410 000155b0                   WL      2,WWFICON04
    4411 000155e0                   WL      2,WWFICON05
    4412 00015610                   WL      2,WWFICON06
    4413 00015640                   WL      2,WWFICON07
    4414 00015670                   WL      2,WWFICON08
    4415 000156a0                   WL      2,WWFICON09
    4416 000156d0                   WL      2,WWFICON10
    4417 00015700     8002          .WORD   CANI_END
    4418                    
    4419 00015710           MAYBE_A_SPARKLE
    4420 00015710     09c0          MOVI    120,A0
         00015720     0078  
    4421 00015730     0d5f          CALLA   RNDRNG0
         00015740 00000000! 
    4422 00015760     0b00          ADDI    50,A0
         00015770     0032  
    4423 00015780     0d5f          CALLA   PRCSLP
         00015790 00000000! 
    4424 000157b0                   CREATE  FLASH_PID,ICON_SPARKLE
    4425 00015830     c0ed          JRUC    MAYBE_A_SPARKLE
    4426                    
    4427 00015840            SUBRP  ICON_SPARKLE
    4428                    
    4429 00015840     05ae          move    @reduce_bog,a14
         00015850 00000000! 
    4430 00015870     cb3a          jrnz    bvhddie
    4431                    
    4432 00015880     18c0          MOVK    6,A0
    4433 00015890     0d5f          CALLA   RNDRNG0
         000158a0 00000000! 
    4434 000158c0     24a0          SLL     5,A0
    4435 000158d0     0b20          ADDI    WHERE_SPARKLE,A0
         000158e0 00015cf0' 
    4436 00015900     4c02          MOVE    A0,A2
    4437                    
    4438 00015910     b500          MOVE    *A8(OXPOS),A0
         00015920     0090  
    4439 00015930     844e          MOVE    *A2,A14
    4440 00015940     41c0          ADD     A14,A0
    4441                            
    4442 00015950     b501          MOVE    *A8(OYPOS),A1
         00015960     00b0  
    4443 00015970     b44e          MOVE    *A2(10H),A14
         00015980     0010  
    4444 00015990     41c1          ADD     A14,A1
    4445                    
    4446 000159a0     2600          SLL     16,A0
    4447 000159b0     2601          SLL     16,A1
    4448 000159c0     09e2          MOVI    SPRKLA01,A2
         000159d0 00000000! 
    4449 000159f0     b703          MOVE    *A8(OZVAL),A3,L
         00015a00     00c0  
    4450 00015a10     1023          INC     A3
    4451 00015a20     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  104

         00015a30 0000a102  
    4452 00015a50     09c5          movi    TYPWWFICON,a5
         00015a60     0140  
    4453 00015a70     56c6          CLR     A6
    4454 00015a80     56e7          CLR     A7
    4455 00015a90     0d5f          CALLA   BEGINOBJ
         00015aa0 00000000! 
    4456                    
    4457 00015ac0     1840          MOVK    2,A0
    4458 00015ad0     0d5f          CALLA   RNDRNG0
         00015ae0 00000000! 
    4459 00015b00     24a0          SLL     5,A0
    4460 00015b10     0b20          ADDI    WHICH_SPARKLE,A0
         00015b20 00015c50' 
    4461 00015b40     8601          MOVE    *A0,A1,L
    4462 00015b50     0d5f          calla   setup_back_anim
         00015b60 00000000! 
    4463 00015b80                   JSRP    ANIM_CROWD
    4464 00015bf0     0d5f          CALLA   DELOBJA8
         00015c00 00000000! 
    4465 00015c20           bvhddie DIE
    4466                    
    4467                    
    4468 00015c50           WHICH_SPARKLE
    4469 00015c50 00015dd0'         .LONG   SPARKLE_1
    4470 00015c70 00016050'         .LONG   SPARKLE_2
    4471 00015c90 000162d0'         .LONG   SPARKLE_3
    4472 00015cb0 00016550'         .LONG   BSPARKLE1
    4473 00015cd0 00016830'         .LONG   BSPARKLE2
    4474                    
    4475                    
    4476 00015cf0           WHERE_SPARKLE
    4477 00015cf0 fff8fff2          .LONG   [-8,-14]
    4478 00015d10 0008fff7          .LONG   [8,-9]
    4479 00015d30 ffff0008          .LONG   [-1,8]
    4480 00015d50 0000000f          .LONG   [0,15]
    4481 00015d70 fff70013          .LONG   [-9,19]
    4482 00015d90 fff60002          .LONG   [-10,2]
    4483 00015db0 fffffffa          .LONG   [-1,-6]
    4484                    
    4485 00015dd0           SPARKLE_1
    4486 00015dd0                   WL      2,SPRKLA01
    4487 00015e00                   WL      2,SPRKLA02
    4488 00015e30                   WL      2,SPRKLA03
    4489 00015e60                   WL      2,SPRKLA04
    4490 00015e90                   WL      2,SPRKLA05
    4491 00015ec0                   WL      2,SPRKLA06
    4492 00015ef0                   WL      2,SPRKLA07
    4493 00015f20                   WL      2,SPRKLA08
    4494 00015f50                   WL      2,SPRKLA09
    4495 00015f80                   WL      2,SPRKLA10
    4496 00015fb0                   WL      2,SPRKLA11
    4497 00015fe0                   WL      2,SPRKLA12
    4498 00016010                   WL      2,SPRKLA13
    4499 00016040     8002          .WORD   CANI_END
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  105

    4500                    
    4501 00016050           SPARKLE_2
    4502 00016050                   WL      2,SPRKLB01
    4503 00016080                   WL      2,SPRKLB02
    4504 000160b0                   WL      2,SPRKLB03
    4505 000160e0                   WL      2,SPRKLB04
    4506 00016110                   WL      2,SPRKLB05
    4507 00016140                   WL      2,SPRKLB06
    4508 00016170                   WL      2,SPRKLB07
    4509 000161a0                   WL      2,SPRKLB08
    4510 000161d0                   WL      2,SPRKLB09
    4511 00016200                   WL      2,SPRKLB10
    4512 00016230                   WL      2,SPRKLB11
    4513 00016260                   WL      2,SPRKLB12
    4514 00016290                   WL      2,SPRKLB13
    4515 000162c0     8002          .WORD   CANI_END
    4516                    
    4517 000162d0           SPARKLE_3
    4518 000162d0                   WL      2,SPRKLC01
    4519 00016300                   WL      2,SPRKLC02
    4520 00016330                   WL      2,SPRKLC03
    4521 00016360                   WL      2,SPRKLC04
    4522 00016390                   WL      2,SPRKLC05
    4523 000163c0                   WL      2,SPRKLC06
    4524 000163f0                   WL      2,SPRKLC07
    4525 00016420                   WL      2,SPRKLC08
    4526 00016450                   WL      2,SPRKLC09
    4527 00016480                   WL      2,SPRKLC10
    4528 000164b0                   WL      2,SPRKLC11
    4529 000164e0                   WL      2,SPRKLC12
    4530 00016510                   WL      2,SPRKLC13
    4531 00016540     8002          .WORD   CANI_END
    4532                    
    4533 00016550           BSPARKLE1
    4534 00016550                   WL      2,BSPRKA01
    4535 00016580                   WL      2,BSPRKA02
    4536 000165b0                   WL      2,BSPRKA03
    4537 000165e0                   WL      2,BSPRKA04
    4538 00016610                   WL      2,BSPRKA05
    4539 00016640                   WL      2,BSPRKA06
    4540 00016670                   WL      2,BSPRKA07
    4541 000166a0                   WL      2,BSPRKA08
    4542 000166d0                   WL      2,BSPRKA09
    4543 00016700                   WL      2,BSPRKA10
    4544 00016730                   WL      2,BSPRKA11
    4545 00016760                   WL      2,BSPRKA12
    4546 00016790                   WL      2,BSPRKA13
    4547 000167c0                   WL      2,BSPRKA14
    4548 000167f0                   WL      2,BSPRKA15
    4549 00016820     8002          .WORD   CANI_END
    4550                    
    4551 00016830           BSPARKLE2
    4552 00016830                   WL      2,BSPRKB01
    4553 00016860                   WL      2,BSPRKB02
    4554 00016890                   WL      2,BSPRKB03
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  106

    4555 000168c0                   WL      2,BSPRKB04
    4556 000168f0                   WL      2,BSPRKB05
    4557 00016920                   WL      2,BSPRKB06
    4558 00016950                   WL      2,BSPRKB07
    4559 00016980                   WL      2,BSPRKB08
    4560 000169b0                   WL      2,BSPRKB09
    4561 000169e0                   WL      2,BSPRKB10
    4562 00016a10                   WL      2,BSPRKB11
    4563 00016a40                   WL      2,BSPRKB12
    4564 00016a70                   WL      2,BSPRKB13
    4565 00016aa0                   WL      2,BSPRKB14
    4566 00016ad0                   WL      2,BSPRKB15
    4567 00016b00     8002          .WORD   CANI_END
    4568                    
    4569          00040000  YSPEED  .EQU    [4,0]
    4570                    
    4571 00016b10           CREATE_PERFECT
    4572                    
    4573 00016b10     09c0          movi    CYCPID,a0
         00016b20     0110  
    4574 00016b30     5621          CLR     A1
    4575 00016b40     03e1          NOT     A1
    4576 00016b50     0d5f          CALLA   EXISTP
         00016b60 00000000! 
    4577 00016b80     cb00          JRNZ    NO_NEED_FOR_PERFECT
         00016b90     0085  
    4578                    
    4579 00016ba0     09c0          MOVI    0c4h,A0
         00016bb0     00c4  
    4580 00016bc0     0d5f          CALLA   triple_sound
         00016bd0 00000000! 
    4581                    
    4582 00016bf0     09e0          MOVI    [200,0],A0
         00016c00 00c80000  
    4583 00016c20     09e1          MOVI    [300,0],A1
         00016c30 012c0000  
    4584 00016c50     09e2          MOVI    PERFCT09,A2
         00016c60 00000000! 
    4585 00016c80     09c3          MOVI    1799H,A3
         00016c90     1799  
    4586 00016ca0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00016cb0 0000a102  
    4587 00016cd0     09c5          movi    TYPPERFECT,a5
         00016ce0     0170  
    4588 00016cf0     56c6          CLR     A6
    4589 00016d00     56e7          CLR     A7
    4590 00016d10     0d5f          CALLA   BEGINOBJ
         00016d20 00000000! 
    4591 00016d40     09e0          MOVI    YSPEED,A0
         00016d50 00040000  
    4592 00016d70     03a0          NEG     A0
    4593 00016d80     b208          MOVE    A0,*A8(OYVEL),L
         00016d90     0040  
    4594                    
    4595 00016da0                   PUSHP   A10
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  107

    4596 00016db0     09e9          MOVI    PERFECT_DISSOLVE_ANIM,A9
         00016dc0 00017f60' 
    4597 00016de0     09cb          MOVI    12,A11
         00016df0     000c  
    4598 00016e00     09ea          MOVI    PERFCT09,A10
         00016e10 00000000! 
    4599 00016e30                   CREATE  FX_PID,COPY_OBJ_AND_MOVE_UP
    4600                    
    4601 00016eb0                   PULLP   A10
    4602                    
    4603                    
    4604 00016ec0           bvhdwait_loop
    4605 00016ec0                   SLEEPK  1
    4606 00016f00     b500          move    *a8(OYPOS),a0
         00016f10     00b0  
    4607 00016f20     0b40          cmpi    100,a0
         00016f30     ff9b  
    4608 00016f40     c5f7          jrge    bvhdwait_loop
    4609 00016f50     5600          clr     a0
    4610 00016f60     b208          move    a0,*a8(OYVEL),L
         00016f70     0040  
    4611 00016f80     09c0          movi    FX_PID,a0
         00016f90     0120  
    4612 00016fa0     5621          clr     a1
    4613 00016fb0     03e1          not     a1
    4614 00016fc0     0d5f          calla   KILALL
         00016fd0 00000000! 
    4615                    
    4616 00016ff0     b54a          MOVE    *A10(PLYRNUM),A10
         00017000     0580  
    4617 00017010     102a          INC     A10
    4618 00017020     05a0          move    @PERFECT_WINS,A0
         00017030 00000900- 
    4619 00017050     5140          and     a10,A0
    4620 00017060     ca08          JRZ     NOT_A_DOUBLE
    4621 00017070                   CREATE  ADD_INIT_PID,CREATE_DOUBLE
    4622                    
    4623 000170f0           NOT_A_DOUBLE
    4624                    
    4625 000170f0     05a0          move    @PERFECT_WINS,A0
         00017100 00000900- 
    4626 00017120     5540          or      a10,A0
    4627 00017130     0580          MOVE    A0,@PERFECT_WINS
         00017140 00000900- 
    4628                    
    4629 00017160     09e1          MOVI    PERFECT_FLASH_ANIM,A1
         00017170 00017da0' 
    4630 00017190     0d5f          calla   setup_back_anim
         000171a0 00000000! 
    4631 000171c0                   JSRP    ANIM_CROWD
    4632                    
    4633 00017230     09c0          MOVI    0A8H,A0
         00017240     00a8  
    4634 00017250     0d5f          calla   triple_sound
         00017260 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  108

    4635                    
    4636 00017280     09ea          MOVI    WHERE_PERFECT_SPARKLE,A10
         00017290 00018890' 
    4637 000172b0                   PUSH    A8
    4638 000172c0     b509          MOVE    *A8(OXPOS),A9
         000172d0     0090  
    4639 000172e0     b708          MOVE    *A8(OYVAL),A8,L
         000172f0     00a0  
    4640 00017300     ed28          MOVX    A9,A8
    4641 00017310     1849          MOVK    2,A9
    4642 00017320                   CREATE  FLASH_PID,SPRINKLE_GLINTS
    4643 000173a0                   PULL    A8
    4644 000173b0     09c9          MOVI    110,A9
         000173c0     006e  
    4645 000173d0     c000          JRUC    LOOK_FOR_IT
         000173e0     02b5  
    4646 000173f0           NO_NEED_FOR_PERFECT
    4647 000173f0                   DIE
    4648                    
    4649 00017420           CREATE_DOUBLE
    4650 00017420     09e0          MOVI    [200,0],A0
         00017430 00c80000  
    4651 00017450     09e1          MOVI    [80,0],A1
         00017460 00500000  
    4652 00017480     09e2          MOVI    DOUBLE09,A2
         00017490 00000000! 
    4653 000174b0     09c3          MOVI    1799H,A3
         000174c0     1799  
    4654 000174d0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         000174e0 0000a102  
    4655 00017500     09c5          movi    TYPPERFECT,a5
         00017510     0170  
    4656 00017520     56c6          CLR     A6
    4657 00017530     56e7          CLR     A7
    4658 00017540     0d5f          CALLA   BEGINOBJ
         00017550 00000000! 
    4659                    
    4660 00017570     09e1          MOVI    DOUBLE_FLASH_ANIM,A1
         00017580 00017be0' 
    4661 000175a0     0d5f          calla   setup_back_anim
         000175b0 00000000! 
    4662 000175d0                   JSRP    ANIM_CROWD
    4663 00017640     09c9          MOVI    110,A9
         00017650     006e  
    4664 00017660     c000          JRUC    LOOK_FOR_IT
         00017670     028c  
    4665 00017680                   DIE
    4666                    
    4667 000176b0           COPY_OBJ_AND_MOVE_UP
    4668 000176b0                   PUSHP   A10
    4669 000176c0     4d0a          MOVE    A8,A10
    4670 000176d0           COPY_OBJ_AND_MOVE_UP2
    4671 000176d0     b741          MOVE    *A10(OYVAL),A1,L
         000176e0     00a0  
    4672 000176f0     09e0          MOVI    [200,0],A0
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  109

         00017700 00c80000  
    4673 00017720                   PULLP   A2
    4674 00017730                   PUSHP   A2
    4675 00017740     09c3          MOVI    1799H,A3
         00017750     1799  
    4676 00017760     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00017770 0000a102  
    4677 00017790     09c5          movi    TYPPERFECT,a5
         000177a0     0170  
    4678 000177b0     56c6          CLR     A6
    4679 000177c0     56e7          CLR     A7
    4680 000177d0     0d5f          CALLA   BEGINOBJ
         000177e0 00000000! 
    4681 00017800                   CREATE  OVRHED_PID,KILL_THEM_EVENTUALLY_EACH
    4682 00017880                   SLEEP   3
    4683 000178d0     c0df          JRUC    COPY_OBJ_AND_MOVE_UP2
    4684                    
    4685 000178e0           KILL_THEM_EVENTUALLY_EACH
    4686 000178e0     18cb          MOVK    6,A11
    4687 000178f0     4d29          MOVE    A9,A9
    4688 00017900     ca1c          JRZ     NORMAL_KILL
    4689 00017910           MOVE_IT_BACK
    4690 00017910     b501          MOVE    *A8(OZPOS),A1
         00017920     00d0  
    4691 00017930     1421          DEC     A1
    4692 00017940     b028          MOVE    A1,*A8(OZPOS)
         00017950     00d0  
    4693 00017960                   SLEEP   1
    4694 000179b0     3d6b          DSJS    A11,MOVE_IT_BACK
    4695 000179c0     4d21          MOVE    A9,A1
    4696 000179d0     0d5f          calla   setup_back_anim
         000179e0 00000000! 
    4697 00017a00                   JSRP    ANIM_CROWD
    4698 00017a70     0d5f          CALLA   DELOBJA8
         00017a80 00000000! 
    4699 00017aa0                   DIE
    4700                    
    4701 00017ad0           NORMAL_KILL
    4702 00017ad0     b501          MOVE    *A8(OZPOS),A1
         00017ae0     00d0  
    4703 00017af0     1421          DEC     A1
    4704 00017b00     b028          MOVE    A1,*A8(OZPOS)
         00017b10     00d0  
    4705 00017b20                   SLEEP   1
    4706 00017b70     3d6b          DSJS    A11,NORMAL_KILL
    4707 00017b80     0d5f          CALLA   DELOBJA8
         00017b90 00000000! 
    4708 00017bb0                   DIE
    4709                    
    4710 00017be0           DOUBLE_FLASH_ANIM
    4711 00017be0                   WL      2,DOUBLE01
    4712 00017c10                   WL      2,DOUBLE02
    4713 00017c40                   WL      2,DOUBLE03
    4714 00017c70                   WL      2,DOUBLE04
    4715 00017ca0                   WL      2,DOUBLE05
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  110

    4716 00017cd0                   WL      2,DOUBLE06
    4717 00017d00                   WL      2,DOUBLE07
    4718 00017d30                   WL      2,DOUBLE08
    4719 00017d60                   WL      2,DOUBLE09
    4720 00017d90     8002          .WORD   CANI_END
    4721                    
    4722 00017da0           PERFECT_FLASH_ANIM
    4723 00017da0                   WL      2,PERFCT01
    4724 00017dd0                   WL      2,PERFCT02
    4725 00017e00                   WL      2,PERFCT03
    4726 00017e30                   WL      2,PERFCT04
    4727 00017e60                   WL      2,PERFCT05
    4728 00017e90                   WL      2,PERFCT06
    4729 00017ec0                   WL      2,PERFCT07
    4730 00017ef0                   WL      2,PERFCT08
    4731 00017f20                   WL      2,PERFCT09
    4732 00017f50     8002          .WORD   CANI_END
    4733                    
    4734 00017f60           PERFECT_DISSOLVE_ANIM
    4735 00017f60                   WL      2,PERFDS01
    4736 00017f90                   WL      2,PERFDS02
    4737 00017fc0                   WL      2,PERFDS03
    4738 00017ff0                   WL      2,PERFDS04
    4739 00018020                   WL      2,PERFDS05
    4740 00018050                   WL      2,PERFDS06
    4741 00018080                   WL      2,PERFDS07
    4742 000180b0                   WL      2,PERFDS08
    4743 000180e0     8002          .WORD   CANI_END
    4744                    
    4745 000180f0            SUBR    RANDOM_SPARKLE
    4746                    
    4747 000180f0                   SLEEP   20
    4748 00018140     09c0          MOVI    FLASH_PID,A0
         00018150     0139  
    4749 00018160     09c1          MOVI    -1,A1
         00018170     ffff  
    4750 00018180     0d5f          CALLA   EXISTP
         00018190 00000000! 
    4751 000181b0     cbf3          JRNZ    RANDOM_SPARKLE
    4752                    
    4753 000181c0     09c0          MOVI    39,A0
         000181d0     0027  
    4754 000181e0     0d5f          CALLA   RNDRNG0
         000181f0 00000000! 
    4755 00018210     4c09          MOVE    A0,A9
    4756 00018220     09e8          MOVI    [102,7],A8
         00018230 00660007  
    4757 00018250     09ea          MOVI    WHERE_WRESTLMANIA_SPARKLES,A10
         00018260 00018ad0' 
    4758 00018280     4d2b          MOVE    A9,A11
    4759 00018290     24ab          SLL     5,A11
    4760 000182a0     414b          ADD     A10,A11
    4761 000182b0     1889          MOVK    4,A9
    4762 000182c0                   CREATE  FLASH_PID,START_SPARKLE
    4763 00018340                   SLOOP   30,RANDOM_SPARKLE
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  111

    4764                    
    4765 000183b0            SUBR   SPRINKLE_GLINTS
    4766 000183b0     56c6          CLR     A6
    4767 000183c0                   PUSHP   A6
    4768 000183d0           NEXT_SPARKLE
    4769 000183d0                   PULLP   A6
    4770 000183e0     4ccb          MOVE    A6,A11
    4771 000183f0     24ab          SLL     5,A11
    4772 00018400     414b          ADD     A10,A11
    4773 00018410     8761          MOVE    *A11,A1,L
    4774 00018420     1021          INC     A1
    4775 00018430     ca11          JRZ     NO_MORE_SPARKLE
    4776 00018440                   CREATE  FLASH_PID,START_SPARKLE
    4777 000184c0     1026          INC     A6
    4778 000184d0                   PUSHP   A6
    4779 000184e0                   SLOOP   5,NEXT_SPARKLE
    4780 00018550           NO_MORE_SPARKLE
    4781 00018550                   DIE
    4782                    
    4783 00018580           START_SPARKLE
    4784 00018580     4d00          MOVE    A8,A0
    4785 00018590     856e          MOVE    *A11,A14
    4786 000185a0     41c0          ADD     A14,A0
    4787 000185b0     4d01          MOVE    A8,A1
    4788 000185c0     2e01          SRL     16,A1
    4789 000185d0     b56e          MOVE    *A11(10H),A14
         000185e0     0010  
    4790 000185f0     41c1          ADD     A14,A1
    4791                    
    4792 00018600     2600          SLL     16,A0
    4793 00018610     2601          SLL     16,A1
    4794 00018620     09e2          MOVI    SPRKLA01,A2
         00018630 00000000! 
    4795 00018650     09c3          MOVI    1800H,A3
         00018660     1800  
    4796 00018670     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00018680 0000a102  
    4797 000186a0     56a5          CLR     A5
    4798 000186b0     56c6          CLR     A6
    4799 000186c0     56e7          CLR     A7
    4800 000186d0     0d5f          CALLA   BEGINOBJ
         000186e0 00000000! 
    4801 00018700     4d20          MOVE    A9,A0
    4802 00018710     0d5f          CALLA   RNDRNG0
         00018720 00000000! 
    4803 00018740     24a0          SLL     5,A0
    4804 00018750     0b20          ADDI    WHICH_SPARKLE,A0
         00018760 00015c50' 
    4805 00018780     8601          MOVE    *A0,A1,L
    4806 00018790     0d5f          calla   setup_back_anim
         000187a0 00000000! 
    4807 000187c0                   JSRP    ANIM_CROWD
    4808 00018830     0d5f          CALLA   DELOBJA8
         00018840 00000000! 
    4809 00018860                   DIE
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  112

    4810                    
    4811 00018890           WHERE_PERFECT_SPARKLE
    4812 00018890 fffaffb9          .LONG   [-6,-71]
    4813 000188b0 0000ffc0          .LONG   [0,-64]
    4814 000188d0 fff9ffcf          .LONG   [-7,-49]
    4815 000188f0 0005ffd6          .LONG   [5,-42]
    4816 00018910 fffeffdd          .LONG   [-2,-35]
    4817 00018930 0005ffe1          .LONG   [5,-31]
    4818 00018950 fff9ffee          .LONG   [-7,-18]
    4819 00018970 0005fff6          .LONG   [5,-10]
    4820 00018990 fffeffff          .LONG   [-2,-1]
    4821 000189b0 fff90009          .LONG   [-7,9]
    4822 000189d0 00050011          .LONG   [5,17]
    4823 000189f0 fff9001f          .LONG   [-7,31]
    4824 00018a10 00020027          .LONG   [2,39]
    4825 00018a30 fff90031          .LONG   [-7,49]
    4826 00018a50 0006003b          .LONG   [6,59]
    4827 00018a70 fffe0045          .LONG   [-2,69]
    4828 00018a90 fff9004a          .LONG   [-7,74]
    4829 00018ab0 ffffffff          .LONG   -1
    4830                    
    4831 00018ad0            SUBR    WHERE_WRESTLMANIA_SPARKLES
    4832 00018ad0 00050008          .LONG   [5,8]
    4833 00018af0 001d0016          .LONG   [29,22]
    4834 00018b10 0004002b          .LONG   [4,43]
    4835 00018b30 003c0032          .LONG   [60,50]
    4836 00018b50 00040041          .LONG   [4,65]
    4837 00018b70 001c004c          .LONG   [28,76]
    4838 00018b90 00380050          .LONG   [56,80]
    4839 00018bb0 000f0057          .LONG   [15,87]
    4840 00018bd0 0021005e          .LONG   [33,94]
    4841 00018bf0 00320069          .LONG   [50,105]
    4842 00018c10 0020006e          .LONG   [32,110]
    4843 00018c30 00040072          .LONG   [4,114]
    4844 00018c50 00400079          .LONG   [64,121]
    4845 00018c70 0038007d          .LONG   [56,125]
    4846 00018c90 001c0081          .LONG   [28,129]
    4847 00018cb0 000f009e          .LONG   [15,158]
    4848 00018cd0 0038009f          .LONG   [56,159]
    4849 00018cf0 000400b1          .LONG   [4,177]
    4850 00018d10 002100ba          .LONG   [33,186]
    4851 00018d30 001e00c8          .LONG   [30,200]
    4852 00018d50 000f00cb          .LONG   [15,203]
    4853 00018d70 002300dc          .LONG   [35,220]
    4854 00018d90 000400e1          .LONG   [4,225]
    4855 00018db0 002800ec          .LONG   [40,236]
    4856 00018dd0 00040101          .LONG   [4,257]
    4857 00018df0 000d0104          .LONG   [13,260]
    4858 00018e10 0004010f          .LONG   [4,271]
    4859 00018e30 003d0111          .LONG   [61,273]
    4860 00018e50 00380115          .LONG   [56,277]
    4861 00018e70 000f011e          .LONG   [15,286]
    4862 00018e90 00210123          .LONG   [33,291]
    4863 00018eb0 000f0135          .LONG   [15,309]
    4864 00018ed0 00250140          .LONG   [37,320]
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  113

    4865 00018ef0 0038014e          .LONG   [56,334]
    4866 00018f10 00210152          .LONG   [33,338]
    4867 00018f30 00040159          .LONG   [4,345]
    4868 00018f50 00200167          .LONG   [32,359]
    4869 00018f70 00040172          .LONG   [4,370]
    4870 00018f90 00380175          .LONG   [56,373]
    4871 00018fb0 0011017f          .LONG   [17,383]
    4872 00018fd0 ffffffff          .LONG   -1
    4873                    
    4874                    ******************************************************************************
    4875                    
    4876 00018ff0            SUBR   CREATE_TIMEOUT
    4877                    
    4878 00018ff0     09c0          MOVI    0c4h,A0
         00019000     00c4  
    4879 00019010     0d5f          CALLA   triple_sound
         00019020 00000000! 
    4880                    
    4881 00019040     09e0          MOVI    [200,0],A0
         00019050 00c80000  
    4882 00019070     09e1          MOVI    [300,0],A1
         00019080 012c0000  
    4883 000190a0     09e2          MOVI    TIMEEX09,A2
         000190b0 00000000! 
    4884 000190d0     09c3          MOVI    1799H,A3
         000190e0     1799  
    4885 000190f0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00019100 0000a102  
    4886 00019120     56a5          CLR     A5
    4887 00019130     56c6          CLR     A6
    4888 00019140     56e7          CLR     A7
    4889 00019150     0d5f          CALLA   BEGINOBJ
         00019160 00000000! 
    4890                    
    4891 00019180     09e0          MOVI    YSPEED,A0
         00019190 00040000  
    4892 000191b0     03a0          NEG     A0
    4893 000191c0     b208          MOVE    A0,*A8(OYVEL),L
         000191d0     0040  
    4894                    
    4895 000191e0     09e9          MOVI    TIMEOUT_DISSOLVE_ANIM,A9
         000191f0 00019830' 
    4896 00019210     09cb          MOVI    12,A11
         00019220     000c  
    4897 00019230     09ea          MOVI    TIMEEX09,A10
         00019240 00000000! 
    4898 00019260                   CREATE  FX_PID,COPY_OBJ_AND_MOVE_UP
    4899 000192e0                   CREATE  FX_PID,HAVE_TO_MOVE_IT_TO
    4900                    
    4901 00019360                   SLEEP   50
    4902 000193b0     5600          CLR     A0
    4903 000193c0     b208          MOVE    A0,*A8(OYVEL),L
         000193d0     0040  
    4904 000193e0     09c0          MOVI    FX_PID,A0
         000193f0     0120  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  114

    4905 00019400     5621          CLR     A1
    4906 00019410     03e1          NOT     A1
    4907 00019420     0d5f          CALLA   KILALL
         00019430 00000000! 
    4908                    
    4909 00019450                   SLEEP   10
    4910                    
    4911 000194a0     1884          MOVK    4,A4
    4912 000194b0           LOOP_TIMEOUT
    4913 000194b0                   PUSHP   A4
    4914 000194c0     09e1          MOVI    TIMEOUT_FLASH_ANIM,A1
         000194d0 00019670' 
    4915 000194f0     0d5f          calla   setup_back_anim
         00019500 00000000! 
    4916 00019520                   JSRP    ANIM_CROWD
    4917                    
    4918 00019590     07a0          MOVE    @match_time,A0,L
         000195a0 00000000! 
    4919 000195c0     0b60          CMPI    90009H,A0
         000195d0 fff6fff6  
    4920 000195f0     ca00          JREQ    JUMP_OUT
         00019600     00a0  
    4921 00019610                   PULLP   A4
    4922 00019620     3f04          DSJS    A4,LOOP_TIMEOUT
    4923                    
    4924 00019630     09c9          MOVI    110-(3*18),A9
         00019640     0038  
    4925 00019650     c000          JRUC    LOOK_FOR_IT
         00019660     008d  
    4926                    
    4927 00019670           TIMEOUT_FLASH_ANIM
    4928 00019670                   WL      2,TIMEEX01
    4929 000196a0                   WL      2,TIMEEX02
    4930 000196d0                   WL      2,TIMEEX03
    4931 00019700                   WL      2,TIMEEX04
    4932 00019730                   WL      2,TIMEEX05
    4933 00019760                   WL      2,TIMEEX06
    4934 00019790                   WL      2,TIMEEX07
    4935 000197c0                   WL      2,TIMEEX08
    4936 000197f0                   WL      2,TIMEEX09
    4937 00019820     8002          .WORD   CANI_END
    4938                    
    4939 00019830           TIMEOUT_DISSOLVE_ANIM
    4940 00019830                   WL      2,TIMEDS01
    4941 00019860                   WL      2,TIMEDS02
    4942 00019890                   WL      2,TIMEDS03
    4943 000198c0                   WL      2,TIMEDS04
    4944 000198f0                   WL      2,TIMEDS05
    4945 00019920                   WL      2,TIMEDS06
    4946 00019950                   WL      2,TIMEDS07
    4947 00019980                   WL      2,TIMEDS08
    4948 000199b0     8002          .WORD   CANI_END
    4949                    
    4950 000199c0            SUBR   CREATE_DISQUAL
    4951                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  115

    4952 000199c0     09c0          MOVI    0c4h,A0
         000199d0     00c4  
    4953 000199e0     0d5f          CALLA   triple_sound
         000199f0 00000000! 
    4954                    
    4955 00019a10     09e0          MOVI    [200,0],A0
         00019a20 00c80000  
    4956 00019a40     09e1          MOVI    [300,0],A1
         00019a50 012c0000  
    4957 00019a70     09e2          MOVI    DISQUA09,A2
         00019a80 00000000! 
    4958 00019aa0     09c3          MOVI    1799H,A3
         00019ab0     1799  
    4959 00019ac0     09e4          movi    DMAWNZ|M_3D|M_SCRNREL,a4        ;DMA flags
         00019ad0 0000a102  
    4960 00019af0     56a5          CLR     A5
    4961 00019b00     56c6          CLR     A6
    4962 00019b10     56e7          CLR     A7
    4963 00019b20     0d5f          CALLA   BEGINOBJ
         00019b30 00000000! 
    4964 00019b50     09e0          MOVI    YSPEED,A0
         00019b60 00040000  
    4965 00019b80     03a0          NEG     A0
    4966 00019b90     b208          MOVE    A0,*A8(OYVEL),L
         00019ba0     0040  
    4967                    
    4968 00019bb0     09e9          MOVI    DISQUAL_DISSOLVE_ANIM,A9
         00019bc0 0001a310' 
    4969 00019be0     09cb          MOVI    12,A11
         00019bf0     000c  
    4970 00019c00     09ea          MOVI    DISQUA09,A10
         00019c10 00000000! 
    4971 00019c30                   CREATE  FX_PID,COPY_OBJ_AND_MOVE_UP
    4972                    
    4973 00019cb0                   SLEEP   50
    4974 00019d00     5600          CLR     A0
    4975 00019d10     b208          MOVE    A0,*A8(OYVEL),L
         00019d20     0040  
    4976 00019d30     09c0          MOVI    FX_PID,A0
         00019d40     0120  
    4977 00019d50     5621          CLR     A1
    4978 00019d60     03e1          NOT     A1
    4979 00019d70     0d5f          CALLA   KILALL
         00019d80 00000000! 
    4980                    
    4981 00019da0     1884          MOVK    4,A4
    4982 00019db0           LOOP_DISQUAL
    4983 00019db0                   PUSHP   A4
    4984                    
    4985 00019dc0     09e1          MOVI    DISQUAL_FLASH_ANIM,A1
         00019dd0 0001a150' 
    4986 00019df0     0d5f          calla   setup_back_anim
         00019e00 00000000! 
    4987 00019e20                   JSRP    ANIM_CROWD
    4988                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  116

    4989 00019e90     07a0          MOVE    @match_time,A0,L
         00019ea0 00000000! 
    4990 00019ec0     0b60          CMPI    90009H,A0
         00019ed0 fff6fff6  
    4991 00019ef0     ca11          JREQ    JUMP_OUT
    4992 00019f00                   PULLP   A4
    4993 00019f10     3ee4          DSJS    A4,LOOP_DISQUAL
    4994                    
    4995 00019f20     09c9          MOVI    110-(3*18),A9
         00019f30     0038  
    4996 00019f40           LOOK_FOR_IT
    4997 00019f40                   SLEEP   2
    4998 00019f90     07a0          MOVE    @match_time,A0,L
         00019fa0 00000000! 
    4999 00019fc0     0b60          CMPI    90009H,A0
         00019fd0 fff6fff6  
    5000 00019ff0     ca01          JREQ    JUMP_OUT
    5001 0001a000     3da9          DSJS    A9,LOOK_FOR_IT
    5002 0001a010           JUMP_OUT
    5003 0001a010     0d5f          CALLA   DELOBJA8
         0001a020 00000000! 
    5004 0001a040                   DIE
    5005                    
    5006 0001a070           HAVE_TO_MOVE_IT_TO
    5007 0001a070     b701          MOVE    *A8(OYVEL),A1,L
         0001a080     0040  
    5008 0001a090     b702          MOVE    *A8(OYVAL),A2,L
         0001a0a0     00a0  
    5009 0001a0b0     4022          ADD     A1,A2
    5010 0001a0c0     b248          MOVE    A2,*A8(OYVAL),L
         0001a0d0     00a0  
    5011 0001a0e0                   SLOOP   1,HAVE_TO_MOVE_IT_TO
    5012                    
    5013 0001a150           DISQUAL_FLASH_ANIM
    5014 0001a150                   WL      2,DISQUA01
    5015 0001a180                   WL      2,DISQUA02
    5016 0001a1b0                   WL      2,DISQUA03
    5017 0001a1e0                   WL      2,DISQUA04
    5018 0001a210                   WL      2,DISQUA05
    5019 0001a240                   WL      2,DISQUA06
    5020 0001a270                   WL      2,DISQUA07
    5021 0001a2a0                   WL      2,DISQUA08
    5022 0001a2d0                   WL      2,DISQUA09
    5023 0001a300     8002          .WORD   CANI_END
    5024                    
    5025 0001a310           DISQUAL_DISSOLVE_ANIM
    5026 0001a310                   WL      2,DISQDS01
    5027 0001a340                   WL      2,DISQDS02
    5028 0001a370                   WL      2,DISQDS03
    5029 0001a3a0                   WL      2,DISQDS04
    5030 0001a3d0                   WL      2,DISQDS05
    5031 0001a400                   WL      2,DISQDS06
    5032 0001a430                   WL      2,DISQDS07
    5033 0001a460                   WL      2,DISQDS08
    5034 0001a490     8002          .WORD   CANI_END
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  117

    5035                    
    5036 0001a4a0            SUBR   PIN_FLASH_ANIM
    5037                    
    5038 0001a4a0                   WL      2,PINHIM01
    5039 0001a4d0                   WL      2,PINHIM02
    5040 0001a500                   WL      2,PINHIM03
    5041 0001a530                   WL      2,PINHIM04
    5042 0001a560                   WL      2,PINHIM05
    5043 0001a590                   WL      2,PINHIM06
    5044 0001a5c0                   WL      2,PINHIM07
    5045 0001a5f0                   WL      2,PINHIM08
    5046 0001a620                   WL      20,PINHIM09
    5047 0001a650     8002          .WORD   CANI_END
    5048                    
    5049                    ***********
    5050                    *
    5051                    * Old:
    5052                    * returns lowest PLYRNUM on winning side (0 or 1 for plyrs, 2 for drones)
    5053                    * in a3.  increments p1rounds and p2rounds too.  (actually, it's okay to
    5054                    * return a 3 or a 4 if we want.  The code that calls this will work fine.
    5055                    * If this is the final battle, we add 2 instead of 1 to pXrounds.
    5056                    *
    5057                    * New:
    5058                    * returns lowest PLYRNUM on winning side, unless there was a pin, in which
    5059                    * case it returns the first wrestler on the winning side with his DID_PIN
    5060                    * flag set.
    5061                    *
    5062                    
    5063 0001a660            SUBRP  set_winner
    5064                    
    5065                            ;first, establish cause of death.  Choices are time running out
    5066                            ; and loss of all health.
    5067 0001a660     07ae          move    @match_time,a14,L
         0001a670 00000000! 
    5068 0001a690     ca42          jrz     bvhdtmout
    5069                    
    5070                            ;time didn't run out, so either someone was pinned, which should
    5071                            ; only happen if everyone on his team is dead, or the last living
    5072                            ; member of a team died by ring-out.  Search through the wrestlers
    5073                            ; and award victory to the first live one we find.
    5074 0001a6a0     09c0          movi    NUM_WRES,a0
         0001a6b0     0007  
    5075 0001a6c0     09e1          movi    process_ptrs,a1
         0001a6d0 00000000! 
    5076 0001a6f0     5663          clr     a3
    5077                    
    5078 0001a700     9622  bvhdloop0       move    *a1+,a2,L
    5079 0001a710     ca0a          jrz     bvhdnxt0                ;skip inactive
    5080                    
    5081 0001a720     b44e          move    *a2(PLYRMODE),a14
         0001a730     05c0  
    5082 0001a740     0b4e          cmpi    MODE_DEAD,a14
         0001a750     fff6  
    5083 0001a760     ca05          jreq    bvhdnxt0                ;skip dead
    5084                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  118

    5085                            ;got a live one.  if he pinned, use him.  if not, save his pointer
    5086                            ; in case we find no pinner, but keep looking
    5087 0001a770     b44e          move    *a2(STATUS_FLAGS),a14
         0001a780     0b50  
    5088 0001a790     1fce          btst    B_DID_PIN,a14
    5089 0001a7a0     cb0e          jrnz    bvhda2wins
    5090                    
    5091 0001a7b0     4c43          move    a2,a3
    5092                    
    5093 0001a7c0     3da0  bvhdnxt0        dsj     a0,bvhdloop0
    5094                    
    5095                            ;okay, nobody pinned.  did we find any live ones at all?
    5096 0001a7d0     4c62          move    a3,a2
    5097 0001a7e0     cb0a          jrnz    bvhda2wins              ;yes, we saved a non-pinner.
    5098                    
    5099                            ;trouble.  we didn't find any live wrestlers, and there definitely
    5100                            ; should have been one.  This is really bad and should never happen,
    5101                            ; but just in case it does, give the win to the first valid wrestler
    5102                            ; we can find.
    5103                            .if DEBUG
    5104                            LOCKUP
    5105                            .endif
    5106 0001a7f0     09c0  bvhdbogus       movi    NUM_WRES,a0
         0001a800     0007  
    5107 0001a810     09e1          movi    process_ptrs,a1
         0001a820 00000000! 
    5108                    
    5109 0001a840     9622  bvhdloop1       move    *a1+,a2,L
    5110 0001a850     ca01          jrz     bvhdnxt1                ;skip inactive
    5111                    
    5112                            ;got one
    5113 0001a860     c002          jruc    bvhda2wins
    5114                    
    5115 0001a870     3c80  bvhdnxt1        dsjs    a0,bvhdloop1
    5116                    
    5117                            ;good heavens!  no actives found at all!  no way is this ever gonna
    5118                            ; happen.  fuck it.  quit or something.
    5119 0001a880     c079          jruc    bvhdno_hits
    5120                    
    5121 0001a890           bvhda2wins      ;a2 is process of winner
    5122                            ;increment pXrounds
    5123 0001a890     09e0          movi    p1rounds,a0
         0001a8a0 00000000! 
    5124 0001a8c0     09c1          movi    01h,a1          ;match_winner value for p1 side winning
         0001a8d0     0001  
    5125 0001a8e0     b444          move    *a2(PLYR_SIDE),a4
         0001a8f0     05b0  
    5126 0001a900     ca05          jrz     bvhdrok
    5127 0001a910     09e0          movi    p2rounds,a0
         0001a920 00000000! 
    5128 0001a940     09c1          movi    02h,a1          ;match_winner value for p1 side winning
         0001a950     0002  
    5129 0001a960     8404  bvhdrok move    *a0,a4
    5130 0001a970     1024          inc     a4
    5131                    
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  119

    5132                            ;if this is the final match (or royal rumble), increment it again.
    5133 0001a980     1024          inc     a4              ;increment, then dec if we shouldn't have.
    5134 0001a990     0d5f          calla   is_8_on_1
         0001a9a0 00000000! 
    5135 0001a9c0     c805          jrc     bvhda4ok
    5136 0001a9d0     05ae          move    @royal_rumble,a14
         0001a9e0 00000000! 
    5137 0001aa00     cb01          jrnz    bvhda4ok
    5138 0001aa10     1424          dec     a4
    5139 0001aa20     8080  bvhda4ok        move    a4,*a0
    5140                    
    5141                            ;if pXwins == 2, set match_winner
    5142 0001aa30     0b44          cmpi    2,a4
         0001aa40     fffd  
    5143 0001aa50     cb03          jrne    bvhdno_mw
    5144 0001aa60     0581          move    a1,@match_winner
         0001aa70 00000000! 
    5145                    
    5146 0001aa90     b443  bvhdno_mw       move    *a2(PLYRNUM),a3
         0001aaa0     0580  
    5147 0001aab0     0960          rets
    5148                    
    5149 0001aac0           bvhdtmout       ;clock ran out on the round.  Award victory to the team with the
    5150                            ; highest average life points remaining.  In case of a tie, winner
    5151                            ; is the last team to land a hit.  If there have been no hits,
    5152                            ; we'll wanna drop out and go straight to game over, which I'll
    5153                            ; deal with later, probably by returning a -1 and letting the
    5154                            ; caller deal with it.
    5155                    
    5156                            ;If this was an 8-on-1 or 8-on-2 match, the CPU wins when time
    5157                            ; runs out.
    5158 0001aac0     07a2          move    @process_ptrs+40h,a2,L  ;first drone
         0001aad0 00000040! 
    5159 0001aaf0     0d5f          calla   is_8_on_1
         0001ab00 00000000! 
    5160 0001ab20     c8d6          jrc     bvhda2wins
    5161 0001ab30     05ae          move    @royal_rumble,a14
         0001ab40 00000000! 
    5162 0001ab60     cbd2          jrnz    bvhda2wins
    5163                    
    5164                            ;reggies:
    5165 0001ab70     5684          clr     a4      ;team 1 count
    5166 0001ab80     56a5          clr     a5      ;team 1 total
    5167 0001ab90     56c6          clr     a6      ;team 2 count
    5168 0001aba0     56e7          clr     a7      ;team 2 total
    5169                    
    5170 0001abb0     09c9          movi    NUM_WRES,a9
         0001abc0     0007  
    5171 0001abd0     09e8          movi    process_ptrs,a8
         0001abe0 00000000! 
    5172                    
    5173 0001ac00     970a  bvhdloop2       move    *a8+,a10,L
    5174 0001ac10     ca0d          jrz     bvhdnxt2                ;skip inactive
    5175                    
    5176 0001ac20     b541          move    *a10(PLYRNUM),a1
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  120

         0001ac30     0580  
    5177 0001ac40     0d5f          calla   get_health
         0001ac50 00005d40' 
    5178 0001ac70     b54e          move    *a10(PLYR_SIDE),a14
         0001ac80     05b0  
    5179 0001ac90     cb03          jrnz    bvhdt2
    5180                    
    5181                            ;on team 1
    5182 0001aca0     1024          inc     a4
    5183 0001acb0     4005          add     a0,a5
    5184 0001acc0     c002          jruc    bvhdnxt2
    5185                    
    5186 0001acd0           bvhdt2  ;on team 2
    5187 0001acd0     1026          inc     a6
    5188 0001ace0     4007          add     a0,a7
    5189                    
    5190 0001acf0     3e09  bvhdnxt2        dsj     a9,bvhdloop2
    5191                    
    5192                            ;compute the averages (we could check for the very likely case of
    5193                            ; the divisor being one, but there's no real need, as this is
    5194                            ; hardly a performance-critical event.)
    5195 0001ad00     5a85          divu    a4,a5
    5196 0001ad10     5ac7          divu    a6,a7
    5197                    
    5198 0001ad20     48a7          cmp     a5,a7
    5199 0001ad30     c416          jrlt    bvhdt1w
    5200 0001ad40     c717          jrgt    bvhdt2w
    5201                    
    5202 0001ad50           bvhdtie ;uh-oh.  Tie.  Find wrestler with most recent LAST_HIT_TIME and
    5203                            ; award the match to his team.  If everyone's LAST_HIT_TIME's are
    5204                            ; zero, nobody has landed a blow, so just quit to game over.
    5205                            ; LAST_HIT_TIME holds all 32 bits of PCNT, so we don't need to worry
    5206                            ; about wraparound.
    5207                    
    5208 0001ad50     09c9          movi    NUM_WRES,a9
         0001ad60     0007  
    5209 0001ad70     09e8          movi    process_ptrs,a8
         0001ad80 00000000! 
    5210 0001ada0     5600          clr     a0              ;current high LAST_HIT_TIME
    5211 0001adb0     5621          clr     a1              ;team with current high LAST_HIT_TIME
    5212                    
    5213 0001adc0     970a  bvhdloop4       move    *a8+,a10,L
    5214 0001add0     ca07          jrz     bvhdnxt4                ;skip inactive
    5215                    
    5216 0001ade0     b74e          move    *a10(LAST_HIT_TIME),a14,L
         0001adf0     0c50  
    5217 0001ae00     480e          cmp     a0,a14
    5218 0001ae10     c603          jrle    bvhdnxt4
    5219                    
    5220                            ;new champ.
    5221 0001ae20     4dc0          move    a14,a0
    5222 0001ae30     b541          move    *a10(PLYR_SIDE),a1
         0001ae40     05b0  
    5223                    
    5224 0001ae50     3d49  bvhdnxt4        dsj     a9,bvhdloop4
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  121

    5225                    
    5226 0001ae60                   TEST    a0
    5227 0001ae70     ca1a          jrz     bvhdno_hits
    5228 0001ae80                   TEST    a1
    5229 0001ae90     cb02          jrnz    bvhdt2w
    5230                            ;fall through to bvhdt1w
    5231                    
    5232 0001aea0           bvhdt1w ;team 1 wins
    5233 0001aea0     5684          clr     a4
    5234 0001aeb0     c001          jruc    bvhdfw
    5235                    
    5236 0001aec0           bvhdt2w ;team 2 wins
    5237 0001aec0     1824          movk    1,a4
    5238                    
    5239 0001aed0           bvhdfw  ;award win to first live wrestler with PLYR_SIDE equal to a4
    5240                    
    5241 0001aed0     18e0          movk    NUM_WRES,a0
    5242 0001aee0     09e1          movi    process_ptrs,a1
         0001aef0 00000000! 
    5243                    
    5244 0001af10     9622  bvhdloop3       move    *a1+,a2,L
    5245 0001af20     ca0c          jrz     bvhdnxt3                ;skip inactive
    5246                    
    5247 0001af30     b44e          move    *a2(PLYRMODE),a14
         0001af40     05c0  
    5248 0001af50     0b4e          cmpi    MODE_DEAD,a14
         0001af60     fff6  
    5249 0001af70     ca07          jreq    bvhdnxt3                ;skip dead
    5250                    
    5251 0001af80     b44e          move    *a2(PLYR_SIDE),a14
         0001af90     05b0  
    5252 0001afa0     49c4          cmp     a14,a4
    5253 0001afb0     cb03          jrne    bvhdnxt3                ;skip losers
    5254                    
    5255                            ;got one
    5256 0001afc0     b443          move    *a2(PLYRNUM),a3
         0001afd0     0580  
    5257 0001afe0     c08a          jruc    bvhda2wins
    5258                    
    5259 0001aff0     3de0  bvhdnxt3        dsj     a0,bvhdloop3
    5260                    
    5261                            ;good heavens.  we didn't find ANYONE from that team.  This is
    5262                            ; a major error that should never happen.  Deal with it as in
    5263                            ; the 'no live wrestlers found' case above.
    5264                            .if DEBUG
    5265                            LOCKUP
    5266                            .endif
    5267 0001b000     c000          jruc    bvhdbogus
         0001b010     ff7d  
    5268                    
    5269 0001b020           bvhdno_hits
    5270                            ;battle ended in a tie with neither side landing a blow.  drop
    5271                            ; out to game over.
    5272 0001b020     09c2          movi    -1,a2
         0001b030     ffff  
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  122

    5273 0001b040     0960          rets
    5274                    
    5275                    *****************************************************************************
    5276                    *
    5277                    * Clears a combo meter.
    5278                    * 0a13H = process of victim
    5279                    
    5280 0001b050            SUBR   clear_combo_meter
    5281                    
    5282 0001b050     b5a1          move    *a13(PLYR_SIDE),a1
         0001b060     05b0  
    5283 0001b070     b5ab          move    *a13(PLYRNUM),a11
         0001b080     0580  
    5284 0001b090     c000          jruc    zero_combo_meter
         0001b0a0     f679  
    5285                    
    5286                    *****************************************************************************
    5287                    *
    5288                    * Sets a combo meter to half-size.
    5289                    * 0a13H = process of victim
    5290                    
    5291 0001b0b0            SUBR   halve_combo_meter
    5292                    
    5293 0001b0b0     b5a1          move    *a13(PLYR_SIDE),a1
         0001b0c0     05b0  
    5294 0001b0d0     b5ab          move    *a13(PLYRNUM),a11
         0001b0e0     0580  
    5295 0001b0f0     09c9          movi    MD_SIZE,a9
         0001b100     0090  
    5296 0001b110     5e29          mpyu    a1,a9
    5297 0001b120     0b29          addi    meter_data,a9
         0001b130 000001c0- 
    5298 0001b150     b728          move    *a9(MD_COMBO),a8,L
         0001b160     0070  
    5299 0001b170     4d65          move    a11,a5
    5300 0001b180                   X64     a5              ;x by PLT_SIZE
    5301 0001b190     0b25          addi    life_data,a5
         0001b1a0 00000000- 
    5302 0001b1c0     1942          movk    10,a2
    5303 0001b1d0     c000          jruc    draw_combo_meter
         0001b1e0     f673  
    5304                    
    5305                    *****************************************************************************
    5306                    *
    5307                    * Clears a life bar.
    5308                    * 0a13H = process of victim
    5309                    
    5310 0001b1f0            SUBR   clear_lifebar
    5311                    
    5312 0001b1f0     b5a0          move    *a13(PLYRNUM),a0
         0001b200     0580  
    5313 0001b210                   X64     a0
    5314 0001b220     0b20          addi    life_data,a0
         0001b230 00000000- 
    5315 0001b250     57ce          clr     a14
TMS340 COFF Macro Assembler Version 6.10     Wed Nov 01 06:20:29 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

meters, names, messages, and scores                                  PAGE  123

    5316 0001b260     b1c0          move    a14,*a0(PLT_LIFE)
         0001b270     0000  
    5317                    
    5318 0001b280     b5a0          move    *a13(PLYR_SIDE),a0
         0001b290     05b0  
    5319 0001b2a0     0d3f          callr   update_meter
         0001b2b0     ea60  
    5320                    
    5321 0001b2c0     0960          rets
    5322                    
    5323                    ******************************************************************************
    5324                    
    5325                            .end

 No Errors,  No Warnings
